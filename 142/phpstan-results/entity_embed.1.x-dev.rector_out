modules/contrib/entity_embed/entity_embed.api.php
modules/contrib/entity_embed/src/Exception/RecursiveRenderingException.php
modules/contrib/entity_embed/tests/modules/entity_embed_test/entity_embed_test.module
modules/contrib/entity_embed/tests/src/Functional/EntityEmbedDisplayManagerTest.php
modules/contrib/entity_embed/src/Form/EntityEmbedDialog.php
modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterDisabledIntegrationsTest.php
modules/contrib/entity_embed/tests/modules/entity_embed_test/src/EntityEmbedTestTwigController.php
modules/contrib/entity_embed/entity_embed.install
modules/contrib/entity_embed/tests/src/Functional/EntityEmbedDialogTest.php
modules/contrib/entity_embed/tests/src/Functional/EntityEmbedEntityBrowserTest.php
modules/contrib/entity_embed/entity_embed.module
modules/contrib/entity_embed/tests/src/Functional/EntityEmbedHooksTest.php
modules/contrib/entity_embed/src/Annotation/EntityEmbedDisplay.php
modules/contrib/entity_embed/tests/src/Functional/EntityEmbedTestBase.php
modules/contrib/entity_embed/src/Entity/EntityEmbedFakeEntity.php
modules/contrib/entity_embed/src/EntityEmbedBuilder.php
modules/contrib/entity_embed/tests/src/Functional/EntityEmbedTwigTest.php
modules/contrib/entity_embed/src/EntityEmbedBuilderInterface.php
modules/contrib/entity_embed/src/EntityEmbedDisplay/EntityEmbedDisplayBase.php
modules/contrib/entity_embed/tests/src/Functional/EntityEmbedUpdateHookTest.php
modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterLegacyTest.php
modules/contrib/entity_embed/tests/src/Functional/EntityReferenceFieldFormatterTest.php
modules/contrib/entity_embed/src/EntityEmbedDisplay/EntityEmbedDisplayInterface.php
modules/contrib/entity_embed/src/EntityEmbedDisplay/EntityEmbedDisplayManager.php
modules/contrib/entity_embed/src/EntityEmbedDisplay/FieldFormatterEntityEmbedDisplayBase.php
modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterOverridesTest.php
modules/contrib/entity_embed/tests/src/Functional/FileFieldFormatterTest.php
modules/contrib/entity_embed/src/Exception/EntityNotFoundException.php
modules/contrib/entity_embed/tests/src/Functional/ImageFieldFormatterTest.php
modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterTest.php
modules/contrib/entity_embed/src/Plugin/CKEditorPlugin/DrupalEntity.php
modules/contrib/entity_embed/src/Plugin/Derivative/FieldFormatterDeriver.php
modules/contrib/entity_embed/tests/src/Functional/RecursionProtectionTest.php
modules/contrib/entity_embed/src/Plugin/Derivative/ViewModeDeriver.php
modules/contrib/entity_embed/src/Plugin/EmbedType/Entity.php
modules/contrib/entity_embed/tests/src/Functional/ViewModeFieldFormatterTest.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/ButtonAdminTest.php
modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterTestBase.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php
modules/contrib/entity_embed/src/Plugin/Filter/EntityEmbedFilter.php
modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterTranslationTest.php
modules/contrib/entity_embed/src/Plugin/entity_embed/EntityEmbedDisplay/EntityReferenceFieldFormatter.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/ConfigurationUiTest.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/ContentTranslationTest.php
modules/contrib/entity_embed/src/Plugin/entity_embed/EntityEmbedDisplay/FileFieldFormatter.php
modules/contrib/entity_embed/src/Plugin/entity_embed/EntityEmbedDisplay/ImageFieldFormatter.php
modules/contrib/entity_embed/src/Plugin/entity_embed/EntityEmbedDisplay/MediaImageDecorator.php
modules/contrib/entity_embed/src/Plugin/entity_embed/EntityEmbedDisplay/ViewModeFieldFormatter.php
modules/contrib/entity_embed/src/Twig/EntityEmbedTwigExtension.php
modules/contrib/entity_embed/tests/fixtures/update/entity_embed.update-hook-test.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/EntityEmbedDialogTest.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/EntityEmbedTestBase.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/ImageFieldFormatterTest.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/MediaImageTest.php
modules/contrib/entity_embed/tests/src/FunctionalJavascript/SortableTestTrait.php

25 files with changes
=====================

1) modules/contrib/entity_embed/entity_embed.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\FileInterface;
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Hooks provided by the Entity Embed module.
@@ @@
   $entity = $contexts['entity'];

   // For video and audio files, limit the available options to the media player.
-  if ($entity instanceof \Drupal\file\FileInterface && in_array($entity->bundle(), ['audio', 'video'])) {
+  if ($entity instanceof FileInterface && in_array($entity->bundle(), ['audio', 'video'])) {
     $definitions = array_intersect_key($definitions, array_flip(['file:jwplayer_formatter']));
   }

   // For images, use the image formatter.
-  if ($entity instanceof \Drupal\file\FileInterface && in_array($entity->bundle(), ['image'])) {
+  if ($entity instanceof FileInterface && in_array($entity->bundle(), ['image'])) {
     $definitions = array_intersect_key($definitions, array_flip(['image:image']));
   }

   // For nodes, use the default option.
-  if ($entity instanceof \Drupal\node\NodeInterface) {
+  if ($entity instanceof NodeInterface) {
     $definitions = array_intersect_key($definitions, array_flip(['entity_reference:entity_reference_entity_view']));
   }
 }
@@ @@
  * @param \Drupal\Core\Entity\EntityInterface $entity
  *   The entity object.
  */
-function hook_entity_embed_context_alter(array &$context, \Drupal\Core\Entity\EntityInterface $entity) {
+function hook_entity_embed_context_alter(array &$context, EntityInterface $entity) {
   if (isset($context['overrides']) && is_array($context['overrides'])) {
     foreach ($context['overrides'] as $key => $value) {
       $entity->key = $value;
@@ @@
  * @param \Drupal\Core\Entity\EntityInterface $entity
  *   The entity object.
  */
-function hook_ENTITY_TYPE_embed_context_alter(array &$context, \Drupal\Core\Entity\EntityInterface $entity) {
+function hook_ENTITY_TYPE_embed_context_alter(array &$context, EntityInterface $entity) {
   if (isset($context['overrides']) && is_array($context['overrides'])) {
     foreach ($context['overrides'] as $key => $value) {
       $entity->key = $value;
@@ @@
  * @param array $context
  *   The context array.
  */
-function hook_entity_embed_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, array &$context) {
+function hook_entity_embed_alter(array &$build, EntityInterface $entity, array &$context) {
   // Remove the contextual links.
   if (isset($build['#contextual_links'])) {
     unset($build['#contextual_links']);
@@ @@
  * @param array $context
  *   The context array.
  */
-function hook_ENTITY_TYPE_embed_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, array &$context) {
+function hook_ENTITY_TYPE_embed_alter(array &$build, EntityInterface $entity, array &$context) {
   // Remove the contextual links.
   if (isset($build['#contextual_links'])) {
     unset($build['#contextual_links']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterTranslationTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     ConfigurableLanguage::createFromLangcode('pt-br')->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterTestBase.php:58

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('node', 'node_access');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig('system');
@@ @@
     $this->assertNotEmpty($deleted_embed_warning);
     $this->assertHasAttributes($deleted_embed_warning[0], [
       'alt' => $expected_missing_text,
-      'src' => file_url_transform_relative(file_create_url('core/modules/media/images/icons/no-thumbnail.png')),
+      'src' => \Drupal::service('file_url_generator')->generateString('core/modules/media/images/icons/no-thumbnail.png'),
       'title' => $expected_missing_text,
     ]);
   }
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterOverridesTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('file', ['file_usage']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterLegacyTest.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig('system');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_embed/tests/src/Kernel/EntityEmbedFilterDisabledIntegrationsTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig('system');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_embed/src/Plugin/Filter/EntityEmbedFilter.php:157

    ---------- begin diff ----------
@@ @@
           }
           if (!$entity instanceof EntityInterface) {
             $missing_text = $this->t('Missing @type.', ['@type' => $this->entityTypeManager->getDefinition($entity_type)->getSingularLabel()]);
-            $entity_output = '<img src="' . file_url_transform_relative(file_create_url('core/modules/media/images/icons/no-thumbnail.png')) . '" width="180" height="180" alt="' . $missing_text . '" title="' . $missing_text . '"/>';
+            $entity_output = '<img src="' . \Drupal::service('file_url_generator')->generateString('core/modules/media/images/icons/no-thumbnail.png') . '" width="180" height="180" alt="' . $missing_text . '" title="' . $missing_text . '"/>';
             throw new EntityNotFoundException(sprintf('Unable to load embedded %s entity %s.', $entity_type, $id));
           }
         }
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_embed/src/Plugin/EmbedType/Entity.php:272

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getDefaultIconUrl() {
-    return file_create_url(drupal_get_path('module', 'entity_embed') . '/js/plugins/drupalentity/entity.png');
+    return \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('entity_embed') . '/js/plugins/drupalentity/entity.png');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_embed/src/Form/EntityEmbedDialog.php:414

    ---------- begin diff ----------
@@ @@
         $entity_label = $entity->toLink($entity->label(), 'canonical', $options)->toString();
       }
       elseif ($entity->getEntityTypeId() == 'file') {
-        $entity_label = '<a href="' . file_create_url($entity->getFileUri()) . '" target="_blank">' . $entity->label() . '</a>';
+        $entity_label = '<a href="' . \Drupal::service('file_url_generator')->generateAbsoluteString($entity->getFileUri()) . '" target="_blank">' . $entity->label() . '</a>';
       }
       else {
         $entity_label = '<a href="' . $entity->toUrl()->toString() . '" target="_blank">' . $entity->label() . '</a>';
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity_embed/tests/src/FunctionalJavascript/MediaImageTest.php:54

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Note that media_install() grants 'view media' to all users by default.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity_embed/tests/src/FunctionalJavascript/ImageFieldFormatterTest.php:62

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->button = $this->container->get('entity_type.manager')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entity_embed/tests/src/FunctionalJavascript/EntityEmbedDialogTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a page content type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/entity_embed/tests/src/FunctionalJavascript/ContentTranslationTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->translator = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/entity_embed/tests/src/FunctionalJavascript/ConfigurationUiTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $format = FilterFormat::create([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/entity_embed/tests/src/FunctionalJavascript/CKEditorIntegrationTest.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->button = $this->container->get('entity_type.manager')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/entity_embed/tests/src/FunctionalJavascript/ButtonAdminTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->container
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/entity_embed/tests/src/Functional/ImageFieldFormatterTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->image = $this->getTestFile('image');
     $this->file = $this->getTestFile('text');
@@ @@
     // when embed is successful.
     $this->assertSession()->responseContains($alt_text);
     $this->assertSession()->responseNotContains('This placeholder should not be rendered.');
-    $this->assertSession()->linkByHrefExists(file_url_transform_relative(file_create_url($this->image->getFileUri())), 0, 'Link to the embedded image exists.');
+    $this->assertSession()->linkByHrefExists(\Drupal::service('file_url_generator')->generateString($this->image->getFileUri()), 0, 'Link to the embedded image exists.');

     // Embed all three field types in one, to ensure they all render correctly.
     $content = '<drupal-entity data-entity-type="node" data-entity-uuid="' . $this->node->uuid() . '" data-entity-embed-display="entity_reference:entity_reference_label"></drupal-entity>';
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/entity_embed/tests/src/Functional/FileFieldFormatterTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->file = $this->getTestFile('text');
   }
@@ @@
     // Verify description of the embedded file exists in page.
     $this->assertSession()->responseContains($embed_settings['description']);
     $this->assertSession()->responseNotContains('This placeholder should not be rendered.');
-    $this->assertSession()->linkByHrefExists(file_url_transform_relative(file_create_url($this->file->getFileUri())), 0, 'Link to the embedded file exists.');
+    $this->assertSession()->linkByHrefExists(\Drupal::service('file_url_generator')->generateString($this->file->getFileUri()), 0, 'Link to the embedded file exists.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/entity_embed/tests/src/Functional/EntityReferenceFieldFormatterTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Add a new menu entity which does not has a view controller.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/entity_embed/tests/src/Functional/EntityEmbedUpdateHookTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $button = $this->container
       ->get('entity_type.manager')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/entity_embed/tests/src/Functional/EntityEmbedTwigTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     \Drupal::service('theme_installer')->install(['test_theme']);
   }
@@ @@
   public function testEntityEmbedTwigFunction() {
     // Test embedding a node using entity ID.
     $this->drupalGet('entity_embed_twig_test/id');
-    $this->assertText($this->node->body->value, 'Embedded node exists in page');
+    $this->assertSession()->pageTextContains($this->node->body->value);

     // Test 'Label' Entity Embed Display plugin.
     $this->drupalGet('entity_embed_twig_test/label_plugin');
-    $this->assertText($this->node->title->value, 'Title of the embedded node exists in page.');
-    $this->assertNoText($this->node->body->value, 'Body of embedded node does not exists in page when "Label" plugin is used.');
-    $this->assertLinkByHref('node/' . $this->node->id(), 0, 'Link to the embedded node exists when "Label" plugin is used.');
+    $this->assertSession()->pageTextContains($this->node->title->value);
+    $this->assertSession()->pageTextNotContains($this->node->body->value);
+    $this->assertSession()->linkByHrefExists('node/' . $this->node->id(), 0, 'Link to the embedded node exists when "Label" plugin is used.');

     // Test 'Label' Entity Embed Display plugin without linking to the node.
     $this->drupalGet('entity_embed_twig_test/label_plugin_no_link');
-    $this->assertText($this->node->title->value, 'Title of the embedded node exists in page.');
-    $this->assertNoText($this->node->body->value, 'Body of embedded node does not exists in page when "Label" plugin is used.');
-    $this->assertNoLinkByHref('node/' . $this->node->id(), 0, 'Link to the embedded node does not exists.');
+    $this->assertSession()->pageTextContains($this->node->title->value);
+    $this->assertSession()->pageTextNotContains($this->node->body->value);
+    $this->assertSession()->linkByHrefNotExists('node/' . $this->node->id(), 0, 'Link to the embedded node does not exists.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertLinkByHrefRector
 * AssertNoLinkByHrefRector
 * AssertNoTextRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/entity_embed/tests/src/Functional/EntityEmbedTestBase.php:49

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a page content type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/entity_embed/tests/src/Functional/EntityEmbedHooksTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->state = $this->container->get('state');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/entity_embed/tests/src/Functional/EntityEmbedDisplayManagerTest.php:57

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->imageButton = $this->container->get('entity_type.manager')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 25 files have been changed by Rector                                      

