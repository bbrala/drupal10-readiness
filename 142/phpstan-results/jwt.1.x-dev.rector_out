modules/contrib/jwt/jwt.install
modules/contrib/jwt/modules/jwt_path_auth/src/Authentication/Provider/JwtPathAuth.php
modules/contrib/jwt/modules/users_jwt/users_jwt.module
modules/contrib/jwt/src/Transcoder/JwtTranscoderInterface.php
modules/contrib/jwt/modules/jwt_auth_consumer/jwt_auth_consumer.module
modules/contrib/jwt/modules/jwt_auth_consumer/src/EventSubscriber/JwtAuthConsumerSubscriber.php
modules/contrib/jwt/src/Authentication/Event/JwtAuthBaseEvent.php
modules/contrib/jwt/tests/modules/jwt_test/src/Controller/TestContent.php
modules/contrib/jwt/src/Authentication/Event/JwtAuthEvents.php
modules/contrib/jwt/src/Authentication/Event/JwtAuthGenerateEvent.php
modules/contrib/jwt/tests/src/Functional/JwtAuthTest.php
modules/contrib/jwt/src/Authentication/Event/JwtAuthValidEvent.php
modules/contrib/jwt/modules/jwt_auth_issuer/jwt_auth_issuer.module
modules/contrib/jwt/modules/jwt_auth_issuer/src/Controller/JwtAuthIssuerController.php
modules/contrib/jwt/src/Authentication/Event/JwtAuthValidateEvent.php
modules/contrib/jwt/src/Authentication/Provider/JwtAuth.php
modules/contrib/jwt/modules/jwt_path_auth/src/Form/PathConfigForm.php
modules/contrib/jwt/modules/jwt_auth_issuer/src/EventSubscriber/JwtAuthIssuerSubscriber.php
modules/contrib/jwt/modules/users_jwt/src/Authentication/Provider/UsersJwtAuth.php
modules/contrib/jwt/src/Form/ConfigForm.php
modules/contrib/jwt/modules/users_jwt/src/Controller/KeyListController.php
modules/contrib/jwt/modules/users_jwt/src/Form/UsersGenerateKeyForm.php
modules/contrib/jwt/src/JsonWebToken/JsonWebToken.php
modules/contrib/jwt/tests/src/Functional/JwtPathAuthTest.php
modules/contrib/jwt/src/JsonWebToken/JsonWebTokenInterface.php
modules/contrib/jwt/src/PageCache/DisallowJwtAuthRequests.php
modules/contrib/jwt/src/Plugin/KeyType/JwtHsKeyType.php
modules/contrib/jwt/modules/users_jwt/src/Form/UsersKeyDeleteForm.php
modules/contrib/jwt/modules/users_jwt/src/Form/UsersKeyForm.php
modules/contrib/jwt/src/Plugin/KeyType/JwtRsKeyType.php
modules/contrib/jwt/src/Transcoder/JwtDecodeException.php
modules/contrib/jwt/modules/users_jwt/src/PageCache/UsersJwtRequestPolicy.php
modules/contrib/jwt/modules/users_jwt/src/UsersJwtKeyRepository.php
modules/contrib/jwt/src/Transcoder/JwtTranscoder.php
modules/contrib/jwt/modules/users_jwt/src/UsersJwtKeyRepositoryInterface.php
modules/contrib/jwt/modules/users_jwt/src/UsersKey.php
modules/contrib/jwt/tests/src/Kernel/BasicTest.php
modules/contrib/jwt/modules/users_jwt/tests/src/Functional/FormsTest.php
modules/contrib/jwt/tests/src/Kernel/RsaKeyTest.php
modules/contrib/jwt/tests/src/Kernel/UserAuthTest.php
modules/contrib/jwt/modules/users_jwt/tests/src/Kernel/UsersJwtRequestTest.php
modules/contrib/jwt/tests/src/Kernel/UserPathAuthTest.php

7 files with changes
====================

1) modules/contrib/jwt/src/Authentication/Provider/JwtAuth.php:70

    ---------- begin diff ----------
@@ @@

     $validate = new JwtAuthValidateEvent($jwt);
     // Signature is validated, but allow modules to do additional validation.
-    $this->eventDispatcher->dispatch(JwtAuthEvents::VALIDATE, $validate);
+    $this->eventDispatcher->dispatch($validate, JwtAuthEvents::VALIDATE);
     if (!$validate->isValid()) {
       return NULL;
     }

     $valid = new JwtAuthValidEvent($jwt);
-    $this->eventDispatcher->dispatch(JwtAuthEvents::VALID, $valid);
+    $this->eventDispatcher->dispatch($valid, JwtAuthEvents::VALID);
     $user = $valid->getUser();

     if (!$user) {
@@ @@
    */
   public function generateToken() {
     $event = new JwtAuthGenerateEvent(new JsonWebToken());
-    $this->eventDispatcher->dispatch(JwtAuthEvents::GENERATE, $event);
+    $this->eventDispatcher->dispatch($event, JwtAuthEvents::GENERATE);
     $jwt = $event->getToken();
     return $this->transcoder->encode($jwt);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


2) modules/contrib/jwt/src/Authentication/Event/JwtAuthBaseEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jwt\Authentication\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\jwt\JsonWebToken\JsonWebTokenInterface;

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/jwt/tests/src/Kernel/UserPathAuthTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/jwt/tests/src/Kernel/RsaKeyTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');

@@ @@
     /** @var \Drupal\jwt\Transcoder\JwtTranscoderInterface $transcoder */
     $transcoder = $this->container->get('jwt.transcoder');
     $decoded_jwt = $transcoder->decode($token);
-    $this->assertEqual($account->id(), $decoded_jwt->getClaim(['drupal', 'uid']));
+    $this->assertEquals($account->id(), $decoded_jwt->getClaim(['drupal', 'uid']));
     // Test decoding with the matched and mis-matched public keys.
-    $path = drupal_get_path('module', 'jwt_test') . '/fixtures/jwt_test_rsa-public.pem';
+    $path = \Drupal::service('extension.list.module')->getPath('jwt_test') . '/fixtures/jwt_test_rsa-public.pem';
     $public_key = file_get_contents($path);
     $payload = JWT::decode($token, $public_key, ['RS256']);
-    $this->assertEqual($account->id(), $payload->drupal->uid);
-    $path = drupal_get_path('module', 'jwt_test') . '/fixtures/jwt_test_rsa2-public.pem';
+    $this->assertEquals($account->id(), $payload->drupal->uid);
+    $path = \Drupal::service('extension.list.module')->getPath('jwt_test') . '/fixtures/jwt_test_rsa2-public.pem';
     $public_key = file_get_contents($path);
     $this->expectException(SignatureInvalidException::class);
     $payload = JWT::decode($token, $public_key, ['RS256']);
@@ @@
     $config->set('algorithm', 'RS256');
     $config->set('key_id', 'jwt_test_rsa2');
     $config->save();
-    $path = drupal_get_path('module', 'jwt_test') . '/fixtures/jwt_test_rsa2-private.pem';
+    $path = \Drupal::service('extension.list.module')->getPath('jwt_test') . '/fixtures/jwt_test_rsa2-private.pem';
     $private_key = file_get_contents($path);
     $exp = \Drupal::time()->getRequestTime() + 1000;
     $payload = [
@@ @@
     /** @var \Drupal\jwt\Transcoder\JwtTranscoderInterface $transcoder */
     $transcoder = $this->container->get('jwt.transcoder');
     $decoded_jwt = $transcoder->decode($token);
-    $this->assertEqual(999, $decoded_jwt->getClaim(['test', 'uid']));
-    $this->assertEqual($exp, $decoded_jwt->getClaim('exp'));
+    $this->assertEquals(999, $decoded_jwt->getClaim(['test', 'uid']));
+    $this->assertEquals($exp, $decoded_jwt->getClaim('exp'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * DrupalGetPathRector
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/jwt/tests/src/Kernel/BasicTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installConfig(['key', 'jwt', 'jwt_test']);
   }
@@ @@
     $key_repository = $this->container->get('key.repository');
     $key_hmac = $key_repository->getKey('jwt_test_hmac');
     $this->assertNotEmpty($key_hmac);
-    $this->assertEqual('jwt_hs', $key_hmac->getKeyType()->getPluginId());
+    $this->assertEquals('jwt_hs', $key_hmac->getKeyType()->getPluginId());
     $key_rsa = $key_repository->getKey('jwt_test_rsa');
     $this->assertNotEmpty($key_rsa);
-    $this->assertEqual('jwt_rs', $key_rsa->getKeyType()->getPluginId());
+    $this->assertEquals('jwt_rs', $key_rsa->getKeyType()->getPluginId());
     // The jwt_test module configures the jwt_test_hmac key to be used.
     /** @var \Drupal\jwt\Transcoder\JwtTranscoderInterface $transcoder */
     $transcoder = $this->container->get('jwt.transcoder');
@@ @@
     $reflected = new \ReflectionClass($transcoder);
     $algorithm = $reflected->getProperty('algorithm');
     $algorithm->setAccessible(TRUE);
-    $this->assertEqual('HS256', $algorithm->getValue($transcoder));
+    $this->assertEquals('HS256', $algorithm->getValue($transcoder));
     $jwt = new JsonWebToken();
     $jwt->setClaim(['drupal', 'test'], 1234);
     $encoded = $transcoder->encode($jwt);
@@ @@
     $this->assertNotEmpty($encoded);
     $this->assertTrue(is_string($encoded));
     $decoded_jwt = $transcoder->decode($encoded);
-    $this->assertEqual(1234, $decoded_jwt->getClaim(['drupal', 'test']));
+    $this->assertEquals(1234, $decoded_jwt->getClaim(['drupal', 'test']));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/jwt/tests/src/Functional/JwtPathAuthTest.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser(['administer jwt', 'access content']);
@@ @@
     $edit = [
       'allowed_path_prefixes' => "/system/files/\nzzz",
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('Paths must start with a slash.');
+    $this->submitForm($edit, 'Save configuration');
+    $this->assertSession()->pageTextContains('Paths must start with a slash.');
     $edit = [
       'allowed_path_prefixes' => "/system/files/\r\n/foo/zzz/ \r\n/entity/file/",
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');
     $config = $this->config('jwt_path_auth.config');
     $expected = ['/system/files/', '/foo/zzz/', '/entity/file/'];
     $this->assertSame($expected, $config->get('allowed_path_prefixes'));
@@ @@
     $file_real_path = $file_system->realpath($file->getFileUri());
     $this->assertFileExists($file_real_path);
     $this->drupalGet($file->createFileUrl());
-    $this->assertResponse(200);
-    $this->assertText($this->getFileContent($file));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($this->getFileContent($file));
     // Make sure the logged-in user can access the REST resource. The path
     // should be '/entity/file/' . $file->id().
     $options = [
@@ @@
     ];
     $file_rest_url = Url::fromRoute('rest.entity.file.GET', ['file' => $file->id()], $options);
     $this->drupalGet($file_rest_url);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalLogout();
     // Expect a 403 when not authenticated.
     $this->drupalGet($file->createFileUrl());
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // When Drupal is in a subdirectory (such as drupal.org testbot) any
     // path in the JWT other than a "/" must bre prefixed with the base
     // path - the system does not expect the client to know where Drupal
@@ @@
     ];
     // Make a real request with the token in the query string.
     $this->drupalGet($file->createFileUrl(), $options);
-    $this->assertResponse(200);
-    $this->assertText($this->getFileContent($file));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains($this->getFileContent($file));
     // If the path claim on the JWT doesn't match, access should be denied.
     $jwt = new JsonWebToken();
     $jwt->setClaim(['drupal', 'path_auth', 'uid'], $this->adminUser->id());
@@ @@
       ],
     ];
     $this->drupalGet($file->createFileUrl(), $options);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Making a REST api request with no JWT should be denied.
     $options = [
       'query' => [
@@ @@
     ];
     $file_rest_url = Url::fromRoute('rest.entity.file.GET', ['file' => $file->id()], $options);
     $this->drupalGet($file_rest_url);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Token path does not match, should still be 403.
     $options = [
       'query' => [
@@ @@
     ];
     $file_rest_url = Url::fromRoute('rest.entity.file.GET', ['file' => $file->id()], $options);
     $this->drupalGet($file_rest_url);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
     // Create a new token matching the request path prefix.
     $jwt = new JsonWebToken();
     $jwt->setClaim(['drupal', 'path_auth', 'uid'], $this->adminUser->id());
@@ @@
     ];
     $file_rest_url = Url::fromRoute('rest.entity.file.GET', ['file' => $file->id()], $options);
     $this->drupalGet($file_rest_url);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $json = $this->getSession()->getPage()->getContent();
     $data = json_decode($json, TRUE);
     $this->assertEquals($file->uuid(), $data['uuid'][0]['value']);
@@ @@
     $this->adminUser->block();
     $this->adminUser->save();
     $this->drupalGet($file_rest_url);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/jwt/tests/src/Functional/JwtAuthTest.php:52

    ---------- begin diff ----------
@@ @@
     $auth = $this->container->get('jwt.authentication.jwt');
     $token = $auth->generateToken();
     $decoded_jwt = $transcoder->decode($token);
-    $this->assertEqual($account->id(), $decoded_jwt->getClaim(['drupal', 'uid']));
+    $this->assertEquals($account->id(), $decoded_jwt->getClaim(['drupal', 'uid']));
     foreach (['jwt_test.11.1', 'jwt_test.11.2'] as $route_name) {
       $url = Url::fromRoute($route_name);
       foreach (['Authorization', 'JWT-Authorization'] as $header_name) {
@@ @@
     // cache if jwt credentials are provided.
     $url = Url::fromRoute('jwt_test.10');
     $this->drupalGet($url);
-    $this->assertEqual($this->drupalGetHeader('X-Drupal-Cache'), 'MISS');
+    $this->assertEquals($this->drupalGetHeader('X-Drupal-Cache'), 'MISS');
     $this->drupalGet($url);
-    $this->assertEqual($this->drupalGetHeader('X-Drupal-Cache'), 'HIT');
+    $this->assertEquals($this->drupalGetHeader('X-Drupal-Cache'), 'HIT');
     foreach (['Authorization', 'JWT-Authorization'] as $header_name) {
       $headers = [
         $header_name => 'Bearer ' . $token,
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

