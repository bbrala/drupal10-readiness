modules/contrib/cas_server/cas_server.install
modules/contrib/cas_server/src/Exception/TicketMissingException.php
modules/contrib/cas_server/tests/src/Kernel/ConfigHelperTest.php
modules/contrib/cas_server/src/Exception/TicketTypeException.php
modules/contrib/cas_server/src/Form/CasServerSettings.php
modules/contrib/cas_server/cas_server.module
modules/contrib/cas_server/src/CasServerServiceInterface.php
modules/contrib/cas_server/src/Configuration/ConfigHelper.php
modules/contrib/cas_server/tests/src/Unit/Controller/TicketValidationControllerTest.php
modules/contrib/cas_server/src/Controller/ProxyController.php
modules/contrib/cas_server/src/Form/ServicesDeleteForm.php
modules/contrib/cas_server/src/Form/ServicesForm.php
modules/contrib/cas_server/src/Controller/ServicesListBuilder.php
modules/contrib/cas_server/src/Controller/TicketValidationController.php
modules/contrib/cas_server/src/Form/UserLogin.php
modules/contrib/cas_server/tests/src/Unit/TestTicketValidationController.php
modules/contrib/cas_server/src/Logger/DebugLogger.php
modules/contrib/cas_server/src/RedirectResponse.php
modules/contrib/cas_server/src/Tests/ProxyControllerTest.php
modules/contrib/cas_server/src/Controller/UserActionController.php
modules/contrib/cas_server/src/Tests/TicketValidationTest.php
modules/contrib/cas_server/src/Entity/CasServerService.php
modules/contrib/cas_server/src/Event/CASAttributesAlterEvent.php
modules/contrib/cas_server/src/Event/CasServerTicketAlterEvent.php
modules/contrib/cas_server/src/EventSubscriber/CASAttributeAlterEventSubscriber.php
modules/contrib/cas_server/src/Tests/UserActionControllerTest.php
modules/contrib/cas_server/src/Tests/UserLoginFormTest.php
modules/contrib/cas_server/src/Ticket/DatabaseTicketStorage.php
modules/contrib/cas_server/src/Ticket/ProxyGrantingTicket.php
modules/contrib/cas_server/src/Ticket/ProxyTicket.php
modules/contrib/cas_server/src/Ticket/ServiceTicket.php
modules/contrib/cas_server/src/Ticket/Ticket.php
modules/contrib/cas_server/src/Ticket/TicketFactory.php
modules/contrib/cas_server/src/Ticket/TicketGrantingTicket.php
modules/contrib/cas_server/src/Ticket/TicketStorageInterface.php

10 files with changes
=====================

1) modules/contrib/cas_server/tests/src/Unit/Controller/TicketValidationControllerTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $this->ticketFactory = $this->getMockBuilder('Drupal\cas_server\Ticket\TicketFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->ticketFactory = $this->createMock('Drupal\cas_server\Ticket\TicketFactory');

-    $this->pgt = $this->getMockBuilder('Drupal\cas_server\Ticket\ProxyGrantingTicket')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->pgt = $this->createMock('Drupal\cas_server\Ticket\ProxyGrantingTicket');

-    $this->ticketStore = $this->getMockBuilder('Drupal\cas_server\Ticket\TicketStorageInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->ticketStore = $this->createMock('Drupal\cas_server\Ticket\TicketStorageInterface');

   }

@@ @@
   public function proxyCallbackSuccessDataProvider() {

     $urls = ['https://example.com', 'https://example.com/bar?q=foo'];
-    $st = $this->getMockBuilder('Drupal\cas_server\Ticket\ServiceTicket')
-               ->disableOriginalConstructor()
-               ->getMock();
-    $pt = $this->getMockBuilder('Drupal\cas_server\Ticket\ProxyTicket')
-               ->disableOriginalConstructor()
-               ->getMock();
+    $st = $this->createMock('Drupal\cas_server\Ticket\ServiceTicket');
+    $pt = $this->createMock('Drupal\cas_server\Ticket\ProxyTicket');

     return [
       [$urls[0], $st],
@@ @@
       ->method('getId')
       ->will($this->returnValue('thisisapgtid'));

-    $st = $this->getMockBuilder('Drupal\cas_server\Ticket\ServiceTicket')
-               ->disableOriginalConstructor()
-               ->getMock();
+    $st = $this->createMock('Drupal\cas_server\Ticket\ServiceTicket');

     $controller = new TestTicketValidationController($client, $this->ticketFactory, $this->ticketStore);
     $this->assertFalse($controller->callProxyCallback($url, $st));
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cas_server/tests/src/Kernel/ConfigHelperTest.php:13

    ---------- begin diff ----------
@@ @@

   public static $modules = ['cas_server'];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['cas_server']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cas_server/src/Event/CasServerTicketAlterEvent.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\cas_server\Event;


+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas_server\Ticket\Ticket;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;

 class CasServerTicketAlterEvent extends Event {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cas_server/src/Event/CASAttributesAlterEvent.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\cas_server\Event;


+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cas_server\Ticket\ServiceTicket;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;

 class CASAttributesAlterEvent extends Event {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/cas_server/src/Controller/TicketValidationController.php:507

    ---------- begin diff ----------
@@ @@

     $event = new CASAttributesAlterEvent($account, $ticket);

-    $this->eventDispatcher->dispatch(CASAttributesAlterEvent::CAS_ATTRIBUTES_ALTER_EVENT, $event);
+    $this->eventDispatcher->dispatch($event, CASAttributesAlterEvent::CAS_ATTRIBUTES_ALTER_EVENT);

     $attributes = $event->getAttributes();
     if ($format == 'xml') {
@@ @@

     $account = $this->loadUser($ticket->getUid());
     $event = new CASAttributesAlterEvent($account, $ticket);
-    $this->eventDispatcher->dispatch(CASAttributesAlterEvent::CAS_ATTRIBUTES_ALTER_EVENT, $event);
+    $this->eventDispatcher->dispatch($event, CASAttributesAlterEvent::CAS_ATTRIBUTES_ALTER_EVENT);

     if ($format == 'xml') {
       $response_text = "<cas:serviceResponse xmlns:cas='http://www.yale.edu/tp/cas'>
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


6) modules/contrib/cas_server/src/Ticket/TicketFactory.php:86

    ---------- begin diff ----------
@@ @@

     $pgt = new ProxyGrantingTicket($id, $expiration_time, $session, $uid, $name, $proxy_chain);
     $event = new CasServerTicketAlterEvent($pgt);
-    $this->eventDispatcher->dispatch(CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT, $event);
+    $this->eventDispatcher->dispatch($event, CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT);
     $this->ticketStore->storeProxyGrantingTicket($pgt);

     return $pgt;
@@ @@

     $st = new ServiceTicket($id, $expiration_time, $session, $uid, $name, $service_string, $renew);
     $event = new CasServerTicketAlterEvent($st);
-    $this->eventDispatcher->dispatch(CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT, $event);
+    $this->eventDispatcher->dispatch($event, CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT);
     $this->ticketStore->storeServiceTicket($st);

     return $st;
@@ @@

     $pt = new ProxyTicket($id, $expiration_time, $session, $uid, $name, $service_string, $renew, $proxy_chain);
     $event = new CasServerTicketAlterEvent($pt);
-    $this->eventDispatcher->dispatch(CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT, $event);
+    $this->eventDispatcher->dispatch($event, CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT);
     $this->ticketStore->storeProxyTicket($pt);

     return $pt;
@@ @@

     $tgt = new TicketGrantingTicket($id, $expiration_time, $session, $uid, $name);
     $event = new CasServerTicketAlterEvent($tgt);
-    $this->eventDispatcher->dispatch(CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT, $event);
+    $this->eventDispatcher->dispatch($event, CasServerTicketAlterEvent::CAS_SERVER_TICKET_ALTER_EVENT);
     $this->ticketStore->storeTicketGrantingTicket($tgt);

     return $tgt;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


7) modules/contrib/cas_server/src/Tests/UserLoginFormTest.php:17

    ---------- begin diff ----------
@@ @@

   public static $modules = ['cas_server'];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->exampleUser = $this->drupalCreateUser([], 'exampleUserName');
@@ @@
       'username' => $this->exampleUser->getAccountName(),
       'password' => $this->exampleUser->pass_raw + 'foadasd',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Submit'));
+    $this->submitForm($edit, t('Submit'));

     $this->assertTrue(empty($this->cookies['cas_tgc']));
-    $this->assertResponse(200);
-    $this->assertText('Bad username/password combination given.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('Bad username/password combination given.');

   }

@@ @@
       'username' => $this->exampleUser->getAccountName(),
       'password' => $this->exampleUser->pass_raw,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Submit'));
+    $this->submitForm($edit, t('Submit'));

     $this->assertTrue(!empty($this->cookies['cas_tgc']));
-    $this->assertResponse(200);
-    $this->assertText('You are logged in to CAS single sign on.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('You are logged in to CAS single sign on.');

   }

@@ @@
       'username' => $this->exampleUser->getAccountName(),
       'password' => $this->exampleUser->pass_raw,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Submit'));
+    $this->submitForm($edit, t('Submit'));

-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertTrue(empty($this->cookies['cas_tgc']));
-    $this->assertText('Login ticket invalid. Please try again');
+    $this->assertSession()->pageTextContains('Login ticket invalid. Please try again');
     
   }

@@ @@
       'username' => $this->exampleUser->getAccountName(),
       'password' => $this->exampleUser->pass_raw,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Submit'));
+    $this->submitForm($edit, t('Submit'));

     $this->assertTrue(!empty($this->cookies['cas_tgc']));
-    $this->assertResponse(200);
-    $this->assertEqual($this->redirectCount, 2);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertEquals($this->redirectCount, 2);

     $ticket = $this->connection->select('cas_server_ticket_store', 'c')
       ->fields('c', array('id'))
@@ @@
       ->fetch();
     $tid = $ticket->id;

-    $this->assertUrl('cas/validate', ['query' => ['ticket' => $tid]]);
+    $this->assertSession()->addressEquals('cas/validate', ['query' => ['ticket' => $tid]]);

   }

@@ @@
       'username' => $this->exampleUser->getAccountName(),
       'password' => $this->exampleUser->pass_raw,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Submit'));
+    $this->submitForm($edit, t('Submit'));

     $this->assertTrue(empty($this->cookies['cas_tgc']));
-    $this->assertResponse(200);
-    $this->assertEqual($this->redirectCount, 2);
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertEquals($this->redirectCount, 2);

     $ticket = $this->connection->select('cas_server_ticket_store', 'c')
       ->fields('c', array('id'))
@@ @@
       ->fetch();
     $tid = $ticket->id;

-    $this->assertUrl('cas/validate', ['query' => ['ticket' => $tid]]);
+    $this->assertSession()->addressEquals('cas/validate', ['query' => ['ticket' => $tid]]);

   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertResponseRector
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/cas_server/src/Tests/UserActionControllerTest.php:17

    ---------- begin diff ----------
@@ @@

   public static $modules = ['cas_server'];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->exampleUser = $this->drupalCreateUser([], 'exampleUserName');
@@ @@

     $this->drupalGet('cas/logout');
     $this->assertFalse($this->drupalUserIsLoggedIn($this->exampleUser));
-    $this->assertText('You have been logged out');
-    $this->assertEqual($this->cookies['cas_tgc']['value'], 'deleted');
+    $this->assertSession()->pageTextContains('You have been logged out');
+    $this->assertEquals($this->cookies['cas_tgc']['value'], 'deleted');

     $tickets = $this->connection->select('cas_server_ticket_store', 'c')
       ->fields('c', array('id'))
@@ @@
     $service = Url::fromRoute('cas_server.validate1');
     $service->setAbsolute();
     $this->drupalGet('cas/login', ['query' => ['service' => $service->toString(), 'ticket' => 'foo']]);
-    $this->assertUrl('cas/validate', ['query' => ['ticket' => 'foo']]); 
-    $this->assertEqual($this->redirectCount, 1);
+    $this->assertSession()->addressEquals('cas/validate', ['query' => ['ticket' => 'foo']]); 
+    $this->assertEquals($this->redirectCount, 1);
   }

   /**
@@ @@
    */
   public function testInvalidServiceMessage() {
     $this->drupalGet('cas/login', ['query' => ['service' => 'https://bar.example.com']]);
-    $this->assertText('You have not requested a valid service');
-    $this->assertResponse(200);
+    $this->assertSession()->pageTextContains('You have not requested a valid service');
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
   public function testAlreadyLoggedIn() {
     $this->drupalLogin($this->exampleUser);
     $this->drupalGet('cas/login');
-    $this->assertResponse(200);
-    $this->assertText('You are logged in to CAS single sign on');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('You are logged in to CAS single sign on');
   }

   /**
@@ @@
    */
   public function testNoServiceNoSession() {
     $this->drupalGet('cas/login');
-    $this->assertResponse(200);
-    $this->assertFieldByName('username');
-    $this->assertFieldByName('password');
-    $this->assertFieldByName('lt');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldExists('username');
+    $this->assertSession()->fieldExists('password');
+    $this->assertSession()->fieldExists('lt');
   }

   /**
@@ @@
    */
   public function testServiceNoSession() {
     $this->drupalGet('cas/login', ['query' => ['service' => 'https://foo.example.com']]);
-    $this->assertResponse(200);
-    $this->assertFieldByName('username');
-    $this->assertFieldByName('password');
-    $this->assertFieldByName('lt');
-    $this->assertFieldByName('service', 'https://foo.example.com');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->fieldExists('username');
+    $this->assertSession()->fieldExists('password');
+    $this->assertSession()->fieldExists('lt');
+    $this->assertSession()->fieldValueEquals('service', 'https://foo.example.com');
   }

   /**
@@ @@
     $service = Url::fromRoute('cas_server.validate1');
     $service->setAbsolute();
     $this->drupalGet('cas/login', ['query' => ['service' => $service->toString(), 'gateway' => 'true']]);
-    $this->assertUrl('cas/validate', []); 
-    $this->assertEqual($this->redirectCount, 1);
+    $this->assertSession()->addressEquals('cas/validate', []); 
+    $this->assertEquals($this->redirectCount, 1);
   }

   /**
@@ @@
     $service = Url::fromRoute('cas_server.validate1');
     $service->setAbsolute();
     $this->drupalGet('cas/login', ['query' => ['service' => $service->toString()]]);
-    $this->assertEqual($this->redirectCount, 1);
+    $this->assertEquals($this->redirectCount, 1);
     
     $ticket = $this->connection->select('cas_server_ticket_store', 'c')
       ->fields('c', array('id'))
@@ @@
       ->fetch();
     $tid = $ticket->id;

-    $this->assertUrl('cas/validate', ['query' => ['ticket' => $tid]]);
+    $this->assertSession()->addressEquals('cas/validate', ['query' => ['ticket' => $tid]]);
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertResponseRector
 * AssertTextRector
 * AssertUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/cas_server/src/Tests/TicketValidationTest.php:14

    ---------- begin diff ----------
@@ @@

   public static $modules = ['cas_server'];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->exampleUser = $this->drupalCreateUser([], 'exampleUserName');
@@ @@
     // Protocol version 2
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/serviceValidate', ['query' => ['pgtUrl' => $mangled_pgt_callback, 'service' => $service, 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_PROXY_CALLBACK">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_PROXY_CALLBACK">');
+    $this->assertSession()->statusCodeEquals(200);

     // Protocol version 3
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/p3/serviceValidate', ['query' => ['pgtUrl' => $mangled_pgt_callback, 'service' => $service, 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_PROXY_CALLBACK">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_PROXY_CALLBACK">');
+    $this->assertSession()->statusCodeEquals(200);
 }

   /**
@@ @@
     // Protocol version 1
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/validate', ['query' => ['renew' => 'true', 'service' => $service, 'ticket' => $st->getId()]]);
-    $this->assertText('no');
-    $this->assertNoRaw('html');
-    $this->assertResponse(200);
+    $this->assertSession()->pageTextContains('no');
+    $this->assertSession()->responseNotContains('html');
+    $this->assertSession()->statusCodeEquals(200);
     
     // Protocol version 2
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/serviceValidate', ['query' => ['renew' => 'true', 'service' => $service, 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET">');
-    $this->assertText('renew');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET">');
+    $this->assertSession()->pageTextContains('renew');
+    $this->assertSession()->statusCodeEquals(200);

     // Protocol version 3
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/p3/serviceValidate', ['query' => ['renew' => 'true', 'service' => $service, 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET">');
-    $this->assertText('renew');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET">');
+    $this->assertSession()->pageTextContains('renew');
+    $this->assertSession()->statusCodeEquals(200);
 }


@@ @@
     // Protocol version 1
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/validate', ['query' => ['service' => $service . 'adfasd', 'ticket' => $st->getId()]]);
-    $this->assertText('no');
-    $this->assertNoRaw('html');
-    $this->assertResponse(200);
+    $this->assertSession()->pageTextContains('no');
+    $this->assertSession()->responseNotContains('html');
+    $this->assertSession()->statusCodeEquals(200);
     
     // Protocol version 2
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/serviceValidate', ['query' => ['service' => $service . 'adasdf', 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_SERVICE">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_SERVICE">');
+    $this->assertSession()->statusCodeEquals(200);

     // Protocol version 3
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/p3/serviceValidate', ['query' => ['service' => $service . 'adfasdf', 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_SERVICE">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_SERVICE">');
+    $this->assertSession()->statusCodeEquals(200);
 }

   /**
@@ @@
     // Protocol version 1
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/validate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);
-    $this->assertText('no');
-    $this->assertNoRaw('html');
-    $this->assertResponse(200);
+    $this->assertSession()->pageTextContains('no');
+    $this->assertSession()->responseNotContains('html');
+    $this->assertSession()->statusCodeEquals(200);
     
     // Protocol version 2
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET">');
-    $this->assertText('expired');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET">');
+    $this->assertSession()->pageTextContains('expired');
+    $this->assertSession()->statusCodeEquals(200);

     // Protocol version 3
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/p3/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET">');
-    $this->assertText('expired');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET">');
+    $this->assertSession()->pageTextContains('expired');
+    $this->assertSession()->statusCodeEquals(200);
 }

   /**
@@ @@
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->ticketStore->deleteServiceTicket($st);
     $this->drupalGet('cas/validate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);
-    $this->assertText('no');
-    $this->assertNoRaw('html');
-    $this->assertResponse(200);
+    $this->assertSession()->pageTextContains('no');
+    $this->assertSession()->responseNotContains('html');
+    $this->assertSession()->statusCodeEquals(200);
     
     // Protocol version 2
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->ticketStore->deleteServiceTicket($st);
     $this->drupalGet('cas/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET">');
+    $this->assertSession()->statusCodeEquals(200);

     // Protocol version 3
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->ticketStore->deleteServiceTicket($st);
     $this->drupalGet('cas/p3/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET">');
+    $this->assertSession()->statusCodeEquals(200);
 }

   /**
@@ @@
     // Protocol version 2
     $st = $this->ticketFactory->createProxyTicket($service, FALSE, [], 'foo', $this->exampleUser->id(), $this->ticketFactory->getUsernameAttribute($this->exampleUser));
     $this->drupalGet('cas/proxyValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationSuccess>');
-    $this->assertRaw('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationSuccess>');
+    $this->assertSession()->responseContains('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
+    $this->assertSession()->statusCodeEquals(200);

     // Protocol version 3
     $st = $this->ticketFactory->createProxyTicket($service, FALSE, [], 'foo', $this->exampleUser->id(), $this->ticketFactory->getUsernameAttribute($this->exampleUser));
     $this->drupalGet('cas/p3/proxyValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationSuccess');
-    $this->assertRaw('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationSuccess');
+    $this->assertSession()->responseContains('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
+    $this->assertSession()->statusCodeEquals(200);

   }

@@ @@
     // Protocol version 2
     $st = $this->ticketFactory->createProxyTicket($service, FALSE, [], 'foo', $this->exampleUser->id(), $this->ticketFactory->getUsernameAttribute($this->exampleUser));
     $this->drupalGet('cas/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET_SPEC">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET_SPEC">');
+    $this->assertSession()->statusCodeEquals(200);

     // Protocol version 3
     $st = $this->ticketFactory->createProxyTicket($service, FALSE, [], 'foo', $this->exampleUser->id(), $this->ticketFactory->getUsernameAttribute($this->exampleUser));
     $this->drupalGet('cas/p3/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_TICKET_SPEC">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_TICKET_SPEC">');
+    $this->assertSession()->statusCodeEquals(200);
 }

   /**
@@ @@
     // Protocol version 1
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/validate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);
-    $this->assertText('yes');
-    $this->assertText($this->ticketFactory->getUsernameAttribute($this->exampleUser));
-    $this->assertNoRaw('html');
-    $this->assertResponse(200);
+    $this->assertSession()->pageTextContains('yes');
+    $this->assertSession()->pageTextContains($this->ticketFactory->getUsernameAttribute($this->exampleUser));
+    $this->assertSession()->responseNotContains('html');
+    $this->assertSession()->statusCodeEquals(200);

     // Protocol version 2
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);   
-    $this->assertRaw('<cas:authenticationSuccess>');
-    $this->assertRaw('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationSuccess>');
+    $this->assertSession()->responseContains('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
+    $this->assertSession()->statusCodeEquals(200);

     // Protocol version 3
     $st = $this->ticketFactory->createServiceTicket($service, FALSE);
     $this->drupalGet('cas/p3/serviceValidate', ['query' => ['service' => $service, 'ticket' => $st->getId()]]);      
-    $this->assertRaw('<cas:authenticationSuccess>');
-    $this->assertRaw('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationSuccess>');
+    $this->assertSession()->responseContains('<cas:user>' . $this->ticketFactory->getUsernameAttribute($this->exampleUser) . '</cas:user>');
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
   function testMissingParameters() {
     // Protocol version 1
     $this->drupalGet('cas/validate');
-    $this->assertText('no');
-    $this->assertNoRaw('html');
-    $this->assertResponse(200);
+    $this->assertSession()->pageTextContains('no');
+    $this->assertSession()->responseNotContains('html');
+    $this->assertSession()->statusCodeEquals(200);

     // Protocol version 2
     $this->drupalGet('cas/serviceValidate');
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_REQUEST">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_REQUEST">');
+    $this->assertSession()->statusCodeEquals(200);
     
     // Protocol version 3
     $this->drupalGet('cas/p3/serviceValidate');
-    $this->assertRaw('<cas:authenticationFailure code="INVALID_REQUEST">');
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains('<cas:authenticationFailure code="INVALID_REQUEST">');
+    $this->assertSession()->statusCodeEquals(200);

   }
    ----------- end diff -----------

Applied rules:
 * AssertNoRawRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/cas_server/src/Tests/ProxyControllerTest.php:15

    ---------- begin diff ----------
@@ @@

   public static $modules = ['cas_server'];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->exampleUser = $this->drupalCreateUser([], 'exampleUserName');
@@ @@
     $service = 'https://foo.example.com';

     $this->drupalGet('cas/proxy', ['query' => ['pgt' => $pgt->getId(), 'targetService' => $service]]);
-    $this->assertRaw("<cas:proxySuccess>");
-    $this->assertRaw("<cas:proxyTicket>");
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains("<cas:proxySuccess>");
+    $this->assertSession()->responseContains("<cas:proxyTicket>");
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
   function testInvalidProxyRequest() {

     $this->drupalGet('cas/proxy');
-    $this->assertRaw("<cas:proxyFailure code='INVALID_REQUEST'>");
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains("<cas:proxyFailure code='INVALID_REQUEST'>");
+    $this->assertSession()->statusCodeEquals(200);

   }

@@ @@
     $service = 'https://bar.example.com';

     $this->drupalGet('cas/proxy', ['query' => ['pgt' => $pgt->getId(), 'targetService' => $service]]);
-    $this->assertRaw("<cas:proxyFailure code='UNAUTHORIZED_SERVICE'>");
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains("<cas:proxyFailure code='UNAUTHORIZED_SERVICE'>");
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
     $service = 'https://foo.example.com';

     $this->drupalGet('cas/proxy', ['query' => ['pgt' => $pgt->getId(), 'targetService' => $service]]);
-    $this->assertRaw("<cas:proxyFailure code='INVALID_TICKET'>");
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains("<cas:proxyFailure code='INVALID_TICKET'>");
+    $this->assertSession()->statusCodeEquals(200);

   }

@@ @@
     $service = 'https://foo.example.com';

     $this->drupalGet('cas/proxy', ['query' => ['pgt' => $pgt->getId(), 'targetService' => $service]]);
-    $this->assertRaw("<cas:proxyFailure code='INVALID_REQUEST'>");
-    $this->assertText("Ticket not found");
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains("<cas:proxyFailure code='INVALID_REQUEST'>");
+    $this->assertSession()->pageTextContains("Ticket not found");
+    $this->assertSession()->statusCodeEquals(200);
     
   }

@@ @@
     $service = 'https://foo.example.com';

     $this->drupalGet('cas/proxy', ['query' => ['pgt' => $pgt->getId(), 'targetService' => $service]]);
-    $this->assertRaw("<cas:proxyFailure code='INVALID_REQUEST'>");
-    $this->assertNoText("Ticket not found");
-    $this->assertResponse(200);
+    $this->assertSession()->responseContains("<cas:proxyFailure code='INVALID_REQUEST'>");
+    $this->assertSession()->pageTextNotContains("Ticket not found");
+    $this->assertSession()->statusCodeEquals(200);
     
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 10 files have been changed by Rector                                      

