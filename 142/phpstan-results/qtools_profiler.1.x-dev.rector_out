modules/contrib/qtools_profiler/modules/qtools_cache_profiler/qtools_cache_profiler.install
modules/contrib/qtools_profiler/qtools_profiler.module
modules/contrib/qtools_profiler/src/Theme/QtoolsProfilerThemeswitcherNegotiator.php
modules/contrib/qtools_profiler/modules/qtools_cache_profiler/qtools_cache_profiler.module
modules/contrib/qtools_profiler/modules/qtools_cache_profiler/src/Ajax/RenderCacheStatsCommand.php
modules/contrib/qtools_profiler/modules/qtools_cache_profiler/src/PerformanceService.php
modules/contrib/qtools_profiler/src/Ajax/PreviewSummaryCommand.php
modules/contrib/qtools_profiler/src/XHProfLib/Aggregator.php
modules/contrib/qtools_profiler/src/Annotaion/Profiler.php
modules/contrib/qtools_profiler/src/Controller/RequestReportController.php
modules/contrib/qtools_profiler/modules/qtools_cache_profiler/src/PlaceholderingRenderCacheWrapper.php
modules/contrib/qtools_profiler/modules/qtools_cache_profiler/src/QtoolsCacheProfilerServiceProvider.php
modules/contrib/qtools_profiler/modules/qtools_cache_profiler/src/Renderer.php
modules/contrib/qtools_profiler/src/EventSubscriber/OnKernelEvents.php
modules/contrib/qtools_profiler/src/XHProfLib/Parser/BaseParser.php
modules/contrib/qtools_profiler/modules/qtools_profiler_example/qtools_profiler_example.install
modules/contrib/qtools_profiler/modules/qtools_profiler_example/qtools_profiler_example.module
modules/contrib/qtools_profiler/src/Form/ReportFilterForm.php
modules/contrib/qtools_profiler/modules/qtools_profiler_example/src/Controller/EntitiesReportController.php
modules/contrib/qtools_profiler/modules/qtools_profiler_example/src/PerformanceService.php
modules/contrib/qtools_profiler/src/Form/StatusConfigurationForm.php
modules/contrib/qtools_profiler/qtools_profiler.install
modules/contrib/qtools_profiler/src/PerformanceService.php
modules/contrib/qtools_profiler/src/XHProfLib/Parser/DiffParser.php
modules/contrib/qtools_profiler/src/XHProfLib/Parser/Parser.php
modules/contrib/qtools_profiler/src/XHProfLib/Parser/ParserInterface.php
modules/contrib/qtools_profiler/src/XHProfLib/Parser/SymbolsSorter.php
modules/contrib/qtools_profiler/src/XHProfLib/Report/DiffReport.php
modules/contrib/qtools_profiler/src/XHProfLib/Report/Report.php
modules/contrib/qtools_profiler/src/XHProfLib/Report/ReportConstants.php
modules/contrib/qtools_profiler/src/XHProfLib/Report/ReportEngine.php
modules/contrib/qtools_profiler/src/XHProfLib/Report/ReportInterface.php
modules/contrib/qtools_profiler/src/XHProfLib/Run.php
modules/contrib/qtools_profiler/src/XHProfLib/Storage/FileStorage.php
modules/contrib/qtools_profiler/src/XHProfLib/Storage/StorageInterface.php
modules/contrib/qtools_profiler/src/XHProfLib/Storage/StorageManager.php
modules/contrib/qtools_profiler/src/XHProfLib/Symbol/Symbol.php
modules/contrib/qtools_profiler/src/Plugin/Profiler/Blackfire.php
modules/contrib/qtools_profiler/src/Plugin/Profiler/TidewaysXhprof.php
modules/contrib/qtools_profiler/src/ProfilerPluginInterface.php
modules/contrib/qtools_profiler/src/ProfilerPluginManager.php
modules/contrib/qtools_profiler/src/ReportService.php

3 files with changes
====================

1) modules/contrib/qtools_profiler/src/PerformanceService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\qtools_profiler;

+use Symfony\Component\HttpKernel\Event\TerminateEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Database\Connection;
@@ @@
 use Drupal\qtools_common\QToolsCryptHelper;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Drupal\Core\Path\PathMatcherInterface;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;

 /**
  * Class PerformanceService.
@@ @@
   /**
    * Handle request termination.
    */
-  public function monitoringFinish(PostResponseEvent $event) {
+  public function monitoringFinish(TerminateEvent $event) {
     // Only act if we have valid requestID.
     if (!$this->monitoringActive()) {
       $this->finishProfiling(FALSE);
@@ @@
   /**
    * Handle request completion.
    */
-  public function monitoringComplete(FilterResponseEvent $event) {
+  public function monitoringComplete(ResponseEvent $event) {
     // Only act if we have valid requestID.
     if (!$this->monitoringActive()) {
       $this->finishProfiling(FALSE);
@@ @@
   /**
    * Add tracking information to supported responses.
    */
-  public function addTrackingInformation(FilterResponseEvent $event, $requestId, $in_progress_stats = NULL) {
+  public function addTrackingInformation(ResponseEvent $event, $requestId, $in_progress_stats = NULL) {
     // Add header to any request.
     $summary = $this->getRequestSummary($requestId, $in_progress_stats);
     $event->getResponse()->headers->set('X-QTools-Profiler-RequestId', $requestId);
@@ @@
   /**
    * Make sure we have monitoring cookie set.
    */
-  public function monitoringEnsureCookie(GetResponseEvent $event) {
+  public function monitoringEnsureCookie(RequestEvent $event) {
     $cookie = $event->getRequest()->cookies->get(static::COOKIE_PROFILER_CLIENT);
     if (empty($cookie) || QToolsCryptHelper::check($cookie) !== QToolsCryptHelper::CHECK_VALID) {
       $cookie = QToolsCryptHelper::sign(uniqid(), QToolsCryptHelper::SIGN_SITE);
@@ @@
   /**
    * Start collection routine.
    */
-  public function monitoringStart(GetResponseEvent $event) {
+  public function monitoringStart(RequestEvent $event) {
     // If we already started then this is subrequest,
     // that we merge into main one.
     if ($this->monitoringActive()) {
@@ @@
    * @return bool
    *   Result of the allowed check.
    */
-  public function monitoringAllowed(GetResponseEvent $event) {
+  public function monitoringAllowed(RequestEvent $event) {
     // Don't log if we not supposed to.
     $conf = $this->confGet();
     if (!empty($conf['enabled'])) {
@@ @@
    * @return bool
    *   Result of the allowed check.
    */
-  protected function profilingAllowed(GetResponseEvent $event) {
+  protected function profilingAllowed(RequestEvent $event) {
     $conf = $this->confGet();

     // Get profiling rules.
@@ @@
   /**
    * Check if rule is valid.
    */
-  protected function rulesValid($rules_text, GetResponseEvent $event) {
+  protected function rulesValid($rules_text, RequestEvent $event) {
     // Check by rules.
     $rules = explode(PHP_EOL, $rules_text);
     $validation_context = $this->getRuleValidaionContext($event);
@@ @@
   /**
    * Check if rule is valid.
    */
-  protected function getRuleValidaionContext(GetResponseEvent $event) {
+  protected function getRuleValidaionContext(RequestEvent $event) {
     $context = [
       'path' => $event->getRequest()->getRequestUri(),
       'uid' => $this->currentUser->id(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


2) modules/contrib/qtools_profiler/src/EventSubscriber/OnKernelEvents.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\qtools_profiler\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\TerminateEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\Core\Url;
 use Drupal\dynamic_page_cache\EventSubscriber\DynamicPageCacheSubscriber;
 use Drupal\qtools_profiler\PerformanceService;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Handles kernel terminate event.
    */
-  public function onKernelTerminate(PostResponseEvent $event) {
+  public function onKernelTerminate(TerminateEvent $event) {
     if ($this->performanceService->getRequestId() !== NULL) {
       $this->performanceService->monitoringFinish($event);
     }
@@ @@
   /**
    * Handles kernel response event.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(ResponseEvent $event) {
     $request_id = $this->performanceService->getRequestId();

     if (!empty($request_id)) {
@@ @@
   /**
    * Handles kernel request event.
    */
-  public function onKernelRequestEarly(GetResponseEvent $event) {
+  public function onKernelRequestEarly(RequestEvent $event) {
     // Ensure cookie client.
     $this->performanceService->monitoringEnsureCookie($event);

@@ @@
   /**
    * Handles kernel request event.
    */
-  public function onKernelRequestWithRoute(GetResponseEvent $event) {
+  public function onKernelRequestWithRoute(RequestEvent $event) {
     if ($this->performanceService->monitoringActive()) {
       $route = $event->getRequest()->attributes->get('_route');
       if (!empty($route)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


3) modules/contrib/qtools_profiler/src/Controller/RequestReportController.php:158

    ---------- begin diff ----------
@@ @@
    * Returns preview app summary.
    */
   public function previewApp(Request $request) {
-    $build_path = '/' . drupal_get_path('module', 'qtools_profiler') . '/react-app/chrome-extension/build';
+    $build_path = '/' . \Drupal::service('extension.list.module')->getPath('qtools_profiler') . '/react-app/chrome-extension/build';
     $build = [
       '#theme' => 'qtools_profiler_preview_iframe',
       '#build_path' => $build_path,
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

