diff --git a/src/EventSubscriber/EntityLegalSubscriber.php b/src/EventSubscriber/EntityLegalSubscriber.php
index ad9a126..60a9622 100644
--- a/src/EventSubscriber/EntityLegalSubscriber.php
+++ b/src/EventSubscriber/EntityLegalSubscriber.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_legal\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -16,10 +16,10 @@ class EntityLegalSubscriber implements EventSubscriberInterface {
   /**
    * Request event callback.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The request event.
    */
-  public function checkRedirect(GetResponseEvent $event) {
+  public function checkRedirect(RequestEvent $event) {
     $context = ['event' => $event];
 
     // Execute Redirect method plugin.
diff --git a/src/Form/EntityLegalDocumentForm.php b/src/Form/EntityLegalDocumentForm.php
index 4a4953e..6fc8db3 100644
--- a/src/Form/EntityLegalDocumentForm.php
+++ b/src/Form/EntityLegalDocumentForm.php
@@ -179,7 +179,7 @@ class EntityLegalDocumentForm extends EntityForm implements ContainerInjectionIn
           'title' => Link::createFromRoute($version->label(), $route_name, $route_parameters),
           'created' => $version->getFormattedDate('created'),
           'changed' => $version->getFormattedDate('changed'),
-          'operations' => render($operations),
+          'operations' => \Drupal::service('renderer')->render($operations),
         ];
       }
 
diff --git a/src/Form/EntityLegalDocumentVersionForm.php b/src/Form/EntityLegalDocumentVersionForm.php
index e63fa32..ccfb7fd 100644
--- a/src/Form/EntityLegalDocumentVersionForm.php
+++ b/src/Form/EntityLegalDocumentVersionForm.php
@@ -34,8 +34,8 @@ class EntityLegalDocumentVersionForm extends ContentEntityForm {
           $clone = $published_version->createDuplicate();
           // Unset properties that shouldn't be copied over.
           $clone->set('name', NULL);
-          $clone->set('created', REQUEST_TIME);
-          $clone->set('changed', REQUEST_TIME);
+          $clone->set('created', \Drupal::time()->getRequestTime());
+          $clone->set('changed', \Drupal::time()->getRequestTime());
           $clone->set('published', FALSE);
           $this->setEntity($clone);
         }
diff --git a/src/Plugin/EntityLegal/Redirect.php b/src/Plugin/EntityLegal/Redirect.php
index e752ce4..b34efb4 100644
--- a/src/Plugin/EntityLegal/Redirect.php
+++ b/src/Plugin/EntityLegal/Redirect.php
@@ -94,7 +94,7 @@ class Redirect extends EntityLegalPluginBase implements ContainerFactoryPluginIn
   public function execute(array &$context = []) {
     /** @var \Drupal\entity_legal\EntityLegalDocumentInterface $document */
     foreach ($this->documents as $document) {
-      /** @var \Symfony\Component\HttpKernel\Event\GetResponseEvent $event */
+      /** @var \Symfony\Component\HttpKernel\Event\RequestEvent $event */
       $event = $context['event'];
       $request = $event->getRequest();
 
diff --git a/tests/src/Functional/RedirectMethodTest.php b/tests/src/Functional/RedirectMethodTest.php
index 5556b32..352c9f9 100644
--- a/tests/src/Functional/RedirectMethodTest.php
+++ b/tests/src/Functional/RedirectMethodTest.php
@@ -53,75 +53,76 @@ class RedirectMethodTest extends BrowserTestBase {
     /** @var \Drupal\user\UserInterface $user */
     $user = \Drupal::entityTypeManager()->getStorage('user')->load($account->id());
 
-    $this->assertUrl($document_path);
+    $this->assertSession()->addressEquals($document_path);
 
     $this->drupalGet('');
 
-    $this->assertUrl($document_path);
+    $this->assertSession()->addressEquals($document_path);
 
     // Check that users are able to logout even they don't accept the agreement.
     $this->clickLink('Log out');
     // Check that the user has been logged out.
-    $this->assertLink('Log in');
+    $this->assertSession()->linkExists('Log in');
 
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'name' => $account->getAccountName(),
       'pass' => $account->pass_raw,
     ], 'Log in');
 
-    $this->assertText('You must accept this agreement before continuing.');
-    $this->assertText('I agree to the document');
+    $this->assertSession()->pageTextContains('You must accept this agreement before continuing.');
+    $this->assertSession()->pageTextContains('I agree to the document');
 
     // Agree with the terms.
-    $this->drupalPostForm(NULL, ['agree' => TRUE], 'Submit');
+    $this->submitForm(['agree' => TRUE], 'Submit');
 
     // Refresh the page.
     $this->drupalGet('');
 
-    $this->assertUrl($user->toUrl()->setAbsolute()->toString());
+    $this->assertSession()->addressEquals($user->toUrl()->setAbsolute()->toString());
 
     $this->clickLink('Log out');
 
     // Release a new document version.
     $this->createDocumentVersion($document, TRUE);
+    $this->drupalGet(Url::fromRoute('user.pass'));
 
-    $this->drupalPostForm(Url::fromRoute('user.pass'), [
+    $this->submitForm([
       'name' => $account->getAccountName(),
     ], 'Submit');
-    $this->assertText('Further instructions have been sent to your email address.');
+    $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');
 
     // Click the one-time login link received by mail and login.
     $this->clickMailOneTimeLoginLink();
-    $this->assertText("This is a one-time login for {$account->getAccountName()} and will expire on");
-    $this->drupalPostForm(NULL, [], 'Log in');
+    $this->assertSession()->pageTextContains("This is a one-time login for {$account->getAccountName()} and will expire on");
+    $this->submitForm([], 'Log in');
 
     // Check that we've landed on the password change user account edit page.
-    $this->assertText('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.');
-    $this->assertFieldByName('mail');
-    $this->assertText('A valid email address. All emails from the system will be sent to this address. The email address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by email.');
-    $this->assertFieldByName('pass[pass1]');
-    $this->assertFieldByName('pass[pass2]');
+    $this->assertSession()->pageTextContains('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.');
+    $this->assertSession()->fieldExists('mail');
+    $this->assertSession()->pageTextContains('A valid email address. All emails from the system will be sent to this address. The email address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by email.');
+    $this->assertSession()->fieldExists('pass[pass1]');
+    $this->assertSession()->fieldExists('pass[pass2]');
 
     // Set a new password.
     $new_password = $this->randomString();
     $account->pass_raw = $new_password;
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'pass[pass1]' => $new_password,
       'pass[pass2]' => $new_password,
     ], 'Save');
 
     // The new password is set but user has to accept the new document version.
-    $this->assertText('The changes have been saved.');
-    $this->assertText('You must accept this agreement before continuing.');
-    $this->assertText('I agree to the document');
+    $this->assertSession()->pageTextContains('The changes have been saved.');
+    $this->assertSession()->pageTextContains('You must accept this agreement before continuing.');
+    $this->assertSession()->pageTextContains('I agree to the document');
 
     // Agree with the terms.
-    $this->drupalPostForm(NULL, ['agree' => TRUE], 'Submit');
+    $this->submitForm(['agree' => TRUE], 'Submit');
 
     // Check that we're on the user account edit form page.
-    $this->assertFieldByName('mail');
-    $this->assertFieldByName('pass[pass1]');
-    $this->assertFieldByName('pass[pass2]');
+    $this->assertSession()->fieldExists('mail');
+    $this->assertSession()->fieldExists('pass[pass1]');
+    $this->assertSession()->fieldExists('pass[pass2]');
 
     // Release a new document version.
     $newest_version = $this->createDocumentVersion($document, TRUE);
@@ -133,8 +134,8 @@ class RedirectMethodTest extends BrowserTestBase {
       ],
     ]);
     // Check that the approval gate cannot be bypassed.
-    $this->assertText('You must accept this agreement before continuing.');
-    $this->assertText('I agree to the document');
+    $this->assertSession()->pageTextContains('You must accept this agreement before continuing.');
+    $this->assertSession()->pageTextContains('I agree to the document');
 
     $this->clickLink('Log out');
 
