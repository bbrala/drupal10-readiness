modules/contrib/entity_clone/entity_clone.api.php
modules/contrib/entity_clone/src/EntityClone/Content/FileEntityClone.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneContentRecursiveCircularTest.php
modules/contrib/entity_clone/entity_clone.module
modules/contrib/entity_clone/src/EntityClone/Content/TaxonomyTermEntityClone.php
modules/contrib/entity_clone/src/EntityClone/Content/UserEntityClone.php
modules/contrib/entity_clone/src/EntityClone/EntityCloneFormInterface.php
modules/contrib/entity_clone/src/EntityClone/EntityCloneInterface.php
modules/contrib/entity_clone/src/EntityClonePermissions.php
modules/contrib/entity_clone/src/EntityCloneSettingsManager.php
modules/contrib/entity_clone/src/Event/EntityCloneEvent.php
modules/contrib/entity_clone/entity_clone.post_update.php
modules/contrib/entity_clone/src/Event/EntityCloneEvents.php
modules/contrib/entity_clone/src/Form/EntityCloneForm.php
modules/contrib/entity_clone/src/EntityClone/Config/ConfigEntityCloneBase.php
modules/contrib/entity_clone/src/EntityClone/Config/ConfigEntityCloneFormBase.php
modules/contrib/entity_clone/src/EntityClone/Config/ConfigWithFieldEntityClone.php
modules/contrib/entity_clone/src/Form/EntityCloneSettingsForm.php
modules/contrib/entity_clone/src/Plugin/Derivative/DynamicLocalTasks.php
modules/contrib/entity_clone/src/Routing/RouteSubscriber.php
modules/contrib/entity_clone/src/EntityClone/Config/FieldConfigEntityClone.php
modules/contrib/entity_clone/src/Services/EntityCloneServiceProvider.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneContentRecursiveTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneActionTest.php
modules/contrib/entity_clone/src/EntityClone/Config/LayoutBuilderEntityClone.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneContentTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneBlockTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneCustomBlockTest.php
modules/contrib/entity_clone/src/EntityClone/Config/MenuEntityClone.php
modules/contrib/entity_clone/src/EntityClone/Config/MenuEntityCloneForm.php
modules/contrib/entity_clone/src/EntityClone/Content/ContentEntityCloneBase.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneCommentTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneDateFormatTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneContactTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneEntityFormModeTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneEntityViewModeTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneFileTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneFilterFormatTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneContentCreatedDate.php
modules/contrib/entity_clone/src/EntityClone/Content/ContentEntityCloneFormBase.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneImageStyleTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneLanguageTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneMenuTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneContentModerationTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneParagraphTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneResponsiveImageStyleTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneRoleTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneSearchPageTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneShortcutSetTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneUserTest.php
modules/contrib/entity_clone/tests/src/Functional/EntityCloneViewTest.php
modules/contrib/entity_clone/tests/src/Kernel/EntityCloneAccessTest.php

28 files with changes
=====================

1) modules/contrib/entity_clone/entity_clone.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use Drupal\entity_clone\Event\EntityCloneEvent;
+use Drupal\entity_clone\Event\EntityCloneEvents;
 /**
  * @file
  * Entity Clone hooks and events.
  */
-
 /**
  * Event subscribers for Entity Clone.
  *
@@ @@
  * ?>
  * </code>
  */
-class MyEntityCloneEventSubscriber implements \Symfony\Component\EventDispatcher\EventSubscriberInterface {
+class MyEntityCloneEventSubscriber implements EventSubscriberInterface {

   /**
    * An example event subscriber.
@@ @@
    *
    * @see \Drupal\entity_clone\Event\EntityCloneEvents::PRE_CLONE
    */
-  public function myPreClone(\Drupal\entity_clone\Event\EntityCloneEvent $event): void {
+  public function myPreClone(EntityCloneEvent $event): void {
     $original = $event->getEntity();
     $newEntity = $event->getClonedEntity();
   }
@@ @@
    *
    * @see \Drupal\entity_clone\Event\EntityCloneEvents::POST_CLONE
    */
-  public function myPostClone(\Drupal\entity_clone\Event\EntityCloneEvent $event): void {
+  public function myPostClone(EntityCloneEvent $event): void {
     $original = $event->getEntity();
     $newEntity = $event->getClonedEntity();
   }
@@ @@
    * {@inheritdoc}
    */
   public static function getSubscribedEvents(): array {
-    $events[\Drupal\entity_clone\Event\EntityCloneEvents::PRE_CLONE][] = ['myPreClone'];
-    $events[\Drupal\entity_clone\Event\EntityCloneEvents::POST_CLONE][] = ['myPostClone'];
+    $events[EntityCloneEvents::PRE_CLONE][] = ['myPreClone'];
+    $events[EntityCloneEvents::POST_CLONE][] = ['myPostClone'];
     return $events;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


2) modules/contrib/entity_clone/tests/src/Functional/EntityCloneContentCreatedDate.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->sutUser = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_clone/tests/src/Functional/EntityCloneContactTest.php:61

    ---------- begin diff ----------
@@ @@
       'id' => 'test_contact_form_for_clone',
       'recipients' => 'test@recipient.com',
     ];
-    $this->drupalPostForm('admin/structure/contact/add', $edit, t('Save'));
+    $this->drupalGet('admin/structure/contact/add');
+    $this->submitForm($edit, t('Save'));

     $contact_forms = \Drupal::entityTypeManager()
       ->getStorage('contact_form')
@@ @@
       'label' => 'Test contact form cloned',
       'id' => 'test_contact_form_cloned',
     ];
-    $this->drupalPostForm('entity_clone/contact_form/' . $contact_form->id(), $edit, t('Clone'));
+    $this->drupalGet('entity_clone/contact_form/' . $contact_form->id());
+    $this->submitForm($edit, t('Clone'));

     $contact_forms = \Drupal::entityTypeManager()
       ->getStorage('contact_form')
@@ @@
       'id' => 'test_contact_form_clone_with_a_really_long_name_that_is_longer_than_the_bundle_max_length',
       'label' => 'Test contact form clone with a really long name that is longer than the bundle max length',
     ];
-    $this->drupalPostForm('entity_clone/contact_form/' . $contact_form->id(), $edit, t('Clone'));
-    $this->assertText('New Id cannot be longer than 32 characters');
+    $this->drupalGet('entity_clone/contact_form/' . $contact_form->id());
+    $this->submitForm($edit, t('Clone'));
+    $this->assertSession()->pageTextContains('New Id cannot be longer than 32 characters');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_clone/tests/src/Functional/EntityCloneCommentTest.php:71

    ---------- begin diff ----------
@@ @@
     $subject = 'Test comment for clone';
     $body = $this->randomMachineName();
     $comment = $this->postComment($this->node, $body, $subject, TRUE);
+    $this->drupalGet('entity_clone/comment/' . $comment->id());

-    $this->drupalPostForm('entity_clone/comment/' . $comment->id(), [], t('Clone'));
+    $this->submitForm([], t('Clone'));

     $comments = \Drupal::entityTypeManager()
       ->getStorage('comment')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_clone/tests/src/Functional/EntityCloneBlockTest.php:70

    ---------- begin diff ----------
@@ @@
     $edit = [
       'id' => 'test_block_cloned',
     ];
-    $this->drupalPostForm('entity_clone/block/' . $block->id(), $edit, t('Clone'));
+    $this->drupalGet('entity_clone/block/' . $block->id());
+    $this->submitForm($edit, t('Clone'));

     $blocks = \Drupal::entityTypeManager()
       ->getStorage('block')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_clone/tests/src/Functional/EntityCloneActionTest.php:69

    ---------- begin diff ----------
@@ @@
       'subject' => 'test subject',
       'message' => 'test message',
     ];
-    $this->drupalPostForm("admin/config/system/actions/add/$action_key", $edit, t('Save'));
+    $this->drupalGet("admin/config/system/actions/add/$action_key");
+    $this->submitForm($edit, t('Save'));

     $actions = \Drupal::entityTypeManager()
       ->getStorage('action')
@@ @@
       'label' => 'Test send email action cloned',
       'id' => 'test_send_email_cloned',
     ];
-    $this->drupalPostForm('entity_clone/action/' . $action->id(), $edit, t('Clone'));
+    $this->drupalGet('entity_clone/action/' . $action->id());
+    $this->submitForm($edit, t('Clone'));

     $actions = \Drupal::entityTypeManager()
       ->getStorage('action')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_clone/src/Form/EntityCloneForm.php:204

    ---------- begin diff ----------
@@ @@

     $duplicate = $this->entity->createDuplicate();

-    $this->eventDispatcher->dispatch(EntityCloneEvents::PRE_CLONE, new EntityCloneEvent($this->entity, $duplicate, $properties));
+    $this->eventDispatcher->dispatch(new EntityCloneEvent($this->entity, $duplicate, $properties), EntityCloneEvents::PRE_CLONE);
     $cloned_entity = $entity_clone_handler->cloneEntity($this->entity, $duplicate, $properties);
-    $this->eventDispatcher->dispatch(EntityCloneEvents::POST_CLONE, new EntityCloneEvent($this->entity, $duplicate, $properties));
+    $this->eventDispatcher->dispatch(new EntityCloneEvent($this->entity, $duplicate, $properties), EntityCloneEvents::POST_CLONE);

     $this->messenger->addMessage($this->stringTranslationManager->translate('The entity <em>@entity (@entity_id)</em> of type <em>@type</em> was cloned.', [
       '@entity' => $this->entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_clone/src/Event/EntityCloneEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_clone\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Represents entity selection as event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_clone/src/EntityClone/Content/FileEntityClone.php:14

    ---------- begin diff ----------
@@ @@
    */
   public function cloneEntity(EntityInterface $entity, EntityInterface $cloned_entity, array $properties = [], array &$already_cloned = []) {
     /** @var \Drupal\file\FileInterface $cloned_entity */
-    $cloned_file = file_copy($cloned_entity, $cloned_entity->getFileUri(), FileSystemInterface::EXISTS_RENAME);
+    $cloned_file = \Drupal::service('file.repository')->copy($cloned_entity, $cloned_entity->getFileUri(), FileSystemInterface::EXISTS_RENAME);
     if (isset($properties['take_ownership']) && $properties['take_ownership'] === 1) {
       $cloned_file->setOwnerId(\Drupal::currentUser()->id());
     }
    ----------- end diff -----------

Applied rules:
 * FileCopyRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_clone/tests/src/Functional/EntityCloneViewTest.php:59

    ---------- begin diff ----------
@@ @@
       'id' => 'test_view_cloned',
       'label' => 'Test view cloned',
     ];
-    $this->drupalPostForm('entity_clone/view/who_s_new', $edit, t('Clone'));
+    $this->drupalGet('entity_clone/view/who_s_new');
+    $this->submitForm($edit, t('Clone'));

     $views = \Drupal::entityTypeManager()
       ->getStorage('view')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity_clone/tests/src/Functional/EntityCloneUserTest.php:55

    ---------- begin diff ----------
@@ @@
    * Test user entity clone.
    */
   public function testUserEntityClone() {
-    $this->drupalPostForm('entity_clone/user/' . $this->adminUser->id(), [], t('Clone'));
+    $this->drupalGet('entity_clone/user/' . $this->adminUser->id());
+    $this->submitForm([], t('Clone'));

     $users = \Drupal::entityTypeManager()
       ->getStorage('user')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity_clone/tests/src/Functional/EntityCloneShortcutSetTest.php:59

    ---------- begin diff ----------
@@ @@
       'id' => 'test_shortcut_set_cloned',
       'label' => 'Test shortcut set cloned',
     ];
-    $this->drupalPostForm('entity_clone/shortcut_set/default', $edit, t('Clone'));
+    $this->drupalGet('entity_clone/shortcut_set/default');
+    $this->submitForm($edit, t('Clone'));

     $shortcut_sets = \Drupal::entityTypeManager()
       ->getStorage('shortcut_set')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entity_clone/tests/src/Functional/EntityCloneSearchPageTest.php:60

    ---------- begin diff ----------
@@ @@
       'id' => 'test_search_page_for_clone',
       'path' => 'test_search_page_for_clone_url',
     ];
-    $this->drupalPostForm("/admin/config/search/pages/add/node_search", $edit, t('Save'));
+    $this->drupalGet("/admin/config/search/pages/add/node_search");
+    $this->submitForm($edit, t('Save'));

     $search_pages = \Drupal::entityTypeManager()
       ->getStorage('search_page')
@@ @@
       'id' => 'test_search_page_cloned',
       'label' => 'Test search page cloned',
     ];
-    $this->drupalPostForm('entity_clone/search_page/' . $search_page->id(), $edit, t('Clone'));
+    $this->drupalGet('entity_clone/search_page/' . $search_page->id());
+    $this->submitForm($edit, t('Clone'));

     $search_pages = \Drupal::entityTypeManager()
       ->getStorage('search_page')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/entity_clone/tests/src/Functional/EntityCloneRoleTest.php:59

    ---------- begin diff ----------
@@ @@
       'label' => 'Test role for clone',
       'id' => 'test_role_for_clone',
     ];
-    $this->drupalPostForm("/admin/people/roles/add", $edit, t('Save'));
+    $this->drupalGet("/admin/people/roles/add");
+    $this->submitForm($edit, t('Save'));

     $roles = \Drupal::entityTypeManager()
       ->getStorage('user_role')
@@ @@
       'id' => 'test_role_cloned',
       'label' => 'Test role cloned',
     ];
-    $this->drupalPostForm('entity_clone/user_role/' . $role->id(), $edit, t('Clone'));
+    $this->drupalGet('entity_clone/user_role/' . $role->id());
+    $this->submitForm($edit, t('Clone'));

     $roles = \Drupal::entityTypeManager()
       ->getStorage('user_role')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/entity_clone/tests/src/Functional/EntityCloneResponsiveImageStyleTest.php:61

    ---------- begin diff ----------
@@ @@
       'breakpoint_group' => 'responsive_image',
       'fallback_image_style' => 'large',
     ];
-    $this->drupalPostForm("admin/config/media/responsive-image-style/add", $edit, t('Save'));
+    $this->drupalGet("admin/config/media/responsive-image-style/add");
+    $this->submitForm($edit, t('Save'));

     $responsive_image_styles = \Drupal::entityTypeManager()
       ->getStorage('responsive_image_style')
@@ @@
       'id' => 'test_responsive_image_style_cloned',
       'label' => 'Test responsive image style cloned',
     ];
-    $this->drupalPostForm('entity_clone/responsive_image_style/' . $responsive_image_style->id(), $edit, t('Clone'));
+    $this->drupalGet('entity_clone/responsive_image_style/' . $responsive_image_style->id());
+    $this->submitForm($edit, t('Clone'));

     $responsive_image_styles = \Drupal::entityTypeManager()
       ->getStorage('responsive_image_style')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


16) modules/contrib/entity_clone/tests/src/Functional/EntityCloneParagraphTest.php:78

    ---------- begin diff ----------
@@ @@
       'recursive[node.paragraphed_content_demo.field_paragraphs_demo][references][5][clone]' => 1,
       'recursive[node.paragraphed_content_demo.field_paragraphs_demo][references][5][children][recursive][paragraph.nested_paragraph.field_paragraphs_demo][references][4][clone]' => 1,
     ];
+    $this->drupalGet('entity_clone/node/' . $node->id());

-    $this->drupalPostForm('entity_clone/node/' . $node->id(), $clone_options, t('Clone'));
+    $this->submitForm($clone_options, t('Clone'));

     $clones = \Drupal::entityTypeManager()
       ->getStorage('node')
@@ @@
       ->getTarget()
       ->getValue();

-    $this->assertNotEqual($original_paragraph->getParentEntity()->id(), $cloned_paragraph->getParentEntity()->id());
+    $this->assertNotEquals($original_paragraph->getParentEntity()->id(), $cloned_paragraph->getParentEntity()->id());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNotEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/entity_clone/tests/src/Functional/EntityCloneMenuTest.php:67

    ---------- begin diff ----------
@@ @@
       'label' => 'Test menu cloned',
       'id' => 'test-menu-cloned',
     ];
-    $this->drupalPostForm('entity_clone/menu/' . $menu->id(), $edit, t('Clone'));
+    $this->drupalGet('entity_clone/menu/' . $menu->id());
+    $this->submitForm($edit, t('Clone'));

     $menus = \Drupal::entityTypeManager()
       ->getStorage('menu')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/entity_clone/tests/src/Functional/EntityCloneLanguageTest.php:58

    ---------- begin diff ----------
@@ @@
     $edit = [
       'predefined_langcode' => 'fr',
     ];
-    $this->drupalPostForm("/admin/config/regional/language/add", $edit, t('Add language'));
+    $this->drupalGet("/admin/config/regional/language/add");
+    $this->submitForm($edit, t('Add language'));

     $languages = \Drupal::entityTypeManager()
       ->getStorage('configurable_language')
@@ @@
       'id' => 'test_language_cloned',
       'label' => 'French language cloned',
     ];
-    $this->drupalPostForm('entity_clone/configurable_language/' . $language->id(), $edit, t('Clone'));
+    $this->drupalGet('entity_clone/configurable_language/' . $language->id());
+    $this->submitForm($edit, t('Clone'));

     $languages = \Drupal::entityTypeManager()
       ->getStorage('configurable_language')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/entity_clone/tests/src/Functional/EntityCloneImageStyleTest.php:59

    ---------- begin diff ----------
@@ @@
       'label' => 'Test image style for clone',
       'name' => 'test_image_style_for_clone',
     ];
-    $this->drupalPostForm("admin/config/media/image-styles/add", $edit, t('Create new style'));
+    $this->drupalGet("admin/config/media/image-styles/add");
+    $this->submitForm($edit, t('Create new style'));

     $image_styles = \Drupal::entityTypeManager()
       ->getStorage('image_style')
@@ @@
       'id' => 'test_iamge_style_cloned',
       'label' => 'Test image_style cloned',
     ];
-    $this->drupalPostForm('entity_clone/image_style/' . $image_style->id(), $edit, t('Clone'));
+    $this->drupalGet('entity_clone/image_style/' . $image_style->id());
+    $this->submitForm($edit, t('Clone'));

     $image_styles = \Drupal::entityTypeManager()
       ->getStorage('image_style')
@@ @@
       'id' => 'test_image_style_clone_with_a_really_long_name_that_is_longer_than_the_max_length',
       'label' => 'Test image style clone with a really long name that is longer than the max length',
     ];
-    $this->drupalPostForm('entity_clone/image_style/' . $image_style->id(), $edit, t('Clone'));
-    $this->assertText('New Id cannot be longer than 64 characters');
+    $this->drupalGet('entity_clone/image_style/' . $image_style->id());
+    $this->submitForm($edit, t('Clone'));
+    $this->assertSession()->pageTextContains('New Id cannot be longer than 64 characters');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


20) modules/contrib/entity_clone/tests/src/Functional/EntityCloneFilterFormatTest.php:61

    ---------- begin diff ----------
@@ @@
       'name' => 'Test filter format for clone',
       'format' => 'test_filter_format_for_clone',
     ];
-    $this->drupalPostForm("admin/config/content/formats/add", $edit, t('Save configuration'));
+    $this->drupalGet("admin/config/content/formats/add");
+    $this->submitForm($edit, t('Save configuration'));

     $filter_formats = \Drupal::entityTypeManager()
       ->getStorage('filter_format')
@@ @@
       'id' => 'test_filter_format_cloned',
       'label' => 'Test filter format cloned',
     ];
-    $this->drupalPostForm('entity_clone/filter_format/' . $filter_format->id(), $edit, t('Clone'));
+    $this->drupalGet('entity_clone/filter_format/' . $filter_format->id());
+    $this->submitForm($edit, t('Clone'));

     $filter_formats = \Drupal::entityTypeManager()
       ->getStorage('filter_format')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/entity_clone/tests/src/Functional/EntityCloneFileTest.php:64

    ---------- begin diff ----------
@@ @@
     ]);
     file_put_contents($file->getFileUri(), 'hello world');
     $file->save();
+    $this->drupalGet('entity_clone/file/' . $file->id());

-    $this->drupalPostForm('entity_clone/file/' . $file->id(), [], t('Clone'));
+    $this->submitForm([], t('Clone'));

     $files = \Drupal::entityTypeManager()
       ->getStorage('file')
@@ @@
     $file = reset($files);
     $this->assertInstanceOf(File::class, $file, 'Test file cloned found in database.');

-    $this->assertEqual($file->getFileUri(), 'public://druplicon_0.txt', 'The stored file is also cloned.');
+    $this->assertEquals($file->getFileUri(), 'public://druplicon_0.txt', 'The stored file is also cloned.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


22) modules/contrib/entity_clone/tests/src/Functional/EntityCloneEntityViewModeTest.php:68

    ---------- begin diff ----------
@@ @@
       'label' => 'User full cloned view mode',
       'id' => 'register_clone',
     ];
-    $this->drupalPostForm('entity_clone/entity_view_mode/' . $entity_view_mode->id(), $edit, t('Clone'));
+    $this->drupalGet('entity_clone/entity_view_mode/' . $entity_view_mode->id());
+    $this->submitForm($edit, t('Clone'));

     $entity_view_modes = \Drupal::entityTypeManager()
       ->getStorage('entity_view_mode')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/entity_clone/tests/src/Functional/EntityCloneEntityFormModeTest.php:68

    ---------- begin diff ----------
@@ @@
       'label' => 'User register cloned form mode',
       'id' => 'register_clone',
     ];
-    $this->drupalPostForm('entity_clone/entity_form_mode/' . $entity_form_mode->id(), $edit, t('Clone'));
+    $this->drupalGet('entity_clone/entity_form_mode/' . $entity_form_mode->id());
+    $this->submitForm($edit, t('Clone'));

     $entity_form_modes = \Drupal::entityTypeManager()
       ->getStorage('entity_form_mode')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/entity_clone/tests/src/Functional/EntityCloneDateFormatTest.php:60

    ---------- begin diff ----------
@@ @@
       'id' => 'test_date_format_for_clone',
       'date_format_pattern' => 'Y m d',
     ];
-    $this->drupalPostForm("admin/config/regional/date-time/formats/add", $edit, t('Add format'));
+    $this->drupalGet("admin/config/regional/date-time/formats/add");
+    $this->submitForm($edit, t('Add format'));

     $date_formats = \Drupal::entityTypeManager()
       ->getStorage('date_format')
@@ @@
       'id' => 'test_date_format_cloned',
       'label' => 'Test date format cloned',
     ];
-    $this->drupalPostForm('entity_clone/date_format/' . $date_format->id(), $edit, t('Clone'));
+    $this->drupalGet('entity_clone/date_format/' . $date_format->id());
+    $this->submitForm($edit, t('Clone'));

     $date_formats = \Drupal::entityTypeManager()
       ->getStorage('date_format')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


25) modules/contrib/entity_clone/tests/src/Functional/EntityCloneCustomBlockTest.php:50

    ---------- begin diff ----------
@@ @@
     $edit = [];
     $edit['info[0][value]'] = 'Test block ready to clone';
     $edit['body[0][value]'] = $this->randomMachineName(16);
-    $this->drupalPostForm('block/add/basic', $edit, t('Save'));
+    $this->drupalGet('block/add/basic');
+    $this->submitForm($edit, t('Save'));

     $blocks = \Drupal::entityTypeManager()
       ->getStorage('block_content')
@@ @@
       ]);
     $block = reset($blocks);
     $this->assertInstanceOf(BlockContent::class, $block, 'Test Block for clone found in database.');
+    $this->drupalGet('entity_clone/block_content/' . $block->id());

-    $this->drupalPostForm('entity_clone/block_content/' . $block->id(), [], t('Clone'));
+    $this->submitForm([], t('Clone'));

     $blocks = \Drupal::entityTypeManager()
       ->getStorage('block_content')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


26) modules/contrib/entity_clone/tests/src/Functional/EntityCloneContentTest.php:65

    ---------- begin diff ----------
@@ @@
       'title' => $node_title,
     ]);
     $node->save();
+    $this->drupalGet('entity_clone/node/' . $node->id());

-    $this->drupalPostForm('entity_clone/node/' . $node->id(), [], t('Clone'));
+    $this->submitForm([], t('Clone'));

     $nodes = \Drupal::entityTypeManager()
       ->getStorage('node')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


27) modules/contrib/entity_clone/tests/src/Functional/EntityCloneContentRecursiveTest.php:90

    ---------- begin diff ----------
@@ @@
       ],
     ];
     \Drupal::service('config.factory')->getEditable('entity_clone.settings')->set('form_settings', $settings)->save();
+    $this->drupalGet('entity_clone/node/' . $node->id());

-    $this->drupalPostForm('entity_clone/node/' . $node->id(), [
+    $this->submitForm([
       'recursive[node.article.field_tags][references][' . $term->id() . '][clone]' => 1,
     ], t('Clone'));
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


28) modules/contrib/entity_clone/tests/src/Functional/EntityCloneContentRecursiveCircularTest.php:102

    ---------- begin diff ----------
@@ @@
       ],
     ];
     \Drupal::service('config.factory')->getEditable('entity_clone.settings')->set('form_settings', $settings)->save();
+    $this->drupalGet('entity_clone/node/' . $node1->id());

-    $this->drupalPostForm('entity_clone/node/' . $node1->id(), [], t('Clone'));
+    $this->submitForm([], t('Clone'));

     $nodes = \Drupal::entityTypeManager()
       ->getStorage('node')
@@ @@
       ],
     ];
     \Drupal::service('config.factory')->getEditable('entity_clone.settings')->set('form_settings', $settings)->save();
+    $this->drupalGet('entity_clone/node/' . $parent_node->id());

-    $this->drupalPostForm('entity_clone/node/' . $parent_node->id(), [], t('Clone'));
+    $this->submitForm([], t('Clone'));

     $nodes = \Drupal::entityTypeManager()
       ->getStorage('node')
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 28 files have been changed by Rector                                      

