modules/contrib/role/modules/role_appearance/src/Plugin/Role/RoleConfigElement/RoleTheme.php
modules/contrib/role/modules/role_registration/src/Service/RoleRegistrationManagerInterface.php
modules/contrib/role/tests/src/Functional/RoleViewModeTest.php
modules/contrib/role/modules/role_registration/tests/src/Functional/RoleRegistrationTest.php
modules/contrib/role/modules/role_appearance/src/Theme/ThemeNegotiator.php
modules/contrib/role/modules/role_appearance/tests/src/Functional/RoleThemeTest.php
modules/contrib/role/role.install
modules/contrib/role/role.module
modules/contrib/role/tests/src/Unit/RoleControlManagerTest.php
modules/contrib/role/src/Annotation/RoleConfigElement.php
modules/contrib/role/src/Form/ControlRoleForm.php
modules/contrib/role/modules/role_registration/role_registration.module
modules/contrib/role/src/Form/SingleRoleSettingsForm.php
modules/contrib/role/modules/role_registration/src/Controller/UserPagesController.php
modules/contrib/role/src/Plugin/Role/RoleConfigElement/AccountFormMode.php
modules/contrib/role/src/Plugin/Role/RoleConfigElement/AccountViewMode.php
modules/contrib/role/src/Plugin/RoleConfigElementBase.php
modules/contrib/role/src/Plugin/RoleConfigElementInterface.php
modules/contrib/role/src/Plugin/RoleConfigElementManager.php
modules/contrib/role/src/Service/RoleControlManager.php
modules/contrib/role/modules/role_registration/src/Plugin/Role/RoleConfigElement/RegistrationAlias.php
modules/contrib/role/modules/role_registration/src/Plugin/Role/RoleConfigElement/RegistrationFormMode.php
modules/contrib/role/src/Service/RoleControlManagerInterface.php
modules/contrib/role/modules/role_registration/src/Plugin/Role/RoleConfigElement/RegistrationStatus.php
modules/contrib/role/tests/src/Functional/RoleFormModeTest.php
modules/contrib/role/modules/role_registration/src/Service/RoleRegistrationManager.php
modules/contrib/role/tests/src/Functional/RoleSettingsFormTest.php

6 files with changes
====================

1) modules/contrib/role/tests/src/Unit/RoleControlManagerTest.php:53

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked 'anonymous' user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $account1;

@@ @@
   /**
    * The mocked user with 'administrator' and 'authenticated' roles.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $account2;

@@ @@
   /**
    * The mocked user with 'authenticated' and 'administrator' roles.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $account3;

@@ @@
   /**
    * The mocked user with 'authenticated' 'administrator' 'editor' roles.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $account4;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $container = new ContainerBuilder();

     $this->extraFields = ['account_form_mode', 'account_view_mode'];

-    $this->roles['administrator'] = $this->getMockBuilder(Role::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->roles['authenticated'] = $this->getMockBuilder(Role::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->roles['editor'] = $this->getMockBuilder(Role::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->roles['anonymous'] = $this->getMockBuilder(Role::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->roles['administrator'] = $this->createMock(Role::class);
+    $this->roles['authenticated'] = $this->createMock(Role::class);
+    $this->roles['editor'] = $this->createMock(Role::class);
+    $this->roles['anonymous'] = $this->createMock(Role::class);

     $role_storage = $this->getMockBuilder('Drupal\user\RoleStorage')
       ->setConstructorArgs(['role', new MemoryCache()])
@@ @@

     // Account 1: 'anonymous' role.
     $roles_1 = ['anonymous'];
-    $this->account1 = $this->getMockBuilder(AccountInterface::class)->getMock();
+    $this->account1 = $this->createMock(AccountInterface::class);
     $this->account1->expects($this->any())
       ->method('isAnonymous')
       ->willReturn(TRUE);
@@ @@

     // Account 2: 'administrator' and 'authenticated' roles.
     $roles_2 = ['administrator', 'authenticated'];
-    $this->account2 = $this->getMockBuilder(AccountInterface::class)->getMock();
+    $this->account2 = $this->createMock(AccountInterface::class);
     $this->account2->expects($this->any())
       ->method('getRoles')
       ->will($this->returnValue($roles_2));
@@ @@

     // Account 3: 'authenticated' and 'administrator' roles (different order).
     $roles_3 = ['authenticated', 'administrator'];
-    $this->account3 = $this->getMockBuilder(AccountInterface::class)->getMock();
+    $this->account3 = $this->createMock(AccountInterface::class);
     $this->account3->expects($this->any())
       ->method('getRoles')
       ->will($this->returnValue($roles_3));
@@ @@

     // Account 4: 'authenticated' and 'administrator' roles (different order).
     $roles_4 = ['editor', 'authenticated', 'administrator'];
-    $this->account4 = $this->getMockBuilder(AccountInterface::class)->getMock();
+    $this->account4 = $this->createMock(AccountInterface::class);
     $this->account4->expects($this->any())
       ->method('getRoles')
       ->will($this->returnValue($roles_4));
@@ @@
       ->method('id')
       ->willReturn(4);

-    $entity_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->getMock();
+    $entity_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_manager->expects($this->any())
       ->method('getStorage')
       ->with($this->equalTo('user_role'))
       ->will($this->returnValue($role_storage));

-    $module_handler = $this->getMockBuilder(ModuleHandlerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $module_handler = $this->createMock(ModuleHandlerInterface::class);

-    $roleConfigElementManager = $this->getMockBuilder(RoleConfigElementManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $roleConfigElementManager = $this->createMock(RoleConfigElementManager::class);
     $roleConfigElementManager->expects($this->any())
       ->method('getDefinitions')
       ->will($this->returnValue($this->definitions));
-    $entityDisplayRepository = $this->getMockBuilder(EntityDisplayRepositoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entityDisplayRepository = $this->createMock(EntityDisplayRepositoryInterface::class);

-    $translation_manager = $this->getMockBuilder(TranslationInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $translation_manager = $this->createMock(TranslationInterface::class);

     $roleManager = new RoleControlManager($entity_manager, $module_handler, $roleConfigElementManager, $entityDisplayRepository, $translation_manager);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/role/tests/src/Functional/RoleViewModeTest.php:70

    ---------- begin diff ----------
@@ @@
     $this->drupalLogin($account);
     $this->drupalGet('user/' . $account->id());
     // Check if field was added to custom view display and text is displayed.
-    $this->assertText($mode);
+    $this->assertSession()->pageTextContains($mode);
     // Create user without custom role.
     $account = $this->drupalCreateUser();
     $account->$field_name = $mode;
@@ @@
     $this->drupalLogin($account);
     $this->drupalGet('user/' . $account->id());
     // Check if field does not display.
-    $this->assertNoText($mode);
+    $this->assertSession()->pageTextNotContains($mode);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/role/modules/role_appearance/tests/src/Functional/RoleThemeTest.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser(['administer permissions', 'administer users']);
     $this->themeHandler = $this->container->get('theme_handler');
@@ @@
       'id' => $role_name,
       'role_theme' => 'seven',
     ];
-    $this->drupalPostForm('admin/people/roles/add', $edit, t('Save'));
-    $this->assertRaw(t('Role %label has been added.', ['%label' => $role_name]));
+    $this->drupalGet('admin/people/roles/add');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('Role %label has been added.', ['%label' => $role_name]));
     $role = Role::load($role_name);
     $this->assertTrue(is_object($role), 'The role was successfully retrieved from the database.');
     $role_theme = $role->getThirdPartySetting('role_appearance', 'role_theme');
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/role/tests/src/Functional/RoleSettingsFormTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser([
       'administer permissions',
@@ @@
       'account_form_mode' => 'default',
       'account_view_mode' => 'default',
     ];
-    $this->drupalPostForm('admin/people/roles/add', $edit, t('Save'));
-    $this->assertRaw(t('Role %label has been added.', ['%label' => $role_name]));
+    $this->drupalGet('admin/people/roles/add');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('Role %label has been added.', ['%label' => $role_name]));
     $role = Role::load($role_name);
     $this->assertTrue(is_object($role), 'The role was successfully retrieved from the database.');
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/role/tests/src/Functional/RoleFormModeTest.php:71

    ---------- begin diff ----------
@@ @@
     $this->drupalLogin($account);
     $this->drupalGet('/user/' . $account->id() . '/edit');
     // Check if field was added to custom form display and text is displayed.
-    $this->assertFieldByName("{$field_name}[0][value]", '', 'Test field is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');

     // Create user without custom role.
     $account = $this->drupalCreateUser();
@@ @@
     $this->drupalLogin($account);
     $this->drupalGet('/user/' . $account->id() . '/edit');
     // Check if field does not display.
-    $this->assertNoFieldByName("{$field_name}[0][value]", '', 'Test field is not displayed');
+    $this->assertSession()->fieldValueNotEquals("{$field_name}[0][value]", '', 'Test field is not displayed');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertNoFieldByNameRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/role/modules/role_registration/tests/src/Functional/RoleRegistrationTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser(['administer permissions', 'administer users']);
   }
@@ @@
       'id' => $role_name,
       'account_registration_status' => 1,
     ];
-    $this->drupalPostForm('admin/people/roles/add', $edit, t('Save'));
-    $this->assertRaw(t('Role %label has been added.', ['%label' => $role_name]));
+    $this->drupalGet('admin/people/roles/add');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('Role %label has been added.', ['%label' => $role_name]));
     $role = Role::load($role_name);
     $this->assertTrue(is_object($role), 'The role was successfully retrieved from the database.');
   }
@@ @@
     $role->setThirdPartySetting('role_registration', 'account_registration_status', 1)->save();
     $role->setThirdPartySetting('role_registration', 'account_registration_form_mode', 'default')->save();
     $this->drupalGet('user/register/' . $role_1);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet('user/register/' . $role_2);
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

