diff --git a/modules/geolocation_demo/geolocation_demo.install b/modules/geolocation_demo/geolocation_demo.install
index 18c04fa..d2622d9 100644
--- a/modules/geolocation_demo/geolocation_demo.install
+++ b/modules/geolocation_demo/geolocation_demo.install
@@ -29,7 +29,7 @@ function geolocation_demo_install() {
 
     $taxonomy_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
 
-    $icon_path = drupal_get_path('module', 'geolocation_demo') . '/icons/';
+    $icon_path = \Drupal::service('extension.list.module')->getPath('geolocation_demo') . '/icons/';
 
     /** @var \Drupal\taxonomy\TermInterface $term_a */
     $term_a = $taxonomy_storage->create([
@@ -38,7 +38,7 @@ function geolocation_demo_install() {
     ]);
 
     $data = file_get_contents($icon_path . 'druplicon-deadpool.png');
-    $file = file_save_data($data, 'public://druplicon-deadpool.png', FileSystemInterface::EXISTS_REPLACE);
+    $file = \Drupal::service('file.repository')->writeData($data, 'public://druplicon-deadpool.png', FileSystemInterface::EXISTS_REPLACE);
     if ($file) {
       $term_a->set('field_geolocation_demo_term_icon', [
         'target_id' => $file->id(),
@@ -55,7 +55,7 @@ function geolocation_demo_install() {
     ]);
 
     $data = file_get_contents($icon_path . 'druplicon-wolverine.png');
-    $file = file_save_data($data, 'public://druplicon-wolverine.png', FileSystemInterface::EXISTS_REPLACE);
+    $file = \Drupal::service('file.repository')->writeData($data, 'public://druplicon-wolverine.png', FileSystemInterface::EXISTS_REPLACE);
     if ($file) {
       $term_b->set('field_geolocation_demo_term_icon', [
         'target_id' => $file->id(),
@@ -72,7 +72,7 @@ function geolocation_demo_install() {
     ]);
 
     $data = file_get_contents($icon_path . 'druplicon-wonder-woman.png');
-    $file = file_save_data($data, 'public://druplicon-wonder-woman.png', FileSystemInterface::EXISTS_REPLACE);
+    $file = \Drupal::service('file.repository')->writeData($data, 'public://druplicon-wonder-woman.png', FileSystemInterface::EXISTS_REPLACE);
     if ($file) {
       $term_c->set('field_geolocation_demo_term_icon', [
         'target_id' => $file->id(),
@@ -111,7 +111,7 @@ function geolocation_demo_install() {
     ]);
 
     $data = file_get_contents($icon_path . 'druplicon-nick-fury.png');
-    $file = file_save_data($data, 'public://druplicon-nick-fury.png', FileSystemInterface::EXISTS_REPLACE);
+    $file = \Drupal::service('file.repository')->writeData($data, 'public://druplicon-nick-fury.png', FileSystemInterface::EXISTS_REPLACE);
     if ($file) {
       $term_single->set('field_geolocation_demo_term_icon', [
         'target_id' => $file->id(),
diff --git a/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/MarkerIcon.php b/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/MarkerIcon.php
index 938f88a..678397a 100644
--- a/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/MarkerIcon.php
+++ b/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/MarkerIcon.php
@@ -168,7 +168,7 @@ class MarkerIcon extends MapFeatureBase {
 
     if (!empty($feature_settings['marker_icon_path'])) {
       $path = \Drupal::token()->replace($feature_settings['marker_icon_path'], $context);
-      $path = file_create_url($path);
+      $path = \Drupal::service('file_url_generator')->generateAbsoluteString($path);
       $render_array['#attached']['drupalSettings']['geolocation']['maps'][$render_array['#id']][$this->getPluginId()]['markerIconPath'] = $path;
 
       if (!empty($render_array['#children']['locations'])) {
diff --git a/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/Spiderfying.php b/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/Spiderfying.php
index 23fc97d..9bacbd4 100644
--- a/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/Spiderfying.php
+++ b/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/Spiderfying.php
@@ -22,7 +22,7 @@ class Spiderfying extends MapFeatureBase {
    */
   public static function getDefaultSettings() {
     return [
-      'spiderfiable_marker_path' => base_path() . drupal_get_path('module', 'geolocation_google_maps') . '/images/marker-plus.svg',
+      'spiderfiable_marker_path' => base_path() . \Drupal::service('extension.list.module')->getPath('geolocation_google_maps') . '/images/marker-plus.svg',
       'markersWontMove' => TRUE,
       'markersWontHide' => FALSE,
       'keepSpiderfied' => TRUE,
diff --git a/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletMarkerIcon.php b/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletMarkerIcon.php
index d20e4ee..5d9e1a7 100644
--- a/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletMarkerIcon.php
+++ b/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletMarkerIcon.php
@@ -195,13 +195,13 @@ class LeafletMarkerIcon extends MapFeatureBase {
 
     if (!empty($feature_settings['marker_icon_path'])) {
       $iconPath = \Drupal::token()->replace($feature_settings['marker_icon_path'], $context);
-      $iconUrl = file_url_transform_relative(file_create_url($iconPath));
+      $iconUrl = \Drupal::service('file_url_generator')->generateString($iconPath);
       $render_array['#attached']['drupalSettings']['geolocation']['maps'][$render_array['#id']][$this->getPluginId()]['markerIconPath'] = $iconUrl;
     }
 
     if (!empty($feature_settings['marker_shadow_path'])) {
       $shadowPath = \Drupal::token()->replace($feature_settings['marker_shadow_path'], $context);
-      $shadowUrl = file_url_transform_relative(file_create_url($shadowPath));
+      $shadowUrl = \Drupal::service('file_url_generator')->generateString($shadowPath);
       $render_array['#attached']['drupalSettings']['geolocation']['maps'][$render_array['#id']][$this->getPluginId()]['markerShadowPath'] = $shadowUrl;
     }
 
diff --git a/src/EventSubscriber/AjaxResponseSubscriber.php b/src/EventSubscriber/AjaxResponseSubscriber.php
index 04bf3c5..6376bf6 100644
--- a/src/EventSubscriber/AjaxResponseSubscriber.php
+++ b/src/EventSubscriber/AjaxResponseSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\geolocation\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\views\Ajax\ViewAjaxResponse;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\geolocation\Plugin\views\style\CommonMap;
 
@@ -16,10 +16,10 @@ class AjaxResponseSubscriber implements EventSubscriberInterface {
   /**
    * Renders the ajax commands right before preparing the result.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The response event, which contains the possible AjaxResponse object.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();
 
     // Only alter views ajax responses.
diff --git a/src/Plugin/views/style/GeolocationStyleBase.php b/src/Plugin/views/style/GeolocationStyleBase.php
index aee5268..bf60047 100644
--- a/src/Plugin/views/style/GeolocationStyleBase.php
+++ b/src/Plugin/views/style/GeolocationStyleBase.php
@@ -113,10 +113,10 @@ abstract class GeolocationStyleBase extends StylePluginBase {
           }
 
           if (!empty($style)) {
-            $icon_url = file_url_transform_relative($style->buildUrl($file_uri));
+            $icon_url = \Drupal::service('file_url_generator')->transformRelative($style->buildUrl($file_uri));
           }
           else {
-            $icon_url = file_url_transform_relative(file_create_url($file_uri));
+            $icon_url = \Drupal::service('file_url_generator')->generateString($file_uri);
           }
         }
       }
@@ -124,7 +124,7 @@ abstract class GeolocationStyleBase extends StylePluginBase {
     elseif (!empty($this->options['marker_icon_path'])) {
       $icon_token_uri = $this->viewsTokenReplace($this->options['marker_icon_path'], $this->rowTokens[$row->index]);
       $icon_token_uri = preg_replace('/\s+/', '', $icon_token_uri);
-      $icon_url = file_url_transform_relative(file_create_url($icon_token_uri));
+      $icon_url = \Drupal::service('file_url_generator')->generateString($icon_token_uri);
     }
 
     try {
diff --git a/tests/src/FunctionalJavascript/GeolocationGoogleGeocoderWidgetTest.php b/tests/src/FunctionalJavascript/GeolocationGoogleGeocoderWidgetTest.php
index dba6828..86869c4 100644
--- a/tests/src/FunctionalJavascript/GeolocationGoogleGeocoderWidgetTest.php
+++ b/tests/src/FunctionalJavascript/GeolocationGoogleGeocoderWidgetTest.php
@@ -161,7 +161,7 @@ class GeolocationGoogleGeocoderWidgetTest extends GeolocationJavascriptTestBase
 
     /** @var \Drupal\node\NodeInterface $new_node */
     $new_node = \Drupal::entityTypeManager()->getStorage('node')->load(5);
-    $this->assertSession()->assert($new_node->get('field_geolocation')->isEmpty(), "Node geolocation field empty after saving from predefined location widget");
+    $this->assertTrue($new_node->get('field_geolocation')->isEmpty(), "Node geolocation field empty after saving from predefined location widget");
   }
 
 }
