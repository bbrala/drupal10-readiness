diff --git a/require_login.info.yml b/require_login.info.yml
index 528152e..5601028 100644
--- a/require_login.info.yml
+++ b/require_login.info.yml
@@ -1,8 +1,7 @@
 name: 'Require Login'
 description: 'Provides catch-all solution to require user authentication on pages.'
 type: module
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 configure: require_login.admin
 dependencies:
   - drupal:user
diff --git a/src/EventSubscriber/RequireLoginSubscriber.php b/src/EventSubscriber/RequireLoginSubscriber.php
index 344a7df..49980de 100644
--- a/src/EventSubscriber/RequireLoginSubscriber.php
+++ b/src/EventSubscriber/RequireLoginSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\require_login\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Path\CurrentPathStack;
@@ -15,8 +17,6 @@ use Drupal\Component\Utility\UrlHelper;
 use Drupal\path_alias\AliasManager;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ -135,7 +135,7 @@ class RequireLoginSubscriber implements EventSubscriberInterface {
   /**
    * Check login authentication enforcement for current request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event response.
    * @param \Drupal\Core\Config\ImmutableConfig $config
    *   The configuration object.
@@ -145,11 +145,11 @@ class RequireLoginSubscriber implements EventSubscriberInterface {
    * @return bool
    *   Return FALSE if authentication isn't required. Otherwise TRUE.
    */
-  private function checkLogin(GetResponseEvent $event, ImmutableConfig $config, Request $request) {
+  private function checkLogin(RequestEvent $event, ImmutableConfig $config, Request $request) {
     // Check event exception status codes.
-    if ($event instanceof GetResponseForExceptionEvent) {
+    if ($event instanceof ExceptionEvent) {
       /** @var \Symfony\Component\HttpKernel\Exception\HttpException $exception */
-      $exception = $event->getException();
+      $exception = $event->getThrowable();
       switch ($exception->getStatusCode()) {
         case '403':
           if ($config->get('excluded_403')) {
@@ -238,13 +238,13 @@ class RequireLoginSubscriber implements EventSubscriberInterface {
   /**
    * Prepare login redirect response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event response.
    *
    * @return string|null
    *   The redirect URL.
    */
-  private function loginRedirect(GetResponseEvent $event) {
+  private function loginRedirect(RequestEvent $event) {
     if ($this->accountProxy->getAccount()->isAuthenticated()) {
       // Stop if user is authenticated.
       return NULL;
@@ -279,10 +279,10 @@ class RequireLoginSubscriber implements EventSubscriberInterface {
   /**
    * Login redirect on KernelEvents::EXCEPTION.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event response.
    */
-  public function exceptionRedirect(GetResponseEvent $event) {
+  public function exceptionRedirect(RequestEvent $event) {
     // Boolean indicating event exception. Prevents potential infinite
     // redirect loop on KernelEvents::REQUEST.
     $this->eventException = TRUE;
@@ -296,10 +296,10 @@ class RequireLoginSubscriber implements EventSubscriberInterface {
   /**
    * Login redirect on KernelEvents::REQUEST.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event response.
    */
-  public function requestRedirect(GetResponseEvent $event) {
+  public function requestRedirect(RequestEvent $event) {
     if (!$this->eventException && ($redirect = $this->loginRedirect($event))) {
       $response = new RedirectResponse($redirect);
       $event->setResponse($response);
diff --git a/src/Form/RequireLoginSettingsForm.php b/src/Form/RequireLoginSettingsForm.php
index 094723a..ad14ee7 100644
--- a/src/Form/RequireLoginSettingsForm.php
+++ b/src/Form/RequireLoginSettingsForm.php
@@ -91,7 +91,7 @@ class RequireLoginSettingsForm extends ConfigFormBase {
     $form['excluded_paths'] = [
       '#type' => 'textarea',
       '#title' => $this->t('Excluded paths'),
-      '#description' => render($items),
+      '#description' => \Drupal::service('renderer')->render($items),
       '#default_value' => $config->get('excluded_paths'),
     ];
     $node_types = $config->get('excluded_node_types');
@@ -216,7 +216,7 @@ class RequireLoginSettingsForm extends ConfigFormBase {
           '#prefix' => $this->t('Missing route names detected. You may remove them if the related modules will not be installed.'),
           '#items' => $invalid_route_names,
         ];
-        $this->messenger()->addWarning(render($items));
+        $this->messenger()->addWarning(\Drupal::service('renderer')->render($items));
       }
     }
   }
