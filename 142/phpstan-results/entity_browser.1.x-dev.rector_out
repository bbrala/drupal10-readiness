modules/contrib/entity_browser/entity_browser.api.php
modules/contrib/entity_browser/entity_browser.install
modules/contrib/entity_browser/modules/entity_form/src/Tests/InlineEntityIntegrationTest.php
modules/contrib/entity_browser/modules/example/tests/src/FunctionalJavascript/EntityBrowserExampleTest.php
modules/contrib/entity_browser/src/Controllers/EntityBrowserListBuilder.php
modules/contrib/entity_browser/src/Form/EntityBrowserDeleteForm.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/WidgetValidation/EntityType.php
modules/contrib/entity_browser/src/WidgetValidationBase.php
modules/contrib/entity_browser/tests/modules/entity_browser_test/src/Cache/Context/DummyCacheContext.php
modules/contrib/entity_browser/tests/src/Functional/ConfigAccessTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/PluginsTest.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/WidgetValidation/File.php
modules/contrib/entity_browser/entity_browser.module
modules/contrib/entity_browser/tests/modules/entity_browser_test/src/Form/FormElementTest.php
modules/contrib/entity_browser/src/Ajax/SelectEntitiesCommand.php
modules/contrib/entity_browser/src/Ajax/ValueUpdatedCommand.php
modules/contrib/entity_browser/src/Annotation/EntityBrowserDisplay.php
modules/contrib/entity_browser/src/Annotation/EntityBrowserFieldWidgetDisplay.php
modules/contrib/entity_browser/src/Annotation/EntityBrowserSelectionDisplay.php
modules/contrib/entity_browser/src/Annotation/EntityBrowserWidget.php
modules/contrib/entity_browser/src/Annotation/EntityBrowserWidgetSelector.php
modules/contrib/entity_browser/src/Annotation/EntityBrowserWidgetValidation.php
modules/contrib/entity_browser/src/Controllers/EntityBrowserController.php
modules/contrib/entity_browser/src/Form/EntityBrowserEditForm.php
modules/contrib/entity_browser/src/DisplayAjaxInterface.php
modules/contrib/entity_browser/src/DisplayBase.php
modules/contrib/entity_browser/src/Plugin/Field/FieldWidget/EntityReferenceBrowserWidget.php
modules/contrib/entity_browser/tests/src/Functional/EntityBrowserUITest.php
modules/contrib/entity_browser/entity_browser.views.inc
modules/contrib/entity_browser/modules/entity_form/entity_browser_entity_form.module
modules/contrib/entity_browser/src/WidgetValidationInterface.php
modules/contrib/entity_browser/src/WidgetValidationManager.php
modules/contrib/entity_browser/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/DummyWidget.php
modules/contrib/entity_browser/src/WidgetsCollection.php
modules/contrib/entity_browser/src/WidgetsLazyPluginCollection.php
modules/contrib/entity_browser/tests/fixtures/update/entity_browser.update-hook-test.php
modules/contrib/entity_browser/src/DisplayInterface.php
modules/contrib/entity_browser/src/DisplayManager.php
modules/contrib/entity_browser/modules/entity_form/tests/src/FunctionalJavascript/EntityFormWidgetTest.php
modules/contrib/entity_browser/src/Controllers/EntityBrowserFormController.php
modules/contrib/entity_browser/tests/src/Functional/EntityBrowserUpdateHookTest.php
modules/contrib/entity_browser/src/DisplayRouterInterface.php
modules/contrib/entity_browser/src/Element/EntityBrowserElement.php
modules/contrib/entity_browser/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/MultipleSubmitTestWidget.php
modules/contrib/entity_browser/tests/modules/entity_browser_test/src/Plugin/EntityBrowser/Widget/PagerTestWidget.php
modules/contrib/entity_browser/tests/src/Functional/FormElementTest.php
modules/contrib/entity_browser/modules/entity_form/src/Plugin/EntityBrowser/Widget/EntityForm.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/CardinalityTest.php
modules/contrib/entity_browser/src/Element/EntityBrowserPagerElement.php
modules/contrib/entity_browser/src/Entity/EntityBrowser.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/UploadWidgetTest.php
modules/contrib/entity_browser/src/Form/EntityBrowserForm.php
modules/contrib/entity_browser/src/EntityBrowserFormInterface.php
modules/contrib/entity_browser/src/EntityBrowserInterface.php
modules/contrib/entity_browser/src/Events/AlterEntityBrowserDisplayData.php
modules/contrib/entity_browser/src/Events/EntitySelectionEvent.php
modules/contrib/entity_browser/src/Events/EventBase.php
modules/contrib/entity_browser/src/Events/Events.php
modules/contrib/entity_browser/src/Events/RegisterJSCallbacks.php
modules/contrib/entity_browser/src/Events/SelectionDoneEvent.php
modules/contrib/entity_browser/src/FieldWidgetDisplayBase.php
modules/contrib/entity_browser/src/Form/WidgetsConfig.php
modules/contrib/entity_browser/src/FieldWidgetDisplayInterface.php
modules/contrib/entity_browser/src/FieldWidgetDisplayManager.php
modules/contrib/entity_browser/tests/src/Kernel/Extension/EntityBrowserTest.php
modules/contrib/entity_browser/src/Permissions.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/Display/IFrame.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/ConfigurationTest.php
modules/contrib/entity_browser/src/Plugin/Field/FieldWidget/FileBrowserWidget.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/Display/Modal.php
modules/contrib/entity_browser/tests/src/Kernel/Plugin/FieldWidgetDisplayTest.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/Display/Standalone.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/FieldWidgetDisplay/EntityLabel.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/FieldWidgetDisplay/ImageThumbnail.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/FieldWidgetDisplay/RenderedEntity.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/SelectionDisplay/MultiStepDisplay.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityBrowserTest.php
modules/contrib/entity_browser/src/Plugin/views/argument_default/EntityBrowserWidgetContext.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/SelectionDisplay/NoDisplay.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/SelectionDisplay/View.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/Widget/Upload.php
modules/contrib/entity_browser/src/Plugin/views/display/EntityBrowser.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/Widget/View.php
modules/contrib/entity_browser/src/Plugin/views/field/SearchApiSelectForm.php
modules/contrib/entity_browser/src/Plugin/views/field/SelectForm.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityBrowserViewsWidgetTest.php
modules/contrib/entity_browser/src/Plugin/views/filter/ContextualBundle.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/WidgetSelector/DropDown.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/WidgetSelector/Single.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/WidgetSelector/Tabs.php
modules/contrib/entity_browser/src/Plugin/EntityBrowser/WidgetValidation/Cardinality.php
modules/contrib/entity_browser/src/PluginConfigurationFormTrait.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityBrowserWebDriverTestBase.php
modules/contrib/entity_browser/src/RouteSubscriber.php
modules/contrib/entity_browser/src/SelectionDisplayBase.php
modules/contrib/entity_browser/src/SelectionDisplayInterface.php
modules/contrib/entity_browser/src/SelectionDisplayManager.php
modules/contrib/entity_browser/src/WidgetBase.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityEmbedTest.php
modules/contrib/entity_browser/src/WidgetInterface.php
modules/contrib/entity_browser/src/WidgetManager.php
modules/contrib/entity_browser/src/WidgetSelectorBase.php
modules/contrib/entity_browser/src/WidgetSelectorInterface.php
modules/contrib/entity_browser/src/WidgetSelectorManager.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityQueueTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/FieldWidgetConfigTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/ImageFieldTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/InlineEntityFormTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/MultiStepSelectionDisplayTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/PagerElementTest.php
modules/contrib/entity_browser/tests/src/FunctionalJavascript/ParagraphsTest.php

25 files with changes
=====================

1) modules/contrib/entity_browser/modules/entity_form/tests/src/FunctionalJavascript/EntityFormWidgetTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'foo', 'name' => 'Foo']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_browser/modules/entity_form/src/Tests/InlineEntityIntegrationTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Delete unnecessary entity browser.
     $browser = $this->container->get('entity_type.manager')->getStorage('entity_browser')->load('entity_browser_test_entity_form');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_browser/src/Events/EventBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Events;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Base implementation of entity browser events.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_browser/tests/src/Kernel/Plugin/FieldWidgetDisplayTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->pluginManager = $this->container->get('plugin.manager.entity_browser.field_widget_display');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_browser/tests/src/Kernel/Extension/EntityBrowserTest.php:60

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     FileCacheFactory::setPrefix($this->randomString(4));
     parent::setUp();

@@ @@
         $this->fail('An entity browser without required ' . $plugin_type . ' created with no exception thrown.');
       }
       catch (PluginException $e) {
-        $this->assertContains('The "" plugin does not exist.', $e->getMessage(), 'An exception was thrown when an entity_browser was created without a ' . $plugin_type . ' plugin.');
+        $this->assertStringContainsString('The "" plugin does not exist.', $e->getMessage(), 'An exception was thrown when an entity_browser was created without a ' . $plugin_type . ' plugin.');
       }
     }
    ----------- end diff -----------

Applied rules:
 * SpecificAssertContainsRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_browser/tests/src/FunctionalJavascript/UploadWidgetTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Grant permission to this user to use also the EB page we are testing.
@@ @@
     $page = $this->getSession()->getPage();

     // Make sure the test file is not present beforehand.
-    $this->assertFileNotExists('public://druplicon.png');
+    $this->assertFileDoesNotExist('public://druplicon.png');

     // Go to the widget standalone page and test the upload.
     $this->drupalGet($browser->getDisplay()->path());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_browser/src/Plugin/EntityBrowser/Display/Modal.php:31

    ---------- begin diff ----------
@@ @@
     DisplayBase::displayEntityBrowser($element, $form_state, $complete_form, $persistent_data);
     $js_event_object = new RegisterJSCallbacks($this->configuration['entity_browser_id'], $this->getUuid());
     $js_event_object->registerCallback('Drupal.entityBrowser.selectionCompleted');
-    $js_event = $this->eventDispatcher->dispatch(Events::REGISTER_JS_CALLBACKS, $js_event_object);
+    $js_event = $this->eventDispatcher->dispatch($js_event_object, Events::REGISTER_JS_CALLBACKS);
     $original_path = $this->currentPath->getPath();

     $data = [
@@ @@
       ],
     ];
     $event_object = new AlterEntityBrowserDisplayData($this->configuration['entity_browser_id'], $this->getUuid(), $this->getPluginDefinition(), $form_state, $data);
-    $event = $this->eventDispatcher->dispatch(Events::ALTER_BROWSER_DISPLAY_DATA, $event_object);
+    $event = $this->eventDispatcher->dispatch($event_object, Events::ALTER_BROWSER_DISPLAY_DATA);
     $data = $event->getData();
     return [
       '#theme_wrappers' => ['container'],
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_browser/src/Plugin/EntityBrowser/Display/IFrame.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Plugin\EntityBrowser\Display;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Path\CurrentPathStack;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Render\BareHtmlPageRendererInterface;
@@ @@
     /** @var \Drupal\entity_browser\Events\RegisterJSCallbacks $event */
     $js_event_object = new RegisterJSCallbacks($this->configuration['entity_browser_id'], $this->getUuid());
     $js_event_object->registerCallback('Drupal.entityBrowser.selectionCompleted');
-    $callback_event = $this->eventDispatcher->dispatch(Events::REGISTER_JS_CALLBACKS, $js_event_object);
+    $callback_event = $this->eventDispatcher->dispatch($js_event_object, Events::REGISTER_JS_CALLBACKS);
     $original_path = $this->currentPath->getPath();

     $data = [
@@ @@
       ],
     ];
     $event_object = new AlterEntityBrowserDisplayData($this->configuration['entity_browser_id'], $this->getUuid(), $this->getPluginDefinition(), $form_state, $data);
-    $event = $this->eventDispatcher->dispatch(Events::ALTER_BROWSER_DISPLAY_DATA, $event_object);
+    $event = $this->eventDispatcher->dispatch($event_object, Events::ALTER_BROWSER_DISPLAY_DATA);
     $data = $event->getData();
     return [
       '#theme_wrappers' => ['container'],
@@ @@
    * Intercepts default response and injects response that will trigger JS to
    * propagate selected entities upstream.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   Response event.
    */
-  public function propagateSelection(FilterResponseEvent $event) {
+  public function propagateSelection(ResponseEvent $event) {
     $render = [
       '#attached' => [
         'library' => ['entity_browser/' . $this->pluginDefinition['id'] . '_selection'],
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_browser/src/WidgetBase.php:339

    ---------- begin diff ----------
@@ @@
     $selected_entities = array_merge($selected_entities, $entities);

     $this->eventDispatcher->dispatch(
-      Events::SELECTED,
       new EntitySelectionEvent(
         $this->configuration['entity_browser_id'],
         $form_state->get(['entity_browser', 'instance_uuid']),
         $entities
-      ));
+      ),
+      Events::SELECTED);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_browser/src/SelectionDisplayBase.php:155

    ---------- begin diff ----------
@@ @@
   protected function selectionDone(FormStateInterface $form_state) {
     $form_state->set(['entity_browser', 'selection_completed'], TRUE);
     $this->eventDispatcher->dispatch(
-      Events::DONE,
       new SelectionDoneEvent(
         $this->configuration['entity_browser_id'],
         $form_state->get(['entity_browser', 'instance_uuid'])
-      ));
+      ),
+      Events::DONE);
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity_browser/src/Plugin/Field/FieldWidget/FileBrowserWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_browser\Plugin\Field\FieldWidget;

+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Component\Utility\Environment;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;

 /**
  * Entity browser file widget.
@@ @@
   /**
    * The mime type guesser service.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var \Symfony\Component\Mime\MimeTypesInterface
    */
   protected $mimeTypeGuesser;

@@ @@
    *   The current user.
    * @param \Drupal\Core\Messenger\MessengerInterface $messenger
    *   The messenger.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mime_type_guesser
+   * @param \Symfony\Component\Mime\MimeTypesInterface $mime_type_guesser
    *   The mime type guesser service.
    */
-  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, FieldWidgetDisplayManager $field_display_manager, ConfigFactoryInterface $config_factory, EntityDisplayRepositoryInterface $display_repository, ModuleHandlerInterface $module_handler, AccountInterface $current_user, MimeTypeGuesserInterface $mime_type_guesser, MessengerInterface $messenger) {
+  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager, FieldWidgetDisplayManager $field_display_manager, ConfigFactoryInterface $config_factory, EntityDisplayRepositoryInterface $display_repository, ModuleHandlerInterface $module_handler, AccountInterface $current_user, MimeTypesInterface $mime_type_guesser, MessengerInterface $messenger) {
     parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $third_party_settings, $entity_type_manager, $field_display_manager, $module_handler, $current_user, $messenger);
     $this->entityTypeManager = $entity_type_manager;
     $this->fieldDisplayManager = $field_display_manager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity_browser/tests/src/FunctionalJavascript/PagerElementTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'foo', 'name' => 'Foo']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entity_browser/tests/src/FunctionalJavascript/InlineEntityFormTest.php:406

    ---------- begin diff ----------
@@ @@

     $ief_table = $this->assertSession()->elementExists('xpath', '//table[contains(@id, "ief-entity-table-edit-field-nodes-entities")]');
     $table_text = $ief_table->getText();
-    $this->assertContains('Boxer', $table_text);
-    $this->assertContains('Napoleon', $table_text);
+    $this->assertStringContainsString('Boxer', $table_text);
+    $this->assertStringContainsString('Napoleon', $table_text);
   }

 }
    ----------- end diff -----------

Applied rules:
 * SpecificAssertContainsRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/entity_browser/tests/src/FunctionalJavascript/ImageFieldTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     FieldStorageConfig::create([
@@ @@
     /** @var \Drupal\file\Entity\File $file */
     $fid = explode(':', $entity_id)[1];
     $file = File::load($fid);
-    $this->assertContains('entity-browser-test', $file->getFileUri());
+    $this->assertStringContainsString('entity-browser-test', $file->getFileUri());
   }

 }
    ----------- end diff -----------

Applied rules:
 * SpecificAssertContainsRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/entity_browser/tests/src/FunctionalJavascript/FieldWidgetConfigTest.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->drupalPlaceBlock('local_actions_block');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     /** @var \Drupal\user\RoleInterface $role */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityQueueTest.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityEmbedTest.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityBrowserWebDriverTestBase.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     FieldStorageConfig::create([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityBrowserViewsWidgetTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $user = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/entity_browser/tests/src/FunctionalJavascript/ConfigurationTest.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->drupalPlaceBlock('local_actions_block');
@@ @@
     $this->assertSession()->fieldExists('display_configuration[link_text]')->setValue('Select some entities');
     $this->assertSession()->selectExists('widget_selector')->selectOption('tabs');
     $this->assertSession()->selectExists('selection_display')->selectOption('no_display');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been added. Now you may configure the widgets you would like to use.');

     $this->assertSession()->addressEquals('/admin/config/content/entity_browser/test_entity_browser/widgets');
@@ @@
     $this->assertSession()->fieldExists('display_configuration[width]')->setValue('100');
     $this->assertSession()->fieldExists('display_configuration[height]')->setValue('100');
     $this->assertSession()->fieldExists('display_configuration[link_text]')->setValue('All animals are created equal');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->addressEquals('/admin/config/content/entity_browser/test_entity_browser/edit');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been updated.');

@@ @@
     $this->assertSession()->selectExists('display')->selectOption('standalone');
     $this->assertSession()->assertWaitOnAjaxRequest();
     $this->assertSession()->fieldExists('display_configuration[path]')->setValue('/all-animals');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->addressEquals('/admin/config/content/entity_browser/test_entity_browser/edit');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been updated.');
     $this->clickLink('General Settings');
@@ @@

     // Test validation of leading forward slash.
     $this->assertSession()->fieldExists('display_configuration[path]')->setValue('no-forward-slash');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->responseContains('The Path field must begin with a forward slash.');
     $this->assertSession()->fieldExists('display_configuration[path]')->setValue('/all-animals');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been updated.');
     $this->getSession()->executeScript("jQuery('details').attr('open', 'open');");

@@ @@
     $this->getSession()->executeScript("jQuery('.visually-hidden').removeClass('visually-hidden');");
     $this->assertSession()->fieldExists('name')->setValue('test_entity_browser');
     // Use defaults and save to go to WidgetsConfig form.
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->addressEquals('/admin/config/content/entity_browser/test_entity_browser/widgets');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been added. Now you may configure the widgets you would like to use.');
     $widgetSelect = $this->assertSession()->selectExists('widget');
@@ @@
     $this->assertSession()->assertWaitOnAjaxRequest();
     $this->assertSession()->selectExists("table[$uuid][form][bundle][select]")->selectOption('foo');
     $this->assertSession()->selectExists("table[$uuid][form][form_mode][form_select]");
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->addressEquals('/admin/config/content/entity_browser/test_entity_browser/widgets');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been updated.');

@@ @@
     $this->assertSession()->fieldExists("table[$uuid][form][submit_text]");
     $this->assertSession()->fieldExists("table[$uuid][form][auto_select]")->check();
     $this->assertSession()->selectExists("table[$uuid][form][view]")->selectOption('nodes_entity_browser.entity_browser_1');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->addressEquals('/admin/config/content/entity_browser/test_entity_browser/widgets');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been updated.');

@@ @@
     $this->assertSession()->fieldExists("table[$uuid][form][multiple]");
     $this->assertSession()->fieldExists("table[$uuid][form][upload_location]");
     $this->assertSession()->elementExists('css', 'a.token-dialog.use-ajax');
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->addressEquals('/admin/config/content/entity_browser/test_entity_browser/widgets');
     $this->assertSession()->pageTextContains('The entity browser Test entity browser has been updated.');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/entity_browser/tests/src/FunctionalJavascript/CardinalityTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     /** @var \Drupal\user\RoleInterface $role */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/entity_browser/tests/src/Functional/FormElementTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->container
       ->get('entity_type.manager')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/entity_browser/tests/src/Functional/EntityBrowserUpdateHookTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $entity_browser_type = $this->container
       ->get('entity_type.manager')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/entity_browser/tests/src/Functional/ConfigAccessTest.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->drupalPlaceBlock('local_actions_block');
@@ @@
     $this->drupalGet('/admin/config/content/entity_browser');
     $this->clickLink('Delete');
     $this->assertSession()->responseContains('This action cannot be undone.', 'Delete question found.');
-    $this->drupalPostForm(NULL, [], 'Delete Entity Browser');
+    $this->submitForm([], 'Delete Entity Browser');

     $this->assertSession()->responseContains('Entity browser <em class="placeholder">Test entity browser</em> was deleted.', 'Confirmation message found.');
     $this->assertSession()->responseContains('There are no entity browser entities yet.', 'Entity browsers table is empty.');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 25 files have been changed by Rector                                      

