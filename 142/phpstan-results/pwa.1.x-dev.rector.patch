diff --git a/pwa.api.php b/pwa.api.php
index 8b208a6..6636d02 100644
--- a/pwa.api.php
+++ b/pwa.api.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\node\Entity\Node;
 /**
  * @file
  * Hooks provided by the Progressive Web App module.
@@ -30,7 +31,7 @@ use Drupal\Core\Cache\CacheableMetadata;
  */
 function hook_pwa_cache_urls_alter(&$cacheUrls, CacheableMetadata &$cacheableMetadata) {
   // Get a node URL and its cacheability metadata.
-  $generated_url = \Drupal\node\Entity\Node::load('1')->toUrl()->toString(TRUE);
+  $generated_url = Node::load('1')->toUrl()->toString(TRUE);
   // Add the URL to the list.
   $cacheUrls[] = $generated_url->getGeneratedUrl();
   // Merge the cacheability metadata.
@@ -70,7 +71,7 @@ function hook_pwa_exclude_urls_alter(&$excludeUrls, CacheableMetadata &$cacheabl
  * @see hook_pwa_cache_urls_assets_page_alter()
  */
 function hook_pwa_cache_urls_assets_alter(&$resources) {
-  $module_path = drupal_get_path('module', 'pwa');
+  $module_path = \Drupal::service('extension.list.module')->getPath('pwa');
   $resources[] = "/$module_path/assets/loading.gif";
 }
 
diff --git a/src/Controller/PWAController.php b/src/Controller/PWAController.php
index 3bce084..22d4bf2 100644
--- a/src/Controller/PWAController.php
+++ b/src/Controller/PWAController.php
@@ -254,7 +254,7 @@ class PWAController implements ContainerInjectionInterface {
    * @return mixed
    */
   public function pwa_serviceworker_file_data(Request $request) {
-    $path = drupal_get_path('module', 'pwa');
+    $path = \Drupal::service('extension.list.module')->getPath('pwa');
 
     $sw = file_get_contents($path . '/js/serviceworker.js');
 
diff --git a/src/EventSubscriber/ResponseSubscriber.php b/src/EventSubscriber/ResponseSubscriber.php
index 4fe5457..6099e6d 100644
--- a/src/EventSubscriber/ResponseSubscriber.php
+++ b/src/EventSubscriber/ResponseSubscriber.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\pwa\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -34,12 +34,12 @@ class ResponseSubscriber implements EventSubscriberInterface {
   /**
    * Clear serviceworker cache on user change.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    *
    * @see pwa_user_login()
    */
-  public function processResponse(FilterResponseEvent $event) {
+  public function processResponse(ResponseEvent $event) {
     $response = $event->getResponse();
 
     if ($event->getRequest()->get('_route') === 'user.logout') {
diff --git a/src/Form/ManifestConfigurationForm.php b/src/Form/ManifestConfigurationForm.php
index f0a4d03..9646c5c 100644
--- a/src/Form/ManifestConfigurationForm.php
+++ b/src/Form/ManifestConfigurationForm.php
@@ -155,7 +155,7 @@ class ManifestConfigurationForm extends ConfigFormBase {
   public function buildForm(array $form, FormStateInterface $form_state) {
 
     $host = $this->getRequest()->server->get('HTTP_HOST');
-    $files_path = file_create_url("public://pwa") . '/';
+    $files_path = \Drupal::service('file_url_generator')->generateAbsoluteString("public://pwa") . '/';
     if (substr($files_path, 0, 7) == 'http://') {
       $files_path = str_replace('http://', '', $files_path);
     }
