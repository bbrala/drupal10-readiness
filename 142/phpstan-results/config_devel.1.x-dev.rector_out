modules/contrib/config_devel/drush/config_devel.drush.inc
modules/contrib/config_devel/tests/src/Unit/ConfigDevelAutoExportSubscriberTest.php
modules/contrib/config_devel/tests/src/Unit/ConfigDevelTestBase.php
modules/contrib/config_devel/src/Commands/ConfigDevelCommands.php
modules/contrib/config_devel/tests/src/Unit/ConfigImporterExporterTest.php
modules/contrib/config_devel/src/ConfigImporterExporter.php
modules/contrib/config_devel/src/Event/ConfigDevelEvents.php
modules/contrib/config_devel/src/Event/ConfigDevelSaveEvent.php
modules/contrib/config_devel/src/EventSubscriber/ConfigDevelAutoExportSubscriber.php
modules/contrib/config_devel/src/EventSubscriber/ConfigDevelAutoImportSubscriber.php
modules/contrib/config_devel/src/EventSubscriber/ConfigDevelSubscriberBase.php
modules/contrib/config_devel/src/Form/ConfigDevelSettingsForm.php
modules/contrib/config_devel/tests/src/Kernel/ConfigDevelSubscriberEntityTest.php
modules/contrib/config_devel/tests/src/Kernel/ConfigDevelSubscriberRawTest.php
modules/contrib/config_devel/tests/src/Kernel/ConfigDevelSubscriberTestBase.php

10 files with changes
=====================

1) modules/contrib/config_devel/tests/src/Unit/ConfigImporterExporterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_devel\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\StorageInterface;
 use Drupal\Core\ProxyClass\Lock\PersistentDatabaseLockBackend;
 use Drupal\Core\Config\TypedConfigManagerInterface;
@@ @@
  */
 class ConfigImporterExporterTest extends ConfigDevelTestBase {

+  use ProphecyTrait;
   /**
    * Test ConfigImporterExporter::writeBackConfig().
    */
@@ @@
       'uuid' => '836769f4-6791-402d-9046-cc06e20be87f',
     );

-    $config = $this->getMockBuilder('\Drupal\Core\Config\Config')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock('\Drupal\Core\Config\Config');
     $config->expects($this->any())
       ->method('getName')
       ->will($this->returnValue($this->randomMachineName()));
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/config_devel/tests/src/Unit/ConfigDevelTestBase.php:10

    ---------- begin diff ----------
@@ @@
 abstract class ConfigDevelTestBase extends UnitTestCase {

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configFactory;

   /**
-   * @var \Drupal\Core\Config\ConfigManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->configFactory = $this->createMock('Drupal\Core\Config\ConfigFactoryInterface');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/config_devel/tests/src/Unit/ConfigDevelAutoExportSubscriberTest.php:22

    ---------- begin diff ----------
@@ @@
       'uuid' => '836769f4-6791-402d-9046-cc06e20be87f',
     );

-    $config = $this->getMockBuilder('\Drupal\Core\Config\Config')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock('\Drupal\Core\Config\Config');
     $config->expects($this->any())
       ->method('getName')
       ->will($this->returnValue($this->randomMachineName()));
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/config_devel/tests/src/Kernel/ConfigDevelSubscriberRawTest.php:17

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   protected function doAssert(array $data, array $exported_data) {
-    $this->assertIdentical($data, $this->storage->read(static::CONFIGNAME));
-    $this->assertIdentical($data, $exported_data);
+    $this->assertSame($data, $this->storage->read(static::CONFIGNAME));
+    $this->assertSame($data, $exported_data);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/config_devel/tests/src/Kernel/ConfigDevelSubscriberEntityTest.php:23

    ---------- begin diff ----------
@@ @@
    */
   protected function doAssert(array $data, array $exported_data) {
     $entity = \Drupal::entityTypeManager()->getStorage('config_test')->load('test');
-    $this->assertIdentical($data['label'], $entity->get('label'));
-    $this->assertIdentical($exported_data['label'], $data['label']);
-    $this->assertIdentical($exported_data['id'], 'test');
+    $this->assertSame($data['label'], $entity->get('label'));
+    $this->assertSame($exported_data['label'], $data['label']);
+    $this->assertSame($exported_data['id'], 'test');
     $this->assertFalse(isset($exported_data['uuid']));
   }
 }
    ----------- end diff -----------

Applied rules:
 * AssertIdenticalRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/config_devel/src/EventSubscriber/ConfigDevelAutoExportSubscriber.php:8

    ---------- begin diff ----------
@@ @@
 use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\Core\Config\FileStorage;
 use Drupal\Core\Config\InstallStorage;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\Yaml\Exception\DumpException;
@@ @@

       // Let everyone else have a change to update the exported data.
       $event = new ConfigDevelSaveEvent($file_names, $data);
-      $this->eventDispatcher->dispatch(ConfigDevelEvents::SAVE, $event);
+      $this->eventDispatcher->dispatch($event, ConfigDevelEvents::SAVE);
       $data = $event->getData();
       $file_names = $event->getFileNames();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/config_devel/src/Event/ConfigDevelSaveEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_devel\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * The ConfigDevelSaveEvent class.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/config_devel/src/ConfigImporterExporter.php:238

    ---------- begin diff ----------
@@ @@

       // Let everyone else have a change to update the exported data.
       $event = new ConfigDevelSaveEvent($file_names, $data);
-      $this->eventDispatcher->dispatch(ConfigDevelEvents::SAVE, $event);
+      $this->eventDispatcher->dispatch($event, ConfigDevelEvents::SAVE);
       $data = $event->getData();
       $file_names = $event->getFileNames();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


9) modules/contrib/config_devel/src/Commands/ConfigDevelCommands.php:286

    ---------- begin diff ----------
@@ @@
    *   An array containing install and optional config.
    */
   protected function getExtensionConfig($type, $extension) {
-    $filename = drupal_get_path($type, $extension) . '/' . $extension .'.info.yml';
+    $filename = \Drupal::service('extension.path.resolver')->getPath($type, $extension) . '/' . $extension .'.info.yml';
     $info = $this->infoParser->parse($filename);

     $config = [];
@@ @@
    *   created.
    */
   protected function exportConfig($config_list, $type, $extension, $directory) {
-    $config_path = drupal_get_path($type, $extension) . "/$directory";
+    $config_path = \Drupal::service('extension.path.resolver')->getPath($type, $extension) . "/$directory";
     // Ensure the directory always exists.
     if (!file_exists($config_path) && !$this->fileSystem->mkdir($config_path, NULL, TRUE)) {
       throw new \Exception(sprintf('The %s directory could not be created', $config_path));
@@ @@
    *   or \Drupal\Core\Config\InstallStorage\InstallStorage::CONFIG_OPTIONAL_DIRECTORY.
    */
   protected function importConfig($config_list, $type, $extension, $directory) {
-    $config_path = drupal_get_path($type, $extension) . "/$directory";
+    $config_path = \Drupal::service('extension.path.resolver')->getPath($type, $extension) . "/$directory";
     foreach ($config_list as $name) {
       $file_name = $config_path . '/' . $name . '.yml';
       $this->importSingle($file_name);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/config_devel/drush/config_devel.drush.inc:160

    ---------- begin diff ----------
@@ @@
  *   TRUE when the configuration was successfully exported. FALSE otherwise.
  */
 function drush_config_devel_process_config($config_list, $type, $extension, $directory) {
-  $config_path = drupal_get_path($type, $extension) . "/$directory";
+  $config_path = \Drupal::service('extension.path.resolver')->getPath($type, $extension) . "/$directory";

   // Ensure the directory always exists.
   if (!file_exists($config_path) && !\Drupal::service('file_system')->mkdir($config_path, NULL, TRUE)) {
@@ @@
  *   The directory we're exporting to.
  */
 function drush_config_devel_import_config($config_list, $type, $extension, $directory) {
-  $config_path = drupal_get_path($type, $extension) . "/$directory";
+  $config_path = \Drupal::service('extension.path.resolver')->getPath($type, $extension) . "/$directory";
   foreach ($config_list as $name) {
     $file_name = $config_path . '/' . $name . '.yml';
     drush_config_devel_import_one($file_name);
@@ @@
  *   An array containing install and optional config
  */
 function drush_config_devel_get_config($type, $extension) {
-  $filename = drupal_get_path($type, $extension) . '/' . $extension .'.info.yml';
+  $filename = \Drupal::service('extension.path.resolver')->getPath($type, $extension) . '/' . $extension .'.info.yml';
   $info = \Drupal::service('info_parser')->parse($filename);

   $config = array();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

