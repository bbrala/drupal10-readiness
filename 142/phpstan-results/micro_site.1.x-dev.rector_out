modules/contrib/micro_site/micro_site.api.php
modules/contrib/micro_site/micro_site.tokens.inc
modules/contrib/micro_site/src/Form/MicroSiteConfig.php
modules/contrib/micro_site/micro_site.install
modules/contrib/micro_site/src/Plugin/Validation/Constraint/SiteUrlFieldConstraintValidator.php
modules/contrib/micro_site/src/StackMiddleware/MicroSiteMiddleware.php
modules/contrib/micro_site/site.page.inc
modules/contrib/micro_site/src/Access/DefaultSettingsAccess.php
modules/contrib/micro_site/src/Form/SiteDeleteForm.php
modules/contrib/micro_site/src/Form/SiteForm.php
modules/contrib/micro_site/micro_site.module
modules/contrib/micro_site/src/Access/SiteAccessCheck.php
modules/contrib/micro_site/src/AssetFileStorage.php
modules/contrib/micro_site/src/Plugin/Validation/Constraint/StatusFieldConstraint.php
modules/contrib/micro_site/src/Plugin/Validation/Constraint/StatusFieldConstraintValidator.php
modules/contrib/micro_site/src/Plugin/views/argument/SiteId.php
modules/contrib/micro_site/tests/src/Functional/BaseTest.php
modules/contrib/micro_site/src/Commands/MicroSiteCommands.php
modules/contrib/micro_site/src/Plugin/views/argument_default/CurrentSite.php
modules/contrib/micro_site/src/Plugin/views/argument_default/Site.php
modules/contrib/micro_site/src/Form/SiteRevisionDeleteForm.php
modules/contrib/micro_site/src/Plugin/views/field/SiteName.php
modules/contrib/micro_site/src/Routing/SiteRouteProvider.php
modules/contrib/micro_site/src/Form/SiteRevisionRevertForm.php
modules/contrib/micro_site/src/SiteAccessControlHandler.php
modules/contrib/micro_site/tests/src/Functional/MicroSiteBase.php
modules/contrib/micro_site/src/SiteConfigOverrides.php
modules/contrib/micro_site/src/SiteHtmlRouteProvider.php
modules/contrib/micro_site/src/Form/SiteRevisionRevertTranslationForm.php
modules/contrib/micro_site/src/SiteListBuilder.php
modules/contrib/micro_site/src/ContextProvider/CurrentSiteContext.php
modules/contrib/micro_site/src/SiteNegotiator.php
modules/contrib/micro_site/src/Controller/DefaultSettingsController.php
modules/contrib/micro_site/src/Controller/SiteController.php
modules/contrib/micro_site/src/Form/SiteSettingsForm.php
modules/contrib/micro_site/src/Form/SiteTypeDeleteForm.php
modules/contrib/micro_site/src/SiteNegotiatorInterface.php
modules/contrib/micro_site/src/SiteStorage.php
modules/contrib/micro_site/src/CssFileStorage.php
modules/contrib/micro_site/src/Entity/Site.php
modules/contrib/micro_site/src/Form/SiteTypeForm.php
modules/contrib/micro_site/tests/src/Traits/MicroSiteTestTrait.php
modules/contrib/micro_site/src/SiteStorageInterface.php
modules/contrib/micro_site/src/SiteTranslationHandler.php
modules/contrib/micro_site/src/SiteTypeHtmlRouteProvider.php
modules/contrib/micro_site/src/SiteTypeListBuilder.php
modules/contrib/micro_site/src/SiteUsers.php
modules/contrib/micro_site/src/MicroSiteServiceProvider.php
modules/contrib/micro_site/src/PathProcessor/SiteFrontPageProcessor.php
modules/contrib/micro_site/src/PiwikConfigOverrides.php
modules/contrib/micro_site/src/Plugin/Block/MicroSiteInformationBlock.php
modules/contrib/micro_site/src/Plugin/Condition/Site.php
modules/contrib/micro_site/src/Plugin/EntityReferenceSelection/SiteAdminSelection.php
modules/contrib/micro_site/src/Plugin/EntityReferenceSelection/SiteSelection.php
modules/contrib/micro_site/src/Plugin/Field/FieldFormatter/SiteUrlFormatter.php
modules/contrib/micro_site/src/Plugin/Validation/Constraint/RegisteredFieldConstraint.php
modules/contrib/micro_site/src/Plugin/Validation/Constraint/RegisteredFieldConstraintValidator.php
modules/contrib/micro_site/src/Plugin/Validation/Constraint/SiteUrlFieldConstraint.php
modules/contrib/micro_site/src/Entity/SiteInterface.php
modules/contrib/micro_site/src/Entity/SiteType.php
modules/contrib/micro_site/src/Entity/SiteTypeInterface.php
modules/contrib/micro_site/src/Entity/SiteViewsData.php
modules/contrib/micro_site/src/EventSubscriber/NodeSubscriber.php
modules/contrib/micro_site/src/EventSubscriber/Shield.php
modules/contrib/micro_site/src/EventSubscriber/SiteRedirectSubscriber.php
modules/contrib/micro_site/src/EventSubscriber/TermSubscriber.php

9 files with changes
====================

1) modules/contrib/micro_site/micro_site.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\FileInterface;
 /**
  * @file
  * Contains micro_site.module.
@@ @@
       /** @var \Drupal\Core\Image\Image $image */
       $image = \Drupal::service('image.factory')->get($file->getFileUri());
       if ($image->isValid()) {
-        $variables['site_logo'] = file_url_transform_relative(file_create_url($image->getSource()));
+        $variables['site_logo'] = \Drupal::service('file_url_generator')->generateString($image->getSource());
       }
     }
     // Override the site name and slogan.
@@ @@
   if ($site = $negotiator->getActiveSite()) {
     $logo = $site->getLogo();
     $logo_url = '';
-    if ($logo instanceof \Drupal\file\FileInterface) {
+    if ($logo instanceof FileInterface) {
       $logo_uri = $logo->getFileUri();
-      $logo_url = file_url_transform_relative(file_create_url($logo_uri));
+      $logo_url = \Drupal::service('file_url_generator')->generateString($logo_uri);
     }
     $variables['logo'] = $logo_url;
     $variables['site_name'] = $site->getName();
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector


2) modules/contrib/micro_site/micro_site.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Database\Database;
 /**
  * @file
  * Contains micro_site.install.
@@ @@
   $key_value->set($key_name, $storage_schema);

   // Updates the base database field.
-  $db_schema = \Drupal\Core\Database\Database::getConnection()->schema();
+  $db_schema = Database::getConnection()->schema();
   $db_schema->changeField($entity_type_id . '_field_data', $field_name, $field_name, [
     'type' => 'varchar',
     'length' => $field_length,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/micro_site/tests/src/Functional/MicroSiteBase.php:121

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');
     $this->configFactory = $this->container->get('config.factory');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/micro_site/tests/src/Functional/BaseTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->createUserWithPassword(['view published site entities']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testHome() {
     $this->drupalGet(Url::fromUri($this->masterUrl));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
    */
   public function testSiteAccess() {
     $this->drupalGet(Url::fromUri($this->masterUrl));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $generic = $this->createSiteType('generic', 'Generic', 'Generic site type');
     $settings = ['user_id' => $this->microSiteAdminUser->id(), 'registered' => TRUE];
     $site_one = $this->createSite('generic', 'Site One', 'Site one slogan', 'domain', 'one.microsite.local', 'siteone@microsite.local', $settings);
     $expected = 'http://one.microsite.local';
-    $this->assertEqual($site_one->getSitePath(), $expected);
+    $this->assertEquals($site_one->getSitePath(), $expected);

     // Nobody is logged in on the site one.
     $this->drupalGet(Url::fromUri($site_one->getSitePath()));
-    $this->assertResponse(403);
-    $this->assertText('Site One');
+    $this->assertSession()->statusCodeEquals(403);
+    $this->assertSession()->pageTextContains('Site One');

     $this->fillField('edit-name', $this->globalAdminUser->getAccountName());
     $this->fillField('edit-pass', $this->password);
@@ @@

     // Reload the master.
     $this->drupalGet(Url::fromUri($this->masterUrl));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalGet(Url::fromUri($site_one->getSitePath()));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->clickLink('Edit');
     $this->checkField('edit-status-value');
     $this->pressButton('Save');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->pageTextContains('Saved the ' . $site_one->label() .' Site.');

     $this->clickLink('Log out');
     $this->drupalGet(Url::fromUri($site_one->getSitePath()));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->fillField('edit-name', $this->user->getAccountName());
     $this->fillField('edit-pass', $this->password);
@@ @@
     $this->pressButton('edit-submit');
     $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet($site_one->getSitePath() . "/site/{$site_one->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->logOutLogInUser($this->microSiteOwnerUser);
     $this->drupalGet($site_one->getSitePath() . "/site/{$site_one->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->logOutLogInUser($this->globalAdminUser);
     // Add owner user as site admin.
     $edit['field_site_administrator[0][target_id]'] = $this->microSiteOwnerUser->getAccountName() . ' ('. $this->microSiteOwnerUser->id() . ')';
-    $this->drupalPostForm($site_one->getSitePath() ."/site/{$site_one->id()}/edit", $edit, 'Save');
-    $this->assertResponse(200);
+    $this->drupalGet($site_one->getSitePath() ."/site/{$site_one->id()}/edit");
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet($site_one->getSitePath() . "/site/{$site_one->id()}/edit");

     $this->logOutLogInUser($this->microSiteOwnerUser);
     $this->drupalGet($site_one->getSitePath() . "/site/{$site_one->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
     $site_one = $this->createSite('generic', 'Site One', 'Site one slogan', 'domain', 'one.microsite.local', 'siteone@microsite.local', $settings);
     $site_one->setCss('body {background-color: red !important;');
     $expected = 'http://one.microsite.local';
-    $this->assertEqual($site_one->getSitePath(), $expected);
+    $this->assertEquals($site_one->getSitePath(), $expected);
     $name = 'site-' . $site_one->id();
     $css_file = $name . '-' . md5($name) . '.css';
     $this->drupalGet(Url::fromUri($site_one->getSitePath()));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->responseContains($css_file);
     $xpath = $this->xpath("//link[contains(@href, '" . $css_file . "')]");
-    $this->assertEqual(count($xpath), 1, 'Exactly one ' . $css_file . ' css file asset found.');
+    $this->assertEquals(count($xpath), 1, 'Exactly one ' . $css_file . ' css file asset found.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/micro_site/src/Plugin/Validation/Constraint/RegisteredFieldConstraintValidator.php:24

    ---------- begin diff ----------
@@ @@
     $entity = $items->getEntity();
     $registered = $item->value;
     if ($registered) {
-      $url = $entity->getSitePath() . '/' . drupal_get_path('module', 'micro_site') . '/tests/200.png';
+      $url = $entity->getSitePath() . '/' . \Drupal::service('extension.list.module')->getPath('micro_site') . '/tests/200.png';
       try {
         $request = \Drupal::httpClient()->get($url);
         $status_code = $request->getStatusCode();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/micro_site/src/EventSubscriber/TermSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micro_site\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\micro_site\SiteNegotiatorInterface;
 use Drupal\taxonomy\TermInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * This method prevent to access to node without a site_id field.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event object.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();

     // If we've got an exception, nothing to do here.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


7) modules/contrib/micro_site/src/EventSubscriber/SiteRedirectSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micro_site\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\micro_site\SiteNegotiatorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Routing\UrlGeneratorInterface;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ @@
   /**
    * This method is called whenever the kernel.request event is dispatched.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event object.
    */
-  public function onKernelRequestSite(GetResponseEvent $event) {
+  public function onKernelRequestSite(RequestEvent $event) {
     $request = $event->getRequest();
     $exception = $request->get('exception');
     // If we've got an exception, nothing to do here.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


8) modules/contrib/micro_site/src/EventSubscriber/Shield.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micro_site\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\micro_site\SiteNegotiatorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Routing\UrlGeneratorInterface;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ @@
    * // only if KernelEvents::REQUEST !!!
    * @see \Symfony\Component\HttpKernel\KernelEvents for details
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The Event to process.
    */
-  public function ShieldLoad(GetResponseEvent $event) {
+  public function ShieldLoad(RequestEvent $event) {
     // allow Drush to bypass Shield
     if (PHP_SAPI === 'cli') {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


9) modules/contrib/micro_site/src/EventSubscriber/NodeSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micro_site\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\micro_node\MicroNodeFields;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\micro_site\SiteNegotiatorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * This method prevent to access to node without a site_id field.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event object.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();

     // If we've got an exception, nothing to do here.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 9 files have been changed by Rector                                       

