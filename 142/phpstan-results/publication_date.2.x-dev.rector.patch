diff --git a/publication_date.info.yml b/publication_date.info.yml
index c284ef5..7960b24 100644
--- a/publication_date.info.yml
+++ b/publication_date.info.yml
@@ -1,5 +1,4 @@
 name: Publication Date
 description: "Add a field containing the publication date."
 type: module
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
diff --git a/tests/src/Functional/PublicationDateNodeFormTest.php b/tests/src/Functional/PublicationDateNodeFormTest.php
index 8e08783..1dd3a54 100644
--- a/tests/src/Functional/PublicationDateNodeFormTest.php
+++ b/tests/src/Functional/PublicationDateNodeFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\publication_date\Functional;
 
+use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
 use Drupal\Core\Field\Entity\BaseFieldOverride;
 use Drupal\Core\Url;
 use Drupal\field\Entity\FieldConfig;
@@ -15,7 +16,7 @@ use Drupal\Tests\BrowserTestBase;
  */
 class PublicationDateNodeFormTest extends BrowserTestBase {
 
-  use \Drupal\Tests\node\Traits\ContentTypeCreationTrait;
+  use ContentTypeCreationTrait;
 
   /**
    * Modules to enable.
@@ -30,7 +31,7 @@ class PublicationDateNodeFormTest extends BrowserTestBase {
    */
   protected $defaultTheme = 'stark';
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Unpublished by default.
diff --git a/tests/src/Functional/PublicationDatePreExistingContentTest.php b/tests/src/Functional/PublicationDatePreExistingContentTest.php
index edd618f..4efce98 100644
--- a/tests/src/Functional/PublicationDatePreExistingContentTest.php
+++ b/tests/src/Functional/PublicationDatePreExistingContentTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\publication_date\Functional;
 
+use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
 use Drupal\Core\Field\Entity\BaseFieldOverride;
 use Drupal\Core\Url;
 use Drupal\field\Entity\FieldConfig;
@@ -16,7 +17,7 @@ use Drupal\Tests\BrowserTestBase;
  */
 class PublicationDatePreExistingContentTest extends BrowserTestBase {
 
-  use \Drupal\Tests\node\Traits\ContentTypeCreationTrait;
+  use ContentTypeCreationTrait;
 
   /**
    * Modules to enable.
@@ -30,7 +31,7 @@ class PublicationDatePreExistingContentTest extends BrowserTestBase {
    */
   protected $defaultTheme = 'stark';
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Unpublished by default.
@@ -66,11 +67,11 @@ class PublicationDatePreExistingContentTest extends BrowserTestBase {
     $node = Node::load($node->id());
     $node->save();
 
-    $this->assertEqual($node->published_at->value, PUBLICATION_DATE_DEFAULT);
+    $this->assertEquals($node->published_at->value, PUBLICATION_DATE_DEFAULT);
     $node->setPublished()->save();
 
     $this->assertNotNull($node->published_at->value);
-    $this->assertNotEqual($node->published_at->value, PUBLICATION_DATE_DEFAULT);
+    $this->assertNotEquals($node->published_at->value, PUBLICATION_DATE_DEFAULT);
   }
 
 }
diff --git a/tests/src/Functional/PublicationDateTest.php b/tests/src/Functional/PublicationDateTest.php
index 1db78cd..6c53b35 100644
--- a/tests/src/Functional/PublicationDateTest.php
+++ b/tests/src/Functional/PublicationDateTest.php
@@ -32,7 +32,7 @@ class PublicationDateTest extends BrowserTestBase {
 
   protected $privileged_user;
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     NodeType::create([
@@ -58,8 +58,8 @@ class PublicationDateTest extends BrowserTestBase {
     $node = $this->drupalCreateNode(array('status' => 0));
     $unpublished_node = Node::load($node->id());
     $value = $unpublished_node->published_at->value;
-    $this->assertEqual($unpublished_node->published_at->value, PUBLICATION_DATE_DEFAULT);
-    $this->assertEqual($unpublished_node->published_at->published_at_or_now, REQUEST_TIME, 'Published at or now date is REQUEST_TIME');
+    $this->assertEquals($unpublished_node->published_at->value, PUBLICATION_DATE_DEFAULT);
+    $this->assertEquals($unpublished_node->published_at->published_at_or_now, \Drupal::time()->getRequestTime(), 'Published at or now date is REQUEST_TIME');
 
     // Publish the node.
     $unpublished_node->status = 1;
@@ -67,7 +67,7 @@ class PublicationDateTest extends BrowserTestBase {
     $published_node = Node::load($node->id());
     $this->assertTrue(is_numeric($published_node->published_at->value),
       'Published date is integer/numberic once published');
-    $this->assertTrue($published_node->published_at->value == REQUEST_TIME,
+    $this->assertTrue($published_node->published_at->value == \Drupal::time()->getRequestTime(),
       'Published date is REQUEST_TIME');
     $this->assertTrue($unpublished_node->published_at->published_at_or_now == $published_node->published_at->value,
       'Published at or now date equals published date');
@@ -86,7 +86,7 @@ class PublicationDateTest extends BrowserTestBase {
     $unpublished_node->published_at->value = 0;
     $unpublished_node->save();
     $unpublished_node = Node::load($node->id());
-    $this->assertEqual($unpublished_node->published_at->value, PUBLICATION_DATE_DEFAULT);
+    $this->assertEquals($unpublished_node->published_at->value, PUBLICATION_DATE_DEFAULT);
 
     // Set a custom time and make sure that it is saved.
     $time = $unpublished_node->published_at->value = 122630400;
@@ -122,10 +122,11 @@ class PublicationDateTest extends BrowserTestBase {
     $edit = array();
     $edit["title[0][value]"] = 'publication test node ' . $this->randomMachineName(10);
     $edit['status[value]'] = 1;
+    $this->drupalGet('node/add/page');
 
     // Hard to test created time == REQUEST_TIME because simpletest launches a
     // new HTTP session, so just check it's set.
-    $this->drupalPostForm('node/add/page', $edit, (string) t('Save'));
+    $this->submitForm($edit, (string) t('Save'));
     $node = $this->drupalGetNodeByTitle($edit["title[0][value]"]);
     $this->drupalGet('node/' . $node->id() . '/edit');
     $value = $this->getPubdateFieldValue();
@@ -136,50 +137,56 @@ class PublicationDateTest extends BrowserTestBase {
 
     // Unpublish the node and check that the field value is maintained.
     $edit['status[value]'] = 0;
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, (string) t('Save'));
     $this->drupalGet('node/' . $node->id() . '/edit');
-    $this->assertFieldByName('published_at[0][value][date]', $date, t('Pubdate is maintained when unpublished'));
-    $this->assertFieldByName('published_at[0][value][time]', $time, t('Pubdate is maintained when unpublished'));
+    $this->submitForm($edit, (string) t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->assertSession()->fieldValueEquals('published_at[0][value][date]', $date);
+    $this->assertSession()->fieldValueEquals('published_at[0][value][time]', $time);
 
     // Republish the node and check that the field value is maintained.
     $edit['status[value]'] = 1;
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, (string) t('Save'));
     $this->drupalGet('node/' . $node->id() . '/edit');
-    $this->assertFieldByName('published_at[0][value][date]', $date, t('Pubdate is maintained when republished'));
-    $this->assertFieldByName('published_at[0][value][time]', $time, t('Pubdate is maintained when republished'));
+    $this->submitForm($edit, (string) t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->assertSession()->fieldValueEquals('published_at[0][value][date]', $date);
+    $this->assertSession()->fieldValueEquals('published_at[0][value][time]', $time);
 
     // Set a custom time and make sure that it is stored correctly.
-    $ctime = REQUEST_TIME - 180;
+    $ctime = \Drupal::time()->getRequestTime() - 180;
     $edit['published_at[0][value][date]'] = \Drupal::service('date.formatter')->format($ctime, 'custom', 'Y-m-d');
     $edit['published_at[0][value][time]'] = \Drupal::service('date.formatter')->format($ctime, 'custom', 'H:i:s');
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, (string) t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, (string) t('Save'));
     $this->drupalGet('node/' . $node->id() . '/edit');
     $value = $this->getPubdateFieldValue();
     list($date, $time) = explode(' ', $value);
-    $this->assertEqual($date, \Drupal::service('date.formatter')->format($ctime, 'custom', 'Y-m-d'), t('Custom date was set'));
-    $this->assertEqual($time, \Drupal::service('date.formatter')->format($ctime, 'custom', 'H:i:s'), t('Custom time was set'));
+    $this->assertEquals($date, \Drupal::service('date.formatter')->format($ctime, 'custom', 'Y-m-d'), t('Custom date was set'));
+    $this->assertEquals($time, \Drupal::service('date.formatter')->format($ctime, 'custom', 'H:i:s'), t('Custom time was set'));
 
     // Set the field to empty and and make sure the published date is reset.
     $edit['published_at[0][value][date]'] = '';
     $edit['published_at[0][value][time]'] = '';
     sleep(2);
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, (string) t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, (string) t('Save'));
     $this->drupalGet('node/' . $node->id() . '/edit');
     $new_value = $this->getPubdateFieldValue();
     list($new_date, $new_time) = explode(' ', $this->getPubdateFieldValue());
     $this->assertNotNull($new_value, t('Published time was set automatically when there was no value entered'));
-    $this->assertNotEqual($new_time, $time, t('The new published-at time is different from the custom time'));
+    $this->assertNotEquals($new_time, $time, t('The new published-at time is different from the custom time'));
     $this->assertTrue(strtotime($this->getPubdateFieldValue()) > strtotime($value), t('The new published-at time is greater than the original one'));
 
     // Unpublish the node.
     $edit['status[value]'] = 0;
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, (string) t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, (string) t('Save'));
 
     // Set the field to empty and and make sure that it stays empty.
     $edit['published_at[0][value][date]'] = '';
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, (string) t('Save'));
     $this->drupalGet('node/' . $node->id() . '/edit');
-    $this->assertFieldByName('published_at[0][value][date]', '', t('Publication date field is empty'));
+    $this->submitForm($edit, (string) t('Save'));
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->assertSession()->fieldValueEquals('published_at[0][value][date]', '');
   }
 
   // Test that it cares about setting the published_at field.
@@ -187,7 +194,7 @@ class PublicationDateTest extends BrowserTestBase {
   public function testActionSavingSetDate() {
     $node = $this->drupalCreateNode(array('status' => 0));
     $unpublished_node = Node::load($node->id());
-    $this->assertEqual($unpublished_node->published_at->value, PUBLICATION_DATE_DEFAULT);
+    $this->assertEquals($unpublished_node->published_at->value, PUBLICATION_DATE_DEFAULT);
 
     // Now publish this with our custom time...
     $unpublished_node->status = 1;
