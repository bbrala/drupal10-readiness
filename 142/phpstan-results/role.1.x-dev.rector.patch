diff --git a/modules/role_appearance/tests/src/Functional/RoleThemeTest.php b/modules/role_appearance/tests/src/Functional/RoleThemeTest.php
index 6e0f9ca..624f683 100644
--- a/modules/role_appearance/tests/src/Functional/RoleThemeTest.php
+++ b/modules/role_appearance/tests/src/Functional/RoleThemeTest.php
@@ -44,7 +44,7 @@ class RoleThemeTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser(['administer permissions', 'administer users']);
     $this->themeHandler = $this->container->get('theme_handler');
@@ -67,8 +67,9 @@ class RoleThemeTest extends BrowserTestBase {
       'id' => $role_name,
       'role_theme' => 'seven',
     ];
-    $this->drupalPostForm('admin/people/roles/add', $edit, t('Save'));
-    $this->assertRaw(t('Role %label has been added.', ['%label' => $role_name]));
+    $this->drupalGet('admin/people/roles/add');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('Role %label has been added.', ['%label' => $role_name]));
     $role = Role::load($role_name);
     $this->assertTrue(is_object($role), 'The role was successfully retrieved from the database.');
     $role_theme = $role->getThirdPartySetting('role_appearance', 'role_theme');
diff --git a/modules/role_registration/tests/src/Functional/RoleRegistrationTest.php b/modules/role_registration/tests/src/Functional/RoleRegistrationTest.php
index e4f8596..f88bd16 100644
--- a/modules/role_registration/tests/src/Functional/RoleRegistrationTest.php
+++ b/modules/role_registration/tests/src/Functional/RoleRegistrationTest.php
@@ -29,7 +29,7 @@ class RoleRegistrationTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser(['administer permissions', 'administer users']);
   }
@@ -48,8 +48,9 @@ class RoleRegistrationTest extends BrowserTestBase {
       'id' => $role_name,
       'account_registration_status' => 1,
     ];
-    $this->drupalPostForm('admin/people/roles/add', $edit, t('Save'));
-    $this->assertRaw(t('Role %label has been added.', ['%label' => $role_name]));
+    $this->drupalGet('admin/people/roles/add');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('Role %label has been added.', ['%label' => $role_name]));
     $role = Role::load($role_name);
     $this->assertTrue(is_object($role), 'The role was successfully retrieved from the database.');
   }
@@ -64,9 +65,9 @@ class RoleRegistrationTest extends BrowserTestBase {
     $role->setThirdPartySetting('role_registration', 'account_registration_status', 1)->save();
     $role->setThirdPartySetting('role_registration', 'account_registration_form_mode', 'default')->save();
     $this->drupalGet('user/register/' . $role_1);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet('user/register/' . $role_2);
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
   }
 
 }
diff --git a/tests/src/Functional/RoleFormModeTest.php b/tests/src/Functional/RoleFormModeTest.php
index 4a30cac..87bd14c 100644
--- a/tests/src/Functional/RoleFormModeTest.php
+++ b/tests/src/Functional/RoleFormModeTest.php
@@ -72,7 +72,7 @@ class RoleFormModeTest extends BrowserTestBase {
     $this->drupalLogin($account);
     $this->drupalGet('/user/' . $account->id() . '/edit');
     // Check if field was added to custom form display and text is displayed.
-    $this->assertFieldByName("{$field_name}[0][value]", '', 'Test field is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');
 
     // Create user without custom role.
     $account = $this->drupalCreateUser();
@@ -80,7 +80,7 @@ class RoleFormModeTest extends BrowserTestBase {
     $this->drupalLogin($account);
     $this->drupalGet('/user/' . $account->id() . '/edit');
     // Check if field does not display.
-    $this->assertNoFieldByName("{$field_name}[0][value]", '', 'Test field is not displayed');
+    $this->assertSession()->fieldValueNotEquals("{$field_name}[0][value]", '', 'Test field is not displayed');
   }
 
 }
diff --git a/tests/src/Functional/RoleSettingsFormTest.php b/tests/src/Functional/RoleSettingsFormTest.php
index b8bf94a..95734e8 100644
--- a/tests/src/Functional/RoleSettingsFormTest.php
+++ b/tests/src/Functional/RoleSettingsFormTest.php
@@ -29,7 +29,7 @@ class RoleSettingsFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser([
       'administer permissions',
@@ -56,8 +56,9 @@ class RoleSettingsFormTest extends BrowserTestBase {
       'account_form_mode' => 'default',
       'account_view_mode' => 'default',
     ];
-    $this->drupalPostForm('admin/people/roles/add', $edit, t('Save'));
-    $this->assertRaw(t('Role %label has been added.', ['%label' => $role_name]));
+    $this->drupalGet('admin/people/roles/add');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains(t('Role %label has been added.', ['%label' => $role_name]));
     $role = Role::load($role_name);
     $this->assertTrue(is_object($role), 'The role was successfully retrieved from the database.');
 
diff --git a/tests/src/Functional/RoleViewModeTest.php b/tests/src/Functional/RoleViewModeTest.php
index 489230a..1256775 100644
--- a/tests/src/Functional/RoleViewModeTest.php
+++ b/tests/src/Functional/RoleViewModeTest.php
@@ -71,7 +71,7 @@ class RoleViewModeTest extends BrowserTestBase {
     $this->drupalLogin($account);
     $this->drupalGet('user/' . $account->id());
     // Check if field was added to custom view display and text is displayed.
-    $this->assertText($mode);
+    $this->assertSession()->pageTextContains($mode);
     // Create user without custom role.
     $account = $this->drupalCreateUser();
     $account->$field_name = $mode;
@@ -79,7 +79,7 @@ class RoleViewModeTest extends BrowserTestBase {
     $this->drupalLogin($account);
     $this->drupalGet('user/' . $account->id());
     // Check if field does not display.
-    $this->assertNoText($mode);
+    $this->assertSession()->pageTextNotContains($mode);
   }
 
 }
diff --git a/tests/src/Unit/RoleControlManagerTest.php b/tests/src/Unit/RoleControlManagerTest.php
index f1900ce..dc2fe99 100644
--- a/tests/src/Unit/RoleControlManagerTest.php
+++ b/tests/src/Unit/RoleControlManagerTest.php
@@ -54,28 +54,28 @@ class RoleControlManagerTest extends UnitTestCase {
   /**
    * The mocked 'anonymous' user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $account1;
 
   /**
    * The mocked user with 'administrator' and 'authenticated' roles.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $account2;
 
   /**
    * The mocked user with 'authenticated' and 'administrator' roles.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $account3;
 
   /**
    * The mocked user with 'authenticated' 'administrator' 'editor' roles.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $account4;
 
@@ -98,24 +98,16 @@ class RoleControlManagerTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $container = new ContainerBuilder();
 
     $this->extraFields = ['account_form_mode', 'account_view_mode'];
 
-    $this->roles['administrator'] = $this->getMockBuilder(Role::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->roles['authenticated'] = $this->getMockBuilder(Role::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->roles['editor'] = $this->getMockBuilder(Role::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->roles['anonymous'] = $this->getMockBuilder(Role::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->roles['administrator'] = $this->createMock(Role::class);
+    $this->roles['authenticated'] = $this->createMock(Role::class);
+    $this->roles['editor'] = $this->createMock(Role::class);
+    $this->roles['anonymous'] = $this->createMock(Role::class);
 
     $role_storage = $this->getMockBuilder('Drupal\user\RoleStorage')
       ->setConstructorArgs(['role', new MemoryCache()])
@@ -134,7 +126,7 @@ class RoleControlManagerTest extends UnitTestCase {
 
     // Account 1: 'anonymous' role.
     $roles_1 = ['anonymous'];
-    $this->account1 = $this->getMockBuilder(AccountInterface::class)->getMock();
+    $this->account1 = $this->createMock(AccountInterface::class);
     $this->account1->expects($this->any())
       ->method('isAnonymous')
       ->willReturn(TRUE);
@@ -147,7 +139,7 @@ class RoleControlManagerTest extends UnitTestCase {
 
     // Account 2: 'administrator' and 'authenticated' roles.
     $roles_2 = ['administrator', 'authenticated'];
-    $this->account2 = $this->getMockBuilder(AccountInterface::class)->getMock();
+    $this->account2 = $this->createMock(AccountInterface::class);
     $this->account2->expects($this->any())
       ->method('getRoles')
       ->will($this->returnValue($roles_2));
@@ -157,7 +149,7 @@ class RoleControlManagerTest extends UnitTestCase {
 
     // Account 3: 'authenticated' and 'administrator' roles (different order).
     $roles_3 = ['authenticated', 'administrator'];
-    $this->account3 = $this->getMockBuilder(AccountInterface::class)->getMock();
+    $this->account3 = $this->createMock(AccountInterface::class);
     $this->account3->expects($this->any())
       ->method('getRoles')
       ->will($this->returnValue($roles_3));
@@ -167,7 +159,7 @@ class RoleControlManagerTest extends UnitTestCase {
 
     // Account 4: 'authenticated' and 'administrator' roles (different order).
     $roles_4 = ['editor', 'authenticated', 'administrator'];
-    $this->account4 = $this->getMockBuilder(AccountInterface::class)->getMock();
+    $this->account4 = $this->createMock(AccountInterface::class);
     $this->account4->expects($this->any())
       ->method('getRoles')
       ->will($this->returnValue($roles_4));
@@ -175,30 +167,21 @@ class RoleControlManagerTest extends UnitTestCase {
       ->method('id')
       ->willReturn(4);
 
-    $entity_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->getMock();
+    $entity_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_manager->expects($this->any())
       ->method('getStorage')
       ->with($this->equalTo('user_role'))
       ->will($this->returnValue($role_storage));
 
-    $module_handler = $this->getMockBuilder(ModuleHandlerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $module_handler = $this->createMock(ModuleHandlerInterface::class);
 
-    $roleConfigElementManager = $this->getMockBuilder(RoleConfigElementManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $roleConfigElementManager = $this->createMock(RoleConfigElementManager::class);
     $roleConfigElementManager->expects($this->any())
       ->method('getDefinitions')
       ->will($this->returnValue($this->definitions));
-    $entityDisplayRepository = $this->getMockBuilder(EntityDisplayRepositoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entityDisplayRepository = $this->createMock(EntityDisplayRepositoryInterface::class);
 
-    $translation_manager = $this->getMockBuilder(TranslationInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $translation_manager = $this->createMock(TranslationInterface::class);
 
     $roleManager = new RoleControlManager($entity_manager, $module_handler, $roleConfigElementManager, $entityDisplayRepository, $translation_manager);
 
