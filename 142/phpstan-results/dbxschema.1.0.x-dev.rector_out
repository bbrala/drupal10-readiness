modules/contrib/dbxschema/dbxschema.module
modules/contrib/dbxschema/modules/dbxschema_pgsql/src/Database/Schema.php
modules/contrib/dbxschema/modules/dbxschema_mysql/dbxschema_mysql.install
modules/contrib/dbxschema/modules/dbxschema_mysql/dbxschema_mysql.module
modules/contrib/dbxschema/modules/dbxschema_mysql/src/Database/Connection.php
modules/contrib/dbxschema/modules/dbxschema_mysql/src/Database/DatabaseTool.php
modules/contrib/dbxschema/modules/dbxschema_mysql/src/Database/Schema.php
modules/contrib/dbxschema/modules/dbxschema_pgsql/src/Plugin/CrossSchema/PostgreSql.php
modules/contrib/dbxschema/src/Annotation/CrossSchema.php
modules/contrib/dbxschema/src/CrossSchemaPluginManager.php
modules/contrib/dbxschema/modules/dbxschema_mysql/src/Plugin/CrossSchema/MySql.php
modules/contrib/dbxschema/src/Database/ConnectionInterface.php
modules/contrib/dbxschema/modules/dbxschema_pgsql/dbxschema_pgsql.install
modules/contrib/dbxschema/src/Database/CrossSchemaConnectionInterface.php
modules/contrib/dbxschema/src/Database/CrossSchemaConnectionTrait.php
modules/contrib/dbxschema/modules/dbxschema_pgsql/dbxschema_pgsql.module
modules/contrib/dbxschema/modules/dbxschema_pgsql/src/Database/Connection.php
modules/contrib/dbxschema/modules/dbxschema_pgsql/src/Database/DatabaseTool.php
modules/contrib/dbxschema/src/Database/CrossSchemaSchemaInterface.php
modules/contrib/dbxschema/src/Database/CrossSchemaSchemaTrait.php
modules/contrib/dbxschema/src/Database/DatabaseTool.php
modules/contrib/dbxschema/src/Database/ProprietarySchemaInterface.php
modules/contrib/dbxschema/src/Database/ProprietarySchemaTrait.php
modules/contrib/dbxschema/src/Database/SchemaInterface.php
modules/contrib/dbxschema/src/Exception/ConnectionException.php
modules/contrib/dbxschema/src/Exception/CrossSchemaException.php
modules/contrib/dbxschema/src/Exception/DatabaseToolException.php
modules/contrib/dbxschema/src/Exception/SchemaException.php
modules/contrib/dbxschema/src/Plugin/CrossSchemaBase.php
modules/contrib/dbxschema/src/Plugin/CrossSchemaInterface.php

8 files with changes
====================

1) modules/contrib/dbxschema/modules/dbxschema_pgsql/src/Database/Connection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dbxschema_pgsql\Database;

+use Drupal\dbxschema\Database\CrossSchemaConnectionTrait;
+use Drupal\Core\Database\Database;
+use Psr\Log\LoggerInterface;
+use Drupal\Core\Database\Schema;
 use Drupal\Core\Database\Driver\pgsql\Connection as PgConnection;
 use Drupal\dbxschema\Database\CrossSchemaConnectionInterface;
 use Drupal\dbxschema\Exception\ConnectionException;
@@ @@
  * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Database%21Connection.php/class/Connection/9.0.x
  */
 class Connection extends PgConnection implements CrossSchemaConnectionInterface {
-  use \Drupal\dbxschema\Database\CrossSchemaConnectionTrait {
+  use CrossSchemaConnectionTrait {
     setSchemaName as private setSchemaNameTrait;
   }

@@ @@
   ) {
     // We call this method in a context of an existing connection already
     // used by Drupal so we can avoid a couple of tests and assume it works.
-    $database_info = \Drupal\Core\Database\Database::getAllConnectionInfo();
+    $database_info = Database::getAllConnectionInfo();
     $target = $database->target;
     $key = $database->key;

@@ @@
   public function __construct(
     string $schema_name = '',
     $database = 'default',
-    ?\Psr\Log\LoggerInterface $logger = NULL,
+    ?LoggerInterface $logger = NULL,
     ?CrossSchemaInterface $driver = NULL
   ) {
     // Check a key was provided instead of a connection object.
@@ @@
       }
       // Get the corresponding connection object.
       $this->dbKey = $database;
-      $database = \Drupal\Core\Database\Database::getConnection(
+      $database = Database::getConnection(
         'default',
         $database
       );
@@ @@
     $this->setSchemaName($schema_name);

     // Register default classes to use this instance's schema as default.
-    $this->useCrossSchemaFor(\Drupal\Core\Database\Schema::class);
+    $this->useCrossSchemaFor(Schema::class);
     $this->useCrossSchemaFor(\Drupal\Core\Database\Driver\pgsql\Schema::class);
     $this->useCrossSchemaFor(\Drupal\dbxschema_pgsql\Database\Schema::class);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/dbxschema/modules/dbxschema_pgsql/dbxschema_pgsql.install:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\dbxschema_pgsql\Database\DatabaseTool;
 /**
  * @file
  * Contains functions used to install/uninstall dbxschema_pgsql.
@@ @@
     $config = \Drupal::service('config.factory')
       ->getEditable('dbxschema.settings')
     ;
-    $db_tool = new \Drupal\dbxschema_pgsql\Database\DatabaseTool();
+    $db_tool = new DatabaseTool();
     $drupal_schema = $db_tool->getDrupalSchemaName();
     $reserved_schema_patterns = $config->get('reserved_schema_patterns') ?? [];
     $reserved_schema_patterns[$drupal_schema] = 'Drupal installation';
@@ @@
   $logger = \Drupal::service('dbxschema.logger');
   
   $sql_cloner_path =
-    drupal_get_path('module', 'dbxschema_pgsql')
+    \Drupal::service('extension.list.module')->getPath('dbxschema_pgsql')
     . '/pg-clone-schema/clone_schema.sql'
   ;

@@ @@
 function dbxschema_pgsql_uninstall_cloner() {
   $logger = \Drupal::service('dbxschema.logger');
   $sql_uninstall_cloner_path =
-    drupal_get_path('module', 'dbxschema_pgsql')
+    \Drupal::service('extension.list.module')->getPath('dbxschema_pgsql')
     . '/pg-clone-schema/clone_schema_uninstall.sql'
   ;
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


3) modules/contrib/dbxschema/modules/dbxschema_mysql/src/Database/Schema.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dbxschema_mysql\Database;

+use Drupal\dbxschema\Database\CrossSchemaSchemaTrait;
 use Drupal\Core\Database\Driver\mysql\Schema as MySchema;
 use Drupal\dbxschema\Database\CrossSchemaSchemaInterface;
 use Drupal\dbxschema\Exception\SchemaException;
@@ @@
  * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Database%21Schema.php/class/Schema/9.0.x
  */
 class Schema extends MySchema implements CrossSchemaSchemaInterface {
-  use \Drupal\dbxschema\Database\CrossSchemaSchemaTrait;
+  use CrossSchemaSchemaTrait;

   /**
    * (override) Default schema name.
@@ @@
    * @throws \Drupal\dbxschema_mysql\Exception\SchemaException
    */
   public function __construct(
-    \Drupal\dbxschema_mysql\Database\Connection $connection
+    Connection $connection
   ) {
     $schema_name = $connection->getSchemaName();
     // Get a DatabaseTool object.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/dbxschema/modules/dbxschema_mysql/src/Database/Connection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dbxschema_mysql\Database;

+use Drupal\dbxschema\Database\CrossSchemaConnectionTrait;
+use Psr\Log\LoggerInterface;
+use Drupal\Core\Database\Database;
+use Drupal\Core\Database\Schema;
 use Drupal\Core\Database\Driver\mysql\Connection as MyConnection;
 use Drupal\dbxschema\Database\CrossSchemaConnectionInterface;
 use Drupal\dbxschema\Exception\ConnectionException;
@@ @@
  * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Database%21Connection.php/class/Connection/9.0.x
  */
 class Connection extends MyConnection implements CrossSchemaConnectionInterface {
-  use \Drupal\dbxschema\Database\CrossSchemaConnectionTrait {
+  use CrossSchemaConnectionTrait {
     setSchemaName as private setSchemaNameTrait;
   }

@@ @@
   public function __construct(
     string $schema_name = '',
     $database = 'default',
-    ?\Psr\Log\LoggerInterface $logger = NULL,
+    ?LoggerInterface $logger = NULL,
     ?CrossSchemaInterface $driver = NULL
   ) {
     // Check a key was provided instead of a connection object.
@@ @@
       }
       // Get the corresponding connection object.
       $this->dbKey = $database;
-      $database = \Drupal\Core\Database\Database::getConnection(
+      $database = Database::getConnection(
         'default',
         $database
       );
@@ @@
     $this->setSchemaName($schema_name);

     // Register default classes to use this instance's schema as default.
-    $this->useCrossSchemaFor(\Drupal\Core\Database\Schema::class);
+    $this->useCrossSchemaFor(Schema::class);
     $this->useCrossSchemaFor(\Drupal\mysql\Driver\Database\mysql\Schema::class);
     $this->useCrossSchemaFor(\Drupal\Core\Database\Driver\mysql\Schema::class);
     $this->useCrossSchemaFor(\Drupal\dbxschema_mysql\Database\Schema::class);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/dbxschema/modules/dbxschema_mysql/dbxschema_mysql.install:0

    ---------- begin diff ----------
@@ @@
 <?php
+
+use Drupal\dbxschema_mysql\Database\DatabaseTool;
 /**
  * @file
  * Contains functions used to install/uninstall dbxschema_mysql.
  */
-
 /**
  * Implements hook_install().
  */
@@ @@
     $config = \Drupal::service('config.factory')
       ->getEditable('dbxschema.settings')
     ;
-    $db_tool = new \Drupal\dbxschema_mysql\Database\DatabaseTool();
+    $db_tool = new DatabaseTool();
     $drupal_schema = $db_tool->getDrupalSchemaName();
     $reserved_schema_patterns = $config->get('reserved_schema_patterns') ?? [];
     $reserved_schema_patterns[$drupal_schema] = 'Drupal installation';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


6) modules/contrib/dbxschema/src/Database/CrossSchemaConnectionTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dbxschema\Database;

+use Drupal\Core\Database\Connection;
+use Psr\Log\LoggerInterface;
 use Drupal\dbxschema\Plugin\CrossSchemaInterface;
 use Drupal\dbxschema\Exception\ConnectionException;
 use Drupal\dbxschema\Database\DatabaseTool;
@@ @@
    * @var array
    */
   protected $self_classes = [
-    \Drupal\Core\Database\Connection::class => TRUE,
+    Connection::class => TRUE,
   ];

   /**
@@ @@
   public static function create(
     string $schema_name = '',
     $database = 'default',
-    ?\Psr\Log\LoggerInterface $logger = NULL,
+    ?LoggerInterface $logger = NULL,
     ?CrossSchemaInterface $driver = NULL
   ) {
     return new static($schema_name, $database, $logger, $driver);
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function getMessageLogger() :\Psr\Log\LoggerInterface {
+  public function getMessageLogger() :LoggerInterface {
     return $this->messageLogger;
   }

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setMessageLogger(\Psr\Log\LoggerInterface $logger) :void {
+  public function setMessageLogger(LoggerInterface $logger) :void {
     $this->messageLogger = $logger;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


7) modules/contrib/dbxschema/src/Database/CrossSchemaConnectionInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dbxschema\Database;

+use Psr\Log\LoggerInterface;
 use Drupal\dbxschema\Plugin\CrossSchemaInterface;
 use Drupal\dbxschema\Database\DatabaseTool;

@@ @@
   public static function create(
     string $schema_name = '',
     $database = 'default',
-    ?\Psr\Log\LoggerInterface $logger = NULL,
+    ?LoggerInterface $logger = NULL,
     ?CrossSchemaInterface $driver = NULL
   );

@@ @@
    * @return \Psr\Log\LoggerInterface
    *   A message logger.
    */
-  public function getMessageLogger() :\Psr\Log\LoggerInterface;
+  public function getMessageLogger() :LoggerInterface;

   /**
    * Sets current message logger.
@@ @@
    * @param \Psr\Log\LoggerInterface $logger
    *   A message logger.
    */
-  public function setMessageLogger(\Psr\Log\LoggerInterface $logger) :void;
+  public function setMessageLogger(LoggerInterface $logger) :void;

   /**
    * (override) Returns a Schema object for manipulating the schema.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


8) modules/contrib/dbxschema/modules/dbxschema_pgsql/src/Database/Schema.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dbxschema_pgsql\Database;

+use Drupal\dbxschema\Database\CrossSchemaSchemaTrait;
 use Drupal\Core\Database\Driver\pgsql\Schema as PgSchema;
 use Drupal\dbxschema\Database\CrossSchemaSchemaInterface;
 use Drupal\dbxschema\Exception\SchemaException;
@@ @@
  * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Database%21Schema.php/class/Schema/9.0.x
  */
 class Schema extends PgSchema implements CrossSchemaSchemaInterface {
-  use \Drupal\dbxschema\Database\CrossSchemaSchemaTrait;
+  use CrossSchemaSchemaTrait;

   /**
    * (override) Default schema name.
@@ @@
    * @throws \Drupal\dbxschema_pgsql\Exception\SchemaException
    */
   public function __construct(
-    \Drupal\dbxschema_pgsql\Database\Connection $connection
+    Connection $connection
   ) {
     $schema_name = $connection->getSchemaName();
     // Get a DatabaseTool object.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 8 files have been changed by Rector                                       

