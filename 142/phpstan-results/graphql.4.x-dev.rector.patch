diff --git a/graphql.api.php b/graphql.api.php
index a087d5c..a3a056d 100644
--- a/graphql.api.php
+++ b/graphql.api.php
@@ -1,10 +1,11 @@
 <?php
 
+use Drupal\Core\Database\Query\SelectInterface;
+use Drupal\Core\Database\Query\ConditionInterface;
 /**
  * @file
  * Hooks provided by GraphQL module.
  */
-
 /**
  * Alter the query built by the term autocomplete data producer.
  *
@@ -17,7 +18,7 @@
  *   as OR condition group which allows to cover a match in term name OR in some
  *   other fields.
  */
-function hook_graphql_term_autocomplete_query_alter(array $args, \Drupal\Core\Database\Query\SelectInterface $query, \Drupal\Core\Database\Query\ConditionInterface $name_condition_group): void {
+function hook_graphql_term_autocomplete_query_alter(array $args, SelectInterface $query, ConditionInterface $name_condition_group): void {
   // Custom field on profile entity type of bundle resume has a reference to
   // synonyms field. Extend a query so it matches the string in term names OR in
   // synonyms.
diff --git a/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageDerivativeTest.php b/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageDerivativeTest.php
index cfd9263..1c52b89 100644
--- a/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageDerivativeTest.php
+++ b/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageDerivativeTest.php
@@ -28,9 +28,7 @@ class ImageDerivativeTest extends GraphQLTestBase {
 
     $this->file_uri = 'public://test.jpg';
 
-    $this->file = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->file = $this->createMock(FileInterface::class);
 
     $this->file->method('getFileUri')->willReturn($this->file_uri);
     $this->file->method('access')->willReturn((new AccessResultAllowed())->addCacheTags(['test_tag']));
@@ -49,9 +47,7 @@ class ImageDerivativeTest extends GraphQLTestBase {
     $this->style->addImageEffect($effect);
     $this->style->save();
 
-    $this->file_not_accessible = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->file_not_accessible = $this->createMock(FileInterface::class);
 
     $this->file_not_accessible->method('access')->willReturn((new AccessResultForbidden())->addCacheTags(['test_tag_forbidden']));
   }
diff --git a/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageUrlTest.php b/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageUrlTest.php
index 705da43..5a18c31 100644
--- a/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageUrlTest.php
+++ b/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageUrlTest.php
@@ -23,16 +23,12 @@ class ImageUrlTest extends GraphQLTestBase {
 
     $this->fileUri = \Drupal::service('file_url_generator')->generateAbsoluteString('public://test.jpg');
 
-    $this->file = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->file = $this->createMock(FileInterface::class);
 
     $this->file->method('getFileUri')->willReturn($this->fileUri);
     $this->file->method('access')->willReturn((new AccessResultAllowed())->addCacheTags(['test_tag']));
 
-    $this->file_not_accessible = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->file_not_accessible = $this->createMock(FileInterface::class);
 
     $this->file_not_accessible->method('access')->willReturn((new AccessResultForbidden())->addCacheTags(['test_tag_forbidden']));
   }
diff --git a/tests/src/Kernel/DataProducer/EntityMultipleTest.php b/tests/src/Kernel/DataProducer/EntityMultipleTest.php
index a363526..2a2bc3c 100644
--- a/tests/src/Kernel/DataProducer/EntityMultipleTest.php
+++ b/tests/src/Kernel/DataProducer/EntityMultipleTest.php
@@ -42,17 +42,11 @@ class EntityMultipleTest extends GraphQLTestBase {
   public function setUp(): void {
     parent::setUp();
 
-    $this->entity = $this->getMockBuilder(NodeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock(NodeInterface::class);
 
-    $this->entity_interface = $this->getMockBuilder(EntityInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity_interface = $this->createMock(EntityInterface::class);
 
-    $this->user = $this->getMockBuilder(UserInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->user = $this->createMock(UserInterface::class);
 
     $content_type = NodeType::create([
       'type' => 'lorem',
diff --git a/tests/src/Kernel/DataProducer/EntityReferenceTest.php b/tests/src/Kernel/DataProducer/EntityReferenceTest.php
index 3197dd8..1b758f5 100644
--- a/tests/src/Kernel/DataProducer/EntityReferenceTest.php
+++ b/tests/src/Kernel/DataProducer/EntityReferenceTest.php
@@ -25,17 +25,11 @@ class EntityReferenceTest extends GraphQLTestBase {
   public function setUp(): void {
     parent::setUp();
 
-    $this->entity = $this->getMockBuilder(NodeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock(NodeInterface::class);
 
-    $this->entity_interface = $this->getMockBuilder(EntityInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity_interface = $this->createMock(EntityInterface::class);
 
-    $this->user = $this->getMockBuilder(UserInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->user = $this->createMock(UserInterface::class);
 
     $content_type1 = NodeType::create([
       'type' => 'test1',
diff --git a/tests/src/Kernel/DataProducer/EntityTest.php b/tests/src/Kernel/DataProducer/EntityTest.php
index 5d9d053..e8e3adc 100644
--- a/tests/src/Kernel/DataProducer/EntityTest.php
+++ b/tests/src/Kernel/DataProducer/EntityTest.php
@@ -30,17 +30,11 @@ class EntityTest extends GraphQLTestBase {
   public function setUp(): void {
     parent::setUp();
 
-    $this->entity = $this->getMockBuilder(NodeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock(NodeInterface::class);
 
-    $this->entity_interface = $this->getMockBuilder(EntityInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity_interface = $this->createMock(EntityInterface::class);
 
-    $this->user = $this->getMockBuilder(UserInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->user = $this->createMock(UserInterface::class);
 
     $content_type = NodeType::create([
       'type' => 'lorem',
@@ -130,9 +124,7 @@ class EntityTest extends GraphQLTestBase {
    * @covers \Drupal\graphql\Plugin\GraphQL\DataProducer\Entity\EntityDescription::resolve
    */
   public function testResolveDescription(): void {
-    $entity = $this->getMockBuilder(EntityTestBundle::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity = $this->createMock(EntityTestBundle::class);
 
     $entity->expects($this->once())
       ->method('getDescription')
@@ -173,9 +165,7 @@ class EntityTest extends GraphQLTestBase {
    * @covers \Drupal\graphql\Plugin\GraphQL\DataProducer\Entity\EntityLanguage::resolve
    */
   public function testResolveLanguage(): void {
-    $language = $this->getMockBuilder(LanguageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $language = $this->createMock(LanguageInterface::class);
 
     $this->entity->expects($this->once())
       ->method('language')
@@ -273,9 +263,7 @@ class EntityTest extends GraphQLTestBase {
    * @covers \Drupal\graphql\Plugin\GraphQL\DataProducer\Entity\EntityUrl::resolve
    */
   public function testResolveUrl(): void {
-    $url = $this->getMockBuilder(Url::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock(Url::class);
 
     $this->entity->expects($this->once())
       ->method('toUrl')
@@ -290,9 +278,7 @@ class EntityTest extends GraphQLTestBase {
    * @covers \Drupal\graphql\Plugin\GraphQL\DataProducer\Entity\EntityUrl::resolve
    */
   public function testResolveAbsoluteUrl(): void {
-    $url = $this->getMockBuilder(Url::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock(Url::class);
 
     $this->entity->expects($this->once())
       ->method('toUrl')
diff --git a/tests/src/Kernel/Framework/BufferedFieldTest.php b/tests/src/Kernel/Framework/BufferedFieldTest.php
index a369db5..afcf8f4 100644
--- a/tests/src/Kernel/Framework/BufferedFieldTest.php
+++ b/tests/src/Kernel/Framework/BufferedFieldTest.php
@@ -42,9 +42,7 @@ GQL;
    * Test if the schema is created properly.
    */
   public function testBatchedFields(): void {
-    $buffer = $this->getMockBuilder(BufferBase::class)
-      ->setMethods(['resolveBufferArray'])
-      ->getMock();
+    $buffer = $this->createMock(BufferBase::class);
 
     $users = [
       'a' => [
diff --git a/tests/src/Kernel/Framework/DisabledResultCacheTest.php b/tests/src/Kernel/Framework/DisabledResultCacheTest.php
index 8dff919..85328bc 100644
--- a/tests/src/Kernel/Framework/DisabledResultCacheTest.php
+++ b/tests/src/Kernel/Framework/DisabledResultCacheTest.php
@@ -47,10 +47,7 @@ GQL;
       'caching' => FALSE,
     ]);
 
-    $object = $this->getMockBuilder(Server::class)
-      ->disableOriginalConstructor()
-      ->setMethods(['id'])
-      ->getMock();
+    $object = $this->createMock(Server::class);
 
     $object->expects($this->exactly(2))
       ->method('id')
diff --git a/tests/src/Kernel/Framework/ResultCacheTest.php b/tests/src/Kernel/Framework/ResultCacheTest.php
index bef53bd..0c1af32 100644
--- a/tests/src/Kernel/Framework/ResultCacheTest.php
+++ b/tests/src/Kernel/Framework/ResultCacheTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel\Framework;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\Cache\Context\ContextCacheKeys;
 use Drupal\Core\Render\RenderContext;
@@ -19,6 +20,7 @@ use GraphQL\Deferred;
  */
 class ResultCacheTest extends GraphQLTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ -39,10 +41,7 @@ GQL;
    * Check basic result caching.
    */
   public function testCacheableResult(): void {
-    $dummy = $this->getMockBuilder(Server::class)
-      ->disableOriginalConstructor()
-      ->setMethods(['id'])
-      ->getMock();
+    $dummy = $this->createMock(Server::class);
 
     $dummy->expects($this->once())
       ->method('id')
@@ -65,9 +64,7 @@ GQL;
    * Verify that uncacheable results are not cached.
    */
   public function testUncacheableResult(): void {
-    $cacheable = $this->getMockBuilder(CacheableDependencyInterface::class)
-      ->setMethods(['getCacheTags', 'getCacheMaxAge', 'getCacheContexts'])
-      ->getMock();
+    $cacheable = $this->createMock(CacheableDependencyInterface::class);
 
     $cacheable->expects($this->any())
       ->method('getCacheTags')
@@ -81,10 +78,7 @@ GQL;
       ->method('getCacheContexts')
       ->willReturn([]);
 
-    $dummy = $this->getMockBuilder(Server::class)
-      ->disableOriginalConstructor()
-      ->setMethods(['id'])
-      ->getMock();
+    $dummy = $this->createMock(Server::class);
 
     $dummy->expects($this->exactly(2))
       ->method('id')
@@ -110,9 +104,7 @@ GQL;
    * Verify that fields with uncacheable annotations are not cached.
    */
   public function testUncacheableResultAnnotation(): void {
-    $cacheable = $this->getMockBuilder(CacheableDependencyInterface::class)
-      ->setMethods(['getCacheTags', 'getCacheMaxAge', 'getCacheContexts'])
-      ->getMock();
+    $cacheable = $this->createMock(CacheableDependencyInterface::class);
 
     $cacheable->expects($this->any())
       ->method('getCacheTags')
@@ -126,10 +118,7 @@ GQL;
       ->method('getCacheContexts')
       ->willReturn([]);
 
-    $dummy = $this->getMockBuilder(Server::class)
-      ->disableOriginalConstructor()
-      ->setMethods(['id'])
-      ->getMock();
+    $dummy = $this->createMock(Server::class);
 
     $dummy->expects($this->exactly(2))
       ->method('id')
@@ -155,10 +144,7 @@ GQL;
    * Test if caching properly handles variables.
    */
   public function testVariables(): void {
-    $dummy = $this->getMockBuilder(Server::class)
-      ->disableOriginalConstructor()
-      ->setMethods(['id'])
-      ->getMock();
+    $dummy = $this->createMock(Server::class);
 
     $dummy->expects($this->exactly(2))
       ->method('id')
@@ -184,9 +170,7 @@ GQL;
    * Test if changing test context's trigger re-evaluations.
    */
   public function testContext(): void {
-    $cacheable = $this->getMockBuilder(CacheableDependencyInterface::class)
-      ->setMethods(['getCacheTags', 'getCacheMaxAge', 'getCacheContexts'])
-      ->getMock();
+    $cacheable = $this->createMock(CacheableDependencyInterface::class);
 
     $cacheable->expects($this->any())
       ->method('getCacheTags')
@@ -200,10 +184,7 @@ GQL;
       ->method('getCacheContexts')
       ->willReturn(['context']);
 
-    $dummy = $this->getMockBuilder(Server::class)
-      ->disableOriginalConstructor()
-      ->setMethods(['id'])
-      ->getMock();
+    $dummy = $this->createMock(Server::class);
 
     $dummy->expects($this->exactly(2))
       ->method('id')
@@ -260,9 +241,7 @@ GQL;
    * Test if results cache properly acts on cache tag clears.
    */
   public function testTags(): void {
-    $cacheable = $this->getMockBuilder(CacheableDependencyInterface::class)
-      ->setMethods(['getCacheTags', 'getCacheMaxAge', 'getCacheContexts'])
-      ->getMock();
+    $cacheable = $this->createMock(CacheableDependencyInterface::class);
 
     $cacheable->expects($this->any())
       ->method('getCacheTags')
@@ -276,10 +255,7 @@ GQL;
       ->method('getCacheContexts')
       ->willReturn([]);
 
-    $dummy = $this->getMockBuilder(Server::class)
-      ->disableOriginalConstructor()
-      ->setMethods(['id'])
-      ->getMock();
+    $dummy = $this->createMock(Server::class);
 
     $dummy->expects($this->exactly(2))
       ->method('id')
diff --git a/tests/src/Kernel/Framework/TestFrameworkTest.php b/tests/src/Kernel/Framework/TestFrameworkTest.php
index 28f0a81..ff4b669 100644
--- a/tests/src/Kernel/Framework/TestFrameworkTest.php
+++ b/tests/src/Kernel/Framework/TestFrameworkTest.php
@@ -25,9 +25,7 @@ GQL;
 
     $this->setUpSchema($schema);
 
-    $cacheable = $this->getMockBuilder(CacheableDependencyInterface::class)
-      ->setMethods(['getCacheTags', 'getCacheMaxAge', 'getCacheContexts'])
-      ->getMock();
+    $cacheable = $this->createMock(CacheableDependencyInterface::class);
 
     $cacheable->expects($this->any())
       ->method('getCacheTags')
diff --git a/tests/src/Kernel/Framework/UploadFileServiceTest.php b/tests/src/Kernel/Framework/UploadFileServiceTest.php
index c3f6d8d..a781661 100644
--- a/tests/src/Kernel/Framework/UploadFileServiceTest.php
+++ b/tests/src/Kernel/Framework/UploadFileServiceTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\graphql\Kernel\Framework;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Lock\LockBackendInterface;
 use Drupal\graphql\GraphQL\Utility\FileUpload;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
@@ -15,6 +16,7 @@ use Symfony\Component\HttpFoundation\File\UploadedFile;
  */
 class UploadFileServiceTest extends GraphQLTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
diff --git a/tests/src/Traits/MockingTrait.php b/tests/src/Traits/MockingTrait.php
index ec70b70..cb7c44e 100644
--- a/tests/src/Traits/MockingTrait.php
+++ b/tests/src/Traits/MockingTrait.php
@@ -125,10 +125,7 @@ trait MockingTrait {
    */
   protected function mockSchema($id, $schema, array $extensions = []): void {
     /** @var \PHPUnit\Framework\MockObject\MockObject $extensionManager */
-    $extensionManager = $this->getMockBuilder(SchemaExtensionPluginManager::class)
-      ->disableOriginalConstructor()
-      ->setMethods(['getExtensions'])
-      ->getMock();
+    $extensionManager = $this->createMock(SchemaExtensionPluginManager::class);
 
     $extensionManager->expects(static::any())
       ->method('getExtensions')
@@ -163,9 +160,7 @@ trait MockingTrait {
    * @param string $id
    */
   protected function mockSchemaPluginManager($id): void {
-    $this->schemaPluginManager = $this->getMockBuilder(SchemaPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->schemaPluginManager = $this->createMock(SchemaPluginManager::class);
 
     $this->schemaPluginManager->expects($this->any())
       ->method('getDefinitions')
