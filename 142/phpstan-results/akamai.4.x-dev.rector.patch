diff --git a/src/Event/AkamaiHeaderEvents.php b/src/Event/AkamaiHeaderEvents.php
index 47ac999..be61b2d 100644
--- a/src/Event/AkamaiHeaderEvents.php
+++ b/src/Event/AkamaiHeaderEvents.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\akamai\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event that is fired when Akamai header is formed.
diff --git a/src/Event/AkamaiPurgeEvents.php b/src/Event/AkamaiPurgeEvents.php
index 1ab5aac..bfdd9d6 100644
--- a/src/Event/AkamaiPurgeEvents.php
+++ b/src/Event/AkamaiPurgeEvents.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\akamai\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event that is fired when Akamai purge is formed.
diff --git a/src/EventSubscriber/CacheableResponseSubscriber.php b/src/EventSubscriber/CacheableResponseSubscriber.php
index 4e81790..687ed5e 100644
--- a/src/EventSubscriber/CacheableResponseSubscriber.php
+++ b/src/EventSubscriber/CacheableResponseSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\akamai\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\akamai\Event\AkamaiHeaderEvents;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Cache\CacheableResponseInterface;
@@ -64,10 +64,10 @@ class CacheableResponseSubscriber implements EventSubscriberInterface {
   /**
    * Add cache tags header on cacheable responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ -92,7 +92,7 @@ class CacheableResponseSubscriber implements EventSubscriberInterface {
 
       // Instantiate our event.
       $event = new AkamaiHeaderEvents($tags);
-      $this->eventDispatcher->dispatch(AkamaiHeaderEvents::HEADER_CREATION, $event);
+      $this->eventDispatcher->dispatch($event, AkamaiHeaderEvents::HEADER_CREATION);
       $tags = $event->data;
       foreach ($tags as &$tag) {
         $tag = $this->tagFormatter->format($tag);
diff --git a/src/Plugin/Purge/Purger/AkamaiPurger.php b/src/Plugin/Purge/Purger/AkamaiPurger.php
index 67024b2..9148558 100644
--- a/src/Plugin/Purge/Purger/AkamaiPurger.php
+++ b/src/Plugin/Purge/Purger/AkamaiPurger.php
@@ -129,7 +129,7 @@ class AkamaiPurger extends PurgerBase {
 
     // Instantiate event and alter tags with subscribers.
     $event = new AkamaiPurgeEvents($urls_to_clear);
-    $this->eventDispatcher->dispatch(AkamaiPurgeEvents::PURGE_CREATION, $event);
+    $this->eventDispatcher->dispatch($event, AkamaiPurgeEvents::PURGE_CREATION);
     $urls_to_clear = $event->data;
 
     // Purge all URLs in a single request. Akamai accepts up to 50 (?)
diff --git a/src/Plugin/Purge/Purger/AkamaiTagPurger.php b/src/Plugin/Purge/Purger/AkamaiTagPurger.php
index 91395ca..a184140 100644
--- a/src/Plugin/Purge/Purger/AkamaiTagPurger.php
+++ b/src/Plugin/Purge/Purger/AkamaiTagPurger.php
@@ -133,7 +133,7 @@ class AkamaiTagPurger extends PurgerBase {
 
     // Instantiate event and alter tags with subscribers.
     $event = new AkamaiPurgeEvents($tags_to_clear);
-    $this->eventDispatcher->dispatch(AkamaiPurgeEvents::PURGE_CREATION, $event);
+    $this->eventDispatcher->dispatch($event, AkamaiPurgeEvents::PURGE_CREATION);
     $tags_to_clear = $event->data;
 
     // Purge tags.
diff --git a/tests/src/Functional/EdgescapeTest.php b/tests/src/Functional/EdgescapeTest.php
index a8afebd..3e1e1a4 100644
--- a/tests/src/Functional/EdgescapeTest.php
+++ b/tests/src/Functional/EdgescapeTest.php
@@ -69,7 +69,7 @@ class EdgescapeTest extends BrowserTestBase {
     $this->drupalGet($akamai_config_path, [], [
       Edgescape::EDGESCAPE_HEADER => $header_value,
     ]);
-    $this->assertRaw('Country Code: RAX');
+    $this->assertSession()->responseContains('Country Code: RAX');
   }
 
 }
diff --git a/tests/src/Kernel/EventSubscriber/MockSubscriber.php b/tests/src/Kernel/EventSubscriber/MockSubscriber.php
index 6beb591..0ac38e3 100644
--- a/tests/src/Kernel/EventSubscriber/MockSubscriber.php
+++ b/tests/src/Kernel/EventSubscriber/MockSubscriber.php
@@ -14,7 +14,7 @@ class MockSubscriber implements EventSubscriberInterface {
   /**
    * Storage of the last event.
    *
-   * @var Symfony\Component\EventDispatcher\Event
+   * @var \Symfony\Contracts\EventDispatcher\Event
    */
   public $event;
 
diff --git a/tests/src/Unit/AkamaiAuthenticationTest.php b/tests/src/Unit/AkamaiAuthenticationTest.php
index 5faffe1..ee8e7b0 100644
--- a/tests/src/Unit/AkamaiAuthenticationTest.php
+++ b/tests/src/Unit/AkamaiAuthenticationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\akamai\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\akamai\AkamaiAuthentication;
 use Drupal\akamai\KeyProviderInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -14,6 +15,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class AkamaiAuthenticationTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests that we can authorise when specifying edgerc file.
    *
diff --git a/tests/src/Unit/AkamaiClientV3Test.php b/tests/src/Unit/AkamaiClientV3Test.php
index d3c9fc2..918057c 100644
--- a/tests/src/Unit/AkamaiClientV3Test.php
+++ b/tests/src/Unit/AkamaiClientV3Test.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\akamai\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\akamai\KeyProviderInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Tests\UnitTestCase;
@@ -14,6 +15,7 @@ use Psr\Log\LoggerInterface;
  */
 class AkamaiClientV3Test extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Creates a client to test.
    *
@@ -41,16 +43,10 @@ class AkamaiClientV3Test extends UnitTestCase {
     ];
     $logger = $this->prophesize(LoggerInterface::class)->reveal();
 
-    $edgegridclient = $this->getMockBuilder('Akamai\Open\EdgeGrid\Client')
-      ->disableOriginalConstructor()
-      ->setMethods(NULL)
-      ->getMock();
+    $edgegridclient = $this->createMock('Akamai\Open\EdgeGrid\Client');
 
     // Create stub for response class.
-    $response_stub = $this->getMockBuilder('GuzzleHttp\Psr7\Response')
-      ->disableOriginalConstructor()
-      ->setMethods(['getStatusCode'])
-      ->getMock();
+    $response_stub = $this->createMock('GuzzleHttp\Psr7\Response');
     $response_stub->method('getStatusCode')
       ->willReturn(201);
 
diff --git a/tests/src/Unit/Helper/EdgescapeTest.php b/tests/src/Unit/Helper/EdgescapeTest.php
index 8f923b5..d29871c 100644
--- a/tests/src/Unit/Helper/EdgescapeTest.php
+++ b/tests/src/Unit/Helper/EdgescapeTest.php
@@ -30,10 +30,7 @@ class EdgescapeTest extends UnitTestCase {
     if ($headerValue) {
       $request->headers = new HeaderBag([Edgescape::EDGESCAPE_HEADER => (string) $headerValue]);
     }
-    $requestStack = $this->getMockBuilder('\Symfony\Component\HttpFoundation\RequestStack')
-      ->disableOriginalConstructor()
-      ->setMethods(['getCurrentRequest'])
-      ->getMock();
+    $requestStack = $this->createMock('\Symfony\Component\HttpFoundation\RequestStack');
     $requestStack->method('getCurrentRequest')
       ->willReturn($request);
     return $requestStack;
diff --git a/tests/src/Unit/Plugin/Purge/Purger/AkamaiPurgerTest.php b/tests/src/Unit/Plugin/Purge/Purger/AkamaiPurgerTest.php
index fba12ee..97c02ec 100644
--- a/tests/src/Unit/Plugin/Purge/Purger/AkamaiPurgerTest.php
+++ b/tests/src/Unit/Plugin/Purge/Purger/AkamaiPurgerTest.php
@@ -17,15 +17,12 @@ class AkamaiPurgerTest extends UnitTestCase {
    */
   public function testGetTimeHintReturnsCorrectValues() {
     // Mock the akamai client factory.
-    $akamai_client_factory = $this->getMockBuilder('Drupal\akamai\AkamaiClientFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $akamai_client_factory = $this->createMock('Drupal\akamai\AkamaiClientFactory');
     $akamai_client_factory->method('get')
       ->willReturn(NULL);
 
     // Mock the event dispatcher.
-    $event_dispatcher = $this->getMockBuilder('Symfony\Component\EventDispatcher\EventDispatcherInterface')
-      ->getMock();
+    $event_dispatcher = $this->createMock('Symfony\Component\EventDispatcher\EventDispatcherInterface');
 
     $result_map = [
       '-5' => 0,
@@ -39,15 +36,12 @@ class AkamaiPurgerTest extends UnitTestCase {
 
     foreach ($result_map as $config_value => $returned_value) {
       // Mock the config.
-      $config = $this->getMockBuilder('Drupal\Core\Config\ImmutableConfig')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $config = $this->createMock('Drupal\Core\Config\ImmutableConfig');
       $config->method('get')
         ->willReturn($config_value);
 
       // Mock the config factory.
-      $config_factory = $this->getMockBuilder('Drupal\Core\Config\ConfigFactoryInterface')
-        ->getMock();
+      $config_factory = $this->createMock('Drupal\Core\Config\ConfigFactoryInterface');
       $config_factory->method('get')
         ->willReturn($config);
 
diff --git a/tests/src/Unit/Plugin/Purge/Purger/AkamaiTagPurgerTest.php b/tests/src/Unit/Plugin/Purge/Purger/AkamaiTagPurgerTest.php
index 5c8e379..58efd80 100644
--- a/tests/src/Unit/Plugin/Purge/Purger/AkamaiTagPurgerTest.php
+++ b/tests/src/Unit/Plugin/Purge/Purger/AkamaiTagPurgerTest.php
@@ -21,10 +21,7 @@ class AkamaiTagPurgerTest extends UnitTestCase {
    * Tests purge creation event dispatch.
    */
   public function testPurgeCreationEvent() {
-    $purger = $this->getMockBuilder('Drupal\akamai\Plugin\Purge\Purger\AkamaiTagPurger')
-      ->disableOriginalConstructor()
-      ->setMethods(NULL)
-      ->getMock();
+    $purger = $this->createMock('Drupal\akamai\Plugin\Purge\Purger\AkamaiTagPurger');
 
     $formatter = new CacheTagFormatter();
 
@@ -32,10 +29,7 @@ class AkamaiTagPurgerTest extends UnitTestCase {
     $container->set('akamai.helper.cachetagformatter', $formatter);
     \Drupal::setContainer($container);
 
-    $client = $this->getMockBuilder('Drupal\akamai\Plugin\Client\AkamaiClientV3')
-      ->disableOriginalConstructor()
-      ->setMethods(['setType', 'purgeTags'])
-      ->getMock();
+    $client = $this->createMock('Drupal\akamai\Plugin\Client\AkamaiClientV3');
 
     $reflection = new \ReflectionClass($purger);
     $reflection_property = $reflection->getProperty('client');
@@ -52,55 +46,37 @@ class AkamaiTagPurgerTest extends UnitTestCase {
     $reflection_property->setValue($purger, $event_dispatcher);
 
     // Create stub for response class.
-    $invalidation_1 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_1 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_1->method('getExpression')
       ->willReturn('foo');
     // Create duplicate stub for response class.
-    $invalidation_2 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_2 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_2->method('getExpression')
       ->willReturn('foo');
     // Create third stub for response class.
-    $invalidation_3 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_3 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_3->method('getExpression')
       ->willReturn('bar');
     // Create string numeric stubs for response class.
-    $invalidation_4 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_4 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_4->method('getExpression')
       ->willReturn('123');
-    $invalidation_5 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_5 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_5->method('getExpression')
       ->willReturn('234');
     // Create integer stubs for response class.
-    $invalidation_6 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_6 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_6->method('getExpression')
       ->willReturn(123);
-    $invalidation_7 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_7 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_7->method('getExpression')
       ->willReturn(456);
     // Create float stub for response class.
-    $invalidation_8 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_8 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_8->method('getExpression')
       ->willReturn(1.01);
     // Create boolean stub for response class.
-    $invalidation_9 = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation_9 = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation_9->method('getExpression')
       ->willReturn(TRUE);
 
@@ -127,15 +103,12 @@ class AkamaiTagPurgerTest extends UnitTestCase {
    */
   public function testGetTimeHintReturnsCorrectValues() {
     // Mock the akamai client factory.
-    $akamai_client_factory = $this->getMockBuilder('Drupal\akamai\AkamaiClientFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $akamai_client_factory = $this->createMock('Drupal\akamai\AkamaiClientFactory');
     $akamai_client_factory->method('get')
       ->willReturn(NULL);
 
     // Mock the event dispatcher.
-    $event_dispatcher = $this->getMockBuilder('Symfony\Component\EventDispatcher\EventDispatcherInterface')
-      ->getMock();
+    $event_dispatcher = $this->createMock('Symfony\Component\EventDispatcher\EventDispatcherInterface');
 
     $result_map = [
       '-5' => 0,
@@ -149,19 +122,16 @@ class AkamaiTagPurgerTest extends UnitTestCase {
 
     foreach ($result_map as $config_value => $returned_value) {
       // Mock the config.
-      $config = $this->getMockBuilder('Drupal\Core\Config\ImmutableConfig')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $config = $this->createMock('Drupal\Core\Config\ImmutableConfig');
       $config->method('get')
         ->willReturn($config_value);
 
       // Mock the config factory.
-      $config_factory = $this->getMockBuilder('Drupal\Core\Config\ConfigFactoryInterface')
-        ->getMock();
+      $config_factory = $this->createMock('Drupal\Core\Config\ConfigFactoryInterface');
       $config_factory->method('get')
         ->willReturn($config);
 
-      $logger = $this->getMockBuilder('\Psr\Log\LoggerInterface')->getMock();
+      $logger = $this->createMock('\Psr\Log\LoggerInterface');
 
       $purger = new AkamaiTagPurger(['id' => 'my_id'], 'my_id', 'my_definition', $config_factory, $event_dispatcher, $akamai_client_factory, $logger);
 
@@ -176,18 +146,12 @@ class AkamaiTagPurgerTest extends UnitTestCase {
   public function testInvalidateTagLength() {
     $long_tag = str_repeat('a', 129);
 
-    $logger = $this->getMockBuilder('\Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->setMethods(['warning'])
-      ->getMock();
+    $logger = $this->createMock('\Drupal\Core\Logger\LoggerChannel');
     $logger->expects($this->once())
       ->method('warning')
       ->with('Cache Tag %tag has exceeded the Akamai 128 character tag maximum length.', ['%tag' => $long_tag]);
 
-    $purger = $this->getMockBuilder('Drupal\akamai\Plugin\Purge\Purger\AkamaiTagPurger')
-      ->disableOriginalConstructor()
-      ->setMethods(NULL)
-      ->getMock();
+    $purger = $this->createMock('Drupal\akamai\Plugin\Purge\Purger\AkamaiTagPurger');
     $reflection = new \ReflectionClass($purger);
     $reflection_property = $reflection->getProperty('logger');
     $reflection_property->setAccessible(TRUE);
@@ -199,10 +163,7 @@ class AkamaiTagPurgerTest extends UnitTestCase {
     $container->set('akamai.helper.cachetagformatter', $formatter);
     \Drupal::setContainer($container);
 
-    $client = $this->getMockBuilder('Drupal\akamai\Plugin\Client\AkamaiClientV3')
-      ->disableOriginalConstructor()
-      ->setMethods(['setType', 'purgeTags'])
-      ->getMock();
+    $client = $this->createMock('Drupal\akamai\Plugin\Client\AkamaiClientV3');
 
     $reflection = new \ReflectionClass($purger);
     $reflection_property = $reflection->getProperty('client');
@@ -219,9 +180,7 @@ class AkamaiTagPurgerTest extends UnitTestCase {
     $reflection_property->setValue($purger, $event_dispatcher);
 
     // Create stub for response class.
-    $invalidation = $this->getMockBuilder('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $invalidation = $this->createMock('Drupal\purge\Plugin\Purge\Invalidation\TagInvalidation');
     $invalidation->method('setState')
       ->willReturn('foo');
     $invalidation->method('getExpression')
