modules/contrib/domain_lang/domain_lang.module
modules/contrib/domain_lang/src/DomainLangHandler.php
modules/contrib/domain_lang/src/DomainLangHandlerInterface.php
modules/contrib/domain_lang/src/DomainLangServiceProvider.php
modules/contrib/domain_lang/src/EventSubscriber/DomainLangConfigRedirect.php
modules/contrib/domain_lang/src/Exception/DomainLangDomainNotFoundException.php
modules/contrib/domain_lang/src/Form/DomainLangNegotiationBrowserDeleteForm.php
modules/contrib/domain_lang/src/Form/DomainLangNegotiationBrowserForm.php
modules/contrib/domain_lang/src/Form/DomainLangNegotiationConfigureForm.php
modules/contrib/domain_lang/src/Form/DomainLangNegotiationSelectedForm.php
modules/contrib/domain_lang/src/Form/DomainLangNegotiationSessionForm.php
modules/contrib/domain_lang/src/Form/DomainLangNegotiationUrlForm.php
modules/contrib/domain_lang/src/Language/LanguageNegotiator.php

1 file with changes
===================

1) modules/contrib/domain_lang/src/EventSubscriber/DomainLangConfigRedirect.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_lang\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
 use Drupal\domain\DomainNegotiatorInterface;
 use Symfony\Cmf\Component\Routing\RouteObjectInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Check current request and redirect if needed.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   Current request response event.
    */
-  public function checkRequest(GetResponseEvent $event) {
+  public function checkRequest(RequestEvent $event) {
     $domain = $this->domainNegotiator->getActiveDomain();

     if ($domain instanceof DomainInterface) {
@@ @@
   /**
    * Sets TrustedRedirectResponse to redirect to related domain page.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The request response event.
    * @param string $route
    *   The name of the route.
@@ @@
    * @param \Drupal\domain\DomainInterface $domain
    *   The domain object.
    */
-  protected function setRedirectResponse(GetResponseEvent $event, $route, DomainInterface $domain) {
+  protected function setRedirectResponse(RequestEvent $event, $route, DomainInterface $domain) {
     $event->setResponse(new TrustedRedirectResponse(Url::fromRoute(
       $route,
       ['domain' => $domain->id()],
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


 [OK] 1 file has been changed by Rector                                         

