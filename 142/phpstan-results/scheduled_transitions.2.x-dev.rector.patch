diff --git a/scheduled_transitions.api.php b/scheduled_transitions.api.php
index 7dae7d7..ff65ac5 100644
--- a/scheduled_transitions.api.php
+++ b/scheduled_transitions.api.php
@@ -11,6 +11,10 @@
 
 declare(strict_types = 1);
 
+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use Drupal\scheduled_transitions\Event\ScheduledTransitionsNewRevisionEvent;
+use Drupal\scheduled_transitions\Event\ScheduledTransitionsEvents;
+
 /**
  * Event subscribers for Scheduled Transitions Field.
  *
@@ -24,7 +28,7 @@ declare(strict_types = 1);
  * ```
  * </code>
  */
-class MyEventSubscriber implements \Symfony\Component\EventDispatcher\EventSubscriberInterface {
+class MyEventSubscriber implements EventSubscriberInterface {
 
   /**
    * Custom logic to determine new revision for a scheduled transition.
@@ -32,7 +36,7 @@ class MyEventSubscriber implements \Symfony\Component\EventDispatcher\EventSubsc
    * @param \Drupal\scheduled_transitions\Event\ScheduledTransitionsNewRevisionEvent $event
    *   New revision event.
    */
-  public function newRevision(\Drupal\scheduled_transitions\Event\ScheduledTransitionsNewRevisionEvent $event): void {
+  public function newRevision(ScheduledTransitionsNewRevisionEvent $event): void {
     $scheduledTransition = $event->getScheduledTransition();
     $entity = $scheduledTransition->getEntity();
     $newRevision = $entity;
@@ -45,7 +49,7 @@ class MyEventSubscriber implements \Symfony\Component\EventDispatcher\EventSubsc
    */
   public static function getSubscribedEvents(): array {
     return [
-      \Drupal\scheduled_transitions\Event\ScheduledTransitionsEvents::NEW_REVISION => ['newRevision'],
+      ScheduledTransitionsEvents::NEW_REVISION => ['newRevision'],
     ];
   }
 
diff --git a/src/Event/ScheduledTransitionsNewRevisionEvent.php b/src/Event/ScheduledTransitionsNewRevisionEvent.php
index 15c2e1f..5919f8c 100644
--- a/src/Event/ScheduledTransitionsNewRevisionEvent.php
+++ b/src/Event/ScheduledTransitionsNewRevisionEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\scheduled_transitions\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Used to determine the new revision for a transition.
diff --git a/src/ScheduledTransitionsRunner.php b/src/ScheduledTransitionsRunner.php
index 3c5bcaa..48ef5b1 100644
--- a/src/ScheduledTransitionsRunner.php
+++ b/src/ScheduledTransitionsRunner.php
@@ -135,7 +135,7 @@ class ScheduledTransitionsRunner implements ScheduledTransitionsRunnerInterface
     }
 
     $event = new ScheduledTransitionsNewRevisionEvent($scheduledTransition);
-    $this->eventDispatcher->dispatch(ScheduledTransitionsEvents::NEW_REVISION, $event);
+    $this->eventDispatcher->dispatch($event, ScheduledTransitionsEvents::NEW_REVISION);
 
     $newRevision = $event->getNewRevision();
     if (!$newRevision) {
diff --git a/tests/src/Functional/ScheduledTransitionEntityTest.php b/tests/src/Functional/ScheduledTransitionEntityTest.php
index 466563d..e5f0b11 100644
--- a/tests/src/Functional/ScheduledTransitionEntityTest.php
+++ b/tests/src/Functional/ScheduledTransitionEntityTest.php
@@ -45,7 +45,7 @@ class ScheduledTransitionEntityTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
   }
diff --git a/tests/src/Functional/ScheduledTransitionLocalTaskTest.php b/tests/src/Functional/ScheduledTransitionLocalTaskTest.php
index 069ec42..84173f3 100644
--- a/tests/src/Functional/ScheduledTransitionLocalTaskTest.php
+++ b/tests/src/Functional/ScheduledTransitionLocalTaskTest.php
@@ -49,7 +49,7 @@ class ScheduledTransitionLocalTaskTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
   }
diff --git a/tests/src/Functional/ScheduledTransitionRescheduleFormTest.php b/tests/src/Functional/ScheduledTransitionRescheduleFormTest.php
index f6c358d..8e4e805 100644
--- a/tests/src/Functional/ScheduledTransitionRescheduleFormTest.php
+++ b/tests/src/Functional/ScheduledTransitionRescheduleFormTest.php
@@ -91,7 +91,7 @@ class ScheduledTransitionRescheduleFormTest extends BrowserTestBase {
       'date[date]' => '2018-10-21',
       'date[time]' => '14:00:00',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Reschedule transition');
+    $this->submitForm($edit, 'Reschedule transition');
     $this->assertSession()->pageTextContains('Rescheduled transition for Sun, 10/21/2018 - 14:00');
 
     // Reload ST.
diff --git a/tests/src/Functional/ScheduledTransitionSettingsFormTest.php b/tests/src/Functional/ScheduledTransitionSettingsFormTest.php
index 9007996..3e6bd84 100644
--- a/tests/src/Functional/ScheduledTransitionSettingsFormTest.php
+++ b/tests/src/Functional/ScheduledTransitionSettingsFormTest.php
@@ -54,7 +54,7 @@ class ScheduledTransitionSettingsFormTest extends BrowserTestBase {
     $edit = [
       'cron_create_queue_items' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');
 
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->assertSession()->checkboxNotChecked('cron_create_queue_items');
@@ -83,7 +83,7 @@ class ScheduledTransitionSettingsFormTest extends BrowserTestBase {
       'mirror_operation_view' => 'update',
       'mirror_operation_add' => 'update',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');
 
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->assertSession()->fieldValueEquals('mirror_operation_view', 'update');
@@ -105,14 +105,14 @@ class ScheduledTransitionSettingsFormTest extends BrowserTestBase {
     $this->drupalGet($url);
 
     $this->assertSession()->pageTextContains('Enabled types (0)');
-    $this->assertFieldByName('enabled[entity_test_revlog:entity_test_revlog]');
-    $this->assertFieldByName('enabled[st_entity_test:st_entity_test]');
+    $this->assertSession()->fieldExists('enabled[entity_test_revlog:entity_test_revlog]');
+    $this->assertSession()->fieldExists('enabled[st_entity_test:st_entity_test]');
 
     // Enable just one of the boxes.
     $edit = [
       'enabled[st_entity_test:st_entity_test]' => 'TRUE',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');
 
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->assertSession()->pageTextContains('Enabled types (1)');
diff --git a/tests/src/Kernel/ScheduledTransitionEntityTest.php b/tests/src/Kernel/ScheduledTransitionEntityTest.php
index 56b3823..973142e 100644
--- a/tests/src/Kernel/ScheduledTransitionEntityTest.php
+++ b/tests/src/Kernel/ScheduledTransitionEntityTest.php
@@ -31,7 +31,7 @@ class ScheduledTransitionEntityTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('scheduled_transition');
   }
diff --git a/tests/src/Kernel/ScheduledTransitionsPermissionsTest.php b/tests/src/Kernel/ScheduledTransitionsPermissionsTest.php
index ac748d2..0d46ad3 100644
--- a/tests/src/Kernel/ScheduledTransitionsPermissionsTest.php
+++ b/tests/src/Kernel/ScheduledTransitionsPermissionsTest.php
@@ -36,7 +36,7 @@ class ScheduledTransitionsPermissionsTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('entity_test_revlog');
   }
diff --git a/tests/src/Kernel/ScheduledTransitionsUtilityTest.php b/tests/src/Kernel/ScheduledTransitionsUtilityTest.php
index 61ec682..60ed38d 100644
--- a/tests/src/Kernel/ScheduledTransitionsUtilityTest.php
+++ b/tests/src/Kernel/ScheduledTransitionsUtilityTest.php
@@ -38,7 +38,7 @@ class ScheduledTransitionsUtilityTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('entity_test_revlog');
   }
diff --git a/tests/src/Unit/ScheduledTransitionsEntityHooksUnitTest.php b/tests/src/Unit/ScheduledTransitionsEntityHooksUnitTest.php
index 0be0880..cc61357 100644
--- a/tests/src/Unit/ScheduledTransitionsEntityHooksUnitTest.php
+++ b/tests/src/Unit/ScheduledTransitionsEntityHooksUnitTest.php
@@ -58,9 +58,7 @@ class ScheduledTransitionsEntityHooksUnitTest extends UnitTestCase {
     $this->testEntityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $this->testModerationInformation = $this->createMock(ModerationInformationInterface::class);
 
-    $cacheContextsManager = $this->getMockBuilder(CacheContextsManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cacheContextsManager = $this->createMock(CacheContextsManager::class);
     $cacheContextsManager->method('assertValidTokens')->willReturn(TRUE);
     $container = new ContainerBuilder();
     $container->set('cache_contexts_manager', $cacheContextsManager);
