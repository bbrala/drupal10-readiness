modules/contrib/badgr_badge/badgr_badge.install
modules/contrib/badgr_badge/src/BadgrHelpers.php
modules/contrib/badgr_badge/badgr_badge.module
modules/contrib/badgr_badge/src/BadgrService.php
modules/contrib/badgr_badge/src/BadgrServiceInterface.php
modules/contrib/badgr_badge/src/Controller/AddToBackpack.php
modules/contrib/badgr_badge/src/Form/BadgrConfigForm.php

3 files with changes
====================

1) modules/contrib/badgr_badge/badgr_badge.install:11

    ---------- begin diff ----------
@@ @@
   $result = \Drupal::entityQuery('node')
       ->condition('type', ['badgr_account','badgr_issuer','badgr_badges'], 'IN')
       ->execute();
-  entity_delete_multiple('node', $result);
+  \Drupal::service('entity_type.manager')->getStorage('node')->delete(\Drupal::service('entity_type.manager')->getStorage('node')->loadMultiple($result));
   $configFactory = \Drupal::configFactory();
   $configNames = [
     'field.field.node.badgr_account.field_badgr_access_token',
    ----------- end diff -----------

Applied rules:
 * EntityDeleteMultipleRector
 * ArgumentRemoverRector


2) modules/contrib/badgr_badge/src/Controller/AddToBackpack.php:78

    ---------- begin diff ----------
@@ @@
       }

       if (!$badge->get('field_badge_image')->isEmpty()) {
-        $badge_image = file_create_url($badge->field_badge_image->entity->getFileUri());
+        $badge_image = \Drupal::service('file_url_generator')->generateAbsoluteString($badge->field_badge_image->entity->getFileUri());
       }

       if (!$badge->get('field_badge_account')->isEmpty()) {
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/badgr_badge/src/BadgrHelpers.php:150

    ---------- begin diff ----------
@@ @@
             if (!empty($value_badges['image'])) {
               $image_file_name = pathinfo($value_badges['image']);
               $image = file_get_contents($value_badges['image']);
-              $file = file_save_data($image, 'public://' . $image_file_name['basename'], FileSystemInterface::EXISTS_RENAME);
-              $file = file_copy($file, 'public://');
+              $file = \Drupal::service('file.repository')->writeData($image, 'public://' . $image_file_name['basename'], FileSystemInterface::EXISTS_RENAME);
+              $file = \Drupal::service('file.repository')->copy($file, 'public://');
               $issuer_content->set('field_badge_image',['target_id' => $file->id()]);
             }
             $issuer_content->save();
@@ @@
             if (!empty($value_badges['image'])) {
               $image_file_name = pathinfo($value_badges['image']);
               $image = file_get_contents($value_badges['image']);
-              $file = file_save_data($image, 'public://' . $image_file_name['basename'], FileSystemInterface::EXISTS_RENAME);
+              $file = \Drupal::service('file.repository')->writeData($image, 'public://' . $image_file_name['basename'], FileSystemInterface::EXISTS_RENAME);
               if (!empty($file) && !empty($file->id())) {
                 $file->setPermanent();
                 $file->save();
@@ @@
           if (!empty($value_issuer['image'])) {
             $image_file_name = pathinfo($value_issuer['image']);
             $image = file_get_contents($value_issuer['image']);
-            $file = file_save_data($image, 'public://' . $image_file_name['basename']);
+            $file = \Drupal::service('file.repository')->writeData($image, 'public://' . $image_file_name['basename']);
             if (!empty($file) && !empty($file->id())) {
             $file->setPermanent();
             $file->save();
@@ @@
         if (!empty($value_issuer['image'])) {
           $image_file_name = pathinfo($value_issuer['image']);
           $image = file_get_contents($value_issuer['image']);
-          $file = file_save_data($image, 'public://' . $image_file_name['basename'], FileSystemInterface::EXISTS_RENAME);
+          $file = \Drupal::service('file.repository')->writeData($image, 'public://' . $image_file_name['basename'], FileSystemInterface::EXISTS_RENAME);
           if (!empty($file) && !empty($file->id())) {
             $file->setPermanent();
             $file->save();
    ----------- end diff -----------

Applied rules:
 * FileCopyRector
 * FileSaveDataRector
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 3 files have been changed by Rector                                       

