diff --git a/micro_site.install b/micro_site.install
index dc859f6..1e77d9a 100644
--- a/micro_site.install
+++ b/micro_site.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Database\Database;
 /**
  * @file
  * Contains micro_site.install.
@@ -128,7 +129,7 @@ function micro_site_update_8104() {
   $key_value->set($key_name, $storage_schema);
 
   // Updates the base database field.
-  $db_schema = \Drupal\Core\Database\Database::getConnection()->schema();
+  $db_schema = Database::getConnection()->schema();
   $db_schema->changeField($entity_type_id . '_field_data', $field_name, $field_name, [
     'type' => 'varchar',
     'length' => $field_length,
diff --git a/micro_site.module b/micro_site.module
index 1da944f..6fb6100 100644
--- a/micro_site.module
+++ b/micro_site.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\file\FileInterface;
 /**
  * @file
  * Contains micro_site.module.
@@ -93,7 +94,7 @@ function micro_site_preprocess_block__system_branding_block(&$variables) {
       /** @var \Drupal\Core\Image\Image $image */
       $image = \Drupal::service('image.factory')->get($file->getFileUri());
       if ($image->isValid()) {
-        $variables['site_logo'] = file_url_transform_relative(file_create_url($image->getSource()));
+        $variables['site_logo'] = \Drupal::service('file_url_generator')->generateString($image->getSource());
       }
     }
     // Override the site name and slogan.
@@ -379,9 +380,9 @@ function micro_site_preprocess_maintenance_page(&$variables) {
   if ($site = $negotiator->getActiveSite()) {
     $logo = $site->getLogo();
     $logo_url = '';
-    if ($logo instanceof \Drupal\file\FileInterface) {
+    if ($logo instanceof FileInterface) {
       $logo_uri = $logo->getFileUri();
-      $logo_url = file_url_transform_relative(file_create_url($logo_uri));
+      $logo_url = \Drupal::service('file_url_generator')->generateString($logo_uri);
     }
     $variables['logo'] = $logo_url;
     $variables['site_name'] = $site->getName();
diff --git a/src/EventSubscriber/NodeSubscriber.php b/src/EventSubscriber/NodeSubscriber.php
index 0d4bad3..5d26bb8 100644
--- a/src/EventSubscriber/NodeSubscriber.php
+++ b/src/EventSubscriber/NodeSubscriber.php
@@ -2,12 +2,12 @@
 
 namespace Drupal\micro_site\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\micro_node\MicroNodeFields;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\micro_site\SiteNegotiatorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -79,10 +79,10 @@ class NodeSubscriber implements EventSubscriberInterface {
   /**
    * This method prevent to access to node without a site_id field.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event object.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();
 
     // If we've got an exception, nothing to do here.
diff --git a/src/EventSubscriber/Shield.php b/src/EventSubscriber/Shield.php
index 1210cc7..f12668a 100644
--- a/src/EventSubscriber/Shield.php
+++ b/src/EventSubscriber/Shield.php
@@ -2,11 +2,11 @@
 
 namespace Drupal\micro_site\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\micro_site\SiteNegotiatorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Routing\UrlGeneratorInterface;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ -58,10 +58,10 @@ class Shield implements EventSubscriberInterface {
    * // only if KernelEvents::REQUEST !!!
    * @see \Symfony\Component\HttpKernel\KernelEvents for details
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The Event to process.
    */
-  public function ShieldLoad(GetResponseEvent $event) {
+  public function ShieldLoad(RequestEvent $event) {
     // allow Drush to bypass Shield
     if (PHP_SAPI === 'cli') {
       return;
diff --git a/src/EventSubscriber/SiteRedirectSubscriber.php b/src/EventSubscriber/SiteRedirectSubscriber.php
index 1360831..2a72f54 100644
--- a/src/EventSubscriber/SiteRedirectSubscriber.php
+++ b/src/EventSubscriber/SiteRedirectSubscriber.php
@@ -2,11 +2,11 @@
 
 namespace Drupal\micro_site\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\micro_site\SiteNegotiatorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Routing\UrlGeneratorInterface;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ -89,10 +89,10 @@ class SiteRedirectSubscriber implements EventSubscriberInterface {
   /**
    * This method is called whenever the kernel.request event is dispatched.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event object.
    */
-  public function onKernelRequestSite(GetResponseEvent $event) {
+  public function onKernelRequestSite(RequestEvent $event) {
     $request = $event->getRequest();
     $exception = $request->get('exception');
     // If we've got an exception, nothing to do here.
diff --git a/src/EventSubscriber/TermSubscriber.php b/src/EventSubscriber/TermSubscriber.php
index 6901471..9bf756c 100644
--- a/src/EventSubscriber/TermSubscriber.php
+++ b/src/EventSubscriber/TermSubscriber.php
@@ -2,12 +2,12 @@
 
 namespace Drupal\micro_site\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\micro_site\SiteNegotiatorInterface;
 use Drupal\taxonomy\TermInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -78,10 +78,10 @@ class TermSubscriber implements EventSubscriberInterface {
   /**
    * This method prevent to access to node without a site_id field.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event object.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();
 
     // If we've got an exception, nothing to do here.
diff --git a/src/Plugin/Validation/Constraint/RegisteredFieldConstraintValidator.php b/src/Plugin/Validation/Constraint/RegisteredFieldConstraintValidator.php
index d8e4443..6ea3b19 100644
--- a/src/Plugin/Validation/Constraint/RegisteredFieldConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/RegisteredFieldConstraintValidator.php
@@ -25,7 +25,7 @@ class RegisteredFieldConstraintValidator extends ConstraintValidator {
     $entity = $items->getEntity();
     $registered = $item->value;
     if ($registered) {
-      $url = $entity->getSitePath() . '/' . drupal_get_path('module', 'micro_site') . '/tests/200.png';
+      $url = $entity->getSitePath() . '/' . \Drupal::service('extension.list.module')->getPath('micro_site') . '/tests/200.png';
       try {
         $request = \Drupal::httpClient()->get($url);
         $status_code = $request->getStatusCode();
diff --git a/tests/src/Functional/BaseTest.php b/tests/src/Functional/BaseTest.php
index d566491..716f2f0 100644
--- a/tests/src/Functional/BaseTest.php
+++ b/tests/src/Functional/BaseTest.php
@@ -30,7 +30,7 @@ class BaseTest extends MicroSiteBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->createUserWithPassword(['view published site entities']);
     $this->drupalLogin($this->user);
@@ -41,7 +41,7 @@ class BaseTest extends MicroSiteBase {
    */
   public function testHome() {
     $this->drupalGet(Url::fromUri($this->masterUrl));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
   /**
@@ -49,18 +49,18 @@ class BaseTest extends MicroSiteBase {
    */
   public function testSiteAccess() {
     $this->drupalGet(Url::fromUri($this->masterUrl));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $generic = $this->createSiteType('generic', 'Generic', 'Generic site type');
     $settings = ['user_id' => $this->microSiteAdminUser->id(), 'registered' => TRUE];
     $site_one = $this->createSite('generic', 'Site One', 'Site one slogan', 'domain', 'one.microsite.local', 'siteone@microsite.local', $settings);
     $expected = 'http://one.microsite.local';
-    $this->assertEqual($site_one->getSitePath(), $expected);
+    $this->assertEquals($site_one->getSitePath(), $expected);
 
     // Nobody is logged in on the site one.
     $this->drupalGet(Url::fromUri($site_one->getSitePath()));
-    $this->assertResponse(403);
-    $this->assertText('Site One');
+    $this->assertSession()->statusCodeEquals(403);
+    $this->assertSession()->pageTextContains('Site One');
 
     $this->fillField('edit-name', $this->globalAdminUser->getAccountName());
     $this->fillField('edit-pass', $this->password);
@@ -70,42 +70,43 @@ class BaseTest extends MicroSiteBase {
 
     // Reload the master.
     $this->drupalGet(Url::fromUri($this->masterUrl));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->drupalGet(Url::fromUri($site_one->getSitePath()));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->clickLink('Edit');
     $this->checkField('edit-status-value');
     $this->pressButton('Save');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->pageTextContains('Saved the ' . $site_one->label() .' Site.');
 
     $this->clickLink('Log out');
     $this->drupalGet(Url::fromUri($site_one->getSitePath()));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $this->fillField('edit-name', $this->user->getAccountName());
     $this->fillField('edit-pass', $this->password);
     $this->pressButton('edit-submit');
     $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet($site_one->getSitePath() . "/site/{$site_one->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->logOutLogInUser($this->microSiteOwnerUser);
     $this->drupalGet($site_one->getSitePath() . "/site/{$site_one->id()}/edit");
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
 
     $this->logOutLogInUser($this->globalAdminUser);
     // Add owner user as site admin.
     $edit['field_site_administrator[0][target_id]'] = $this->microSiteOwnerUser->getAccountName() . ' ('. $this->microSiteOwnerUser->id() . ')';
-    $this->drupalPostForm($site_one->getSitePath() ."/site/{$site_one->id()}/edit", $edit, 'Save');
-    $this->assertResponse(200);
+    $this->drupalGet($site_one->getSitePath() ."/site/{$site_one->id()}/edit");
+    $this->submitForm($edit, 'Save');
+    $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet($site_one->getSitePath() . "/site/{$site_one->id()}/edit");
 
     $this->logOutLogInUser($this->microSiteOwnerUser);
     $this->drupalGet($site_one->getSitePath() . "/site/{$site_one->id()}/edit");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
   /**
@@ -121,14 +122,14 @@ class BaseTest extends MicroSiteBase {
     $site_one = $this->createSite('generic', 'Site One', 'Site one slogan', 'domain', 'one.microsite.local', 'siteone@microsite.local', $settings);
     $site_one->setCss('body {background-color: red !important;');
     $expected = 'http://one.microsite.local';
-    $this->assertEqual($site_one->getSitePath(), $expected);
+    $this->assertEquals($site_one->getSitePath(), $expected);
     $name = 'site-' . $site_one->id();
     $css_file = $name . '-' . md5($name) . '.css';
     $this->drupalGet(Url::fromUri($site_one->getSitePath()));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->responseContains($css_file);
     $xpath = $this->xpath("//link[contains(@href, '" . $css_file . "')]");
-    $this->assertEqual(count($xpath), 1, 'Exactly one ' . $css_file . ' css file asset found.');
+    $this->assertEquals(count($xpath), 1, 'Exactly one ' . $css_file . ' css file asset found.');
   }
 
 }
diff --git a/tests/src/Functional/MicroSiteBase.php b/tests/src/Functional/MicroSiteBase.php
index a05f6a5..de9f069 100644
--- a/tests/src/Functional/MicroSiteBase.php
+++ b/tests/src/Functional/MicroSiteBase.php
@@ -122,7 +122,7 @@ abstract class MicroSiteBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');
     $this->configFactory = $this->container->get('config.factory');
