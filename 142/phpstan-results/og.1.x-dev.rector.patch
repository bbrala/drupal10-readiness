diff --git a/src/Controller/OgAdminRoutesController.php b/src/Controller/OgAdminRoutesController.php
index 775dc0aa..41889fbc 100644
--- a/src/Controller/OgAdminRoutesController.php
+++ b/src/Controller/OgAdminRoutesController.php
@@ -76,7 +76,7 @@ class OgAdminRoutesController extends ControllerBase {
     $content = [];
 
     $event = new OgAdminRoutesEvent();
-    $event = $this->eventDispatcher->dispatch(OgAdminRoutesEventInterface::EVENT_NAME, $event);
+    $event = $this->eventDispatcher->dispatch($event, OgAdminRoutesEventInterface::EVENT_NAME);
 
     foreach ($event->getRoutes($entity_type_id) as $name => $info) {
       $route_name = "entity.$entity_type_id.og_admin_routes.$name";
diff --git a/src/Event/AccessEventBase.php b/src/Event/AccessEventBase.php
index 1eeaf507..27f04f25 100644
--- a/src/Event/AccessEventBase.php
+++ b/src/Event/AccessEventBase.php
@@ -4,13 +4,13 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Cache\RefinableCacheableDependencyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Base class for OG access events.
diff --git a/src/Event/DefaultRoleEvent.php b/src/Event/DefaultRoleEvent.php
index 0c444749..df72d9b6 100644
--- a/src/Event/DefaultRoleEvent.php
+++ b/src/Event/DefaultRoleEvent.php
@@ -4,8 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\og\Entity\OgRole;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event that is fired when default roles are compiled.
diff --git a/src/Event/GroupCreationEvent.php b/src/Event/GroupCreationEvent.php
index a796f62b..ecf5dc45 100644
--- a/src/Event/GroupCreationEvent.php
+++ b/src/Event/GroupCreationEvent.php
@@ -4,7 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * The group creation event.
diff --git a/src/Event/OgAdminRoutesEvent.php b/src/Event/OgAdminRoutesEvent.php
index 5bde1ab4..9c17964a 100644
--- a/src/Event/OgAdminRoutesEvent.php
+++ b/src/Event/OgAdminRoutesEvent.php
@@ -4,9 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\og\OgAccess;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event that is fired when OG admin routes are being compiled.
diff --git a/src/Event/PermissionEvent.php b/src/Event/PermissionEvent.php
index 85e5240e..ff1ac6da 100644
--- a/src/Event/PermissionEvent.php
+++ b/src/Event/PermissionEvent.php
@@ -4,9 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\og\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\og\GroupContentOperationPermission;
 use Drupal\og\PermissionInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event that is fired when OG permissions are compiled.
diff --git a/src/GroupTypeManager.php b/src/GroupTypeManager.php
index fcbe2a87..595a3093 100644
--- a/src/GroupTypeManager.php
+++ b/src/GroupTypeManager.php
@@ -284,7 +284,7 @@ class GroupTypeManager implements GroupTypeManagerInterface {
 
     // Trigger an event upon the new group creation.
     $event = new GroupCreationEvent($entity_type_id, $bundle_id);
-    $this->eventDispatcher->dispatch(GroupCreationEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, GroupCreationEventInterface::EVENT_NAME);
 
     $this->ogRoleManager->createPerBundleRoles($entity_type_id, $bundle_id);
     $this->refreshGroupMap();
diff --git a/src/OgAccess.php b/src/OgAccess.php
index e9862062..5e096818 100644
--- a/src/OgAccess.php
+++ b/src/OgAccess.php
@@ -323,7 +323,7 @@ class OgAccess implements OgAccessInterface {
       $event->addCacheContexts(['user']);
     }
 
-    $this->dispatcher->dispatch(GroupContentEntityOperationAccessEvent::EVENT_NAME, $event);
+    $this->dispatcher->dispatch($event, GroupContentEntityOperationAccessEvent::EVENT_NAME);
 
     return $event->getAccessResult();
   }
diff --git a/src/OgRoleManager.php b/src/OgRoleManager.php
index b35d2c82..979830b5 100644
--- a/src/OgRoleManager.php
+++ b/src/OgRoleManager.php
@@ -88,7 +88,7 @@ class OgRoleManager implements OgRoleManagerInterface {
     $roles = $this->getRequiredDefaultRoles();
 
     $event = new DefaultRoleEvent();
-    $this->eventDispatcher->dispatch(DefaultRoleEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, DefaultRoleEventInterface::EVENT_NAME);
 
     // Use the array union operator '+=' to ensure the default roles cannot be
     // altered by event subscribers.
diff --git a/src/PermissionManager.php b/src/PermissionManager.php
index 9c4ab7b5..bb91cae4 100644
--- a/src/PermissionManager.php
+++ b/src/PermissionManager.php
@@ -35,7 +35,7 @@ class PermissionManager implements PermissionManagerInterface {
    */
   public function getDefaultPermissions($group_entity_type_id, $group_bundle_id, array $group_content_bundle_ids, $role_name = NULL) {
     $event = new PermissionEvent($group_entity_type_id, $group_bundle_id, $group_content_bundle_ids);
-    $this->eventDispatcher->dispatch(PermissionEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, PermissionEventInterface::EVENT_NAME);
     return $event->getPermissions();
   }
 
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index d616903a..336ea319 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -120,7 +120,7 @@ class RouteSubscriber extends RouteSubscriberBase {
    */
   protected function createRoutesFromEventSubscribers($og_admin_path, $entity_type_id, RouteCollection $collection) {
     $event = new OgAdminRoutesEvent();
-    $this->eventDispatcher->dispatch(OgAdminRoutesEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, OgAdminRoutesEventInterface::EVENT_NAME);
 
     foreach ($event->getRoutes($entity_type_id) as $name => $route_info) {
       // Add the parent route.
diff --git a/tests/src/Kernel/DefaultRoleEventIntegrationTest.php b/tests/src/Kernel/DefaultRoleEventIntegrationTest.php
index 48dede81..f94e3581 100644
--- a/tests/src/Kernel/DefaultRoleEventIntegrationTest.php
+++ b/tests/src/Kernel/DefaultRoleEventIntegrationTest.php
@@ -68,7 +68,7 @@ class DefaultRoleEventIntegrationTest extends KernelTestBase {
 
     // Query the event listener directly to see if the administrator role is
     // present.
-    $this->eventDispatcher->dispatch(DefaultRoleEventInterface::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, DefaultRoleEventInterface::EVENT_NAME);
     $this->assertEquals([OgRoleInterface::ADMINISTRATOR], array_keys($event->getRoles()));
 
     // Check that the role was created with the correct values.
diff --git a/tests/src/Kernel/EntityReference/Views/OgStandardReferenceRelationshipTest.php b/tests/src/Kernel/EntityReference/Views/OgStandardReferenceRelationshipTest.php
index ef717240..753df36b 100644
--- a/tests/src/Kernel/EntityReference/Views/OgStandardReferenceRelationshipTest.php
+++ b/tests/src/Kernel/EntityReference/Views/OgStandardReferenceRelationshipTest.php
@@ -102,37 +102,37 @@ class OgStandardReferenceRelationshipTest extends ViewsKernelTestBase {
     $entity = EntityTest::create();
     $entity->field_test_data->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;
 
     $entity = EntityTest::create();
     $entity->field_test_data->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_test_data[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;
 
     Views::viewsData()->clear();
 
     // Check the generated views data.
     $views_data = Views::viewsData()->get('entity_test__field_test_data');
-    $this->assertEqual($views_data['field_test_data']['relationship']['id'], 'standard');
-    $this->assertEqual($views_data['field_test_data']['relationship']['base'], 'entity_test_mul_property_data');
-    $this->assertEqual($views_data['field_test_data']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['field_test_data']['relationship']['relationship field'], 'field_test_data_target_id');
-    $this->assertEqual($views_data['field_test_data']['relationship']['entity type'], 'entity_test_mul');
+    $this->assertEquals($views_data['field_test_data']['relationship']['id'], 'standard');
+    $this->assertEquals($views_data['field_test_data']['relationship']['base'], 'entity_test_mul_property_data');
+    $this->assertEquals($views_data['field_test_data']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['field_test_data']['relationship']['relationship field'], 'field_test_data_target_id');
+    $this->assertEquals($views_data['field_test_data']['relationship']['entity type'], 'entity_test_mul');
 
     // Check the backwards reference.
     $views_data = Views::viewsData()->get('entity_test_mul_property_data');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['id'], 'entity_reverse');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['base'], 'entity_test');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['field table'], 'entity_test__field_test_data');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['field field'], 'field_test_data_target_id');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['field_name'], 'field_test_data');
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['entity_type'], 'entity_test');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['id'], 'entity_reverse');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['base'], 'entity_test');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['field table'], 'entity_test__field_test_data');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['field field'], 'field_test_data_target_id');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['field_name'], 'field_test_data');
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['entity_type'], 'entity_test');
 
     $values = ['field' => 'deleted', 'value' => 0, 'numeric' => TRUE];
-    $this->assertEqual($views_data['reverse__entity_test__field_test_data']['relationship']['join_extra'][0], $values);
+    $this->assertEquals($views_data['reverse__entity_test__field_test_data']['relationship']['join_extra'][0], $values);
 
     // Check an actual test view.
     $view = Views::getView('test_og_standard_reference_entity_test_view');
@@ -140,17 +140,17 @@ class OgStandardReferenceRelationshipTest extends ViewsKernelTestBase {
     /** @var \Drupal\views\ResultRow $row */
     foreach ($view->result as $index => $row) {
       // Check that the actual ID of the entity is the expected one.
-      $this->assertEqual($row->id, $this->entities[$index]->id());
+      $this->assertEquals($row->id, $this->entities[$index]->id());
 
       // Also check that we have the correct result entity.
-      $this->assertEqual($row->_entity->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_entity->id(), $this->entities[$index]->id());
 
       // Test the forward relationship.
-      $this->assertEqual($row->entity_test_mul_property_data_entity_test__field_test_data_i, 1);
+      $this->assertEquals($row->entity_test_mul_property_data_entity_test__field_test_data_i, 1);
 
       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['field_test_data']->id(), 1);
-      $this->assertEqual($row->_relationship_entities['field_test_data']->bundle(), 'entity_test_mul');
+      $this->assertEquals($row->_relationship_entities['field_test_data']->id(), 1);
+      $this->assertEquals($row->_relationship_entities['field_test_data']->bundle(), 'entity_test_mul');
 
     }
 
@@ -159,15 +159,15 @@ class OgStandardReferenceRelationshipTest extends ViewsKernelTestBase {
     $this->executeView($view);
     /** @var \Drupal\views\ResultRow $row */
     foreach ($view->result as $index => $row) {
-      $this->assertEqual($row->id, 1);
-      $this->assertEqual($row->_entity->id(), 1);
+      $this->assertEquals($row->id, 1);
+      $this->assertEquals($row->_entity->id(), 1);
 
       // Test the backwards relationship.
-      $this->assertEqual($row->field_test_data_entity_test_mul_property_data_id, $this->entities[$index]->id());
+      $this->assertEquals($row->field_test_data_entity_test_mul_property_data_id, $this->entities[$index]->id());
 
       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test__field_test_data']->id(), $this->entities[$index]->id());
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test__field_test_data']->bundle(), 'entity_test');
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test__field_test_data']->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test__field_test_data']->bundle(), 'entity_test');
     }
   }
 
@@ -185,37 +185,37 @@ class OgStandardReferenceRelationshipTest extends ViewsKernelTestBase {
     $entity = EntityTestMul::create();
     $entity->field_data_test->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;
 
     $entity = EntityTestMul::create();
     $entity->field_data_test->target_id = $referenced_entity->id();
     $entity->save();
-    $this->assertEqual($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
+    $this->assertEquals($entity->field_data_test[0]->entity->id(), $referenced_entity->id());
     $this->entities[] = $entity;
 
     Views::viewsData()->clear();
 
     // Check the generated views data.
     $views_data = Views::viewsData()->get('entity_test_mul__field_data_test');
-    $this->assertEqual($views_data['field_data_test']['relationship']['id'], 'standard');
-    $this->assertEqual($views_data['field_data_test']['relationship']['base'], 'entity_test');
-    $this->assertEqual($views_data['field_data_test']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['field_data_test']['relationship']['relationship field'], 'field_data_test_target_id');
-    $this->assertEqual($views_data['field_data_test']['relationship']['entity type'], 'entity_test');
+    $this->assertEquals($views_data['field_data_test']['relationship']['id'], 'standard');
+    $this->assertEquals($views_data['field_data_test']['relationship']['base'], 'entity_test');
+    $this->assertEquals($views_data['field_data_test']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['field_data_test']['relationship']['relationship field'], 'field_data_test_target_id');
+    $this->assertEquals($views_data['field_data_test']['relationship']['entity type'], 'entity_test');
 
     // Check the backwards reference.
     $views_data = Views::viewsData()->get('entity_test');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['id'], 'entity_reverse');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base'], 'entity_test_mul_property_data');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base field'], 'id');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field table'], 'entity_test_mul__field_data_test');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field field'], 'field_data_test_target_id');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field_name'], 'field_data_test');
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['entity_type'], 'entity_test_mul');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['id'], 'entity_reverse');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base'], 'entity_test_mul_property_data');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['base field'], 'id');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field table'], 'entity_test_mul__field_data_test');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field field'], 'field_data_test_target_id');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['field_name'], 'field_data_test');
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['entity_type'], 'entity_test_mul');
 
     $values = ['field' => 'deleted', 'value' => 0, 'numeric' => TRUE];
-    $this->assertEqual($views_data['reverse__entity_test_mul__field_data_test']['relationship']['join_extra'][0], $values);
+    $this->assertEquals($views_data['reverse__entity_test_mul__field_data_test']['relationship']['join_extra'][0], $values);
 
     // Check an actual test view.
     $view = Views::getView('test_og_standard_reference_entity_test_mul_view');
@@ -223,17 +223,17 @@ class OgStandardReferenceRelationshipTest extends ViewsKernelTestBase {
     /** @var \Drupal\views\ResultRow $row */
     foreach ($view->result as $index => $row) {
       // Check that the actual ID of the entity is the expected one.
-      $this->assertEqual($row->id, $this->entities[$index]->id());
+      $this->assertEquals($row->id, $this->entities[$index]->id());
 
       // Also check that we have the correct result entity.
-      $this->assertEqual($row->_entity->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_entity->id(), $this->entities[$index]->id());
 
       // Test the forward relationship.
-      $this->assertEqual($row->entity_test_entity_test_mul__field_data_test_id, 1);
+      $this->assertEquals($row->entity_test_entity_test_mul__field_data_test_id, 1);
 
       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['field_data_test']->id(), 1);
-      $this->assertEqual($row->_relationship_entities['field_data_test']->bundle(), 'entity_test');
+      $this->assertEquals($row->_relationship_entities['field_data_test']->id(), 1);
+      $this->assertEquals($row->_relationship_entities['field_data_test']->bundle(), 'entity_test');
 
     }
 
@@ -242,15 +242,15 @@ class OgStandardReferenceRelationshipTest extends ViewsKernelTestBase {
     $this->executeView($view);
     /** @var \Drupal\views\ResultRow $row */
     foreach ($view->result as $index => $row) {
-      $this->assertEqual($row->id, 1);
-      $this->assertEqual($row->_entity->id(), 1);
+      $this->assertEquals($row->id, 1);
+      $this->assertEquals($row->_entity->id(), 1);
 
       // Test the backwards relationship.
-      $this->assertEqual($row->field_data_test_entity_test_id, $this->entities[$index]->id());
+      $this->assertEquals($row->field_data_test_entity_test_id, $this->entities[$index]->id());
 
       // Test that the correct relationship entity is on the row.
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->id(), $this->entities[$index]->id());
-      $this->assertEqual($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->bundle(), 'entity_test_mul');
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->id(), $this->entities[$index]->id());
+      $this->assertEquals($row->_relationship_entities['reverse__entity_test_mul__field_data_test']->bundle(), 'entity_test_mul');
     }
   }
 
diff --git a/tests/src/Kernel/PermissionEventTest.php b/tests/src/Kernel/PermissionEventTest.php
index 65f23e20..dbfc2c61 100644
--- a/tests/src/Kernel/PermissionEventTest.php
+++ b/tests/src/Kernel/PermissionEventTest.php
@@ -94,7 +94,7 @@ class PermissionEventTest extends KernelTestBase {
     // Retrieve the permissions from the listeners.
     /** @var \Drupal\og\Event\PermissionEvent $permission_event */
     $event = new PermissionEvent($this->randomMachineName(), $this->randomMachineName(), $group_content_bundle_ids);
-    $permission_event = $this->eventDispatcher->dispatch(PermissionEventInterface::EVENT_NAME, $event);
+    $permission_event = $this->eventDispatcher->dispatch($event, PermissionEventInterface::EVENT_NAME);
     $actual_permissions = array_keys($permission_event->getPermissions());
 
     // Sort the permission arrays so they can be compared.
diff --git a/tests/src/Kernel/Plugin/Block/MemberCountBlockTest.php b/tests/src/Kernel/Plugin/Block/MemberCountBlockTest.php
index 851db046..1eef9dfe 100644
--- a/tests/src/Kernel/Plugin/Block/MemberCountBlockTest.php
+++ b/tests/src/Kernel/Plugin/Block/MemberCountBlockTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Kernel\Plugin\Block;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\entity_test\Entity\EntityTest;
@@ -21,6 +22,7 @@ use Prophecy\Promise\CallbackPromise;
  */
 class MemberCountBlockTest extends KernelTestBase {
 
+  use ProphecyTrait;
   use OgMembershipCreationTrait;
   use StringTranslationTrait;
   use UserCreationTrait;
diff --git a/tests/src/Unit/Cache/Context/OgContextCacheContextTestBase.php b/tests/src/Unit/Cache/Context/OgContextCacheContextTestBase.php
index cfe04d3a..f15ec52b 100644
--- a/tests/src/Unit/Cache/Context/OgContextCacheContextTestBase.php
+++ b/tests/src/Unit/Cache/Context/OgContextCacheContextTestBase.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Cache\Context;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\og\OgContextInterface;
 
@@ -17,6 +18,7 @@ use Drupal\og\OgContextInterface;
  */
 abstract class OgContextCacheContextTestBase extends OgCacheContextTestBase {
 
+  use ProphecyTrait;
   /**
    * The mocked OG context service.
    *
diff --git a/tests/src/Unit/Cache/Context/OgMembershipStateCacheContextTest.php b/tests/src/Unit/Cache/Context/OgMembershipStateCacheContextTest.php
index 077ddfdc..c70a239f 100644
--- a/tests/src/Unit/Cache/Context/OgMembershipStateCacheContextTest.php
+++ b/tests/src/Unit/Cache/Context/OgMembershipStateCacheContextTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Cache\Context;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\og\Cache\Context\OgMembershipStateCacheContext;
 use Drupal\og\MembershipManagerInterface;
@@ -17,6 +18,7 @@ use Drupal\og\OgMembershipInterface;
  */
 class OgMembershipStateCacheContextTest extends OgContextCacheContextTestBase {
 
+  use ProphecyTrait;
   /**
    * The OG membership entity.
    *
diff --git a/tests/src/Unit/Cache/Context/OgRoleCacheContextTest.php b/tests/src/Unit/Cache/Context/OgRoleCacheContextTest.php
index 8cd718bd..cfb246d8 100644
--- a/tests/src/Unit/Cache/Context/OgRoleCacheContextTest.php
+++ b/tests/src/Unit/Cache/Context/OgRoleCacheContextTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Cache\Context;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\Context\CacheContextInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -23,6 +24,7 @@ use Drupal\og\OgMembershipInterface;
  */
 class OgRoleCacheContextTest extends OgCacheContextTestBase {
 
+  use ProphecyTrait;
   use OgRoleCacheContextTestTrait;
 
   /**
diff --git a/tests/src/Unit/CreateMembershipTest.php b/tests/src/Unit/CreateMembershipTest.php
index d1be7ce7..a5017bdc 100644
--- a/tests/src/Unit/CreateMembershipTest.php
+++ b/tests/src/Unit/CreateMembershipTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -25,6 +26,7 @@ use Prophecy\Argument;
  */
 class CreateMembershipTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The entity type manager.
    *
diff --git a/tests/src/Unit/DefaultRoleEventTest.php b/tests/src/Unit/DefaultRoleEventTest.php
index a8a1a795..6a17d2ad 100644
--- a/tests/src/Unit/DefaultRoleEventTest.php
+++ b/tests/src/Unit/DefaultRoleEventTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
@@ -19,6 +20,7 @@ use Drupal\og\OgRoleInterface;
  */
 class DefaultRoleEventTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The DefaultRoleEvent class, which is the system under test.
    *
diff --git a/tests/src/Unit/GroupCheckTest.php b/tests/src/Unit/GroupCheckTest.php
index a303e699..2bae2418 100644
--- a/tests/src/Unit/GroupCheckTest.php
+++ b/tests/src/Unit/GroupCheckTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ -25,6 +26,7 @@ use Symfony\Component\Routing\Route;
  */
 class GroupCheckTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The entity type manager prophecy used in the test.
    *
diff --git a/tests/src/Unit/GroupTypeManagerTest.php b/tests/src/Unit/GroupTypeManagerTest.php
index b46a0e30..191644ba 100644
--- a/tests/src/Unit/GroupTypeManagerTest.php
+++ b/tests/src/Unit/GroupTypeManagerTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -32,6 +33,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class GroupTypeManagerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The config prophecy used in the test.
    *
diff --git a/tests/src/Unit/OgAccessEntityTestBase.php b/tests/src/Unit/OgAccessEntityTestBase.php
index d0e542d3..d3793e5d 100644
--- a/tests/src/Unit/OgAccessEntityTestBase.php
+++ b/tests/src/Unit/OgAccessEntityTestBase.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -19,6 +20,7 @@ use Drupal\og\OgGroupAudienceHelperInterface;
  */
 abstract class OgAccessEntityTestBase extends OgAccessTestBase {
 
+  use ProphecyTrait;
   /**
    * A test group content entity.
    *
diff --git a/tests/src/Unit/OgAccessHookTest.php b/tests/src/Unit/OgAccessHookTest.php
index b55c9ee0..0f7dff1a 100644
--- a/tests/src/Unit/OgAccessHookTest.php
+++ b/tests/src/Unit/OgAccessHookTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -13,6 +14,7 @@ use Drupal\Core\Entity\EntityInterface;
  */
 class OgAccessHookTest extends OgAccessEntityTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
diff --git a/tests/src/Unit/OgAccessTestBase.php b/tests/src/Unit/OgAccessTestBase.php
index 959a1867..16b0dfb9 100644
--- a/tests/src/Unit/OgAccessTestBase.php
+++ b/tests/src/Unit/OgAccessTestBase.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -30,6 +31,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class OgAccessTestBase extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The mocked config handler.
    *
diff --git a/tests/src/Unit/OgAdminRoutesControllerTest.php b/tests/src/Unit/OgAdminRoutesControllerTest.php
index 9396912f..eb6b8aa2 100644
--- a/tests/src/Unit/OgAdminRoutesControllerTest.php
+++ b/tests/src/Unit/OgAdminRoutesControllerTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ -25,6 +26,7 @@ use Symfony\Component\Routing\Route;
  */
 class OgAdminRoutesControllerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The access manager service.
    *
diff --git a/tests/src/Unit/OgContextTest.php b/tests/src/Unit/OgContextTest.php
index 92d91c2e..00b70d1d 100644
--- a/tests/src/Unit/OgContextTest.php
+++ b/tests/src/Unit/OgContextTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
@@ -26,6 +27,7 @@ use Symfony\Component\DependencyInjection\Container;
  */
 class OgContextTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * A mocked plugin manager.
    *
diff --git a/tests/src/Unit/OgLocalTaskTest.php b/tests/src/Unit/OgLocalTaskTest.php
index b0e451fd..d5e876a1 100644
--- a/tests/src/Unit/OgLocalTaskTest.php
+++ b/tests/src/Unit/OgLocalTaskTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Routing\RouteProvider;
 use Drupal\Tests\UnitTestCase;
@@ -21,6 +22,7 @@ use Symfony\Component\Routing\Route;
  */
 class OgLocalTaskTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The group type manager.
    *
diff --git a/tests/src/Unit/OgResolvedGroupCollectionTest.php b/tests/src/Unit/OgResolvedGroupCollectionTest.php
index 862e2325..7717611b 100644
--- a/tests/src/Unit/OgResolvedGroupCollectionTest.php
+++ b/tests/src/Unit/OgResolvedGroupCollectionTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\og\OgResolvedGroupCollection;
@@ -16,6 +17,7 @@ use Drupal\og\OgResolvedGroupCollection;
  */
 class OgResolvedGroupCollectionTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * An array of mocked test groups, keyed by entity type ID and entity ID.
    *
diff --git a/tests/src/Unit/OgRoleManagerTest.php b/tests/src/Unit/OgRoleManagerTest.php
index 293e3eda..f44e3e76 100644
--- a/tests/src/Unit/OgRoleManagerTest.php
+++ b/tests/src/Unit/OgRoleManagerTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
@@ -21,6 +22,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class OgRoleManagerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The entity type ID of the test group.
    *
diff --git a/tests/src/Unit/Plugin/OgGroupResolver/OgGroupResolverTestBase.php b/tests/src/Unit/Plugin/OgGroupResolver/OgGroupResolverTestBase.php
index 950baabc..55b3723c 100644
--- a/tests/src/Unit/Plugin/OgGroupResolver/OgGroupResolverTestBase.php
+++ b/tests/src/Unit/Plugin/OgGroupResolver/OgGroupResolverTestBase.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
@@ -18,6 +19,7 @@ use Drupal\og\OgGroupAudienceHelperInterface;
  */
 abstract class OgGroupResolverTestBase extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The fully qualified class name of the plugin under test.
    *
diff --git a/tests/src/Unit/Plugin/OgGroupResolver/OgRouteGroupResolverTestBase.php b/tests/src/Unit/Plugin/OgGroupResolver/OgRouteGroupResolverTestBase.php
index 3fdb3747..83583dca 100644
--- a/tests/src/Unit/Plugin/OgGroupResolver/OgRouteGroupResolverTestBase.php
+++ b/tests/src/Unit/Plugin/OgGroupResolver/OgRouteGroupResolverTestBase.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -15,6 +16,7 @@ use Symfony\Component\Routing\Route;
  */
 abstract class OgRouteGroupResolverTestBase extends OgGroupResolverTestBase {
 
+  use ProphecyTrait;
   /**
    * A list of link templates that belong to entity types used in the tests.
    *
diff --git a/tests/src/Unit/Plugin/OgGroupResolver/RequestQueryArgumentResolverTest.php b/tests/src/Unit/Plugin/OgGroupResolver/RequestQueryArgumentResolverTest.php
index 8daf87f7..66ce6f9d 100644
--- a/tests/src/Unit/Plugin/OgGroupResolver/RequestQueryArgumentResolverTest.php
+++ b/tests/src/Unit/Plugin/OgGroupResolver/RequestQueryArgumentResolverTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\og\OgResolvedGroupCollectionInterface;
 use Drupal\og\Plugin\OgGroupResolver\RequestQueryArgumentResolver;
@@ -19,6 +20,7 @@ use Symfony\Component\HttpFoundation\RequestStack;
  */
 class RequestQueryArgumentResolverTest extends OgGroupResolverTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
diff --git a/tests/src/Unit/Plugin/OgGroupResolver/RouteGroupResolverTest.php b/tests/src/Unit/Plugin/OgGroupResolver/RouteGroupResolverTest.php
index 3fa80608..4c93dda6 100644
--- a/tests/src/Unit/Plugin/OgGroupResolver/RouteGroupResolverTest.php
+++ b/tests/src/Unit/Plugin/OgGroupResolver/RouteGroupResolverTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\og\Plugin\OgGroupResolver\RouteGroupResolver;
 
@@ -15,6 +16,7 @@ use Drupal\og\Plugin\OgGroupResolver\RouteGroupResolver;
  */
 class RouteGroupResolverTest extends OgRouteGroupResolverTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
diff --git a/tests/src/Unit/Plugin/OgGroupResolver/UserGroupAccessResolverTest.php b/tests/src/Unit/Plugin/OgGroupResolver/UserGroupAccessResolverTest.php
index 0dc28912..7c118fe9 100644
--- a/tests/src/Unit/Plugin/OgGroupResolver/UserGroupAccessResolverTest.php
+++ b/tests/src/Unit/Plugin/OgGroupResolver/UserGroupAccessResolverTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit\Plugin\OgGroupResolver;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\og\OgResolvedGroupCollectionInterface;
 use Drupal\og\Plugin\OgGroupResolver\UserGroupAccessResolver;
 
@@ -15,6 +16,7 @@ use Drupal\og\Plugin\OgGroupResolver\UserGroupAccessResolver;
  */
 class UserGroupAccessResolverTest extends OgGroupResolverTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
diff --git a/tests/src/Unit/SubscriptionControllerTest.php b/tests/src/Unit/SubscriptionControllerTest.php
index 1335b421..d45767d9 100644
--- a/tests/src/Unit/SubscriptionControllerTest.php
+++ b/tests/src/Unit/SubscriptionControllerTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\og\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
@@ -27,6 +28,7 @@ use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
  */
 class SubscriptionControllerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The entity for builder object.
    *
