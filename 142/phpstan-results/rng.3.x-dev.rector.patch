diff --git a/src/AccessControl/RegistrationAccessControlHandler.php b/src/AccessControl/RegistrationAccessControlHandler.php
index d5bab0a..5e0ab05 100644
--- a/src/AccessControl/RegistrationAccessControlHandler.php
+++ b/src/AccessControl/RegistrationAccessControlHandler.php
@@ -117,7 +117,7 @@ class RegistrationAccessControlHandler extends EntityAccessControlHandler {
 
     try {
       $event = new RegistrationAccessEvent($entity_bundle, $account, $context);
-      $this->eventDispatcher->dispatch(RegistrationEvents::REGISTRATION_CREATE_ACCESS, $event);
+      $this->eventDispatcher->dispatch($event, RegistrationEvents::REGISTRATION_CREATE_ACCESS);
       if (!$event->isAccessAllowed()) {
         return $fail;
       }
diff --git a/src/Event/RegistrationAccessEvent.php b/src/Event/RegistrationAccessEvent.php
index 9cfa3bd..bb1e03a 100644
--- a/src/Event/RegistrationAccessEvent.php
+++ b/src/Event/RegistrationAccessEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\rng\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Session\AccountInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Registration event to influence access.
diff --git a/src/Event/RegistrationEvent.php b/src/Event/RegistrationEvent.php
index 457c66c..1aab3f9 100644
--- a/src/Event/RegistrationEvent.php
+++ b/src/Event/RegistrationEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\rng\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\rng\Entity\RegistrationInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Registration event.
diff --git a/src/EventSubscriber/RngRequestSubscriber.php b/src/EventSubscriber/RngRequestSubscriber.php
index 202d15a..f425cef 100644
--- a/src/EventSubscriber/RngRequestSubscriber.php
+++ b/src/EventSubscriber/RngRequestSubscriber.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\rng\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\rng\RngEntityModelInterface;
@@ -54,10 +54,10 @@ class RngRequestSubscriber implements EventSubscriberInterface {
   /**
    * Run RNG rules for entity operations which occurred during this request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\PostResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\TerminateEvent $event
    *   The event to process.
    */
-  public function onKernelTerminate(PostResponseEvent $event) {
+  public function onKernelTerminate(TerminateEvent $event) {
     $operation_records = $this->rngEntityModel->getOperationRecords();
     foreach ($operation_records as $operation_record) {
       if ($operation_record->getEntityTypeId() == 'registration') {
diff --git a/src/RegistrationStorage.php b/src/RegistrationStorage.php
index 48e04e4..8856e2b 100644
--- a/src/RegistrationStorage.php
+++ b/src/RegistrationStorage.php
@@ -45,7 +45,7 @@ class RegistrationStorage extends SqlContentEntityStorage {
    */
   protected function invokeHook($hook, EntityInterface $entity) {
     parent::invokeHook($hook, $entity);
-    $this->eventDispatcher->dispatch($this->getEventName($hook), new RegistrationEvent($entity));
+    $this->eventDispatcher->dispatch(new RegistrationEvent($entity), $this->getEventName($hook));
   }
 
   /**
diff --git a/tests/src/Functional/RngEventTypeAccessDefaultsTest.php b/tests/src/Functional/RngEventTypeAccessDefaultsTest.php
index b0bf49b..be9006d 100644
--- a/tests/src/Functional/RngEventTypeAccessDefaultsTest.php
+++ b/tests/src/Functional/RngEventTypeAccessDefaultsTest.php
@@ -44,12 +44,12 @@ class RngEventTypeAccessDefaultsTest extends RngBrowserTestBase {
     $this->drupalGet($defaults_route);
 
     // Ensure checkboxes have default values.
-    $this->assertNoFieldById('edit-actions-operations-event-manager-create');
+    $this->assertSession()->fieldValueNotEquals('edit-actions-operations-event-manager-create', '');
     $session->checkboxChecked('edit-actions-operations-event-manager-view');
     $session->checkboxChecked('edit-actions-operations-event-manager-update');
     $session->checkboxChecked('edit-actions-operations-event-manager-delete');
 
-    $this->assertNoFieldById('edit-actions-operations-registrant-create');
+    $this->assertSession()->fieldValueNotEquals('edit-actions-operations-registrant-create', '');
     $session->checkboxChecked('edit-actions-operations-registrant-view');
     $session->checkboxChecked('edit-actions-operations-registrant-update');
     $session->checkboxNotChecked('edit-actions-operations-registrant-delete');
diff --git a/tests/src/Functional/RngEventTypeTest.php b/tests/src/Functional/RngEventTypeTest.php
index ac248c3..3ce3ecd 100644
--- a/tests/src/Functional/RngEventTypeTest.php
+++ b/tests/src/Functional/RngEventTypeTest.php
@@ -119,7 +119,7 @@ class RngEventTypeTest extends RngBrowserTestBase {
     $this->assertSession()->responseContains(t('%label event type added.', $t_args));
 
     // Courier context created?
-    $this->assertSession()->assert(CourierContext::load('rng_registration_node'), 'Courier context entity created for this event type\' entity type.');
+    $this->assertTrue(CourierContext::load('rng_registration_node'), 'Courier context entity created for this event type\' entity type.');
 
     // Event type list.
     $this->drupalGet('admin/structure/rng/event_types');
