modules/contrib/healthcheck/healthcheck.api.php
modules/contrib/healthcheck/healthcheck.install
modules/contrib/healthcheck/modules/healthcheck_email/healthcheck_email.module
modules/contrib/healthcheck/modules/healthcheck_historical/src/HistoricalService.php
modules/contrib/healthcheck/src/Event/HealthcheckCriticalEvent.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/Database.php
modules/contrib/healthcheck/src/Report/ReportInterface.php
modules/contrib/healthcheck/healthcheck.module
modules/contrib/healthcheck/tests/modules/healthcheck_config_test/src/Plugin/Healthcheck/ConfigurableCheck.php
modules/contrib/healthcheck/healthcheck.theme.inc
modules/contrib/healthcheck/tests/modules/healthcheck_findingsrv_test/src/Plugin/Healthcheck/AllYamlFindings.php
modules/contrib/healthcheck/src/Event/HealthcheckCronEvent.php
modules/contrib/healthcheck/src/Event/HealthcheckEventBase.php
modules/contrib/healthcheck/src/Event/HealthcheckEventInterface.php
modules/contrib/healthcheck/src/Event/HealthcheckEvents.php
modules/contrib/healthcheck/src/Event/HealthcheckRunEvent.php
modules/contrib/healthcheck/src/EventSubscriber/WatchdogCheckSubscriber.php
modules/contrib/healthcheck/healthcheck.tokens.inc
modules/contrib/healthcheck/modules/healthcheck_email/src/EventSubscriber/EmailCheckSubscriber.php
modules/contrib/healthcheck/src/Finding/Finding.php
modules/contrib/healthcheck/tests/modules/healthcheck_events_test/src/EventSubscriber/EventTestSubscriber.php
modules/contrib/healthcheck/tests/src/Functional/AdhocTest.php
modules/contrib/healthcheck/tests/modules/healthcheck_findings_test/src/Plugin/Healthcheck/AllFindings.php
modules/contrib/healthcheck/src/Finding/FindingInterface.php
modules/contrib/healthcheck/src/Finding/FindingStatus.php
modules/contrib/healthcheck/modules/healthcheck_historical/src/HistoricalServiceInterface.php
modules/contrib/healthcheck/modules/healthcheck_historical/src/Plugin/views/field/FindingStatusViewsField.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/DuplicateModules.php
modules/contrib/healthcheck/src/FindingService.php
modules/contrib/healthcheck/modules/healthcheck_email/tests/src/Functional/EmailSettingsFormTest.php
modules/contrib/healthcheck/modules/healthcheck_historical/src/Plugin/views/field/ReportFindingCountViewsField.php
modules/contrib/healthcheck/tests/src/Functional/CheckConfigTest.php
modules/contrib/healthcheck/src/FindingServiceInterface.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/EntityFields.php
modules/contrib/healthcheck/src/Form/CheckConfigForm.php
modules/contrib/healthcheck/modules/healthcheck_historical/tests/src/Functional/HistoricalSettingsFormTest.php
modules/contrib/healthcheck/tests/src/Functional/EventsTest.php
modules/contrib/healthcheck/modules/healthcheck_historical/healthcheck_historical.install
modules/contrib/healthcheck/src/Form/HealthcheckSettingsForm.php
modules/contrib/healthcheck/tests/src/Functional/SettingsFormTest.php
modules/contrib/healthcheck/modules/healthcheck_historical/healthcheck_historical.module
modules/contrib/healthcheck/src/Plugin/Healthcheck/Http404.php
modules/contrib/healthcheck/modules/healthcheck_webhooks/healthcheck_webhooks.module
modules/contrib/healthcheck/modules/healthcheck_historical/healthcheck_historical.views.inc
modules/contrib/healthcheck/modules/healthcheck_webhooks/src/EventSubscriber/ZapierEventSubscriber.php
modules/contrib/healthcheck/src/HealthcheckService.php
modules/contrib/healthcheck/modules/healthcheck_historical/src/EventSubscriber/HistoricalCheckSubscriber.php
modules/contrib/healthcheck/tests/src/Functional/StatusPageTest.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/Logging.php
modules/contrib/healthcheck/modules/healthcheck_webhooks/tests/src/Functional/WebhooksSettingsFormTest.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/ManagedFiles.php
modules/contrib/healthcheck/src/Annotation/Healthcheck.php
modules/contrib/healthcheck/tests/src/Kernel/FindingServiceTest.php
modules/contrib/healthcheck/src/CheckConfigHtmlRouteProvider.php
modules/contrib/healthcheck/src/CheckConfigService.php
modules/contrib/healthcheck/src/HealthcheckServiceInterface.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/BadModules.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/ModuleFolders.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/Pagecache.php
modules/contrib/healthcheck/src/CheckConfigServiceInterface.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/PhpErrors.php
modules/contrib/healthcheck/src/Controller/CheckConfigListBuilder.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/CacheBackend.php
modules/contrib/healthcheck/tests/src/Unit/FindingStatusTest.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/ContentTypes.php
modules/contrib/healthcheck/src/Controller/ReportController.php
modules/contrib/healthcheck/src/Entity/CheckConfig.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/PreProcessing.php
modules/contrib/healthcheck/src/Entity/CheckConfigInterface.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/ServicesFile.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/Cron.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/Superuser.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/Taxonomy.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/Updates.php
modules/contrib/healthcheck/src/Plugin/Healthcheck/UserRegistration.php
modules/contrib/healthcheck/src/Plugin/HealthcheckPluginBase.php
modules/contrib/healthcheck/src/Plugin/HealthcheckPluginInterface.php
modules/contrib/healthcheck/src/Plugin/HealthcheckPluginManager.php
modules/contrib/healthcheck/src/Plugin/QueueWorker/HealthcheckCronWorker.php
modules/contrib/healthcheck/src/Report/Report.php

21 files with changes
=====================

1) modules/contrib/healthcheck/tests/modules/healthcheck_events_test/src/EventSubscriber/EventTestSubscriber.php:6

    ---------- begin diff ----------
@@ @@
 use Drupal\healthcheck\Event\HealthcheckEvents;
 use Drupal\healthcheck\Event\HealthcheckRunEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\Core\State\StateInterface;

 class EventTestSubscriber implements EventSubscriberInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


2) modules/contrib/healthcheck/healthcheck.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Render\BubbleableMetadata;
+use Drupal\Core\Url;
 /**
  * @file
  * Provides tokens support for Healthcheck.
@@ @@
 /**
  * Implements hook_tokens().
  */
-function healthcheck_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
+function healthcheck_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
   $replacements = [];

   if ($type = 'healthcheck_report' && !empty($data['healthcheck_report'])) {
@@ @@
     foreach ($tokens as $name => $original) {
       switch ($name) {
         case 'adhoc_url':
-          $url = \Drupal\Core\Url::fromRoute('healthcheck.report_controller_runReport', [], ['absolute' => TRUE]);
+          $url = Url::fromRoute('healthcheck.report_controller_runReport', [], ['absolute' => TRUE]);
           $replacements[$original] = $url->toString();
           break;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/healthcheck/modules/healthcheck_historical/src/EventSubscriber/HistoricalCheckSubscriber.php:5

    ---------- begin diff ----------
@@ @@
 use Drupal\healthcheck\Event\HealthcheckEvents;
 use Drupal\healthcheck_historical\HistoricalServiceInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Records reports that were performed in the background to the database.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


4) modules/contrib/healthcheck/modules/healthcheck_historical/healthcheck_historical.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Form\FormStateInterface;
 /**
  * @file
  * Contains healthcheck_historical.module.
@@ @@
 /**
  * Implements hook_form_FORM_ID_alter().
  */
-function healthcheck_historical_form_healthcheck_settings_form_alter(&$form,  \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function healthcheck_historical_form_healthcheck_settings_form_alter(&$form,  FormStateInterface $form_state, $form_id) {
   $config = \Drupal::config('healthcheck_historical.settings');

   $form['history'] = [
@@ @@
 /**
  * Submit handler for Healthcheck settings form.
  */
-function healthcheck_historical_healthcheck_settings_form_submit($form, \Drupal\Core\Form\FormStateInterface $form_state) {
+function healthcheck_historical_healthcheck_settings_form_submit($form, FormStateInterface $form_state) {
   /** @var \Drupal\Core\Config\Config $config */
   $config = \Drupal::service('config.factory')->getEditable('healthcheck_historical.settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


5) modules/contrib/healthcheck/modules/healthcheck_historical/healthcheck_historical.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\Entity\ConfigEntityStorage;
 /**
  * Implements hook_schema().
  */
@@ @@
       'finding_key' => [
         'description' => '',
         'type' => 'varchar_ascii',
-        'length' => \Drupal\Core\Config\Entity\ConfigEntityStorage::MAX_ID_LENGTH,
+        'length' => ConfigEntityStorage::MAX_ID_LENGTH,
       ],
       'status' => [
         'description' => '',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


6) modules/contrib/healthcheck/modules/healthcheck_email/tests/src/Functional/EmailSettingsFormTest.php:31

    ---------- begin diff ----------
@@ @@
     'healthcheck_email',
   ];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Get the settings form path.
@@ @@
       'email_critical_subject' => 'Test Critical!',
       'email_critical_body' => 'Bad stuff happened.',
     ];
-    $this->drupalPostForm($this->settings_form_path, $edit, 'Save configuration');
+    $this->drupalGet($this->settings_form_path);
+    $this->submitForm($edit, 'Save configuration');

     // Reload the page.
     $this->drupalGet($this->settings_form_path);
@@ @@
       'email_cron_subject' => 'Test cron!',
       'email_cron_body' => 'Stuff happened.',
     ];
-    $this->drupalPostForm($this->settings_form_path, $edit, 'Save configuration');
+    $this->drupalGet($this->settings_form_path);
+    $this->submitForm($edit, 'Save configuration');

     // Reload the page.
     $this->drupalGet($this->settings_form_path);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/healthcheck/modules/healthcheck_email/src/EventSubscriber/EmailCheckSubscriber.php:6

    ---------- begin diff ----------
@@ @@
 use Drupal\healthcheck\Event\HealthcheckCronEvent;
 use Drupal\healthcheck\Event\HealthcheckEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\Core\Utility\Token;
 use Drupal\Core\Language\LanguageInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


8) modules/contrib/healthcheck/modules/healthcheck_email/healthcheck_email.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Form\FormStateInterface;
 /**
  * @file
  * Contains healthcheck_email.module.
@@ @@
 /**
  * Implements hook_form_FORM_ID_alter().
  */
-function healthcheck_email_form_healthcheck_settings_form_alter(&$form,  \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function healthcheck_email_form_healthcheck_settings_form_alter(&$form,  FormStateInterface $form_state, $form_id) {
   // Get the site's default email address.
   $site_email = \Drupal::config('system.site')->get('mail');

@@ @@
 /**
  * Submit handler for Healthcheck settings form.
  */
-function healthcheck_email_healthcheck_settings_form_submit($form, \Drupal\Core\Form\FormStateInterface $form_state) {
+function healthcheck_email_healthcheck_settings_form_submit($form, FormStateInterface $form_state) {
   /** @var \Drupal\Core\Config\Config $config */
   $config = \Drupal::service('config.factory')->getEditable('healthcheck_email.settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/healthcheck/tests/src/Unit/FindingStatusTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     // Nothing to do here.
     parent::setUp();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/healthcheck/tests/src/Kernel/FindingServiceTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('checkconfig');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/healthcheck/tests/src/Functional/StatusPageTest.php:46

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Get the status page path.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/healthcheck/tests/src/Functional/SettingsFormTest.php:41

    ---------- begin diff ----------
@@ @@
     'healthcheck_findings_test',
   ];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Get the settings form path.
@@ @@
     $edit = [
       'categories[testing]' => TRUE,
     ];
-    $this->drupalPostForm($this->settings_form_path, $edit, 'Save configuration');
+    $this->drupalGet($this->settings_form_path);
+    $this->submitForm($edit, 'Save configuration');

     // Reload the page.
     $this->drupalGet($this->settings_form_path);
@@ @@
     $edit = [
       'run_every' => 1,
     ];
-    $this->drupalPostForm($this->settings_form_path, $edit, 'Save configuration');
+    $this->drupalGet($this->settings_form_path);
+    $this->submitForm($edit, 'Save configuration');

     // Reload the page.
     $this->drupalGet($this->settings_form_path);
@@ @@
         'all_findings'
       ],
     ];
-    $this->drupalPostForm($this->settings_form_path, $edit, 'Save configuration');
+    $this->drupalGet($this->settings_form_path);
+    $this->submitForm($edit, 'Save configuration');

     // Reload the page.
     $this->drupalGet($this->settings_form_path);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/healthcheck/tests/src/Functional/EventsTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Configure Healthcheck to:
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/healthcheck/tests/src/Functional/CheckConfigTest.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Get the settings form path.
@@ @@
     $edit = [
       'status' => '15',
     ];
-    $this->drupalPostForm($check_form_path, $edit, 'Save');
+    $this->drupalGet($check_form_path);
+    $this->submitForm($edit, 'Save');

     // Go back to the check config form
     $this->drupalGet($check_form_path);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/healthcheck/tests/src/Functional/AdhocTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Set the Healthcheck to only check the 'testing' category.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/healthcheck/modules/healthcheck_webhooks/tests/src/Functional/WebhooksSettingsFormTest.php:31

    ---------- begin diff ----------
@@ @@
     'healthcheck_webhooks',
   ];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Get the settings form path.
@@ @@
     $edit = [
       'zapier' => 'http://example.com',
     ];
-    $this->drupalPostForm($this->settings_form_path, $edit, 'Save configuration');
+    $this->drupalGet($this->settings_form_path);
+    $this->submitForm($edit, 'Save configuration');

     // Reload the page.
     $this->drupalGet($this->settings_form_path);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/healthcheck/modules/healthcheck_historical/tests/src/Functional/HistoricalSettingsFormTest.php:32

    ---------- begin diff ----------
@@ @@
     'healthcheck_historical',
   ];

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Get the settings form path.
@@ @@
     $edit = [
       'keep_reports_for' => -1,
     ];
-    $this->drupalPostForm($this->settings_form_path, $edit, 'Save configuration');
+    $this->drupalGet($this->settings_form_path);
+    $this->submitForm($edit, 'Save configuration');

     // Reload the page.
     $this->drupalGet($this->settings_form_path);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/healthcheck/src/HealthcheckService.php:122

    ---------- begin diff ----------
@@ @@
       $report->addFindings($findings);
     }

-    $this->event_dispatcher->dispatch(HealthcheckEvents::CHECK_RUN, new HealthcheckRunEvent($report));
+    $this->event_dispatcher->dispatch(new HealthcheckRunEvent($report), HealthcheckEvents::CHECK_RUN);

     if ($report->getHighestStatus() == FindingStatus::CRITICAL) {
-      $this->event_dispatcher->dispatch(HealthcheckEvents::CHECK_CRITICAL, new HealthcheckCriticalEvent($report));
+      $this->event_dispatcher->dispatch(new HealthcheckCriticalEvent($report), HealthcheckEvents::CHECK_CRITICAL);
     }

     return $report;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


19) modules/contrib/healthcheck/src/EventSubscriber/WatchdogCheckSubscriber.php:8

    ---------- begin diff ----------
@@ @@
 use Drupal\healthcheck\Event\HealthcheckRunEvent;
 use Drupal\healthcheck\Finding\FindingStatus;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * A simple check subscriber to record when a check was run to the Drupal log.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


20) modules/contrib/healthcheck/src/Event/HealthcheckEventBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\healthcheck\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\healthcheck\Report\ReportInterface;
-use Symfony\Component\EventDispatcher\Event;

 class HealthcheckEventBase extends Event implements HealthcheckEventInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/healthcheck/src/Plugin/QueueWorker/HealthcheckCronWorker.php:68

    ---------- begin diff ----------
@@ @@
     $event = new HealthcheckCronEvent($report);

     // Dispatch it.
-    $this->event_dispatcher->dispatch(HealthcheckEvents::CHECK_CRON, $event);
+    $this->event_dispatcher->dispatch($event, HealthcheckEvents::CHECK_CRON);
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 21 files have been changed by Rector                                      

