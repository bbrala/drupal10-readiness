modules/contrib/ds/drush/ExampleField.php
modules/contrib/ds/ds.module
modules/contrib/ds/modules/ds_extras/src/Controller/DsExtrasController.php
modules/contrib/ds/src/Form/ChangeLayoutForm.php
modules/contrib/ds/src/Plugin/DsField/Book/BookNavigation.php
modules/contrib/ds/src/Plugin/DsField/Node/NodeAuthor.php
modules/contrib/ds/src/Plugin/DsFieldTemplate/Minimal.php
modules/contrib/ds/drush/ds.drush.inc
modules/contrib/ds/tests/modules/ds_test/ds_test.module
modules/contrib/ds/src/Plugin/DsFieldTemplate/Reset.php
modules/contrib/ds/tests/modules/ds_test/src/Plugin/DsField/TestField.php
modules/contrib/ds/drush/example_layout/example_layout.inc
modules/contrib/ds/ds.api.php
modules/contrib/ds/src/Plugin/DsField/Node/NodeChangedDate.php
modules/contrib/ds/src/Plugin/DsField/Node/NodeLink.php
modules/contrib/ds/src/Plugin/DsField/Node/NodeLinks.php
modules/contrib/ds/src/Plugin/DsField/BundleField.php
modules/contrib/ds/src/Plugin/DsField/Node/NodePostDate.php
modules/contrib/ds/src/Plugin/DsField/Node/NodeSubmittedBy.php
modules/contrib/ds/tests/src/Functional/BlockFieldPluginTest.php
modules/contrib/ds/tests/src/Functional/RdfTest.php
modules/contrib/ds/src/Plugin/DsField/Comment/CommentAuthor.php
modules/contrib/ds/src/Plugin/DsField/Comment/CommentChangedDate.php
modules/contrib/ds/src/Plugin/DsField/Comment/CommentPostDate.php
modules/contrib/ds/src/Plugin/DsField/Comment/CommentTitle.php
modules/contrib/ds/src/Plugin/DsField/Comment/CommentUser.php
modules/contrib/ds/src/Plugin/DsField/Node/NodeTitle.php
modules/contrib/ds/tests/modules/ds_test/src/Plugin/DsField/TestField2.php
modules/contrib/ds/tests/modules/ds_test/src/Plugin/DsField/TestFieldEmptyString.php
modules/contrib/ds/tests/modules/ds_test/src/Plugin/DsField/TestFieldFalse.php
modules/contrib/ds/ds.install
modules/contrib/ds/tests/modules/ds_test/src/Plugin/DsField/TestFieldNothing.php
modules/contrib/ds/tests/modules/ds_test/src/Plugin/DsField/TestFieldNull.php
modules/contrib/ds/tests/modules/ds_test/src/Plugin/DsField/TestFieldZeroFloat.php
modules/contrib/ds/src/Plugin/DsFieldTemplatePluginManager.php
modules/contrib/ds/tests/modules/ds_test/src/Plugin/DsField/TestFieldZeroInt.php
modules/contrib/ds/tests/modules/ds_test/src/Plugin/DsField/TestFieldZeroString.php
modules/contrib/ds/tests/modules/ds_test/src/Plugin/DsField/TestMultipleEntityTypeField.php
modules/contrib/ds/src/Plugin/DsField/Taxonomy/TaxonomyTermLink.php
modules/contrib/ds/tests/modules/ds_test/src/Plugin/DsField/TestMultipleField.php
modules/contrib/ds/src/Plugin/DsField/Taxonomy/TaxonomyTermTitle.php
modules/contrib/ds/src/Plugin/DsField/ThemePluginBase.php
modules/contrib/ds/tests/modules/ds_test/src/Plugin/DsFieldTemplate/TestLayout.php
modules/contrib/ds/src/Plugin/DsLayout.php
modules/contrib/ds/src/Plugin/DsField/Comment/CommentUserSignature.php
modules/contrib/ds/src/Plugin/DsField/Title.php
modules/contrib/ds/tests/modules/ds_test/src/Plugin/Block/DsCacheTestBlock.php
modules/contrib/ds/src/Plugin/DsField/TokenBase.php
modules/contrib/ds/modules/ds_extras/src/EventSubscriber/RouteSubscriber.php
modules/contrib/ds/src/Plugin/DsField/Date.php
modules/contrib/ds/modules/ds_extras/src/ExtrasPermissions.php
modules/contrib/ds/src/Plugin/DsField/User/User.php
modules/contrib/ds/tests/modules/ds_test/src/Plugin/Block/DsTestBlock.php
modules/contrib/ds/src/Plugin/DsField/User/UserMail.php
modules/contrib/ds/modules/ds_extras/src/Plugin/Block/DsRegionBlock.php
modules/contrib/ds/src/Plugin/DsField/User/UserSignature.php
modules/contrib/ds/tests/modules/ds_test/src/Plugin/DsField/TestCachingField.php
modules/contrib/ds/src/Plugin/DsField/User/Username.php
modules/contrib/ds/src/Form/ClassesForm.php
modules/contrib/ds/src/Plugin/DsFieldTemplate/DefaultField.php
modules/contrib/ds/src/Plugin/DsFieldTemplate/DsFieldTemplateBase.php
modules/contrib/ds/src/Plugin/DsField/DsFieldBase.php
modules/contrib/ds/src/Plugin/DsPluginManager.php
modules/contrib/ds/src/Plugin/views/Entity/Render/ConfigurableLanguageRenderer.php
modules/contrib/ds/modules/ds_extras/src/Plugin/Derivative/DsRegionBlock.php
modules/contrib/ds/src/Plugin/views/Entity/Render/CurrentLanguageRenderer.php
modules/contrib/ds/src/Plugin/views/Entity/Render/DefaultLanguageRenderer.php
modules/contrib/ds/src/Form/CopyFieldForm.php
modules/contrib/ds/src/Plugin/DsFieldTemplate/DsFieldTemplateInterface.php
modules/contrib/ds/modules/ds_extras/src/Plugin/DsField/SwitchField.php
modules/contrib/ds/src/Plugin/DsFieldTemplate/Expert.php
modules/contrib/ds/tests/src/Functional/TestBase.php
modules/contrib/ds/src/Plugin/views/Entity/Render/RendererBase.php
modules/contrib/ds/src/Form/EmergencyForm.php
modules/contrib/ds/src/Plugin/DsField/DsFieldInterface.php
modules/contrib/ds/src/Plugin/DsField/DynamicBlockField.php
modules/contrib/ds/tests/src/Functional/BlockTest.php
modules/contrib/ds/src/Plugin/DsField/DynamicCopyField.php
modules/contrib/ds/src/Form/FieldDeleteForm.php
modules/contrib/ds/src/Plugin/DsField/DynamicTokenField.php
modules/contrib/ds/src/Plugin/DsField/DynamicTwigField.php
modules/contrib/ds/src/Plugin/DsField/Entity.php
modules/contrib/ds/src/Form/FieldFormBase.php
modules/contrib/ds/tests/src/Functional/TwigRenderTest.php
modules/contrib/ds/src/Plugin/DsField/Field.php
modules/contrib/ds/modules/ds_switch_view_mode/ds_switch_view_mode.module
modules/contrib/ds/tests/src/Functional/CacheTagsTest.php
modules/contrib/ds/tests/src/Functional/UserTest.php
modules/contrib/ds/tests/src/Functional/ViewsTest.php
modules/contrib/ds/src/Plugin/DsField/Link.php
modules/contrib/ds/src/Form/SettingsForm.php
modules/contrib/ds/tests/src/Functional/CloneTest.php
modules/contrib/ds/src/Plugin/DsField/Markup.php
modules/contrib/ds/tests/src/Functional/CommentTest.php
modules/contrib/ds/src/Plugin/DsField/Media/MediaName.php
modules/contrib/ds/src/Form/TokenFieldForm.php
modules/contrib/ds/src/Form/TwigFieldForm.php
modules/contrib/ds/src/Plugin/Derivative/BundleField.php
modules/contrib/ds/src/Plugin/Derivative/DsEntityRow.php
modules/contrib/ds/src/Plugin/Derivative/DsLocalTask.php
modules/contrib/ds/tests/src/Functional/DsFieldCacheTest.php
modules/contrib/ds/src/Plugin/Derivative/DynamicBlockField.php
modules/contrib/ds/src/Plugin/Derivative/DynamicCopyField.php
modules/contrib/ds/tests/src/FunctionalJavascript/JavascriptTest.php
modules/contrib/ds/src/Plugin/Derivative/DynamicField.php
modules/contrib/ds/modules/ds_switch_view_mode/src/Permissions.php
modules/contrib/ds/src/Annotation/DsField.php
modules/contrib/ds/tests/src/Functional/DsTestTrait.php
modules/contrib/ds/src/Annotation/DsFieldTemplate.php
modules/contrib/ds/src/Controller/DsController.php
modules/contrib/ds/tests/src/Unit/DsServiceTest.php
modules/contrib/ds/src/Plugin/views/Entity/Render/TranslationLanguageRenderer.php
modules/contrib/ds/src/Plugin/Derivative/DynamicTokenField.php
modules/contrib/ds/src/Plugin/Derivative/DynamicTwigField.php
modules/contrib/ds/src/Plugin/DsField/Block/BlockDescription.php
modules/contrib/ds/includes/field_ui.inc
modules/contrib/ds/src/Plugin/views/row/EntityRow.php
modules/contrib/ds/src/Plugin/DsField/Block/BlockTitle.php
modules/contrib/ds/src/Plugin/DsField/BlockBase.php
modules/contrib/ds/src/Controller/FieldController.php
modules/contrib/ds/tests/src/Functional/DynamicFieldPluginTest.php
modules/contrib/ds/src/Ds.php
modules/contrib/ds/src/Routing/RouteSubscriber.php
modules/contrib/ds/src/DsAttribute.php
modules/contrib/ds/tests/src/Functional/EntitiesTest.php
modules/contrib/ds/src/Form/BlockFieldConfigForm.php
modules/contrib/ds/src/Form/BlockFieldForm.php
modules/contrib/ds/tests/src/Functional/ExportablesTest.php
modules/contrib/ds/tests/src/Functional/FieldGroupTest.php
modules/contrib/ds/tests/src/Functional/FieldPermissionsTest.php
modules/contrib/ds/tests/src/Functional/FieldPluginTest.php
modules/contrib/ds/tests/src/Functional/FieldTemplateLayoutBuilderTest.php
modules/contrib/ds/tests/src/Functional/FieldTemplateTest.php
modules/contrib/ds/modules/ds_devel/ds_devel.module
modules/contrib/ds/modules/ds_devel/src/Controller/DsDevelController.php
modules/contrib/ds/tests/src/Functional/HiddenRegionTest.php
modules/contrib/ds/tests/src/Functional/LayoutClassesTest.php
modules/contrib/ds/modules/ds_devel/src/Plugin/Derivative/DsDevelLocalTask.php
modules/contrib/ds/modules/ds_devel/src/Routing/RouteSubscriber.php
modules/contrib/ds/modules/ds_extras/ds_extras.install
modules/contrib/ds/modules/ds_extras/ds_extras.module
modules/contrib/ds/tests/src/Functional/LayoutFluidTest.php
modules/contrib/ds/tests/src/Functional/LayoutPluginTest.php
modules/contrib/ds/tests/src/Functional/ManageDisplayTabTest.php

22 files with changes
=====================

1) modules/contrib/ds/tests/src/FunctionalJavascript/JavascriptTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a test user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ds/tests/src/Functional/ViewsTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Ensure that the plugin definitions are cleared.
@@ @@
       'created' => \Drupal::time()->getRequestTime(),
     ];
     $node_1 = $this->drupalCreateNode($settings_1);
-    $this->drupalPostForm('node/' . $node_1->id() . '/edit', $edit_tag_1, t('Save'));
+    $this->drupalGet('node/' . $node_1->id() . '/edit');
+    $this->submitForm($edit_tag_1, t('Save'));
     $settings_2 = [
       'type' => 'article',
       'title' => 'Article 2',
@@ @@
       'created' => \Drupal::time()->getRequestTime() + 3600,
     ];
     $node_2 = $this->drupalCreateNode($settings_2);
-    $this->drupalPostForm('node/' . $node_2->id() . '/edit', $edit_tag_1, t('Save'));
+    $this->drupalGet('node/' . $node_2->id() . '/edit');
+    $this->submitForm($edit_tag_1, t('Save'));
     $settings_3 = [
       'type' => 'article',
       'title' => 'Article 3',
@@ @@
       'created' => \Drupal::time()->getRequestTime() + 7200,
     ];
     $node_3 = $this->drupalCreateNode($settings_3);
-    $this->drupalPostForm('node/' . $node_3->id() . '/edit', $edit_tag_2, t('Save'));
+    $this->drupalGet('node/' . $node_3->id() . '/edit');
+    $this->submitForm($edit_tag_2, t('Save'));

     // Configure teaser and full layout.
     $layout = [
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ds/tests/src/Functional/TwigRenderTest.php:44

    ---------- begin diff ----------
@@ @@
     $edit = [
       'fs3[use_field_names]' => FALSE,
     ];
-    $this->drupalPostForm('admin/structure/ds/settings', $edit, 'Save configuration');
+    $this->drupalGet('admin/structure/ds/settings');
+    $this->submitForm($edit, 'Save configuration');

     $this->drupalGet('node/' . $node->id());
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ds/tests/src/Functional/TestBase.php:82

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('system_breadcrumb_block');
     $this->drupalPlaceBlock('local_tasks_block');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ds/src/Form/ChangeLayoutForm.php:161

    ---------- begin diff ----------
@@ @@
         '#suffix' => '</div>',
       ];

-      $fallback_image = drupal_get_path('module', 'ds') . '/images/preview.png';
+      $fallback_image = \Drupal::service('extension.list.module')->getPath('ds') . '/images/preview.png';
       $old_image = $old_layout_info->getIconPath() ?: $fallback_image;
       $new_image = $new_layout->getIconPath() ?: $fallback_image;
-      $arrow = drupal_get_path('module', 'ds') . '/images/arrow.png';
+      $arrow = \Drupal::service('extension.list.module')->getPath('ds') . '/images/arrow.png';

       $form['preview']['old_layout'] = [
         '#markup' => '<div class="ds-layout-preview-image"><img src="' . base_path() . $old_image . '"/></div>',
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/ds/modules/ds_switch_view_mode/ds_switch_view_mode.module:120

    ---------- begin diff ----------
@@ @@
       $layout_settings = $chosen_layout->getThirdPartySettings('ds');

       $ds_layouts = Ds::getLayouts();
-      $fallback_image = drupal_get_path('module', 'ds') . '/images/preview.png';
+      $fallback_image = \Drupal::service('extension.list.module')->getPath('ds') . '/images/preview.png';

       if (isset($layout_settings['layout'])) {
         /** @var \Drupal\Core\Layout\LayoutDefinition $chosen_layout */
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


7) modules/contrib/ds/includes/field_ui.inc:986

    ---------- begin diff ----------
@@ @@
     }

     if ($form_state->hasValue('ds_layout') || (!empty($layout) && isset($layout['regions'])) && (!empty($chosen_layout))) {
-      $fallback_image = drupal_get_path('module', 'ds') . '/images/preview.png';
+      $fallback_image = \Drupal::service('extension.list.module')->getPath('ds') . '/images/preview.png';
       $current_layout = $form_state->hasValue('ds_layout') && (!isset($layout->layout) || $form_state->getValue('ds_layout') != $layout->layout) ? t('Current layout (after save)') : t('Current layout');
       $image = $chosen_layout->getIconPath();
       if (empty($image)) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


8) modules/contrib/ds/ds.module:57

    ---------- begin diff ----------
@@ @@
           'render element' => 'elements',
           'template' => strtr($plugin['theme'], '_', '-'),
           'base hook' => 'field',
-          'path' => drupal_get_path('module', $plugin['provider']) . '/templates',
+          'path' => \Drupal::service('extension.list.module')->getPath($plugin['provider']) . '/templates',
         ];

         if (!empty($plugin['path'])) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


9) modules/contrib/ds/tests/src/Functional/LayoutClassesTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setup() {
+  protected function setup(): void {
     parent::setup();

     // Set extra fields.
@@ @@

     // Remove all the node classes.
     $edit = ['entity_classes' => 'no_classes'];
-    $this->drupalPostForm('admin/structure/types/manage/article/display', $edit, t('Save'));
+    $this->drupalGet('admin/structure/types/manage/article/display');
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet('node/' . $node->id());

     // Assert that there are no entity classes.
@@ @@

     // Only show view mode (deprecated).
     $edit = ['entity_classes' => 'old_view_mode'];
-    $this->drupalPostForm('admin/structure/types/manage/article/display', $edit, t('Save'));
+    $this->drupalGet('admin/structure/types/manage/article/display');
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet('node/' . $node->id());

     // Assert that the old view mode class name is added (deprecated).
@@ @@

     // Let's create a block field, enable the full mode first.
     $edit = ['display_modes_custom[full]' => '1'];
-    $this->drupalPostForm('admin/structure/types/manage/article/display', $edit, t('Save'));
+    $this->drupalGet('admin/structure/types/manage/article/display');
+    $this->submitForm($edit, t('Save'));

     // Select layout.
     $layout = [
@@ @@
       'new_block_region' => 'Block region',
       'new_block_region_key' => 'block_region',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/display/full', $edit, t('Save'));
+    $this->drupalGet('admin/structure/types/manage/article/display/full');
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->responseContains('<td colspan="9">' . t('Block region') . '</td>');

     // Configure fields.
@@ @@
       'ds_right' => 'footer',
       'ds_block_region' => 'footer',
     ];
-    $this->drupalPostForm('admin/structure/ds/change-layout/node/article/full/ds_2col_stacked', $edit, t('Save'));
+    $this->drupalGet('admin/structure/ds/change-layout/node/article/full/ds_2col_stacked');
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet('admin/structure/types/manage/article/display/full');

     // Verify new regions.
@@ @@
       'ds_layout' => '_none',
       'display_modes_custom[full]' => FALSE,
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/display', $edit, 'Save');
+    $this->drupalGet('admin/structure/types/manage/article/display');
+    $this->submitForm($edit, 'Save');

     $elements = $this->xpath('//*[@id="edit-fields-body-region"]');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/ds/tests/src/Functional/HiddenRegionTest.php:16

    ---------- begin diff ----------
@@ @@
     $edit = [
       'fs3[hidden_region]' => TRUE,
     ];
-    $this->drupalPostForm('admin/structure/ds/settings', $edit, t('Save configuration'));
+    $this->drupalGet('admin/structure/ds/settings');
+    $this->submitForm($edit, t('Save configuration'));

     $this->dsSelectLayout();
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/ds/tests/src/Functional/FieldTemplateTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setup() {
+  protected function setup(): void {
     parent::setup();

     // Enable field templates.
@@ @@
     $edit = [
       'fs1[ft-default]' => 'reset',
     ];
-    $this->drupalPostForm('admin/structure/ds/settings', $edit, t('Save configuration'));
+    $this->drupalGet('admin/structure/ds/settings');
+    $this->submitForm($edit, t('Save configuration'));

     // As long as we don't change anything in the UI, the default template will
     // be used.
@@ @@
     $edit = [
       'fs1[ft-show-colon]' => 'reset',
     ];
-    $this->drupalPostForm('admin/structure/ds/settings', $edit, t('Save configuration'));
+    $this->drupalGet('admin/structure/ds/settings');
+    $this->submitForm($edit, t('Save configuration'));
     // Clear node cache to get the colon.
     $tags = $node->getCacheTags();
     Cache::invalidateTags($tags);
@@ @@
       'field_tags[0][target_id]' => 'Tag 1',
       'field_tags[1][target_id]' => 'Tag 2',
     ];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');

     // Count the found tags.
     $this->drupalGet('node/' . $node->id());
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/ds/tests/src/Functional/FieldTemplateLayoutBuilderTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setup() {
+  protected function setup(): void {
     parent::setup();

     // Enable field templates.
@@ @@

     // From the manage display page, go to manage the layout.
     $this->drupalGet("$field_ui_prefix/display/default");
-    $this->drupalPostForm(NULL, ['layout[enabled]' => TRUE], 'Save');
+    $this->submitForm(['layout[enabled]' => TRUE], 'Save');
     $this->clickLink('Manage layout');

     // Add the title field_block.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/ds/tests/src/Functional/FieldPluginTest.php:16

    ---------- begin diff ----------
@@ @@
     $edit = [
       'title_label' => 'alternative article title',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article', $edit, t('Save content type'));
+    $this->drupalGet('admin/structure/types/manage/article');
+    $this->submitForm($edit, t('Save content type'));

     $this->dsSelectLayout();
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


14) modules/contrib/ds/tests/src/Functional/FieldPermissionsTest.php:53

    ---------- begin diff ----------
@@ @@
       'authenticated[view node_author on node]' => 1,
       'authenticated[view test_field on node]' => 1,
     ];
-    $this->drupalPostForm('admin/people/permissions', $edit,'Save permissions');
+    $this->drupalGet('admin/people/permissions');
+    $this->submitForm($edit, 'Save permissions');
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->responseContains('group-left');
     $this->assertSession()->pageTextContains('Test field plugin on node ' . $node->id());
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/ds/tests/src/Functional/EntitiesTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setup() {
+  protected function setup(): void {
     parent::setup();

     // Enable field templates.
@@ @@

     // Switch view mode on full node page.
     $edit = ['ds_switch' => 'teaser'];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit,'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->responseContains('node--view-mode-teaser', 'Switched to teaser mode');
     $this->assertSession()->responseContains('group-left');
     $this->assertSession()->responseContains('group-right');
@@ @@
     $this->assertSession()->responseNotContains('group-footer');

     $edit = ['ds_switch' => ''];
-    $this->drupalPostForm('node/' . $node->id() . '/edit', $edit,'Save');
+    $this->drupalGet('node/' . $node->id() . '/edit');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->responseContains('node--view-mode-full');

     // Test all options of a block field.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/ds/tests/src/Functional/DynamicFieldPluginTest.php:21

    ---------- begin diff ----------
@@ @@
     ];

     $this->dsCreateTokenField($edit);
+    $this->drupalGet('admin/structure/ds/fields/manage_token');

     // Create the same and assert it already exists.
-    $this->drupalPostForm('admin/structure/ds/fields/manage_token', $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The machine-readable name is already in use. It must be unique.');

     $this->dsSelectLayout();
@@ @@
     $edit = [
       'name' => 'Test field 2',
     ];
-    $this->drupalPostForm('admin/structure/ds/fields/manage_token/test_field', $edit,'Save');
+    $this->drupalGet('admin/structure/ds/fields/manage_token/test_field');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The field Test field 2 has been saved');

     // Use the Field UI limit option.
@@ @@
     $edit = [
       'ui_limit' => 'article|default',
     ];
-    $this->drupalPostForm('admin/structure/ds/fields/manage_token/test_field', $edit,'Save');
+    $this->drupalGet('admin/structure/ds/fields/manage_token/test_field');
+    $this->submitForm($edit, 'Save');

     $this->drupalGet('admin/structure/types/manage/article/display');
     $this->assertSession()->responseContains('fields[dynamic_token_field:node-test_field][weight]');
@@ @@
     $edit = [
       'ui_limit' => 'article|*',
     ];
-    $this->drupalPostForm('admin/structure/ds/fields/manage_token/test_field', $edit,'Save');
+    $this->drupalGet('admin/structure/ds/fields/manage_token/test_field');
+    $this->submitForm($edit, 'Save');
     $this->drupalGet('admin/structure/types/manage/article/display');
     $this->assertSession()->responseContains('fields[dynamic_token_field:node-test_field][weight]');
     $this->drupalGet('admin/structure/types/manage/article/display/teaser');
     $this->assertSession()->responseContains('fields[dynamic_token_field:node-test_field][weight]');
+    $this->drupalGet('admin/structure/ds/fields/delete/test_field');

     // Remove the field.
-    $this->drupalPostForm('admin/structure/ds/fields/delete/test_field', [],'Confirm');
+    $this->submitForm([], 'Confirm');
     $this->assertSession()->pageTextContains('The field Test field 2 has been deleted');

     // Assert the field is gone at the manage display screen.
@@ @@
     ];

     $this->dsCreateBlockField($edit);
+    $this->drupalGet('admin/structure/ds/fields/manage_block');

     // Create the same and assert it already exists.
-    $this->drupalPostForm('admin/structure/ds/fields/manage_block', $edit,'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The machine-readable name is already in use. It must be unique.');

     $this->dsSelectLayout();
@@ @@
     $edit = [
       'name' => 'Test block field 2',
     ];
-    $this->drupalPostForm('admin/structure/ds/fields/manage_block/test_block_field', $edit,'Save');
+    $this->drupalGet('admin/structure/ds/fields/manage_block/test_block_field');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('The field Test block field 2 has been saved');
+    $this->drupalGet('admin/structure/ds/fields/delete/test_block_field');

     // Remove the block field.
-    $this->drupalPostForm('admin/structure/ds/fields/delete/test_block_field', [],'Confirm');
+    $this->submitForm([], 'Confirm');
     $this->assertSession()->pageTextContains('The field Test block field 2 has been deleted');

     // Assert the block field is gone at the manage display screen.
@@ @@
     $edit = [
       'depth' => '3',
     ];
-    $this->drupalPostForm('admin/structure/ds/fields/manage_block/test_block_configurable/block_config', $edit,'Save');
+    $this->drupalGet('admin/structure/ds/fields/manage_block/test_block_configurable/block_config');
+    $this->submitForm($edit, 'Save');

     // Assert it's found on the Field UI for article.
     $this->drupalGet('admin/structure/types/manage/article/display');
@@ @@
     $edit = [
       'level' => '2',
     ];
-    $this->drupalPostForm('admin/structure/ds/fields/manage_block/test_block_configurable/block_config', $edit,'Save');
+    $this->drupalGet('admin/structure/ds/fields/manage_block/test_block_configurable/block_config');
+    $this->submitForm($edit, 'Save');

     // Look at node and verify the menu is not visible.
     $this->drupalGet('node/' . $node->id());
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


17) modules/contrib/ds/tests/src/Functional/DsTestTrait.php:13

    ---------- begin diff ----------
@@ @@
     $edit += [
       'ds_layout' => 'ds_2col_stacked',
     ];
+    $this->drupalGet($url, $options);

-    $this->drupalPostForm($url, $edit, t('Save'), $options);
+    $this->submitForm($edit, t('Save'));

     $assert += [
       'regions' => [
@@ @@
     $edit += [
       'regions' => "class_name_1\nclass_name_2|Friendly name",
     ];
+    $this->drupalGet('admin/structure/ds/classes');

-    $this->drupalPostForm('admin/structure/ds/classes', $edit, t('Save configuration'));
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->assertSession()->responseContains('class_name_1', 'Class name 1 found');
     $this->assertSession()->responseContains('class_name_2', 'Class name 1 found');
@@ @@
       "layout_configuration[ds_classes][header][]" => 'class_name_1',
       "layout_configuration[ds_classes][footer][]" => 'class_name_2',
     ];
+    $this->drupalGet($url);

-    $this->drupalPostForm($url, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
   }

   /**
@@ @@
    * Configure Field UI.
    */
   public function dsConfigureUi($edit, $url = 'admin/structure/types/manage/article/display') {
-    $this->drupalPostForm($url, $edit,'Save');
+    $this->drupalGet($url);
+    $this->submitForm($edit, 'Save');
   }

   /**
@@ @@
    */
   public function dsEditFormatterSettings($edit, $field_name = 'body', $url = 'admin/structure/types/manage/article/display') {
     $element_value = 'edit ' . $field_name;
-    $this->drupalPostForm($url, [], $element_value);
+    $this->drupalGet($url);
+    $this->submitForm([], $element_value);

     if (isset($edit['fields[' . $field_name . '][settings_edit_form][third_party_settings][ds][ft][id]'])) {
-      $this->drupalPostForm(NULL, ['fields[' . $field_name . '][settings_edit_form][third_party_settings][ds][ft][id]' => $edit['fields[' . $field_name . '][settings_edit_form][third_party_settings][ds][ft][id]']], t('Update'));
-      $this->drupalPostForm(NULL, [], $element_value);
+      $this->submitForm(['fields[' . $field_name . '][settings_edit_form][third_party_settings][ds][ft][id]' => $edit['fields[' . $field_name . '][settings_edit_form][third_party_settings][ds][ft][id]']], t('Update'));
+      $this->submitForm([], $element_value);
       unset($edit['fields[' . $field_name . '][settings_edit_form][third_party_settings][ds][ft][id]']);
     }

-    $this->drupalPostForm(NULL, $edit, t('Update'));
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm($edit, t('Update'));
+    $this->submitForm([], t('Save'));
   }

   /**
@@ @@
    */
   public function dsEditLimitSettings($edit, $field_name = 'body', $url = 'admin/structure/types/manage/article/display') {
     $element_value = 'edit ' . $field_name;
-    $this->drupalPostForm($url, [], $element_value);
+    $this->drupalGet($url);
+    $this->submitForm([], $element_value);

     if (isset($edit['fields[' . $field_name . '][settings_edit_form][third_party_settings][ds][ft][id]'])) {
-      $this->drupalPostForm(NULL, ['fields[' . $field_name . '][settings_edit_form][third_party_settings][ds][ds_limit]' => $edit['fields[' . $field_name . '][settings_edit_form][third_party_settings][ds][ds_limit]']], t('Update'));
-      $this->drupalPostForm(NULL, [], $element_value);
+      $this->submitForm(['fields[' . $field_name . '][settings_edit_form][third_party_settings][ds][ds_limit]' => $edit['fields[' . $field_name . '][settings_edit_form][third_party_settings][ds][ds_limit]']], t('Update'));
+      $this->submitForm([], $element_value);
       unset($edit['fields[' . $field_name . '][settings_edit_form][third_party_settings][ds][ds_limit]']);
     }

-    $this->drupalPostForm(NULL, $edit, t('Update'));
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm($edit, t('Update'));
+    $this->submitForm([], t('Save'));
   }

   /**
@@ @@
       'entities[node]' => '1',
       'content[value]' => 'Test field',
     ];
+    $this->drupalGet($url);

-    $this->drupalPostForm($url, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $text = t('The field %name has been saved', ['%name' => $edit['name']]);
     $this->assertSession()->responseContains((string) $text);
   }
@@ @@
       'entities[node]' => '1',
       'block' => 'system_powered_by_block',
     ];
+    $this->drupalGet($url);

-    $this->drupalPostForm($url, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $text = t('The field %name has been saved', ['%name' => $edit['name']]);
     $this->assertSession()->responseContains((string) $text);
   }
@@ @@

     // Create field CSS classes.
     $edit = ['fields' => "test_field_class\ntest_field_class_2|Field class 2\n[node:nid]"];
-    $this->drupalPostForm('admin/structure/ds/classes', $edit,'Save configuration');
+    $this->drupalGet('admin/structure/ds/classes');
+    $this->submitForm($edit, 'Save configuration');

     // Create a token field.
     $token_field = [
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector


18) modules/contrib/ds/tests/src/Functional/DsFieldCacheTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->adminUser);
   }
@@ @@
       'fields[test_caching_field][region]' => 'left',
       'fields[test_caching_field][label]' => 'above',
     ];
-    $this->drupalPostForm('admin/structure/types/manage/article/display', ['ds_layout' => 'ds_2col'], t('Save'));
+    $this->drupalGet('admin/structure/types/manage/article/display');
+    $this->submitForm(['ds_layout' => 'ds_2col'], t('Save'));
     $this->dsConfigureUi($fields);

     // Create and visit the node so that it is cached as empty, ensure the title
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/ds/tests/src/Functional/CommentTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a test user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/ds/tests/src/Functional/CacheTagsTest.php:18

    ---------- begin diff ----------
@@ @@

     // Create field CSS classes.
     $edit = ['fields' => "test_field_class\ntest_field_class_2|Field class 2"];
-    $this->drupalPostForm('admin/structure/ds/classes', $edit, t('Save configuration'));
+    $this->drupalGet('admin/structure/ds/classes');
+    $this->submitForm($edit, t('Save configuration'));

     // Create a token field.
     $token_field = [
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


21) modules/contrib/ds/tests/src/Functional/BlockTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a test user.
@@ @@
       'label' => 'Basic Block',
       'id' => 'basic',
     ];
-    $this->drupalPostForm('admin/structure/block/block-content/types/add', $edit,'Save', []);
+    $this->drupalGet('admin/structure/block/block-content/types/add', []);
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('Custom block type Basic Block has been added.');

     // Create a basic block.
@@ @@
     $edit = [];
     $edit['info[0][value]'] = 'Test Block';
     $edit['body[0][value]'] = $this->randomMachineName(16);
-    $this->drupalPostForm('block/add/basic', $edit, t('Save'), []);
+    $this->drupalGet('block/add/basic', []);
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains('Basic Block Test Block has been created.');

     // Place the block.
@@ @@
     ];
     $block = BlockContent::load(1);
     $url = 'admin/structure/block/add/block_content:' . $block->uuid() . '/' . $this->config('system.theme')->get('default');
-    $this->drupalPostForm($url, $instance, t('Save block'));
+    $this->drupalGet($url);
+    $this->submitForm($instance, t('Save block'));

     // Change to a DS layout.
     $url = 'admin/structure/block/block-content/manage/basic/display';
     $edit = ['ds_layout' => 'ds_2col'];
-    $this->drupalPostForm($url, $edit, t('Save'), []);
+    $this->drupalGet($url, []);
+    $this->submitForm($edit, t('Save'));

     $fields = [
       'fields[block_description][region]' => 'left',
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/ds/tests/src/Functional/BlockFieldPluginTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Ensure that the plugin definitions are cleared.
@@ @@
     $edit = [
       'use_block_title' => '1',
     ];
-    $this->drupalPostForm('admin/structure/ds/fields/manage_block/test_block_title_field', $edit, t('Save'));
+    $this->drupalGet('admin/structure/ds/fields/manage_block/test_block_title_field');
+    $this->submitForm($edit, t('Save'));
     $text = t('The field %name has been saved', ['%name' => 'Test block title field']);
     $this->assertSession()->responseContains((string) $text);

@@ @@
     $edit = [
       'add_block_wrappers' => '1',
     ];
-    $this->drupalPostForm('admin/structure/ds/fields/manage_block/test_block_title_field', $edit, t('Save'));
+    $this->drupalGet('admin/structure/ds/fields/manage_block/test_block_title_field');
+    $this->submitForm($edit, t('Save'));

     // Verify block wrappers do exist.
     $this->drupalGet('node/' . $node->id());
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 22 files have been changed by Rector                                      

