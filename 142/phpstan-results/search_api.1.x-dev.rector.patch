diff --git a/modules/search_api_db/search_api_db.api.php b/modules/search_api_db/search_api_db.api.php
index fcbc4597..055b6d41 100644
--- a/modules/search_api_db/search_api_db.api.php
+++ b/modules/search_api_db/search_api_db.api.php
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Database\Query\SelectInterface;
+use Drupal\search_api\Query\QueryInterface;
 /**
  * @file
  * Hooks provided by the Database Search module.
@@ -28,7 +30,7 @@
  * @see https://www.drupal.org/node/3103591
  * @see \Drupal\search_api_db\Plugin\search_api\backend\Database::preQuery()
  */
-function hook_search_api_db_query_alter(\Drupal\Core\Database\Query\SelectInterface &$db_query, \Drupal\search_api\Query\QueryInterface $query) {
+function hook_search_api_db_query_alter(SelectInterface &$db_query, QueryInterface $query) {
   // If the option was set on the query, add additional SQL conditions.
   if ($custom = $query->getOption('custom_sql_conditions')) {
     foreach ($custom as $condition) {
diff --git a/search_api.api.php b/search_api.api.php
index 9e36b45c..73f07e75 100644
--- a/search_api.api.php
+++ b/search_api.api.php
@@ -1,5 +1,12 @@
 <?php
 
+use Drupal\search_api\ServerInterface;
+use Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend;
+use Drupal\search_api\IndexInterface;
+use Drupal\search_api\Utility\Utility;
+use Drupal\search_api\Query\QueryInterface;
+use Drupal\search_api\Query\ResultSetInterface;
+use Drupal\Core\Database\Database;
 /**
  * @file
  * Hooks provided by the Search API module.
@@ -48,8 +55,8 @@ function hook_search_api_backend_info_alter(array &$backend_info) {
  * @see https://www.drupal.org/node/3059866
  * @see \Drupal\search_api\Backend\BackendSpecificInterface::getSupportedFeatures()
  */
-function hook_search_api_server_features_alter(array &$features, \Drupal\search_api\ServerInterface $server) {
-  if ($server->getBackend() instanceof \Drupal\search_api_solr\Plugin\search_api\backend\SearchApiSolrBackend) {
+function hook_search_api_server_features_alter(array &$features, ServerInterface $server) {
+  if ($server->getBackend() instanceof SearchApiSolrBackend) {
     $features[] = 'my_custom_feature';
   }
 }
@@ -281,9 +288,9 @@ function hook_search_api_views_field_handler_mapping_alter(array &$mapping) {
  *
  * @see https://www.drupal.org/node/3059866
  */
-function hook_search_api_index_items_alter(\Drupal\search_api\IndexInterface $index, array &$items) {
+function hook_search_api_index_items_alter(IndexInterface $index, array &$items) {
   foreach ($items as $item_id => $item) {
-    list(, $raw_id) = \Drupal\search_api\Utility\Utility::splitCombinedId($item->getId());
+    list(, $raw_id) = Utility::splitCombinedId($item->getId());
     if ($raw_id % 5 == 0) {
       unset($items[$item_id]);
     }
@@ -309,7 +316,7 @@ function hook_search_api_index_items_alter(\Drupal\search_api\IndexInterface $in
  *
  * @see https://www.drupal.org/node/3059866
  */
-function hook_search_api_items_indexed(\Drupal\search_api\IndexInterface $index, array $item_ids) {
+function hook_search_api_items_indexed(IndexInterface $index, array $item_ids) {
   if ($index->isValidDatasource('entity:node')) {
     // Note that this is just an example, and would only work if there are only
     // nodes indexed in that index (and even then the printed IDs would probably
@@ -332,7 +339,7 @@ function hook_search_api_items_indexed(\Drupal\search_api\IndexInterface $index,
  *
  * @see https://www.drupal.org/node/3059866
  */
-function hook_search_api_query_alter(\Drupal\search_api\Query\QueryInterface $query) {
+function hook_search_api_query_alter(QueryInterface $query) {
   // Do not run for queries with a certain tag.
   if ($query->hasTag('example_tag')) {
     return;
@@ -361,7 +368,7 @@ function hook_search_api_query_alter(\Drupal\search_api\Query\QueryInterface $qu
  *
  * @see https://www.drupal.org/node/3059866
  */
-function hook_search_api_query_TAG_alter(\Drupal\search_api\Query\QueryInterface $query) {
+function hook_search_api_query_TAG_alter(QueryInterface $query) {
   // Exclude the node with ID 10 from the search results.
   $fields = $query->getIndex()->getFields();
   foreach ($query->getIndex()->getDatasources() as $datasource_id => $datasource) {
@@ -387,7 +394,7 @@ function hook_search_api_query_TAG_alter(\Drupal\search_api\Query\QueryInterface
  *
  * @see https://www.drupal.org/node/3059866
  */
-function hook_search_api_results_alter(\Drupal\search_api\Query\ResultSetInterface &$results) {
+function hook_search_api_results_alter(ResultSetInterface &$results) {
   $results->setExtraData('example_hook_invoked', microtime(TRUE));
 }
 
@@ -405,7 +412,7 @@ function hook_search_api_results_alter(\Drupal\search_api\Query\ResultSetInterfa
  *
  * @see https://www.drupal.org/node/3059866
  */
-function hook_search_api_results_TAG_alter(\Drupal\search_api\Query\ResultSetInterface &$results) {
+function hook_search_api_results_TAG_alter(ResultSetInterface &$results) {
   $results->setExtraData('example_hook_invoked', microtime(TRUE));
 }
 
@@ -422,8 +429,8 @@ function hook_search_api_results_TAG_alter(\Drupal\search_api\Query\ResultSetInt
  *
  * @see https://www.drupal.org/node/3059866
  */
-function hook_search_api_index_reindex(\Drupal\search_api\IndexInterface $index, $clear = FALSE) {
-  \Drupal\Core\Database\Database::getConnection()->insert('example_search_index_reindexed')
+function hook_search_api_index_reindex(IndexInterface $index, $clear = FALSE) {
+  Database::getConnection()->insert('example_search_index_reindexed')
     ->fields([
       'index' => $index->id(),
       'clear' => $clear,
diff --git a/tests/src/Kernel/BasicTrackerTest.php b/tests/src/Kernel/BasicTrackerTest.php
index 932ed77e..7a63653a 100644
--- a/tests/src/Kernel/BasicTrackerTest.php
+++ b/tests/src/Kernel/BasicTrackerTest.php
@@ -296,15 +296,11 @@ class BasicTrackerTest extends KernelTestBase {
    */
   public function testExceptionHandling($tracker_method, array $args = []) {
     /** @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\Core\Database\Connection $connection */
-    $connection = $this->getMockBuilder(Connection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $connection = $this->createMock(Connection::class);
     foreach (['select', 'insert', 'update', 'delete'] as $method) {
       $connection->method($method)->willThrowException(new \Exception());
     }
-    $transaction = $this->getMockBuilder(Transaction::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $transaction = $this->createMock(Transaction::class);
     $rolled_back = FALSE;
     $rollback = function () use (&$rolled_back) {
       $rolled_back = TRUE;
diff --git a/tests/src/Kernel/System/QueryTest.php b/tests/src/Kernel/System/QueryTest.php
index 9249f372..08ce977e 100644
--- a/tests/src/Kernel/System/QueryTest.php
+++ b/tests/src/Kernel/System/QueryTest.php
@@ -88,7 +88,7 @@ class QueryTest extends KernelTestBase {
    *   (optional) Whether hooks and processors should be invoked with this
    *   processing level.
    *
-   * @dataProvider testProcessingLevelDataProvider
+   * @dataProvider processingLevelDataProvider
    */
   public function testProcessingLevel($level, $hooks_and_processors_invoked = TRUE) {
     /** @var \Drupal\search_api\Processor\ProcessorInterface $processor */
@@ -139,7 +139,7 @@ class QueryTest extends KernelTestBase {
    *   Arrays of method arguments for the
    *   \Drupal\Tests\search_api\Kernel\QueryTest::testProcessingLevel() method.
    */
-  public function testProcessingLevelDataProvider() {
+  public function processingLevelDataProvider() {
     return [
       'none' => [QueryInterface::PROCESSING_NONE, FALSE],
       'basic' => [QueryInterface::PROCESSING_BASIC],
diff --git a/tests/src/Kernel/Views/ViewsFieldTraitTest.php b/tests/src/Kernel/Views/ViewsFieldTraitTest.php
index 1da11165..7c09f728 100644
--- a/tests/src/Kernel/Views/ViewsFieldTraitTest.php
+++ b/tests/src/Kernel/Views/ViewsFieldTraitTest.php
@@ -125,9 +125,7 @@ class ViewsFieldTraitTest extends KernelTestBase {
 
     $this->field = new ViewsTestField([], 'search_api', []);
     /** @var \Drupal\search_api\Plugin\views\query\SearchApiQuery|\PHPUnit\Framework\MockObject\MockObject $query */
-    $query = $this->getMockBuilder(SearchApiQuery::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $query = $this->createMock(SearchApiQuery::class);
     $query->method('getIndex')->willReturn($this->index);
     $query->method('getAccessAccount')->willReturn($this->users[1]);
     $this->field->setQuery($query);
diff --git a/tests/src/Kernel/Views/ViewsPropertyExtractionTest.php b/tests/src/Kernel/Views/ViewsPropertyExtractionTest.php
index 5223d69a..1c886708 100644
--- a/tests/src/Kernel/Views/ViewsPropertyExtractionTest.php
+++ b/tests/src/Kernel/Views/ViewsPropertyExtractionTest.php
@@ -135,21 +135,15 @@ class ViewsPropertyExtractionTest extends KernelTestBase {
     }
     $index->method('getFields')->willReturn($fields);
 
-    $query = $this->getMockBuilder(SearchApiQuery::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $query = $this->createMock(SearchApiQuery::class);
     $query->method('getIndex')->willReturn($index);
 
     /** @var \Drupal\views\ViewExecutable $view */
-    $view = $this->getMockBuilder(ViewExecutable::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $view = $this->createMock(ViewExecutable::class);
     $view->query = $query;
 
     /** @var \Drupal\views\Plugin\views\display\DisplayPluginBase $display */
-    $display = $this->getMockBuilder(DisplayPluginBase::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $display = $this->createMock(DisplayPluginBase::class);
 
     $configuration = [
       'real field' => $property_path,
diff --git a/tests/src/Unit/ItemFieldTest.php b/tests/src/Unit/ItemFieldTest.php
index 2dffa49f..648f4b40 100644
--- a/tests/src/Unit/ItemFieldTest.php
+++ b/tests/src/Unit/ItemFieldTest.php
@@ -37,9 +37,7 @@ class ItemFieldTest extends UnitTestCase {
       });
 
     /** @var \Drupal\search_api\DataType\DataTypePluginManager|\PHPUnit\Framework\MockObject\MockObject $data_type_manager */
-    $data_type_manager = $this->getMockBuilder('Drupal\search_api\DataType\DataTypePluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $data_type_manager = $this->createMock('Drupal\search_api\DataType\DataTypePluginManager');
     $data_type_manager->expects($this->any())
       ->method('hasDefinition')
       ->willReturn(TRUE);
diff --git a/tests/src/Unit/Processor/AddURLTest.php b/tests/src/Unit/Processor/AddURLTest.php
index 85b3b57a..5e2d3cd0 100644
--- a/tests/src/Unit/Processor/AddURLTest.php
+++ b/tests/src/Unit/Processor/AddURLTest.php
@@ -81,9 +81,7 @@ class AddURLTest extends UnitTestCase {
    */
   public function testAddFieldValues() {
     /** @var \Drupal\node\Entity\Node $node */
-    $node = $this->getMockBuilder('Drupal\node\Entity\Node')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $node = $this->createMock('Drupal\node\Entity\Node');
 
     $body_value = ['Some text value'];
     $fields = [
diff --git a/tests/src/Unit/Processor/EntityStatusTest.php b/tests/src/Unit/Processor/EntityStatusTest.php
index f8ded7a6..154f673a 100644
--- a/tests/src/Unit/Processor/EntityStatusTest.php
+++ b/tests/src/Unit/Processor/EntityStatusTest.php
@@ -154,9 +154,7 @@ class EntityStatusTest extends UnitTestCase {
       foreach ([1 => TRUE, 2 => FALSE] as $i => $status) {
         $item_id = Utility::createCombinedId($datasource_id, "$i:en");
         $item = $fields_helper->createItem($this->index, $item_id, $this->datasources[$datasource_id]);
-        $entity = $this->getMockBuilder($info['class'])
-          ->disableOriginalConstructor()
-          ->getMock();
+        $entity = $this->createMock($info['class']);
         if (isset($info['method'])) {
           $entity->method($info['method'])
             ->will($this->returnValue($status));
diff --git a/tests/src/Unit/Processor/RoleFilterTest.php b/tests/src/Unit/Processor/RoleFilterTest.php
index 67fd11ec..9a2be823 100644
--- a/tests/src/Unit/Processor/RoleFilterTest.php
+++ b/tests/src/Unit/Processor/RoleFilterTest.php
@@ -62,17 +62,13 @@ class RoleFilterTest extends UnitTestCase {
 
     $fields_helper = \Drupal::getContainer()->get('search_api.fields_helper');
     $item = $fields_helper->createItem($index, Utility::createCombinedId('entity:node', '1:en'), $node_datasource);
-    $node = $this->getMockBuilder(NodeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $node = $this->createMock(NodeInterface::class);
     /** @var \Drupal\node\NodeInterface $node */
     $item->setOriginalObject(EntityAdapter::createFromEntity($node));
     $this->items[$item->getId()] = $item;
 
     $item = $fields_helper->createItem($index, Utility::createCombinedId('entity:user', '1:en'), $user_datasource);
-    $account1 = $this->getMockBuilder(UserInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $account1 = $this->createMock(UserInterface::class);
     $account1->expects($this->any())
       ->method('getRoles')
       ->will($this->returnValue(['authenticated' => 'authenticated', 'editor' => 'editor']));
@@ -81,9 +77,7 @@ class RoleFilterTest extends UnitTestCase {
     $this->items[$item->getId()] = $item;
 
     $item = $fields_helper->createItem($index, Utility::createCombinedId('entity:user', '2:en'), $user_datasource);
-    $account2 = $this->getMockBuilder(UserInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $account2 = $this->createMock(UserInterface::class);
     $account2->expects($this->any())
       ->method('getRoles')
       ->will($this->returnValue(['authenticated' => 'authenticated']));
diff --git a/tests/src/Unit/Processor/StemmerTest.php b/tests/src/Unit/Processor/StemmerTest.php
index bccb2d9d..4e6adf8c 100644
--- a/tests/src/Unit/Processor/StemmerTest.php
+++ b/tests/src/Unit/Processor/StemmerTest.php
@@ -88,9 +88,7 @@ class StemmerTest extends UnitTestCase {
   public function testPreprocessIndexItems() {
     $index = $this->createMock(IndexInterface::class);
 
-    $item_en = $this->getMockBuilder(ItemInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $item_en = $this->createMock(ItemInterface::class);
     $item_en->method('getLanguage')->willReturn('en');
     $field_en = new Field($index, 'foo');
     $field_en->setType('text');
@@ -99,9 +97,7 @@ class StemmerTest extends UnitTestCase {
     ]);
     $item_en->method('getFields')->willReturn(['foo' => $field_en]);
 
-    $item_de = $this->getMockBuilder(ItemInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $item_de = $this->createMock(ItemInterface::class);
     $item_de->method('getLanguage')->willReturn('de');
     $field_de = new Field($index, 'foo');
     $field_de->setType('text');
diff --git a/tests/src/Unit/Processor/TestItemsTrait.php b/tests/src/Unit/Processor/TestItemsTrait.php
index 45cfb69c..329c642e 100644
--- a/tests/src/Unit/Processor/TestItemsTrait.php
+++ b/tests/src/Unit/Processor/TestItemsTrait.php
@@ -116,28 +116,17 @@ trait TestItemsTrait {
    */
   protected function setUpMockContainer() {
     /** @var \Drupal\Tests\UnitTestCase|\Drupal\Tests\search_api\Unit\Processor\TestItemsTrait $this */
-    $dataTypeManager = $this->getMockBuilder('Drupal\search_api\DataType\DataTypePluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dataTypeManager = $this->createMock('Drupal\search_api\DataType\DataTypePluginManager');
     $dataTypeManager->method('getInstances')
       ->will($this->returnValue([]));
 
-    $moduleHandler = $this->getMockBuilder('Drupal\Core\Extension\ModuleHandlerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $eventDispatcher = $this->getMockBuilder(EventDispatcherInterface::class)
-      ->getMock();
+    $moduleHandler = $this->createMock('Drupal\Core\Extension\ModuleHandlerInterface');
+    $eventDispatcher = $this->createMock(EventDispatcherInterface::class);
     $dataTypeHelper = new DataTypeHelper($moduleHandler, $eventDispatcher, $dataTypeManager);
 
-    $entityTypeManager = $this->getMockBuilder('Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $entityFieldManager = $this->getMockBuilder('Drupal\Core\Entity\EntityFieldManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $entityBundleInfo = $this->getMockBuilder('Drupal\Core\Entity\EntityTypeBundleInfoInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entityTypeManager = $this->createMock('Drupal\Core\Entity\EntityTypeManagerInterface');
+    $entityFieldManager = $this->createMock('Drupal\Core\Entity\EntityFieldManagerInterface');
+    $entityBundleInfo = $this->createMock('Drupal\Core\Entity\EntityTypeBundleInfoInterface');
     $fieldsHelper = new FieldsHelper($entityTypeManager, $entityFieldManager, $entityBundleInfo, $dataTypeHelper);
 
     $queryHelper = $this->createMock(QueryHelperInterface::class);
diff --git a/tests/src/Unit/Views/TaxonomyTermArgumentTest.php b/tests/src/Unit/Views/TaxonomyTermArgumentTest.php
index d1f16f77..2071519a 100644
--- a/tests/src/Unit/Views/TaxonomyTermArgumentTest.php
+++ b/tests/src/Unit/Views/TaxonomyTermArgumentTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api\Unit\Views;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\search_api\Plugin\views\argument\SearchApiTerm;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\Tests\UnitTestCase;
@@ -15,6 +16,7 @@ use Drupal\Tests\UnitTestCase;
  */
 class TaxonomyTermArgumentTest extends UnitTestCase {
 
+  use ProphecyTrait;
   use TaxonomyTestTrait;
 
   /**
