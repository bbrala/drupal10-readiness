modules/contrib/scheduled_transitions/scheduled_transitions.api.php
modules/contrib/scheduled_transitions/scheduled_transitions.install
modules/contrib/scheduled_transitions/src/ScheduledTransitionsHooks.php
modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionEntityTest.php
modules/contrib/scheduled_transitions/src/Event/ScheduledTransitionsEvents.php
modules/contrib/scheduled_transitions/src/Event/ScheduledTransitionsNewRevisionEvent.php
modules/contrib/scheduled_transitions/scheduled_transitions.module
modules/contrib/scheduled_transitions/src/Access/SupportsContentModerationAccessCheck.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsJobs.php
modules/contrib/scheduled_transitions/src/EventSubscriber/ScheduledTransitionsNewRevision.php
modules/contrib/scheduled_transitions/src/Commands/ScheduledTransitionsCommands.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsJobsInterface.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsListBuilder.php
modules/contrib/scheduled_transitions/src/Entity/ScheduledTransition.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsPermissions.php
modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransmodules/contrib/scheduled_transitiomodules/contrib/scheduled_transitions/src/ScheduledTransitionsRunner.php
modules/contrib/scheduled_transitions/src/Exception/ScheduledTransitionMissingEntity.php
modules/contrib/scheduled_transitions/src/Form/Entity/ScheduledTransitionAddForm.php
modules/contrib/scheduled_transitions/src/Entity/ScheduledTransitionInterface.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsRunnerInterface.php
modules/cmodules/contrib/scheduled_transitions/src/ScheduledTransitionsRunnerInterface.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsTokenReplacements.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsUtility.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsUtilityInterface.php
modules/contrmodules/contrib/scheduled_transitions/src/ScheduledTransitionsUtilityInterface.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsViewsData.php
modules/contrib/scheduled_transitions/tests/modules/scheduled_transitions_target_revisions_test/scheduled_transitions_target_revisions_test.module
modules/contrib/scheduled_transitions/tests/modules/scheduled_transitions_test/src/Entity/ScheduledTransitionsNonTranslatableTestEntity.php
modules/contrib/scheduled_transitions/tests/modules/scheduled_transitions_test/src/Entity/ScheduledTransitionsTestEntity.php
modules/contrib/scheduled_transitions/src/Form/Entity/ScheduledTransitionRescheduleForm.php
modules/contrib/scheduled_transitions/tests/modulesmodules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionModalFormTest.modumodules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionRescheduleFormTest.php
modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionSettingsFormTest.php
modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionViewsListTest.php
modules/contrib/scheduled_transitions/src/Form/Entity/ScheduledTransitionRescheduleForm.php
modules/contrib/scheduled_transitions/src/Form/ScheduledTransitionForm.php
modules/contrib/scheduled_transitions/tests/src/FunctionalJavascript/ScheduledTransitionModalFormJavascriptTest.php
modules/contrib/scheduled_transitions/src/Form/ScheduledTransitionsSettingsForm.php
modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionEntityTest.php
modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionTest.php
modules/contrib/scheduled_transitions/src/Plugin/Derivative/ScheduledTransitionsLocalActions.php
modules/contrib/scheduled_transitions/src/Plugin/Derivative/ScheduledTransitionsLocalTasks.php
modules/contrib/scheduled_transitions/src/Plugin/Menu/LocalAction/ScheduledTransitionsLocalAction.php
modules/contrib/scheduled_transitions/src/Plugin/Menu/LocalTask/ScheduledTransitionsLocalTask.php
modules/contrib/scheduled_transitions/src/Plugin/QueueWorker/ScheduledTransitionJob.php
modules/contrib/scheduled_transitions/src/Plugin/views/field/ScheduledTransitionFromStateViewsField.php
modules/contrib/scheduled_transitions/src/Plugin/views/field/ScheduledTransitionRevisionLinkField.php
modules/contrib/scheduled_transitions/src/Plugin/views/field/ScheduledTransitionToStateViewsField.php
modules/contrib/scheduled_transitions/src/Routing/ScheduledTransitionRouteProvider.php
modules/contrib/scheduled_transitions/src/Routing/ScheduledTransitionsRouteProvider.php
modules/contrib/scheduled_transitions/src/ScheduledTransitionsAccessControlHandlermodules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionTest.php
modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionsPermissionsTest.php
modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionsTokenTest.php
modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionsUtilityTest.php
modules/contrib/scheduled_transitions/tests/src/Traits/ScheduledTransitionTestTrait.php
modules/contrib/scheduled_transitions/tests/src/Unit/ScheduledTransitionsCronUnitTest.php
modules/contrib/scheduled_transitions/tests/src/Unit/ScheduledTransitionsEntityHooksUnitTest.php
modules/contrib/scheduled_transitions/tests/src/Unit/ScheduledTransitionsLocalTaskUnitTest.php
modules/contrib/scheduled_transitions/tests/src/Unit/ScheduledTransitionsPermissionsUnitTest.php
modules/contrib/scheduled_transitions/tests/src/Unit/ScheduledTransitionsUtilityUnitTest.php

11 files with changes
=====================

1) modules/contrib/scheduled_transitions/scheduled_transitions.api.php:10

    ---------- begin diff ----------
@@ @@

 declare(strict_types = 1);

+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use Drupal\scheduled_transitions\Event\ScheduledTransitionsNewRevisionEvent;
+use Drupal\scheduled_transitions\Event\ScheduledTransitionsEvents;
+
 /**
  * Event subscribers for Scheduled Transitions Field.
  *
@@ @@
  * ```
  * </code>
  */
-class MyEventSubscriber implements \Symfony\Component\EventDispatcher\EventSubscriberInterface {
+class MyEventSubscriber implements EventSubscriberInterface {

   /**
    * Custom logic to determine new revision for a scheduled transition.
@@ @@
    * @param \Drupal\scheduled_transitions\Event\ScheduledTransitionsNewRevisionEvent $event
    *   New revision event.
    */
-  public function newRevision(\Drupal\scheduled_transitions\Event\ScheduledTransitionsNewRevisionEvent $event): void {
+  public function newRevision(ScheduledTransitionsNewRevisionEvent $event): void {
     $scheduledTransition = $event->getScheduledTransition();
     $entity = $scheduledTransition->getEntity();
     $newRevision = $entity;
@@ @@
    */
   public static function getSubscribedEvents(): array {
     return [
-      \Drupal\scheduled_transitions\Event\ScheduledTransitionsEvents::NEW_REVISION => ['newRevision'],
+      ScheduledTransitionsEvents::NEW_REVISION => ['newRevision'],
     ];
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


2) modules/contrib/scheduled_transitions/src/ScheduledTransitionsRunner.php:134

    ---------- begin diff ----------
@@ @@
     }

     $event = new ScheduledTransitionsNewRevisionEvent($scheduledTransition);
-    $this->eventDispatcher->dispatch(ScheduledTransitionsEvents::NEW_REVISION, $event);
+    $this->eventDispatcher->dispatch($event, ScheduledTransitionsEvents::NEW_REVISION);

     $newRevision = $event->getNewRevision();
     if (!$newRevision) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


3) modules/contrib/scheduled_transitions/src/Event/ScheduledTransitionsNewRevisionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\scheduled_transitions\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Used to determine the new revision for a transition.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/scheduled_transitions/tests/src/Unit/ScheduledTransitionsEntityHooksUnitTest.php:57

    ---------- begin diff ----------
@@ @@
     $this->testEntityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $this->testModerationInformation = $this->createMock(ModerationInformationInterface::class);

-    $cacheContextsManager = $this->getMockBuilder(CacheContextsManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cacheContextsManager = $this->createMock(CacheContextsManager::class);
     $cacheContextsManager->method('assertValidTokens')->willReturn(TRUE);
     $container = new ContainerBuilder();
     $container->set('cache_contexts_manager', $cacheContextsManager);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionsUtilityTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('entity_test_revlog');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionsPermissionsTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('entity_test_revlog');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/scheduled_transitions/tests/src/Kernel/ScheduledTransitionEntityTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('scheduled_transition');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionSettingsFormTest.php:53

    ---------- begin diff ----------
@@ @@
     $edit = [
       'cron_create_queue_items' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');

     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->assertSession()->checkboxNotChecked('cron_create_queue_items');
@@ @@
       'mirror_operation_view' => 'update',
       'mirror_operation_add' => 'update',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');

     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->assertSession()->fieldValueEquals('mirror_operation_view', 'update');
@@ @@
     $this->drupalGet($url);

     $this->assertSession()->pageTextContains('Enabled types (0)');
-    $this->assertFieldByName('enabled[entity_test_revlog:entity_test_revlog]');
-    $this->assertFieldByName('enabled[st_entity_test:st_entity_test]');
+    $this->assertSession()->fieldExists('enabled[entity_test_revlog:entity_test_revlog]');
+    $this->assertSession()->fieldExists('enabled[st_entity_test:st_entity_test]');

     // Enable just one of the boxes.
     $edit = [
       'enabled[st_entity_test:st_entity_test]' => 'TRUE',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');

     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->assertSession()->pageTextContains('Enabled types (1)');
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionRescheduleFormTest.php:90

    ---------- begin diff ----------
@@ @@
       'date[date]' => '2018-10-21',
       'date[time]' => '14:00:00',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Reschedule transition');
+    $this->submitForm($edit, 'Reschedule transition');
     $this->assertSession()->pageTextContains('Rescheduled transition for Sun, 10/21/2018 - 14:00');

     // Reload ST.
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionLocalTaskTest.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/scheduled_transitions/tests/src/Functional/ScheduledTransitionEntityTest.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 11 files have been changed by Rector                                      

