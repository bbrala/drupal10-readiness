modules/contrib/high_contrast/high_contrast.install
modules/contrib/high_contrast/high_contrast.module
modules/contrib/high_contrast/src/Cache/Context/HighContrastCacheContext.php
modules/contrib/high_contrast/src/EventSubscriber/ConfigEventSubscriber.php
modules/contrib/high_contrast/src/Form/HighContrastConfigurationForm.php
modules/contrib/high_contrast/src/Form/HighContrastSwitchForm.php
modules/contrib/high_contrast/src/HighContrastBlockView.php
modules/contrib/high_contrast/src/HighContrastConfigOverride.php
modules/contrib/high_contrast/src/HighContrastController.php
modules/contrib/high_contrast/src/HighContrastTrait.php
modules/contrib/high_contrast/src/Plugin/Block/HighContrastBlock.php
modules/contrib/high_contrast/tests/src/FunctionalJavascript/HighContrastStyleSheetTest.php

3 files with changes
====================

1) modules/contrib/high_contrast/tests/src/FunctionalJavascript/HighContrastStyleSheetTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Store the values for later comparison.
@@ @@
     // Assert all defined colors are present in the file.
     $css_file = file_get_contents($file_path);
     foreach ($this->values as $definition => $color) {
-      $this->assertContains($color, $css_file, "Color $color has been applied for $definition.");
+      $this->assertStringContainsString($color, $css_file, "Color $color has been applied for $definition.");
     }

     // Generate some new values.
@@ @@
     // Assert all previous colors are gone.
     $css_file = file_get_contents($file_path);
     foreach ($this->values as $definition => $color) {
-      $this->assertNotContains($color, $css_file, "Color $color has not been applied for $definition.");
+      $this->assertStringNotContainsString($color, $css_file, "Color $color has not been applied for $definition.");
     }
     // Assert all new colors are present.
     foreach ($new_values as $definition => $color) {
-      $this->assertContains($color, $css_file, "Color $color has been applied for $definition.");
+      $this->assertStringContainsString($color, $css_file, "Color $color has been applied for $definition.");
     }
   }
    ----------- end diff -----------

Applied rules:
 * SpecificAssertContainsRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/high_contrast/src/HighContrastConfigOverride.php:104

    ---------- begin diff ----------
@@ @@
       // If the default logo is desired, scan the theme dir for a logo-hg file.
       // Not using dependency injection to prevent circular references.
       $theme = \Drupal::theme()->getActiveTheme()->getName();
-      $theme_path = drupal_get_path('theme', $theme);
+      $theme_path = \Drupal::service('extension.list.theme')->getPath($theme);

       $candidates = [];
       try {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector


3) modules/contrib/high_contrast/src/Form/HighContrastConfigurationForm.php:207

    ---------- begin diff ----------
@@ @@
     // it in place of the default theme-provided file.
     if (!empty($form_state->getValue('logo_upload'))) {
       $source = $form_state->getValue('logo_upload')->getFileUri();
-      $destination = file_build_uri($this->fileSystem->basename($source));
+      $destination = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . $this->fileSystem->basename($source)));
       $filename = $this->fileSystem->copy($source, $destination);
       $config->set('default_logo', 0);
       $config->set('logo_path', $filename);
    ----------- end diff -----------

Applied rules:
 * FileBuildUriRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

