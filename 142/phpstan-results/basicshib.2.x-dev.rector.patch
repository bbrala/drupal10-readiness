diff --git a/basicshib.info.yml b/basicshib.info.yml
index 965bf46..e4d8943 100644
--- a/basicshib.info.yml
+++ b/basicshib.info.yml
@@ -1,6 +1,6 @@
 name: Basic shibboleth authentication
 type: module
 description: Shibboleth authentication
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 version: 9.x-1.0-dev
 package: Authentication
diff --git a/composer.json b/composer.json
index 2065db7..6352e11 100644
--- a/composer.json
+++ b/composer.json
@@ -14,6 +14,6 @@
     "source": "http://cgit.drupalcode.org/basicshib"
   },
   "require": {
-    "drupal/core": "^8.8.0 || ^9.0"
+    "drupal/core": "^8.8.0 || ^9.0 || ^10"
   }
 }
diff --git a/src/EventSubscriber/RequestEventSubscriber.php b/src/EventSubscriber/RequestEventSubscriber.php
index a3feb69..5db3384 100644
--- a/src/EventSubscriber/RequestEventSubscriber.php
+++ b/src/EventSubscriber/RequestEventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\basicshib\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\basicshib\AuthenticationHandlerInterface;
 use Drupal\basicshib\AuthenticationManagerInterface;
 use Drupal\basicshib\AuthorizationManagerServiceInterface;
@@ -10,7 +11,6 @@ use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -62,13 +62,13 @@ class RequestEventSubscriber implements EventSubscriberInterface {
   /**
    * Request handler.
    *
-   * @param GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    * @param $eventId
    * @param ContainerAwareEventDispatcher $dispatcher
    *
    * @throws \InvalidArgumentException
    */
-  public function onRequest(GetResponseEvent $event, $eventId, ContainerAwareEventDispatcher $dispatcher) {
+  public function onRequest(RequestEvent $event, $eventId, ContainerAwareEventDispatcher $dispatcher) {
     $this->authentication_handler->checkUserSession(
       $event->getRequest(),
       $this->current_user
diff --git a/tests/src/Kernel/AuthFilterPluginImplementationTest.php b/tests/src/Kernel/AuthFilterPluginImplementationTest.php
index 1c98c78..08bc90d 100644
--- a/tests/src/Kernel/AuthFilterPluginImplementationTest.php
+++ b/tests/src/Kernel/AuthFilterPluginImplementationTest.php
@@ -26,7 +26,7 @@ class AuthFilterPluginImplementationTest extends KernelTestBase {
 
   public static $modules = ['basicshib', 'basicshib_test', 'user', 'system'];
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installConfig(['basicshib', 'basicshib_test']);
     $this->installEntitySchema('user');
diff --git a/tests/src/Kernel/AuthenticationHandlerTest.php b/tests/src/Kernel/AuthenticationHandlerTest.php
index bc9bb1b..2dc9cdb 100644
--- a/tests/src/Kernel/AuthenticationHandlerTest.php
+++ b/tests/src/Kernel/AuthenticationHandlerTest.php
@@ -31,7 +31,7 @@ class AuthenticationHandlerTest extends KernelTestBase {
 
   public static $modules = ['basicshib', 'user', 'system'];
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installConfig(['basicshib']);
     $this->installEntitySchema('user');
@@ -348,10 +348,7 @@ class AuthenticationHandlerTest extends KernelTestBase {
   }
 
   public function testGetLoginUrl() {
-    $url = $this->getMockBuilder(Url::class)
-      ->disableOriginalConstructor()
-      ->setMethods(['setAbsolute', 'toString'])
-      ->getMock();
+    $url = $this->createMock(Url::class);
     $url->method('toString')
       ->willReturn('https://example.com/foo');
 
diff --git a/tests/src/Kernel/LoginControllerTest.php b/tests/src/Kernel/LoginControllerTest.php
index 90f679d..0df9e44 100644
--- a/tests/src/Kernel/LoginControllerTest.php
+++ b/tests/src/Kernel/LoginControllerTest.php
@@ -23,7 +23,7 @@ class LoginControllerTest extends KernelTestBase {
   public static $modules = ['basicshib', 'system', 'user'];
 
   /**
-   * @var AuthenticationHandlerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var AuthenticationHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   private $auth_handler;
 
@@ -35,7 +35,7 @@ class LoginControllerTest extends KernelTestBase {
   /**
    * @inheritDoc
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['basicshib']);
@@ -93,7 +93,7 @@ class LoginControllerTest extends KernelTestBase {
 
 
     self::assertTrue(is_array($response));
-    self::assertContains($this->messages['external_redirect_error'], $this->render($response));
+    self::assertStringContainsString($this->messages['external_redirect_error'], $this->render($response));
   }
 
   /**
@@ -109,7 +109,7 @@ class LoginControllerTest extends KernelTestBase {
     $response = $controller->login();
 
     self::assertTrue(is_array($response));
-    self::assertContains($this->messages['account_blocked_error'], $this->render($response));
+    self::assertStringContainsString($this->messages['account_blocked_error'], $this->render($response));
   }
 
   /**
@@ -125,7 +125,7 @@ class LoginControllerTest extends KernelTestBase {
     $response = $controller->login();
 
     self::assertTrue(is_array($response));
-    self::assertContains($this->messages['login_disallowed_error'], $this->render($response));
+    self::assertStringContainsString($this->messages['login_disallowed_error'], $this->render($response));
   }
 
 
@@ -142,7 +142,7 @@ class LoginControllerTest extends KernelTestBase {
     $response = $controller->login();
 
     self::assertTrue(is_array($response));
-    self::assertContains($this->messages['user_creation_not_allowed_error'], $this->render($response));
+    self::assertStringContainsString($this->messages['user_creation_not_allowed_error'], $this->render($response));
   }
 
   /**
@@ -158,7 +158,7 @@ class LoginControllerTest extends KernelTestBase {
     $response = $controller->login();
 
     self::assertTrue(is_array($response));
-    self::assertContains($this->messages['generic_login_error'], $this->render($response));
+    self::assertStringContainsString($this->messages['generic_login_error'], $this->render($response));
   }
 
 }
diff --git a/tests/src/Traits/MockTrait.php b/tests/src/Traits/MockTrait.php
index f4b34fa..a0659f3 100644
--- a/tests/src/Traits/MockTrait.php
+++ b/tests/src/Traits/MockTrait.php
@@ -20,7 +20,7 @@ use Symfony\Component\HttpFoundation\Session\SessionInterface;
 trait MockTrait {
   /**
    * @param array $settings
-   * @return \PHPUnit_Framework_MockObject_MockObject|ConfigFactoryInterface
+   * @return \PHPUnit\Framework\MockObject\MockObject|ConfigFactoryInterface
    */
   public function getMockConfigFactory(array $settings = []) {
 
@@ -59,10 +59,7 @@ trait MockTrait {
 
     $config_factory_map = [];
     foreach (array_keys($settings) as $config_source) {
-      $config = $this->getMockBuilder(ImmutableConfig::class)
-        ->disableOriginalConstructor()
-        ->setMethods(['get'])
-        ->getMock();
+      $config = $this->createMock(ImmutableConfig::class);
 
       $config_map = [];
 
@@ -105,7 +102,7 @@ trait MockTrait {
   /**
    * @param UserInterface[] $existing_users
    *
-   * @return UserStorageInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @return UserStorageInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   public function getMockUserStorage(array $existing_users = []) {
     $existing_map = [];
@@ -133,7 +130,7 @@ trait MockTrait {
 
   /**
    * @param array $values
-   * @return \PHPUnit_Framework_MockObject_MockObject|SessionInterface
+   * @return \PHPUnit\Framework\MockObject\MockObject|SessionInterface
    */
   public function getMockSession(array $values = []) {
     $session = $this->getMockForAbstractClass(SessionInterface::class);
diff --git a/tests/src/Unit/SessionTrackerTest.php b/tests/src/Unit/SessionTrackerTest.php
index 6eaf920..28f2ff7 100644
--- a/tests/src/Unit/SessionTrackerTest.php
+++ b/tests/src/Unit/SessionTrackerTest.php
@@ -18,7 +18,7 @@ class SessionTrackerTest extends UnitTestCase {
   public function testGet() {
     $value = $this->randomMachineName();
 
-    /** @var SessionInterface|\PHPUnit_Framework_MockObject_MockObject $session */
+    /** @var SessionInterface|\PHPUnit\Framework\MockObject\MockObject $session */
     $session = $this->getMockForAbstractClass(SessionInterface::class);
     $session->method('get')
       ->willReturn($value);
@@ -30,7 +30,7 @@ class SessionTrackerTest extends UnitTestCase {
   public function testSetNotNull() {
     $value = $this->randomMachineName();
 
-    /** @var SessionInterface|\PHPUnit_Framework_MockObject_MockObject $session */
+    /** @var SessionInterface|\PHPUnit\Framework\MockObject\MockObject $session */
     $session = $this->getMockForAbstractClass(SessionInterface::class);
     $session->method('set')
       ->with($this->equalTo(SessionTracker::VARNAME), $this->equalTo($value))
@@ -50,7 +50,7 @@ class SessionTrackerTest extends UnitTestCase {
   public function testClear() {
     $value = $this->randomMachineName();
 
-    /** @var SessionInterface|\PHPUnit_Framework_MockObject_MockObject $session */
+    /** @var SessionInterface|\PHPUnit\Framework\MockObject\MockObject $session */
     $session = $this->getMockForAbstractClass(SessionInterface::class);
     $session->method('remove')
       ->with($this->equalTo(SessionTracker::VARNAME))
