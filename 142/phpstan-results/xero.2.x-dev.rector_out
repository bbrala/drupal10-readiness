modules/contrib/xero/examples/src/Controller/ExampleController.php
modules/contrib/xero/src/Form/SettingsForm.php
modules/contrib/xero/src/Plugin/DataType/JournalLine.php
modules/contrib/xero/src/Plugin/Field/FieldFormatter/XeroReferenceFormatter.php
modules/contrib/xero/src/TypedData/Definition/ExpenseDefinition.php
modules/contrib/xero/src/TypedData/Definition/UserDefinition.php
modules/contrib/xero/src/Plugin/DataType/LineItem.php
modules/contrib/xero/src/Plugin/DataType/Link.php
modules/contrib/xero/tests/src/Kernel/Normalizer/XeroDeserializationTest.php
modules/contrib/xero/tests/src/Unit/Form/XeroFormBuilderTest.php
modules/contrib/xero/examples/src/Form/GetItemForm.php
modules/contrib/xero/tests/src/Unit/XeroDataTestTrait.php
modules/contrib/xero/src/TypedData/Definition/InvoiceDefinition.php
modules/contrib/xero/src/Plugin/DataType/LinkedTransaction.php
modules/contrib/xero/src/Plugin/DataType/Organisation.php
modules/contrib/xero/src/Plugin/DataType/Payment.php
modules/contrib/xero/src/Plugin/DataType/Phone.php
modules/contrib/xero/src/Plugin/DataType/Receipt.php
modules/contrib/xero/src/TypedData/Definition/XeroDefinitionInterface.php
modules/contrib/xero/src/TypedData/XeroComplexItemInterface.php
modules/contrib/xero/src/TypedData/XeroItemInterface.php
modules/contrib/xero/examples/src/Form/HelperForm.php
modules/contrib/xero/src/TypedData/XeroTypeInterface.php
modules/contrib/xero/src/XeroClientFactory.php
modules/contrib/xero/src/TypedData/Definition/InvoiceReminderDefinition.php
modules/contrib/xero/src/TypedData/Definition/ItemDefinition.php
modules/contrib/xero/src/TypedData/Definition/JournalDefinition.php
modules/contrib/xero/src/TypedData/Definition/JournalLineDefinition.php
modules/contrib/xero/src/Form/XeroFormBuilder.php
modules/contrib/xero/src/TypedData/Definition/LineItemDefinition.php
modules/contrib/xero/src/Plugin/DataType/RepeatingInvoice.php
modules/contrib/xero/examples/src/Form/InvoiceForm.php
modules/contrib/xero/src/Plugin/DataType/Schedule.php
modules/contrib/xero/src/Plugin/DataType/TaxComponent.php
modules/contrib/xero/src/XeroItemManager.php
modules/contrib/xero/src/Plugin/DataType/TaxRate.php
modules/contrib/xero/src/Plugin/DataType/TrackingCategory.php
modules/contrib/xero/src/Plugin/DataType/TrackingCategoryOption.php
modules/contrib/xero/src/Plugin/DataType/TrackingOption.php
modules/contrib/xero/src/TypedData/Definition/LinkDefinition.php
modules/contrib/xero/src/TypedData/Definition/LinkedTransactionDefinition.php
modules/contrib/xero/src/Plugin/DataType/User.php
modules/contrib/xero/src/Plugin/Field/FieldType/XeroReference.php
modules/contrib/xero/src/Plugin/DataType/XeroComplexItemBase.php
modules/contrib/xero/src/TypedData/Definition/OrganisationDefinition.php
modules/contrib/xero/src/Plugin/DataType/XeroItemBase.php
modules/contrib/xero/tests/src/Kernel/Normalizer/XeroListNestedNormalizerTest.php
modules/contrib/xero/tests/src/Unit/Normalizer/XeroNormalizerTest.php
modules/contrib/xero/src/Plugin/Field/FieldWidget/XeroAutocompleteWidget.php
modules/contrib/xero/src/Normalizer/XeroListNormalizer.php
modules/contrib/xero/tests/src/Unit/XeroQueryClientTest.php
modules/contrib/xero/tests/src/Kernel/Normalizer/XeroNestedNormalizerTest.php
modules/contrib/xero/src/Plugin/DataType/XeroItemList.php
modules/contrib/xero/src/Plugin/DataType/XeroTypeBase.php
modules/contrib/xero/src/XeroItemManagerInterface.php
modules/contrib/xero/src/XeroNullClient.php
modules/contrib/xero/src/TypedData/Definition/PaymentDefinition.php
modules/contrib/xero/examples/xero_example.module
modules/contrib/xero/src/Controller/XeroAuthorizeController.php
modules/contrib/xero/src/XeroQuery.php
modules/contrib/xero/src/Normalizer/XeroNormalizer.php
modules/contrib/xero/tests/src/Unit/XeroQueryConditionTest.php
modules/contrib/xero/tests/src/Unit/XeroQueryFactoryTest.php
modules/contrib/xero/src/Plugin/Field/FieldWidget/XeroTextfieldWidget.php
modules/contrib/xero/src/TypedData/Definition/PhoneDefinition.php
modules/contrib/xero/src/TypedData/Definition/ReceiptDefinition.php
modules/contrib/xero/tests/src/Unit/XeroQueryOrderTest.php
modules/contrib/xero/tests/src/Unit/Plugin/DataType/AccountTest.php
modules/contrib/xero/src/TypedData/Definition/RepeatingInvoiceDefinition.php
modules/contrib/xero/tests/src/Unit/XeroQuerySettersTest.php
modules/contrib/xero/src/TypedData/Definition/ScheduleDefinition.php
modules/contrib/xero/src/XeroQueryFactory.php
modules/contrib/xero/src/TypedData/Definition/TaxComponentDefinition.php
modules/contrib/xero/src/XeroTokenManager.php
modules/contrib/xero/src/Plugin/DataType/Account.php
modules/contrib/xero/src/TypedData/Definition/TaxRateDefinition.php
modules/contrib/xero/tests/src/Kernel/Plugin/DataType/XeroDataTypeTest.php
modules/contrib/xero/src/Plugin/Validation/Constraint/XeroChoiceConstraint.php
modules/contrib/xero/src/Plugin/Validation/Constraint/XeroChoiceConstraintValidator.php
modules/contrib/xero/src/Plugin/Validation/Constraint/XeroGuidConstraint.php
modules/contrib/xero/src/Plugin/Validation/Constraint/XeroGuidConstraintValidator.php
modules/contrib/xero/src/Controller/XeroAutocompleteController.php
modules/contrib/xero/src/TaxTypeTrait.php
modules/contrib/xero/src/TypedData/Definition/AccountDefinition.php
modules/contrib/xero/src/Plugin/DataType/Address.php
modules/contrib/xero/src/TypedData/Definition/TrackingCategoryDefinition.php
modules/contrib/xero/src/TypedData/Definition/TrackingCategoryOptionDefinition.php
modules/contrib/xero/src/TypedData/Definition/TrackingOptionDefinition.php
modules/contrib/xero/src/Plugin/DataType/BankTransaction.php
modules/contrib/xero/src/TypedData/Definition/AddressDefinition.php
modules/contrib/xero/tests/src/Unit/Plugin/DataType/AddressTest.php
modules/contrib/xero/tests/src/Unit/Plugin/DataType/ContactTest.php
modules/contrib/xero/src/Exception/XeroCsrfTokenException.php
modules/contrib/xero/src/Exception/XeroInvalidConfigurationException.php
modules/contrib/xero/src/Form/DefaultSettingsForm.php
modules/contrib/xero/src/TypedData/Definition/BankTransactionDefinition.php
modules/contrib/xero/tests/src/Kernel/XeroItemManagerTest.php
modules/contrib/xero/src/XeroTokenManagerInterface.php
modules/contrib/xero/src/TypedData/Definition/BankTransferDefinition.php
modules/contrib/xero/src/Plugin/DataType/BankTransfer.php
modules/contrib/xero/src/Plugin/DataType/BrandingTheme.php
modules/contrib/xero/src/Plugin/DataType/Contact.php
modules/contrib/xero/src/TypedData/Definition/BrandingThemeDefinition.php
modules/contrib/xero/src/Plugin/DataType/ContactGroup.php
modules/contrib/xero/src/TypedData/Definition/ContactDefinition.php
modules/contrib/xero/src/Plugin/DataType/CreditNote.php
modules/contrib/xero/src/TypedData/Definition/ContactGroupDefinition.php
modules/contrib/xero/src/TypedData/Definition/CreditDefinition.php
modules/contrib/xero/tests/src/Unit/Plugin/DataType/EmployeeTest.php
modules/contrib/xero/src/Plugin/DataType/Currency.php
modules/contrib/xero/tests/src/Unit/XeroQueryTestBase.php
modules/contrib/xero/src/Plugin/DataType/Detail.php
modules/contrib/xero/src/Plugin/DataType/Employee.php
modules/contrib/xero/src/TypedData/Definition/CurrencyDefinition.php
modules/contrib/xero/src/Plugin/DataType/Expense.php
modules/contrib/xero/src/TypedData/Definition/DetailDefinition.php
modules/contrib/xero/src/TypedData/Definition/EmployeeDefinition.php
modules/contrib/xero/tests/src/Unit/Plugin/DataType/JournalLineTest.php
modules/contrib/xero/tests/src/Unit/Plugin/DataType/LineItemTest.php
modules/contrib/xero/tests/src/Unit/Plugin/DataType/PhoneTest.php
modules/contrib/xero/tests/src/Unit/XeroQueryValidateTest.php
modules/contrib/xero/src/Plugin/DataType/Invoice.php
modules/contrib/xero/tests/src/Unit/Plugin/DataType/TestBase.php
modules/contrib/xero/src/Plugin/DataType/InvoiceReminder.php
modules/contrib/xero/src/Plugin/DataType/Item.php
modules/contrib/xero/tests/src/Unit/XeroTokenManagerTest.php
modules/contrib/xero/src/Plugin/DataType/Journal.php
modules/contrib/xero/tests/src/Unit/Plugin/DataType/UserTest.php
modules/contrib/xero/tests/src/Unit/Plugin/DataType/XeroComplexItemBaseTest.php
modules/contrib/xero/tests/src/Unit/Plugin/Field/FieldFormatter/XeroReferenceFormatterTest.php
modules/contrib/xero/tests/src/Kernel/XeroItemTest.php
modules/contrib/xero/xero.install
modules/contrib/xero/tests/src/Kernel/XeroQueryExecuteTest.php
modules/contrib/xero/xero.module
modules/contrib/xero/tests/src/Unit/Plugin/Field/FieldType/XeroReferenceTest.php
modules/contrib/xero/xero.theme.inc
modules/contrib/xero/tests/src/Unit/Plugin/Field/FieldWidget/WidgetTestBase.php
modules/contrib/xero/tests/src/Kernel/XeroQueryFactoryTest.php
modules/contrib/xero/tests/src/Traits/XeroGuidTrait.php
modules/contrib/xero/tests/src/Traits/XeroResponseTrait.php
modules/contrib/xero/tests/src/Traits/XeroTokenTrait.php
modules/contrib/xero/tests/src/Unit/Controller/XeroAuthorizeControllerTest.php
modules/contrib/xero/tests/src/Unit/Plugin/Field/FieldWidget/XeroAutocompleteWidgetTest.php
modules/contrib/xero/tests/src/Unit/Plugin/Field/FieldWidget/XeroTextfieldTest.php
modules/contrib/xero/tests/src/Unit/Plugin/Validation/Constraint/XeroGuidConstraintValidatorTest.php
modules/contrib/xero/tests/src/Unit/TypedData/XeroDefinitionTest.php
modules/contrib/xero/tests/src/Unit/XeroClientFactoryTest.php
modules/contrib/xero/tests/src/Unit/Controller/XeroAutocompleteControllerTest.php
modules/contrib/xero/tests/src/Unit/Form/SettingsFormTest.php

25 files with changes
=====================

1) modules/contrib/xero/src/Plugin/Field/FieldFormatter/XeroReferenceFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\xero\Plugin\Field\FieldFormatter;

+use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     return new static(
       $plugin_id,
       $plugin_definition,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/xero/xero.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
+use Drupal\Core\Utility\UpdateException;
 /**
  * @file
  * Xero installation routines.
@@ @@
       $client = \Drupal::service('xero.client');
     }
     catch
-      (\Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException $e) {
+      (ServiceNotFoundException $e) {
       $client = FALSE;
     }

@@ @@
   }
   catch (\Exception $e) {
     watchdog_exception('xero', $e);
-    throw new \Drupal\Core\Utility\UpdateException('Failed to remove OAuth1 configuration.');
+    throw new UpdateException('Failed to remove OAuth1 configuration.');
   }

   return t('Removed Xero OAuth1 configuration. You must visit the Xero configuration page to configure OAuth2 credentials for your application.');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/xero/tests/src/Unit/XeroTokenManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\xero\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\xero\XeroTokenManager;
@@ @@
  */
 class XeroTokenManagerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Configuration factory mock.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $config = $this->getMockBuilder('\Drupal\Core\Config\Config')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock('\Drupal\Core\Config\Config');
     $config->expects($this->any())
       ->method('set')
       ->will($this->returnSelf());
@@ @@
     $userDataProphet = $this->prophesize('\Drupal\user\UserDataInterface');
     $keyValueProphet = $this->prophesize('\Drupal\Core\KeyValueStore\KeyValueStoreInterface');

-    $config = $this->getMockBuilder('\Drupal\Core\Config\Config')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock('\Drupal\Core\Config\Config');

     if ($account !== NULL) {
       $userDataProphet
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/xero/tests/src/Unit/XeroQueryTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\xero\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Logger\LoggerChannelFactory;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\serialization\Normalizer\ComplexDataNormalizer;
@@ @@
  */
 abstract class XeroQueryTestBase extends UnitTestCase {

+  use ProphecyTrait;
   use XeroGuidTrait;

   /**
@@ @@
    */
   protected $query;

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Setup a Null cache backend.
-    $this->cache = $this->getMockBuilder('Drupal\Core\Cache\NullBackend')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->cache = $this->createMock('Drupal\Core\Cache\NullBackend');

     // Setup LoggerChannelFactory.
     $loggerProphet = $this->prophesize('\Psr\Log\LoggerInterface');
@@ @@
     $this->loggerFactory->addLogger($loggerProphet->reveal());

     // Mock the Typed Data Manager.
-    $this->typedDataManager = $this->getMockBuilder('Drupal\Core\TypedData\TypedDataManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->typedDataManager = $this->createMock('Drupal\Core\TypedData\TypedDataManager');

     // Mock XeroClient.
-    $this->client = $this->getMockBuilder('\Radcliffe\Xero\XeroClient')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->client = $this->createMock('\Radcliffe\Xero\XeroClient');

     // Setup the container.
     $container = new ContainerBuilder();
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/xero/tests/src/Unit/XeroQueryFactoryTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\xero\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\NullBackend;
 use Drupal\Tests\UnitTestCase;
 use Drupal\xero\XeroQueryFactory;
@@ @@
  */
 class XeroQueryFactoryTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Xero client mock.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $clientProphet = $this->prophesize('\Radcliffe\Xero\XeroClient');
     $this->xeroClient = $clientProphet->reveal();
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/xero/tests/src/Unit/XeroQueryClientTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\xero\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Cache\NullBackend;
 use Drupal\xero\XeroQuery;

@@ @@
  */
 class XeroQueryClientTest extends XeroQueryTestBase {

+  use ProphecyTrait;
   /**
    * Provider for client FALSE or with mocked client.
    *
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/xero/tests/src/Unit/XeroClientFactoryTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\xero\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\xero\Traits\XeroGuidTrait;
 use Drupal\Tests\xero\Traits\XeroTokenTrait;
 use Drupal\xero\XeroClientFactory;
@@ @@
  */
 class XeroClientFactoryTest extends UnitTestCase {

+  use ProphecyTrait;
   use XeroTokenTrait;
   use XeroGuidTrait;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->factory = new XeroClientFactory();
   }
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/xero/tests/src/Unit/TypedData/XeroDefinitionTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Typed Data Manager setup.
-    $this->typedDataManager = $this->getMockBuilder('\Drupal\Core\TypedData\TypedDataManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->typedDataManager = $this->createMock('\Drupal\Core\TypedData\TypedDataManager');

     // Validation constraint manager setup.
-    $validation_constraint_manager = $this->getMockBuilder('\Drupal\Core\Validation\ConstraintManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $validation_constraint_manager = $this->createMock('\Drupal\Core\Validation\ConstraintManager');
     $validation_constraint_manager->expects($this->any())
       ->method('create')
       ->willReturn([]);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/xero/tests/src/Unit/Plugin/Validation/Constraint/XeroGuidConstraintValidatorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\xero\Unit\Plugin\Validation\Constraint;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Tests\xero\Traits\XeroGuidTrait;
 use Drupal\xero\Plugin\Validation\Constraint\XeroGuidConstraint;
@@ @@
  */
 class XeroGuidConstraintValidatorTest extends UnitTestCase {

+  use ProphecyTrait;
   use XeroGuidTrait;

   protected $validator;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $translatorProphet = $this->prophesize('\Symfony\Component\Translation\TranslatorInterface');
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/xero/tests/src/Unit/Plugin/Field/FieldWidget/WidgetTestBase.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // DrupalWTF: t()
@@ @@
     $container = new ContainerBuilder();

     // Mock Typed Data Manager
-    $this->typedDataManager = $this->getMockBuilder('\Drupal\Core\TypedData\TypedDataManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->typedDataManager = $this->createMock('\Drupal\Core\TypedData\TypedDataManager');
     $this->typedDataManager->expects($this->any())
       ->method('getDefaultConstraints')
       ->willReturn([]);
@@ @@
       ->will($this->returnValueMap($this->getDefinitionMap()));

     // Mock Field Type Plugin Manager
-    $this->pluginManager = $this->getMockBuilder('\Drupal\Core\Field\FieldTypePluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->pluginManager = $this->createMock('\Drupal\Core\Field\FieldTypePluginManager');
     $this->pluginManager->expects($this->any())
       ->method('getDefaultStorageSettings')
       ->with('xero_reference')
@@ @@
       ->willReturn([]);

     // Validation constraint manager setup.
-    $validation_constraint_manager = $this->getMockBuilder('\Drupal\Core\Validation\ConstraintManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $validation_constraint_manager = $this->createMock('\Drupal\Core\Validation\ConstraintManager');
     $validation_constraint_manager->expects($this->any())
       ->method('create')
       ->willReturn([]);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/xero/tests/src/Unit/Plugin/Field/FieldType/XeroReferenceTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     require_once realpath($this->root) . '/core/includes/bootstrap.inc';

     // Set the typed data manager service after mocking (again).
-    $this->typedDataManager = $this->getMockBuilder('\Drupal\Core\TypedData\TypedDataManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->typedDataManager = $this->createMock('\Drupal\Core\TypedData\TypedDataManager');
     $this->typedDataManager->expects($this->any())
       ->method('getDefaultConstraints')
       ->willReturn([]);
     // Validation constraint manager setup.
-    $this->validation_constraint_manager = $this->getMockBuilder('\Drupal\Core\Validation\ConstraintManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->validation_constraint_manager = $this->createMock('\Drupal\Core\Validation\ConstraintManager');
     $this->validation_constraint_manager->expects($this->any())
       ->method('create')
       ->willReturn([]);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/xero/tests/src/Unit/Plugin/Field/FieldFormatter/XeroReferenceFormatterTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // DrupalWTF. t().
@@ @@
     $container = new ContainerBuilder();

     // Mock Typed Data Manager
-    $this->typedDataManager = $this->getMockBuilder('\Drupal\Core\TypedData\TypedDataManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->typedDataManager = $this->createMock('\Drupal\Core\TypedData\TypedDataManager');
     $this->typedDataManager->expects($this->any())
       ->method('getDefaultConstraints')
       ->willReturn([]);
@@ @@
       ));

     // Mock Field Type Plugin Manager
-    $this->pluginManager = $this->getMockBuilder('\Drupal\Core\Field\FieldTypePluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->pluginManager = $this->createMock('\Drupal\Core\Field\FieldTypePluginManager');
     $this->pluginManager->expects($this->any())
       ->method('getDefaultStorageSettings')
       ->with('xero_reference')
@@ @@
       ->willReturn([]);

     // Validation constraint manager setup.
-    $validation_constraint_manager = $this->getMockBuilder('\Drupal\Core\Validation\ConstraintManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $validation_constraint_manager = $this->createMock('\Drupal\Core\Validation\ConstraintManager');
     $validation_constraint_manager->expects($this->any())
       ->method('create')
       ->willReturn([]);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/xero/tests/src/Unit/Plugin/DataType/UserTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create data type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/xero/tests/src/Unit/Plugin/DataType/TestBase.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     // Typed Data Manager setup.
-    $this->typedDataManager = $this->getMockBuilder('\Drupal\Core\TypedData\TypedDataManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->typedDataManager = $this->createMock('\Drupal\Core\TypedData\TypedDataManager');

     $this->typedDataManager->expects($this->any())
       ->method('getDefinition')
@@ @@
       ->willReturn([]);

     // Validation constraint manager setup.
-    $validation_constraint_manager = $this->getMockBuilder('\Drupal\Core\Validation\ConstraintManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $validation_constraint_manager = $this->createMock('\Drupal\Core\Validation\ConstraintManager');
     $validation_constraint_manager->expects($this->any())
       ->method('create')
       ->willReturn([]);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/xero/tests/src/Unit/Plugin/DataType/PhoneTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create data type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/xero/tests/src/Unit/Plugin/DataType/EmployeeTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create data type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/xero/tests/src/Unit/Plugin/DataType/ContactTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create data type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/xero/tests/src/Unit/Plugin/DataType/AccountTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create data type.
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/xero/tests/src/Unit/Normalizer/XeroNormalizerTest.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Account data definition setup.
     $accountDefinition = AccountDefinition::create('xero_account');
     $listDefinition = ListDataDefinition::createFromDataType('xero_account');
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/xero/tests/src/Unit/Form/XeroFormBuilderTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create some data definitions.
@@ @@
     $phoneListDefinition = new ListDataDefinition([], $phoneDefinition);

     // Mock Typed Data Manager.
-    $typedDataManager = $this->getMockBuilder('\Drupal\Core\TypedData\TypedDataManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $typedDataManager = $this->createMock('\Drupal\Core\TypedData\TypedDataManager');
     $typedDataManager->expects($this->any())
       ->method('getDefaultConstraints')
       ->willReturn([]);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/xero/tests/src/Unit/Form/SettingsFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\xero\Unit\Form;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Form\FormState;
 use Drupal\Tests\Core\Form\FormTestBase;
@@ @@
  */
 class SettingsFormTest extends FormTestBase {

+  use ProphecyTrait;
   use XeroTokenTrait;

   /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->consumerId = $this->createToken();
@@ @@
     $this->consumerSecret = $this->createToken();

     // Mock config objects with mock objects because prophecy is opinionated.
-    $immutableConfig = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $immutableConfig = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
     $immutableConfig->expects($this->any())
       ->method('get')
       ->will($this->returnValueMap([
@@ @@
         'oauth.consumer_secret' => $this->consumerSecret,
       ]));

-    $mutableConfig = $this->getMockBuilder('\Drupal\Core\Config\Config')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mutableConfig = $this->createMock('\Drupal\Core\Config\Config');
     $mutableConfig->expects($this->any())
       ->method('set')
       ->will($this->returnSelf());
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/xero/tests/src/Unit/Controller/XeroAutocompleteControllerTest.php:216

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Setup TypedDataManager mock.
     // Typed Data Manager setup.
-    $this->typedDataManager = $this->getMockBuilder('\Drupal\Core\TypedData\TypedDataManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->typedDataManager = $this->createMock('\Drupal\Core\TypedData\TypedDataManager');

     // Setup Xero Query mock.
-    $this->xeroQuery = $this->getMockBuilder('\Drupal\xero\XeroQuery')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->xeroQuery = $this->createMock('\Drupal\xero\XeroQuery');

     // Mock the container.
     $this->container = new ContainerBuilder();
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/xero/tests/src/Unit/Controller/XeroAuthorizeControllerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\xero\Unit\Form;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Tests\Core\Form\FormTestBase;
 use Drupal\Tests\xero\Traits\XeroTokenTrait;
@@ @@
  */
 class XeroAuthorizeControllerTest extends FormTestBase {

+  use ProphecyTrait;
   use XeroTokenTrait;

   /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->consumerId = $this->createToken();
@@ @@
     $this->crsfToken = $this->createToken();

     // Mock config objects with mock objects because prophecy is opinionated.
-    $immutableConfig = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $immutableConfig = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
     $immutableConfig->expects($this->any())
       ->method('get')
       ->will($this->returnValueMap([
@@ @@
         'oauth.consumer_secret' => $this->consumerSecret,
       ]));

-    $mutableConfig = $this->getMockBuilder('\Drupal\Core\Config\Config')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mutableConfig = $this->createMock('\Drupal\Core\Config\Config');
     $mutableConfig->expects($this->any())
       ->method('set')
       ->will($this->returnSelf());
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/xero/tests/src/Kernel/XeroQueryExecuteTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $this->client = $this->getMockBuilder('\Radcliffe\Xero\XeroClient')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->client = $this->createMock('\Radcliffe\Xero\XeroClient');

     $this->query = new XeroQuery($this->client, \Drupal::service('serializer'), \Drupal::service('typed_data_manager'), \Drupal::service('logger.factory'), \Drupal::service('cache.xero_query'));
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/xero/tests/src/Kernel/XeroItemManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\xero\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\xero\Plugin\DataType\XeroItemList;
 use Drupal\xero\TypedData\XeroComplexItemInterface;
@@ @@
  */
 class XeroItemManagerTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->xeroQueryFactory = $this->createMock(XeroQueryFactory::class);
@@ @@
    * @param \Drupal\xero\TypedData\XeroComplexItemInterface|null $item
    *   The item to expect to be set as the query's data.
    *
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    *   A mock Xero query.
    */
   protected function buildMockQuery($type, $result, $method = NULL, $item = NULL) {
    ----------- end diff -----------

Applied rules:
 * AddProphecyTraitRector (https://github.com/sebastianbergmann/phpunit/issues/4142)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 25 files have been changed by Rector                                      

