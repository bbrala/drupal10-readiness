modules/contrib/geshifilter/codesnippetgeshi/codesnippetgeshi.module
modules/contrib/geshifilter/codesnippetgeshi/src/Controller/GeshiController.php
modules/contrib/geshifilter/geshifilter.install
modules/contrib/geshifilter/codesnippetgeshi/src/Plugin/CKEditorPlugin/AjaxCKEditorPlugin.php
modules/contrib/geshifilter/codesnippetgeshi/src/Plugin/CKEditorPlugin/CodeSnippetCKEditorButton.php
modules/contrib/geshifilter/codesnippetgeshi/src/Plugin/CKEditorPlugin/CodeSnippetGeshiCKEditorButton.php
modules/contrib/geshifilter/codesnippetgeshi/src/Plugin/CKEditorPlugin/XMLCKEditorPlugin.php
modules/contrib/geshifilter/geshi-extra/drupal5.php
modules/contrib/geshifilter/geshifilter.module
modules/contrib/geshifilter/src/Controller/GeshiFilterConflicts.php
modules/contrib/geshifilter/src/Form/GeshiFilterLanguagesForm.php
modules/contrib/geshifilter/geshi-extra/drupal6.php
modules/contrib/geshifilter/src/Form/GeshiFilterSettingsForm.php
modules/contrib/geshifilter/geshifield/geshifield.install
modules/contrib/geshifilter/geshifield/geshifield.module
modules/contrib/geshifilter/geshifield/src/Plugin/Field/FieldFormatter/GeshiFieldDefaultFormatter.php
modules/contrib/geshifilter/src/GeshiFilter.php
modules/contrib/geshifilter/geshifield/src/Plugin/Field/FieldType/GeshiFieldItem.php
modules/contrib/geshifilter/geshifield/src/Plugin/Field/FieldWidget/GeshiFieldDefaultWidget.php
modules/contrib/geshifilter/geshifield/tests/src/Functional/GeshiFieldTest.php
modules/contrib/geshifilter/src/GeshiFilterCss.php
modules/contrib/geshifilter/src/GeshiFilterProcess.php
modules/contrib/geshifilter/src/Plugin/Filter/GeshiFilterFilter.php
modules/contrib/geshifilter/tests/src/Functional/GeshiFilterAdministrationTest.php
modules/contrib/geshifilter/tests/src/Functional/GeshiFilterCssTest.php
modules/contrib/geshifilter/tests/src/Functional/GeshiFilterTest.php

10 files with changes
=====================

1) modules/contrib/geshifilter/geshifield/tests/src/Functional/GeshiFieldTest.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * Code run before each and every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create object with configuration.
@@ @@
     foreach ($filters as $filter) {
       $edit['filters[' . $filter . '][status]'] = TRUE;
     }
-    $this->drupalPostForm('admin/config/content/formats/add', $edit, t('Save configuration'));
-    $this->assertRaw(t('Added text format %format.', ['%format' => $edit['name']]), 'New filter created.');
+    $this->drupalGet('admin/config/content/formats/add');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->responseContains(t('Added text format %format.', ['%format' => $edit['name']]));
     $this->drupalGet('admin/config/content/formats');
   }

@@ @@
       'field_geshi[0][sourcecode]' => $sourcecode,
       'field_geshi[0][language]' => $language,
     ];
-    $this->drupalPostForm('node/add/geshifilter_content_type', $node, 'Save');
+    $this->drupalGet('node/add/geshifilter_content_type');
+    $this->submitForm($node, 'Save');
     $this->drupalGet('node/1');
   }

@@ @@
     $edit['new_storage_type'] = $type;
     $edit['label'] = $label;
     $edit['field_name'] = $name;
-    $this->drupalPostForm('admin/structure/types/manage/geshifilter_content_type/fields/add-field', $edit, 'Save and continue');
+    $this->drupalGet('admin/structure/types/manage/geshifilter_content_type/fields/add-field');
+    $this->submitForm($edit, 'Save and continue');

     // Number of values in field, keep the default, 1.
-    $this->drupalPostForm(NULL, $values, 'Save field settings');
+    $this->submitForm($values, 'Save field settings');

     // Settings for this instance of field, keep the default.
-    $this->drupalPostForm(NULL, $instance, 'Save settings');
+    $this->submitForm($instance, 'Save settings');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/geshifilter/codesnippetgeshi/src/Plugin/CKEditorPlugin/CodeSnippetGeshiCKEditorButton.php:22

    ---------- begin diff ----------
@@ @@
     return [
       'CodeSnippet' => [
         'label' => t('Add a button to use codesnippetgeshi plugin.'),
-        'image' => drupal_get_path('module', 'codesnippetgeshi') . '/icons/codesnippet.png',
+        'image' => \Drupal::service('extension.list.module')->getPath('codesnippetgeshi') . '/icons/codesnippet.png',
       ],
     ];
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/geshifilter/codesnippetgeshi/codesnippetgeshi.module:41

    ---------- begin diff ----------
@@ @@
  */
 function codesnippetgeshi_ckeditor_css_alter(array &$css, Editor $editor) {
   // Add a css file to use inside ckeditor.
-  $css[] = drupal_get_path('module', 'codesnippetgeshi') . '/css/style-ckeditor.css';
+  $css[] = \Drupal::service('extension.list.module')->getPath('codesnippetgeshi') . '/css/style-ckeditor.css';
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


4) modules/contrib/geshifilter/tests/src/Functional/GeshiFilterTest.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * Code run before each and every test method.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Restore node to default value.
@@ @@
     foreach ($filters as $filter) {
       $edit['filters[' . $filter . '][status]'] = TRUE;
     }
-    $this->drupalPostForm('admin/config/content/formats/add', $edit, t('Save configuration'));
-    $this->assertRaw(t('Added text format %format.', ['%format' => $edit['name']]), 'New filter created.');
+    $this->drupalGet('admin/config/content/formats/add');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->responseContains(t('Added text format %format.', ['%format' => $edit['name']]));
     $this->drupalGet('admin/config/content/formats');
   }

@@ @@
         $source_code = GeshiFilterProcess::geshiProcess($source_code, $lang, $line_numbering, $linenumbers_start, $inline_mode);
       }
       if ($invert) {
-        $this->assertNoRaw($source_code, $description);
+        $this->assertSession()->responseNotContains($source_code);
       }
       else {
-        $this->assertRaw($source_code, $description);
+        $this->assertSession()->responseContains($source_code);
       }
     }
   }
@@ @@
     $this->drupalCreateNode($node);
     $this->drupalGet('node/1');
     // The same string must be on page, not double encoded.
-    $this->assertRaw('&quot;&lt;b&gt;Hi&lt;/b&gt;&quot;', 'The code is not double encoded.');
+    $this->assertSession()->responseContains('&quot;&lt;b&gt;Hi&lt;/b&gt;&quot;');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoRawRector
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/geshifilter/tests/src/Functional/GeshiFilterCssTest.php:54

    ---------- begin diff ----------
@@ @@
   /**
    * Set up the tests and create the users.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create object with configuration.
@@ @@
   public function testCss() {
     // Test if we can generate the css.
     $this->drupalGet('admin/config/content/formats/geshifilter/generate_css');
-    $this->assertRaw('GeSHi Dynamically Generated Stylesheet', 'Test for geshifilter generate css');
+    $this->assertSession()->responseContains('GeSHi Dynamically Generated Stylesheet');
   }

   /**
@@ @@
     $form_values = [
       'css_mode' => 1,
     ];
-    $this->drupalPostForm('admin/config/content/formats/geshifilter', $form_values, t('Save configuration'));
+    $this->drupalGet('admin/config/content/formats/geshifilter');
+    $this->submitForm($form_values, t('Save configuration'));

     // Create the node and read it.
     $this->drupalCreateNode($node);
@@ @@
     $this->drupalGet('node/1');

     // Test if we have only geshifilter.css.
-    $this->assertRaw('/assets/css/geshifilter.css', 'The CSS file /assets/css/geshifilter.css is present.');
-    $this->assertNoRaw('/geshi/geshifilter-languages.css', 'The CSS file /geshi/geshifilter-languages.css is present.');
+    $this->assertSession()->responseContains('/assets/css/geshifilter.css');
+    $this->assertSession()->responseNotContains('/geshi/geshifilter-languages.css');
   }

   /**
@@ @@
     $form_values = [
       'css_mode' => 2,
     ];
-    $this->drupalPostForm('admin/config/content/formats/geshifilter', $form_values, t('Save configuration'));
+    $this->drupalGet('admin/config/content/formats/geshifilter');
+    $this->submitForm($form_values, t('Save configuration'));

     // Create the node and read it.
     $this->drupalCreateNode($node);
@@ @@
     $this->drupalGet('node/1');

     // Test if we have both css.
-    $this->assertRaw('/assets/css/geshifilter.css', 'The CSS file /assets/css/geshifilter.css is present.');
-    $this->assertRaw('/geshi/geshifilter-languages.css', 'The CSS file /geshi/geshifilter-languages.css is present.');
+    $this->assertSession()->responseContains('/assets/css/geshifilter.css');
+    $this->assertSession()->responseContains('/geshi/geshifilter-languages.css');
   }

   /**
@@ @@
     $form_values = [
       'css_mode' => 3,
     ];
-    $this->drupalPostForm('admin/config/content/formats/geshifilter', $form_values, t('Save configuration'));
+    $this->drupalGet('admin/config/content/formats/geshifilter');
+    $this->submitForm($form_values, t('Save configuration'));

     // Create the node and read it.
     $this->drupalCreateNode($node);
@@ @@
     $this->drupalGet('node/1');

     // Test if we have both css.
-    $this->assertNoRaw('/assets/css/geshifilter.css', 'The CSS file /assets/css/geshifilter.css is present.');
-    $this->assertNoRaw('/geshi/geshifilter-languages.css', 'The CSS file /geshi/geshifilter-languages.css is present.');
+    $this->assertSession()->responseNotContains('/assets/css/geshifilter.css');
+    $this->assertSession()->responseNotContains('/geshi/geshifilter-languages.css');
   }

   /**
@@ @@
     foreach ($filters as $filter) {
       $edit['filters[' . $filter . '][status]'] = TRUE;
     }
-    $this->drupalPostForm('admin/config/content/formats/add', $edit, t('Save configuration'));
-    $this->assertRaw(t('Added text format %format.', ['%format' => $edit['name']]), 'New filter created.');
+    $this->drupalGet('admin/config/content/formats/add');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->responseContains(t('Added text format %format.', ['%format' => $edit['name']]));
     $this->drupalGet('admin/config/content/formats');
   }
    ----------- end diff -----------

Applied rules:
 * AssertNoRawRector
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/geshifilter/tests/src/Functional/GeshiFilterAdministrationTest.php:53

    ---------- begin diff ----------
@@ @@
   /**
    * Set up the tests and create the users.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create object with configuration.
@@ @@
     $form_values = [
       'language[php][tags]' => 'php generictag',
     ];
-    $this->drupalPostForm('admin/config/content/formats/geshifilter/languages/all', $form_values, t('Save configuration'));
-    $this->assertText(t('The language tags should differ between languages and from the generic tags.'), t('Language tags should differ from generic tags (with generic tag options)'));
+    $this->drupalGet('admin/config/content/formats/geshifilter/languages/all');
+    $this->submitForm($form_values, t('Save configuration'));
+    $this->assertSession()->pageTextContains(t('The language tags should differ between languages and from the generic tags.'));

     // Language tags should differ between languages.
     $form_values = [
@@ @@
       'language[php][tags]' => 'php languagetag',
       'language[python][tags]' => 'languagetag python',
     ];
-    $this->drupalPostForm('admin/config/content/formats/geshifilter/languages/all', $form_values, t('Save configuration'));
-    $this->assertText(t('The language tags should differ between languages and from the generic tags.'), t('Language tags should differ between languages (with generic tag options)'));
+    $this->drupalGet('admin/config/content/formats/geshifilter/languages/all');
+    $this->submitForm($form_values, t('Save configuration'));
+    $this->assertSession()->pageTextContains(t('The language tags should differ between languages and from the generic tags.'));

     // Second round: with format specific tag options.
     // $this->config->set('use_format_specific_options', TRUE);
@@ @@
     foreach ($filters as $filter) {
       $edit['filters[' . $filter . '][status]'] = TRUE;
     }
-    $this->drupalPostForm('admin/config/content/formats/add', $edit, t('Save configuration'));
-    $this->assertRaw(t('Added text format %format.', ['%format' => $edit['name']]), 'New filter created.');
+    $this->drupalGet('admin/config/content/formats/add');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->responseContains(t('Added text format %format.', ['%format' => $edit['name']]));
     $this->drupalGet('admin/config/content/formats');
   }

@@ @@
     $edit = [];
     $edit['language[xml][enabled]'] = TRUE;
     $edit['language[xml][tags]'] = "<xml>";
-    $this->drupalPostForm('admin/config/content/formats/geshifilter/languages/all', $edit, t('Save configuration'));
     $this->drupalGet('admin/config/content/formats/geshifilter/languages/all');
-    $this->assertFieldChecked('edit-language-xml-enabled', 'The language is enabled.');
-    $this->assertRaw('&lt;xml&gt;', 'The tag is defined.');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->drupalGet('admin/config/content/formats/geshifilter/languages/all');
+    $this->assertSession()->checkboxChecked('edit-language-xml-enabled', 'The language is enabled.');
+    $this->assertSession()->responseContains('&lt;xml&gt;');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/geshifilter/src/Plugin/Filter/GeshiFilterFilter.php:316

    ---------- begin diff ----------
@@ @@
         '#items' => $items,
         '#type' => 'ul',
       ];
-      $output .= render($render);
+      $output .= \Drupal::service('renderer')->render($render);

       // Defaults.
       $output .= '<p>' . $this->t('Defaults:') . '</p>';
@@ @@
         '#items' => $items,
         '#type' => 'ul',
       ];
-      $output .= render($render);
+      $output .= \Drupal::service('renderer')->render($render);
     }
     else {
       // Get the available tags.
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/geshifilter/src/GeshiFilterCss.php:102

    ---------- begin diff ----------
@@ @@
       // Save stylesheet.
       $stylesheet_filename = self::languageCssPath();

-      $ret = file_save_data($stylesheet, $stylesheet_filename, FileSystemInterface::EXISTS_REPLACE);
+      $ret = \Drupal::service('file.repository')->writeData($stylesheet, $stylesheet_filename, FileSystemInterface::EXISTS_REPLACE);
       if ($ret) {
         \Drupal::messenger()->addStatus(t('(Re)generated external CSS style sheet %file.', ['%file' => $ret->getFilename()]));
       }
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * WrapReturnRector


9) modules/contrib/geshifilter/src/GeshiFilter.php:166

    ---------- begin diff ----------
@@ @@
       if ($geshi_library['loaded']) {
         $dirs = [
           $geshi_library['library path'] . '/geshi',
-          drupal_get_path('module', 'geshifilter') . '/geshi-extra',
+          \Drupal::service('extension.list.module')->getPath('geshifilter') . '/geshi-extra',
         ];
         foreach ($dirs as $dir) {
           foreach (\Drupal::service('file_system')->scanDirectory($dir, '/.[pP][hH][pP]$/i') as $filename => $fileinfo) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector


10) modules/contrib/geshifilter/geshifilter.module:94

    ---------- begin diff ----------
@@ @@
     $config = \Drupal::config('geshifilter.settings');
     // Add the language CSS file if CSS classes are used for code styling.
     if ($config->get('css_mode') == GeshiFilter::CSS_CLASSES_AUTOMATIC) {
-      $name = file_create_url(GeshiFilterCss::languageCssPath());
+      $name = \Drupal::service('file_url_generator')->generateAbsoluteString(GeshiFilterCss::languageCssPath());
       $libraries['geshifilter']['css']['component'][$name] = [];
     }
   }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

