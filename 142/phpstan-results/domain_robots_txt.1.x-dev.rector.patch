diff --git a/domain_robots_txt.install b/domain_robots_txt.install
index daeabd8..5b66cf3 100644
--- a/domain_robots_txt.install
+++ b/domain_robots_txt.install
@@ -14,7 +14,7 @@ use Drupal\domain_robots_txt\Form\RobotsTxtDomainForm;
 function domain_robots_txt_install() {
   // Update config for all domains.
   $content = '';
-  $file = drupal_get_path('module', 'domain_robots_txt') . '/default.robots.txt';
+  $file = \Drupal::service('extension.list.module')->getPath('domain_robots_txt') . '/default.robots.txt';
   if (file_exists($file) && is_readable($file)) {
     $content = file_get_contents($file);
   }
diff --git a/tests/src/Functional/DomainRobotsTxtAccessTest.php b/tests/src/Functional/DomainRobotsTxtAccessTest.php
index 2793688..eb965a0 100644
--- a/tests/src/Functional/DomainRobotsTxtAccessTest.php
+++ b/tests/src/Functional/DomainRobotsTxtAccessTest.php
@@ -34,9 +34,7 @@ class DomainRobotsTxtAccessTest extends DomainTestBase {
     $this->drupalLogin($this->adminUser);
     $domain = $this->getRandomActiveDomain();
     $this->drupalGet('/admin/config/domain/robots_txt/' . $domain->id());
-    $this->assertFieldById('edit-robots-txt',
-      NULL,
-      'The textarea for configuring robots.txt is shown.');
+    $this->assertSession()->fieldExists('edit-robots-txt');
   }
 
   /**
@@ -48,10 +46,8 @@ class DomainRobotsTxtAccessTest extends DomainTestBase {
     $this->drupalLogin($this->normal_user);
     $domain = $this->getRandomActiveDomain();
     $this->drupalGet('/admin/config/domain/robots_txt/' . $domain->id());
-    $this->assertResponse(403);
-    $this->assertNoFieldById('edit-robots-txt',
-      NULL,
-      'The textarea for configuring robots.txt is not shown for users without appropriate permissions.');
+    $this->assertSession()->statusCodeEquals(403);
+    $this->assertSession()->fieldNotExists('edit-robots-txt');
   }
 
 }
diff --git a/tests/src/Functional/DomainRobotsTxtContentTest.php b/tests/src/Functional/DomainRobotsTxtContentTest.php
index f1423ad..fbfef57 100644
--- a/tests/src/Functional/DomainRobotsTxtContentTest.php
+++ b/tests/src/Functional/DomainRobotsTxtContentTest.php
@@ -38,12 +38,14 @@ class DomainRobotsTxtContentTest extends DomainTestBase {
     $domain_one = $this->getRandomActiveDomain();
     $this->drupalGet('/admin/config/domain/robots_txt/' . $domain_one->id());
     $test_string_domain_one = "# SimpleTest {$this->randomMachineName()}";
-    $this->drupalPostForm('/admin/config/domain/robots_txt/' . $domain_one->id(), ['robots_txt' => $test_string_domain_one], t('Save configuration'));
+    $this->drupalGet('/admin/config/domain/robots_txt/' . $domain_one->id());
+    $this->submitForm(['robots_txt' => $test_string_domain_one], t('Save configuration'));
     // Update robots.txt for second domain.
     $domain_two = $this->getRandomActiveDomain(FALSE);
     $this->drupalGet('/admin/config/domain/robots_txt/' . $domain_two->id());
     $test_string_domain_two = "# SimpleTest {$this->randomMachineName()}";
-    $this->drupalPostForm('/admin/config/domain/robots_txt/' . $domain_two->id(), ['robots_txt' => $test_string_domain_two], t('Save configuration'));
+    $this->drupalGet('/admin/config/domain/robots_txt/' . $domain_two->id());
+    $this->submitForm(['robots_txt' => $test_string_domain_two], t('Save configuration'));
     $this->drupalLogout();
     // I didn't investigate how to run tests on drupal.org
     // for domains. Because we meed to update hosts files.
@@ -68,10 +70,10 @@ class DomainRobotsTxtContentTest extends DomainTestBase {
     // Get test route with robots.txt file.
     $this->drupalGet($url);
     // Check response.
-    $this->assertResponse(200, 'No local robots.txt file was detected, and an anonymous user is delivered content at the /robots.txt path.');
+    $this->assertSession()->statusCodeEquals(200, 'No local robots.txt file was detected, and an anonymous user is delivered content at the /robots.txt path.');
     // Check headers.
-    $this->assertHeader('Content-Type', 'text/plain; charset=UTF-8', 'The robots.txt file was served with header Content-Type: "text/plain; charset=UTF-8"');
-    $content = $this->getRawContent();
+    $this->assertSession()->responseHeaderEquals('Content-Type', 'text/plain; charset=UTF-8', 'The robots.txt file was served with header Content-Type: "text/plain; charset=UTF-8"');
+    $content = $this->getSession()->getPage()->getContent();
     // Check content.
     $this->assertTrue($content == $valid, sprintf('Test string [%s] is displayed in the configured robots.txt file [%s].', $valid, $content));
     // Check content for current domain only.
