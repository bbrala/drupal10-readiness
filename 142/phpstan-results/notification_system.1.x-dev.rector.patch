diff --git a/modules/notification_system_database/notification_system_database.module b/modules/notification_system_database/notification_system_database.module
index bb96f32..ac5786e 100644
--- a/modules/notification_system_database/notification_system_database.module
+++ b/modules/notification_system_database/notification_system_database.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\user\UserInterface;
 /**
  * @file
  * Provides a notification entity type.
@@ -130,7 +131,7 @@ function notification_system_database_cron() {
 /**
  * Implements hook_ENTITY_TYPE_delete().
  */
-function notification_system_database_user_delete(\Drupal\user\UserInterface $user) {
+function notification_system_database_user_delete(UserInterface $user) {
   // Delete entity reference to user in notification entities.
   \Drupal::database()->delete('notification__user_id')
     ->condition('user_id_target_id', $user->id())
diff --git a/modules/notification_system_database/src/Entity/Notification.php b/modules/notification_system_database/src/Entity/Notification.php
index ef69ab7..15d9575 100644
--- a/modules/notification_system_database/src/Entity/Notification.php
+++ b/modules/notification_system_database/src/Entity/Notification.php
@@ -347,7 +347,7 @@ class Notification extends ContentEntityBase implements NotificationInterface {
       /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher */
       $eventDispatcher = \Drupal::service('event_dispatcher');
 
-      $eventDispatcher->dispatch(NewNotificationEvent::EVENT_NAME, $event);
+      $eventDispatcher->dispatch($event, NewNotificationEvent::EVENT_NAME);
     }
   }
 
diff --git a/modules/notification_system_database/src/Form/NotificationForm.php b/modules/notification_system_database/src/Form/NotificationForm.php
index 623de16..d3c0e1e 100644
--- a/modules/notification_system_database/src/Form/NotificationForm.php
+++ b/modules/notification_system_database/src/Form/NotificationForm.php
@@ -20,7 +20,7 @@ class NotificationForm extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New notification %label has been created.', $message_arguments));
diff --git a/modules/notification_system_dispatch/notification_system_dispatch.install b/modules/notification_system_dispatch/notification_system_dispatch.install
index 3462e90..dbc2960 100644
--- a/modules/notification_system_dispatch/notification_system_dispatch.install
+++ b/modules/notification_system_dispatch/notification_system_dispatch.install
@@ -1,11 +1,12 @@
 <?php
 
+use Drupal\Core\Config\FileStorage;
 /**
  * Install new configuration.
  */
 function notification_system_dispatch_update_8001(&$sandbox) {
-  $config_path = drupal_get_path('module', 'notification_system_dispatch') . '/config/install';
-  $config_source = new \Drupal\Core\Config\FileStorage($config_path);
+  $config_path = \Drupal::service('extension.list.module')->getPath('notification_system_dispatch') . '/config/install';
+  $config_source = new FileStorage($config_path);
 
   /** @var \Drupal\Core\Config\ConfigInstallerInterface $installer */
   $installer = \Drupal::service('config.installer');
diff --git a/modules/notification_system_dispatch_mail/notification_system_dispatch_mail.module b/modules/notification_system_dispatch_mail/notification_system_dispatch_mail.module
index af2aaec..41b0f94 100644
--- a/modules/notification_system_dispatch_mail/notification_system_dispatch_mail.module
+++ b/modules/notification_system_dispatch_mail/notification_system_dispatch_mail.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Render\Markup;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Datetime\DateFormatter;
 
@@ -40,7 +41,7 @@ function notification_system_dispatch_mail_mail($key, &$message, $params) {
 
         $notificationVariables = [
           'title' => $notification->getTitle(),
-          'body' => \Drupal\Core\Render\Markup::create($notification->getBody()),
+          'body' => Markup::create($notification->getBody()),
           'timestamp' => $dateFormatter->format($notification->getTimestamp(), 'medium', '', NULL, $langcode),
           'link' => 'http://example.com',
           'direct_link' => $direct_link,
diff --git a/modules/notification_system_dispatch_webpush/notification_system_dispatch_webpush.module b/modules/notification_system_dispatch_webpush/notification_system_dispatch_webpush.module
index 4ccc63d..34702a1 100644
--- a/modules/notification_system_dispatch_webpush/notification_system_dispatch_webpush.module
+++ b/modules/notification_system_dispatch_webpush/notification_system_dispatch_webpush.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Url;
@@ -69,7 +70,7 @@ function notification_system_dispatch_webpush_theme($existing, $type, $theme, $p
 /**
  * Implements hook_ENTITY_TYPE_delete().
  */
-function notification_system_dispatch_webpush_user_delete(Drupal\Core\Entity\EntityInterface $entity) {
+function notification_system_dispatch_webpush_user_delete(EntityInterface $entity) {
   // Delete user tokens when a user is deleted.
   /** @var \Drupal\Core\Database\Connection $database */
   $database = \Drupal::service('database');
diff --git a/src/Event/NewNotificationEvent.php b/src/Event/NewNotificationEvent.php
index 1f4430a..dfe98a4 100644
--- a/src/Event/NewNotificationEvent.php
+++ b/src/Event/NewNotificationEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\notification_system\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\notification_system\model\NotificationInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event that is fired when a new notification was added.
