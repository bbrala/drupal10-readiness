modules/contrib/externalauth/externalauth.install
modules/contrib/externalauth/tests/src/Unit/AuthmapTest.php
modules/contrib/externalauth/externalauth.module
modules/contrib/externalauth/externalauth.views.inc
modules/contrib/externalauth/src/Authmap.php
modules/contrib/externalauth/src/AuthmapInterface.php
modules/contrib/externalauth/src/Event/ExternalAuthAuthmapAlterEvent.php
modules/contrib/externalauth/src/Event/ExternalAuthEvents.php
modules/contrib/externalauth/src/Event/ExternalAuthLoginEvent.php
modules/contrib/externalauth/src/Event/ExternalAuthRegisterEvent.php
modules/contrib/externalauth/src/Exception/ExternalAuthRegisterException.php
modules/contrib/externalauth/src/ExternalAuth.php
modules/contrib/externalauth/tests/src/Unit/ExternalAuthTest.php
modules/contrib/externalauth/src/ExternalAuthInterface.php
modules/contrib/externalauth/src/Plugin/migrate/destination/Authmap.php
modules/contrib/externalauth/src/Plugin/migrate/source/Authmap.php
modules/contrib/externalauth/tests/src/Kernel/AuthmapTest.php
modules/contrib/externalauth/tests/src/Kernel/ExternalAuthTest.php

7 files with changes
====================

1) modules/contrib/externalauth/tests/src/Unit/ExternalAuthTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The mocked authmap service.
    *
-   * @var \Drupal\externalauth\AuthmapInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\externalauth\AuthmapInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $authmap;

@@ @@
   /**
    * The mocked logger instance.
    *
-   * @var \Psr\Log\LoggerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Psr\Log\LoggerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $logger;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a mock EntityTypeManager object.
@@ @@
     $this->entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);

     // Create a Mock Logger object.
-    $this->logger = $this->getMockBuilder('\Psr\Log\LoggerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->logger = $this->createMock('\Psr\Log\LoggerInterface');

     // Create a Mock EventDispatcher object.
-    $this->eventDispatcher = $this->getMockBuilder('\Symfony\Component\EventDispatcher\EventDispatcherInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->eventDispatcher = $this->createMock('\Symfony\Component\EventDispatcher\EventDispatcherInterface');

     // Create a Mock Authmap object.
-    $this->authmap = $this->getMockBuilder('\Drupal\externalauth\Authmap')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->authmap = $this->createMock('\Drupal\externalauth\Authmap');
   }

   /**
@@ @@
   public function testLoad() {
     // Set up a mock for Authmap class,
     // mocking getUid() method.
-    $authmap = $this->getMockBuilder('\Drupal\externalauth\Authmap')
-      ->disableOriginalConstructor()
-      ->setMethods(['getUid'])
-      ->getMock();
+    $authmap = $this->createMock('\Drupal\externalauth\Authmap');

     $authmap->expects($this->once())
       ->method('getUid')
@@ @@

     // Set up a mock for Authmap class,
     // mocking getUid() method.
-    $authmap = $this->getMockBuilder('\Drupal\externalauth\Authmap')
-      ->disableOriginalConstructor()
-      ->setMethods(['save'])
-      ->getMock();
+    $authmap = $this->createMock('\Drupal\externalauth\Authmap');

     $authmap->expects($this->once())
       ->method('save');

-    $dispatched_event = $this->getMockBuilder('\Drupal\externalauth\Event\ExternalAuthAuthmapAlterEvent')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dispatched_event = $this->createMock('\Drupal\externalauth\Event\ExternalAuthAuthmapAlterEvent');

     $dispatched_event->expects($this->any())
       ->method('getUsername')
@@ @@

     // Set up a mock for Authmap class,
     // mocking get() & save() methods.
-    $authmap = $this->getMockBuilder('\Drupal\externalauth\Authmap')
-      ->disableOriginalConstructor()
-      ->setMethods(['save', 'get'])
-      ->getMock();
+    $authmap = $this->createMock('\Drupal\externalauth\Authmap');

     $authmap->expects($this->once())
       ->method('get')
@@ @@
     $authmap->expects($this->once())
       ->method('save');

-    $dispatched_event = $this->getMockBuilder('\Drupal\externalauth\Event\ExternalAuthAuthmapAlterEvent')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dispatched_event = $this->createMock('\Drupal\externalauth\Event\ExternalAuthAuthmapAlterEvent');

     $dispatched_event->expects($this->any())
       ->method('getUsername')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/externalauth/tests/src/Unit/AuthmapTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The mocked database connection.
    *
-   * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Database\Connection|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $connection;

@@ @@
   /**
    * Mock statement.
    *
-   * @var \Drupal\Core\Database\Statement|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Database\Statement|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $statement;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a Mock database connection object.
-    $this->connection = $this->getMockBuilder('Drupal\Core\Database\Connection')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->connection = $this->createMock('Drupal\Core\Database\Connection');

     // Create a Mock Statement object.
-    $this->statement = $this->getMockBuilder('Drupal\Core\Database\Driver\sqlite\Statement')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->statement = $this->createMock('Drupal\Core\Database\Driver\sqlite\Statement');

     // Create a Mock Select object and set expectations.
-    $this->select = $this->getMockBuilder('Drupal\Core\Database\Query\Select')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->select = $this->createMock('Drupal\Core\Database\Query\Select');

     $this->select->expects($this->any())
       ->method('fields')
@@ @@
       ->will($this->returnValue($this->select));

     // Create a Mock Delete object and set expectations.
-    $this->delete = $this->getMockBuilder('Drupal\Core\Database\Query\Delete')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->delete = $this->createMock('Drupal\Core\Database\Query\Delete');

     $this->delete->expects($this->any())
       ->method('condition')
@@ @@
   public function testSave() {
     $account = $this->createMock('Drupal\user\UserInterface');

-    $merge = $this->getMockBuilder('Drupal\Core\Database\Query\Merge')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $merge = $this->createMock('Drupal\Core\Database\Query\Merge');

     $merge->expects($this->any())
       ->method('keys')
@@ @@
    */
   public function testDeleteWithProvider() {
     // Create a Mock Delete object and set expectations.
-    $this->delete = $this->getMockBuilder('Drupal\Core\Database\Query\Delete')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->delete = $this->createMock('Drupal\Core\Database\Query\Delete');

     $this->delete->expects($this->exactly(2))
       ->method('condition')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/externalauth/tests/src/Kernel/AuthmapTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->authmap = \Drupal::service('externalauth.authmap');
     $this->installSchema('externalauth', ['authmap']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/externalauth/src/ExternalAuth.php:106

    ---------- begin diff ----------
@@ @@
       $username = $provider . '_' . $authname;
     }

-    $authmap_event = $this->eventDispatcher->dispatch(ExternalAuthEvents::AUTHMAP_ALTER, new ExternalAuthAuthmapAlterEvent($provider, $authname, $username, $authmap_data));
+    $authmap_event = $this->eventDispatcher->dispatch(new ExternalAuthAuthmapAlterEvent($provider, $authname, $username, $authmap_data), ExternalAuthEvents::AUTHMAP_ALTER);
     $entity_storage = $this->entityTypeManager->getStorage('user');

     $account_search = $entity_storage->loadByProperties(['name' => $authmap_event->getUsername()]);
@@ @@
     $account->enforceIsNew();
     $account->save();
     $this->authmap->save($account, $provider, $authmap_event->getAuthname(), $authmap_event->getData());
-    $this->eventDispatcher->dispatch(ExternalAuthEvents::REGISTER, new ExternalAuthRegisterEvent($account, $provider, $authmap_event->getAuthname(), $authmap_event->getData()));
+    $this->eventDispatcher->dispatch(new ExternalAuthRegisterEvent($account, $provider, $authmap_event->getAuthname(), $authmap_event->getData()), ExternalAuthEvents::REGISTER);
     $this->logger->notice('External registration of user %name from provider %provider and authname %authname',
       [
         '%name' => $account->getAccountName(),
@@ @@
   public function userLoginFinalize(UserInterface $account, $authname, $provider) {
     user_login_finalize($account);
     $this->logger->notice('External login of user %name', ['%name' => $account->getAccountName()]);
-    $this->eventDispatcher->dispatch(ExternalAuthEvents::LOGIN, new ExternalAuthLoginEvent($account, $provider, $authname));
+    $this->eventDispatcher->dispatch(new ExternalAuthLoginEvent($account, $provider, $authname), ExternalAuthEvents::LOGIN);
     return $account;
   }

@@ @@
     // If a mapping (for the same provider) to this account already exists, we
     // silently skip saving this auth mapping.
     if (!$this->authmap->get($account->id(), $provider)) {
-      $authmap_event = $this->eventDispatcher->dispatch(ExternalAuthEvents::AUTHMAP_ALTER, new ExternalAuthAuthmapAlterEvent($provider, $authname, $account->getAccountName(), NULL));
+      $authmap_event = $this->eventDispatcher->dispatch(new ExternalAuthAuthmapAlterEvent($provider, $authname, $account->getAccountName(), NULL), ExternalAuthEvents::AUTHMAP_ALTER);
       $this->authmap->save($account, $provider, $authmap_event->getAuthname(), $authmap_event->getData());
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


5) modules/contrib/externalauth/src/Event/ExternalAuthRegisterEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\externalauth\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Notify event listeners about an externalauth user registration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/externalauth/src/Event/ExternalAuthLoginEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\externalauth\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Notify event listeners about an externalauth user login.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/externalauth/src/Event/ExternalAuthAuthmapAlterEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\externalauth\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Allow event listeners to alter the authmap data that will get stored.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

