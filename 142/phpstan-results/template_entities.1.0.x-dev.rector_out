modules/contrib/template_entities/modules/template_entities_block_starter/src/Plugin/Menu/LocalAction/BlockContentAddLocalAction.php
modules/contrib/template_entities/modules/template_entities_content_starter/template_entities_content_starter.module
modules/contrib/template_entities/src/Entity/Template.php
modules/contrib/template_entities/modules/template_entities_layout_builder/src/Controller/ChooseBlockTemplateController.php
modules/contrib/template_entities/src/PluginForm/TemplatePluginFormBase.php
modules/contrib/template_entities/tests/src/Functional/Entity/TemplateEntityVisibilityTest.php
modules/contrib/template_entities/src/PluginForm/TemplatePluginFormInterface.php
modules/contrib/template_entities/src/Routing/RouteSubscriber.php
modules/contrib/template_entities/modules/template_entities_book/src/Access/BookTemplatePageAccessCheck.php
modules/contrib/template_entities/modules/template_entities_book/src/BookOutlineStorageDecorator.php
modules/contrib/template_entities/modules/template_entities_book/src/Plugin/TemplatePlugin/BookTemplate.php
modules/contrib/template_entities/modules/template_entities_layout_builder/src/Form/AddBlockFromTemplateForm.php
modules/contrib/template_entities/src/TemplateAccessControlHandler.php
modules/contrib/template_entities/tests/src/Functional/TemplateEntitiesTestUtilities.php
modules/contrib/template_entities/src/TemplateHtmlRouteProvider.php
modules/contrib/template_entities/modules/template_entities_layout_builder/src/Plugin/Block/InlineTemplateBlock.php
modules/contrib/template_entities/tests/src/Functional/TemplateEntitiesUninstallTest.php
modules/contrib/template_entities/modules/template_entities_layout_builder/src/Routing/RouteSubscriber.php
modules/contrib/template_entities/src/TemplateListBuilder.php
modules/contrib/template_entities/modules/template_entities_layout_builder/template_entities_layout_builder.module
modules/contrib/template_entities/src/Access/EntityAccessCheck.php
modules/contrib/template_entities/tests/src/Functional/TemplateTest.php
modules/contrib/template_entities/src/TemplateManager.php
modules/contrib/template_entities/tests/src/Kernel/TemplateEntitiesIntegrationTest.php
modules/contrib/template_entities/src/Access/LinkedTemplatesAccessCheck.php
modules/contrib/template_entities/src/Access/NewFromTemplateAccessCheck.php
modules/contrib/template_entities/src/Entity/TemplateInterface.php
modules/contrib/template_entities/src/Entity/TemplateType.php
modules/contrib/template_entities/src/Annotation/TemplatePlugin.php
modules/contrib/template_entities/src/BundleFieldDefinition.php
modules/contrib/template_entities/src/Controller/TemplateController.php
modules/contrib/template_entities/tests/src/Kernel/TemplateEntitiesTaxonomyIntegrationTest.php
modules/contrib/template_entities/src/Entity/TemplateTypeInterface.php
modules/contrib/template_entities/modules/template_entities_book/template_entities_book.module
modules/contrib/template_entities/src/Entity/TemplateViewsData.php
modules/contrib/template_entities/src/EntityTypeInfo.php
modules/contrib/template_entities/src/TemplateManagerInterface.php
modules/contrib/template_entities/src/Form/TemplateDeleteForm.php
modules/contrib/template_entities/src/TemplatePermissions.php
modules/contrib/template_entities/src/Form/TemplateForm.php
modules/contrib/template_entities/src/TemplateTypeListBuilder.php
modules/contrib/template_entities/src/ViewsQueryAlter.php
modules/contrib/template_entities/src/Form/TemplateTypeDeleteForm.php
modules/contrib/template_entities/tests/src/Kernel/TemplateEntitiesTestTrait.php
modules/contrib/template_entities/src/Form/TemplateTypeForm.php
modules/contrib/template_entities/tests/src/Kernel/ViewsBasicTest.php
modules/contrib/template_entities/template.page.inc
modules/contrib/template_entities/template_entities.api.php
modules/contrib/template_entities/tests/src/Traits/TemplateCreationTrait.php
modules/contrib/template_entities/template_entities.module
modules/contrib/template_entities/tests/src/Traits/TemplateTypeCreationTrait.php
modules/contrib/template_entities/tests/src/Unit/Menu/TemplateEntitiesLocalTasksTest.php
modules/contrib/template_entities/src/Plugin/Deriver/EntityTemplateActionLinkDeriver.php
modules/contrib/template_entities/src/Plugin/Deriver/EntityTemplateLocalTaskDeriver.php
modules/contrib/template_entities/src/Plugin/Deriver/EntityTemplatePluginDeriver.php
modules/contrib/template_entities/src/Plugin/Menu/LocalAction/AddTemplateLocalAction.php
modules/contrib/template_entities/src/Plugin/TemplatePlugin/NodeTemplate.php
modules/contrib/template_entities/src/Plugin/TemplatePlugin/TemplatePluginBase.php
modules/contrib/template_entities/src/Plugin/TemplatePlugin/TermTemplate.php
modules/contrib/template_entities/src/Plugin/TemplatePluginInterface.php
modules/contrib/template_entities/src/Plugin/TemplatePluginManager.php
modules/contrib/template_entities/src/Plugin/views/field/EntityLinkNewFromTemplate.php

11 files with changes
=====================

1) modules/contrib/template_entities/src/Controller/TemplateController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\template_entities\Controller;

+use Drupal\Component\Utility\UrlHelper;
 use Drupal;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
       $query['destination'] = $destination;
       // Get any query parameters from the destination.
       // @todo - added to pass parent query param for add child to books but needs more needs attention.
-      $query += Drupal\Component\Utility\UrlHelper::parse($destination)['query'];
+      $query += UrlHelper::parse($destination)['query'];
     }
     elseif ($destination = $template->getDestinationAfterNewFromTemplate()) {
       $query['destination'] = $destination;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/template_entities/modules/template_entities_content_starter/template_entities_content_starter.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 /**
  * Implements hook_menu_local_tasks_alter().
  */
-function template_entities_content_starter_menu_local_tasks_alter(&$data, $route_name, \Drupal\Core\Cache\RefinableCacheableDependencyInterface &$cacheability) {
+function template_entities_content_starter_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
   // Avoid duplicate "default" content overview tabs.
   if (isset($data['tabs'][1]['content_moderation.content'])
     && isset($data['tabs'][1]['template_entities_content_starter.content'])) {
    ----------- end diff -----------

3) modules/contrib/template_entities/template_entities.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Form\FormStateInterface;
 /**
  * @file
  * Contains template_entities.module.
@@ @@
 /**
  * Implements hook_entity_insert().
  */
-function template_entities_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
+function template_entities_entity_insert(EntityInterface $entity) {
   // Give all template plugins a chance to alter queries.
   /** @var \Drupal\template_entities\TemplateManagerInterface $template_manager */
   $template_manager = Drupal::service('template_entities.manager');
@@ @@
 /**
  * Implements hook_entity_presave().
  */
-function template_entities_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
+function template_entities_entity_presave(EntityInterface $entity) {
   // Give all template plugins a chance to alter queries.
   /** @var \Drupal\template_entities\TemplateManagerInterface $template_manager */
   $template_manager = Drupal::service('template_entities.manager');
@@ @@
 /**
  * Implements hook_form_alter().
  */
-function template_entities_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function template_entities_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   // Give all template plugins a chance to alter the new entity form.
   /** @var \Drupal\template_entities\TemplateManagerInterface $template_manager */
   $template_manager = Drupal::service('template_entities.manager');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/template_entities/src/TemplateManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\template_entities;

+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Database\Query\AlterableInterface;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
    *
    * @return mixed
    */
-  public function alterNewEntityForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state, EntityInterface $entity);
+  public function alterNewEntityForm(&$form, FormStateInterface $form_state, EntityInterface $entity);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


5) modules/contrib/template_entities/src/TemplateManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\template_entities;

+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Database\Query\AlterableInterface;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
@@ @@
    */
   public function alterQuery(AlterableInterface $query) {
     // Allow any template type plugin to alter any query.
-    if ($query instanceof \Drupal\Core\Database\Query\SelectInterface) {
+    if ($query instanceof SelectInterface) {

       // If it's an entity query, only call plugins for these template types.
       if ($query->hasTag('entity_query')) {
@@ @@
   /**
    * @inheritDoc
    */
-  public function alterNewEntityForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state, EntityInterface $entity) {
+  public function alterNewEntityForm(&$form, FormStateInterface $form_state, EntityInterface $entity) {
     if (isset($entity->template) && $entity->template instanceof Template) {
       $template = $entity->template;
       $template->getTemplatePlugin()->alterNewEntityForm($form, $form_state, $entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


6) modules/contrib/template_entities/tests/src/Kernel/ViewsBasicTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);

     $entity_test_info = \Drupal::entityTypeManager()->getDefinition('entity_test');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/template_entities/tests/src/Kernel/TemplateEntitiesTaxonomyIntegrationTest.php:88

    ---------- begin diff ----------
@@ @@
       'type' => $template_type_id,
     ]);

-    $this->assertEqual($template->getSourceEntity()
+    $this->assertEquals($template->getSourceEntity()
       ->id(), $this->terms[1]->id(), 'Source entity of template is expected.');

     $tid = $this->terms[1]->id();
@@ @@
     $this->assertEntityQuery($expected_terms, 'taxonomy_term');

     $loaded_term = Term::load($tid);
-    $this->assertEqual($this->terms[1]->id(), $loaded_term->id(), 'Term load is not subject to entity query decoration.');
+    $this->assertEquals($this->terms[1]->id(), $loaded_term->id(), 'Term load is not subject to entity query decoration.');

     /** @var \Drupal\Core\Entity\EntityListBuilder $node_list_builder */
     $term_list_builder = $this->entityTypeManager->getHandler('taxonomy_term', 'list_builder');
     $term_list = $term_list_builder->load();
-    $this->assertEqual(array_keys($term_list), array_keys($expected_terms), 'List builder terms');
+    $this->assertEquals(array_keys($term_list), array_keys($expected_terms), 'List builder terms');

     /** @var \Drupal\taxonomy\TermStorageInterface $term_storage */
     $term_storage = $this->entityTypeManager->getStorage('taxonomy_term');
@@ @@
     $expected_terms = array_keys($expected_terms);
     sort($term_tree_ids);
     sort($expected_terms);
-    $this->assertEqual($term_tree_ids, $expected_terms, 'Term tree terms');
+    $this->assertEquals($term_tree_ids, $expected_terms, 'Term tree terms');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/template_entities/tests/src/Kernel/TemplateEntitiesIntegrationTest.php:79

    ---------- begin diff ----------
@@ @@
       'type' => $template_type_id,
     ]);

-    $this->assertEqual($template->getSourceEntity()
+    $this->assertEquals($template->getSourceEntity()
       ->id(), $this->nodes[0]->id(), 'Source entity of template is expected.');

     $nid = $this->nodes[0]->id();
@@ @@
     $this->assertEntityQuery($expected_nodes, 'node');

     $loaded_node = Node::load($nid);
-    $this->assertEqual($this->nodes[0]->id(), $loaded_node->id(), 'Node load is not subject to entity query decoration.');
+    $this->assertEquals($this->nodes[0]->id(), $loaded_node->id(), 'Node load is not subject to entity query decoration.');

     /** @var \Drupal\Core\Entity\EntityListBuilder $node_list_builder */
     $node_list_builder = $this->entityTypeManager->getHandler('node', 'list_builder');
     $node_list = $node_list_builder->load();
-    $this->assertEqual(array_keys($node_list), array_keys($expected_nodes), 'List builder nodes');
+    $this->assertEquals(array_keys($node_list), array_keys($expected_nodes), 'List builder nodes');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/template_entities/tests/src/Functional/TemplateEntitiesUninstallTest.php:38

    ---------- begin diff ----------
@@ @@
     $this->drupalGet('/admin/modules/uninstall');
     $session = $this->assertSession();
     $session->pageTextContains('Template entities');
-    $this->drupalPostForm('admin/modules/uninstall', ['uninstall[template_entities]' => TRUE], 'Uninstall');
-    $this->drupalPostForm(NULL, [], 'Uninstall');
+    $this->drupalGet('admin/modules/uninstall');
+    $this->submitForm(['uninstall[template_entities]' => TRUE], 'Uninstall');
+    $this->submitForm([], 'Uninstall');
     $session->pageTextContains('The selected modules have been uninstalled.');
     $session->pageTextNotContains('Template entities');
   }
@@ @@
     $session->linkExists('Remove templates');
     $this->clickLink('Remove templates');
     $session->pageTextContains('Are you sure you want to delete all templates?');
-    $this->drupalPostForm('/admin/modules/uninstall/entity/template', [], 'Delete all templates');
-    $this->drupalPostForm('admin/modules/uninstall', ['uninstall[template_entities]' => TRUE], 'Uninstall');
-    $this->drupalPostForm(NULL, [], 'Uninstall');
+    $this->drupalGet('/admin/modules/uninstall/entity/template');
+    $this->submitForm([], 'Delete all templates');
+    $this->drupalGet('admin/modules/uninstall');
+    $this->submitForm(['uninstall[template_entities]' => TRUE], 'Uninstall');
+    $this->submitForm([], 'Uninstall');
     $session->pageTextContains('The selected modules have been uninstalled.');
     $session->pageTextNotContains('Template entities');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/template_entities/tests/src/Functional/Entity/TemplateEntityVisibilityTest.php:87

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_actions_block');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/template_entities/src/Plugin/TemplatePlugin/TemplatePluginBase.php:158

    ---------- begin diff ----------
@@ @@
    *   The member method to call.
    */
   protected function processTranslations(EntityInterface $entity, string $method) {
-    if ($entity instanceof \Drupal\Core\Entity\ContentEntityInterface
+    if ($entity instanceof ContentEntityInterface
       && $this->contentTranslationManager
       && $this->contentTranslationManager->isEnabled($entity->getEntityTypeId(), $entity->bundle())) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/template_entities/tests/src/Functional/TemplateEntitie
         sTestUtilities.php" file, due to:                                      
         "System error: "Method assert() was not found in reflection of class   
         Drupal\Tests\template_entities\Functional\TemplateEntitiesTestUtilities
         ."                                                                     
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 419          

 [ERROR] Could not process                                                      
         "modules/contrib/template_entities/tests/src/Kernel/TemplateEntitiesTes
         tTrait.php" file, due to:                                              
         "System error: "Method assertEqual() was not found in reflection of    
         class Drupal\Tests\template_entities\Kernel\TemplateEntitiesTestTrait."
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 419          

 [ERROR] Could not process                                                      
         "modules/contrib/template_entities/tests/src/Traits/TemplateTypeCreatio
         nTrait.php" file, due to:                                              
         "System error: "Method assertEqual() was not found in reflection of    
         class Drupal\Tests\template_entities\Traits\TemplateTypeCreationTrait."
         Run Rector with "--debug" option and post the report here:             
         https://github.com/rectorphp/rector/issues/new". On line: 419          

