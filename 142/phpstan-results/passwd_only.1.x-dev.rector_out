modules/contrib/passwd_only/passwd_only.install
modules/contrib/passwd_only/passwd_only.module
modules/contrib/passwd_only/passwd_only_logintoboggan/passwd_only_logintoboggan.module
modules/contrib/passwd_only/passwd_only_logintoboggan/passwd_only_logintoboggan.pages.inc
modules/contrib/passwd_only/src/Form/ConfigurationForm.php
modules/contrib/passwd_only/src/Form/LoginForm.php
modules/contrib/passwd_only/src/Plugin/Block/PasswdOnlyBlock.php
modules/contrib/passwd_only/tests/src/Functional/BlockTest.php
modules/contrib/passwd_only/tests/src/Functional/ConfigurationTest.php
modules/contrib/passwd_only/tests/src/Functional/HelpTest.php
modules/contrib/passwd_only/tests/src/Functional/LoginTest.php
modules/contrib/passwd_only/tests/src/Functional/PasswdOnlyWebTestBase.php

5 files with changes
====================

1) modules/contrib/passwd_only/tests/src/Functional/PasswdOnlyWebTestBase.php:73

    ---------- begin diff ----------
@@ @@
       'user' => $this->userPasswdOnly->getUsername(),
       'description' => 'Some description text.',
     ];
-    $this->drupalPostForm('admin/config/system/passwd-only', $edit, t('Save'));
+    $this->drupalGet('admin/config/system/passwd-only');
+    $this->submitForm($edit, t('Save'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/passwd_only/tests/src/Functional/LoginTest.php:25

    ---------- begin diff ----------
@@ @@
     $this->configureModule();
     // Go to login page and notice that you already logged in.
     $this->drupalGet('user/passwd-only-login');
-    $this->assertText('You are already logged in.');
+    $this->assertSession()->pageTextContains('You are already logged in.');

     // Login with the previously configured account using only the password.
     $this->drupalLogout();
     $this->drupalGet('user/passwd-only-login');
-    $this->assertRaw($this->userPasswdOnly->getUsername());
-    $this->assertText('Some description text.');
-    $this->assertText('Password');
+    $this->assertSession()->responseContains($this->userPasswdOnly->getUsername());
+    $this->assertSession()->pageTextContains('Some description text.');
+    $this->assertSession()->pageTextContains('Password');
     $edit = [
       'pass' => $this->userPasswdOnly->pass_raw,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Log in'));
-    $this->assertRaw($this->userPasswdOnly->getUsername());
+    $this->submitForm($edit, t('Log in'));
+    $this->assertSession()->responseContains($this->userPasswdOnly->getUsername());
     $config = \Drupal::config('passwd_only.all');

-    $this->assertEqual(
-      $config->get('user'),
-      $this->userPasswdOnly->id()
-    );
+    $this->assertEquals($config->get('user'), $this->userPasswdOnly->id());

     // Test hook_user_view().
     $this->drupalGet('user/' . $this->userPasswdOnly->id());
-    $this->assertText('Password Only Login');
-    $this->assertText('This user is the password only login account.');
+    $this->assertSession()->pageTextContains('Password Only Login');
+    $this->assertSession()->pageTextContains('This user is the password only login account.');

     // Go to profile page of a not configured user.
     $this->drupalLogout();
     $this->drupalLogin($this->userAuthenticated);
     $this->drupalGet('user/' . $this->userAuthenticated->id());
-    $this->assertResponse(200);
-    $this->assertNoText('Password Only Login');
-    $this->assertNoText('This user is the password only login account.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextNotContains('Password Only Login');
+    $this->assertSession()->pageTextNotContains('This user is the password only login account.');

     // Delete the configured user account.
     $this->config('user.settings')->set('cancel_method', 'user_cancel_delete')->save();
     $this->drupalLogin($this->userAdminPeople);
-    $this->drupalPostForm('user/' . $this->userPasswdOnly->id() . '/cancel', NULL, t('Cancel account'));
+    $this->drupalGet('user/' . $this->userPasswdOnly->id() . '/cancel');
+    $this->submitForm(NULL, t('Cancel account'));
     $config = \Drupal::config('passwd_only.all');
-    $this->assertIdentical($config->get('user'), 0);
+    $this->assertSame($config->get('user'), 0);

     // Access the login page, which is not set up.
     $this->drupalLogout();
     $this->drupalGet('user/passwd-only-login');
-    $this->assertResponse(200);
-    $this->assertText('First create or set an user account');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('First create or set an user account');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertNoTextRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/passwd_only/tests/src/Functional/HelpTest.php:31

    ---------- begin diff ----------
@@ @@
   public function testHelp() {
     // Help overview page.
     $this->drupalGet('admin/help');
-    $this->assertResponse(200);
-    $this->assertText('Password Only Login');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('Password Only Login');

     // Help page.
     $this->drupalGet('admin/help/passwd_only');
-    $this->assertResponse(200);
-    $this->assertText('First of all you have to select a Drupal user account');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('First of all you have to select a Drupal user account');

     // Link 1.
     $this->clickLink('Password Only Login page');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Link 2.
     $this->drupalGet('admin/help/passwd_only');
     $this->clickLink('blocks administration page');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertTextRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/passwd_only/tests/src/Functional/ConfigurationTest.php:17

    ---------- begin diff ----------
@@ @@
     $this->drupalLogin($this->userAdminPasswdOnly);

     $this->drupalGet('admin/config/system');
-    $this->assertResponse(200);
-    $this->assertText('Password Only Login');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('Password Only Login');

     // Main configuration form.
     $this->drupalGet('admin/config/system/passwd-only');
-    $this->assertResponse(200);
-    $this->assertText('Password Only Login');
-    $this->assertText('Select a password only login user');
-    $this->assertText('Select a user to login in the password only login forms.');
-    $this->assertText('Description');
-    $this->assertText('This description text is shown on the password only login form.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('Password Only Login');
+    $this->assertSession()->pageTextContains('Select a password only login user');
+    $this->assertSession()->pageTextContains('Select a user to login in the password only login forms.');
+    $this->assertSession()->pageTextContains('Description');
+    $this->assertSession()->pageTextContains('This description text is shown on the password only login form.');

     // Accessed denied for anonymous users.
     $this->drupalLogout();
     $this->drupalGet('admin/config/system/passwd-only');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     // Access the login page, which is not set up.
     $this->drupalGet('user/passwd-only-login');
-    $this->assertResponse(200);
-    $this->assertText('First create or set an user account');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('First create or set an user account');

     // Configure the module.
     $this->drupalLogin($this->userAdminPasswdOnly);
     $this->drupalGet('admin/config/system/passwd-only');
     // Link to user profile to update the password not showing.
-    $this->assertNoText('Change password');
-    $this->assertNoText('Go to the password only login user.');
+    $this->assertSession()->pageTextNotContains('Change password');
+    $this->assertSession()->pageTextNotContains('Go to the password only login user.');
     $edit = [
       'user' => $this->userPasswdOnly->getUsername(),
       'description' => 'Some description text.',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Link to user profile to update the password.
     $this->drupalGet('admin/config/system/passwd-only');
-    $this->assertText('Change password');
-    $this->assertText('Go to the password only login user.');
+    $this->assertSession()->pageTextContains('Change password');
+    $this->assertSession()->pageTextContains('Go to the password only login user.');

     // Try to configure the module with the root user.
     $user_admin = User::load(1);
@@ @@
     $edit = [
       'user' => $user_admin->getUsername(),
     ];
-    $this->drupalPostForm('admin/config/system/passwd-only', $edit, t('Save'));
-    $this->assertResponse(200);
-    $this->assertText('is the root user account (User-ID 1). It is not secure to use this account with Password Only Login. Please select another user account.');
+    $this->drupalGet('admin/config/system/passwd-only');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->pageTextContains('is the root user account (User-ID 1). It is not secure to use this account with Password Only Login. Please select another user account.');
     // The input tag gets this classes: class="form-text required error".
-    $this->assertRaw('error');
+    $this->assertSession()->responseContains('error');
   }

   /**
@@ @@

     $this->drupalLogin($user);
     $this->drupalGet('admin/reports/status');
-    $this->assertText('Password Only Login');
-    $this->assertText('You have to select one user account.');
+    $this->assertSession()->pageTextContains('Password Only Login');
+    $this->assertSession()->pageTextContains('You have to select one user account.');
     $this->clickLink('Select an user account');
-    $this->assertText('Select a user to login in the password only login forms.');
+    $this->assertSession()->pageTextContains('Select a user to login in the password only login forms.');

     $this->configureModule();

     $this->drupalLogin($user);
     $this->drupalGet('admin/reports/status');
-    $this->assertNoText('You have to select one user account.');
+    $this->assertSession()->pageTextNotContains('You have to select one user account.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNoTextRector
 * AssertRawRector
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/passwd_only/passwd_only_logintoboggan/passwd_only_logintoboggan.module:32

    ---------- begin diff ----------
@@ @@
 function passwd_only_logintoboggan_js_alter(&$javascript) {
   $path = 'sites/all/modules/logintoboggan/logintoboggan.unifiedlogin.js';
   if (!empty($javascript[$path])) {
-    $javascript[$path]['data'] = drupal_get_path('module', 'passwd_only_logintoboggan') . '/logintoboggan.unifiedlogin.js';
+    $javascript[$path]['data'] = \Drupal::service('extension.list.module')->getPath('passwd_only_logintoboggan') . '/logintoboggan.unifiedlogin.js';
   }

 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

