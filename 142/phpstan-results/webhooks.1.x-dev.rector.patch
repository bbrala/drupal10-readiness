diff --git a/modules/webhook/src/Form/WebhookForm.php b/modules/webhook/src/Form/WebhookForm.php
index d3fc3cb..0e563f5 100644
--- a/modules/webhook/src/Form/WebhookForm.php
+++ b/modules/webhook/src/Form/WebhookForm.php
@@ -20,7 +20,7 @@ class WebhookForm extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New webhook %label has been created.', $message_arguments));
diff --git a/src/Event/ReceiveEvent.php b/src/Event/ReceiveEvent.php
index 0700f17..bc248f7 100644
--- a/src/Event/ReceiveEvent.php
+++ b/src/Event/ReceiveEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\webhooks\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\webhooks\Entity\WebhookConfig;
 use Drupal\webhooks\Webhook;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class Receive Event.
diff --git a/src/Event/SendErrorEvent.php b/src/Event/SendErrorEvent.php
index 45e297d..e13ff76 100644
--- a/src/Event/SendErrorEvent.php
+++ b/src/Event/SendErrorEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\webhooks\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\webhooks\Entity\WebhookConfig;
 use Drupal\webhooks\Webhook;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class Send Event.
diff --git a/src/Event/SendEvent.php b/src/Event/SendEvent.php
index ca68e99..7bc16b2 100644
--- a/src/Event/SendEvent.php
+++ b/src/Event/SendEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\webhooks\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\webhooks\Entity\WebhookConfig;
 use Drupal\webhooks\Webhook;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class Send Event.
diff --git a/src/Plugin/QueueWorker/WebhookDispatcher.php b/src/Plugin/QueueWorker/WebhookDispatcher.php
index 6cfb9e7..b6bf248 100644
--- a/src/Plugin/QueueWorker/WebhookDispatcher.php
+++ b/src/Plugin/QueueWorker/WebhookDispatcher.php
@@ -55,8 +55,8 @@ class WebhookDispatcher extends QueueWorkerBase implements ContainerFactoryPlugi
     $webhook_config = WebhookConfig::load($data['id']);
     if ($webhook_config) {
       $this->eventDispatcher->dispatch(
-        WebhookEvents::RECEIVE,
-        new ReceiveEvent($webhook_config, $data['webhook'])
+        new ReceiveEvent($webhook_config, $data['webhook']),
+        WebhookEvents::RECEIVE
       );
     }
   }
diff --git a/tests/src/Functional/WebhooksTest.php b/tests/src/Functional/WebhooksTest.php
index 90c8939..b18de98 100644
--- a/tests/src/Functional/WebhooksTest.php
+++ b/tests/src/Functional/WebhooksTest.php
@@ -194,7 +194,7 @@ class WebhooksTest extends BrowserTestBase {
 
     $this->webhookService->send($webhook_config, $webhook);
 
-    $this->assertEqual($this->state->get('onWebhookSend'), TRUE);
+    $this->assertEquals($this->state->get('onWebhookSend'), TRUE);
   }
 
   /**
@@ -210,7 +210,7 @@ class WebhooksTest extends BrowserTestBase {
     $this->webhookService->send($webhook_config, $webhook);
 
     $webhook_received = $this->state->get('onWebhookReceive');
-    $this->assertEqual($webhook_received, TRUE);
+    $this->assertEquals($webhook_received, TRUE);
   }
 
   /**
@@ -224,7 +224,7 @@ class WebhooksTest extends BrowserTestBase {
     /** @var \Drupal\webhooks\Webhook $webhook_received */
     $webhook_received = $this->state->get('onWebhookReceive_webhook');
 
-    $this->assertEqual($webhook_received->getPayload(), $this->payload);
+    $this->assertEquals($webhook_received->getPayload(), $this->payload);
   }
 
   /**
@@ -241,13 +241,13 @@ class WebhooksTest extends BrowserTestBase {
 
     // Additional custom headers.
     $intersection = array_intersect($headers_received, $this->headers);
-    $this->assertEqual($intersection, $this->headers);
+    $this->assertEquals($intersection, $this->headers);
 
     // Check for X-Drupal-Delivery header.
-    $this->assertEqual($headers_received['x-drupal-delivery'], $webhook->getUuid());
+    $this->assertEquals($headers_received['x-drupal-delivery'], $webhook->getUuid());
 
     // Check for X-Drupal-Event header.
-    $this->assertEqual($headers_received['x-drupal-event'], $webhook->getEvent());
+    $this->assertEquals($headers_received['x-drupal-event'], $webhook->getEvent());
   }
 
   /**
@@ -260,17 +260,17 @@ class WebhooksTest extends BrowserTestBase {
     $this->webhookService->send($webhook_config, $webhook);
 
     // Make sure the secret has been set.
-    $this->assertEqual($webhook_config->getSecret(), self::WEBHOOK_SECRET);
+    $this->assertEquals($webhook_config->getSecret(), self::WEBHOOK_SECRET);
 
     $webhook_receive = $this->state->get('onWebhookReceive');
 
     // This succeeds if the webhook has been verified and accepted.
-    $this->assertEqual($webhook_receive, TRUE);
+    $this->assertEquals($webhook_receive, TRUE);
 
     /** @var \Drupal\webhooks\Webhook $webhook_received */
     $webhook_received = $this->state->get('onWebhookReceive_webhook');
     // Verify signature.
-    $this->assertEqual($webhook_received->getSignature(), $webhook->getSignature());
+    $this->assertEquals($webhook_received->getSignature(), $webhook->getSignature());
   }
 
   /**
@@ -285,7 +285,7 @@ class WebhooksTest extends BrowserTestBase {
 
     /** @var \Drupal\webhooks\Webhook $webhook_received */
     $webhook_received = $this->state->get('onWebhookReceive_webhook');
-    $this->assertEqual($webhook_received->getContentType(), WebhookConfig::CONTENT_TYPE_JSON);
+    $this->assertEquals($webhook_received->getContentType(), WebhookConfig::CONTENT_TYPE_JSON);
   }
 
   /**
@@ -300,7 +300,7 @@ class WebhooksTest extends BrowserTestBase {
 
     /** @var \Drupal\webhooks\Webhook $webhook_received */
     $webhook_received = $this->state->get('onWebhookReceive_webhook');
-    $this->assertEqual($webhook_received->getContentType(), WebhookConfig::CONTENT_TYPE_XML);
+    $this->assertEquals($webhook_received->getContentType(), WebhookConfig::CONTENT_TYPE_XML);
   }
 
   /**
@@ -314,7 +314,7 @@ class WebhooksTest extends BrowserTestBase {
 
     /** @var \Drupal\webhooks\Webhook $webhook_received */
     $webhook_received = $this->state->get('onWebhookReceive_webhook');
-    $this->assertEqual($webhook_received->getUuid(), $webhook->getUuid());
+    $this->assertEquals($webhook_received->getUuid(), $webhook->getUuid());
   }
 
 }
