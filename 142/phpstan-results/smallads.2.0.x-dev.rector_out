modules/contrib/smallads/csvimport-deprecated/smallads_import.module
modules/contrib/smallads/modules/smallads_geo/smallads_geo.install
modules/contrib/smallads/modules/smallads_index/smallads_index.install
modules/contrib/smallads/csvimport-deprecated/src/ImportSmallads.php
modules/contrib/smallads/smallads.module
modules/contrib/smallads/src/Plugin/Condition/AdContext.php
modules/contrib/smallads/modules/smallads_geo/smallads_geo.module
modules/contrib/smallads/src/SmalladViewsData.php
modules/contrib/smallads/src/Plugin/Derivative/SmalladActions.php
modules/contrib/smallads/modules/smallads_geo/src/Plugin/Field/FieldType/OwnerCoordinatesItemList.php
modules/contrib/smallads/src/Plugin/Derivative/SmalladMenuLink.php
modules/contrib/smallads/src/Plugin/Derivative/SmalladTasks.php
modules/contrib/smallads/src/Plugin/DevelGenerate/SmalladDevelGenerate.php
modules/contrib/smallads/modules/smallads_index/smallads_index.module
modules/contrib/smallads/modules/smallads_group/smallads_group.module
modules/contrib/smallads/modules/smallads_group/src/Plugin/GroupContentEnabler/GroupSmallads.php
modules/contrib/smallads/modules/smallads_group/src/Plugin/GroupContentEnabler/SmalladDeriver.php
modules/contrib/smallads/modules/smallads_group/src/RouteSubscriber.php
modules/contrib/smallads/modules/smallads_group/src/SmalladGroupAccessControlHandler.php
modules/contrib/smallads/modules/smallads_index/src/Form.php
modules/contrib/smallads/smallads.tokens.inc
modules/contrib/smallads/src/Controller/Smallad.php
modules/contrib/smallads/src/Entity/Smallad.php
modules/contrib/smallads/modules/smallads_index/src/Plugin/Derivative/SmalladIndexSearchTasks.php
modules/contrib/smallads/modules/smallads_index/src/Plugin/Search/SmalladIndexSearch.php
modules/contrib/smallads/modules/smallads_index/src/RouteSubscriber.php
modules/contrib/smallads/modules/smallads_mcapi/smallads_mcapi.module
modules/contrib/smallads/modules/smallads_mcapi/src/FirstWallet.php
modules/contrib/smallads/smallads.install
modules/contrib/smallads/src/Entity/SmalladInterface.php
modules/contrib/smallads/src/Entity/SmalladType.php
modules/contrib/smallads/src/EventSubscriber/MigrationSubscriber.php
modules/contrib/smallads/src/Plugin/Field/FieldFormatter/TimeBeforeAfterFormatter.php
modules/contrib/smallads/src/Plugin/Field/FieldType/ScopeItem.php
modules/contrib/smallads/src/EventSubscriber/RouteSubscriber.php
modules/contrib/smallads/src/Plugin/QueueWorker/ExpiredMail.php
modules/contrib/smallads/src/Form/Config.php
modules/contrib/smallads/src/Plugin/Search/SmalladSearch.php
modules/contrib/smallads/src/Form/PreAddForm.php
modules/contrib/smallads/src/Form/SmalladDeleteConfirm.php
modules/contrib/smallads/src/Form/SmalladEdit.php
modules/contrib/smallads/src/Form/SmalladTypeForm.php
modules/contrib/smallads/src/Plugin/Action/DeleteSmallad.php
modules/contrib/smallads/src/Plugin/Action/UnpublishSmallad.php
modules/contrib/smallads/src/Plugin/Block/AddAdBlock.php
modules/contrib/smallads/src/Plugin/Block/NestedCategoriesBlock.php
modules/contrib/smallads/src/Plugin/migrate/D7SmalladDeriver.php
modules/contrib/smallads/src/Plugin/migrate/destination/EntitySmallad.php
modules/contrib/smallads/src/Plugin/migrate/source/d7/Smallad.php
modules/contrib/smallads/src/Plugin/views/argument/SinceTime.php
modules/contrib/smallads/src/Plugin/views/argument_default/AdTypeFromContext.php
modules/contrib/smallads/src/SmalladAccessControlHandler.php
modules/contrib/smallads/src/SmalladListBuilder.php
modules/contrib/smallads/src/SmalladStorage.php
modules/contrib/smallads/src/SmalladTypeAccessControlHandler.php
modules/contrib/smallads/src/SmalladTypeListBuilder.php
modules/contrib/smallads/src/SmalladViewBuilder.php

12 files with changes
=====================

1) modules/contrib/smallads/csvimport-deprecated/src/ImportSmallads.php:6

    ---------- begin diff ----------
@@ @@
  */
 namespace Drupal\smallads_import;

+use Drupal\Core\Form\FormBase;
+use Drupal\Core\Url;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\Language;
 use GuzzleHttp;

-class ImportSmallads extends \Drupal\Core\Form\FormBase {
+class ImportSmallads extends FormBase {

   private $database;

@@ @@
       '#value' => 'import',
       '#weight' => 4
     );
-    $form['#redirect'] = \Drupal\Core\Url::fromRoute('entity.smallad.collection');
+    $form['#redirect'] = Url::fromRoute('entity.smallad.collection');
     return $form;
   }

@@ @@
     foreach ($incoming_terms as $key => $term) {
       $incoming_terms[$key] = trim($term);
     }
-    $all_terms = db_query("SELECT LOWER(name) FROM {taxonomy_term_data}")->fetchCol();
+    $all_terms = \Drupal::database()->query("SELECT LOWER(name) FROM {taxonomy_term_data}")->fetchCol();
     $new_terms = array_diff(array_unique($incoming_terms), $all_terms);

     if (count($new_terms)) {
@@ @@
     $rows = $this->loadCsv($form_state);

     //get the terms so we can lookup the ids
-    $all_terms = db_query("
+    $all_terms = \Drupal::database()->query("
       SELECT d.tid, d.vid, d.name, LOWER(d.name) as term_name, v.name, v.machine_name
       FROM {taxonomy_term_data} d
       LEFT JOIN {taxonomy_vocabulary} v ON d.vid = v.vid
@@ @@
       }
       node_save($node);
       if (array_key_exists('created', $row)) {
-        db_query(
-          "UPDATE {node} SET changed = :changed where nid = $node->nid",
-          array('changed' => is_numeric($row['created']) ? $row['created'] : strtotime($row['created']))
-        );
+        \Drupal::database()->query("UPDATE {node} SET changed = :changed where nid = $node->nid", array('changed' => is_numeric($row['created']) ? $row['created'] : strtotime($row['created'])));
       }
       $imported++;
     }
    ----------- end diff -----------

Applied rules:
 * DBQueryRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/smallads/smallads.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\Entity\Role;
+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\views\Entity\View;
 /**
  * @file
  * Hooks for installing the smallads module.
@@ @@


 function smallads_update_8001(){
-  foreach (\Drupal\user\Entity\Role::loadMultiple() as $role) {
+  foreach (Role::loadMultiple() as $role) {
     if ($role->hasPermission('post ad')) {
       $role->revokePermission('post ad')->grantpermission('post smallad')->save();
     }
@@ @@
  * Standardise the language field.
  */
 function smallads_update_8002() {
-  $definition = Drupal\Core\Field\BaseFieldDefinition::create('language')
+  $definition = BaseFieldDefinition::create('language')
     ->setLabel(t('Language'))
     ->setDisplayOptions('view', [
       'region' => 'hidden',
@@ @@
  * Remove the views 'scope' filter.
  */
 function smallads_update_9001() {
-  foreach (\Drupal\views\Entity\View::loadMultiple() as $view) {
+  foreach (View::loadMultiple() as $view) {
     $save = 0;
     /** @var \Drupal\views\Entity\View $view */
     $displays = $view->get('display');
@@ @@
   $v['display']['my_ads']['id'] = 'my_ads';
   $config->setData($v);
   $config->save();
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/smallads/modules/smallads_index/src/RouteSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smallads_index;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Symfony\Component\Routing\Route;
 use Symfony\Component\Routing\RouteCollection;
@@ @@
    */
   private $smalladTypes;

-  function __construct(\Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager) {
+  function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->smalladTypes = $entity_type_manager->getStorage('smallad_type')->loadMultiple();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/smallads/modules/smallads_index/src/Form.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smallads_index;

+use Drupal\Core\Link;
+use Drupal\Core\Render\Markup;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
     return $form;
   }

-  function submitForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
+  function submitForm(array &$form, FormStateInterface $form_state) {
     //save the search settings
     $prefs = [
       'radius' => $form_state->getValue('radius'),
@@ @@
           'icon_anchor' => ['x' => 24, 'y' => 32],//not supported yet in leaflet module Beta1
           'popup_anchor' => ['x' => 16, 'y' => 0],
         ],
-        'popup' => \Drupal\Core\Link::fromTextAndUrl($result->title, $dest)->toString() . '<br>'.$result->body,
+        'popup' => Link::fromTextAndUrl($result->title, $dest)->toString() . '<br>'.$result->body,
         'leaflet_id' => $result->id
       ];
     }
@@ @@
         $snippet = $this->t(
             '@snippet<strong>Keywords</strong>: @words<br />on %site',
             [
-              '@snippet' => $body ? \Drupal\Core\Render\Markup::create($body.'<br >') : '',
+              '@snippet' => $body ? Markup::create($body.'<br >') : '',
               '@words' => $result->keywords,
-              '%site' => \Drupal\Core\Link::fromTextAndUrl($result->name, Url::fromUri($result->url))->toString()
+              '%site' => Link::fromTextAndUrl($result->name, Url::fromUri($result->url))->toString()
             ]
         );
         $hits[] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/smallads/modules/smallads_index/smallads_index.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Form\FormStateInterface;
+use function GuzzleHttp\json_encode;
 use Drupal\smallads\Entity\Smallad;
 use Drupal\smallads\Entity\SmalladInterface;
 use \GuzzleHttp\Psr7\Response;
@@ @@
     'keywords' => taxonomy_implode_tags($smallad->categories->referencedEntities()),
     'created' => $smallad->getCreatedTime(),
     'expires' => $smallad->expires->value,
-    'image' => ($smallad->image && $smallad->image->entity) ? substr(file_url_transform_relative(file_create_url($smallad->image->entity->getFileUri())), 1) : '',
+    'image' => ($smallad->image && $smallad->image->entity) ? substr(\Drupal::service('file_url_generator')->generateString($smallad->image->entity->getFileUri()), 1) : '',
     'scope' => $smallad->scope->value,
     'location' => $smallad->coordinates->value,
     'directexchange' => (int)$smallad->directexchange->value,
@@ @@
  */
 function smallads_index_http_request($method, $url, $body = '') : Response {
   if ($key = \Drupal::config('smallads_index.settings')->get('apikey')) {
-    $options['body'] = GuzzleHttp\json_encode($body);
+    $options['body'] = json_encode($body);
     $options['headers'] = [
       'Content-Type' => 'application/json',
       'apikey' => $key
@@ @@
     catch(\Exception $e)  {
       $message = 'No response from '.SMALLAD_INDEX_URL;
       trigger_error($message, E_USER_ERROR);
-      $response = new \GuzzleHttp\Psr7\Response(404, [], NULL, NULL, $message);
+      $response = new Response(404, [], NULL, NULL, $message);
     }
   }
   else {
     \Drupal::moduleHandler()->loadInclude('smallads_index', 'install');
     \Drupal::messenger()->addStatus(strtoupper($method) ." to /$url cannot run without APIkey");
-    $response = new \GuzzleHttp\Psr7\Response(403, [], NULL, NULL, 'No apikey given');
+    $response = new Response(403, [], NULL, NULL, 'No apikey given');
   }
   return $response;
 }
@@ @@
 /**
  * Implements hook_form_FORM_ID_alter().
  */
-function smallads_index_form_smallads_config_form_alter(&$form, Drupal\Core\Form\FormStateInterface $form_state) {
+function smallads_index_form_smallads_config_form_alter(&$form, FormStateInterface $form_state) {
   $form['solsearch'] = [
     '#title' => 'SolSearch',
     '#description' => t('Web service for global offers & wants.'),
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector


6) modules/contrib/smallads/src/Form/SmalladTypeForm.php:72

    ---------- begin diff ----------
@@ @@
     $smallad_type = $this->entity;
     $smallad_type->save();

-    $form_state->setRedirectUrl($smallad_type->urlInfo('collection'));
+    $form_state->setRedirectUrl($smallad_type->toUrl('collection'));
     // If the plural has changed we need to rebuild the menu.
     \Drupal::service('router.builder')->rebuild();
   }
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceUrlInfoRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/smallads/src/Form/Config.php:21

    ---------- begin diff ----------
@@ @@
    * @param ConfigFactoryInterface $config_factory
    * @param RouteBuilderInterface $router_builder
    */
-  function __construct(\Drupal\Core\Config\ConfigFactoryInterface $config_factory, RouteBuilderInterface $router_builder) {
+  function __construct(ConfigFactoryInterface $config_factory, RouteBuilderInterface $router_builder) {
     parent::__construct($config_factory);
     $this->routeBuilder = $router_builder;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/smallads/src/EventSubscriber/RouteSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\smallads\EventSubscriber;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Symfony\Component\Routing\Route;
 use Symfony\Component\Routing\RouteCollection;
@@ @@
    */
   private $smalladTypes;

-  function __construct(\Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager) {
+  function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->smalladTypes = $entity_type_manager->getStorage('smallad_type')->loadMultiple();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/smallads/smallads.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  *
@@ @@
  * Implements hook_ENTITY_TYPE_delete().
  * Delete all the user's smallads.
  */
-function smallads_user_delete(Drupal\Core\Entity\EntityInterface $entity) {
+function smallads_user_delete(EntityInterface $entity) {
   $ads = \Drupal::entityTypeManager()
     ->getStorage('smallad')
     ->loadByProperties(['uid' => $entity->id()]);
@@ @@
   if (isset($form['override']['controls']['group']['#options']['small-ad'])) {
     $form['options']['name']['#caption'] = t('N.B. It may be necessary to disable your ad-blocker to see the smallad fields.');
   }
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


10) modules/contrib/smallads/src/SmalladListBuilder.php:116

    ---------- begin diff ----------
@@ @@
     $row['scope'] = $scopeMap[$entity->scope->value];
     $row['type'] = $entity->type->entity->label();
     $row['title'] = $entity->title->value;
-    $row['changed'] = $this->dateFormatter->formatInterval(REQUEST_TIME - $entity->changed->value);
+    $row['changed'] = $this->dateFormatter->formatInterval(\Drupal::time()->getRequestTime() - $entity->changed->value);

     return $row + parent::buildRow($entity);
   }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/smallads/src/Plugin/Field/FieldFormatter/TimeBeforeAfterFormatter.php:27

    ---------- begin diff ----------
@@ @@
     // @todo include the library
     $elements = array();
     foreach ($items as $delta => &$item) {
-      if (REQUEST_TIME > $item->value) {
+      if (\Drupal::time()->getRequestTime() > $item->value) {
         $item->value = FALSE;
         $class = 'expired';
       }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/smallads/src/Plugin/DevelGenerate/SmalladDevelGenerate.php:305

    ---------- begin diff ----------
@@ @@
       'money' => rand(0, 1),
     ];
     $smallad = Smallad::create($props);
-    $smallad->created->value = rand($this->since, REQUEST_TIME);
+    $smallad->created->value = rand($this->since, \Drupal::time()->getRequestTime());
     // Populate all additional fields with sample values.
     $this->populateFields($smallad);
     $smallad->save();
@@ @@
         'entity_id' => $smallad->id(),
         'comment_type' => 'smallad',
         'field_name' => 'comments',
-        'created' => mt_rand($smallad->get('created')->value, REQUEST_TIME),
+        'created' => mt_rand($smallad->get('created')->value, \Drupal::time()->getRequestTime()),
         'subject' => substr($random->sentences(mt_rand(2, 6), TRUE), 0, 63),
         'langcode' => $smallad->language()->getId(),
       );
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 12 files have been changed by Rector                                      

