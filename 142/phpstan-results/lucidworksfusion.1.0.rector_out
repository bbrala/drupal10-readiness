modules/contrib/lucidworksfusion/fusion_connector.module
modules/contrib/lucidworksfusion/src/Form/FusionConnectorLanguageAccessForm.php
modules/contrib/lucidworksfusion/src-impostor-normalizers/EntityAccessDeniedHttpExceptionNormalizerImpostor.php
modules/contrib/lucidworksfusion/src-impostor-normalizers/ResourceObjectNormalizerImpostor.php
modules/contrib/lucidworksfusion/src/Access/EntityAccessChecker.php
modules/contrib/lucidworksfusion/src/Form/FusionConnectorLanguageTypeAccessForm.php
modules/contrib/lucidworksfusion/src/Controller/EntityResource.php
modules/contrib/lucidworksfusion/src/FusionConnectorPermissions.php
modules/contrib/lucidworksfusion/src/Controller/FusionConnectorEntryPoint.php
modules/contrib/lucidworksfusion/src/FusionConnectorServiceProvider.php
modules/contrib/lucidworksfusion/src/JsonApiResource/LabelOnlyResourceObject.php
modules/contrib/lucidworksfusion/src/EventSubscriber/ConfigSubscriber.php
modules/contrib/lucidworksfusion/src/JsonApiResource/Relationship.php
modules/contrib/lucidworksfusion/src/JsonApiResource/ResourceObject.php
modules/contrib/lucidworksfusion/src/EventSubscriber/ResourceObjectNormalizationCacher.php
modules/contrib/lucidworksfusion/src/Normalizer/EntityAccessDeniedHttpExceptionNormalizer.php
modules/contrib/lucidworksfusion/src/EventSubscriber/ResourceResponseSubscriber.php
modules/contrib/lucidworksfusion/src/Normalizer/ResourceObjectNormalizer.php
modules/contrib/lucidworksfusion/src/Form/FusionConnectorEntitiesAccessForm.php
modules/contrib/lucidworksfusion/src/Plugin/Derivative/LanguageAccessLocalTask.php
modules/contrib/lucidworksfusion/src/ResourceType/FusionConnectorResourceTypeRepository.php
modules/contrib/lucidworksfusion/src/Form/FusionConnectorFieldsAccessForm.php
modules/contrib/lucidworksfusion/src/Routing/FusionRoutes.php
modules/contrib/lucidworksfusion/tests/src/Functional/EntityAccessTest.php
modules/contrib/lucidworksfusion/tests/src/Functional/FusionConnectorConfigFormsTest.php
modules/contrib/lucidworksfusion/tests/src/Functional/FusionConnectorPermissionsTest.php
modules/contrib/lucidworksfusion/tests/src/Functional/MultilangualTest.php

6 files with changes
====================

1) modules/contrib/lucidworksfusion/src/EventSubscriber/ResourceResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fusion_connector\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\jsonapi\Normalizer\Value\CacheableNormalization;
 use Drupal\jsonapi\ResourceResponse;
 use Drupal\jsonapi\EventSubscriber\ResourceResponseSubscriber as JsonApiResourceResponseSubscriber;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\Serializer\SerializerInterface;

 /**
@@ @@
   /**
    * Serializes ResourceResponse responses' data, and removes that data.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event to process.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();
     if (!$response instanceof ResourceResponse) {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/lucidworksfusion/src/EventSubscriber/ConfigSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fusion_connector\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
@@ @@
 use Drupal\Core\DrupalKernelInterface;
 use Drupal\Core\Routing\RouteBuilderInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Associates JSON:API Extras' config cache tag with all JSON:API responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The response event.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     if ($event->getRequest()->getRequestFormat() !== 'api_json') {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


3) modules/contrib/lucidworksfusion/tests/src/Functional/MultilangualTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(
       [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/lucidworksfusion/tests/src/Functional/FusionConnectorPermissionsTest.php:56

    ---------- begin diff ----------
@@ @@

     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
-    $this->assertEqual(count($response['data']), 0);
+    $this->assertEquals(count($response['data']), 0);
   }

   /**
@@ @@
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have one element in array.
-    $this->assertEqual(count($response['data']), 1);
-    $this->assertEqual(
-      $response['data'][0]['attributes']['name'],
-      $this->tags[0]->getName()
-    );
+    $this->assertEquals(count($response['data']), 1);
+    $this->assertEquals($response['data'][0]['attributes']['name'], $this->tags[0]->getName());

     // Get the available articles.
     $response = Json::decode($this->drupalGet('/fusion/node/article'));
@@ @@
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have response,
-    $this->assertEqual(count($response['data']), 3);
+    $this->assertEquals(count($response['data']), 3);
     $this->assertArrayHasKey('title', $response['data'][0]['attributes']);
     $this->drupalLogout();

@@ @@
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have one element in array.
-    $this->assertEqual(count($response['data']), 3);
+    $this->assertEquals(count($response['data']), 3);
     $this->assertArrayHasKey('field_sort1', $response['data'][0]['attributes']);
     $this->assertArrayHasKey('title', $response['data'][0]['attributes']);
-    $this->assertEqual(
-      $response['data'][0]['attributes']['title'],
-      $this->nodes[0]->getTitle()
-    );
+    $this->assertEquals($response['data'][0]['attributes']['title'], $this->nodes[0]->getTitle());

     // Get the available tags.
     $response = Json::decode($this->drupalGet('/fusion/taxonomy_term/tags'));
@@ @@
     $this->assertNotNull($response);
     $this->assertIsArray($response['data']);
     // Check that we have no response,
-    $this->assertEqual(count($response['data']), 0);
+    $this->assertEquals(count($response['data']), 0);
     $this->drupalLogout();
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/lucidworksfusion/tests/src/Functional/FusionConnectorConfigFormsTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $permissions = [
@@ @@
     // Check if the fusion connector settings page is available.
     $this->drupalGet('admin/config/services/fusion_connector');

-    $this->assertField('fusion_connector_types[node--page]', 'Basic page');
-    $this->assertField('fusion_connector_types[node--article]', 'Article');
+    $this->assertSession()->fieldExists('fusion_connector_types[node--page]', 'Basic page');
+    $this->assertSession()->fieldExists('fusion_connector_types[node--article]', 'Article');

     // Disable the page entity from indexing.
     $edit = [
       'fusion_connector_types[node--article]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector',
-      $edit,
-      t('Save configuration')
-    );
-    $this->assertText('The configuration options have been saved.');
-    $this->assertFieldChecked('fusion_connector_types[node--page]');
-    $this->assertNoFieldChecked('fusion_connector_types[node--article]');
+    $this->drupalGet('admin/config/services/fusion_connector');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    $this->assertSession()->checkboxChecked('fusion_connector_types[node--page]');
+    $this->assertSession()->checkboxNotChecked('fusion_connector_types[node--article]');

     $config = $this->config('fusion_connector.settings');
     $disabledEntities = $config->get('disabled_entities');
@@ @@
     // Check if the visibility setting is available.
     $this->drupalGet('admin/config/services/fusion_connector/access/node/page');

-    $this->assertField('fusion_connector_fieldsaccess[nid][0]', 'nid');
-    $this->assertField('fusion_connector_fieldsaccess[uid][0]', 'uid');
+    $this->assertSession()->fieldExists('fusion_connector_fieldsaccess[nid][0]', 'nid');
+    $this->assertSession()->fieldExists('fusion_connector_fieldsaccess[uid][0]', 'uid');

     // Disable the page entity fields from indexing.
     $edit = [
       'fusion_connector_fieldsaccess[uid][0]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector/access/node/page',
-      $edit,
-      t('Save configuration')
-    );
-    $this->assertText('The configuration options have been saved.');
-    $this->assertFieldChecked('fusion_connector_fieldsaccess[nid][0]');
-    $this->assertNoFieldChecked('fusion_connector_fieldsaccess[uid][0]');
+    $this->drupalGet('admin/config/services/fusion_connector/access/node/page');
+    $this->submitForm($edit, t('Save configuration'));
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    $this->assertSession()->checkboxChecked('fusion_connector_fieldsaccess[nid][0]');
+    $this->assertSession()->checkboxNotChecked('fusion_connector_fieldsaccess[uid][0]');

     $config = $this->config('fusion_connector.settings');
     $disabledFields = $config->get('disabled_fields');
@@ @@
       'admin/config/services/fusion_connector/type_language_access/node/page'
     );

-    $this->assertField(
-      'fusion_connector_entity_type_languages[ca][checked]',
-      'Catalan'
-    );
+    $this->assertSession()->fieldExists('fusion_connector_entity_type_languages[ca][checked]', 'Catalan');

     // Disable the page entity from indexing on the ca language.
     $edit = [
       'fusion_connector_entity_type_languages[ca][checked]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector/type_language_access/node/page',
-      $edit,
-      t('Save configuration')
-    );
+    $this->drupalGet('admin/config/services/fusion_connector/type_language_access/node/page');
+    $this->submitForm($edit, t('Save configuration'));

     $config = $this->config('fusion_connector.settings');
     $disabledLanguages = $config->get('disabled_entity_type_languages');
@@ @@
     // Check if the language setting is available.
     $this->drupalGet('admin/config/services/fusion_connector/languages');

-    $this->assertField('fusion_connector_languages[ca][checked]', 'Catalan');
+    $this->assertSession()->fieldExists('fusion_connector_languages[ca][checked]', 'Catalan');

     // Disable a language from being indexed.
     $edit = [
       'fusion_connector_languages[ca][checked]' => 0,
     ];
-    $this->drupalPostForm(
-      'admin/config/services/fusion_connector/languages',
-      $edit,
-      t('Save configuration')
-    );
+    $this->drupalGet('admin/config/services/fusion_connector/languages');
+    $this->submitForm($edit, t('Save configuration'));

     $config = $this->config('fusion_connector.settings');
     $disabledLanguages = $config->get('disabled_languages');
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertFieldRector
 * AssertNoFieldCheckedRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/lucidworksfusion/tests/src/Functional/EntityAccessTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(
       ['view fusion_connector node--article'],
@@ @@
     $this->assertNotNull($response);
     $this->assertNotNull($response['data']);
     $this->assertTrue(count($response['data']) > 0);
-    $this->assertEqual(
-      $response['data'][0]['attributes']['title'],
-      'Hello World'
-    );
+    $this->assertEquals($response['data'][0]['attributes']['title'], 'Hello World');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

