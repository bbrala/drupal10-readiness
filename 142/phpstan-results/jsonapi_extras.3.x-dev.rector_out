modules/contrib/jsonapi_extras/jsonapi_extras.module
modules/contrib/jsonapi_extras/src-impostor-normalizers/FieldItemNormalizerImpostor.php
modules/contrib/jsonapi_extras/src/Normalizer/SchemataSchemaNormalizer.php
modules/contrib/jsonapi_extras/src-impostor-normalizers/ResourceIdentifierNormalizerImpostor.php
modules/contrib/jsonapi_extras/tests/src/Functional/JsonApiExtrasFunctionalTestBase.php
modules/contrib/jsonapi_extras/src-impostor-normalizers/ResourceObjectNormalizerImpostor.php
modules/contrib/jsonapi_extras/src/Annotation/ResourceFieldEnhancer.php
modules/contrib/jsonapi_extras/src/Entity/JsonapiResourceConfig.php
modules/contrib/jsonapi_extras/jsonapi_extras.post_update.php
modules/contrib/jsonapi_extras/modules/jsonapi_defaults/jsonapi_defaults.install
modules/contrib/jsonapi_extras/modules/jsonapi_defaults/jsonapi_defaults.module
modules/contrib/jsonapi_extras/src/Plugin/DateTimeEnhancerBase.php
modules/contrib/jsonapi_extras/src/Plugin/ResourceFieldEnhancerBase.php
modules/contrib/jsonapi_extras/modules/jsonapi_defaults/src/Controller/EntityResource.php
modules/contrib/jsonapi_extras/src/EntityToJsonApi.php
modules/contrib/jsonapi_extras/src/Plugin/ResourceFieldEnhancerInterface.php
modules/contrib/jsonapi_extras/src/Plugin/ResourceFieldEnhancerManager.php
modules/contrib/jsonapi_extras/src/Plugin/Validation/Constraint/DuplicateFieldConstraint.php
modules/contrib/jsonapi_extras/src/Plugin/Validation/Constraint/DuplicateFieldConstraintValidator.php
modules/contrib/jsonapi_extras/src/EventSubscriber/ConfigSubscriber.php
modules/contrib/jsonapi_extras/tests/src/Kernel/Controller/EntityResourceTest.php
modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/DateTimeEnhancer.php
modules/contrib/jsonapi_extras/src/EventSubscriber/JsonApiBuildSubscriber.php
modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/DateTimeFromStringEnhancer.php
modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/JSONFieldEnhancer.php
modules/contrib/jsonapi_extras/src/Form/JsonapiExtrasSettingsForm.php
modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/SingleNestedEnhancer.php
modules/contrib/jsonapi_extras/modules/jsonapi_defaults/src/JsonapiDefaultsServiceProvider.php
modules/contrib/jsonapi_extras/modules/jsonapi_defaults/tests/src/Functional/JsonApiDefaultsFunctionalTest.php
modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/UrlLinkEnhancer.php
modules/contrib/jsonapi_extras/src/Form/JsonapiResourceConfigDeleteForm.php
modules/contrib/jsonapi_extras/src/Form/JsonapiResourceConfigForm.php
modules/contrib/jsonapi_extras/src/Plugin/jsonapi/FieldEnhancer/UuidLinkEnhancer.php
modules/contrib/jsonapi_extras/src/ResourceType/ConfigurableResourceType.php
modules/contrib/jsonapi_extras/src/ResourceType/ConfigurableResourceTypeRepository.php
modules/contrib/jsonapi_extras/tests/src/Kernel/DefaultDisabledResourceConfigTest.php
modules/contrib/jsonapi_extras/tests/src/Kernel/EntityToJsonApiTest.php
modules/contrib/jsonapi_extras/src/ResourceType/NullJsonapiResourceConfig.php
modules/contrib/jsonapi_extras/src/SerializerDecorator.php
modules/contrib/jsonapi_extras/tests/src/Functional/JsonApiExtrasFunctionalTest.php
modules/contrib/jsonapi_extras/src/JsonapiExtrasServiceProvider.php
modules/contrib/jsonapi_extras/src-impostor-normalizers/ConfigEntityDenormalizerImpostor.php
modules/contrib/jsonapi_extras/src-impostor-normalizers/ContentEntityDenormalizerImpostor.php
modules/contrib/jsonapi_extras/src/JsonapiResourceConfigListBuilder.php
modules/contrib/jsonapi_extras/src/Normalizer/ConfigEntityDenormalizer.php
modules/contrib/jsonapi_extras/src/Normalizer/ContentEntityDenormalizer.php
modules/contrib/jsonapi_extras/src/Normalizer/FieldItemNormalizer.php
modules/contrib/jsonapi_extras/src/Normalizer/JsonApiNormalizerDecoratorBase.php
modules/contrib/jsonapi_extras/src/Normalizer/ResourceIdentifierNormalizer.php
modules/contrib/jsonapi_extras/src/Normalizer/ResourceObjectNormalizer.php
modules/contrib/jsonapi_extras/src/Normalizer/SchemaFieldDefinitionNormalizer.php

6 files with changes
====================

1) modules/contrib/jsonapi_extras/modules/jsonapi_defaults/tests/src/Functional/JsonApiDefaultsFunctionalTest.php:145

    ---------- begin diff ----------
@@ @@
     ]);
     $response = Json::decode($response);
     $this->assertArrayHasKey('data', $response);
-    $this->assertNotEqual(count($response['data']), $query_override);
-    $this->assertEqual(count($response['data']), static::PAGE_LIMIT_OVERRIDE_VALUE);
+    $this->assertNotEquals(count($response['data']), $query_override);
+    $this->assertEquals(count($response['data']), static::PAGE_LIMIT_OVERRIDE_VALUE);
   }

   /**
@@ @@
     $response = $this->drupalGet($jsonapi_response['links']['next']['href']);
     $jsonapi_response = Json::decode($response);
     $this->assertCount($page_limit, $jsonapi_response['data']);
-    $this->assertNotEqual($first_node_uuid, $jsonapi_response['data'][0]['attributes']['internalId']);
+    $this->assertNotEquals($first_node_uuid, $jsonapi_response['data'][0]['attributes']['internalId']);
     $this->assertArrayHasKey('next', $jsonapi_response['links']);
     $this->assertArrayHasKey('prev', $jsonapi_response['links']);
     $this->assertPagerLink(
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNotEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/jsonapi_extras/tests/src/Kernel/EntityToJsonApiTest.php:69

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Add the entity schemas.
     $this->installEntitySchema('node');
@@ @@
     $request_stack = $this->container->get('request_stack');
     $this->sut->serialize($this->node);
     $request = $request_stack->pop();
-    $this->assertNotEqual($request->getPathInfo(), '/jsonapi/node/' . $this->nodeType->id() . '/' . $this->node->uuid(), 'The request from jsonapi_extras.entity.to_jsonapi should not linger in the request stack.');
+    $this->assertNotEquals($request->getPathInfo(), '/jsonapi/node/' . $this->nodeType->id() . '/' . $this->node->uuid(), 'The request from jsonapi_extras.entity.to_jsonapi should not linger in the request stack.');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNotEqualRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/jsonapi_extras/tests/src/Kernel/Controller/EntityResourceTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     NodeType::create([
    ----------- end diff -----------

Applied rules:
 * ExplicitPhpErrorApiRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-9.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/jsonapi_extras/tests/src/Functional/JsonApiExtrasFunctionalTestBase.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Add vocabs field to the tags.
     $this->createEntityReferenceField(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/jsonapi_extras/src/EventSubscriber/ConfigSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_extras\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
@@ @@
 use Drupal\Core\DrupalKernelInterface;
 use Drupal\Core\Routing\RouteBuilderInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Associates JSON:API Extras' config cache tag with all JSON:API responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The response event.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     if ($event->getRequest()->getRequestFormat() !== 'api_json') {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector


6) modules/contrib/jsonapi_extras/tests/src/Functional/JsonApiExtrasFunctionalTest.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Check that the e0ipso/shaper library is available.
     if (!class_exists("\\Shaper\\DataAdaptor\\DataAdaptorBase")) {
       $this->fail('The e0ipso/shaper library is missing. You can install it with `composer require e0ipso/shaper`.');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

