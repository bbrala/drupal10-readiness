modules/contrib/entity_workflow/entity_workflow.api.php
modules/contrib/entity_workflow/modules/entity_workflow_workspace/src/Plugin/WorkflowType/EntityWorkflowWorkspace.php
modules/contrib/entity_workflow/src/StateTransitionValidator.php
modules/contrib/entity_workflow/entity_workflow.install
modules/contrib/entity_workflow/entity_workflow.module
modules/contrib/entity_workflow/modules/entity_workflow_workspace/src/Routing/RouteSubscriber.php
modules/contrib/entity_workflow/src/Controller/EntityWorkflowController.php
modules/contrib/entity_workflow/src/StateTransitionValidatorInterface.php
modules/contrib/entity_workflow/src/WorkflowTransitionLogInterface.php
modules/contrib/entity_workflow/src/WorkflowTransitionLogStorage.php
modules/contrib/entity_workflow/src/Entity/WorkflowTransitionLog.php
modules/contrib/entity_workflow/src/WorkflowTransitionLogStorageSchema.php
modules/contrib/entity_workflow/src/WorkflowType/EntityWorkflowTypeBase.php
modules/contrib/entity_workflow/src/EntityWorkflowInfo.php
modules/contrib/entity_workflow/src/WorkflowType/EntityWorkflowTypeInterface.php
modules/contrib/entity_workflow/src/WorkflowType/NonConfigurableWorkflowTypeTrait.php
modules/contrib/entity_workflow/src/WorkflowType/Permissions.php
modules/contrib/entity_workflow/tests/modules/entity_workflow_test/entity_workflow_test.module
modules/contrib/entity_workflow/src/EntityWorkflowState.php
modules/contrib/entity_workflow/tests/modules/entity_workflow_test/src/Plugin/WorkflowType/EntityWorkflowTestContent.php
modules/contrib/entity_workflow/src/EntityWorkflowStateFieldItemList.php
modules/contrib/entity_workflow/tests/modules/entity_workflow_test/src/Plugin/WorkflowType/EntityWorkflowTestWorkspace.php
modules/contrib/entity_workflow/src/EntityWorkflowStateItemInterface.php
modules/contrib/entity_workflow/src/EntityWorkflowTransition.php
modules/contrib/entity_workflow/src/Event/EntityWorkflowEvents.php
modules/contrib/entity_workflow/src/Event/InitiateTransitionEvent.php
modules/contrib/entity_workflow/modules/entity_workflow_content/entity_workflow_content.module
modules/contrib/entity_workflow/src/EventSubscriber/EntityWorkflowEventSubscriber.php
modules/contrib/entity_workflow/src/Form/EntityWorkflowBulkTransitionForm.php
modules/contrib/entity_workflow/modules/entity_workflow_content/src/Plugin/WorkflowType/EntityWorkflowContent.php
modules/contrib/entity_workflow/modules/entity_workflow_workspace/entity_workflow_workspace.module
modules/contrib/entity_workflow/src/Form/EntityWorkflowForm.php
modules/contrib/entity_workflow/modules/entity_workflow_workspace/src/EntityWorkflowWorkspaceListBuilder.php
modules/contrib/entity_workflow/src/Form/EntityWorkflowSimpleTransitionForm.php
modules/contrib/entity_workflow/modules/entity_workflow_workspace/src/EventSubscriber/EntityWorkflowWorkspaceEventSubscriber.php
modules/contrib/entity_workflow/src/Plugin/Derivative/EntityWorkflowLocalActions.php
modules/contrib/entity_workflow/src/Plugin/Derivative/EntityWorkflowLocalTasks.php
modules/contrib/entity_workflow/src/Plugin/Field/FieldType/EntityWorkflowStateItem.php
modules/contrib/entity_workflow/src/Plugin/views/argument/SourceEntityId.php
modules/contrib/entity_workflow/src/Routing/RouteSubscriber.php

4 files with changes
====================

1) modules/contrib/entity_workflow/modules/entity_workflow_workspace/entity_workflow_workspace.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\workflows\Entity\Workflow;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ @@
   // Don't alter access for standard ops (like view, create, edit, delete)
   // where this module doesn't define any state transition permissions; see
   // \Drupal\entity_workflow_workspace\Plugin\WorkflowType\EntityWorkflowWorkspace::getPermissions().
-  $workspace_workflow = \Drupal\workflows\Entity\Workflow::load('workspace')->getTypePlugin();
+  $workspace_workflow = Workflow::load('workspace')->getTypePlugin();
   if (!in_array($operation, array_keys($workspace_workflow->getConfiguration()['transitions']), TRUE)) {
     return AccessResult::neutral();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/entity_workflow/entity_workflow.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
 /**
  * Implements hook_form_FORM_ID_alter() for 'workflow_edit_form'.
  */
-function entity_workflow_form_workflow_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function entity_workflow_form_workflow_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   // Entity workflows are not configurable from the UI.
   $form['states_container']['states']['#tabledrag'] = NULL;
   unset($form['states_container']['states']['#header']['weight']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/entity_workflow/entity_workflow.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\workflows\WorkflowInterface;
+use Drupal\workflows\Transition;
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Entity Workflow API documentation.
@@ @@
  *   An array containing additional information about the transition, as
  *   defined by the initiator of the transition.
  */
-function hook_workflows_pre_transition(\Drupal\workflows\WorkflowInterface $workflow, \Drupal\workflows\Transition $transition, \Drupal\Core\Entity\FieldableEntityInterface $entity, $field_name, $context = []) {
+function hook_workflows_pre_transition(WorkflowInterface $workflow, Transition $transition, FieldableEntityInterface $entity, $field_name, $context = []) {
   // @todo
 }

@@ @@
  *   An array containing additional information about the transition, as
  *   defined by the initiator of the transition.
  */
-function hook_workflows_post_transition(\Drupal\workflows\WorkflowInterface $workflow, \Drupal\workflows\Transition $transition, \Drupal\Core\Entity\FieldableEntityInterface $entity, $field_name, $context = []) {
+function hook_workflows_post_transition(WorkflowInterface $workflow, Transition $transition, FieldableEntityInterface $entity, $field_name, $context = []) {
   // @todo
 }

@@ @@
  * @param \Drupal\Core\Entity\EntityInterface $entity
  *   The entity.
  */
-function hook_entity_workflow_has_bulk_workflow_alter(&$access, \Drupal\workflows\WorkflowInterface $workflow, \Drupal\Core\Entity\EntityInterface $entity) {
+function hook_entity_workflow_has_bulk_workflow_alter(&$access, WorkflowInterface $workflow, EntityInterface $entity) {
   $access = TRUE;
 }

@@ @@
  *   An array of entities. The key for each entity MUST be $entity_type . '--' .
  *   $entity_id.
  */
-function hook_entity_workflow_bulk_workflow_entities(\Drupal\workflows\WorkflowInterface $workflow, \Drupal\Core\Entity\EntityInterface $entity) {
+function hook_entity_workflow_bulk_workflow_entities(WorkflowInterface $workflow, EntityInterface $entity) {
   return [];
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/entity_workflow/src/Event/InitiateTransitionEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_workflow\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the initiate transition event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

