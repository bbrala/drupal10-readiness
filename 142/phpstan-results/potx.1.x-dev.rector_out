modules/contrib/potx/potx.drush.inc
modules/contrib/potx/tests/potx_test_5.module
modules/contrib/potx/tests/potx_test_6.module
modules/contrib/potx/tests/src/Kernel/PotxTest.php
modules/contrib/potx/tests/potx_test_7.module
modules/contrib/potx/potx.inc
modules/contrib/potx/potx.install
modules/contrib/potx/potx.local.inc
modules/contrib/potx/potx.locale.inc
modules/contrib/potx/potx.module
modules/contrib/potx/src/Commands/PotxCommands.php
modules/contrib/potx/src/Form/PotxExtractTranslationForm.php

3 files with changes
====================

1) modules/contrib/potx/tests/src/Kernel/PotxTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Add potx.inc which we test for its functionality.
@@ @@
     if (!$message) {
       $message = new FormattableMarkup('MsgID "@raw" found', ['@raw' => $string]);
     }
-    $this->assert(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . '"') !== FALSE, $message, $group);
+    $this->assertTrue(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . '"') !== FALSE, $message, $group);
   }

   /**
@@ @@
     if (!$message) {
       $message = new FormattableMarkup('MsgID "@raw" not found', ['@raw' => $string]);
     }
-    $this->assert(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . '"') === FALSE, $message, $group);
+    $this->assertTrue(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . '"') === FALSE, $message, $group);
   }

   /**
@@ @@
     if (!$message) {
       $message = new FormattableMarkup('MsgID "@raw" in context "@context" found', ['@raw' => $string, '@context' => $context]);
     }
-    $this->assert(strpos($this->potx_output, 'msgctxt "' . _potx_format_quoted_string('"' . $context . '"') . "\"\nmsgid \"" . _potx_format_quoted_string('"' . $string . '"') . '"') !== FALSE, $message, $group);
+    $this->assertTrue(strpos($this->potx_output, 'msgctxt "' . _potx_format_quoted_string('"' . $context . '"') . "\"\nmsgid \"" . _potx_format_quoted_string('"' . $string . '"') . '"') !== FALSE, $message, $group);
   }

   /**
@@ @@
     if (!$message) {
       $message = new FormattableMarkup('No MsgID "@raw" in context "@context" found', ['@raw' => $string, '@context' => $context]);
     }
-    $this->assert(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . '"' . "\nmsgctxt \"" . _potx_format_quoted_string('"' . $context . '"') . '"') === FALSE, $message, $group);
+    $this->assertTrue(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . '"' . "\nmsgctxt \"" . _potx_format_quoted_string('"' . $context . '"') . '"') === FALSE, $message, $group);
   }

   /**
@@ @@
     if (!$message) {
       $message = new FormattableMarkup('Plural ID "@raw" found', ['@raw' => $string]);
     }
-    $this->assert(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . "\"\nmsgid_plural \"" . _potx_format_quoted_string('"' . $plural . '"') . '"') !== FALSE, $message, $group);
+    $this->assertTrue(strpos($this->potx_output, 'msgid "' . _potx_format_quoted_string('"' . $string . '"') . "\"\nmsgid_plural \"" . _potx_format_quoted_string('"' . $plural . '"') . '"') !== FALSE, $message, $group);
   }

   /**
@@ @@
     if (!$message) {
       $message = new FormattableMarkup('Plural ID "@raw" found with context "@context"', ['@raw' => $string, '@context' => $context]);
     }
-    $this->assert(strpos($this->potx_output, 'msgctxt "' . _potx_format_quoted_string('"' . $context . '"') . "\"\nmsgid \"" . _potx_format_quoted_string('"' . $string . '"') . "\"\nmsgid_plural \"" . _potx_format_quoted_string('"' . $plural . '"') . '"') !== FALSE, $message, $group);
+    $this->assertTrue(strpos($this->potx_output, 'msgctxt "' . _potx_format_quoted_string('"' . $context . '"') . "\"\nmsgid \"" . _potx_format_quoted_string('"' . $string . '"') . "\"\nmsgid_plural \"" . _potx_format_quoted_string('"' . $plural . '"') . '"') !== FALSE, $message, $group);
   }

   /**
@@ @@
     if (!$message) {
       $message = new FormattableMarkup('No plural ID "@raw" found with context "@context"', ['@raw' => $string, '@context' => $context]);
     }
-    $this->assert(strpos($this->potx_output, 'msgctxt "' . _potx_format_quoted_string('"' . $context . '"') . "\"\nmsgid \"" . _potx_format_quoted_string('"' . $string . '"') . "\"\nmsgid_plural \"" . _potx_format_quoted_string('"' . $plural . '"') . '"') === FALSE, $message, $group);
+    $this->assertTrue(strpos($this->potx_output, 'msgctxt "' . _potx_format_quoted_string('"' . $context . '"') . "\"\nmsgid \"" . _potx_format_quoted_string('"' . $string . '"') . "\"\nmsgid_plural \"" . _potx_format_quoted_string('"' . $plural . '"') . '"') === FALSE, $message, $group);
   }

   /**
@@ @@
    *   The list of expected errors.
    */
   private function assertPotxErrors($expected_errors) {
-    $this->assert(count($this->potx_status) == count($expected_errors), count($expected_errors) . ' error messages found');
+    $this->assertTrue(count($this->potx_status) == count($expected_errors), count($expected_errors) . ' error messages found');

     $potx_errors = array_column($this->potx_status, 0);
     foreach ($expected_errors as $assert_msg => $error_msg) {
       $key = array_search($error_msg, $potx_errors);

-      $this->assert($key !== FALSE, $assert_msg . ' found');
+      $this->assertTrue($key !== FALSE, $assert_msg . ' found');

       if ($key !== FALSE) {
         unset($potx_errors[$key]);
@@ @@
       $message = t('Found @count source strings', array('@count' =>(int) $count));
     }
     // Assert that we have one more than $count to account for the header.
-    $this->assertEqual(substr_count($this->potx_output, 'msgid "'), $count + 1, $message, $group);
+    $this->assertEqualsWithDelta(substr_count($this->potx_output, 'msgid "'), $count + 1, $group, $message);
   }

   /**
@@ @@
     }
     $output_path = "$file_dir/$basename." . $this->randomName(10) . '.html';
     $rv = file_put_contents($output_path, $this->drupalGetContent());
-    $this->pass("$description: " . l(t('Contents of result page'), $output_path));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertRector
 * PassRector
 * AssertEqualsParameterToSpecificMethodsTypeRector (https://github.com/sebastianbergmann/phpunit/blob/master/ChangeLog-8.0.md)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/potx/src/Commands/PotxCommands.php:84

    ---------- begin diff ----------
@@ @@
     if (!empty($modules_option)) {
       $modules = explode(',', $modules_option);
       foreach ($modules as $module) {
-        $files = array_merge($files, _potx_explore_dir(drupal_get_path('module', $module) . '/', '*', $api_option, TRUE));
+        $files = array_merge($files, _potx_explore_dir(\Drupal::service('extension.list.module')->getPath($module) . '/', '*', $api_option, TRUE));
       }
     }
     elseif (!empty($files_option)) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/potx/potx.drush.inc:90

    ---------- begin diff ----------
@@ @@
   if (!empty($modules_option)) {
     $modules = explode(',', $modules_option);
     foreach ($modules as $module) {
-      $files = array_merge($files, _potx_explore_dir(drupal_get_path('module', $module) . '/', '*', $api_option, TRUE));
+      $files = array_merge($files, _potx_explore_dir(\Drupal::service('extension.list.module')->getPath($module) . '/', '*', $api_option, TRUE));
     }
   }
   elseif (!empty($files_option)) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

