modules/contrib/email_registration/email_registration.api.php
modules/contrib/email_registration/email_registration.install
modules/contrib/email_registration/email_registration.module
modules/contrib/email_registration/email_registration.post_update.php
modules/contrib/email_registration/src/Plugin/Commerce/CheckoutPane/EmailRegistrationCompletionRegistration.php
modules/contrib/email_registration/src/Plugin/Commerce/CheckoutPane/EmailRegistrationLogin.php
modules/contrib/email_registration/src/Plugin/migrate/process/EmailRegistrationUserName.php
modules/contrib/email_registration/tests/src/Functional/EmailRegistrationTestCase.php
modules/contrib/email_registration/tests/src/Functional/Plugin/Commerce/CheckoutPane/EmailRegistrationLoginTest.php

4 files with changes
====================

1) modules/contrib/email_registration/tests/src/Functional/EmailRegistrationTestCase.php:42

    ---------- begin diff ----------
@@ @@
       'pass[pass1]' => $pass,
       'pass[pass2]' => $pass,
     ];
-    $this->drupalPostForm('/user/register', $register, 'Create new account');
+    $this->drupalGet('/user/register');
+    $this->submitForm($register, 'Create new account');
     $this->drupalLogout();

     $login = [
@@ @@
       'name' => $name . '@example.com',
       'pass' => $pass,
     ];
-    $this->drupalPostForm('user/login', $login, 'Log in');
+    $this->drupalGet('user/login');
+    $this->submitForm($login, 'Log in');

     // Really basic confirmation that the user was created and logged in.
     $this->assertSession()->responseContains('<title>' . $name . ' | Drupal</title>');
@@ @@
       'name' => $name,
       'pass' => $pass,
     ];
-    $this->drupalPostForm('user/login', $login, 'Log in');
+    $this->drupalGet('user/login');
+    $this->submitForm($login, 'Log in');
     // When login_with_username is false, a user cannot login with just their
     // username.
     $this->assertSession()->responseContains('Unrecognized email address or password.');
@@ @@
     $this->drupalGet('user/login');
     $this->assertSession()->responseContains('Enter your email address or username.');
     $this->assertSession()->responseContains('Email or username');
-    $this->drupalPostForm('user/login', $login, 'Log in');
+    $this->drupalGet('user/login');
+    $this->submitForm($login, 'Log in');
     // When login_with_username is true, a user can login with just their
     // username.
     $this->assertSession()->responseContains('<title>' . $name . ' | Drupal</title>');
@@ @@
       'pass[pass1]' => $pass,
       'pass[pass2]' => $pass,
     ];
-    $this->drupalPostForm('/user/register', $register, 'Create new account');
+    $this->drupalGet('/user/register');
+    $this->submitForm($register, 'Create new account');
     // User properly created, immediately logged in.
     $this->assertSession()->responseContains('Registration successful. You are now logged in.');

@@ @@
       'pass[pass1]' => $pass,
       'pass[pass2]' => $pass,
     ];
-    $this->drupalPostForm('/user/register', $register, 'Create new account');
+    $this->drupalGet('/user/register');
+    $this->submitForm($register, 'Create new account');
     $account = user_load_by_mail($register['mail']);
     $this->assertSame($next_unique_name, $account->getAccountName());
     $this->drupalLogout();
@@ @@
     $user = $this->createUser();
     $name = $user->label();
     $this->drupalLogin($user);
-    $this->drupalPostForm('/user/' . $user->id() . '/edit', [], 'Save');
-    $this->assertEqual($name, User::load($user->id())->label(), 'Username should not change after empty edit.');
+    $this->drupalGet('/user/' . $user->id() . '/edit');
+    $this->submitForm([], 'Save');
+    $this->assertEquals($name, User::load($user->id())->label(), 'Username should not change after empty edit.');
     $this->drupalLogout();
     $this->drupalLogin($user);
     $this->assertSame($next_unique_name, $account->getAccountName());
@@ @@
     // Test that the field is set to type=value.
     $this->assertSession()->fieldNotExists('edit-name');
     $this->assertSession()->pageTextContains($username);
+    $this->drupalGet('user/' . $user->id() . '/edit');
     // Make sure the email isn't changed on save.
-    $this->drupalPostForm('user/' . $user->id() . '/edit', [], 'Save');
+    $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains($username);
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/email_registration/src/Plugin/Commerce/CheckoutPane/EmailRegistrationLogin.php:89

    ---------- begin diff ----------
@@ @@
     $complete_form['#cache']['tags'][] = 'config:email_registration.settings';

     $pane_form['register']['name']['#type'] = 'value';
-    $pane_form['register']['name']['#value'] = 'email_registration_' . user_password();
+    $pane_form['register']['name']['#value'] = 'email_registration_' . \Drupal::service('password_generator')->generate();
     $pane_form['register']['mail']['#title'] = $this->t('Email');

     return $pane_form;
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector


3) modules/contrib/email_registration/src/Plugin/Commerce/CheckoutPane/EmailRegistrationCompletionRegistration.php:25

    ---------- begin diff ----------
@@ @@
     // Set the name as per email_registration_form_user_register_form_alter().
     $pane_form['name'] = [
       '#type' => 'hidden',
-      '#value' => 'email_registration_' . user_password(),
+      '#value' => 'email_registration_' . \Drupal::service('password_generator')->generate(),
     ];

     // Try and help password managers.
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * WrapReturnRector


4) modules/contrib/email_registration/email_registration.module:134

    ---------- begin diff ----------
@@ @@
     /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
     $form_object = $form_state->getFormObject();
     if ($form_object->getEntity()->isNew()) {
-      $form['account']['name']['#default_value'] = 'email_registration_' . user_password();
+      $form['account']['name']['#default_value'] = 'email_registration_' . \Drupal::service('password_generator')->generate();
     }
   }
   $form['account']['mail']['#title'] = t('Email');
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

