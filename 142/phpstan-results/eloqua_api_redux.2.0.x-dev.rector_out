modules/contrib/eloqua_api_redux/modules/eloqua_api_auth_fallback/src/Commands/EloquaAuthTokensGenerate.php
modules/contrib/eloqua_api_redux/src/Service/EloquaAuthDefaultFallback.php
modules/contrib/eloqua_api_redux/src/Service/EloquaAuthFallbackInterface.php
modules/contrib/eloqua_api_redux/src/Service/Forms.php
modules/contrib/eloqua_api_redux/modules/eloqua_api_auth_fallback/src/Form/Settings.php
modules/contrib/eloqua_api_redux/tests/src/Unit/EloquaApiClientTest.php
modules/contrib/eloqua_api_redux/src/Controller/Callback.php
modules/contrib/eloqua_api_redux/src/Form/Settings.php
modules/contrib/eloqua_api_redux/src/Service/Contact.php
modules/contrib/eloqua_api_redux/src/Service/EloquaApiClient.php

2 files with changes
====================

1) modules/contrib/eloqua_api_redux/tests/src/Unit/EloquaApiClientTest.php:75

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $this->httpClientFactory = $this->getMockBuilder('Drupal\Core\Http\ClientFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->httpClientFactory = $this->createMock('Drupal\Core\Http\ClientFactory');

-    $this->config = $this->getMockBuilder('Drupal\Core\Config\Config\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->setMethods(['get'])
-      ->getMock();
+    $this->config = $this->createMock('Drupal\Core\Config\Config\Drupal\Core\Config\ImmutableConfig');

-    $this->configFactory = $this->getMockBuilder('Drupal\Core\Config\ConfigFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->configFactory = $this->createMock('Drupal\Core\Config\ConfigFactory');

     $this->configFactory->expects($this->any())
       ->method('get')
@@ @@
       ->with('eloqua_api_redux.tokens')
       ->will($this->returnValue($this->configTokens));

-    $this->loggerFactory = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannelFactoryInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock('Drupal\Core\Logger\LoggerChannelFactoryInterface');

-    $this->cacheBackend = $this->getMockBuilder('Drupal\Core\Cache\CacheBackendInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->cacheBackend = $this->createMock('Drupal\Core\Cache\CacheBackendInterface');

-    $this->moduleHandler = $this->getMockBuilder('Drupal\Core\Extension\ModuleHandlerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->moduleHandler = $this->createMock('Drupal\Core\Extension\ModuleHandlerInterface');

     // Set container and required dependencies.
     $container = new ContainerBuilder();
-    $pathValidator = $this->getMockBuilder('Drupal\Core\Path\PathValidatorInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $unroutedUrlAssembler = $this->getMockBuilder('Drupal\Core\Utility\UnroutedUrlAssemblerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $authFallbackService = $this->getMockBuilder('Drupal\eloqua_api_redux\Service\EloquaAuthFallbackInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $pathValidator = $this->createMock('Drupal\Core\Path\PathValidatorInterface');
+    $unroutedUrlAssembler = $this->createMock('Drupal\Core\Utility\UnroutedUrlAssemblerInterface');
+    $authFallbackService = $this->createMock('Drupal\eloqua_api_redux\Service\EloquaAuthFallbackInterface');
     $container->set('path.validator', $pathValidator);
     $container->set('unrouted_url_assembler', $unroutedUrlAssembler);
     $container->set('eloqua_api_redux.auth_fallback_default', $authFallbackService);
@@ @@
       $this->getMockResponseContents(self::ACCESS_TOKEN_RESPONSE)
     );

-    $httpClientFactory = $this->getMockBuilder('Drupal\Core\Http\ClientFactory')
-      ->disableOriginalConstructor()
-      ->setMethods(['fromOptions'])
-      ->getMock();
+    $httpClientFactory = $this->createMock('Drupal\Core\Http\ClientFactory');

-    $guzzleClient = $this->getMockBuilder('GuzzleHttp\Client')
-      ->disableOriginalConstructor()
-      ->setMethods(['request'])
-      ->getMock();
+    $guzzleClient = $this->createMock('GuzzleHttp\Client');

     $guzzleClient->expects($this->any())
       ->method('request')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector (https://github.com/lmc-eu/steward/pull/187/files#diff-c7e8c65e59b8b4ff8b54325814d4ba55L80)
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/eloqua_api_redux/src/Service/EloquaApiClient.php:326

    ---------- begin diff ----------
@@ @@
     // Save the token.
     $cacheItem = [
       'value' => $value,
-      'expire' => REQUEST_TIME + $this->eloquaApiCacheAge($key),
+      'expire' => \Drupal::time()->getRequestTime() + $this->eloquaApiCacheAge($key),
     ];

     $this->configTokens
@@ @@
     if ($cache = $this->configTokens->get($type)) {
       $response = unserialize($cache, ['allowed_classes' => FALSE]);

-      $now = REQUEST_TIME;
+      $now = \Drupal::time()->getRequestTime();
       $expire = $response['expire'];

       // Manually validate if the token is still fresh.
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * WrapReturnRector


 [OK] 2 files have been changed by Rector                                       

