modules/contrib/mass_password_change/src/Form/MassPasswordChangeConfirm.php
modules/contrib/mass_password_change/src/Form/MassPasswordResetConfirm.php
modules/contrib/mass_password_change/src/Plugin/Action/MassPasswordChange.php
modules/contrib/mass_password_change/src/Plugin/Action/MassPasswordReset.php
modules/contrib/mass_password_change/tests/src/Functional/MassPasswordChange.php
modules/contrib/mass_password_change/tests/src/Functional/MassPasswordReset.php
modules/contrib/mass_password_change/tests/src/Functional/MassPasswordTestBase.php

3 files with changes
====================

1) modules/contrib/mass_password_change/tests/src/Functional/MassPasswordTestBase.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Set up a privileged user.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Create roles.
     $roles = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/mass_password_change/tests/src/Functional/MassPasswordReset.php:24

    ---------- begin diff ----------
@@ @@
       'action' => 'mass_password_reset_action',
       "user_bulk_form[$admin_user_weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText('No access to execute Password reset the selected user(s) on the User admin.');
+    $this->submitForm($edit, 'Apply to selected items');
+    $this->assertSession()->pageTextContains('No access to execute Password reset the selected user(s) on the User admin.');
   }

   /**
@@ @@
       'action' => 'mass_password_reset_action',
       "user_bulk_form[$current_user_weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText(sprintf("No access to execute Password reset the selected user(s) on the User %s.", $this->adminUser->getAccountName()));
+    $this->submitForm($edit, 'Apply to selected items');
+    $this->assertSession()->pageTextContains(sprintf("No access to execute Password reset the selected user(s) on the User %s.", $this->adminUser->getAccountName()));
   }

   /**
@@ @@
       $weight = $this->getUserWeightFromAccountsArray($this->accounts, $uid);
       $edit["user_bulk_form[$weight]"] = TRUE;
     }
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
+    $this->submitForm($edit, 'Apply to selected items');
     // Check confirmation text.
-    $this->assertText('Are you sure you want to reset password these user accounts?');
+    $this->assertSession()->pageTextContains('Are you sure you want to reset password these user accounts?');
     // Check user names.
     foreach ($accounts as $account) {
-      $this->assertText($account->getAccountName());
+      $this->assertSession()->pageTextContains($account->getAccountName());
     }
-    $this->drupalPostForm(NULL, [], 'Password reset');
+    $this->submitForm([], 'Password reset');
     // Check password reset urls from email.
     $emails = $this->drupalGetMails();
     $reset_urls = [];
@@ @@
       'action' => 'mass_password_reset_action',
       "user_bulk_form[$weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText(sprintf("No access to execute Password reset the selected user(s) on the User %s.", $blocked_account->getAccountName()));
+    $this->submitForm($edit, 'Apply to selected items');
+    $this->assertSession()->pageTextContains(sprintf("No access to execute Password reset the selected user(s) on the User %s.", $blocked_account->getAccountName()));
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/mass_password_change/tests/src/Functional/MassPasswordChange.php:18

    ---------- begin diff ----------
@@ @@
       'action' => 'mass_password_change_action',
       "user_bulk_form[$admin_user_weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText('No access to execute Change password the selected user(s) on the User admin.');
+    $this->submitForm($edit, 'Apply to selected items');
+    $this->assertSession()->pageTextContains('No access to execute Change password the selected user(s) on the User admin.');
   }

   /**
@@ @@
       'action' => 'mass_password_change_action',
       "user_bulk_form[$current_user_weight]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
-    $this->assertText(sprintf("No access to execute Change password the selected user(s) on the User %s.", $this->adminUser->getAccountName()));
+    $this->submitForm($edit, 'Apply to selected items');
+    $this->assertSession()->pageTextContains(sprintf("No access to execute Change password the selected user(s) on the User %s.", $this->adminUser->getAccountName()));
   }

   /**
@@ @@
       $weight = $this->getUserWeightFromAccountsArray($this->accounts, $uid);
       $edit["user_bulk_form[$weight]"] = TRUE;
     }
-    $this->drupalPostForm(NULL, $edit, 'Apply to selected items');
+    $this->submitForm($edit, 'Apply to selected items');
     // Check confirmation text.
-    $this->assertText('Are you sure you want to change password these user accounts?');
+    $this->assertSession()->pageTextContains('Are you sure you want to change password these user accounts?');
     // Check user names.
     foreach ($accounts as $account) {
-      $this->assertText($account->getAccountName());
+      $this->assertSession()->pageTextContains($account->getAccountName());
     }
     // Generate new password and submit confirmation form.
     $new_password = $this->randomString();
@@ @@
       'password[pass1]' => $new_password,
       'password[pass2]' => $new_password,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Change password');
+    $this->submitForm($edit, 'Change password');
     // Check new passwords.
     foreach ($accounts as $account) {
       $this->drupalLogout();
@@ @@
         'name' => $account->getAccountName(),
         'pass' => $new_password,
       ];
-      $this->drupalPostForm(NULL, $edit, 'Log in');
-      $this->assertUrl('/user/' . $account->id());
-      $this->assertText($account->getAccountName());
+      $this->submitForm($edit, 'Log in');
+      $this->assertSession()->addressEquals('/user/' . $account->id());
+      $this->assertSession()->pageTextContains($account->getAccountName());
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * AssertUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

