diff --git a/tests/src/Unit/ConfigUpdateUnitTestBase.php b/tests/src/Unit/ConfigUpdateUnitTestBase.php
index 6071cc7..559b5d3 100644
--- a/tests/src/Unit/ConfigUpdateUnitTestBase.php
+++ b/tests/src/Unit/ConfigUpdateUnitTestBase.php
@@ -38,7 +38,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
     $definitions = [];
     $map = [];
     foreach ($this->entityDefinitionInformation as $info) {
-      $def = $this->getMockBuilder('Drupal\Core\Config\Entity\ConfigEntityTypeInterface')->getMock();
+      $def = $this->createMock('Drupal\Core\Config\Entity\ConfigEntityTypeInterface');
       $def
         ->expects($this->any())
         ->method('getConfigPrefix')
@@ -61,14 +61,14 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
 
     // Add in a content entity definition, which shouldn't be recognized by the
     // config lister class.
-    $def = $this->getMockBuilder('Drupal\Core\Entity\ContentEntityTypeInterface')->getMock();
+    $def = $this->createMock('Drupal\Core\Entity\ContentEntityTypeInterface');
     $def
       ->expects($this->any())
       ->method('entityClassImplements')
       ->willReturn(FALSE);
     $definitions['content_entity'] = $def;
 
-    $manager = $this->getMockBuilder('Drupal\Core\Entity\EntityTypeManagerInterface')->getMock();
+    $manager = $this->createMock('Drupal\Core\Entity\EntityTypeManagerInterface');
     $manager
       ->method('getDefinitions')
       ->willReturn($definitions);
@@ -190,7 +190,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
    */
   protected function getConfigStorageMock($type) {
     if ($type == 'active') {
-      $storage = $this->getMockBuilder('Drupal\Core\Config\StorageInterface')->getMock();
+      $storage = $this->createMock('Drupal\Core\Config\StorageInterface');
 
       // Various tests assume various values of configuration that need to be
       // read from active storage.
@@ -213,7 +213,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
         ->will($this->returnValueMap($this->configStorageActiveInfo));
     }
     elseif ($type == 'extension') {
-      $storage = $this->getMockBuilder('Drupal\Core\Config\ExtensionInstallStorage')->disableOriginalConstructor()->getMock();
+      $storage = $this->createMock('Drupal\Core\Config\ExtensionInstallStorage');
 
       $value = [];
       foreach ($this->configStorageExtensionInfo[2][1] as $item) {
@@ -240,7 +240,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
 
     }
     else {
-      $storage = $this->getMockBuilder('Drupal\Core\Config\ExtensionInstallStorage')->disableOriginalConstructor()->getMock();
+      $storage = $this->createMock('Drupal\Core\Config\ExtensionInstallStorage');
 
       $value = [];
       foreach ($this->configStorageOptionalInfo[2][1] as $item) {
@@ -271,7 +271,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
    * Creates a mock module handler for the test.
    */
   protected function getModuleHandlerMock() {
-    $manager = $this->getMockBuilder('Drupal\Core\Extension\ModuleHandlerInterface')->getMock();
+    $manager = $this->createMock('Drupal\Core\Extension\ModuleHandlerInterface');
     $manager->method('getModuleList')
       ->willReturn(['foo_module' => '', 'standard' => '']);
 
@@ -282,7 +282,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
    * Creates a mock theme handler for the test.
    */
   protected function getThemeHandlerMock() {
-    $manager = $this->getMockBuilder('Drupal\Core\Extension\ThemeHandlerInterface')->getMock();
+    $manager = $this->createMock('Drupal\Core\Extension\ThemeHandlerInterface');
     $manager->method('listInfo')
       ->willReturn(['foo_theme' => '']);
     return $manager;
@@ -292,7 +292,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
    * Creates a mock string translation class for the test.
    */
   protected function getTranslationMock() {
-    $translation = $this->getMockBuilder('Drupal\Core\StringTranslation\TranslationInterface')->getMock();
+    $translation = $this->createMock('Drupal\Core\StringTranslation\TranslationInterface');
     $translation
       ->method('translateString')
       ->will($this->returnCallback([$this, 'mockTranslate']));
@@ -330,7 +330,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
    * Stores dispatched events in ConfigUpdateUnitTestBase::dispatchedEvents.
    */
   protected function getEventDispatcherMock() {
-    $event = $this->getMockBuilder('Symfony\Component\EventDispatcher\EventDispatcherInterface')->getMock();
+    $event = $this->createMock('Symfony\Component\EventDispatcher\EventDispatcherInterface');
     $event
       ->method('dispatch')
       ->will($this->returnCallback([$this, 'mockDispatch']));
@@ -375,7 +375,7 @@ abstract class ConfigUpdateUnitTestBase extends UnitTestCase {
    * Creates a mock config factory class for the test.
    */
   protected function getConfigFactoryMock() {
-    $config = $this->getMockBuilder('Drupal\Core\Config\ConfigFactoryInterface')->getMock();
+    $config = $this->createMock('Drupal\Core\Config\ConfigFactoryInterface');
     $config
       ->method('getEditable')
       ->will($this->returnCallback([$this, 'mockGetEditable']));
