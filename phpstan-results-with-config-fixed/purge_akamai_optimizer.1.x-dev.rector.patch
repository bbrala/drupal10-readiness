diff --git a/composer.json b/composer.json
index 5348889..bdeea6e 100644
--- a/composer.json
+++ b/composer.json
@@ -6,8 +6,8 @@
     "homepage": "https://www.drupal.org/project/purge_akamai_optimizer",
     "require": {
         "php": ">=7.2",
-        "drupal/core": "^8.8.6 || ^9",
         "drupal/purge": "^3.0.0",
-        "drupal/akamai": "^3.0@alpha"
+        "drupal/akamai": "^3.0@alpha",
+        "drupal/core": "^9.3 || ^10"
     }
 }
diff --git a/purge_akamai_optimizer.info.yml b/purge_akamai_optimizer.info.yml
index dd42fcf..a796aa9 100644
--- a/purge_akamai_optimizer.info.yml
+++ b/purge_akamai_optimizer.info.yml
@@ -1,7 +1,7 @@
 name: 'Purge Akamai Optimizer'
 type: module
 description: 'Provides various optimisation for akamai tag based purging.'
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: 'Akamai'
 config: 'purge_akamai_optimizer.settings'
 dependencies:
diff --git a/purge_akamai_optimizer.module b/purge_akamai_optimizer.module
index a33a050..c12093b 100644
--- a/purge_akamai_optimizer.module
+++ b/purge_akamai_optimizer.module
@@ -15,7 +15,7 @@ function purge_akamai_optimizer_help($route_name, RouteMatchInterface $route_mat
   switch ($route_name) {
     // Main module help for the purge_akamai_optimizer module.
     case 'help.page.purge_akamai_optimizer':
-      $output = '<pre>' . file_get_contents(drupal_get_path('module', 'purge_akamai_optimizer') . '/README.md') . '</pre>';
+      $output = '<pre>' . file_get_contents(\Drupal::service('extension.list.module')->getPath('purge_akamai_optimizer') . '/README.md') . '</pre>';
       return $output;
 
     default:
diff --git a/src/EventSubscriber/TagsHashingSubscriber.php b/src/EventSubscriber/TagsHashingSubscriber.php
index 462df38..4327a4d 100644
--- a/src/EventSubscriber/TagsHashingSubscriber.php
+++ b/src/EventSubscriber/TagsHashingSubscriber.php
@@ -143,10 +143,10 @@ class TagsHashingSubscriber implements EventSubscriberInterface {
   /**
    * Instucts akamai cdn to disable its caching.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The dispatched event.
    */
-  public function edgeControlHeader(Event $event) {
+  public function edgeControlHeader(\Symfony\Contracts\EventDispatcher\Event $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
