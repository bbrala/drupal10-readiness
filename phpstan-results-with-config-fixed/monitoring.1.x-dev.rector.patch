diff --git a/modules/demo/monitoring_demo.install b/modules/demo/monitoring_demo.install
index dfec607..46cbcbb 100644
--- a/modules/demo/monitoring_demo.install
+++ b/modules/demo/monitoring_demo.install
@@ -107,7 +107,7 @@ function monitoring_demo_install() {
   $sensor_manager->enableSensor('monitoring_disappeared_sensors');
 
   // Generate some image style derivative errors.
-  $file = file_save_data($random->name());
+  $file = \Drupal::service('file.repository')->writeData($random->name());
   /** @var \Drupal\file\FileUsage\FileUsageInterface $usage */
   $usage = \Drupal::service('file.usage');
   foreach ($nodes as $node) {
@@ -127,7 +127,7 @@ function monitoring_demo_install() {
       ]
     );
   }
-  $file = file_save_data($random->name());
+  $file = \Drupal::service('file.repository')->writeData($random->name());
   \Drupal::logger('image')->notice('Source image at %source_image_path not found while trying to generate derivative image at %derivative_path.', [
       '%source_image_path' => $file->getFileUri(),
       '%derivative_path' => 'hash://styles/preview/5678.jpeg',
diff --git a/modules/demo/tests/src/Functional/MonitoringDemoTest.php b/modules/demo/tests/src/Functional/MonitoringDemoTest.php
index 49a5043..f5e3b77 100644
--- a/modules/demo/tests/src/Functional/MonitoringDemoTest.php
+++ b/modules/demo/tests/src/Functional/MonitoringDemoTest.php
@@ -23,15 +23,27 @@ class MonitoringDemoTest extends MonitoringTestBase {
    */
   public function testInstalled() {
     $this->drupalGet('');
-    $this->assertText('Monitoring');
-    $this->assertText(t('Welcome to the Monitoring demo installation.'));
-    $this->assertLink(t('Monitoring sensors overview'));
-    $this->assertLink(t('Monitoring sensors settings'));
-    $this->assertText(t('Sensor example: "Installed modules"'));
-    $this->assertLink(t('Configure'));
-    $this->assertLink(t('Uninstall'), 0);
-    $this->assertLink(t('Uninstall'), 1);
-    $this->assertText(t('Drush integration - open up your console and type in # drush monitoring-sensor-config'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Monitoring');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Welcome to the Monitoring demo installation.'));
+    $this->assertSession()->linkExists(t('Monitoring sensors overview'));
+    $this->assertSession()->linkExists(t('Monitoring sensors settings'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Sensor example: "Installed modules"'));
+    $this->assertSession()->linkExists(t('Configure'));
+    $this->assertSession()->linkExists(t('Uninstall'), 0);
+    $this->assertSession()->linkExists(t('Uninstall'), 1);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Drush integration - open up your console and type in # drush monitoring-sensor-config'));
   }
 
 }
diff --git a/modules/monitoring_mail/tests/src/Kernel/MonitoringMailKernelTest.php b/modules/monitoring_mail/tests/src/Kernel/MonitoringMailKernelTest.php
index 517854a..fc0a98c 100644
--- a/modules/monitoring_mail/tests/src/Kernel/MonitoringMailKernelTest.php
+++ b/modules/monitoring_mail/tests/src/Kernel/MonitoringMailKernelTest.php
@@ -30,7 +30,7 @@ class MonitoringMailKernelTest extends MonitoringUnitTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('dblog', ['watchdog']);
diff --git a/modules/multigraph/tests/src/Functional/MultigraphServicesTest.php b/modules/multigraph/tests/src/Functional/MultigraphServicesTest.php
index 4712183..c77137d 100644
--- a/modules/multigraph/tests/src/Functional/MultigraphServicesTest.php
+++ b/modules/multigraph/tests/src/Functional/MultigraphServicesTest.php
@@ -40,7 +40,7 @@ class MultigraphServicesTest extends MonitoringTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->servicesAccount = $this->drupalCreateUser([
@@ -55,7 +55,7 @@ class MultigraphServicesTest extends MonitoringTestBase {
     $this->drupalLogin($this->servicesAccount);
 
     $response_data = $this->doJsonRequest('monitoring-multigraph');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     /** @var \Drupal\monitoring_multigraph\MultigraphInterface[] $multigraphs */
     $multigraphs = \Drupal::entityTypeManager()
@@ -64,28 +64,28 @@ class MultigraphServicesTest extends MonitoringTestBase {
 
     // Test the list of multigraphs.
     foreach ($multigraphs as $name => $multigraph) {
-      $this->assertEqual($response_data[$name]['id'], $multigraph->id());
-      $this->assertEqual($response_data[$name]['label'], $multigraph->label());
-      $this->assertEqual($response_data[$name]['description'], $multigraph->getDescription());
-      $this->assertEqual($response_data[$name]['sensors'], $multigraph->getSensorsRaw());
-      $this->assertEqual($response_data[$name]['uri'], Url::fromRoute('rest.monitoring-multigraph.GET' , ['id' => $multigraph->id(), '_format' => 'json'])->setAbsolute()->toString());
+      $this->assertEquals($response_data[$name]['id'], $multigraph->id());
+      $this->assertEquals($response_data[$name]['label'], $multigraph->label());
+      $this->assertEquals($response_data[$name]['description'], $multigraph->getDescription());
+      $this->assertEquals($response_data[$name]['sensors'], $multigraph->getSensorsRaw());
+      $this->assertEquals($response_data[$name]['uri'], Url::fromRoute('rest.monitoring-multigraph.GET' , ['id' => $multigraph->id(), '_format' => 'json'])->setAbsolute()->toString());
     }
 
     // Test response for non-existing multigraph.
     $name = 'multigraph_that_does_not_exist';
     $this->doJsonRequest('monitoring-multigraph/' . $name);
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     // Test the predefined multigraph.
     $name = 'watchdog_severe_entries';
     $response_data = $this->doJsonRequest('monitoring-multigraph/' . $name);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $multigraph = $multigraphs[$name];
-    $this->assertEqual($response_data['id'], $multigraph->id());
-    $this->assertEqual($response_data['label'], $multigraph->label());
-    $this->assertEqual($response_data['description'], $multigraph->getDescription());
-    $this->assertEqual($response_data['sensors'], $multigraph->getSensorsRaw());
-    $this->assertEqual($response_data['uri'], Url::fromRoute('rest.monitoring-multigraph.GET' , ['id' => $multigraph->id(), '_format' => 'json'])->setAbsolute()->toString());
+    $this->assertEquals($response_data['id'], $multigraph->id());
+    $this->assertEquals($response_data['label'], $multigraph->label());
+    $this->assertEquals($response_data['description'], $multigraph->getDescription());
+    $this->assertEquals($response_data['sensors'], $multigraph->getSensorsRaw());
+    $this->assertEquals($response_data['uri'], Url::fromRoute('rest.monitoring-multigraph.GET' , ['id' => $multigraph->id(), '_format' => 'json'])->setAbsolute()->toString());
   }
 
 }
diff --git a/modules/multigraph/tests/src/Functional/MultigraphWebTest.php b/modules/multigraph/tests/src/Functional/MultigraphWebTest.php
index 8eb47e5..5094893 100644
--- a/modules/multigraph/tests/src/Functional/MultigraphWebTest.php
+++ b/modules/multigraph/tests/src/Functional/MultigraphWebTest.php
@@ -66,27 +66,43 @@ class MultigraphWebTest extends BrowserTestBase {
       'description' => $this->randomString(),
       'sensor_add_select' => 'dblog_404',
     ];
-    $this->drupalPostForm('admin/config/system/monitoring/multigraphs/add', $values, t('Add sensor'));
-    $this->assertText(t('Sensor "Page not found errors" added. You have unsaved changes.'));
-
-    $this->drupalPostForm(NULL, [
+    $this->drupalGet('admin/config/system/monitoring/multigraphs/add');
+    $this->submitForm($values, t('Add sensor'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Sensor "Page not found errors" added. You have unsaved changes.'));
+
+    $this->submitForm([
       'sensor_add_select' => 'user_failed_logins',
     ], t('Add sensor'));
-    $this->assertText(t('Sensor "Failed user logins" added. You have unsaved changes.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Sensor "Failed user logins" added. You have unsaved changes.'));
 
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'sensor_add_select' => 'user_successful_logins',
     ], t('Add sensor'));
-    $this->assertText(t('Sensor "Successful user logins" added. You have unsaved changes.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Sensor "Successful user logins" added. You have unsaved changes.'));
 
     // And last but not least, change all sensor label values and save form.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'sensors[dblog_404][label]' => 'Page not found errors (test)',
       'sensors[user_failed_logins][label]' => 'Failed user logins (test)',
       'sensors[user_successful_logins][label]' => 'Successful user logins (test)',
     ], t('Save'));
-    $this->assertText(t('Multigraph settings saved.'));
-    $this->assertText('Page not found errors (test), Failed user logins (test), Successful user logins (test)');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Multigraph settings saved.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Page not found errors (test), Failed user logins (test), Successful user logins (test)');
   }
 
   /**
@@ -98,13 +114,25 @@ class MultigraphWebTest extends BrowserTestBase {
     // Go to multigraph overview and test editing pre-installed multigraph.
     $this->drupalGet('admin/config/system/monitoring/multigraphs');
     // Check label, description and sensors (before editing).
-    $this->assertText('Watchdog severe entries');
-    $this->assertText('Watchdog entries with severity Warning or higher');
-    $this->assertText('404, Alert, Critical, Emergency, Error');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Watchdog severe entries');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Watchdog entries with severity Warning or higher');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('404, Alert, Critical, Emergency, Error');
 
     // Edit.
     $this->drupalGet('admin/config/system/monitoring/multigraphs/watchdog_severe_entries');
-    $this->assertText('Edit Multigraph');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Edit Multigraph');
 
     // Change label, description and add a sensor.
     $values = [
@@ -112,30 +140,49 @@ class MultigraphWebTest extends BrowserTestBase {
       'description' => 'Watchdog entries with severity Warning or higher (test)',
       'sensor_add_select' => 'user_successful_logins',
     ];
-    $this->drupalPostForm(NULL, $values, t('Add sensor'));
-    $this->assertText('Sensor "Successful user logins" added. You have unsaved changes.');
+    $this->submitForm($values, t('Add sensor'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Sensor "Successful user logins" added. You have unsaved changes.');
 
     // Remove a sensor.
     $this->getSession()->getPage()->pressButton('remove_dblog_404');
     // (drupalPostAjaxForm() lets us target the button precisely.)
-    $this->assertText(t('Sensor "Page not found errors" removed.  You have unsaved changes.'));
-    $this->drupalPostForm(NULL, [], t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Sensor "Page not found errors" removed.  You have unsaved changes.'));
+    $this->submitForm([], t('Save'));
+    $this->drupalGet('admin/config/system/monitoring/multigraphs/watchdog_severe_entries');
 
     // Change weights and save form.
-    $this->drupalPostForm('admin/config/system/monitoring/multigraphs/watchdog_severe_entries', [
+    $this->submitForm([
       'sensors[user_successful_logins][weight]' => -2,
       'sensors[dblog_event_severity_error][weight]' => -1,
       'sensors[dblog_event_severity_critical][weight]' => 0,
       'sensors[dblog_event_severity_emergency][weight]' => 1,
       'sensors[dblog_event_severity_alert][weight]' => 2,
     ], t('Save'));
-    $this->assertText(t('Multigraph settings saved.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Multigraph settings saved.'));
 
     // Go back to multigraph overview and check changed values.
     $this->drupalGet('admin/config/system/monitoring/multigraphs');
-    $this->assertText('Watchdog severe entries (test)');
-    $this->assertText('Watchdog entries with severity Warning or higher (test)');
-    $this->assertText('Successful user logins, Error, Critical, Emergency, Alert');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Watchdog severe entries (test)');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Watchdog entries with severity Warning or higher (test)');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Successful user logins, Error, Critical, Emergency, Alert');
   }
 
   /**
@@ -145,16 +192,32 @@ class MultigraphWebTest extends BrowserTestBase {
     // Go to multigraph overview and check for pre-installed multigraph.
     $this->drupalGet('admin/config/system/monitoring/multigraphs');
     // Check label and description (before deleting).
-    $this->assertText('Watchdog severe entries');
-    $this->assertText('Watchdog entries with severity Warning or higher');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Watchdog severe entries');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Watchdog entries with severity Warning or higher');
+    $this->drupalGet('admin/config/system/monitoring/multigraphs/watchdog_severe_entries/delete');
 
     // Delete.
-    $this->drupalPostForm('admin/config/system/monitoring/multigraphs/watchdog_severe_entries/delete', [], t('Delete'));
-    $this->assertText('The Watchdog severe entries (test) multigraph has been deleted');
+    $this->submitForm([], t('Delete'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The Watchdog severe entries (test) multigraph has been deleted');
 
     // Go back to multigraph overview and check that multigraph is deleted.
     $this->drupalGet('admin/config/system/monitoring/multigraphs');
-    $this->assertNoText('Watchdog severe entries');
-    $this->assertNoText('Watchdog entries with severity Warning or higher');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Watchdog severe entries');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Watchdog entries with severity Warning or higher');
   }
 }
diff --git a/modules/multigraph/tests/src/Unit/Entity/MultigraphUnitTest.php b/modules/multigraph/tests/src/Unit/Entity/MultigraphUnitTest.php
index d1a6057..cd08bbc 100644
--- a/modules/multigraph/tests/src/Unit/Entity/MultigraphUnitTest.php
+++ b/modules/multigraph/tests/src/Unit/Entity/MultigraphUnitTest.php
@@ -19,14 +19,14 @@ class MultigraphUnitTest extends UnitTestCase {
   /**
    * A mock entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $entityTypeManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
 
     $container = new ContainerBuilder();
@@ -78,7 +78,7 @@ class MultigraphUnitTest extends UnitTestCase {
    * @param array $id
    *   An ID to set on the sensor.
    *
-   * @return \Drupal\monitoring\Entity\SensorConfig|\PHPUnit_Framework_MockObject_MockObject
+   * @return \Drupal\monitoring\Entity\SensorConfig|\PHPUnit\Framework\MockObject\MockObject
    *   The mock sensor object.
    */
   protected function getMockSensor($id) {
diff --git a/monitoring.install b/monitoring.install
index d71a5dd..437b881 100644
--- a/monitoring.install
+++ b/monitoring.install
@@ -81,7 +81,7 @@ function monitoring_event_severities() {
 function monitoring_update_8101() {
   // Only create if the sensor config does not exist yet.
   if (!SensorConfig::load('temporary_files_usages')) {
-    $config_path = drupal_get_path('module', 'monitoring') . '/config/install/monitoring.sensor_config.temporary_files_usages.yml';
+    $config_path = \Drupal::service('extension.list.module')->getPath('monitoring') . '/config/install/monitoring.sensor_config.temporary_files_usages.yml';
     $data = Yaml::decode(file_get_contents($config_path));
     \Drupal::service('monitoring.sensor_manager')->clearCachedDefinitions();
     SensorConfig::create($data)->trustData()->save();
diff --git a/src/Plugin/monitoring/SensorPlugin/EnabledModulesSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/EnabledModulesSensorPlugin.php
index 0a81f38..f744e40 100644
--- a/src/Plugin/monitoring/SensorPlugin/EnabledModulesSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/EnabledModulesSensorPlugin.php
@@ -102,7 +102,7 @@ class EnabledModulesSensorPlugin extends SensorPluginBase {
 
     foreach ($modules as $module => $module_data) {
       // Skip profiles.
-      if (strpos(drupal_get_path('module', $module), 'profiles') === 0) {
+      if (strpos(\Drupal::service('extension.list.module')->getPath($module), 'profiles') === 0) {
         continue;
       }
       // As we also include hidden modules, some might have no name at all,
@@ -184,7 +184,7 @@ class EnabledModulesSensorPlugin extends SensorPluginBase {
     $monitoring_installed_modules = array();
     // Filter out install profile.
     foreach (array_keys(Drupal::moduleHandler()->getModuleList()) as $module) {
-      $path_parts = explode('/', drupal_get_path('module', $module));
+      $path_parts = explode('/', \Drupal::service('extension.list.module')->getPath($module));
       if ($path_parts[0] != 'profiles') {
         $monitoring_installed_modules[$module] = $module;
       }
diff --git a/src/Plugin/monitoring/SensorPlugin/TemporaryFilesUsagesSensorPlugin.php b/src/Plugin/monitoring/SensorPlugin/TemporaryFilesUsagesSensorPlugin.php
index 8c5b8fd..36d5037 100644
--- a/src/Plugin/monitoring/SensorPlugin/TemporaryFilesUsagesSensorPlugin.php
+++ b/src/Plugin/monitoring/SensorPlugin/TemporaryFilesUsagesSensorPlugin.php
@@ -118,7 +118,7 @@ class TemporaryFilesUsagesSensorPlugin extends DatabaseAggregatorSensorPlugin {
       if (!empty($types)) {
         // Delete the last unnecessary comma.
         array_pop($types);
-        $filename = Link::fromTextAndUrl($file->getFilename(), Url::fromUri(file_create_url($file->getFileUri())));
+        $filename = Link::fromTextAndUrl($file->getFilename(), \Drupal::service('file_url_generator')->generate($file->getFileUri()));
         $status = Link::createFromRoute('Make permanent', 'monitoring.make_file_permanent', [
           'monitoring_sensor_config' => $this->sensorConfig->id(),
           'file' => $fid
@@ -127,7 +127,7 @@ class TemporaryFilesUsagesSensorPlugin extends DatabaseAggregatorSensorPlugin {
         $rows[] = [
           'fid' => $fid,
           'filename' => $filename,
-          'usages' => render($types),
+          'usages' => \Drupal::service('renderer')->render($types),
           'status' => $status,
         ];
       }
diff --git a/tests/src/Functional/MonitoringCaptchaTest.php b/tests/src/Functional/MonitoringCaptchaTest.php
index d2b4871..b9a0636 100644
--- a/tests/src/Functional/MonitoringCaptchaTest.php
+++ b/tests/src/Functional/MonitoringCaptchaTest.php
@@ -20,7 +20,7 @@ class MonitoringCaptchaTest extends MonitoringTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Add captcha.inc file.
     module_load_include('inc', 'captcha');
@@ -41,23 +41,24 @@ class MonitoringCaptchaTest extends MonitoringTestBase {
     captcha_set_form_id_setting('user_login_form', 'captcha/Math');
 
     // Assert the number of entries in the captcha_session table is 1.
-    $this->assertEqual(\Drupal::database()->query('SELECT COUNT (*) FROM {captcha_sessions}')->fetchField(), 0);
+    $this->assertEquals(\Drupal::database()->query('SELECT COUNT (*) FROM {captcha_sessions}')->fetchField(), 0);
     // Try to log in, with invalid captcha answer which should fail.
     $edit = array(
       'name' => $user->getAccountName(),
       'pass' => $user->pass_raw,
       'captcha_response' => '?',
     );
-    $this->drupalPostForm('user', $edit, t('Log in'));
+    $this->drupalGet('user');
+    $this->submitForm($edit, t('Log in'));
 
     // Assert the total number of entries in captcha_sessions table is now 2.
-    $this->assertEqual(\Drupal::database()->query('SELECT COUNT (*) FROM {captcha_sessions}')->fetchField(), 1);
+    $this->assertEquals(\Drupal::database()->query('SELECT COUNT (*) FROM {captcha_sessions}')->fetchField(), 1);
 
     // Run sensor and get the message.
     $message = $this->runSensor('captcha_failed_count')->getMessage();
 
     // Assert the number of failed attempts.
-    $this->assertEqual($message, '1 attempt(s)');
+    $this->assertEquals($message, '1 attempt(s)');
   }
 
 }
diff --git a/tests/src/Functional/MonitoringCommerceTest.php b/tests/src/Functional/MonitoringCommerceTest.php
index 29acd3c..bc38545 100644
--- a/tests/src/Functional/MonitoringCommerceTest.php
+++ b/tests/src/Functional/MonitoringCommerceTest.php
@@ -31,7 +31,7 @@ class MonitoringCommerceTest extends MonitoringTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->account = $this->drupalCreateUser([
@@ -48,7 +48,8 @@ class MonitoringCommerceTest extends MonitoringTestBase {
     $edit = [
       'currency_codes[]' => ['CHF', 'EUR'],
     ];
-    $this->drupalPostForm('admin/commerce/config/currencies/add', $edit, t('Add'));
+    $this->drupalGet('admin/commerce/config/currencies/add');
+    $this->submitForm($edit, t('Add'));
 
     // Create a default store.
     $edit = [
@@ -60,7 +61,8 @@ class MonitoringCommerceTest extends MonitoringTestBase {
       'address[0][address][postal_code]' => '1234',
       'default_currency' => 'CHF',
     ];
-    $this->drupalPostForm('store/add/online', $edit, t('Save'));
+    $this->drupalGet('store/add/online');
+    $this->submitForm($edit, t('Save'));
 
     // Create an order item type
     $edit = [
@@ -68,7 +70,8 @@ class MonitoringCommerceTest extends MonitoringTestBase {
       'label' => 'Test',
       'orderType' => 'default'
     ];
-    $this->drupalPostForm('admin/commerce/config/order-item-types/add', $edit, t('Save'));
+    $this->drupalGet('admin/commerce/config/order-item-types/add');
+    $this->submitForm($edit, t('Save'));
   }
 
   /**
@@ -92,7 +95,7 @@ class MonitoringCommerceTest extends MonitoringTestBase {
     $sensor->save();
     // Assert there is no value if there are no orders.
     $result = $this->runSensor('commerce_total_turnover');
-    $this->assertEqual($result->getMessage(), 'No value');
+    $this->assertEquals($result->getMessage(), 'No value');
     $this->assertNull($result->getValue());
 
     // Create some orders with different states and currencies.
@@ -103,14 +106,15 @@ class MonitoringCommerceTest extends MonitoringTestBase {
     $this->createEmptyOrderWithPrice('completed', 1500, 'CHF');
 
     $result = $this->runSensor('commerce_total_turnover');
-    $this->assertEqual($result->getMessage(), 'CHF 1’900.00 in 1 day');
-    $this->assertEqual($result->getValue(), '1900.000000');
+    $this->assertEquals($result->getMessage(), 'CHF 1’900.00 in 1 day');
+    $this->assertEquals($result->getValue(), '1900.000000');
 
     // Now only consider completed orders.
     $edit = [
       'settings[commerce_order_paid_states][completed]' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/system/monitoring/sensors/commerce_total_turnover', $edit, t('Save'));
+    $this->drupalGet('admin/config/system/monitoring/sensors/commerce_total_turnover');
+    $this->submitForm($edit, t('Save'));
 
     $sensor = SensorConfig::load('commerce_total_turnover');
     $paid_states = $sensor->getSetting('commerce_order_paid_states');
@@ -118,23 +122,24 @@ class MonitoringCommerceTest extends MonitoringTestBase {
     $this->assertContains('completed', $paid_states);
 
     $result = $this->runSensor('commerce_total_turnover');
-    $this->assertEqual($result->getMessage(), 'CHF 1’500.00 in 1 day');
-    $this->assertEqual($result->getValue(), '1500.000000');
+    $this->assertEquals($result->getMessage(), 'CHF 1’500.00 in 1 day');
+    $this->assertEquals($result->getValue(), '1500.000000');
 
     // Change currency.
     $this->createEmptyOrderWithPrice('completed', 250, 'EUR');
     $edit = [
       'settings[commerce_order_currency]' => 'EUR',
     ];
-    $this->drupalPostForm('admin/config/system/monitoring/sensors/commerce_total_turnover', $edit, t('Save'));
+    $this->drupalGet('admin/config/system/monitoring/sensors/commerce_total_turnover');
+    $this->submitForm($edit, t('Save'));
 
     $result = $this->runSensor('commerce_total_turnover');
-    $this->assertEqual($result->getMessage(), '€ 250.00 in 1 day');
-    $this->assertEqual($result->getValue(), '250.000000');
+    $this->assertEquals($result->getMessage(), '€ 250.00 in 1 day');
+    $this->assertEquals($result->getValue(), '250.000000');
     $this->drupalLogout();
     $result = $this->runSensor('commerce_total_turnover');
-    $this->assertEqual($result->getMessage(), '€ 250.00 in 1 day');
-    $this->assertEqual($result->getValue(), '250.000000');
+    $this->assertEquals($result->getMessage(), '€ 250.00 in 1 day');
+    $this->assertEquals($result->getValue(), '250.000000');
   }
 
   /**
diff --git a/tests/src/Functional/MonitoringCoreWebTest.php b/tests/src/Functional/MonitoringCoreWebTest.php
index dca37cd..3af04fb 100644
--- a/tests/src/Functional/MonitoringCoreWebTest.php
+++ b/tests/src/Functional/MonitoringCoreWebTest.php
@@ -44,22 +44,26 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $this->drupalLogin($account);
 
     $this->drupalGet('admin/config/system/monitoring/sensors/add');
-    $this->assertFieldByName('status', TRUE);
+    $this->assertSession()->fieldValueEquals('status', TRUE);
+    $this->drupalGet('admin/config/system/monitoring/sensors/add');
     // Test creation of Node entity aggregator sensor.
-    $this->drupalPostForm('admin/config/system/monitoring/sensors/add', [
+    $this->submitForm([
       'label' => 'QueueTest',
       'id' => 'queue_size_test',
       'plugin_id' => 'queue_size',
     ], 'Select sensor');
 
-    $this->assertOption('edit-settings-queue', 'monitoring_test');
-    $this->assertOptionByText('edit-settings-queue', 'Test Worker');
+    $this->assertSession()->optionExists('edit-settings-queue', 'monitoring_test');
+    $this->assertSession()->optionExists('edit-settings-queue', 'Test Worker');
 
     $edit = [
       'settings[queue]' => 'monitoring_test',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('Sensor QueueTest saved.');
+    $this->submitForm($edit, 'Save');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Sensor QueueTest saved.');
   }
 
   /**
@@ -76,17 +80,20 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     // Assert updates when installing and uninstalling the past module.
     $this->drupalGet('admin/reports/monitoring');
-    $this->assertNoRaw('<span title="Requirements of the past module">Module past</span>');
+    $this->assertSession()->responseNotContains('<span title="Requirements of the past module">Module past</span>');
     $this->installModules(['past']);
     $this->drupalGet('admin/reports/monitoring');
-    $this->assertRaw('<span title="Requirements of the past module">Module past</span>');
+    $this->assertSession()->responseContains('<span title="Requirements of the past module">Module past</span>');
     $this->uninstallModules(['past']);
     $this->drupalGet('admin/reports/monitoring');
-    $this->assertNoRaw('<span title="Requirements of the past module">Module past</span>');
+    $this->assertSession()->responseNotContains('<span title="Requirements of the past module">Module past</span>');
 
     // Assert the rebuild update changes.
     $this->drupalGet('/admin/config/system/monitoring/sensors/rebuild');
-    $this->assertText('No changes were made.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('No changes were made.');
 
   }
 
@@ -113,10 +120,14 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $this->assertEquals(5, count($rows), 'There are 5 results in the table.');
     $this->assertTrue(!empty($rows[0]->find('css', 'a')->getText()), 'Found WID in verbose output');
     $this->assertEquals("Session opened for {$test_user->getDisplayName()}.", $message, 'Found replaced message in output.');
-    $this->assertText('Session opened for ' . $test_user->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Session opened for ' . $test_user->label());
+    $this->drupalGet('admin/config/system/monitoring/sensors/user_successful_logins');
 
     // Remove variables from the fields and assert message has no replacements.
-    $this->drupalPostForm('admin/config/system/monitoring/sensors/user_successful_logins', ['verbose_fields[variables][field_key]' => ''], t('Save'));
+    $this->submitForm(['verbose_fields[variables][field_key]' => ''], t('Save'));
     $this->drupalGet('admin/reports/monitoring/sensors/user_successful_logins');
     $rows = $this->getSession()->getPage()->findAll('css', '#unaggregated_result tbody tr');
     $message = $rows[0]->find('css', 'td:nth-child(2)')->getText();
@@ -139,16 +150,16 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $this->drupalLogin($test_user);
 
     $result = $this->runSensor('user_sessions_authenticated');
-    $this->assertEqual($result->getValue(), 1);
+    $this->assertEquals($result->getValue(), 1);
     $result = $this->runSensor('user_sessions_all');
-    $this->assertEqual($result->getValue(), 1);
+    $this->assertEquals($result->getValue(), 1);
     // Logout the user to see if sensors responded to the change.
     $this->drupalLogout();
 
     $result = $this->runSensor('user_sessions_authenticated');
-    $this->assertEqual($result->getValue(), 0);
+    $this->assertEquals($result->getValue(), 0);
     $result = $this->runSensor('user_sessions_all');
-    $this->assertEqual($result->getValue(), 0);
+    $this->assertEquals($result->getValue(), 0);
 
     // Check verbose output.
     $this->drupalLogin($test_user);
@@ -176,10 +187,16 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     // The username should be replaced in the message.
     $this->drupalGet('/admin/reports/monitoring/sensors/dblog_event_severity_notice');
-    $this->assertText('Session opened for ' . $test_user->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Session opened for ' . $test_user->label());
     // 'No results' text is displayed when the query has 0 results.
     $this->drupalGet('/admin/reports/monitoring/sensors/dblog_event_severity_warning');
-    $this->assertText('There are no results for this sensor to display.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There are no results for this sensor to display.');
   }
 
   /**
@@ -193,7 +210,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     // configuration.
     $result = $this->runSensor('twig_debug_mode');
     $this->assertTrue($result->isOk());
-    $this->assertEqual($result->getMessage(), 'Optimal configuration');
+    $this->assertEquals($result->getMessage(), 'Optimal configuration');
 
     $twig_config = $this->container->getParameter('twig.config');
     // Set parameters to the optimal configuration to make sure implicit changes
@@ -206,7 +223,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     $result = $this->runSensor('twig_debug_mode');
     $this->assertTrue($result->isOk());
-    $this->assertEqual($result->getMessage(), 'Optimal configuration');
+    $this->assertEquals($result->getMessage(), 'Optimal configuration');
 
     $twig_config = $this->container->getParameter('twig.config');
     // Change parameters and check sensor message.
@@ -218,7 +235,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     $result = $this->runSensor('twig_debug_mode');
     $this->assertTrue($result->isWarning());
-    $this->assertEqual($result->getMessage(), 'Twig debug mode is enabled, Twig cache disabled, Automatic recompilation of Twig templates enabled');
+    $this->assertEquals($result->getMessage(), 'Twig debug mode is enabled, Twig cache disabled, Automatic recompilation of Twig templates enabled');
   }
 
   /**
@@ -241,31 +258,31 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     // Check sensor message after first privilege user creation.
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '1 privileged user(s), 1 new user(s)');
+    $this->assertEquals($result->getMessage(), '1 privileged user(s), 1 new user(s)');
 
     // Create second privileged user.
     $test_user_second = $this->drupalCreateUser(array(), 'test_user_2', TRUE);
     $this->drupalLogin($test_user_second);
     // Check sensor message after new privilege user creation.
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '2 privileged user(s), 2 new user(s)');
+    $this->assertEquals($result->getMessage(), '2 privileged user(s), 2 new user(s)');
 
     // Reset the user data, button is tested in UI tests.
     \Drupal::keyValue('monitoring.users')->deleteAll();
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '2 privileged user(s)');
+    $this->assertEquals($result->getMessage(), '2 privileged user(s)');
 
     // Make changes to a user.
     $test_user_second->setUsername('changed');
     $test_user_second->save();
     // Check sensor message for user changes.
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '2 privileged user(s), 1 changed user(s)');
+    $this->assertEquals($result->getMessage(), '2 privileged user(s), 1 changed user(s)');
 
     // Reset the user data again, check sensor message.
     \Drupal::keyValue('monitoring.users')->deleteAll();
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '2 privileged user(s)');
+    $this->assertEquals($result->getMessage(), '2 privileged user(s)');
 
     // Add permissions to authenticated user with no privilege of registration.
     \Drupal::configFactory()->getEditable('user.settings')->set('register', 'admin_only')->save();
@@ -275,38 +292,38 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $this->assertTrue($result->isWarning());
 
     // Count users included admin.
-    $this->assertEqual($result->getMessage(), '3 privileged user(s), Privileged access for roles Authenticated user');
+    $this->assertEquals($result->getMessage(), '3 privileged user(s), Privileged access for roles Authenticated user');
 
     // Add permissions to anonymous user and check the sensor.
     user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, array('administer account settings'));
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '3 privileged user(s), Privileged access for roles Anonymous user, Authenticated user');
+    $this->assertEquals($result->getMessage(), '3 privileged user(s), Privileged access for roles Anonymous user, Authenticated user');
 
     // Authenticated user with privilege of register.
     \Drupal::configFactory()->getEditable('user.settings')->set('register', 'visitors')->save();
     $result = $this->runSensor('user_integrity');
     $this->assertTrue($result->isCritical());
-    $this->assertEqual($result->getMessage(), '3 privileged user(s), Privileged access for roles Anonymous user, Authenticated user, Self registration possible.');
+    $this->assertEquals($result->getMessage(), '3 privileged user(s), Privileged access for roles Anonymous user, Authenticated user, Self registration possible.');
 
     // Create an authenticated user and test that the sensor counter increments.
     $test_user_third = $this->drupalCreateUser(array(), 'test_user_3');
     \Drupal::keyValue('monitoring.users')->deleteAll();
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '4 privileged user(s), Privileged access for roles Anonymous user, Authenticated user, Self registration possible.');
+    $this->assertEquals($result->getMessage(), '4 privileged user(s), Privileged access for roles Anonymous user, Authenticated user, Self registration possible.');
 
     $test_user_third->setUsername('changed2');
     $test_user_third->save();
 
     // Check sensor message for user changes.
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '4 privileged user(s), 1 changed user(s), Privileged access for roles Anonymous user, Authenticated user, Self registration possible.');
+    $this->assertEquals($result->getMessage(), '4 privileged user(s), 1 changed user(s), Privileged access for roles Anonymous user, Authenticated user, Self registration possible.');
 
     // Check sensor message with permissions revoked.
     user_role_revoke_permissions(RoleInterface::ANONYMOUS_ID, array('administer account settings'));
     user_role_revoke_permissions(RoleInterface::AUTHENTICATED_ID, array('administer account settings'));
     \Drupal::keyValue('monitoring.users')->deleteAll();
     $result = $this->runSensor('user_integrity');
-    $this->assertEqual($result->getMessage(), '2 privileged user(s)');
+    $this->assertEquals($result->getMessage(), '2 privileged user(s)');
 
   }
 
@@ -372,9 +389,10 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $convert_to_array = function (NodeElement $header) {
       return $header->getText();
     };
+    $this->drupalGet('/admin/reports/monitoring/sensors/dblog_php_notices');
 
     // Check out sensor result page.
-    $this->drupalPostForm('/admin/reports/monitoring/sensors/dblog_php_notices', [], t('Run now'));
+    $this->submitForm([], t('Run now'));
     $headers = $this->getSession()->getPage()->findAll('css', '#unaggregated_result thead tr th');
     $headers = array_map($convert_to_array, $headers);
     $this->assertEquals($expected_header, $headers, 'The header is correct.');
@@ -384,11 +402,11 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     $first_message = array_map($convert_to_array, $rows[0]->findAll('css', 'td'));
     $second_message = array_map($convert_to_array, $rows[1]->findAll('css', 'td'));
-    $this->assertEqual($first_message, $expected_body_one, 'The first notice is as expected.');
-    $this->assertEqual($second_message, $expected_body_two, 'The second notice is as expected');
+    $this->assertEquals($first_message, $expected_body_one, 'The first notice is as expected.');
+    $this->assertEquals($second_message, $expected_body_two, 'The second notice is as expected');
 
     // Test Filename shortening.
-    $this->assertEqual(str_replace(DRUPAL_ROOT . '/', '', $error['%file'] . ':' . $error['%line']), $first_message[4], 'Filename was successfully shortened.');
+    $this->assertEquals(str_replace(DRUPAL_ROOT . '/', '', $error['%file'] . ':' . $error['%line']), $first_message[4], 'Filename was successfully shortened.');
   }
 
   /**
@@ -398,8 +416,9 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
    */
   public function testUserFailedLoginSensorPlugin() {
 
+    $this->drupalGet('user/login');
     // Add a failed attempt for the admin account.
-    $this->drupalPostForm('user/login', [
+    $this->submitForm([
       'name' => 'admin',
       'pass' => '123'
     ], t('Log in'));
@@ -462,14 +481,13 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $this->assertTrue($result->isOk());
 
     $log = $this->loadWatchdog();
-    $this->assertEqual(count($log), 1, 'There should be one log entry: all sensors enabled by default added.');
+    $this->assertEquals(count($log), 1, 'There should be one log entry: all sensors enabled by default added.');
 
     $sensor_config_all = monitoring_sensor_manager()->getAllSensorConfig();
-    $this->assertEqual(new FormattableMarkup($log[0]->message, unserialize($log[0]->variables)),
-      new FormattableMarkup('@count new sensor/s added: @names', array(
-        '@count' => count($sensor_config_all),
-        '@names' => implode(', ', array_keys($sensor_config_all))
-      )));
+    $this->assertEquals(new FormattableMarkup($log[0]->message, unserialize($log[0]->variables)), new FormattableMarkup('@count new sensor/s added: @names', array(
+      '@count' => count($sensor_config_all),
+      '@names' => implode(', ', array_keys($sensor_config_all))
+    )));
 
     // Uninstall the media module so that the media requirements sensor goes
     // away.
@@ -479,9 +497,9 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     // critical status.
     $result = $this->runSensor('monitoring_disappeared_sensors');
     $this->assertTrue($result->isCritical());
-    $this->assertEqual($result->getMessage(), 'Missing sensor core_requirements_media');
+    $this->assertEquals($result->getMessage(), 'Missing sensor core_requirements_media');
     // There should be no new logs.
-    $this->assertEqual(count($this->loadWatchdog()), 1);
+    $this->assertEquals(count($this->loadWatchdog()), 1);
 
     // Install the comment module to test the correct procedure of removing
     // sensors.
@@ -491,7 +509,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     // Now we should be back to normal.
     $result = $this->runSensor('monitoring_disappeared_sensors');
     $this->assertTrue($result->isOk());
-    $this->assertEqual(count($this->loadWatchdog()), 1);
+    $this->assertEquals(count($this->loadWatchdog()), 1);
 
     // Do the correct procedure to remove a sensor - first disable thes sensors
     // and then uninstall the comment module.
@@ -502,8 +520,8 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $result = $this->runSensor('monitoring_disappeared_sensors');
     $this->assertTrue($result->isOk());
     $log = $this->loadWatchdog();
-    $this->assertEqual(count($log), 2, 'Removal of core_requirements_media sensor should be logged.');
-    $this->assertEqual(new FormattableMarkup($log[1]->message, unserialize($log[1]->variables)), '1 new sensor/s removed: core_requirements_media');
+    $this->assertEquals(count($log), 2, 'Removal of core_requirements_media sensor should be logged.');
+    $this->assertEquals(new FormattableMarkup($log[1]->message, unserialize($log[1]->variables)), '1 new sensor/s removed: core_requirements_media');
   }
 
   /**
@@ -524,8 +542,8 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $this->installModules(array('contact'));
     $result = $this->runSensor('monitoring_installed_modules');
     $this->assertTrue($result->isCritical());
-    $this->assertEqual($result->getMessage(), '1 modules delta, expected 0, Following modules are NOT expected to be installed: Contact (contact)');
-    $this->assertEqual($result->getValue(), 1);
+    $this->assertEquals($result->getMessage(), '1 modules delta, expected 0, Following modules are NOT expected to be installed: Contact (contact)');
+    $this->assertEquals($result->getValue(), 1);
 
     // Allow additional modules and run the sensor - it should not escalate now.
     $sensor_config = SensorConfig::load('monitoring_installed_modules');
@@ -541,8 +559,8 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $this->uninstallModules(array('contact'));
     $result = $this->runSensor('monitoring_installed_modules');
     $this->assertTrue($result->isCritical());
-    $this->assertEqual($result->getMessage(), '1 modules delta, expected 0, Following modules are expected to be installed: Contact (contact)');
-    $this->assertEqual($result->getValue(), 1);
+    $this->assertEquals($result->getMessage(), '1 modules delta, expected 0, Following modules are expected to be installed: Contact (contact)');
+    $this->assertEquals($result->getValue(), 1);
   }
 
 
@@ -573,7 +591,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     );
     $sensor_config->save();
     $result = $this->runSensor('entity_aggregate_test');
-    $this->assertEqual($result->getValue(), '1');
+    $this->assertEquals($result->getValue(), '1');
 
     // Test for node type2.
     $sensor_config->settings['conditions'] = array(
@@ -582,7 +600,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $sensor_config->save();
     $result = $this->runSensor('entity_aggregate_test');
     // There should be two nodes with node type2 and created in last 24 hours.
-    $this->assertEqual($result->getValue(), 2);
+    $this->assertEquals($result->getValue(), 2);
 
     // Test support for configurable fields, create a taxonomy reference field.
     $vocabulary = $this->createVocabulary();
@@ -665,16 +683,23 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $sensor_config->save();
     $result = $this->runSensor('entity_aggregate_test');
     // There should be three nodes with that reference.
-    $this->assertEqual($result->getValue(), 3);
+    $this->assertEquals($result->getValue(), 3);
 
     // Check the content entity aggregator verbose output and other UI elements.
     $this->drupalLogin($this->createUser(['monitoring reports', 'administer monitoring']));
-    $this->drupalPostForm('admin/reports/monitoring/sensors/entity_aggregate_test', [], t('Run now'));
-    $this->assertText('id');
-    $this->assertText('label');
-    $this->assertLink($node1->label());
-    $this->assertLink($node2->label());
-    $this->assertLink($node3->label());
+    $this->drupalGet('admin/reports/monitoring/sensors/entity_aggregate_test');
+    $this->submitForm([], t('Run now'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('id');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('label');
+    $this->assertSession()->linkExists($node1->label());
+    $this->assertSession()->linkExists($node2->label());
+    $this->assertSession()->linkExists($node3->label());
 
     // Assert Query result appears.
     $assert_session = $this->assertSession();
@@ -686,31 +711,46 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     $this->clickLink(t('Edit'));
     // Assert some of the 'available fields'.
-    $this->assertText('Available Fields for entity type Content: changed, created, default_langcode, id, label, langcode, nid, promote, revision_default, revision_log, revision_timestamp, revision_translation_affected, revision_uid, status, sticky, title, type, uid, uuid, vid.');
-    $this->assertFieldByName('conditions[0][field]', 'term_reference.target_id');
-    $this->assertFieldByName('conditions[0][value]', $term1->id());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Available Fields for entity type Content: changed, created, default_langcode, id, label, langcode, nid, promote, revision_default, revision_log, revision_timestamp, revision_translation_affected, revision_uid, status, sticky, title, type, uid, uuid, vid.');
+    $this->assertSession()->fieldValueEquals('conditions[0][field]', 'term_reference.target_id');
+    $this->assertSession()->fieldValueEquals('conditions[0][value]', $term1->id());
 
     // Test adding another field.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'settings[verbose_fields][2]' => 'revision_timestamp',
-    ] , t('Add another field'));
+    ], t('Add another field'));
     // Repeat for a condition, add an invalid field while we are at it.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
     'conditions[1][field]' => 'nid',
       'conditions[1][operator]' => '>',
       'conditions[1][value]' => 4,
       // The invalid field.
       'settings[verbose_fields][3]' => 'test_wrong_field',
-    ] , t('Add another condition'));
+    ], t('Add another condition'));
 
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
     $this->clickLink('Entity Aggregate test');
 
     // Assert the new field and it's formatted output.
-    $this->assertText('revision_timestamp');
-    $this->assertText(\Drupal::service('date.formatter')->format($node1->getRevisionCreationTime(), 'short'));
-    $this->assertText(\Drupal::service('date.formatter')->format($node2->getRevisionCreationTime(), 'short'));
-    $this->assertText(\Drupal::service('date.formatter')->format($node3->getRevisionCreationTime(), 'short'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('revision_timestamp');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(\Drupal::service('date.formatter')->format($node1->getRevisionCreationTime(), 'short'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(\Drupal::service('date.formatter')->format($node2->getRevisionCreationTime(), 'short'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(\Drupal::service('date.formatter')->format($node3->getRevisionCreationTime(), 'short'));
 
     // Update the sensor to look for nodes with a reference to term1 in the
     // first field and term2 in the second.
@@ -724,7 +764,7 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     $sensor_config->save();
     $result = $this->runSensor('entity_aggregate_test');
     // There should be one nodes with those references.
-    $this->assertEqual($result->getValue(), 1);
+    $this->assertEquals($result->getValue(), 1);
   }
 
   /**
@@ -795,9 +835,13 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
 
     // Make sure there is no used temporary files.
     $result = $this->runSensor('temporary_files_usages');
-    $this->assertEqual($result->getValue(), 0);
-    $this->drupalPostForm('admin/reports/monitoring/sensors/temporary_files_usages', [], t('Run now'));
-    $this->assertText('0 used temporary files');
+    $this->assertEquals($result->getValue(), 0);
+    $this->drupalGet('admin/reports/monitoring/sensors/temporary_files_usages');
+    $this->submitForm([], t('Run now'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('0 used temporary files');
 
     $this->drupalCreateContentType(['type' => 'article', 'name' => 'Article']);
     // Create two nodes.
@@ -864,31 +908,41 @@ class MonitoringCoreWebTest extends MonitoringTestBase {
     ]);
     $file_usage->add($file3, 'monitoring', 'node', $node1->id());
     $file3->save();
+    $this->drupalGet('admin/reports/monitoring/sensors/temporary_files_usages');
 
     // Run sensor and make sure there are two temporary files which are used.
-    $this->drupalPostForm('admin/reports/monitoring/sensors/temporary_files_usages', [], t('Run now'));
+    $this->submitForm([], t('Run now'));
     $result = $this->runSensor('temporary_files_usages');
-    $this->assertEqual($result->getValue(), 2);
-    $this->assertText('2 used temporary files');
-    $this->assertLink('example_file_1');
-    $this->assertLink('example_file_2');
-    $this->assertLink($node1->label());
-    $this->assertLink($node2->label());
-    $this->assertLink('Make permanent');
+    $this->assertEquals($result->getValue(), 2);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('2 used temporary files');
+    $this->assertSession()->linkExists('example_file_1');
+    $this->assertSession()->linkExists('example_file_2');
+    $this->assertSession()->linkExists($node1->label());
+    $this->assertSession()->linkExists($node2->label());
+    $this->assertSession()->linkExists('Make permanent');
 
     // Make the first file permanent and assert message.
     $this->clickLink('Make permanent');
-    $this->assertText(t('File @file is now permanent.', ['@file' => 'example_file_1']));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('File @file is now permanent.', ['@file' => 'example_file_1']));
 
     // Make sure that the temporary files are in the list.
-    $this->assertText('1 used temporary files');
-    $this->assertLink('example_file_2');
-    $this->assertLink($node2->label());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('1 used temporary files');
+    $this->assertSession()->linkExists('example_file_2');
+    $this->assertSession()->linkExists($node2->label());
 
     // Make sure that the permanent files are not in the list.
-    $this->assertNoLink('example_file_3');
-    $this->assertNoLink('example_file_1');
-    $this->assertNoLink($node1->label());
+    $this->assertSession()->linkNotExists('example_file_3');
+    $this->assertSession()->linkNotExists('example_file_1');
+    $this->assertSession()->linkNotExists($node1->label());
   }
 
   /**
diff --git a/tests/src/Functional/MonitoringRebuildTest.php b/tests/src/Functional/MonitoringRebuildTest.php
index 053a0d7..55fc8a2 100644
--- a/tests/src/Functional/MonitoringRebuildTest.php
+++ b/tests/src/Functional/MonitoringRebuildTest.php
@@ -50,8 +50,14 @@ class MonitoringRebuildTest extends MonitoringTestBase {
     // Rebuild and make sure they are created again.
     $this->drupalGet('/admin/config/system/monitoring/sensors');
     $this->clickLink('Rebuild sensor list');
-    $this->assertText('The sensor Ultimate cron errors has been created.');
-    $this->assertText('The sensor Twig debug mode has been created.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The sensor Ultimate cron errors has been created.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The sensor Twig debug mode has been created.');
     $this->assertNotNull(SensorConfig::load('twig_debug_mode'));
     $this->assertNotNull(SensorConfig::load('ultimate_cron_errors'));
     $this->assertNotNull(SensorConfig::load('update_core'));
diff --git a/tests/src/Functional/MonitoringServicesTest.php b/tests/src/Functional/MonitoringServicesTest.php
index 1a57f64..610e93e 100644
--- a/tests/src/Functional/MonitoringServicesTest.php
+++ b/tests/src/Functional/MonitoringServicesTest.php
@@ -30,7 +30,7 @@ class MonitoringServicesTest extends MonitoringTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->servicesAccount = $this->drupalCreateUser(array('restful get monitoring-sensor', 'restful get monitoring-sensor-result'));
@@ -43,46 +43,46 @@ class MonitoringServicesTest extends MonitoringTestBase {
     $this->drupalLogin($this->servicesAccount);
 
     $response_data = $this->doJsonRequest('monitoring-sensor');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     foreach (monitoring_sensor_manager()->getAllSensorConfig() as $sensor_name => $sensor_config) {
-      $this->assertEqual($response_data[$sensor_name]['sensor'], $sensor_config->id());
-      $this->assertEqual($response_data[$sensor_name]['label'], $sensor_config->getLabel());
-      $this->assertEqual($response_data[$sensor_name]['category'], $sensor_config->getCategory());
-      $this->assertEqual($response_data[$sensor_name]['description'], $sensor_config->getDescription());
-      $this->assertEqual($response_data[$sensor_name]['numeric'], $sensor_config->isNumeric());
-      $this->assertEqual($response_data[$sensor_name]['value_label'], $sensor_config->getValueLabel());
-      $this->assertEqual($response_data[$sensor_name]['caching_time'], $sensor_config->getCachingTime());
-      $this->assertEqual($response_data[$sensor_name]['time_interval'], $sensor_config->getTimeIntervalValue());
-      $this->assertEqual($response_data[$sensor_name]['enabled'], $sensor_config->isEnabled());
-      $this->assertEqual($response_data[$sensor_name]['uri'], Url::fromRoute('rest.monitoring-sensor.GET' , ['id' => $sensor_name, '_format' => 'json'])->setAbsolute()->toString());
+      $this->assertEquals($response_data[$sensor_name]['sensor'], $sensor_config->id());
+      $this->assertEquals($response_data[$sensor_name]['label'], $sensor_config->getLabel());
+      $this->assertEquals($response_data[$sensor_name]['category'], $sensor_config->getCategory());
+      $this->assertEquals($response_data[$sensor_name]['description'], $sensor_config->getDescription());
+      $this->assertEquals($response_data[$sensor_name]['numeric'], $sensor_config->isNumeric());
+      $this->assertEquals($response_data[$sensor_name]['value_label'], $sensor_config->getValueLabel());
+      $this->assertEquals($response_data[$sensor_name]['caching_time'], $sensor_config->getCachingTime());
+      $this->assertEquals($response_data[$sensor_name]['time_interval'], $sensor_config->getTimeIntervalValue());
+      $this->assertEquals($response_data[$sensor_name]['enabled'], $sensor_config->isEnabled());
+      $this->assertEquals($response_data[$sensor_name]['uri'], Url::fromRoute('rest.monitoring-sensor.GET' , ['id' => $sensor_name, '_format' => 'json'])->setAbsolute()->toString());
 
       if ($sensor_config->isDefiningThresholds()) {
-        $this->assertEqual($response_data[$sensor_name]['thresholds'], $sensor_config->getThresholds());
+        $this->assertEquals($response_data[$sensor_name]['thresholds'], $sensor_config->getThresholds());
       }
     }
 
     $sensor_name = 'sensor_that_does_not_exist';
     $this->doJsonRequest('monitoring-sensor/' . $sensor_name);
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     $sensor_name = 'dblog_event_severity_error';
     $response_data = $this->doJsonRequest('monitoring-sensor/' . $sensor_name);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $sensor_config = SensorConfig::load($sensor_name);
-    $this->assertEqual($response_data['sensor'], $sensor_config->id());
-    $this->assertEqual($response_data['label'], $sensor_config->getLabel());
-    $this->assertEqual($response_data['category'], $sensor_config->getCategory());
-    $this->assertEqual($response_data['description'], $sensor_config->getDescription());
-    $this->assertEqual($response_data['numeric'], $sensor_config->isNumeric());
-    $this->assertEqual($response_data['value_label'], $sensor_config->getValueLabel());
-    $this->assertEqual($response_data['caching_time'], $sensor_config->getCachingTime());
-    $this->assertEqual($response_data['time_interval'], $sensor_config->getTimeIntervalValue());
-    $this->assertEqual($response_data['enabled'], $sensor_config->isEnabled());
-    $this->assertEqual($response_data['uri'], Url::fromRoute('rest.monitoring-sensor.GET' , ['id' => $sensor_name, '_format' => 'json'])->setAbsolute()->toString());
+    $this->assertEquals($response_data['sensor'], $sensor_config->id());
+    $this->assertEquals($response_data['label'], $sensor_config->getLabel());
+    $this->assertEquals($response_data['category'], $sensor_config->getCategory());
+    $this->assertEquals($response_data['description'], $sensor_config->getDescription());
+    $this->assertEquals($response_data['numeric'], $sensor_config->isNumeric());
+    $this->assertEquals($response_data['value_label'], $sensor_config->getValueLabel());
+    $this->assertEquals($response_data['caching_time'], $sensor_config->getCachingTime());
+    $this->assertEquals($response_data['time_interval'], $sensor_config->getTimeIntervalValue());
+    $this->assertEquals($response_data['enabled'], $sensor_config->isEnabled());
+    $this->assertEquals($response_data['uri'], Url::fromRoute('rest.monitoring-sensor.GET' , ['id' => $sensor_name, '_format' => 'json'])->setAbsolute()->toString());
 
     if ($sensor_config->isDefiningThresholds()) {
-      $this->assertEqual($response_data['thresholds'], $sensor_config->getThresholds());
+      $this->assertEquals($response_data['thresholds'], $sensor_config->getThresholds());
     }
   }
 
@@ -94,14 +94,14 @@ class MonitoringServicesTest extends MonitoringTestBase {
 
     $sensor_name = 'dblog_event_severity_error';
     $response_data = $this->doJsonRequest('monitoring-sensor/' . $sensor_name);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $sensor_config = SensorConfig::load($sensor_name);
-    $this->assertEqual($response_data['label'], $sensor_config->getLabel());
+    $this->assertEquals($response_data['label'], $sensor_config->getLabel());
     $sensor_config->set('label', 'TestLabelForCaching');
     $sensor_config->save();
     $response_data = $this->doJsonRequest('monitoring-sensor/' . $sensor_name);
-    $this->assertResponse(200);
-    $this->assertEqual($response_data['label'], 'TestLabelForCaching');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertEquals($response_data['label'], 'TestLabelForCaching');
   }
 
   /**
@@ -112,7 +112,7 @@ class MonitoringServicesTest extends MonitoringTestBase {
 
     // Test request for sensor results with expanded sensor config.
     $response_data = $this->doJsonRequest('monitoring-sensor-result', array('expand' => 'sensor'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     foreach (monitoring_sensor_manager()->getEnabledSensorConfig() as $sensor_name => $sensor_config) {
       $this->assertTrue(isset($response_data[$sensor_name]['sensor']));
       $this->assertSensorResult($response_data[$sensor_name], $sensor_config);
@@ -121,29 +121,28 @@ class MonitoringServicesTest extends MonitoringTestBase {
     // Try a request without expanding the sensor config and check that it is not
     // present.
     $response_data = $this->doJsonRequest('monitoring-sensor-result');
-    $this->assertResponse(200);
-    $this->assertEqual('UNCACHEABLE', $this->drupalGetHeader(DynamicPageCacheSubscriber::HEADER),
-      'Render array returned, rendered as HTML response, but uncacheable: Dynamic Page Cache is running, but not caching.');
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertEquals('UNCACHEABLE', $this->drupalGetHeader(DynamicPageCacheSubscriber::HEADER), 'Render array returned, rendered as HTML response, but uncacheable: Dynamic Page Cache is running, but not caching.');
     $sensor_result = reset($response_data);
     $this->assertTrue(!isset($sensor_result['sensor_info']));
 
     // Make sure the response contains expected count of results.
-    $this->assertEqual(count($response_data), count(monitoring_sensor_manager()->getEnabledSensorConfig()));
+    $this->assertEquals(count($response_data), count(monitoring_sensor_manager()->getEnabledSensorConfig()));
 
     // Test non existing sensor.
     $sensor_name = 'sensor_that_does_not_exist';
     $this->doJsonRequest('monitoring-sensor-result/' . $sensor_name);
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     // Test disabled sensor - note that monitoring_git_dirty_tree is disabled
     // by default.
     $sensor_name = 'monitoring_git_dirty_tree';
     $this->doJsonRequest('monitoring-sensor-result/' . $sensor_name);
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
 
     $sensor_name = 'dblog_event_severity_error';
     $response_data = $this->doJsonRequest('monitoring-sensor-result/' . $sensor_name, array('expand' => 'sensor'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // The response must contain the sensor.
     $this->assertTrue(isset($response_data['sensor']));
     $this->assertSensorResult($response_data, SensorConfig::load($sensor_name));
@@ -151,7 +150,7 @@ class MonitoringServicesTest extends MonitoringTestBase {
     // Try a request without expanding the sensor config and check that it is not
     // present.
     $response_data = $this->doJsonRequest('monitoring-sensor-result/' . $sensor_name);
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertTrue(!isset($response_data['sensor']));
   }
 
@@ -164,25 +163,25 @@ class MonitoringServicesTest extends MonitoringTestBase {
    *   Sensor config for which we have the result.
    */
   protected function assertSensorResult($response_result, SensorConfig $sensor_config) {
-    $this->assertEqual($response_result['sensor_name'], $sensor_config->id());
-    $this->assertEqual($response_result['uri'], Url::fromRoute('rest.monitoring-sensor-result.GET' , ['id' => $sensor_config->id(), '_format' => 'json'])->setAbsolute()->toString());
+    $this->assertEquals($response_result['sensor_name'], $sensor_config->id());
+    $this->assertEquals($response_result['uri'], Url::fromRoute('rest.monitoring-sensor-result.GET' , ['id' => $sensor_config->id(), '_format' => 'json'])->setAbsolute()->toString());
 
     // If the result is cached test also for the result values. In case of
     // result which is not cached we might not get the same values.
     if ($sensor_config->getCachingTime()) {
       // Cannot use $this->runSensor() as the cache needs to remain.
       $result = monitoring_sensor_run($sensor_config->id());
-      $this->assertEqual($response_result['status'], $result->getStatus());
-      $this->assertEqual($response_result['value'], $result->getValue());
-      $this->assertEqual($response_result['expected_value'], $result->getExpectedValue());
-      $this->assertEqual($response_result['numeric_value'], $result->toNumber());
-      $this->assertEqual($response_result['message'], $result->getMessage());
-      $this->assertEqual($response_result['timestamp'], $result->getTimestamp());
-      $this->assertEqual($response_result['execution_time'], $result->getExecutionTime());
+      $this->assertEquals($response_result['status'], $result->getStatus());
+      $this->assertEquals($response_result['value'], $result->getValue());
+      $this->assertEquals($response_result['expected_value'], $result->getExpectedValue());
+      $this->assertEquals($response_result['numeric_value'], $result->toNumber());
+      $this->assertEquals($response_result['message'], $result->getMessage());
+      $this->assertEquals($response_result['timestamp'], $result->getTimestamp());
+      $this->assertEquals($response_result['execution_time'], $result->getExecutionTime());
     }
 
     if (isset($response_result['sensor_info'])) {
-      $this->assertEqual($response_result['sensor_info'], $sensor_config->toArray());
+      $this->assertEquals($response_result['sensor_info'], $sensor_config->toArray());
     }
   }
 
diff --git a/tests/src/Functional/MonitoringTestBase.php b/tests/src/Functional/MonitoringTestBase.php
index 1fd3207..5ccd379 100644
--- a/tests/src/Functional/MonitoringTestBase.php
+++ b/tests/src/Functional/MonitoringTestBase.php
@@ -26,7 +26,7 @@ abstract class MonitoringTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalPlaceBlock('local_tasks_block');
