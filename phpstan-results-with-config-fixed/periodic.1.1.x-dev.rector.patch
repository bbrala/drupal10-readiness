diff --git a/periodic.info.yml b/periodic.info.yml
index f3e600a..2703ef2 100644
--- a/periodic.info.yml
+++ b/periodic.info.yml
@@ -1,4 +1,4 @@
 name: 'Periodic'
 type: module
 description: 'Utility for throttling execution of tasks'
-core_version_requirement: ^8.9 || ^9
+core_version_requirement: ^8.9 || ^9 || ^10
diff --git a/periodic.module b/periodic.module
index de14cdc..1e5e085 100644
--- a/periodic.module
+++ b/periodic.module
@@ -29,7 +29,7 @@ function periodic_cron() {
       // Argument order is set for compatibility with Drupal 8.9.
       // Will be updated when compatibility is updated to ^9.1.
       // @see https://www.drupal.org/node/3154407
-      $eventDispatcher->dispatch($name, new PeriodicEvent());
+      $eventDispatcher->dispatch(new PeriodicEvent(), $name);
     }
   }
 }
diff --git a/src/Event/PeriodicEvent.php b/src/Event/PeriodicEvent.php
index d5d30c5..a3acb47 100644
--- a/src/Event/PeriodicEvent.php
+++ b/src/Event/PeriodicEvent.php
@@ -7,7 +7,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Event for periodic tasks.
  */
-class PeriodicEvent extends Event {
+class PeriodicEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   public const INTERVAL_HOUR = 3600;
   public const INTERVAL_DAY = 86400;
diff --git a/tests/src/Unit/CronTest.php b/tests/src/Unit/CronTest.php
index f4e008e..2f2d068 100644
--- a/tests/src/Unit/CronTest.php
+++ b/tests/src/Unit/CronTest.php
@@ -19,6 +19,7 @@ require __DIR__ . '/../../../periodic.module';
  */
 class CronTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Mocked Event Dispatcher.
    *
@@ -57,16 +58,16 @@ class CronTest extends UnitTestCase {
       });
 
     $this->eventDispatcher
-      ->dispatch(PeriodicEvents::HOUR, Argument::type(Event::class))
+      ->dispatch(PeriodicEvents::HOUR, Argument::type(\Symfony\Contracts\EventDispatcher\Event::class))
       ->shouldNotBeCalled();
     $this->eventDispatcher
-      ->dispatch(PeriodicEvents::DAY, Argument::type(Event::class))
+      ->dispatch(PeriodicEvents::DAY, Argument::type(\Symfony\Contracts\EventDispatcher\Event::class))
       ->shouldBeCalled();
     $this->eventDispatcher
-      ->dispatch(PeriodicEvents::WEEK, Argument::type(Event::class))
+      ->dispatch(PeriodicEvents::WEEK, Argument::type(\Symfony\Contracts\EventDispatcher\Event::class))
       ->shouldBeCalled();
     $this->eventDispatcher
-      ->dispatch(PeriodicEvents::MONTH, Argument::type(Event::class))
+      ->dispatch(PeriodicEvents::MONTH, Argument::type(\Symfony\Contracts\EventDispatcher\Event::class))
       ->shouldBeCalled();
 
     periodic_cron();
diff --git a/tests/src/Unit/PeriodicManagerTest.php b/tests/src/Unit/PeriodicManagerTest.php
index fad4f01..fd3bb88 100644
--- a/tests/src/Unit/PeriodicManagerTest.php
+++ b/tests/src/Unit/PeriodicManagerTest.php
@@ -44,16 +44,12 @@ class PeriodicManagerTest extends UnitTestCase {
   public function setUp(): void {
     parent::setUp();
 
-    $this->time = $this->getMockBuilder(Time::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->time = $this->createMock(Time::class);
     $this->time->expects($this->any())
       ->method('getRequestTime')
       ->willReturn(946684800);
 
-    $this->state = $this->getMockBuilder(State::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(State::class);
 
     $this->manager = new PeriodicManager($this->state, $this->time);
   }
