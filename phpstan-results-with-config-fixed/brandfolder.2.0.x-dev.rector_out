modules/contrib/brandfolder/brandfolder.install
modules/contrib/brandfolder/brandfolder.module
modules/contrib/brandfolder/src/Controller/AssetFetchController.php
modules/contrib/brandfolder/src/Controller/IncomingWebhookController.php
modules/contrib/brandfolder/src/Event/BrandfolderWebhookEvent.php
modules/contrib/brandfolder/src/EventSubscriber/WebhookEventSubscriber.php
modules/contrib/brandfolder/src/File/MimeType/BrandfolderMimeTypeHandler.php
modules/contrib/brandfolder/src/Form/BrandfolderSettingsForm.php
modules/contrib/brandfolder/src/Image/BrandfolderImageFactory.php
modules/contrib/brandfolder/src/Plugin/Field/FieldWidget/BrandfolderImageBrowserWidget.php
modules/contrib/brandfolder/src/Plugin/ImageToolkit/BrandfolderToolkit.php
modules/contrib/brandfolder/src/Plugin/ImageToolkit/Operation/brandfolder/BrandfolderImageToolkitOperationBase.php
modules/contrib/brandfolder/src/Plugin/ImageToolkit/Operation/brandfolder/Crop.php
modules/contrib/brandfolder/src/Plugin/ImageToolkit/Operation/brandfolder/Resize.php
modules/contrib/brandfolder/src/Plugin/ImageToolkit/Operation/brandfolder/Scale.php
modules/contrib/brandfolder/src/Plugin/ImageToolkit/Operation/brandfolder/ScaleAndCrop.php
modules/contrib/brandfolder/src/Plugin/media/Source/BrandfolderImage.php
modules/contrib/brandfolder/src/ProxyClass/File/MimeType/BrandfolderMimeTypeGuesser.php
modules/contrib/brandfolder/src/Service/BrandfolderGatekeeper.php
modules/contrib/brandfolder/src/StreamWrapper/BrandfolderStreamWrapper.php
modules/contrib/brandfolder/tests/src/Functional/ConfigurationTest.php

6 files with changes
====================

1) modules/contrib/brandfolder/src/ProxyClass/File/MimeType/BrandfolderMimeTypeGuesser.php:11

    ---------- begin diff ----------
@@ @@
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class BrandfolderMimeTypeGuesser implements \Symfony\Component\Mime\MimeTypeGuesserInterface, \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+    class BrandfolderMimeTypeGuesser implements \Symfony\Component\Mime\MimeTypeGuesserInterface, \Symfony\Component\Mime\MimeTypesInterface
     {

         use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/brandfolder/src/Plugin/media/Source/BrandfolderImage.php:131

    ---------- begin diff ----------
@@ @@
    * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
    *   The module handler.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $config_factory, AccountProxyInterface $account_proxy, UrlGeneratorInterface $url_generator, LoggerChannelFactoryInterface $logger, CacheBackendInterface $cache, TimeInterface $time, ModuleHandlerInterface $module_handler) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager, \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager, \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager, \Drupal\Core\Config\ConfigFactoryInterface $config_factory, array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $config_factory, AccountProxyInterface $account_proxy, UrlGeneratorInterface $url_generator, LoggerChannelFactoryInterface $logger, CacheBackendInterface $cache, TimeInterface $time, ModuleHandlerInterface $module_handler, private \Drupal\brandfolder\Service\BrandfolderGatekeeper $brandfolderGatekeeper) {
     $this->source_field_name = 'field_brandfolder_attachment_id';

     parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_type_manager, $entity_field_manager, $field_type_manager, $config_factory);
@@ @@
     $this->cache = $cache;
     $this->time = $time;
     $this->moduleHandler = $module_handler;
+    parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_type_manager, $entity_field_manager, $field_type_manager, $config_factory);
   }

   /**
@@ @@
       // @todo: Update field description accordingly, disable field, etc.
     }

-    $gatekeeper = \Drupal::getContainer()
-      ->get(BrandfolderGatekeeper::class);
+    $gatekeeper = $this->brandfolderGatekeeper;
     $gatekeeper->loadFromMediaSource($this);
     $gatekeeper->buildConfigForm($form);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/brandfolder/src/File/MimeType/BrandfolderMimeTypeHandler.php:17

    ---------- begin diff ----------
@@ @@
  * not end with a recognized file extension.
  * Also provide mimetype and extension-related utilities.
  */
-class BrandfolderMimeTypeHandler extends ExtensionMimeTypeGuesser implements MimeTypeGuesserInterface, LegacyMimeTypeGuesserInterface {
+class BrandfolderMimeTypeHandler extends ExtensionMimeTypeGuesser implements MimeTypeGuesserInterface, \Symfony\Component\Mime\MimeTypesInterface {

   /**
    * The database connection.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/brandfolder/src/Event/BrandfolderWebhookEvent.php:7

    ---------- begin diff ----------
@@ @@
  * Multipurpose event that will be fired when Drupal receives a webhook
  * transmission from Brandfolder.
  */
-class BrandfolderWebhookEvent extends Event {
+class BrandfolderWebhookEvent extends \Symfony\Contracts\EventDispatcher\Event {

   public const ASSET_CREATE = 'asset.create';
   public const ASSET_UPDATE = 'asset.update';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/brandfolder/src/Controller/AssetFetchController.php:15

    ---------- begin diff ----------
@@ @@
  */
 class AssetFetchController extends ControllerBase {

+  public function __construct(private \Drupal\brandfolder\Service\BrandfolderGatekeeper $brandfolderGatekeeper)
+  {
+  }
   /**
    * Callback for stub route used in connection with nested AJAX form requests,
    * etc.
@@ @@
     $query_params['sort_by'] = $all_form_values['brandfolder_controls_sort_criterion'] ?? 'created_at';
     $query_params['order'] = $all_form_values['brandfolder_controls_sort_order'] ?? 'desc';

-    $gatekeeper = \Drupal::getContainer()
-      ->get(BrandfolderGatekeeper::class);
+    $gatekeeper = $this->brandfolderGatekeeper;
     $gatekeeper_criteria = [];
     $gatekeeper_criteria_string = $form_state->getValue('bf_gatekeeper_criteria');
     if (!empty($gatekeeper_criteria_string)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/brandfolder/brandfolder.module:623

    ---------- begin diff ----------
@@ @@
       ];
     }
   }
-  
+
   // Get all possible labels. If there are more than one, allow users to
   // filter by label.
   $allowed_labels = $gatekeeper->getLabels();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

