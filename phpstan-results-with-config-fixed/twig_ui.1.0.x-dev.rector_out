modules/contrib/twig_ui/src/Controller/TemplateLoadAjaxController.php
modules/contrib/twig_ui/src/Entity/TwigTemplate.php
modules/contrib/twig_ui/src/Entity/TwigTemplateForm.php
modules/contrib/twig_ui/src/Form/SettingsForm.php
modules/contrib/twig_ui/src/Form/TemplatesDirectoryPrepareForm.php
modules/contrib/twig_ui/src/Form/TwigTemplateListForm.php
modules/contrib/twig_ui/src/TemplateManager.php
modules/contrib/twig_ui/src/TemplateManagerInterface.php
modules/contrib/twig_ui/src/Theme/ImmutableRegistry.php
modules/contrib/twig_ui/src/Theme/RegistryDecorator.php
modules/contrib/twig_ui/src/TwigUiServiceProvider.php
modules/contrib/twig_ui/tests/src/Functional/RenderTest.php
modules/contrib/twig_ui/tests/src/Functional/SettingsTest.php
modules/contrib/twig_ui/tests/src/Functional/TemplateFormTest.php
modules/contrib/twig_ui/tests/src/Functional/TemplateLoadAjaxControllerTest.php
modules/contrib/twig_ui/tests/src/Functional/TemplateManagerTest.php
modules/contrib/twig_ui/tests/src/Functional/TemplatesDirectoryPrepareFormTest.php
modules/contrib/twig_ui/tests/src/Functional/TwigTemplateListFormTest.php
modules/contrib/twig_ui/tests/src/FunctionalJavascript/SettingsFormTest.php
modules/contrib/twig_ui/tests/src/FunctionalJavascript/TemplateFormTest.php
modules/contrib/twig_ui/tests/src/Kernel/ImmutableRegistryTest.php
modules/contrib/twig_ui/tests/src/Kernel/InstallTest.php
modules/contrib/twig_ui/tests/src/Kernel/RegistryTest.php
modules/contrib/twig_ui/tests/src/Kernel/RequirementsTest.php
modules/contrib/twig_ui/tests/src/Traits/HtaccessTestTrait.php
modules/contrib/twig_ui/twig_ui.install
modules/contrib/twig_ui/twig_ui.module
modules/contrib/twig_ui/twig_ui.post_update.php

6 files with changes
====================

1) modules/contrib/twig_ui/tests/src/Kernel/RequirementsTest.php:35

    ---------- begin diff ----------
@@ @@

     // Check requirements after install.
     $requirements = twig_ui_requirements('runtime');
-    $this->assertEqual($requirements['twig_ui_templates']['severity'], REQUIREMENT_OK);
-    $this->assertEqual($requirements['twig_ui_templates']['value'], 'Twig UI templates directory exists and is protected.');
+    $this->assertEquals($requirements['twig_ui_templates']['severity'], REQUIREMENT_OK);
+    $this->assertEquals($requirements['twig_ui_templates']['value'], 'Twig UI templates directory exists and is protected.');

     // Remove the templates directory and verify requirements error.
     $this->deleteTemplatesDirectory();

     $requirements = twig_ui_requirements('runtime');
-    $this->assertEqual($requirements['twig_ui_templates']['severity'], REQUIREMENT_ERROR);
-    $this->assertEqual($requirements['twig_ui_templates']['description'], 'The Twig UI templates directory does not exist: ' . $template_manager::DIRECTORY_PATH . '.');
+    $this->assertEquals($requirements['twig_ui_templates']['severity'], REQUIREMENT_ERROR);
+    $this->assertEquals($requirements['twig_ui_templates']['description'], 'The Twig UI templates directory does not exist: ' . $template_manager::DIRECTORY_PATH . '.');

     // Add back templates directory but remove .htaccess and verify
     // requirements error.
@@ @@
     $this->deleteHtaccessFile();

     $requirements = twig_ui_requirements('runtime');
-    $this->assertEqual($requirements['twig_ui_templates']['severity'], REQUIREMENT_ERROR);
-    $this->assertEqual($requirements['twig_ui_templates']['description'], 'The Twig UI templates directory is unprotected: ' . $template_manager::DIRECTORY_PATH . '.');
+    $this->assertEquals($requirements['twig_ui_templates']['severity'], REQUIREMENT_ERROR);
+    $this->assertEquals($requirements['twig_ui_templates']['description'], 'The Twig UI templates directory is unprotected: ' . $template_manager::DIRECTORY_PATH . '.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/twig_ui/tests/src/Kernel/InstallTest.php:51

    ---------- begin diff ----------
@@ @@
     $query->condition('w.message', 'Preparation of the Twig UI templates directory resulted in the following error: @message', '=');
     $results = $query->execute()->fetchAll();

-    $this->assertEqual($results[0]->message, 'Preparation of the Twig UI templates directory resulted in the following error: @message');
+    $this->assertEquals($results[0]->message, 'Preparation of the Twig UI templates directory resulted in the following error: @message');
   }

   /**
@@ @@
         'twig_ui',
       ]);

-    $this->assertDirectoryNotExists($directory);
+    $this->assertDirectoryDoesNotExist($directory);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/twig_ui/tests/src/FunctionalJavascript/TemplateFormTest.php:128

    ---------- begin diff ----------
@@ @@
     $assert_session->assertWaitOnAjaxRequest();

     // Test loading of the block template file for the Grant theme.
-    $block_module_path = drupal_get_path('module', 'block');
+    $block_module_path = \Drupal::service('extension.list.module')->getPath('block');
     $template_path = $block_module_path . '/templates/block.html.twig';

     // Verify the file path.
@@ @@
     // Verify default configuration in data-codemirror attribute.
     $element = $page->find('xpath', '//textarea[@name="template_code"]');
     $data_codemirror = $element->getAttribute('data-codemirror');
-    $this->assertEqual($data_codemirror, '{"mode":"text\/x-twig","lineNumbers":true}');
+    $this->assertEquals($data_codemirror, '{"mode":"text\/x-twig","lineNumbers":true}');

     // Verify selected default behavior.
     $assert_session->elementExists('css', '.form-item-template-code .cme-toolbar');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/twig_ui/tests/src/Functional/TemplateManagerTest.php:125

    ---------- begin diff ----------
@@ @@
   public function testGetTemplate() {
     $this->createTemplates();
     $template = $this->templateManager->getTemplate('node');
-    $this->assertEqual($template->label(), 'Node');
+    $this->assertEquals($template->label(), 'Node');
     $template = $this->templateManager->getTemplate('node_page');
-    $this->assertEqual($template->label(), 'Node - Page');
+    $this->assertEquals($template->label(), 'Node - Page');
     $template = $this->templateManager->getTemplate('invalid');
     $this->assertNull($template);
   }
@@ @@
    */
   public function testTemplateExists() {
     $this->createTemplates();
-    $this->assertEqual($this->templateManager->templateExists('node', 'stark'), 'node');
-    $this->assertEqual($this->templateManager->templateExists('node', 'grant'), 'node');
+    $this->assertEquals($this->templateManager->templateExists('node', 'stark'), 'node');
+    $this->assertEquals($this->templateManager->templateExists('node', 'grant'), 'node');
     $this->assertFalse($this->templateManager->templateExists('node', 'perkins'));
-    $this->assertEqual($this->templateManager->templateExists('node__page', 'grant'), 'node_page');
+    $this->assertEquals($this->templateManager->templateExists('node__page', 'grant'), 'node_page');
     $this->assertFalse($this->templateManager->templateExists('node__page', 'stark'));
     $this->assertFalse($this->templateManager->templateExists('node__page', 'perkins'));
     $this->assertFalse($this->templateManager->templateExists('node__event', 'grant'));
@@ @@
     $this->assertStringEqualsFile('public://twig_ui/grant/node--news.html.twig', '{{ content }}' . PHP_EOL . 'Test template 1');
     $this->assertFileExists('public://twig_ui/perkins/node--news.html.twig');
     $this->assertStringEqualsFile('public://twig_ui/perkins/node--news.html.twig', '{{ content }}' . PHP_EOL . 'Test template 1');
-    $this->assertFileNotExists('public://twig_ui/stark/node--news.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node--news.html.twig');

     // Test contents of files written to file system.
     $template2 = TwigTemplate::create([
@@ @@
     $this->templateManager->syncTemplateFiles($template);

     $this->assertFileExists('public://twig_ui/stark/node--news.html.twig');
-    $this->assertFileNotExists('public://twig_ui/grant/node--news.html.twig');
-    $this->assertFileNotExists('public://twig_ui/perkins/node--news.html.twig');
-    $this->assertFileNotExists('public://twig_ui/stark/node--news-page.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/grant/node--news.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/perkins/node--news.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node--news-page.html.twig');
     $this->assertFileExists('public://twig_ui/grant/node--news-page.html.twig');
     $this->assertFileExists('public://twig_ui/perkins/node--news-page.html.twig');
-    $this->assertFileNotExists('public://twig_ui/stark/node--event.html.twig');
-    $this->assertFileNotExists('public://twig_ui/grant/node--event.html.twig');
-    $this->assertFileNotExists('public://twig_ui/perkins/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/grant/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/perkins/node--event.html.twig');

     // Test change in selected themes.
     $template->set('original', clone $template);
@@ @@
     $this->templateManager->syncTemplateFiles($template);

     $this->assertFileExists('public://twig_ui/stark/node--news.html.twig');
-    $this->assertFileNotExists('public://twig_ui/grant/node--news.html.twig');
-    $this->assertFileNotExists('public://twig_ui/perkins/node--news.html.twig');
-    $this->assertFileNotExists('public://twig_ui/stark/node--news-page.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/grant/node--news.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/perkins/node--news.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node--news-page.html.twig');
     $this->assertFileExists('public://twig_ui/grant/node--news-page.html.twig');
-    $this->assertFileNotExists('public://twig_ui/perkins/node--news-page.html.twig');
-    $this->assertFileNotExists('public://twig_ui/stark/node--event.html.twig');
-    $this->assertFileNotExists('public://twig_ui/grant/node--event.html.twig');
-    $this->assertFileNotExists('public://twig_ui/perkins/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/perkins/node--news-page.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/grant/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/perkins/node--event.html.twig');

     // Test change in template code.
     $template->set('original', clone $template);
@@ @@
     $this->template3->enable();
     $this->template3->save();

-    $this->assertFileNotExists('public://twig_ui/stark/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node--event.html.twig');
     $this->assertFileExists('public://twig_ui/grant/node--event.html.twig');
-    $this->assertFileNotExists('public://twig_ui/perkins/node--event.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/perkins/node--event.html.twig');

     $this->assertStringEqualsFile('public://twig_ui/grant/node--event.html.twig', '{{ content }}' . PHP_EOL . 'Test template 3 (originally disabled)');
   }
@@ @@

     $this->templateManager->deleteTemplateFiles($this->template);

-    $this->assertFileNotExists('public://twig_ui/stark/node.html.twig');
-    $this->assertFileNotExists('public://twig_ui/grant/node.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/grant/node.html.twig');
     $this->assertFileExists('public://twig_ui/grant/node--page.html.twig');

     $this->templateManager->deleteTemplateFiles($this->template2);

-    $this->assertFileNotExists('public://twig_ui/stark/node.html.twig');
-    $this->assertFileNotExists('public://twig_ui/grant/node.html.twig');
-    $this->assertFileNotExists('public://twig_ui/grant/node--page.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/stark/node.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/grant/node.html.twig');
+    $this->assertFileDoesNotExist('public://twig_ui/grant/node--page.html.twig');
   }

   /**
@@ @@
    */
   public function testGetDirectoryPathByTheme() {
     $this->createTemplates();
-    $this->assertEqual($this->templateManager->getDirectoryPathByTheme('grant'), 'public://twig_ui/grant');
-    $this->assertEqual($this->templateManager->getDirectoryPathByTheme('grant', FALSE), PublicStream::basePath() . '/twig_ui/grant');
-    $this->assertEqual($this->templateManager->getDirectoryPathByTheme('perkins'), 'public://twig_ui/perkins');
-    $this->assertEqual($this->templateManager->getDirectoryPathByTheme('perkins', FALSE), PublicStream::basePath() . '/twig_ui/perkins');
+    $this->assertEquals($this->templateManager->getDirectoryPathByTheme('grant'), 'public://twig_ui/grant');
+    $this->assertEquals($this->templateManager->getDirectoryPathByTheme('grant', FALSE), PublicStream::basePath() . '/twig_ui/grant');
+    $this->assertEquals($this->templateManager->getDirectoryPathByTheme('perkins'), 'public://twig_ui/perkins');
+    $this->assertEquals($this->templateManager->getDirectoryPathByTheme('perkins', FALSE), PublicStream::basePath() . '/twig_ui/perkins');
   }

   /**
@@ @@
    */
   public function testGetTemplatePath() {
     $this->createTemplates();
-    $this->assertEqual($this->templateManager->getTemplatePath($this->template2, 'grant'), 'public://twig_ui/grant/node--page.html.twig');
+    $this->assertEquals($this->templateManager->getTemplatePath($this->template2, 'grant'), 'public://twig_ui/grant/node--page.html.twig');
   }

   /**
@@ @@
    */
   public function testGetTemplateFileName() {
     $this->createTemplates();
-    $this->assertEqual($this->templateManager->getTemplateFileName($this->template2), 'node--page.html.twig');
+    $this->assertEquals($this->templateManager->getTemplateFileName($this->template2), 'node--page.html.twig');
   }

   /**
@@ @@

     // Execute ::prepareTemplatesDirectory().
     $return = $this->templateManager->prepareTemplatesDirectory();
-    $this->assertEqual($return, TRUE);
+    $this->assertEquals($return, TRUE);
     $this->assertFileExists('public://twig_ui/.htaccess');

     // Attempt to create templates directory when public:// is unwritable.
     $this->deleteTemplatesDirectory();
     $this->makeUnwritable('public://');
-    $this->assertDirectoryNotIsWritable('public://');
+    $this->assertDirectoryIsNotWritable('public://');

     $return = $this->templateManager->prepareTemplatesDirectory();
-    $this->assertEqual($return, 'Unable to create templates directory');
+    $this->assertEquals($return, 'Unable to create templates directory');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/twig_ui/tests/src/Functional/TemplateLoadAjaxControllerTest.php:113

    ---------- begin diff ----------
@@ @@
     $this->assertJson($controller_return);
     $controller_return = json_decode($controller_return);

-    $block_module_path = drupal_get_path('module', 'block');
+    $block_module_path = \Drupal::service('extension.list.module')->getPath('block');
     $template_path = $block_module_path . '/templates/block.html.twig';
     $abs_template_path = \Drupal::service('file_system')->realpath($template_path);
     $template_code = file_get_contents($abs_template_path);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/twig_ui/tests/src/Functional/TemplateFormTest.php:307

    ---------- begin diff ----------
@@ @@
     $element = $page
       ->findField('label')
       ->getValue();
-    $this->assertEqual($element, 'Clone of Node');
+    $this->assertEquals($element, 'Clone of Node');
     $element = $page
       ->findField('id')
       ->getValue();
-    $this->assertEqual($element, 'clone_node');
+    $this->assertEquals($element, 'clone_node');
     $this->assertTrue($page->hasUncheckedField('themes[grant]'));

     // Change theme suggestion and select a theme so clone can be saved.
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

