diff --git a/entity_visitors.info.yml b/entity_visitors.info.yml
index 1318c5d..d017383 100644
--- a/entity_visitors.info.yml
+++ b/entity_visitors.info.yml
@@ -1,7 +1,6 @@
 name: 'Entity Visitors statistics'
 type: module
 description: 'This modules provides you with blocks to view the users who visited some entity.'
-core: 8.x
 package: 'Custom'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 configure: entity_visitors.entity_visitiors_config
diff --git a/src/Event/EntityVisitedEvent.php b/src/Event/EntityVisitedEvent.php
index 26ee204..8276377 100644
--- a/src/Event/EntityVisitedEvent.php
+++ b/src/Event/EntityVisitedEvent.php
@@ -10,7 +10,7 @@ use Symfony\Component\EventDispatcher\Event;
  * This class is creating an event to be dispatched when user
  * visits and entity.
  */
-class EntityVisitedEvent extends Event {
+class EntityVisitedEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   const VISITED = 'entity_visited.event';
 
diff --git a/src/EventSubscriber/EntityRouteMatchSubscriber.php b/src/EventSubscriber/EntityRouteMatchSubscriber.php
index 4d1635b..a6f9cfb 100644
--- a/src/EventSubscriber/EntityRouteMatchSubscriber.php
+++ b/src/EventSubscriber/EntityRouteMatchSubscriber.php
@@ -49,7 +49,7 @@ class EntityRouteMatchSubscriber implements EventSubscriberInterface {
   /**
    * If this was entity view page, then handle this entity.
    */
-  public function updateEntityVisitors(FilterResponseEvent $event) {
+  public function updateEntityVisitors(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
     // Check https://www.lullabot.com/articles/common-max-age-pitfalls-with-drupal-cache
     if (!$event->isMasterRequest()) {
       return;
diff --git a/src/Service/EntityVisitorsManager.php b/src/Service/EntityVisitorsManager.php
index c18e217..e357491 100644
--- a/src/Service/EntityVisitorsManager.php
+++ b/src/Service/EntityVisitorsManager.php
@@ -137,7 +137,7 @@ class EntityVisitorsManager {
     // a certain number views or pretty much anything.
     $entityVisitedEvent = new EntityVisitedEvent($visitedEntityId, $visitedEntityType, $entityVisitorId);
     // Dispatch event, an entity was visited!
-    $this->eventDispatcher->dispatch(EntityVisitedEvent::VISITED, $entityVisitedEvent);
+    $this->eventDispatcher->dispatch($entityVisitedEvent, EntityVisitedEvent::VISITED);
 
     $saveLastVisitOnly = $this->configManager->getConfigFactory()
       ->get('entity_visitors.entity_visitors_config')
