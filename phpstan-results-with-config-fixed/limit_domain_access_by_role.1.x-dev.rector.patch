diff --git a/tests/src/Functional/LimitdomainaccessbyroleTest.php b/tests/src/Functional/LimitdomainaccessbyroleTest.php
index 9f6ba33..6f85597 100644
--- a/tests/src/Functional/LimitdomainaccessbyroleTest.php
+++ b/tests/src/Functional/LimitdomainaccessbyroleTest.php
@@ -75,18 +75,30 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
     $url = Url::fromRoute('limit_domain_access_by_role.settings');
     $this->drupalGet($url);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Technical domains that are whitelisted to allow admin operations on');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Technical domains that are whitelisted to allow admin operations on');
     // Empty form submission. Check presence of the default value.
-    $this->drupalPostForm(NULL, [], 'Save configuration');
-    $this->assertText('*local*');
+    $this->submitForm([], 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('*local*');
     // Form validation testing of an invalid characters rejection.
     $edit = [
       'technical_domains' => 'some/invalid/ch@r@ter$',
       'kill_sessions' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('Invalid characters are detected.');
-    $this->assertText('Apart from yourself, there are currently no users with an open session (logged in)');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Invalid characters are detected.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Apart from yourself, there are currently no users with an open session (logged in)');
   }
 
   /**
@@ -97,15 +109,24 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
     $url = Url::fromRoute('limit_domain_access_by_role.settings');
     $this->drupalGet($url);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Technical domains that are whitelisted to allow admin operations on');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Technical domains that are whitelisted to allow admin operations on');
     // A correct form submission.
     $edit = [
       'technical_domains' => \Drupal::request()->getHost(),
       'kill_sessions' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('The configuration options have been saved.');
-    $this->assertText('There were no users with an open session to terminate.');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There were no users with an open session to terminate.');
     // Log out.
     $this->drupalLogout();
     // Log in an unblocked user (non-admin) through the UI. Should access.
@@ -116,8 +137,14 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
       'pass' => $this->user->passRaw,
     ], t('Log in'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Bobby Solo');
-    $this->assertText('Member for');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Bobby Solo');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Member for');
     // Log out.
     $this->drupalLogout();
     // Log in a blocked user (admin) through the UI. Should access.
@@ -128,8 +155,14 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
       'pass' => $this->admintestUser->passRaw,
     ], t('Log in'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Daffy Duck');
-    $this->assertText('Member for');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Daffy Duck');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Member for');
     // Log out.
     $this->drupalLogout();
     // Get back to the settings form and check it loads correctly.
@@ -137,15 +170,24 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
     $url = Url::fromRoute('limit_domain_access_by_role.settings');
     $this->drupalGet($url);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Technical domains that are whitelisted to allow admin operations on');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Technical domains that are whitelisted to allow admin operations on');
     // Make a correct form submission but now changing the technical domain.
     $edit = [
       'technical_domains' => 'admin.example.com',
       'kill_sessions' => 1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
-    $this->assertText('The configuration options have been saved.');
-    $this->assertText('There were no users with an open session to terminate.');
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('There were no users with an open session to terminate.');
     // Log out.
     $this->drupalLogout();
     // Log in an unblocked user (non-admin) through the UI. Should access.
@@ -156,8 +198,14 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
       'pass' => $this->user->passRaw,
     ], t('Log in'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Bobby Solo');
-    $this->assertText('Member for');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Bobby Solo');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Member for');
     // Log out.
     $this->drupalLogout();
     // Log in a blocked user (admin) through the UI. Should get Access denied.
@@ -168,8 +216,14 @@ class LimitdomainaccessbyroleTest extends BrowserTestBase {
       'pass' => $this->admintestUser->passRaw,
     ], t('Log in'));
     $this->assertSession()->statusCodeEquals(403);
-    $this->assertText('Access denied');
-    $this->assertText('You are not authorized to access this page.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Access denied');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You are not authorized to access this page.');
   }
 
 }
