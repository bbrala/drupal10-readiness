diff --git a/src/DefaultPluginResolver/EventBasedDefaultPluginResolver.php b/src/DefaultPluginResolver/EventBasedDefaultPluginResolver.php
index 80d37cd..7dbd19d 100644
--- a/src/DefaultPluginResolver/EventBasedDefaultPluginResolver.php
+++ b/src/DefaultPluginResolver/EventBasedDefaultPluginResolver.php
@@ -33,7 +33,7 @@ class EventBasedDefaultPluginResolver implements DefaultPluginResolverInterface
    */
   public function createDefaultPluginInstance(PluginTypeInterface $plugin_type) {
     $event = new ResolveDefaultPlugin($plugin_type);
-    $this->eventDispatcher->dispatch(PluginEvents::RESOLVE_DEFAULT_PLUGIN, $event);
+    $this->eventDispatcher->dispatch($event, PluginEvents::RESOLVE_DEFAULT_PLUGIN);
 
     return $event->getDefaultPluginInstance();
   }
diff --git a/src/Event/ResolveDefaultPlugin.php b/src/Event/ResolveDefaultPlugin.php
index dfbaf90..afc77b6 100644
--- a/src/Event/ResolveDefaultPlugin.php
+++ b/src/Event/ResolveDefaultPlugin.php
@@ -12,7 +12,7 @@ use Symfony\Component\EventDispatcher\Event;
  *
  * @see \Drupal\plugin\Event\PluginEvents::RESOLVE_DEFAULT_PLUGIN
  */
-class ResolveDefaultPlugin extends Event {
+class ResolveDefaultPlugin extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The plugin type.
diff --git a/tests/src/Functional/Plugin/PluginSelector/RadiosTest.php b/tests/src/Functional/Plugin/PluginSelector/RadiosTest.php
index 5e1565c..de61630 100644
--- a/tests/src/Functional/Plugin/PluginSelector/RadiosTest.php
+++ b/tests/src/Functional/Plugin/PluginSelector/RadiosTest.php
@@ -46,9 +46,12 @@ class RadiosTest extends BrowserTestBase {
     // Test the presence of default elements without available plugins.
     $path = $this->buildFormPath(['none'], $tree);
     $this->drupalGet($path);
-    $this->assertNoFieldByName($name_prefix . '[select][container][container][plugin_id]');
+    $this->assertSession()->fieldValueNotEquals($name_prefix . '[select][container][container][plugin_id]', '');
     $this->assertEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertText(t('There are no available options.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('There are no available options.'));
 
     // Test that the selector can be configured to show even if there is but a
     // single plugin available to choose from.
@@ -58,34 +61,40 @@ class RadiosTest extends BrowserTestBase {
     // Test the presence of default elements with one available plugin.
     $path = $this->buildFormPath(['plugin_test_helper_configurable_plugin'], $tree);
     $this->drupalGet($path);
-    $this->assertNoFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldValueNotEquals($name_prefix . '[select][container][plugin_id]', '');
     $this->assertEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertNoText(t('There are no available options.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('There are no available options.'));
 
     // Test the presence of default elements with multiple available plugins.
     $path = $this->buildFormPath(['plugin_test_helper_plugin', 'plugin_test_helper_configurable_plugin'], $tree);
     $this->drupalGet($path);
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertNoText(t('There are no available options.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('There are no available options.'));
 
     // Choose a plugin.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_plugin',
     ], t('Choose'));
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
 
     // Change the plugin.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_configurable_plugin',
     ], t('Choose'));
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
 
     // Submit the form.
     $foo = $this->randomString();
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_configurable_plugin',
       $name_prefix . '[plugin_form][foo]' => $foo,
 
@@ -94,8 +103,8 @@ class RadiosTest extends BrowserTestBase {
     $state = \Drupal::state();
     /** @var \Drupal\Component\Plugin\PluginInspectionInterface|\Drupal\Component\Plugin\ConfigurablePluginInterface $selected_plugin */
     $selected_plugin = $state->get('plugin_test_helper_advanced_plugin_selector_base');
-    $this->assertEqual($selected_plugin->getPluginId(), 'plugin_test_helper_configurable_plugin');
-    $this->assertEqual($selected_plugin->getConfiguration(), [
+    $this->assertEquals($selected_plugin->getPluginId(), 'plugin_test_helper_configurable_plugin');
+    $this->assertEquals($selected_plugin->getConfiguration(), [
       'foo' => $foo,
     ]);
   }
diff --git a/tests/src/Functional/Plugin/PluginSelector/SelectListTest.php b/tests/src/Functional/Plugin/PluginSelector/SelectListTest.php
index 2f296b5..a21c098 100644
--- a/tests/src/Functional/Plugin/PluginSelector/SelectListTest.php
+++ b/tests/src/Functional/Plugin/PluginSelector/SelectListTest.php
@@ -46,41 +46,50 @@ class SelectListTest extends BrowserTestBase {
     // Test the presence of default elements without available plugins.
     $path = $this->buildFormPath(['none'], $tree);
     $this->drupalGet($path);
-    $this->assertNoFieldByName($name_prefix . '[select][container][container][plugin_id]');
+    $this->assertSession()->fieldValueNotEquals($name_prefix . '[select][container][container][plugin_id]', '');
     $this->assertEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertText(t('There are no available options.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('There are no available options.'));
 
     // Test the presence of default elements with one available plugin.
     $path = $this->buildFormPath(['plugin_test_helper_configurable_plugin'], $tree);
     $this->drupalGet($path);
-    $this->assertNoFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldValueNotEquals($name_prefix . '[select][container][plugin_id]', '');
     $this->assertEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertNoText(t('There are no available options.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('There are no available options.'));
 
     // Test the presence of default elements with multiple available plugins.
     $path = $this->buildFormPath(['plugin_test_helper_plugin', 'plugin_test_helper_configurable_plugin'], $tree);
     $this->drupalGet($path);
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
-    $this->assertNoText(t('There are no available options.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('There are no available options.'));
 
     // Choose a plugin.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_plugin',
     ], t('Choose'));
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
 
     // Change the plugin.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_configurable_plugin',
     ], t('Choose'));
-    $this->assertFieldByName($name_prefix . '[select][container][plugin_id]');
+    $this->assertSession()->fieldExists($name_prefix . '[select][container][plugin_id]');
     $this->assertNotEmpty($this->getSession()->getDriver()->find(sprintf('//input[@name="%s"]', $change_button_name)));
 
     // Submit the form.
     $foo = $this->randomString();
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       $name_prefix . '[select][container][plugin_id]' => 'plugin_test_helper_configurable_plugin',
       $name_prefix . '[plugin_form][foo]' => $foo,
 
@@ -89,8 +98,8 @@ class SelectListTest extends BrowserTestBase {
     $state = \Drupal::state();
     /** @var \Drupal\Component\Plugin\PluginInspectionInterface|\Drupal\Component\Plugin\ConfigurablePluginInterface $selected_plugin */
     $selected_plugin = $state->get('plugin_test_helper_advanced_plugin_selector_base');
-    $this->assertEqual($selected_plugin->getPluginId(), 'plugin_test_helper_configurable_plugin');
-    $this->assertEqual($selected_plugin->getConfiguration(), [
+    $this->assertEquals($selected_plugin->getPluginId(), 'plugin_test_helper_configurable_plugin');
+    $this->assertEquals($selected_plugin->getConfiguration(), [
       'foo' => $foo,
     ]);
   }
