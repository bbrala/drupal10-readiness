modules/contrib/link_fix_absolute_urls/link_fix_absolute_urls.module
modules/contrib/link_fix_absolute_urls/src/LinkProcessor.php
modules/contrib/link_fix_absolute_urls/tests/src/Functional/LinkValueTest.php

1 file with changes
===================

1) modules/contrib/link_fix_absolute_urls/tests/src/Functional/LinkValueTest.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser([
       'administer site configuration',
@@ @@
     $this->assertSession()->statusCodeEquals(200);

     // Confirm the link is on the page.
-    $this->assertLink('The link');
-    $this->assertLinkByHref('https://www.drupal.org/project/link_fix_absolute_urls');
+    $this->assertSession()->linkExists('The link');
+    $this->assertSession()->linkByHrefExists('https://www.drupal.org/project/link_fix_absolute_urls');

     // Confirm the URL value is stored correctly and not modified.
     $field = $node->get('field_test_link');
     $field = reset($field);
     $field = reset($field);
-    $this->assertEqual($field->get('uri')->getValue(), 'https://www.drupal.org/project/link_fix_absolute_urls');
+    $this->assertEquals($field->get('uri')->getValue(), 'https://www.drupal.org/project/link_fix_absolute_urls');
   }

   /**
@@ @@

     // Confirm the link is on the page. Note that the URL will be output as a
     // relative URL.
-    $this->assertLink('The link');
-    $this->assertLinkByHref('/node/' . $node1->id());
+    $this->assertSession()->linkExists('The link');
+    $this->assertSession()->linkByHrefExists('/node/' . $node1->id());

     // Confirm the URL values.
     $field = $node2->get('field_test_link');
     $field = reset($field);
     $field = reset($field);
-    $this->assertEqual($field->get('uri')->getValue(), 'entity:node/' . $node1->id());
+    $this->assertEquals($field->get('uri')->getValue(), 'entity:node/' . $node1->id());
   }

   /**
@@ @@

     // Confirm the link is on the page. Note that the URL will be output as a
     // relative URL.
-    $this->assertLink('The link');
-    $this->assertLinkByHref('/test-node-1');
+    $this->assertSession()->linkExists('The link');
+    $this->assertSession()->linkByHrefExists('/test-node-1');

     // Confirm the URL values.
     $field = $node2->get('field_test_link');
     $field = reset($field);
     $field = reset($field);
-    $this->assertEqual($field->get('uri')->getValue(), 'entity:node/' . $node1->id());
+    $this->assertEquals($field->get('uri')->getValue(), 'entity:node/' . $node1->id());
   }

   /**
@@ @@

       // Confirm the link is on the page. Note that the URL will be output as a
       // relative URL.
-      $this->assertLink('The link');
-      $this->assertLinkByHref('/node/' . $node1->id());
+      $this->assertSession()->linkExists('The link');
+      $this->assertSession()->linkByHrefExists('/node/' . $node1->id());

       // Confirm the URL values.
       $field = $node->get('field_test_link');
       $field = reset($field);
       $field = reset($field);
-      $this->assertEqual($field->get('uri')->getValue(), 'entity:node/' . $node1->id());
+      $this->assertEquals($field->get('uri')->getValue(), 'entity:node/' . $node1->id());
     }
   }

@@ @@

     // Confirm the link is on the page. Note that the URL will be output as a
     // relative URL.
-    $this->assertLink('The link');
-    $this->assertLinkByHref('/this/path/does/not/exist');
+    $this->assertSession()->linkExists('The link');
+    $this->assertSession()->linkByHrefExists('/this/path/does/not/exist');
   }

   /**
@@ @@
     $file = $files[0];

     // Get the public external URL for the file.
-    $file_path = file_create_url($file->uri);
+    $file_path = \Drupal::service('file_url_generator')->generateAbsoluteString($file->uri);

     // The file path without the hostname portion of the URL.
     $file_path_local = str_replace($base_url, base_path(), $file_path);
@@ @@
     $this->assertSession()->statusCodeEquals(200);

     // Confirm the link is on the page.
-    $this->assertLink('The link');
-    $this->assertLinkByHref($file_path_local);
+    $this->assertSession()->linkExists('The link');
+    $this->assertSession()->linkByHrefExists($file_path_local);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertLinkByHrefRector
 * AssertLinkRector
 * FileCreateUrlRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

