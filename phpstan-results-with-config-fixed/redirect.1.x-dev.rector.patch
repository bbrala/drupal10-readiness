diff --git a/modules/redirect_404/tests/src/Unit/SqlRedirectNotFoundStorageTest.php b/modules/redirect_404/tests/src/Unit/SqlRedirectNotFoundStorageTest.php
index 6cd6bea..424a496 100644
--- a/modules/redirect_404/tests/src/Unit/SqlRedirectNotFoundStorageTest.php
+++ b/modules/redirect_404/tests/src/Unit/SqlRedirectNotFoundStorageTest.php
@@ -17,14 +17,14 @@ class SqlRedirectNotFoundStorageTest extends UnitTestCase {
   /**
    * Mock database connection.
    *
-   * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Database\Connection|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $database;
 
   /**
    * Mock config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $configFactory;
 
@@ -33,9 +33,7 @@ class SqlRedirectNotFoundStorageTest extends UnitTestCase {
    */
   protected function setUp(): void {
     parent::setUp();
-    $this->database = $this->getMockBuilder(Connection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->database = $this->createMock(Connection::class);
   }
 
   /**
diff --git a/modules/redirect_domain/tests/src/Unit/DomainRedirectRequestSubscriberTest.php b/modules/redirect_domain/tests/src/Unit/DomainRedirectRequestSubscriberTest.php
index 8a02559..2888451 100644
--- a/modules/redirect_domain/tests/src/Unit/DomainRedirectRequestSubscriberTest.php
+++ b/modules/redirect_domain/tests/src/Unit/DomainRedirectRequestSubscriberTest.php
@@ -78,9 +78,7 @@ class DomainRedirectRequestSubscriberTest extends UnitTestCase {
     ];
 
     // Create a mock redirect checker.
-    $checker = $this->getMockBuilder(RedirectChecker::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $checker = $this->createMock(RedirectChecker::class);
     $checker->expects($this->any())
       ->method('canRedirect')
       ->will($this->returnValue(TRUE));
@@ -134,8 +132,7 @@ class DomainRedirectRequestSubscriberTest extends UnitTestCase {
   protected function getGetResponseEventStub($path_info, $query_string) {
     $request = Request::create($path_info . '?' . $query_string, 'GET', [], [], [], ['SCRIPT_NAME' => 'index.php']);
 
-    $http_kernel = $this->getMockBuilder(HttpKernelInterface::class)
-      ->getMock();
+    $http_kernel = $this->createMock(HttpKernelInterface::class);
     return new RequestEvent($http_kernel, $request, HttpKernelInterface::MASTER_REQUEST);
   }
 
diff --git a/redirect.generate.inc b/redirect.generate.inc
index 50bf69b..2a4505b 100644
--- a/redirect.generate.inc
+++ b/redirect.generate.inc
@@ -52,7 +52,7 @@ function redirect_generate_redirects_batch_info($count, $delete = FALSE) {
   return [
     'operations' => $operations,
     'finished' => 'redirect_generate_batch_finished',
-    'file' => drupal_get_path('module', 'redirect') . '/redirect.generate.inc',
+    'file' => \Drupal::service('extension.list.module')->getPath('redirect') . '/redirect.generate.inc',
   ];
 }
 
diff --git a/redirect.install b/redirect.install
index 536d678..be1d130 100644
--- a/redirect.install
+++ b/redirect.install
@@ -144,7 +144,7 @@ function redirect_update_8103() {
 
   // Only create if the redirect view doesn't exist and views is enabled.
   if (!View::load('redirect') && \Drupal::moduleHandler()->moduleExists('views')) {
-    $config_path = drupal_get_path('module', 'redirect') . '/config/install/views.view.redirect.yml';
+    $config_path = \Drupal::service('extension.list.module')->getPath('redirect') . '/config/install/views.view.redirect.yml';
     $data = Yaml::parse(file_get_contents($config_path));
     \Drupal::configFactory()->getEditable('views.view.redirect')->setData($data)->save(TRUE);
     $message = 'The new redirect view has been created.';
diff --git a/tests/src/Kernel/RedirectAPITest.php b/tests/src/Kernel/RedirectAPITest.php
index bf235ee..498b6f6 100644
--- a/tests/src/Kernel/RedirectAPITest.php
+++ b/tests/src/Kernel/RedirectAPITest.php
@@ -268,6 +268,7 @@ class RedirectAPITest extends KernelTestBase {
 
   /**
    * Test redirect_parse_url().
+   * @doesNotPerformAssertions
    */
   public function testParseURL() {
     //$test_cases = array(
diff --git a/tests/src/Unit/RedirectCheckerTest.php b/tests/src/Unit/RedirectCheckerTest.php
index 2bf7913..da04af7 100644
--- a/tests/src/Unit/RedirectCheckerTest.php
+++ b/tests/src/Unit/RedirectCheckerTest.php
@@ -23,19 +23,14 @@ class RedirectCheckerTest extends UnitTestCase {
 
     $config = ['redirect.settings' => ['ignore_admin_path' => FALSE, 'access_check' => TRUE]];
 
-    $state = $this->getMockBuilder('Drupal\Core\State\StateInterface')
-      ->getMock();
+    $state = $this->createMock('Drupal\Core\State\StateInterface');
     $state->expects($this->any())
       ->method('get')
       ->with('system.maintenance_mode')
       ->will($this->returnValue(FALSE));
-    $access = $this->getMockBuilder('Drupal\Core\Access\AccessManager')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $account = $this->getMockBuilder('Drupal\Core\Session\AccountInterface')
-      ->getMock();
-    $route_provider = $this->getMockBuilder('Drupal\Core\Routing\RouteProviderInterface')
-      ->getMock();
+    $access = $this->createMock('Drupal\Core\Access\AccessManager');
+    $account = $this->createMock('Drupal\Core\Session\AccountInterface');
+    $route_provider = $this->createMock('Drupal\Core\Routing\RouteProviderInterface');
 
     $route = new Route('/example');
     $route_provider->expects($this->any())
@@ -77,8 +72,7 @@ class RedirectCheckerTest extends UnitTestCase {
     $this->assertFalse($checker->canRedirect($request), 'Cannot redirect');
 
     // Maintenance mode is on.
-    $state = $this->getMockBuilder('Drupal\Core\State\StateInterface')
-      ->getMock();
+    $state = $this->createMock('Drupal\Core\State\StateInterface');
     $state->expects($this->any())
       ->method('get')
       ->with('system.maintenance_mode')
@@ -90,8 +84,7 @@ class RedirectCheckerTest extends UnitTestCase {
     $this->assertFalse($checker->canRedirect($request), 'Cannot redirect if maintenance mode is on');
 
     // Maintenance mode is on, but user has access to view site in maintenance mode.
-    $accountWithMaintenanceModeAccess = $this->getMockBuilder('Drupal\Core\Session\AccountInterface')
-      ->getMock();
+    $accountWithMaintenanceModeAccess = $this->createMock('Drupal\Core\Session\AccountInterface');
     $accountWithMaintenanceModeAccess->expects($this->any())
       ->method('hasPermission')
       ->with('access site in maintenance mode')
@@ -103,8 +96,7 @@ class RedirectCheckerTest extends UnitTestCase {
     $this->assertTrue($checker->canRedirect($request), 'Redirect should have worked, user has maintenance mode access.');
 
     // We are at a admin path.
-    $state = $this->getMockBuilder('Drupal\Core\State\StateInterface')
-      ->getMock();
+    $state = $this->createMock('Drupal\Core\State\StateInterface');
     $state->expects($this->any())
       ->method('get')
       ->with('system.maintenance_mode')
@@ -145,13 +137,11 @@ class RedirectCheckerTest extends UnitTestCase {
    * @param array $query
    *   Query paramter to be passed into request->query.
    *
-   * @return PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    *   Mocked request object.
    */
   protected function getRequestStub($script_name, $method, array $attributes = [], array $query = []) {
-    $request = $this->getMockBuilder('Symfony\Component\HttpFoundation\Request')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $request = $this->createMock('Symfony\Component\HttpFoundation\Request');
     $request->expects($this->any())
       ->method('getScriptName')
       ->will($this->returnValue($script_name));
diff --git a/tests/src/Unit/RedirectRequestSubscriberTest.php b/tests/src/Unit/RedirectRequestSubscriberTest.php
index 41f68a8..43f6906 100644
--- a/tests/src/Unit/RedirectRequestSubscriberTest.php
+++ b/tests/src/Unit/RedirectRequestSubscriberTest.php
@@ -35,9 +35,7 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
     // by the redirect entity and values from the accessed url.
     $final_query = $redirect_query + $request_query;
 
-    $url = $this->getMockBuilder('Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock('Drupal\Core\Url');
 
     $url->expects($this->once())
       ->method('setAbsolute')
@@ -73,9 +71,7 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
    */
   public function testRedirectLogicWithoutQueryRetaining($request_uri, $request_query, $redirect_uri) {
 
-    $url = $this->getMockBuilder('Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock('Drupal\Core\Url');
 
     $url->expects($this->once())
       ->method('setAbsolute')
@@ -133,18 +129,14 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
     $event = $this->getGetResponseEventStub($request_uri, http_build_query($request_query));
     $request = $event->getRequest();
 
-    $checker = $this->getMockBuilder('Drupal\redirect\RedirectChecker')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $checker = $this->createMock('Drupal\redirect\RedirectChecker');
     $checker->expects($this->any())
       ->method('canRedirect')
       ->will($this->returnValue(TRUE));
 
     $context = $this->createMock('Symfony\Component\Routing\RequestContext');
 
-    $inbound_path_processor = $this->getMockBuilder('Drupal\Core\PathProcessor\InboundPathProcessorInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $inbound_path_processor = $this->createMock('Drupal\Core\PathProcessor\InboundPathProcessorInterface');
     $inbound_path_processor->expects($this->any())
       ->method('processInbound')
       ->with($request->getPathInfo(), $request)
@@ -189,13 +181,11 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
    * @param $redirect
    *   The redirect object to be returned.
    *
-   * @return PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    *   The redirect repository.
    */
   protected function getRedirectRepositoryStub($method, $redirect) {
-    $repository = $this->getMockBuilder('Drupal\redirect\RedirectRepository')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $repository = $this->createMock('Drupal\redirect\RedirectRepository');
 
     if ($method === 'findMatchingRedirect') {
       $repository->expects($this->any())
@@ -223,13 +213,11 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
    * @param int $status_code
    *   The redirect status code.
    *
-   * @return PHPUnit_Framework_MockObject_MockObject
+   * @return \PHPUnit\Framework\MockObject\MockObject
    *   The mocked redirect object.
    */
   protected function getRedirectStub($url, $status_code = 301) {
-    $redirect = $this->getMockBuilder('Drupal\redirect\Entity\Redirect')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $redirect = $this->createMock('Drupal\redirect\Entity\Redirect');
     $redirect->expects($this->once())
       ->method('getRedirectUrl')
       ->will($this->returnValue($url));
@@ -256,11 +244,8 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
    *   The post response event object.
    */
   protected function getPostResponseEvent($headers = []) {
-    $http_kernel = $this->getMockBuilder('\Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
-    $request = $this->getMockBuilder('Symfony\Component\HttpFoundation\Request')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_kernel = $this->createMock('\Symfony\Component\HttpKernel\HttpKernelInterface');
+    $request = $this->createMock('Symfony\Component\HttpFoundation\Request');
 
     $response = new Response('', 301, $headers);
 
@@ -278,19 +263,17 @@ class RedirectRequestSubscriberTest extends UnitTestCase {
   protected function getGetResponseEventStub($path_info, $query_string) {
     $request = Request::create($path_info . '?' . $query_string, 'GET', [], [], [], ['SCRIPT_NAME' => 'index.php']);
 
-    $http_kernel = $this->getMockBuilder('\Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
+    $http_kernel = $this->createMock('\Symfony\Component\HttpKernel\HttpKernelInterface');
     return new RequestEvent($http_kernel, $request, HttpKernelInterface::MASTER_REQUEST);
   }
 
   /**
    * Gets the language manager mock object.
    *
-   * @return \Drupal\language\ConfigurableLanguageManagerInterface|PHPUnit_Framework_MockObject_MockObject
+   * @return \Drupal\language\ConfigurableLanguageManagerInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected function getLanguageManagerStub() {
-    $language_manager = $this->getMockBuilder('Drupal\language\ConfigurableLanguageManagerInterface')
-      ->getMock();
+    $language_manager = $this->createMock('Drupal\language\ConfigurableLanguageManagerInterface');
     $language_manager->expects($this->any())
       ->method('getCurrentLanguage')
       ->will($this->returnValue(new Language(['id' => 'en'])));
diff --git a/tests/src/Unit/RouteNormalizerRequestSubscriberTest.php b/tests/src/Unit/RouteNormalizerRequestSubscriberTest.php
index 3a64f1b..de3d3dd 100644
--- a/tests/src/Unit/RouteNormalizerRequestSubscriberTest.php
+++ b/tests/src/Unit/RouteNormalizerRequestSubscriberTest.php
@@ -140,8 +140,7 @@ class RouteNormalizerRequestSubscriberTest extends UnitTestCase {
    * @return \Drupal\Core\Routing\UrlGeneratorInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected function getUrlGeneratorStub($request_uri, $call_expected = TRUE) {
-    $url_generator = $this->getMockBuilder('\Drupal\Core\Routing\UrlGeneratorInterface')
-      ->getMock();
+    $url_generator = $this->createMock('\Drupal\Core\Routing\UrlGeneratorInterface');
 
     $options = ['absolute' => TRUE];
 
@@ -163,8 +162,7 @@ class RouteNormalizerRequestSubscriberTest extends UnitTestCase {
    * @return \Drupal\Core\Path\PathMatcherInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected function getPathMatcherStub($call_expected = TRUE) {
-    $path_matcher = $this->getMockBuilder('\Drupal\Core\Path\PathMatcherInterface')
-      ->getMock();
+    $path_matcher = $this->createMock('\Drupal\Core\Path\PathMatcherInterface');
 
     $expectation = $call_expected ? $this->once() : $this->never();
 
@@ -184,9 +182,7 @@ class RouteNormalizerRequestSubscriberTest extends UnitTestCase {
    * @return \Drupal\redirect\RedirectChecker|\PHPUnit\Framework\MockObject\MockObject
    */
   protected function getRedirectCheckerStub($call_expected = TRUE) {
-    $redirect_checker = $this->getMockBuilder('\Drupal\redirect\RedirectChecker')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $redirect_checker = $this->createMock('\Drupal\redirect\RedirectChecker');
 
     $expectation = $call_expected ? $this->once() : $this->never();
 
@@ -218,8 +214,7 @@ class RouteNormalizerRequestSubscriberTest extends UnitTestCase {
       $request->attributes->add(['_disable_route_normalizer' => TRUE]);
     }
 
-    $http_kernel = $this->getMockBuilder('\Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
+    $http_kernel = $this->createMock('\Symfony\Component\HttpKernel\HttpKernelInterface');
     return new RequestEvent($http_kernel, $request, $request_type);
   }
 
