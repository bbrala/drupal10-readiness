modules/contrib/entity_reports/entity_reports.install
modules/contrib/entity_reports/modules/entity_reports_csv/src/EventSubscriber/EntityReportsCsvFormatsSubscriber.php
modules/contrib/entity_reports/modules/entity_reports_csv/src/EventSubscriber/EntityReportsCsvProcessorsSubscriber.php
modules/contrib/entity_reports/src/Controller/EntityReportsController.php
modules/contrib/entity_reports/src/Event/EntityReportsExportFormats.php
modules/contrib/entity_reports/src/Event/EntityReportsExportProcessors.php
modules/contrib/entity_reports/src/Form/EntityReportsSettingsForm.php
modules/contrib/entity_reports/src/Plugin/Derivative/EntityReportsLocalTasks.php
modules/contrib/entity_reports/src/Plugin/Derivative/EntityReportsMenuLinks.php
modules/contrib/entity_reports/src/ReportGenerator.php
modules/contrib/entity_reports/src/Routing/EntityReportsRoutes.php
modules/contrib/entity_reports/src/Tests/Functional/EntityReportsTestBase.php
modules/contrib/entity_reports/src/Tests/Functional/ReportGeneratorTest.php

6 files with changes
====================

1) modules/contrib/entity_reports/src/Tests/Functional/ReportGeneratorTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * @throws \Exception
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $fields = [
       'body' => [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_reports/src/Tests/Functional/EntityReportsTestBase.php:57

    ---------- begin diff ----------
@@ @@
       );
     }
     else {
-      $this->assertEqual($status,
-        SAVED_NEW,
-        (new FormattableMarkup('Created content type %type.',
-          ['%type' => $type->id()])
-        )->__toString()
-      );
+      $this->assertEquals($status, SAVED_NEW, (new FormattableMarkup('Created content type %type.',
+        ['%type' => $type->id()])
+      )->__toString());
     }

     return $type;
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_reports/src/Routing/EntityReportsRoutes.php:77

    ---------- begin diff ----------
@@ @@
     $configured_types = $this->config->get('entity_reports.settings')
       ->get('reported_entity_types');
     $event = new EntityReportsExportFormats();
-    $this->eventDispatcher->dispatch(EntityReportsExportFormats::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, EntityReportsExportFormats::EVENT_NAME);
     $export_formats = array_keys($event->exportFormats);

     foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/entity_reports/src/Event/EntityReportsExportProcessors.php:6

    ---------- begin diff ----------
@@ @@
 /**
  * Event that is fired when Entity Reports is processing an export.
  */
-class EntityReportsExportProcessors extends Event {
+class EntityReportsExportProcessors extends \Symfony\Contracts\EventDispatcher\Event {

   const EVENT_NAME = 'entity_reports_export_processors';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_reports/src/Event/EntityReportsExportFormats.php:6

    ---------- begin diff ----------
@@ @@
 /**
  * Event that is fired when Entity Reports is gathering export formats.
  */
-class EntityReportsExportFormats extends Event {
+class EntityReportsExportFormats extends \Symfony\Contracts\EventDispatcher\Event {

   const EVENT_NAME = 'entity_reports_export_formats';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_reports/src/Controller/EntityReportsController.php:130

    ---------- begin diff ----------
@@ @@
       }
       // Builds report export links.
       $event = new EntityReportsExportFormats();
-      $this->eventDispatcher->dispatch(EntityReportsExportFormats::EVENT_NAME, $event);
+      $this->eventDispatcher->dispatch($event, EntityReportsExportFormats::EVENT_NAME);
       $export_formats = $event->exportFormats;
       $export_links = [];
       foreach ($export_formats as $format_machine_name => $format_label) {
@@ @@

     // Builds report export links.
     $event = new EntityReportsExportFormats();
-    $this->eventDispatcher->dispatch(EntityReportsExportFormats::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, EntityReportsExportFormats::EVENT_NAME);
     $export_formats = $event->exportFormats;
     $export_links = [];
     foreach ($export_formats as $format_machine_name => $format_label) {
@@ @@
     // Checks for non-default export formats.
     if (!array_key_exists($type, EntityReportsExportFormats::DEFAULT_EXPORT_FORMATS)) {
       $event = new EntityReportsExportProcessors($content, $entity_type, $this->reportFields, $type);
-      $this->eventDispatcher->dispatch(EntityReportsExportProcessors::EVENT_NAME, $event);
+      $this->eventDispatcher->dispatch($event, EntityReportsExportProcessors::EVENT_NAME);
       $content = $event->content;
       foreach ($event->responseHeaders as $key => $value) {
         $response->headers->set($key, $value);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

