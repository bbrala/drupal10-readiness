modules/contrib/entity_share_websub/entity_share_websub.module
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/entity_share_websub_hub.install
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/entity_share_websub_hub.module
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/entity_share_websub_hub.views.inc
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Controller/SubscriptionController.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/EventSubscriber/NotificationProcessor.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Hub.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/HubInterface.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/field/SyndicatedByField.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/field/SyndicatedCountField.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/field/SyndicatedSummary.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/field/SyndicationStatusField.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/field/SyndicatorEmailField.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/field/UserField.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/filter/SummaryFilter.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/filter/SyndicatedFilter.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/filter/UserFilter.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Publisher.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/PublisherInterface.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Subscription.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/SubscriptionInterface.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Functional/LoadTest.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Kernel/ContentTest.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Kernel/PublisherTest.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Kernel/SubscriptionTest.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Traits/ValuesTrait.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Unit/HubTest.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/entity_share_websub_subscriber.install
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/entity_share_websub_subscriber.module
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/BatchHelper.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Controller/SubscriptionController.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Event/ContentSyncEvent.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/EventSubscriber/HubNotifier.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/EventSubscriber/ItemImport.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Form/CancelSubscriptionForm.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Form/SettingsForm.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Plugin/QueueWorker/SubscriberWorker.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Plugin/QueueWorker/SubscriptionRecordWorker.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Subscriber.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/SubscriptionManager.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/SubscriptionRecordRepository.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/SubscriptionRepository.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/tests/src/Functional/LoadTest.php
modules/contrib/entity_share_websub/src/SignatureTrait.php

11 files with changes
=====================

1) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/tests/src/Functional/LoadTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/SubscriptionManager.php:64

    ---------- begin diff ----------
@@ @@
     ])) {
       $this->updateSubscriptionStatus($subscription->id, Subscriber::SUBSCRIPTION_VERIFIED);
       // And we need to update the local copy.
-      $this->eventDispatcher->dispatch(ContentSyncEvent::EVENT_SYNC, new ContentSyncEvent($subscription));
+      $this->eventDispatcher->dispatch(new ContentSyncEvent($subscription), ContentSyncEvent::EVENT_SYNC);
       return TRUE;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


3) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/EventSubscriber/HubNotifier.php:56

    ---------- begin diff ----------
@@ @@
   /**
    * This method is called when the kernel.terminate is dispatched.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The dispatched event.
    */
-  public function kernelTerminate(Event $event) {
+  public function kernelTerminate(\Symfony\Contracts\EventDispatcher\Event $event) {
     $process_timeout = ini_get('max_execution_time') ?: 30;
     $end = time() + $process_timeout - 5;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Event/ContentSyncEvent.php:5

    ---------- begin diff ----------
@@ @@

 use Symfony\Component\EventDispatcher\Event;

-class ContentSyncEvent extends Event {
+class ContentSyncEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * Subscription events.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Controller/SubscriptionController.php:100

    ---------- begin diff ----------
@@ @@

           // Import selected entity after verification.
           // @see Drupal\entity_share_websub_subscriber\SubscriptionRecordWorker
-          $this->eventDispatcher->dispatch(ContentSyncEvent::EVENT_SYNC, new ContentSyncEvent($subscription));
+          $this->eventDispatcher->dispatch(new ContentSyncEvent($subscription), ContentSyncEvent::EVENT_SYNC);
         }
       }
     }
@@ @@

       // Validate signature.
       if ($signature == $request->headers->get('X-Hub-Signature')) {
-        $this->eventDispatcher->dispatch(ContentSyncEvent::EVENT_SYNC, new ContentSyncEvent($subscription));
+        $this->eventDispatcher->dispatch(new ContentSyncEvent($subscription), ContentSyncEvent::EVENT_SYNC);
       }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Unit/HubTest.php:110

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setUpValues();
     $this->subscriptionMock = $this->createMock(SubscriptionInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Kernel/SubscriptionTest.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
     $this->installEntitySchema('channel');
@@ @@
   public function testCheck() {
     $this->subscription->save($this->mock_topic, $this->mock_subscriber, $this->mock_secret, $this->mock_email, 'subscribe');
     $result = $this->subscription->checkSubscriptions($this->mock_node);
-    $this->assertEqual($result, [], 'Check existing but not verified');
+    $this->assertEquals($result, [], 'Check existing but not verified');
     $this->subscription->verifySubscription($this->mock_subscriber);
     $result = $this->subscription->checkSubscriptions($this->mock_node);
-    $this->assertEqual($result, ['1'], 'Check existing');
+    $this->assertEquals($result, ['1'], 'Check existing');
     $this->subscription->updateSubscriptions($result, ['content_summary' => 'New test title : article', 'uid' => 1]);
     $updates = $this->subscription->getUpdates();
-    $this->assertEqual($updates, [
+    $this->assertEquals($updates, [
       $this->mock_subscriber => [
         $this->mock_topic,
         $this->mock_secret,
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Kernel/PublisherTest.php:97

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('node');
@@ @@
     $this->subscription->verifySubscription($this->mock_subscriber);
     $this->publisher->notifyRelevant($this->mock_node);
     $item = $queue->claimItem();
-    $this->assertNotEqual($item, FALSE, 'Records notified and queued');
+    $this->assertNotEquals($item, FALSE, 'Records notified and queued');
     $this->assertEquals($item->data, [
       'path' => $this->mock_subscriber,
     ]);
    ----------- end diff -----------

Applied rules:
 * AssertNotEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Kernel/ContentTest.php:86

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('entity_share_websub_hub', Subscription::TABLE_NAME);
     $this->installSchema('node', ['node_access']);
@@ @@
     $node->save();
     $item = $queue->claimItem();
     $this->assertNotEmpty($item, 'Update on node unpublish');
-    $this->assertEqual($item->data['action'], Hub::ACTION_CANCEL, 'Correct cancel update');
+    $this->assertEquals($item->data['action'], Hub::ACTION_CANCEL, 'Correct cancel update');

     $items = $this->subscription->checkSubscriptions($node);
     $this->assertEmpty($items, 'The subscription set inactive on unpublish');
@@ @@
     $node->delete();
     $item = $queue->claimItem();
     $this->assertNotEmpty($item, 'Update on node deletion');
-    $this->assertEqual($item->data['action'], Hub::ACTION_CANCEL, 'Correct cancel update for deletion');
+    $this->assertEquals($item->data['action'], Hub::ACTION_CANCEL, 'Correct cancel update for deletion');

     $updates = $this->subscription->getUpdates($this->mock_subscriber, TRUE);
     $this->assertNotEmpty($updates, 'Existing cancel updates when node deleted');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Functional/LoadTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/EventSubscriber/NotificationProcessor.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * This method is called when the kernel.terminate is dispatched.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param \Symfony\Contracts\EventDispatcher\Event $event
    *   The dispatched event.
    */
-  public function kernelTerminate(Event $event) {
+  public function kernelTerminate(\Symfony\Contracts\EventDispatcher\Event $event) {
     $this->hub->processUpdates();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 11 files have been changed by Rector                                      

