diff --git a/modules/sharemessage_demo/tests/src/Functional/ShareMessageDemoTest.php b/modules/sharemessage_demo/tests/src/Functional/ShareMessageDemoTest.php
index cc37b85..da8a6bd 100644
--- a/modules/sharemessage_demo/tests/src/Functional/ShareMessageDemoTest.php
+++ b/modules/sharemessage_demo/tests/src/Functional/ShareMessageDemoTest.php
@@ -45,50 +45,68 @@ class ShareMessageDemoTest extends BrowserTestBase {
 
     $this->drupalLogin($admin_user);
     $this->drupalGet('admin/structure/block');
-    $this->assertText(t('Share Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Share Message'));
     $this->clickLink(t('Configure'), 0);
 
     $this->drupalGet('admin/structure/types');
-    $this->assertText(t('Shareable content'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Shareable content'));
 
     // Search for the Share Message block on the demo node.
     $this->drupalGet('admin/content');
     $this->clickLink(t('Share Message demo'));
-    $this->assertText(t('Welcome to the Share Message demo module!'));
-    $this->assertText(t('Share Message'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Welcome to the Share Message demo module!'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Share Message'));
     // Assert the demo links are correct.
     $node = $this->getNodeByTitle('Share Message demo');
     $this->drupalGet('node/' . $node->id());
-    $this->assertLinkByHref('admin/config/services/sharemessage/sharemessage-settings');
-    $this->assertLinkByHref('admin/config/services/sharemessage/manage/share_message_addthis_demo');
-    $this->assertLinkByHref('admin/config/services/sharemessage');
-    $this->assertLinkByHref('admin/structure/block/manage/sharemessage_addthis');
+    $this->assertSession()->linkByHrefExists('admin/config/services/sharemessage/sharemessage-settings');
+    $this->assertSession()->linkByHrefExists('admin/config/services/sharemessage/manage/share_message_addthis_demo');
+    $this->assertSession()->linkByHrefExists('admin/config/services/sharemessage');
+    $this->assertSession()->linkByHrefExists('admin/structure/block/manage/sharemessage_addthis');
 
     // Asserts that the buttons are displayed.
-    $this->assertRaw('addthis_button_preferred_1');
-    $this->assertRaw('addthis_button_preferred_2');
-    $this->assertRaw('addthis_button_preferred_3');
-    $this->assertRaw('addthis_button_preferred_4');
-    $this->assertRaw('addthis_button_preferred_5');
-    $this->assertRaw('addthis_button_compact');
+    $this->assertSession()->responseContains('addthis_button_preferred_1');
+    $this->assertSession()->responseContains('addthis_button_preferred_2');
+    $this->assertSession()->responseContains('addthis_button_preferred_3');
+    $this->assertSession()->responseContains('addthis_button_preferred_4');
+    $this->assertSession()->responseContains('addthis_button_preferred_5');
+    $this->assertSession()->responseContains('addthis_button_compact');
 
     // Test OG headers for image, video and url.
-    $this->assertRaw('<meta property="og:image" content="https://www.drupal.org/files/drupal%208%20logo%20Stacked%20CMYK%20300.png" />');
-    $this->assertRaw('<meta property="og:video" content="https://www.youtube.com/watch?v=ktCgVopf7D0?fs=1" />');
-    $this->assertRaw('<meta property="og:video:width" content="360" />');
-    $this->assertRaw('<meta property="og:video:height" content="270" />');
-    $this->assertRaw('<meta property="og:url" content="' . $this->getUrl() . '" />');
+    $this->assertSession()->responseContains('<meta property="og:image" content="https://www.drupal.org/files/drupal%208%20logo%20Stacked%20CMYK%20300.png" />');
+    $this->assertSession()->responseContains('<meta property="og:video" content="https://www.youtube.com/watch?v=ktCgVopf7D0?fs=1" />');
+    $this->assertSession()->responseContains('<meta property="og:video:width" content="360" />');
+    $this->assertSession()->responseContains('<meta property="og:video:height" content="270" />');
+    $this->assertSession()->responseContains('<meta property="og:url" content="' . $this->getUrl() . '" />');
 
     // Test that Sharrre plugin works.
-    $this->assertText('Share Message - Sharrre');
-    $this->assertRaw('<div id="block-sharemessage-sharrre" class="block block-sharemessage block-sharemessage-block">');
-    $this->assertRaw('"services":{"googlePlus":"googlePlus","facebook":"facebook","twitter":"twitter"}');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Share Message - Sharrre');
+    $this->assertSession()->responseContains('<div id="block-sharemessage-sharrre" class="block block-sharemessage block-sharemessage-block">');
+    $this->assertSession()->responseContains('"services":{"googlePlus":"googlePlus","facebook":"facebook","twitter":"twitter"}');
 
     // Test that Social Share Privacy plugin works.
-    $this->assertText('Share Message - Social Share Privacy');
-    $this->assertRaw('<div id="block-sharemessage-socialshareprivacy" class="block block-sharemessage block-sharemessage-block">');
-    $this->assertRaw('"twitter":{"status":true');
-    $this->assertRaw('"facebook":{"status":true');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Share Message - Social Share Privacy');
+    $this->assertSession()->responseContains('<div id="block-sharemessage-socialshareprivacy" class="block block-sharemessage block-sharemessage-block">');
+    $this->assertSession()->responseContains('"twitter":{"status":true');
+    $this->assertSession()->responseContains('"facebook":{"status":true');
   }
 
 }
diff --git a/sharemessage.module b/sharemessage.module
index 974eb4a..5adc231 100644
--- a/sharemessage.module
+++ b/sharemessage.module
@@ -206,7 +206,7 @@ function sharemessage_get_addthis_services() {
  */
 function addthis_get_services_json() {
   if (\Drupal::config('sharemessage.addthis')->get('local_services_definition')) {
-    $file_uri = drupal_get_path('module', 'sharemessage') . '/addthis/sharing.en.json';
+    $file_uri = \Drupal::service('extension.list.module')->getPath('sharemessage') . '/addthis/sharing.en.json';
   }
   else {
     $file_uri = 'http://cache.addthiscdn.com/services/v1/sharing.en.json';
diff --git a/src/Entity/ShareMessage.php b/src/Entity/ShareMessage.php
index ecad78e..ada820b 100644
--- a/src/Entity/ShareMessage.php
+++ b/src/Entity/ShareMessage.php
@@ -542,7 +542,7 @@ class ShareMessage extends ConfigEntityBase implements ShareMessageInterface {
       /** @var \Drupal\file\FileInterface $image */
       $fallback_image = $entity_repository->loadEntityByUuid('file', $this->fallback_image);
       if ($fallback_image) {
-        $image_url = file_create_url($fallback_image->getFileUri());
+        $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($fallback_image->getFileUri());
       }
     }
     return $image_url;
diff --git a/src/Plugin/sharemessage/SocialSharePrivacy.php b/src/Plugin/sharemessage/SocialSharePrivacy.php
index 882827e..cfe2572 100644
--- a/src/Plugin/sharemessage/SocialSharePrivacy.php
+++ b/src/Plugin/sharemessage/SocialSharePrivacy.php
@@ -244,10 +244,10 @@ class SocialSharePrivacy extends SharePluginBase implements SharePluginInterface
         $enabled_services[$service] = array_merge($enabled_services[$service], $this->servicesWithSettings()[$service]);
       }
       if (in_array($service, ['mail', 'tumblr', 'fbshare'])) {
-        $enabled_services[$service]['line_img'] = file_create_url($images_folder . $service . '.png');
+        $enabled_services[$service]['line_img'] = \Drupal::service('file_url_generator')->generateAbsoluteString($images_folder . $service . '.png');
       }
       else {
-        $enabled_services[$service]['dummy_line_img'] = file_create_url($images_folder . 'dummy_' . $service . '.png');
+        $enabled_services[$service]['dummy_line_img'] = \Drupal::service('file_url_generator')->generateAbsoluteString($images_folder . 'dummy_' . $service . '.png');
       }
     }
 
diff --git a/tests/src/Functional/Plugin/ShareMessageAddthisTest.php b/tests/src/Functional/Plugin/ShareMessageAddthisTest.php
index e2e582d..bf1f081 100644
--- a/tests/src/Functional/Plugin/ShareMessageAddthisTest.php
+++ b/tests/src/Functional/Plugin/ShareMessageAddthisTest.php
@@ -24,11 +24,15 @@ class ShareMessageAddthisTest extends ShareMessageTestBase {
       'default_additional_services' => FALSE,
       'default_icon_style' => 'addthis_16x16_style',
     ];
-    $this->drupalPostForm('admin/config/services/sharemessage/addthis-settings', $default_settings, t('Save configuration'));
+    $this->drupalGet('admin/config/services/sharemessage/addthis-settings');
+    $this->submitForm($default_settings, t('Save configuration'));
 
     // Set a new Share Message.
     $this->drupalGet('admin/config/services/sharemessage/add');
-    $this->assertText('AddThis plugin for Share Message module.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('AddThis plugin for Share Message module.');
     $override_settings = '//details[starts-with(@data-drupal-selector, "edit-settings")]';
     $this->assertFieldByXPath($override_settings);
     $sharemessage = [
@@ -37,14 +41,15 @@ class ShareMessageAddthisTest extends ShareMessageTestBase {
       'plugin' => 'addthis',
       'title' => 'AddThis test',
     ];
-    $this->drupalPostForm('admin/config/services/sharemessage/add', $sharemessage, t('Save'));
+    $this->drupalGet('admin/config/services/sharemessage/add');
+    $this->submitForm($sharemessage, t('Save'));
 
     // Assert that the initial settings are saved correctly.
     $this->drupalGet('sharemessage-test/sharemessage_test_addthis_label');
     $this->assertShareButtons($sharemessage, $default_settings['default_icon_style'], TRUE);
-    $this->assertRaw('<a class="addthis_button_facebook">');
-    $this->assertRaw('<a class="addthis_button_facebook_like">');
-    $this->assertNoRaw('<a class="addthis_button_compact">');
+    $this->assertSession()->responseContains('<a class="addthis_button_facebook">');
+    $this->assertSession()->responseContains('<a class="addthis_button_facebook_like">');
+    $this->assertSession()->responseNotContains('<a class="addthis_button_compact">');
 
     // Set new AddThis settings.
     $default_settings = [
@@ -56,16 +61,17 @@ class ShareMessageAddthisTest extends ShareMessageTestBase {
       'default_additional_services' => TRUE,
       'default_icon_style' => 'addthis_32x32_style',
     ];
-    $this->drupalPostForm('admin/config/services/sharemessage/addthis-settings', $default_settings, t('Save configuration'));
+    $this->drupalGet('admin/config/services/sharemessage/addthis-settings');
+    $this->submitForm($default_settings, t('Save configuration'));
 
     // Check that the saving of the new AddThis settings works correctly.
     $this->drupalGet('sharemessage-test/sharemessage_test_addthis_label');
     $this->assertShareButtons($sharemessage, $default_settings['default_icon_style'], TRUE);
-    $this->assertRaw('<a class="addthis_button_facebook">');
-    $this->assertNoRaw('<a class="addthis_button_facebook_like">');
-    $this->assertRaw('<a class="addthis_button_linkedin">');
-    $this->assertRaw('<a class="addthis_button_twitter">');
-    $this->assertRaw('<a class="addthis_button_compact">');
+    $this->assertSession()->responseContains('<a class="addthis_button_facebook">');
+    $this->assertSession()->responseNotContains('<a class="addthis_button_facebook_like">');
+    $this->assertSession()->responseContains('<a class="addthis_button_linkedin">');
+    $this->assertSession()->responseContains('<a class="addthis_button_twitter">');
+    $this->assertSession()->responseContains('<a class="addthis_button_compact">');
   }
 
 }
diff --git a/tests/src/Functional/Plugin/ShareMessageOGHeadersTest.php b/tests/src/Functional/Plugin/ShareMessageOGHeadersTest.php
index 6b91815..7fa1d0e 100644
--- a/tests/src/Functional/Plugin/ShareMessageOGHeadersTest.php
+++ b/tests/src/Functional/Plugin/ShareMessageOGHeadersTest.php
@@ -31,15 +31,25 @@ class ShareMessageOGHeadersTest extends ShareMessageTestBase {
       'message_short' => 'OG headers short description',
       'fallback_image' => $file->uuid(),
     ];
-    $this->drupalPostForm('admin/config/services/sharemessage/add', $sharemessage, t('Save'));
-    $this->assertText(t('Share Message @label has been added.', ['@label' => $sharemessage['label']]));
+    $this->drupalGet('admin/config/services/sharemessage/add');
+    $this->submitForm($sharemessage, t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Share Message @label has been added.', ['@label' => $sharemessage['label']]));
     $this->drupalGet('admin/config/services/sharemessage/manage/sharemessage_test_og_label');
     $override_settings = '//details[starts-with(@data-drupal-selector, "edit-settings")]';
     $this->assertFieldByXPath($override_settings);
-    $this->assertText('Open graph headers are used when users want to use it as a framework or a background tool only.');
-    $this->assertText('The OG Headers plugin doesn\'t provide any settings.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Open graph headers are used when users want to use it as a framework or a background tool only.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The OG Headers plugin doesn\'t provide any settings.');
     $this->drupalGet('sharemessage-test/sharemessage_test_og_label');
-    $url = file_create_url($file->getFileUri());
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
 
     $image = \Drupal::service('image.factory')->get($file->getFileUri());
     $image_width = $image->getWidth();
@@ -62,7 +72,7 @@ class ShareMessageOGHeadersTest extends ShareMessageTestBase {
       'message_long' => 'Long description',
       'message_short' => 'Short description',
     ];
-    $this->drupalPostForm(NULL, $sharemessage, t('Save'));
+    $this->submitForm($sharemessage, t('Save'));
     $this->drupalGet('sharemessage-test/sharemessage_test_special_characters');
     // Test for special characters (such as ', ", <, >, &) in a node title
     // used as token for a Share Message title.
diff --git a/tests/src/Functional/Plugin/ShareMessageSharrreTest.php b/tests/src/Functional/Plugin/ShareMessageSharrreTest.php
index 762756f..9c2961d 100644
--- a/tests/src/Functional/Plugin/ShareMessageSharrreTest.php
+++ b/tests/src/Functional/Plugin/ShareMessageSharrreTest.php
@@ -28,7 +28,7 @@ class ShareMessageSharrreTest extends ShareMessageTestBase {
       'enable_counter' => FALSE,
       'enable_tracking' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $default_settings, t('Save configuration'));
+    $this->submitForm($default_settings, t('Save configuration'));
 
     // Set a new Share Message.
     $sharemessage = [
@@ -37,16 +37,20 @@ class ShareMessageSharrreTest extends ShareMessageTestBase {
       'plugin' => 'sharrre',
       'title' => 'Sharrre test',
     ];
-    $this->drupalPostForm('admin/config/services/sharemessage/add', $sharemessage, t('Save'));
+    $this->drupalGet('admin/config/services/sharemessage/add');
+    $this->submitForm($sharemessage, t('Save'));
     $this->drupalGet('admin/config/services/sharemessage/manage/sharemessage_test_sharrre_label');
     $override_settings = '//details[starts-with(@data-drupal-selector, "edit-settings")]';
     $this->assertFieldByXPath($override_settings);
-    $this->assertText('Sharrre is a jQuery plugin that allows you to create nice widgets sharing for Facebook, Twitter, Google Plus (with PHP script) and more.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Sharrre is a jQuery plugin that allows you to create nice widgets sharing for Facebook, Twitter, Google Plus (with PHP script) and more.');
 
     // Assert that the initial settings are saved correctly.
     $this->drupalGet('sharemessage-test/sharemessage_test_sharrre_label');
-    $this->assertRaw('"services":{"googlePlus":"googlePlus","facebook":"facebook"}');
-    $this->assertRaw('"shorter_total":false,"enable_hover":false,"enable_counter":false,"enable_tracking":false');
+    $this->assertSession()->responseContains('"services":{"googlePlus":"googlePlus","facebook":"facebook"}');
+    $this->assertSession()->responseContains('"shorter_total":false,"enable_hover":false,"enable_counter":false,"enable_tracking":false');
 
     // Set new Sharrre settings.
     $this->drupalGet('admin/config/services/sharemessage/sharrre-settings');
@@ -64,13 +68,13 @@ class ShareMessageSharrreTest extends ShareMessageTestBase {
       'enable_counter' => TRUE,
       'enable_tracking' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $default_settings, t('Save configuration'));
+    $this->submitForm($default_settings, t('Save configuration'));
 
     // Check that the saving of the new Sharrre settings works correctly.
     $this->drupalGet('sharemessage-test/sharemessage_test_sharrre_label');
-    $this->assertRaw('"services":{"googlePlus":"googlePlus","facebook":"facebook","twitter":"twitter","linkedin":"linkedin","pinterest":"pinterest"}');
-    $this->assertNoRaw('"services":{"googlePlus":"googlePlus","facebook":"facebook"}');
-    $this->assertRaw('"shorter_total":true,"enable_hover":true,"enable_counter":true,"enable_tracking":false');
-    $this->assertNoRaw('"shorter_total":false,"enable_hover":false,"enable_counter":false,"enable_tracking":false');
+    $this->assertSession()->responseContains('"services":{"googlePlus":"googlePlus","facebook":"facebook","twitter":"twitter","linkedin":"linkedin","pinterest":"pinterest"}');
+    $this->assertSession()->responseNotContains('"services":{"googlePlus":"googlePlus","facebook":"facebook"}');
+    $this->assertSession()->responseContains('"shorter_total":true,"enable_hover":true,"enable_counter":true,"enable_tracking":false');
+    $this->assertSession()->responseNotContains('"shorter_total":false,"enable_hover":false,"enable_counter":false,"enable_tracking":false');
   }
 }
diff --git a/tests/src/Functional/Plugin/ShareMessageSocialSharePrivacyTest.php b/tests/src/Functional/Plugin/ShareMessageSocialSharePrivacyTest.php
index 44f5ecb..a3cd500 100644
--- a/tests/src/Functional/Plugin/ShareMessageSocialSharePrivacyTest.php
+++ b/tests/src/Functional/Plugin/ShareMessageSocialSharePrivacyTest.php
@@ -23,7 +23,7 @@ class ShareMessageSocialSharePrivacyTest extends ShareMessageTestBase {
         'facebook',
       ],
     ];
-    $this->drupalPostForm(NULL, $default_settings, t('Save configuration'));
+    $this->submitForm($default_settings, t('Save configuration'));
 
     // Set a new Share Message.
     $sharemessage = [
@@ -32,17 +32,21 @@ class ShareMessageSocialSharePrivacyTest extends ShareMessageTestBase {
       'plugin' => 'socialshareprivacy',
       'title' => 'SocialSharePrivacy test',
     ];
-    $this->drupalPostForm('admin/config/services/sharemessage/add', $sharemessage, t('Save'));
+    $this->drupalGet('admin/config/services/sharemessage/add');
+    $this->submitForm($sharemessage, t('Save'));
     $this->drupalGet('admin/config/services/sharemessage/manage/sharemessage_test_socialshareprivacy_label');
     $override_settings = '//details[starts-with(@data-drupal-selector, "edit-settings")]';
     $this->assertFieldByXPath($override_settings);
-    $this->assertText('Social Share Privacy is a jQuery plugin that lets you add social share buttons to your website that don\'t allow the social sites to track your users.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Social Share Privacy is a jQuery plugin that lets you add social share buttons to your website that don\'t allow the social sites to track your users.');
 
     // Assert that the initial settings are saved correctly.
     $this->drupalGet('sharemessage-test/sharemessage_test_socialshareprivacy_label');
-    $this->assertRaw('"facebook":{"status":true');
-    $this->assertRaw('"gplus":{"status":true');
-    $this->assertRaw('"twitter":{"status":false');
+    $this->assertSession()->responseContains('"facebook":{"status":true');
+    $this->assertSession()->responseContains('"gplus":{"status":true');
+    $this->assertSession()->responseContains('"twitter":{"status":false');
 
     // Set new Social Share Privacy settings.
     $this->drupalGet('admin/config/services/sharemessage/socialshareprivacy-settings');
@@ -52,13 +56,13 @@ class ShareMessageSocialSharePrivacyTest extends ShareMessageTestBase {
         'twitter',
       ],
     ];
-    $this->drupalPostForm(NULL, $default_settings, t('Save configuration'));
+    $this->submitForm($default_settings, t('Save configuration'));
 
     // Check the saving of the new Social Share Privacy settings is correctly.
     $this->drupalGet('sharemessage-test/sharemessage_test_socialshareprivacy_label');
-    $this->assertRaw('"twitter":{"status":true');
-    $this->assertRaw('"gplus":{"status":true');
-    $this->assertRaw('"facebook":{"status":false');
+    $this->assertSession()->responseContains('"twitter":{"status":true');
+    $this->assertSession()->responseContains('"gplus":{"status":true');
+    $this->assertSession()->responseContains('"facebook":{"status":false');
   }
 
 }
