diff --git a/modules/bricks_default_blocks/bricks_default_blocks.install b/modules/bricks_default_blocks/bricks_default_blocks.install
index 490639a..39e2510 100644
--- a/modules/bricks_default_blocks/bricks_default_blocks.install
+++ b/modules/bricks_default_blocks/bricks_default_blocks.install
@@ -17,8 +17,8 @@ function bricks_default_blocks_install() {
   ]);
   $layout->save();
 
-  $data = file_get_contents(drupal_get_path('theme', 'bartik') . '/screenshot.png');
-  $file = file_save_data($data, 'public://bartik.png');
+  $data = file_get_contents(\Drupal::service('extension.list.theme')->getPath('bartik') . '/screenshot.png');
+  $file = \Drupal::service('file.repository')->writeData($data, 'public://bartik.png');
   $image = $entity_type_manager->getStorage('block_content')->create([
     'type' => 'image',
     'info' => 'Image',
diff --git a/modules/bricks_default_paragraphs/bricks_default_paragraphs.install b/modules/bricks_default_paragraphs/bricks_default_paragraphs.install
index 8dbd973..1f6d980 100644
--- a/modules/bricks_default_paragraphs/bricks_default_paragraphs.install
+++ b/modules/bricks_default_paragraphs/bricks_default_paragraphs.install
@@ -16,8 +16,8 @@ function bricks_default_paragraphs_install() {
   ]);
   $layout->save();
 
-  $data = file_get_contents(drupal_get_path('theme', 'bartik') . '/screenshot.png');
-  $file = file_save_data($data, 'public://bartik.png');
+  $data = file_get_contents(\Drupal::service('extension.list.theme')->getPath('bartik') . '/screenshot.png');
+  $file = \Drupal::service('file.repository')->writeData($data, 'public://bartik.png');
   $image = $entity_type_manager->getStorage('paragraph')->create([
     'type' => 'images',
     'field_images_demo' => [
diff --git a/modules/bricks_inline/bricks_inline.module b/modules/bricks_inline/bricks_inline.module
index 5c74fb2..eef5921 100644
--- a/modules/bricks_inline/bricks_inline.module
+++ b/modules/bricks_inline/bricks_inline.module
@@ -11,7 +11,7 @@ use Drupal\Core\Render\Element;
  * Implements hook_theme_registry_alter().
  */
 function bricks_inline_theme_registry_alter(&$theme_registry) {
-  $theme_registry['inline_entity_form_entity_table']['theme path'] = drupal_get_path('module', 'bricks_inline');
+  $theme_registry['inline_entity_form_entity_table']['theme path'] = \Drupal::service('extension.list.module')->getPath('bricks_inline');
   $theme_registry['inline_entity_form_entity_table']['function'] = 'bricks_inline_inline_entity_form_entity_table';
 }
 
diff --git a/tests/src/Functional/BricksTest.php b/tests/src/Functional/BricksTest.php
index 15f1c3c..f0d8ec1 100644
--- a/tests/src/Functional/BricksTest.php
+++ b/tests/src/Functional/BricksTest.php
@@ -34,7 +34,7 @@ class BricksTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->rootUser);
 
@@ -60,17 +60,17 @@ class BricksTest extends BrowserTestBase {
       'label' => 'Brick field',
       'field_name' => 'brick',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save and continue');
+    $this->submitForm($edit, 'Save and continue');
     $edit = [
       'cardinality' => -1,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save field settings');
+    $this->submitForm($edit, 'Save field settings');
 
     $edit = [
       'settings[handler_settings][auto_create]' => TRUE,
       'settings[handler_settings][target_bundles][' . $this->vocabulary->id() . ']' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save settings');
+    $this->submitForm($edit, 'Save settings');
   }
 
   /**
@@ -81,8 +81,12 @@ class BricksTest extends BrowserTestBase {
     $edit = [];
     $edit['title[0][value]'] = 'Llamas are cool';
     $edit['field_brick[0][target_id]'] = 'Camelid';
-    $this->drupalPostForm("node/add/article", $edit, 'Save');
-    $this->assertText('Article Llamas are cool has been created.');
+    $this->drupalGet("node/add/article");
+    $this->submitForm($edit, 'Save');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Article Llamas are cool has been created.');
   }
 
 }
diff --git a/tests/src/Kernel/BricksTest.php b/tests/src/Kernel/BricksTest.php
index 9c3fd64..560ab1b 100644
--- a/tests/src/Kernel/BricksTest.php
+++ b/tests/src/Kernel/BricksTest.php
@@ -29,7 +29,7 @@ class BricksTest extends KernelTestBase {
     'bricks_test',
   ];
 
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installSchema('node', 'node_access');
