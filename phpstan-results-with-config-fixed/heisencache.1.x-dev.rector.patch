diff --git a/src/Heisencache/tests/DebugSubscriberTest.php b/src/Heisencache/tests/DebugSubscriberTest.php
index 173125e..0eca4ec 100644
--- a/src/Heisencache/tests/DebugSubscriberTest.php
+++ b/src/Heisencache/tests/DebugSubscriberTest.php
@@ -25,7 +25,7 @@ class DebugSubscriberTest extends TestCase {
 
   protected $events = NULL;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->events = array_merge(
       Cache::getEmittedEvents(),
       MissSubscriber::getEmittedEvents()
diff --git a/src/Heisencache/tests/EventEmitterTest.php b/src/Heisencache/tests/EventEmitterTest.php
index 4245a51..09c165d 100644
--- a/src/Heisencache/tests/EventEmitterTest.php
+++ b/src/Heisencache/tests/EventEmitterTest.php
@@ -52,7 +52,7 @@ class EventEmitterTest extends TestCase {
     }
 
     $actual = $emitter->getSubscribersByEventName($event1);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 1, "Exactly 1 subscriber returned for event.");
     $this->assertEquals(reset($actual), $subscriber, "Single subscriber on event is returned correctly.");
 
@@ -64,6 +64,9 @@ class EventEmitterTest extends TestCase {
     }
   }
 
+  /**
+   * @doesNotPerformAssertions
+   */
   public function testOnSingleSubscriberInvalidEvent() {
     $event1 = 'event1';
     $event2 = 'event2';
@@ -94,7 +97,7 @@ class EventEmitterTest extends TestCase {
       }
 
     $actual = $emitter->getSubscribersByEventName($event1);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 1, "Exactly 1 subscriber returned for first event.");
     $this->assertEquals(reset($actual), $subscriber, "Single subscriber on first event is returned correctly.");
 
@@ -106,7 +109,7 @@ class EventEmitterTest extends TestCase {
       $this->fail('Passing the same subscriber to on() for a second event does not throw an exception.');
     }
     $actual = $emitter->getSubscribersByEventName($event2);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 1, "Exactly 1 subscriber returned for second event.");
     $this->assertEquals(reset($actual), $subscriber, "Single subscriber on second event is returned correctly.");
   }
@@ -126,7 +129,7 @@ class EventEmitterTest extends TestCase {
     }
 
     $actual = $emitter->getSubscribersByEventName($event1);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 1, "Exactly 1 subscriber returned for event.");
     $this->assertEquals(reset($actual), $sub1, "Single subscriber on first event is returned correctly.");
 
@@ -138,7 +141,7 @@ class EventEmitterTest extends TestCase {
     }
 
     $actual = $emitter->getSubscribersByEventName($event1);
-    $this->assertInternalType('array', $actual, "getSubscribersByEventName() returns an array.");
+    $this->assertIsArray($actual, "getSubscribersByEventName() returns an array.");
     $this->assertEquals(count($actual), 2, "Exactly 2 subscribers returned for event.");
 
     $this->assertTrue(in_array($sub1, $actual), "First subscriber on event is returned correctly.");
@@ -165,6 +168,9 @@ class EventEmitterTest extends TestCase {
     }
   }
 
+  /**
+   * @doesNotPerformAssertions
+   */
   public function testEmitHappy() {
     $event1 = 'event1';
     $emitter = new EventEmitter();
diff --git a/src/Heisencache/tests/MissSubscriberTest.php b/src/Heisencache/tests/MissSubscriberTest.php
index 38da352..709f810 100644
--- a/src/Heisencache/tests/MissSubscriberTest.php
+++ b/src/Heisencache/tests/MissSubscriberTest.php
@@ -21,14 +21,14 @@ class MissSubscriberTest extends TestCase {
 
   protected $emitter;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->emitter = $this->getMock('Drupal\heisencache\EventEmitter');
   }
 
   public function testGetHit() {
     $sub = new MissSubscriber($this->emitter);
     $actual = $sub->afterGet(self::CHANNEL, 'k', 'v');
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertEmpty($actual);
   }
 
@@ -38,7 +38,7 @@ class MissSubscriberTest extends TestCase {
     $sub = new MissSubscriber($this->emitter);
     $actual = $sub->afterGet(self::CHANNEL, $key, FALSE);
 
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('misses', $actual);
     $this->assertNotEmpty($actual['misses']);
@@ -53,7 +53,7 @@ class MissSubscriberTest extends TestCase {
     $sub->beforeGetMultiple(self::CHANNEL, $initial_cids);
     $actual = $sub->afterGetMultiple(self::CHANNEL, $missed_cids);
 
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('full_miss', $actual);
     $this->assertFalse($actual['full_miss']);
@@ -72,7 +72,7 @@ class MissSubscriberTest extends TestCase {
     $sub->beforeGetMultiple(self::CHANNEL, $initial_cids);
     $actual = $sub->afterGetMultiple(self::CHANNEL, $missed_cids);
 
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('full_miss', $actual);
     $this->assertTrue($actual['full_miss']);
@@ -90,7 +90,7 @@ class MissSubscriberTest extends TestCase {
     $sub = new MissSubscriber($this->emitter);
     $sub->beforeGetMultiple(self::CHANNEL, $initial_cids);
     $actual = $sub->afterGetMultiple(self::CHANNEL, $missed_cids);
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertEmpty($actual);
 
   }
diff --git a/src/Heisencache/tests/WriteSubscriberTest.php b/src/Heisencache/tests/WriteSubscriberTest.php
index 5ec35ed..8f201cf 100644
--- a/src/Heisencache/tests/WriteSubscriberTest.php
+++ b/src/Heisencache/tests/WriteSubscriberTest.php
@@ -21,7 +21,7 @@ class WriteSubscriberTest extends TestCase {
 
   protected $emitter;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->emitter = $this->getMock('Drupal\heisencache\EventEmitter');
   }
 
@@ -31,7 +31,7 @@ class WriteSubscriberTest extends TestCase {
     $serialized_value = serialize($value);
 
     $actual = $sub->afterSet(self::CHANNEL, 'k', $value, 120);
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('value_size', $actual);
     $this->assertEquals(strlen($serialized_value), $actual['value_size']);
@@ -42,7 +42,7 @@ class WriteSubscriberTest extends TestCase {
     $wildcard = TRUE;
     $actual = $sub->afterClear(self::CHANNEL, 'k', $wildcard);
 
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertArrayHasKey('wildcard', $actual);
     $this->assertEquals($wildcard, $actual['wildcard']);
@@ -52,7 +52,7 @@ class WriteSubscriberTest extends TestCase {
     $sub = new WriteSubscriber($this->emitter);
     $actual = $sub->getEmittedEvents();
 
-    $this->assertInternalType('array', $actual);
+    $this->assertIsArray($actual);
     $this->assertNotEmpty($actual);
     $this->assertEquals(1, count($actual));
     $this->assertEquals('write', $actual[0]);
diff --git a/views/heisencache.views_default.inc b/views/heisencache.views_default.inc
index b4b37a2..2f5826b 100644
--- a/views/heisencache.views_default.inc
+++ b/views/heisencache.views_default.inc
@@ -27,7 +27,7 @@ function heisencache_views_default_views() {
       $view_arg = array(
         '@view' => $item->getFilename(),
       );
-      drupal_set_message(t('@view does not seem to contain an exported view.', $view_arg),  'error');
+      \Drupal::messenger()->addError(t('@view does not seem to contain an exported view.', $view_arg));
       watchdog('heisencache', '@view does not seem to contain an exported view.', $view_arg, WATCHDOG_ERROR);
     }
     // Only provide tables based on enabled modules: notably dblog.
