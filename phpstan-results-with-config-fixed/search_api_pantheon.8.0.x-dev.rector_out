modules/contrib/search_api_pantheon/RoboFile.php
modules/contrib/search_api_pantheon/modules/search_api_pantheon_admin/src/Access/AdminAccessCheck.php
modules/contrib/search_api_pantheon/modules/search_api_pantheon_admin/src/Form/PantheonSolrAdminForm.php
modules/contrib/search_api_pantheon/modules/search_api_pantheon_admin/src/Form/PostSolrSchema.php
modules/contrib/search_api_pantheon/modules/search_api_pantheon_examples/search_api_pantheon_examples.module
modules/contrib/search_api_pantheon/search_api_pantheon.install
modules/contrib/search_api_pantheon/search_api_pantheon.module
modules/contrib/search_api_pantheon/src/Commands/Diagnose.php
modules/contrib/search_api_pantheon/src/Commands/Query.php
modules/contrib/search_api_pantheon/src/Commands/Schema.php
modules/contrib/search_api_pantheon/src/Exceptions/PantheonSearchApiException.php
modules/contrib/search_api_pantheon/src/Plugin/SolrConnector/PantheonSolrConnector.php
modules/contrib/search_api_pantheon/src/Services/Endpoint.php
modules/contrib/search_api_pantheon/src/Services/PantheonGuzzle.php
modules/contrib/search_api_pantheon/src/Services/SchemaPoster.php
modules/contrib/search_api_pantheon/src/Services/SolariumClient.php
modules/contrib/search_api_pantheon/src/Solarium/EventDispatcher/EventProxy.php
modules/contrib/search_api_pantheon/src/Solarium/EventDispatcher/Psr14Bridge.php
modules/contrib/search_api_pantheon/src/Traits/EndpointAwareTrait.php
modules/contrib/search_api_pantheon/tests/Unit/EndpointServiceTest.php
modules/contrib/search_api_pantheon/tests/Unit/GuzzleClassTest.php
modules/contrib/search_api_pantheon/tests/Unit/SchemaPosterTest.php
modules/contrib/search_api_pantheon/tests/bootstrap.php

4 files with changes
====================

1) modules/contrib/search_api_pantheon/tests/Unit/SchemaPosterTest.php:32

    ---------- begin diff ----------
@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock(LoggerInterface::class);

-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);

     $this->loggerFactory
       ->expects($this->any())
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/search_api_pantheon/tests/Unit/GuzzleClassTest.php:23

    ---------- begin diff ----------
@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock(LoggerInterface::class);

-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);

     $this->loggerFactory
       ->expects($this->any())
@@ @@
    * Test the Pantheon Guzzle Client.
    *
    * @test
+   * @doesNotPerformAssertions
    */
   public function testGuzzleClient() {
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/search_api_pantheon/src/Solarium/EventDispatcher/Psr14Bridge.php:19

    ---------- begin diff ----------
@@ @@
     $this->dispatcher = $eventDispatcher;
   }

-  public function dispatch($event, Event $null = NULL) {
+  public function dispatch($event, \Symfony\Contracts\EventDispatcher\Event $null = NULL) {
     if (\is_object($event)) {
-      return $this->dispatcher->dispatch(\get_class($event), new EventProxy($event));
+      return $this->dispatcher->dispatch(new EventProxy($event), \get_class($event));
     }
     return $this->dispatcher->dispatch($event, $null);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/search_api_pantheon/src/Solarium/EventDispatcher/EventProxy.php:6

    ---------- begin diff ----------
@@ @@
 /**
  * A proxy for events defined by symfony contracts to be used with older Drupal.
  */
-class EventProxy extends Event {
+class EventProxy extends \Symfony\Contracts\EventDispatcher\Event {
   /**
    * @var \Symfony\Contracts\EventDispatcher\Event
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

