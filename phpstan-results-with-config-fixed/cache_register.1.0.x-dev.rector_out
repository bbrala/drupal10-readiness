modules/contrib/cache_register/src/Exception/CacheNotSetError.php
modules/contrib/cache_register/src/Exception/CacheRegisterError.php
modules/contrib/cache_register/src/Manager.php
modules/contrib/cache_register/src/ManagerInterface.php
modules/contrib/cache_register/src/Object/Drawer.php
modules/contrib/cache_register/src/Object/DrawerInterface.php
modules/contrib/cache_register/src/Object/Register.php
modules/contrib/cache_register/src/Object/RegisterInterface.php
modules/contrib/cache_register/src/Object/Slot.php
modules/contrib/cache_register/src/Object/SlotBase.php
modules/contrib/cache_register/src/Object/SlotBaseInterface.php
modules/contrib/cache_register/src/Object/SlotInterface.php
modules/contrib/cache_register/tests/src/Kernel/CacheRegisterKernelTestBase.php
modules/contrib/cache_register/tests/src/Kernel/DrawerTest.php
modules/contrib/cache_register/tests/src/Kernel/ManagerTest.php
modules/contrib/cache_register/tests/src/Kernel/RegisterTest.php
modules/contrib/cache_register/tests/src/Kernel/SlotBaseTest.php
modules/contrib/cache_register/tests/src/Kernel/SlotTest.php

6 files with changes
====================

1) modules/contrib/cache_register/tests/src/Kernel/SlotTest.php:23

    ---------- begin diff ----------
@@ @@
     // Reopen the slot.
     $slot_2 = $this->createSlotBase('testReopenSlot');
     $slot_cache_2 = $slot_2->getCache();
-    $this->assertEqual($slot_cache_1, $slot_cache_2);
+    $this->assertEquals($slot_cache_1, $slot_cache_2);
   }

   /**
    * @covers ::setCache
    * @dataProvider cacheDataProvider
+   * @doesNotPerformAssertions
    */
   public function testSetCache($data, int $expire = CacheBackendInterface::CACHE_PERMANENT, array $tags = []) {
     $slot = $this->createSlot('testIsCached');
@@ @@

   /**
    * @covers ::getCacheData
+   * @doesNotPerformAssertions
    */
   public function testGetCacheData() {
     /** @var \Drupal\cache_register\Manager $manager */
@@ @@

     // Set the empty cache.
     $slot->setCacheStrict('valid');
-    $this->assertEqual($slot->getCacheData(), 'valid');
+    $this->assertEquals($slot->getCacheData(), 'valid');

     // Try to override existing cache entry.
     $slot->setCacheStrict('invalid');
-    $this->assertEqual($slot->getCacheData(), 'valid');
+    $this->assertEquals($slot->getCacheData(), 'valid');
   }

   /**
@@ @@
     $manager = $this->getManager();
     $slot = $manager->openSlot('cr', 'd', 's', $open_register);
     $slot->setCache('data');
-    $this->assertEqual('data', $slot->getCacheData());
+    $this->assertEquals('data', $slot->getCacheData());
     $slot->deleteCache();
-    $this->assertEqual(NULL, $slot->getCacheData());
+    $this->assertEquals(NULL, $slot->getCacheData());
     if ($open_register) {
       $this->assertNotContains($slot->id(), array_keys($slot->getRegister()->getList()));
     }
@@ @@
     $manager = $this->getManager();
     $slot = $manager->openSlot('cr', 'd', 's', $open_register);
     $slot->setCache('data');
-    $this->assertEqual('data', $slot->getCacheData());
+    $this->assertEquals('data', $slot->getCacheData());
     $slot->invalidateCache();
-    $this->assertEqual(NULL, $slot->getCacheData());
-    $this->assertEqual('data', $slot->getCacheData(TRUE));
+    $this->assertEquals(NULL, $slot->getCacheData());
+    $this->assertEquals('data', $slot->getCacheData(TRUE));

     if ($open_register) {
       $this->assertNotContains($slot->id(), array_keys($slot->getRegister()->getList()));
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cache_register/tests/src/Kernel/SlotBaseTest.php:28

    ---------- begin diff ----------
@@ @@
     // Reopen the slot.
     $slot_2 = $this->createSlotBase('testReopenSlot');
     $slot_cache_2 = $slot_2->getCache();
-    $this->assertEqual($slot_cache_1, $slot_cache_2);
+    $this->assertEquals($slot_cache_1, $slot_cache_2);
   }

   /**
@@ @@
     $slot = $this->createSlotBase('slot', $drawer);

     if (!$open_register) {
-      $this->assertEqual(NULL, $slot->getRegister());
+      $this->assertEquals(NULL, $slot->getRegister());
     }
     else {
       $this->assertInstanceOf('Drupal\cache_register\Object\Register', $slot->getRegister());
@@ @@
    *   Cannot rely on strtotime or associated approaches.
    * @param array $tags
    *   Array value.
+   * @doesNotPerformAssertions
    */
   public function testDoSetCache($data, int $expire = CacheBackendInterface::CACHE_PERMANENT, array $tags = []) {
     $slot = $this->createSlotBase('testIsCached');
@@ @@

     // After caching.
     $slot->getCacheBackend()->set($slot->id(), 'cache_data');
-    $this->assertNotEqual($slot->getCache(), NULL);
+    $this->assertNotEquals($slot->getCache(), NULL);
     $this->assertEquals($slot->getCacheBackend()->get($slot->id()), $slot->getCache());

     // After invalidating the cache.
     $slot->getCacheBackend()->invalidate($slot->id());
     $this->assertEquals(NULL, $slot->getCache());
-    $this->assertNotEqual($slot->getCache(TRUE), NULL);
+    $this->assertNotEquals($slot->getCache(TRUE), NULL);
     $this->assertEquals($slot->getCacheBackend()->get($slot->id()), $slot->getCache());

     // Repopulate and then delete the cache.
@@ @@

     // After caching.
     $slot->getCacheBackend()->set($cid, 'cache_data');
-    $this->assertNotEqual(
-      $this->callMethod($slot, 'doGetCacheData', [FALSE]),
-      NULL
-    );
+    $this->assertNotEquals($this->callMethod($slot, 'doGetCacheData', [FALSE]), NULL);
     $this->assertEquals(
       $slot->getCache()->data,
       $this->callMethod($slot, 'doGetCacheData', [FALSE])
@@ @@
       NULL,
       $this->callMethod($slot, 'doGetCacheData', [FALSE])
     );
-    $this->assertNotEqual(
-      $this->callMethod($slot, 'doGetCacheData', [TRUE]),
-      NULL
-    );
+    $this->assertNotEquals($this->callMethod($slot, 'doGetCacheData', [TRUE]), NULL);
     $this->assertEquals(
       $slot->getCache(TRUE)->data,
       $this->callMethod($slot, 'doGetCacheData', [TRUE])
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNotEqualRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cache_register/tests/src/Kernel/RegisterTest.php:21

    ---------- begin diff ----------
@@ @@
     // Reopen the slot.
     $slot_2 = $this->createSlotBase('testReopenRegister');
     $slot_cache_2 = $slot_2->getCache();
-    $this->assertEqual($slot_cache_1, $slot_cache_2);
+    $this->assertEquals($slot_cache_1, $slot_cache_2);
   }

   /**
@@ @@
   public function testGetList() {
     /** @var \Drupal\cache_register\Manager $manager */
     $register = $this->createRegister();
-    $this->assertEqual(
-      $register->getCacheBackend()->get($register->id())->data,
-      $register->getList()
-    );
+    $this->assertEquals($register->getCacheBackend()->get($register->id())->data, $register->getList());
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cache_register/tests/src/Kernel/ManagerTest.php:21

    ---------- begin diff ----------
@@ @@
       $this->assertInstanceOf("Drupal\cache_register\Object\RegisterInterface", $slot->getRegister());
     }
     else {
-      $this->assertEqual(NULL, $slot->getRegister());
+      $this->assertEquals(NULL, $slot->getRegister());
     }
   }

@@ @@
       $this->assertInstanceOf("Drupal\cache_register\Object\RegisterInterface", $drawer->getRegister());
     }
     else {
-      $this->assertEqual(NULL, $drawer->getRegister());
+      $this->assertEquals(NULL, $drawer->getRegister());
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/cache_register/tests/src/Kernel/DrawerTest.php:14

    ---------- begin diff ----------
@@ @@
    */
   public function testId() {
     $drawer = $this->createDrawer('testId', FALSE);
-    $this->assert('testId', $drawer->id());
+    $this->assertTrue('testId', $drawer->id());
   }

   /**
@@ @@
    */
   public function testHasActiveRegister() {
     $drawer = $this->createDrawer('testHasActiveRegister', FALSE);
-    $this->assertEqual(FALSE, $drawer->hasActiveRegister());
+    $this->assertEquals(FALSE, $drawer->hasActiveRegister());

     $this->createRegister($drawer);
-    $this->assertEqual(TRUE, $drawer->hasActiveRegister());
+    $this->assertEquals(TRUE, $drawer->hasActiveRegister());
   }

   /**
@@ @@
    */
   public function testGetRegister() {
     $drawer = $this->createDrawer('cr.d', FALSE);
-    $this->assertEqual(NULL, $drawer->getRegister());
+    $this->assertEquals(NULL, $drawer->getRegister());

     $this->createRegister($drawer);
     $this->assertInstanceOf('\Drupal\cache_register\Object\RegisterInterface', $drawer->getRegister());
@@ @@
     $slot_1->setCache('slot_1_data');
     $slot_2->setCache('slot_2_data');

-    $this->assertNotEqual($drawer->getRegister()->getCache(), NULL);
-    $this->assertNotEqual($slot_1->getCache(), NULL);
-    $this->assertNotEqual($slot_2->getCache(), NULL);
+    $this->assertNotEquals($drawer->getRegister()->getCache(), NULL);
+    $this->assertNotEquals($slot_1->getCache(), NULL);
+    $this->assertNotEquals($slot_2->getCache(), NULL);

     $drawer->invalidate($reopen_register);
     if ($reopen_register) {
-      $this->assertNotEqual($drawer->getRegister()->getCache(), NULL);
+      $this->assertNotEquals($drawer->getRegister()->getCache(), NULL);
     }
     else {
-      $this->assertEqual(NULL, $drawer->getRegister());
+      $this->assertEquals(NULL, $drawer->getRegister());
     }
-    $this->assertEqual(NULL, $slot_1->getCache());
-    $this->assertEqual(NULL, $slot_2->getCache());
+    $this->assertEquals(NULL, $slot_1->getCache());
+    $this->assertEquals(NULL, $slot_2->getCache());
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertNotEqualRector
 * AssertRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/cache_register/tests/src/Kernel/CacheRegisterKernelTestBase.php:190

    ---------- begin diff ----------
@@ @@

     // After caching.
     $slot->getCacheBackend()->set($cid, 'cache_data');
-    $this->assertNotEqual($slot->getCacheData(), NULL);
+    $this->assertNotEquals($slot->getCacheData(), NULL);
     $this->assertEquals(
       $slot->getCache()->data,
       $slot->getCacheData()
@@ @@
     // After invalidating the cache.
     $slot->getCacheBackend()->invalidate($slot->id());
     $this->assertEquals(NULL, $slot->getCacheData());
-    $this->assertNotEqual($slot->getCacheData(TRUE), NULL);
+    $this->assertNotEquals($slot->getCacheData(TRUE), NULL);
     $this->assertEquals(
       $slot->getCache(TRUE)->data,
       $slot->getCacheData(TRUE)
    ----------- end diff -----------

Applied rules:
 * AssertNotEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

