modules/contrib/http_client_manager/http_client_manager.module
modules/contrib/http_client_manager/modules/http_client_manager_example/src/Controller/ExampleController.php
modules/contrib/http_client_manager/modules/http_client_manager_example/src/EventSubscriber/HttpClientManagerExampleSubscriber.php
modules/contrib/http_client_manager/modules/http_client_manager_example/src/Plugin/HttpServiceApiWrapper/HttpServiceApiWrapperPosts.php
modules/contrib/http_client_manager/modules/http_client_manager_example/src/api/Commands/Posts.php
modules/contrib/http_client_manager/src/Controller/HttpClientManagerPreview.php
modules/contrib/http_client_manager/src/Controller/HttpConfigRequestController.php
modules/contrib/http_client_manager/src/Entity/HttpConfigRequest.php
modules/contrib/http_client_manager/src/Entity/HttpConfigRequestInterface.php
modules/contrib/http_client_manager/src/Event/HttpClientCallPreExecuteEvent.php
modules/contrib/http_client_manager/src/Event/HttpClientEvents.php
modules/contrib/http_client_manager/src/Event/HttpClientHandlerStackEvent.php
modules/contrib/http_client_manager/src/Form/HttpClientManagerConfigForm.php
modules/contrib/http_client_manager/src/Form/HttpConfigRequestDeleteForm.php
modules/contrib/http_client_manager/src/Form/HttpConfigRequestForm.php
modules/contrib/http_client_manager/src/Form/HttpServiceApiPreviewForm.php
modules/contrib/http_client_manager/src/HttpClient.php
modules/contrib/http_client_manager/src/HttpClientInterface.php
modules/contrib/http_client_manager/src/HttpClientManagerFactory.php
modules/contrib/http_client_manager/src/HttpClientManagerFactoryInterface.php
modules/contrib/http_client_manager/src/HttpConfigRequestHtmlRouteProvider.php
modules/contrib/http_client_manager/src/HttpConfigRequestListBuilder.php
modules/contrib/http_client_manager/src/HttpServiceApiHandler.php
modules/contrib/http_client_manager/src/HttpServiceApiHandlerInterface.php
modules/contrib/http_client_manager/src/HttpServiceApiWrapperFactory.php
modules/contrib/http_client_manager/src/HttpServiceApiWrapperFactoryInterface.php
modules/contrib/http_client_manager/src/Plugin/HttpServiceApiWrapper/HttpServiceApiWrapperBase.php
modules/contrib/http_client_manager/src/Plugin/HttpServiceApiWrapper/HttpServiceApiWrapperInterface.php
modules/contrib/http_client_manager/src/Request/HttpRequestBase.php
modules/contrib/http_client_manager/src/Request/HttpRequestInterface.php
modules/contrib/http_client_manager/tests/src/Unit/HttpClientManagerFactoryTest.php
modules/contrib/http_client_manager/tests/src/Unit/HttpClientTest.php

5 files with changes
====================

1) modules/contrib/http_client_manager/tests/src/Unit/HttpClientTest.php:16

    ---------- begin diff ----------
@@ @@
  */
 class HttpClientTest extends UnitTestCase {

+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * The client.
    *
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->initClient('test', $this->getServiceApiInfo());
   }
@@ @@
    * Tests HttpClient::getCommand() with wrong argument.
    *
    * @covers ::getCommand
-   *
-   * @expectedException \InvalidArgumentException
-   * @expectedExceptionMessage No operation found named Missing
    */
   public function testGetCommandWhichDoesNotExists() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('No operation found named Missing');
     $command = $this->client->getCommand('Missing');
     $this->assertEmpty($command);
   }
@@ @@
    * Tests HttpClient::call() with wrong command name.
    *
    * @covers ::call
-   *
-   * @expectedException \InvalidArgumentException
-   * @expectedExceptionMessage No operation found named Missing
    */
   public function testCallWithWrongCommandName() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('No operation found named Missing');
     $this->client->call('Missing');
   }

@@ @@
    * Tests HttpClient::__call() with wrong command name.
    *
    * @covers ::__call
-   *
-   * @expectedException \InvalidArgumentException
-   * @expectedExceptionMessage No operation found named Missing
    */
   public function testMagicMethodCallWithWrongCommandName() {
+    $this->expectException(\InvalidArgumentException::class);
+    $this->expectExceptionMessage('No operation found named Missing');
     $this->client->missing();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/http_client_manager/tests/src/Unit/HttpClientManagerFactoryTest.php:17

    ---------- begin diff ----------
@@ @@
  */
 class HttpClientManagerFactoryTest extends UnitTestCase {

+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Tests HttpClientManagerFactory::get().
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/http_client_manager/src/HttpClient.php:233

    ---------- begin diff ----------
@@ @@
     }

     $event = new HttpClientHandlerStackEvent($config['handler'], $this->serviceApi);
-    $this->eventDispatcher->dispatch(HttpClientEvents::HANDLER_STACK, $event);
+    $this->eventDispatcher->dispatch($event, HttpClientEvents::HANDLER_STACK);
     return $config;
   }

@@ @@
     $client = $this->getClientByCommand($commandName);
     $command = $client->getCommand($commandName, $params);
     $event = new HttpClientCallPreExecuteEvent($client, $command);
-    $this->eventDispatcher->dispatch(HttpClientEvents::CALL_PRE_EXECUTE, $event);
+    $this->eventDispatcher->dispatch($event, HttpClientEvents::CALL_PRE_EXECUTE);
     return $client->execute($command);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/http_client_manager/src/Event/HttpClientHandlerStackEvent.php:9

    ---------- begin diff ----------
@@ @@
  *
  * @package Drupal\http_client_manager\Event
  */
-class HttpClientHandlerStackEvent extends Event {
+class HttpClientHandlerStackEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * The GuzzleHttp Handler stack.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/http_client_manager/src/Event/HttpClientCallPreExecuteEvent.php:10

    ---------- begin diff ----------
@@ @@
  *
  * @package Drupal\http_client_manager\Event
  */
-class HttpClientCallPreExecuteEvent extends Event {
+class HttpClientCallPreExecuteEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * The client.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 5 files have been changed by Rector                                       

