diff --git a/telephone_type.info.yml b/telephone_type.info.yml
index 721f280..9f404ab 100644
--- a/telephone_type.info.yml
+++ b/telephone_type.info.yml
@@ -1,8 +1,7 @@
 name: 'Telephone Type'
 description: 'Defines a field type for telephone numbers with optional types.  Extend core telephone field.'
 package: Field types
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 dependencies:
   - telephone
 type: module
diff --git a/tests/src/Functional/TelephoneFieldTest.php b/tests/src/Functional/TelephoneFieldTest.php
index a520d68..0b122f4 100644
--- a/tests/src/Functional/TelephoneFieldTest.php
+++ b/tests/src/Functional/TelephoneFieldTest.php
@@ -34,7 +34,7 @@ class TelephoneTypeFieldTest extends BrowserTestBase {
   /**
    * Protected function setUp.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'article']);
@@ -59,7 +59,7 @@ class TelephoneTypeFieldTest extends BrowserTestBase {
       'bundle' => 'article',
     ])->save();
 
-    entity_get_form_display('node', 'article', 'default')
+    \Drupal::service('entity_display.repository')->getFormDisplay('node', 'article', 'default')
       ->setComponent('field_telephone', [
         'type' => 'telephone_type_default',
         'settings' => [
@@ -70,7 +70,7 @@ class TelephoneTypeFieldTest extends BrowserTestBase {
       ])
       ->save();
 
-    entity_get_display('node', 'article', 'default')
+    \Drupal::service('entity_display.repository')->getViewDisplay('node', 'article', 'default')
       ->setComponent('field_telephone', [
         'type' => 'telephone_type_link',
         'weight' => 1,
@@ -79,8 +79,8 @@ class TelephoneTypeFieldTest extends BrowserTestBase {
 
     // Display creation form.
     $this->drupalGet('node/add/article');
-    $this->assertFieldByName("field_telephone[0][value]", '', 'Widget found.');
-    $this->assertRaw('placeholder="123-456-7890"');
+    $this->assertSession()->fieldValueEquals("field_telephone[0][value]", '');
+    $this->assertSession()->responseContains('placeholder="123-456-7890"');
 
     // Test basic entry of telephone field.
     $edit = [
@@ -88,17 +88,18 @@ class TelephoneTypeFieldTest extends BrowserTestBase {
       'field_telephone[0][value]' => "123456789",
     ];
 
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertRaw('<a href="tel:123456789">', 'A telephone link is provided on the article node page.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains('<a href="tel:123456789">');
 
     // Add number with a space in it. Need to ensure it is stripped on output.
     $edit = [
       'title[0][value]' => $this->randomMachineName(),
       'field_telephone[0][value]' => "1234 56789",
     ];
+    $this->drupalGet('node/add/article');
 
-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
-    $this->assertRaw('<a href="tel:123456789">', 'Telephone link is output with whitespace removed.');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->responseContains('<a href="tel:123456789">');
   }
 
 }
diff --git a/tests/src/Kernel/TelephoneTypeItemTest.php b/tests/src/Kernel/TelephoneTypeItemTest.php
index 8c900df..4124392 100644
--- a/tests/src/Kernel/TelephoneTypeItemTest.php
+++ b/tests/src/Kernel/TelephoneTypeItemTest.php
@@ -26,7 +26,7 @@ class TelephoneTypeItemTest extends FieldKernelTestBase {
   /**
    * Protected Function setup.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a telephone field storage and field for validation.
@@ -60,24 +60,24 @@ class TelephoneTypeItemTest extends FieldKernelTestBase {
     $entity = EntityTest::load($id);
     $this->assertTrue($entity->field_test instanceof FieldItemListInterface, 'Field implements interface.');
     $this->assertTrue($entity->field_test[0] instanceof FieldItemInterface, 'Field item implements interface.');
-    $this->assertEqual($entity->field_test->value, $value);
-    $this->assertEqual($entity->field_test->type, $type);
-    $this->assertEqual($entity->field_test[0]->value, $value);
-    $this->assertEqual($entity->field_test[0]->type, $type);
+    $this->assertEquals($entity->field_test->value, $value);
+    $this->assertEquals($entity->field_test->type, $type);
+    $this->assertEquals($entity->field_test[0]->value, $value);
+    $this->assertEquals($entity->field_test[0]->type, $type);
 
     // Verify changing the field value.
     $new_value = '+41' . rand(1000000, 9999999);
     $new_type = 'Cell';
     $entity->field_test->value = $new_value;
     $entity->field_test->type = $new_type;
-    $this->assertEqual($entity->field_test->value, $new_value);
-    $this->assertEqual($entity->field_test->type, $new_type);
+    $this->assertEquals($entity->field_test->value, $new_value);
+    $this->assertEquals($entity->field_test->type, $new_type);
 
     // Read changed entity and assert changed values.
     $entity->save();
     $entity = EntityTest::load($id);
-    $this->assertEqual($entity->field_test->value, $new_value);
-    $this->assertEqual($entity->field_test->type, $new_type);
+    $this->assertEquals($entity->field_test->value, $new_value);
+    $this->assertEquals($entity->field_test->type, $new_type);
 
     // Test sample item generation.
     $entity = EntityTest::create();
