modules/contrib/content_lock/content_lock.install
modules/contrib/content_lock/content_lock.module
modules/contrib/content_lock/modules/content_lock_timeout/content_lock_timeout.install
modules/contrib/content_lock/modules/content_lock_timeout/content_lock_timeout.module
modules/contrib/content_lock/modules/content_lock_timeout/src/Form/SettingsForm.php
modules/contrib/content_lock/modules/content_lock_timeout/tests/modules/content_lock_timeout_test/src/TimeChanger.php
modules/contrib/content_lock/modules/content_lock_timeout/tests/src/Functional/ContentLockTimeoutTest.php
modules/contrib/content_lock/src/Ajax/LockFormCommand.php
modules/contrib/content_lock/src/ContentLock/ContentLock.php
modules/contrib/content_lock/src/Controller/ContentLockController.php
modules/contrib/content_lock/src/EventSubscriber/SettingsSaveEventSubscriber.php
modules/contrib/content_lock/src/Form/ContentLockSettingsForm.php
modules/contrib/content_lock/src/Form/EntityBreakLockForm.php
modules/contrib/content_lock/src/Plugin/Action/BreakLock.php
modules/contrib/content_lock/src/Plugin/Action/BreakLockDeriver.php
modules/contrib/content_lock/src/Plugin/views/field/ContentLockBreak.php
modules/contrib/content_lock/src/Plugin/views/filter/ContentLockFilter.php
modules/contrib/content_lock/src/Plugin/views/sort/ContentLockSort.php
modules/contrib/content_lock/src/Routing/ContentLockRoutes.php
modules/contrib/content_lock/tests/modules/content_lock_test/content_lock_test.module
modules/contrib/content_lock/tests/modules/prefetch_cache_test/prefetch_cache_test.module
modules/contrib/content_lock/tests/src/Functional/ContentLockBlockTest.php
modules/contrib/content_lock/tests/src/Functional/ContentLockEntityTest.php
modules/contrib/content_lock/tests/src/Functional/ContentLockModesTest.php
modules/contrib/content_lock/tests/src/Functional/ContentLockNodeTest.php
modules/contrib/content_lock/tests/src/Functional/ContentLockTermTest.php
modules/contrib/content_lock/tests/src/Functional/ContentLockTestBase.php
modules/contrib/content_lock/tests/src/Functional/ContentLockTestTrait.php
modules/contrib/content_lock/tests/src/Functional/ContentLockTranslationTest.php
modules/contrib/content_lock/tests/src/FunctionalJavascript/ContentLockEntityTest.php
modules/contrib/content_lock/tests/src/FunctionalJavascript/ContentLockJavascriptTestBase.php
modules/contrib/content_lock/tests/src/FunctionalJavascript/Integration/PrefetchCacheTest.php

2 files with changes
====================

1) modules/contrib/content_lock/tests/src/FunctionalJavascript/Integration/PrefetchCacheTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('local_tasks_block', ['primary' => TRUE]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/content_lock/modules/content_lock_timeout/tests/src/Functional/ContentLockTimeoutTest.php:116

    ---------- begin diff ----------
@@ @@
   /**
    * Setup and Rebuild node access.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article']);
@@ @@

     // Content should be locked.
     $this->drupalGet($entity->toUrl('edit-form')->toString());
-    $this->assertText(t('This content is being edited by the user @name and is therefore locked to prevent other users changes.', [
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('This content is being edited by the user @name and is therefore locked to prevent other users changes.', [
       '@name' => $this->user1->getDisplayName(),
     ]));

@@ @@
     // Content should be unlocked by cron.
     $this->assertNoLockOnContent($entity);
     $this->drupalGet($entity->toUrl('edit-form')->toString());
-    $this->assertText(t('This content is now locked against simultaneous editing.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('This content is now locked against simultaneous editing.'));

     $this->drupalLogout();

@@ @@

     // Content should be locked.
     $this->drupalGet($entity->toUrl('edit-form')->toString());
-    $this->assertText(t('This content is being edited by the user @name and is therefore locked to prevent other users changes.', [
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('This content is being edited by the user @name and is therefore locked to prevent other users changes.', [
       '@name' => $this->user1->getDisplayName(),
     ]));

@@ @@
     \Drupal::time()->setCurrentTime(time() + 60 * 60);
     // Lock should be release by form prepare.
     $this->drupalGet($entity->toUrl('edit-form')->toString());
-    $this->assertText(t('This content is now locked against simultaneous editing.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('This content is now locked against simultaneous editing.'));
   }

   /**
@@ @@
     $this->lockService->locking($entity->id(), $entity->language()->getId(), 'edit', $this->user1->id(), $entity->getEntityTypeId());
     $lock = $this->lockService->fetchLock($entity->id(), $entity->language()->getId(), 'edit', $entity->getEntityTypeId());
     $this->assertNotNull($lock, 'Lock present');
-    $this->assertEqual($this->user1->label(), $lock->name, 'Lock present for correct user.');
+    $this->assertEquals($this->user1->label(), $lock->name, 'Lock present for correct user.');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

