diff --git a/src/Event/ExportEvent.php b/src/Event/ExportEvent.php
index d70b130..a80cda8 100644
--- a/src/Event/ExportEvent.php
+++ b/src/Event/ExportEvent.php
@@ -10,7 +10,7 @@ use Symfony\Component\EventDispatcher\Event;
  *
  * @see \Drupal\default_content\Event\DefaultContentEvents
  */
-class ExportEvent extends Event {
+class ExportEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The entity we're exporting.
diff --git a/src/Event/ImportEvent.php b/src/Event/ImportEvent.php
index 0b486f4..7327543 100644
--- a/src/Event/ImportEvent.php
+++ b/src/Event/ImportEvent.php
@@ -9,7 +9,7 @@ use Symfony\Component\EventDispatcher\Event;
  *
  * @see \Drupal\default_content\Event\DefaultContentEvents
  */
-class ImportEvent extends Event {
+class ImportEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * An array of content entities that were imported.
diff --git a/src/Exporter.php b/src/Exporter.php
index e0df909..6237457 100644
--- a/src/Exporter.php
+++ b/src/Exporter.php
@@ -118,7 +118,7 @@ class Exporter implements ExporterInterface {
       $folder = dirname(dirname($destination));
       $this->contentFileStorage->writeEntity($folder, $return, $entity, basename($destination));
     }
-    $this->eventDispatcher->dispatch(DefaultContentEvents::EXPORT, new ExportEvent($entity));
+    $this->eventDispatcher->dispatch(new ExportEvent($entity), DefaultContentEvents::EXPORT);
 
     return $return;
   }
diff --git a/src/Importer.php b/src/Importer.php
index e062781..0cead0d 100644
--- a/src/Importer.php
+++ b/src/Importer.php
@@ -130,7 +130,7 @@ class Importer implements ImporterInterface {
    */
   public function importContent($module) {
     $created = [];
-    $folder = drupal_get_path('module', $module) . "/content";
+    $folder = \Drupal::service('extension.list.module')->getPath($module) . "/content";
 
     if (file_exists($folder)) {
       $root_user = $this->entityTypeManager->getStorage('user')->load(1);
@@ -248,7 +248,7 @@ class Importer implements ImporterInterface {
           $created[$entity->uuid()] = $entity;
         }
       }
-      $this->eventDispatcher->dispatch(DefaultContentEvents::IMPORT, new ImportEvent($created, $module));
+      $this->eventDispatcher->dispatch(new ImportEvent($created, $module), DefaultContentEvents::IMPORT);
       $this->accountSwitcher->switchBack();
     }
     // Reset the tree.
diff --git a/tests/src/Functional/DefaultContentTest.php b/tests/src/Functional/DefaultContentTest.php
index 6332474..fcfbaa4 100644
--- a/tests/src/Functional/DefaultContentTest.php
+++ b/tests/src/Functional/DefaultContentTest.php
@@ -33,7 +33,7 @@ class DefaultContentTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create user 2 with the correct UUID.
     User::create([
@@ -48,6 +48,7 @@ class DefaultContentTest extends BrowserTestBase {
 
   /**
    * Test importing default content.
+   * @doesNotPerformAssertions
    */
   public function testImport() {
     // Enable the module and import the content.
@@ -70,7 +71,7 @@ class DefaultContentTest extends BrowserTestBase {
     $extensions['module'] = module_config_sort($extensions['module']);
     $sync->write('core.extension', $extensions);
     // Slightly hacky but we need the config from the test module too.
-    $module_storage = new FileStorage(drupal_get_path('module', 'default_content_test') . '/config/install');
+    $module_storage = new FileStorage(\Drupal::service('extension.list.module')->getPath('default_content_test') . '/config/install');
     foreach ($module_storage->listAll() as $name) {
       $sync->write($name, $module_storage->read($name));
     }
diff --git a/tests/src/Kernel/DefaultContentYamlImportTest.php b/tests/src/Kernel/DefaultContentYamlImportTest.php
index 5519414..e38b8dd 100644
--- a/tests/src/Kernel/DefaultContentYamlImportTest.php
+++ b/tests/src/Kernel/DefaultContentYamlImportTest.php
@@ -103,7 +103,7 @@ class DefaultContentYamlImportTest extends KernelTestBase {
     $extensions['module'] = module_config_sort($extensions['module']);
     $sync->write('core.extension', $extensions);
     // Slightly hacky but we need the config from the test module too.
-    $module_storage = new FileStorage(drupal_get_path('module', 'default_content_test_yaml') . '/config/install');
+    $module_storage = new FileStorage(\Drupal::service('extension.list.module')->getPath('default_content_test_yaml') . '/config/install');
     foreach ($module_storage->listAll() as $name) {
       $sync->write($name, $module_storage->read($name));
     }
diff --git a/tests/src/Kernel/ExporterIntegrationTest.php b/tests/src/Kernel/ExporterIntegrationTest.php
index 7470a19..896c8e8 100644
--- a/tests/src/Kernel/ExporterIntegrationTest.php
+++ b/tests/src/Kernel/ExporterIntegrationTest.php
@@ -90,7 +90,7 @@ class ExporterIntegrationTest extends KernelTestBase {
         'format' => 'plain_text',
       ]
     ];
-    $this->assertEqual($expected_description, $exported_decoded['default']['description']);
+    $this->assertEquals($expected_description, $exported_decoded['default']['description']);
 
     // Tests export of taxonomy parent field.
     $child_term = Term::create([
@@ -138,11 +138,11 @@ class ExporterIntegrationTest extends KernelTestBase {
     $exported_by_entity_type = $this->exporter->exportContentWithReferences('node', $node->id());
 
     // Ensure that the node type is not tryed to be exported.
-    $this->assertEqual(array_keys($exported_by_entity_type), ['node', 'user']);
+    $this->assertEquals(array_keys($exported_by_entity_type), ['node', 'user']);
 
     // Ensure the right UUIDs are exported.
-    $this->assertEqual([$node->uuid()], array_keys($exported_by_entity_type['node']));
-    $this->assertEqual([$user->uuid()], array_keys($exported_by_entity_type['user']));
+    $this->assertEquals([$node->uuid()], array_keys($exported_by_entity_type['node']));
+    $this->assertEquals([$user->uuid()], array_keys($exported_by_entity_type['user']));
 
     // Compare the actual serialized data.
     $meta = [
