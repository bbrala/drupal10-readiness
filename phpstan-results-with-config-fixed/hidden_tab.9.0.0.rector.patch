diff --git a/hidden_tab.info.yml b/hidden_tab.info.yml
index ec7aac1..ff28063 100644
--- a/hidden_tab.info.yml
+++ b/hidden_tab.info.yml
@@ -2,7 +2,7 @@ name: Hidden Tab
 type: module
 description: 'Provides pages (Tabs) with secret Uri on entities.'
 package: Navigation
-core_version_requirement: ^8.8.0 || ^9.0
+core_version_requirement: ^9.3 || ^10
 configure: entity.hidden_tab_page.collection
 dependencies:
   - jquery_ui_tabs:jquery_ui_tabs
diff --git a/src/Event/HiddenTabAfterMailEvent.php b/src/Event/HiddenTabAfterMailEvent.php
index fdc84be..910f74c 100644
--- a/src/Event/HiddenTabAfterMailEvent.php
+++ b/src/Event/HiddenTabAfterMailEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * The event published when a new mail is sent by mailer (after it is sent).
  */
-class HiddenTabAfterMailEvent extends Event {
+class HiddenTabAfterMailEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Name of this event.
diff --git a/src/Event/HiddenTabPageFormEvent.php b/src/Event/HiddenTabPageFormEvent.php
index 7a7f3d4..d82e7e1 100644
--- a/src/Event/HiddenTabPageFormEvent.php
+++ b/src/Event/HiddenTabPageFormEvent.php
@@ -12,7 +12,7 @@ use Symfony\Component\EventDispatcher\Event;
  * So that other modules may add their own elements to the form. Has 3 phase
  * of form creation, validation and save.
  */
-class HiddenTabPageFormEvent extends Event {
+class HiddenTabPageFormEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Name of this event.
diff --git a/src/FUtility.php b/src/FUtility.php
index d7a96b2..d36df89 100644
--- a/src/FUtility.php
+++ b/src/FUtility.php
@@ -785,7 +785,7 @@ final class FUtility {
       elseif ($value instanceof Link) {
         $toRenderable = $value->toRenderable();
         $ret[$key] = [
-          '#markup' => render($toRenderable),
+          '#markup' => \Drupal::service('renderer')->render($toRenderable),
         ];
       }
       else {
diff --git a/src/Form/Base/EntityFormBase.php b/src/Form/Base/EntityFormBase.php
index 957a5c6..ce04edc 100644
--- a/src/Form/Base/EntityFormBase.php
+++ b/src/Form/Base/EntityFormBase.php
@@ -135,7 +135,7 @@ abstract class EntityFormBase extends ContentEntityForm {
     try {
       $l = $entity->toLink($this->t('View'));
       $ren = $l->toRenderable();
-      $link = render($ren);
+      $link = \Drupal::service('renderer')->render($ren);
     }
     catch (Throwable $error) {
       Utility::renderLog($error, 'hidden_tab_credit', 'view_link', $entity->id(), 'EntityFormBase::save');
diff --git a/src/Form/HiddenTabPageForm.php b/src/Form/HiddenTabPageForm.php
index a51a35d..af07bd1 100644
--- a/src/Form/HiddenTabPageForm.php
+++ b/src/Form/HiddenTabPageForm.php
@@ -427,8 +427,8 @@ class HiddenTabPageForm extends EntityForm {
     ];
 
     // Give other modules opportunity to add stuff to the form.
-    $this->eventer->dispatch(HiddenTabPageFormEvent::EVENT_NAME,
-      $this->event($form, $form_state, HiddenTabPageFormEvent::PHASE_FORM));
+    $this->eventer->dispatch($this->event($form, $form_state, HiddenTabPageFormEvent::PHASE_FORM),
+      HiddenTabPageFormEvent::EVENT_NAME);
 
     return $form;
   }
@@ -445,8 +445,8 @@ class HiddenTabPageForm extends EntityForm {
       $form_state->setErrorByName('secret_uri', $this->t("Both Uris can't be same"));
     }
     // Give other modules opportunity to validate their added stuff.
-    $this->eventer->dispatch(HiddenTabPageFormEvent::EVENT_NAME,
-      $this->event($form, $form_state, HiddenTabPageFormEvent::PHASE_VALIDATE));
+    $this->eventer->dispatch($this->event($form, $form_state, HiddenTabPageFormEvent::PHASE_VALIDATE),
+      HiddenTabPageFormEvent::EVENT_NAME);
   }
 
   /**
@@ -522,8 +522,8 @@ class HiddenTabPageForm extends EntityForm {
     }
 
     // Give other modules opportunity to save their added stuff.
-    $this->eventer->dispatch(HiddenTabPageFormEvent::EVENT_NAME,
-      $this->event($form, $form_state, HiddenTabPageFormEvent::PHASE_SUBMIT));
+    $this->eventer->dispatch($this->event($form, $form_state, HiddenTabPageFormEvent::PHASE_SUBMIT),
+      HiddenTabPageFormEvent::EVENT_NAME);
 
     if (!$is_cc && !$was_new && ($form_state->getValue('tab_uri') !== $form_state->getValue('old_tab_uri'))) {
       $this->messenger()
diff --git a/src/Plugable/Template/HiddenTabTemplatePluginBase.php b/src/Plugable/Template/HiddenTabTemplatePluginBase.php
index 838c12c..577e2e8 100644
--- a/src/Plugable/Template/HiddenTabTemplatePluginBase.php
+++ b/src/Plugable/Template/HiddenTabTemplatePluginBase.php
@@ -49,8 +49,8 @@ abstract class HiddenTabTemplatePluginBase extends HiddenTabPluginBase implement
    */
   public function __construct(array $configuration, string $plugin_id, $plugin_definition) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
-    $this->imageUri = drupal_get_path('module', 'hidden_tab') . '/asset/image/preview.png';
-    $this->templateFilePath = drupal_get_path('module', 'hidden_tab') . '/templates';
+    $this->imageUri = \Drupal::service('extension.list.module')->getPath('hidden_tab') . '/asset/image/preview.png';
+    $this->templateFilePath = \Drupal::service('extension.list.module')->getPath('hidden_tab') . '/templates';
   }
 
   /**
