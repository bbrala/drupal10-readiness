diff --git a/src/UserRouteEventSubscriber.php b/src/UserRouteEventSubscriber.php
index e52118e..808bcfa 100644
--- a/src/UserRouteEventSubscriber.php
+++ b/src/UserRouteEventSubscriber.php
@@ -60,10 +60,10 @@ class UserRouteEventSubscriber implements EventSubscriberInterface {
   /**
    * {@inheritdoc}
    */
-  public function onException(GetResponseForExceptionEvent $event) {
+  public function onException(\Symfony\Component\HttpKernel\Event\ExceptionEvent $event) {
     $routeMatch = RouteMatch::createFromRequest($event->getRequest());
-    if ($event->getException() instanceof AccessDeniedHttpException && in_array($routeMatch->getRouteName(), $this->getUserRoutes())) {
-      $event->setException(new NotFoundHttpException());
+    if ($event->getThrowable() instanceof AccessDeniedHttpException && in_array($routeMatch->getRouteName(), $this->getUserRoutes())) {
+      $event->setThrowable(new NotFoundHttpException());
     }
   }
 
diff --git a/tests/src/Functional/FloodTest.php b/tests/src/Functional/FloodTest.php
index 8ab7116..74c15b3 100644
--- a/tests/src/Functional/FloodTest.php
+++ b/tests/src/Functional/FloodTest.php
@@ -44,20 +44,23 @@ class FloodTest extends PageCacheTagsTestBase {
     for ($i = 0; $i < 3; $i++) {
       $this->drupalGet('user/password');
       $edit = ['name' => $name];
-      $this->drupalPostForm(NULL, $edit, $this->t('Submit'));
+      $this->submitForm($edit, $this->t('Submit'));
     }
 
     // The next request should trigger flood control.
     $this->drupalGet('user/password');
     $edit = ['name' => $this->randomMachineName()];
-    $this->drupalPostForm(NULL, $edit, $this->t('Submit'));
+    $this->submitForm($edit, $this->t('Submit'));
 
     // Error should not be displayed to the end user.
-    $this->assertNoText($this->t('Too many password recovery requests from your IP address. It is temporarily blocked. Try again later or contact the site administrator.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains($this->t('Too many password recovery requests from your IP address. It is temporarily blocked. Try again later or contact the site administrator.'));
 
     // But mail should be.
     $mail = $this->drupalGetMails();
-    $this->assert(!empty($mail), "password reset mails were sent");
+    $this->assertTrue(!empty($mail), "password reset mails were sent");
   }
 
 }
diff --git a/username_enumeration_prevention.info.yml b/username_enumeration_prevention.info.yml
index 64e1e71..4c9320c 100644
--- a/username_enumeration_prevention.info.yml
+++ b/username_enumeration_prevention.info.yml
@@ -4,7 +4,6 @@ type: module
 description: |-
   Removes the error message produced by the forgot password form, when an
   invalid user has been supplied.
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 dependencies:
   - drupal:user
