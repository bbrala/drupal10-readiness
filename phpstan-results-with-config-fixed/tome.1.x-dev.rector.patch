diff --git a/modules/tome_base/tests/src/Kernel/TestBase.php b/modules/tome_base/tests/src/Kernel/TestBase.php
index f250e07..ac17c63 100644
--- a/modules/tome_base/tests/src/Kernel/TestBase.php
+++ b/modules/tome_base/tests/src/Kernel/TestBase.php
@@ -41,7 +41,7 @@ abstract class TestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->setUpFilesystem();
diff --git a/modules/tome_base/tests/src/Unit/ExecutableFinderTraitTest.php b/modules/tome_base/tests/src/Unit/ExecutableFinderTraitTest.php
index cee9745..4998bf6 100644
--- a/modules/tome_base/tests/src/Unit/ExecutableFinderTraitTest.php
+++ b/modules/tome_base/tests/src/Unit/ExecutableFinderTraitTest.php
@@ -12,6 +12,7 @@ use Symfony\Component\Console\Input\InputInterface;
  */
 class ExecutableFinderTraitTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * @covers \Drupal\tome_base\ExecutableFinderTrait::findExecutable
    *
diff --git a/modules/tome_static/modules/tome_static_cron/tests/src/Functional/TomeStaticCronTest.php b/modules/tome_static/modules/tome_static_cron/tests/src/Functional/TomeStaticCronTest.php
index bd856d5..aa613b9 100644
--- a/modules/tome_static/modules/tome_static_cron/tests/src/Functional/TomeStaticCronTest.php
+++ b/modules/tome_static/modules/tome_static_cron/tests/src/Functional/TomeStaticCronTest.php
@@ -39,7 +39,7 @@ class TomeStaticCronTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->createContentType([
@@ -100,9 +100,9 @@ class TomeStaticCronTest extends BrowserTestBase {
     _tome_static_cron_queue_paths(['/node/' . $node->id()], 'http://google.com');
 
     $filename = $static->getStaticDirectory() . '/node/' . $node->id() . '/index.html';
-    $image_filename = $static->getStaticDirectory() . file_url_transform_relative(file_create_url(ImageStyle::load('large')->buildUri($file->getFileUri())));
-    $this->assertFileNotExists($filename);
-    $this->assertFileNotExists($image_filename);
+    $image_filename = $static->getStaticDirectory() . \Drupal::service('file_url_generator')->generateString(ImageStyle::load('large')->buildUri($file->getFileUri()));
+    $this->assertFileDoesNotExist($filename);
+    $this->assertFileDoesNotExist($image_filename);
     $this->cronRun();
     $this->assertFileExists($filename);
     $this->assertFileExists($image_filename);
diff --git a/modules/tome_static/modules/tome_static_super_cache/src/Commands/TomeSuperCacheRebuildCommand.php b/modules/tome_static/modules/tome_static_super_cache/src/Commands/TomeSuperCacheRebuildCommand.php
index 6f08e1a..df308cb 100644
--- a/modules/tome_static/modules/tome_static_super_cache/src/Commands/TomeSuperCacheRebuildCommand.php
+++ b/modules/tome_static/modules/tome_static_super_cache/src/Commands/TomeSuperCacheRebuildCommand.php
@@ -24,10 +24,11 @@ class TomeSuperCacheRebuildCommand extends CommandBase {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $GLOBALS[SuperStaticCache::FULL_REBUILD_KEY] = TRUE;
     drupal_flush_all_caches();
     $this->io()->success('Full cache rebuild complete.');
+    return 0;
   }
 
 }
diff --git a/modules/tome_static/src/Commands/StaticCommand.php b/modules/tome_static/src/Commands/StaticCommand.php
index bf54406..229a5d4 100644
--- a/modules/tome_static/src/Commands/StaticCommand.php
+++ b/modules/tome_static/src/Commands/StaticCommand.php
@@ -86,7 +86,7 @@ class StaticCommand extends CommandBase {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();
 
     if ($this->state->get(StaticGeneratorInterface::STATE_KEY_BUILDING, FALSE)) {
@@ -131,6 +131,7 @@ class StaticCommand extends CommandBase {
     if ($options['run-server']) {
       $this->runCommand($this->executable . ' tome:preview --port=' . escapeshellarg($options['port']), NULL, NULL);
     }
+    return 0;
   }
 
   /**
diff --git a/modules/tome_static/src/Commands/StaticExportPathCommand.php b/modules/tome_static/src/Commands/StaticExportPathCommand.php
index 874f4e7..8a7082f 100644
--- a/modules/tome_static/src/Commands/StaticExportPathCommand.php
+++ b/modules/tome_static/src/Commands/StaticExportPathCommand.php
@@ -60,7 +60,7 @@ class StaticExportPathCommand extends StaticCommand {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $chunk = $input->getArgument('chunk');
     $paths = explode(',', $chunk);
     $invoke_paths = [];
@@ -80,6 +80,7 @@ class StaticExportPathCommand extends StaticCommand {
     else {
       $this->exportPaths($invoke_paths, $paths, $options['process-count'], $options['path-count'], FALSE, $options['retry-count'], $options['uri']);
     }
+    return 0;
   }
 
 }
diff --git a/modules/tome_static/src/Commands/StaticPreviewCommand.php b/modules/tome_static/src/Commands/StaticPreviewCommand.php
index cc9555e..9b69b2d 100644
--- a/modules/tome_static/src/Commands/StaticPreviewCommand.php
+++ b/modules/tome_static/src/Commands/StaticPreviewCommand.php
@@ -49,7 +49,7 @@ class StaticPreviewCommand extends CommandBase {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     if (!file_exists($this->static->getStaticDirectory())) {
       $this->io()->error('Static directory does not exist. Have you ran the "tome:static" command yet?');
       return 1;
@@ -58,6 +58,7 @@ class StaticPreviewCommand extends CommandBase {
     $url = '127.0.0.1:' . $options['port'];
     $this->startBrowser('http://' . $url . base_path(), 2);
     $this->runCommand('php -S ' . escapeshellarg($url), $this->static->getStaticDirectory(), NULL);
+    return 0;
   }
 
   /**
diff --git a/modules/tome_static/src/Event/CollectPathsEvent.php b/modules/tome_static/src/Event/CollectPathsEvent.php
index 661107d..cf8de44 100644
--- a/modules/tome_static/src/Event/CollectPathsEvent.php
+++ b/modules/tome_static/src/Event/CollectPathsEvent.php
@@ -17,7 +17,7 @@ use Symfony\Component\EventDispatcher\Event;
  * should set the "language_processed" metadata to any value, and the
  * "langcode" metadata to the language for the path.
  */
-class CollectPathsEvent extends Event {
+class CollectPathsEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * An array mapping path names to metadata.
diff --git a/modules/tome_static/src/Event/FileSavedEvent.php b/modules/tome_static/src/Event/FileSavedEvent.php
index 1725553..c21212d 100644
--- a/modules/tome_static/src/Event/FileSavedEvent.php
+++ b/modules/tome_static/src/Event/FileSavedEvent.php
@@ -7,7 +7,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Allows modules to react to a file save.
  */
-class FileSavedEvent extends Event {
+class FileSavedEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The path to the saved file.
diff --git a/modules/tome_static/src/Event/ModifyDestinationEvent.php b/modules/tome_static/src/Event/ModifyDestinationEvent.php
index fe6a88d..4a5710f 100644
--- a/modules/tome_static/src/Event/ModifyDestinationEvent.php
+++ b/modules/tome_static/src/Event/ModifyDestinationEvent.php
@@ -7,7 +7,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Allows modules to modify the HTML of a static page before save.
  */
-class ModifyDestinationEvent extends Event {
+class ModifyDestinationEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The destination path.
diff --git a/modules/tome_static/src/Event/ModifyHtmlEvent.php b/modules/tome_static/src/Event/ModifyHtmlEvent.php
index f9db9b7..ffcca49 100644
--- a/modules/tome_static/src/Event/ModifyHtmlEvent.php
+++ b/modules/tome_static/src/Event/ModifyHtmlEvent.php
@@ -7,7 +7,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Allows modules to modify the HTML of a static page before save.
  */
-class ModifyHtmlEvent extends Event {
+class ModifyHtmlEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The page's HTML.
diff --git a/modules/tome_static/src/Event/PathPlaceholderEvent.php b/modules/tome_static/src/Event/PathPlaceholderEvent.php
index 32768f1..e7848d0 100644
--- a/modules/tome_static/src/Event/PathPlaceholderEvent.php
+++ b/modules/tome_static/src/Event/PathPlaceholderEvent.php
@@ -7,7 +7,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Allows modules that provide placeholder paths to load the real path.
  */
-class PathPlaceholderEvent extends Event {
+class PathPlaceholderEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The path.
diff --git a/modules/tome_static/src/EventSubscriber/StaticPreviewRequestSubscriber.php b/modules/tome_static/src/EventSubscriber/StaticPreviewRequestSubscriber.php
index f3a688f..5144b5c 100644
--- a/modules/tome_static/src/EventSubscriber/StaticPreviewRequestSubscriber.php
+++ b/modules/tome_static/src/EventSubscriber/StaticPreviewRequestSubscriber.php
@@ -69,10 +69,10 @@ class StaticPreviewRequestSubscriber implements EventSubscriberInterface {
   /**
    * Sets a response in case of a Dynamic Page Cache hit.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event to process.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     $request = $event->getRequest();
     if (!$this->session->get(static::SESSION_KEY) || $this->routeMatch->getRouteName() === 'tome_static.preview_exit') {
       return;
diff --git a/modules/tome_static/src/StaticGenerator.php b/modules/tome_static/src/StaticGenerator.php
index d393160..8475418 100644
--- a/modules/tome_static/src/StaticGenerator.php
+++ b/modules/tome_static/src/StaticGenerator.php
@@ -115,7 +115,7 @@ class StaticGenerator implements StaticGeneratorInterface {
   public function getPaths() {
     $this->accountSwitcher->switchTo(new AnonymousUserSession());
     $event = new CollectPathsEvent([]);
-    $this->eventDispatcher->dispatch(TomeStaticEvents::COLLECT_PATHS, $event);
+    $this->eventDispatcher->dispatch($event, TomeStaticEvents::COLLECT_PATHS);
     $paths = $event->getPaths();
 
     $paths = $this->cache->filterUncachedPaths($this->currentRequest->getSchemeAndHttpHost(), $paths);
@@ -142,7 +142,7 @@ class StaticGenerator implements StaticGeneratorInterface {
     $original_path = $path;
 
     $event = new PathPlaceholderEvent($path);
-    $this->eventDispatcher->dispatch(TomeStaticEvents::PATH_PLACEHOLDER, $event);
+    $this->eventDispatcher->dispatch($event, TomeStaticEvents::PATH_PLACEHOLDER);
 
     if ($event->isInvalid()) {
       $this->accountSwitcher->switchBack();
@@ -179,14 +179,14 @@ class StaticGenerator implements StaticGeneratorInterface {
         $content = $response->getContent();
         if (strpos($response->headers->get('Content-Type'), 'text/html') === 0) {
           $event = new ModifyHtmlEvent($content, $path);
-          $this->eventDispatcher->dispatch(TomeStaticEvents::MODIFY_HTML, $event);
+          $this->eventDispatcher->dispatch($event, TomeStaticEvents::MODIFY_HTML);
           $content = $event->getHtml();
           $invoke_paths = array_merge($invoke_paths, $this->getHtmlAssets($content, $path), $event->getInvokePaths());
           $invoke_paths = array_diff($invoke_paths, $event->getExcludePaths());
         }
         file_put_contents($destination, $content);
       }
-      $this->eventDispatcher->dispatch(TomeStaticEvents::FILE_SAVED, new FileSavedEvent($destination));
+      $this->eventDispatcher->dispatch(new FileSavedEvent($destination), TomeStaticEvents::FILE_SAVED);
 
       if ($response instanceof RedirectResponse) {
         $target_url = $this->makeExternalUrlLocal($response->getTargetUrl());
@@ -484,7 +484,7 @@ class StaticGenerator implements StaticGeneratorInterface {
    */
   protected function getDestination($path) {
     $event = new ModifyDestinationEvent($path);
-    $this->eventDispatcher->dispatch(TomeStaticEvents::MODIFY_DESTINATION, $event);
+    $this->eventDispatcher->dispatch($event, TomeStaticEvents::MODIFY_DESTINATION);
     $path = $event->getDestination();
     $path = urldecode($path);
     $path = $this->sanitizePath($path);
diff --git a/modules/tome_static/tests/modules/tome_test/src/Controller/TestController.php b/modules/tome_static/tests/modules/tome_test/src/Controller/TestController.php
index be536ac..424c0ec 100644
--- a/modules/tome_static/tests/modules/tome_test/src/Controller/TestController.php
+++ b/modules/tome_static/tests/modules/tome_test/src/Controller/TestController.php
@@ -26,7 +26,7 @@ class TestController extends ControllerBase {
    * Outputs a more complex test page.
    */
   public function testComplexPage(Request $request) {
-    $module_path = drupal_get_path('module', 'tome_test');
+    $module_path = \Drupal::service('extension.list.module')->getPath('tome_test');
     return [
       '#children' => "<p>Hello, complex world</p>
 <img src=\"/$module_path/assets/druplicon-1.png\">
diff --git a/modules/tome_static/tests/src/Functional/TomeStaticGeneratorFormTest.php b/modules/tome_static/tests/src/Functional/TomeStaticGeneratorFormTest.php
index 3740cf4..4ba6d70 100644
--- a/modules/tome_static/tests/src/Functional/TomeStaticGeneratorFormTest.php
+++ b/modules/tome_static/tests/src/Functional/TomeStaticGeneratorFormTest.php
@@ -39,7 +39,7 @@ class TomeStaticGeneratorFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->createContentType([
@@ -99,9 +99,9 @@ class TomeStaticGeneratorFormTest extends BrowserTestBase {
     ]);
 
     $filename = $static->getStaticDirectory() . base_path() . 'node/' . $node->id() . '/index.html';
-    $image_filename = $static->getStaticDirectory() . file_url_transform_relative(file_create_url(ImageStyle::load('large')->buildUri($file->getFileUri())));
-    $this->assertFileNotExists($filename);
-    $this->assertFileNotExists($image_filename);
+    $image_filename = $static->getStaticDirectory() . \Drupal::service('file_url_generator')->generateString(ImageStyle::load('large')->buildUri($file->getFileUri()));
+    $this->assertFileDoesNotExist($filename);
+    $this->assertFileDoesNotExist($image_filename);
 
     $this->drupalGet('/admin/config/tome/static/generate');
     $this->submitForm([], 'Submit');
diff --git a/modules/tome_static/tests/src/Kernel/CollectPathsEventTest.php b/modules/tome_static/tests/src/Kernel/CollectPathsEventTest.php
index cc91a69..46b5ec9 100644
--- a/modules/tome_static/tests/src/Kernel/CollectPathsEventTest.php
+++ b/modules/tome_static/tests/src/Kernel/CollectPathsEventTest.php
@@ -84,7 +84,7 @@ class CollectPathsEventTest extends TomeStaticEventTestBase {
    */
   protected function collectPaths(array $paths = []) {
     $event = new CollectPathsEvent($paths);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event->getPaths();
   }
 
diff --git a/modules/tome_static/tests/src/Kernel/FileSavedEventTest.php b/modules/tome_static/tests/src/Kernel/FileSavedEventTest.php
index 6e8e30e..f71ced4 100644
--- a/modules/tome_static/tests/src/Kernel/FileSavedEventTest.php
+++ b/modules/tome_static/tests/src/Kernel/FileSavedEventTest.php
@@ -39,7 +39,7 @@ class FileSavedEventTest extends TomeStaticEventTestBase {
    */
   protected function fileSaved($path = '/my-file-path') {
     $event = new FileSavedEvent($path);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event;
   }
 
diff --git a/modules/tome_static/tests/src/Kernel/ModifyDestinationEventTest.php b/modules/tome_static/tests/src/Kernel/ModifyDestinationEventTest.php
index 1b085d3..b931973 100644
--- a/modules/tome_static/tests/src/Kernel/ModifyDestinationEventTest.php
+++ b/modules/tome_static/tests/src/Kernel/ModifyDestinationEventTest.php
@@ -40,7 +40,7 @@ class ModifyDestinationEventTest extends TomeStaticEventTestBase {
    */
   protected function modifyDestination($destination = '/my-destination') {
     $event = new ModifyDestinationEvent($destination);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event->getDestination();
   }
 
diff --git a/modules/tome_static/tests/src/Kernel/ModifyHtmlEventTest.php b/modules/tome_static/tests/src/Kernel/ModifyHtmlEventTest.php
index 58b7d73..ba2bfc8 100644
--- a/modules/tome_static/tests/src/Kernel/ModifyHtmlEventTest.php
+++ b/modules/tome_static/tests/src/Kernel/ModifyHtmlEventTest.php
@@ -74,7 +74,7 @@ class ModifyHtmlEventTest extends TomeStaticEventTestBase {
    */
   protected function modifyHtml($html = 'HTML', $path = '/my-path') {
     $event = new ModifyHtmlEvent($html, $path);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event;
   }
 
diff --git a/modules/tome_static/tests/src/Kernel/PathPlaceholderEventTest.php b/modules/tome_static/tests/src/Kernel/PathPlaceholderEventTest.php
index a4cf8f0..c6da351 100644
--- a/modules/tome_static/tests/src/Kernel/PathPlaceholderEventTest.php
+++ b/modules/tome_static/tests/src/Kernel/PathPlaceholderEventTest.php
@@ -51,7 +51,7 @@ class PathPlaceholderEventTest extends TomeStaticEventTestBase {
    */
   protected function pathPlaceholder($path = '/my-path/{placeholder}') {
     $event = new PathPlaceholderEvent($path);
-    $this->eventDispatcher->dispatch($this->eventName, $event);
+    $this->eventDispatcher->dispatch($event, $this->eventName);
     return $event;
   }
 
diff --git a/modules/tome_static/tests/src/Kernel/StaticCacheTest.php b/modules/tome_static/tests/src/Kernel/StaticCacheTest.php
index d102001..9f66300 100644
--- a/modules/tome_static/tests/src/Kernel/StaticCacheTest.php
+++ b/modules/tome_static/tests/src/Kernel/StaticCacheTest.php
@@ -27,7 +27,7 @@ class StaticCacheTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     User::create([
@@ -89,7 +89,7 @@ class StaticCacheTest extends TestBase {
     $this->assertFileExists("$base_dir/node/1/index.html");
     $article->delete();
     $static->cleanupStaticDirectory();
-    $this->assertFileNotExists("$base_dir/node/1/index.html");
+    $this->assertFileDoesNotExist("$base_dir/node/1/index.html");
   }
 
 }
diff --git a/modules/tome_static/tests/src/Kernel/StaticGeneratorTest.php b/modules/tome_static/tests/src/Kernel/StaticGeneratorTest.php
index 4576564..e0679c5 100644
--- a/modules/tome_static/tests/src/Kernel/StaticGeneratorTest.php
+++ b/modules/tome_static/tests/src/Kernel/StaticGeneratorTest.php
@@ -30,7 +30,7 @@ class StaticGeneratorTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     User::create([
@@ -96,7 +96,7 @@ class StaticGeneratorTest extends TestBase {
     \Drupal::entityTypeManager()->getAccessControlHandler('node')->resetCache();
     $static->requestPath('/');
     $static->requestPath('_entity:node:en:1');
-    $this->assertFileNotExists("$base_dir/node/1/index.html");
+    $this->assertFileDoesNotExist("$base_dir/node/1/index.html");
     $static->requestPath('_entity:node:fr:1');
     $this->assertFileExists("$base_dir/french/node/1/index.html");
   }
@@ -211,7 +211,7 @@ class StaticGeneratorTest extends TestBase {
     $static = \Drupal::service('tome_static.generator');
 
     $invoke_paths = $static->requestPath('/tome-test/complex-page');
-    $module_path = drupal_get_path('module', 'tome_test');
+    $module_path = \Drupal::service('extension.list.module')->getPath('tome_test');
     $base_dir = Settings::get('tome_static_directory');
 
     $this->assertContains("/$module_path/assets/srcset-test1.png", $invoke_paths);
diff --git a/modules/tome_static/tests/src/Kernel/StaticRedirectTest.php b/modules/tome_static/tests/src/Kernel/StaticRedirectTest.php
index 4251884..e59c248 100644
--- a/modules/tome_static/tests/src/Kernel/StaticRedirectTest.php
+++ b/modules/tome_static/tests/src/Kernel/StaticRedirectTest.php
@@ -28,7 +28,7 @@ class StaticRedirectTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('redirect');
     // @see \Drupal\redirect\RedirectChecker::canRedirect
diff --git a/modules/tome_static/tests/src/Kernel/TomeStaticEventTestBase.php b/modules/tome_static/tests/src/Kernel/TomeStaticEventTestBase.php
index dbdf1c1..38d3e30 100644
--- a/modules/tome_static/tests/src/Kernel/TomeStaticEventTestBase.php
+++ b/modules/tome_static/tests/src/Kernel/TomeStaticEventTestBase.php
@@ -31,7 +31,7 @@ abstract class TomeStaticEventTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->eventDispatcher = \Drupal::service('event_dispatcher');
diff --git a/modules/tome_sync/src/Commands/CleanFilesCommand.php b/modules/tome_sync/src/Commands/CleanFilesCommand.php
index 019b66d..664b13a 100644
--- a/modules/tome_sync/src/Commands/CleanFilesCommand.php
+++ b/modules/tome_sync/src/Commands/CleanFilesCommand.php
@@ -84,7 +84,7 @@ class CleanFilesCommand extends CommandBase {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();
 
     $this->io()->writeLn('Searching for unused files...');
@@ -103,6 +103,7 @@ class CleanFilesCommand extends CommandBase {
       $this->fileSync->deleteFile($filename);
     }
     $this->io()->success('Deleted all unused files.');
+    return 0;
   }
 
 }
diff --git a/modules/tome_sync/src/Commands/DeleteContentCommand.php b/modules/tome_sync/src/Commands/DeleteContentCommand.php
index f9db5d8..e9a917b 100644
--- a/modules/tome_sync/src/Commands/DeleteContentCommand.php
+++ b/modules/tome_sync/src/Commands/DeleteContentCommand.php
@@ -54,7 +54,7 @@ class DeleteContentCommand extends ImportCommand {
   /**
    * {@inheritdoc}
    */
-  public function execute(InputInterface $input, OutputInterface $output) {
+  public function execute(InputInterface $input, OutputInterface $output): int {
     $this->configInstaller->setSyncing(TRUE);
     $this->importer->isImporting(TRUE);
 
@@ -100,6 +100,7 @@ class DeleteContentCommand extends ImportCommand {
 
     $this->importer->isImporting(FALSE);
     $this->configInstaller->setSyncing(FALSE);
+    return 0;
   }
 
 }
diff --git a/modules/tome_sync/src/Commands/ExportCommand.php b/modules/tome_sync/src/Commands/ExportCommand.php
index d003fa5..11e00c2 100644
--- a/modules/tome_sync/src/Commands/ExportCommand.php
+++ b/modules/tome_sync/src/Commands/ExportCommand.php
@@ -87,7 +87,7 @@ class ExportCommand extends CommandBase {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();
     if (!$options['yes'] && !$this->io()->confirm('The files in your export directory will be deleted and replaced.', FALSE)) {
       return 0;
@@ -118,9 +118,10 @@ class ExportCommand extends CommandBase {
       return 1;
     }
 
-    $this->eventDispatcher->dispatch(TomeSyncEvents::EXPORT_ALL, new Event());
+    $this->eventDispatcher->dispatch(new \Symfony\Contracts\EventDispatcher\Event(), TomeSyncEvents::EXPORT_ALL);
 
     $this->io()->success('Exported config, content, and files.');
+    return 0;
   }
 
 }
diff --git a/modules/tome_sync/src/Commands/ExportContentCommand.php b/modules/tome_sync/src/Commands/ExportContentCommand.php
index 7d13815..a87ac2c 100644
--- a/modules/tome_sync/src/Commands/ExportContentCommand.php
+++ b/modules/tome_sync/src/Commands/ExportContentCommand.php
@@ -26,7 +26,7 @@ class ExportContentCommand extends ExportCommand {
   /**
    * {@inheritdoc}
    */
-  public function execute(InputInterface $input, OutputInterface $output) {
+  public function execute(InputInterface $input, OutputInterface $output): int {
     $chunk = $input->getArgument('chunk');
     $id_pairs = explode(',', $chunk);
     $storages = [];
@@ -53,6 +53,7 @@ class ExportContentCommand extends ExportCommand {
         $this->exporter->exportContent($entity->getTranslation($language->getId()));
       }
     }
+    return 0;
   }
 
 }
diff --git a/modules/tome_sync/src/Commands/ImportCommand.php b/modules/tome_sync/src/Commands/ImportCommand.php
index bfb97a4..87034be 100644
--- a/modules/tome_sync/src/Commands/ImportCommand.php
+++ b/modules/tome_sync/src/Commands/ImportCommand.php
@@ -86,7 +86,7 @@ class ImportCommand extends CommandBase {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $options = $input->getOptions();
 
     if (!$options['yes'] && !$this->io()->confirm('Your local site\'s config, content, and files will be deleted and replaced.', FALSE)) {
@@ -133,6 +133,7 @@ class ImportCommand extends CommandBase {
     $this->state->set(ImporterInterface::STATE_KEY_IMPORTING, FALSE);
 
     $this->io()->success('Imported config, content, and files.');
+    return 0;
   }
 
   /**
diff --git a/modules/tome_sync/src/Commands/ImportCompleteCommand.php b/modules/tome_sync/src/Commands/ImportCompleteCommand.php
index 2a8547d..e5378cc 100644
--- a/modules/tome_sync/src/Commands/ImportCompleteCommand.php
+++ b/modules/tome_sync/src/Commands/ImportCompleteCommand.php
@@ -46,8 +46,9 @@ class ImportCompleteCommand extends CommandBase {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
-    $this->eventDispatcher->dispatch(TomeSyncEvents::IMPORT_ALL, new Event());
+  protected function execute(InputInterface $input, OutputInterface $output): int {
+    $this->eventDispatcher->dispatch(new \Symfony\Contracts\EventDispatcher\Event(), TomeSyncEvents::IMPORT_ALL);
+    return 0;
   }
 
 }
diff --git a/modules/tome_sync/src/Commands/ImportContentCommand.php b/modules/tome_sync/src/Commands/ImportContentCommand.php
index 7dfef5c..ab676aa 100644
--- a/modules/tome_sync/src/Commands/ImportContentCommand.php
+++ b/modules/tome_sync/src/Commands/ImportContentCommand.php
@@ -26,13 +26,14 @@ class ImportContentCommand extends ImportCommand {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     $names = $input->getArgument('names');
     $names = explode(',', $names);
     foreach ($names as $name) {
       list($entity_type_id, $uuid, $langcode) = TomeSyncHelper::getPartsFromContentName($name);
       $this->importer->importContent($entity_type_id, $uuid, $langcode);
     }
+    return 0;
   }
 
 }
diff --git a/modules/tome_sync/src/Commands/ImportPartialCommand.php b/modules/tome_sync/src/Commands/ImportPartialCommand.php
index 4e1832d..880ff3e 100644
--- a/modules/tome_sync/src/Commands/ImportPartialCommand.php
+++ b/modules/tome_sync/src/Commands/ImportPartialCommand.php
@@ -56,7 +56,7 @@ class ImportPartialCommand extends ImportCommand {
   /**
    * {@inheritdoc}
    */
-  protected function execute(InputInterface $input, OutputInterface $output) {
+  protected function execute(InputInterface $input, OutputInterface $output): int {
     if (!$this->contentHasher->hashesExist()) {
       $this->io()->error('No content hashes exist to perform a partial import. Please run a full Tome install and export (i.e. "drush tome:install && drush tome:export"), which will ensure hashes exist in the database and filesystem.');
       return 1;
@@ -141,6 +141,7 @@ class ImportPartialCommand extends ImportCommand {
     $this->state->set(ImporterInterface::STATE_KEY_IMPORTING, FALSE);
 
     $this->io()->success('Imported config, content, and files.');
+    return 0;
   }
 
 }
diff --git a/modules/tome_sync/src/Event/ContentCrudEvent.php b/modules/tome_sync/src/Event/ContentCrudEvent.php
index 73f50ed..eafbf1f 100644
--- a/modules/tome_sync/src/Event/ContentCrudEvent.php
+++ b/modules/tome_sync/src/Event/ContentCrudEvent.php
@@ -8,7 +8,7 @@ use Symfony\Component\EventDispatcher\Event;
 /**
  * Wraps a content event for listeners.
  */
-class ContentCrudEvent extends Event {
+class ContentCrudEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Content object.
diff --git a/modules/tome_sync/src/Exporter.php b/modules/tome_sync/src/Exporter.php
index 8ccb8da..bb45e79 100644
--- a/modules/tome_sync/src/Exporter.php
+++ b/modules/tome_sync/src/Exporter.php
@@ -155,7 +155,7 @@ class Exporter implements ExporterInterface {
       $this->fileSync->exportFile($entity);
     }
     $event = new ContentCrudEvent($entity);
-    $this->eventDispatcher->dispatch(TomeSyncEvents::EXPORT_CONTENT, $event);
+    $this->eventDispatcher->dispatch($event, TomeSyncEvents::EXPORT_CONTENT);
     $this->switchBack();
   }
 
@@ -173,7 +173,7 @@ class Exporter implements ExporterInterface {
       $this->fileSync->deleteFileExport($entity);
     }
     $event = new ContentCrudEvent($entity);
-    $this->eventDispatcher->dispatch(TomeSyncEvents::DELETE_CONTENT, $event);
+    $this->eventDispatcher->dispatch($event, TomeSyncEvents::DELETE_CONTENT);
   }
 
 }
diff --git a/modules/tome_sync/src/Importer.php b/modules/tome_sync/src/Importer.php
index 49a1b6a..56a7dec 100644
--- a/modules/tome_sync/src/Importer.php
+++ b/modules/tome_sync/src/Importer.php
@@ -228,7 +228,7 @@ class Importer implements ImporterInterface {
     $this->isImporting(FALSE);
     if (isset($imported_entity)) {
       $event = new ContentCrudEvent($imported_entity);
-      $this->eventDispatcher->dispatch(TomeSyncEvents::IMPORT_CONTENT, $event);
+      $this->eventDispatcher->dispatch($event, TomeSyncEvents::IMPORT_CONTENT);
     }
     $this->switchBack();
   }
diff --git a/modules/tome_sync/tests/src/Functional/BookTest.php b/modules/tome_sync/tests/src/Functional/BookTest.php
index d051a7e..9d07d1d 100644
--- a/modules/tome_sync/tests/src/Functional/BookTest.php
+++ b/modules/tome_sync/tests/src/Functional/BookTest.php
@@ -39,7 +39,7 @@ class BookTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('system_breadcrumb_block');
     $this->drupalPlaceBlock('page_title_block');
diff --git a/modules/tome_sync/tests/src/Functional/ImportPartialFormTest.php b/modules/tome_sync/tests/src/Functional/ImportPartialFormTest.php
index b9f2c71..dc8c52a 100644
--- a/modules/tome_sync/tests/src/Functional/ImportPartialFormTest.php
+++ b/modules/tome_sync/tests/src/Functional/ImportPartialFormTest.php
@@ -40,7 +40,7 @@ class ImportPartialFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Note: The format for ::writeSettings is really weird.
diff --git a/modules/tome_sync/tests/src/Kernel/ContentHasherTest.php b/modules/tome_sync/tests/src/Kernel/ContentHasherTest.php
index a0d818f..02545e8 100644
--- a/modules/tome_sync/tests/src/Kernel/ContentHasherTest.php
+++ b/modules/tome_sync/tests/src/Kernel/ContentHasherTest.php
@@ -24,7 +24,7 @@ class ContentHasherTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
   }
diff --git a/modules/tome_sync/tests/src/Kernel/ExporterTest.php b/modules/tome_sync/tests/src/Kernel/ExporterTest.php
index 887093d..7130c40 100644
--- a/modules/tome_sync/tests/src/Kernel/ExporterTest.php
+++ b/modules/tome_sync/tests/src/Kernel/ExporterTest.php
@@ -24,7 +24,7 @@ class ExporterTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     if (\Drupal::entityTypeManager()->hasDefinition('path_alias')) {
diff --git a/modules/tome_sync/tests/src/Kernel/FieldDeletionTest.php b/modules/tome_sync/tests/src/Kernel/FieldDeletionTest.php
index a30447b..3e8b482 100644
--- a/modules/tome_sync/tests/src/Kernel/FieldDeletionTest.php
+++ b/modules/tome_sync/tests/src/Kernel/FieldDeletionTest.php
@@ -25,7 +25,7 @@ class FieldDeletionTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
   }
diff --git a/modules/tome_sync/tests/src/Kernel/FileSyncTest.php b/modules/tome_sync/tests/src/Kernel/FileSyncTest.php
index ed66363..ef8eea6 100644
--- a/modules/tome_sync/tests/src/Kernel/FileSyncTest.php
+++ b/modules/tome_sync/tests/src/Kernel/FileSyncTest.php
@@ -31,7 +31,7 @@ class FileSyncTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->fileSystem = \Drupal::service('file_system');
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
diff --git a/modules/tome_sync/tests/src/Kernel/ImporterTest.php b/modules/tome_sync/tests/src/Kernel/ImporterTest.php
index d747705..9f38f06 100644
--- a/modules/tome_sync/tests/src/Kernel/ImporterTest.php
+++ b/modules/tome_sync/tests/src/Kernel/ImporterTest.php
@@ -25,7 +25,7 @@ class ImporterTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
   }
@@ -107,7 +107,7 @@ class ImporterTest extends TestBase {
     $yml_file = Settings::get('tome_content_directory', '../content') . '/node.' . $uuid . '.yml';
     $json_file = Settings::get('tome_content_directory', '../content') . '/node.' . $uuid . '.json';
     $this->assertFileExists($yml_file);
-    $this->assertFileNotExists($json_file);
+    $this->assertFileDoesNotExist($json_file);
 
     $this->assertFalse((bool) $repository->loadEntityByUuid('node', $uuid));
     $importer->importContent('node', $uuid);
diff --git a/modules/tome_sync/tests/src/Kernel/LinkItemTest.php b/modules/tome_sync/tests/src/Kernel/LinkItemTest.php
index d9f8661..8dc5fac 100644
--- a/modules/tome_sync/tests/src/Kernel/LinkItemTest.php
+++ b/modules/tome_sync/tests/src/Kernel/LinkItemTest.php
@@ -29,7 +29,7 @@ class LinkItemTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     $this->installEntitySchema('path_alias');
diff --git a/modules/tome_sync/tests/src/Kernel/PathAliasTest.php b/modules/tome_sync/tests/src/Kernel/PathAliasTest.php
index dde0524..8df2ca4 100644
--- a/modules/tome_sync/tests/src/Kernel/PathAliasTest.php
+++ b/modules/tome_sync/tests/src/Kernel/PathAliasTest.php
@@ -26,7 +26,7 @@ class PathAliasTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     $this->installEntitySchema('path_alias');
diff --git a/modules/tome_sync/tests/src/Kernel/PathautoTest.php b/modules/tome_sync/tests/src/Kernel/PathautoTest.php
index 5bbf03e..bfd2e01 100644
--- a/modules/tome_sync/tests/src/Kernel/PathautoTest.php
+++ b/modules/tome_sync/tests/src/Kernel/PathautoTest.php
@@ -30,7 +30,7 @@ class PathautoTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installSchema('tome_sync', ['tome_sync_content_hash']);
     $this->installEntitySchema('path_alias');
diff --git a/modules/tome_sync/tests/src/Unit/Normalizer/ContentEntityNormalizerTest.php b/modules/tome_sync/tests/src/Unit/Normalizer/ContentEntityNormalizerTest.php
index 74e8031..e0c8e48 100644
--- a/modules/tome_sync/tests/src/Unit/Normalizer/ContentEntityNormalizerTest.php
+++ b/modules/tome_sync/tests/src/Unit/Normalizer/ContentEntityNormalizerTest.php
@@ -21,6 +21,7 @@ use Symfony\Component\Serializer\Serializer;
  */
 class ContentEntityNormalizerTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Tests the normalize() method.
    *
diff --git a/modules/tome_sync/tests/src/Unit/Normalizer/EntityReferenceItemNormalizerTest.php b/modules/tome_sync/tests/src/Unit/Normalizer/EntityReferenceItemNormalizerTest.php
index 5ba73fe..355737c 100644
--- a/modules/tome_sync/tests/src/Unit/Normalizer/EntityReferenceItemNormalizerTest.php
+++ b/modules/tome_sync/tests/src/Unit/Normalizer/EntityReferenceItemNormalizerTest.php
@@ -19,6 +19,7 @@ use Symfony\Component\Serializer\Serializer;
  */
 class EntityReferenceItemNormalizerTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   use InternalTypedDataTestTrait;
 
   /**
diff --git a/modules/tome_sync/tests/src/Unit/Normalizer/FieldItemNormalizerTest.php b/modules/tome_sync/tests/src/Unit/Normalizer/FieldItemNormalizerTest.php
index a9a1664..785fc46 100644
--- a/modules/tome_sync/tests/src/Unit/Normalizer/FieldItemNormalizerTest.php
+++ b/modules/tome_sync/tests/src/Unit/Normalizer/FieldItemNormalizerTest.php
@@ -17,6 +17,7 @@ use Symfony\Component\Serializer\Serializer;
  */
 class FieldItemNormalizerTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Tests the normalize() method.
    *
diff --git a/modules/tome_sync/tests/src/Unit/Normalizer/UserEntityNormalizerTest.php b/modules/tome_sync/tests/src/Unit/Normalizer/UserEntityNormalizerTest.php
index fb0308d..22298e8 100644
--- a/modules/tome_sync/tests/src/Unit/Normalizer/UserEntityNormalizerTest.php
+++ b/modules/tome_sync/tests/src/Unit/Normalizer/UserEntityNormalizerTest.php
@@ -21,6 +21,7 @@ use Symfony\Component\Serializer\Serializer;
  */
 class UserEntityNormalizerTest extends UnitTestCase {
 
+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Tests the normalize() method.
    *
