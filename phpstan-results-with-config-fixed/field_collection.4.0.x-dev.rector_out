modules/contrib/field_collection/field_collection.api.php
modules/contrib/field_collection/field_collection.install
modules/contrib/field_collection/field_collection.module
modules/contrib/field_collection/field_collection.views.inc
modules/contrib/field_collection/src/Access/FieldCollectionItemHostAddOperationCheck.php
modules/contrib/field_collection/src/Access/FieldCollectionItemHostOperationCheck.php
modules/contrib/field_collection/src/Access/FieldCollectionItemHostRevisionsOperationCheck.php
modules/contrib/field_collection/src/Controller/FieldCollectionItemController.php
modules/contrib/field_collection/src/Entity/FieldCollection.php
modules/contrib/field_collection/src/Entity/FieldCollectionItem.php
modules/contrib/field_collection/src/FieldCollectionAccessControlHandler.php
modules/contrib/field_collection/src/FieldCollectionForm.php
modules/contrib/field_collection/src/FieldCollectionInterface.php
modules/contrib/field_collection/src/FieldCollectionItemAccessControlHandler.php
modules/contrib/field_collection/src/FieldCollectionItemForm.php
modules/contrib/field_collection/src/FieldCollectionItemInterface.php
modules/contrib/field_collection/src/FieldCollectionItemList.php
modules/contrib/field_collection/src/FieldCollectionListBuilder.php
modules/contrib/field_collection/src/Form/FieldCollectionItemDeleteForm.php
modules/contrib/field_collection/src/Normalizer/FieldCollectionItemNormalizer.php
modules/contrib/field_collection/src/Plugin/Field/FieldFormatter/FieldCollectionEditableFormatter.php
modules/contrib/field_collection/src/Plugin/Field/FieldFormatter/FieldCollectionItemsFormatter.php
modules/contrib/field_collection/src/Plugin/Field/FieldFormatter/FieldCollectionLinksFormatter.php
modules/contrib/field_collection/src/Plugin/Field/FieldFormatter/FieldCollectionListFormatter.php
modules/contrib/field_collection/src/Plugin/Field/FieldType/FieldCollection.php
modules/contrib/field_collection/src/Plugin/Field/FieldWidget/FieldCollectionEmbedWidget.php
modules/contrib/field_collection/src/Plugin/migrate/destination/EntityFieldCollection.php
modules/contrib/field_collection/src/Plugin/views/relationship/FieldCollectionHandlerRelationship.php
modules/contrib/field_collection/src/Tests/FieldCollectionRESTTest.php
modules/contrib/field_collection/src/Tests/Update/Update8001Test.php
modules/contrib/field_collection/tests/src/Functional/FieldCollectionBasicTestCase.php
modules/contrib/field_collection/tests/src/Functional/FieldCollectionTestTrait.php
modules/contrib/field_collection/tests/src/FunctionalJavascript/FieldCollectionAjaxTest.php
modules/contrib/field_collection/tests/src/Kernel/DuplicateFieldCollectionTest.php

2 files with changes
====================

1) modules/contrib/field_collection/tests/src/Kernel/DuplicateFieldCollectionTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['field_collection']);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/field_collection/tests/src/Functional/FieldCollectionBasicTestCase.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Sets up the data structures for the tests.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->setUpFieldCollectionTest();
   }
@@ @@
     /** @var \Drupal\field_collection\FieldCollectionItemInterface $field_collection_item */
     list ($node, $field_collection_item) = $this->createNodeWithFieldCollection('article');

-    $this->assertEqual($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'A field_collection_item has been successfully created and referenced.');
+    $this->assertEquals($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'A field_collection_item has been successfully created and referenced.');

-    $this->assertEqual($field_collection_item->revision_id->value, $node->{$this->field_collection_name}->revision_id, 'The new field_collection_item has the correct revision.');
+    $this->assertEquals($field_collection_item->revision_id->value, $node->{$this->field_collection_name}->revision_id, 'The new field_collection_item has the correct revision.');

     // Test adding an additional field_collection_item.
     $field_collection_item_2 = FieldCollectionItem::create(['field_name' => $this->field_collection_name]);
@@ @@

     $this->assertTrue(!empty($field_collection_item_2->getRevisionId()), 'Second field_collection_item has a revision.');

-    $this->assertEqual(count(FieldCollectionItem::loadMultiple()), 2, 'Field_collection_items have been stored.');
+    $this->assertEquals(count(FieldCollectionItem::loadMultiple()), 2, 'Field_collection_items have been stored.');

-    $this->assertEqual($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'Existing reference has been kept during update.');
+    $this->assertEquals($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'Existing reference has been kept during update.');

-    $this->assertEqual($field_collection_item->getRevisionId(), $node->{$this->field_collection_name}[0]->revision_id, 'Revision: Existing reference has been kept during update.');
+    $this->assertEquals($field_collection_item->getRevisionId(), $node->{$this->field_collection_name}[0]->revision_id, 'Revision: Existing reference has been kept during update.');

-    $this->assertEqual($field_collection_item_2->id(), $node->{$this->field_collection_name}[1]->target_id, 'New field_collection_item has been properly referenced.');
+    $this->assertEquals($field_collection_item_2->id(), $node->{$this->field_collection_name}[1]->target_id, 'New field_collection_item has been properly referenced.');

-    $this->assertEqual($field_collection_item_2->getRevisionId(), $node->{$this->field_collection_name}[1]->revision_id, 'Revision: New field_collection_item has been properly referenced.');
+    $this->assertEquals($field_collection_item_2->getRevisionId(), $node->{$this->field_collection_name}[1]->revision_id, 'Revision: New field_collection_item has been properly referenced.');

     // Make sure deleting the field collection item removes the reference.
     $field_collection_item_2->delete();
@@ @@
     // Make sure field_collections are removed during deletion of the host.
     $node->delete();

-    $this->assertIdentical(FieldCollectionItem::loadMultiple(), [], 'field_collection_item deleted when the host is deleted.');
+    $this->assertSame(FieldCollectionItem::loadMultiple(), [], 'field_collection_item deleted when the host is deleted.');

     // Try deleting nodes with collections without any values.
     $node = $this->drupalCreateNode(['type' => 'article']);
@@ @@
     $path = "field_collection_item/add/field_test_collection/node/{$node->id()}";

     $this->drupalGet($path);
-    $this->assertText(t('Access denied'), 'Access has been denied.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Access denied'));

     // Login with new user that has basic edit rights.
     $user_privileged = $this->drupalCreateUser([
@@ @@
     // Test field collection item add form.
     $this->drupalGet('admin/structure/types/manage/article/display');
     $this->drupalGet("node/{$node->id()}");
-    $this->assertLinkByHref($path, 0, 'Add link is shown.');
+    $this->assertSession()->linkByHrefExists($path, 0, 'Add link is shown.');
     $this->drupalGet($path);

-    $this->assertText(t($this->inner_field_definition['label']), 'Add form is shown.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t($this->inner_field_definition['label']));

     $edit = ["$this->inner_field_name[0][value]" => rand()];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

-    $this->assertText(t('Successfully added a @field.', ['@field' => $this->field_collection_name]), 'Field collection saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Successfully added a @field.', ['@field' => $this->field_collection_name]));

-    $this->assertText($edit["$this->inner_field_name[0][value]"], 'Added field value is shown.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit["$this->inner_field_name[0][value]"]);

     $field_collection_item = FieldCollectionItem::load(1);

     // Test field collection item edit form.
     $edit["$this->inner_field_name[0][value]"] = rand();
-    $this->drupalPostForm('field_collection_item/1/edit', $edit, t('Save'));
+    $this->drupalGet('field_collection_item/1/edit');
+    $this->submitForm($edit, t('Save'));

-    $this->assertText(t('Successfully edited @field.', ['@field' => $field_collection_item->label()]), 'Field collection saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Successfully edited @field.', ['@field' => $field_collection_item->label()]));

-    $this->assertText($edit["$this->inner_field_name[0][value]"], 'Field collection has been edited.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit["$this->inner_field_name[0][value]"]);

     $this->drupalGet('field_collection_item/1');

-    $this->assertText($edit["$this->inner_field_name[0][value]"], 'Field collection can be viewed.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit["$this->inner_field_name[0][value]"]);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertLinkByHrefRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/field_collection/tests/src/FunctionalJavascript/FieldCol
         lectionAjaxTest.php" file, due to:                                     
         "Analyze error: "Class                                                 
         Drupal\FunctionalJavascriptTests\JavascriptTestBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/field_collection/src/Tests/Update/Update8001Test.php" 
         file, due to:                                                          
         "Analyze error: "Class Drupal\system\Tests\Update\UpdatePathTestBase not
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/field_collection/src/Tests/FieldCollectionRESTTest.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\rest\Tests\RESTTestBase not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

