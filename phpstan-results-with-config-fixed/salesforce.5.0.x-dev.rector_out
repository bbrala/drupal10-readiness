modules/contrib/salesforce/modules/salesforce_address/salesforce_address.module
modules/contrib/salesforce/modules/salesforce_address/src/Element/AddressStreetAsTextArea.php
modules/contrib/salesforce/modules/salesforce_address/src/Plugin/Field/FieldWidget/AddressDefaultWidgetStreetAsTextArea.php
modules/contrib/salesforce/modules/salesforce_example/salesforce_example-apex_endpoint.php
modules/contrib/salesforce/modules/salesforce_example/salesforce_example.module
modules/contrib/salesforce/modules/salesforce_example/src/EventSubscriber/SalesforceExampleSubscriber.php
modules/contrib/salesforce/modules/salesforce_example/src/Plugin/SalesforceMappingField/Hardcoded.php
modules/contrib/salesforce/modules/salesforce_jwt/src/Consumer/JWTCredentials.php
modules/contrib/salesforce/modules/salesforce_jwt/src/Consumer/JWTGovCloudCredentials.php
modules/contrib/salesforce/modules/salesforce_jwt/src/Plugin/SalesforceAuthProvider/SalesforceJWTGovCloudPlugin.php
modules/contrib/salesforce/modules/salesforce_jwt/src/Plugin/SalesforceAuthProvider/SalesforceJWTPlugin.php
modules/contrib/salesforce/modules/salesforce_jwt/tests/src/FunctionalJavascript/SalesforceJwtTest.php
modules/contrib/salesforce/modules/salesforce_logger/salesforce_logger.install
modules/contrib/salesforce/modules/salesforce_logger/salesforce_logger.module
modules/contrib/salesforce/modules/salesforce_logger/src/EventSubscriber/SalesforceLoggerSubscriber.php
modules/contrib/salesforce/modules/salesforce_logger/src/Form/SettingsForm.php
modules/contrib/salesforce/modules/salesforce_mapping/salesforce_mapping.drush.inc
modules/contrib/salesforce/modules/salesforce_mapping/salesforce_mapping.install
modules/contrib/salesforce/modules/salesforce_mapping/salesforce_mapping.module
modules/contrib/salesforce/modules/salesforce_mapping/src/Commands/SalesforceMappingCommands.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Commands/SalesforceMappingCommandsBase.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Entity/MappedObject.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Entity/MappedObjectInterface.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Entity/SalesforceMapping.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Entity/SalesforceMappingInterface.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Event/SalesforceDeleteAllowedEvent.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Event/SalesforcePullEntityValueEvent.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Event/SalesforcePullEvent.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Event/SalesforcePushAllowedEvent.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Event/SalesforcePushEvent.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Event/SalesforcePushOpEvent.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Event/SalesforcePushParamsEvent.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Event/SalesforceQueryEvent.php
modules/contrib/salesforce/modules/salesforce_mapping/src/MappedObjectAccessControlHandler.php
modules/contrib/salesforce/modules/salesforce_mapping/src/MappedObjectStorage.php
modules/contrib/salesforce/modules/salesforce_mapping/src/MappedObjectStorageSchema.php
modules/contrib/salesforce/modules/salesforce_mapping/src/MappingConstants.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/Field/FieldType/SalesforceLinkItem.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/Field/FieldType/SalesforceLinkItemList.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/Broken.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/Constant.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/DrupalConstant.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/Properties.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/PropertiesBase.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/PropertiesExtended.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/RecordType.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/RelatedIDs.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/RelatedProperties.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/RelatedTermString.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/SalesforceMappingField/Token.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/Validation/Constraint/MappingEntityConstraint.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/Validation/Constraint/MappingEntityTypeConstraint.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/Validation/Constraint/MappingEntityTypeConstraintValidator.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/Validation/Constraint/MappingSfidConstraint.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/Validation/Constraint/UniqueFieldsConstraint.php
modules/contrib/salesforce/modules/salesforce_mapping/src/Plugin/Validation/Constraint/UniqueFieldsConstraintValidator.php
modules/contrib/salesforce/modules/salesforce_mapping/src/PushParams.php
modules/contrib/salesforce/modules/salesforce_mapping/src/SalesforceMappableEntityTypes.php
modules/contrib/salesforce/modules/salesforce_mapping/src/SalesforceMappableEntityTypesInterface.php
modules/contrib/salesforce/modules/salesforce_mapping/src/SalesforceMappingAccessController.php
modules/contrib/salesforce/modules/salesforce_mapping/src/SalesforceMappingFieldPluginBase.php
modules/contrib/salesforce/modules/salesforce_mapping/src/SalesforceMappingFieldPluginInterface.php
modules/contrib/salesforce/modules/salesforce_mapping/src/SalesforceMappingFieldPluginManager.php
modules/contrib/salesforce/modules/salesforce_mapping/src/SalesforceMappingStorage.php
modules/contrib/salesforce/modules/salesforce_mapping/tests/src/Functional/PushParamsTest.php
modules/contrib/salesforce/modules/salesforce_mapping/tests/src/Unit/MappedObjectTest.php
modules/contrib/salesforce/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingStorageTest.php
modules/contrib/salesforce/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingTest.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/salesforce_mapping_ui.module
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Controller/AutocompleteController.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Controller/MappedObjectController.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Controller/SalesforceMappingController.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Form/MappedObjectDeleteForm.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Form/MappedObjectForm.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Form/SalesforceMappingAddForm.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Form/SalesforceMappingDeleteForm.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Form/SalesforceMappingDisableForm.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Form/SalesforceMappingEditForm.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Form/SalesforceMappingEnableForm.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Form/SalesforceMappingFieldsForm.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Form/SalesforceMappingFormBase.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Form/SalesforceMappingFormCrudBase.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/MappedObjectList.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Plugin/Derivative/SalesforceMappingLocalTask.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Plugin/Menu/LocalAction/SalesforceMappedObjectAddLocalAction.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Routing/RouteSubscriber.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/SalesforceMappingList.php
modules/contrib/salesforce/modules/salesforce_mapping_ui/src/Tests/SalesforceMappingCrudFormTest.php
modules/contrib/salesforce/modules/salesforce_oauth/src/Consumer/SalesforceOAuthCredentials.php
modules/contrib/salesforce/modules/salesforce_oauth/src/Controller/SalesforceOAuthController.php
modules/contrib/salesforce/modules/salesforce_oauth/src/Plugin/SalesforceAuthProvider/SalesforceOAuthPlugin.php
modules/contrib/salesforce/modules/salesforce_oauth/tests/src/FunctionalJavascript/SalesforceOAuthTest.php
modules/contrib/salesforce/modules/salesforce_pull/salesforce_pull.drush.inc
modules/contrib/salesforce/modules/salesforce_pull/salesforce_pull.install
modules/contrib/salesforce/modules/salesforce_pull/salesforce_pull.module
modules/contrib/salesforce/modules/salesforce_pull/src/Commands/SalesforcePullCommands.php
modules/contrib/salesforce/modules/salesforce_pull/src/Controller/PullController.php
modules/contrib/salesforce/modules/salesforce_pull/src/DeleteHandler.php
modules/contrib/salesforce/modules/salesforce_pull/src/Plugin/QueueWorker/CronPull.php
modules/contrib/salesforce/modules/salesforce_pull/src/Plugin/QueueWorker/PullBase.php
modules/contrib/salesforce/modules/salesforce_pull/src/PullException.php
modules/contrib/salesforce/modules/salesforce_pull/src/PullQueueItem.php
modules/contrib/salesforce/modules/salesforce_pull/src/QueueHandler.php
modules/contrib/salesforce/modules/salesforce_pull/tests/src/Functional/PullQueueTest.php
modules/contrib/salesforce/modules/salesforce_pull/tests/src/Unit/DeleteHandlerTest.php
modules/contrib/salesforce/modules/salesforce_pull/tests/src/Unit/PullBaseTest.php
modules/contrib/salesforce/modules/salesforce_pull/tests/src/Unit/PullQueueItemTest.php
modules/contrib/salesforce/modules/salesforce_pull/tests/src/Unit/QueueHandlerTest.php
modules/contrib/salesforce/modules/salesforce_push/salesforce_push.drush.inc
modules/contrib/salesforce/modules/salesforce_push/salesforce_push.install
modules/contrib/salesforce/modules/salesforce_push/salesforce_push.module
modules/contrib/salesforce/modules/salesforce_push/src/Commands/SalesforcePushCommands.php
modules/contrib/salesforce/modules/salesforce_push/src/Plugin/SalesforcePushQueueProcessor/Rest.php
modules/contrib/salesforce/modules/salesforce_push/src/PushController.php
modules/contrib/salesforce/modules/salesforce_push/src/PushQueue.php
modules/contrib/salesforce/modules/salesforce_push/src/PushQueueInterface.php
modules/contrib/salesforce/modules/salesforce_push/src/PushQueueProcessorInterface.php
modules/contrib/salesforce/modules/salesforce_push/src/PushQueueProcessorPluginManager.php
modules/contrib/salesforce/modules/salesforce_push/tests/src/Functional/PushQueueTest.php
modules/contrib/salesforce/modules/salesforce_push/tests/src/Unit/PushQueueTest.php
modules/contrib/salesforce/modules/salesforce_push/tests/src/Unit/SalesforcePushQueueProcessorRestTest.php
modules/contrib/salesforce/modules/salesforce_soap/src/Soap/SoapClient.php
modules/contrib/salesforce/modules/salesforce_soap/src/Soap/SoapClientInterface.php
modules/contrib/salesforce/modules/salesforce_webform/salesforce_webform.module
modules/contrib/salesforce/modules/salesforce_webform/src/Plugin/SalesforceMappingField/WebformElements.php
modules/contrib/salesforce/modules/salesforce_webform/src/Plugin/SalesforceMappingField/WebformEntityElements.php
modules/contrib/salesforce/salesforce.api.php
modules/contrib/salesforce/salesforce.drush.inc
modules/contrib/salesforce/salesforce.install
modules/contrib/salesforce/salesforce.module
modules/contrib/salesforce/src/Annotation/SalesforceAuthProvider.php
modules/contrib/salesforce/src/Client/HttpClientWrapper.php
modules/contrib/salesforce/src/Commands/QueryResult.php
modules/contrib/salesforce/src/Commands/QueryResultTableFormatter.php
modules/contrib/salesforce/src/Commands/SalesforceCommands.php
modules/contrib/salesforce/src/Commands/SalesforceCommandsBase.php
modules/contrib/salesforce/src/Consumer/SalesforceCredentials.php
modules/contrib/salesforce/src/Consumer/SalesforceCredentialsInterface.php
modules/contrib/salesforce/src/Controller/SalesforceAuthListBuilder.php
modules/contrib/salesforce/src/Entity/SalesforceAuthConfig.php
modules/contrib/salesforce/src/EntityNotFoundException.php
modules/contrib/salesforce/src/Event/SalesforceBaseEvent.php
modules/contrib/salesforce/src/Event/SalesforceErrorEvent.php
modules/contrib/salesforce/src/Event/SalesforceEvents.php
modules/contrib/salesforce/src/Event/SalesforceExceptionEvent.php
modules/contrib/salesforce/src/Event/SalesforceExceptionEventInterface.php
modules/contrib/salesforce/src/Event/SalesforceNoticeEvent.php
modules/contrib/salesforce/src/Event/SalesforceWarningEvent.php
modules/contrib/salesforce/src/Exception.php
modules/contrib/salesforce/src/Form/SalesforceAuthDeleteForm.php
modules/contrib/salesforce/src/Form/SalesforceAuthForm.php
modules/contrib/salesforce/src/Form/SalesforceAuthRevokeForm.php
modules/contrib/salesforce/src/Form/SalesforceAuthSettings.php
modules/contrib/salesforce/src/Form/SettingsForm.php
modules/contrib/salesforce/src/IdentityNotFoundException.php
modules/contrib/salesforce/src/Plugin/SalesforceAuthProvider/Broken.php
modules/contrib/salesforce/src/Rest/RestClient.php
modules/contrib/salesforce/src/Rest/RestClientInterface.php
modules/contrib/salesforce/src/Rest/RestException.php
modules/contrib/salesforce/src/Rest/RestResponse.php
modules/contrib/salesforce/src/Rest/RestResponseDescribe.php
modules/contrib/salesforce/src/Rest/RestResponseResources.php
modules/contrib/salesforce/src/Rest/SalesforceIdentity.php
modules/contrib/salesforce/src/Rest/SalesforceIdentityInterface.php
modules/contrib/salesforce/src/SFID.php
modules/contrib/salesforce/src/SObject.php
modules/contrib/salesforce/src/SalesforceAuthProviderInterface.php
modules/contrib/salesforce/src/SalesforceAuthProviderPluginBase.php
modules/contrib/salesforce/src/SalesforceAuthProviderPluginManager.php
modules/contrib/salesforce/src/SalesforceAuthProviderPluginManagerInterface.php
modules/contrib/salesforce/src/SelectQuery.php
modules/contrib/salesforce/src/SelectQueryInterface.php
modules/contrib/salesforce/src/SelectQueryRaw.php
modules/contrib/salesforce/src/SelectQueryResult.php
modules/contrib/salesforce/src/Storage/SalesforceAuthTokenStorage.php
modules/contrib/salesforce/src/Storage/SalesforceAuthTokenStorageInterface.php
modules/contrib/salesforce/src/Tests/TestHttpClient.php
modules/contrib/salesforce/src/Tests/TestHttpClientFactory.php
modules/contrib/salesforce/src/Tests/TestHttpClientWrapper.php
modules/contrib/salesforce/src/Tests/TestRestClient.php
modules/contrib/salesforce/src/Tests/TestSalesforceAuthProvider.php
modules/contrib/salesforce/src/Tests/TestSalesforceAuthProviderPluginManager.php
modules/contrib/salesforce/src/Token/SalesforceToken.php
modules/contrib/salesforce/tests/modules/salesforce_test_rest_client/src/SalesforceTestRestClientServiceProvider.php
modules/contrib/salesforce/tests/src/Functional/StatusPageTest.php
modules/contrib/salesforce/tests/src/Unit/RestClientTest.php
modules/contrib/salesforce/tests/src/Unit/SFIDTest.php
modules/contrib/salesforce/tests/src/Unit/SObjectTest.php
modules/contrib/salesforce/tests/src/Unit/SelectQueryResultTest.php

14 files with changes
=====================

1) modules/contrib/salesforce/tests/src/Unit/RestClientTest.php:47

    ---------- begin diff ----------
@@ @@
       'httpRequest',
     ];

-    $this->httpClient = $this->getMockBuilder(Client::CLASS)->getMock();
+    $this->httpClient = $this->createMock(Client::CLASS);
     $this->configFactory =
-      $this->getMockBuilder(ConfigFactory::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(ConfigFactory::CLASS);
     $this->state =
-      $this->getMockBuilder(State::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
-    $this->cache = $this->getMockBuilder(CacheBackendInterface::CLASS)->getMock();
-    $this->json = $this->getMockBuilder(Json::CLASS)->getMock();
-    $this->time = $this->getMockBuilder(TimeInterface::CLASS)->getMock();
-    $this->authToken = $this->getMockBuilder(TokenInterface::CLASS)->getMock();
-    $this->authProvider = $this->getMockBuilder(SalesforceAuthProviderInterface::CLASS)
-      ->disableOriginalConstructor()
-      ->getMock();
+      $this->createMock(State::CLASS);
+    $this->cache = $this->createMock(CacheBackendInterface::CLASS);
+    $this->json = $this->createMock(Json::CLASS);
+    $this->time = $this->createMock(TimeInterface::CLASS);
+    $this->authToken = $this->createMock(TokenInterface::CLASS);
+    $this->authProvider = $this->createMock(SalesforceAuthProviderInterface::CLASS);
     $this->authProvider->expects($this->any())
       ->method('getApiEndpoint')
       ->willReturn('https://example.com');
     $this->authConfig =
-      $this->getMockBuilder(SalesforceAuthConfig::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(SalesforceAuthConfig::CLASS);

     $this->authMan =
-      $this->getMockBuilder(SalesforceAuthProviderPluginManager::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(SalesforceAuthProviderPluginManager::CLASS);
     $this->authMan->expects($this->any())
       ->method('getToken')
       ->willReturn($this->authToken);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/salesforce/tests/src/Functional/StatusPageTest.php:122

    ---------- begin diff ----------
@@ @@

   /**
    * Need to do.
+   * @doesNotPerformAssertions
    */
   public function testTlsRequirements() {
     // @TODO write me.
@@ @@

   /**
    * Need to do.
+   * @doesNotPerformAssertions
    */
   public function testUsageRequirements() {
     // @TODO write me.
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/salesforce/src/Tests/TestHttpClientWrapper.php:38

    ---------- begin diff ----------
@@ @@
   ) {
     // This method is only used to Salesforce OAuth. Based on the given args,
     // return a hard-coded version of the expected response.
-    $dir = drupal_get_path('module', 'salesforce') . '/src/Tests/';
+    $dir = \Drupal::service('extension.list.module')->getPath('salesforce') . '/src/Tests/';
     if ($endpoint->getPath() == '/services/oauth2/token') {
       switch ($requestBody['grant_type']) {
         case 'authorization_code':
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/salesforce/modules/salesforce_push/tests/src/Unit/SalesforcePushQueueProcessorRestTest.php:29

    ---------- begin diff ----------
@@ @@
  */
 class SalesforcePushQueueProcessorRestTest extends UnitTestCase {

+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Required modules.
    *
@@ @@
   protected function setUp(): void {
     $this->entityType = 'default';

-    $this->queue = $this->getMockBuilder(PushQueueInterface::CLASS)->getMock();
-    $this->client = $this->getMockBuilder(RestClientInterface::CLASS)->getMock();
-    $this->eventDispatcher = $this->getMockBuilder(EventDispatcherInterface::CLASS)->getMock();
+    $this->queue = $this->createMock(PushQueueInterface::CLASS);
+    $this->client = $this->createMock(RestClientInterface::CLASS);
+    $this->eventDispatcher = $this->createMock(EventDispatcherInterface::CLASS);
     $this->eventDispatcher->expects($this->any())
       ->method('dispatch')
       ->willReturn(NULL);
-    $this->entity_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)->getMock();
+    $this->entity_manager = $this->createMock(EntityTypeManagerInterface::class);

-    $this->string_translation = $this->getMockBuilder(TranslationInterface::class)->getMock();
+    $this->string_translation = $this->createMock(TranslationInterface::class);

-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);

     $this->mapping->expects($this->any())
       ->method('id')
@@ @@
       ->with($this->equalTo('drupal_entity_type'))
       ->willReturn($this->entityType);

-    $this->mappingStorage = $this->getMockBuilder(ConfigEntityStorageInterface::CLASS)->getMock();
+    $this->mappingStorage = $this->createMock(ConfigEntityStorageInterface::CLASS);
     $this->mappingStorage->expects($this->any())
       ->method('load')
       ->willReturn($this->mapping);

-    $this->mappedObjectStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->mappedObjectStorage = $this->createMock(SqlEntityStorageInterface::CLASS);

     $prophecy = $this->prophesize(EntityTypeManagerInterface::class);
     $prophecy->getStorage('salesforce_mapping')
@@ @@
       ->willReturn($this->mappedObjectStorage);
     $this->entityTypeManager = $prophecy->reveal();

-    $this->authToken = $this->getMockBuilder(TokenInterface::CLASS)->getMock();
+    $this->authToken = $this->createMock(TokenInterface::CLASS);
     $this->authMan =
-      $this->getMockBuilder(SalesforceAuthProviderPluginManager::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(SalesforceAuthProviderPluginManager::CLASS);
     $this->authMan->expects($this->any())
       ->method('getToken')
       ->willReturn($this->authToken);
@@ @@
    */
   public function testProcessMissingAuth() {
     $this->authMan =
-      $this->getMockBuilder(SalesforceAuthProviderPluginManager::CLASS)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(SalesforceAuthProviderPluginManager::CLASS);
     $this->authMan->expects($this->any())
       ->method('getToken')
       ->willReturn(NULL);
@@ @@
       ->setMethods(['getMappedObject'])
       ->getMock();

-    $mappedObject = $this->getMockBuilder(MappedObjectInterface::class)->getMock();
+    $mappedObject = $this->createMock(MappedObjectInterface::class);
     $mappedObject->expects($this->once())
       ->method('isNew')
       ->willReturn(TRUE);
@@ @@
       'name' => 'bar',
     ];

-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::class)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::class);

     $this->mappedObject->expects($this->once())
       ->method('pushDelete')
@@ @@
    */
   public function testProcessItemPush() {
     // Test push on op == insert / update.
-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::class)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::class);
     $this->queueItem = (object) [
       'entity_id' => 'foo',
       'op' => NULL,
@@ @@
       'mapped_object_id' => NULL,
       'name' => NULL,
     ];
-    $this->entity = $this->getMockBuilder(EntityInterface::class)->getMock();
-    $this->entityStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->entity = $this->createMock(EntityInterface::class);
+    $this->entityStorage = $this->createMock(SqlEntityStorageInterface::CLASS);
     $this->entityStorage->expects($this->once())
       ->method('load')
       ->willReturn($this->entity);
@@ @@
       'entity_id' => 'foo',
     ];

-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::class)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::class);
     $this->mappedObject->expects($this->any())
       ->method('isNew')
       ->willReturn(TRUE);

-    $this->entityStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->entityStorage = $this->createMock(SqlEntityStorageInterface::CLASS);
     $prophecy = $this->prophesize(EntityTypeManagerInterface::class);
     $prophecy->getStorage($this->entityType)
       ->willReturn($this->entityStorage);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/salesforce/modules/salesforce_push/tests/src/Unit/PushQueueTest.php:30

    ---------- begin diff ----------
@@ @@
  * @group salesforce_push
  */
 class PushQueueTest extends UnitTestCase {
+  use \Prophecy\PhpUnit\ProphecyTrait;
   static protected $modules = ['salesforce_push'];

   /**
@@ @@
    * {@inheritdoc}
    */
   protected function setUp(): void {
-    $this->schema = $this->getMockBuilder(Schema::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->schema = $this->createMock(Schema::class);
     $this->schema->expects($this->any())
       ->method('tableExists')
       ->willReturn(TRUE);
-    $this->database = $this->getMockBuilder(Connection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->database = $this->createMock(Connection::class);
     $this->database->expects($this->any())
       ->method('schema')
       ->willReturn($this->schema);
-    $this->state = $this->getMockBuilder(StateInterface::class)->getMock();
+    $this->state = $this->createMock(StateInterface::class);
     $this->push_queue_processor_plugin_manager =
-      $this->getMockBuilder(PushQueueProcessorPluginManager::class)
-        ->disableOriginalConstructor()
-        ->getMock();
+      $this->createMock(PushQueueProcessorPluginManager::class);
     $this->entityTypeManager =
-      $this->getMockBuilder(EntityTypeManagerInterface::class)->getMock();
-    $this->eventDispatcher = $this->getMockBuilder(EventDispatcherInterface::CLASS)->getMock();
+      $this->createMock(EntityTypeManagerInterface::class);
+    $this->eventDispatcher = $this->createMock(EventDispatcherInterface::CLASS);
     $this->eventDispatcher->expects($this->any())
       ->method('dispatch')
       ->willReturn(NULL);
-    $this->string_translation = $this->getMockBuilder(TranslationInterface::class)->getMock();
-    $this->time = $this->getMockBuilder(TimeInterface::class)->getMock();
+    $this->string_translation = $this->createMock(TranslationInterface::class);
+    $this->time = $this->createMock(TimeInterface::class);

-    $this->mappingStorage = $this->getMockBuilder(SalesforceMappingStorage::CLASS)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->mappingStorage = $this->createMock(SalesforceMappingStorage::CLASS);

-    $this->mappedObjectStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->mappedObjectStorage = $this->createMock(SqlEntityStorageInterface::CLASS);

-    $this->entityStorage = $this->getMockBuilder(SqlEntityStorageInterface::CLASS)->getMock();
+    $this->entityStorage = $this->createMock(SqlEntityStorageInterface::CLASS);

     $this->entityTypeManager->expects($this->exactly(2))
       ->method('getStorage')
@@ @@

     // Test claiming items.
     $items = [1, 2, 3];
-    $this->queryRange = $this->getMockBuilder(StatementInterface::class)->getMock();
+    $this->queryRange = $this->createMock(StatementInterface::class);
     $this->queryRange->expects($this->once())
       ->method('fetchAllAssoc')
       ->willReturn($items);
@@ @@
       ->method('queryRange')
       ->willReturn($this->queryRange);

-    $this->updateQuery = $this->getMockBuilder(Update::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->updateQuery = $this->createMock(Update::class);
     $this->updateQuery->expects($this->once())
       ->method('fields')
       ->willReturn($this->updateQuery);
@@ @@
    * @covers ::processQueues
    */
   public function testProcessQueue() {
-    $mapping1 = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $mapping1 = $this->createMock(SalesforceMappingInterface::CLASS);
     $mapping1->expects($this->any())
       ->method('getNextPushTime')
       ->willReturn(0);
@@ @@
     $mapping1->push_limit = 1;
     $mapping1->push_retries = 1;

-    $this->worker = $this->getMockBuilder(PushQueueProcessorInterface::class)->getMock();
+    $this->worker = $this->createMock(PushQueueProcessorInterface::class);
     $this->worker->expects($this->any())
       ->method('process')
       ->willReturn(NULL);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/salesforce/modules/salesforce_pull/tests/src/Unit/QueueHandlerTest.php:25

    ---------- begin diff ----------
@@ @@
  */
 class QueueHandlerTest extends UnitTestCase {

+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Required modules.
    *
@@ @@
       ->willReturn($this->sqrDone);
     $this->sfapi = $prophecy->reveal();

-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $this->mapping->expects($this->any())
       ->method('__get')
       ->with($this->equalTo('id'))
@@ @@
     $prophecy->dispatch(Argument::any(), Argument::any())->willReturn();
     $this->ed = $prophecy->reveal();

-    $this->time = $this->getMockBuilder(TimeInterface::CLASS)->getMock();
+    $this->time = $this->createMock(TimeInterface::CLASS);

     $this->qh = $this->getMockBuilder(QueueHandler::CLASS)
       ->setMethods(['parseUrl'])
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/salesforce/modules/salesforce_pull/tests/src/Unit/PullQueueItemTest.php:26

    ---------- begin diff ----------
@@ @@
   public function testObject() {
     $sobject = new SObject(['id' => '1234567890abcde', 'attributes' => ['type' => 'dummy']]);
     // OF COURSE Prophesy doesn't do magic methods well.
-    $mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $mapping->expects($this->any())
       ->method('__get')
       ->with($this->equalTo('id'))
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/salesforce/modules/salesforce_pull/tests/src/Unit/PullBaseTest.php:29

    ---------- begin diff ----------
@@ @@
  */
 class PullBaseTest extends UnitTestCase {

+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Required modules.
    *
@@ @@
       ->willReturn(TRUE);

     // Mock mapping object.
-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $this->mapping->expects($this->any())
       ->method('__get')
       ->with($this->equalTo('id'))
@@ @@
       ->willReturn([]);

     // Mock mapped object.
-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::CLASS)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::CLASS);
     $this->mappedObject->expects($this->any())
       ->method('getChanged')
       ->willReturn('1486490500');
@@ @@
     $this->sqr = new SelectQueryResult($result);

     // Mock rest cient.
-    $this->sfapi = $this->getMockBuilder(RestClientInterface::CLASS)->getMock();
+    $this->sfapi = $this->createMock(RestClientInterface::CLASS);
     $this->sfapi
       ->expects($this->any())
       ->method('query')
@@ @@
       ->willReturn($this->sfid);

     // Mock event dispatcher.
-    $this->ed = $this->getMockBuilder('\Symfony\Component\EventDispatcher\EventDispatcherInterface')->getMock();
+    $this->ed = $this->createMock('\Symfony\Component\EventDispatcher\EventDispatcherInterface');
     $this->ed
       ->expects($this->any())
       ->method('dispatch')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/salesforce/modules/salesforce_pull/tests/src/Unit/DeleteHandlerTest.php:23

    ---------- begin diff ----------
@@ @@
  */
 class DeleteHandlerTest extends UnitTestCase {

+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Required modules.
    *
@@ @@
     $this->sfapi = $prophecy->reveal();

     // Mock an atribtary Drupal entity.
-    $this->entity = $this->getMockBuilder(User::CLASS)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock(User::CLASS);
     $this->entity->expects($this->any())->method('delete')->willReturn(TRUE);
     $this->entity->expects($this->any())->method('id')->willReturn(1);
     $this->entity->expects($this->any())->method('label')->willReturn('foo');

-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $this->mapping->expects($this->any())
       ->method('__get')
       ->with($this->equalTo('id'))
@@ @@
     $this->entityId->value = '1';
     $this->entityRef->entity = $this->mapping;

-    $this->mappedObject = $this->getMockBuilder(MappedObjectInterface::CLASS)->getMock();
+    $this->mappedObject = $this->createMock(MappedObjectInterface::CLASS);
     $this->mappedObject
       ->expects($this->any())
       ->method('delete')
@@ @@
     $this->configStorage = $prophecy->reveal();

     // Mock mapped object EntityStorage object.
-    $this->entityStorage = $this->getMockBuilder(MappedObjectStorage::CLASS)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entityStorage = $this->createMock(MappedObjectStorage::CLASS);
     $this->entityStorage->expects($this->any())
       ->method('loadBySfid')
       ->willReturn([$this->mappedObject]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/salesforce/modules/salesforce_oauth/tests/src/FunctionalJavascript/SalesforceOAuthTest.php:87

    ---------- begin diff ----------
@@ @@

   /**
    * Test the oauth provider plugin callback.
+   * @doesNotPerformAssertions
    */
   public function testOAuthCallback() {
     // @todo
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/salesforce/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingTest.php:20

    ---------- begin diff ----------
@@ @@
  */
 class SalesforceMappingTest extends UnitTestCase {

+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * Required modules.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/salesforce/modules/salesforce_mapping/tests/src/Unit/SalesforceMappingStorageTest.php:17

    ---------- begin diff ----------
@@ @@
  */
 class SalesforceMappingStorageTest extends UnitTestCase {

+  use \Prophecy\PhpUnit\ProphecyTrait;
   /**
    * The type ID of the entity under test.
    *
@@ @@
   /**
    * Mapping storage service mock.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var \PHPUnit\Framework\MockObject\MockObject
    */
   protected $salesforceMappingStorage;

@@ @@
     $this->uuidService = $this->createMock(UuidInterface::class);
     $this->languageManager = $this->createMock(LanguageManagerInterface::class);
     $this->configFactory = $this->createMock(ConfigFactoryInterface::class);
-    $this->etm = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->etm = $this->createMock(EntityTypeManagerInterface::class);
     $this->etm->expects($this->any())
       ->method('getDefinition')
       ->with($this->equalTo('test_entityType'))
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/salesforce/modules/salesforce_mapping/tests/src/Unit/MappedObjectTest.php:56

    ---------- begin diff ----------
@@ @@
       ->method('__toString')
       ->willReturn($this->salesforce_id);

-    $this->entityType = $this->getMockBuilder(EntityTypeInterface::class)->getMock();
+    $this->entityType = $this->createMock(EntityTypeInterface::class);
     $this->entityType->expects($this->any())
       ->method('getKeys')
       ->will($this->returnValue([
@@ @@
         'uuid' => 'uuid',
       ]));

-    $this->etm = $this->getMockBuilder(EntityTypeManagerInterface::class)->getMock();
+    $this->etm = $this->createMock(EntityTypeManagerInterface::class);
     $this->etm->expects($this->any())
       ->method('getDefinition')
       ->with($this->entityTypeId)
       ->will($this->returnValue($this->entityType));

-    $this->mappedObjectEntityType = $this->getMockBuilder(EntityTypeInterface::class)->getMock();
+    $this->mappedObjectEntityType = $this->createMock(EntityTypeInterface::class);
     $this->mappedObjectEntityType->expects($this->any())
       ->method('getKeys')
       ->will($this->returnValue([
@@ @@
       ->with('salesforce_mapped_object')
       ->will($this->returnValue($this->mappedObjectEntityType));

-    $this->event_dispatcher = $this->getMockBuilder(EventDispatcherInterface::class)->getMock();
+    $this->event_dispatcher = $this->createMock(EventDispatcherInterface::class);

-    $this->client = $this->getMockBuilder(RestClientInterface::CLASS)->getMock();
+    $this->client = $this->createMock(RestClientInterface::CLASS);

-    $this->fieldTypePluginManager = $this->getMockBuilder('\Drupal\Core\Field\FieldTypePluginManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->fieldTypePluginManager = $this->createMock('\Drupal\Core\Field\FieldTypePluginManager');
     $this->fieldTypePluginManager->expects($this->any())
       ->method('getDefaultStorageSettings')
       ->will($this->returnValue([]));
@@ @@
     $this->fieldTypePluginManager->expects($this->any())
       ->method('createFieldItemList')
       ->will($this->returnValue(
-        $this->getMockBuilder(FieldItemListInterface::class)->getMock()));
+        $this->createMock(FieldItemListInterface::class)));

-    $this->time = $this->getMockBuilder(TimeInterface::CLASS)->getMock();
+    $this->time = $this->createMock(TimeInterface::CLASS);

     $container = new ContainerBuilder();
     $container->set('entity_type.manager', $this->etm);
@@ @@
     $container->set('datetime.time', $this->time);
     \Drupal::setContainer($container);

-    $this->entity = $this->getMockBuilder(ContentEntityInterface::class)->getMock();
+    $this->entity = $this->createMock(ContentEntityInterface::class);
     $this->entity
       ->expects($this->any())
       ->method('id')
@@ @@
       ->willReturn(FALSE);

     // Mock salesforce mapping.
-    $this->mapping = $this->getMockBuilder(SalesforceMappingInterface::CLASS)->getMock();
+    $this->mapping = $this->createMock(SalesforceMappingInterface::CLASS);
     $this->mapping
       ->expects($this->any())
       ->method('getFieldMappings')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/salesforce/modules/salesforce_example/src/EventSubscriber/SalesforceExampleSubscriber.php:164

    ---------- begin diff ----------
@@ @@

         // Attach the new file id to the user entity.
         /* var \Drupal\file\FileInterface */
-        if ($file = file_save_data($file_data, $destination, FileSystemInterface::EXISTS_REPLACE)) {
+        if ($file = \Drupal::service('file.repository')->writeData($file_data, $destination, FileSystemInterface::EXISTS_REPLACE)) {
           $account->user_picture->target_id = $file->id();
         }
         else {
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [ERROR] Could not process                                                      
         "modules/contrib/salesforce/modules/salesforce_soap/src/Soap/SoapClient.p
         hp" file, due to:                                                      
         "Analyze error: "Class SforcePartnerClient not found.". Include your   
         files in "$rectorConfig->autoloadPaths([...]);" or                     
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/salesforce/modules/salesforce_address/src/Plugin/Field/F
         ieldWidget/AddressDefaultWidgetStreetAsTextArea.php" file, due to:     
         "Analyze error: "Class                                                 
         Drupal\address\Plugin\Field\FieldWidget\AddressDefaultWidget not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/salesforce/modules/salesforce_address/src/Element/Addres
         sStreetAsTextArea.php" file, due to:                                   
         "Analyze error: "Class Drupal\address\Element\Address not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

