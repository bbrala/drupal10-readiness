modules/contrib/transaction/modules/transaction_ief/src/Form/TransactionInlineForm.php
modules/contrib/transaction/modules/transaction_ief/src/Plugin/Field/FieldWidget/TransactionInlineEntityFormNewTransaction.php
modules/contrib/transaction/modules/transaction_ief/transaction_ief.module
modules/contrib/transaction/src/Access/ApplicableTransactionAccess.php
modules/contrib/transaction/src/Annotation/Transactor.php
modules/contrib/transaction/src/Controller/TransactionController.php
modules/contrib/transaction/src/Entity/Transaction.php
modules/contrib/transaction/src/Entity/TransactionOperation.php
modules/contrib/transaction/src/Entity/TransactionType.php
modules/contrib/transaction/src/Event/TransactionExecutionEvent.php
modules/contrib/transaction/src/Exception/ExecutionTimeoutException.php
modules/contrib/transaction/src/Form/TransactionDeleteForm.php
modules/contrib/transaction/src/Form/TransactionExecuteForm.php
modules/contrib/transaction/src/Form/TransactionForm.php
modules/contrib/transaction/src/Form/TransactionOperationForm.php
modules/contrib/transaction/src/Form/TransactionTypeAddForm.php
modules/contrib/transaction/src/Form/TransactionTypeCreationForm.php
modules/contrib/transaction/src/Form/TransactionTypeDeleteForm.php
modules/contrib/transaction/src/Form/TransactionTypeEditForm.php
modules/contrib/transaction/src/Form/TransactionTypeFormBase.php
modules/contrib/transaction/src/InvalidTransactionStateException.php
modules/contrib/transaction/src/Plugin/Derivative/TransactionLocalAction.php
modules/contrib/transaction/src/Plugin/Derivative/TransactionLocalTask.php
modules/contrib/transaction/src/Plugin/EntityReferenceSelection/TransactionOperationSelection.php
modules/contrib/transaction/src/Plugin/Field/TransactionDescriptionItemList.php
modules/contrib/transaction/src/Plugin/Field/TransactionDetailsItemList.php
modules/contrib/transaction/src/Plugin/Field/TransactionResultMessageItemList.php
modules/contrib/transaction/src/Plugin/RulesAction/LastTransactionFetch.php
modules/contrib/transaction/src/Plugin/RulesAction/TransactionCreate.php
modules/contrib/transaction/src/Plugin/RulesAction/TransactionCreateDeriver.php
modules/contrib/transaction/src/Plugin/RulesAction/TransactionExecute.php
modules/contrib/transaction/src/Plugin/Transaction/BalanceTransactor.php
modules/contrib/transaction/src/Plugin/Transaction/GenericTransactor.php
modules/contrib/transaction/src/Routing/RouteSubscriber.php
modules/contrib/transaction/src/TransactionAccessControlHandler.php
modules/contrib/transaction/src/TransactionInterface.php
modules/contrib/transaction/src/TransactionListBuilder.php
modules/contrib/transaction/src/TransactionOperationInterface.php
modules/contrib/transaction/src/TransactionOperationListBuilder.php
modules/contrib/transaction/src/TransactionPermissions.php
modules/contrib/transaction/src/TransactionService.php
modules/contrib/transaction/src/TransactionServiceInterface.php
modules/contrib/transaction/src/TransactionTypeInterface.php
modules/contrib/transaction/src/TransactionTypeListBuilder.php
modules/contrib/transaction/src/TransactionTypeStorage.php
modules/contrib/transaction/src/TransactionViewsData.php
modules/contrib/transaction/src/TransactorBase.php
modules/contrib/transaction/src/TransactorHandler.php
modules/contrib/transaction/src/TransactorHandlerInterface.php
modules/contrib/transaction/src/TransactorPluginInterface.php
modules/contrib/transaction/src/TransactorPluginManager.php
modules/contrib/transaction/src/TransactorPluginManagerInterface.php
modules/contrib/transaction/tests/src/Functional/FunctionalTransactionTestBase.php
modules/contrib/transaction/tests/src/Functional/TransactionAdminTest.php
modules/contrib/transaction/tests/src/Kernel/BalanceTransactionTest.php
modules/contrib/transaction/tests/src/Kernel/GenericTransactionTest.php
modules/contrib/transaction/tests/src/Kernel/KernelTransactionTestBase.php
modules/contrib/transaction/transaction.install
modules/contrib/transaction/transaction.module

5 files with changes
====================

1) modules/contrib/transaction/tests/src/Kernel/KernelTransactionTestBase.php:74

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('entity_test');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/transaction/tests/src/Functional/TransactionAdminTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create and log in an administrative user.
@@ @@
     $transactor = 'transaction_generic';
     $target_entity_type = 'entity_test';
     $post = ['target_entity_type' => $target_entity_type, 'transactor' => $transactor];
-    $this->drupalPostForm(NULL, $post, 'Continue');
+    $this->submitForm($post, 'Continue');

     $label = 'Generic workflow';
     $id = 'generic_workflow';
@@ @@
       'label' => $label,
       'id' => $id,
     ];
-    $this->drupalPostForm(NULL, $post, 'Create transaction type');
+    $this->submitForm($post, 'Create transaction type');

     // Check the created transaction type values.
     /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
     $transaction_type = TransactionType::load($id);
     $this->assertNotNull($transaction_type);
-    $this->assertEqual($transaction_type->label(), $label);
-    $this->assertEqual($transaction_type->getTargetEntityTypeId(), $target_entity_type);
-    $this->assertEqual($transaction_type->getPluginId(), $transactor);
+    $this->assertEquals($transaction_type->label(), $label);
+    $this->assertEquals($transaction_type->getTargetEntityTypeId(), $target_entity_type);
+    $this->assertEquals($transaction_type->getPluginId(), $transactor);

     /** @var \Drupal\transaction\TransactorPluginInterface $transactor_plugin */
     $transactor_plugin = $transaction_type->getPlugin();
@@ @@
       'last_transaction_label' => 'Last transaction',
       'last_transaction_field_name' => 'last_transaction',
     ];
-    $this->drupalPostForm('admin/config/workflow/transaction/edit/generic_workflow', $post, 'Save transaction type');
+    $this->drupalGet('admin/config/workflow/transaction/edit/generic_workflow');
+    $this->submitForm($post, 'Save transaction type');

     // Check the log message field was created on the transaction type.
     /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
@@ @@
       // Execution control: ask user.
       'execution' => '3',
     ];
-    $this->drupalPostForm('admin/config/workflow/transaction/edit/generic_workflow', $post, 'Save transaction type');
+    $this->drupalGet('admin/config/workflow/transaction/edit/generic_workflow');
+    $this->submitForm($post, 'Save transaction type');

     // Checks the transactor options.
     $expected_plugin_configuration = [
@@ @@
       // Execution control: ask user.
       'local_task' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/workflow/transaction/edit/generic_workflow', $post, 'Save transaction type');
+    $this->drupalGet('admin/config/workflow/transaction/edit/generic_workflow');
+    $this->submitForm($post, 'Save transaction type');

     // Check that the option were saved.
     /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
@@ @@
       'description' => 'Transaction operation description',
       'details' => 'Details line line 1' . PHP_EOL . 'Details line line 2',
     ];
-    $this->drupalPostForm(NULL, $post, 'Save transaction operation');
+    $this->submitForm($post, 'Save transaction operation');

     // Check the creation message.
     $this->assertSession()->pageTextContains('Transaction operation Test operation has been added.');
@@ @@
     // Go to the deletion.
     $this->drupalGet('admin/config/workflow/transaction/delete/generic_workflow');
     $this->assertSession()->pageTextContains('Are you sure you want to delete Generic workflow?');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    $this->submitForm([], 'Delete');

     $this->assertSession()->pageTextContains('Transaction type Generic workflow deleted.');
     // Check there as no transaction type.
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/transaction/tests/src/Functional/FunctionalTransactionTestBase.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create a basic bundle on the entity test type.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/transaction/src/TransactorHandler.php:151

    ---------- begin diff ----------
@@ @@
       $transaction->setExecutor($executor ?: User::getAnonymousUser());

       // Launch the transaction execution event.
-      $this->eventDispatcher->dispatch(TransactionExecutionEvent::EVENT_NAME, new TransactionExecutionEvent($transaction));
+      $this->eventDispatcher->dispatch(new TransactionExecutionEvent($transaction), TransactionExecutionEvent::EVENT_NAME);

       // Save the transaction.
       if ($save) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/transaction/src/Event/TransactionExecutionEvent.php:9

    ---------- begin diff ----------
@@ @@
  *
  * @see \Drupal\transaction\TransactionInterface::execute()
  */
-class TransactionExecutionEvent extends Event {
+class TransactionExecutionEvent extends \Symfony\Contracts\EventDispatcher\Event {

   const EVENT_NAME = 'rules_transaction_execution';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/transaction/src/Plugin/RulesAction/TransactionExecute.ph
         p" file, due to:                                                       
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/transaction/src/Plugin/RulesAction/TransactionCreate.php
         " file, due to:                                                        
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/transaction/src/Plugin/RulesAction/LastTransactionFetch.
         php" file, due to:                                                     
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/transaction/modules/transaction_ief/src/Plugin/Field/Fie
         ldWidget/TransactionInlineEntityFormNewTransaction.php" file, due to:  
         "Analyze error: "Class                                                 
         Drupal\inline_entity_form\Plugin\Field\FieldWidget\InlineEntityFormSimple
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/transaction/modules/transaction_ief/src/Form/Transaction
         InlineForm.php" file, due to:                                          
         "Analyze error: "Class Drupal\inline_entity_form\Form\EntityInlineForm 
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

