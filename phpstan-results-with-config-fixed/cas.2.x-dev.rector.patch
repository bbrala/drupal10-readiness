diff --git a/src/Controller/ServiceController.php b/src/Controller/ServiceController.php
index 014d1bb..d701b74 100644
--- a/src/Controller/ServiceController.php
+++ b/src/Controller/ServiceController.php
@@ -245,7 +245,7 @@ class ServiceController implements ContainerInjectionInterface {
     // Dispatch an event that allows modules to alter any of the CAS data before
     // it's used to lookup a Drupal user account via the authmap table.
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_USER_LOAD.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_USER_LOAD, new CasPreUserLoadEvent($cas_validation_info));
+    $this->eventDispatcher->dispatch(new CasPreUserLoadEvent($cas_validation_info), CasHelper::EVENT_PRE_USER_LOAD);
 
     if ($cas_validation_info->getUsername() !== $cas_validation_info->getOriginalUsername()) {
       $this->casHelper->log(
@@ -265,7 +265,7 @@ class ServiceController implements ContainerInjectionInterface {
     // @see \Drupal\cas\Event\CasPreUserLoadRedirectEvent
     $cas_pre_user_load_redirect_event = new CasPreUserLoadRedirectEvent($ticket, $cas_validation_info, $service_params);
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_USER_LOAD_REDIRECT.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_USER_LOAD_REDIRECT, $cas_pre_user_load_redirect_event);
+    $this->eventDispatcher->dispatch($cas_pre_user_load_redirect_event, CasHelper::EVENT_PRE_USER_LOAD_REDIRECT);
 
     // A subscriber might have set an HTTP redirect response allowing potential
     // user interaction to be injected into the flow.
diff --git a/src/Event/CasPostLoginEvent.php b/src/Event/CasPostLoginEvent.php
index 3da8652..e724f21 100644
--- a/src/Event/CasPostLoginEvent.php
+++ b/src/Event/CasPostLoginEvent.php
@@ -14,7 +14,7 @@ use Drupal\cas\CasPropertyBag;
  *
  * Any CAS attributes will be available via the $casPropertyBag data object.
  */
-class CasPostLoginEvent extends Event {
+class CasPostLoginEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Store the CAS property bag.
diff --git a/src/Event/CasPostValidateEvent.php b/src/Event/CasPostValidateEvent.php
index 82dce95..4d42951 100644
--- a/src/Event/CasPostValidateEvent.php
+++ b/src/Event/CasPostValidateEvent.php
@@ -15,7 +15,7 @@ use Symfony\Component\EventDispatcher\Event;
  * Subscribers of this event can parse the response from the CAS server and
  * modify the CasPropertyBag.
  */
-class CasPostValidateEvent extends Event {
+class CasPostValidateEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The raw validation response data from CAS server.
diff --git a/src/Event/CasPreLoginEvent.php b/src/Event/CasPreLoginEvent.php
index c075f67..cc9067d 100644
--- a/src/Event/CasPreLoginEvent.php
+++ b/src/Event/CasPreLoginEvent.php
@@ -23,7 +23,7 @@ use Drupal\cas\CasPropertyBag;
  *
  * Any CAS attributes will be available via the $casPropertyBag data object.
  */
-class CasPreLoginEvent extends Event {
+class CasPreLoginEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Store the CAS property bag.
diff --git a/src/Event/CasPreRedirectEvent.php b/src/Event/CasPreRedirectEvent.php
index fbfeef0..653c2a5 100644
--- a/src/Event/CasPreRedirectEvent.php
+++ b/src/Event/CasPreRedirectEvent.php
@@ -26,7 +26,7 @@ use Symfony\Component\EventDispatcher\Event;
  *  - Indicate if the redirect to the CAS server is a cacheable redirect and if
  *    so, add cache tags and cache contexts to the redirect response.
  */
-class CasPreRedirectEvent extends Event {
+class CasPreRedirectEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Data used to decide on final redirection.
diff --git a/src/Event/CasPreRegisterEvent.php b/src/Event/CasPreRegisterEvent.php
index d2db8f9..1546a25 100644
--- a/src/Event/CasPreRegisterEvent.php
+++ b/src/Event/CasPreRegisterEvent.php
@@ -25,7 +25,7 @@ use Drupal\cas\CasPropertyBag;
  *
  * Any CAS attributes will be available via the $casPropertyBag data object.
  */
-class CasPreRegisterEvent extends Event {
+class CasPreRegisterEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The user information returned from the CAS server.
diff --git a/src/Event/CasPreUserLoadEvent.php b/src/Event/CasPreUserLoadEvent.php
index a91d165..f3868a4 100644
--- a/src/Event/CasPreUserLoadEvent.php
+++ b/src/Event/CasPreUserLoadEvent.php
@@ -16,7 +16,7 @@ use Drupal\cas\CasPropertyBag;
  *  - Alter the CAS username that is used when looking up an existing Drupal
  *    user account.
  */
-class CasPreUserLoadEvent extends Event {
+class CasPreUserLoadEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Store the CAS property bag.
diff --git a/src/Event/CasPreUserLoadRedirectEvent.php b/src/Event/CasPreUserLoadRedirectEvent.php
index c3df7d0..e93992f 100644
--- a/src/Event/CasPreUserLoadRedirectEvent.php
+++ b/src/Event/CasPreUserLoadRedirectEvent.php
@@ -29,7 +29,7 @@ use Symfony\Component\HttpFoundation\RedirectResponse;
  * process by explicitly calling \Drupal\cas\Service\CasUserManager::login(),
  * showing a status message to user and executing the final redirect.
  */
-class CasPreUserLoadRedirectEvent extends Event {
+class CasPreUserLoadRedirectEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The CAS property bag.
diff --git a/src/Event/CasPreValidateEvent.php b/src/Event/CasPreValidateEvent.php
index 0fa660d..8f933fb 100644
--- a/src/Event/CasPreValidateEvent.php
+++ b/src/Event/CasPreValidateEvent.php
@@ -18,7 +18,7 @@ use Symfony\Component\EventDispatcher\Event;
  *    useful if your CAS server requires some custom data during the ticket
  *    validation process.
  */
-class CasPreValidateEvent extends Event {
+class CasPreValidateEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * Validation path.
diff --git a/src/Event/CasPreValidateServerConfigEvent.php b/src/Event/CasPreValidateServerConfigEvent.php
index 1910f0e..c151948 100644
--- a/src/Event/CasPreValidateServerConfigEvent.php
+++ b/src/Event/CasPreValidateServerConfigEvent.php
@@ -13,7 +13,7 @@ use Symfony\Component\EventDispatcher\Event;
  * validate the ticket on some other server rather than the one defined in
  * the default configuration.
  */
-class CasPreValidateServerConfigEvent extends Event {
+class CasPreValidateServerConfigEvent extends \Symfony\Contracts\EventDispatcher\Event {
 
   /**
    * The CAS server config value object.
diff --git a/src/Service/CasRedirector.php b/src/Service/CasRedirector.php
index 22fcc01..8705a54 100644
--- a/src/Service/CasRedirector.php
+++ b/src/Service/CasRedirector.php
@@ -87,7 +87,7 @@ class CasRedirector {
     // Dispatch an event that allows modules to alter or prevent the redirect,
     // or to change the CAS server that we're redirected to.
     $pre_redirect_event = new CasPreRedirectEvent($data, $casServerConfig);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_REDIRECT, $pre_redirect_event);
+    $this->eventDispatcher->dispatch($pre_redirect_event, CasHelper::EVENT_PRE_REDIRECT);
 
     // Build the service URL, which is where the CAS server will send users
     // back to after authenticating them. We always send users back to our main
diff --git a/src/Service/CasUserManager.php b/src/Service/CasUserManager.php
index 2c2bd8a..56d55ee 100644
--- a/src/Service/CasUserManager.php
+++ b/src/Service/CasUserManager.php
@@ -188,7 +188,7 @@ class CasUserManager {
         $cas_pre_register_event = new CasPreRegisterEvent($property_bag);
         $cas_pre_register_event->setPropertyValue('mail', $this->getEmailForNewAccount($property_bag));
         $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_REGISTER.');
-        $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_REGISTER, $cas_pre_register_event);
+        $this->eventDispatcher->dispatch($cas_pre_register_event, CasHelper::EVENT_PRE_REGISTER);
         if ($cas_pre_register_event->getAllowAutomaticRegistration()) {
           $account = $this->register($property_bag->getUsername(), $cas_pre_register_event->getDrupalUsername(), $cas_pre_register_event->getPropertyValues());
         }
@@ -212,7 +212,7 @@ class CasUserManager {
     // in and/or alter the user entity before we save it.
     $pre_login_event = new CasPreLoginEvent($account, $property_bag);
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_PRE_LOGIN.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_LOGIN, $pre_login_event);
+    $this->eventDispatcher->dispatch($pre_login_event, CasHelper::EVENT_PRE_LOGIN);
 
     // Save user entity since event listeners may have altered it.
     // @todo Don't take it for granted. Find if the account was really altered.
@@ -233,7 +233,7 @@ class CasUserManager {
 
     $postLoginEvent = new CasPostLoginEvent($account, $property_bag);
     $this->casHelper->log(LogLevel::DEBUG, 'Dispatching EVENT_POST_LOGIN.');
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_POST_LOGIN, $postLoginEvent);
+    $this->eventDispatcher->dispatch($postLoginEvent, CasHelper::EVENT_POST_LOGIN);
 
     if ($this->settings->get('proxy.initialize') && $property_bag->getPgt()) {
       $this->casHelper->log(LogLevel::DEBUG, "Storing PGT information for this session.");
@@ -316,7 +316,7 @@ class CasUserManager {
    */
   protected function randomPassword() {
     // Default length is 10, use a higher number that's harder to brute force.
-    return \user_password(30);
+    return \Drupal::service('password_generator')->generate(30);
   }
 
   /**
diff --git a/src/Service/CasValidator.php b/src/Service/CasValidator.php
index 32792e8..786999b 100644
--- a/src/Service/CasValidator.php
+++ b/src/Service/CasValidator.php
@@ -101,7 +101,7 @@ class CasValidator {
     // Allow modules to modify the server config before it's used to validate
     // the login ticket.
     $event = new CasPreValidateServerConfigEvent($casServerConfig);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_VALIDATE_SERVER_CONFIG, $event);
+    $this->eventDispatcher->dispatch($event, CasHelper::EVENT_PRE_VALIDATE_SERVER_CONFIG);
 
     // Determine the path to send the validation request to on the CAS server.
     $path = '';
@@ -139,7 +139,7 @@ class CasValidator {
     // Dispatch an event that allows modules to alter the validation path or
     // URL parameters.
     $pre_validate_event = new CasPreValidateEvent($path, $params);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_PRE_VALIDATE, $pre_validate_event);
+    $this->eventDispatcher->dispatch($pre_validate_event, CasHelper::EVENT_PRE_VALIDATE);
     $validate_url = $casServerConfig->getServerBaseUrl() . $pre_validate_event->getValidationPath();
     if (!empty($pre_validate_event->getParameters())) {
       $validate_url .= '?' . UrlHelper::buildQuery($pre_validate_event->getParameters());
@@ -178,7 +178,7 @@ class CasValidator {
 
     // Dispatch an event that allows modules to alter the CAS property bag.
     $event = new CasPostValidateEvent($response_data, $cas_property_bag);
-    $this->eventDispatcher->dispatch(CasHelper::EVENT_POST_VALIDATE, $event);
+    $this->eventDispatcher->dispatch($event, CasHelper::EVENT_POST_VALIDATE);
     return $event->getCasPropertyBag();
   }
 
diff --git a/src/Subscriber/CasForcedAuthSubscriber.php b/src/Subscriber/CasForcedAuthSubscriber.php
index 5809036..5e8345f 100644
--- a/src/Subscriber/CasForcedAuthSubscriber.php
+++ b/src/Subscriber/CasForcedAuthSubscriber.php
@@ -122,10 +122,10 @@ class CasForcedAuthSubscriber extends HttpExceptionSubscriberBase {
   /**
    * Respond to kernel request set forced auth redirect response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     // Don't do anything if this is a sub request and not a master request.
     if ($event->getRequestType() != HttpKernelInterface::MASTER_REQUEST) {
       return;
@@ -188,10 +188,10 @@ class CasForcedAuthSubscriber extends HttpExceptionSubscriberBase {
    * instances we handle the forced login redirect if applicable here instead,
    * using an exception subscriber.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
    *   The event to process.
    */
-  public function on403(GetResponseForExceptionEvent $event) {
+  public function on403(\Symfony\Component\HttpKernel\Event\ExceptionEvent $event) {
     $this->onRequest($event);
   }
 
diff --git a/src/Subscriber/CasGatewayAuthSubscriber.php b/src/Subscriber/CasGatewayAuthSubscriber.php
index 919506e..b8b2dff 100644
--- a/src/Subscriber/CasGatewayAuthSubscriber.php
+++ b/src/Subscriber/CasGatewayAuthSubscriber.php
@@ -151,10 +151,10 @@ class CasGatewayAuthSubscriber implements EventSubscriberInterface {
    * gateway auth check. Caching is disabled on all paths this would be
    * active on. See the DenyCas response policy file.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(\Symfony\Component\HttpKernel\Event\RequestEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
@@ -228,7 +228,7 @@ class CasGatewayAuthSubscriber implements EventSubscriberInterface {
       // auth checks.
       if ($this->gatewayRecheckTime > 0) {
         $expireTime = time() + (60 * $this->gatewayRecheckTime);
-        $cookie = new Cookie('cas_gateway_checked_ss', 1, $expireTime);
+        $cookie = \Symfony\Component\HttpFoundation\Cookie::create('cas_gateway_checked_ss', 1, $expireTime);
         $response->headers->setCookie($cookie);
       }
       $event->setResponse($response);
@@ -259,10 +259,10 @@ class CasGatewayAuthSubscriber implements EventSubscriberInterface {
    * Unlike the server-side implementation, this one works with page caching
    * so we need to set appropriate cache metadata.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
    *   The event.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(\Symfony\Component\HttpKernel\Event\ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
diff --git a/tests/src/Functional/CasAutoAssignedRolesTest.php b/tests/src/Functional/CasAutoAssignedRolesTest.php
index 3285903..a1f708a 100644
--- a/tests/src/Functional/CasAutoAssignedRolesTest.php
+++ b/tests/src/Functional/CasAutoAssignedRolesTest.php
@@ -25,7 +25,8 @@ class CasAutoAssignedRolesTest extends CasBrowserTestBase {
       'user_accounts[auto_assigned_roles][]' => [$role_1, $role_2],
       'user_accounts[email_hostname]' => 'sample.com',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     $this->assertEquals([$role_1, $role_2], $this->config('cas.settings')->get('user_accounts.auto_assigned_roles'));
 
diff --git a/tests/src/Functional/CasBulkAddCasUsersTest.php b/tests/src/Functional/CasBulkAddCasUsersTest.php
index 6d33ecd..ec50f5f 100644
--- a/tests/src/Functional/CasBulkAddCasUsersTest.php
+++ b/tests/src/Functional/CasBulkAddCasUsersTest.php
@@ -25,8 +25,9 @@ class CasBulkAddCasUsersTest extends CasBrowserTestBase {
       'email_hostname' => 'sample.com',
       'roles[sample_role]' => TRUE,
     ];
+    $this->drupalGet('/admin/people/create/cas-bulk');
 
-    $this->drupalPostForm('/admin/people/create/cas-bulk', $edit, 'Create new accounts');
+    $this->submitForm($edit, 'Create new accounts');
 
     $casUserManager = \Drupal::service('cas.user_manager');
 
@@ -34,12 +35,12 @@ class CasBulkAddCasUsersTest extends CasBrowserTestBase {
     $user_test3 = user_load_by_name('test 3');
     $this->assertNotFalse($user_test3, 'User with username "test 3" exists.');
     $this->assertTrue($user_test3->hasRole('sample_role'), 'The "test 3" user has role "sample_role"');
-    $this->assertEqual('test 3@sample.com', $user_test3->get('mail')->value, 'The "test 3" user has the email "test 3@sample.com".');
+    $this->assertEquals('test 3@sample.com', $user_test3->get('mail')->value, 'The "test 3" user has the email "test 3@sample.com".');
     $this->assertEquals('test 3', $casUserManager->getCasUsernameForAccount($user_test3->id()));
 
     $user_test4 = user_load_by_name('test4');
     $this->assertNotFalse($user_test4, 'User with username "test4" exists.');
-    $this->assertEqual('test4@sample.com', $user_test4->get('mail')->value, 'The "test4" user has the email "test4@sample.com".');
+    $this->assertEquals('test4@sample.com', $user_test4->get('mail')->value, 'The "test4" user has the email "test4@sample.com".');
     $this->assertTrue($user_test4->hasRole('sample_role'), 'The "test4" user has role "sample_role"');
     $this->assertEquals('test4', $casUserManager->getCasUsernameForAccount($user_test4->id()));
 
diff --git a/tests/src/Functional/CasEventsTest.php b/tests/src/Functional/CasEventsTest.php
index f86fe07..833ef3a 100644
--- a/tests/src/Functional/CasEventsTest.php
+++ b/tests/src/Functional/CasEventsTest.php
@@ -31,7 +31,8 @@ class CasEventsTest extends CasBrowserTestBase {
       'user_accounts[auto_register]' => TRUE,
       'user_accounts[email_hostname]' => 'sample.com',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     $cas_property_bag = new CasPropertyBag('foo');
     \Drupal::service('cas.user_manager')->login($cas_property_bag, 'fake_ticket_string');
diff --git a/tests/src/Functional/CasForcedAuthSubscriberTest.php b/tests/src/Functional/CasForcedAuthSubscriberTest.php
index e3c6bcd..e8d49e6 100644
--- a/tests/src/Functional/CasForcedAuthSubscriberTest.php
+++ b/tests/src/Functional/CasForcedAuthSubscriberTest.php
@@ -50,7 +50,8 @@ class CasForcedAuthSubscriberTest extends CasBrowserTestBase {
       'forced_login[enabled]' => TRUE,
       'forced_login[paths][pages]' => "/node/2\n/my/path",
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     $config = $this->config('cas.settings');
     $this->assertTrue($config->get('forced_login.enabled'));
diff --git a/tests/src/Functional/CasForcedLoginControllerTest.php b/tests/src/Functional/CasForcedLoginControllerTest.php
index d25283d..bca445b 100644
--- a/tests/src/Functional/CasForcedLoginControllerTest.php
+++ b/tests/src/Functional/CasForcedLoginControllerTest.php
@@ -27,7 +27,8 @@ class CasForcedLoginControllerTest extends CasBrowserTestBase {
       'server[hostname]' => 'fakecasserver.localhost',
       'server[path]' => '/auth',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     $this->drupalLogout();
 
diff --git a/tests/src/Functional/CasGatewayAuthSubscriberTest.php b/tests/src/Functional/CasGatewayAuthSubscriberTest.php
index 43f79a1..8e6781b 100644
--- a/tests/src/Functional/CasGatewayAuthSubscriberTest.php
+++ b/tests/src/Functional/CasGatewayAuthSubscriberTest.php
@@ -46,7 +46,8 @@ class CasGatewayAuthSubscriberTest extends CasBrowserTestBase {
       'gateway[paths][pages]' => "/node/1\n/node/2",
       'gateway[method]' => CasHelper::GATEWAY_SERVER_SIDE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
 
     // Check that settings saved correctly.
     $config = $this->config('cas.settings');
@@ -99,7 +100,8 @@ class CasGatewayAuthSubscriberTest extends CasBrowserTestBase {
     $edit = [
       'gateway[recheck_time]' => "-1",
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->drupalLogout();
     $this->disableRedirects();
     $this->prepareRequest();
@@ -124,7 +126,8 @@ class CasGatewayAuthSubscriberTest extends CasBrowserTestBase {
     $edit = [
       'gateway[paths][pages]' => '/node/1',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->drupalLogout();
     $this->disableRedirects();
     $this->prepareRequest();
@@ -138,7 +141,8 @@ class CasGatewayAuthSubscriberTest extends CasBrowserTestBase {
     $edit = [
       'gateway[enabled]' => FALSE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->drupalLogout();
     $this->disableRedirects();
     $this->prepareRequest();
@@ -155,7 +159,8 @@ class CasGatewayAuthSubscriberTest extends CasBrowserTestBase {
       'gateway[recheck_time]' => "-1",
       'gateway[method]' => CasHelper::GATEWAY_CLIENT_SIDE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->pageTextContains('The "Every page request" recheck time is not compatible with the "Client-side" method');
 
     // Enable client side redirect and confirm that the user is not redirected
@@ -166,7 +171,8 @@ class CasGatewayAuthSubscriberTest extends CasBrowserTestBase {
       'gateway[recheck_time]' => 720,
       'gateway[method]' => CasHelper::GATEWAY_CLIENT_SIDE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->drupalLogout();
     $this->disableRedirects();
     $this->prepareRequest();
diff --git a/tests/src/Functional/CasLoginFormTest.php b/tests/src/Functional/CasLoginFormTest.php
index 15a7283..f0e4a9d 100644
--- a/tests/src/Functional/CasLoginFormTest.php
+++ b/tests/src/Functional/CasLoginFormTest.php
@@ -31,7 +31,8 @@ class CasLoginFormTest extends CasBrowserTestBase {
       'general[login_link_enabled]' => TRUE,
       'general[login_link_label]' => 'Click here to login!',
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $config = $this->config('cas.settings');
     $this->assertTrue($config->get('login_link_enabled'));
     $this->assertEquals('Click here to login!', $config->get('login_link_label'));
@@ -57,17 +58,19 @@ class CasLoginFormTest extends CasBrowserTestBase {
     $cas_user->setPassword('password');
     $cas_user->save();
     $this->container->get('cas.user_manager')->setCasUsernameForAccount($cas_user, 'cas_user');
+    $this->drupalGet('/user/login');
 
     // Log in in as normal user should work.
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'normal_user',
       'pass' => 'password',
     ], 'Log in');
     $this->assertSession()->addressEquals('/user/' . $normal_user->id());
     $this->drupalLogout();
+    $this->drupalGet('/user/login');
 
     // Log in as CAS user should not work.
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'cas_user',
       'pass' => 'password',
     ], 'Log in');
@@ -79,8 +82,9 @@ class CasLoginFormTest extends CasBrowserTestBase {
     $this->config('cas.settings')
       ->set('error_handling.message_prevent_normal_login', 'Just use the <a href="[cas:login-url]">CAS Login</a>')
       ->save();
+    $this->drupalGet('/user/login');
 
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'cas_user',
       'pass' => 'password',
     ], 'Log in');
@@ -93,11 +97,13 @@ class CasLoginFormTest extends CasBrowserTestBase {
     $edit = [
       'user_accounts[prevent_normal_login]' => FALSE,
     ];
-    $this->drupalPostForm('/admin/config/people/cas', $edit, 'Save configuration');
+    $this->drupalGet('/admin/config/people/cas');
+    $this->submitForm($edit, 'Save configuration');
     $this->drupalLogout();
+    $this->drupalGet('/user/login');
 
     // Log in as CAS user should work now.
-    $this->drupalPostForm('/user/login', [
+    $this->submitForm([
       'name' => 'cas_user',
       'pass' => 'password',
     ], 'Log in');
diff --git a/tests/src/Functional/CasPasswordResetTest.php b/tests/src/Functional/CasPasswordResetTest.php
index a131554..fa6bf6e 100644
--- a/tests/src/Functional/CasPasswordResetTest.php
+++ b/tests/src/Functional/CasPasswordResetTest.php
@@ -51,20 +51,23 @@ class CasPasswordResetTest extends CasBrowserTestBase {
   public function testPasswordResetAsAnonymous() {
     // Test with the 'user_accounts.restrict_password_management' setting off.
     $this->settings->set('user_accounts.restrict_password_management', FALSE)->save();
+    $this->drupalGet('/user/password');
 
     // Check that a CAS user is able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_with_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_with_cas'], 'Submit');
     $this->assertStatusMessage('user_with_cas');
+    $this->drupalGet('/user/password');
 
     // Check that a non-CAS user is able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_without_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_without_cas'], 'Submit');
     $this->assertStatusMessage('user_without_cas');
 
     // Test with the 'user_accounts.restrict_password_management' setting on.
     $this->settings->set('user_accounts.restrict_password_management', TRUE)->save();
+    $this->drupalGet('/user/password');
 
     // Check that a CAS user is not able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_with_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_with_cas'], 'Submit');
     $this->assertSession()->addressEquals('user/password');
     $this->assertSession()->pageTextContains('The requested account is associated with CAS and its password cannot be managed from this website.');
 
@@ -74,9 +77,10 @@ class CasPasswordResetTest extends CasBrowserTestBase {
     $this->getSession()->reload();
     $this->assertSession()->pageTextContains('You cannot manage your password. Back to homepage.');
     $this->assertSession()->linkExists('homepage');
+    $this->drupalGet('/user/password');
 
     // Check that a non-CAS user is able to reset their password.
-    $this->drupalPostForm('/user/password', ['name' => 'user_without_cas'], 'Submit');
+    $this->submitForm(['name' => 'user_without_cas'], 'Submit');
     $this->assertStatusMessage('user_without_cas');
   }
 
@@ -93,13 +97,15 @@ class CasPasswordResetTest extends CasBrowserTestBase {
 
     // Check that a non-CAS user is able to reset their password.
     $this->drupalLogin($this->nonCasUser);
-    $this->drupalPostForm('/user/password', [], 'Submit');
+    $this->drupalGet('/user/password');
+    $this->submitForm([], 'Submit');
     $this->assertSession()->addressEquals($this->nonCasUser->toUrl());
     $this->assertStatusMessage('user_without_cas@example.com');
 
     // Check that a CAS user is able to reset their password.
     $this->drupalLogin($this->casUser);
-    $this->drupalPostForm('/user/password', [], 'Submit');
+    $this->drupalGet('/user/password');
+    $this->submitForm([], 'Submit');
     $this->assertSession()->addressEquals($this->casUser->toUrl());
     $this->assertStatusMessage('user_with_cas@example.com');
 
@@ -112,7 +118,8 @@ class CasPasswordResetTest extends CasBrowserTestBase {
 
     // Check that a non-CAS user is able to reset their password.
     $this->drupalLogin($this->nonCasUser);
-    $this->drupalPostForm('/user/password', [], 'Submit');
+    $this->drupalGet('/user/password');
+    $this->submitForm([], 'Submit');
     $this->assertSession()->addressEquals($this->nonCasUser->toUrl());
     $this->assertStatusMessage('user_without_cas@example.com');
   }
