modules/contrib/filefield_paths/filefield_paths.api.php
modules/contrib/filefield_paths/filefield_paths.drush.inc
modules/contrib/filefield_paths/filefield_paths.inc
modules/contrib/filefield_paths/filefield_paths.install
modules/contrib/filefield_paths/filefield_paths.module
modules/contrib/filefield_paths/filefield_paths.tokens.inc
modules/contrib/filefield_paths/src/Form/SettingsForm.php
modules/contrib/filefield_paths/src/Redirect.php
modules/contrib/filefield_paths/src/RedirectInterface.php
modules/contrib/filefield_paths/tests/filefield_paths_test/src/StreamWrapper/FileFieldPathsDummyReadOnlyStreamWrapper.php
modules/contrib/filefield_paths/tests/src/Functional/FileFieldPathsGeneralTest.php
modules/contrib/filefield_paths/tests/src/Functional/FileFieldPathsPathautoTest.php
modules/contrib/filefield_paths/tests/src/Functional/FileFieldPathsRedirectTest.php
modules/contrib/filefield_paths/tests/src/Functional/FileFieldPathsTestBase.php
modules/contrib/filefield_paths/tests/src/Functional/FileFieldPathsTokensTest.php
modules/contrib/filefield_paths/tests/src/Functional/FileFieldPathsTransliterationTest.php
modules/contrib/filefield_paths/tests/src/Functional/FileFieldPathsUpdateTest.php

4 files with changes
====================

1) modules/contrib/filefield_paths/tests/src/Functional/FileFieldPathsUpdateTest.php:65

    ---------- begin diff ----------
@@ @@
     $this->drupalGet("node/{$nid}");
     $date = date('Y-m');
     // The File is in the default path.
-    $this->assertRaw("{$this->publicFilesDirectory}/styles/thumbnail/public/{$date}/{$test_file->getFilename()}");
+    $this->assertSession()->responseContains("{$this->publicFilesDirectory}/styles/thumbnail/public/{$date}/{$test_file->getFilename()}");

     // Trigger retroactive updates.
     $this->drupalGet("admin/structure/types/manage/{$this->contentType}/fields/node.{$this->contentType}.{$field_name}");
@@ @@
     // Ensure that the file path has been retroactively updated.
     $this->drupalGet("node/{$nid}");
     // The File path has been retroactively updated.
-    $this->assertRaw("{$this->publicFilesDirectory}/styles/thumbnail/public/node/{$nid}/{$test_file->getFilename()}");
+    $this->assertSession()->responseContains("{$this->publicFilesDirectory}/styles/thumbnail/public/node/{$nid}/{$test_file->getFilename()}");
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/filefield_paths/tests/src/Functional/FileFieldPathsTransliterationTest.php:23

    ---------- begin diff ----------
@@ @@
     $this->drupalGet("admin/structure/types/manage/{$this->contentType}/fields/node.{$this->contentType}.{$field_name}");
     foreach (['path', 'name'] as $field) {
       // Transliteration checkbox is present in File settings.
-      $this->assertField("third_party_settings[filefield_paths][file_{$field}][options][transliterate]");
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Change assertion to buttonExists() if checking for a button.
+      $this->assertSession()->fieldExists("third_party_settings[filefield_paths][file_{$field}][options][transliterate]");

       $element = $this->xpath('//input[@name=:name]/@disabled', [':name' => "third_party_settings[filefield_paths][file_{$field}][options][transliterate]"]);
       $this->assertEmpty($element, 'Transliteration checkbox is not disabled in File ' . Unicode::ucfirst($field) . ' settings.');
@@ @@
     // Ensure that file path/name have been processed correctly by
     // Transliteration.
     $node = \Drupal::entitytypeManager()->getStorage('node')->load($nid);
-    $this->assertEqual($node->{$field_name}[0]->entity->getFileUri(), "public://node/test/test.txt", 'File path/name has been processed correctly by Transliteration');
+    $this->assertEquals($node->{$field_name}[0]->entity->getFileUri(), "public://node/test/test.txt", 'File path/name has been processed correctly by Transliteration');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/filefield_paths/tests/src/Functional/FileFieldPathsTokensTest.php:50

    ---------- begin diff ----------
@@ @@
     $text_file->save();

     // Move the text file.
-    $moved_file = file_move($text_file, 'public://moved.diff');
+    $moved_file = \Drupal::service('file.repository')->move($text_file, 'public://moved.diff');

     // Ensure tokens are processed correctly.
     $data = ['file' => $moved_file];
    ----------- end diff -----------

Applied rules:
 * FileMoveRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/filefield_paths/filefield_paths.inc:112

    ---------- begin diff ----------
@@ @@
         $dirname = $file_system->dirname($destination);
         if (
           \Drupal::service('file_system')->prepareDirectory($dirname, FileSystem::CREATE_DIRECTORY)
-          && $new_file = file_move($file, $destination)
+          && $new_file = \Drupal::service('file.repository')->move($file, $destination)
         ) {
           // Create redirect from old location.
           if (
    ----------- end diff -----------

Applied rules:
 * FileMoveRector
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

