diff --git a/modules/shs_chosen/src/Plugin/views/filter/ShsChosenTaxonomyIndexTidDepth.php b/modules/shs_chosen/src/Plugin/views/filter/ShsChosenTaxonomyIndexTidDepth.php
index 1ce3216..f41c378 100644
--- a/modules/shs_chosen/src/Plugin/views/filter/ShsChosenTaxonomyIndexTidDepth.php
+++ b/modules/shs_chosen/src/Plugin/views/filter/ShsChosenTaxonomyIndexTidDepth.php
@@ -25,7 +25,7 @@ class ShsChosenTaxonomyIndexTidDepth extends ShsChosenTaxonomyIndexTid {
   /**
    * The variable to store database connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -38,13 +38,13 @@ class ShsChosenTaxonomyIndexTidDepth extends ShsChosenTaxonomyIndexTid {
    *   The Plugin id.
    * @param mixed $plugin_definition
    *   The Plugin definition.
-   * @param \Drupal\taxonomy\VocabularyStorageInterface $vocabulary_storage
+   * @param VocabularyStorageInterface $vocabulary_storage
    *   The vocabulary storage.
-   * @param \Drupal\taxonomy\TermStorageInterface $term_storage
+   * @param TermStorageInterface $term_storage
    *   The term storage.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, VocabularyStorageInterface $vocabulary_storage, TermStorageInterface $term_storage, AccountInterface $current_user, Connection $database) {
diff --git a/shs.module b/shs.module
index fcf8b16..3028ce5 100644
--- a/shs.module
+++ b/shs.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\taxonomy\TermStorageInterface;
 /**
  * @file
  * Main functions and methods for the "Simple hierarchical select" module.
@@ -73,7 +74,7 @@ function shs_term_load_all_parents($tid, $target_type = 'taxonomy_term') {
   $parents_all = &drupal_static(__FUNCTION__, []);
   if (!isset($parents_all[$tid])) {
     $parents = [];
-    /** @var \Drupal\taxonomy\TermStorageInterface $storage */
+    /** @var TermStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage($target_type);
     if ($term = $storage->load($tid)) {
       $parents[$term->id()] = $term;
@@ -113,7 +114,7 @@ function shs_term_has_children($tid): bool {
 
   $current_user = \Drupal::currentUser();
 
-  /** @var \Drupal\taxonomy\TermInterface $term */
+  /** @var TermInterface $term */
   $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
   if (!($term instanceof TermInterface)) {
     return FALSE;
diff --git a/src/Controller/ShsController.php b/src/Controller/ShsController.php
index 8ad52ba..fad52d0 100644
--- a/src/Controller/ShsController.php
+++ b/src/Controller/ShsController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\shs\Controller;
 
+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\content_translation\ContentTranslationManagerInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\TranslatableInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -17,7 +20,7 @@ class ShsController extends ControllerBase {
   /**
    * The dependency injection container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
@@ -61,12 +64,12 @@ class ShsController extends ControllerBase {
     $result = [];
 
     $langcode_current = $this->languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
-    /** @var \Drupal\taxonomy\TermStorageInterface $storage */
+    /** @var TermStorageInterface $storage */
     $storage = $this->entityTypeManager()->getStorage('taxonomy_term');
 
     $translation_enabled = FALSE;
     if ($this->moduleHandler()->moduleExists('content_translation')) {
-      /** @var \Drupal\content_translation\ContentTranslationManagerInterface $translation_manager */
+      /** @var ContentTranslationManagerInterface $translation_manager */
       $translation_manager = $this->container->get('content_translation.manager');
       // If translation is enabled for the vocabulary, we need to load the full
       // term objects to get the translation for the current language.
@@ -76,7 +79,7 @@ class ShsController extends ControllerBase {
     $access_unpublished = $this->currentUser()->hasPermission('administer taxonomy') || $this->currentUser()->hasPermission('view unpublished terms in ' . $bundle);
     $cache_tags[] = 'access_unpublished:' . $access_unpublished;
 
-    /** @var \Drupal\taxonomy\TermInterface[] $terms */
+    /** @var TermInterface[] $terms */
     $terms = $storage->loadTree($bundle, $entity_id, 1, $translation_enabled);
 
     foreach ($terms as $term) {
diff --git a/src/Plugin/Field/FieldFormatter/EntityReferenceShsFormatter.php b/src/Plugin/Field/FieldFormatter/EntityReferenceShsFormatter.php
index 689a522..ac9d11e 100644
--- a/src/Plugin/Field/FieldFormatter/EntityReferenceShsFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/EntityReferenceShsFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\shs\Plugin\Field\FieldFormatter;
 
+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -83,7 +84,7 @@ class EntityReferenceShsFormatter extends EntityReferenceLabelFormatter {
       }
 
       try {
-        /** @var \Drupal\taxonomy\TermStorageInterface $storage */
+        /** @var TermStorageInterface $storage */
         $storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());
         if ((!$storage instanceof TermStorageInterface)) {
           throw new Exception('Expected TermStorageInterface for storage, got ' . get_class($storage));
@@ -97,7 +98,7 @@ class EntityReferenceShsFormatter extends EntityReferenceLabelFormatter {
       $list_items = [];
 
       // Create hierarchy from parent items.
-      /** @var \Drupal\taxonomy\TermInterface $entity_parent */
+      /** @var TermInterface $entity_parent */
       foreach (array_reverse($parents) as $entity_parent) {
         if ($entity_parent->hasTranslation($langcode)) {
           $entity_parent = $entity_parent->getTranslation($langcode);
diff --git a/src/Plugin/Field/FieldWidget/OptionsShsWidget.php b/src/Plugin/Field/FieldWidget/OptionsShsWidget.php
index 26a9b44..81b59df 100644
--- a/src/Plugin/Field/FieldWidget/OptionsShsWidget.php
+++ b/src/Plugin/Field/FieldWidget/OptionsShsWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\shs\Plugin\Field\FieldWidget;
 
+use Drupal\taxonomy\VocabularyInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -32,7 +33,7 @@ class OptionsShsWidget extends OptionsSelectWidget implements ContainerFactoryPl
   /**
    * The widget defaults SHS service.
    *
-   * @var \Drupal\shs\WidgetDefaults
+   * @var WidgetDefaults
    */
   protected $widgetDefaults;
 
@@ -43,13 +44,13 @@ class OptionsShsWidget extends OptionsSelectWidget implements ContainerFactoryPl
    *   Plugin id.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Field definition.
    * @param array $settings
    *   Field settings.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\shs\WidgetDefaults $widget_defaults
+   * @param WidgetDefaults $widget_defaults
    *   The widget defaults SHS service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, WidgetDefaults $widget_defaults) {
@@ -198,7 +199,7 @@ class OptionsShsWidget extends OptionsSelectWidget implements ContainerFactoryPl
     ];
 
     $bundle = reset($target_bundles);
-    /** @var \Drupal\taxonomy\VocabularyInterface $vocabulary */
+    /** @var VocabularyInterface $vocabulary */
     $vocabulary = \Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')->load($bundle);
     $cardinality = $this->fieldDefinition->getFieldStorageDefinition()->getCardinality();
 
diff --git a/src/Plugin/views/filter/ShsTaxonomyIndexTid.php b/src/Plugin/views/filter/ShsTaxonomyIndexTid.php
index 7000741..f721574 100644
--- a/src/Plugin/views/filter/ShsTaxonomyIndexTid.php
+++ b/src/Plugin/views/filter/ShsTaxonomyIndexTid.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\shs\Plugin\views\filter;
 
+use Drupal\shs\WidgetDefaultsInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -116,7 +117,7 @@ class ShsTaxonomyIndexTid extends TaxonomyIndexTid {
     }
 
     if (!empty($default_value)) {
-      /** @var Drupal\shs\WidgetDefaultsInterface $widget_defaults */
+      /** @var WidgetDefaultsInterface $widget_defaults */
       $widget_defaults = \Drupal::service('shs.widget_defaults');
       $parents = $widget_defaults->getParentDefaults($default_value, $settings_additional, 'taxonomy_term');
     }
diff --git a/src/Plugin/views/filter/ShsTaxonomyIndexTidDepth.php b/src/Plugin/views/filter/ShsTaxonomyIndexTidDepth.php
index 2f5c68d..c00c10d 100644
--- a/src/Plugin/views/filter/ShsTaxonomyIndexTidDepth.php
+++ b/src/Plugin/views/filter/ShsTaxonomyIndexTidDepth.php
@@ -25,7 +25,7 @@ class ShsTaxonomyIndexTidDepth extends ShsTaxonomyIndexTid {
   /**
    * The variable to store database connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -38,13 +38,13 @@ class ShsTaxonomyIndexTidDepth extends ShsTaxonomyIndexTid {
    *   The Plugin id.
    * @param mixed $plugin_definition
    *   The Plugin definition.
-   * @param \Drupal\taxonomy\VocabularyStorageInterface $vocabulary_storage
+   * @param VocabularyStorageInterface $vocabulary_storage
    *   The vocabulary storage.
-   * @param \Drupal\taxonomy\TermStorageInterface $term_storage
+   * @param TermStorageInterface $term_storage
    *   The term storage.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, VocabularyStorageInterface $vocabulary_storage, TermStorageInterface $term_storage, Connection $database, AccountInterface $current_user = NULL) {
diff --git a/src/WidgetDefaults.php b/src/WidgetDefaults.php
index 80cbd72..eb465ed 100644
--- a/src/WidgetDefaults.php
+++ b/src/WidgetDefaults.php
@@ -12,14 +12,14 @@ class WidgetDefaults implements WidgetDefaultsInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * WidgetDefaults constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/tests/src/Functional/ShsTermTest.php b/tests/src/Functional/ShsTermTest.php
index d17aa2b..25358fd 100644
--- a/tests/src/Functional/ShsTermTest.php
+++ b/tests/src/Functional/ShsTermTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\shs\Functional;
 
+use Drupal\taxonomy\TermInterface;
 /**
  * Test term functions in SHS.
  *
@@ -69,7 +70,7 @@ class ShsTermTest extends ShsTestBase {
     $user_with_view_access = $this->drupalCreateUser(['access content']);
 
     // Unpublish one of the terms.
-    /** @var \Drupal\taxonomy\TermInterface $term */
+    /** @var TermInterface $term */
     $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($this->termIds['aaa 1']);
     $term->setUnpublished();
     $term->save();
diff --git a/tests/src/Functional/ShsTestTrait.php b/tests/src/Functional/ShsTestTrait.php
index 2de0c79..d502eed 100644
--- a/tests/src/Functional/ShsTestTrait.php
+++ b/tests/src/Functional/ShsTestTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\shs\Functional;
 
+use Drupal\taxonomy\Entity\Vocabulary;
+use Drupal\Core\Url;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
@@ -25,7 +27,7 @@ trait ShsTestTrait {
   /**
    * The vocabulary.
    *
-   * @var \Drupal\taxonomy\Entity\Vocabulary
+   * @var Vocabulary
    */
   protected $vocabulary;
 
@@ -148,7 +150,7 @@ trait ShsTestTrait {
   /**
    * Helper function for JSON formatted requests.
    *
-   * @param string|\Drupal\Core\Url $path
+   * @param string|Url $path
    *   Drupal path or URL to load into Mink controlled browser.
    * @param array $options
    *   (optional) Options to be forwarded to the url generator.
