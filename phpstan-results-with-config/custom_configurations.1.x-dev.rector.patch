diff --git a/custom_configurations.module b/custom_configurations.module
index 436ce04..a927738 100644
--- a/custom_configurations.module
+++ b/custom_configurations.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Url;
 /**
  * @file
  * Defines common functionality for custom configurations.
@@ -38,8 +39,8 @@ function custom_configurations_link_alter(&$variables) {
   $config_factory = \Drupal::configFactory();
   $config = $config_factory->getEditable('custom_configurations.settings');
 
-  if (isset($variables['url']) && $variables['url'] instanceof \Drupal\Core\Url) {
-    /** @var \Drupal\Core\Url $menu_link_url */
+  if (isset($variables['url']) && $variables['url'] instanceof Url) {
+    /** @var Url $menu_link_url */
     $menu_link_url = $variables['url'];
     if ($menu_link_url->isRouted()) {
       if ($menu_link_url->getRouteName() == 'custom_configurations.index' &&
diff --git a/src/Access/CategoryAccessCheck.php b/src/Access/CategoryAccessCheck.php
index 362ef7f..95e07e8 100644
--- a/src/Access/CategoryAccessCheck.php
+++ b/src/Access/CategoryAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\custom_configurations\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -16,12 +17,12 @@ class CategoryAccessCheck implements AccessInterface {
   /**
    * A custom access check.
    *
-   * @param \Symfony\Component\Routing\Route $route
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param Route $route
+   * @param RouteMatchInterface $route_match
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
diff --git a/src/Controller/CustomConfigurationsCategoryController.php b/src/Controller/CustomConfigurationsCategoryController.php
index d8307ec..f653e9e 100644
--- a/src/Controller/CustomConfigurationsCategoryController.php
+++ b/src/Controller/CustomConfigurationsCategoryController.php
@@ -19,21 +19,21 @@ class CustomConfigurationsCategoryController extends ControllerBase {
   /**
    * Drupal\custom_configurations\CustomConfigurationsManager definition.
    *
-   * @var \Drupal\custom_configurations\CustomConfigurationsManager
+   * @var CustomConfigurationsManager
    */
   protected $customConfigurationsManager;
 
   /**
    * The route builder.
    *
-   * @var \Drupal\Core\ProxyClass\Routing\RouteBuilder
+   * @var RouteBuilder
    */
   protected $routerBuilder;
 
   /**
    * The route builder.
    *
-   * @var \Drupal\Core\Routing\RouteProvider
+   * @var RouteProvider
    */
   protected $routerProvider;
 
diff --git a/src/Controller/CustomConfigurationsController.php b/src/Controller/CustomConfigurationsController.php
index b8afca5..49f8219 100644
--- a/src/Controller/CustomConfigurationsController.php
+++ b/src/Controller/CustomConfigurationsController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\custom_configurations\Controller;
 
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\ProxyClass\Routing\RouteBuilder;
@@ -23,21 +25,21 @@ class CustomConfigurationsController extends ControllerBase {
   /**
    * Drupal\custom_configurations\CustomConfigurationsManager definition.
    *
-   * @var \Drupal\custom_configurations\CustomConfigurationsManager
+   * @var CustomConfigurationsManager
    */
   protected $customConfigurationsManager;
 
   /**
    * The route builder.
    *
-   * @var \Drupal\Core\ProxyClass\Routing\RouteBuilder
+   * @var RouteBuilder
    */
   protected $routerBuilder;
 
   /**
    * The route builder.
    *
-   * @var \Drupal\Core\Routing\RouteProvider
+   * @var RouteProvider
    */
   protected $routerProvider;
 
@@ -64,11 +66,11 @@ class CustomConfigurationsController extends ControllerBase {
   /**
    * Access to the custom configuration overview page.
    *
-   * @param \Symfony\Component\Routing\Route $route
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param Route $route
+   * @param RouteMatchInterface $route_match
+   * @param AccountInterface $account
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
+   * @return AccessResultAllowed|AccessResultForbidden
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
 
diff --git a/src/CustomConfigurationsManager.php b/src/CustomConfigurationsManager.php
index 01597df..b5a8fa5 100644
--- a/src/CustomConfigurationsManager.php
+++ b/src/CustomConfigurationsManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\custom_configurations;
 
+use Drupal\Core\Language\LanguageInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactory;
@@ -21,68 +22,68 @@ class CustomConfigurationsManager {
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Default key/value store service.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactory
+   * @var KeyValueFactory
    */
   protected $keyValue;
 
   /**
    * The custom configurations plugin manager.
    *
-   * @var \Drupal\custom_configurations\CustomConfigurationsPluginManager
+   * @var CustomConfigurationsPluginManager
    */
   protected $pluginManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
 
   /**
    * The Database Cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The ModuleHandlerInterface.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactory $keyvalue
+   * @param KeyValueFactory $keyvalue
    *   Default key/value store service.
-   * @param \Drupal\custom_configurations\CustomConfigurationsPluginManager $plugin_manager
+   * @param CustomConfigurationsPluginManager $plugin_manager
    *   The custom configurations plugin manager.
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   The current user.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Database cache.
    */
   public function __construct(ConfigFactory $config_factory, LanguageManagerInterface $language_manager, ModuleHandlerInterface $module_handler, KeyValueFactory $keyvalue, CustomConfigurationsPluginManager $plugin_manager, AccountProxy $current_user, CacheBackendInterface $cache) {
@@ -239,10 +240,10 @@ class CustomConfigurationsManager {
   /**
    * Takes a langcode or language object and returns an object.
    *
-   * @param string|null|\Drupal\Core\Language\LanguageInterface $language
+   * @param string|null|LanguageInterface $language
    *   The language to be tested.
    *
-   * @return \Drupal\Core\Language\LanguageInterface
+   * @return LanguageInterface
    *   Returns actual Language.
    */
   public function getApplicableLanguageObject($language) {
diff --git a/src/CustomConfigurationsPluginInterface.php b/src/CustomConfigurationsPluginInterface.php
index 7ed9880..785c1fd 100644
--- a/src/CustomConfigurationsPluginInterface.php
+++ b/src/CustomConfigurationsPluginInterface.php
@@ -16,9 +16,9 @@ interface CustomConfigurationsPluginInterface {
   /**
    * Populates a form with elements to configure the plugin.
    *
-   * @param \Drupal\Core\Config\StorableConfigBase $file_config
+   * @param StorableConfigBase $file_config
    *   Config object.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreInterface $db_config
+   * @param KeyValueStoreInterface $db_config
    *   The key-value store service.
    * @param string|null $language
    *   Langcode of the locale currently being configured.
@@ -31,15 +31,15 @@ interface CustomConfigurationsPluginInterface {
   /**
    * Validate the results.
    *
-   * @param \Drupal\Core\Config\StorableConfigBase $file_config
+   * @param StorableConfigBase $file_config
    *   Config object we will be saving our configuration to.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreInterface $db_config
+   * @param KeyValueStoreInterface $db_config
    *   The key-value store service.
    * @param array $values
    *   An easier-to-read array of submitted values passed on by the main form.
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string|null $language
    *   Langcode of the locale currently being configured.
@@ -49,15 +49,15 @@ interface CustomConfigurationsPluginInterface {
   /**
    * Submit the results.
    *
-   * @param \Drupal\Core\Config\StorableConfigBase $file_config
+   * @param StorableConfigBase $file_config
    *   Config object we will be saving our configuration to.
-   * @param \Drupal\Core\KeyValueStore\KeyValueStoreInterface $db_config
+   * @param KeyValueStoreInterface $db_config
    *   The key-value store service.
    * @param array $values
    *   An easier-to-read array of submitted values passed on by the main form.
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string|null $language
    *   Langcode of the locale currently being configured.
diff --git a/src/CustomConfigurationsPluginManager.php b/src/CustomConfigurationsPluginManager.php
index ed3940f..3e2256d 100644
--- a/src/CustomConfigurationsPluginManager.php
+++ b/src/CustomConfigurationsPluginManager.php
@@ -19,9 +19,9 @@ class CustomConfigurationsPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/EventSubscriber/CustomConfigurationsEventSubscriber.php b/src/EventSubscriber/CustomConfigurationsEventSubscriber.php
index c1878fb..40d88dc 100644
--- a/src/EventSubscriber/CustomConfigurationsEventSubscriber.php
+++ b/src/EventSubscriber/CustomConfigurationsEventSubscriber.php
@@ -15,14 +15,14 @@ class CustomConfigurationsEventSubscriber implements EventSubscriberInterface {
   /**
    * The CacheBackendInterface.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The route builder.
    *
-   * @var \Drupal\Core\ProxyClass\Routing\RouteBuilder
+   * @var RouteBuilder
    */
   protected $routerBuilder;
 
diff --git a/src/Form/CustomConfigurationsForm.php b/src/Form/CustomConfigurationsForm.php
index 4baaf63..c3aac13 100644
--- a/src/Form/CustomConfigurationsForm.php
+++ b/src/Form/CustomConfigurationsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\custom_configurations\Form;
 
+use Drupal\Core\KeyValueStore\KeyValueStoreInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\KeyValueStore\KeyValueFactory;
@@ -24,68 +26,68 @@ class CustomConfigurationsForm extends ConfigFormBase {
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * The custom configurations plugin manager.
    *
-   * @var \Drupal\custom_configurations\CustomConfigurationsPluginManager
+   * @var CustomConfigurationsPluginManager
    */
   protected $customConfigurationsPluginManager;
 
   /**
    * The Drupal default config manager.
    *
-   * @var \Drupal\Core\Config\ConfigManager
+   * @var ConfigManager
    */
   protected $configManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The custom configurations helper service.
    *
-   * @var \Drupal\custom_configurations\CustomConfigurationsManager
+   * @var CustomConfigurationsManager
    */
   protected $customConfigurationsManager;
 
   /**
    * Default key/value store service.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactory
+   * @var KeyValueFactory
    */
   protected $keyValue;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Config\ConfigManager $config_manager
+   * @param ConfigManager $config_manager
    *   Config manager service.
-   * @param \Drupal\custom_configurations\CustomConfigurationsPluginManager $custom_configurations_plugin_manager
+   * @param CustomConfigurationsPluginManager $custom_configurations_plugin_manager
    *   C  ustom configurations plugin manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager service.
-   * @param \Drupal\custom_configurations\CustomConfigurationsManager $custom_configurations_manager
+   * @param CustomConfigurationsManager $custom_configurations_manager
    *   Config helper service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactory $keyvalue
+   * @param KeyValueFactory $keyvalue
    *   Default key/value store service.
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   The current user.
    */
   public function __construct(ConfigFactory $config_factory, ConfigManager $config_manager, CustomConfigurationsPluginManager $custom_configurations_plugin_manager, LanguageManagerInterface $language_manager, CustomConfigurationsManager $custom_configurations_manager, KeyValueFactory $keyvalue, AccountProxy $current_user) {
@@ -277,7 +279,7 @@ class CustomConfigurationsForm extends ConfigFormBase {
    * @param string $language
    *   Language to fetch.
    *
-   * @return \Drupal\Core\KeyValueStore\KeyValueStoreInterface
+   * @return KeyValueStoreInterface
    *   Returns db storage service.
    */
   public function getDbConfigStore($plugin_id, $language) {
@@ -292,7 +294,7 @@ class CustomConfigurationsForm extends ConfigFormBase {
    * @param string|null $language
    *   The langcode representing the current language.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Returns a fitting title.
    */
   public function getFormTitle($language = NULL) {
@@ -306,7 +308,7 @@ class CustomConfigurationsForm extends ConfigFormBase {
    * @param string|null $language
    *   The langcode representing the current language.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|mixed|null|string
+   * @return TranslatableMarkup|mixed|null|string
    *   A fitting title for the locale.
    */
   public function getLocaleTitle($language = NULL) {
diff --git a/src/Plugin/CustomConfigurations/ExampleConfigPlugin.php b/src/Plugin/CustomConfigurations/ExampleConfigPlugin.php
index b9f600c..04293c0 100644
--- a/src/Plugin/CustomConfigurations/ExampleConfigPlugin.php
+++ b/src/Plugin/CustomConfigurations/ExampleConfigPlugin.php
@@ -35,7 +35,7 @@ class ExampleConfigPlugin extends PluginBase implements CustomConfigurationsPlug
   /**
    * A helper class with useful methods pertaining to custom configurations.
    *
-   * @var \Drupal\custom_configurations\CustomConfigurationsManager
+   * @var CustomConfigurationsManager
    */
   protected $customConfigurationsManager;
 
@@ -48,7 +48,7 @@ class ExampleConfigPlugin extends PluginBase implements CustomConfigurationsPlug
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\custom_configurations\CustomConfigurationsManager $custom_configurations_manager
+   * @param CustomConfigurationsManager $custom_configurations_manager
    *   Custom configurations service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, CustomConfigurationsManager $custom_configurations_manager) {
@@ -59,7 +59,7 @@ class ExampleConfigPlugin extends PluginBase implements CustomConfigurationsPlug
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Plugin/Derivative/CustomConfigurationsLinksDerivative.php b/src/Plugin/Derivative/CustomConfigurationsLinksDerivative.php
index 39c5b77..8fee84c 100644
--- a/src/Plugin/Derivative/CustomConfigurationsLinksDerivative.php
+++ b/src/Plugin/Derivative/CustomConfigurationsLinksDerivative.php
@@ -16,14 +16,14 @@ class CustomConfigurationsLinksDerivative extends DeriverBase implements Contain
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\custom_configurations\CustomConfigurationsManager definition.
    *
-   * @var \Drupal\custom_configurations\CustomConfigurationsManager
+   * @var CustomConfigurationsManager
    */
   protected $customConfigurationsManager;
 
@@ -32,9 +32,9 @@ class CustomConfigurationsLinksDerivative extends DeriverBase implements Contain
    *
    * @param string $base_plugin_id
    *   The plugin id.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\custom_configurations\CustomConfigurationsManager $custom_configurations_manager
+   * @param CustomConfigurationsManager $custom_configurations_manager
    *   Custom configurations service.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager, CustomConfigurationsManager $custom_configurations_manager) {
diff --git a/src/Plugin/Derivative/CustomConfigurationsTasksDerivative.php b/src/Plugin/Derivative/CustomConfigurationsTasksDerivative.php
index 13898e8..4db5acb 100644
--- a/src/Plugin/Derivative/CustomConfigurationsTasksDerivative.php
+++ b/src/Plugin/Derivative/CustomConfigurationsTasksDerivative.php
@@ -17,21 +17,21 @@ class CustomConfigurationsTasksDerivative extends DeriverBase implements Contain
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Drupal\custom_configurations\CustomConfigurationsManager definition.
    *
-   * @var \Drupal\custom_configurations\CustomConfigurationsManager
+   * @var CustomConfigurationsManager
    */
   protected $customConfigurationsManager;
 
@@ -40,11 +40,11 @@ class CustomConfigurationsTasksDerivative extends DeriverBase implements Contain
    *
    * @param string $base_plugin_id
    *   The plugin id.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\custom_configurations\CustomConfigurationsManager $custom_configurations_manager
+   * @param CustomConfigurationsManager $custom_configurations_manager
    *   Custom configurations service.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, CustomConfigurationsManager $custom_configurations_manager) {
diff --git a/src/Routing/CustomConfigurationsRoutes.php b/src/Routing/CustomConfigurationsRoutes.php
index e388b49..f18e48f 100644
--- a/src/Routing/CustomConfigurationsRoutes.php
+++ b/src/Routing/CustomConfigurationsRoutes.php
@@ -17,23 +17,23 @@ class CustomConfigurationsRoutes implements ContainerInjectionInterface {
   /**
    * Drupal\custom_configurations\CustomConfigurationsManager definition.
    *
-   * @var \Drupal\custom_configurations\CustomConfigurationsManager
+   * @var CustomConfigurationsManager
    */
   protected $customConfigurationsManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Creates a ProductMenuLink instance.
    *
-   * @param \Drupal\custom_configurations\CustomConfigurationsManager $custom_configurations_manager
+   * @param CustomConfigurationsManager $custom_configurations_manager
    *   Custom configurations service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager service.
    */
   public function __construct(CustomConfigurationsManager $custom_configurations_manager, LanguageManagerInterface $language_manager) {
@@ -54,7 +54,7 @@ class CustomConfigurationsRoutes implements ContainerInjectionInterface {
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes() {
diff --git a/src/TwigExtension/CustomConfigurationsGetConfig.php b/src/TwigExtension/CustomConfigurationsGetConfig.php
index f7f0817..0cf0000 100644
--- a/src/TwigExtension/CustomConfigurationsGetConfig.php
+++ b/src/TwigExtension/CustomConfigurationsGetConfig.php
@@ -10,23 +10,23 @@ class CustomConfigurationsGetConfig extends \Twig_Extension {
   /**
    * Custom configurations manager service.
    *
-   * @var \Drupal\custom_configurations\CustomConfigurationsManager
+   * @var CustomConfigurationsManager
    */
   protected $customConfigManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\custom_configurations\CustomConfigurationsManager $custom_configurations_manager
+   * @param CustomConfigurationsManager $custom_configurations_manager
    *   Custom configurations manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager service.
    */
   public function __construct(CustomConfigurationsManager $custom_configurations_manager, LanguageManagerInterface $language_manager) {
