diff --git a/cdn.module b/cdn.module
index a6011d4..f16c77e 100644
--- a/cdn.module
+++ b/cdn.module
@@ -90,7 +90,7 @@ function cdn_editor_js_settings_alter(array &$settings) {
 
   $ckeditor_plugin_manager = \Drupal::service('plugin.manager.ckeditor.plugin');
   $root_relative_file_url = function ($uri) {
-    return file_url_transform_relative(file_create_url($uri));
+    return \Drupal::service('file_url_generator')->generateString($uri);
   };
   foreach ($settings['editor']['formats'] as $format => &$format_settings) {
     if ($format_settings['editor'] === 'ckeditor') {
diff --git a/cdn_ui/src/Form/CdnSettingsForm.php b/cdn_ui/src/Form/CdnSettingsForm.php
index f284249..eb61d5a 100644
--- a/cdn_ui/src/Form/CdnSettingsForm.php
+++ b/cdn_ui/src/Form/CdnSettingsForm.php
@@ -32,7 +32,7 @@ class CdnSettingsForm extends ValidatableConfigFormBase {
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
@@ -249,7 +249,7 @@ class CdnSettingsForm extends ValidatableConfigFormBase {
    *
    * @param string $stream_wrapper_scheme
    *   A valid stream wrapper scheme.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperInterface $stream_wrapper
+   * @param StreamWrapperInterface $stream_wrapper
    *   A stream wrapper instance.
    *
    * @return bool
diff --git a/src/Asset/CssOptimizer.php b/src/Asset/CssOptimizer.php
index 4dd593a..9a0ba21 100644
--- a/src/Asset/CssOptimizer.php
+++ b/src/Asset/CssOptimizer.php
@@ -15,12 +15,12 @@ class CssOptimizer implements AssetOptimizerInterface {
   /**
    * The decorated CSS asset optimizer service.
    *
-   * @var \Drupal\Core\Asset\AssetOptimizerInterface
+   * @var AssetOptimizerInterface
    */
   protected $decoratedCssOptimizer;
 
   /**
-   * @param \Drupal\Core\Asset\AssetOptimizerInterface $decorated_css_optimizer
+   * @param AssetOptimizerInterface $decorated_css_optimizer
    *   The decorated CSS asset optimizer service.
    */
   public function __construct(AssetOptimizerInterface $decorated_css_optimizer) {
diff --git a/src/CdnFarfutureController.php b/src/CdnFarfutureController.php
index 5ac6dc9..e83d665 100644
--- a/src/CdnFarfutureController.php
+++ b/src/CdnFarfutureController.php
@@ -19,21 +19,21 @@ class CdnFarfutureController {
   /**
    * The private key service.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   protected $privateKey;
 
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
-   * @param \Drupal\Core\PrivateKey $private_key
+   * @param PrivateKey $private_key
    *   The private key service.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
    */
   public function __construct(PrivateKey $private_key, StreamWrapperManagerInterface $stream_wrapper_manager) {
@@ -44,7 +44,7 @@ class CdnFarfutureController {
   /**
    * Serves the requested file with optimal far future expiration headers.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request. $request->query must have relative_file_url, set by
    *   \Drupal\cdn\PathProcessor\CdnFarfuturePathProcessor.
    * @param string $security_token
@@ -56,10 +56,10 @@ class CdnFarfutureController {
    * @param string $scheme
    *   The file's scheme.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse|\Symfony\Component\HttpFoundation\Response
+   * @return BinaryFileResponse|Response
    *   The response that will efficiently send the requested file.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws BadRequestHttpException
    *   Thrown when the 'relative_file_url' query argument is not set, which can
    *   only happen in case of malicious requests or in case of a malfunction in
    *   \Drupal\cdn\PathProcessor\CdnFarfuturePathProcessor.
@@ -93,7 +93,7 @@ class CdnFarfutureController {
   /**
    * Serves the requested file with optimal far future expiration headers.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request. $request->query must have root_relative_file_url,
    *   set by \Drupal\cdn\PathProcessor\CdnFarfuturePathProcessor.
    * @param string $security_token
@@ -103,10 +103,10 @@ class CdnFarfutureController {
    * @param int $mtime
    *   The file's mtime.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse|\Symfony\Component\HttpFoundation\Response
+   * @return BinaryFileResponse|Response
    *   The response that will efficiently send the requested file.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws BadRequestHttpException
    *   Thrown when the 'root_relative_file_url' query argument is not set, which
    *   can only happen in case of malicious requests or in case of a malfunction
    *   in \Drupal\cdn\PathProcessor\CdnFarfuturePathProcessor.
diff --git a/src/CdnSettings.php b/src/CdnSettings.php
index 7123789..e3a47c0 100644
--- a/src/CdnSettings.php
+++ b/src/CdnSettings.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\cdn;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Assertion\Inspector;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ConfigValueException;
@@ -18,7 +19,7 @@ class CdnSettings {
   /**
    * The CDN settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $rawSettings;
 
@@ -32,7 +33,7 @@ class CdnSettings {
   /**
    * Constructs a new CdnSettings object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ -114,7 +115,7 @@ class CdnSettings {
    *   Values are CDN domains (either string if only one, or array of strings if
    *   multiple).
    *
-   * @throws \Drupal\Core\Config\ConfigValueException
+   * @throws ConfigValueException
    *
    * @todo Abstract this out further in the future if the need arises, i.e. if
    *       more conditions besides extensions are added. For now, KISS.
diff --git a/src/EventSubscriber/ConfigSubscriber.php b/src/EventSubscriber/ConfigSubscriber.php
index 8a5b4d2..2c04ee7 100644
--- a/src/EventSubscriber/ConfigSubscriber.php
+++ b/src/EventSubscriber/ConfigSubscriber.php
@@ -20,41 +20,41 @@ class ConfigSubscriber implements EventSubscriberInterface {
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The typed config manager.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;
 
   /**
    * The Drupal kernel.
    *
-   * @var \Drupal\Core\DrupalKernelInterface
+   * @var DrupalKernelInterface
    */
   protected $drupalKernel;
 
   /**
    * The config installer.
    *
-   * @var \Drupal\Core\Config\ConfigInstallerInterface
+   * @var ConfigInstallerInterface
    */
   protected $configInstaller;
 
   /**
    * Constructs a ConfigSubscriber object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config_manager
+   * @param TypedConfigManagerInterface $typed_config_manager
    *   The typed config manager.
-   * @param \Drupal\Core\DrupalKernelInterface $drupal_kernel
+   * @param DrupalKernelInterface $drupal_kernel
    *   The Drupal kernel.
-   * @param \Drupal\Core\Config\ConfigInstallerInterface $config_installer
+   * @param ConfigInstallerInterface $config_installer
    *   The config installer.
    */
   public function __construct(CacheTagsInvalidatorInterface $cache_tags_invalidator, TypedConfigManagerInterface $typed_config_manager, DrupalKernelInterface $drupal_kernel, ConfigInstallerInterface $config_installer) {
@@ -67,7 +67,7 @@ class ConfigSubscriber implements EventSubscriberInterface {
   /**
    * Invalidates all render caches when CDN settings are modified.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The Event to process.
    */
   public function onSave(ConfigCrudEvent $event) {
@@ -99,7 +99,7 @@ class ConfigSubscriber implements EventSubscriberInterface {
   /**
    * Validates the given config.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The CDN settings configuration to validate.
    *
    * @throws \DomainException
diff --git a/src/EventSubscriber/HtmlResponseSubscriber.php b/src/EventSubscriber/HtmlResponseSubscriber.php
index f49cbd0..1b575d0 100644
--- a/src/EventSubscriber/HtmlResponseSubscriber.php
+++ b/src/EventSubscriber/HtmlResponseSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\cdn\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\cdn\CdnSettings;
 use Drupal\Core\Render\HtmlResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
@@ -13,12 +13,12 @@ class HtmlResponseSubscriber implements EventSubscriberInterface {
   /**
    * The CDN settings service.
    *
-   * @var \Drupal\cdn\CdnSettings
+   * @var CdnSettings
    */
   protected $settings;
 
   /**
-   * @param \Drupal\cdn\CdnSettings $cdn_settings
+   * @param CdnSettings $cdn_settings
    *   The CDN settings service.
    */
   public function __construct(CdnSettings $cdn_settings) {
@@ -26,10 +26,10 @@ class HtmlResponseSubscriber implements EventSubscriberInterface {
   }
 
   /**
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     $response = $event->getResponse();
     if (!$response instanceof HtmlResponse) {
       return;
@@ -48,7 +48,7 @@ class HtmlResponseSubscriber implements EventSubscriberInterface {
   /**
    * Adds DNS prefetch link headers to the HTML response.
    *
-   * @param \Drupal\Core\Render\HtmlResponse $response
+   * @param HtmlResponse $response
    *   The HTML response to update.
    *
    * @see https://www.w3.org/TR/resource-hints/#dns-prefetch
@@ -67,7 +67,7 @@ class HtmlResponseSubscriber implements EventSubscriberInterface {
   /**
    * Adds preconnect link headers to the HTML response.
    *
-   * @param \Drupal\Core\Render\HtmlResponse $response
+   * @param HtmlResponse $response
    *   The HTML response to update.
    *
    * @see https://www.w3.org/TR/resource-hints/#preconnect
diff --git a/src/File/FileUrlGenerator.php b/src/File/FileUrlGenerator.php
index e26ffa2..59c53a5 100644
--- a/src/File/FileUrlGenerator.php
+++ b/src/File/FileUrlGenerator.php
@@ -32,28 +32,28 @@ class FileUrlGenerator {
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The private key service.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   protected $privateKey;
 
   /**
    * The CDN settings service.
    *
-   * @var \Drupal\cdn\CdnSettings
+   * @var CdnSettings
    */
   protected $settings;
 
@@ -62,13 +62,13 @@ class FileUrlGenerator {
    *
    * @param string $root
    *   The app root.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\PrivateKey $private_key
+   * @param PrivateKey $private_key
    *   The private key service.
-   * @param \Drupal\cdn\CdnSettings $cdn_settings
+   * @param CdnSettings $cdn_settings
    *   The CDN settings service.
    */
   public function __construct($root, StreamWrapperManagerInterface $stream_wrapper_manager, RequestStack $request_stack, PrivateKey $private_key, CdnSettings $cdn_settings) {
diff --git a/src/PathProcessor/CdnFarfuturePathProcessor.php b/src/PathProcessor/CdnFarfuturePathProcessor.php
index ec86fb5..67484d9 100644
--- a/src/PathProcessor/CdnFarfuturePathProcessor.php
+++ b/src/PathProcessor/CdnFarfuturePathProcessor.php
@@ -40,7 +40,7 @@ class CdnFarfuturePathProcessor implements InboundPathProcessorInterface {
    *
    * @param string $path
    *   The path.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return string
@@ -62,7 +62,7 @@ class CdnFarfuturePathProcessor implements InboundPathProcessorInterface {
    *
    * @param string $path
    *   The path.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return string
diff --git a/src/Plugin/Validation/Constraint/CdnStreamWrapperConstraintValidator.php b/src/Plugin/Validation/Constraint/CdnStreamWrapperConstraintValidator.php
index cea15fe..618e1a6 100644
--- a/src/Plugin/Validation/Constraint/CdnStreamWrapperConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/CdnStreamWrapperConstraintValidator.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\cdn\Plugin\Validation\Constraint;
 
+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
 use Symfony\Component\Validator\Exception\UnexpectedTypeException;
@@ -42,7 +43,7 @@ class CdnStreamWrapperConstraintValidator extends ConstraintValidator {
    * @return bool
    */
   protected static function isValidCdnStreamWrapper(string $stream_wrapper) : bool {
-    /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager */
+    /** @var StreamWrapperManagerInterface $stream_wrapper_manager */
     $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
     $forbidden_wrappers = ['private'];
     return !in_array($stream_wrapper, $forbidden_wrappers, TRUE)
diff --git a/src/StackMiddleware/DuplicateContentPreventionMiddleware.php b/src/StackMiddleware/DuplicateContentPreventionMiddleware.php
index f49970a..d190b35 100644
--- a/src/StackMiddleware/DuplicateContentPreventionMiddleware.php
+++ b/src/StackMiddleware/DuplicateContentPreventionMiddleware.php
@@ -60,14 +60,14 @@ class DuplicateContentPreventionMiddleware implements HttpKernelInterface {
   /**
    * The decorated kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
@@ -103,9 +103,9 @@ class DuplicateContentPreventionMiddleware implements HttpKernelInterface {
   /**
    * Constructs a DuplicateContentPreventionMiddleware object.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The decorated kernel.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(HttpKernelInterface $http_kernel, RequestStack $request_stack) {
@@ -133,7 +133,7 @@ class DuplicateContentPreventionMiddleware implements HttpKernelInterface {
   /**
    * Determines whether a redirect should be performed for the current request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return bool|string
@@ -179,7 +179,7 @@ class DuplicateContentPreventionMiddleware implements HttpKernelInterface {
   /**
    * Generates a redirect URL for the given request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request.
    *
    * @return string
diff --git a/tests/src/Kernel/CdnStreamWrapperConstraintValidatorTest.php b/tests/src/Kernel/CdnStreamWrapperConstraintValidatorTest.php
index df56f77..8a9efd5 100644
--- a/tests/src/Kernel/CdnStreamWrapperConstraintValidatorTest.php
+++ b/tests/src/Kernel/CdnStreamWrapperConstraintValidatorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\cdn\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\cdn\Plugin\Validation\Constraint\CdnStreamWrapperConstraint;
 use Drupal\cdn\Plugin\Validation\Constraint\CdnStreamWrapperConstraintValidator;
 use Drupal\KernelTests\KernelTestBase;
@@ -15,6 +16,7 @@ use Symfony\Component\Validator\Violation\ConstraintViolationBuilderInterface;
  */
 class CdnStreamWrapperConstraintValidatorTest extends KernelTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
diff --git a/tests/src/Kernel/EditorFileReferenceFilterTest.php b/tests/src/Kernel/EditorFileReferenceFilterTest.php
index 09bc45c..a0bb8d7 100644
--- a/tests/src/Kernel/EditorFileReferenceFilterTest.php
+++ b/tests/src/Kernel/EditorFileReferenceFilterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\cdn\Kernel;
 
+use Drupal\filter\Plugin\FilterInterface;
 use Drupal\file\Entity\File;
 use Drupal\filter\FilterPluginCollection;
 use Drupal\KernelTests\KernelTestBase;
@@ -29,7 +30,7 @@ class EditorFileReferenceFilterTest extends KernelTestBase {
   ];
 
   /**
-   * @var \Drupal\filter\Plugin\FilterInterface[]
+   * @var FilterInterface[]
    */
   protected $filters;
 
diff --git a/tests/src/Unit/CdnSettingsTest.php b/tests/src/Unit/CdnSettingsTest.php
index 9d5f8b4..8b42b64 100644
--- a/tests/src/Unit/CdnSettingsTest.php
+++ b/tests/src/Unit/CdnSettingsTest.php
@@ -381,7 +381,7 @@ class CdnSettingsTest extends UnitTestCase {
    * @param array $raw_config
    *   The raw config for the cdn.settings.yml config.
    *
-   * @return \Drupal\cdn\CdnSettings
+   * @return CdnSettings
    *   The CdnSettings object to test.
    */
   protected function createCdnSettings(array $raw_config) {
diff --git a/tests/src/Unit/File/FileUrlGeneratorTest.php b/tests/src/Unit/File/FileUrlGeneratorTest.php
index 1706e51..a77c02f 100644
--- a/tests/src/Unit/File/FileUrlGeneratorTest.php
+++ b/tests/src/Unit/File/FileUrlGeneratorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\cdn\Unit\File;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\cdn\CdnSettings;
 use Drupal\cdn\File\FileUrlGenerator;
 use Drupal\Component\Utility\Crypt;
@@ -23,6 +24,7 @@ use Symfony\Component\HttpFoundation\RequestStack;
  */
 class FileUrlGeneratorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The private key to use in tests.
    *
@@ -295,7 +297,7 @@ class FileUrlGeneratorTest extends UnitTestCase {
    * @param array $raw_config
    *   The raw config for the cdn.settings.yml config.
    *
-   * @return \Drupal\cdn\File\FileUrlGenerator
+   * @return FileUrlGenerator
    *   The FileUrlGenerator to test.
    */
   protected function createFileUrlGenerator($base_path, array $raw_config) {
diff --git a/tests/src/Unit/Plugin/Validation/Constraint/CdnDomainConstraintValidatorTest.php b/tests/src/Unit/Plugin/Validation/Constraint/CdnDomainConstraintValidatorTest.php
index 5841ac9..1a3bcac 100644
--- a/tests/src/Unit/Plugin/Validation/Constraint/CdnDomainConstraintValidatorTest.php
+++ b/tests/src/Unit/Plugin/Validation/Constraint/CdnDomainConstraintValidatorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\cdn\Unit\Plugin\Validation\Constraint;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\cdn\Plugin\Validation\Constraint\CdnDomainConstraint;
 use Drupal\cdn\Plugin\Validation\Constraint\CdnDomainConstraintValidator;
 use Drupal\Tests\UnitTestCase;
@@ -15,6 +16,7 @@ use Symfony\Component\Validator\Violation\ConstraintViolationBuilderInterface;
  */
 class CdnDomainConstraintValidatorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::validate
    *
diff --git a/tests/src/Unit/Plugin/Validation/Constraint/CdnSchemeConstraintValidatorTest.php b/tests/src/Unit/Plugin/Validation/Constraint/CdnSchemeConstraintValidatorTest.php
index 6d21e8b..91e9aca 100644
--- a/tests/src/Unit/Plugin/Validation/Constraint/CdnSchemeConstraintValidatorTest.php
+++ b/tests/src/Unit/Plugin/Validation/Constraint/CdnSchemeConstraintValidatorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\cdn\Unit\Plugin\Validation\Constraint;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\cdn\Plugin\Validation\Constraint\CdnSchemeConstraint;
 use Drupal\cdn\Plugin\Validation\Constraint\CdnSchemeConstraintValidator;
 use Drupal\Tests\UnitTestCase;
@@ -15,6 +16,7 @@ use Symfony\Component\Validator\Violation\ConstraintViolationBuilderInterface;
  */
 class CdnSchemeConstraintValidatorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::validate
    *
diff --git a/tests/src/Unit/StackMiddleware/DuplicateContentPreventionMiddlewareTest.php b/tests/src/Unit/StackMiddleware/DuplicateContentPreventionMiddlewareTest.php
index 3f26176..15862cf 100644
--- a/tests/src/Unit/StackMiddleware/DuplicateContentPreventionMiddlewareTest.php
+++ b/tests/src/Unit/StackMiddleware/DuplicateContentPreventionMiddlewareTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\cdn\Unit\StackMiddleware;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\cdn\StackMiddleware\DuplicateContentPreventionMiddleware;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Utility\UnroutedUrlAssemblerInterface;
@@ -21,6 +22,7 @@ use Symfony\Component\HttpKernel\HttpKernelInterface;
  */
 class DuplicateContentPreventionMiddlewareTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::handle
    * @covers ::getRedirectUrl
