diff --git a/src/Plugin/views/field/View.php b/src/Plugin/views/field/View.php
index 2115af0..f253b6f 100644
--- a/src/Plugin/views/field/View.php
+++ b/src/Plugin/views/field/View.php
@@ -20,7 +20,7 @@ class View extends FieldPluginBase {
   /**
    * The configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
@@ -33,7 +33,7 @@ class View extends FieldPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The configuration object.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ImmutableConfig $config) {
@@ -291,9 +291,9 @@ class View extends FieldPluginBase {
    *
    * @param string $token
    *  The token string. E.g. explode(',', $this->options['args']);
-   * @param \Drupal\views\ResultRow $values
+   * @param ResultRow $values
    *  The values retrieved from a single row of a view's query result.
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *  The full view object to get token values from.
    *
    * @return array
diff --git a/tests/src/Functional/ViewFieldUITest.php b/tests/src/Functional/ViewFieldUITest.php
index 7e55ec8..81a7ea6 100644
--- a/tests/src/Functional/ViewFieldUITest.php
+++ b/tests/src/Functional/ViewFieldUITest.php
@@ -43,7 +43,7 @@ class ViewFieldUITest extends UITestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views = TRUE);
 
     ViewTestData::createTestViews(get_class($this), ['views_field_view_test_config']);
@@ -57,18 +57,18 @@ class ViewFieldUITest extends UITestBase {
     $this->clickLink('Global: View (View)');
 
     $result = $this->cssSelect('details#edit-options-available-tokens div.item-list li');
-    $this->assertEqual(10, count($result));
+    $this->assertEquals(10, count($result));
 
-    $this->assertEqual('{{ raw_fields.id }} == Views test: ID (raw)', $result[0]->getText());
-    $this->assertEqual('{{ fields.id }} == Views test: ID (rendered)', $result[1]->getText());
-    $this->assertEqual('{{ raw_fields.id_1 }} == Views test: ID (raw)', $result[2]->getText());
-    $this->assertEqual('{{ fields.id_1 }} == Views test: ID (rendered)', $result[3]->getText());
-    $this->assertEqual('{{ raw_fields.name }} == Views test: Name (raw)', $result[4]->getText());
-    $this->assertEqual('{{ fields.name }} == Views test: Name (rendered)', $result[5]->getText());
-    $this->assertEqual('{{ raw_fields.view }} == Global: View (raw)', $result[6]->getText());
-    $this->assertEqual('{{ fields.view }} == Global: View (rendered)', $result[7]->getText());
-    $this->assertEqual('{{ arguments.null }} == Global: Null title', $result[8]->getText());
-    $this->assertEqual('{{ raw_arguments.null }} == Global: Null input', $result[9]->getText());
+    $this->assertEquals('{{ raw_fields.id }} == Views test: ID (raw)', $result[0]->getText());
+    $this->assertEquals('{{ fields.id }} == Views test: ID (rendered)', $result[1]->getText());
+    $this->assertEquals('{{ raw_fields.id_1 }} == Views test: ID (raw)', $result[2]->getText());
+    $this->assertEquals('{{ fields.id_1 }} == Views test: ID (rendered)', $result[3]->getText());
+    $this->assertEquals('{{ raw_fields.name }} == Views test: Name (raw)', $result[4]->getText());
+    $this->assertEquals('{{ fields.name }} == Views test: Name (rendered)', $result[5]->getText());
+    $this->assertEquals('{{ raw_fields.view }} == Global: View (raw)', $result[6]->getText());
+    $this->assertEquals('{{ fields.view }} == Global: View (rendered)', $result[7]->getText());
+    $this->assertEquals('{{ arguments.null }} == Global: Null title', $result[8]->getText());
+    $this->assertEquals('{{ raw_arguments.null }} == Global: Null input', $result[9]->getText());
   }
 
 }
diff --git a/tests/src/Kernel/ViewFieldUnitTest.php b/tests/src/Kernel/ViewFieldUnitTest.php
index 30f3793..390adce 100644
--- a/tests/src/Kernel/ViewFieldUnitTest.php
+++ b/tests/src/Kernel/ViewFieldUnitTest.php
@@ -38,7 +38,7 @@ class ViewFieldUnitTest extends ViewsKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
 
     ViewTestData::createTestViews(get_class($this), ['views_field_view_test_config']);
diff --git a/views_field_view.info.yml b/views_field_view.info.yml
index 0ca49d3..994a874 100644
--- a/views_field_view.info.yml
+++ b/views_field_view.info.yml
@@ -1,8 +1,7 @@
 name: 'Views Field View'
 type: module
 description: 'Adds a view field handler to embed views inside views.'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: Views
 dependencies:
   - drupal:views
