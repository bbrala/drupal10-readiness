modules/contrib/new_relic_rpm/new_relic_rpm.install
modules/contrib/new_relic_rpm/new_relic_rpm.module
modules/contrib/new_relic_rpm/src/Client/NewRelicApiClient.php
modules/contrib/new_relic_rpm/src/Commands/NewRelicRpmCommands.php
modules/contrib/new_relic_rpm/src/EventSubscriber/ExceptionSubscriber.php
modules/contrib/new_relic_rpm/src/EventSubscriber/NewRelicConfigSubscriber.php
modules/contrib/new_relic_rpm/src/EventSubscriber/NewRelicRequestSubscriber.php
modules/contrib/new_relic_rpm/src/EventSubscriber/RoutingTransactionNameSubscriber.php
modules/contrib/new_relic_rpm/src/ExtensionAdapter/AdapterFactory.php
modules/contrib/new_relic_rpm/src/ExtensionAdapter/ExtensionAdapter.php
modules/contrib/new_relic_rpm/src/ExtensionAdapter/NewRelicAdapterInterface.php
modules/contrib/new_relic_rpm/src/ExtensionAdapter/NullAdapter.php
modules/contrib/new_relic_rpm/src/Form/NewRelicRpmDeploy.php
modules/contrib/new_relic_rpm/src/Form/NewRelicRpmSettings.php
modules/contrib/new_relic_rpm/src/Logger/NewRelicLogger.php
modules/contrib/new_relic_rpm/src/RouteEnhancer/TransactionNameEnhancer.php
modules/contrib/new_relic_rpm/tests/src/Functional/AdminUiTest.php
modules/contrib/new_relic_rpm/tests/src/Unit/EventListener/RoutingTransactionNameSubscriberTest.php
modules/contrib/new_relic_rpm/tests/src/Unit/Logger/NewRelicLoggerTest.php
modules/contrib/new_relic_rpm/tests/src/Unit/RouteEnhancer/TransactionNameEnhancerTest.php

14 files with changes
=====================

1) modules/contrib/new_relic_rpm/tests/src/Unit/RouteEnhancer/TransactionNameEnhancerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\new_relic_rpm\Unit\RouteEnhancer;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Controller\ControllerResolverInterface;
 use Drupal\new_relic_rpm\RouteEnhancer\TransactionNameEnhancer;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class TransactionNameEnhancerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Test callback for _translation_name_callback with known response.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/new_relic_rpm/tests/src/Unit/Logger/NewRelicLoggerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\new_relic_rpm\Unit\Logger;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Logger\LogMessageParser;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface;
@@ @@
  */
 class NewRelicLoggerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The default request context for tests.
    *
@@ @@
   /**
    * Get a preconfigured logger.
    *
-   * @param \Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface $adapter
+   * @param NewRelicAdapterInterface $adapter
    *   The adapter to use.
    * @param array $levels
    *   The log levels to report.
    *
-   * @return \Drupal\new_relic_rpm\Logger\NewRelicLogger
+   * @return NewRelicLogger
    *   A new logger instance.
    */
   private function getLogger(NewRelicAdapterInterface $adapter, array $levels = []) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/new_relic_rpm/tests/src/Unit/EventListener/RoutingTransactionNameSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\new_relic_rpm\Unit\EventListener;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Routing\RouteBuildEvent;
 use Drupal\new_relic_rpm\EventSubscriber\RoutingTransactionNameSubscriber;
@@ @@
  */
 class RoutingTransactionNameSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers ::addTransactionNamesToRoutes
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/new_relic_rpm/tests/src/Functional/AdminUiTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\new_relic_rpm\Functional;

+use Drupal\Tests\WebAssert;
+use Behat\Mink\Element\DocumentElement;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The WebAssert.
    *
-   * @var \Drupal\Tests\WebAssert
+   * @var WebAssert
    */
   private $assert;

@@ @@
   /**
    * The DocumentElement.
    *
-   * @var \Behat\Mink\Element\DocumentElement
+   * @var DocumentElement
    */
   private $page;

@@ @@
   /**
    * {@inheritDoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $admin = $this->createUser([], NULL, TRUE);
@@ @@

   /**
    * Tests the settings page elements.
+   * @doesNotPerformAssertions
    */
   public function testSettingsPage() {
     $this->drupalGet('/admin/config/development/new-relic');
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/new_relic_rpm/src/RouteEnhancer/TransactionNameEnhancer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\new_relic_rpm\RouteEnhancer;

+use Symfony\Component\Routing\Route;
 use Drupal\Core\Controller\ControllerResolverInterface;
 use Drupal\Core\Routing\EnhancerInterface;
 use Symfony\Cmf\Component\Routing\RouteObjectInterface;
@@ @@
   /**
    * Controller resolver service.
    *
-   * @var \Drupal\Core\Controller\ControllerResolverInterface
+   * @var ControllerResolverInterface
    */
   private $controllerResolver;

@@ @@
   /**
    * Argument resolver service.
    *
-   * @var \Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface
+   * @var ArgumentResolverInterface
    */
   private $argumentResolver;

@@ @@
    */
   public function enhance(array $defaults, Request $request) {

-    /** @var \Symfony\Component\Routing\Route $route */
+    /** @var Route $route */
     $route = $defaults[RouteObjectInterface::ROUTE_OBJECT];
     if (!$route->hasDefault('_transaction_name_callback')) {
       return $defaults;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/new_relic_rpm/src/Logger/NewRelicLogger.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The message's placeholders parser.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected $parser;

@@ @@
   /**
    * The Adapter for the New Relic extension.
    *
-   * @var \Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface
+   * @var NewRelicAdapterInterface
    */
   protected $adapter;

@@ @@
   /**
    * The configuration factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a DbLog object.
    *
-   * @param \Drupal\Core\Logger\LogMessageParserInterface $parser
+   * @param LogMessageParserInterface $parser
    *   The parser to use when extracting message variables.
-   * @param \Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface $adapter
+   * @param NewRelicAdapterInterface $adapter
    *   The new relic adapter.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory used to read new relic settings.
    */
   public function __construct(LogMessageParserInterface $parser, NewRelicAdapterInterface $adapter, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/new_relic_rpm/src/Form/NewRelicRpmDeploy.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The new relic HTTP cilent.
    *
-   * @var \Drupal\new_relic_rpm\Client\NewRelicApiClient
+   * @var NewRelicApiClient
    */
   protected $newRelicClient;

@@ @@
   /**
    * NewRelicRpmDeploy constructor.
    *
-   * @param \Drupal\new_relic_rpm\Client\NewRelicApiClient $new_relic_client
+   * @param NewRelicApiClient $new_relic_client
    *   The new relic HTTP client.
    */
   public function __construct(NewRelicApiClient $new_relic_client) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/new_relic_rpm/src/ExtensionAdapter/AdapterFactory.php:12

    ---------- begin diff ----------
@@ @@
    * If the extension is not enabled, a null implementation is returned
    * to prevent errors.
    *
-   * @return \Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface
+   * @return NewRelicAdapterInterface
    *   The new relic adapter.
    */
   public static function getAdapter() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/new_relic_rpm/src/EventSubscriber/NewRelicRequestSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\new_relic_rpm\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Path\PathMatcherInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ @@
   /**
    * New Relic adapter.
    *
-   * @var \Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface
+   * @var NewRelicAdapterInterface
    */
   protected $adapter;

@@ @@
   /**
    * The object we use for matching paths.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * An object representing the current URL path of the request.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPathStack;

@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a subscriber.
    *
-   * @param \Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface $adapter
+   * @param NewRelicAdapterInterface $adapter
    *   The Adapter that we use to talk to the New Relic extension.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The object we use for matching paths.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The object we use to get our settings.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path_stack
+   * @param CurrentPathStack $current_path_stack
    *   An object representing the current URL path of the request.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   An object representing the current user.
    */
   public function __construct(NewRelicAdapterInterface $adapter, PathMatcherInterface $path_matcher, ConfigFactoryInterface $config_factory, CurrentPathStack $current_path_stack, AccountInterface $current_user) {
@@ @@
    *
    * Naming is based on the current path and route.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The current response event for the page.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {

     // If this is a sub request, only process it if there was no master
     // request yet. In that case, it is probably a page not found or access
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/new_relic_rpm/src/EventSubscriber/NewRelicConfigSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\new_relic_rpm\EventSubscriber;

+use Drupal\new_relic_rpm\Client\NewRelicApiClient;
 use Drupal\Core\Config\ConfigEvents;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ConfigImporterEvent;
@@ @@
   /**
    * New Relic adapter.
    *
-   * @var \Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface
+   * @var NewRelicAdapterInterface
    */
   protected $adapter;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a NewRelicConfigSubscriber.
    *
-   * @param \Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface $adapter
+   * @param NewRelicAdapterInterface $adapter
    *   The Adapter that we use to talk to the New Relic extension.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The object we use to get our settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The currently logged in user.
    */
   public function __construct(NewRelicAdapterInterface $adapter, ConfigFactoryInterface $config_factory, AccountInterface $current_user) {
@@ @@
   /**
    * Attempts to create a deployment on New Relic when a config import happens.
    *
-   * @param \Drupal\Core\Config\ConfigImporterEvent $event
+   * @param ConfigImporterEvent $event
    *   The current config event that we are responding to.
    */
   public function onImport(ConfigImporterEvent $event) {
@@ @@
       }
     }

-    /** @var \Drupal\new_relic_rpm\Client\NewRelicApiClient $client */
+    /** @var NewRelicApiClient $client */
     $client = \Drupal::service('new_relic_rpm.client');
     $client->createDeployment('config_import', $description, $name, $changelog);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/new_relic_rpm/src/EventSubscriber/ExceptionSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\new_relic_rpm\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ @@
   /**
    * New Relic adapter.
    *
-   * @var \Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface
+   * @var NewRelicAdapterInterface
    */
   protected $adapter;

@@ @@
   /**
    * Constructs a subscriber.
    *
-   * @param \Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface $adapter
+   * @param NewRelicAdapterInterface $adapter
    *   The Adapter to use when talking to the New Relic extension.
    */
   public function __construct(NewRelicAdapterInterface $adapter) {
@@ @@
   /**
    * Handles errors for this subscriber.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The event to process.
    */
-  public function onException(GetResponseForExceptionEvent $event) {
+  public function onException(ExceptionEvent $event) {
     // Don't log http exceptions.
-    if ($event->getException() instanceof HttpExceptionInterface) {
+    if ($event->getThrowable() instanceof HttpExceptionInterface) {
       return;
     }
     if (\Drupal::config('new_relic_rpm.settings')->get('override_exception_handler')) {
       // Forward the exception to New Relic.
-      $this->adapter->logException($event->getException());
+      $this->adapter->logException($event->getThrowable());
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/new_relic_rpm/src/Commands/NewRelicRpmCommands.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Newrelic API client.
    *
-   * @var \Drupal\new_relic_rpm\Client\NewRelicApiClient
+   * @var NewRelicApiClient
    */
   protected $apiClient;

@@ @@
   /**
    * New Relic adapter.
    *
-   * @var \Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface
+   * @var NewRelicAdapterInterface
    */
   protected $adapter;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * NewRelicRpmCommands constructor.
    *
-   * @param \Drupal\new_relic_rpm\Client\NewRelicApiClient $api_client
+   * @param NewRelicApiClient $api_client
    *   Newrelic API client.
-   * @param \Drupal\new_relic_rpm\ExtensionAdapter\NewRelicAdapterInterface $adapter
+   * @param NewRelicAdapterInterface $adapter
    *   Newrelic adapter.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal config factory.
    */
   public function __construct(NewRelicApiClient $api_client, NewRelicAdapterInterface $adapter, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/new_relic_rpm/src/Client/NewRelicApiClient.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\new_relic_rpm\Client;

+use Drupal\Core\Config\ImmutableConfig;
+use Psr\Log\LoggerInterface;
+use Psr\Http\Message\ResponseInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * The serialisation JSON service.
    *
-   * @var \Drupal\Component\Serialization\Json
+   * @var Json
    */
   protected $parser;

@@ @@
   /**
    * The http_client service.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * A loaded config object for new_relic_rpm.settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * A logger service instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a new NewRelicApiClient.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory so we can load config that we need.
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   The http client to send requests to newrelic.
-   * @param \Drupal\Component\Serialization\Json $serialization_json
+   * @param Json $serialization_json
    *   Decoding the returned result from newrelic.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   For logging notifications to Drupal.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Client $http_client, Json $serialization_json, LoggerChannelFactoryInterface $logger_factory, TranslationInterface $string_translation) {
@@ @@
    * @return array
    *   An array of application details.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function listApplications($name = NULL) {
     $filters = [];
@@ @@
    * @param string $method
    *   The request method.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response from the API request.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function request($uri, array $options = [], $method = 'GET') {
     $options = array_merge([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/new_relic_rpm/new_relic_rpm.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\new_relic_rpm\Client\NewRelicApiClient;
 /**
  * @file
  * Drupal module implementing New Relic.
@@ @@
     ':modules' => implode(', ', $modules),
   ]);

-  /** @var \Drupal\new_relic_rpm\Client\NewRelicApiClient $client */
+  /** @var NewRelicApiClient $client */
   $client = \Drupal::service('new_relic_rpm.client');
   $client->createDeployment('module_change', $description->render());
 }
@@ @@
 /**
  * The unique name for the timer based on view details.
  *
- * @param \Drupal\views\ViewExecutable $view
+ * @param ViewExecutable $view
  *   The view to create the timer for.
  *
  * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 14 files have been changed by Rector                                      

