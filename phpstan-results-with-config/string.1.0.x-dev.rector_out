modules/contrib/string/modules/string_demo/src/Controller/StringDemoController.php
modules/contrib/string/modules/string_demo/string_demo.module
modules/contrib/string/src/Form/ExportForm.php
modules/contrib/string/src/Form/StringEditForm.php
modules/contrib/string/src/StringGroupManager.php
modules/contrib/string/src/StringManager.php
modules/contrib/string/src/StringPluralTranslatableMarkup.php
modules/contrib/string/src/Translator/StringTranslation.php
modules/contrib/string/string.module

7 files with changes
====================

1) modules/contrib/string/string.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * @file
  * Contains strings.module.
@@ @@
  *     belongs to. See the @link i18n Internationalization topic @endlink for
  *     more information about string contexts.
  *
- * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return TranslatableMarkup
  *   An object that, when cast to a string, returns the translated string.
  *
  * @see \Drupal\Component\Render\FormattableMarkup::placeholderFormat()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/string/src/Translator/StringTranslation.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a StaticTranslation object.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(FileSystemInterface $file_system = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/string/src/StringPluralTranslatableMarkup.php:28

    ---------- begin diff ----------
@@ @@
     ];
     // @todo Interpret formula based on language.
     // Find a better way to solve this, however, php's eval is not an option.
-    $index = render($item);
+    $index = \Drupal::service('renderer')->render($item);
     return (string) $index;
   }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/string/src/StringManager.php:26

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
    */
   public function __construct(\Traversable $namespaces, ModuleHandlerInterface $module_handler, CacheBackendInterface $cache_backend) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/string/src/StringGroupManager.php:24

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
    */
   public function __construct(\Traversable $namespaces, ModuleHandlerInterface $module_handler, CacheBackendInterface $cache_backend) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/string/src/Form/StringEditForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\string\StringManager definition.
    *
-   * @var \Drupal\string\StringManager
+   * @var StringManager
    */
   protected $pluginManagerString;
   /**
    * Drupal\string\StringManager definition.
    *
-   * @var \Drupal\string\StringGroupManager
+   * @var StringGroupManager
    */
   protected $pluginManagerStringGroup;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/string/src/Form/ExportForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\string\Form;

+use Drupal\language\ConfigurableLanguageManagerInterface;
+use Drupal\Core\Plugin\Context\ContextProviderInterface;
+use Drupal\string\StringManager;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\file\FileInterface;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Drupal\language\ConfigurableLanguageManagerInterface definition.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Drupal\Core\Plugin\Context\ContextProviderInterface definition.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextProviderInterface
+   * @var ContextProviderInterface
    */
   protected $languageCurrentLanguageContext;

@@ @@
   /**
    * Drupal\string\StringManager definition.
    *
-   * @var \Drupal\string\StringManager
+   * @var StringManager
    */
   protected $string;

@@ @@
   /**
    * Drupal\Core\Logger\LoggerChannelInterface definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerChannelDefault;

@@ @@
    * @param string $content
    *   Content of file to be saved.
    *
-   * @return \Drupal\file\FileInterface|false|\PHPUnit\Framework\MockObject\MockObject
+   * @return FileInterface|false|MockObject
    *   File that has been saved.
    */
   protected function saveFile(string $content) {
     // @todo Make this configurable.
     $destination = 'public://string.pot';
-    $file = file_save_data(
-      $content,
-      $destination,
-      FileSystemInterface::EXISTS_REPLACE
-    );
+    $file = \Drupal::service('file.repository')->writeData($content, $destination, FileSystemInterface::EXISTS_REPLACE);
     return $file;
   }
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

