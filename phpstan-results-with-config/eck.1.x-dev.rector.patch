diff --git a/eck.install b/eck.install
index bb68d4d..6535c6f 100644
--- a/eck.install
+++ b/eck.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\eck\Entity\EckEntityType;
 /**
  * @file
  */
@@ -60,7 +61,7 @@ function eck_update_8003() {
  */
 function eck_update_8004() {
   $schema = Drupal::database()->schema();
-  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $entityDefinitionUpdateManager */
+  /** @var EntityDefinitionUpdateManagerInterface $entityDefinitionUpdateManager */
   $entityDefinitionUpdateManager = Drupal::service('entity.definition_update_manager');
   $entityTypeManager = Drupal::entityTypeManager();
   $eckEntityTypes = $entityTypeManager
@@ -73,7 +74,7 @@ function eck_update_8004() {
     'not null' => TRUE,
   ];
 
-  /** @var \Drupal\eck\Entity\EckEntityType $entity_type */
+  /** @var EckEntityType $entity_type */
   foreach ($eckEntityTypes as $machineName => $entity_type) {
     $entityTypeDefinition = $entityTypeManager->getDefinition($machineName);
 
diff --git a/eck.module b/eck.module
index 04a8d20..c16ec3c 100644
--- a/eck.module
+++ b/eck.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\eck\EckEntityTypeBundleInfo;
+use Drupal\migrate\Plugin\MigrationPluginManager;
+use Drupal\migrate\Plugin\MigrateSourcePluginManager;
 /**
  * @file
  * Contains hook implementations.
@@ -181,7 +184,7 @@ function eck_entity_type_build(array &$entity_types) {
 function eck_menu_local_actions_alter(&$local_actions) {
   $eck_types = EckEntityType::loadMultiple();
 
-  /** @var \Drupal\eck\EckEntityTypeBundleInfo $eckBundleInfo */
+  /** @var EckEntityTypeBundleInfo $eckBundleInfo */
   $eckBundleInfo = Drupal::service('eck.entity_type.bundle.info');
 
   $defaults = [
@@ -258,7 +261,7 @@ function eck_theme() {
  * Implements hook_theme_suggestions_HOOK().
  */
 function eck_theme_suggestions_eck_entity(array $variables) {
-  /** @var \Drupal\eck\Entity\EckEntity $entity */
+  /** @var EckEntity $entity */
   $entity = $variables['elements']['#eck_entity'];
   $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
 
@@ -349,10 +352,10 @@ function eck_migration_plugins_alter(array &$migrations) {
       continue;
     }
 
-    /** @var \Drupal\migrate\Plugin\MigrationPluginManager $migration_plugin_manager */
+    /** @var MigrationPluginManager $migration_plugin_manager */
     $migration_plugin_manager = \Drupal::service('plugin.manager.migration');
     $migration_stub = $migration_plugin_manager->createStubMigration($migration);
-    /** @var \Drupal\migrate\Plugin\MigrateSourcePluginManager $source_plugin_manager */
+    /** @var MigrateSourcePluginManager $source_plugin_manager */
     $source_plugin_manager = \Drupal::service('plugin.manager.migrate.source');
     $source = NULL;
     $configuration = $migration['source'];
diff --git a/src/Access/EckEntityCreateAccessCheck.php b/src/Access/EckEntityCreateAccessCheck.php
index 0bd1eb5..f48df2b 100644
--- a/src/Access/EckEntityCreateAccessCheck.php
+++ b/src/Access/EckEntityCreateAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eck\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -16,14 +17,14 @@ class EckEntityCreateAccessCheck implements AccessInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs an EckEntityCreateAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -33,14 +34,14 @@ class EckEntityCreateAccessCheck implements AccessInterface {
   /**
    * Checks access to the eck entity add page for the entity bundle type.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\eck\EckEntityTypeInterface $eck_entity_type
+   * @param EckEntityTypeInterface $eck_entity_type
    *   The entity type.
    * @param string $eck_entity_bundle
    *   (optional) The entity type bundle.
    *
-   * @return bool|AccessResult|\Drupal\Core\Access\AccessResultInterface
+   * @return bool|AccessResult|AccessResultInterface
    *   A \Drupal\Core\Access\AccessInterface constant value.
    */
   public function access(AccountInterface $account, EckEntityTypeInterface $eck_entity_type, $eck_entity_bundle = NULL) {
diff --git a/src/Controller/EckContentController.php b/src/Controller/EckContentController.php
index a8ec579..07ba08f 100644
--- a/src/Controller/EckContentController.php
+++ b/src/Controller/EckContentController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eck\Controller;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Render\RendererInterface;
@@ -20,14 +21,14 @@ class EckContentController extends ControllerBase implements ContainerInjectionI
   /**
    * The render service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructs an EckContentController object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(RendererInterface $renderer) {
@@ -46,7 +47,7 @@ class EckContentController extends ControllerBase implements ContainerInjectionI
   /**
    * Displays add content link for available entity types.
    *
-   * @param \Drupal\eck\EckEntityTypeInterface $eck_entity_type
+   * @param EckEntityTypeInterface $eck_entity_type
    *   The request parameters.
    *
    * @return array
@@ -55,7 +56,7 @@ class EckContentController extends ControllerBase implements ContainerInjectionI
   public function addPage(EckEntityTypeInterface $eck_entity_type) {
     $content = [];
     $bundleStorage = $this->getBundleStorage($eck_entity_type);
-    /** @var \Drupal\eck\Entity\EckEntityBundle $bundle */
+    /** @var EckEntityBundle $bundle */
     foreach ($bundleStorage->loadMultiple() as $bundle) {
       if ($this->entityTypeManager()
         ->getAccessControlHandler($eck_entity_type->id())
@@ -78,7 +79,7 @@ class EckContentController extends ControllerBase implements ContainerInjectionI
   /**
    * Provides the entity submission form.
    *
-   * @param \Drupal\eck\EckEntityTypeInterface $eck_entity_type
+   * @param EckEntityTypeInterface $eck_entity_type
    *   The entity type.
    * @param string $eck_entity_bundle
    *   The entity type bundle.
@@ -102,7 +103,7 @@ class EckContentController extends ControllerBase implements ContainerInjectionI
   /**
    * Title callback for add page.
    *
-   * @param \Drupal\eck\EckEntityTypeInterface $eck_entity_type
+   * @param EckEntityTypeInterface $eck_entity_type
    *   The entity type.
    *
    * @return string
@@ -129,10 +130,10 @@ class EckContentController extends ControllerBase implements ContainerInjectionI
   /**
    * Retrieves the bundle storage for the given entity type.
    *
-   * @param \Drupal\eck\EckEntityTypeInterface $eck_entity_type
+   * @param EckEntityTypeInterface $eck_entity_type
    *   The entity type.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The bundle storage.
    */
   private function getBundleStorage(EckEntityTypeInterface $eck_entity_type) {
diff --git a/src/Controller/EckEntityBundleListBuilder.php b/src/Controller/EckEntityBundleListBuilder.php
index 5f4e1d7..dd8b286 100644
--- a/src/Controller/EckEntityBundleListBuilder.php
+++ b/src/Controller/EckEntityBundleListBuilder.php
@@ -24,18 +24,18 @@ class EckEntityBundleListBuilder extends ConfigEntityListBuilder {
   /**
    * The url generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * Constructs a EckEntityBundleListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, UrlGeneratorInterface $url_generator) {
diff --git a/src/Controller/EckEntityTypeListBuilder.php b/src/Controller/EckEntityTypeListBuilder.php
index 43effa5..630b8ed 100644
--- a/src/Controller/EckEntityTypeListBuilder.php
+++ b/src/Controller/EckEntityTypeListBuilder.php
@@ -20,7 +20,7 @@ class EckEntityTypeListBuilder extends ConfigEntityListBuilder {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -28,7 +28,7 @@ class EckEntityTypeListBuilder extends ConfigEntityListBuilder {
   /**
    * EckEntityTypeBundleInfo service.
    *
-   * @var \Drupal\eck\EckEntityTypeBundleInfo
+   * @var EckEntityTypeBundleInfo
    */
   protected $eckBundleInfo;
 
@@ -46,11 +46,11 @@ class EckEntityTypeListBuilder extends ConfigEntityListBuilder {
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\eck\EckEntityTypeBundleInfo $bundle_info
+   * @param EckEntityTypeBundleInfo $bundle_info
    *   ECK Entity Bundle Info service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, EckEntityTypeBundleInfo $bundle_info) {
diff --git a/src/EckEntityAccessControlHandler.php b/src/EckEntityAccessControlHandler.php
index 4df288f..802ba31 100644
--- a/src/EckEntityAccessControlHandler.php
+++ b/src/EckEntityAccessControlHandler.php
@@ -19,7 +19,7 @@ class EckEntityAccessControlHandler extends EntityAccessControlHandler {
   /**
    * Determines if the given account is allowed to bypass access control.
    *
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The account.
    *
    * @return bool
@@ -36,7 +36,7 @@ class EckEntityAccessControlHandler extends EntityAccessControlHandler {
    * @param bool $return_as_object
    *   Should a bool or AccessResult object be returned?
    *
-   * @return \Drupal\Core\Access\AccessResult|bool
+   * @return AccessResult|bool
    *   The created access result.
    */
   private function getBypassAccessResult($return_as_object) {
diff --git a/src/Entity/EckEntityType.php b/src/Entity/EckEntityType.php
index f8fef23..f5b39d3 100644
--- a/src/Entity/EckEntityType.php
+++ b/src/Entity/EckEntityType.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\eck\Entity;
 
+use Drupal\field\FieldConfigInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\eck\EckEntityTypeInterface;
@@ -130,10 +133,10 @@ class EckEntityType extends ConfigEntityBase implements EckEntityTypeInterface {
    * @param string $target_entity_type_id
    *   The entity type id created by ECK.
    *
-   * @return \Drupal\field\FieldConfigInterface[]
+   * @return FieldConfigInterface[]
    *   Returns loaded config fields entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public static function loadReferenceFieldsByType($target_entity_type_id) {
     $entity_manager = \Drupal::entityTypeManager();
@@ -141,7 +144,7 @@ class EckEntityType extends ConfigEntityBase implements EckEntityTypeInterface {
     $fields_array = \Drupal::service('entity_field.manager')->getFieldMapByFieldType('entity_reference');
     $field_storage = $entity_manager->getStorage('field_config');
 
-    /** @var \Drupal\field\FieldConfigInterface[] $fields_list */
+    /** @var FieldConfigInterface[] $fields_list */
     $fields_list = $list = [];
 
     // Get list of fields with type entity_reference.
@@ -200,7 +203,7 @@ class EckEntityType extends ConfigEntityBase implements EckEntityTypeInterface {
    * @param string $channel
    *   The name of the channel.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The logger for this channel.
    */
   protected function logger($channel) {
diff --git a/src/EntityUpdateService.php b/src/EntityUpdateService.php
index 59bd482..ef6932a 100644
--- a/src/EntityUpdateService.php
+++ b/src/EntityUpdateService.php
@@ -19,59 +19,59 @@ class EntityUpdateService {
   /**
    * The entity definition update manager.
    *
-   * @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface
+   * @var EntityDefinitionUpdateManagerInterface
    */
   private $entityDefinitionUpdateManager;
 
   /**
    * The last installed schema repository.
    *
-   * @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface
+   * @var EntityLastInstalledSchemaRepositoryInterface
    */
   private $entityLastInstalledSchemaRepository;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The entity type listener service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeListenerInterface
+   * @var EntityTypeListenerInterface
    */
   private $entityTypeListener;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   private $entityFieldManager;
 
   /**
    * The field storage definition listener service.
    *
-   * @var \Drupal\Core\Field\FieldStorageDefinitionListenerInterface
+   * @var FieldStorageDefinitionListenerInterface
    */
   private $fieldStorageDefinitionListener;
 
   /**
    * Constructs a new EntityDefinitionUpdateManager.
    *
-   * @param \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $entity_definition_update_manager
+   * @param EntityDefinitionUpdateManagerInterface $entity_definition_update_manager
    *   The entity definition update manager.
-   * @param \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $entity_last_installed_schema_repository
+   * @param EntityLastInstalledSchemaRepositoryInterface $entity_last_installed_schema_repository
    *   The last installed schema repository service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityTypeListenerInterface $entity_type_listener
+   * @param EntityTypeListenerInterface $entity_type_listener
    *   The entity type listener interface.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionListenerInterface $field_storage_definition_listener
+   * @param FieldStorageDefinitionListenerInterface $field_storage_definition_listener
    *   The field storage definition listener service.
    */
   public function __construct(
@@ -168,9 +168,9 @@ class EntityUpdateService {
    *   - EntityDefinitionUpdateManagerInterface::DEFINITION_CREATED
    *   - EntityDefinitionUpdateManagerInterface::DEFINITION_UPDATED
    *   - EntityDefinitionUpdateManagerInterface::DEFINITION_DELETED.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface|null $storage_definition
+   * @param FieldStorageDefinitionInterface|null $storage_definition
    *   (optional) The new field storage definition. Defaults to none.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface|null $original_storage_definition
+   * @param FieldStorageDefinitionInterface|null $original_storage_definition
    *   (optional) The original field storage definition. Defaults to none.
    */
   private function doFieldUpdate($op, FieldStorageDefinitionInterface $storage_definition = NULL, FieldStorageDefinitionInterface $original_storage_definition = NULL) {
diff --git a/src/EventSubscriber/EckEntityAdminRouteSubscriber.php b/src/EventSubscriber/EckEntityAdminRouteSubscriber.php
index fe4e4d9..fa396ad 100644
--- a/src/EventSubscriber/EckEntityAdminRouteSubscriber.php
+++ b/src/EventSubscriber/EckEntityAdminRouteSubscriber.php
@@ -14,14 +14,14 @@ class EckEntityAdminRouteSubscriber extends RouteSubscriberBase {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a new EckEntityAdminRouteSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/src/Form/Entity/EckEntityDeleteForm.php b/src/Form/Entity/EckEntityDeleteForm.php
index ab9e131..120bbcb 100644
--- a/src/Form/Entity/EckEntityDeleteForm.php
+++ b/src/Form/Entity/EckEntityDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eck\Form\Entity;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Url;
 
@@ -23,7 +24,7 @@ class EckEntityDeleteForm extends ContentEntityDeleteForm {
    * {@inheritdoc}
    */
   protected function logDeletionMessage() {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
 
     if (!$entity->isDefaultTranslation()) {
diff --git a/src/Form/Entity/EckEntityForm.php b/src/Form/Entity/EckEntityForm.php
index 22eace1..ceb2dde 100644
--- a/src/Form/Entity/EckEntityForm.php
+++ b/src/Form/Entity/EckEntityForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eck\Form\Entity;
 
+use Drupal\eck\Entity\EckEntity;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -18,7 +19,7 @@ class EckEntityForm extends ContentEntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\eck\Entity\EckEntity $entity */
+    /** @var EckEntity $entity */
     $entity = $this->entity;
 
     if ($this->operation == 'edit') {
diff --git a/src/Form/EntityBundle/EckEntityBundleDeleteConfirm.php b/src/Form/EntityBundle/EckEntityBundleDeleteConfirm.php
index a62464f..2f93d41 100644
--- a/src/Form/EntityBundle/EckEntityBundleDeleteConfirm.php
+++ b/src/Form/EntityBundle/EckEntityBundleDeleteConfirm.php
@@ -18,14 +18,14 @@ class EckEntityBundleDeleteConfirm extends EntityDeleteForm {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new EckEntityBundleDeleteConfirm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Form/EntityBundle/EckEntityBundleForm.php b/src/Form/EntityBundle/EckEntityBundleForm.php
index 2570f13..d47ed9e 100644
--- a/src/Form/EntityBundle/EckEntityBundleForm.php
+++ b/src/Form/EntityBundle/EckEntityBundleForm.php
@@ -21,23 +21,23 @@ class EckEntityBundleForm extends EntityForm {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ -268,7 +268,7 @@ class EckEntityBundleForm extends EntityForm {
    *   The bundle type.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
diff --git a/src/Form/EntityType/EckEntityTypeEditForm.php b/src/Form/EntityType/EckEntityTypeEditForm.php
index 47c6200..faa4689 100644
--- a/src/Form/EntityType/EckEntityTypeEditForm.php
+++ b/src/Form/EntityType/EckEntityTypeEditForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\eck\Form\EntityType;
 
+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
@@ -28,10 +30,10 @@ class EckEntityTypeEditForm extends EckEntityTypeFormBase {
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);
 
-    /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $fieldStorage */
+    /** @var SqlContentEntityStorage $fieldStorage */
     $fieldStorage = $this->entityTypeManager->getStorage($this->entity->id());
 
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $efm */
+    /** @var EntityFieldManagerInterface $efm */
     $definitions = $this->entityFieldManager->getBaseFieldDefinitions($this->entity->id());
 
     foreach (['title', 'created', 'changed', 'uid', 'status'] as $field) {
diff --git a/src/Form/EntityType/EckEntityTypeFormBase.php b/src/Form/EntityType/EckEntityTypeFormBase.php
index dad52c7..957269d 100644
--- a/src/Form/EntityType/EckEntityTypeFormBase.php
+++ b/src/Form/EntityType/EckEntityTypeFormBase.php
@@ -18,23 +18,23 @@ class EckEntityTypeFormBase extends EntityForm {
   /**
    * The entity storage class.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $eckEntityTypeStorage;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Construct the EckEntityTypeFormBase.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $eck_entity_type_storage
+   * @param EntityStorageInterface $eck_entity_type_storage
    *   The eck_entity_type storage.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
    */
   public function __construct(EntityStorageInterface $eck_entity_type_storage, EntityFieldManagerInterface $entity_field_manager) {
@@ -111,7 +111,7 @@ class EckEntityTypeFormBase extends EntityForm {
    *   The entity ID.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
diff --git a/src/PermissionsGenerator.php b/src/PermissionsGenerator.php
index c3377d2..641b076 100644
--- a/src/PermissionsGenerator.php
+++ b/src/PermissionsGenerator.php
@@ -33,7 +33,7 @@ class PermissionsGenerator {
   /**
    * Builds a standard list of entity permissions for a given type.
    *
-   * @param \Drupal\eck\Entity\EckEntityType $eck_type
+   * @param EckEntityType $eck_type
    *   The entity type.
    *
    * @return array
@@ -50,7 +50,7 @@ class PermissionsGenerator {
   /**
    * Retrieves the listing permission for a given entity type.
    *
-   * @param \Drupal\eck\Entity\EckEntityType $entity_type
+   * @param EckEntityType $entity_type
    *   The entity type.
    *
    * @return array
@@ -67,7 +67,7 @@ class PermissionsGenerator {
   /**
    * Retrieves the create permission for a given entity type.
    *
-   * @param \Drupal\eck\Entity\EckEntityType $entity_type
+   * @param EckEntityType $entity_type
    *   The entity type.
    *
    * @return array
@@ -84,7 +84,7 @@ class PermissionsGenerator {
   /**
    * Retrieves the edit permissions for a given entity type.
    *
-   * @param \Drupal\eck\Entity\EckEntityType $entity_type
+   * @param EckEntityType $entity_type
    *   The entity type.
    *
    * @return array
@@ -104,7 +104,7 @@ class PermissionsGenerator {
   /**
    * Retrieves the edit permission for a given entity type.
    *
-   * @param \Drupal\eck\Entity\EckEntityType $entity_type
+   * @param EckEntityType $entity_type
    *   The entity type.
    * @param string $op
    *   The operation.
diff --git a/src/Plugin/Derivative/EckEntityContentLocalTask.php b/src/Plugin/Derivative/EckEntityContentLocalTask.php
index 8a4cf55..533698c 100644
--- a/src/Plugin/Derivative/EckEntityContentLocalTask.php
+++ b/src/Plugin/Derivative/EckEntityContentLocalTask.php
@@ -21,7 +21,7 @@ class EckEntityContentLocalTask extends DeriverBase implements ContainerDeriverI
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(TranslationInterface $string_translation) {
@@ -44,7 +44,7 @@ class EckEntityContentLocalTask extends DeriverBase implements ContainerDeriverI
     $this->basePluginDefinition = $basePluginDefinition;
     $derivatives = [];
 
-    /** @var \Drupal\eck\Entity\EckEntityType $type */
+    /** @var EckEntityType $type */
     foreach (EckEntityType::loadMultiple() as $type) {
       $entity_type = $type->id();
       $base_route = "entity.{$entity_type}.canonical";
diff --git a/src/Plugin/migrate/D7EckDeriver.php b/src/Plugin/migrate/D7EckDeriver.php
index 03ced04..3f8eee8 100644
--- a/src/Plugin/migrate/D7EckDeriver.php
+++ b/src/Plugin/migrate/D7EckDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\eck\Plugin\migrate;
 
+use Drupal\migrate\Plugin\Migration;
+use Drupal\migrate\Row;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -32,7 +34,7 @@ class D7EckDeriver extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The migration field discovery service.
    *
-   * @var \Drupal\migrate_drupal\FieldDiscoveryInterface
+   * @var FieldDiscoveryInterface
    */
   protected $fieldDiscovery;
 
@@ -43,7 +45,7 @@ class D7EckDeriver extends DeriverBase implements ContainerDeriverInterface {
    *   The base plugin ID for the plugin ID.
    * @param bool $translations
    *   Whether or not to include translations.
-   * @param \Drupal\migrate_drupal\FieldDiscoveryInterface $field_discovery
+   * @param FieldDiscoveryInterface $field_discovery
    *   The migration field discovery service.
    */
   public function __construct($base_plugin_id, $translations, FieldDiscoveryInterface $field_discovery) {
@@ -104,11 +106,11 @@ class D7EckDeriver extends DeriverBase implements ContainerDeriverInterface {
           $values['destination']['plugin'] = "entity:{$entity_type}";
           $values['destination']['default_bundle'] = $bundle;
 
-          /** @var \Drupal\migrate\Plugin\Migration $migration */
+          /** @var Migration $migration */
           $migration = \Drupal::service('plugin.manager.migration')->createStubMigration($values);
           $source_plugin = $migration->getSourcePlugin();
           $source_plugin->rewind();
-          /** @var \Drupal\migrate\Row $row */
+          /** @var Row $row */
           $row = $source_plugin->current();
           if (!$row) {
             continue;
diff --git a/src/Routing/EckRoutes.php b/src/Routing/EckRoutes.php
index c362501..1f73bea 100644
--- a/src/Routing/EckRoutes.php
+++ b/src/Routing/EckRoutes.php
@@ -19,7 +19,7 @@ class EckRoutes {
   public function routes() {
     $routeCollection = new RouteCollection();
 
-    /** @var \Drupal\eck\Entity\EckEntityType $entityType */
+    /** @var EckEntityType $entityType */
     foreach (EckEntityType::loadMultiple() as $entityType) {
       $entityTypeId = $entityType->id();
       $entityTypeLabel = $entityType->label();
@@ -41,7 +41,7 @@ class EckRoutes {
    * @param string $entityTypeLabel
    *   The entity type label.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The created listing route.
    */
   private function createListRoute($entityTypeId, $entityTypeLabel) {
@@ -67,7 +67,7 @@ class EckRoutes {
    * @param string $entityTypeLabel
    *   The entity type label.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The created bundle listing route.
    */
   private function createBundleListRoute($entityTypeId, $entityTypeLabel) {
@@ -99,7 +99,7 @@ class EckRoutes {
    * @param string $entityTypeLabel
    *   The entity type label.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The add bundle route.
    */
   private function createAddBundleRoute($entityTypeId, $entityTypeLabel) {
@@ -119,7 +119,7 @@ class EckRoutes {
    * @param string $op
    *   The operation.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The bundle crud route.
    */
   private function createBundleCrudRoute($entityTypeId, $entityTypeLabel, $path, $op) {
@@ -139,7 +139,7 @@ class EckRoutes {
    * @param string $entityTypeLabel
    *   The entity type label.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The edit bundle route.
    */
   private function createEditBundleRoute($entityTypeId, $entityTypeLabel) {
@@ -155,7 +155,7 @@ class EckRoutes {
    * @param string $entityTypeLabel
    *   The entity type label.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   The delete bundle route.
    */
   private function createDeleteBundleRoute($entityTypeId, $entityTypeLabel) {
diff --git a/tests/src/Functional/AccessTest.php b/tests/src/Functional/AccessTest.php
index ca8ad2b..1844e07 100644
--- a/tests/src/Functional/AccessTest.php
+++ b/tests/src/Functional/AccessTest.php
@@ -32,7 +32,7 @@ class AccessTest extends FunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->entityTypeInfo = $this->createEntityType();
     $this->bundleInfo = $this->createEntityBundle($this->entityTypeInfo['id']);
diff --git a/tests/src/Functional/BundleCRUDTest.php b/tests/src/Functional/BundleCRUDTest.php
index 3d15871..3da2122 100644
--- a/tests/src/Functional/BundleCRUDTest.php
+++ b/tests/src/Functional/BundleCRUDTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\eck\Functional;
 
+use Behat\Mink\Exception\ExpectationException;
 /**
  * Tests eck's bundle creation, update and deletion.
  *
@@ -14,7 +15,7 @@ class BundleCRUDTest extends FunctionalTestBase {
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function singleBundleCreation() {
     $entityTypeInfo = $this->createEntityType([], 'TestType');
@@ -26,7 +27,7 @@ class BundleCRUDTest extends FunctionalTestBase {
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function singleBundleCreationWithOverrides() {
     $entityTypeInfo = $this->createEntityType();
@@ -44,7 +45,7 @@ class BundleCRUDTest extends FunctionalTestBase {
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function singleBundleEditWithOverrides() {
     $entityTypeInfo = $this->createEntityType();
@@ -69,7 +70,7 @@ class BundleCRUDTest extends FunctionalTestBase {
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function multipleBundleCreation() {
     $entityTypeInfo = $this->createEntityType([], 'TestType');
@@ -82,7 +83,7 @@ class BundleCRUDTest extends FunctionalTestBase {
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function identicallyNamedBundleCreation() {
     $entityTypeInfo1 = $this->createEntityType([], 'TestType1');
diff --git a/tests/src/Functional/ConfigImportTest.php b/tests/src/Functional/ConfigImportTest.php
index 6147243..2dcfb2b 100644
--- a/tests/src/Functional/ConfigImportTest.php
+++ b/tests/src/Functional/ConfigImportTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\eck\Functional;
 
+use Drupal\Core\Config\StorageInterface;
 use Drupal\Core\Url;
 
 /**
@@ -19,7 +20,7 @@ class ConfigImportTest extends FunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $permissions = [
@@ -34,7 +35,7 @@ class ConfigImportTest extends FunctionalTestBase {
 
     // Export the current configuration.
     $configFactory = \Drupal::configFactory();
-    /** @var \Drupal\Core\Config\StorageInterface $sync */
+    /** @var StorageInterface $sync */
     $sync = $this->container->get('config.storage.sync');
     $config = $configFactory->loadMultiple($configFactory->listAll());
     foreach ($config as $name => $conf) {
@@ -50,9 +51,9 @@ class ConfigImportTest extends FunctionalTestBase {
 
     $entityTypeConfigName = 'eck.eck_entity_type.test_entity';
     $entityBundleConfigName = 'eck.eck_type.test_entity.bundle';
-    /** @var \Drupal\Core\Config\StorageInterface $storage */
+    /** @var StorageInterface $storage */
     $storage = $this->container->get('config.storage');
-    /** @var \Drupal\Core\Config\StorageInterface $sync */
+    /** @var StorageInterface $sync */
     $sync = $this->container->get('config.storage.sync');
 
     // Verify the configuration to create does not exist yet.
diff --git a/tests/src/Functional/EckEntityTranslationTest.php b/tests/src/Functional/EckEntityTranslationTest.php
index 40e179d..658e06a 100644
--- a/tests/src/Functional/EckEntityTranslationTest.php
+++ b/tests/src/Functional/EckEntityTranslationTest.php
@@ -47,7 +47,7 @@ class EckEntityTranslationTest extends FunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create new entity type.
diff --git a/tests/src/Functional/FunctionalTestBase.php b/tests/src/Functional/FunctionalTestBase.php
index de49788..9ebaf80 100644
--- a/tests/src/Functional/FunctionalTestBase.php
+++ b/tests/src/Functional/FunctionalTestBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\eck\Functional;
 
+use Drupal\user\UserInterface;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Tests\BrowserTestBase;
@@ -16,7 +19,7 @@ abstract class FunctionalTestBase extends BrowserTestBase {
   /**
    * The admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -33,7 +36,7 @@ abstract class FunctionalTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser($this->getAdministratorPermissions());
@@ -65,7 +68,7 @@ abstract class FunctionalTestBase extends BrowserTestBase {
    *   - id:    the type's machine name
    *   - label: the type's label.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   protected function createEntityType(array $fields = [], $label = '') {
     $label = empty($label) ? $this->randomMachineName() : $label;
@@ -113,7 +116,7 @@ abstract class FunctionalTestBase extends BrowserTestBase {
    * @return array
    *   The machine name and label of the new bundle.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   protected function createEntityBundle($entity_type, $label = '', $title_overrides = []) {
     if (empty($label)) {
@@ -152,7 +155,7 @@ abstract class FunctionalTestBase extends BrowserTestBase {
    * @return array
    *   The machine name and label of the new bundle.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   protected function editEntityBundle($entity_type, $bundle, $label, $title_overrides = []) {
     $this->drupalGet(Url::fromRoute("entity.{$entity_type}_type.edit_form", ["{$entity_type}_type" => $bundle]));
@@ -177,7 +180,7 @@ abstract class FunctionalTestBase extends BrowserTestBase {
    *   An array of settings.
    *   Example: 'id' => 'foo'.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   A new entity.
    */
   protected function createEntity($entity_type, array $values) {
diff --git a/tests/src/Functional/LocalTaskEntityTest.php b/tests/src/Functional/LocalTaskEntityTest.php
index 90466ea..eecd2aa 100644
--- a/tests/src/Functional/LocalTaskEntityTest.php
+++ b/tests/src/Functional/LocalTaskEntityTest.php
@@ -37,7 +37,7 @@ class LocalTaskEntityTest extends FunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->entityTypeInfo = $this->createEntityType();
     $this->bundleInfo = $this->createEntityBundle($this->entityTypeInfo['id']);
diff --git a/tests/src/Functional/MigrateUpgradeEckTest.php b/tests/src/Functional/MigrateUpgradeEckTest.php
index 3d18859..01d1869 100644
--- a/tests/src/Functional/MigrateUpgradeEckTest.php
+++ b/tests/src/Functional/MigrateUpgradeEckTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\eck\Functional;
 
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Tests\migrate_drupal_ui\Functional\MigrateUpgradeTestBase;
 
 /**
@@ -38,7 +39,7 @@ class MigrateUpgradeEckTest extends MigrateUpgradeTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->writeSettings([
       'settings' => [
@@ -48,7 +49,7 @@ class MigrateUpgradeEckTest extends MigrateUpgradeTestBase {
         ],
       ],
     ]);
-    $this->loadFixture(drupal_get_path('module', 'eck') . '/tests/fixtures/drupal7.php');
+    $this->loadFixture(\Drupal::service('extension.list.module')->getPath('eck') . '/tests/fixtures/drupal7.php');
   }
 
   /**
@@ -161,7 +162,7 @@ class MigrateUpgradeEckTest extends MigrateUpgradeTestBase {
    *   An array of modules that will not be upgraded. Defaults to
    *   $this->getMissingPaths().
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   protected function assertReviewForm(array $available_paths = NULL, array $missing_paths = NULL) {
     $session = $this->assertSession();
diff --git a/tests/src/Functional/NavigationalStructureTest.php b/tests/src/Functional/NavigationalStructureTest.php
index 295ca85..9cfdeb8 100644
--- a/tests/src/Functional/NavigationalStructureTest.php
+++ b/tests/src/Functional/NavigationalStructureTest.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\eck\Functional;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Behat\Mink\Exception\ResponseTextException;
+use Behat\Mink\Exception\ExpectationException;
 use Behat\Mink\Element\NodeElement;
 use Drupal\Core\Url;
 use Drupal\field\Entity\FieldConfig;
@@ -69,11 +75,11 @@ class NavigationalStructureTest extends FunctionalTestBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $entity_type = $this->createEntityType();
@@ -91,11 +97,11 @@ class NavigationalStructureTest extends FunctionalTestBase {
   /**
    * Retrieves the entity storage handler.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   The entity storage handler.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getEntityStorageHandler() {
     return \Drupal::entityTypeManager()
@@ -213,7 +219,7 @@ class NavigationalStructureTest extends FunctionalTestBase {
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function entityTypeDelete() {
     $route = 'entity.eck_entity_type.delete_form';
@@ -236,7 +242,7 @@ class NavigationalStructureTest extends FunctionalTestBase {
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function entityTypeDeleteWithMultipleBundles() {
     // Create a randomly named bundle.
@@ -265,11 +271,11 @@ class NavigationalStructureTest extends FunctionalTestBase {
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws ResponseTextException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function entityTypeDeleteWithMatchingBundle() {
     $this->createEntityBundle($this->entityTypeMachineName, $this->entityTypeLabel);
@@ -315,11 +321,11 @@ class NavigationalStructureTest extends FunctionalTestBase {
    *
    * @test
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws ResponseTextException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function entityTypeDeleteWithField() {
     // Delete the original bundle.
@@ -377,7 +383,7 @@ class NavigationalStructureTest extends FunctionalTestBase {
    *
    * @test
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function entityTypeDeleteWithContent() {
@@ -497,7 +503,7 @@ class NavigationalStructureTest extends FunctionalTestBase {
    *
    * @test
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function entityView() {
     $entityTitle = $this->randomString();
@@ -522,7 +528,7 @@ class NavigationalStructureTest extends FunctionalTestBase {
    *
    * @test
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function entityEdit() {
     $entityTitle = $this->randomString();
@@ -550,7 +556,7 @@ class NavigationalStructureTest extends FunctionalTestBase {
    *
    * @test
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function entityDelete() {
     $entityTitle = $this->randomString();
diff --git a/tests/src/Functional/UITest.php b/tests/src/Functional/UITest.php
index de7f5b7..09d783a 100644
--- a/tests/src/Functional/UITest.php
+++ b/tests/src/Functional/UITest.php
@@ -21,7 +21,7 @@ class UITest extends FunctionalTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Place the actions block, to test if the actions are placed correctly.
diff --git a/tests/src/Functional/WorkspacesIntegrationTest.php b/tests/src/Functional/WorkspacesIntegrationTest.php
index 4b33a94..29b8542 100644
--- a/tests/src/Functional/WorkspacesIntegrationTest.php
+++ b/tests/src/Functional/WorkspacesIntegrationTest.php
@@ -13,6 +13,7 @@ class WorkspacesIntegrationTest extends FunctionalTestBase {
 
   /**
    * @test
+   * @doesNotPerformAssertions
    */
   public function workspacesCanBeEnabledWhenNoEntityTypesAreDefined() {
     $this->container->get('module_installer')->install(['workspaces'], TRUE);
@@ -20,6 +21,7 @@ class WorkspacesIntegrationTest extends FunctionalTestBase {
 
   /**
    * @test
+   * @doesNotPerformAssertions
    */
   public function workspacesCanBeEnabledWhenEntityTypeIsDefined() {
     $testType = EckEntityType::create([
@@ -33,6 +35,7 @@ class WorkspacesIntegrationTest extends FunctionalTestBase {
 
   /**
    * @test
+   * @doesNotPerformAssertions
    */
   public function cacheCanBeClearedWhenWorkbenchIsEnabled() {
     $testType = EckEntityType::create([
diff --git a/tests/src/Kernel/EckEntityTest.php b/tests/src/Kernel/EckEntityTest.php
index 5d61aa6..6a3e8a1 100644
--- a/tests/src/Kernel/EckEntityTest.php
+++ b/tests/src/Kernel/EckEntityTest.php
@@ -23,7 +23,7 @@ class EckEntityTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('eck');
   }
@@ -61,7 +61,7 @@ class EckEntityTest extends KernelTestBase {
   /**
    * Creates ECK entity type.
    *
-   * @return \Drupal\eck\Entity\EckEntityType
+   * @return EckEntityType
    */
   protected function createEckEntityType($id, $base_fields = []) {
     $entity_type = EckEntityType::create([
diff --git a/tests/src/Kernel/Migrate/d7/MigrateEckBundleTest.php b/tests/src/Kernel/Migrate/d7/MigrateEckBundleTest.php
index afb844a..d6d9369 100644
--- a/tests/src/Kernel/Migrate/d7/MigrateEckBundleTest.php
+++ b/tests/src/Kernel/Migrate/d7/MigrateEckBundleTest.php
@@ -17,7 +17,7 @@ class MigrateEckBundleTest extends MigrateEckTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->executeMigrations([
       'd7_eck_type',
diff --git a/tests/src/Kernel/Migrate/d7/MigrateEckFieldInstanceTest.php b/tests/src/Kernel/Migrate/d7/MigrateEckFieldInstanceTest.php
index a0b72a7..c33d45c 100644
--- a/tests/src/Kernel/Migrate/d7/MigrateEckFieldInstanceTest.php
+++ b/tests/src/Kernel/Migrate/d7/MigrateEckFieldInstanceTest.php
@@ -25,7 +25,7 @@ class MigrateEckFieldInstanceTest extends MigrateEckTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(static::$modules);
     $this->executeMigrations([
diff --git a/tests/src/Kernel/Migrate/d7/MigrateEckFieldTest.php b/tests/src/Kernel/Migrate/d7/MigrateEckFieldTest.php
index 98c8233..543dbf8 100644
--- a/tests/src/Kernel/Migrate/d7/MigrateEckFieldTest.php
+++ b/tests/src/Kernel/Migrate/d7/MigrateEckFieldTest.php
@@ -25,7 +25,7 @@ class MigrateEckFieldTest extends MigrateEckTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(static::$modules);
     $this->executeMigrations([
diff --git a/tests/src/Kernel/Migrate/d7/MigrateEckTest.php b/tests/src/Kernel/Migrate/d7/MigrateEckTest.php
index 50cea08..5bc0ffb 100644
--- a/tests/src/Kernel/Migrate/d7/MigrateEckTest.php
+++ b/tests/src/Kernel/Migrate/d7/MigrateEckTest.php
@@ -29,7 +29,7 @@ class MigrateEckTest extends MigrateEckTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
     $this->installConfig(static::$modules);
diff --git a/tests/src/Kernel/Migrate/d7/MigrateEckTestBase.php b/tests/src/Kernel/Migrate/d7/MigrateEckTestBase.php
index 2793483..b75a2dc 100644
--- a/tests/src/Kernel/Migrate/d7/MigrateEckTestBase.php
+++ b/tests/src/Kernel/Migrate/d7/MigrateEckTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\eck\Kernel\Migrate\d7;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\eck\Entity\EckEntity;
 use Drupal\eck\Entity\EckEntityBundle;
 use Drupal\eck\Entity\EckEntityType;
@@ -19,14 +21,14 @@ abstract class MigrateEckTestBase extends MigrateDrupal7TestBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = \Drupal::entityTypeManager();
   }
@@ -93,7 +95,7 @@ abstract class MigrateEckTestBase extends MigrateDrupal7TestBase {
    */
   public function assertEck(array $eck) {
     $message = "Failure for eck entity type '" . $eck['type'] . "' with id of '" . $eck['id'] . "'";
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->entityTypeManager
       ->getStorage($eck['type'])
       ->load($eck['id']);
@@ -134,7 +136,7 @@ abstract class MigrateEckTestBase extends MigrateDrupal7TestBase {
   protected function assertFieldStorage($id, $expected_type, $expected_translatable, $expected_cardinality) {
     list($expected_entity_type, $expected_name) = explode('.', $id);
 
-    /** @var \Drupal\field\FieldStorageConfigInterface $field */
+    /** @var FieldStorageConfigInterface $field */
     $field = FieldStorageConfig::load($id);
     $this->assertInstanceOf(FieldStorageConfigInterface::class, $field);
     $this->assertEquals($expected_name, $field->getName());
@@ -168,7 +170,7 @@ abstract class MigrateEckTestBase extends MigrateDrupal7TestBase {
   protected function assertFieldInstance($id, $expected_label, $expected_field_type, $is_required, $expected_translatable) {
     list($expected_entity_type, $expected_bundle, $expected_name) = explode('.', $id);
 
-    /** @var \Drupal\field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = FieldConfig::load($id);
     $this->assertInstanceOf(FieldConfigInterface::class, $field);
     $this->assertEquals($expected_label, $field->label());
diff --git a/tests/src/Kernel/Migrate/d7/MigrateEckTypeTest.php b/tests/src/Kernel/Migrate/d7/MigrateEckTypeTest.php
index 80ebf2f..3d2fcf7 100644
--- a/tests/src/Kernel/Migrate/d7/MigrateEckTypeTest.php
+++ b/tests/src/Kernel/Migrate/d7/MigrateEckTypeTest.php
@@ -17,7 +17,7 @@ class MigrateEckTypeTest extends MigrateEckTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->executeMigrations(['d7_eck_type']);
   }
diff --git a/tests/src/Kernel/Plugin/migrate/source/d7/EckEntityExceptionTest.php b/tests/src/Kernel/Plugin/migrate/source/d7/EckEntityExceptionTest.php
index 4908f29..c7b4b00 100644
--- a/tests/src/Kernel/Plugin/migrate/source/d7/EckEntityExceptionTest.php
+++ b/tests/src/Kernel/Plugin/migrate/source/d7/EckEntityExceptionTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\eck\Kernel\Plugin\migrate\source;
 
+use Drupal\migrate\Plugin\MigrationPluginManager;
 use Drupal\migrate\Exception\RequirementsException;
 use Drupal\migrate\MigrateException;
 use Drupal\Tests\eck\Kernel\Migrate\d7\MigrateEckTestBase;
@@ -21,14 +22,14 @@ class EckEntityExceptionTest extends MigrateEckTestBase {
   /**
    * The migration plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManager
+   * @var MigrationPluginManager
    */
   protected $migrationPluginManager;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->migrationPluginManager = \Drupal::service('plugin.manager.migration');
   }
diff --git a/tests/src/Unit/EntityTypeBundleInfoTest.php b/tests/src/Unit/EntityTypeBundleInfoTest.php
index c4f9502..a0e0f56 100644
--- a/tests/src/Unit/EntityTypeBundleInfoTest.php
+++ b/tests/src/Unit/EntityTypeBundleInfoTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\eck\Unit;
 
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -10,7 +11,6 @@ use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\TypedData\TypedDataManagerInterface;
 use Drupal\eck\EckEntityTypeBundleInfo;
-use PHPUnit_Framework_MockObject_MockObject;
 
 /**
  * Tests the form element implementation.
@@ -22,31 +22,31 @@ class EntityTypeBundleInfoTest extends UnitTestBase {
   /**
    * The entity type manager mock.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManagerMock;
   /**
    * The language manager mock.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManagerMock;
   /**
    * The module handler mock.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandlerMock;
   /**
    * The typed data manager mock.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManagerMock;
   /**
    * The cache backend mock.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackendMock;
 
@@ -84,6 +84,7 @@ class EntityTypeBundleInfoTest extends UnitTestBase {
    * Tests caching of data.
    *
    * @test
+   * @doesNotPerformAssertions
    */
   public function entityTypeHasBundlesMethodCachesData() {
     $this->cacheBackendMock = $this->getMockForAbstractClass(CacheBackendInterface::class);
@@ -172,7 +173,7 @@ class EntityTypeBundleInfoTest extends UnitTestBase {
   /**
    * Creates a new test subject.
    *
-   * @return \Drupal\eck\EckEntityTypeBundleInfo
+   * @return EckEntityTypeBundleInfo
    *   The newly created test subject.
    */
   protected function createNewTestSubject() {
@@ -199,12 +200,12 @@ class EntityTypeBundleInfoTest extends UnitTestBase {
   /**
    * Creates a new test subject with an entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityTypeMock
+   * @param EntityTypeInterface $entityTypeMock
    *   The entity type mock.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entityStorageMock
+   * @param EntityStorageInterface $entityStorageMock
    *   The entity storage mock.
    *
-   * @return \Drupal\eck\EckEntityTypeBundleInfo
+   * @return EckEntityTypeBundleInfo
    *   The test subject.
    */
   protected function createNewTestSubjectWithEntityType(EntityTypeInterface $entityTypeMock = NULL, EntityStorageInterface $entityStorageMock = NULL) {
@@ -233,7 +234,7 @@ class EntityTypeBundleInfoTest extends UnitTestBase {
    * @param int $numberOfBundlesToCreate
    *   The number of bundles to create.
    *
-   * @return \Drupal\eck\EckEntityTypeBundleInfo
+   * @return EckEntityTypeBundleInfo
    *   The bundle info to test.
    */
   protected function createNewTestSubjectWithEntityTypeAndBundles($numberOfBundlesToCreate = 1) {
diff --git a/tests/src/Unit/PermissionsGeneratorTest.php b/tests/src/Unit/PermissionsGeneratorTest.php
index 8526ced..c992e48 100644
--- a/tests/src/Unit/PermissionsGeneratorTest.php
+++ b/tests/src/Unit/PermissionsGeneratorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\eck\Unit;
 
+use Drupal\eck\Entity\EckEntityType;
 use Drupal\eck\PermissionsGenerator;
 
 /**
@@ -14,14 +15,14 @@ class PermissionsGeneratorTest extends UnitTestBase {
   /**
    * The subject under test.
    *
-   * @var \Drupal\eck\PermissionsGenerator
+   * @var PermissionsGenerator
    */
   private $sut;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->sut = $this->createNewSubjectUnderTest();
@@ -30,7 +31,7 @@ class PermissionsGeneratorTest extends UnitTestBase {
   /**
    * Creates a PermissionsGenerator to be used in the tests.
    *
-   * @return \Drupal\eck\PermissionsGenerator
+   * @return PermissionsGenerator
    *   The created PermissionsGenerator instance.
    */
   private function createNewSubjectUnderTest() {
@@ -117,7 +118,7 @@ class PermissionsGeneratorTest extends UnitTestBase {
    */
   protected function assertOwnerPermissions($permissions) {
     foreach ($this->entities as $id => $entity) {
-      /** @var \Drupal\eck\Entity\EckEntityType $entity */
+      /** @var EckEntityType $entity */
       if ($entity->hasAuthorField()) {
         $this->assertArrayHasKey("edit own {$id} entities", $permissions);
         $this->assertArrayHasKey("delete own {$id} entities", $permissions);
diff --git a/tests/src/Unit/UnitTestBase.php b/tests/src/Unit/UnitTestBase.php
index c4ea191..e10b4eb 100644
--- a/tests/src/Unit/UnitTestBase.php
+++ b/tests/src/Unit/UnitTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\eck\Unit {
 
+  use Drupal\Core\Session\AccountProxyInterface;
   use Drupal\Core\Entity\EntityInterface;
   use Drupal\Core\Entity\EntityManagerInterface;
   use Drupal\Core\Entity\EntityTypeInterface;
@@ -33,7 +34,7 @@ namespace Drupal\Tests\eck\Unit {
     /**
      * {@inheritdoc}
      */
-    protected function setUp() {
+    protected function setUp(): void {
       parent::setUp();
       $this->entities = [];
       $this->prepareContainer();
@@ -132,7 +133,7 @@ namespace Drupal\Tests\eck\Unit {
     /**
      * Creates and returns a mocked user.
      *
-     * @return \Drupal\Core\Session\AccountProxyInterface
+     * @return AccountProxyInterface
      *   The mocked user.
      */
     private function getNewUserMock() {
@@ -198,7 +199,7 @@ namespace Drupal\Tests\eck\Unit {
      * @param array $values
      *   The values to be set on the created entity.
      *
-     * @return \Drupal\eck\Entity\EckEntityType
+     * @return EckEntityType
      *   The created eck entity type.
      */
     protected function createEckEntityType($entity_type_id, array $values = []) {
