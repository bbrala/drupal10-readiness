modules/contrib/upgrade_tool/openy_upgrade_log.page.inc
modules/contrib/upgrade_tool/openy_upgrade_tool.install
modules/contrib/upgrade_tool/openy_upgrade_tool.module
modules/contrib/upgrade_tool/src/Annotation/ConfigEventIgnore.php
modules/contrib/upgrade_tool/src/ConfigEventIgnoreBase.php
modules/contrib/upgrade_tool/src/ConfigEventIgnorePluginInterface.php
modules/contrib/upgrade_tool/src/ConfigEventIgnorePluginManager.php
modules/contrib/upgrade_tool/src/ConfigParamUpgradeTool.php
modules/contrib/upgrade_tool/src/ConfigUpdater.php
modules/contrib/upgrade_tool/src/Controller/OpenyUpgradeLogController.php
modules/contrib/upgrade_tool/src/Entity/OpenyUpgradeLog.php
modules/contrib/upgrade_tool/src/Entity/OpenyUpgradeLogInterface.php
modules/contrib/upgrade_tool/src/Entity/OpenyUpgradeLogViewsData.php
modules/contrib/upgrade_tool/src/EventSubscriber/ConfigEventSubscriber.php
modules/contrib/upgrade_tool/src/Form/OpenyUpgradeLogDeleteForm.php
modules/contrib/upgrade_tool/src/Form/OpenyUpgradeLogDiff.php
modules/contrib/upgrade_tool/src/Form/OpenyUpgradeLogForm.php
modules/contrib/upgrade_tool/src/Form/OpenyUpgradeLogManualMerge.php
modules/contrib/upgrade_tool/src/Form/OpenyUpgradeLogRevisionDeleteForm.php
modules/contrib/upgrade_tool/src/Form/OpenyUpgradeLogRevisionRevertForm.php
modules/contrib/upgrade_tool/src/Form/OpenyUpgradeLogSettingsForm.php
modules/contrib/upgrade_tool/src/OpenYUpgradeToolFeatureStorage.php
modules/contrib/upgrade_tool/src/OpenyUpgradeLogAccessControlHandler.php
modules/contrib/upgrade_tool/src/OpenyUpgradeLogHtmlRouteProvider.php
modules/contrib/upgrade_tool/src/OpenyUpgradeLogListBuilder.php
modules/contrib/upgrade_tool/src/OpenyUpgradeLogManager.php
modules/contrib/upgrade_tool/src/OpenyUpgradeLogManagerInterface.php
modules/contrib/upgrade_tool/src/OpenyUpgradeLogStorage.php
modules/contrib/upgrade_tool/src/OpenyUpgradeLogStorageInterface.php
modules/contrib/upgrade_tool/src/OpenyUpgradeToolCachedStorage.php
modules/contrib/upgrade_tool/src/OpenyUpgradeToolRevisionStorage.php
modules/contrib/upgrade_tool/src/Plugin/Action/ApplyCurrentActiveVersionAction.php
modules/contrib/upgrade_tool/src/Plugin/Action/ApplyOpenyVersionAction.php
modules/contrib/upgrade_tool/src/Plugin/ConfigEventIgnore/Views.php
modules/contrib/upgrade_tool/src/Routing/RouteSubscriber.php

20 files with changes
=====================

1) modules/contrib/upgrade_tool/src/Plugin/Action/ApplyOpenyVersionAction.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openy_upgrade_tool\Plugin\Action;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Action\Plugin\Action\EntityActionBase;
 use Drupal\Core\Session\AccountInterface;

@@ @@
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
     $key = $object->getEntityType()->getKey('status');

-    /** @var \Drupal\Core\Entity\EntityInterface $object */
+    /** @var EntityInterface $object */
     $result = $object->access('update', $account, TRUE);

     return $return_as_object ? $result : $result->isAllowed();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/upgrade_tool/src/Plugin/Action/ApplyCurrentActiveVersionAction.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openy_upgrade_tool\Plugin\Action;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Action\Plugin\Action\EntityActionBase;
 use Drupal\Core\Session\AccountInterface;

@@ @@
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
     $key = $object->getEntityType()->getKey('status');

-    /** @var \Drupal\Core\Entity\EntityInterface $object */
+    /** @var EntityInterface $object */
     $result = $object->access('update', $account, TRUE)
       ->andIf($object->$key->access('edit', $account, TRUE));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/upgrade_tool/src/OpenyUpgradeLogStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Openy upgrade log revision IDs for a specific Openy upgrade log.
    *
-   * @param \Drupal\openy_upgrade_tool\Entity\OpenyUpgradeLogInterface $entity
+   * @param OpenyUpgradeLogInterface $entity
    *   The Openy upgrade log entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Openy upgrade log author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\openy_upgrade_tool\Entity\OpenyUpgradeLogInterface $entity
+   * @param OpenyUpgradeLogInterface $entity
    *   The Openy upgrade log entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Openy upgrade log with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/upgrade_tool/src/OpenyUpgradeLogManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openy_upgrade_tool;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Config\Config;
 /**
  * Interface for wrapper with main logic that related to OpenyUpgradeLog.
  */
@@ @@
    *
    * @see openy_upgrade_tool.install
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function getLoggerEntityTypeName();

@@ @@
    * @return bool
    *   TRUE if config was changed.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function isManuallyChanged($config_name, $check_force_mode = TRUE);

@@ @@
    * @param int $id
    *   Upgrade log entity ID.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Upgrade log entity.
    */
   public function load($id);
@@ @@
    * @param string $config_name
    *   Upgrade log entity name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Upgrade log entity.
    */
   public function loadByName($config_name);
@@ @@
    * @return OpenyUpgradeLogManager
    *   OpenyUpgradeLogManager instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function applyOpenyVersion($name);

@@ @@
    * @param bool $delete_log
    *   If TRUE - delete OpenyUpgradeLog instance after import.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function updateExistingConfig($name, array $data, $delete_log = FALSE);

@@ @@
    * @return bool
    *   Validation result. TRUE if valid.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function validateConfigData($name, array &$data);

@@ @@
   /**
    * Validate config diff and get ignore status.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *
    * @return bool
    *   TRUE - if changes can be ignored.
    */
-  public function validateConfigDiff(\Drupal\Core\Config\Config $config);
+  public function validateConfigDiff(Config $config);

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/upgrade_tool/src/OpenyUpgradeLogManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openy_upgrade_tool;

+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\config\Form\ConfigSync;
 use Drupal\config\StorageReplaceDataWrapper;
 use Drupal\Core\Config\Config;
@@ @@
   /**
    * Entity type manger.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Logger Entity Storage.
    *
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage
+   * @var SqlContentEntityStorage
    */
   public $loggerEntityStorage = NULL;

@@ @@
   /**
    * The config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;

@@ @@
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * The configuration Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\openy_upgrade_tool\ConfigEventIgnorePluginManager
+   * @var ConfigEventIgnorePluginManager
    */
   protected $configEventIgnoreManager;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The database lock object.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * The typed config manager.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The module installer.
    *
-   * @var \Drupal\Core\Extension\ModuleInstallerInterface
+   * @var ModuleInstallerInterface
    */
   protected $moduleInstaller;

@@ @@
   /**
    * The module extension list.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleExtensionList;

@@ @@
   /**
    * Defines a configuration importer.
    *
-   * @var \Drupal\Core\Config\ConfigImporter
+   * @var ConfigImporter
    */
   protected $configImporter;

@@ @@
   /**
    * If the config exists, this is that object. Otherwise, FALSE.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\Entity\ConfigEntityInterface|bool
+   * @var Config|ConfigEntityInterface|bool
    */
   protected $configExists = FALSE;

@@ @@
    *
    * @param \Drupal\features\FeaturesManagerInterface $features_manager
    *   Features Manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The config storage.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The configuration manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\openy_upgrade_tool\ConfigEventIgnorePluginManager $config_event_ignore_manager
+   * @param ConfigEventIgnorePluginManager $config_event_ignore_manager
    *   The Config Event Ignore Plugin Manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher used to notify subscribers of config import events.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock backend to ensure multiple imports do not occur at same time.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config
+   * @param TypedConfigManagerInterface $typed_config
    *   The typed configuration manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ModuleInstallerInterface $module_installer
+   * @param ModuleInstallerInterface $module_installer
    *   The module installer.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $loggerChannel
+   * @param LoggerChannelInterface $loggerChannel
    *   Logger channel.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/upgrade_tool/src/OpenyUpgradeLogHtmlRouteProvider.php:47

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/upgrade_tool/src/OpenyUpgradeLogAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openy_upgrade_tool;

+use Drupal\openy_upgrade_tool\Entity\OpenyUpgradeLogInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\openy_upgrade_tool\Entity\OpenyUpgradeLogInterface $entity */
+    /** @var OpenyUpgradeLogInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view published openy upgrade log entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/upgrade_tool/src/OpenYUpgradeToolFeatureStorage.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The active storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/upgrade_tool/src/Form/OpenyUpgradeLogSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/upgrade_tool/src/Form/OpenyUpgradeLogRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Openy upgrade log revision.
    *
-   * @var \Drupal\openy_upgrade_tool\Entity\OpenyUpgradeLogInterface
+   * @var OpenyUpgradeLogInterface
    */
   protected $revision;

@@ @@
   /**
    * The Openy upgrade log storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $OpenyUpgradeLogStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new OpenyUpgradeLogRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Openy upgrade log storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\openy_upgrade_tool\Entity\OpenyUpgradeLogInterface $revision
+   * @param OpenyUpgradeLogInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\openy_upgrade_tool\Entity\OpenyUpgradeLogInterface
+   * @return OpenyUpgradeLogInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(OpenyUpgradeLogInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/upgrade_tool/src/Form/OpenyUpgradeLogRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openy_upgrade_tool\Form;

+use Drupal\openy_upgrade_tool\Entity\OpenyUpgradeLogInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The Openy upgrade log revision.
    *
-   * @var \Drupal\openy_upgrade_tool\Entity\OpenyUpgradeLogInterface
+   * @var OpenyUpgradeLogInterface
    */
   protected $revision;

@@ @@
   /**
    * The Openy upgrade log storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $OpenyUpgradeLogStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new OpenyUpgradeLogRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/upgrade_tool/src/Form/OpenyUpgradeLogManualMerge.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\openy_upgrade_tool\OpenyUpgradeLogManagerInterface definition.
    *
-   * @var \Drupal\openy_upgrade_tool\OpenyUpgradeLogManager
+   * @var OpenyUpgradeLogManager
    */
   protected $upgradeLogManager;

@@ @@
   /**
    * OpenyUpgradeLog entity.
    *
-   * @var \Drupal\openy_upgrade_tool\Entity\OpenyUpgradeLogInterface
+   * @var OpenyUpgradeLogInterface
    */
   protected $entity;

@@ @@
   /**
    * Constructs a new OpenyUpgradeLogManualMerge object.
    *
-   * @param \Drupal\openy_upgrade_tool\OpenyUpgradeLogManagerInterface $openy_upgrade_log_manager
+   * @param OpenyUpgradeLogManagerInterface $openy_upgrade_log_manager
    *   Open Y Upgrade Log Manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/upgrade_tool/src/Form/OpenyUpgradeLogForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Account Proxy.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $accountProxy;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/upgrade_tool/src/Form/OpenyUpgradeLogDiff.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\openy_upgrade_tool\OpenyUpgradeLogManager definition.
    *
-   * @var \Drupal\openy_upgrade_tool\OpenyUpgradeLogManagerInterface
+   * @var OpenyUpgradeLogManagerInterface
    */
   protected $upgradeLogManager;

@@ @@
   /**
    * Drupal\Core\Config\StorageInterface definition.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;

@@ @@
   /**
    * The source storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configRevisionStorage;

@@ @@
   /**
    * Drupal\Core\Config\ConfigManagerInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * Drupal\Core\Diff\DiffFormatter definition.
    *
-   * @var \Drupal\Core\Diff\DiffFormatter
+   * @var DiffFormatter
    */
   protected $diffFormatter;

@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * OpenyUpgradeLog entity.
    *
-   * @var \Drupal\openy_upgrade_tool\Entity\OpenyUpgradeLogInterface
+   * @var OpenyUpgradeLogInterface
    */
   protected $entity;

@@ @@
   /**
    * Constructs a new OpenyUpgradeLogDiff object.
    *
-   * @param \Drupal\openy_upgrade_tool\OpenyUpgradeLogManagerInterface $openy_upgrade_log_manager
+   * @param OpenyUpgradeLogManagerInterface $openy_upgrade_log_manager
    *   OpenyUpgradeLogManager.
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   Config storage.
-   * @param \Drupal\Core\Config\StorageInterface $config_revision_storage
+   * @param StorageInterface $config_revision_storage
    *   Config revision storage.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   Config Manager.
-   * @param \Drupal\Core\Diff\DiffFormatter $diff_formatter
+   * @param DiffFormatter $diff_formatter
    *   The diff formatter.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/upgrade_tool/src/EventSubscriber/ConfigEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openy_upgrade_tool\EventSubscriber;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
 use Drupal\Core\Logger\LoggerChannelInterface;
@@ @@
   /**
    * The OpenyUpgradeLogManager.
    *
-   * @var \Drupal\openy_upgrade_tool\OpenyUpgradeLogManagerInterface
+   * @var OpenyUpgradeLogManagerInterface
    */
   protected $upgradeLogManager;

@@ @@
   /**
    * Logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * ConfigEventSubscriber constructor.
    *
-   * @param \Drupal\openy_upgrade_tool\OpenyUpgradeLogManagerInterface $upgrade_log_manager
+   * @param OpenyUpgradeLogManagerInterface $upgrade_log_manager
    *   OpenyUpgradeLog Manager.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $loggerChannel
+   * @param LoggerChannelInterface $loggerChannel
    *   Logger channel.
    */
   public function __construct(
@@ @@
   /**
    * Subscriber Callback for the event.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   Configuration save event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function onSavingConfig(ConfigCrudEvent $event) {
     // TODO: Find solution without global variable.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/upgrade_tool/src/Entity/OpenyUpgradeLogInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openy_upgrade_tool\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the Openy upgrade log revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/upgrade_tool/src/Controller/OpenyUpgradeLogController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openy_upgrade_tool\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
   /**
    * Drupal\openy_upgrade_tool\OpenyUpgradeLogManager definition.
    *
-   * @var \Drupal\openy_upgrade_tool\OpenyUpgradeLogManagerInterface
+   * @var OpenyUpgradeLogManagerInterface
    */
   protected $upgradeLogManager;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
    * @return array
    *   Render array with dashboard.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function dashboard() {
     $build = [];
@@ @@
    * @return array
    *   An array suitable for drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function revisionShow($openy_upgrade_log_revision) {
     $openy_upgrade_log = \Drupal::entityTypeManager()->getStorage('openy_upgrade_log')->loadRevision($openy_upgrade_log_revision);
@@ @@
    * @return string
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function revisionPageTitle($openy_upgrade_log_revision) {
     $openy_upgrade_log = \Drupal::entityTypeManager()->getStorage('openy_upgrade_log')->loadRevision($openy_upgrade_log_revision);
@@ @@
   /**
    * Generates an overview table of older revisions of a Openy upgrade log .
    *
-   * @param \Drupal\openy_upgrade_tool\Entity\OpenyUpgradeLogInterface $openy_upgrade_log
+   * @param OpenyUpgradeLogInterface $openy_upgrade_log
    *   A Openy upgrade log  object.
    *
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function revisionOverview(OpenyUpgradeLogInterface $openy_upgrade_log) {
     $account = $this->currentUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/upgrade_tool/src/ConfigEventIgnorePluginManager.php:76

    ---------- begin diff ----------
@@ @@
   /**
    * Check config ignore rules.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   Config object.
    * @param $config_type
    *   Config type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/upgrade_tool/src/Annotation/ConfigEventIgnore.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openy_upgrade_tool\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


20) modules/contrib/upgrade_tool/openy_upgrade_tool.install:139

    ---------- begin diff ----------
@@ @@
  * Import new configs + install advanced_help_block.
  */
 function openy_upgrade_tool_update_8005() {
-  $config_dir = drupal_get_path('module', 'openy_upgrade_tool') . '/config/install/';
+  $config_dir = \Drupal::service('extension.list.module')->getPath('openy_upgrade_tool') . '/config/install/';
   // Import new configuration.
   $config_importer = \Drupal::service('openy_upgrade_tool.importer');
   $config_importer->setDirectory($config_dir);
@@ @@
   $entityTypeManager = \Drupal::entityTypeManager();

   // Load data from demo content.
-  $config_path = drupal_get_path('module', 'openy_demo_ahb') . '/config/install/migrate_plus.migration.openy_demo_entity_ahb.yml';
+  $config_path = \Drupal::service('extension.list.module')->getPath('openy_demo_ahb') . '/config/install/migrate_plus.migration.openy_demo_entity_ahb.yml';
   $entity_ahb_migration_data = Yaml::decode(file_get_contents($config_path));
   if (!isset($entity_ahb_migration_data['source']['data_rows'])) {
     // We have incorrect data.
@@ @@
  * Add bulk update actions for OpenY Upgrade dashboard.
  */
 function openy_upgrade_tool_update_8008() {
-  $config_dir = drupal_get_path('module', 'openy_upgrade_tool') . '/config/install/';
+  $config_dir = \Drupal::service('extension.list.module')->getPath('openy_upgrade_tool') . '/config/install/';
   // Import new configuration.
   $config_importer = \Drupal::service('openy_upgrade_tool.importer');
   $config_importer->setDirectory($config_dir);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [ERROR] Could not process "modules/contrib/upgrade_tool/src/ConfigUpdater.php" 
         file, due to:                                                          
         "Analyze error: "Class Drupal\config_import\ConfigImporterService not  
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/upgrade_tool/src/ConfigParamUpgradeTool.php" file, due
         to:                                                                    
         "Analyze error: "Class Drupal\config_import\ConfigParamUpdaterService not
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

