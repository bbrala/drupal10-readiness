modules/contrib/memcache/memcache.install
modules/contrib/memcache/memcache_admin/memcache_admin.install
modules/contrib/memcache/memcache_admin/src/Controller/MemcacheStatisticsController.php
modules/contrib/memcache/memcache_admin/src/Event/MemcacheStatsEvent.php
modules/contrib/memcache/memcache_admin/src/EventSubscriber/McrouterStatsSubscriber.php
modules/contrib/memcache/memcache_admin/src/EventSubscriber/MemcacheAdminSubscriber.php
modules/contrib/memcache/memcache_admin/src/EventSubscriber/MemcacheServerStatsSubscriber.php
modules/contrib/memcache/memcache_admin/src/Form/MemcacheAdminSettingsForm.php
modules/contrib/memcache/memcache_admin/src/Stats/McrouterStatsObject.php
modules/contrib/memcache/memcache_admin/src/Stats/MemcacheStatsInterface.php
modules/contrib/memcache/memcache_admin/src/Stats/MemcacheStatsObject.php
modules/contrib/memcache/src/Cache/TimestampCacheTagsChecksum.php
modules/contrib/memcache/src/Connection/MemcacheConnection.php
modules/contrib/memcache/src/Connection/MemcacheConnectionInterface.php
modules/contrib/memcache/src/Connection/MemcachedConnection.php
modules/contrib/memcache/src/Driver/DriverBase.php
modules/contrib/memcache/src/Driver/MemcacheDriver.php
modules/contrib/memcache/src/Driver/MemcacheDriverFactory.php
modules/contrib/memcache/src/Driver/MemcachedDriver.php
modules/contrib/memcache/src/DrupalMemcacheInterface.php
modules/contrib/memcache/src/Invalidator/MemcacheTimestampInvalidator.php
modules/contrib/memcache/src/Invalidator/TimestampInvalidatorBase.php
modules/contrib/memcache/src/Invalidator/TimestampInvalidatorInterface.php
modules/contrib/memcache/src/Lock/MemcacheLockBackend.php
modules/contrib/memcache/src/Lock/MemcacheLockFactory.php
modules/contrib/memcache/src/MemcacheBackend.php
modules/contrib/memcache/src/MemcacheBackendFactory.php
modules/contrib/memcache/src/MemcacheException.php
modules/contrib/memcache/src/MemcacheSettings.php
modules/contrib/memcache/src/MultipartItem.php
modules/contrib/memcache/tests/modules/memcache_test/src/MemcacheTestServiceProvider.php
modules/contrib/memcache/tests/src/Functional/MemcacheLockFunctionalTest.php
modules/contrib/memcache/tests/src/Kernel/MemcacheBackendTest.php
modules/contrib/memcache/tests/src/Unit/MemcacheSettingsTest.php

17 files with changes
=====================

1) modules/contrib/memcache/tests/src/Unit/MemcacheSettingsTest.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The class under test.
    *
-   * @var \Drupal\memcache\MemcacheSettings
+   * @var MemcacheSettings
    */
   protected $settings;

@@ @@
   /**
    * @covers ::__construct
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->config = [
       'memcache' => [
         'servers' => ['127.0.0.2:12345' => 'default'],
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/memcache/tests/src/Kernel/MemcacheBackendTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\memcache\Kernel;

+use Drupal\memcache\MemcacheBackend;
 use Drupal\KernelTests\Core\Cache\GenericCacheBackendUnitTestBase;
 use Drupal\memcache\MemcacheBackendFactory;

@@ @@
   /**
    * Creates a new instance of DatabaseBackend.
    *
-   * @return \Drupal\memcache\MemcacheBackend
+   * @return MemcacheBackend
    *   A new MemcacheBackend object.
    */
   protected function createCacheBackend($bin) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/memcache/src/MemcacheSettings.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Site\Settings $settings
+   * @param Settings $settings
    *   The site settings instance.
    */
   public function __construct(Settings $settings) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/memcache/src/MemcacheBackendFactory.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The memcache factory object.
    *
-   * @var \Drupal\memcache\Driver\MemcacheDriverFactory
+   * @var MemcacheDriverFactory
    */
   protected $memcacheFactory;

@@ @@
   /**
    * The cache tags checksum provider.
    *
-   * @var \Drupal\Core\Cache\CacheTagsChecksumInterface
+   * @var CacheTagsChecksumInterface
    */
   protected $checksumProvider;

@@ @@
   /**
    * The timestamp invalidation provider.
    *
-   * @var \Drupal\memcache\Invalidator\TimestampInvalidatorInterface
+   * @var TimestampInvalidatorInterface
    */
   protected $timestampInvalidator;

@@ @@
   /**
    * Constructs the MemcacheBackendFactory object.
    *
-   * @param \Drupal\memcache\Driver\MemcacheDriverFactory $memcache_factory
+   * @param MemcacheDriverFactory $memcache_factory
    *   The memcache factory object.
-   * @param \Drupal\Core\Cache\CacheTagsChecksumInterface $checksum_provider
+   * @param CacheTagsChecksumInterface $checksum_provider
    *   The cache tags checksum provider.
-   * @param \Drupal\memcache\Invalidator\TimestampInvalidatorInterface $timestamp_invalidator
+   * @param TimestampInvalidatorInterface $timestamp_invalidator
    *   The timestamp invalidation provider.
    */
   public function __construct(MemcacheDriverFactory $memcache_factory, CacheTagsChecksumInterface $checksum_provider, TimestampInvalidatorInterface $timestamp_invalidator) {
@@ @@
    * @param string $bin
    *   The cache bin for which the object is created.
    *
-   * @return \Drupal\memcache\MemcacheBackend
+   * @return MemcacheBackend
    *   The cache backend object for the specified cache bin.
    */
   public function get($bin) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/memcache/src/MemcacheBackend.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memcache;

+use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Component\Assertion\Inspector;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The memcache wrapper object.
    *
-   * @var \Drupal\memcache\DrupalMemcacheInterface
+   * @var DrupalMemcacheInterface
    */
   protected $memcache;

@@ @@
   /**
    * The cache tags checksum provider.
    *
-   * @var \Drupal\Core\Cache\CacheTagsChecksumInterface|\Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsChecksumInterface|CacheTagsInvalidatorInterface
    */
   protected $checksumProvider;

@@ @@
   /**
    * The timestamp invalidation provider.
    *
-   * @var \Drupal\memcache\Invalidator\TimestampInvalidatorInterface
+   * @var TimestampInvalidatorInterface
    */
   protected $timestampInvalidator;

@@ @@
    *
    * @param string $bin
    *   The bin name.
-   * @param \Drupal\memcache\DrupalMemcacheInterface $memcache
+   * @param DrupalMemcacheInterface $memcache
    *   The memcache object.
-   * @param \Drupal\Core\Cache\CacheTagsChecksumInterface $checksum_provider
+   * @param CacheTagsChecksumInterface $checksum_provider
    *   The cache tags checksum service.
-   * @param \Drupal\memcache\Invalidator\TimestampInvalidatorInterface $timestamp_invalidator
+   * @param TimestampInvalidatorInterface $timestamp_invalidator
    *   The timestamp invalidation provider.
    */
   public function __construct($bin, DrupalMemcacheInterface $memcache, CacheTagsChecksumInterface $checksum_provider, TimestampInvalidatorInterface $timestamp_invalidator) {
@@ @@
     $cache->valid = TRUE;

     // Items that have expired are invalid.
-    if ($cache->expire != CacheBackendInterface::CACHE_PERMANENT && $cache->expire <= REQUEST_TIME) {
+    if ($cache->expire != CacheBackendInterface::CACHE_PERMANENT && $cache->expire <= \Drupal::time()->getRequestTime()) {
       $cache->valid = FALSE;
     }

@@ @@
   public function invalidateMultiple(array $cids) {
     foreach ($cids as $cid) {
       if ($item = $this->get($cid)) {
-        $item->expire = REQUEST_TIME - 1;
+        $item->expire = \Drupal::time()->getRequestTime() - 1;
         $this->memcache->set($cid, $item);
       }
     }
    ----------- end diff -----------

Applied rules:
 * RequestTimeConstRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/memcache/src/Lock/MemcacheLockFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memcache\Lock;

+use Drupal\Core\Lock\LockBackendInterface;
 use Drupal\memcache\Driver\MemcacheDriverFactory;

 /**
@@ @@
   /**
    * The memcache factory.
    *
-   * @var \Drupal\memcache\Driver\MemcacheDriverFactory
+   * @var MemcacheDriverFactory
    */
   protected $factory;

@@ @@
   /**
    * Constructs a new MemcacheLockFactory.
    *
-   * @param \Drupal\memcache\Driver\MemcacheDriverFactory $memcache_factory
+   * @param MemcacheDriverFactory $memcache_factory
    *   The memcache factory.
    */
   public function __construct(MemcacheDriverFactory $memcache_factory) {
@@ @@
   /**
    * Gets a lock backend instance.
    *
-   * @return \Drupal\Core\Lock\LockBackendInterface
+   * @return LockBackendInterface
    *   A locked Memcache backend instance.
    */
   public function get() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/memcache/src/Lock/MemcacheLockBackend.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The memcache wrapper object.
    *
-   * @var \Drupal\memcache\DrupalMemcacheInterface
+   * @var DrupalMemcacheInterface
    */
   protected $memcache;

@@ @@
    *
    * @param string $bin
    *   The bin name for this lock.
-   * @param \Drupal\memcache\DrupalMemcacheInterface $memcache
+   * @param DrupalMemcacheInterface $memcache
    *   The memcache wrapper object.
    */
   public function __construct($bin, DrupalMemcacheInterface $memcache) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/memcache/src/Invalidator/MemcacheTimestampInvalidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memcache\Invalidator;

+use Drupal\memcache\DrupalMemcacheInterface;
 use Drupal\memcache\Driver\MemcacheDriverFactory;

 /**
@@ @@
   /**
    * A Memcache object.
    *
-   * @var \Drupal\memcache\DrupalMemcacheInterface
+   * @var DrupalMemcacheInterface
    */
   protected $memcache;

@@ @@
   /**
    * MemcacheTimestampInvalidator constructor.
    *
-   * @param \Drupal\memcache\Driver\MemcacheDriverFactory $memcache_factory
+   * @param MemcacheDriverFactory $memcache_factory
    *   Factory class for creation of Memcache objects.
    * @param string $bin
    *   Memcache bin to store the timestamps in.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/memcache/src/Driver/MemcacheDriverFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memcache\Driver;

+use Drupal\memcache\Connection\MemcacheConnectionInterface;
+use Drupal\memcache\DrupalMemcacheInterface;
 use Drupal\memcache\Connection\MemcacheConnection;
 use Drupal\memcache\Connection\MemcachedConnection;
 use Drupal\memcache\MemcacheSettings;
@@ @@
   /**
    * The settings object.
    *
-   * @var \Drupal\memcache\MemcacheSettings
+   * @var MemcacheSettings
    */
   protected $settings;

@@ @@
   /**
    * An array of Memcache connections keyed by bin.
    *
-   * @var \Drupal\memcache\Connection\MemcacheConnectionInterface[]
+   * @var MemcacheConnectionInterface[]
    */
   protected $connections = [];

@@ @@
   /**
    * Constructs a MemcacheDriverFactory object.
    *
-   * @param \Drupal\memcache\MemcacheSettings $settings
+   * @param MemcacheSettings $settings
    *   The settings object.
    */
   public function __construct(MemcacheSettings $settings) {
@@ @@
    * @param bool $flush
    *   Rebuild the bin/server/cache mapping.
    *
-   * @return \Drupal\memcache\DrupalMemcacheInterface|bool
+   * @return DrupalMemcacheInterface|bool
    *   A Memcache object.
    */
   public function get($bin = NULL, $flush = FALSE) {
@@ @@
       else {
         // Create a new Memcache object. Each cluster gets its own Memcache
         // object.
-        /** @var \Drupal\memcache\Connection\MemcacheConnectionInterface $memcache */
+        /** @var MemcacheConnectionInterface $memcache */
         $memcache = new $this->connectionClass($this->settings);

         // A variable to track whether we've connected to the first server.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/memcache/src/Driver/DriverBase.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The memcache config object.
    *
-   * @var \Drupal\memcache\MemcacheSettings
+   * @var MemcacheSettings
    */
   protected $settings;

@@ @@
   /**
    * Constructs a DriverBase object.
    *
-   * @param \Drupal\memcache\MemcacheSettings $settings
+   * @param MemcacheSettings $settings
    *   The memcache config object.
    * @param \Memcached|\Memcache $memcache
    *   An existing memcache connection object.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/memcache/src/Connection/MemcachedConnection.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a MemcachedConnection object.
    *
-   * @param \Drupal\memcache\MemcacheSettings $settings
+   * @param MemcacheSettings $settings
    *   The memcache config object.
    */
   public function __construct(MemcacheSettings $settings) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/memcache/src/Cache/TimestampCacheTagsChecksum.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The timestamp invalidator object.
    *
-   * @var \Drupal\memcache\Invalidator\TimestampInvalidatorInterface
+   * @var TimestampInvalidatorInterface
    */
   protected $invalidator;

@@ @@
   /**
    * Constructs a TimestampCacheTagsChecksum object.
    *
-   * @param \Drupal\memcache\Invalidator\TimestampInvalidatorInterface $invalidator
+   * @param TimestampInvalidatorInterface $invalidator
    *   The timestamp invalidator object.
    */
   public function __construct(TimestampInvalidatorInterface $invalidator) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/memcache/memcache_admin/src/Form/MemcacheAdminSettingsForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Memcache Admin Settings constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Configuration Factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/memcache/memcache_admin/src/EventSubscriber/MemcacheServerStatsSubscriber.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Populates the Memcache Server Stats
    *
-   * @param \Drupal\memcache_admin\Event\MemcacheStatsEvent $event
+   * @param MemcacheStatsEvent $event
    *   The event being dispatched.
    *
    * @throws \Exception
@@ @@
   /**
    * Populates the reporting of a stored set of stats.
    *
-   * @param \Drupal\memcache_admin\Event\MemcacheStatsEvent $event
+   * @param MemcacheStatsEvent $event
    */
   public function onReportStats(MemcacheStatsEvent $event) {
     $stats = $event->getFormattedStats('memcache');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/memcache/memcache_admin/src/EventSubscriber/MemcacheAdminSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memcache_admin\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Render\Element\HtmlTag;
 use Drupal\Core\Render\Markup;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Component\Render\HtmlEscapedText;
 use Drupal\Core\Render\HtmlResponse;
@@ @@
   /**
    * Display statistics on page.
    */
-  public function displayStatistics(FilterResponseEvent $event) {
+  public function displayStatistics(ResponseEvent $event) {
     $user = \Drupal::currentUser();

     if ($user->id() == 0) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/memcache/memcache_admin/src/EventSubscriber/McrouterStatsSubscriber.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Adds stats to the memcache event.
    *
-   * @param \Drupal\memcache_admin\Event\MemcacheStatsEvent $event
+   * @param MemcacheStatsEvent $event
    *   The event being dispatched.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/memcache/memcache_admin/src/Event/MemcacheStatsEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\memcache_admin\Event;

+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\memcache_admin\Stats\MemcacheStatsInterface;
 use Drupal\memcache\DrupalMemcacheInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Memcache Stats Event
@@ @@
    * @param string $format
    * @param string $bin
    * @param string $server
-   * @param \Drupal\memcache_admin\Stats\MemcacheStatsInterface $data
+   * @param MemcacheStatsInterface $data
    */
   public function updateFormattedStats($format, $bin, $server, $data) {
     $this->formattedStats[$format][$bin][$server] = $data;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 17 files have been changed by Rector                                      

