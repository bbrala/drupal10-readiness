diff --git a/modules/pdb_ng2/src/Plugin/Block/Ng2Block.php b/modules/pdb_ng2/src/Plugin/Block/Ng2Block.php
index dfe34b2..3abcff3 100644
--- a/modules/pdb_ng2/src/Plugin/Block/Ng2Block.php
+++ b/modules/pdb_ng2/src/Plugin/Block/Ng2Block.php
@@ -59,7 +59,7 @@ class Ng2Block extends PdbBlock {
         'ngClassName' => $component['ng_class_name'],
       ];
     }
-    $attached['drupalSettings']['pdb']['ng2']['module_path'] = drupal_get_path('module', 'pdb_ng2');
+    $attached['drupalSettings']['pdb']['ng2']['module_path'] = \Drupal::service('extension.list.module')->getPath('pdb_ng2');
 
     $config_settings = \Drupal::config('pdb_ng2.settings');
     if (isset($config_settings)) {
diff --git a/src/ComponentDiscovery.php b/src/ComponentDiscovery.php
index 46d7a4e..e984ce6 100644
--- a/src/ComponentDiscovery.php
+++ b/src/ComponentDiscovery.php
@@ -23,21 +23,21 @@ class ComponentDiscovery extends ExtensionDiscovery implements ComponentDiscover
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The info parser.
    *
-   * @var \Drupal\Core\Extension\InfoParserInterface
+   * @var InfoParserInterface
    */
   protected $infoParser;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -53,11 +53,11 @@ class ComponentDiscovery extends ExtensionDiscovery implements ComponentDiscover
    *
    * @param string $root
    *   The root directory of the Drupal installation.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Extension\InfoParserInterface $info_parser
+   * @param InfoParserInterface $info_parser
    *   The info parser.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct($root, EventDispatcherInterface $event_dispatcher, InfoParserInterface $info_parser, ModuleHandlerInterface $module_handler) {
@@ -108,7 +108,7 @@ class ComponentDiscovery extends ExtensionDiscovery implements ComponentDiscover
 
     // Try to get search dirs from subscribers.
     $event = new PdbDiscoveryEvent($search_dirs);
-    $this->eventDispatcher->dispatch(PdbDiscoveryEvent::SEARCH_DIRS, $event);
+    $this->eventDispatcher->dispatch($event, PdbDiscoveryEvent::SEARCH_DIRS);
 
     // Get the updated dicovery path from subscribers.
     $search_dirs = $event->getDirs();
diff --git a/src/ComponentDiscoveryInterface.php b/src/ComponentDiscoveryInterface.php
index 88406bc..a4e7b0c 100644
--- a/src/ComponentDiscoveryInterface.php
+++ b/src/ComponentDiscoveryInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pdb;
 
+use Drupal\Core\Extension\Extension;
 /**
  * Defines the interface for services which discover front-end components.
  */
@@ -10,7 +11,7 @@ interface ComponentDiscoveryInterface {
   /**
    * Find all available front-end components.
    *
-   * @return \Drupal\Core\Extension\Extension[]
+   * @return Extension[]
    *   The discovered components.
    */
   public function getComponents();
diff --git a/src/Event/PdbDiscoveryEvent.php b/src/Event/PdbDiscoveryEvent.php
index e651039..1f06d81 100644
--- a/src/Event/PdbDiscoveryEvent.php
+++ b/src/Event/PdbDiscoveryEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\pdb\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Provides an event to handle user custom search dirs.
diff --git a/src/Plugin/Block/PdbBlock.php b/src/Plugin/Block/PdbBlock.php
index 937fdb4..036f3d1 100644
--- a/src/Plugin/Block/PdbBlock.php
+++ b/src/Plugin/Block/PdbBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\pdb\Plugin\Block;
 
+use Drupal\Component\Plugin\Context\ContextInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\Plugin\DataType\EntityAdapter;
 use Drupal\Core\Form\FormStateInterface;
@@ -167,7 +168,7 @@ abstract class PdbBlock extends BlockBase implements FrameworkAwareBlockInterfac
   /**
    * Get the value of contexts.
    *
-   * @param \Drupal\Component\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    *   The contexts to get value.
    *
    * @return array
@@ -196,7 +197,7 @@ abstract class PdbBlock extends BlockBase implements FrameworkAwareBlockInterfac
    *
    * @param string $key
    *   The context key.
-   * @param \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $data
+   * @param EntityAdapter $data
    *   The context data.
    * @param array $context_values
    *   Array with contexts values.
@@ -230,7 +231,7 @@ abstract class PdbBlock extends BlockBase implements FrameworkAwareBlockInterfac
   /**
    * Add serialized entity to the JS Contexts.
    *
-   * @param \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $data
+   * @param EntityAdapter $data
    *   The entity to serialize.
    * @param array $js_contexts
    *   The full array of JS contexts.
@@ -272,7 +273,7 @@ abstract class PdbBlock extends BlockBase implements FrameworkAwareBlockInterfac
   /**
    * Build settings component settings form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state array.
    */
   protected function buildComponentSettingsForm(FormStateInterface $form_state) {
@@ -293,7 +294,7 @@ abstract class PdbBlock extends BlockBase implements FrameworkAwareBlockInterfac
    *
    * @param array $configuration
    *   The configuration array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state array.
    *
    * @return array
diff --git a/src/Plugin/Derivative/PdbBlockDeriver.php b/src/Plugin/Derivative/PdbBlockDeriver.php
index b4805c0..9f5355a 100644
--- a/src/Plugin/Derivative/PdbBlockDeriver.php
+++ b/src/Plugin/Derivative/PdbBlockDeriver.php
@@ -17,14 +17,14 @@ class PdbBlockDeriver extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The component discovery service.
    *
-   * @var \Drupal\pdb\ComponentDiscoveryInterface
+   * @var ComponentDiscoveryInterface
    */
   protected $componentDiscovery;
 
   /**
    * PdbBlockDeriver constructor.
    *
-   * @param \Drupal\pdb\ComponentDiscoveryInterface $component_discovery
+   * @param ComponentDiscoveryInterface $component_discovery
    *   The component discovery service.
    */
   public function __construct(ComponentDiscoveryInterface $component_discovery) {
@@ -70,7 +70,7 @@ class PdbBlockDeriver extends DeriverBase implements ContainerDeriverInterface {
    * @param array $contexts
    *   Contexts as defined in component label.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinition[]
+   * @return ContextDefinition[]
    *   Array of context to be used by block module.
    */
   protected function createContexts(array $contexts) {
diff --git a/tests/src/Unit/Plugin/Block/PdbBlockTest.php b/tests/src/Unit/Plugin/Block/PdbBlockTest.php
index 53abff2..9a71c49 100644
--- a/tests/src/Unit/Plugin/Block/PdbBlockTest.php
+++ b/tests/src/Unit/Plugin/Block/PdbBlockTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\pdb\Unit\Plugin\Block;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContextAwarePluginInterface;
 use Drupal\Tests\UnitTestCase;
@@ -16,17 +17,18 @@ use Drupal\Component\Uuid\UuidInterface;
  */
 class PdbBlockTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Instance of the Plugin.
    *
-   * @var \Drupal\pdb\Plugin\Block\PdbBlock
+   * @var PdbBlock
    */
   protected $plugin;
 
   /**
    * Create the setup for constants and plugin instance.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Mock the UUID service.
diff --git a/tests/src/Unit/Plugin/Derivative/PdbBlockDeriverTest.php b/tests/src/Unit/Plugin/Derivative/PdbBlockDeriverTest.php
index 213d76b..f0020bb 100644
--- a/tests/src/Unit/Plugin/Derivative/PdbBlockDeriverTest.php
+++ b/tests/src/Unit/Plugin/Derivative/PdbBlockDeriverTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\pdb\Unit\Plugin\Derivative;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\pdb\Plugin\Derivative\PdbBlockDeriver;
@@ -13,24 +14,25 @@ use Drupal\pdb\ComponentDiscoveryInterface;
  */
 class PdbBlockDeriverTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Mocked Component Discovery.
    *
-   * @var \Drupal\pdb\ComponentDiscoveryInterface
+   * @var ComponentDiscoveryInterface
    */
   protected $componentDiscovery;
 
   /**
    * Instance of the Block Deriver.
    *
-   * @var \Drupal\pdb\Plugin\Derivative\PdbBlockDeriver
+   * @var PdbBlockDeriver
    */
   protected $deriver;
 
   /**
    * Create the setup for constants.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Mock the UUID service.
