diff --git a/src/Annotation/Parameter.php b/src/Annotation/Parameter.php
index 7ae270f..ad2ec81 100644
--- a/src/Annotation/Parameter.php
+++ b/src/Annotation/Parameter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\stubby\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class Parameter extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/Output.php b/src/Controller/Output.php
index 4299113..1c2bc38 100644
--- a/src/Controller/Output.php
+++ b/src/Controller/Output.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\stubby\Controller;
 
+use Drupal\stubby\Entity\StubInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\stubby\ParameterInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -19,21 +23,21 @@ class Output extends ControllerBase {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The stub.
    *
-   * @var \Drupal\stubby\Entity\StubInterface
+   * @var StubInterface
    */
   protected $stub;
 
@@ -50,9 +54,9 @@ class Output extends ControllerBase {
   /**
    * Constructs a new Output..
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system) {
@@ -66,16 +70,16 @@ class Output extends ControllerBase {
    * @param string $stub
    *   The stub key.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JsonResponse object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function response($stub = NULL) {
     $data = [];
 
-    /** @var \Drupal\stubby\Entity\StubInterface $stub */
+    /** @var StubInterface $stub */
     if (!$this->stub = $this->entityManager->getStorage('stub')->load($stub)) {
       // @todo Provide some feedback if/when this fails.
       return new JsonResponse($data);
@@ -108,7 +112,7 @@ class Output extends ControllerBase {
    *   The response.
    */
   protected function processParameters() {
-    /** @var \Drupal\stubby\ParameterInterface $parameter */
+    /** @var ParameterInterface $parameter */
     foreach ($this->stub->getParameters() as $parameter) {
       if ($parameter->process() === FALSE) {
         // @todo Add some response logging here.
diff --git a/src/Entity/Stub.php b/src/Entity/Stub.php
index f356b17..26acce2 100644
--- a/src/Entity/Stub.php
+++ b/src/Entity/Stub.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\stubby\Entity;
 
+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ -118,7 +119,7 @@ class Stub extends ConfigEntityBase implements StubInterface, EntityWithPluginCo
   /**
    * Holds the collection of parameters that are used by this stub.
    *
-   * @var \Drupal\stubby\ParameterPluginCollection
+   * @var ParameterPluginCollection
    */
   protected $parameterCollection;
 
@@ -226,7 +227,7 @@ class Stub extends ConfigEntityBase implements StubInterface, EntityWithPluginCo
   /**
    * Returns the parameter plugin manager.
    *
-   * @return \Drupal\Component\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    *   The parameter plugin manager.
    */
   protected function getParameterPluginManager() {
@@ -242,7 +243,7 @@ class Stub extends ConfigEntityBase implements StubInterface, EntityWithPluginCo
       $config = \Drupal::config('stubby.settings');
       $file_name = $file_name ?? $config->get('file_location') . '://stubby/' . $this->id() . '.json';
       $json = Json::encode($json_array);
-      return file_save_data($json, $file_name, FileSystemInterface::EXISTS_REPLACE);
+      return \Drupal::service('file.repository')->writeData($json, $file_name, FileSystemInterface::EXISTS_REPLACE);
     }
     return FALSE;
   }
diff --git a/src/Entity/StubInterface.php b/src/Entity/StubInterface.php
index 42e80ee..f2819a4 100644
--- a/src/Entity/StubInterface.php
+++ b/src/Entity/StubInterface.php
@@ -42,7 +42,7 @@ interface StubInterface extends ConfigEntityInterface {
    * @param string $parameter
    *   The parameter uuid.
    *
-   * @return \Drupal\stubby\ParameterInterface
+   * @return ParameterInterface
    *   A loaded parameter.
    */
   public function getParameter($parameter);
@@ -70,7 +70,7 @@ interface StubInterface extends ConfigEntityInterface {
    * @param string $file_name
    *   An optional name to save the file as.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   The saved file or false.
    */
   public function createJsonFile($json, $file_name = NULL);
@@ -78,7 +78,7 @@ interface StubInterface extends ConfigEntityInterface {
   /**
    * Loads the file and creates one if missing.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   The loaded file or false on failuire.
    */
   public function loadJsonFile();
@@ -86,7 +86,7 @@ interface StubInterface extends ConfigEntityInterface {
   /**
    * Outputs the contents of a the Stub.
    *
-   * @param \Drupal\file\FileInterface|null $file
+   * @param FileInterface|null $file
    *   A file to parse, otherwise use from stub.
    *
    * @return string
diff --git a/src/Form/ParameterDeleteForm.php b/src/Form/ParameterDeleteForm.php
index eb796e1..1d6c93d 100644
--- a/src/Form/ParameterDeleteForm.php
+++ b/src/Form/ParameterDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\stubby\Form;
 
+use Drupal\stubby\ParameterInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\stubby\Entity\StubInterface;
@@ -16,14 +17,14 @@ class ParameterDeleteForm extends ConfirmFormBase {
   /**
    * The stub.
    *
-   * @var \Drupal\stubby\Entity\StubInterface
+   * @var StubInterface
    */
   protected $stub;
 
   /**
    * The parameter.
    *
-   * @var \Drupal\stubby\ParameterInterface
+   * @var ParameterInterface
    */
   protected $parameter;
 
diff --git a/src/Form/ParameterFormBase.php b/src/Form/ParameterFormBase.php
index 28b10d8..e8be11a 100644
--- a/src/Form/ParameterFormBase.php
+++ b/src/Form/ParameterFormBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\stubby\Form;
 
+use Drupal\stubby\ParameterInterface;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ -19,21 +21,21 @@ abstract class ParameterFormBase extends FormBase {
   /**
    * The parameter manager.
    *
-   * @var \Drupal\stubby\ParameterManager
+   * @var ParameterManager
    */
   protected $parameterManager;
 
   /**
    * The stub.
    *
-   * @var \Drupal\stubby\Entity\StubInterface
+   * @var StubInterface
    */
   protected $stub;
 
   /**
    * The parameter.
    *
-   * @var \Drupal\stubby\ParameterInterface
+   * @var ParameterInterface
    */
   protected $parameter;
 
@@ -49,7 +51,7 @@ abstract class ParameterFormBase extends FormBase {
   /**
    * StubForm constructor.
    *
-   * @param \Drupal\stubby\ParameterManager $parameter_manager
+   * @param ParameterManager $parameter_manager
    *   The parameter manager.
    */
   public function __construct(ParameterManager $parameter_manager) {
@@ -68,9 +70,9 @@ abstract class ParameterFormBase extends FormBase {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Drupal\stubby\Entity\StubInterface $stub
+   * @param StubInterface $stub
    *   The stub..
    * @param string $parameter
    *   The parameter ID.
@@ -78,7 +80,7 @@ abstract class ParameterFormBase extends FormBase {
    * @return array
    *   The form structure.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function buildForm(array $form, FormStateInterface $form_state, StubInterface $stub = NULL, $parameter = NULL) {
     $this->stub = $stub;
@@ -159,7 +161,7 @@ abstract class ParameterFormBase extends FormBase {
    * @param string $parameter
    *   The parameter ID.
    *
-   * @return \Drupal\stubby\ParameterInterface
+   * @return ParameterInterface
    *   The parameter object.
    */
   abstract protected function prepareParameter($parameter);
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 1fe5520..0e55826 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -20,14 +20,14 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The streamwrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
@@ -45,11 +45,11 @@ class SettingsForm extends ConfigFormBase {
   /**
    * SettingsForm construct.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Config factory.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StreamWrapperManagerInterface $stream_wrapper_manager, FileSystemInterface $file_system) {
diff --git a/src/Form/StubForm.php b/src/Form/StubForm.php
index 972c216..64c06c2 100644
--- a/src/Form/StubForm.php
+++ b/src/Form/StubForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\stubby\Form;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\stubby\ParameterInterface;
+use Drupal\stubby\Entity\StubInterface;
+use Drupal\file\FileInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -19,14 +23,14 @@ class StubForm extends EntityForm {
   /**
    * The parameter manager.
    *
-   * @var \Drupal\stubby\ParameterManager
+   * @var ParameterManager
    */
   protected $parameterManager;
 
   /**
    * The Stubby Settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
@@ -43,9 +47,9 @@ class StubForm extends EntityForm {
   /**
    * StubForm constructor.
    *
-   * @param \Drupal\stubby\ParameterManager $parameter_manager
+   * @param ParameterManager $parameter_manager
    *   The parameter manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ParameterManager $parameter_manager, ConfigFactoryInterface $config_factory) {
@@ -169,7 +173,7 @@ class StubForm extends EntityForm {
         '#weight' => 5,
       ];
 
-      /** @var \Drupal\stubby\ParameterInterface $parameter */
+      /** @var ParameterInterface $parameter */
       foreach ($this->entity->getParameters() as $parameter) {
         $key = $parameter->getUuid();
         $form['parameters'][$key]['#attributes']['class'][] = 'draggable';
@@ -382,14 +386,14 @@ class StubForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\stubby\Entity\StubInterface $stub */
+    /** @var StubInterface $stub */
     $stub = $this->entity;
 
     $json_fid = $form_state->getValue(['response_file', 0]);
     $old_file = $stub->loadJsonFile();
     // We have a file, either old or new.
     if ($json_fid) {
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = $this->entityTypeManager->getStorage('file')->load($json_fid);
 
       // New file or overwrite.
diff --git a/src/ParameterBase.php b/src/ParameterBase.php
index aa62de7..d78eaca 100644
--- a/src/ParameterBase.php
+++ b/src/ParameterBase.php
@@ -33,7 +33,7 @@ abstract class ParameterBase extends PluginBase implements ParameterInterface, C
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
diff --git a/src/ParameterManager.php b/src/ParameterManager.php
index 1289e27..5a5bd4b 100644
--- a/src/ParameterManager.php
+++ b/src/ParameterManager.php
@@ -17,9 +17,9 @@ class ParameterManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/ParameterPluginCollection.php b/src/ParameterPluginCollection.php
index 9ca7e2f..49ec94c 100644
--- a/src/ParameterPluginCollection.php
+++ b/src/ParameterPluginCollection.php
@@ -12,7 +12,7 @@ class ParameterPluginCollection extends DefaultLazyPluginCollection {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\stubby\ParameterInterface
+   * @return ParameterInterface
    *   The parameter.
    */
   public function &get($instance_id) {
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index fd0ac78..75cdc28 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -15,14 +15,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * StubRoutes Service.
    *
-   * @var \Drupal\stubby\Routing\StubRoutes
+   * @var StubRoutes
    */
   protected $stubRoutes;
 
   /**
    * RouteSubscriber constructor.
    *
-   * @param \Drupal\stubby\Routing\StubRoutes $stub_routes
+   * @param StubRoutes $stub_routes
    *   StubRoutes Service.
    */
   public function __construct(StubRoutes $stub_routes) {
@@ -32,7 +32,7 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Adds Stubby RouteCollection to Drupal RouteCollection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   Drupal RouteCollection.
    */
   protected function alterRoutes(RouteCollection $collection) {
diff --git a/src/Routing/StubRoutes.php b/src/Routing/StubRoutes.php
index a14da34..9d67c37 100644
--- a/src/Routing/StubRoutes.php
+++ b/src/Routing/StubRoutes.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\stubby\Routing;
 
+use Drupal\stubby\Entity\StubInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\Routing\Route;
 use Symfony\Component\Routing\RouteCollection;
@@ -16,14 +19,14 @@ class StubRoutes {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;
 
   /**
    * StubRoutes constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -33,7 +36,7 @@ class StubRoutes {
   /**
    * Creates dynamic routes based on stubs.
    *
-   * @return \Symfony\Component\Routing\RouteCollection
+   * @return RouteCollection
    *   Stubby RouteCollection
    */
   public function routes() {
@@ -59,10 +62,10 @@ class StubRoutes {
   /**
    * Creates a Route from a Stub entity.
    *
-   * @param \Drupal\stubby\Entity\StubInterface $stub
+   * @param StubInterface $stub
    *   Stub Entity.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   Stub Route.
    */
   private function createRouteFromStub($stub) {
@@ -83,11 +86,11 @@ class StubRoutes {
   /**
    * Load all the Stubs from the Storage.
    *
-   * @return \Drupal\stubby\Entity\StubInterface[]
+   * @return StubInterface[]
    *   Array with Stub Entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getAllStubs() {
     return $this->entityManager->getStorage('stub')->loadMultiple();
diff --git a/stubby.info.yml b/stubby.info.yml
index d785ec1..63a275e 100644
--- a/stubby.info.yml
+++ b/stubby.info.yml
@@ -1,5 +1,5 @@
 name: 'Stubby'
 type: module
 description: 'Create Stub data using a simple UI.'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: 'Development'
diff --git a/stubby.module b/stubby.module
index cf14972..1c743d7 100644
--- a/stubby.module
+++ b/stubby.module
@@ -1,16 +1,16 @@
 <?php
 
+use Drupal\file\FileInterface;
 /**
  * @file
  * Module implementations for the Stubby module.
  */
-
 /**
  * Implements hook_file_download().
  */
 function stubby_file_download($uri) {
   // Get the file record based on the URI. If not in the database just return.
-  /** @var \Drupal\file\FileInterface[] $files */
+  /** @var FileInterface[] $files */
   $files = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => $uri]);
   if (count($files)) {
     foreach ($files as $item) {
