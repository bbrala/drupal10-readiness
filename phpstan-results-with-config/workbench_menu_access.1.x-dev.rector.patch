diff --git a/src/Form/WorkbenchMenuAccessMenuForm.php b/src/Form/WorkbenchMenuAccessMenuForm.php
index a3446b1..542d40b 100644
--- a/src/Form/WorkbenchMenuAccessMenuForm.php
+++ b/src/Form/WorkbenchMenuAccessMenuForm.php
@@ -22,14 +22,14 @@ class WorkbenchMenuAccessMenuForm extends ConfigFormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a WorkbenchMenuAccessSettingsForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -111,7 +111,7 @@ class WorkbenchMenuAccessMenuForm extends ConfigFormBase {
   /**
    * Route title callback.
    *
-   * @param \Drupal\system\MenuInterface $menu
+   * @param MenuInterface $menu
    *   The menu entity.
    *
    * @return array
diff --git a/src/Form/WorkbenchMenuAccessSettingsForm.php b/src/Form/WorkbenchMenuAccessSettingsForm.php
index 551fa2e..8e808dc 100644
--- a/src/Form/WorkbenchMenuAccessSettingsForm.php
+++ b/src/Form/WorkbenchMenuAccessSettingsForm.php
@@ -19,14 +19,14 @@ class WorkbenchMenuAccessSettingsForm extends ConfigFormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a WorkbenchMenuAccessSettingsForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/WorkbenchMenuAccessControlHandler.php b/src/WorkbenchMenuAccessControlHandler.php
index b2f58cd..a5b35f8 100644
--- a/src/WorkbenchMenuAccessControlHandler.php
+++ b/src/WorkbenchMenuAccessControlHandler.php
@@ -55,9 +55,9 @@ class WorkbenchMenuAccessControlHandler extends MenuAccessControlHandler {
   /**
    * Checks that a user may update a menu and its links.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The parent menu item being checked.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account requesting access.
    *
    * @return boolean
diff --git a/src/WorkbenchMenuLinkContentAccessControlHandler.php b/src/WorkbenchMenuLinkContentAccessControlHandler.php
index 1f29e7d..c40b3b1 100644
--- a/src/WorkbenchMenuLinkContentAccessControlHandler.php
+++ b/src/WorkbenchMenuLinkContentAccessControlHandler.php
@@ -23,16 +23,16 @@ class WorkbenchMenuLinkContentAccessControlHandler extends MenuLinkContentAccess
   /**
    * The access manager to check routes by name.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface
+   * @var AccessManagerInterface
    */
   protected $accessManager;
 
   /**
    * Creates a new MenuLinkContentAccessControlHandler.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Access\AccessManagerInterface $access_manager
+   * @param AccessManagerInterface $access_manager
    *   The access manager to check routes by name.
    */
   public function __construct(EntityTypeInterface $entity_type, AccessManagerInterface $access_manager) {
diff --git a/tests/src/Functional/WorkbenchMenuAccessMenuLinkTest.php b/tests/src/Functional/WorkbenchMenuAccessMenuLinkTest.php
index cb645d3..8deaacf 100644
--- a/tests/src/Functional/WorkbenchMenuAccessMenuLinkTest.php
+++ b/tests/src/Functional/WorkbenchMenuAccessMenuLinkTest.php
@@ -6,6 +6,9 @@
 
 namespace Drupal\Tests\workbench_menu_access\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\node\NodeTypeInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\workbench_menu_access\Traits\WorkbenchMenuAccessTestTrait;
 
@@ -28,28 +31,28 @@ class WorkbenchMenuAccessMenuLinkTest extends BrowserTestBase {
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;
 
   /**
    * Editorial user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $editor;
 
   /**
    * Vocabulary.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;
 
   /**
    * Vocabulary.
    *
-   * @var \Drupal\node\NodeTypeInterface
+   * @var NodeTypeInterface
    */
   protected $node_type;
 
@@ -68,7 +71,7 @@ class WorkbenchMenuAccessMenuLinkTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->node_type = $this->createContentType(['type' => 'page']);
@@ -88,7 +91,7 @@ class WorkbenchMenuAccessMenuLinkTest extends BrowserTestBase {
     // Config check.
     $config = \Drupal::config('workbench_menu_access.settings');
     $active = $config->get('access_scheme');
-    $this->assertEqual($active, '');
+    $this->assertEquals($active, '');
 
     // Check the settings.
     $menu = \Drupal::entityTypeManager()->getStorage('menu')->load('main');
@@ -105,15 +108,15 @@ class WorkbenchMenuAccessMenuLinkTest extends BrowserTestBase {
     foreach ($path_list as $test) {
       $this->drupalLogout();
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to anon user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
 
       $this->drupalLogin($this->editor);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to editor user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');
 
       $this->drupalLogin($this->admin);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to admin user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     }
 
     // Setup config.
@@ -130,15 +133,15 @@ class WorkbenchMenuAccessMenuLinkTest extends BrowserTestBase {
     foreach ($path_list as $test) {
       $this->drupalLogout();
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to anon user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
 
       $this->drupalLogin($this->editor);
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to editor user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to editor user.');
 
       $this->drupalLogin($this->admin);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to admin user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     }
 
     // Add editor to section.
@@ -147,15 +150,15 @@ class WorkbenchMenuAccessMenuLinkTest extends BrowserTestBase {
     foreach ($path_list as $test) {
       $this->drupalLogout();
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to anon user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
 
       $this->drupalLogin($this->editor);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to editor user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');
 
       $this->drupalLogin($this->admin);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to admin user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     }
 
     // Test for subsection handling.
@@ -170,15 +173,15 @@ class WorkbenchMenuAccessMenuLinkTest extends BrowserTestBase {
     foreach ($path_list as $test) {
       $this->drupalLogout();
       $this->drupalGet($test);
-      $this->assertResponse(403, 'Access denied to anon user.');
+      $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
 
       $this->drupalLogin($this->editor);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to editor user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');
 
       $this->drupalLogin($this->admin);
       $this->drupalGet($test);
-      $this->assertResponse(200, 'Access allowed to admin user.');
+      $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     }
 
   }
diff --git a/tests/src/Functional/WorkbenchMenuAccessMenuTest.php b/tests/src/Functional/WorkbenchMenuAccessMenuTest.php
index 3d2580d..13059a7 100644
--- a/tests/src/Functional/WorkbenchMenuAccessMenuTest.php
+++ b/tests/src/Functional/WorkbenchMenuAccessMenuTest.php
@@ -6,6 +6,9 @@
 
 namespace Drupal\Tests\workbench_menu_access\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\node\NodeTypeInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\workbench_menu_access\Traits\WorkbenchMenuAccessTestTrait;
 
@@ -28,28 +31,28 @@ class WorkbenchMenuAccessMenuTest extends BrowserTestBase {
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;
 
   /**
    * Editorial user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $editor;
 
   /**
    * Vocabulary.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;
 
   /**
    * Vocabulary.
    *
-   * @var \Drupal\node\NodeTypeInterface
+   * @var NodeTypeInterface
    */
   protected $node_type;
 
@@ -68,7 +71,7 @@ class WorkbenchMenuAccessMenuTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->node_type = $this->createContentType(['type' => 'page']);
@@ -84,7 +87,7 @@ class WorkbenchMenuAccessMenuTest extends BrowserTestBase {
     // Config check.
     $config = \Drupal::config('workbench_menu_access.settings');
     $active = $config->get('access_scheme');
-    $this->assertEqual($active, '');
+    $this->assertEquals($active, '');
 
     // Check the settings.
     $menu = \Drupal::entityTypeManager()->getStorage('menu')->load('main');
@@ -94,23 +97,23 @@ class WorkbenchMenuAccessMenuTest extends BrowserTestBase {
     $path = '/admin/structure/menu/manage/main';
     $access_path = '/admin/structure/menu/manage/main/access';
     $this->drupalGet($path);
-    $this->assertResponse(403, 'Access denied to anon user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
     $this->drupalGet($access_path);
-    $this->assertResponse(403, 'Access denied to anon user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to anon user.');
 
     $this->drupalLogin($this->editor);
     $this->drupalGet($path);
     $web_assert = $this->assertSession();
-    $this->assertResponse(200, 'Access allowed to editor user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');
     $this->drupalGet($access_path);
-    $this->assertResponse(403, 'Access denied to editor user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to editor user.');
 
     $this->drupalLogin($this->admin);
     $this->drupalGet($path);
-    $this->assertResponse(200, 'Access allowed to admin user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     $web_assert->fieldNotExists('workbench_menu_access[]');
     $this->drupalGet($access_path);
-    $this->assertResponse(200, 'Access allowed to admin user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     $web_assert->pageTextContains('You must configure an access scheme to continue.');
 
     // Setup config.
@@ -121,7 +124,7 @@ class WorkbenchMenuAccessMenuTest extends BrowserTestBase {
     // Admin can access the form.
     $this->drupalLogin($this->admin);
     $this->drupalGet($access_path);
-    $this->assertResponse(200, 'Access allowed to admin user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     $web_assert->fieldExists('workbench_menu_access[]');
 
     // Save the form.
@@ -130,23 +133,23 @@ class WorkbenchMenuAccessMenuTest extends BrowserTestBase {
 
     // Check the settings.
     $menu = \Drupal::entityTypeManager()->getStorage('menu')->load('main');
-    $this->assertEqual(array_values($menu->getThirdPartySetting('workbench_menu_access', 'access_scheme')), $edit);
+    $this->assertEquals(array_values($menu->getThirdPartySetting('workbench_menu_access', 'access_scheme')), $edit);
 
     // Editor can no longer access page.
     $this->drupalLogin($this->editor);
     $this->drupalGet($access_path);
-    $this->assertResponse(403, 'Access denied to editor user.');
+    $this->assertSession()->statusCodeEquals(403, 'Access denied to editor user.');
 
     // Editor can access the menu page but not the access form.
     $this->addUserToSection($scheme, $this->editor, [3]);
     $this->drupalLogin($this->editor);
     $this->drupalGet($path);
-    $this->assertResponse(200, 'Access allowed to editor user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');
 
     // Admin can access the form.
     $this->drupalLogin($this->admin);
     $this->drupalGet($access_path);
-    $this->assertResponse(200, 'Access allowed to admin user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to admin user.');
     $web_assert->fieldExists('workbench_menu_access[]');
 
     // Test for subsection handling.
@@ -158,7 +161,7 @@ class WorkbenchMenuAccessMenuTest extends BrowserTestBase {
     // Editor can access the page but not the form.
     $this->drupalLogin($this->editor);
     $this->drupalGet($path);
-    $this->assertResponse(200, 'Access allowed to editor user.');
+    $this->assertSession()->statusCodeEquals(200, 'Access allowed to editor user.');
 
   }
 
