modules/contrib/node_revision_delete/modules/node_revision_generate/node_revision_generate.module
modules/contrib/node_revision_delete/modules/node_revision_generate/src/Form/NodeRevisionGenerateForm.php
modules/contrib/node_revision_delete/modules/node_revision_generate/src/NodeRevisionGenerate.php
modules/contrib/node_revision_delete/modules/node_revision_generate/src/NodeRevisionGenerateBatch.php
modules/contrib/node_revision_delete/modules/node_revision_generate/src/NodeRevisionGenerateInterface.php
modules/contrib/node_revision_delete/modules/node_revision_generate/tests/src/Functional/NodeRevisionGenerateTest.php
modules/contrib/node_revision_delete/modules/node_revision_generate/tests/src/Traits/NodeRevisionGenerateTestTrait.php
modules/contrib/node_revision_delete/modules/node_revision_generate/tests/src/Unit/NodeRevisionGenerateTest.php
modules/contrib/node_revision_delete/node_revision_delete.install
modules/contrib/node_revision_delete/node_revision_delete.module
modules/contrib/node_revision_delete/src/Commands/NodeRevisionDeleteCommands.php
modules/contrib/node_revision_delete/src/Form/AdminSettingsForm.php
modules/contrib/node_revision_delete/src/Form/CandidateNodesForm.php
modules/contrib/node_revision_delete/src/Form/CandidateNodesRevisionsDeleteForm.php
modules/contrib/node_revision_delete/src/Form/CandidateRevisionsContentTypeForm.php
modules/contrib/node_revision_delete/src/Form/CandidateRevisionsNodeForm.php
modules/contrib/node_revision_delete/src/Form/ContentTypeConfigurationDeleteForm.php
modules/contrib/node_revision_delete/src/Form/ContentTypeRevisionsDeleteForm.php
modules/contrib/node_revision_delete/src/NodeRevisionDelete.php
modules/contrib/node_revision_delete/src/NodeRevisionDeleteBatch.php
modules/contrib/node_revision_delete/src/NodeRevisionDeleteInterface.php
modules/contrib/node_revision_delete/src/Utility/Donation.php
modules/contrib/node_revision_delete/src/Utility/Time.php
modules/contrib/node_revision_delete/tests/modules/node_revision_delete_test/node_revision_delete_test.module
modules/contrib/node_revision_delete/tests/src/Functional/NodeRevisionDeleteAdminSettingsTest.php
modules/contrib/node_revision_delete/tests/src/Kernel/DefaultConfigurationTest.php
modules/contrib/node_revision_delete/tests/src/Kernel/NodeRevisionDeleteConfigTest.php
modules/contrib/node_revision_delete/tests/src/Kernel/NodeRevisionDeleteQueryAlterTest.php
modules/contrib/node_revision_delete/tests/src/Traits/NodeRevisionDeleteTestTrait.php
modules/contrib/node_revision_delete/tests/src/Unit/NodeRevisionDeleteTest.php
modules/contrib/node_revision_delete/tests/src/Unit/Utility/TimeTest.php

20 files with changes
=====================

1) modules/contrib/node_revision_delete/tests/src/Unit/NodeRevisionDeleteTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\node_revision_delete\Unit;

+use Drupal\Core\Database\Connection;
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\node_revision_delete\NodeRevisionDeleteBatch;
 use Drupal\Tests\UnitTestCase;
 use Drupal\node_revision_delete\NodeRevisionDelete;
@@ @@
   /**
    * A connection instance.
    *
-   * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+   * @var Connection|MockObject
    */
   protected $connection;

@@ @@
   /**
    * A config factory instance.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var ConfigFactoryInterface|MockObject
    */
   protected $configFactory;

@@ @@
   /**
    * An entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var EntityTypeManagerInterface|MockObject
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A language manager instance.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var LanguageManagerInterface|MockObject
    */
   protected $languageManager;

@@ @@
   /**
    * The NodeRevisionDelete Object.
    *
-   * @var \Drupal\node_revision_delete\NodeRevisionDelete
+   * @var NodeRevisionDelete
    */
   protected $nodeRevisionDelete;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Setting the config file.
     $this->configFile = 'node_revision_delete.settings';
@@ @@
    * @param array $content_types_list
    *   A list with content types objects.
    *
-   * @return \Drupal\node_revision_delete\NodeRevisionDelete|\PHPUnit\Framework\MockObject\MockObject
+   * @return NodeRevisionDelete|MockObject
    *   The mocked class.
    */
   private function getNodeRevisionDeleteMock(array $content_types_list) {
     // Mock NodeRevisionDelete.
-    /** @var \Drupal\node_revision_delete\NodeRevisionDelete|\PHPUnit_Framework_MockObject_MockObject $controller */
+    /** @var NodeRevisionDelete|MockObject $controller */
     $controller = $this->getMockBuilder('Drupal\node_revision_delete\NodeRevisionDelete')
       ->setConstructorArgs([
         $this->configFactory,
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/node_revision_delete/tests/src/Kernel/NodeRevisionDeleteConfigTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\node_revision_delete\Kernel;

+use Drupal\node_revision_delete\NodeRevisionDeleteInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\node_revision_delete\Traits\NodeRevisionDeleteTestTrait;

@@ @@
   /**
    * The node_revision_delete service.
    *
-   * @var \Drupal\node_revision_delete\NodeRevisionDeleteInterface
+   * @var NodeRevisionDeleteInterface
    */
   protected $nodeRevisionDelete;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->configurationFileName = 'node_revision_delete.settings';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/node_revision_delete/tests/src/Functional/NodeRevisionDeleteAdminSettingsTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Setting the config file.
     $this->configurationFileName = 'node_revision_delete.settings';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/node_revision_delete/src/NodeRevisionDeleteInterface.php:78

    ---------- begin diff ----------
@@ @@
    * @param string $time
    *   The time option (days, weeks or months).
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The singular or plural value for the time.
    */
   public function getTimeNumberString(string $number, string $time): TranslatableMarkup;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/node_revision_delete/src/NodeRevisionDeleteBatch.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\node_revision_delete;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\node\NodeInterface;
 use Drupal\node\Entity\Node;

 /**
@@ @@
    * Once the revision is deleted the context is updated with the total number
    * of revisions deleted and the node object.
    *
-   * @param \Drupal\node\Entity\Node|int $revision
+   * @param Node|int $revision
    *   The revision to delete.
    * @param bool $dry_run
    *   Indicate if we need to delete or not the revision. TRUE for test purpose
@@ @@
    * @param mixed $context
    *   The context of the current batch.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function deleteRevision($revision, bool $dry_run, int $total, &$context): void {
     $node_storage = \Drupal::entityTypeManager()->getStorage('node');
@@ @@
     // Count the number of revisions deleted.
     $context['results']['revisions']++;
     // Adding a message for the actual revision being deleted.
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $context['results']['node'];
     $message = t('@current / @total - Revision @rid of node @nid - @lang - @title', [
       '@rid' => $revision,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/node_revision_delete/src/NodeRevisionDelete.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\node_revision_delete;

+use Drupal\Core\Entity\RevisionableInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected Connection $connection;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected LanguageManagerInterface $languageManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(
@@ @@
       // Same language as the current language AND are older than the current
       // deleted revision.
       foreach ($revision_ids as $vid) {
-        /** @var \Drupal\Core\Entity\RevisionableInterface $revision */
+        /** @var RevisionableInterface $revision */
         $revision = $node_storage->loadRevision($vid);
         // Only show revisions that are affected by the language
         // that is being displayed.
@@ @@
     }
     // As all the nids must be of the same content type we just need to load
     // one.
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->entityTypeManager->getStorage('node')->load(current($nids));

     $content_type = $node->getType();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/node_revision_delete/src/Form/ContentTypeRevisionsDeleteForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The node type object.
    *
-   * @var \Drupal\node\NodeTypeInterface
+   * @var NodeTypeInterface
    */
   protected NodeTypeInterface $contentType;

@@ @@
   /**
    * The node revision delete.
    *
-   * @var \Drupal\node_revision_delete\NodeRevisionDeleteInterface
+   * @var NodeRevisionDeleteInterface
    */
   protected NodeRevisionDeleteInterface $nodeRevisionDelete;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\node_revision_delete\NodeRevisionDeleteInterface $node_revision_delete
+   * @param NodeRevisionDeleteInterface $node_revision_delete
    *   The node revision delete.
    */
   public function __construct(NodeRevisionDeleteInterface $node_revision_delete) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/node_revision_delete/src/Form/ContentTypeConfigurationDeleteForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The node type object.
    *
-   * @var \Drupal\node\NodeTypeInterface
+   * @var NodeTypeInterface
    */
   protected NodeTypeInterface $contentType;

@@ @@
   /**
    * The node revision delete interface.
    *
-   * @var \Drupal\node_revision_delete\NodeRevisionDeleteInterface
+   * @var NodeRevisionDeleteInterface
    */
   protected NodeRevisionDeleteInterface $nodeRevisionDelete;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\node_revision_delete\NodeRevisionDeleteInterface $node_revision_delete
+   * @param NodeRevisionDeleteInterface $node_revision_delete
    *   The node revision delete.
    */
   public function __construct(NodeRevisionDeleteInterface $node_revision_delete) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/node_revision_delete/src/Form/CandidateRevisionsNodeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\node_revision_delete\Form;

+use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The node revision delete interface.
    *
-   * @var \Drupal\node_revision_delete\NodeRevisionDeleteInterface
+   * @var NodeRevisionDeleteInterface
    */
   protected NodeRevisionDeleteInterface $nodeRevisionDelete;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected RendererInterface $renderer;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\node_revision_delete\NodeRevisionDeleteInterface $node_revision_delete
+   * @param NodeRevisionDeleteInterface $node_revision_delete
    *   The node revision delete.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(
@@ @@
     $rows = [];
     foreach ($revisions as $revision) {
       // Loading the revisions.
-      /** @var \Drupal\Core\Entity\RevisionLogInterface $revision */
+      /** @var RevisionLogInterface $revision */
       $revision = $this->entityTypeManager->getStorage('node')->loadRevision($revision);

       $username = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/node_revision_delete/src/Form/CandidateRevisionsContentTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\node_revision_delete\Form;

+use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The node revision delete interface.
    *
-   * @var \Drupal\node_revision_delete\NodeRevisionDeleteInterface
+   * @var NodeRevisionDeleteInterface
    */
   protected NodeRevisionDeleteInterface $nodeRevisionDelete;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected RendererInterface $renderer;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\node_revision_delete\NodeRevisionDeleteInterface $node_revision_delete
+   * @param NodeRevisionDeleteInterface $node_revision_delete
    *   The node revision delete.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(
@@ @@
     $rows = [];
     foreach ($revisions as $revision) {
       // Loading the revisions.
-      /** @var \Drupal\Core\Entity\RevisionLogInterface $revision */
+      /** @var RevisionLogInterface $revision */
       $revision = $this->entityTypeManager->getStorage('node')->loadRevision($revision);

       $username = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/node_revision_delete/src/Form/CandidateNodesRevisionsDeleteForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The node type object.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected NodeInterface $node;

@@ @@
   /**
    * The node revision delete interface.
    *
-   * @var \Drupal\node_revision_delete\NodeRevisionDeleteInterface
+   * @var NodeRevisionDeleteInterface
    */
   protected NodeRevisionDeleteInterface $nodeRevisionDelete;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\node_revision_delete\NodeRevisionDeleteInterface $node_revision_delete
+   * @param NodeRevisionDeleteInterface $node_revision_delete
    *   The node revision delete.
    */
   public function __construct(NodeRevisionDeleteInterface $node_revision_delete) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string|null $node_type
    *   The node type machine name.
-   * @param \Drupal\node\NodeInterface|null $node
+   * @param NodeInterface|null $node
    *   The node.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/node_revision_delete/src/Form/CandidateNodesForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\node_revision_delete\Form;

+use Drupal\node\Entity\Node;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The node revision delete interface.
    *
-   * @var \Drupal\node_revision_delete\NodeRevisionDeleteInterface
+   * @var NodeRevisionDeleteInterface
    */
   protected NodeRevisionDeleteInterface $nodeRevisionDelete;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\node_revision_delete\NodeRevisionDeleteInterface $node_revision_delete
+   * @param NodeRevisionDeleteInterface $node_revision_delete
    *   The node revision delete.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(
@@ @@
     // Setup array to store candidate revisions keyed by node id.
     $candidate_revisions = [];

-    /** @var \Drupal\node\Entity\Node $node */
+    /** @var Node $node */
     foreach ($nodes as $node) {
       $nid = $node->id();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/node_revision_delete/src/Form/AdminSettingsForm.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The node revision delete interface.
    *
-   * @var \Drupal\node_revision_delete\NodeRevisionDeleteInterface
+   * @var NodeRevisionDeleteInterface
    */
   protected NodeRevisionDeleteInterface $nodeRevisionDelete;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\node_revision_delete\NodeRevisionDeleteInterface $node_revision_delete
+   * @param NodeRevisionDeleteInterface $node_revision_delete
    *   The node revision delete.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, NodeRevisionDeleteInterface $node_revision_delete) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/node_revision_delete/src/Commands/NodeRevisionDeleteCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\node_revision_delete\Commands;

+use Drush\Exceptions\UserAbortException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\node\NodeTypeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\node_revision_delete\NodeRevisionDeleteInterface;
 use Drush\Commands\DrushCommands;
@@ @@
   /**
    * The ConfigManager service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;

@@ @@
   /**
    * The NodeRevisionDelete service.
    *
-   * @var \Drupal\node_revision_delete\NodeRevisionDeleteInterface
+   * @var NodeRevisionDeleteInterface
    */
   protected NodeRevisionDeleteInterface $nodeRevisionDelete;

@@ @@
   /**
    * The DateFormatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;

@@ @@
   /**
    * The State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected StateInterface $state;

@@ @@
   /**
    * The EntityTypeManager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * NodeRevisionDeleteCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The ConfigManager service.
-   * @param \Drupal\node_revision_delete\NodeRevisionDeleteInterface $nodeRevisionDelete
+   * @param NodeRevisionDeleteInterface $nodeRevisionDelete
    *   The NodeRevisionDelete service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   The DateFormatter service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The State service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The EntityTypeManager service.
    */
   public function __construct(
@@ @@
    * @command nrd:set-time
    * @aliases nrd-st, nrd-set-time
    *
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    */
   public function setTime(string $time = ''): void {
     // Getting an editable config because we will get and set a value.
@@ @@
    * @command nrd:delete-prior-revisions
    * @aliases nrd-dpr,nrd-delete-prior-revisions
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function deletePriorRevisions(int $nid = 0, int $vid = 0): void {
     // Get list of prior revisions.
@@ @@
   /**
    * Validate inputs before executing the drush command node-revision-delete.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data.
    *
    * @return bool
@@ @@
   /**
    * Validate inputs before executing the drush command nrd-dpr.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data.
    *
    * @return bool
@@ @@
    *
    * @hook validate nrd-delete-prior-revisions
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function deletePriorRevisionsValidate(CommandData $commandData): bool {
     $input = $commandData->input();
@@ @@
   /**
    * Validate inputs before executing the drush command nrd-untrack.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data.
    *
    * @return bool
@@ @@
   private function configuredContentType(string $type): bool {
     // Make sure the content type exists and is configured.
     $available_content_types = array_map(static function ($content_type) {
-      /** @var \Drupal\node\NodeTypeInterface $content_type */
+      /** @var NodeTypeInterface $content_type */
       return $content_type->id();
     }, $this->nodeRevisionDelete->getConfiguredContentTypes());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/node_revision_delete/node_revision_delete.module:155

    ---------- begin diff ----------
@@ @@
  *
  * @param string $entity_type
  *   The entity type.
- * @param Drupal\node\NodeTypeInterface $type
+ * @param NodeTypeInterface $type
  *   The entity type object.
  * @param array $form
  *   The form element.
- * @param Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function node_revision_delete_form_node_type_form_builder($entity_type, NodeTypeInterface $type, array &$form, FormStateInterface $form_state) {
@@ @@
  *
  * @param array $form
  *   The form element.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function _node_revision_bulk_delete_submit(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


16) modules/contrib/node_revision_delete/modules/node_revision_generate/tests/src/Unit/NodeRevisionGenerateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\node_revision_generate\Unit;

+use Drupal\Core\Database\Connection;
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\Component\Datetime\TimeInterface;
 use Drupal\node_revision_generate\NodeRevisionGenerateBatch;
 use Drupal\Tests\UnitTestCase;
 use Drupal\node_revision_generate\NodeRevisionGenerate;
@@ @@
   /**
    * Drupal\Core\Database\Driver\mysql\Connection definition.
    *
-   * @var \Drupal\Core\Database\Connection|\PHPUnit_Framework_MockObject_MockObject
+   * @var Connection|MockObject
    */
   protected $connection;

@@ @@
   /**
    * A date time instance.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var TimeInterface|MockObject
    */
   protected $time;

@@ @@
   /**
    * The NodeRevisionGenerate Object.
    *
-   * @var \Drupal\node_revision_generate\NodeRevisionGenerate
+   * @var NodeRevisionGenerate
    */
   protected $nodeRevisionGenerate;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Time mock.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/node_revision_delete/modules/node_revision_generate/tests/src/Functional/NodeRevisionGenerateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\node_revision_generate\Functional;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\node_revision_generate\Traits\NodeRevisionGenerateTestTrait;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Creating content types.
@@ @@
    *   Timestamp for the node creation date and revision date. One year ago by
    *   default.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The created node.
    *
    * @throws \Exception
@@ @@
   /**
    * Adds a revision to a node.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    *   Node.
    * @param int $timestamp
    *   The revision creation date.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function addRevision(Node &$node, $timestamp) {
     $node->setNewRevision();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/node_revision_delete/modules/node_revision_generate/src/NodeRevisionGenerateBatch.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\node_revision_generate;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\node\NodeInterface;
 /**
  * Methods for generate revisions in a batch.
  */
@@ @@
    * @param mixed $context
    *   An array of contextual key/values.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public static function generateRevisions(int $nid, int $revision_date, &$context): void {
     if (empty($context['results'])) {
@@ @@
       $context['results']['revisions'] = 0;
     }
     // Load the node to generate revision.
-    /** @var \Drupal\node\NodeInterface $node_entity */
+    /** @var NodeInterface $node_entity */
     $node_entity = \Drupal::entityTypeManager()->getStorage('node')->load($nid);

     // Generate revision.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/node_revision_delete/modules/node_revision_generate/src/NodeRevisionGenerate.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * A date time instance.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected TimeInterface $time;

@@ @@
   /**
    * Drupal\Core\Database\Driver\mysql\Connection definition.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected Connection $connection;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The date time instance.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/node_revision_delete/modules/node_revision_generate/src/Form/NodeRevisionGenerateForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The node revision generate interface.
    *
-   * @var \Drupal\node_revision_generate\NodeRevisionGenerateInterface
+   * @var NodeRevisionGenerateInterface
    */
   protected NodeRevisionGenerateInterface $nodeRevisionGenerate;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\node_revision_generate\NodeRevisionGenerateInterface $node_revision_generate
+   * @param NodeRevisionGenerateInterface $node_revision_generate
    *   The node revision generate.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 20 files have been changed by Rector                                      

