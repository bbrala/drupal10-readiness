modules/contrib/custom_admin_menu/custom_admin_menu.module
modules/contrib/custom_admin_menu/src/Controller/CustomAdminMenuController.php
modules/contrib/custom_admin_menu/src/Form/SettingsForm.php
modules/contrib/custom_admin_menu/src/Service/CustomAdminMenuManager.php
modules/contrib/custom_admin_menu/src/Service/CustomAdminMenuMenuItemDisplayManager.php
modules/contrib/custom_admin_menu/src/Service/CustomAdminMenuSettings.php
modules/contrib/custom_admin_menu/src/Service/CustomAdminMenuShortcuts.php

6 files with changes
====================

1) modules/contrib/custom_admin_menu/src/Service/CustomAdminMenuShortcuts.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\custom_admin_menu\Service;

+use Drupal\Core\Theme\ActiveTheme;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\block\BlockInterface;
 use Drupal\Core\Block\TitleBlockPluginInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Theme Manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themManager;

@@ @@
   /**
    * Theme Initialisation.
    *
-   * @var \Drupal\Core\Theme\ThemeInitializationInterface
+   * @var ThemeInitializationInterface
    */
   protected $themeInitialisation;

@@ @@
   /**
    * EntityTYpe Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
   /**
    * Custom Menu Admin Settings.
    *
-   * @var \Drupal\custom_admin_menu\Service\CustomAdminMenuSettings
+   * @var CustomAdminMenuSettings
    */
   protected $settings;

@@ @@
   /**
    * Theme System conf.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $themeSystemConf;

@@ @@
   /**
    * Admin theme.
    *
-   * @var \Drupal\Core\Theme\ActiveTheme
+   * @var ActiveTheme
    */
   protected $adminTheme;

@@ @@
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Title resolver.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface
+   * @var TitleResolverInterface
    */
   protected $titleResolver;

@@ @@
   /**
    * CustomAdminMenuShortcut constructor.
    *
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themManager
+   * @param ThemeManagerInterface $themManager
    *   The theme manager.
-   * @param \Drupal\Core\Theme\ThemeInitializationInterface $themeInitialisation
+   * @param ThemeInitializationInterface $themeInitialisation
    *   The theme initialisation.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config Factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request Stack.
-   * @param \Drupal\Core\Controller\TitleResolverInterface $titleResolver
+   * @param TitleResolverInterface $titleResolver
    *   The title resolver.
-   * @param \Drupal\custom_admin_menu\Service\CustomAdminMenuSettings $settings
+   * @param CustomAdminMenuSettings $settings
    *   The settings.
    */
   public function __construct(ThemeManagerInterface $themManager, ThemeInitializationInterface $themeInitialisation, EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $configFactory, RequestStack $requestStack, TitleResolverInterface $titleResolver, CustomAdminMenuSettings $settings) {
@@ @@
   /**
    * Return the admin theme.
    *
-   * @return \Drupal\Core\Theme\ActiveTheme
+   * @return ActiveTheme
    *   The admin theme.
    */
   public function getAdminTheme() {
@@ @@
    * @return array
    *   THe shortcut.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildShortcuts() {
     if (!$this->hasShortcut()) {
@@ @@
       ->addCacheTags($entity_type->getListCacheTags())
       ->addCacheContexts($entity_type->getListCacheContexts());

-    /** @var \Drupal\block\BlockInterface[] $blocks */
+    /** @var BlockInterface[] $blocks */
     foreach ($blocks as $id => $block) {
       $access = $block->access('view', NULL, TRUE);
       $cache_metadata = $cache_metadata->merge(CacheableMetadata::createFromObject($access));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/custom_admin_menu/src/Service/CustomAdminMenuSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\custom_admin_menu\Service;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;

 /**
@@ @@
   /**
    * Immutable config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Editable config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $editable;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/custom_admin_menu/src/Service/CustomAdminMenuMenuItemDisplayManager.php:33

    ---------- begin diff ----------
@@ @@
   protected $currentLanguageId;

   /**
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    */
   public function __construct(AccountProxyInterface $currentUser, LanguageManagerInterface $languageManager)
   {
@@ @@
    *
    * @param $pluginDefinition
    *   The item plugin definition.
-   * @param \Drupal\Core\Session\AccountProxyInterface $user
+   * @param AccountProxyInterface $user
    *   The user.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/custom_admin_menu/src/Service/CustomAdminMenuManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\custom_admin_menu\Service;

+use Drupal\Core\Theme\ActiveTheme;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * Menu link tree.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuLinkTree;

@@ @@
   /**
    * Theme admin.
    *
-   * @var \Drupal\Core\Theme\ActiveTheme
+   * @var ActiveTheme
    */
   protected $adminTheme;

@@ @@
   /**
    * Theme Manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Theme Systeme conf.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $themeSystemConf;

@@ @@
   /**
    * Theme initialisation.
    *
-   * @var \Drupal\Core\Theme\ThemeInitializationInterface
+   * @var ThemeInitializationInterface
    */
   protected $themeInitialization;

@@ @@
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The settings.
    *
-   * @var \Drupal\custom_admin_menu\Service\CustomAdminMenuSettings
+   * @var CustomAdminMenuSettings
    */
   protected $settings;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * CustomAdminMenuManager constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menuLinkTree
+   * @param MenuLinkTreeInterface $menuLinkTree
    *   The menu link tree.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   * @param ThemeManagerInterface $themeManager
    *   The theme manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config Factory.
-   * @param \Drupal\Core\Theme\ThemeInitializationInterface $themeInitialization
+   * @param ThemeInitializationInterface $themeInitialization
    *   The theme Initialisation.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\custom_admin_menu\Service\CustomAdminMenuSettings $settings
+   * @param CustomAdminMenuSettings $settings
    *   The settings.
    */
   public function __construct(
@@ @@
       $id = $item['original_link']->getPluginId();
       $suffix = explode('.', $id);
       $id = str_replace('.', '-', Container::underscore($item['original_link']->getPluginId()));
-      /** @var \Drupal\Core\Url $url */
+      /** @var Url $url */
       if ($url = $item['url']) {
         $url->setOption('attributes', [
           'class' => [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/custom_admin_menu/src/Form/SettingsForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Settings.
    *
-   * @var \Drupal\custom_admin_menu\Service\CustomAdminMenuSettings
+   * @var CustomAdminMenuSettings
    */
   protected $settings;

@@ @@
   /**
    * ModuleHandler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\custom_admin_menu\Service\CustomAdminMenuSettings $settings
+   * @param CustomAdminMenuSettings $settings
    *   The settings manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(CustomAdminMenuSettings $settings, ModuleHandlerInterface $moduleHandler) {
@@ @@
    */
   public static function create(ContainerInterface $container) {
     return new static(
-      $container->get(CustomAdminMenuSettings::SERVICE_NAME),
+      $this->settings,
       $container->get('module_handler')
     );
   }
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The formstate.
    */
   protected function initInsertionType(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The formState.
    */
   protected function initShortcuts(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/custom_admin_menu/src/Controller/CustomAdminMenuController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\custom_admin_menu\Controller;

+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Current Request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;

@@ @@
   /**
    * ToolbarRedirectController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityType manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The requestStack.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, RequestStack $requestStack) {
@@ @@
   /**
    * Redirect to node edit form selected by the query params.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function nodeEditFormRedirect() {
@@ @@
   /**
    * Redirect to term edit form selected by the query params.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function termEditFormRedirect() {
@@ @@
    * @param string $entity_type
    *   Le type d'entité.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function entityEditFormRedirect($entity_type) {
@@ @@
    * @param string $entity_type
    *   LE type d'entité.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Les entités.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getEntities(string $entity_type) {
     // Permet de définir une propriété à un champ complexe avec séparateur ':'.
@@ @@
    * @param array $queryElements
    *   La query.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Les entités.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getEntitiesByEntityQuery(string $entity_type, array $queryElements) {
     $query = $this->entityTypeManager->getStorage($entity_type)->getQuery();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

