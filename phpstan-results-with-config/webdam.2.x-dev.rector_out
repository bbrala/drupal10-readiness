modules/contrib/webdam/modules/webdam_sns/src/EventSubscriber/NotificationSubscriber.php
modules/contrib/webdam/modules/webdam_sns/webdam_sns.module
modules/contrib/webdam/src/Exception/BrandNotSetException.php
modules/contrib/webdam/src/Exception/BundleNotExistException.php
modules/contrib/webdam/src/Exception/BundleNotWebdamException.php
modules/contrib/webdam/src/Exception/UnableToConnectException.php
modules/contrib/webdam/src/Exception/UploadFailedException.php
modules/contrib/webdam/src/Exception/UploadPermissionException.php
modules/contrib/webdam/src/Exception/WebdamException.php
modules/contrib/webdam/src/Form/WebdamConfigurationForm.php
modules/contrib/webdam/src/Plugin/Action/UpdateMetadataAction.php
modules/contrib/webdam/src/Plugin/EntityBrowser/Widget/WebdamSearch.php
modules/contrib/webdam/src/Plugin/EntityBrowser/Widget/WebdamUpload.php
modules/contrib/webdam/src/Plugin/EntityBrowser/Widget/WebdamWidgetBase.php
modules/contrib/webdam/src/Plugin/Field/FieldFormatter/WebdamDocumentFormatter.php
modules/contrib/webdam/src/Plugin/Field/FieldFormatter/WebdamFormatter.php
modules/contrib/webdam/src/Plugin/Field/FieldFormatter/WebdamFormatterBase.php
modules/contrib/webdam/src/Plugin/Field/FieldFormatter/WebdamMetadataFormatter.php
modules/contrib/webdam/src/Plugin/Field/FieldFormatter/WebdamVideoFormatter.php
modules/contrib/webdam/src/Plugin/Field/FieldType/WebdamMetadataItem.php
modules/contrib/webdam/src/Plugin/Field/FieldWidget/WebdamMetadataWidget.php
modules/contrib/webdam/src/Plugin/media/Source/Webdam.php
modules/contrib/webdam/src/WebdamConnector.php
modules/contrib/webdam/src/WebdamService.php
modules/contrib/webdam/src/WebdamServiceInterface.php
modules/contrib/webdam/webdam.api.php
modules/contrib/webdam/webdam.install
modules/contrib/webdam/webdam.module

16 files with changes
=====================

1) modules/contrib/webdam/webdam.module:67

    ---------- begin diff ----------
@@ @@
  */
 function webdam_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   if ('media_webdam_edit_form' == $form_id) {
-    /** @var \Drupal\media\MediaInterface $entity */
+    /** @var MediaInterface $entity */
     $entity = $form_state->getBuildInfo()['callback_object']->getEntity();
     if ($entity->getSource() instanceof Webdam && $url = webdam_media_url($entity)) {
       $form['edit_on_webdam'] = [
@@ @@
 /**
  * Returns edit link for Webdam asset.
  *
- * @param \Drupal\media\MediaInterface $media
+ * @param MediaInterface $media
  *   The media entity with webdam as type provider.
  *
- * @return bool|\Drupal\Core\Url
+ * @return bool|Url
  *   Returns edit link for Webdam asset or FALSE.
  */
 function webdam_media_url(MediaInterface $media) {
@@ @@
   $extra = [];

   foreach (MediaType::loadMultiple() as $type) {
-    /** @var \Drupal\media\Entity\MediaType $type */
+    /** @var MediaType $type */
     if ($type->getSource() instanceof Webdam) {
       $extra['media'][$type->id()]['form']['edit_on_webdam'] = [
         'label' => t('Edit on Webdam'),
@@ @@
   }
   // Create a metadata field on new Webdam media types.
   if ($media_type->getSource() instanceof Webdam) {
-    /** @var \Drupal\webdam\Plugin\media\Source\Webdam $source */
+    /** @var Webdam $source */
     $source = $media_type->getSource();
     $metadata_field_storage = FieldStorageConfig::loadByName('media', WebdamMetadataItem::METADATA_FIELD_NAME);
     if (!$metadata_field_storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/webdam/webdam.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\webdam\WebdamConnector;
 /**
  * @file
  * Install, uninstall and update hooks for Webdam module.
@@ @@
   // Test if we can connect to the Webdam API.
   if ($phase === 'runtime') {
     try {
-      /** @var \Drupal\webdam\WebdamConnector $connector */
+      /** @var WebdamConnector $connector */
       $connector = \Drupal::service('webdam.connector');
       $connector->getClient()
         ->checkAuth();
@@ @@
  * Implements hook_install().
  */
 function webdam_install() {
-  $source = drupal_get_path('module', 'webdam') . '/images/icons';
+  $source = \Drupal::service('extension.list.module')->getPath('webdam') . '/images/icons';
   $destination = \Drupal::config('media.settings')->get('icon_base_uri');
   \Drupal::service('file_system')->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
   $files = \Drupal::service('file_system')->scanDirectory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


3) modules/contrib/webdam/webdam.api.php:10

    ---------- begin diff ----------
@@ @@
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Allows modules to alter the media entity based on updated WebDAM metadata.
  *
- * @param \Drupal\media\MediaInterface $media
+ * @param MediaInterface $media
  *   The media entity.
  * @param array $item
  *   The raw WebDAM metadata about the media asset.
    ----------- end diff -----------

4) modules/contrib/webdam/src/WebdamServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webdam;

+use Drupal\media\MediaTypeInterface;
+use Drupal\media\MediaInterface;
 /**
  * Provides methods to manage the WebDAM module.
  */
@@ @@
    *
    * Limits the number of processed items to WebdamService::MAX_ITEMS.
    */
-//  public function updateLocalMetadataCron();
-
+  //  public function updateLocalMetadataCron();
   /**
    * Returns the WebDAM media types.
    *
-   * @return \Drupal\media\MediaTypeInterface[]
+   * @return MediaTypeInterface[]
    *   A list of WebDAM media types.
    */
   public function getWebdamMediaTypes();
@@ @@
   /**
    * Updates a set of media entities based on the remote metadata information.
    *
-   * @param \Drupal\media\MediaInterface[] $webdam_media_entities
+   * @param MediaInterface[] $webdam_media_entities
    *   A list of media entities with a WebDAM source, keyed by the WebDAM ID,
    *   updates entities are removed from the list.
    *
-   * @return \Drupal\media\MediaInterface[]
+   * @return MediaInterface[]
    *   A list of updated media entities.
    */
   public function updateMediaEntities(array &$webdam_media_entities);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/webdam/src/WebdamService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webdam;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\media\MediaTypeInterface;
+use Drupal\media\MediaInterface;
 use Drupal\webdam\Plugin\Field\FieldType\WebdamMetadataItem;
 use Drupal\webdam\Plugin\media\Source\Webdam;
 use Drupal\Component\Datetime\TimeInterface;
@@ @@
   /**
    * The WebDAM Connector.
    *
-   * @var \Drupal\webdam\WebdamConnector
+   * @var WebdamConnector
    */
   protected $webdamConnector;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The media storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $mediaStorage;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * WebdamMetadataService constructor.
    *
-   * @param \Drupal\webdam\WebdamConnector $webdam_connector
+   * @param WebdamConnector $webdam_connector
    *   The WebDAM connector.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(WebdamConnector $webdam_connector, EntityTypeManagerInterface $entity_type_manager, LoggerChannelFactoryInterface $logger_factory, StateInterface $state, TimeInterface $time, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler = NULL) {
@@ @@
    */
   public function getWebdamMediaTypes() {
     $webdam_media_types = [];
-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     foreach ($this->entityTypeManager->getStorage('media_type')->loadMultiple() as $media_type_id => $media_type) {
       if ($media_type->getSource() instanceof Webdam) {
         $webdam_media_types[$media_type_id] = $media_type;
@@ @@

     $media_ids = $query->execute();

-    /** @var \Drupal\media\MediaInterface[] $media_entities */
+    /** @var MediaInterface[] $media_entities */
     $media_entities = $this->mediaStorage->loadMultiple($media_ids);

     $webdam_media_entities = [];
@@ @@
         continue;
       }

-      /** @var \Drupal\webdam\Plugin\media\Source\Webdam $source */
+      /** @var Webdam $source */
       $source = $media_entity->getSource();
       $remote_metadata = $source->filterRemoteMetadata($item);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/webdam/src/WebdamConnector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webdam;

+use cweagans\webdam\Exception\InvalidCredentialsException;
 use cweagans\webdam\Client;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
@@ @@
   /**
    * Webdam settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $webdamSettings;

@@ @@
   /**
    * The list of modules.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected ModuleExtensionList $extensionList;

@@ @@
    *
    * @param \GuzzleHttp\Client $http_client
    *   The http client.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Extension\ModuleExtensionList $extension_list
+   * @param ModuleExtensionList $extension_list
    *   The extension list.
    */
   public function __construct(HttpClient $http_client, ConfigFactoryInterface $config_factory, ModuleExtensionList $extension_list) {
@@ @@
    * @return string
    *   The auth token.
    *
-   * @throws \cweagans\webdam\Exception\InvalidCredentialsException
+   * @throws InvalidCredentialsException
    * @throws \Exception
    */
   public function getToken() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/webdam/src/Plugin/media/Source/Webdam.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webdam\Plugin\media\Source;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Field\FieldItemInterface;
+use Drupal\field\FieldStorageConfigInterface;
+use Drupal\field\FieldConfigInterface;
 use Drupal\webdam\WebdamConnector;
 use Drupal\webdam\Plugin\Field\FieldType\WebdamMetadataItem;
 use Drupal\Component\Datetime\TimeInterface;
@@ @@
   /**
    * Webdam connector.
    *
-   * @var \Drupal\webdam\WebdamConnector
+   * @var WebdamConnector
    */
   protected $webdamConnector;

@@ @@
   /**
    * Account proxy.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $accountProxy;

@@ @@
   /**
    * The url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * The logger factory service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;

@@ @@
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Webdam settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $webdamSettings;

@@ @@
   /**
    * The http client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected Client $httpClient;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager service.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type plugin manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\webdam\WebdamConnector $webdam
+   * @param WebdamConnector $webdam
    *   Webdam connector.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account_proxy
+   * @param AccountProxyInterface $account_proxy
    *   Account proxy.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger factory service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \GuzzleHttp\Client $client
+   * @param Client $client
    *   The http client.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $config_factory, WebdamConnector $webdam, AccountProxyInterface $account_proxy, UrlGeneratorInterface $url_generator, LoggerChannelFactoryInterface $logger, CacheBackendInterface $cache, TimeInterface $time, ModuleHandlerInterface $module_handler, Client $client) {
@@ @@
   /**
    * Ensures the given media entity has Webdam metadata information in place.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity.
    * @param bool $force
    *   (optional) By default, this will not attempt to check for updated
@@ @@
   /**
    * Compares the local metadata and the remote metadata in case it changed.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity.
    * @param array $remote_metadata
    *   The remote metadata.
@@ @@
    * method can be safely removed once there is no need to support 8.4 anymore,
    * and we ensure the core Media dependency is bumped to 8.5.0 at least.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   A media item.
    *
    * @return mixed
@@ @@
       throw new \RuntimeException('Source field for media source is not defined.');
     }

-    /** @var \Drupal\Core\Field\FieldItemInterface $field_item */
+    /** @var FieldItemInterface $field_item */
     $field_item = $media->get($source_field)->first();
     return $field_item->{$field_item->mainPropertyName()};
   }
@@ @@
   /**
    * Creates the metadata field storage definition.
    *
-   * @return \Drupal\field\FieldStorageConfigInterface
+   * @return FieldStorageConfigInterface
    *   The unsaved field storage definition.
    */
   public function createMetadataFieldStorage() {
@@ @@
   /**
    * Creates the metadata field definition.
    *
-   * @param \Drupal\media\MediaTypeInterface $type
+   * @param MediaTypeInterface $type
    *   The media type.
    *
-   * @return \Drupal\field\FieldConfigInterface
+   * @return FieldConfigInterface
    *   The unsaved field definition. The field storage definition, if new,
    *   should also be unsaved.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/webdam/src/Plugin/Field/FieldFormatter/WebdamVideoFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webdam\Plugin\Field\FieldFormatter;

+use Drupal\media\MediaInterface;
 use Drupal\webdam\Plugin\media\Source\Webdam;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@

     foreach ($items as $delta => $item) {

-      /** @var \Drupal\media\MediaInterface $media */
+      /** @var MediaInterface $media */
       $media = $is_entityreference ? $item->entity : $items->getEntity();
       if (!$media) {
         continue;
@@ @@
    * If unable to, get if from the filename.
    * Defaults to mp4.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/webdam/src/Plugin/Field/FieldFormatter/WebdamFormatterBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webdam\Plugin\Field\FieldFormatter;

+use Drupal\media\MediaTypeInterface;
 use Drupal\webdam\WebdamConnector;
 use Drupal\webdam\Plugin\media\Source\Webdam;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The Webdam API service.
    *
-   * @var \Drupal\webdam\WebdamConnector
+   * @var WebdamConnector
    */
   protected $webdamConnector;

@@ @@
   /**
    * Renderer object.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\webdam\WebdamConnector $webdam
+   * @param WebdamConnector $webdam
    *   The Webdam API service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer_object
+   * @param RendererInterface $renderer_object
    *   Renderer object.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, ConfigFactoryInterface $config_factory, AccountProxyInterface $current_user, WebdamConnector $webdam, RendererInterface $renderer_object, EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
     $bundles = [];
     if ($handler_settings && is_array($handler_settings['target_bundles'])) {
       foreach ($handler_settings['target_bundles'] as $bundle) {
-        /** @var \Drupal\media\MediaTypeInterface $type */
+        /** @var MediaTypeInterface $type */
         $type = $this->entityTypeManager->getStorage('media_type')->load($bundle);
         if ($type && ($type->getSource() instanceof Webdam)) {
           $bundles[] = $type;
@@ @@
       }
     }
     else {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       foreach ($this->entityTypeManager->getStorage('media_type')->loadMultiple() as $type) {
         if ($type && ($type->getSource() instanceof Webdam)) {
           $bundles[] = $type;
@@ @@
           }
           elseif (is_array($handler_settings['target_bundles'])) {
             foreach ($handler_settings['target_bundles'] as $bundle) {
-              /** @var \Drupal\media\MediaTypeInterface $type */
+              /** @var MediaTypeInterface $type */
               $type = \Drupal::entityTypeManager()->getStorage('media_type')->load($bundle);
               if ($type->getSource() instanceof Webdam) {
                 return TRUE;
@@ @@
         return FALSE;
       }

-      /** @var \Drupal\media\MediaTypeInterface $type_entity */
+      /** @var MediaTypeInterface $type_entity */
       if (!($type_entity = $field_definition->getTargetBundle()) || !($type_entity = MediaType::load($field_definition->getTargetBundle()))) {
         return FALSE;
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/webdam/src/Plugin/Field/FieldFormatter/WebdamFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webdam\Plugin\Field\FieldFormatter;

+use Drupal\Core\Entity\EntityRepositoryInterface;
+use Drupal\media\MediaInterface;
+use Drupal\media\MediaSourceInterface;
 use Drupal\webdam\Plugin\media\Source\Webdam;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface;
+   * @var EntityRepositoryInterface ;
    */
   protected $entityRepository;

@@ @@
     $is_entityreference = $this->fieldDefinition->getType() == 'entity_reference';

     foreach ($items as $delta => $item) {
-      /** @var \Drupal\media\MediaInterface $media_entity */
+      /** @var MediaInterface $media_entity */
       if ($media_entity = $is_entityreference ? $item->entity : $items->getEntity()) {
-        /** @var \Drupal\media\MediaInterface $media_entity */
+        /** @var MediaInterface $media_entity */
         $media_entity = $this->entityRepository->getTranslationFromContext($media_entity, $langcode);
-        /** @var \Drupal\media\MediaSourceInterface $source_plugin */
+        /** @var MediaSourceInterface $source_plugin */
         $source_plugin = $media_entity->getSource();
         if ($source_plugin instanceof Webdam && ($thumbnails = $source_plugin->getMetadata($media_entity, 'thumbnail_urls'))) {
           $element[$delta]['webdam_wrapper'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/webdam/src/Plugin/Field/FieldFormatter/WebdamDocumentFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webdam\Plugin\Field\FieldFormatter;

+use Drupal\media\MediaInterface;
 use Drupal\webdam\Plugin\media\Source\Webdam;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@

     foreach ($items as $delta => $item) {

-      /** @var \Drupal\media\MediaInterface $media */
+      /** @var MediaInterface $media */
       $media = $is_entityreference ? $item->entity : $items->getEntity();
       if (!$media) {
         continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/webdam/src/Plugin/EntityBrowser/Widget/WebdamWidgetBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webdam\Plugin\EntityBrowser\Widget;

+use Drupal\Core\Logger\LoggerChannelFactory;
+use Drupal\media\MediaTypeInterface;
 use Drupal\webdam\WebdamConnector;
 use Drupal\webdam\Exception\BundleNotWebdamException;
 use Drupal\webdam\Exception\BundleNotExistException;
@@ @@
   /**
    * Webdam connector.
    *
-   * @var \Drupal\webdam\WebdamConnector
+   * @var WebdamConnector
    */
   protected $webdamConnector;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $loggerFactory;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
-   * @param \Drupal\webdam\WebdamConnector $webdam
+   * @param WebdamConnector $webdam
    *   The webdam conector.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, WidgetValidationManager $validation_manager, WebdamConnector $webdam, LoggerChannelFactoryInterface $logger_factory, LanguageManagerInterface $language_manager, RequestStack $request_stack, ConfigFactoryInterface $config_factory) {
@@ @@
    */
   protected function checkType() {
     if ($this->configuration['media_type']) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       $type = $this->entityTypeManager->getStorage('media_type')
         ->load($this->configuration['media_type']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/webdam/src/Plugin/EntityBrowser/Widget/WebdamUpload.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webdam\Plugin\EntityBrowser\Widget;

+use cweagans\webdam\Entity\Folder;
+use Drupal\media\MediaTypeInterface;
+use Drupal\Core\File\FileSystemInterface;
+use cweagans\webdam\Client;
 use Drupal\Component\Serialization\Json;
 use Drupal\webdam\WebdamConnector;
 //use Drupal\webdam\Exception\BrandNotSetException;
@@ @@
   /**
    * The session service.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
-   * @param \Drupal\webdam\WebdamConnector $webdam_connector
+   * @param WebdamConnector $webdam_connector
    *   Webdam connector.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger factory.
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, WidgetValidationManager $validation_manager, WebdamConnector $webdam_connector, ConfigFactoryInterface $config_factory, LoggerChannelFactoryInterface $logger_factory, SessionInterface $session, LanguageManagerInterface $language_manager, RequestStack $request_stack) {
@@ @@
   /**
    * Build folder options array.
    *
-   * @param \cweagans\webdam\Entity\Folder[] $folders
+   * @param Folder[] $folders
    *   An array containing folders.
    * @param array $folder_options
    *   The options, that we are building, are passed by reference.
@@ @@
    */
   public function submit(array &$element, array &$form, FormStateInterface $form_state) {
     if (!empty($form_state->getTriggeringElement()['#webdam_upload_submit'])) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       $type = $this->entityTypeManager->getStorage('media_type')
         ->load($this->configuration['media_type']);

@@ @@
 //  public static function batchUploadFiles($file, $brand, $description, $tags, $metaproperty_options, &$context) {
   public static function batchUploadFiles($file, $folder, &$context) {
     try {
-      /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+      /** @var FileSystemInterface $file_system */
       $file_system = \Drupal::service('file_system');
 //      $data = [
-//        'filePath' => $file_system->realpath($file['path']),
-//        'brandId' => $brand,
-//        'name' => $file['filename'],
-//      ];
-//
-//      if ($description) {
-//        $data['description'] = $description;
-//      }
-//
-//      if ($tags) {
-//        $data['tags'] = implode(',', $tags);
-//      }
-
-//      if ($metaproperty_options) {
-//        foreach ($metaproperty_options as $metaproperty => $options) {
-//          $data['metaproperty.' . $metaproperty] = implode(',', $options);
-//        }
-//      }
-
-//      if (isset($context['results']['accessRequestId'])) {
-//        $data['accessRequestId'] = $context['results']['accessRequestId'];
-//      }
-      /** @var \cweagans\webdam\Client $client */
+      //        'filePath' => $file_system->realpath($file['path']),
+      //        'brandId' => $brand,
+      //        'name' => $file['filename'],
+      //      ];
+      //
+      //      if ($description) {
+      //        $data['description'] = $description;
+      //      }
+      //
+      //      if ($tags) {
+      //        $data['tags'] = implode(',', $tags);
+      //      }
+      //      if ($metaproperty_options) {
+      //        foreach ($metaproperty_options as $metaproperty => $options) {
+      //          $data['metaproperty.' . $metaproperty] = implode(',', $options);
+      //        }
+      //      }
+      //      if (isset($context['results']['accessRequestId'])) {
+      //        $data['accessRequestId'] = $context['results']['accessRequestId'];
+      //      }
+      /** @var Client $client */
       $client = \Drupal::service('webdam.connector')->getClient();

       $result = $client->uploadAsset(
@@ @@
       // able to save it only if that succeeds.
       $uuid = $context['results'][$file['path']];
       // @todo We do not have any media info, because we cannot provide any.
-      /** @var \Drupal\webdam\WebdamConnector $webdam_connector */
+      /** @var WebdamConnector $webdam_connector */
       $webdam_connector = \Drupal::service('webdam.connector');
       $media_info = $webdam_connector->getMetadataGraphQL($uuid);

@@ @@
    *
    * @param array $element
    *   Upload form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   protected function clearFormValues(array &$element, FormStateInterface $form_state) {
@@ @@
     $form = parent::buildConfigurationForm($form, $form_state);

     foreach ($this->entityTypeManager->getStorage('media_type')->loadMultiple() as $type) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       if ($type->getSource() instanceof Webdam) {
         $form['media_type']['#options'][$type->id()] = $type->label();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/webdam/src/Plugin/EntityBrowser/Widget/WebdamSearch.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webdam\Plugin\EntityBrowser\Widget;

+use Drupal\media\MediaTypeInterface;
 use Drupal\webdam\Exception\BundleNotWebdamException;
 use Drupal\webdam\Exception\BundleNotExistException;
 use Drupal\webdam\Plugin\Field\FieldType\WebdamMetadataItem;
@@ @@
     $form['submit_text']['#access'] = FALSE;

     foreach ($this->entityTypeManager->getStorage('media_type')->loadMultiple() as $type) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       if ($type->getSource() instanceof Webdam) {
         $form['media_type']['#options'][$type->id()] = $type->label();
       }
@@ @@
     $image_source_field = NULL;
     $source_fields = [];
     if ($this->configuration['media_type']) {
-      /** @var \Drupal\media\MediaTypeInterface $image_type */
+      /** @var MediaTypeInterface $image_type */
       $image_type = $this->entityTypeManager->getStorage('media_type')
         ->load($this->configuration['media_type']);
       $image_source_field = $image_type->getSource()->getConfiguration()['source_field'];
@@ @@
     $document_type = NULL;
     $document_source_field = NULL;
     if ($this->configuration['media_type_document']) {
-      /** @var \Drupal\media\MediaTypeInterface $document_type */
+      /** @var MediaTypeInterface $document_type */
       $document_type = $this->entityTypeManager->getStorage('media_type')
         ->load($this->configuration['media_type_document']);
       $document_source_field = $document_type->getSource()->getConfiguration()['source_field'];
@@ @@
     $video_type = NULL;
     $video_source_field = NULL;
     if ($this->configuration['media_type_video']) {
-      /** @var \Drupal\media\MediaTypeInterface $video_type */
+      /** @var MediaTypeInterface $video_type */
       $video_type = $this->entityTypeManager->getStorage('media_type')
         ->load($this->configuration['media_type_video']);
       $video_source_field = $video_type->getSource()->getConfiguration()['source_field'];
@@ @@
       return TRUE;
     }
     if ($this->configuration['media_type_document']) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       $type = $this->entityTypeManager->getStorage('media_type')
         ->load($this->configuration['media_type_document']);

@@ @@
       return TRUE;
     }
     if ($this->configuration['media_type_video']) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       $type = $this->entityTypeManager->getStorage('media_type')
         ->load($this->configuration['media_type_video']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/webdam/src/Form/WebdamConfigurationForm.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

 //  /**
-//   * Meta properties from Webdam.
-//   *
-//   * @var array
-//   */
-//  protected $metaProperties;
-
-//  /**
-//   * Derivatives information.
-//   *
-//   * @var array
-//   */
-//  protected $derivatives;
-
+  //   * Meta properties from Webdam.
+  //   *
+  //   * @var array
+  //   */
+  //  protected $metaProperties;
+  //  /**
+  //   * Derivatives information.
+  //   *
+  //   * @var array
+  //   */
+  //  protected $derivatives;
   /**
    * Webdam client.
    *
-   * @var \Drupal\webdam\WebdamConnector
+   * @var WebdamConnector
    */
   protected $webdam;

   /**
-   * @var \Drupal\webdam\WebdamService
+   * @var WebdamService
    */
   protected WebdamService $webdamService;

@@ @@
   /**
    * Constructs a WebdamConfigurationForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\webdam\WebdamConnector $webdam
+   * @param WebdamConnector $webdam
    *   The webdam client.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RendererInterface $renderer, ModuleHandlerInterface $module_handler, WebdamConnector $webdam, WebdamService $webdam_service) {
@@ @@
    *   The context array.
    */
   public static function updateMetadataBatchWorker(array &$context) {
-    /** @var \Drupal\webdam\WebdamService $webdam */
+    /** @var WebdamService $webdam */
     $webdam = \Drupal::service('webdam.service');

     if (empty($context['sandbox']['total'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/webdam/modules/webdam_sns/src/EventSubscriber/NotificationSubscriber.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The WebDAM service.
    *
-   * @var \Drupal\webdam\WebdamService
+   * @var WebdamService
    */
   protected $webdamService;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * NotifcationSubscriber constructor.
    *
-   * @param \Drupal\webdam\WebdamService $webdam_service
+   * @param WebdamService $webdam_service
    *   The WebDAM connector.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(WebdamService $webdam_service, EntityTypeManagerInterface $entity_type_manager, LoggerChannelFactoryInterface $logger_factory, ConfigFactoryInterface $config_factory) {
     $this->webdamService = $webdam_service;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 16 files have been changed by Rector                                      

