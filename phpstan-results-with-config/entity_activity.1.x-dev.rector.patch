diff --git a/entity_activity.install b/entity_activity.install
index f140414..19ca041 100644
--- a/entity_activity.install
+++ b/entity_activity.install
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\Core\Extension\ModuleInstallerInterface;
+use Drupal\entity_activity\SubscriptionStorageInterface;
+use Drupal\entity_activity\Entity\SubscriptionInterface;
+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\entity_activity\Entity\LogInterface;
 /**
  * @file
  */
@@ -18,7 +23,7 @@ use Drupal\user\UserInterface;
 function entity_activity_update_8101(&$sandbox) {
   $module_handler = \Drupal::moduleHandler();
   if (!$module_handler->moduleExists('serialization')) {
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = \Drupal::service('module_installer');
     $module_installer->install(['serialization']);
   }
@@ -28,7 +33,7 @@ function entity_activity_update_8101(&$sandbox) {
  * Delete all subscriptions for which a source entity has been deleted.
  */
 function entity_activity_update_8102(&$sandbox) {
-  /** @var \Drupal\entity_activity\SubscriptionStorageInterface $subscriptions_storage */
+  /** @var SubscriptionStorageInterface $subscriptions_storage */
   $subscriptions_storage = \Drupal::entityTypeManager()->getStorage('entity_activity_subscription');
   // Initialize some variables during the first pass through.
   if (!isset($sandbox['total'])) {
@@ -51,7 +56,7 @@ function entity_activity_update_8102(&$sandbox) {
   $query->sort('id', 'DESC');
   $result = $query->execute();
   foreach ($result as $id) {
-    /** @var \Drupal\entity_activity\Entity\SubscriptionInterface $subscription */
+    /** @var SubscriptionInterface $subscription */
     $subscription = $subscriptions_storage->load($id);
     $source_entity = \Drupal::entityTypeManager()
       ->getStorage($subscription->getSourceEntityTypeId())
@@ -73,7 +78,7 @@ function entity_activity_update_8102(&$sandbox) {
  * Delete all subscriptions for which the owner has been deleted.
  */
 function entity_activity_update_8103(&$sandbox) {
-  /** @var \Drupal\entity_activity\SubscriptionStorageInterface $subscriptions_storage */
+  /** @var SubscriptionStorageInterface $subscriptions_storage */
   $subscription_storage = \Drupal::entityTypeManager()->getStorage('entity_activity_subscription');
   // Initialize some variables during the first pass through.
   if (!isset($sandbox['total'])) {
@@ -96,7 +101,7 @@ function entity_activity_update_8103(&$sandbox) {
   $query->sort('id', 'DESC');
   $result = $query->execute();
   foreach ($result as $id) {
-    /** @var \Drupal\entity_activity\Entity\SubscriptionInterface $subscription */
+    /** @var SubscriptionInterface $subscription */
     $subscription = $subscription_storage->load($id);
     $owner = $subscription->getOwner();
     if (!$owner instanceof UserInterface) {
@@ -116,7 +121,7 @@ function entity_activity_update_8103(&$sandbox) {
  * Delete all logs for which the owner has been deleted.
  */
 function entity_activity_update_8104(&$sandbox) {
-  /** @var \Drupal\entity_activity\LogStorageInterface $log_storage */
+  /** @var LogStorageInterface $log_storage */
   $log_storage = \Drupal::entityTypeManager()->getStorage('entity_activity_log');
   // Initialize some variables during the first pass through.
   if (!isset($sandbox['total'])) {
@@ -139,7 +144,7 @@ function entity_activity_update_8104(&$sandbox) {
   $query->sort('id', 'DESC');
   $result = $query->execute();
   foreach ($result as $id) {
-    /** @var \Drupal\entity_activity\Entity\LogInterface $log */
+    /** @var LogInterface $log */
     $log = $log_storage->load($id);
     $owner = $log->getOwner();
     if (!$owner instanceof UserInterface) {
diff --git a/entity_activity.module b/entity_activity.module
index 18501ac..a5720f7 100644
--- a/entity_activity.module
+++ b/entity_activity.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\entity_activity\EntityActivityManagerInterface;
+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
 /**
  * @file
  * Contains entity_activity.module.
@@ -43,7 +45,7 @@ function entity_activity_help($route_name, RouteMatchInterface $route_match) {
  */
 function entity_activity_entity_insert(EntityInterface $entity) {
   if ($entity instanceof ContentEntityInterface) {
-    /** @var \Drupal\entity_activity\EntityActivityManagerInterface $entityActivityManager */
+    /** @var EntityActivityManagerInterface $entityActivityManager */
     $entityActivityManager = \Drupal::service('entity_activity.manager');
     $entityActivityManager->dispatch(EntityActivityEvents::ENTITY_ACTIVITY_INSERT, $entity);
     $entityActivityManager->invalidateCache($entity);
@@ -55,7 +57,7 @@ function entity_activity_entity_insert(EntityInterface $entity) {
  */
 function entity_activity_entity_update(EntityInterface $entity) {
   if ($entity instanceof ContentEntityInterface) {
-    /** @var \Drupal\entity_activity\EntityActivityManagerInterface $entityActivityManager */
+    /** @var EntityActivityManagerInterface $entityActivityManager */
     $entityActivityManager = \Drupal::service('entity_activity.manager');
     $entityActivityManager->dispatch(EntityActivityEvents::ENTITY_ACTIVITY_UPDATE, $entity);
   }
@@ -67,7 +69,7 @@ function entity_activity_entity_update(EntityInterface $entity) {
 function entity_activity_entity_delete(EntityInterface $entity) {
   if ($entity instanceof ContentEntityInterface) {
     if (!$entity instanceof SubscriptionInterface) {
-      /** @var \Drupal\entity_activity\EntityActivityManagerInterface $entityActivityManager */
+      /** @var EntityActivityManagerInterface $entityActivityManager */
       $entityActivityManager = \Drupal::service('entity_activity.manager');
       $entityActivityManager->dispatch(EntityActivityEvents::ENTITY_ACTIVITY_DELETE, $entity);
       $entityActivityManager->deleteSubscriptions($entity);
@@ -82,7 +84,7 @@ function entity_activity_entity_delete(EntityInterface $entity) {
  */
 function entity_activity_user_delete(EntityInterface $entity) {
   if ($entity instanceof UserInterface) {
-    /** @var \Drupal\entity_activity\EntityActivityManagerInterface $entityActivityManager */
+    /** @var EntityActivityManagerInterface $entityActivityManager */
     $entityActivityManager = \Drupal::service('entity_activity.manager');
     $entityActivityManager->deleteUserSubscriptions($entity);
     $entityActivityManager->deleteUserLogs($entity);
@@ -174,7 +176,7 @@ function entity_activity_theme() {
  */
 function entity_activity_theme_suggestions_subscribe_on_alter(array &$suggestions, array $variables) {
   $view_mode = $variables['view_mode'];
-  /** @var \Drupal\Core\Entity\EntityInterface $entity */
+  /** @var EntityInterface $entity */
   $entity = $variables['entity'];
   $suggestions[] = 'subscribe_on__' . $view_mode;
   $suggestions[] = 'subscribe_on__' . $entity->getEntityTypeId();
@@ -188,7 +190,7 @@ function entity_activity_theme_suggestions_subscribe_on_alter(array &$suggestion
  * Implements hook_entity_extra_field_info().
  */
 function entity_activity_entity_extra_field_info() {
-  /** @var \Drupal\entity_activity\EntityActivityManagerInterface $entityActivityManager */
+  /** @var EntityActivityManagerInterface $entityActivityManager */
   $entityActivityManager = \Drupal::service('entity_activity.manager');
   $entity_type_enabled = $entityActivityManager->getContentEntityTypesEnabled();
   $extra = [];
@@ -229,7 +231,7 @@ function entity_activity_entity_view(array &$build, EntityInterface $entity, Ent
   if (!$entity instanceof ContentEntityInterface) {
     return;
   }
-  /** @var \Drupal\entity_activity\EntityActivityManagerInterface $entityActivityManager */
+  /** @var EntityActivityManagerInterface $entityActivityManager */
   $entityActivityManager = \Drupal::service('entity_activity.manager');
   $entity_types_enabled = $entityActivityManager->getContentEntityTypesEnabled();
   $account = \Drupal::currentUser();
@@ -352,7 +354,7 @@ function entity_activity_entity_activity_log_view(array &$build, EntityInterface
  *   - attributes: HTML attributes for the containing element.
  */
 function template_preprocess_entity_activity_log(array &$variables) {
-  /** @var \Drupal\entity_activity\Entity\LogInterface $log */
+  /** @var LogInterface $log */
   $log = $variables['elements']['#entity_activity_log'];
   $variables['entity'] = $log;
   $variables['source_entity'] = $log->getSourceEntity();
@@ -386,7 +388,7 @@ function template_preprocess_entity_activity_log(array &$variables) {
  *   - attributes: HTML attributes for the containing element.
  */
 function template_preprocess_entity_activity_subscription(array &$variables) {
-  /** @var \Drupal\entity_activity\Entity\SubscriptionInterface $subscription */
+  /** @var SubscriptionInterface $subscription */
   $subscription = $variables['elements']['#entity_activity_subscription'];
   $variables['entity'] = $subscription;
   $variables['source_entity'] = $subscription->getSourceEntity();
@@ -431,7 +433,7 @@ function entity_activity_view_access(EntityInterface $entity, $operation, Accoun
  * Implements hook_preprocess_HOOK().
  */
 function entity_activity_preprocess_views_view(&$variables) {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   $view = $variables['view'];
   $view_id = $variables['id'];
   $view_display_id = $variables['display_id'];
@@ -454,7 +456,7 @@ function entity_activity_views_post_render(ViewExecutable $view, &$output, Cache
     // We must ensure that the custom Log cache tag is always here.
     $uid = NULL;
     $arguments = $view->argument;
-    /** @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $argument */
+    /** @var ArgumentPluginBase $argument */
     foreach ($arguments as $plugin_id => $argument) {
       $real_Field = $argument->realField;
       $entity_type = $argument->getEntityType();
@@ -475,7 +477,7 @@ function entity_activity_views_post_render(ViewExecutable $view, &$output, Cache
     // We must ensure that the custom subscription cache tag is always here.
     $uid = NULL;
     $arguments = $view->argument;
-    /** @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $argument */
+    /** @var ArgumentPluginBase $argument */
     foreach ($arguments as $plugin_id => $argument) {
       $real_Field = $argument->realField;
       $entity_type = $argument->getEntityType();
@@ -495,7 +497,7 @@ function entity_activity_views_post_render(ViewExecutable $view, &$output, Cache
  * Implements hook_cron().
  */
 function entity_activity_cron() {
-  /** @var \Drupal\entity_activity\EntityActivityManagerInterface $entityActivityManager */
+  /** @var EntityActivityManagerInterface $entityActivityManager */
   $entityActivityManager = \Drupal::service('entity_activity.manager');
   $entityActivityManager->purgeLog();
 }
diff --git a/modules/entity_activity_mail/entity_activity_mail.module b/modules/entity_activity_mail/entity_activity_mail.module
index 29bf6c6..bf0d7ae 100644
--- a/modules/entity_activity_mail/entity_activity_mail.module
+++ b/modules/entity_activity_mail/entity_activity_mail.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Render\RendererInterface;
 /**
  * @file
  * Contains entity_activity_mail.module.
@@ -78,7 +79,7 @@ function entity_activity_mail_entity_base_field_info(EntityTypeInterface $entity
  * Implements hook_cron().
  */
 function entity_activity_mail_cron() {
-  /** @var \Drupal\entity_activity_mail\ReportServiceInterface $reportService */
+  /** @var ReportServiceInterface $reportService */
   $reportService = \Drupal::service('entity_activity_mail.report');
   $request_time = \Drupal::time()->getCurrentTime();
   $time = $reportService->getCronTime();
@@ -118,7 +119,7 @@ function entity_activity_mail_theme() {
  * Prepares emails sent by the MailHandler service.
  */
 function entity_activity_mail_mail($key, &$message, $params) {
-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');
 
   if (isset($params['headers'])) {
diff --git a/modules/entity_activity_mail/src/EventSubscriber/LogReportSubscriber.php b/modules/entity_activity_mail/src/EventSubscriber/LogReportSubscriber.php
index 15a82b2..f87524b 100644
--- a/modules/entity_activity_mail/src/EventSubscriber/LogReportSubscriber.php
+++ b/modules/entity_activity_mail/src/EventSubscriber/LogReportSubscriber.php
@@ -17,23 +17,23 @@ class LogReportSubscriber implements EventSubscriberInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The report service.
    *
-   * @var \Drupal\entity_activity_mail\ReportServiceInterface
+   * @var ReportServiceInterface
    */
   protected $report;
 
   /**
    * Constructs a new EntityActivitySubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\entity_activity_mail\ReportServiceInterface $report
+   * @param ReportServiceInterface $report
    *   The report service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ReportServiceInterface $report) {
@@ -54,7 +54,7 @@ class LogReportSubscriber implements EventSubscriberInterface {
   /**
    * Send a log report if owner has subscribed to this option.
    *
-   * @param \Drupal\entity_activity\Event\LogEvent $event
+   * @param LogEvent $event
    *   The entity activity log event.
    */
   public function sendLogReport(LogEvent $event) {
diff --git a/modules/entity_activity_mail/src/Form/SettingsForm.php b/modules/entity_activity_mail/src/Form/SettingsForm.php
index 8ebee4b..fa9e960 100644
--- a/modules/entity_activity_mail/src/Form/SettingsForm.php
+++ b/modules/entity_activity_mail/src/Form/SettingsForm.php
@@ -21,52 +21,52 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Drupal\entity_activity_mail\ReportServiceInterface definition.
    *
-   * @var \Drupal\entity_activity_mail\ReportServiceInterface
+   * @var ReportServiceInterface
    */
   protected $report;
 
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\Component\Utility\EmailValidatorInterface definition.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;
 
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Drupal\Core\Entity\EntityFieldManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\entity_activity_mail\ReportServiceInterface $report
+   * @param ReportServiceInterface $report
    *   The log report service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ReportServiceInterface $report, EntityTypeManagerInterface $entity_type_manager, EmailValidatorInterface $email_validator, ModuleHandlerInterface $module_handler, EntityFieldManagerInterface $entity_field_manager) {
@@ -259,7 +259,7 @@ class SettingsForm extends ConfigFormBase {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $values = $form_state->getValues();
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $date */
+    /** @var DrupalDateTime $date */
     $date = $values['general']['cron_time'];
     $time = $date->format('H:i:s');
     $values['general']['cron_time'] = $time;
diff --git a/modules/entity_activity_mail/src/MailHandler.php b/modules/entity_activity_mail/src/MailHandler.php
index 54c8c2c..80b2712 100644
--- a/modules/entity_activity_mail/src/MailHandler.php
+++ b/modules/entity_activity_mail/src/MailHandler.php
@@ -22,32 +22,32 @@ class MailHandler implements MailHandlerInterface {
   /**
    * The language default.
    *
-   * @var \Drupal\Core\Language\LanguageDefault
+   * @var LanguageDefault
    */
   protected $languageDefault;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
   /**
    * Constructs a new MailHandler object.
    *
-   * @param \Drupal\Core\Language\LanguageDefault $language_default
+   * @param LanguageDefault $language_default
    *   The language default.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
    */
   public function __construct(LanguageDefault $language_default, LanguageManagerInterface $language_manager, MailManagerInterface $mail_manager) {
diff --git a/modules/entity_activity_mail/src/Plugin/QueueWorker/PrepareReportWorker.php b/modules/entity_activity_mail/src/Plugin/QueueWorker/PrepareReportWorker.php
index b7bfe0c..91c4902 100644
--- a/modules/entity_activity_mail/src/Plugin/QueueWorker/PrepareReportWorker.php
+++ b/modules/entity_activity_mail/src/Plugin/QueueWorker/PrepareReportWorker.php
@@ -24,28 +24,28 @@ class PrepareReportWorker extends QueueWorkerBase implements ContainerFactoryPlu
   /**
    * The entity type manager..
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The report service.
    *
-   * @var \Drupal\entity_activity_mail\ReportServiceInterface
+   * @var ReportServiceInterface
    */
   protected $report;
 
   /**
    * Queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -58,13 +58,13 @@ class PrepareReportWorker extends QueueWorkerBase implements ContainerFactoryPlu
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\entity_activity_mail\ReportServiceInterface $report
+   * @param ReportServiceInterface $report
    *   The report service.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ReportServiceInterface $report, QueueFactory $queue_factory, ConfigFactoryInterface $config_factory) {
diff --git a/modules/entity_activity_mail/src/Plugin/QueueWorker/ReportWorker.php b/modules/entity_activity_mail/src/Plugin/QueueWorker/ReportWorker.php
index a42f4a8..f0b79a3 100644
--- a/modules/entity_activity_mail/src/Plugin/QueueWorker/ReportWorker.php
+++ b/modules/entity_activity_mail/src/Plugin/QueueWorker/ReportWorker.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_activity_mail\Plugin\QueueWorker;
 
+use Drupal\user\UserStorageInterface;
+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\entity_activity\Entity\LogInterface;
 use Drupal\Component\Utility\EmailValidatorInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -31,21 +36,21 @@ class ReportWorker extends QueueWorkerBase implements ContainerFactoryPluginInte
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Drupal\Component\Utility\EmailValidatorInterface definition.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;
 
@@ -59,35 +64,35 @@ class ReportWorker extends QueueWorkerBase implements ContainerFactoryPluginInte
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The report service.
    *
-   * @var \Drupal\entity_activity_mail\ReportServiceInterface
+   * @var ReportServiceInterface
    */
   protected $report;
 
   /**
    * Drupal\Core\Logger\LoggerChannelFactoryInterface definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
   /**
    * Drupal\user\UserStorageInterface definition.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
 
   /**
    * Drupal\entity_activity\LogStorageInterface definition.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;
 
@@ -100,23 +105,23 @@ class ReportWorker extends QueueWorkerBase implements ContainerFactoryPluginInte
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator service.
-   * @param \Drupal\entity_activity_mail\MailHandlerInterface $mail_handler
+   * @param MailHandlerInterface $mail_handler
    *   The mail handler service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\entity_activity_mail\ReportServiceInterface $report
+   * @param ReportServiceInterface $report
    *   The report service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, EmailValidatorInterface $email_validator, MailHandlerInterface $mail_handler, Token $token, ReportServiceInterface $report, LoggerChannelFactoryInterface $logger_factory) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -187,7 +192,7 @@ class ReportWorker extends QueueWorkerBase implements ContainerFactoryPluginInte
           // Should we mark as read logs sent ?
           $mark_read = $this->configFactory->get('entity_activity_mail.settings')->get('general.mark_read');
           // Mark all logs as sent.
-          /** @var \Drupal\entity_activity\Entity\LogInterface $log */
+          /** @var LogInterface $log */
           foreach ($logs as $log) {
             $log->set('sent', TRUE);
             if ($mark_read) {
diff --git a/modules/entity_activity_mail/src/ReportService.php b/modules/entity_activity_mail/src/ReportService.php
index 0adc92a..b4df137 100644
--- a/modules/entity_activity_mail/src/ReportService.php
+++ b/modules/entity_activity_mail/src/ReportService.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_activity_mail;
 
+use drupal\entity_activity_mail\MailHandlerInterface;
+use Drupal\user\UserStorageInterface;
+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\EmailValidatorInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ -25,95 +30,95 @@ class ReportService implements ReportServiceInterface {
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\Component\Utility\EmailValidatorInterface definition.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;
 
   /**
    * Queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * The mail handler service.
    *
-   * @var \drupal\entity_activity_mail\MailHandlerInterface
+   * @var MailHandlerInterface
    */
   protected $mailHandler;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Drupal\Core\State\StateInterface definition.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Drupal\user\UserStorageInterface definition.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
 
   /**
    * Drupal\entity_activity\LogStorageInterface definition.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;
 
   /**
    * CollectService constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator service.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
    * @param \Drupal\entity_activity_mail\MailHandlerInterface $mail_handler
    *   The mail handler service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EmailValidatorInterface $email_validator, QueueFactory $queue_factory, MailHandlerInterface $mail_handler, Token $token, LanguageManagerInterface $language_manager, StateInterface $state) {
     $this->configFactory = $config_factory;
diff --git a/modules/entity_activity_mail/src/ReportServiceInterface.php b/modules/entity_activity_mail/src/ReportServiceInterface.php
index 257d701..1bb26e3 100644
--- a/modules/entity_activity_mail/src/ReportServiceInterface.php
+++ b/modules/entity_activity_mail/src/ReportServiceInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity_mail;
 
+use Drupal\entity_activity\Entity\LogInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\user\UserInterface;
 
@@ -43,7 +44,7 @@ interface ReportServiceInterface {
    *
    * @param string $frequency
    *   The frequency, i.e. daily, weekly, monthly.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date (generally the current date).
    *
    * @return array
@@ -69,7 +70,7 @@ interface ReportServiceInterface {
    *
    * @param string $frequency
    *   The frequency, i.e. daily, weekly, monthly.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date (generally the current date).
    *
    * @return int
@@ -89,9 +90,9 @@ interface ReportServiceInterface {
   /**
    * Send a logs report to a user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user whom logs are related.
-   * @param \Drupal\entity_activity\Entity\LogInterface[] $logs
+   * @param LogInterface[] $logs
    *   An array of logs entities.
    * @param array $logs_content
    *   An array of renderable array of log entity for the view mode ID 'mail'.
@@ -110,7 +111,7 @@ interface ReportServiceInterface {
    *
    * @param string $string
    *   The string on which replace tokens.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The related user entity.
    *
    * @return string
diff --git a/modules/entity_activity_mail/tests/src/Functional/EntityActivityMailBrowserTest.php b/modules/entity_activity_mail/tests/src/Functional/EntityActivityMailBrowserTest.php
index 337b656..2c2054c 100644
--- a/modules/entity_activity_mail/tests/src/Functional/EntityActivityMailBrowserTest.php
+++ b/modules/entity_activity_mail/tests/src/Functional/EntityActivityMailBrowserTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_activity_mail\Functional;
 
+use Drupal\entity_activity\Entity\SubscriptionInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Test\AssertMailTrait;
 use Drupal\entity_activity_mail\ReportServiceInterface;
@@ -40,35 +41,35 @@ class EntityActivityMailBrowserTest extends EntityActivityBrowserTestBase {
   /**
    * A subscription.
    *
-   * @var \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription1;
 
   /**
    * A subscription.
    *
-   * @var \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription2;
 
   /**
    * A subscription.
    *
-   * @var \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription3;
 
   /**
    * The report service.
    *
-   * @var \Drupal\entity_activity_mail\ReportServiceInterface
+   * @var ReportServiceInterface
    */
   protected $reportService;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->reportService = $this->container->get('entity_activity_mail.report');
     // User 1 has a subscription on User 2 and on Term 1.
@@ -99,7 +100,7 @@ class EntityActivityMailBrowserTest extends EntityActivityBrowserTestBase {
     $new_article->save();
 
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));
     $emails = $this->getMails();
     $this->assertCount(1, $emails);
     $email = end($emails);
@@ -123,7 +124,7 @@ class EntityActivityMailBrowserTest extends EntityActivityBrowserTestBase {
     $new_article->save();
 
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($logs));
+    $this->assertEquals(2, count($logs));
     $emails = $this->getMails();
     // No new email has been sent yet.
     $this->assertCount(1, $emails);
@@ -169,12 +170,12 @@ class EntityActivityMailBrowserTest extends EntityActivityBrowserTestBase {
     $this->drupalLogout();
 
     $logs1 = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($logs1));
+    $this->assertEquals(2, count($logs1));
     $logs1_unsent = $this->reportService->getUnsentLogsPerUserId($this->user1->id());
     $this->assertCount(2, $logs1_unsent);
 
     $logs2 = $this->logStorage->loadMultipleByOwner($this->user2);
-    $this->assertEqual(2, count($logs2));
+    $this->assertEquals(2, count($logs2));
     $logs2_unsent = $this->reportService->getUnsentLogsPerUserId($this->user2->id());
     $this->assertCount(2, $logs2_unsent);
 
@@ -285,12 +286,12 @@ class EntityActivityMailBrowserTest extends EntityActivityBrowserTestBase {
     $this->drupalLogout();
 
     $logs1 = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($logs1));
+    $this->assertEquals(2, count($logs1));
     $logs1_unsent = $this->reportService->getUnsentLogsPerUserId($this->user1->id());
     $this->assertCount(2, $logs1_unsent);
 
     $logs2 = $this->logStorage->loadMultipleByOwner($this->user2);
-    $this->assertEqual(2, count($logs2));
+    $this->assertEquals(2, count($logs2));
     $logs2_unsent = $this->reportService->getUnsentLogsPerUserId($this->user2->id());
     $this->assertCount(2, $logs2_unsent);
 
@@ -412,12 +413,12 @@ class EntityActivityMailBrowserTest extends EntityActivityBrowserTestBase {
     $logs1 = $this->logStorage->loadMultipleByOwner($this->user1);
     $this->assertCount(2, $logs1);
     $logs1_unread = $this->logStorage->totalUnreadByOwner($this->user1);
-    $this->assertEqual(2, $logs1_unread);
+    $this->assertEquals(2, $logs1_unread);
 
     $logs2 = $this->logStorage->loadMultipleByOwner($this->user2);
     $this->assertCount(2, $logs2);
     $logs2_unread = $this->logStorage->totalUnreadByOwner($this->user2);
-    $this->assertEqual(2, $logs2_unread);
+    $this->assertEquals(2, $logs2_unread);
 
     $emails = $this->getMails();
     $this->assertCount(0, $emails);
@@ -453,10 +454,10 @@ class EntityActivityMailBrowserTest extends EntityActivityBrowserTestBase {
     $this->assertCount(2, $emails);
 
     $logs1_unread = $this->logStorage->totalUnreadByOwner($this->user1);
-    $this->assertEqual(0, $logs1_unread);
+    $this->assertEquals(0, $logs1_unread);
 
     $logs2_unread = $this->logStorage->totalUnreadByOwner($this->user2);
-    $this->assertEqual(0, $logs2_unread);
+    $this->assertEquals(0, $logs2_unread);
 
   }
 
diff --git a/modules/entity_activity_mass_subscribe/src/Access/MassSubscribeAccess.php b/modules/entity_activity_mass_subscribe/src/Access/MassSubscribeAccess.php
index 379c74c..48c22d7 100644
--- a/modules/entity_activity_mass_subscribe/src/Access/MassSubscribeAccess.php
+++ b/modules/entity_activity_mass_subscribe/src/Access/MassSubscribeAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity_mass_subscribe\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -17,16 +18,16 @@ class MassSubscribeAccess {
   /**
    * Checks access to the entity operation on the given route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The node on which check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account, EntityInterface $entity = NULL) {
@@ -53,10 +54,10 @@ class MassSubscribeAccess {
   /**
    * Get the current entity from the route.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The current entity found on the route.
    */
   protected function getCurrentEntity(RouteMatchInterface $route_match) {
diff --git a/modules/entity_activity_mass_subscribe/src/Form/MassSubscribeForm.php b/modules/entity_activity_mass_subscribe/src/Form/MassSubscribeForm.php
index 11903a6..c4413b2 100644
--- a/modules/entity_activity_mass_subscribe/src/Form/MassSubscribeForm.php
+++ b/modules/entity_activity_mass_subscribe/src/Form/MassSubscribeForm.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_activity_mass_subscribe\Form;
 
+use Drupal\entity_activity\SubscriptionStorageInterface;
+use Drupal\user\UserStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Database\Database;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -25,35 +30,35 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * Drupal\Core\Routing\RouteMatchInterface definition.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The subscription storage.
    *
-   * @var \Drupal\entity_activity\SubscriptionStorageInterface
+   * @var SubscriptionStorageInterface
    */
   protected $storageSubscription;
 
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $storageUser;
 
@@ -74,15 +79,15 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
   /**
    * ListSubscribersController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeManagerInterface $entity_type_manager, RouteMatchInterface $route_match) {
     $this->entityRepository = $entity_repository;
@@ -228,7 +233,7 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -243,7 +248,7 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -258,7 +263,7 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
    *
    * @param string|array $property
    *   The property to check.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param mixed $default
    *   The default value returned if property not found.
@@ -277,7 +282,7 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -300,7 +305,7 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -333,9 +338,9 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The current entity.
    *
    * @return array
@@ -402,7 +407,7 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
 
     $results = $query->execute();
 
-    /** @var \Drupal\user\UserInterface[] $users */
+    /** @var UserInterface[] $users */
     $users = $this->storageUser->loadMultiple($results);
 
     $element['filters'] = [
@@ -512,9 +517,9 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
   /**
    * Get the table select options.
    *
-   * @param \Drupal\user\UserInterface[] $users
+   * @param UserInterface[] $users
    *   An array of users object.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The current entity against check if a subscription exists.
    *
    * @return array
@@ -522,7 +527,7 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
    */
   protected function getOptions(array $users, ContentEntityInterface $entity) {
     $options = [];
-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     foreach ($users as $id => $user) {
       $options[$id]['name'] = $user->getDisplayName();
       $options[$id]['role'] = implode(', ', $this->getUserRoles($user));
@@ -534,7 +539,7 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
   /**
    * Get the user roles.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The given user entity.
    *
    * @return array
@@ -558,9 +563,9 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     $values = $form_state->cleanValues()->getValues();
-    /** @var \Drupal\Core\Session\AccountInterface $account */
+    /** @var AccountInterface $account */
     $account = $values['account'];
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $values['entity'];
     // The mass subscribe global permissions can be removed to a user. So we
     // check again if the current user has yet one the the permission.
@@ -594,9 +599,9 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $values = $form_state->cleanValues()->getValues();
     $method = !empty($values['method']) ? $values['method'] : '';
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $values['entity'];
-    /** @var \Drupal\Core\Session\AccountInterface $account */
+    /** @var AccountInterface $account */
     $account = $values['account'];
     $unsubscribe = !empty($values['unsubscribe']);
     // A last check about the unsubscribe feature. Certainly a bit too much.
@@ -663,7 +668,7 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
   /**
    * The _title_callback for the mass subscribe form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
    *
    * @return string
@@ -682,10 +687,10 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
   /**
    * Get the entity type label given an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The entity type label.
    */
   protected function getEntityTypeLabel(ContentEntityInterface $entity) {
@@ -703,7 +708,7 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
    */
   protected function getRoles($exclude_authenticated = FALSE) {
     $roles = [];
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     foreach (Role::loadMultiple() as $role) {
       if ($role->id() === RoleInterface::ANONYMOUS_ID) {
         continue;
@@ -738,9 +743,9 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
   /**
    * Get methods available given a user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user performing the action.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The related entity to the mass subscribe action..
    *
    * @return array
@@ -768,9 +773,9 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
   /**
    * Check global permissions.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account object.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity object.
    *
    * @return bool
@@ -792,7 +797,7 @@ class MassSubscribeForm extends FormBase implements ContainerInjectionInterface
   /**
    * Get the current entity from the route.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The current entity found in the route or NULL.
    */
   protected function getCurrentEntity() {
diff --git a/modules/entity_activity_mass_subscribe/src/MassSubscribeBatch.php b/modules/entity_activity_mass_subscribe/src/MassSubscribeBatch.php
index 3d5fcbf..b3e29ae 100644
--- a/modules/entity_activity_mass_subscribe/src/MassSubscribeBatch.php
+++ b/modules/entity_activity_mass_subscribe/src/MassSubscribeBatch.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_activity_mass_subscribe;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\user\UserStorageInterface;
+use Drupal\entity_activity\SubscriptionStorageInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
@@ -25,22 +30,22 @@ class MassSubscribeBatch {
    *
    * @param array $user_ids
    *   An array of user ID.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    * @param bool $unsubscribe
    *   Bool which indicate if we must unsubscribe users.
    * @param array $context
    *   The batch context.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function subscribe(array $user_ids, ContentEntityInterface $entity, AccountInterface $account, $unsubscribe, array &$context) {
-    /** @var \Drupal\user\UserStorageInterface $userStorage */
+    /** @var UserStorageInterface $userStorage */
     $userStorage = self::entityTypeManager()->getStorage('user');
-    /** @var \Drupal\entity_activity\SubscriptionStorageInterface $subscriptionStorage */
+    /** @var SubscriptionStorageInterface $subscriptionStorage */
     $subscriptionStorage = self::entityTypeManager()->getStorage('entity_activity_subscription');
 
     if (empty($context['results'])) {
@@ -176,7 +181,7 @@ class MassSubscribeBatch {
   /**
    * Get the entity type manager service.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity manager service.
    */
   public static function entityTypeManager() {
diff --git a/modules/entity_activity_mass_subscribe/src/Plugin/Derivative/MassSubscribeLocalTasks.php b/modules/entity_activity_mass_subscribe/src/Plugin/Derivative/MassSubscribeLocalTasks.php
index 70fb232..e496ee3 100644
--- a/modules/entity_activity_mass_subscribe/src/Plugin/Derivative/MassSubscribeLocalTasks.php
+++ b/modules/entity_activity_mass_subscribe/src/Plugin/Derivative/MassSubscribeLocalTasks.php
@@ -19,14 +19,14 @@ class MassSubscribeLocalTasks extends DeriverBase implements ContainerDeriverInt
   /**
    * The entity activity manager service.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;
 
   /**
    * Drupal\Core\Routing\RouteMatchInterface definition.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -35,9 +35,9 @@ class MassSubscribeLocalTasks extends DeriverBase implements ContainerDeriverInt
    *
    * @param string $base_plugin_id
    *   The base plugin id.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity activity manager service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    */
   public function __construct($base_plugin_id, EntityActivityManagerInterface $entity_activity_manager, RouteMatchInterface $route_match) {
diff --git a/modules/entity_activity_mass_subscribe/src/Routing/MassSubscribeRoutes.php b/modules/entity_activity_mass_subscribe/src/Routing/MassSubscribeRoutes.php
index f8243d0..f52fc0e 100644
--- a/modules/entity_activity_mass_subscribe/src/Routing/MassSubscribeRoutes.php
+++ b/modules/entity_activity_mass_subscribe/src/Routing/MassSubscribeRoutes.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity_mass_subscribe\Routing;
 
+use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -28,21 +29,21 @@ class MassSubscribeRoutes implements ContainerInjectionInterface {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Drupal\entity_activity\EntityActivityManagerInterface definition.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;
 
@@ -56,20 +57,20 @@ class MassSubscribeRoutes implements ContainerInjectionInterface {
   /**
    * An array of ContentEntityType supported by entity_activity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityTypeInterface[]
+   * @var ContentEntityTypeInterface[]
    */
   protected $supportedContentEntityTypes;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity activity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ConfigFactoryInterface $config_factory, EntityActivityManagerInterface $entity_activity_manager) {
@@ -114,10 +115,10 @@ class MassSubscribeRoutes implements ContainerInjectionInterface {
   /**
    * Gets the mass subscribe route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getMassSubscribeRoute(EntityTypeInterface $entity_type) {
@@ -146,7 +147,7 @@ class MassSubscribeRoutes implements ContainerInjectionInterface {
   /**
    * Gets the type of the ID key for a given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   An entity type.
    *
    * @return string|null
diff --git a/src/Access/ListSubscribersAccess.php b/src/Access/ListSubscribersAccess.php
index 1880342..a9be18a 100644
--- a/src/Access/ListSubscribersAccess.php
+++ b/src/Access/ListSubscribersAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -19,14 +20,14 @@ class ListSubscribersAccess implements ContainerInjectionInterface {
   /**
    * Drupal\Core\Routing\RouteMatchInterface definition.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Constructs a ListSubscribersAccess object.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    */
   public function __construct(RouteMatchInterface $route_match) {
@@ -45,16 +46,16 @@ class ListSubscribersAccess implements ContainerInjectionInterface {
   /**
    * Checks access to the entity operation on the given route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The node on which check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account, EntityInterface $entity = NULL) {
@@ -81,7 +82,7 @@ class ListSubscribersAccess implements ContainerInjectionInterface {
   /**
    * Get the current entity from the route.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    */
   protected function getCurrentEntity() {
     $entity = NULL;
diff --git a/src/Access/LogAccessCheck.php b/src/Access/LogAccessCheck.php
index ccbceb2..6484659 100644
--- a/src/Access/LogAccessCheck.php
+++ b/src/Access/LogAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -23,14 +24,14 @@ class LogAccessCheck implements AccessInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new SubscriptionAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -42,14 +43,14 @@ class LogAccessCheck implements AccessInterface {
    *
    * More advanced access checks are done by the API itself.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
diff --git a/src/Access/SubscriptionAccessCheck.php b/src/Access/SubscriptionAccessCheck.php
index 43adf30..07950a6 100644
--- a/src/Access/SubscriptionAccessCheck.php
+++ b/src/Access/SubscriptionAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -19,14 +20,14 @@ class SubscriptionAccessCheck implements AccessInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new SubscriptionAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -38,14 +39,14 @@ class SubscriptionAccessCheck implements AccessInterface {
    *
    * More advanced access checks are done by the API itself.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
diff --git a/src/Access/UserViewsAccess.php b/src/Access/UserViewsAccess.php
index 1aee53e..e0792a1 100644
--- a/src/Access/UserViewsAccess.php
+++ b/src/Access/UserViewsAccess.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_activity\Access;
 
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\user\UserInterface;
@@ -16,16 +18,16 @@ class UserViewsAccess {
   /**
    * Checks access on view user_logs.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route object.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\user\UserInterface|null $user
+   * @param UserInterface|null $user
    *   The user related logs.
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
+   * @return AccessResultAllowed|AccessResultForbidden
    *   The access result.
    */
   public function accessLogs(Route $route, RouteMatchInterface $route_match, AccountInterface $account, UserInterface $user = NULL) {
@@ -52,16 +54,16 @@ class UserViewsAccess {
   /**
    * Checks access on view user_subscriptions.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route object.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\user\UserInterface|null $user
+   * @param UserInterface|null $user
    *   The user related subscriptions.
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
+   * @return AccessResultAllowed|AccessResultForbidden
    *   The access result.
    */
   public function accessSubscriptions(Route $route, RouteMatchInterface $route_match, AccountInterface $account, UserInterface $user = NULL) {
diff --git a/src/Annotation/LogGenerator.php b/src/Annotation/LogGenerator.php
index 5a9fd1c..64f7965 100644
--- a/src/Annotation/LogGenerator.php
+++ b/src/Annotation/LogGenerator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class LogGenerator extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -34,7 +35,7 @@ class LogGenerator extends Plugin {
   /**
    * The plugin description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/EntityActivityBaseController.php b/src/Controller/EntityActivityBaseController.php
index dfce284..cfdc2b2 100755
--- a/src/Controller/EntityActivityBaseController.php
+++ b/src/Controller/EntityActivityBaseController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_activity\Controller;
 
+use Drupal\Core\Render\Renderer;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -28,77 +30,77 @@ abstract class EntityActivityBaseController extends ControllerBase implements En
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\Core\Entity\EntityRepositoryInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * Drupal\Core\Session\AccountProxyInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Drupal\entity_activity\EntityActivityManagerInterface.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;
 
   /**
    * Symfony\Component\HttpFoundation\RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Drupal\Core\Render\Renderer definition.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
    * Drupal\Component\Datetime\TimeInterface definition.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Drupal\Core\Language\LanguageManagerInterface definition.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * EntityActivityBaseController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity activity manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $entity_repository, AccountProxyInterface $current_user, EntityActivityManagerInterface $entity_activity_manager, RequestStack $request_stack, RendererInterface $renderer, TimeInterface $time, LanguageManagerInterface $language_manager) {
@@ -134,7 +136,7 @@ abstract class EntityActivityBaseController extends ControllerBase implements En
    * @param array $data
    *   The data pass to the endpoint.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The default Json response.
    */
   protected function notValidRequest(array $data) {
@@ -147,7 +149,7 @@ abstract class EntityActivityBaseController extends ControllerBase implements En
    * @param array $data
    *   The data pass to the endpoint.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The default Json response.
    */
   protected function defaultResponse(array $data) {
@@ -160,7 +162,7 @@ abstract class EntityActivityBaseController extends ControllerBase implements En
    * @param array $data
    *   The data pass to the endpoint.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The access denied Json response.
    */
   protected function accessDeniedResponse(array $data) {
@@ -247,7 +249,7 @@ abstract class EntityActivityBaseController extends ControllerBase implements En
   /**
    * Fetch POST data from the request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return array
@@ -267,14 +269,14 @@ abstract class EntityActivityBaseController extends ControllerBase implements En
    * @param int $entity_id
    *   The entity id.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The entity or NULL.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getEntity($entity_type, $entity_id) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
     return $entity;
   }
@@ -282,9 +284,9 @@ abstract class EntityActivityBaseController extends ControllerBase implements En
   /**
    * Check if an account is the owner of an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to check.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The account.
    *
    * @return bool
@@ -304,9 +306,9 @@ abstract class EntityActivityBaseController extends ControllerBase implements En
   /**
    * Check if an account has the admin permission on an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to check.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The account.
    *
    * @return bool
@@ -339,7 +341,7 @@ abstract class EntityActivityBaseController extends ControllerBase implements En
    * @param array $result
    *   Additionnal data to send.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   - status (array)
    *     - code (int : HTTP Code 200, 403, etc)
    *     - message (string : the reason)
diff --git a/src/Controller/ListSubscribersController.php b/src/Controller/ListSubscribersController.php
index 8c981ed..328e071 100644
--- a/src/Controller/ListSubscribersController.php
+++ b/src/Controller/ListSubscribersController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_activity\Controller;
 
+use Drupal\entity_activity\SubscriptionStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Controller\ControllerBase;
@@ -23,28 +26,28 @@ class ListSubscribersController extends ControllerBase implements ContainerInjec
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * Drupal\Core\Routing\RouteMatchInterface definition.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The subscription storage.
    *
-   * @var \Drupal\entity_activity\SubscriptionStorageInterface
+   * @var SubscriptionStorageInterface
    */
   protected $storageSubscription;
 
@@ -62,15 +65,15 @@ class ListSubscribersController extends ControllerBase implements ContainerInjec
   /**
    * ListSubscribersController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeManagerInterface $entity_type_manager, RouteMatchInterface $route_match) {
     $this->entityRepository = $entity_repository;
@@ -159,7 +162,7 @@ class ListSubscribersController extends ControllerBase implements ContainerInjec
   /**
    * Get the current entity from the route.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    */
   protected function getCurrentEntity() {
     $entity = NULL;
diff --git a/src/Controller/LogController.php b/src/Controller/LogController.php
index a50699d..6a8a9e2 100755
--- a/src/Controller/LogController.php
+++ b/src/Controller/LogController.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_activity\Controller;
 
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\entity_activity\LogStorageInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\entity_activity\Entity\LogInterface;
 use Drupal\user\UserInterface;
@@ -26,15 +31,15 @@ class LogController extends EntityActivityBaseController {
   /**
    * Delete a Log entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function remove(Request $request) {
     $data = $this->getPostData($request);
@@ -63,15 +68,15 @@ class LogController extends EntityActivityBaseController {
   /**
    * Switch the read /unread status of a log.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function readUnread(Request $request) {
     $data = $this->getPostData($request);
@@ -108,15 +113,15 @@ class LogController extends EntityActivityBaseController {
   /**
    * Mark as read all the logs for a user.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function readAll(Request $request) {
     $data = $this->getPostData($request);
@@ -180,14 +185,14 @@ class LogController extends EntityActivityBaseController {
   /**
    * Get the total unread for a user.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getTotalUnread(Request $request) {
     $data = $this->getPostData($request);
@@ -208,11 +213,11 @@ class LogController extends EntityActivityBaseController {
   /**
    * Get the log storage.
    *
-   * @return \Drupal\entity_activity\LogStorageInterface
+   * @return LogStorageInterface
    *   The log storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function logStorage() {
     return $this->entityTypeManager->getStorage('entity_activity_log');
diff --git a/src/Controller/SubscriptionController.php b/src/Controller/SubscriptionController.php
index c12e8ac..5812a8d 100755
--- a/src/Controller/SubscriptionController.php
+++ b/src/Controller/SubscriptionController.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_activity\Controller;
 
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\entity_activity\SubscriptionStorageInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\entity_activity\Entity\SubscriptionInterface;
 use Symfony\Component\HttpFoundation\Request;
@@ -14,14 +19,14 @@ class SubscriptionController extends EntityActivityBaseController {
   /**
    * Check if an entity has a subscription for the current user.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The Json response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function haveSubscription(Request $request) {
     $data = $this->getPostData($request);
@@ -51,15 +56,15 @@ class SubscriptionController extends EntityActivityBaseController {
   /**
    * Create or delete a subscription for an entity and the current user.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function addRemove(Request $request) {
     $data = $this->getPostData($request);
@@ -77,7 +82,7 @@ class SubscriptionController extends EntityActivityBaseController {
 
     $subscriptions = $this->subscriptionStorage()->loadMultipleByEntityAndOwner($entity, $this->currentUser, $data['langcode']);
     if ($subscriptions) {
-      /** @var \Drupal\entity_activity\Entity\SubscriptionInterface $subscription */
+      /** @var SubscriptionInterface $subscription */
       $subscription = reset($subscriptions);
       if ($this->isAdmin($subscription) || $this->isOwner($subscription)) {
         $subscription->delete();
@@ -107,15 +112,15 @@ class SubscriptionController extends EntityActivityBaseController {
   /**
    * Remove a subscription with the subscription ID given.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function remove(Request $request) {
     $data = $this->getPostData($request);
@@ -144,10 +149,10 @@ class SubscriptionController extends EntityActivityBaseController {
   /**
    * Check if a subscription is enable.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    */
   public function status(Request $request) {
@@ -160,10 +165,10 @@ class SubscriptionController extends EntityActivityBaseController {
   /**
    * Enable or disable a subscription.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    */
   public function enableDisable(Request $request) {
@@ -176,11 +181,11 @@ class SubscriptionController extends EntityActivityBaseController {
   /**
    * Get the subscription storage.
    *
-   * @return \Drupal\entity_activity\SubscriptionStorageInterface
+   * @return SubscriptionStorageInterface
    *   The subscription storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function subscriptionStorage() {
     return $this->entityTypeManager->getStorage('entity_activity_subscription');
diff --git a/src/Entity/Generator.php b/src/Entity/Generator.php
index 97d1077..a192d1d 100644
--- a/src/Entity/Generator.php
+++ b/src/Entity/Generator.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_activity\Entity;
 
+use Drupal\entity_activity\Plugin\LogGeneratorManager;
+use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
 use Drupal\entity_activity\Plugin\LogGeneratorPluginCollection;
@@ -81,14 +83,14 @@ class Generator extends ConfigEntityBase implements GeneratorInterface, EntityWi
   /**
    * The log generators collection.
    *
-   * @var \Drupal\entity_activity\Plugin\LogGeneratorPluginCollection
+   * @var LogGeneratorPluginCollection
    */
   protected $logGeneratorsCollection;
 
   /**
    * The log generator plugin manager.
    *
-   * @var \Drupal\entity_activity\Plugin\LogGeneratorManager
+   * @var LogGeneratorManager
    */
   protected $logGeneratorManager;
 
@@ -148,7 +150,7 @@ class Generator extends ConfigEntityBase implements GeneratorInterface, EntityWi
   /**
    * Gets the log generator plugin manager.
    *
-   * @return \Drupal\Core\Executable\ExecutableManagerInterface
+   * @return ExecutableManagerInterface
    *   The log generator plugin manager.
    */
   protected function logGeneratorPluginManager() {
diff --git a/src/Entity/GeneratorInterface.php b/src/Entity/GeneratorInterface.php
index cc4e258..cd8a79b 100644
--- a/src/Entity/GeneratorInterface.php
+++ b/src/Entity/GeneratorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity\Entity;
 
+use Drupal\entity_activity\Plugin\LogGeneratorInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\entity_activity\Plugin\LogGeneratorPluginCollection;
 
@@ -21,7 +22,7 @@ interface GeneratorInterface extends ConfigEntityInterface {
   /**
    * Gets log generators for this entity.
    *
-   * @return \Drupal\entity_activity\Plugin\LogGeneratorInterface[]|\Drupal\entity_activity\Plugin\LogGeneratorPluginCollection
+   * @return LogGeneratorInterface[]|LogGeneratorPluginCollection
    *   An array or collection of configured log generators plugins.
    */
   public function getLogGeneratorsCollection();
@@ -29,7 +30,7 @@ interface GeneratorInterface extends ConfigEntityInterface {
   /**
    * Set new log generators on the entity.
    *
-   * @param \Drupal\entity_activity\Plugin\LogGeneratorPluginCollection $log_generators
+   * @param LogGeneratorPluginCollection $log_generators
    *   Log generators to set.
    */
   public function setLogGeneratorsCollection(LogGeneratorPluginCollection $log_generators);
@@ -40,7 +41,7 @@ interface GeneratorInterface extends ConfigEntityInterface {
    * @param string $instance_id
    *   The log generator plugin instance ID.
    *
-   * @return \Drupal\entity_activity\Plugin\LogGeneratorInterface
+   * @return LogGeneratorInterface
    *   A log generator plugin.
    */
   public function getLogGeneratorsInstance($instance_id);
diff --git a/src/Entity/LogInterface.php b/src/Entity/LogInterface.php
index d7296cb..f269227 100644
--- a/src/Entity/LogInterface.php
+++ b/src/Entity/LogInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity\Entity;
 
+use Drupal\entity_activity\Plugin\LogGeneratorInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\user\EntityOwnerInterface;
 use Drupal\user\UserInterface;
@@ -54,7 +55,7 @@ interface LogInterface extends ContentEntityInterface, EntityOwnerInterface {
   /**
    * Returns the entity subscription.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @return SubscriptionInterface
    *   The subscription entity.
    */
   public function getSubscription();
@@ -62,7 +63,7 @@ interface LogInterface extends ContentEntityInterface, EntityOwnerInterface {
   /**
    * Sets the entity subscription.
    *
-   * @param \Drupal\entity_activity\Entity\SubscriptionInterface $subscription
+   * @param SubscriptionInterface $subscription
    *   The subscription entity.
    *
    * @return $this
@@ -99,7 +100,7 @@ interface LogInterface extends ContentEntityInterface, EntityOwnerInterface {
   /**
    * Gets the log generator.
    *
-   * @return \Drupal\entity_activity\Plugin\LogGeneratorInterface
+   * @return LogGeneratorInterface
    *   The log generator.
    */
   public function getLogGenerator();
@@ -123,7 +124,7 @@ interface LogInterface extends ContentEntityInterface, EntityOwnerInterface {
   /**
    * Gets the source entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The source entity.
    */
   public function getSourceEntity();
@@ -147,7 +148,7 @@ interface LogInterface extends ContentEntityInterface, EntityOwnerInterface {
   /**
    * Gets the reference source entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The reference source entity.
    */
   public function getReferenceSourceEntity();
@@ -173,7 +174,7 @@ interface LogInterface extends ContentEntityInterface, EntityOwnerInterface {
   /**
    * Returns the entity current user's user entity.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The current user entity.
    */
   public function getCurrentUser();
@@ -181,7 +182,7 @@ interface LogInterface extends ContentEntityInterface, EntityOwnerInterface {
   /**
    * Sets the entity current user's user entity.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The current user entity.
    *
    * @return $this
diff --git a/src/Entity/SubscriptionInterface.php b/src/Entity/SubscriptionInterface.php
index 233f65d..2fb61d6 100644
--- a/src/Entity/SubscriptionInterface.php
+++ b/src/Entity/SubscriptionInterface.php
@@ -80,7 +80,7 @@ interface SubscriptionInterface extends ContentEntityInterface, EntityChangedInt
   /**
    * Gets the source entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The source entity.
    */
   public function getSourceEntity();
diff --git a/src/EntityActivityContentEntityStorage.php b/src/EntityActivityContentEntityStorage.php
index efb1978..188a5da 100644
--- a/src/EntityActivityContentEntityStorage.php
+++ b/src/EntityActivityContentEntityStorage.php
@@ -25,30 +25,30 @@ class EntityActivityContentEntityStorage extends SqlContentEntityStorage {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs a new EntityActivityContentEntityStorage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection to be used.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend to be used.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(EntityTypeInterface $entity_type, Connection $database, EntityFieldManagerInterface $entity_field_manager, CacheBackendInterface $cache, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityTypeManagerInterface $entity_type_manager, EventDispatcherInterface $event_dispatcher) {
@@ -81,7 +81,7 @@ class EntityActivityContentEntityStorage extends SqlContentEntityStorage {
 
     $event_class = $this->entityType->getHandlerClass('event');
     if ($event_class) {
-      $this->eventDispatcher->dispatch($this->getEventName($hook), new $event_class($entity));
+      $this->eventDispatcher->dispatch(new $event_class($entity), $this->getEventName($hook));
     }
   }
 
diff --git a/src/EntityActivityManager.php b/src/EntityActivityManager.php
index c8d15a4..579f3ef 100644
--- a/src/EntityActivityManager.php
+++ b/src/EntityActivityManager.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_activity;
 
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Routing\CurrentRouteMatch;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\entity_activity\Entity\GeneratorInterface;
 use Drupal\Component\Datetime\Time;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\Cache;
@@ -38,138 +43,138 @@ class EntityActivityManager implements EntityActivityManagerInterface {
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The current route match service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The log generator manager.
    *
-   * @var \Drupal\entity_activity\Plugin\LogGeneratorManagerInterface
+   * @var LogGeneratorManagerInterface
    */
   protected $logManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The subscription storage.
    *
-   * @var \Drupal\entity_activity\SubscriptionStorageInterface
+   * @var SubscriptionStorageInterface
    */
   protected $subscriptionStorage;
 
   /**
    * The log storage.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;
 
   /**
    * EntityActivityManager constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    * @param |Drupal\entity_activity\Plugin\LogGeneratorManagerInterface $manager
    *   The log generator manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Queue\QueueFactory $queue
+   * @param QueueFactory $queue
    *   The queue factory.
-   * @param \Drupal\Component\Datetime\Time $time
+   * @param Time $time
    *   The time service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityRepositoryInterface $entity_repository, LanguageManagerInterface $language_manager, EntityFieldManagerInterface $entity_field_manager, LogGeneratorManagerInterface $manager, AccountProxyInterface $current_user, EntityTypeBundleInfoInterface $entity_type_bundle_info, EventDispatcherInterface $event_dispatcher, QueueFactory $queue, Time $time, StateInterface $state) {
     $this->configFactory = $config_factory;
@@ -192,7 +197,7 @@ class EntityActivityManager implements EntityActivityManagerInterface {
    * {@inheritdoc}
    */
   public function getSupportedContentEntityTypes($return_object = FALSE) {
-    /** @var \Drupal\Core\Entity\ContentEntityTypeInterface[] $entity_types */
+    /** @var ContentEntityTypeInterface[] $entity_types */
     $entity_types = $this->entityTypeManager->getDefinitions();
     foreach ($entity_types as $entity_type_id => $entity_type) {
       if (!$entity_type instanceof ContentEntityTypeInterface) {
@@ -206,7 +211,7 @@ class EntityActivityManager implements EntityActivityManagerInterface {
         // subscriptions to these entities which can not have a "subscribe on"
         // button.
         $support_entity_type = new EntityActivitySupportEntityTypeEvent($entity_type_id);
-        $this->eventDispatcher->dispatch(EntityActivityEvents::ENTITY_ACTIVITY_SUPPORT_ENTITY_TYPE, $support_entity_type);
+        $this->eventDispatcher->dispatch($support_entity_type, EntityActivityEvents::ENTITY_ACTIVITY_SUPPORT_ENTITY_TYPE);
         if ($support_entity_type->isSupported()) {
           continue;
         }
@@ -251,7 +256,7 @@ class EntityActivityManager implements EntityActivityManagerInterface {
     $is_enabled = in_array($entity->getEntityTypeId(), $entity_type_enabled);
     if ($is_enabled) {
       $event = new EntityActivityEvent($entity);
-      $this->eventDispatcher->dispatch($event_name, $event);
+      $this->eventDispatcher->dispatch($event, $event_name);
     }
   }
 
@@ -261,7 +266,7 @@ class EntityActivityManager implements EntityActivityManagerInterface {
   public function getLogGenerators($entity_type_id, $langcode = NULL) {
     $log_generator_instances = [];
     $generators = $this->entityTypeManager->getStorage('entity_activity_generator')->loadMultiple();
-    /** @var \Drupal\entity_activity\Entity\GeneratorInterface $generator */
+    /** @var GeneratorInterface $generator */
     foreach ($generators as $generator) {
       $generator = $this->entityRepository->getTranslationFromContext($generator, $langcode);
       if (!$generator->status()) {
@@ -380,7 +385,7 @@ class EntityActivityManager implements EntityActivityManagerInterface {
         // Let's go !
         $max = $config['limit']['max'];
         $users = $this->entityTypeManager->getStorage('user')->loadMultiple();
-        /** @var \Drupal\user\UserInterface $user */
+        /** @var UserInterface $user */
         foreach ($users as $user) {
           $data = [];
           $query = $this->logStorage->getQuery()
diff --git a/src/EntityActivityManagerInterface.php b/src/EntityActivityManagerInterface.php
index bcce3a8..8e3b2a8 100644
--- a/src/EntityActivityManagerInterface.php
+++ b/src/EntityActivityManagerInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_activity;
 
+use Drupal\entity_activity\Plugin\LogGeneratorInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\user\UserInterface;
 
@@ -46,7 +49,7 @@ interface EntityActivityManagerInterface {
    *
    * @param string $event_name
    *   The event name.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    */
   public function dispatch($event_name, ContentEntityInterface $entity);
@@ -59,19 +62,19 @@ interface EntityActivityManagerInterface {
    * @param string $langcode
    *   The optional langcode.
    *
-   * @return \Drupal\entity_activity\Plugin\LogGeneratorInterface[][]
+   * @return LogGeneratorInterface[][]
    *   An array keyed by the config entity id with as value an array of
    *   LogGenerator plugin instance keyed by their plugin_id.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getLogGenerators($entity_type_id, $langcode = NULL);
 
   /**
    * Delete subscriptions done on an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    */
   public function deleteSubscriptions(ContentEntityInterface $entity);
@@ -79,7 +82,7 @@ interface EntityActivityManagerInterface {
   /**
    * Delete the user subscriptions.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user entity.
    */
   public function deleteUserSubscriptions(UserInterface $user);
@@ -87,7 +90,7 @@ interface EntityActivityManagerInterface {
   /**
    * Delete the user logs.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user entity.
    */
   public function deleteUserLogs(UserInterface $user);
@@ -95,7 +98,7 @@ interface EntityActivityManagerInterface {
   /**
    * Get the entity's langcode or the default langcode as fallback.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    *
    * @return string
@@ -111,7 +114,7 @@ interface EntityActivityManagerInterface {
   /**
    * Invalidate cache tags given an content entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    */
   public function invalidateCache(ContentEntityInterface $entity);
diff --git a/src/Event/EntityActivityEvent.php b/src/Event/EntityActivityEvent.php
index 77e3253..43ceb6e 100644
--- a/src/Event/EntityActivityEvent.php
+++ b/src/Event/EntityActivityEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_activity\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\ContentEntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the log event.
@@ -13,7 +13,7 @@ class EntityActivityEvent extends Event {
   /**
    * The content entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
@@ -27,7 +27,7 @@ class EntityActivityEvent extends Event {
   /**
    * Constructs a new EntityActivityEvent.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param bool $processed
    *   The tracker to know if the event has been processed.
@@ -40,7 +40,7 @@ class EntityActivityEvent extends Event {
   /**
    * Gets the entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Gets the entity.
    */
   public function getEntity() {
diff --git a/src/Event/EntityActivitySupportEntityTypeEvent.php b/src/Event/EntityActivitySupportEntityTypeEvent.php
index 9822d0f..913836c 100644
--- a/src/Event/EntityActivitySupportEntityTypeEvent.php
+++ b/src/Event/EntityActivitySupportEntityTypeEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\entity_activity\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Defines the log event.
diff --git a/src/Event/LogEvent.php b/src/Event/LogEvent.php
index 77f8e24..6bd525e 100644
--- a/src/Event/LogEvent.php
+++ b/src/Event/LogEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_activity\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\entity_activity\Entity\LogInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the log event.
@@ -13,14 +13,14 @@ class LogEvent extends Event {
   /**
    * The log.
    *
-   * @var \Drupal\entity_activity\Entity\LogInterface
+   * @var LogInterface
    */
   protected $log;
 
   /**
    * Constructs a new LogEvent.
    *
-   * @param \Drupal\entity_activity\Entity\LogInterface $log
+   * @param LogInterface $log
    *   The log entity.
    */
   public function __construct(LogInterface $log) {
@@ -30,7 +30,7 @@ class LogEvent extends Event {
   /**
    * Gets the log.
    *
-   * @return \Drupal\entity_activity\Entity\LogInterface
+   * @return LogInterface
    *   Gets the log.
    */
   public function getLog() {
diff --git a/src/Event/SubscriptionEvent.php b/src/Event/SubscriptionEvent.php
index ff5a5f6..51bb359 100644
--- a/src/Event/SubscriptionEvent.php
+++ b/src/Event/SubscriptionEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_activity\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\entity_activity\Entity\SubscriptionInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines the log event.
@@ -13,14 +13,14 @@ class SubscriptionEvent extends Event {
   /**
    * The subscription.
    *
-   * @var \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription;
 
   /**
    * Constructs a new SubscriptionEvent.
    *
-   * @param \Drupal\entity_activity\Entity\SubscriptionInterface $subscription
+   * @param SubscriptionInterface $subscription
    *   The subscription entity.
    */
   public function __construct(SubscriptionInterface $subscription) {
@@ -30,7 +30,7 @@ class SubscriptionEvent extends Event {
   /**
    * Gets the subscription.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @return SubscriptionInterface
    *   Gets the subscription.
    */
   public function getSubscription() {
diff --git a/src/EventSubscriber/EntityActivitySubscriber.php b/src/EventSubscriber/EntityActivitySubscriber.php
index 44ed37e..bcb995b 100644
--- a/src/EventSubscriber/EntityActivitySubscriber.php
+++ b/src/EventSubscriber/EntityActivitySubscriber.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_activity\EventSubscriber;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\entity_activity\Plugin\LogGeneratorInterface;
 use Drupal\Core\Queue\QueueFactory;
 use Drupal\entity_activity\EntityActivityManagerInterface;
 use Drupal\entity_activity\Event\EntityActivityEvent;
@@ -20,23 +24,23 @@ class EntityActivitySubscriber implements EventSubscriberInterface {
   /**
    * The entity activity manager.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;
 
   /**
    * Queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * Constructs a new EntityActivitySubscriber object.
    *
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
    */
   public function __construct(EntityActivityManagerInterface $entity_activity_manager, QueueFactory $queue_factory) {
@@ -59,11 +63,11 @@ class EntityActivitySubscriber implements EventSubscriberInterface {
   /**
    * Generate logs for the insert operation.
    *
-   * @param \Drupal\entity_activity\Event\EntityActivityEvent $event
+   * @param EntityActivityEvent $event
    *   The entity activity event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function insertGenerateLog(EntityActivityEvent $event) {
     $this->generateLog($event, 'insert');
@@ -72,11 +76,11 @@ class EntityActivitySubscriber implements EventSubscriberInterface {
   /**
    * Generate logs for the update operation.
    *
-   * @param \Drupal\entity_activity\Event\EntityActivityEvent $event
+   * @param EntityActivityEvent $event
    *   The entity activity event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function updateGenerateLog(EntityActivityEvent $event) {
     $this->generateLog($event, 'update');
@@ -85,11 +89,11 @@ class EntityActivitySubscriber implements EventSubscriberInterface {
   /**
    * Generate logs for the delete operation.
    *
-   * @param \Drupal\entity_activity\Event\EntityActivityEvent $event
+   * @param EntityActivityEvent $event
    *   The entity activity event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function deleteGenerateLog(EntityActivityEvent $event) {
     $this->generateLog($event, 'delete');
@@ -98,17 +102,17 @@ class EntityActivitySubscriber implements EventSubscriberInterface {
   /**
    * Generate logs for a given operation.
    *
-   * @param \Drupal\entity_activity\Event\EntityActivityEvent $event
+   * @param EntityActivityEvent $event
    *   The entity activity event.
    * @param string $operation
    *   The operation.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function generateLog(EntityActivityEvent $event, $operation) {
     if (!$event->isProcessed()) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $event->getEntity();
       $langcode = NULL;
       if ($language = $entity->language()) {
@@ -116,7 +120,7 @@ class EntityActivitySubscriber implements EventSubscriberInterface {
       }
       $entity_type_id = $entity->getEntityTypeId();
       $log_generators_per_config = $this->entityActivityManager->getLogGenerators($entity_type_id, $langcode);
-      /** @var \Drupal\entity_activity\Plugin\LogGeneratorInterface $log_generator */
+      /** @var LogGeneratorInterface $log_generator */
       foreach ($log_generators_per_config as $generator_id => $log_generators) {
         foreach ($log_generators as $plugin_id => $log_generator) {
           if ($log_generator->isEnabled() && $log_generator->getOperation() == $operation) {
diff --git a/src/Form/GeneratorDisableForm.php b/src/Form/GeneratorDisableForm.php
index 8c94f9a..5a1bdac 100644
--- a/src/Form/GeneratorDisableForm.php
+++ b/src/Form/GeneratorDisableForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity\Form;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -46,7 +47,7 @@ class GeneratorDisableForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $entity->disable()->save();
 
diff --git a/src/Form/GeneratorDuplicateForm.php b/src/Form/GeneratorDuplicateForm.php
index 2898614..5524718 100644
--- a/src/Form/GeneratorDuplicateForm.php
+++ b/src/Form/GeneratorDuplicateForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity\Form;
 
+use Drupal\entity_activity\Entity\GeneratorInterface;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
@@ -15,7 +16,7 @@ class GeneratorDuplicateForm extends GeneratorForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\entity_activity\Entity\GeneratorInterface $entity */
+    /** @var GeneratorInterface $entity */
     $entity = $this->entity->createDuplicate();
     $entity->set('label', $this->t('Duplicate of @label', ['@label' => $this->entity->label()]));
     $this->entity = $entity;
diff --git a/src/Form/GeneratorEnableForm.php b/src/Form/GeneratorEnableForm.php
index 3f0070d..49dd0ec 100644
--- a/src/Form/GeneratorEnableForm.php
+++ b/src/Form/GeneratorEnableForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity\Form;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -46,7 +47,7 @@ class GeneratorEnableForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $entity->enable()->save();
 
diff --git a/src/Form/GeneratorForm.php b/src/Form/GeneratorForm.php
index 6afbb5c..c4faa26 100644
--- a/src/Form/GeneratorForm.php
+++ b/src/Form/GeneratorForm.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_activity\Form;
 
+use Drupal\entity_activity\Entity\GeneratorInterface;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\Extension\ThemeHandler;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\entity_activity\Plugin\LogGeneratorInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -21,56 +26,56 @@ class GeneratorForm extends EntityForm {
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The generator entity.
    *
-   * @var \Drupal\entity_activity\Entity\GeneratorInterface
+   * @var GeneratorInterface
    */
   protected $entity;
 
   /**
    * The log generator plugin manager.
    *
-   * @var \Drupal\entity_activity\Plugin\LogGeneratorManagerInterface
+   * @var LogGeneratorManagerInterface
    */
   protected $manager;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $language;
 
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandler
+   * @var ThemeHandler
    */
   protected $themeHandler;
 
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The plugin form manager.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;
 
@@ -91,17 +96,17 @@ class GeneratorForm extends EntityForm {
   /**
    * GeneratorFormBase constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\entity_activity\Plugin\LogGeneratorManagerInterface $log_generator_manager
+   * @param LogGeneratorManagerInterface $log_generator_manager
    *   The LogGeneratorManager for building the generators UI.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language
+   * @param LanguageManagerInterface $language
    *   The language manager.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $plugin_form_manager
+   * @param PluginFormFactoryInterface $plugin_form_manager
    *   The plugin form manager.
    */
   public function __construct(LoggerInterface $logger, LogGeneratorManagerInterface $log_generator_manager, ContextRepositoryInterface $context_repository, LanguageManagerInterface $language, ThemeHandlerInterface $theme_handler, PluginFormFactoryInterface $plugin_form_manager) {
@@ -121,7 +126,7 @@ class GeneratorForm extends EntityForm {
 
     $form['#tree'] = TRUE;
 
-    /** @var \Drupal\entity_activity\Entity\GeneratorInterface $entity */
+    /** @var GeneratorInterface $entity */
     $entity = $this->entity;
 
     $form['label'] = [
@@ -154,13 +159,13 @@ class GeneratorForm extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    *   The form array with the generators UI added in.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function buildLogGeneratorsInterface(array $form, FormStateInterface $form_state) {
     $form['generators_tabs'] = [
@@ -180,7 +185,7 @@ class GeneratorForm extends EntityForm {
     foreach ($log_generators_definitions as $log_generator_id => $definition) {
 
       $log_generator_config = isset($log_generators[$log_generator_id]) ? $log_generators[$log_generator_id] : [];
-      /** @var \Drupal\entity_activity\Plugin\LogGeneratorInterface $log_generator */
+      /** @var LogGeneratorInterface $log_generator */
       $log_generator = $this->manager->createInstance($log_generator_id, $log_generator_config);
       $form_state->set(['generators', $log_generator_id], $log_generator);
       $log_generator_form = $log_generator->buildConfigurationForm([], $form_state);
diff --git a/src/Form/LogSettingsForm.php b/src/Form/LogSettingsForm.php
index cab2cce..4dcb8ac 100644
--- a/src/Form/LogSettingsForm.php
+++ b/src/Form/LogSettingsForm.php
@@ -27,7 +27,7 @@ class LogSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class LogSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 9fa75e8..8d241dc 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity\Form;
 
+use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -22,28 +23,28 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\Core\Entity\EntityTypeBundleInfoInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * Drupal\entity_activity\EntityActivityManagerInterface definition.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;
 
   /**
    * Drupal\Core\Language\LanguageManagerInterface definition.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -57,13 +58,13 @@ class SettingsForm extends ConfigFormBase {
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity activity manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityActivityManagerInterface $entity_activity_manager, LanguageManagerInterface $language_manager) {
@@ -119,7 +120,7 @@ class SettingsForm extends ConfigFormBase {
     $entity_types = $this->entityActivityManager->getSupportedContentEntityTypes(TRUE);
     // We do not use here a checkboxes to be able later to
     // enable / disable per bundle too.
-    /** @var \Drupal\Core\Entity\ContentEntityTypeInterface $entity_type */
+    /** @var ContentEntityTypeInterface $entity_type */
     foreach ($entity_types as $entity_type_id => $entity_type) {
       $form['entity_type'][$entity_type_id]['enable'] = [
         '#type' => 'checkbox',
diff --git a/src/Form/SubscriptionSettingsForm.php b/src/Form/SubscriptionSettingsForm.php
index 61312a7..9d7dc9f 100644
--- a/src/Form/SubscriptionSettingsForm.php
+++ b/src/Form/SubscriptionSettingsForm.php
@@ -27,7 +27,7 @@ class SubscriptionSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class SubscriptionSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/GeneratorListBuilder.php b/src/GeneratorListBuilder.php
index 5865925..cedb8b9 100644
--- a/src/GeneratorListBuilder.php
+++ b/src/GeneratorListBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_activity;
 
+use Drupal\entity_activity\Plugin\LogGeneratorInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -32,9 +34,9 @@ class GeneratorListBuilder extends ConfigEntityListBuilder {
     $data['generators'] = [];
 
     /** @var \Drupal\entity_activity\Entity\GeneratorInterface $entity */
-    /** @var \Drupal\entity_activity\Plugin\LogGeneratorInterface $log_generator */
+    /** @var LogGeneratorInterface $log_generator */
     foreach ($entity->getLogGeneratorsCollection() as $log_generator_id => $log_generator) {
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $summary */
+      /** @var TranslatableMarkup $summary */
       if ($summary = $log_generator->summary()) {
         $data['generators'][$log_generator_id] = ['#markup' => $summary->render()];
       }
@@ -46,7 +48,7 @@ class GeneratorListBuilder extends ConfigEntityListBuilder {
       '#items' => empty($data['generators']) ? [$this->t('None')] : $data['generators'],
     ];
 
-    $row['generators'] = render($data['generators']);
+    $row['generators'] = \Drupal::service('renderer')->render($data['generators']);
     $row['status'] = $entity->status() ? $this->t('Enabled') : $this->t('Disabled');
 
     return $row + parent::buildRow($entity);
diff --git a/src/Interval.php b/src/Interval.php
index 6ab9d0b..4dfa6c5 100644
--- a/src/Interval.php
+++ b/src/Interval.php
@@ -88,14 +88,14 @@ final class Interval {
   /**
    * Adds the interval to the given date.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The new date.
    */
   public function add(DrupalDateTime $date) {
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $new_date */
+    /** @var DrupalDateTime $new_date */
     $new_date = clone $date;
     $new_date->modify('+' . $this->__toString());
     // Jan 31st + 1 month should give Feb 28th, not Mar 3rd.
@@ -109,14 +109,14 @@ final class Interval {
   /**
    * Subtracts the interval from the given date.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The new date.
    */
   public function subtract(DrupalDateTime $date) {
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $new_date */
+    /** @var DrupalDateTime $new_date */
     $new_date = clone $date;
     $new_date->modify('-' . $this->__toString());
     // Mar 31st - 1 month should Feb 28th, not Mar 3rd.
@@ -133,14 +133,14 @@ final class Interval {
    * For example, an Apr 14th date would be reduced to Apr 1st for monthly
    * intervals, and Jan 1st for yearly intervals.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The new date.
    */
   public function floor(DrupalDateTime $date) {
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $new_date */
+    /** @var DrupalDateTime $new_date */
     $new_date = clone $date;
     switch ($this->unit) {
       case 'hour':
@@ -177,10 +177,10 @@ final class Interval {
    * For example, an Apr 14th date would be increased to May 1st for a 1 month
    * interval, and to June 1st for a 2 month interval.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The new date.
    */
   public function ceil(DrupalDateTime $date) {
diff --git a/src/LogAccessControlHandler.php b/src/LogAccessControlHandler.php
index 52a2af3..6653db2 100644
--- a/src/LogAccessControlHandler.php
+++ b/src/LogAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity;
 
+use Drupal\entity_activity\Entity\LogInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -22,7 +23,7 @@ class LogAccessControlHandler extends EntityAccessControlHandler {
       return AccessResult::allowed()->cachePerPermissions();
     }
 
-    /** @var \Drupal\entity_activity\Entity\LogInterface $entity */
+    /** @var LogInterface $entity */
     $owner = $entity->getOwner();
     if (!$owner) {
       // The log is malformed.
diff --git a/src/LogHtmlRouteProvider.php b/src/LogHtmlRouteProvider.php
index 2b95d0c..0da534e 100644
--- a/src/LogHtmlRouteProvider.php
+++ b/src/LogHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class LogHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/LogListBuilder.php b/src/LogListBuilder.php
index 79d037c..eaf6c84 100644
--- a/src/LogListBuilder.php
+++ b/src/LogListBuilder.php
@@ -22,27 +22,27 @@ class LogListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
    * Constructs a new NodeListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, Renderer $renderer) {
diff --git a/src/LogStorageInterface.php b/src/LogStorageInterface.php
index 4819552..3a05138 100644
--- a/src/LogStorageInterface.php
+++ b/src/LogStorageInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity;
 
+use Drupal\entity_activity\Entity\LogInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -15,7 +16,7 @@ interface LogStorageInterface extends ContentEntityStorageInterface {
   /**
    * Generates a log.
    *
-   * @param \Drupal\entity_activity\Entity\SubscriptionInterface $subscription
+   * @param SubscriptionInterface $subscription
    *   The subscription entity.
    * @param array $log
    *   The log message array with value and format as the array keys.
@@ -25,14 +26,14 @@ interface LogStorageInterface extends ContentEntityStorageInterface {
    *   The current user id who made the action.
    * @param string $langcode
    *   The langcode used for generating the log message.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $source
+   * @param ContentEntityInterface $source
    *   The source entity.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $reference_source
+   * @param ContentEntityInterface $reference_source
    *   The reference source entity.
    * @param array $parameters
    *   An array of additional parameters for the log.
    *
-   * @return \Drupal\entity_activity\Entity\LogInterface
+   * @return LogInterface
    *   The generated log, unsaved.
    */
   public function generate(SubscriptionInterface $subscription, array $log, $log_generator_id, $current_user_id, $langcode, ContentEntityInterface $source = NULL, ContentEntityInterface $reference_source = NULL, array $parameters = []);
@@ -40,10 +41,10 @@ interface LogStorageInterface extends ContentEntityStorageInterface {
   /**
    * Loads all logs for a source entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\entity_activity\Entity\LogInterface[]
+   * @return LogInterface[]
    *   The logs.
    */
   public function loadMultipleByEntity(ContentEntityInterface $entity);
@@ -51,10 +52,10 @@ interface LogStorageInterface extends ContentEntityStorageInterface {
   /**
    * Loads all logs for a given owner.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    *
-   * @return \Drupal\entity_activity\Entity\LogInterface[]
+   * @return LogInterface[]
    *   The logs.
    */
   public function loadMultipleByOwner(AccountInterface $account);
@@ -62,10 +63,10 @@ interface LogStorageInterface extends ContentEntityStorageInterface {
   /**
    * Loads all unread logs for a given owner.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    *
-   * @return \Drupal\entity_activity\Entity\LogInterface[]
+   * @return LogInterface[]
    *   The logs.
    */
   public function loadMultipleUnreadByOwner(AccountInterface $account);
@@ -73,10 +74,10 @@ interface LogStorageInterface extends ContentEntityStorageInterface {
   /**
    * Get the total of all unread logs for a given owner.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    *
-   * @return \Drupal\entity_activity\Entity\LogInterface[]
+   * @return LogInterface[]
    *   The logs.
    */
   public function totalUnreadByOwner(AccountInterface $account);
diff --git a/src/Plugin/Block/SubscribeOnBlock.php b/src/Plugin/Block/SubscribeOnBlock.php
index b5184e1..6f6eb4c 100644
--- a/src/Plugin/Block/SubscribeOnBlock.php
+++ b/src/Plugin/Block/SubscribeOnBlock.php
@@ -28,35 +28,35 @@ class SubscribeOnBlock extends BlockBase implements ContainerFactoryPluginInterf
   /**
    * Drupal\entity_activity\EntityActivityManagerInterface definition.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;
 
   /**
    * Drupal\Core\Routing\CurrentRouteMatch definition.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;
 
   /**
    * Drupal\Core\Session\AccountProxyInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Drupal\Core\Language\LanguageManagerInterface definition.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -69,15 +69,15 @@ class SubscribeOnBlock extends BlockBase implements ContainerFactoryPluginInterf
    *   The plugin id.
    * @param $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity activity manager.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route_match
+   * @param CurrentRouteMatch $current_route_match
    *   The current route match.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory..
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityActivityManagerInterface $entity_activity_manager, CurrentRouteMatch $current_route_match, AccountProxyInterface $current_user, ConfigFactoryInterface $config_factory, LanguageManagerInterface $language_manager) {
diff --git a/src/Plugin/Block/UserLogBlock.php b/src/Plugin/Block/UserLogBlock.php
index 1093267..9619f60 100644
--- a/src/Plugin/Block/UserLogBlock.php
+++ b/src/Plugin/Block/UserLogBlock.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_activity\Plugin\Block;
 
+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityViewModeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\Entity\EntityViewMode;
@@ -29,28 +33,28 @@ class UserLogBlock extends BlockBase implements ContainerFactoryPluginInterface
   /**
    * The Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The \Drupal\Core\Session\AccountProxyInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The log storage.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;
 
@@ -77,15 +81,15 @@ class UserLogBlock extends BlockBase implements ContainerFactoryPluginInterface
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, AccountProxyInterface $current_user, ModuleHandlerInterface $module_handler) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -297,7 +301,7 @@ class UserLogBlock extends BlockBase implements ContainerFactoryPluginInterface
   protected function getViewModeIds($value_is_label = TRUE, $entity_type_id = 'entity_activity_log') {
     $list = [];
     $view_modes = EntityViewMode::loadMultiple();
-    /** @var \Drupal\Core\Entity\EntityViewModeInterface $view_mode */
+    /** @var EntityViewModeInterface $view_mode */
     foreach ($view_modes as $key => $view_mode) {
       if ($view_mode->getTargetType() == $entity_type_id) {
         $parts = explode('.', $key);
@@ -320,7 +324,7 @@ class UserLogBlock extends BlockBase implements ContainerFactoryPluginInterface
   /**
    * Gets the latest X logs unread for an account.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The log's owner.
    * @param int $length
    *   The number of logs to retrieve.
diff --git a/src/Plugin/Derivative/ListSubscribersLocalTasks.php b/src/Plugin/Derivative/ListSubscribersLocalTasks.php
index d9ed4be..d8b906e 100644
--- a/src/Plugin/Derivative/ListSubscribersLocalTasks.php
+++ b/src/Plugin/Derivative/ListSubscribersLocalTasks.php
@@ -19,14 +19,14 @@ class ListSubscribersLocalTasks extends DeriverBase implements ContainerDeriverI
   /**
    * The entity activity manager service.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;
 
   /**
    * Drupal\Core\Routing\RouteMatchInterface definition.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -35,9 +35,9 @@ class ListSubscribersLocalTasks extends DeriverBase implements ContainerDeriverI
    *
    * @param $base_plugin_id
    *   The base plugin id.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity activity manager service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match service.
    */
   public function __construct($base_plugin_id, EntityActivityManagerInterface $entity_activity_manager, RouteMatchInterface $route_match) {
diff --git a/src/Plugin/LogGeneratorBase.php b/src/Plugin/LogGeneratorBase.php
index bdf3107..3f24859 100644
--- a/src/Plugin/LogGeneratorBase.php
+++ b/src/Plugin/LogGeneratorBase.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_activity\Plugin;
 
+use Drupal\entity_activity\SubscriptionStorageInterface;
+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\NestedArray;
@@ -41,98 +46,98 @@ abstract class LogGeneratorBase extends PluginBase implements LogGeneratorInterf
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\Core\Datetime\DateFormatterInterface definition.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Drupal\Core\Utility\Token definition.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Drupal\Core\Entity\EntityRepositoryInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * Drupal\Core\Entity\EntityFieldManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The token entity mapper service.
    *
-   * @var \Drupal\token\TokenEntityMapperInterface
+   * @var TokenEntityMapperInterface
    */
   protected $tokenEntityMapper;
 
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The serializer service.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;
 
   /**
    * The global entity activity manager.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;
 
@@ -146,21 +151,21 @@ abstract class LogGeneratorBase extends PluginBase implements LogGeneratorInterf
   /**
    * The subscription storage.
    *
-   * @var \Drupal\entity_activity\SubscriptionStorageInterface
+   * @var SubscriptionStorageInterface
    */
   protected $subscriptionStorage;
 
   /**
    * The log storage.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;
 
   /**
    * The taxonomy term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;
 
@@ -173,37 +178,37 @@ abstract class LogGeneratorBase extends PluginBase implements LogGeneratorInterf
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    * @param \Drupal\Token\TokenEntityMapperInterface $token_entity_mapper
    *   The token entity mapper.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   The serializer service.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The global entity activity manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, DateFormatterInterface $date_formatter, Token $token, ModuleHandlerInterface $module_handler, EntityRepositoryInterface $entity_repository, EntityFieldManagerInterface $entity_field_manager, TokenEntityMapperInterface $token_entity_mapper, EntityTypeBundleInfoInterface $entity_type_bundle_info, AccountProxyInterface $current_user, LanguageManagerInterface $language_manager, ConfigFactoryInterface $config_factory, TimeInterface $time, SerializerInterface $serializer, EntityActivityManagerInterface $entity_activity_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -689,7 +694,7 @@ abstract class LogGeneratorBase extends PluginBase implements LogGeneratorInterf
   /**
    * Get the class name of the entity to use it with the serializer service.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    *
    * @return string
@@ -770,7 +775,7 @@ abstract class LogGeneratorBase extends PluginBase implements LogGeneratorInterf
     }
 
     $use_user_preferred_language = $this->configFactory->get('entity_activity.settings')->get('language.user');
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $source_entity */
+    /** @var ContentEntityInterface $source_entity */
     $source_entity = $this->entityTypeManager->getStorage($source_entity_type)->load($source_entity_id);
     // The source entity has been deleted. Load it from the serialized entity stored in the settings.
     // @TODO use always this entity serialized instead of reloading the source entity.
@@ -806,7 +811,7 @@ abstract class LogGeneratorBase extends PluginBase implements LogGeneratorInterf
             $language = $this->languageManager->getLanguage($user_langcode);
             $original_language = $this->languageManager->getConfigOverrideLanguage();
             $this->languageManager->setConfigOverrideLanguage($language);
-            /** @var \Drupal\entity_activity\Entity\GeneratorInterface $generator */
+            /** @var GeneratorInterface $generator */
             $generator = $this->entityTypeManager->getStorage('entity_activity_generator')->load($generator_id);
             $this->languageManager->setConfigOverrideLanguage($original_language);
 
diff --git a/src/Plugin/LogGeneratorInterface.php b/src/Plugin/LogGeneratorInterface.php
index f7dbf63..589b230 100644
--- a/src/Plugin/LogGeneratorInterface.php
+++ b/src/Plugin/LogGeneratorInterface.php
@@ -19,7 +19,7 @@ interface LogGeneratorInterface extends ConfigurableInterface, DependentPluginIn
    *
    * @param array $form
    *   The configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state object.
    *
    * @return mixed
@@ -32,7 +32,7 @@ interface LogGeneratorInterface extends ConfigurableInterface, DependentPluginIn
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function validateConfigurationForm(array $form, FormStateInterface $form_state);
@@ -157,7 +157,7 @@ interface LogGeneratorInterface extends ConfigurableInterface, DependentPluginIn
   /**
    * Gets the source entity on which users have subscribed on.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The current entity on which the generator applies.
    *
    * @return array
@@ -181,11 +181,11 @@ interface LogGeneratorInterface extends ConfigurableInterface, DependentPluginIn
    *
    * Useful to generate log from a queue / cron and not immediately.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    * @param string $generator_id
    *   The generator ID from which the plugin has been instantiated.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user who perform the action.
    *
    * @return array
@@ -215,7 +215,7 @@ interface LogGeneratorInterface extends ConfigurableInterface, DependentPluginIn
   /**
    * Get the log with token replaced.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity.
    *
    * @return array
@@ -226,7 +226,7 @@ interface LogGeneratorInterface extends ConfigurableInterface, DependentPluginIn
   /**
    * Rewrite the final log message with a new based language log message.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The source entity.
    * @param array $log_message
    *   The log message array in the new language.
diff --git a/src/Plugin/LogGeneratorManager.php b/src/Plugin/LogGeneratorManager.php
index 7c3a9f2..eeede59 100644
--- a/src/Plugin/LogGeneratorManager.php
+++ b/src/Plugin/LogGeneratorManager.php
@@ -17,9 +17,9 @@ class LogGeneratorManager extends DefaultPluginManager implements LogGeneratorMa
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/QueueWorker/LogGeneratorWorker.php b/src/Plugin/QueueWorker/LogGeneratorWorker.php
index b0018cf..cb7e0be 100644
--- a/src/Plugin/QueueWorker/LogGeneratorWorker.php
+++ b/src/Plugin/QueueWorker/LogGeneratorWorker.php
@@ -22,7 +22,7 @@ class LogGeneratorWorker extends QueueWorkerBase implements ContainerFactoryPlug
   /**
    * The log generator manager.
    *
-   * @var \Drupal\entity_activity\Plugin\LogGeneratorManagerInterface
+   * @var LogGeneratorManagerInterface
    */
   protected $logManager;
 
@@ -35,7 +35,7 @@ class LogGeneratorWorker extends QueueWorkerBase implements ContainerFactoryPlug
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\entity_activity\Plugin\LogGeneratorManagerInterface $log_manager
+   * @param LogGeneratorManagerInterface $log_manager
    *   The log generator manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LogGeneratorManagerInterface $log_manager) {
diff --git a/src/Plugin/QueueWorker/PurgeLogWorker.php b/src/Plugin/QueueWorker/PurgeLogWorker.php
index 2b74cb8..d42adca 100644
--- a/src/Plugin/QueueWorker/PurgeLogWorker.php
+++ b/src/Plugin/QueueWorker/PurgeLogWorker.php
@@ -22,7 +22,7 @@ class PurgeLogWorker extends QueueWorkerBase implements ContainerFactoryPluginIn
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -35,7 +35,7 @@ class PurgeLogWorker extends QueueWorkerBase implements ContainerFactoryPluginIn
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/views/area/LogReadAll.php b/src/Plugin/views/area/LogReadAll.php
index 9509999..2c660ae 100644
--- a/src/Plugin/views/area/LogReadAll.php
+++ b/src/Plugin/views/area/LogReadAll.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity\Plugin\views\area;
 
+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -22,7 +23,7 @@ class LogReadAll extends AreaPluginBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -35,7 +36,7 @@ class LogReadAll extends AreaPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ -87,7 +88,7 @@ class LogReadAll extends AreaPluginBase {
     // Display the button only on views with a %user argument.
     $user = NULL;
     $arguments = $this->view->argument;
-    /** @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $argument */
+    /** @var ArgumentPluginBase $argument */
     foreach ($arguments as $plugin_id => $argument) {
       $real_Field = $argument->realField;
       $entity_type = $argument->getEntityType();
diff --git a/src/Plugin/views/area/LogTotalUnread.php b/src/Plugin/views/area/LogTotalUnread.php
index 7154637..4677d3d 100644
--- a/src/Plugin/views/area/LogTotalUnread.php
+++ b/src/Plugin/views/area/LogTotalUnread.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\entity_activity\Plugin\views\area;
 
+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -21,14 +25,14 @@ class LogTotalUnread extends AreaPluginBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Log storage.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;
 
@@ -41,11 +45,11 @@ class LogTotalUnread extends AreaPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -105,7 +109,7 @@ class LogTotalUnread extends AreaPluginBase {
     // Display the button only on views with a %user argument.
     $user = NULL;
     $arguments = $this->view->argument;
-    /** @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $argument */
+    /** @var ArgumentPluginBase $argument */
     foreach ($arguments as $plugin_id => $argument) {
       $real_Field = $argument->realField;
       $entity_type = $argument->getEntityType();
diff --git a/src/Routing/EntityActivityRoutes.php b/src/Routing/EntityActivityRoutes.php
index 2fcd286..ddf6797 100644
--- a/src/Routing/EntityActivityRoutes.php
+++ b/src/Routing/EntityActivityRoutes.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity\Routing;
 
+use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -28,21 +29,21 @@ class EntityActivityRoutes implements ContainerInjectionInterface {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Drupal\entity_activity\EntityActivityManagerInterface definition.
    *
-   * @var \Drupal\entity_activity\EntityActivityManagerInterface
+   * @var EntityActivityManagerInterface
    */
   protected $entityActivityManager;
 
@@ -56,20 +57,20 @@ class EntityActivityRoutes implements ContainerInjectionInterface {
   /**
    * An array of ContentEntityType supported by entity_activity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityTypeInterface[]
+   * @var ContentEntityTypeInterface[]
    */
   protected $supportedContentEntityTypes;
 
   /**
    * EntityActivityRoutes Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\entity_activity\EntityActivityManagerInterface $entity_activity_manager
+   * @param EntityActivityManagerInterface $entity_activity_manager
    *   The entity activity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ConfigFactoryInterface $config_factory, EntityActivityManagerInterface $entity_activity_manager) {
@@ -114,10 +115,10 @@ class EntityActivityRoutes implements ContainerInjectionInterface {
   /**
    * Gets the list subscribers route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getListSubscribersRoute(EntityTypeInterface $entity_type) {
@@ -147,7 +148,7 @@ class EntityActivityRoutes implements ContainerInjectionInterface {
   /**
    * Gets the type of the ID key for a given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   An entity type.
    *
    * @return string|null
diff --git a/src/SubscriptionAccessControlHandler.php b/src/SubscriptionAccessControlHandler.php
index 2135a8a..832ff04 100644
--- a/src/SubscriptionAccessControlHandler.php
+++ b/src/SubscriptionAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity;
 
+use Drupal\entity_activity\Entity\SubscriptionInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -22,7 +23,7 @@ class SubscriptionAccessControlHandler extends EntityAccessControlHandler {
       return AccessResult::allowed()->cachePerPermissions();
     }
 
-    /** @var \Drupal\entity_activity\Entity\SubscriptionInterface $entity */
+    /** @var SubscriptionInterface $entity */
     $owner = $entity->getOwner();
     if (!$owner) {
       // The log is malformed.
diff --git a/src/SubscriptionHtmlRouteProvider.php b/src/SubscriptionHtmlRouteProvider.php
index 78975fe..3ba638c 100644
--- a/src/SubscriptionHtmlRouteProvider.php
+++ b/src/SubscriptionHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class SubscriptionHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/SubscriptionListBuilder.php b/src/SubscriptionListBuilder.php
index 0517a86..d0434a3 100644
--- a/src/SubscriptionListBuilder.php
+++ b/src/SubscriptionListBuilder.php
@@ -20,18 +20,18 @@ class SubscriptionListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new NodeListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter) {
diff --git a/src/SubscriptionStorageInterface.php b/src/SubscriptionStorageInterface.php
index afd3c0b..cb9dfc9 100644
--- a/src/SubscriptionStorageInterface.php
+++ b/src/SubscriptionStorageInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_activity;
 
+use Drupal\entity_activity\Entity\SubscriptionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -14,16 +15,16 @@ interface SubscriptionStorageInterface extends ContentEntityStorageInterface {
   /**
    * Generates a subscription.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $source
+   * @param ContentEntityInterface $source
    *   The source entity.
-   * @param \Drupal\Core\Session\AccountInterface $owner
+   * @param AccountInterface $owner
    *   The current user account owner of the subscription.
    * @param string $langcode
    *   The langcode.
    * @param array $parameters
    *   An array of additional parameters for the log.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @return SubscriptionInterface
    *   The subscription entity, unsaved.
    */
   public function generate(ContentEntityInterface $source, AccountInterface $owner = NULL, $langcode = NULL, array $parameters = []);
@@ -31,10 +32,10 @@ interface SubscriptionStorageInterface extends ContentEntityStorageInterface {
   /**
    * Loads all subscriptions for a source entity for any langcode.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface[]
+   * @return SubscriptionInterface[]
    *   The subscriptions.
    */
   public function loadMultipleByEntityAnyLangcode(ContentEntityInterface $entity);
@@ -42,12 +43,12 @@ interface SubscriptionStorageInterface extends ContentEntityStorageInterface {
   /**
    * Loads all subscriptions for a source entity and a langcode.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $langcode
    *   The langcode.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface[]
+   * @return SubscriptionInterface[]
    *   The subscriptions.
    */
   public function loadMultipleByEntity(ContentEntityInterface $entity, $langcode);
@@ -62,7 +63,7 @@ interface SubscriptionStorageInterface extends ContentEntityStorageInterface {
    * @param string $langcode
    *   The langcode.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface[]
+   * @return SubscriptionInterface[]
    *   The subscriptions.
    */
   public function loadMultipleByEntityTypeId($entity_type_id, $entity_id, $langcode);
@@ -70,10 +71,10 @@ interface SubscriptionStorageInterface extends ContentEntityStorageInterface {
   /**
    * Loads all subscriptions for a given owner.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface[]
+   * @return SubscriptionInterface[]
    *   The subscriptions.
    */
   public function loadMultipleByOwner(AccountInterface $account);
@@ -81,14 +82,14 @@ interface SubscriptionStorageInterface extends ContentEntityStorageInterface {
   /**
    * Loads all subscriptions for a source entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    * @param string $langcode
    *   The langcode.
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface[]
+   * @return SubscriptionInterface[]
    *   The subscriptions.
    */
   public function loadMultipleByEntityAndOwner(ContentEntityInterface $entity, AccountInterface $account, $langcode);
diff --git a/tests/src/Functional/EntityActivityBrowserTest.php b/tests/src/Functional/EntityActivityBrowserTest.php
index 52f58d7..4c6d217 100644
--- a/tests/src/Functional/EntityActivityBrowserTest.php
+++ b/tests/src/Functional/EntityActivityBrowserTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\entity_activity\Functional;
 
+use Drupal\entity_activity\Entity\SubscriptionInterface;
+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\node\Entity\Node;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 
@@ -17,21 +22,21 @@ class EntityActivityBrowserTest extends EntityActivityBrowserTestBase {
   /**
    * A subscription.
    *
-   * @var \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription1;
 
   /**
    * A subscription.
    *
-   * @var \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription2;
 
   /**
    * A subscription.
    *
-   * @var \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription3;
 
@@ -43,7 +48,7 @@ class EntityActivityBrowserTest extends EntityActivityBrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->subscription1 = $this->createSubscription($this->user1, $this->term1);
     $this->subscription2 = $this->createSubscription($this->user1, $this->user2);
@@ -53,16 +58,19 @@ class EntityActivityBrowserTest extends EntityActivityBrowserTestBase {
   /**
    * Test permissions's module.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
+   * @throws EntityMalformedException
    */
   public function testPermissions() {
     $this->drupalLogin($this->advancedUser);
     $this->drupalGet($this->article1->toUrl());
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->buttonExists('Subscribe');
-    $this->assertText('Subscribe');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Subscribe');
 
     $this->drupalGet('user/' . $this->user1->id() . '/subscriptions');
     $this->assertSession()->statusCodeEquals(200);
@@ -95,28 +103,37 @@ class EntityActivityBrowserTest extends EntityActivityBrowserTestBase {
   /**
    * Test List Subscribers access.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
+   * @throws EntityMalformedException
    */
   public function testListSubscribers() {
 
     $this->drupalLogin($this->advancedUser);
     $this->drupalGet('taxonomy/term/' . $this->term1->id() . '/list-subscribers');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText($this->user1->getDisplayName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->user1->getDisplayName());
 
     $this->drupalLogout();
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('taxonomy/term/' . $this->term1->id() . '/list-subscribers');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText($this->user1->getDisplayName());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->user1->getDisplayName());
 
     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet($this->term1->toUrl());
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertNoText('Subscribers');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Subscribers');
     $this->drupalGet('taxonomy/term/' . $this->term1->id() . '/list-subscribers');
     $this->assertSession()->statusCodeEquals(403);
   }
@@ -124,14 +141,14 @@ class EntityActivityBrowserTest extends EntityActivityBrowserTestBase {
   /**
    * Test generation of logs from a reference field and with(out) a cron.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testGenerationLogsByReference() {
     // User 1 has a subscription on User 2 and on Term 1.
     $subscriptions = $this->subscriptionStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($subscriptions));
+    $this->assertEquals(2, count($subscriptions));
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));
 
     $this->drupalLogin($this->user2);
     $new_article = Node::create([
@@ -145,12 +162,15 @@ class EntityActivityBrowserTest extends EntityActivityBrowserTestBase {
     $new_article->save();
 
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));
 
     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet('user/' . $this->user1->id() . '/logs');
-    $this->assertText('The content New Article has been created by ' . $this->user2->getDisplayName() . '. Log with the generator test_insert.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The content New Article has been created by ' . $this->user2->getDisplayName() . '. Log with the generator test_insert.');
 
     $this->drupalLogout();
     $this->drupalLogin($this->user2);
@@ -158,24 +178,30 @@ class EntityActivityBrowserTest extends EntityActivityBrowserTestBase {
 
     // $this->logStorage->resetCache();
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(2, count($logs));
+    $this->assertEquals(2, count($logs));
 
     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet('user/' . $this->user1->id() . '/logs');
-    $this->assertText('The content Article 1 has been updated by ' . $this->user2->getDisplayName() . '. Log with the generator test_update_term.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The content Article 1 has been updated by ' . $this->user2->getDisplayName() . '. Log with the generator test_update_term.');
 
     $this->drupalLogout();
     $this->drupalLogin($this->user2);
     $new_article->delete();
 
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(3, count($logs));
+    $this->assertEquals(3, count($logs));
 
     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet('user/' . $this->user1->id() . '/logs');
-    $this->assertText('The content New Article has been deleted by ' . $this->user2->getDisplayName() . '. Log with the generator test_delete.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The content New Article has been deleted by ' . $this->user2->getDisplayName() . '. Log with the generator test_delete.');
 
     $config = \Drupal::configFactory()->getEditable('entity_activity.generator.test_insert');
     $config->set('generators.node.use_cron', TRUE);
@@ -194,18 +220,21 @@ class EntityActivityBrowserTest extends EntityActivityBrowserTestBase {
     $another_article->save();
 
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(3, count($logs));
+    $this->assertEquals(3, count($logs));
     $this->assertEquals(1, \Drupal::queue('entity_activity_log_generator_worker')->numberOfItems());
     $this->container->get('cron')->run();
 
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(4, count($logs));
+    $this->assertEquals(4, count($logs));
     $this->assertEquals(0, \Drupal::queue('entity_activity_log_generator_worker')->numberOfItems());
 
     $this->drupalLogout();
     $this->drupalLogin($this->user1);
     $this->drupalGet('user/' . $this->user1->id() . '/logs');
-    $this->assertText('The content Another Article has been created by ' . $this->user2->getDisplayName() . '. Log with the generator test_insert.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The content Another Article has been created by ' . $this->user2->getDisplayName() . '. Log with the generator test_insert.');
     $this->drupalLogout();
 
     // Delete user 1.
@@ -222,8 +251,12 @@ class EntityActivityBrowserTest extends EntityActivityBrowserTestBase {
     $edit = [];
     $edit[$title_key] = 'Another Article';
     $edit[$body_key] = 'The body of the another article';
-    $this->drupalPostForm('node/add/article', $edit, $this->t('Save'));
-    $this->assertText('Another Article');
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, $this->t('Save'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Another Article');
     $this->assertSession()->statusCodeEquals(200);
 
     // Check that the node exists in the database.
@@ -261,14 +294,14 @@ class EntityActivityBrowserTest extends EntityActivityBrowserTestBase {
     }
 
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(5, count($logs));
+    $this->assertEquals(5, count($logs));
     $time = $this->container->get('datetime.time');
     $tree_day_ago = $time->getRequestTime() - (86400 * 3);
     $log = reset($logs);
     $log->set('created', $tree_day_ago)->save();
     $this->container->get('cron')->run();
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(4, count($logs));
+    $this->assertEquals(4, count($logs));
 
     $purge = [
       'method' => 'time',
@@ -284,11 +317,11 @@ class EntityActivityBrowserTest extends EntityActivityBrowserTestBase {
     $log->set('created', $tree_day_ago)->save();
     $this->container->get('cron')->run();
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(4, count($logs));
+    $this->assertEquals(4, count($logs));
     $log->set('read', TRUE)->save();
     $this->container->get('cron')->run();
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(3, count($logs));
+    $this->assertEquals(3, count($logs));
   }
 
 }
diff --git a/tests/src/Functional/EntityActivityBrowserTestBase.php b/tests/src/Functional/EntityActivityBrowserTestBase.php
index 411c5d0..1710792 100644
--- a/tests/src/Functional/EntityActivityBrowserTestBase.php
+++ b/tests/src/Functional/EntityActivityBrowserTestBase.php
@@ -2,6 +2,19 @@
 
 namespace Drupal\Tests\entity_activity\Functional;
 
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\entity_activity\SubscriptionStorageInterface;
+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\entity_activity\Entity\SubscriptionInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Queue\QueueFactory;
+use Drupal\Core\Queue\QueueWorkerManagerInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ -56,91 +69,91 @@ abstract class EntityActivityBrowserTestBase extends BrowserTestBase {
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * A test user with advanced privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $advancedUser;
 
   /**
    * A test user with normal privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user1;
 
   /**
    * A test user with normal privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user2;
 
   /**
    * The vocabulary used for creating terms.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;
 
   /**
    * Stores the first term used in the different tests.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term1;
 
   /**
    * Stores the second term used in the different tests.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term2;
 
   /**
    * Store the first article.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $article1;
 
   /**
    * Store the second article.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $article2;
 
   /**
    * Store the first page.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $page1;
 
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\entity_activity\SubscriptionStorageInterface definition.
    *
-   * @var \Drupal\entity_activity\SubscriptionStorageInterface
+   * @var SubscriptionStorageInterface
    */
   protected $subscriptionStorage;
 
   /**
    * Drupal\entity_activity\LogStorageInterface definition.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;
 
@@ -154,7 +167,7 @@ abstract class EntityActivityBrowserTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');
     $this->subscriptionStorage = $this->entityTypeManager->getStorage('entity_activity_subscription');
@@ -329,9 +342,9 @@ abstract class EntityActivityBrowserTestBase extends BrowserTestBase {
   /**
    * Install and set component for view display subscription and log entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function installEntityViewDisplayMode() {
     $view_display = $this->entityTypeManager
@@ -386,12 +399,12 @@ abstract class EntityActivityBrowserTestBase extends BrowserTestBase {
   /**
    * Create a subscription.
    *
-   * @param \Drupal\user\UserInterface $user
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param UserInterface $user
+   * @param ContentEntityInterface $entity
    *
-   * @return \Drupal\entity_activity\Entity\SubscriptionInterface
+   * @return SubscriptionInterface
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createSubscription(UserInterface $user, ContentEntityInterface $entity) {
     $values = [
@@ -401,7 +414,7 @@ abstract class EntityActivityBrowserTestBase extends BrowserTestBase {
       'source_entity_id' => $entity->id(),
       'langcode' => $this->langcode,
     ];
-    /** @var \Drupal\entity_activity\Entity\SubscriptionInterface $subscription */
+    /** @var SubscriptionInterface $subscription */
     $subscription = $this->subscriptionStorage->create($values);
     $subscription->save();
     return $subscription;
@@ -413,13 +426,13 @@ abstract class EntityActivityBrowserTestBase extends BrowserTestBase {
    * @param string $queue_name
    *   The queue name.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function processQueue($queue_name) {
     // Grab the defined cron queues.
-    /** @var \Drupal\Core\Queue\QueueFactory $queue_factory */
+    /** @var QueueFactory $queue_factory */
     $queue_factory = \Drupal::service('queue');
-    /** @var \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_manager */
+    /** @var QueueWorkerManagerInterface $queue_manager */
     $queue_manager = \Drupal::service('plugin.manager.queue_worker');
     $queues = $queue_manager->getDefinitions();
     if (!isset($queues[$queue_name])) {
diff --git a/tests/src/FunctionalJavascript/EntityActivityWebDriverTest.php b/tests/src/FunctionalJavascript/EntityActivityWebDriverTest.php
index 962ec4d..ec24db5 100644
--- a/tests/src/FunctionalJavascript/EntityActivityWebDriverTest.php
+++ b/tests/src/FunctionalJavascript/EntityActivityWebDriverTest.php
@@ -17,7 +17,7 @@ class EntityActivityWebDriverTest extends EntityActivityWebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->advancedUser);
   }
@@ -53,7 +53,7 @@ class EntityActivityWebDriverTest extends EntityActivityWebDriverTestBase {
     $this->article1->set('body', 'This is the value of Article 1 body')->save();
 
     $logs = $this->logStorage->loadMultipleUnreadByOwner($this->advancedUser);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));
 
     $this->drupalGet('user/' . $this->advancedUser->id() . '/logs');
     $this->waitForAjaxToFinish();
@@ -68,10 +68,10 @@ class EntityActivityWebDriverTest extends EntityActivityWebDriverTestBase {
     $this->waitForAjaxToFinish();
 
     $logs = $this->logStorage->loadMultipleUnreadByOwner($this->advancedUser);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));
 
     $logs = $this->logStorage->loadMultipleByOwner($this->advancedUser);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));
 
     $page->pressButton('Remove');
     $this->waitForAjaxToFinish();
@@ -79,7 +79,7 @@ class EntityActivityWebDriverTest extends EntityActivityWebDriverTestBase {
     $page = $this->getSession()->getPage();
     $this->assertNotTrue($page->hasContent('The content Article 1 has been updated'));
     $logs = $this->logStorage->loadMultipleByOwner($this->advancedUser);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));
 
     // Check subscriptions page and Remove button.
     $this->drupalGet('user/' . $this->advancedUser->id() . '/subscriptions');
@@ -127,7 +127,7 @@ class EntityActivityWebDriverTest extends EntityActivityWebDriverTestBase {
     $this->article1->set('body', 'This is the value of Article 1 body')->save();
 
     $logs = $this->logStorage->loadMultipleUnreadByOwner($this->user1);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));
 
     $this->drupalGet('user/' . $this->user1->id() . '/logs');
     $this->waitForAjaxToFinish();
@@ -142,10 +142,10 @@ class EntityActivityWebDriverTest extends EntityActivityWebDriverTestBase {
     $this->waitForAjaxToFinish();
 
     $logs = $this->logStorage->loadMultipleUnreadByOwner($this->user1);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));
 
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(1, count($logs));
+    $this->assertEquals(1, count($logs));
 
     $page->pressButton('Remove');
     $this->waitForAjaxToFinish();
@@ -153,7 +153,7 @@ class EntityActivityWebDriverTest extends EntityActivityWebDriverTestBase {
     $page = $this->getSession()->getPage();
     $this->assertNotTrue($page->hasContent('The content Article 1 has been updated'));
     $logs = $this->logStorage->loadMultipleByOwner($this->user1);
-    $this->assertEqual(0, count($logs));
+    $this->assertEquals(0, count($logs));
 
     // Check subscriptions page and Remove button.
     $this->drupalGet('user/' . $this->user1->id() . '/subscriptions');
diff --git a/tests/src/FunctionalJavascript/EntityActivityWebDriverTestBase.php b/tests/src/FunctionalJavascript/EntityActivityWebDriverTestBase.php
index 9f564ac..f7de9ca 100644
--- a/tests/src/FunctionalJavascript/EntityActivityWebDriverTestBase.php
+++ b/tests/src/FunctionalJavascript/EntityActivityWebDriverTestBase.php
@@ -2,6 +2,16 @@
 
 namespace Drupal\Tests\entity_activity\FunctionalJavascript;
 
+use Drupal\user\UserInterface;
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\entity_activity\SubscriptionStorageInterface;
+use Drupal\entity_activity\LogStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ -49,98 +59,98 @@ abstract class EntityActivityWebDriverTestBase extends WebDriverTestBase {
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * A test user with advanced privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $advancedUser;
 
   /**
    * A test user with normal privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user1;
 
   /**
    * A test user with normal privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user2;
 
   /**
    * The vocabulary used for creating terms.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;
 
   /**
    * Stores the first term used in the different tests.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term1;
 
   /**
    * Stores the second term used in the different tests.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term2;
 
   /**
    * Store the first article.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $article1;
 
   /**
    * Store the second article.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $article2;
 
   /**
    * Store the first page.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $page1;
 
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\entity_activity\SubscriptionStorageInterface definition.
    *
-   * @var \Drupal\entity_activity\SubscriptionStorageInterface
+   * @var SubscriptionStorageInterface
    */
   protected $subscriptionStorage;
 
   /**
    * Drupal\entity_activity\LogStorageInterface definition.
    *
-   * @var \Drupal\entity_activity\LogStorageInterface
+   * @var LogStorageInterface
    */
   protected $logStorage;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');
     $this->subscriptionStorage = $this->entityTypeManager->getStorage('entity_activity_subscription');
@@ -313,9 +323,9 @@ abstract class EntityActivityWebDriverTestBase extends WebDriverTestBase {
   /**
    * Install and set component for view display subscription and log entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function installEntityViewDisplayMode() {
     $view_display = $this->entityTypeManager
@@ -358,7 +368,7 @@ abstract class EntityActivityWebDriverTestBase extends WebDriverTestBase {
         ->create($values)
         ->save();
     }
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_display */
+    /** @var EntityViewDisplayInterface $view_display */
     $view_display = $this->entityTypeManager
       ->getStorage('entity_view_display')
       ->load("entity_activity_log.entity_activity_log.default");
