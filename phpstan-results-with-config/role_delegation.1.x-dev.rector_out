modules/contrib/role_delegation/role_delegation.module
modules/contrib/role_delegation/src/Access/RoleDelegationAccessCheck.php
modules/contrib/role_delegation/src/DelegatableRoles.php
modules/contrib/role_delegation/src/DelegatableRolesInterface.php
modules/contrib/role_delegation/src/Form/RoleDelegationSettingsForm.php
modules/contrib/role_delegation/src/PermissionGenerator.php
modules/contrib/role_delegation/src/Plugin/EntityReferenceSelection/RoleChangeSelection.php
modules/contrib/role_delegation/src/Plugin/views/field/RoleDelegationUserBulkForm.php
modules/contrib/role_delegation/tests/src/Functional/RoleAssignTest.php
modules/contrib/role_delegation/tests/src/Functional/Views/RoleDelegationBulkOperationsTest.php
modules/contrib/role_delegation/tests/src/Kernel/AccessTest.php
modules/contrib/role_delegation/tests/src/Kernel/DelegatableRolesTest.php

8 files with changes
====================

1) modules/contrib/role_delegation/tests/src/Kernel/DelegatableRolesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\role_delegation\Kernel;

+use Drupal\role_delegation\DelegatableRolesInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
 use Drupal\user\Entity\Role;
@@ @@
   /**
    * The Role Delegation service.
    *
-   * @var \Drupal\role_delegation\DelegatableRolesInterface
+   * @var DelegatableRolesInterface
    */
   protected $delegatableRoles;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/role_delegation/tests/src/Kernel/AccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\role_delegation\Kernel;

+use Drupal\role_delegation\Access\RoleDelegationAccessCheck;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;

@@ @@
   /**
    * The Role Delegation access checker.
    *
-   * @var \Drupal\role_delegation\Access\RoleDelegationAccessCheck
+   * @var RoleDelegationAccessCheck
    */
   protected $accessChecker;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/role_delegation/src/Plugin/views/field/RoleDelegationUserBulkForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\role_delegation\Plugin\views\field;

+use Drupal\system\ActionConfigEntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
   /**
    * The currently logged in user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@

     $entity_type = $this->getEntityType();
     // Filter the actions to only include those for this entity type.
-    /** @var \Drupal\system\ActionConfigEntityInterface[] $actions */
+    /** @var ActionConfigEntityInterface[] $actions */
     $actions = $this->actionStorage->loadMultiple();
     $this->actions = array_filter($actions, function ($action) use ($entity_type) {
       $plugin_definition = $action->getPluginDefinition();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/role_delegation/src/PermissionGenerator.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The delegatable role service for getting all the roles.
    *
-   * @var \Drupal\role_delegation\DelegatableRolesInterface
+   * @var DelegatableRolesInterface
    */
   protected $delegatableRoles;

@@ @@
   /**
    * Construct a new permission generator.
    *
-   * @param \Drupal\role_delegation\DelegatableRolesInterface $delegatable_roles
+   * @param DelegatableRolesInterface $delegatable_roles
    *   The delegatable roles service.
    */
   public function __construct(DelegatableRolesInterface $delegatable_roles) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/role_delegation/src/Form/RoleDelegationSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\role_delegation\Form;

+use Drupal\user\UserInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The current user viewing the form.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The role delegation service.
    *
-   * @var \Drupal\role_delegation\DelegatableRolesInterface
+   * @var DelegatableRolesInterface
    */
   protected $delegatableRoles;

@@ @@
   /**
    * The roles page setting form.
    *
-   * @param \Drupal\role_delegation\DelegatableRolesInterface $delegatable_roles
+   * @param DelegatableRolesInterface $delegatable_roles
    *   The role delegation service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user viewing the form.
    */
   public function __construct(DelegatableRolesInterface $delegatable_roles, AccountInterface $current_user) {
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state): void {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = $form_state->getBuildInfo()['args'][0];

     // Make sure this functionality works when single_user_role is enabled.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/role_delegation/src/DelegatableRolesInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\role_delegation;

+use Drupal\user\RoleInterface;
 use Drupal\Core\Session\AccountInterface;

 /**
@@ @@
   /**
    * Gets the roles a user is allowed to assing.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account for which you want to know which roles they can assign.
    *
    * @return array
@@ @@
   /**
    * Gets all roles apart from anonymous and authenticated.
    *
-   * @return \Drupal\user\RoleInterface[]
+   * @return RoleInterface[]
    *   An array of role objects.
    */
   public function getAllRoles(): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/role_delegation/src/Access/RoleDelegationAccessCheck.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The permission generator service.
    *
-   * @var \Drupal\role_delegation\PermissionGenerator
+   * @var PermissionGenerator
    */
   protected $permissionGenerator;

@@ @@
   /**
    * The Role Delegation access check.
    *
-   * @param \Drupal\role_delegation\PermissionGenerator $permission_generator
+   * @param PermissionGenerator $permission_generator
    *   The role delegation service.
    */
   public function __construct(PermissionGenerator $permission_generator) {
@@ @@
   /**
    * Custom access check for the /user/%/roles page.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account): AccessResultInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/role_delegation/role_delegation.module:51

    ---------- begin diff ----------
@@ @@
     ->accessCheck(FALSE)
     ->execute();

-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   foreach (Role::loadMultiple($roles) as $role) {
     $role->revokePermission($permission);
     $role->save();
@@ @@
  * Implements hook_field_widget_single_element_form_alter().
  */
 function role_delegation_field_widget_single_element_form_alter(array &$element, FormStateInterface $form_state, array $context) {
-  /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+  /** @var FieldItemListInterface $items */
   $items = $context['items'];
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+  /** @var FieldDefinitionInterface $field_definition */
   $field_definition = $items->getFieldDefinition();

   // Since the field is computed, the default value of the form element will be
@@ @@
  * Implements hook_options_list_alter().
  */
 function role_delegation_options_list_alter(array &$options, array $context) {
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+  /** @var FieldDefinitionInterface $field_definition */
   $field_definition = $context['fieldDefinition'];

   // By default, ALL the entities for a given type will be used for the options
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

