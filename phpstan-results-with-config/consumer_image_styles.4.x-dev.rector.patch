diff --git a/src/ImageStylesProvider.php b/src/ImageStylesProvider.php
index e9e01d5..071a645 100644
--- a/src/ImageStylesProvider.php
+++ b/src/ImageStylesProvider.php
@@ -29,32 +29,32 @@ class ImageStylesProvider implements ImageStylesProviderInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   private $imageFactory;
 
   /**
    * Stream Wrapper Manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   private StreamWrapperManagerInterface $streamWrapperManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   Image factory.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   Stream wrapper manager.
    */
   public function __construct(
@@ -103,7 +103,7 @@ class ImageStylesProvider implements ImageStylesProviderInterface {
     }
     $cacheable_metadata->addCacheableDependency($image_style);
     $info = [
-      'href' => file_create_url($image_style->buildUrl($uri)),
+      'href' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_style->buildUrl($uri)),
       'title' => $this->t('Image Style: @name', ['@name' => $image_style->label()]),
       'meta' => ['rel' => static::DERIVATIVE_LINK_REL],
       // This is json:api 1.1 compatible.
diff --git a/src/ImageStylesProviderInterface.php b/src/ImageStylesProviderInterface.php
index 4078587..97e8770 100644
--- a/src/ImageStylesProviderInterface.php
+++ b/src/ImageStylesProviderInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\consumer_image_styles;
 
+use Drupal\image\Entity\ImageStyle;
 use Drupal\consumers\Entity\Consumer;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\EntityInterface;
@@ -15,10 +16,10 @@ interface ImageStylesProviderInterface {
   /**
    * Load the image styles for a given consumer.
    *
-   * @param \Drupal\consumers\Entity\Consumer $consumer
+   * @param Consumer $consumer
    *   Consumer entity to load image styles for.
    *
-   * @return \Drupal\image\Entity\ImageStyle[]
+   * @return ImageStyle[]
    *   List of image styles keyed by image style id.
    */
   public function loadStyles(Consumer $consumer);
@@ -28,9 +29,9 @@ interface ImageStylesProviderInterface {
    *
    * @param string $uri
    *   The file URI.
-   * @param \Drupal\image\ImageStyleInterface $image_style
+   * @param ImageStyleInterface $image_style
    *   The image style to apply.
-   * @param \Drupal\Core\Cache\CacheableMetadata $cacheable_metadata
+   * @param CacheableMetadata $cacheable_metadata
    *   Cacheable metadata for the normalization.
    *
    * @return array
@@ -43,7 +44,7 @@ interface ImageStylesProviderInterface {
   /**
    * Checks if an entity is an image.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return bool
diff --git a/src/Normalizer/LinkCollectionNormalizer.php b/src/Normalizer/LinkCollectionNormalizer.php
index 2314d6a..4982f51 100644
--- a/src/Normalizer/LinkCollectionNormalizer.php
+++ b/src/Normalizer/LinkCollectionNormalizer.php
@@ -24,44 +24,44 @@ use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
 class LinkCollectionNormalizer implements NormalizerInterface {
 
   /**
-   * @var \Drupal\consumers\Negotiator
+   * @var Negotiator
    */
   protected $consumerNegotiator;
 
   /**
-   * @var \Drupal\consumer_image_styles\ImageStylesProviderInterface
+   * @var ImageStylesProviderInterface
    */
   protected $imageStylesProvider;
 
   /**
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;
 
   /**
-   * @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface
+   * @var NormalizerInterface
    */
   protected $inner;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Constructs a LinkCollectionNormalizer object.
    *
-   * @param \Symfony\Component\Serializer\Normalizer\NormalizerInterface $inner
+   * @param NormalizerInterface $inner
    *   The decorated service.
-   * @param \Drupal\consumers\Negotiator $consumer_negotiator
+   * @param Negotiator $consumer_negotiator
    *   The consumer negotiator.
    * @param \Drupal\consumer_image_styles\ImageStylesProviderInterface
    *   Image styles utility.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(NormalizerInterface $inner, Negotiator $consumer_negotiator, ImageStylesProviderInterface $imageStylesProvider, ImageFactory $image_factory, RequestStack $request_stack) {
@@ -98,10 +98,10 @@ class LinkCollectionNormalizer implements NormalizerInterface {
   }
 
   /**
-   * @param \Drupal\jsonapi\JsonApiResource\ResourceObject $resource_object
+   * @param ResourceObject $resource_object
    * @param \Drupal\consumers\Entity\Consumer
    *
-   * @return \Drupal\jsonapi\JsonApiResource\LinkCollection
+   * @return LinkCollection
    *   The variant links.
    */
   protected function buildVariantLinks(ResourceObject $resource_object, Consumer $consumer) {
@@ -118,7 +118,7 @@ class LinkCollectionNormalizer implements NormalizerInterface {
       $image_style->transformDimensions($dimensions, $uri);
       $variant_link = new Link(
         CacheableMetadata::createFromObject($image_style),
-        Url::fromUri(file_create_url($image_style->buildUrl($uri))),
+        \Drupal::service('file_url_generator')->generate($image_style->buildUrl($uri)),
         ImageStylesProvider::DERIVATIVE_LINK_REL,
         // Target attributes can only be strings, but dimensions are links.
         array_map(function (?int $dimension): string {
@@ -132,7 +132,7 @@ class LinkCollectionNormalizer implements NormalizerInterface {
   /**
    * Whether this decorator applies to the current data.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\LinkCollection $link_collection
+   * @param LinkCollection $link_collection
    *   The link collection to be normalized.
    *
    * @return bool
@@ -158,7 +158,7 @@ class LinkCollectionNormalizer implements NormalizerInterface {
   /**
    * Gets the current consumer.
    *
-   * @return \Drupal\consumers\Entity\Consumer
+   * @return Consumer
    *   The current consumer or NULL if one cannot be negotiated.
    */
   protected function getConsumer() {
@@ -173,12 +173,12 @@ class LinkCollectionNormalizer implements NormalizerInterface {
   /**
    * Adds the derivative link relation type to the normalized link collection.
    *
-   * @param \Drupal\jsonapi\Normalizer\Value\CacheableNormalization $cacheable_normalization
+   * @param CacheableNormalization $cacheable_normalization
    *   The cacheable normalization to which link relations need to be added.
-   * @param \Drupal\jsonapi\JsonApiResource\LinkCollection $link_collection
+   * @param LinkCollection $link_collection
    *   The un-normalized link collection.
    *
-   * @return \Drupal\jsonapi\Normalizer\Value\CacheableNormalization
+   * @return CacheableNormalization
    *   The links normalization with meta.rel added.
    */
   protected static function addLinkRels(CacheableNormalization $cacheable_normalization, LinkCollection $link_collection) {
diff --git a/src/Plugin/jsonapi/FieldEnhancer/ImageStyles.php b/src/Plugin/jsonapi/FieldEnhancer/ImageStyles.php
index a0b43fb..caaa09b 100644
--- a/src/Plugin/jsonapi/FieldEnhancer/ImageStyles.php
+++ b/src/Plugin/jsonapi/FieldEnhancer/ImageStyles.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\consumer_image_styles\Plugin\jsonapi\FieldEnhancer;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\file\FileInterface;
+use Drupal\file\Entity\File;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\consumer_image_styles\ImageStylesProviderInterface;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -28,12 +31,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class ImageStyles extends ResourceFieldEnhancerBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\consumer_image_styles\ImageStylesProviderInterface
+   * @var ImageStylesProviderInterface
    */
   protected $imageStylesProvider;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -92,21 +95,21 @@ class ImageStyles extends ResourceFieldEnhancerBase implements ContainerFactoryP
     catch (InvalidPluginDefinitionException $e) {
       $image_styles = [];
     }
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $uuid_key = $this->entityTypeManager->getDefinition('file')->getKey('uuid');
     $entities = $this->entityTypeManager
       ->getStorage('file')
       ->loadByProperties([$uuid_key => $data['id']]);
-    /** @var \Drupal\file\FileInterface $entity */
+    /** @var FileInterface $entity */
     $entity = reset($entities);
     // If the entity cannot be loaded or it's not an image, do not enhance it.
     if (!$entity || !$this->imageStylesProvider->entityIsImage($entity)) {
       return $data;
     }
-    /** @var \Drupal\Core\Cache\CacheableMetadata $cacheableMetadata */
+    /** @var CacheableMetadata $cacheableMetadata */
     $cacheableMetadata = $context->offsetGet(CacheableNormalizerInterface::SERIALIZATION_CONTEXT_CACHEABILITY)
       ->merge(CacheableMetadata::createFromObject($entity));
-    /** @var \Drupal\file\Entity\File $entity */
+    /** @var File $entity */
     // If the entity is not viewable.
     $access = $entity->access('view', NULL, TRUE);
     if (!$access->isAllowed()) {
diff --git a/tests/src/Functional/ConsumerImageSylesFunctionalTest.php b/tests/src/Functional/ConsumerImageSylesFunctionalTest.php
index 23d9a43..b2ee50d 100644
--- a/tests/src/Functional/ConsumerImageSylesFunctionalTest.php
+++ b/tests/src/Functional/ConsumerImageSylesFunctionalTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\consumer_image_styles\Functional;
 
+use Drupal\user\Entity\User;
+use Drupal\node\Entity\NodeType;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\consumer_image_styles\ImageStylesProvider;
@@ -41,7 +45,7 @@ class ConsumerImageSylesFunctionalTest extends BrowserTestBase {
   protected $defaultTheme = 'stark';
 
   /**
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;
 
@@ -55,22 +59,22 @@ class ConsumerImageSylesFunctionalTest extends BrowserTestBase {
   /**
    * The content type to attach the fields to test.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $contentType;
 
   /**
-   * @var \Drupal\node\Entity\Node[]
+   * @var Node[]
    */
   protected $nodes = [];
 
   /**
-   * @var \Drupal\file\Entity\File[]
+   * @var File[]
    */
   protected $files = [];
 
   /**
-   * @var \Drupal\consumers\Entity\Consumer
+   * @var Consumer
    */
   protected $consumer;
 
@@ -93,7 +97,7 @@ class ConsumerImageSylesFunctionalTest extends BrowserTestBase {
    * @param int $num_nodes
    *   Number of articles to create.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createDefaultContent($num_nodes) {
     $random = $this->getRandomGenerator();
