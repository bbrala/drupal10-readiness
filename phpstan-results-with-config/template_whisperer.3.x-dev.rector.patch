diff --git a/inc/tokens.inc b/inc/tokens.inc
index 57b66c8..a29c6cc 100644
--- a/inc/tokens.inc
+++ b/inc/tokens.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity;
 /**
  * @file
  * Token integration for the Template Whisperer module.
@@ -71,7 +72,7 @@ function template_whisperer_tokens($type, $tokens, array $data, array $options,
 
   // Simple key values on the suggestion.
   if ($type == 'suggestion' && !empty($data['suggestion'])) {
-    /** @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity */
+    /** @var TemplateWhispererSuggestionEntity */
     $suggestion = $data['suggestion'];
 
     foreach ($tokens as $name => $original) {
@@ -106,7 +107,7 @@ function template_whisperer_tokens($type, $tokens, array $data, array $options,
 
   // Simple key values on the suggestion-lookup.
   if ($type == 'suggestion-lookup' && !empty($data['suggestion'])) {
-    /** @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity */
+    /** @var TemplateWhispererSuggestionEntity */
     $suggestion = $data['suggestion'];
     $usages = $tw_manager_usage->listUsage($suggestion);
     $usage = reset($usages);
diff --git a/src/Controller/AdminSuggestionController.php b/src/Controller/AdminSuggestionController.php
index 144c608..86a2ec0 100644
--- a/src/Controller/AdminSuggestionController.php
+++ b/src/Controller/AdminSuggestionController.php
@@ -18,28 +18,28 @@ class AdminSuggestionController extends ControllerBase {
   /**
    * Retrieves the entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Template Whisperer Suggestion Usage.
    *
-   * @var \Drupal\template_whisperer\TemplateWhispererSuggestionUsage
+   * @var TemplateWhispererSuggestionUsage
    */
   protected $twSuggestionUsage;
 
   /**
    * The url generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * The pager manager.
    *
-   * @var \Drupal\Core\Pager\PagerManagerInterface
+   * @var PagerManagerInterface
    */
   protected $pagerManager;
 
@@ -70,7 +70,7 @@ class AdminSuggestionController extends ControllerBase {
   /**
    * The usage admin page for Template Whisperer suggestion.
    *
-   * @param \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface $template_whisperer_suggestion
+   * @param TemplateWhispererSuggestionEntityInterface $template_whisperer_suggestion
    *   The given entity from URL.
    *
    * @return array
diff --git a/src/Form/TemplateWhispererSuggestionDeleteForm.php b/src/Form/TemplateWhispererSuggestionDeleteForm.php
index 11928b0..ca71ae5 100644
--- a/src/Form/TemplateWhispererSuggestionDeleteForm.php
+++ b/src/Form/TemplateWhispererSuggestionDeleteForm.php
@@ -16,7 +16,7 @@ class TemplateWhispererSuggestionDeleteForm extends EntityConfirmFormBase {
   /**
    * Template Whisperer Suggestion Usage.
    *
-   * @var \Drupal\template_whisperer\TemplateWhispererSuggestionUsage
+   * @var TemplateWhispererSuggestionUsage
    */
   protected $twSuggestionUsage;
 
diff --git a/src/Form/TemplateWhispererSuggestionForm.php b/src/Form/TemplateWhispererSuggestionForm.php
index f7440b2..99e34f1 100644
--- a/src/Form/TemplateWhispererSuggestionForm.php
+++ b/src/Form/TemplateWhispererSuggestionForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_whisperer\Form;
 
+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity;
 use Drupal\Core\Entity\EntityForm;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -17,7 +18,7 @@ class TemplateWhispererSuggestionForm extends EntityForm {
   /**
    * Template Whisperer Manager.
    *
-   * @var Drupal\template_whisperer\TemplateWhispererManager
+   * @var TemplateWhispererManager
    */
   protected $twManager;
 
@@ -45,7 +46,7 @@ class TemplateWhispererSuggestionForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity $entity */
+    /** @var TemplateWhispererSuggestionEntity $entity */
     $entity = $this->buildEntity($form, $form_state);
 
     $form['#title'] = $this->operation == 'add' ? $this->t('Add suggestion')
@@ -98,7 +99,7 @@ class TemplateWhispererSuggestionForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity $entity */
+    /** @var TemplateWhispererSuggestionEntity $entity */
     $entity = $this->buildEntity($form, $form_state);
 
     $entity->id = trim($entity->suggestion);
diff --git a/src/Plugin/Condition/TemplateWhisperer.php b/src/Plugin/Condition/TemplateWhisperer.php
index 13c6a7d..46cecce 100644
--- a/src/Plugin/Condition/TemplateWhisperer.php
+++ b/src/Plugin/Condition/TemplateWhisperer.php
@@ -25,7 +25,7 @@ class TemplateWhisperer extends ConditionPluginBase implements ContainerFactoryP
   /**
    * The Template Manager.
    *
-   * @var \Drupal\template_whisperer\TemplateWhispererManager
+   * @var TemplateWhispererManager
    */
   protected $twManager;
 
diff --git a/src/Plugin/Field/FieldType/TemplateWhispererFieldItem.php b/src/Plugin/Field/FieldType/TemplateWhispererFieldItem.php
index 4017f43..ca49850 100644
--- a/src/Plugin/Field/FieldType/TemplateWhispererFieldItem.php
+++ b/src/Plugin/Field/FieldType/TemplateWhispererFieldItem.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_whisperer\Plugin\Field\FieldType;
 
+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ -136,7 +137,7 @@ class TemplateWhispererFieldItem extends FieldItemBase {
       $suggestions = $this->referencedEntities();
       $ids = [];
 
-      /** @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface $suggestion */
+      /** @var TemplateWhispererSuggestionEntityInterface $suggestion */
       foreach ($suggestions as $suggestion) {
         $ids[] = $suggestion->id();
       }
diff --git a/src/Plugin/Field/FieldWidget/TemplateWhispererWidget.php b/src/Plugin/Field/FieldWidget/TemplateWhispererWidget.php
index 915743e..09ac741 100644
--- a/src/Plugin/Field/FieldWidget/TemplateWhispererWidget.php
+++ b/src/Plugin/Field/FieldWidget/TemplateWhispererWidget.php
@@ -26,7 +26,7 @@ class TemplateWhispererWidget extends WidgetBase implements ContainerFactoryPlug
   /**
    * Template Whisperer Manager.
    *
-   * @var Drupal\template_whisperer\TemplateWhispererManager
+   * @var TemplateWhispererManager
    */
   protected $twManager;
 
diff --git a/src/TemplateWhispererManager.php b/src/TemplateWhispererManager.php
index 38e6184..920373d 100644
--- a/src/TemplateWhispererManager.php
+++ b/src/TemplateWhispererManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\template_whisperer;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 
@@ -13,14 +15,14 @@ class TemplateWhispererManager {
   /**
    * EntityTypeManagerInterface to manage Template Whisperer Suggestion.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $suggestionStorage;
 
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity
+   * @param EntityTypeManagerInterface $entity
    *   The interface for entity type managers.
    */
   public function __construct(EntityTypeManagerInterface $entity) {
@@ -57,7 +59,7 @@ class TemplateWhispererManager {
    * @param string $suggestion
    *   The suggestion.
    *
-   * @return \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity|null
+   * @return TemplateWhispererSuggestionEntity|null
    *   Return the Entity corresponding of the given suggestion or Null.
    */
   public function getOneBySuggestion($suggestion) {
@@ -72,7 +74,7 @@ class TemplateWhispererManager {
   /**
    * Extracts all suggestions of a given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity to extract suggestions from.
    *
    * @return array
@@ -95,7 +97,7 @@ class TemplateWhispererManager {
   /**
    * Returns a list of the template_whisperer fields on an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The Entity which contain our special field(s).
    *
    * @return array
@@ -130,7 +132,7 @@ class TemplateWhispererManager {
   /**
    * Returns a list of the suggestions values from a field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The Entity that contains our special field(s).
    * @param string $field_name
    *   The field that contains our suggestion.
diff --git a/src/TemplateWhispererSuggestionListBuilder.php b/src/TemplateWhispererSuggestionListBuilder.php
index b873e88..0bf2beb 100644
--- a/src/TemplateWhispererSuggestionListBuilder.php
+++ b/src/TemplateWhispererSuggestionListBuilder.php
@@ -19,27 +19,27 @@ class TemplateWhispererSuggestionListBuilder extends ConfigEntityListBuilder {
   /**
    * The url generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * Template Whisperer Suggestion Usage.
    *
-   * @var \Drupal\template_whisperer\TemplateWhispererSuggestionUsage
+   * @var TemplateWhispererSuggestionUsage
    */
   protected $twSuggestionUsage;
 
   /**
    * Constructs a TemplateWhispererSuggestionListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator service.
-   * @param \Drupal\template_whisperer\TemplateWhispererSuggestionUsage $tw_suggestion_usage
+   * @param TemplateWhispererSuggestionUsage $tw_suggestion_usage
    *   Template Whisperer Suggestion Usage.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, UrlGeneratorInterface $url_generator, TemplateWhispererSuggestionUsage $tw_suggestion_usage) {
diff --git a/src/TemplateWhispererSuggestionUsage.php b/src/TemplateWhispererSuggestionUsage.php
index 9ae89b5..4608e02 100644
--- a/src/TemplateWhispererSuggestionUsage.php
+++ b/src/TemplateWhispererSuggestionUsage.php
@@ -13,7 +13,7 @@ class TemplateWhispererSuggestionUsage {
   /**
    * The database connection used to store usage information(s).
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
@@ -27,7 +27,7 @@ class TemplateWhispererSuggestionUsage {
   /**
    * Construct the TemplateWhispererSuggestionUsage.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection which will be used to store
    *   the Template Whisperer Suggestion usage information.
    * @param string $table
@@ -49,7 +49,7 @@ class TemplateWhispererSuggestionUsage {
    * - The User module associates an suggestion with a user,
    *   so $type would be 'user' and the $id would be the user's uid.
    *
-   * @param \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface $suggestion
+   * @param TemplateWhispererSuggestionEntityInterface $suggestion
    *   A suggestion entity.
    * @param string $module
    *   The name of the module using the suggestion.
@@ -76,7 +76,7 @@ class TemplateWhispererSuggestionUsage {
   /**
    * Removes a record to indicate that a module is no longer using a suggestion.
    *
-   * @param \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface $suggestion
+   * @param TemplateWhispererSuggestionEntityInterface $suggestion
    *   A suggestion entity.
    * @param string $module
    *   The name of the module using the suggestion.
@@ -126,7 +126,7 @@ class TemplateWhispererSuggestionUsage {
   /**
    * Determines where a suggestion is used.
    *
-   * @param \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface $suggestion
+   * @param TemplateWhispererSuggestionEntityInterface $suggestion
    *   A suggestion entity.
    *
    * @return array
@@ -145,7 +145,7 @@ class TemplateWhispererSuggestionUsage {
   /**
    * Determines how many time a suggestion is used.
    *
-   * @param \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface $suggestion
+   * @param TemplateWhispererSuggestionEntityInterface $suggestion
    *   A suggestion entity.
    *
    * @return int
diff --git a/src/TwigExtension/TwigExtension.php b/src/TwigExtension/TwigExtension.php
index 641bf0d..d131e0d 100644
--- a/src/TwigExtension/TwigExtension.php
+++ b/src/TwigExtension/TwigExtension.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\template_whisperer\TwigExtension;
 
+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface;
 use Drupal\template_whisperer\TemplateWhispererManager;
 use Drupal\template_whisperer\TemplateWhispererSuggestionUsage;
 
@@ -12,23 +13,23 @@ class TwigExtension extends \Twig_Extension {
   /**
    * Template Whisperer Manager.
    *
-   * @var \Drupal\template_whisperer\TemplateWhispererManager
+   * @var TemplateWhispererManager
    */
   protected $twManager;
 
   /**
    * Template Whisperer Suggestion Usage.
    *
-   * @var \Drupal\template_whisperer\TemplateWhispererSuggestionUsage
+   * @var TemplateWhispererSuggestionUsage
    */
   protected $twSuggestionUsage;
 
   /**
    * Constructs \Drupal\template_whisperer\TwigExtension\TwigExtension.
    *
-   * @param \Drupal\template_whisperer\TemplateWhispererManager $tw_manager
+   * @param TemplateWhispererManager $tw_manager
    *   The template whisperer manager.
-   * @param \Drupal\template_whisperer\TemplateWhispererSuggestionUsage $tw_suggestion_usage
+   * @param TemplateWhispererSuggestionUsage $tw_suggestion_usage
    *   The template whisperer suggestion usage service.
    */
   public function __construct(TemplateWhispererManager $tw_manager, TemplateWhispererSuggestionUsage $tw_suggestion_usage) {
@@ -61,7 +62,7 @@ class TwigExtension extends \Twig_Extension {
    * @param string $tw_suggestion
    *   The template whisperer suggestion.
    *
-   * @return \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface[]
+   * @return TemplateWhispererSuggestionEntityInterface[]
    *   A collection of Template whisperer entities.
    */
   public function getEntitiesFromSuggestion(string $tw_suggestion) {
diff --git a/template_whisperer.install b/template_whisperer.install
index b8bdfad..d02ee33 100644
--- a/template_whisperer.install
+++ b/template_whisperer.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\user\RoleInterface;
 /**
  * @file
  * Contains template_whisperer.install.
@@ -78,7 +79,7 @@ function template_whisperer_schema() {
  * Migrate the permission `administer the template whisperer field` to roles.
  */
 function template_whisperer_update_8001(&$sandbox) {
-  /** @var \Drupal\user\RoleInterface $roleStorage */
+  /** @var RoleInterface $roleStorage */
   $roleStorage = \Drupal::service('entity_type.manager')
     ->getStorage('user_role');
 
diff --git a/tests/src/Functional/ConditionalBlockTest.php b/tests/src/Functional/ConditionalBlockTest.php
index 7eb12c9..d40fa19 100644
--- a/tests/src/Functional/ConditionalBlockTest.php
+++ b/tests/src/Functional/ConditionalBlockTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\template_whisperer\Functional;
 
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity;
+use Drupal\user\UserInterface;
 use Drupal\block\BlockInterface;
 
 /**
@@ -17,7 +22,7 @@ class ConditionalBlockTest extends TemplateWhispererTestBase {
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
@@ -41,35 +46,35 @@ class ConditionalBlockTest extends TemplateWhispererTestBase {
   /**
    * The block entities used by this test.
    *
-   * @var \Drupal\block\BlockInterface[]
+   * @var BlockInterface[]
    */
   protected $blocks;
 
   /**
    * The articles Node used by this test.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $articles;
 
   /**
    * The tags Term used by this test.
    *
-   * @var \Drupal\taxonomy\TermInterface[]
+   * @var TermInterface[]
    */
   protected $tags;
 
   /**
    * The Template Whisperer suggestions used by this test.
    *
-   * @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity[]
+   * @var TemplateWhispererSuggestionEntity[]
    */
   protected $suggestions;
 
   /**
    * An administrative user to configure the test environment.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -79,7 +84,7 @@ class ConditionalBlockTest extends TemplateWhispererTestBase {
   protected function setUp(): void {
     parent::setUp();
 
-    /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
+    /** @var EntityTypeManager $entityTypeManager */
     $this->entityTypeManager = $this->container->get('entity_type.manager');
 
     // Create and log in an administrative user.
@@ -118,7 +123,7 @@ class ConditionalBlockTest extends TemplateWhispererTestBase {
   /**
    * Update the block with template whisperer visibility conditions.
    *
-   * @param \Drupal\block\BlockInterface $block
+   * @param BlockInterface $block
    *   The block to update.
    * @param array $suggestions
    *   Collection of suggestion ID to add as condition of block visibility.
@@ -274,7 +279,7 @@ class ConditionalBlockTest extends TemplateWhispererTestBase {
     // Update the placed block to be visible only on "Timeline".
     $this->drupalGet('admin/structure/block/manage/' . $this->blocks[0]->id());
     $edit['visibility[template_whisperer][suggestions][' . $this->suggestions[0]->id() . ']'] = TRUE;
-    $this->drupalPostForm(NULL, $edit, 'Save block');
+    $this->submitForm($edit, 'Save block');
 
     // Asserts the configurations has been saved.
     $this->assertSession()->pageTextContains('The block configuration has been saved');
@@ -285,7 +290,7 @@ class ConditionalBlockTest extends TemplateWhispererTestBase {
     $this->drupalGet('admin/structure/block/manage/' . $this->blocks[0]->id());
     $edit['visibility[template_whisperer][suggestions][' . $this->suggestions[0]->id() . ']'] = TRUE;
     $edit['visibility[template_whisperer][suggestions][' . $this->suggestions[1]->id() . ']'] = TRUE;
-    $this->drupalPostForm(NULL, $edit, 'Save block');
+    $this->submitForm($edit, 'Save block');
     // Asserts the configurations has been saved.
     $this->assertSession()->pageTextContains('The block configuration has been saved');
     $this->clickLink('Configure');
diff --git a/tests/src/Functional/SuggestionTokenReplaceTest.php b/tests/src/Functional/SuggestionTokenReplaceTest.php
index 4c7c790..7e04ecb 100644
--- a/tests/src/Functional/SuggestionTokenReplaceTest.php
+++ b/tests/src/Functional/SuggestionTokenReplaceTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\template_whisperer\Functional;
 
+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity;
+use Drupal\node\NodeInterface;
 /**
  * Check suggestion tokens replacement.
  *
@@ -27,14 +29,14 @@ class SuggestionTokenReplaceTest extends TemplateWhispererTestBase {
   /**
    * Collection of Template Whisperer test entites.
    *
-   * @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity[]
+   * @var TemplateWhispererSuggestionEntity[]
    */
   private $suggestions;
 
   /**
    * The node with an attached suggestion for this tests.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $testNode;
 
@@ -109,23 +111,23 @@ class SuggestionTokenReplaceTest extends TemplateWhispererTestBase {
 
     // Suggestion tokens.
     $replacement = $token_service->replace('[suggestion:name]', ['suggestion' => $this->suggestions['foo']], $options);
-    $this->assertEqual($replacement, $this->suggestions['foo']->getName());
+    $this->assertEquals($replacement, $this->suggestions['foo']->getName());
 
     // Chainable Lookup -> Suggestion tokens.
     $replacement = $token_service->replace('[suggestion:lookup:foo]', [], $options);
-    $this->assertEqual($replacement, $this->suggestions['foo']->getSuggestion());
+    $this->assertEquals($replacement, $this->suggestions['foo']->getSuggestion());
     $replacement = $token_service->replace('[suggestion:lookup:foo:name]', [], $options);
-    $this->assertEqual($replacement, $this->suggestions['foo']->getName());
+    $this->assertEquals($replacement, $this->suggestions['foo']->getName());
 
     // Chainable Lookup -> Entity tokens.
     $replacement = $token_service->replace('[suggestion:lookup:foo:entity:nid]', [], $options);
-    $this->assertEqual($replacement, $this->testNode->id());
+    $this->assertEquals($replacement, $this->testNode->id());
     $replacement = $token_service->replace('[suggestion:lookup:foo:entity:url]', [], $options);
-    $this->assertEqual($replacement, $this->testNode->toUrl('canonical', ['absolute' => TRUE])->toString());
+    $this->assertEquals($replacement, $this->testNode->toUrl('canonical', ['absolute' => TRUE])->toString());
 
     // Tests invalide token for node.
     $replacement = $token_service->replace('[suggestion:lookup:foo:entity]', [], $options);
-    $this->assertEqual($replacement, '[suggestion:lookup:foo:entity]');
+    $this->assertEquals($replacement, '[suggestion:lookup:foo:entity]');
   }
 
   /**
@@ -140,7 +142,7 @@ class SuggestionTokenReplaceTest extends TemplateWhispererTestBase {
 
     // Tests inexisting suggestion.
     $replacement = $token_service->replace('[suggestion:lookup:baz:entity:id]', [], $options);
-    $this->assertEqual($replacement, '[suggestion:lookup:baz:entity:id]');
+    $this->assertEquals($replacement, '[suggestion:lookup:baz:entity:id]');
   }
 
   /**
@@ -155,7 +157,7 @@ class SuggestionTokenReplaceTest extends TemplateWhispererTestBase {
 
     // Tests existing but non-used suggestion.
     $replacement = $token_service->replace('[suggestion:lookup:bar:entity:id]', [], $options);
-    $this->assertEqual($replacement, '[suggestion:lookup:bar:entity:id]');
+    $this->assertEquals($replacement, '[suggestion:lookup:bar:entity:id]');
   }
 
 }
diff --git a/tests/src/Functional/TemplateWhispererTestBase.php b/tests/src/Functional/TemplateWhispererTestBase.php
index 44d93a7..78871a5 100644
--- a/tests/src/Functional/TemplateWhispererTestBase.php
+++ b/tests/src/Functional/TemplateWhispererTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\template_whisperer\Functional;
 
+use Behat\Mink\Element\NodeElement;
+use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -48,7 +50,7 @@ abstract class TemplateWhispererTestBase extends BrowserTestBase {
    * @param string $locator
    *   Link id, title, text or image alt.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The link node element.
    */
   public function findLink($locator) {
@@ -61,7 +63,7 @@ abstract class TemplateWhispererTestBase extends BrowserTestBase {
    * @param string $locator
    *   Input id, name or label.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The input field element.
    */
   public function findField($locator) {
@@ -74,7 +76,7 @@ abstract class TemplateWhispererTestBase extends BrowserTestBase {
    * @param string $locator
    *   Button id, value or alt.
    *
-   * @return \Behat\Mink\Element\NodeElement|null
+   * @return NodeElement|null
    *   The button node element.
    */
   public function findButton($locator) {
@@ -87,7 +89,7 @@ abstract class TemplateWhispererTestBase extends BrowserTestBase {
    * @param string $locator
    *   Button id, value or alt.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   public function pressButton($locator) {
     $this->getSession()->getPage()->pressButton($locator);
@@ -101,7 +103,7 @@ abstract class TemplateWhispererTestBase extends BrowserTestBase {
    * @param string $value
    *   Value.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    *
    * @see \Behat\Mink\Element\NodeElement::setValue
    */
diff --git a/tests/src/Functional/UiFieldTest.php b/tests/src/Functional/UiFieldTest.php
index e85e7e9..02960a8 100644
--- a/tests/src/Functional/UiFieldTest.php
+++ b/tests/src/Functional/UiFieldTest.php
@@ -76,7 +76,7 @@ class UiFieldTest extends TemplateWhispererTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $this->debugOff();
   }
 
diff --git a/tests/src/Functional/UiPageTest.php b/tests/src/Functional/UiPageTest.php
index 5f122b6..87b7ff0 100644
--- a/tests/src/Functional/UiPageTest.php
+++ b/tests/src/Functional/UiPageTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\template_whisperer\Functional;
 
+use Drupal\Core\Entity\EntityTypeManager;
 /**
  * Tests event info pages and links.
  *
@@ -32,7 +33,7 @@ class UiPageTest extends TemplateWhispererTestBase {
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
@@ -42,7 +43,7 @@ class UiPageTest extends TemplateWhispererTestBase {
   protected function setUp(): void {
     parent::setUp();
 
-    /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
+    /** @var EntityTypeManager $entityTypeManager */
     $this->entityTypeManager = $this->container->get('entity_type.manager');
 
     // Create an page content type.
diff --git a/tests/src/Functional/WidgetFormElementTest.php b/tests/src/Functional/WidgetFormElementTest.php
index fde6de0..0ec018b 100644
--- a/tests/src/Functional/WidgetFormElementTest.php
+++ b/tests/src/Functional/WidgetFormElementTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\template_whisperer\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 
 /**
@@ -38,14 +40,14 @@ class WidgetFormElementTest extends TemplateWhispererTestBase {
   /**
    * The node (article) to tests with.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $article;
 
   /**
    * The taxonomy term (tags) to tests with.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $tag;
 
diff --git a/tests/src/Kernel/FieldTemplateWhispererTest.php b/tests/src/Kernel/FieldTemplateWhispererTest.php
index 4e0fa23..ab05f99 100644
--- a/tests/src/Kernel/FieldTemplateWhispererTest.php
+++ b/tests/src/Kernel/FieldTemplateWhispererTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\template_whisperer\Kernel;
 
+use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Tests\field\Kernel\FieldKernelTestBase;
@@ -32,7 +33,7 @@ class FieldTemplateWhispererTest extends FieldKernelTestBase {
   /**
    * Collection of  Template Whisperer test entites.
    *
-   * @var Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity[]
+   * @var TemplateWhispererSuggestionEntity[]
    */
   private $suggestions;
 
@@ -109,19 +110,19 @@ class FieldTemplateWhispererTest extends FieldKernelTestBase {
 
     $this->assertTrue($entity->field_template_whisperer instanceof FieldItemListInterface, 'Field implements interface.');
     $this->assertTrue($entity->field_template_whisperer[0] instanceof FieldItemInterface, 'Field item implements interface.');
-    $this->assertEqual($entity->field_template_whisperer->target_id, $target_id);
-    $this->assertEqual($entity->field_template_whisperer[0]->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer[0]->target_id, $target_id);
 
     // Verify changing the field's value.
     $new_target_id = $this->suggestions['bar']->getSuggestion();
     $entity->field_template_whisperer->value = $new_target_id;
-    $this->assertEqual($entity->field_template_whisperer->value, $new_target_id);
+    $this->assertEquals($entity->field_template_whisperer->value, $new_target_id);
 
     // Read changed entity and assert changed values.
     $entity->save();
     $entity = $type_manager->getStorage('entity_test')->load($id);
-    $this->assertEqual($entity->field_template_whisperer->target_id, $target_id);
-    $this->assertEqual($entity->field_template_whisperer[0]->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer->target_id, $target_id);
+    $this->assertEquals($entity->field_template_whisperer[0]->target_id, $target_id);
   }
 
   /**
@@ -141,7 +142,7 @@ class FieldTemplateWhispererTest extends FieldKernelTestBase {
 
     foreach ($scenarios as $operation => $expected) {
       $result = $entity->field_template_whisperer->access($operation, $test_user);
-      $this->assertEqual($result, $expected);
+      $this->assertEquals($result, $expected);
     }
   }
 
diff --git a/tests/src/Kernel/TemplateWhispererManagerTest.php b/tests/src/Kernel/TemplateWhispererManagerTest.php
index 9704864..5509c2f 100644
--- a/tests/src/Kernel/TemplateWhispererManagerTest.php
+++ b/tests/src/Kernel/TemplateWhispererManagerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\template_whisperer\Kernel;
 
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\template_whisperer\TemplateWhispererManager;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\template_whisperer\Traits\InvokeMethodTrait;
 
@@ -17,7 +19,7 @@ class TemplateWhispererManagerTest extends KernelTestBase {
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
@@ -49,7 +51,7 @@ class TemplateWhispererManagerTest extends KernelTestBase {
     $this->installEntitySchema('template_whisperer_suggestion');
     $this->installSchema('template_whisperer', ['template_whisperer_suggestion_usage']);
 
-    /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
+    /** @var EntityTypeManager $entityTypeManager */
     $this->entityTypeManager = $this->container->get('entity_type.manager');
 
     // Create 1 default Template Whisperer.
@@ -98,7 +100,7 @@ class TemplateWhispererManagerTest extends KernelTestBase {
    * @covers \Drupal\template_whisperer\TemplateWhispererManager::getFieldSuggestions
    */
   public function testGetFieldSuggestions() {
-    /** @var \Drupal\template_whisperer\TemplateWhispererManager $tw_manager */
+    /** @var TemplateWhispererManager $tw_manager */
     $tw_manager = \Drupal::service('plugin.manager.template_whisperer');
 
     // Set an existing template whisperer.
@@ -112,7 +114,7 @@ class TemplateWhispererManagerTest extends KernelTestBase {
       $entity,
       'field_template_whisperer',
     ]);
-    $this->assertEqual('foo', $suggestions);
+    $this->assertEquals('foo', $suggestions);
 
     // Set an none-existing template whisperer.
     // This may happend when an whisperer is deleted but stay on node data.
diff --git a/tests/src/Kernel/TwigExtensionTest.php b/tests/src/Kernel/TwigExtensionTest.php
index 76e15f6..6da3e4c 100644
--- a/tests/src/Kernel/TwigExtensionTest.php
+++ b/tests/src/Kernel/TwigExtensionTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\template_whisperer\Kernel;
 
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\template_whisperer\TwigExtension\TwigExtension;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntityInterface;
 
@@ -16,7 +18,7 @@ class TwigExtensionTest extends KernelTestBase {
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
@@ -48,7 +50,7 @@ class TwigExtensionTest extends KernelTestBase {
     $this->installEntitySchema('template_whisperer_suggestion');
     $this->installSchema('template_whisperer', ['template_whisperer_suggestion_usage']);
 
-    /** @var \Drupal\Core\Entity\EntityTypeManager $entityTypeManager */
+    /** @var EntityTypeManager $entityTypeManager */
     $this->entityTypeManager = $this->container->get('entity_type.manager');
 
     // Create 2 defaults Template Whisperer.
@@ -102,7 +104,7 @@ class TwigExtensionTest extends KernelTestBase {
    * @covers Drupal\template_whisperer\TwigExtension\TwigExtension::getEntitiesFromSuggestion
    */
   public function testsGetOneEntityFromSuggestion() {
-    /** @var \Drupal\template_whisperer\TwigExtension\TwigExtension $extension */
+    /** @var TwigExtension $extension */
     $extension = \Drupal::service('template_whisperer.twig.extension');
 
     $suggestions = $extension->getEntitiesFromSuggestion('bar');
@@ -115,7 +117,7 @@ class TwigExtensionTest extends KernelTestBase {
    * @covers Drupal\template_whisperer\TwigExtension\TwigExtension::getEntitiesFromSuggestion
    */
   public function testsGetEntitiesFromSuggestion() {
-    /** @var \Drupal\template_whisperer\TwigExtension\TwigExtension $extension */
+    /** @var TwigExtension $extension */
     $extension = \Drupal::service('template_whisperer.twig.extension');
     $suggestions = $extension->getEntitiesFromSuggestion('foo');
     $this->assertIsArray($suggestions);
@@ -127,7 +129,7 @@ class TwigExtensionTest extends KernelTestBase {
    * @covers Drupal\template_whisperer\TwigExtension\TwigExtension::getEntitiesFromSuggestion
    */
   public function testsGetNoneEntitiesBySuggestion() {
-    /** @var \Drupal\template_whisperer\TwigExtension\TwigExtension $extension */
+    /** @var TwigExtension $extension */
     $extension = \Drupal::service('template_whisperer.twig.extension');
     $suggestions = $extension->getEntitiesFromSuggestion($this->randomString(16));
     $this->assertIsArray($suggestions);
