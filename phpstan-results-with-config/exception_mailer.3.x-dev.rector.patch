diff --git a/exception_mailer.info.yml b/exception_mailer.info.yml
index 9c41103..f99bc4d 100644
--- a/exception_mailer.info.yml
+++ b/exception_mailer.info.yml
@@ -2,7 +2,6 @@ name: Error & Exception Mailer
 description: A basic module to send email when an error/exception occurs.
 package: Custom
 type: module
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 configure: exception_mailer.exception_mailer_config_form
 php: 7.0
diff --git a/src/Controller/ExceptionMailerExcludeListBuilder.php b/src/Controller/ExceptionMailerExcludeListBuilder.php
index bad74f3..6280e3e 100644
--- a/src/Controller/ExceptionMailerExcludeListBuilder.php
+++ b/src/Controller/ExceptionMailerExcludeListBuilder.php
@@ -33,7 +33,7 @@ class ExceptionMailerExcludeListBuilder extends ConfigEntityListBuilder {
   /**
    * Builds a row for an entity in the entity listing.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to build the row.
    *
    * @return array
diff --git a/src/ExceptionMailerExcludeManager.php b/src/ExceptionMailerExcludeManager.php
index 7144011..625e967 100644
--- a/src/ExceptionMailerExcludeManager.php
+++ b/src/ExceptionMailerExcludeManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\exception_mailer;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Utility\Html;
@@ -14,14 +16,14 @@ class ExceptionMailerExcludeManager {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new EntityTypeBundleInfo.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -39,9 +41,9 @@ class ExceptionMailerExcludeManager {
    * @return array
    *   Array of excludes with exclude data.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public function getExcludes(array &$data, $type): array {
@@ -71,7 +73,7 @@ class ExceptionMailerExcludeManager {
    *   Type: 'error' | 'exception'.
    */
   public function checkExcludesForData(array &$excludes, array $data, $type): void {
-    /** @var \Drupal\exception_mailer\ExceptionMailerExcludeInterface  $exclude */
+    /** @var ExceptionMailerExcludeInterface $exclude */
     foreach ($excludes as $key => $exclude) {
       if ($type === 'error') {
         if ($exclude->getErrorType() && $exclude->getErrorType() != $data['type']) {
diff --git a/src/Form/ExceptionMailerExcludeForm.php b/src/Form/ExceptionMailerExcludeForm.php
index a8397c2..96fccf6 100644
--- a/src/Form/ExceptionMailerExcludeForm.php
+++ b/src/Form/ExceptionMailerExcludeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\exception_mailer\Form;
 
+use Drupal\exception_mailer\ExceptionMailerExcludeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Component\Utility\EmailValidatorInterface;
@@ -23,21 +24,21 @@ class ExceptionMailerExcludeForm extends EntityForm {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -55,11 +56,11 @@ class ExceptionMailerExcludeForm extends EntityForm {
   /**
    * Constructs the ExceptionMailerExcludeForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EmailValidatorInterface $email_validator, LoggerInterface $logger) {
@@ -74,7 +75,7 @@ class ExceptionMailerExcludeForm extends EntityForm {
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\exception_mailer\ExceptionMailerExcludeInterface $exclude */
+    /** @var ExceptionMailerExcludeInterface $exclude */
     $exclude = $this->entity;
 
     $form['label'] = [
@@ -273,7 +274,7 @@ class ExceptionMailerExcludeForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\exception_mailer\ExceptionMailerExcludeInterface $exclude */
+    /** @var ExceptionMailerExcludeInterface $exclude */
     $exclude = $this->entity;
     $exclude->setEmails($form_state->get('emails'));
     $status = $exclude->save();
diff --git a/src/Logger/ErrorLog.php b/src/Logger/ErrorLog.php
index c37339f..baae319 100644
--- a/src/Logger/ErrorLog.php
+++ b/src/Logger/ErrorLog.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\exception_mailer\Logger;
 
+use Drupal\exception_mailer\ExceptionMailerExcludeInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Logger\LogMessageParserInterface;
 use Drupal\Core\Logger\RfcLoggerTrait;
@@ -27,59 +28,59 @@ class ErrorLog implements LoggerInterface {
   /**
    * The message's placeholders parser.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected $parser;
 
   /**
    * The queue service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * The queue manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueManager;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * The state store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $excludeManager;
 
   /**
    * Constructs a new ErrorLog object.
    *
-   * @param \Drupal\Core\Logger\LogMessageParserInterface $parser
+   * @param LogMessageParserInterface $parser
    *   The parser to use when extracting message variables.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue service.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_manager
+   * @param QueueWorkerManagerInterface $queue_manager
    *   The queue manager.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state.
-   * @param \Drupal\exception_mailer\ExceptionMailerExcludeManager $excludeManager
+   * @param ExceptionMailerExcludeManager $excludeManager
    *   The exception exclude manager.
    */
   public function __construct(
@@ -135,7 +136,7 @@ class ErrorLog implements LoggerInterface {
       $data['hostname'] = mb_substr($context['ip'], 0, 128);
 
       if ($excludes = $this->excludeManager->getExcludes($data, 'error')) {
-        /** @var \Drupal\exception_mailer\ExceptionMailerExcludeInterface  $exclude */
+        /** @var ExceptionMailerExcludeInterface $exclude */
         foreach ($excludes as $exclude) {
           if ($exclude->getEmailBody()) {
             $data['email_body'] = $exclude->getEmailBody();
diff --git a/src/Plugin/QueueWorker/ExceptionEmailQueue.php b/src/Plugin/QueueWorker/ExceptionEmailQueue.php
index f220b00..3a5942c 100644
--- a/src/Plugin/QueueWorker/ExceptionEmailQueue.php
+++ b/src/Plugin/QueueWorker/ExceptionEmailQueue.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\exception_mailer\Plugin\QueueWorker;
 
+use Drupal\Core\Mail\MailManager;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -21,14 +22,14 @@ class ExceptionEmailQueue extends QueueWorkerBase implements ContainerFactoryPlu
   /**
    * Mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManager
+   * @var MailManager
    */
   protected $mailManager;
 
   /**
    * Constructs a new ExceptionEmailQueue object.
    *
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   Mail manager service.
    */
   public function __construct(MailManagerInterface $mail_manager) {
diff --git a/src/Plugin/QueueWorker/ManualExceptionEmail.php b/src/Plugin/QueueWorker/ManualExceptionEmail.php
index a0e8b78..db0cfe3 100644
--- a/src/Plugin/QueueWorker/ManualExceptionEmail.php
+++ b/src/Plugin/QueueWorker/ManualExceptionEmail.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\exception_mailer\Plugin\QueueWorker;
 
+use Drupal\Core\Mail\MailManager;
 use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ -20,14 +21,14 @@ class ManualExceptionEmail extends QueueWorkerBase implements ContainerFactoryPl
   /**
    * Mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManager
+   * @var MailManager
    */
   protected $mailManager;
 
   /**
    * Constructs a new ExceptionEmailQueue object.
    *
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   Mail manager service.
    */
   public function __construct(MailManagerInterface $mail_manager) {
diff --git a/src/Subscribers/ExceptionEventSubscriber.php b/src/Subscribers/ExceptionEventSubscriber.php
index 94b7526..e401d67 100644
--- a/src/Subscribers/ExceptionEventSubscriber.php
+++ b/src/Subscribers/ExceptionEventSubscriber.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\exception_mailer\Subscribers;
 
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\exception_mailer\ExceptionMailerExcludeInterface;
 use Drupal\Core\Form\FormAjaxException;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Queue\QueueFactory;
@@ -11,7 +15,6 @@ use Drupal\Core\State\StateInterface;
 use Drupal\exception_mailer\ExceptionMailerExcludeManager;
 use Drupal\exception_mailer\Utility\UserRepository;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Config\ConfigFactory;
@@ -26,84 +29,84 @@ class ExceptionEventSubscriber implements EventSubscriberInterface {
   /**
    * Logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;
 
   /**
    * The queue service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * The queue manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueManager;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The state store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $excludeManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue service.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_manager
+   * @param QueueWorkerManagerInterface $queue_manager
    *   The queue manager.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state.
-   * @param \Drupal\exception_mailer\ExceptionMailerExcludeManager $excludeManager
+   * @param ExceptionMailerExcludeManager $excludeManager
    *   The exception exclude manager.
    */
   public function __construct(
@@ -129,16 +132,16 @@ class ExceptionEventSubscriber implements EventSubscriberInterface {
   /**
    * Event handler.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The exception event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
-  public function onException(GetResponseForExceptionEvent $event) {
+  public function onException(ExceptionEvent $event) {
     $request = $event->getRequest();
 
     $config = $this->configFactory->get('exception_mailer.settings');
-    $exception = $event->getException();
+    $exception = $event->getThrowable();
     $queue = $this->queueFactory->get('manual_exception_email', TRUE);
     $queue_worker = $this->queueManager->createInstance('manual_exception_email');
     if (!$exception instanceof FormAjaxException && !$exception instanceof NotFoundHttpException) {
@@ -152,7 +155,7 @@ class ExceptionEventSubscriber implements EventSubscriberInterface {
       $data['hostname'] = $request->getClientIp();
 
       if ($excludes = $this->excludeManager->getExcludes($data, 'exception')) {
-        /** @var \Drupal\exception_mailer\ExceptionMailerExcludeInterface  $exclude */
+        /** @var ExceptionMailerExcludeInterface $exclude */
         foreach ($excludes as $exclude) {
           if ($exclude->getEmailBody()) {
             $data['email_body'] = $exclude->getEmailBody();
