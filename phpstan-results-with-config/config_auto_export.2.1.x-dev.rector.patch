diff --git a/config_auto_export.info.yml b/config_auto_export.info.yml
index 4fcd9f7..de04d97 100644
--- a/config_auto_export.info.yml
+++ b/config_auto_export.info.yml
@@ -1,7 +1,7 @@
 name: Config Auto Export
 type: module
 description: Auto detects config changes and exports those to a configurable directory and optionally triggers a web hook.
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: Configuration
 dependencies:
   - yaml_editor:yaml_editor
diff --git a/src/Commands/ConfigAutoExportCommands.php b/src/Commands/ConfigAutoExportCommands.php
index aa9428a..d9d3433 100644
--- a/src/Commands/ConfigAutoExportCommands.php
+++ b/src/Commands/ConfigAutoExportCommands.php
@@ -16,44 +16,44 @@ use Drush\Commands\DrushCommands;
 class ConfigAutoExportCommands extends DrushCommands {
 
   /**
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected ConfigManagerInterface $configManager;
 
   /**
-   * @var \Drupal\Core\Diff\DiffFormatter
+   * @var DiffFormatter
    */
   protected DiffFormatter $diffFormatter;
 
   /**
-   * @var \Drupal\Core\Config\CachedStorage
+   * @var CachedStorage
    */
   protected CachedStorage $cachedStorage;
 
   /**
-   * @var \Drupal\Core\Config\FileStorage
+   * @var FileStorage
    */
   protected FileStorage $fileStorage;
 
   /**
-   * @var \Drupal\config_auto_export\Service
+   * @var Service
    */
   protected Service $service;
 
   /**
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected RendererInterface $renderer;
 
   /**
    * ConfigAutoExportCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigManagerInterface $configManager
-   * @param \Drupal\Core\Diff\DiffFormatter $diffFormatter
-   * @param \Drupal\Core\Config\CachedStorage $cachedStorage
-   * @param \Drupal\Core\Config\FileStorage $fileStorage
-   * @param \Drupal\config_auto_export\Service $service
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param ConfigManagerInterface $configManager
+   * @param DiffFormatter $diffFormatter
+   * @param CachedStorage $cachedStorage
+   * @param FileStorage $fileStorage
+   * @param Service $service
+   * @param RendererInterface $renderer
    */
   public function __construct(ConfigManagerInterface $configManager, DiffFormatter $diffFormatter, CachedStorage $cachedStorage, FileStorage $fileStorage, Service $service, RendererInterface $renderer) {
     parent::__construct();
diff --git a/src/ConfigSubscriber.php b/src/ConfigSubscriber.php
index d3e4e75..cd90e42 100644
--- a/src/ConfigSubscriber.php
+++ b/src/ConfigSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\config_auto_export;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Datetime\Time;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ -26,13 +27,13 @@ use Symfony\Component\EventDispatcher\EventSubscriberInterface;
  */
 class ConfigSubscriber implements EventSubscriberInterface, DestructableInterface {
 
-  /** @var \Drupal\Core\Config\ImmutableConfig */
+  /** @var ImmutableConfig */
   protected $config;
 
-  /** @var \Drupal\Core\Config\CachedStorage */
+  /** @var CachedStorage */
   protected $configCache;
 
-  /** @var \Drupal\Core\Config\FileStorage */
+  /** @var FileStorage */
   protected $configStorage;
 
   /** @var array */
@@ -48,47 +49,47 @@ class ConfigSubscriber implements EventSubscriberInterface, DestructableInterfac
   protected $triggerNeeded = FALSE;
 
   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;
 
   /**
-   * @var \Drupal\config_auto_export\Service
+   * @var Service
    */
   protected $service;
 
   /**
    * Constructs a new Settings object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\Config\CachedStorage $config_cache
-   * @param \Drupal\Core\Config\FileStorage $config_storage
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\State\StateInterface $state
-   * @param \Drupal\Component\Datetime\Time $time
-   * @param \Drupal\config_auto_export\Service $service
+   * @param ConfigFactoryInterface $config_factory
+   * @param CachedStorage $config_cache
+   * @param FileStorage $config_storage
+   * @param FileSystemInterface $file_system
+   * @param ModuleHandlerInterface $module_handler
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param StateInterface $state
+   * @param Time $time
+   * @param Service $service
    */
   public function __construct(ConfigFactoryInterface $config_factory, CachedStorage $config_cache, FileStorage $config_storage, FileSystemInterface $file_system, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager, StateInterface $state, Time $time, Service $service) {
     $this->config = $config_factory->get('config_auto_export.settings');
@@ -127,8 +128,8 @@ class ConfigSubscriber implements EventSubscriberInterface, DestructableInterfac
   /**
    * Read all config files from config splits, if available.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function readConfigSplitFiles(): void {
     $this->configSplitFiles = [];
@@ -171,7 +172,7 @@ class ConfigSubscriber implements EventSubscriberInterface, DestructableInterfac
   /**
    * Saves changed config to a configurable directory.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   Public function onConfigSave event.
    */
   public function onConfigSave(ConfigCrudEvent $event): void {
@@ -215,7 +216,7 @@ class ConfigSubscriber implements EventSubscriberInterface, DestructableInterfac
   /**
    * Saves changed config translation to a configurable directory.
    *
-   * @param \Drupal\language\Config\LanguageConfigOverrideCrudEvent $event
+   * @param LanguageConfigOverrideCrudEvent $event
    *   Public function onConfigTranslationSave event.
    */
   public function onConfigTranslationSave(LanguageConfigOverrideCrudEvent $event): void {
@@ -230,7 +231,7 @@ class ConfigSubscriber implements EventSubscriberInterface, DestructableInterfac
   /**
    * Turn off this subscriber on importing configuration.
    *
-   * @param \Drupal\Core\Config\ConfigImporterEvent $event
+   * @param ConfigImporterEvent $event
    *   Public function onConfigImportValidate event.
    *
    * @noinspection PhpUnusedParameterInspection*/
diff --git a/src/FileStorageFactory.php b/src/FileStorageFactory.php
index d7e39dc..b411ee4 100644
--- a/src/FileStorageFactory.php
+++ b/src/FileStorageFactory.php
@@ -24,7 +24,7 @@ class FileStorageFactory {
   /**
    * Returns a FileStorage object working with the configured directory.
    *
-   * @return \Drupal\Core\Config\FileStorage
+   * @return FileStorage
    *   Public static function getSync.
    */
   public static function getSync(): FileStorage {
diff --git a/src/Service.php b/src/Service.php
index dbb533a..9fa4bb0 100644
--- a/src/Service.php
+++ b/src/Service.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\config_auto_export;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Datetime\Time;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Drupal\config\StorageReplaceDataWrapper;
@@ -34,121 +36,121 @@ class Service {
   public const STATE_KEY_PAUSED = 'config_auto_export.paused';
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;
 
   /**
-   * @var \Drupal\Core\Http\ClientFactory
+   * @var ClientFactory
    */
   protected $client;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Config\CachedStorage
+   * @var CachedStorage
    */
   protected $storage;
 
   /**
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;
 
   /**
-   * @var \Drupal\Core\Config\ConfigManager
+   * @var ConfigManager
    */
   protected $configManager;
 
   /**
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
-   * @var \Drupal\Core\Config\TypedConfigManager
+   * @var TypedConfigManager
    */
   protected $configTyped;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleInstallerInterface
+   * @var ModuleInstallerInterface
    */
   protected $moduleInstaller;
 
   /**
-   * @var \Drupal\Core\Extension\ThemeHandler
+   * @var ThemeHandler
    */
   protected $themeHandler;
 
   /**
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $stringTranslation;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $extensionListModule;
 
   /**
    * Service constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_channel_factory
-   * @param \Drupal\Core\State\StateInterface $state
-   * @param \Drupal\Component\Datetime\Time $time
-   * @param \Drupal\Core\Http\ClientFactory $client
-   * @param \Drupal\Core\Session\AccountInterface $account
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Config\CachedStorage $storage
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher
-   * @param \Drupal\Core\Config\ConfigManager $config_manager
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
-   * @param \Drupal\Core\Config\TypedConfigManager $config_typed
-   * @param \Drupal\Core\Extension\ModuleInstallerInterface $module_installer
-   * @param \Drupal\Core\Extension\ThemeHandler $theme_handler
-   * @param \Drupal\Core\StringTranslation\TranslationManager $string_translation
-   * @param \Drupal\Core\Extension\ModuleExtensionList $extension_list_module
+   * @param ConfigFactoryInterface $config_factory
+   * @param FileSystemInterface $file_system
+   * @param LoggerChannelFactoryInterface $logger_channel_factory
+   * @param StateInterface $state
+   * @param Time $time
+   * @param ClientFactory $client
+   * @param AccountInterface $account
+   * @param ModuleHandlerInterface $module_handler
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param CachedStorage $storage
+   * @param ContainerAwareEventDispatcher $event_dispatcher
+   * @param ConfigManager $config_manager
+   * @param LockBackendInterface $lock
+   * @param TypedConfigManager $config_typed
+   * @param ModuleInstallerInterface $module_installer
+   * @param ThemeHandler $theme_handler
+   * @param TranslationManager $string_translation
+   * @param ModuleExtensionList $extension_list_module
    */
   public function __construct(ConfigFactoryInterface $config_factory, FileSystemInterface $file_system,
                               LoggerChannelFactoryInterface $logger_channel_factory, StateInterface $state,
@@ -293,7 +295,7 @@ class Service {
     }
 
     foreach ($configIds as $configId) {
-      $filename = drupal_get_path('module', $module) . "/config/$section/$configId.yml";
+      $filename = \Drupal::service('extension.list.module')->getPath($module) . "/config/$section/$configId.yml";
       if (!file_exists($filename)) {
         $this->logger->alert('Reload config was called for %module with section %section and config ID %configid, which does not exist.', [
           '%module' => $module,
