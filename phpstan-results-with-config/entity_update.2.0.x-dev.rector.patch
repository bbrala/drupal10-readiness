diff --git a/entity_update.module b/entity_update.module
index 5ede769..dbdd94d 100755
--- a/entity_update.module
+++ b/entity_update.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\entity_update\CustomEntityDefinitionUpdateManager;
 /**
  * @file
  * Entity update module (entity_update).
@@ -108,11 +112,11 @@ function entity_update_get_entity_changes() {
  * @param string $entity_type_id
  *   The entity type ID.
  *
- * @return \Drupal\Core\Entity\EntityTypeInterface
+ * @return EntityTypeInterface
  *   Entity type definition.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function entity_update_get_entity_type($entity_type_id) {
   $entity_type = \Drupal::entityTypeManager()->getStorage($entity_type_id);
@@ -122,7 +126,7 @@ function entity_update_get_entity_type($entity_type_id) {
 /**
  * Get entity definition update manager implemented by EntityUpdate.
  *
- * @return \Drupal\entity_update\CustomEntityDefinitionUpdateManager
+ * @return CustomEntityDefinitionUpdateManager
  *   Entity definition update manager.
  */
 function entity_update_get_entity_definition_update_manager() {
@@ -132,7 +136,7 @@ function entity_update_get_entity_definition_update_manager() {
 /**
  * Get entity definitions.
  *
- * @return \Drupal\Core\Entity\EntityTypeInterface[]
+ * @return EntityTypeInterface[]
  *   Entity definitions.
  */
 function entity_update_get_entity_definitions() {
diff --git a/src/Commands/EntityUpdatesCommands.php b/src/Commands/EntityUpdatesCommands.php
index 4c7cc3b..26ecafe 100644
--- a/src/Commands/EntityUpdatesCommands.php
+++ b/src/Commands/EntityUpdatesCommands.php
@@ -21,23 +21,23 @@ class EntityUpdatesCommands extends DrushCommands implements SiteAliasManagerAwa
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;
 
   /**
    * The entity definition update manager.
    *
-   * @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface
+   * @var EntityDefinitionUpdateManagerInterface
    */
   protected $entityDefinitionUpdateManager;
 
   /**
    * DevelEntityUpdatesCommands constructor.
    *
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
-   * @param \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $entity_definition_update_manager
+   * @param EntityDefinitionUpdateManagerInterface $entity_definition_update_manager
    *   The entity definition update manager.
    */
   public function __construct(ClassResolverInterface $class_resolver, EntityDefinitionUpdateManagerInterface $entity_definition_update_manager) {
diff --git a/src/CustomEntityDefinitionUpdateManager.php b/src/CustomEntityDefinitionUpdateManager.php
index 41602bc..fbeb85a 100644
--- a/src/CustomEntityDefinitionUpdateManager.php
+++ b/src/CustomEntityDefinitionUpdateManager.php
@@ -21,59 +21,59 @@ final class CustomEntityDefinitionUpdateManager implements ContainerInjectionInt
   /**
    * The entity definition update manager.
    *
-   * @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface
+   * @var EntityDefinitionUpdateManagerInterface
    */
   public $entityDefinitionUpdateManager;
 
   /**
    * The last installed schema repository.
    *
-   * @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface
+   * @var EntityLastInstalledSchemaRepositoryInterface
    */
   public $entityLastInstalledSchemaRepository;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   public $entityTypeManager;
 
   /**
    * The entity type listener service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeListenerInterface
+   * @var EntityTypeListenerInterface
    */
   public $entityTypeListener;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   public $entityFieldManager;
 
   /**
    * The field storage definition listener service.
    *
-   * @var \Drupal\Core\Field\FieldStorageDefinitionListenerInterface
+   * @var FieldStorageDefinitionListenerInterface
    */
   public $fieldStorageDefinitionListener;
 
   /**
    * Constructs a new EntityDefinitionUpdateManager.
    *
-   * @param \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $entity_definition_update_manager
+   * @param EntityDefinitionUpdateManagerInterface $entity_definition_update_manager
    *   The entity definition update manager.
-   * @param \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $entity_last_installed_schema_repository
+   * @param EntityLastInstalledSchemaRepositoryInterface $entity_last_installed_schema_repository
    *   The last installed schema repository service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityTypeListenerInterface $entity_type_listener
+   * @param EntityTypeListenerInterface $entity_type_listener
    *   The entity type listener interface.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionListenerInterface $field_storage_definition_listener
+   * @param FieldStorageDefinitionListenerInterface $field_storage_definition_listener
    *   The field storage definition listener service.
    */
   public function __construct(
@@ -182,9 +182,9 @@ final class CustomEntityDefinitionUpdateManager implements ContainerInjectionInt
    *   - EntityDefinitionUpdateManagerInterface::DEFINITION_CREATED
    *   - EntityDefinitionUpdateManagerInterface::DEFINITION_UPDATED
    *   - EntityDefinitionUpdateManagerInterface::DEFINITION_DELETED.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface|null $storage_definition
+   * @param FieldStorageDefinitionInterface|null $storage_definition
    *   (optional) The new field storage definition. Defaults to none.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface|null $original_storage_definition
+   * @param FieldStorageDefinitionInterface|null $original_storage_definition
    *   (optional) The original field storage definition. Defaults to none.
    */
   public function doFieldUpdate($op, FieldStorageDefinitionInterface $storage_definition = NULL, FieldStorageDefinitionInterface $original_storage_definition = NULL) {
diff --git a/src/EntityUpdateHelper.php b/src/EntityUpdateHelper.php
index 6667566..181bb6a 100644
--- a/src/EntityUpdateHelper.php
+++ b/src/EntityUpdateHelper.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_update;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 /**
  * Entity Update Helper functions.
  */
@@ -20,7 +22,7 @@ class EntityUpdateHelper {
    * @param bool $editable
    *   Is editable.
    *
-   * @return \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @return Config|ImmutableConfig
    *   Configuration object.
    */
   public static function getConfig($editable = FALSE) {
diff --git a/tests/modules/entity_update_tests/src/EntityUpdateTestHelper.php b/tests/modules/entity_update_tests/src/EntityUpdateTestHelper.php
index 4b1a980..9bfde51 100644
--- a/tests/modules/entity_update_tests/src/EntityUpdateTestHelper.php
+++ b/tests/modules/entity_update_tests/src/EntityUpdateTestHelper.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_update_tests;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Database\Database;
 
 /**
@@ -22,7 +24,7 @@ class EntityUpdateTestHelper {
    * @param bool $editable
    *   Readonly or Editable.
    *
-   * @return \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @return Config|ImmutableConfig
    *   The configuration object.
    */
   public static function getConfig($editable = FALSE) {
diff --git a/tests/src/Functional/EntityUpdateFunctionsTest.php b/tests/src/Functional/EntityUpdateFunctionsTest.php
index 4147dd8..7725ef7 100644
--- a/tests/src/Functional/EntityUpdateFunctionsTest.php
+++ b/tests/src/Functional/EntityUpdateFunctionsTest.php
@@ -32,7 +32,7 @@ class EntityUpdateFunctionsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Detele the entity created by install.
diff --git a/tests/src/Functional/EntityUpdateProgUpTest.php b/tests/src/Functional/EntityUpdateProgUpTest.php
index 908ebf5..77ebba6 100644
--- a/tests/src/Functional/EntityUpdateProgUpTest.php
+++ b/tests/src/Functional/EntityUpdateProgUpTest.php
@@ -32,7 +32,7 @@ class EntityUpdateProgUpTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Initialisation process.
     parent::setUp();
 
@@ -70,7 +70,7 @@ class EntityUpdateProgUpTest extends BrowserTestBase {
     else {
       // Your codes if update false.
     }
-    $this->assert($res, 'Entity schema has been updated successfully.');
+    $this->assertTrue($res, 'Entity schema has been updated successfully.');
 
     // Entity checking process : Compare with new list entities list.
     $ids_new = \Drupal::entityQuery('entity_update_tests_cnt')->execute();
@@ -83,7 +83,7 @@ class EntityUpdateProgUpTest extends BrowserTestBase {
     else {
       // Your codes if update false.
     }
-    $this->assert($res, 'Entity schema has been updated successfully.');
+    $this->assertTrue($res, 'Entity schema has been updated successfully.');
   }
 
   /**
@@ -107,7 +107,7 @@ class EntityUpdateProgUpTest extends BrowserTestBase {
     else {
       // Your codes if update false.
     }
-    $this->assert($res, 'Entity schema has been updated successfully.');
+    $this->assertTrue($res, 'Entity schema has been updated successfully.');
 
     // Entity checking process : Compare with new list entities list.
     $ids_new = \Drupal::entityQuery('entity_update_tests_cnt')->execute();
@@ -121,7 +121,7 @@ class EntityUpdateProgUpTest extends BrowserTestBase {
     else {
       // Your codes if update false.
     }
-    $this->assert($res, 'Entity schema has been updated successfully.');
+    $this->assertTrue($res, 'Entity schema has been updated successfully.');
   }
 
 }
diff --git a/tests/src/Functional/EntityUpdateUIAccessTest.php b/tests/src/Functional/EntityUpdateUIAccessTest.php
index cc88255..5dfbc33 100644
--- a/tests/src/Functional/EntityUpdateUIAccessTest.php
+++ b/tests/src/Functional/EntityUpdateUIAccessTest.php
@@ -28,7 +28,7 @@ class EntityUpdateUIAccessTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $permissions = [
