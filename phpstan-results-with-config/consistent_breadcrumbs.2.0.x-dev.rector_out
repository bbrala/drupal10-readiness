modules/contrib/consistent_breadcrumbs/src/BreadcrumbItem.php
modules/contrib/consistent_breadcrumbs/src/ConsistentBreadcrumbBuilderInterface.php
modules/contrib/consistent_breadcrumbs/src/ConsistentBreadcrumbManager.php
modules/contrib/consistent_breadcrumbs/src/ConsistentBreadcrumbManagerInterface.php
modules/contrib/consistent_breadcrumbs/src/ConsistentBreadcrumbs/PathBasedConsistentBreadcrumbBuilder.php
modules/contrib/consistent_breadcrumbs/src/ConsistentBreadcrumbs/TrivialConsistentBreadcrumbBuilder.php
modules/contrib/consistent_breadcrumbs/src/ConsistentBreadcrumbsRoutingHelper.php

5 files with changes
====================

1) modules/contrib/consistent_breadcrumbs/src/ConsistentBreadcrumbsRoutingHelper.php:63

    ---------- begin diff ----------
@@ @@
   /**
    * Create a RouteMatch from an Url object.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL.
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface|null $accessCacheability
+   * @param RefinableCacheableDependencyInterface|null $accessCacheability
    *   The access cacheability returned.
    * @param null $routeTitle
    *   The route title, returned by reference.
    *
-   * @return \Drupal\Core\Routing\RouteMatchInterface|null
+   * @return RouteMatchInterface|null
    *   The route match, or NULL if no route or current user has no access.
    */
   public function routeMatchFromUrl(Url $url, RefinableCacheableDependencyInterface &$accessCacheability = NULL, &$routeTitle = NULL) {
@@ @@
    *
    * Checking this in not trivial as the front page may have aliases.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The url.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/consistent_breadcrumbs/src/ConsistentBreadcrumbs/PathBasedConsistentBreadcrumbBuilder.php:15

    ---------- begin diff ----------
@@ @@
   protected string $frontPagePath;

   /**
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    */
   public function __construct(ConfigFactoryInterface $configFactory) {
     $this->configFactory = $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/consistent_breadcrumbs/src/ConsistentBreadcrumbManagerInterface.php:10

    ---------- begin diff ----------
@@ @@
   /**
    * Adds another breadcrumb builder.
    *
-   * @param \Drupal\consistent_breadcrumbs\ConsistentBreadcrumbBuilderInterface $builder
+   * @param ConsistentBreadcrumbBuilderInterface $builder
    *   The consistent breadcrumb builder to add.
    * @param int $priority
    *   Priority of the breadcrumb builder.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/consistent_breadcrumbs/src/ConsistentBreadcrumbManager.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The consistent breadcrumb builders, keyed by priority.
    *
-   * @var \Drupal\consistent_breadcrumbs\ConsistentBreadcrumbBuilderInterface[][]
+   * @var ConsistentBreadcrumbBuilderInterface[][]
    */
   private array $builders = [];

@@ @@
   /**
    * The sorted consistent breadcrumb builders.
    *
-   * @var \Drupal\consistent_breadcrumbs\ConsistentBreadcrumbBuilderInterface[]
+   * @var ConsistentBreadcrumbBuilderInterface[]
    */
   private ?array $sortedBuilders;

@@ @@
   /**
    * Returns the sorted array of breadcrumb builders.
    *
-   * @return \Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface[]
+   * @return BreadcrumbBuilderInterface[]
    *   An array of breadcrumb builder objects.
    */
   protected function getSortedBuilders(): array {
@@ @@
    * To compute ::applies(), we have to do all the work, wo we spare re-doing
    * everything on ::build().
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *
-   * @return \Drupal\Core\Breadcrumb\Breadcrumb
+   * @return Breadcrumb
    */
   private function cachedMaybeBuild(RouteMatchInterface $routeMatch): Breadcrumb {
     // Breadcrumb may not only depend on routeMatch, but also on query args.
@@ @@
   /**
    * Build the breadcrumbs if possible.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *
-   * @return \Drupal\Core\Breadcrumb\Breadcrumb
+   * @return Breadcrumb
    *   The breadcrumb object contains no links if no match.
    */
   private function maybeBuild(RouteMatchInterface $routeMatch): Breadcrumb {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/consistent_breadcrumbs/src/ConsistentBreadcrumbBuilderInterface.php:10

    ---------- begin diff ----------
@@ @@
   /**
    * Get next breadcrumb item.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The route match to get next breadcrumb for.
    * @param bool|null $isFinalItem
    *   Last slice info, returned by reference. You can (and usually) want to
@@ @@
    *   returned breadcrumb slice is '<front>'. If you want a different behavior,
    *   set this accordingly.
    *
-   * @return \Drupal\consistent_breadcrumbs\BreadcrumbItem
+   * @return BreadcrumbItem
    *   The ConsistentBreadcrumbItem carries the next breadcrumb link info:
    *   - On match, return the next link, with cacheability.
    *   - On non-match, return no link, with cacheability.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 5 files have been changed by Rector                                       

