modules/contrib/domain_registration/domain_registration.module
modules/contrib/domain_registration/src/DomainRegistrationPattern.php
modules/contrib/domain_registration/src/DomainRegistrationPatternInterface.php
modules/contrib/domain_registration/src/Form/DomainRegistrationAdminForm.php
modules/contrib/domain_registration/src/Tests/DomainRegistrationTest.php

2 files with changes
====================

1) modules/contrib/domain_registration/src/Tests/DomainRegistrationTest.php:24

    ---------- begin diff ----------
@@ @@
       'name' => $this->randomMachineName(),
       'mail' => $this->randomMachineName() . '@example.com',
     ];
+    $this->drupalGet('user/register');
     // Attempt to register a user with a whitelist email.
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('A welcome message'), t('Thank you for applying for an account'));
+    $this->submitForm($edit, t('Create new account'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('A welcome message'));
   }

   /**
@@ @@
       'name' => $this->randomMachineName(),
       'mail' => $this->randomMachineName() . '@example.com',
     ];
+    $this->drupalGet('user/register');
     // Attempt to register a user with a whitelist email.
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('A welcome message'), t('Thank you for applying for an account'));
+    $this->submitForm($edit, t('Create new account'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('A welcome message'));
   }

   /**
@@ @@
       'name' => $this->randomMachineName(),
       'mail' => $this->randomMachineName() . '@subdomain.example.com',
     ];
+    $this->drupalGet('user/register');
     // Attempt to register a user with a whitelist email.
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('A welcome message'), t('Thank you for applying for an account'));
+    $this->submitForm($edit, t('Create new account'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('A welcome message'));
   }

   /**
@@ @@
       'name' => $this->randomMachineName(),
       'mail' => $this->randomMachineName() . '@otherexample.com',
     ];
+    $this->drupalGet('user/register');
     // Attempt to register a user with a non whitelist email.
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('You are not allowed to register for this site.'), t('User was successfully denied registration.'));
+    $this->submitForm($edit, t('Create new account'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('You are not allowed to register for this site.'));
   }

   /**
@@ @@
       'name' => $this->randomMachineName(),
       'mail' => $this->randomMachineName() . '@example.com',
     ];
+    $this->drupalGet('user/register');
     // Attempt to register a user with a blacklist email.
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('You are not allowed to register for this site.'), t('User was successfully denied registration.'));
+    $this->submitForm($edit, t('Create new account'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('You are not allowed to register for this site.'));
   }

   /**
@@ @@
       'name' => $this->randomMachineName(),
       'mail' => $this->randomMachineName() . '@subdomain.example.com',
     ];
+    $this->drupalGet('user/register');
     // Attempt to register a user with blacklist email.
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('You are not allowed to register for this site.'), t('User was successfully denied registration.'));
+    $this->submitForm($edit, t('Create new account'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('You are not allowed to register for this site.'));
   }

   /**
@@ @@
       'name' => $this->randomMachineName(),
       'mail' => $this->randomMachineName() . '@example.com',
     ];
+    $this->drupalGet('user/register');
     // Attempt to register a user with a blacklist email.
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('foo bar baz'), t('Custom denial message was shown.'));
+    $this->submitForm($edit, t('Create new account'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('foo bar baz'));
   }

   /**
@@ @@
       'name' => $this->randomMachineName(),
       'mail' => $this->randomMachineName() . '@otherexample.com',
     ];
+    $this->drupalGet('user/register');
     // Attempt to register a user with a non blacklist email.
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('A welcome message'), t('Thank you for applying for an account'));
+    $this->submitForm($edit, t('Create new account'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('A welcome message'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/domain_registration/src/DomainRegistrationPattern.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new DomainRegistrationPattern object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 2 files have been changed by Rector                                       

