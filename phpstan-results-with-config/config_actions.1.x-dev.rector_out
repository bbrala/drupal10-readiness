modules/contrib/config_actions/config_actions.drush.inc
modules/contrib/config_actions/config_actions.module
modules/contrib/config_actions/src/Annotation/ConfigActionsPlugin.php
modules/contrib/config_actions/src/Annotation/ConfigActionsSource.php
modules/contrib/config_actions/src/Commands/ConfigActionsCommands.php
modules/contrib/config_actions/src/ConfigActionsPluginBase.php
modules/contrib/config_actions/src/ConfigActionsPluginInterface.php
modules/contrib/config_actions/src/ConfigActionsPluginManager.php
modules/contrib/config_actions/src/ConfigActionsService.php
modules/contrib/config_actions/src/ConfigActionsServiceInterface.php
modules/contrib/config_actions/src/ConfigActionsSourceBase.php
modules/contrib/config_actions/src/ConfigActionsSourceInterface.php
modules/contrib/config_actions/src/ConfigActionsSourceManager.php
modules/contrib/config_actions/src/ConfigActionsTransform.php
modules/contrib/config_actions/src/ConfigActionsValidateTrait.php
modules/contrib/config_actions/src/Plugin/ConfigActions/ConfigActionsAdd.php
modules/contrib/config_actions/src/Plugin/ConfigActions/ConfigActionsChange.php
modules/contrib/config_actions/src/Plugin/ConfigActions/ConfigActionsDefault.php
modules/contrib/config_actions/src/Plugin/ConfigActions/ConfigActionsDelete.php
modules/contrib/config_actions/src/Plugin/ConfigActions/ConfigActionsInclude.php
modules/contrib/config_actions/src/Plugin/ConfigActionsSource/ConfigActionsArray.php
modules/contrib/config_actions/src/Plugin/ConfigActionsSource/ConfigActionsFile.php
modules/contrib/config_actions/src/Plugin/ConfigActionsSource/ConfigActionsId.php
modules/contrib/config_actions/src/Plugin/ConfigActionsSource/ConfigActionsList.php
modules/contrib/config_actions/src/Plugin/ConfigActionsSource/ConfigActionsTemplate.php
modules/contrib/config_actions/tests/src/Kernel/ConfigActionsModuleTest.php
modules/contrib/config_actions/tests/src/Kernel/ConfigActionsPluginTest.php
modules/contrib/config_actions/tests/src/Kernel/ConfigActionsServiceTest.php
modules/contrib/config_actions/tests/src/Kernel/ConfigActionsSourceTest.php
modules/contrib/config_actions/tests/src/Unit/ConfigActionsPluginBaseTest.php
modules/contrib/config_actions/tests/src/Unit/ConfigActionsTransformTest.php

16 files with changes
=====================

1) modules/contrib/config_actions/tests/src/Unit/ConfigActionsPluginBaseTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_actions\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\config_actions\ConfigActionsPluginBase;
 use Drupal\config_actions\ConfigActionsServiceInterface;
 use Drupal\Tests\UnitTestCase;
@@ @@
 class ConfigActionsPluginBaseTest extends UnitTestCase {

   /**
-   * @var \Drupal\config_actions\ConfigActionsServiceInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var ConfigActionsServiceInterface|MockObject
    */
   protected $configActions;

@@ @@
    */
   protected $definition;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $container = new ContainerBuilder();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/config_actions/tests/src/Kernel/ConfigActionsSourceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_actions\Kernel;

+use Drupal\config_actions\ConfigActionsSourceManager;
+use Drupal\Core\File\FileSystemInterface;
+use Psr\Log\LoggerInterface;
+use Drupal\config_actions\ConfigActionsSourceInterface;
 use Drupal\Core\File\FileSystem;
 use Drupal\KernelTests\KernelTestBase;
 use org\bovigo\vfs\vfsStream;
@@ @@
   /**
    * The Source plugin manager.
    *
-   * @var \Drupal\config_actions\ConfigActionsSourceManager
+   * @var ConfigActionsSourceManager
    */
   protected $sourceManager;

@@ @@
   /**
    * The File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The Logger service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installConfig('system');
     $this->sourceManager = $this->container->get('plugin.manager.config_actions_source');
@@ @@
     $options = [
       'source' => $source,
     ];
-    /** @var \Drupal\config_actions\ConfigActionsSourceInterface $plugin */
+    /** @var ConfigActionsSourceInterface $plugin */
     $plugin = $this->sourceManager->createInstance('array', $options);

     $this->assertTrue($plugin->detect($source), 'Source detected');
@@ @@
     $options = [
       'source' => $source,
     ];
-    /** @var \Drupal\config_actions\ConfigActionsSourceInterface $plugin */
+    /** @var ConfigActionsSourceInterface $plugin */
     $plugin = $this->sourceManager->createInstance('id', $options);

     $this->assertTrue($plugin->detect($source), 'Source detected');
@@ @@
     $source = 'field.field.node.image.yml';
     $options = [
       'source' => $source,
-      'base' => DRUPAL_ROOT . '/' . drupal_get_path('module', 'test_config_actions'),
+      'base' => DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('test_config_actions'),

     ];
-    /** @var \Drupal\config_actions\ConfigActionsSourceInterface $plugin */
+    /** @var ConfigActionsSourceInterface $plugin */
     $plugin = $this->sourceManager->createInstance('file', $options);

     $this->assertTrue($plugin->detect($source), 'Source detected');
@@ @@
     $this->assertEquals('node.@bundle@.@field_name@', $data['id']);

     // Test file saving
-    $path = DRUPAL_ROOT . drupal_get_path('module', 'test_config_actions');
+    $path = DRUPAL_ROOT . \Drupal::service('extension.list.module')->getPath('test_config_actions');
     $config_file = 'myactions.yml';
     $filename = $path . '/' . $config_file;
     if (file_exists($filename)) {
@@ @@

     // Next, perform the same test but instead of using the base_path, use
     // an absolute path in the source filename.
-    $base_path = $path . '/' . drupal_get_path('module', 'test_config_actions');
+    $base_path = $path . '/' . \Drupal::service('extension.list.module')->getPath('test_config_actions');
     $config_file = 'myactions.yml';
     $options = [
       'source' => $base_path . '/' . $config_file,
@@ @@
     ];
     $options = [
       'source' => $source,
-      'base' => DRUPAL_ROOT . '/' . drupal_get_path('module', 'test_config_actions'),
+      'base' => DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('test_config_actions'),
     ];

     // First, test that the File is loaded first
-    /** @var \Drupal\config_actions\ConfigActionsSourceInterface $plugin */
+    /** @var ConfigActionsSourceInterface $plugin */
     $plugin = $this->sourceManager->createInstance('list', $options);

     $this->assertTrue($plugin->detect($source), 'Source detected');
@@ @@
     ];
     $options = [
       'source' => $source,
-      'base' => DRUPAL_ROOT . '/' . drupal_get_path('module', 'test_config_actions'),
+      'base' => DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('test_config_actions'),
     ];

-    /** @var \Drupal\config_actions\ConfigActionsSourceInterface $plugin */
+    /** @var ConfigActionsSourceInterface $plugin */
     $plugin = $this->sourceManager->createInstance('list', $options);

     $this->assertTrue($plugin->detect($source), 'Source detected');
@@ @@
     ];
     $options = [
       'source' => $source,
-      'base' => DRUPAL_ROOT . '/' . drupal_get_path('module', 'test_config_actions'),
+      'base' => DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('test_config_actions'),
     ];

-    /** @var \Drupal\config_actions\ConfigActionsSourceInterface $plugin */
+    /** @var ConfigActionsSourceInterface $plugin */
     $plugin = $this->sourceManager->createInstance('list', $options);

     $this->assertTrue($plugin->detect($source), 'Source detected');
@@ @@
     ];
     $options = [
       'source' => $source,
-      'base' => DRUPAL_ROOT . '/' . drupal_get_path('module', 'test_config_actions'),
+      'base' => DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath('test_config_actions'),
     ];

-    /** @var \Drupal\config_actions\ConfigActionsSourceInterface $plugin */
+    /** @var ConfigActionsSourceInterface $plugin */
     $plugin = $this->sourceManager->createInstance('list', $options);

     $this->assertTrue($plugin->detect($source), 'Source detected');
@@ @@
     $options = [
       'source' => $source,
     ];
-    /** @var \Drupal\config_actions\ConfigActionsSourceInterface $plugin */
+    /** @var ConfigActionsSourceInterface $plugin */
     $plugin = $this->sourceManager->createInstance('template', $options);

     $this->assertFalse($plugin->detect($source), 'No autodetection');
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/config_actions/tests/src/Kernel/ConfigActionsServiceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_actions\Kernel;

+use Drupal\config_actions\ConfigActionsService;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\config_actions\ConfigActionsTransform;
@@ @@
   protected $strictConfigSchema = FALSE;

   /**
-   * @var \Drupal\config_actions\ConfigActionsService
+   * @var ConfigActionsService
    */
   protected $configActions;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('system');
     $this->installConfig('node');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/config_actions/tests/src/Kernel/ConfigActionsPluginTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_actions\Kernel;

+use Drupal\config_actions\ConfigActionsService;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\config_actions\ConfigActionsTransform;
@@ @@
   protected $strictConfigSchema = FALSE;

   /**
-   * @var \Drupal\config_actions\ConfigActionsService
+   * @var ConfigActionsService
    */
   protected $configActions;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('system');
     $this->installConfig('node');
@@ @@
       'replace' => $replace,
     ];

-    $path = drupal_get_path('module', 'test_config_actions') . '/config/templates';
+    $path = \Drupal::service('extension.list.module')->getPath('test_config_actions') . '/config/templates';
     $source = $path . '/field.storage.node.image.yml';
     $orig_config = Yaml::decode(file_get_contents($source));
     $orig_config = ConfigActionsTransform::replace($orig_config, $replace);
@@ @@
       'replace' => $replace,
     ];

-    $path = drupal_get_path('module', 'test_config_actions') . '/config/templates';
+    $path = \Drupal::service('extension.list.module')->getPath('test_config_actions') . '/config/templates';
     $source = $path . '/field.field.node.image.yml';
     $orig_config = Yaml::decode(file_get_contents($source));
     $orig_config_article = ConfigActionsTransform::replace($orig_config, $replace_article);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/config_actions/tests/src/Kernel/ConfigActionsModuleTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\config_actions\Kernel;

+use Drupal\config_actions\ConfigActionsService;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   protected $strictConfigSchema = FALSE;

   /**
-   * @var \Drupal\config_actions\ConfigActionsService
+   * @var ConfigActionsService
    */
   protected $configActions;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->configActions = \Drupal::service('config_actions');
     parent::installConfig(['system']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/config_actions/src/Plugin/ConfigActionsSource/ConfigActionsTemplate.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration storage.
    *
-   * @var \Drupal\Core\Config\ExtensionInstallStorage
+   * @var ExtensionInstallStorage
    */
   protected $templateStorage;

@@ @@
    *   The ConfigActionsService from the container.
    * @param FileSystem $file_system
    *   The FileSystem from the container.
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The active configuration storage.
    * @param string $profile
    *   The current installation profile.
@@ @@
   /**
    * Create a plugin instance from the container
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/config_actions/src/Plugin/ConfigActionsSource/ConfigActionsId.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_actions\Plugin\ConfigActionsSource;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\config_actions\ConfigActionsSourceBase;
 use Drupal\config_actions\ConfigActionsServiceInterface;
 use Drupal\Core\Config\ConfigFactory;
@@ @@
 class ConfigActionsId extends ConfigActionsSourceBase {

   /**
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $configStorage;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

   /**
    * The cached configuration item for the source.
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $configItem;

@@ @@
    *   The ConfigActionsService from the container.
    * @param ConfigFactory $config_factory
    *   The ConfigFactory from the container.
-   * @param \Drupal\Core\Config\StorageInterface $config_storage
+   * @param StorageInterface $config_storage
    *   The configuration storage.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The configuration manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition,
@@ @@
   /**
    * Create a plugin instance from the container
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
@@ @@
   /**
    * Fetch the configuration item
    *
-   * @return \Drupal\Core\Config\Config|\Drupal\Core\Config\Config
+   * @return Config|Config
    */
   protected function getConfigItem() {
     if (!isset($this->configItem)) {
@@ @@
       // Save any related entity for this config.
       // Taken from ConfigInstaller::createConfiguration()
       if ($entity_type = $this->configManager->getEntityTypeIdByName($this->sourceId)) {
-        /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage */
+        /** @var ConfigEntityStorageInterface $entity_storage */
         $entity_storage = $this->configManager
           ->getEntityTypeManager()
           ->getStorage($entity_type);
@@ @@
             ->getConfigPrefix());
           $entity = $entity_storage->load($id);
           $this->messenger->addMessage($this->t('Updated %name', array('%name' => $this->sourceId)));
-          /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+          /** @var ConfigEntityInterface $entity */
           $entity = $entity_storage->updateFromStorageRecord($entity, $config_item->get());
         }
         else {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/config_actions/src/Plugin/ConfigActionsSource/ConfigActionsFile.php:26

    ---------- begin diff ----------
@@ @@
   const CONFIG_TEMPLATE_DIRECTORY = 'config/templates';

   /**
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * Create a plugin instance from the container
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/config_actions/src/ConfigActionsSourceManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   An object that implements CacheBackendInterface.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   An object that implements ModuleHandlerInterface.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/config_actions/src/ConfigActionsSourceBase.php:12

    ---------- begin diff ----------
@@ @@
 abstract class ConfigActionsSourceBase extends PluginBase implements ConfigActionsSourceInterface, ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\config_actions\ConfigActionsServiceInterface
+   * @var ConfigActionsServiceInterface
    */
   protected $actionService;

@@ @@
   /**
    * Create a plugin instance from the container
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/config_actions/src/ConfigActionsService.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The Action plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;

@@ @@
   /**
    * The Source plugin manager.
    *
-   * @var \Drupal\config_actions\ConfigActionsSourceManager
+   * @var ConfigActionsSourceManager
    */
   protected $sourceManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new ConfigActionsService object.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager
+   * @param PluginManagerInterface $plugin_manager
    *   The config_actions plugin manager.
-   * @param \Drupal\config_actions\ConfigActionsSourceManager $source_manager
+   * @param ConfigActionsSourceManager $source_manager
    *   The ConfigActionsSourceManager from the container.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(PluginManagerInterface $plugin_manager, ConfigActionsSourceManager $source_manager, ModuleHandlerInterface $module_handler) {
@@ @@
     }

     // Create a new Source plugin
-    /** @var \Drupal\config_actions\ConfigActionsSourceInterface $source_plugin */
+    /** @var ConfigActionsSourceInterface $source_plugin */
     $source_plugin = NULL;
     $options = array(
       'source' => $source,
@@ @@
       // Otherwise, run the auto detection on all plugins till we match.
       uasort($definitions, array(SortArray::class, 'sortByWeightElement'));
       foreach ($definitions as $plugin_id => $definition) {
-        /** @var \Drupal\config_actions\ConfigActionsSourceInterface $plugin */
+        /** @var ConfigActionsSourceInterface $plugin */
         $plugin = $this->sourceManager->createInstance($plugin_id, $options);
         if ($plugin->detect($source)) {
           $source_plugin = $plugin;
@@ @@
           (!empty($options['plugin']) ? $options['plugin'] : 'default');

         // Get Plugin instance for this action.
-        /** @var \Drupal\config_actions\ConfigActionsPluginInterface $plugin */
+        /** @var ConfigActionsPluginInterface $plugin */
         $plugin = $this->pluginManager->createInstance($plugin_id, $options);
         if (!isset($plugin)) {
           throw new \Exception($this->t('Could not find plugin: @name.', ['@name' => $plugin_id]));
@@ @@
         $actions = $this->readActions($action_file['path']);
         // Rebase so any includes look in the specified module.
         $actions['module'] = !empty($actions['module']) ? $actions['module'] : $action_file['module'];
-        $actions['base'] = DRUPAL_ROOT . '/' . drupal_get_path('module', $actions['module']);
+        $actions['base'] = DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath($actions['module']);
         // Use file key as default source.
         $actions['source'] = !empty($actions['source']) ? $actions['source'] : $action_file['file'];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/config_actions/src/ConfigActionsPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   An object that implements CacheBackendInterface.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   An object that implements ModuleHandlerInterface.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/config_actions/src/ConfigActionsPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_actions;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   protected $pluginData = [];

   /**
-   * @var \Drupal\config_actions\ConfigActionsServiceInterface
+   * @var ConfigActionsServiceInterface
    */
   protected $actionService;

@@ @@

   /**
    * Optional config corresponding to id.
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Create a plugin instance from the container
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
@@ @@
     $result = [];

     if (!empty($this->module)) {
-      $this->base = DRUPAL_ROOT . '/' . drupal_get_path('module', $this->module);
+      $this->base = DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath($this->module);
     }

     // Perform any property substitution in the loaded defaults.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/config_actions/src/Commands/ConfigActionsCommands.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The config_actions service.
    *
-   * @var \Drupal\config_actions\ConfigActionsServiceInterface
+   * @var ConfigActionsServiceInterface
    */
   protected $configActions;

@@ @@
   /**
    * ConfigActionsCommands constructor.
    *
-   * @param \Drupal\config_actions\ConfigActionsServiceInterface $config_actions
+   * @param ConfigActionsServiceInterface $config_actions
    *   The config_actions service.
    */
   public function __construct(ConfigActionsServiceInterface $config_actions) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/config_actions/config_actions.module:18

    ---------- begin diff ----------
@@ @@
     return;
   }
   foreach ($modules as $module_name) {
-    $action_dir = DRUPAL_ROOT . '/' . drupal_get_path('module', $module_name) . '/' . ConfigActionsServiceInterface::CONFIG_ACTIONS_CONFIG_DIR;
+    $action_dir = DRUPAL_ROOT . '/' . \Drupal::service('extension.list.module')->getPath($module_name) . '/' . ConfigActionsServiceInterface::CONFIG_ACTIONS_CONFIG_DIR;
     if (is_dir($action_dir)) {
       $configActions = \Drupal::service('config_actions');
       // Enable autoExecute mode to skip any actions marked with "auto:false"
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


16) modules/contrib/config_actions/config_actions.drush.inc:39

    ---------- begin diff ----------
@@ @@
  * Drush command callback for config-actions-list.
  */
 function drush_config_actions_list() {
-  /** @var \Drupal\config_actions\ConfigActionsServiceInterface $config_actions */
+  /** @var ConfigActionsServiceInterface $config_actions */
   $config_actions = \Drupal::service('config_actions');

   $args = func_get_args();
@@ @@
  * Drush command callback for config-actions-run.
  */
 function drush_config_actions_run() {
-  /** @var \Drupal\config_actions\ConfigActionsServiceInterface $config_actions */
+  /** @var ConfigActionsServiceInterface $config_actions */
   $config_actions = \Drupal::service('config_actions');

   $args = func_get_args();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 16 files have been changed by Rector                                      

