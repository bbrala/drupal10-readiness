modules/contrib/social_feed_fetcher/social_feed_fetcher.module
modules/contrib/social_feed_fetcher/src/Annotation/PluginNodeProcessor.php
modules/contrib/social_feed_fetcher/src/Annotation/SocialDataProvider.php
modules/contrib/social_feed_fetcher/src/Commands/SocialFeedFetcherCommands.php
modules/contrib/social_feed_fetcher/src/Controller/AuthorizationCodeController.php
modules/contrib/social_feed_fetcher/src/Controller/AuthorizationInstagramController.php
modules/contrib/social_feed_fetcher/src/Form/SocialPostSettingsForm.php
modules/contrib/social_feed_fetcher/src/ImportSocialFeedService.php
modules/contrib/social_feed_fetcher/src/Plugin/NodeProcessor/FacebookNodeProcessor.php
modules/contrib/social_feed_fetcher/src/Plugin/NodeProcessor/InstagramNodeProcessor.php
modules/contrib/social_feed_fetcher/src/Plugin/NodeProcessor/LinkedinNodeProcessor.php
modules/contrib/social_feed_fetcher/src/Plugin/NodeProcessor/TwitterNodeProcessor.php
modules/contrib/social_feed_fetcher/src/Plugin/QueueWorker/SocialPostFacebookQueueWorker.php
modules/contrib/social_feed_fetcher/src/Plugin/QueueWorker/SocialPostInstagramQueueWorker.php
modules/contrib/social_feed_fetcher/src/Plugin/QueueWorker/SocialPostLinkedinQueueWorker.php
modules/contrib/social_feed_fetcher/src/Plugin/QueueWorker/SocialPostQueueWorkerBase.php
modules/contrib/social_feed_fetcher/src/Plugin/QueueWorker/SocialPostTwitterQueueWorker.php
modules/contrib/social_feed_fetcher/src/Plugin/SocialDataProvider/FacebookDataProvider.php
modules/contrib/social_feed_fetcher/src/Plugin/SocialDataProvider/InstagramDataProvider.php
modules/contrib/social_feed_fetcher/src/Plugin/SocialDataProvider/LinkedinDataProvider.php
modules/contrib/social_feed_fetcher/src/Plugin/SocialDataProvider/TwitterDataProvider.php
modules/contrib/social_feed_fetcher/src/PluginNodeProcessorManager.php
modules/contrib/social_feed_fetcher/src/PluginNodeProcessorPluginBase.php
modules/contrib/social_feed_fetcher/src/PluginNodeProcessorPluginInterface.php
modules/contrib/social_feed_fetcher/src/ProviderDataFactory/InstagramDataProvideFactory.php
modules/contrib/social_feed_fetcher/src/ProviderDataFactory/LinkedinDataProviderFactory.php
modules/contrib/social_feed_fetcher/src/SocialDataProviderInterface.php
modules/contrib/social_feed_fetcher/src/SocialDataProviderManager.php
modules/contrib/social_feed_fetcher/src/SocialDataProviderPluginBase.php

22 files with changes
=====================

1) modules/contrib/social_feed_fetcher/src/SocialDataProviderPluginBase.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Configuration definition.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * Setter for Config.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   Configuration definition.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/social_feed_fetcher/src/SocialDataProviderManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher;

+use Drupal\Core\Config\Config;
 use Drupal\Component\Plugin\Factory\DefaultFactory;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Config definition.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/social_feed_fetcher/src/ProviderDataFactory/LinkedinDataProviderFactory.php:3

    ---------- begin diff ----------
@@ @@
 namespace Drupal\social_feed_fetcher\ProviderDataFactory;


+use Drupal\Core\Config\Config;
+use LinkedIn\Client;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
 class LinkedinDataProviderFactory {

   /**
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   private $config;

@@ @@
   /**
    * LinkedinClientFactory constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    */
   public function __construct(ConfigFactoryInterface $configFactory) {
     $this->config = $configFactory->get('social_feed_fetcher.settings');
@@ @@


   public function createLinkedinClient() {
-    return new \LinkedIn\Client(
+    return new Client(
       $this->config->get('linkedin_client_id'),
       $this->config->get('linkedin_secret_app')
     );
   }
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/social_feed_fetcher/src/PluginNodeProcessorPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher;

+use Drupal\Core\File\FileSystemInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ @@
   /**
    * Configuration definition.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * EntityStorageInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|mixed|object
+   * @var EntityStorageInterface|mixed|object
    */
   protected $entityStorage;

@@ @@
   /**
    * Guzzle client definition.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * FileSystemInterface definition.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Setter for entityStorage.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $enitytStorage
+   * @param EntityStorageInterface $enitytStorage
    *   EntityStorageInterface definition.
    *
    * @return \Drupal\social_feed_fetcher\PluginNodeProcessorPluginBase
@@ @@
   /**
    * Setter for Config.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   Config definition.
    *
    * @return $this
@@ @@
   /**
    * Setter for httpClient.
    *
-   * @param \GuzzleHttp\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   Client definition.
    *
    * @return $this
@@ @@
   /**
    * Get FileSystemInterface.
    *
-   * @return \Drupal\Core\File\FileSystemInterface
+   * @return FileSystemInterface
    *   FileSystemInterface definition.
    */
   public function getFileSystem() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/social_feed_fetcher/src/PluginNodeProcessorManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Plugin\Factory\DefaultFactory;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Drupal\Core\Config\Config definition.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * Drupal\Core\Entity\EntityStorageInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|mixed|object
+   * @var EntityStorageInterface|mixed|object
    */
   protected $entityStorage;

@@ @@
   /**
    * GuzzleHttp\ClientInterface definition.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * Drupal\Core\File\FileSystemInterface definition.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/social_feed_fetcher/src/Plugin/SocialDataProvider/TwitterDataProvider.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Twitter OAuth client.
    *
-   * @var \Abraham\TwitterOAuth\TwitterOAuth
+   * @var TwitterOAuth
    */
   protected $twitter;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/social_feed_fetcher/src/Plugin/SocialDataProvider/LinkedinDataProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher\Plugin\SocialDataProvider;

+use GuzzleHttp\Client;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\social_feed_fetcher\SocialDataProviderPluginBase;
 use LinkedIn\AccessToken;

@@ @@
   /**
    * Twitter OAuth client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $linkedin;

@@ @@
    * @return array
    *   An array of posts.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function getPosts($count) {
     $access = \Drupal::state()->getMultiple(['access_token', 'expires_in', 'expires_in_save']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/social_feed_fetcher/src/Plugin/SocialDataProvider/InstagramDataProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher\Plugin\SocialDataProvider;

+use EspressoDev\InstagramBasicDisplay\InstagramBasicDisplay;
 use Drupal\social_feed_fetcher\SocialDataProviderPluginBase;

 /**
@@ @@
   /**
    * Instagram client.
    *
-   * @var \EspressoDev\InstagramBasicDisplay\InstagramBasicDisplay
+   * @var InstagramBasicDisplay
    */
   protected $instagram;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/social_feed_fetcher/src/Plugin/QueueWorker/SocialPostTwitterQueueWorker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher\Plugin\QueueWorker;

+use Drupal\social_feed_fetcher\Plugin\NodeProcessor\TwitterNodeProcessor;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\social_feed_fetcher\PluginNodeProcessorManager;
@@ @@
    * {@inheritdoc}
    */
   public function processItem($data) {
-    /** @var \Drupal\social_feed_fetcher\Plugin\NodeProcessor\TwitterNodeProcessor $twitter_node_processor */
+    /** @var TwitterNodeProcessor $twitter_node_processor */
     $twitter_node_processor = $this->nodeProcessor->createInstance('twitter_processor');
     $twitter_node_processor->processItem('twitter', $data);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/social_feed_fetcher/src/Plugin/QueueWorker/SocialPostQueueWorkerBase.php:10

    ---------- begin diff ----------
@@ @@
 class SocialPostQueueWorkerBase extends QueueWorkerBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\social_feed_fetcher\PluginNodeProcessorManager
+   * @var PluginNodeProcessorManager
    */
   public $nodeProcessor;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/social_feed_fetcher/src/Plugin/QueueWorker/SocialPostLinkedinQueueWorker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher\Plugin\QueueWorker;

+use Drupal\social_feed_fetcher\Plugin\NodeProcessor\LinkedinNodeProcessor;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\social_feed_fetcher\PluginNodeProcessorManager;
@@ @@
    * {@inheritdoc}
    */
   public function processItem($data) {
-    /** @var \Drupal\social_feed_fetcher\Plugin\NodeProcessor\LinkedinNodeProcessor $linkedin_processor */
+    /** @var LinkedinNodeProcessor $linkedin_processor */
     $linkedin_processor = $this->nodeProcessor->createInstance('linkedin_processor');
     $linkedin_processor->processItem('linkedin', $data);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/social_feed_fetcher/src/Plugin/QueueWorker/SocialPostInstagramQueueWorker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher\Plugin\QueueWorker;

+use Drupal\social_feed_fetcher\Plugin\NodeProcessor\InstagramNodeProcessor;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\social_feed_fetcher\PluginNodeProcessorManager;
@@ @@
    * {@inheritdoc}
    */
   public function processItem($data) {
-    /** @var \Drupal\social_feed_fetcher\Plugin\NodeProcessor\InstagramNodeProcessor $instagram_processor */
+    /** @var InstagramNodeProcessor $instagram_processor */
     $instagram_processor = $this->nodeProcessor->createInstance('instagram_processor');
     $instagram_processor->processItem('instagram', $data);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/social_feed_fetcher/src/Plugin/QueueWorker/SocialPostFacebookQueueWorker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher\Plugin\QueueWorker;

+use Drupal\social_feed_fetcher\Plugin\NodeProcessor\FacebookNodeProcessor;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\social_feed_fetcher\PluginNodeProcessorManager;
@@ @@
    * {@inheritdoc}
    */
   public function processItem($data) {
-    /** @var \Drupal\social_feed_fetcher\Plugin\NodeProcessor\FacebookNodeProcessor $facebook_node_processor */
+    /** @var FacebookNodeProcessor $facebook_node_processor */
     $facebook_node_processor = $this->nodeProcessor->createInstance('facebook_processor');
     $facebook_node_processor->processItem('facebook', $data);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/social_feed_fetcher/src/Plugin/NodeProcessor/TwitterNodeProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher\Plugin\NodeProcessor;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\social_feed_fetcher\PluginNodeProcessorPluginBase;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function processItem($source, $data_item) {
     if (!$this->isPostIdExist($data_item->id)) {
@@ @@
     $uri = $path . '/' . $name;
     $this->fileSystem->prepareDirectory($path, FileSystemInterface::CREATE_DIRECTORY);
     $uri = explode('?', $uri);
-    if (!file_save_data($data, $uri[0], FileSystemInterface::EXISTS_REPLACE)) {
+    if (!\Drupal::service('file.repository')->writeData($data, $uri[0], FileSystemInterface::EXISTS_REPLACE)) {
       return 0;
     }
-    return file_save_data($data, $uri[0], FileSystemInterface::EXISTS_REPLACE)->id();
+    return \Drupal::service('file.repository')->writeData($data, $uri[0], FileSystemInterface::EXISTS_REPLACE)->id();
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/social_feed_fetcher/src/Plugin/NodeProcessor/LinkedinNodeProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher\Plugin\NodeProcessor;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\social_feed_fetcher\PluginNodeProcessorPluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function processItem($source, $data_item) {
     $item = $data_item['updateContent']['companyStatusUpdate']['share'];
@@ @@
     $uri = $path . '/' . $name;
     $this->fileSystem->prepareDirectory($path, FileSystemInterface::CREATE_DIRECTORY);
     $uri = explode('?', $uri);
-    if (!file_save_data($data, $uri[0], FileSystemInterface::EXISTS_REPLACE)) {
+    if (!\Drupal::service('file.repository')->writeData($data, $uri[0], FileSystemInterface::EXISTS_REPLACE)) {
       return 0;
     }
-    return file_save_data($data, $uri[0], FileSystemInterface::EXISTS_REPLACE)->id();
+    return \Drupal::service('file.repository')->writeData($data, $uri[0], FileSystemInterface::EXISTS_REPLACE)->id();
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/social_feed_fetcher/src/Plugin/NodeProcessor/InstagramNodeProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher\Plugin\NodeProcessor;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function processItem($source, $data_item) {
     if (!$this->isPostIdExist($data_item['raw']->id)) {
@@ @@
     $uri = $path . '/' . $name;
     $this->fileSystem->prepareDirectory($path, FileSystemInterface::CREATE_DIRECTORY);
     $uri = explode('?', $uri);
-    return file_save_data($data, $uri[0], FileSystemInterface::EXISTS_REPLACE)->id();
+    return \Drupal::service('file.repository')->writeData($data, $uri[0], FileSystemInterface::EXISTS_REPLACE)->id();
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/social_feed_fetcher/src/Plugin/NodeProcessor/FacebookNodeProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher\Plugin\NodeProcessor;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\social_feed_fetcher\PluginNodeProcessorPluginBase;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function processItem($source, $data_item) {
     if (!$this->isPostIdExist($data_item['id'])) {
@@ @@
     $data = $response->getBody();
     $uri = $path . '/' . mt_rand() . '.jpg';
     $this->fileSystem->prepareDirectory($path, FileSystemInterface::CREATE_DIRECTORY);
-    return file_save_data($data, $uri, FileSystemInterface::EXISTS_REPLACE)->id();
+    return \Drupal::service('file.repository')->writeData($data, $uri, FileSystemInterface::EXISTS_REPLACE)->id();
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/social_feed_fetcher/src/ImportSocialFeedService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher;

+use Drupal\Core\Config\Config;
+use GuzzleHttp\Exception\GuzzleException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\social_feed_fetcher\Plugin\SocialDataProvider\FacebookDataProvider;
+use Drupal\social_feed_fetcher\Plugin\SocialDataProvider\TwitterDataProvider;
+use Drupal\social_feed_fetcher\Plugin\SocialDataProvider\InstagramDataProvider;
+use Drupal\social_feed_fetcher\Plugin\SocialDataProvider\LinkedinDataProvider;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * Config definition.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   private $config;

@@ @@
   /**
    * QueueFactory  definition.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   private $queue;

@@ @@
   /**
    * SocialDataProviderManager definition.
    *
-   * @var \Drupal\social_feed_fetcher\SocialDataProviderManager
+   * @var SocialDataProviderManager
    */
   private $socialDataProvider;

@@ @@
   /**
    * State definition.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   private $state;

@@ @@
   /**
    * LoggerInterface definition.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
   /**
    * MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * ImportSocialFeedService constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   ConfigFactory definition.
-   * @param \Drupal\Core\Queue\QueueFactory $queueFactory
+   * @param QueueFactory $queueFactory
    *   QueueFactory definition.
-   * @param \Drupal\social_feed_fetcher\SocialDataProviderManager $socialDataProviderManager
+   * @param SocialDataProviderManager $socialDataProviderManager
    *   SocialDataProviderManager definition.
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *   State definition.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger definition.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger definition.
    */
   public function __construct(ConfigFactory $config_factory, QueueFactory $queueFactory, SocialDataProviderManager $socialDataProviderManager, State $state, LoggerInterface $logger, MessengerInterface $messenger) {
@@ @@
    * Pull social feeds, as configured by module settings.
    *
    * @throws \Exception
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function import() {

@@ @@
   /**
    * Make import.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \GuzzleHttp\Exception\GuzzleException|\Facebook\Exceptions\FacebookSDKException
+   * @throws PluginException
+   * @throws GuzzleException|\Facebook\Exceptions\FacebookSDKException
    */
   protected function doImport() {
     $facebook_count = 0;
@@ @@
    * @return int|void
    *   Count of imported posts.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @throws \Facebook\Exceptions\FacebookSDKException
    */
   protected function doFacebookImport() {
@@ @@
     // Get facebook posts, if enabled.
     $facebook_count = 0;
     $facebook_queue = $this->queue->get('social_posts_facebook_queue_worker');
-    /** @var \Drupal\social_feed_fetcher\Plugin\SocialDataProvider\FacebookDataProvider $facebook */
+    /** @var FacebookDataProvider $facebook */
     $facebook = $this->socialDataProvider->createInstance('facebook');
     $facebook->setClient();
     $posts_count_num = $this->config->get('fb_no_feeds');
@@ @@
    * @return int
    *   Imported posts count.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   private function doTweeterImport() {
     $twitter_count = 0;
     $twitter_queue = $this->queue->get('social_posts_twitter_queue_worker');
-    /** @var \Drupal\social_feed_fetcher\Plugin\SocialDataProvider\TwitterDataProvider $twitter */
+    /** @var TwitterDataProvider $twitter */
     $twitter = $this->socialDataProvider->createInstance('twitter');
     $twitter->setTimelines($this->config->get('timeline'), $this->config->get('screen_name'));
     $twitter->setClient();
@@ @@
    * @return int
    *   Imported posts count.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @throws \Exception
    */
   private function doInstagrammImport() {
     $instagram_count = 0;
     $instagram_queue = $this->queue->get('social_posts_instagram_queue_worker');
-    /** @var \Drupal\social_feed_fetcher\Plugin\SocialDataProvider\InstagramDataProvider $instagram */
+    /** @var InstagramDataProvider $instagram */
     $instagram = $this->socialDataProvider->createInstance('instagram');
     $instagram->setClient();
     try {
@@ @@
    * @return int
    *   Imported posts count.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws PluginException
+   * @throws GuzzleException
    */
   private function doLinkedinImport() {
     $linkedin_count = 0;
     $linkedin_posts = [];
     $linkedin_queue = $this->queue->get('social_posts_linkedin_queue_worker');
-    /** @var \Drupal\social_feed_fetcher\Plugin\SocialDataProvider\LinkedinDataProvider $linkedin */
+    /** @var LinkedinDataProvider $linkedin */
     $linkedin = $this->socialDataProvider->createInstance('linkedin');
     $linkedin->setFeed($this->config->get('linkedin_feed_type'));
     if ($this->config->get('linkedin_feed_type') === 'companies') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/social_feed_fetcher/src/Form/SocialPostSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher\Form;

+use LinkedIn\Client;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\CronInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The cron service.
    *
-   * @var \Drupal\Core\CronInterface
+   * @var CronInterface
    */
   protected $cron;

@@ @@
   /**
    * The state keyvalue collection.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   private $requestTime;

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
       ],
     ];
     if ($config->get('linkedin_client_id') && $config->get('linkedin_secret_app')) {
-      /** @var \LinkedIn\Client $linkedin */
+      /** @var Client $linkedin */
       $linkedin = \Drupal::service('social_feed_fetcher.linkedin.client');
       // Define scope permissions.
       $scopes = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/social_feed_fetcher/src/Controller/AuthorizationInstagramController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher\Controller;

+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The instagram client.
    *
-   * @var \EspressoDev\InstagramBasicDisplay\InstagramBasicDisplay
+   * @var InstagramBasicDisplay
    */
   protected $instagramClient;

@@ @@
   /**
    * AuthorizationCodeController constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   MessengerInterface definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   RequestStack definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   ConfigFactoryInterface definition.
-   * @param \EspressoDev\InstagramBasicDisplay\InstagramBasicDisplay $instagramBasicDisplay
+   * @param InstagramBasicDisplay $instagramBasicDisplay
    *   The instagram client.
    */
   public function __construct(MessengerInterface $messenger, RequestStack $requestStack, ConfigFactoryInterface $configFactory, InstagramBasicDisplay $instagramBasicDisplay) {
@@ @@
   /**
    * Catch response from Linkedin authentication to get an authorization code.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The symfony request.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function getResponse(Request $request) {
     $process = FALSE;
@@ @@
    * @return bool
    *   The result of request.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   protected function getAccessToken($code) {
     $client = new Client([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/social_feed_fetcher/src/Controller/AuthorizationCodeController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher\Controller;

+use Psr\Log\LoggerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * LoggerInterface definition.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The client of linkedin.
    *
-   * @var \LinkedIn\Client
+   * @var Client
    */
   public $client;

@@ @@
   /**
    * AuthorizationCodeController constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   MessengerInterface definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   RequestStack definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   ConfigFactoryInterface definition.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   LoggerInterface definition.
-   * @param \LinkedIn\Client $client
+   * @param Client $client
    *   The linkedin client.
    */
   public function __construct(MessengerInterface $messenger, RequestStack $requestStack, ConfigFactoryInterface $configFactory, LoggerChannelFactoryInterface $loggerChannelFactory, Client $client) {
@@ @@
   /**
    * Catch response from Linkedin authentication to get an authorization code.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Symfony request.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function getResponse(Request $request) {
@@ @@
    * @param string $code
    *   The authorization token.
    *
-   * @return bool|\LinkedIn\AccessToken
+   * @return bool|AccessToken
    *   The result of request.
    */
   protected function getAccessToken($code) {
@@ @@
   /**
    * Set as variable the value of access token and expires_in.
    *
-   * @param \LinkedIn\AccessToken $accessToken
+   * @param AccessToken $accessToken
    *   The access token.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/social_feed_fetcher/src/Commands/SocialFeedFetcherCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_feed_fetcher\Commands;

+use Drupal\Core\Queue\QueueInterface;
+use Drupal\Core\Queue\QueueWorkerInterface;
 use Drupal\Core\Queue\SuspendQueueException;
 use Drush\Commands\DrushCommands;

@@ @@
     $queue_manager = \Drupal::service('plugin.manager.queue_worker');

     foreach ($queuesID as $queueID) {
-      /** @var \Drupal\Core\Queue\QueueInterface $queue */
+      /** @var QueueInterface $queue */
       $queue = $queue_factory->get($queueID);
-      /** @var \Drupal\Core\Queue\QueueWorkerInterface $queue_worker */
+      /** @var QueueWorkerInterface $queue_worker */
       $queue_worker = $queue_manager->createInstance($queueID);

       while ($item = $queue->claimItem()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 22 files have been changed by Rector                                      

