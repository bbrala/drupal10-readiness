diff --git a/entity_pager.info.yml b/entity_pager.info.yml
index b94a913..c946075 100644
--- a/entity_pager.info.yml
+++ b/entity_pager.info.yml
@@ -1,8 +1,7 @@
 name: Entity Pager
 type: module
 description: 'Provides Next and Previous navigation on entities.'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: Navigation
 dependencies:
   - drupal:views
diff --git a/entity_pager.module b/entity_pager.module
index 49bc252..ce102b7 100644
--- a/entity_pager.module
+++ b/entity_pager.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\entity_pager\EntityPagerFactory;
 /**
  * @file
  * Provides Next and Previous navigation on entities.
@@ -42,7 +43,7 @@ function entity_pager_help($route_name, RouteMatchInterface $route_match) {
 function template_preprocess_entity_pager(array &$variables) {
   $options = $variables['view']->style_plugin->options;
 
-  /** @var \Drupal\entity_pager\EntityPagerFactory $factory */
+  /** @var EntityPagerFactory $factory */
   $factory = \Drupal::service('entity_pager.factory');
 
   $entityPager = $factory->get($variables['view'], $options);
diff --git a/src/EntityPager.php b/src/EntityPager.php
index c1737d8..bb735a9 100644
--- a/src/EntityPager.php
+++ b/src/EntityPager.php
@@ -27,25 +27,25 @@ class EntityPager implements EntityPagerInterface {
   /**
    * The executable for the view that the pager is attached to.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * EntityPager constructor.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view object.
    * @param array $options
    *   An array of options for the EntityPager.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    */
   public function __construct(ViewExecutable $view, array $options, Token $token) {
@@ -141,7 +141,7 @@ class EntityPager implements EntityPagerInterface {
   protected function getCurrentRow() {
     $entity = $this->getEntity();
 
-    /** @var \Drupal\views\ResultRow $result */
+    /** @var ResultRow $result */
     foreach ($this->getView()->result as $index => $result) {
       $resultEntity = $this->getResultEntity($result);
 
@@ -159,7 +159,7 @@ class EntityPager implements EntityPagerInterface {
    * @param int $index
    *   The index of the result row to return from the view.
    *
-   * @return \Drupal\views\ResultRow|null
+   * @return ResultRow|null
    *   The result row, or NULL.
    */
   protected function getResultRow($index) {
@@ -271,7 +271,7 @@ class EntityPager implements EntityPagerInterface {
    *
    * @param string $string
    *   The string to de-tokenize.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The entity to use for de-tokenization.
    *
    * @return string
@@ -293,10 +293,10 @@ class EntityPager implements EntityPagerInterface {
   /**
    * Get the entity from the current views row.
    *
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   The views result row object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The content entity from the result.
    */
   protected function getResultEntity(ResultRow $row) {
diff --git a/src/EntityPagerAnalyzer.php b/src/EntityPagerAnalyzer.php
index 4765b1b..403504d 100644
--- a/src/EntityPagerAnalyzer.php
+++ b/src/EntityPagerAnalyzer.php
@@ -14,14 +14,14 @@ class EntityPagerAnalyzer implements EntityPagerAnalyzerInterface {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs a new EntityPagerAnalyzer object.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $eventDispatcher) {
@@ -33,7 +33,7 @@ class EntityPagerAnalyzer implements EntityPagerAnalyzerInterface {
    */
   public function analyze(EntityPagerInterface $entityPager) {
     $event = new EntityPagerAnalyzeEvent($entityPager);
-    $this->eventDispatcher->dispatch(EntityPagerEvents::ENTITY_PAGER_ANALYZE, $event);
+    $this->eventDispatcher->dispatch($event, EntityPagerEvents::ENTITY_PAGER_ANALYZE);
     $logs = $event->getLogs();
 
     foreach ($logs as $message) {
diff --git a/src/EntityPagerAnalyzerInterface.php b/src/EntityPagerAnalyzerInterface.php
index f49d5b7..49e98af 100644
--- a/src/EntityPagerAnalyzerInterface.php
+++ b/src/EntityPagerAnalyzerInterface.php
@@ -10,7 +10,7 @@ interface EntityPagerAnalyzerInterface {
   /**
    * Analyzes the given entity pager.
    *
-   * @param \Drupal\entity_pager\EntityPagerInterface $entityPager
+   * @param EntityPagerInterface $entityPager
    *   The entity pager to analyze.
    */
   public function analyze(EntityPagerInterface $entityPager);
diff --git a/src/EntityPagerFactory.php b/src/EntityPagerFactory.php
index 2987149..ac2025f 100644
--- a/src/EntityPagerFactory.php
+++ b/src/EntityPagerFactory.php
@@ -13,7 +13,7 @@ class EntityPagerFactory {
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
@@ -38,7 +38,7 @@ class EntityPagerFactory {
   /**
    * EntityPagerFactory constructor.
    *
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    */
   public function __construct(Token $token) {
@@ -48,12 +48,12 @@ class EntityPagerFactory {
   /**
    * Returns a newly constructed entity pager.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The executable to construct an entity pager for.
    * @param array $options
    *   (optional) Options for the entity pager.
    *
-   * @return \Drupal\entity_pager\EntityPagerInterface
+   * @return EntityPagerInterface
    *   The entity pager object.
    */
   public function get(ViewExecutable $view, array $options = []) {
diff --git a/src/EntityPagerInterface.php b/src/EntityPagerInterface.php
index c08270e..5619f0f 100644
--- a/src/EntityPagerInterface.php
+++ b/src/EntityPagerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_pager;
 
+use Drupal\views\ViewExecutable;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * Defines an interface for an entity pager.
  */
@@ -10,7 +12,7 @@ interface EntityPagerInterface {
   /**
    * Gets the view for the entity pager.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The view object.
    */
   public function getView();
@@ -38,7 +40,7 @@ interface EntityPagerInterface {
   /**
    * Gets the entity object this entity pager is for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity object or NULL if no entity found.
    */
   public function getEntity();
diff --git a/src/EntityPagerLink.php b/src/EntityPagerLink.php
index c9540b4..8019531 100644
--- a/src/EntityPagerLink.php
+++ b/src/EntityPagerLink.php
@@ -16,7 +16,7 @@ class EntityPagerLink implements EntityPagerLinkInterface {
   /**
    * The entity that this link is for.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   public $entity;
 
@@ -32,7 +32,7 @@ class EntityPagerLink implements EntityPagerLinkInterface {
    *
    * @param string $text
    *   The text of the link.
-   * @param \Drupal\Core\Entity\EntityInterface|null $entity
+   * @param EntityInterface|null $entity
    *   The result row in the view to link to.
    */
   public function __construct($text, EntityInterface $entity = NULL) {
diff --git a/src/Event/EntityPagerAnalyzeEvent.php b/src/Event/EntityPagerAnalyzeEvent.php
index 380a1f8..5539e1d 100644
--- a/src/Event/EntityPagerAnalyzeEvent.php
+++ b/src/Event/EntityPagerAnalyzeEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_pager\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\entity_pager\EntityPagerInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Analyze event object.
@@ -13,7 +13,7 @@ class EntityPagerAnalyzeEvent extends Event {
   /**
    * The entity pager being analyzed.
    *
-   * @var \Drupal\entity_pager\EntityPagerInterface
+   * @var EntityPagerInterface
    */
   protected $entityPager;
 
@@ -27,7 +27,7 @@ class EntityPagerAnalyzeEvent extends Event {
   /**
    * Constructs a new EntityPagerAnalyzeEvent.
    *
-   * @param \Drupal\entity_pager\EntityPagerInterface $entityPager
+   * @param EntityPagerInterface $entityPager
    *   The entity pager.
    */
   public function __construct(EntityPagerInterface $entityPager) {
@@ -37,7 +37,7 @@ class EntityPagerAnalyzeEvent extends Event {
   /**
    * Gets the entity pager.
    *
-   * @return \Drupal\entity_pager\EntityPagerInterface
+   * @return EntityPagerInterface
    *   The entity pager.
    */
   public function getEntityPager() {
@@ -47,7 +47,7 @@ class EntityPagerAnalyzeEvent extends Event {
   /**
    * Sets the entity pager.
    *
-   * @param \Drupal\entity_pager\EntityPagerInterface $entityPager
+   * @param EntityPagerInterface $entityPager
    *   The entity pager.
    */
   public function setEntityPager(EntityPagerInterface $entityPager) {
diff --git a/src/EventSubscriber/EntityAnalyzerSubscriber.php b/src/EventSubscriber/EntityAnalyzerSubscriber.php
index b61f785..6ee6368 100644
--- a/src/EventSubscriber/EntityAnalyzerSubscriber.php
+++ b/src/EventSubscriber/EntityAnalyzerSubscriber.php
@@ -25,7 +25,7 @@ class EntityAnalyzerSubscriber implements EventSubscriberInterface {
   /**
    * Checks if there is a valid entity for the pager.
    *
-   * @param \Drupal\entity_pager\Event\EntityPagerAnalyzeEvent $event
+   * @param EntityPagerAnalyzeEvent $event
    *   The analyze event.
    */
   public function onEntityPagerAnalyze(EntityPagerAnalyzeEvent $event) {
diff --git a/src/EventSubscriber/ViewsPerformanceAnalyzerSubscriber.php b/src/EventSubscriber/ViewsPerformanceAnalyzerSubscriber.php
index 942c20c..9e5b70b 100644
--- a/src/EventSubscriber/ViewsPerformanceAnalyzerSubscriber.php
+++ b/src/EventSubscriber/ViewsPerformanceAnalyzerSubscriber.php
@@ -25,7 +25,7 @@ class ViewsPerformanceAnalyzerSubscriber implements EventSubscriberInterface {
   /**
    * Analyzes the entity pager view for performance issues and provide feedback.
    *
-   * @param \Drupal\entity_pager\Event\EntityPagerAnalyzeEvent $event
+   * @param EntityPagerAnalyzeEvent $event
    *   The Entity Pager Analyze event.
    */
   public function onEntityPagerAnalyze(EntityPagerAnalyzeEvent $event) {
diff --git a/tests/src/Functional/EntityPagerTest.php b/tests/src/Functional/EntityPagerTest.php
index 923c0c5..ccc8fcb 100644
--- a/tests/src/Functional/EntityPagerTest.php
+++ b/tests/src/Functional/EntityPagerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity_pager\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\views\ViewExecutable;
 use Drupal\Core\Url;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -42,14 +44,14 @@ class EntityPagerTest extends ViewTestBase {
   /**
    * The nodes used in tests.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $nodes;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
 
     $view = View::load('entity_pager_example');
@@ -291,6 +293,7 @@ class EntityPagerTest extends ViewTestBase {
    * Tests handling on non-entity pages.
    *
    * @see https://www.drupal.org/project/entity_pager/issues/3111423
+   * @doesNotPerformAssertions
    */
   public function testNonEntityPage() {
     $this->drupalPlaceBlock('views_block:entity_pager_example-entity_pager_example_block');
@@ -303,7 +306,7 @@ class EntityPagerTest extends ViewTestBase {
    * @param array $options
    *   Style options to update.
    *
-   * @return \Drupal\views\ViewExecutable
+   * @return ViewExecutable
    *   The updated view executable.
    */
   protected function updateExampleView(array $options) {
diff --git a/tests/src/Kernel/EntityPagerLinkTest.php b/tests/src/Kernel/EntityPagerLinkTest.php
index 8468cf2..a6fb439 100644
--- a/tests/src/Kernel/EntityPagerLinkTest.php
+++ b/tests/src/Kernel/EntityPagerLinkTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_pager\Kernel;
 
+use Drupal\Core\Render\RendererInterface;
 use Drupal\entity_pager\EntityPagerLink;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
@@ -15,14 +16,14 @@ class EntityPagerLinkTest extends EntityKernelTestBase {
   /**
    * Renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->renderer = $this->container->get('renderer');
   }
diff --git a/tests/src/Unit/EntityPagerAnalyzerTest.php b/tests/src/Unit/EntityPagerAnalyzerTest.php
index ce27f87..3f7766c 100644
--- a/tests/src/Unit/EntityPagerAnalyzerTest.php
+++ b/tests/src/Unit/EntityPagerAnalyzerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_pager\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;
@@ -28,14 +29,14 @@ class EntityPagerAnalyzerTest extends UnitTestCase {
   /**
    * Entity pager stub.
    *
-   * @var \Drupal\entity_pager\EntityPagerInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var EntityPagerInterface|MockObject
    */
   protected $entityPager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->entityPager = $this->createMock(EntityPagerInterface::class);
 
     for ($i = 0; $i < random_int(3, 6); $i++) {
