diff --git a/entity_machine_name.info.yml b/entity_machine_name.info.yml
index 7c01d36..1d67bc0 100644
--- a/entity_machine_name.info.yml
+++ b/entity_machine_name.info.yml
@@ -2,8 +2,7 @@ name: Entity Machine Name
 type: module
 description: Provides a new property to store machine name for Entities
 package: Other
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 dependencies:
   - node
   - taxonomy
diff --git a/entity_machine_name.install b/entity_machine_name.install
index 2c0e31b..989418f 100644
--- a/entity_machine_name.install
+++ b/entity_machine_name.install
@@ -15,7 +15,7 @@ use Drupal\node\Entity\Node;
 function entity_machine_name_install() {
   batch_set(
     [
-      'file' => drupal_get_path('module', 'entity_machine_name') . '/entity_machine_name.install',
+      'file' => \Drupal::service('extension.list.module')->getPath('entity_machine_name') . '/entity_machine_name.install',
       'title' => t('Generating missing taxonomy term machine names'),
       'init_message' => t('Starting taxonomy term machine names update'),
       'error_message' => t('Error updating taxonomy term machine names'),
diff --git a/entity_machine_name.module b/entity_machine_name.module
index c0b0582..8919256 100644
--- a/entity_machine_name.module
+++ b/entity_machine_name.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\taxonomy\Entity\Term;
+use Drupal\taxonomy\TermForm;
+use Drupal\entity_machine_name\Services\EntityMachineNameHelper;
 /**
  * @file
  * Primary module hooks for Entity Machine Name module.
@@ -53,7 +56,7 @@ function entity_machine_name_form_taxonomy_overview_terms_alter(&$form, FormStat
   $position = FALSE;
 
   foreach (Element::children($form['terms']) as $key) {
-    /** @var \Drupal\taxonomy\Entity\Term $term */
+    /** @var Term $term */
     $term = $form['terms'][$key]['#term'];
     if (!empty($term_machine_name = $term->get('machine_name')->first())) {
       $machine_name = $term_machine_name->getValue()['value'];
@@ -101,10 +104,10 @@ function entity_machine_name_form_alter(&$form, FormStateInterface $form_state,
  *   Name of the term to search for.
  * @param array $element
  *   Element to validate. Defaults to NULL.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state.
  *
- * @return \Drupal\Core\Entity\EntityInterface
+ * @return EntityInterface
  *   Entity object or NULL.
  */
 function entity_machine_name_exists_load($machine_name, array $element, FormStateInterface $form_state = NULL) {
@@ -112,12 +115,12 @@ function entity_machine_name_exists_load($machine_name, array $element, FormStat
   $entity = NULL;
   if (NULL !== $form_state) {
     $buildInfo = $form_state->getBuildInfo();
-    /** @var \Drupal\taxonomy\TermForm $callbackObject */
+    /** @var TermForm $callbackObject */
     $callbackObject = $buildInfo['callback_object'];
-    /** @var \Drupal\taxonomy\Entity\Term $term */
+    /** @var Term $term */
     $entity = $callbackObject->getEntity();
   }
-  /** @var \Drupal\entity_machine_name\Services\EntityMachineNameHelper $service */
+  /** @var EntityMachineNameHelper $service */
   $service = \Drupal::service('entity_machine_name.machine_name_helper');
   return $service->entityMachineNameLoad($machine_name, $entity);
 }
@@ -126,7 +129,7 @@ function entity_machine_name_exists_load($machine_name, array $element, FormStat
  * Implements hook_ENTITY_TYPE_presave().
  */
 function entity_machine_name_taxonomy_term_presave(EntityInterface $term) {
-  /** @var \Drupal\taxonomy\Entity\Term $term */
+  /** @var Term $term */
   if ($term->get('machine_name')->isEmpty()) {
     $machine_name = $term->get('name')->value;
   }
@@ -139,7 +142,7 @@ function entity_machine_name_taxonomy_term_presave(EntityInterface $term) {
 
   // If the alias already exists, generate a new,
   // hopefully unique, variant.
-  /** @var \Drupal\entity_machine_name\Services\EntityMachineNameHelper $service */
+  /** @var EntityMachineNameHelper $service */
   $service = \Drupal::service('entity_machine_name.machine_name_helper');
   $service->uniqueMachineName($machine_name, $term);
 
@@ -150,12 +153,12 @@ function entity_machine_name_taxonomy_term_presave(EntityInterface $term) {
  * Implements hook_ENTITY_TYPE_presave().
  */
 function entity_machine_node_presave(EntityInterface $node) {
-  /** @var \Drupal\node\NodeInterface $node */
+  /** @var NodeInterface $node */
   $machine_name = entity_machine_name_clean_name($node->getTitle());
 
   // If the alias already exists, generate a new,
   // hopefully unique, variant.
-  /** @var \Drupal\entity_machine_name\Services\EntityMachineNameHelper $service */
+  /** @var EntityMachineNameHelper $service */
   $service = \Drupal::service('entity_machine_name.machine_name_helper');
   $service->uniqueMachineName($machine_name, $node);
   // entity_machine_name_uniquify($machine_name, $node);.
@@ -269,10 +272,10 @@ function entity_machine_name_help($route_name, RouteMatchInterface $route_match)
 /**
  * Update entity with machine name.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   The content entity.
  *
- * @return \Drupal\Core\Entity\ContentEntityInterface
+ * @return ContentEntityInterface
  *   The entity saved.
  */
 function entity_machine_name_entities_update(ContentEntityInterface $entity) {
@@ -296,10 +299,10 @@ function entity_machine_name_entities_update(ContentEntityInterface $entity) {
 /**
  * Update term with machine name.
  *
- * @param \Drupal\taxonomy\TermInterface $term
+ * @param TermInterface $term
  *   Taxonomy term storage.
  *
- * @return \Drupal\taxonomy\TermInterface
+ * @return TermInterface
  *   The taxonomy term.
  */
 function entity_machine_name_update(TermInterface $term) {
diff --git a/src/Plugin/views/argument_validator/EntityMachineNameNode.php b/src/Plugin/views/argument_validator/EntityMachineNameNode.php
index fec462d..e722392 100644
--- a/src/Plugin/views/argument_validator/EntityMachineNameNode.php
+++ b/src/Plugin/views/argument_validator/EntityMachineNameNode.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_machine_name\Plugin\views\argument_validator;
 
+use Drupal\node\NodeStorageInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -21,7 +23,7 @@ class EntityMachineNameNode extends Entity {
   /**
    * The node storage.
    *
-   * @var \Drupal\node\NodeStorageInterface
+   * @var NodeStorageInterface
    */
   protected $nodeStorage;
 
@@ -78,7 +80,7 @@ class EntityMachineNameNode extends Entity {
 
     // Not knowing which node will be used if more than one is returned check
     // each one.
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     foreach ($nodes as $node) {
       if (!$this->validateEntity($node)) {
         return FALSE;
diff --git a/src/Plugin/views/argument_validator/EntityMachineNameTerm.php b/src/Plugin/views/argument_validator/EntityMachineNameTerm.php
index fd506d4..f3639a3 100644
--- a/src/Plugin/views/argument_validator/EntityMachineNameTerm.php
+++ b/src/Plugin/views/argument_validator/EntityMachineNameTerm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_machine_name\Plugin\views\argument_validator;
 
+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\taxonomy\Entity\Term;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -21,7 +23,7 @@ class EntityMachineNameTerm extends Entity {
   /**
    * The taxonomy term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;
 
@@ -78,7 +80,7 @@ class EntityMachineNameTerm extends Entity {
 
     // Not knowing which term will be used if more than one is returned check
     // each one.
-    /** @var \Drupal\taxonomy\Entity\Term $term */
+    /** @var Term $term */
     foreach ($terms as $term) {
       if (!$this->validateEntity($term)) {
         return FALSE;
diff --git a/src/Plugin/views/filter/EntityTermIndexMachineName.php b/src/Plugin/views/filter/EntityTermIndexMachineName.php
index 9535a7e..357882c 100644
--- a/src/Plugin/views/filter/EntityTermIndexMachineName.php
+++ b/src/Plugin/views/filter/EntityTermIndexMachineName.php
@@ -31,14 +31,14 @@ class EntityTermIndexMachineName extends ManyToOne {
   /**
    * The vocabulary storage.
    *
-   * @var \Drupal\taxonomy\VocabularyStorageInterface
+   * @var VocabularyStorageInterface
    */
   protected $vocabularyStorage;
 
   /**
    * The term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;
 
@@ -51,9 +51,9 @@ class EntityTermIndexMachineName extends ManyToOne {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\taxonomy\VocabularyStorageInterface $vocabulary_storage
+   * @param VocabularyStorageInterface $vocabulary_storage
    *   The vocabulary storage.
-   * @param \Drupal\taxonomy\TermStorageInterface $term_storage
+   * @param TermStorageInterface $term_storage
    *   The term storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, VocabularyStorageInterface $vocabulary_storage, TermStorageInterface $term_storage) {
diff --git a/src/Services/EntityMachineNameForm.php b/src/Services/EntityMachineNameForm.php
index 3000aaa..850c5d1 100644
--- a/src/Services/EntityMachineNameForm.php
+++ b/src/Services/EntityMachineNameForm.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\entity_machine_name\Services;
 
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Transliteration\PhpTransliteration;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -18,21 +23,21 @@ class EntityMachineNameForm {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   private $languageManager;
 
   /**
    * The transliterator.
    *
-   * @var \Drupal\Core\Transliteration\PhpTransliteration
+   * @var PhpTransliteration
    */
   protected $transliteration;
 
   /**
    * The module hadler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -55,14 +60,14 @@ class EntityMachineNameForm {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function formAlter(array &$form, FormStateInterface $form_state) {
     if ($form_state->getFormObject() instanceof EntityForm) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $form_state->getFormObject()->getEntity();
 
       if ($entity instanceof TermInterface || $entity instanceof NodeInterface) {
@@ -75,7 +80,7 @@ class EntityMachineNameForm {
           if ($entity instanceof TermInterface) {
             $this->setMachineNameTerm($entity);
           }
-          /** @var \Drupal\node\NodeInterface $entity */
+          /** @var NodeInterface $entity */
           if ($entity instanceof NodeInterface) {
             $this->setMachineNameNode($entity);
           }
@@ -118,7 +123,7 @@ class EntityMachineNameForm {
    *
    * @param array $form
    *   Nested array of form elements that comprise the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function entityMachineNameFormValidate(array $form, FormStateInterface $form_state) {
@@ -137,7 +142,7 @@ class EntityMachineNameForm {
   /**
    * Set term machine name.
    *
-   * @param \Drupal\taxonomy\TermInterface $entity
+   * @param TermInterface $entity
    *   The entity.
    */
   protected function setMachineNameTerm(TermInterface $entity) {
@@ -149,7 +154,7 @@ class EntityMachineNameForm {
   /**
    * Set node machine name.
    *
-   * @param \Drupal\node\NodeInterface $entity
+   * @param NodeInterface $entity
    *   The entity.
    */
   protected function setMachineNameNode(NodeInterface $entity) {
diff --git a/src/Services/EntityMachineNameHelper.php b/src/Services/EntityMachineNameHelper.php
index 5da7cc8..2222635 100644
--- a/src/Services/EntityMachineNameHelper.php
+++ b/src/Services/EntityMachineNameHelper.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_machine_name\Services;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -16,7 +18,7 @@ class EntityMachineNameHelper {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
@@ -30,7 +32,7 @@ class EntityMachineNameHelper {
   /**
    * Constructs a new Entity Machine Name Helper.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ -43,14 +45,14 @@ class EntityMachineNameHelper {
    *
    * @param string $machine_name
    *   Machine name to uniquify.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to uniquify.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function uniqueMachineName(string &$machine_name, EntityInterface $entity) {
-    /** @var \Drupal\Core\Entity\EntityInterface $existing */
+    /** @var EntityInterface $existing */
     $existing = $this->entityMachineNameLoad($machine_name, $entity);
     if (!$existing || $existing->id() == $entity->id()) {
       return;
@@ -79,14 +81,14 @@ class EntityMachineNameHelper {
    *
    * @param string $machine_name
    *   The machine name to search for.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to search.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   Entity object or NULL.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function entityMachineNameLoad(string $machine_name, EntityInterface $entity): ?EntityInterface {
     $entities = [];
@@ -117,11 +119,11 @@ class EntityMachineNameHelper {
    * @param string $entity_type
    *   The entity type to search.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   Entity object or NULL.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function entityMachineNameLoadByType(string $machine_name, string $entity_type): ?EntityInterface {
     $conditions = [
