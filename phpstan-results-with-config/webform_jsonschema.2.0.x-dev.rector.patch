diff --git a/src/Conditions.php b/src/Conditions.php
index 017521c..b0be124 100644
--- a/src/Conditions.php
+++ b/src/Conditions.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\webform_jsonschema;
 
+use Drupal\webform_ui\Form\WebformUiElementFormInterface;
+use Drupal\webform\Entity\Webform;
 use Drupal\Component\Utility\Variable;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element;
@@ -17,7 +19,7 @@ class Conditions {
    * Applies conditional logic to a portion of JSON Schema.
    *
    * @param array $schema
-   * @param \Drupal\webform_jsonschema\WebformItem[] $items
+   * @param WebformItem[] $items
    */
   public static function apply(&$schema, $items) {
     if (empty($schema['properties'])) {
@@ -203,7 +205,7 @@ class Conditions {
    * could be used with react-jsonschema-form library.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public static function alterWebformUiElementForm(array &$form, FormStateInterface $form_state) {
     if (empty($form['properties']['conditional_logic'])) {
@@ -230,16 +232,16 @@ class Conditions {
    * After-build callback for the webform_element_states form element.
    *
    * @param array $element
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
   public static function webformElementStatesAfterBuild($element, FormStateInterface $form_state) {
-    /** @var \Drupal\webform_ui\Form\WebformUiElementFormInterface $formObject */
+    /** @var WebformUiElementFormInterface $formObject */
     $formObject = $form_state->getFormObject();
-    /** @var \Drupal\webform\Entity\Webform $webform */
+    /** @var Webform $webform */
     $webform = $formObject->getWebform();
-    /** @var \Drupal\webform_jsonschema\Transformer $transformer */
+    /** @var Transformer $transformer */
     $transformer = \Drupal::service('webform_jsonschema.transformer');
     $webformItems = $transformer->toItems($webform);
 
diff --git a/src/Plugin/rest/resource/WebformJsonSchemaResource.php b/src/Plugin/rest/resource/WebformJsonSchemaResource.php
index aa41d32..e2c1c2a 100644
--- a/src/Plugin/rest/resource/WebformJsonSchemaResource.php
+++ b/src/Plugin/rest/resource/WebformJsonSchemaResource.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\webform_jsonschema\Plugin\rest\resource;
 
+use Drupal\rest\ResourceResponseInterface;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Access\CsrfTokenGenerator;
 use Drupal\Core\Access\CsrfRequestHeaderAccessCheck;
 use Drupal\rest\ModifiedResourceResponse;
 use Drupal\Core\Render\RenderContext;
@@ -29,12 +32,12 @@ use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 class WebformJsonSchemaResource extends ResourceBase {
 
   /**
-   * @var \Drupal\webform_jsonschema\Transformer
+   * @var Transformer
    */
   protected $transformer;
 
   /**
-   * @var \Drupal\webform_jsonschema\Submission
+   * @var Submission
    */
   protected $submission;
 
@@ -45,9 +48,9 @@ class WebformJsonSchemaResource extends ResourceBase {
    * @param $plugin_id
    * @param $plugin_definition
    * @param array $serializer_formats
-   * @param \Psr\Log\LoggerInterface $logger
-   * @param \Drupal\webform_jsonschema\Transformer $transformer
-   * @param \Drupal\webform_jsonschema\Submission $submission
+   * @param LoggerInterface $logger
+   * @param Transformer $transformer
+   * @param Submission $submission
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, array $serializer_formats, LoggerInterface $logger, Transformer $transformer, Submission $submission) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $serializer_formats, $logger);
@@ -76,18 +79,18 @@ class WebformJsonSchemaResource extends ResourceBase {
    * @param string $webform_id
    *   Webform ID.
    *
-   * @return \Drupal\rest\ResourceResponseInterface
+   * @return ResourceResponseInterface
    */
   public function get($webform_id) {
     // String translations, Drupal entity API calls and a lot of other things
     // can emit cache metadata in the current render context.
     // Prevent the leaked cache metadata exception by wrapping the execution in
     // its own render context.
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
     return $renderer->executeInRenderContext(new RenderContext(), function () use ($webform_id) {
       if ($webform = Webform::load($webform_id)) {
-        /** @var \Drupal\Core\Access\CsrfTokenGenerator $token_generator */
+        /** @var CsrfTokenGenerator $token_generator */
         $token_generator = \Drupal::service('csrf_token');
         $response = new ResourceResponse([
           'schema' => $this->transformer->toJsonSchema($webform),
diff --git a/src/Submission.php b/src/Submission.php
index 03f4495..6bfbdc0 100644
--- a/src/Submission.php
+++ b/src/Submission.php
@@ -13,14 +13,14 @@ use Drupal\webform\WebformSubmissionInterface;
 class Submission {
 
   /**
-   * @var \Drupal\webform_jsonschema\Transformer
+   * @var Transformer
    */
   protected $transformer;
 
   /**
    * Submission constructor.
    *
-   * @param \Drupal\webform_jsonschema\Transformer $transformer
+   * @param Transformer $transformer
    */
   public function __construct(Transformer $transformer) {
     $this->transformer = $transformer;
@@ -95,7 +95,7 @@ class Submission {
         ];
       }
       elseif ($result instanceof WebformSubmissionInterface) {
-        /** @var \Drupal\webform\WebformMessageManagerInterface $message_manager */
+        /** @var WebformMessageManagerInterface $message_manager */
         $message_manager = \Drupal::service('webform.message_manager');
         $message_manager->setWebformSubmission($result);
         $message_array = $message_manager->build(WebformMessageManagerInterface::SUBMISSION_CONFIRMATION_MESSAGE);
diff --git a/src/Transformer.php b/src/Transformer.php
index 75e24cc..f9c29a5 100644
--- a/src/Transformer.php
+++ b/src/Transformer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\webform_jsonschema;
 
+use Drupal\webform\Plugin\WebformElementInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Render\Element;
@@ -15,14 +16,14 @@ use Drupal\webform\Plugin\WebformElement\WebformCompositeBase;
 class Transformer {
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Transformer constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    */
   public function __construct(ModuleHandlerInterface $moduleHandler) {
     $this->moduleHandler = $moduleHandler;
@@ -31,7 +32,7 @@ class Transformer {
   /**
    * Transforms a webform to JSON Schema.
    *
-   * @param \Drupal\webform\Entity\Webform $webform
+   * @param Webform $webform
    *
    * @return array
    */
@@ -47,7 +48,7 @@ class Transformer {
   /**
    * Transforms a webform to UI Schema.
    *
-   * @param \Drupal\webform\Entity\Webform $webform
+   * @param Webform $webform
    *
    * @return array
    */
@@ -71,7 +72,7 @@ class Transformer {
   /**
    * Extracts the button definitions from the UI schema.
    *
-   * @param \Drupal\webform\Entity\Webform $webform
+   * @param Webform $webform
    *
    * @return array
    */
@@ -85,9 +86,9 @@ class Transformer {
   /**
    * Transforms a webform to WebformItem's.
    *
-   * @param \Drupal\webform\Entity\Webform $webform
+   * @param Webform $webform
    *
-   * @return \Drupal\webform_jsonschema\WebformItem[]
+   * @return WebformItem[]
    */
   public function toItems(Webform $webform) {
     $elements = $webform->getElementsInitialized();
@@ -97,7 +98,7 @@ class Transformer {
   /**
    * Creates a JSON Schema out of WebformItem's.
    *
-   * @param \Drupal\webform_jsonschema\WebformItem[] $items
+   * @param WebformItem[] $items
    *
    * @return array
    */
@@ -264,13 +265,13 @@ class Transformer {
    *
    * @param array $elements
    *
-   * @return \Drupal\webform_jsonschema\WebformItem[]
+   * @return WebformItem[]
    */
   protected static function getStructureElements($elements) {
     $element_manager = \Drupal::service('plugin.manager.webform.element');
     $items = [];
     foreach ($elements as $key => $element) {
-      /** @var \Drupal\webform\Plugin\WebformElementInterface $element_plugin */
+      /** @var WebformElementInterface $element_plugin */
       $element_plugin = $element_manager->getElementInstance($element);
       $item = new WebformItem();
       $item->element = $element;
@@ -293,7 +294,7 @@ class Transformer {
   /**
    * Creates a UI Schema out of WebformItem's.
    *
-   * @param \Drupal\webform_jsonschema\WebformItem[] $items
+   * @param WebformItem[] $items
    *
    * @return array
    */
@@ -396,7 +397,7 @@ class Transformer {
   /**
    * Creates an array of buttons out of the WebformItems.
    *
-   * @param \Drupal\webform_jsonschema\WebformItem[] $items
+   * @param WebformItem[] $items
    *
    * @return array
    */
diff --git a/src/WebformItem.php b/src/WebformItem.php
index 59d4cde..230f0bb 100644
--- a/src/WebformItem.php
+++ b/src/WebformItem.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\webform_jsonschema;
 
+use Drupal\webform\Plugin\WebformElementInterface;
 /**
  * Represents a webform element and the webform structure (via $children).
  */
@@ -17,7 +18,7 @@ class WebformItem {
   /**
    * Webform element plugin corresponding to $element.
    *
-   * @var \Drupal\webform\Plugin\WebformElementInterface
+   * @var WebformElementInterface
    */
   public $elementPlugin;
 
