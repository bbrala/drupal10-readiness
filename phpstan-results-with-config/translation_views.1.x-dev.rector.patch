diff --git a/src/Plugin/views/field/TranslationCountField.php b/src/Plugin/views/field/TranslationCountField.php
index e8c533b..a89606c 100644
--- a/src/Plugin/views/field/TranslationCountField.php
+++ b/src/Plugin/views/field/TranslationCountField.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\translation_views\Plugin\views\field;
 
+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\translation_views\TranslationCountTrait;
@@ -52,7 +53,7 @@ class TranslationCountField extends NumericField implements ContainerFactoryPlug
    * {@inheritdoc}
    */
   public function query() {
-    /** @var \Drupal\views\Plugin\views\query\Sql $query */
+    /** @var Sql $query */
     $query = $this->query;
     $join_alias = $this->joinLanguages($query);
     $this->field_alias = $query->addField($join_alias, 'count_langs', $this->realField);
diff --git a/src/Plugin/views/field/TranslationModerationState.php b/src/Plugin/views/field/TranslationModerationState.php
index 2e1b5c5..bd043ee 100644
--- a/src/Plugin/views/field/TranslationModerationState.php
+++ b/src/Plugin/views/field/TranslationModerationState.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\translation_views\Plugin\views\field;
 
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\content_moderation\ModerationInformationInterface;
 use Drupal\content_translation\ContentTranslationManager;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -26,13 +27,13 @@ class TranslationModerationState extends FieldPluginBase {
   /**
    * The moderation information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInfo;
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -121,7 +122,7 @@ class TranslationModerationState extends FieldPluginBase {
    */
   public function render(ResultRow $values) {
     if ($values->_entity->id()) {
-      /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+      /** @var ContentEntityStorageInterface $storage */
       $entityTypeId             = $values->_entity->getEntityTypeId();
       $storage                  = $this->entityTypeManager->getStorage($entityTypeId);
       $entity                   = $storage->load($values->_entity->id());
diff --git a/src/Plugin/views/field/TranslationOperationsField.php b/src/Plugin/views/field/TranslationOperationsField.php
index a08956b..c56adeb 100644
--- a/src/Plugin/views/field/TranslationOperationsField.php
+++ b/src/Plugin/views/field/TranslationOperationsField.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\translation_views\Plugin\views\field;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\content_translation\ContentTranslationManager;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -27,7 +30,7 @@ class TranslationOperationsField extends EntityOperations {
   /**
    * Current user account object.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
   /**
@@ -109,7 +112,7 @@ class TranslationOperationsField extends EntityOperations {
    * and system name of langcode key (it might be differ then just 'langcode'),
    * usually table alias is [entity_type]_field_data_[langcode_key].
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Used to extract entity type info from entity.
    *
    * @return string
@@ -129,7 +132,7 @@ class TranslationOperationsField extends EntityOperations {
    * based on user permissions,
    * and entity state (has translation, is default, etc.).
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The source entity to get context for decision.
    * @param string $source_langcode
    *   The langcode of the row.
@@ -137,9 +140,9 @@ class TranslationOperationsField extends EntityOperations {
    * @return array
    *   Operation links' render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws EntityMalformedException
+   * @throws PluginNotFoundException
    */
   protected function getTranslationOperations(ContentEntityInterface $entity, $source_langcode) {
     $target_langcode = $this->getTargetLangcode()
@@ -157,7 +160,7 @@ class TranslationOperationsField extends EntityOperations {
       $entity = $storage->load($entity->id());
       $latest_revision_id = $storage->getLatestTranslationAffectedRevisionId($entity->id(), $target_langcode);
       if ($latest_revision_id) {
-        /** @var \Drupal\Core\Entity\ContentEntityInterface $latest_revision */
+        /** @var ContentEntityInterface $latest_revision */
         $latest_revision = $storage->loadRevision($latest_revision_id);
         // Make sure we do not list removed translations, i.e. translations
         // that have been part of a default revision but no longer are.
diff --git a/src/Plugin/views/filter/TranslationCountFilter.php b/src/Plugin/views/filter/TranslationCountFilter.php
index 24f16ec..c187c1a 100644
--- a/src/Plugin/views/filter/TranslationCountFilter.php
+++ b/src/Plugin/views/filter/TranslationCountFilter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\translation_views\Plugin\views\filter;
 
+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\translation_views\TranslationCountTrait;
 use Drupal\views\Plugin\views\filter\NumericFilter;
@@ -53,7 +54,7 @@ class TranslationCountFilter extends NumericFilter implements ContainerFactoryPl
    * {@inheritdoc}
    */
   public function query() {
-    /** @var \Drupal\views\Plugin\views\query\Sql $query */
+    /** @var Sql $query */
     $query = $this->query;
     $op    = $this->operator;
 
diff --git a/src/Plugin/views/join/TranslationLanguageJoin.php b/src/Plugin/views/join/TranslationLanguageJoin.php
index 3f16b89..49ef3a1 100755
--- a/src/Plugin/views/join/TranslationLanguageJoin.php
+++ b/src/Plugin/views/join/TranslationLanguageJoin.php
@@ -17,7 +17,7 @@ class TranslationLanguageJoin extends JoinPluginBase implements ContainerFactory
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
diff --git a/src/TranslationViewsTargetLanguage.php b/src/TranslationViewsTargetLanguage.php
index ac0e9db..a86cfdb 100644
--- a/src/TranslationViewsTargetLanguage.php
+++ b/src/TranslationViewsTargetLanguage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\translation_views;
 
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\views\Plugin\views\PluginBase;
 
 /**
@@ -17,7 +18,7 @@ trait TranslationViewsTargetLanguage {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
   /**
diff --git a/tests/src/Functional/CommentFullViewFiltersFieldsTest.php b/tests/src/Functional/CommentFullViewFiltersFieldsTest.php
index 8f1df71..4b9861d 100644
--- a/tests/src/Functional/CommentFullViewFiltersFieldsTest.php
+++ b/tests/src/Functional/CommentFullViewFiltersFieldsTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\translation_views\Functional;
 
+use Behat\Mink\Exception\ElementTextException;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\views\Functional\ViewTestBase;
 use Drupal\views\Tests\ViewTestData;
@@ -43,7 +46,7 @@ class CommentFullViewFiltersFieldsTest extends ViewTestBase {
    * @param string $text
    *   Text that should be found in the element.
    *
-   * @throws \Behat\Mink\Exception\ElementTextException
+   * @throws ElementTextException
    */
   private function assertTextInRow($row_number, $css_class, $text) {
     $this->assertSession()
@@ -59,7 +62,7 @@ class CommentFullViewFiltersFieldsTest extends ViewTestBase {
    *   Array of texts that should be found in the element
    *   and rows' order number.
    *
-   * @throws \Behat\Mink\Exception\ElementTextException
+   * @throws ElementTextException
    */
   private function assertTextInRowOrder($css_class, array $texts) {
     foreach ($texts as $id => $text) {
@@ -73,7 +76,7 @@ class CommentFullViewFiltersFieldsTest extends ViewTestBase {
    * @param array $langcodes
    *   Langcodes that should be added to Drupal.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function addLanguages(array $langcodes) {
     foreach ($langcodes as $langcode) {
@@ -90,7 +93,8 @@ class CommentFullViewFiltersFieldsTest extends ViewTestBase {
    *   Entity subcategory (e.g. Article).
    */
   private function enableTranslation($category, $subcategory) {
-    $this->drupalPostForm('admin/config/regional/content-language', [
+    $this->drupalGet('admin/config/regional/content-language');
+    $this->submitForm([
       "entity_types[$category]"                                                   => 1,
       "settings[$category][$subcategory][translatable]"                           => 1,
       "settings[$category][$subcategory][settings][language][language_alterable]" => 1,
@@ -108,7 +112,7 @@ class CommentFullViewFiltersFieldsTest extends ViewTestBase {
    * @param array $default_params
    *   Langcode and Translation target language.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   private function assertOrder($orderColumn, $sort, array $default_params = []) {
     $this->drupalGet($this->viewPath, [
@@ -127,7 +131,7 @@ class CommentFullViewFiltersFieldsTest extends ViewTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
 
     $user = $this->drupalCreateUser([
@@ -161,17 +165,20 @@ class CommentFullViewFiltersFieldsTest extends ViewTestBase {
 
     // Enable translation for Comment entity type.
     $this->enableTranslation('comment', 'comment');
+    $this->drupalGet('node/add/article');
 
     // Add 3 nodes.
-    $this->drupalPostForm('node/add/article', [
+    $this->submitForm([
       'title[0][value]'         => 'node 1',
       'created[0][value][date]' => '2018-04-01',
     ], t('Save'));
-    $this->drupalPostForm('node/add/article', [
+    $this->drupalGet('node/add/article');
+    $this->submitForm([
       'title[0][value]'         => 'node 2',
       'created[0][value][date]' => '2018-04-02',
     ], t('Save'));
-    $this->drupalPostForm('node/add/article', [
+    $this->drupalGet('node/add/article');
+    $this->submitForm([
       'title[0][value]'         => 'node 3',
       'created[0][value][date]' => '2018-04-03',
     ], t('Save'));
@@ -183,42 +190,48 @@ class CommentFullViewFiltersFieldsTest extends ViewTestBase {
       'comment_body[0][value]' => $this->loremIpsum,
       'subject[0][value]'      => 'node 1 en comment',
     ];
-    $this->drupalPostForm('node/1', $edit, 'Save');
+    $this->drupalGet('node/1');
+    $this->submitForm($edit, 'Save');
     // Comment 2.
     $edit = [
       'langcode[0][value]'     => 'de',
       'comment_body[0][value]' => $this->loremIpsum,
       'subject[0][value]'      => 'node 1 de comment',
     ];
-    $this->drupalPostForm('node/1', $edit, 'Save');
+    $this->drupalGet('node/1');
+    $this->submitForm($edit, 'Save');
     // Comment 3.
     $edit = [
       'langcode[0][value]'     => 'de',
       'comment_body[0][value]' => $this->loremIpsum,
       'subject[0][value]'      => 'node 2 de comment',
     ];
-    $this->drupalPostForm('node/2', $edit, 'Save');
+    $this->drupalGet('node/2');
+    $this->submitForm($edit, 'Save');
     // Comment 4.
     $edit = [
       'langcode[0][value]'     => 'fr',
       'comment_body[0][value]' => $this->loremIpsum,
       'subject[0][value]'      => 'node 2 fr comment',
     ];
-    $this->drupalPostForm('node/2', $edit, 'Save');
+    $this->drupalGet('node/2');
+    $this->submitForm($edit, 'Save');
     // Comment 5.
     $edit = [
       'langcode[0][value]'     => 'fr',
       'comment_body[0][value]' => $this->loremIpsum,
       'subject[0][value]'      => 'node 3 fr comment',
     ];
-    $this->drupalPostForm('node/3', $edit, 'Save');
+    $this->drupalGet('node/3');
+    $this->submitForm($edit, 'Save');
     // Comment 6.
     $edit = [
       'content_translation[retranslate]' => 1,
       'comment_body[0][value]'           => $this->loremIpsum,
       'subject[0][value]'                => 'node 3 en from fr comment',
     ];
-    $this->drupalPostForm('comment/5/translations/add/fr/en', $edit, 'Save');
+    $this->drupalGet('comment/5/translations/add/fr/en');
+    $this->submitForm($edit, 'Save');
   }
 
   /**
diff --git a/tests/src/Functional/ContentFullViewFiltersFieldsTest.php b/tests/src/Functional/ContentFullViewFiltersFieldsTest.php
index 245671f..3372194 100644
--- a/tests/src/Functional/ContentFullViewFiltersFieldsTest.php
+++ b/tests/src/Functional/ContentFullViewFiltersFieldsTest.php
@@ -35,7 +35,7 @@ class ContentFullViewFiltersFieldsTest extends ViewTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
 
     $user = $this->drupalCreateUser([
@@ -66,7 +66,8 @@ class ContentFullViewFiltersFieldsTest extends ViewTestBase {
       'settings[node][article][translatable]'                           => 1,
       'settings[node][article][settings][language][language_alterable]' => 1,
     ];
-    $this->drupalPostForm('admin/config/regional/content-language', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/regional/content-language');
+    $this->submitForm($edit, t('Save configuration'));
     \Drupal::entityTypeManager()->clearCachedDefinitions();
 
     // Create a node in en (node1).
@@ -74,29 +75,34 @@ class ContentFullViewFiltersFieldsTest extends ViewTestBase {
       'title[0][value]'    => '001_en_title_node1',
       'langcode[0][value]' => 'en',
     ];
-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save'));
     // Create a translation in fr (node1).
     $edit = [
       'title[0][value]' => '002_fr_title_node1',
     ];
-    $this->drupalPostForm('node/1/translations/add/en/fr', $edit, t('Save (this translation)'));
+    $this->drupalGet('node/1/translations/add/en/fr');
+    $this->submitForm($edit, t('Save (this translation)'));
     // Create a translation in de (node1).
     $edit = [
       'title[0][value]' => '003_de_title_node1',
     ];
-    $this->drupalPostForm('node/1/translations/add/en/de', $edit, t('Save (this translation)'));
+    $this->drupalGet('node/1/translations/add/en/de');
+    $this->submitForm($edit, t('Save (this translation)'));
 
     // Create a node in de (node2).
     $edit = [
       'title[0][value]'    => '004_de_title_node2',
       'langcode[0][value]' => 'de',
     ];
-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save'));
     // Create a translation in fr (node2).
     $edit = [
       'title[0][value]' => '005_fr_title_node2',
     ];
-    $this->drupalPostForm('node/2/translations/add/de/fr', $edit, t('Save (this translation)'));
+    $this->drupalGet('node/2/translations/add/de/fr');
+    $this->submitForm($edit, t('Save (this translation)'));
 
   }
 
diff --git a/tests/src/Functional/ContentModerationIntegration.php b/tests/src/Functional/ContentModerationIntegration.php
index e5eb2c4..df92bb0 100644
--- a/tests/src/Functional/ContentModerationIntegration.php
+++ b/tests/src/Functional/ContentModerationIntegration.php
@@ -40,7 +40,7 @@ class ContentModerationIntegration extends ViewTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp($import_test_views = TRUE) {
+  public function setUp($import_test_views = TRUE): void {
     // Inherit set up from the parent class.
     parent::setUp($import_test_views);
     // Login as a root user.
@@ -51,9 +51,10 @@ class ContentModerationIntegration extends ViewTestBase {
     foreach (self::$langcodes as $langcode) {
       ConfigurableLanguage::createFromLangcode($langcode)->save();
     }
+    $this->drupalGet('admin/config/regional/content-language');
 
     // Enable translation for article nodes.
-    $this->drupalPostForm('admin/config/regional/content-language', [
+    $this->submitForm([
       "entity_types[node]"                                              => 1,
       "settings[node][article][translatable]"                           => 1,
       "settings[node][article][settings][language][language_alterable]" => 1,
diff --git a/tests/src/Functional/ContentTranslationJobsViewTest.php b/tests/src/Functional/ContentTranslationJobsViewTest.php
index 0d0dcfd..77f9a43 100644
--- a/tests/src/Functional/ContentTranslationJobsViewTest.php
+++ b/tests/src/Functional/ContentTranslationJobsViewTest.php
@@ -29,7 +29,7 @@ class ContentTranslationJobsViewTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $langcodes = ['de', 'fr'];
     foreach ($langcodes as $langcode) {
@@ -56,7 +56,8 @@ class ContentTranslationJobsViewTest extends BrowserTestBase {
       'settings[node][article][translatable]'                           => 1,
       'settings[node][article][settings][language][language_alterable]' => 1,
     ];
-    $this->drupalPostForm('admin/config/regional/content-language', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/regional/content-language');
+    $this->submitForm($edit, t('Save configuration'));
     \Drupal::entityTypeManager()->clearCachedDefinitions();
 
     // Create node1 in german.
@@ -64,27 +65,31 @@ class ContentTranslationJobsViewTest extends BrowserTestBase {
       'title[0][value]'    => 'node1 de',
       'langcode[0][value]' => 'de',
     ];
-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save'));
 
     // Create node1 translation in french.
     $edit = [
       'title[0][value]'    => 'node1 fr',
     ];
-    $this->drupalPostForm('node/1/translations/add/de/fr', $edit, t('Save (this translation)'));
+    $this->drupalGet('node/1/translations/add/de/fr');
+    $this->submitForm($edit, t('Save (this translation)'));
 
     // Create node2 in english.
     $edit = [
       'title[0][value]'    => 'node2 en',
       'langcode[0][value]' => 'en',
     ];
-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save'));
 
     // Create node3 in french.
     $edit = [
       'title[0][value]'    => 'node3 fr',
       'langcode[0][value]' => 'fr',
     ];
-    $this->drupalPostForm('node/add/article', $edit, t('Save'));
+    $this->drupalGet('node/add/article');
+    $this->submitForm($edit, t('Save'));
   }
 
   /**
diff --git a/tests/src/Functional/TranslationOperationTargetLanguageTest.php b/tests/src/Functional/TranslationOperationTargetLanguageTest.php
index 82a502b..d775f6a 100644
--- a/tests/src/Functional/TranslationOperationTargetLanguageTest.php
+++ b/tests/src/Functional/TranslationOperationTargetLanguageTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\translation_views\Functional;
 
+use Drupal\user\Entity\User;
+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Exception\ElementHtmlException;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\node\Entity\Node;
@@ -45,7 +48,7 @@ class TranslationOperationTargetLanguageTest extends ViewTestBase {
   /**
    * Admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   private $adminUser;
   /**
@@ -58,7 +61,7 @@ class TranslationOperationTargetLanguageTest extends ViewTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
 
     $this->adminUser = $this->createUser([], 'test_admin', TRUE);
@@ -78,9 +81,10 @@ class TranslationOperationTargetLanguageTest extends ViewTestBase {
     }
     // Enable translation for Article nodes.
     $this->enableTranslation('node', 'article');
+    $this->drupalGet('node/add/article');
 
     // Create testing node.
-    $this->drupalPostForm('node/add/article', [
+    $this->submitForm([
       'title[0][value]' => $this->randomString(),
     ], 'Save');
 
@@ -90,7 +94,7 @@ class TranslationOperationTargetLanguageTest extends ViewTestBase {
   /**
    * Set up languages.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function setUpLanguages() {
     foreach (self::$langcodes as $langcode) {
@@ -107,7 +111,8 @@ class TranslationOperationTargetLanguageTest extends ViewTestBase {
    *   Entity subcategory (e.g. article).
    */
   private function enableTranslation($category, $subcategory) {
-    $this->drupalPostForm('admin/config/regional/content-language', [
+    $this->drupalGet('admin/config/regional/content-language');
+    $this->submitForm([
       "entity_types[$category]"                                                   => 1,
       "settings[$category][$subcategory][translatable]"                           => 1,
       "settings[$category][$subcategory][settings][language][language_alterable]" => 1,
@@ -144,7 +149,7 @@ class TranslationOperationTargetLanguageTest extends ViewTestBase {
   /**
    * Assert that the response HTTP code is 200.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   private function assertResponseOk() {
     $this->assertSession()->statusCodeEquals(200);
@@ -153,8 +158,8 @@ class TranslationOperationTargetLanguageTest extends ViewTestBase {
   /**
    * Test translation operations target language.
    *
-   * @throws \Behat\Mink\Exception\ElementHtmlException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ElementHtmlException
+   * @throws ExpectationException
    */
   public function testTranslationOperationsTargetLanguage() {
     $base_selector = 'table > tbody > tr:nth-child(1) .views-field-translation-operations ul li';
diff --git a/tests/src/Functional/TranslationOperationsFieldPermissionsTest.php b/tests/src/Functional/TranslationOperationsFieldPermissionsTest.php
index 209a194..ecf8298 100644
--- a/tests/src/Functional/TranslationOperationsFieldPermissionsTest.php
+++ b/tests/src/Functional/TranslationOperationsFieldPermissionsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\translation_views\Functional;
 
+use Behat\Mink\Exception\ElementTextException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\node\Entity\Node;
@@ -47,7 +49,7 @@ class TranslationOperationsFieldPermissionsTest extends ViewTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
 
     $this->drupalLogin($this->rootUser);
@@ -62,9 +64,10 @@ class TranslationOperationsFieldPermissionsTest extends ViewTestBase {
     }
     // Enable translation for Article nodes.
     $this->enableTranslation('node', 'article');
+    $this->drupalGet('node/add/article');
 
     // Create testing node.
-    $this->drupalPostForm('node/add/article', [
+    $this->submitForm([
       'title[0][value]' => $this->randomString(),
     ], 'Save');
 
@@ -74,7 +77,7 @@ class TranslationOperationsFieldPermissionsTest extends ViewTestBase {
   /**
    * Set up languages.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function setUpLanguages() {
     foreach (self::$langcodes as $langcode) {
@@ -91,7 +94,8 @@ class TranslationOperationsFieldPermissionsTest extends ViewTestBase {
    *   Entity subcategory (e.g. article).
    */
   private function enableTranslation($category, $subcategory) {
-    $this->drupalPostForm('admin/config/regional/content-language', [
+    $this->drupalGet('admin/config/regional/content-language');
+    $this->submitForm([
       "entity_types[$category]"                                                   => 1,
       "settings[$category][$subcategory][translatable]"                           => 1,
       "settings[$category][$subcategory][settings][language][language_alterable]" => 1,
@@ -130,8 +134,8 @@ class TranslationOperationsFieldPermissionsTest extends ViewTestBase {
   /**
    * Test translation operation create permissions.
    *
-   * @throws \Behat\Mink\Exception\ElementTextException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ElementTextException
+   * @throws ExpectationException
    */
   public function testTranslationOperationsCreatePermissions() {
     $default_language = \Drupal::languageManager()->getDefaultLanguage();
@@ -179,8 +183,8 @@ class TranslationOperationsFieldPermissionsTest extends ViewTestBase {
   /**
    * Test translation operation update permissions.
    *
-   * @throws \Behat\Mink\Exception\ElementTextException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ElementTextException
+   * @throws ExpectationException
    */
   public function testTranslationOperationsUpdatePermissions() {
     $this->translateNode();
@@ -214,7 +218,7 @@ class TranslationOperationsFieldPermissionsTest extends ViewTestBase {
         'Edit'
       );
     $this->click('.view-content > div:nth-child(1) .views-field-translation-operations ul .edit a');
-    $this->assertUrl('/fr/node/1/translations/edit/fr');
+    $this->assertSession()->addressEquals('/fr/node/1/translations/edit/fr');
     // Check with edit permission.
     $this->addPermissionsForAuthUser(['edit any article content']);
     $this->assertTrue($userUpdate->hasPermission('edit any article content'));
@@ -230,14 +234,14 @@ class TranslationOperationsFieldPermissionsTest extends ViewTestBase {
         'Edit'
       );
     $this->click('.view-content > div:nth-child(1) .views-field-translation-operations ul .edit a');
-    $this->assertUrl('/fr/node/1/edit');
+    $this->assertSession()->addressEquals('/fr/node/1/edit');
   }
 
   /**
    * Test translation operation delete permissions.
    *
-   * @throws \Behat\Mink\Exception\ElementTextException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ElementTextException
+   * @throws ExpectationException
    */
   public function testTranslationOperationsDeletePermissions() {
     $this->translateNode();
@@ -270,7 +274,7 @@ class TranslationOperationsFieldPermissionsTest extends ViewTestBase {
         'Delete'
       );
     $this->click('.view-content > div:nth-child(1) .views-field-translation-operations ul .delete a');
-    $this->assertUrl('/fr/node/1/translations/delete/fr');
+    $this->assertSession()->addressEquals('/fr/node/1/translations/delete/fr');
     // Check with edit permission.
     $this->addPermissionsForAuthUser(['delete any article content']);
     $this->assertTrue($userDelete->hasPermission('delete any article content'));
@@ -286,7 +290,7 @@ class TranslationOperationsFieldPermissionsTest extends ViewTestBase {
         'Delete'
       );
     $this->click('.view-content > div:nth-child(1) .views-field-translation-operations ul .delete a');
-    $this->assertUrl('/fr/node/1/delete');
+    $this->assertSession()->addressEquals('/fr/node/1/delete');
   }
 
 }
