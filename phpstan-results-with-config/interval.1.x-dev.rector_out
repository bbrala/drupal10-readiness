modules/contrib/interval/interval.module
modules/contrib/interval/interval.rules.inc
modules/contrib/interval/src/Element/Interval.php
modules/contrib/interval/src/IntervalBase.php
modules/contrib/interval/src/IntervalInterface.php
modules/contrib/interval/src/IntervalItemInterface.php
modules/contrib/interval/src/IntervalPluginManager.php
modules/contrib/interval/src/IntervalPluginManagerInterface.php
modules/contrib/interval/src/InvalidIntervalException.php
modules/contrib/interval/src/Plugin/Field/FieldFormatter/IntervalFormatterBase.php
modules/contrib/interval/src/Plugin/Field/FieldFormatter/IntervalFormatterDefault.php
modules/contrib/interval/src/Plugin/Field/FieldFormatter/IntervalFormatterPhp.php
modules/contrib/interval/src/Plugin/Field/FieldFormatter/IntervalFormatterRaw.php
modules/contrib/interval/src/Plugin/Field/FieldType/IntervalItem.php
modules/contrib/interval/src/Plugin/Field/FieldWidget/IntervalWidget.php
modules/contrib/interval/tests/src/Functional/IntervalTest.php
modules/contrib/interval/tests/src/Kernel/IntervalItemTest.php

8 files with changes
====================

1) modules/contrib/interval/tests/src/Kernel/IntervalItemTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * A field storage to use in this test class.
    *
-   * @var \Drupal\field\Entity\FieldStorageConfig
+   * @var FieldStorageConfig
    */
   protected $fieldStorage;

@@ @@
   /**
    * The field used in this test class.
    *
-   * @var \Drupal\field\Entity\FieldConfig
+   * @var FieldConfig
    */
   protected $field;

@@ @@
   /**
    * @inheritDoc
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a field with settings to validate.
@@ @@
     $this->entityValidateAndSave($entity);

     // Verify initial field value
-    $this->assertEqual($entity->field_interval->interval, $value['interval']);
-    $this->assertEqual($entity->field_interval->period, $value['period']);
-    $this->assertEqual($entity->get('field_interval')->first()->buildPHPString(), '30 minutes');
+    $this->assertEquals($entity->field_interval->interval, $value['interval']);
+    $this->assertEquals($entity->field_interval->period, $value['period']);
+    $this->assertEquals($entity->get('field_interval')->first()->buildPHPString(), '30 minutes');

     // Verify changing the date value.
     $new_value = ['interval' => 2, 'period' => 'hour'];
     $entity->field_interval = $new_value;
-    $this->assertEqual($entity->field_interval->interval, $new_value['interval']);
-    $this->assertEqual($entity->field_interval->period, $new_value['period']);
-    $this->assertEqual($entity->get('field_interval')->first()->buildPHPString(), '2 hours');
+    $this->assertEquals($entity->field_interval->interval, $new_value['interval']);
+    $this->assertEquals($entity->field_interval->period, $new_value['period']);
+    $this->assertEquals($entity->get('field_interval')->first()->buildPHPString(), '2 hours');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/interval/tests/src/Functional/IntervalTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\interval\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * Sets the test up.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser($this->permissions);
   }
@@ @@
       'field_name' => 'foobar',
       'new_storage_type' => 'interval',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save and continue'));
-    $this->drupalPostForm(NULL, [
+    $this->submitForm($edit, t('Save and continue'));
+    $this->submitForm([
       'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
     ], t('Save field settings'));

-    $this->drupalPostForm(NULL, [], t('Save settings'));
-    $this->assertRaw(t('Saved %name configuration', ['%name' => 'Foobar']));
+    $this->submitForm([], t('Save settings'));
+    $this->assertSession()->responseContains(t('Saved %name configuration', ['%name' => 'Foobar']));

     // Setup widget and formatters.
     EntityFormDisplay::load('entity_test.entity_test.default')
@@ @@

     // Test the fields values/widget.
     $this->drupalGet('entity_test/add');
-    $this->assertField('field_foobar[0][interval]', 'Found foobar field interval');
-    $this->assertField('field_foobar[0][period]', 'Found foobar field period');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('field_foobar[0][interval]', 'Found foobar field interval');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('field_foobar[0][period]', 'Found foobar field period');

     // Add some extra fields.
     $button = $this->getSession()->getPage()->findButton('Add another item');
@@ @@
       'user_id[0][target_id]' => 'foo (' . $this->adminUser->id() . ')',
     ];

-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->resetAll();
     $entities = \Drupal::entityTypeManager()->getStorage('entity_test')->loadByProperties([
       'name' => 'Barfoo',
     ]);
-    $this->assertEqual(1, count($entities), 'Entity was saved');
+    $this->assertEquals(1, count($entities), 'Entity was saved');
     $entity = reset($entities);
     $this->drupalGet('entity_test/' . $entity->id());
-    $this->assertText('Barfoo');
-    $this->assertText('1 Week');
-    $this->assertText('3 Days');
-    $this->assertText('1 Quarter');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Barfoo');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('1 Week');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('3 Days');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('1 Quarter');

     // Change the formatter to raw.
     EntityViewDisplay::load('entity_test.entity_test.default')
@@ @@
       ])
       ->save();
     $this->drupalGet('entity_test/' . $entity->id());
-    $this->assertText('1 Week');
-    $this->assertText('3 Days');
-    $this->assertText('1 Quarter');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('1 Week');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('3 Days');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('1 Quarter');

     // Change the formatter to php.
     EntityViewDisplay::load('entity_test.entity_test.default')
@@ @@
       ])
       ->save();
     $this->drupalGet('entity_test/' . $entity->id());
-    $this->assertText('7 days');
-    $this->assertText('3 days');
-    $this->assertText('3 months');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('7 days');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('3 days');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('3 months');

     $this->drupalGet('entity_test/manage/' . $entity->id() . '/edit');
     $edit = [
@@ @@
       // Remove one child.
       'field_foobar[2][interval]' => '',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet('entity_test/' . $entity->id());
-    $this->assertText('Bazbar');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Bazbar');
     // Reload entity.
     \Drupal::entityTypeManager()->getStorage('entity_test')->resetCache([$entity->id()]);
     $entity = \Drupal::entityTypeManager()->getStorage('entity_test')->load($entity->id());
-    $this->assertEqual(count($entity->field_foobar), 2, 'Two values in field');
+    $this->assertEquals(count($entity->field_foobar), 2, 'Two values in field');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldRector
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/interval/src/Plugin/Field/FieldWidget/IntervalWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\interval\Plugin\Field\FieldWidget;

+use Drupal\interval\Plugin\Field\FieldType\IntervalItem;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
@@ @@
   /**
    * The interval plugin manager service.
    *
-   * @var \Drupal\interval\IntervalPluginManagerInterface
+   * @var IntervalPluginManagerInterface
    */
   protected $intervalManager;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\interval\IntervalPluginManagerInterface $interval_manager
+   * @param IntervalPluginManagerInterface $interval_manager
    *   The interval plugin manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, IntervalPluginManagerInterface $interval_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\interval\Plugin\Field\FieldType\IntervalItem $item */
+    /** @var IntervalItem $item */
     $item = $items->get($delta);

     $element += [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/interval/src/Plugin/Field/FieldFormatter/IntervalFormatterPhp.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\interval\Plugin\Field\FieldFormatter;

+use Drupal\interval\IntervalItemInterface;
 use Drupal\Component\Render\HtmlEscapedText;
 use Drupal\Core\Field\FieldItemListInterface;

@@ @@
    * {@inheritdoc}
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
-    /** @var \Drupal\interval\IntervalItemInterface $item */
+    /** @var IntervalItemInterface $item */
     $element = [];
     foreach ($items as $delta => $item) {
       $element[$delta] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/interval/src/Plugin/Field/FieldFormatter/IntervalFormatterBase.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Formats an interval as a string.
    *
-   * @param \Drupal\interval\IntervalItemInterface $item
+   * @param IntervalItemInterface $item
    *   Interval item to format.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/interval/src/InvalidIntervalException.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The item that caused the exception.
    *
-   * @var \Drupal\interval\IntervalItemInterface
+   * @var IntervalItemInterface
    */
   protected $item;

@@ @@
    *   The previous exception
    * @param \DateTime $date
    *   The date that caused the exception.
-   * @param \Drupal\interval\IntervalItemInterface $item
+   * @param IntervalItemInterface $item
    *   The item that caused the exception.
    */
   public function __construct($message = "", $code = 0, \Exception $previous = NULL, \DateTime $date = NULL, IntervalItemInterface $item = NULL) {
@@ @@
   /**
    * Get the item that caused the exception.
    *
-   * @return \Drupal\interval\IntervalItemInterface
+   * @return IntervalItemInterface
    *   The item that caused the exception.
    */
   public function getItem() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/interval/src/IntervalPluginManager.php:31

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations,
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/interval/src/IntervalItemInterface.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the interval plugin for this item.
    *
-   * @return \Drupal\interval\IntervalInterface
+   * @return IntervalInterface
    *   The interval plugin.
    */
   public function getIntervalPlugin();
@@ @@
    *   exceeded. Example, with $limit set to TRUE, January 31st +1 month will
    *   result in February 28th.
    *
-   * @throws \Drupal\interval\InvalidIntervalException
+   * @throws InvalidIntervalException
    */
   public function applyInterval(\DateTime $date, $limit = FALSE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 8 files have been changed by Rector                                       

