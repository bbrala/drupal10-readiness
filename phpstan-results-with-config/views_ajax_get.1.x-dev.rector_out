modules/contrib/views_ajax_get/src/CacheableAjaxResponse.php
modules/contrib/views_ajax_get/src/CacheableViewsAjaxResponse.php
modules/contrib/views_ajax_get/src/Controller/ViewsAjaxController.php
modules/contrib/views_ajax_get/src/EventSubscriber/AjaxResponseSubscriber.php
modules/contrib/views_ajax_get/src/EventSubscriber/RouteAlterSubscriber.php
modules/contrib/views_ajax_get/src/Plugin/views/display_extender/ViewsAjax.php
modules/contrib/views_ajax_get/tests/modules/views_ajax_get_cache_test/views_ajax_get_cache_test.install
modules/contrib/views_ajax_get/tests/src/FunctionalJavascript/ExposedFilterViewsAjaxGetTest.php
modules/contrib/views_ajax_get/views_ajax_get.module

3 files with changes
====================

1) modules/contrib/views_ajax_get/views_ajax_get.module:22

    ---------- begin diff ----------
@@ @@
 /**
  * Determines whether the current view has ajax get enabled.
  *
- * @param \Drupal\views\ViewExecutable $view
+ * @param ViewExecutable $view
  *   The view.
  *
  * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/views_ajax_get/tests/src/FunctionalJavascript/ExposedFilterViewsAjaxGetTest.php:46

    ---------- begin diff ----------
@@ @@

     // Verify that only the "Page One" Node is present.
     $html = $session->getPage()->getHtml();
-    $this->assertContains('Page One', $html);
-    $this->assertNotContains('Page Two', $html);
+    $this->assertStringContainsString('Page One', $html);
+    $this->assertStringNotContainsString('Page Two', $html);

     // Search for "Page Two".
     $this->submitForm(['title' => 'Page Two'], t('Filter'));
@@ @@

     // Verify that only the "Page Two" Node is present.
     $html = $session->getPage()->getHtml();
-    $this->assertContains('Page Two', $html);
-    $this->assertNotContains('Page One', $html);
+    $this->assertStringContainsString('Page Two', $html);
+    $this->assertStringNotContainsString('Page One', $html);

     // Search for "Page One".
     $this->submitForm(['title' => 'Page One'], t('Filter'));
@@ @@

     // Verify that only the "Page One" Node is present.
     $html = $session->getPage()->getHtml();
-    $this->assertContains('Page One', $html);
-    $this->assertNotContains('Page Two', $html);
+    $this->assertStringContainsString('Page One', $html);
+    $this->assertStringNotContainsString('Page Two', $html);

     // Search for "Page Two".
     $this->submitForm(['title' => 'Page Two'], t('Filter'));
@@ @@

     // Verify that only the "Page Two" Node is present.
     $html = $session->getPage()->getHtml();
-    $this->assertContains('Page Two', $html);
-    $this->assertNotContains('Page One', $html);
+    $this->assertStringContainsString('Page Two', $html);
+    $this->assertStringNotContainsString('Page One', $html);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * SpecificAssertContainsRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/views_ajax_get/src/EventSubscriber/AjaxResponseSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_ajax_get\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
+use Drupal\views\ViewExecutable;
 use Drupal\Core\Routing\RouteMatch;
 use Drupal\views\Ajax\ViewAjaxResponse;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
  */
 class AjaxResponseSubscriber implements EventSubscriberInterface {

-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();
     if (!$response instanceof ViewAjaxResponse) {
       return;
@@ @@
     $request = $event->getRequest();
     if (RouteMatch::createFromRequest($request)
       ->getRouteName() === 'views.ajax') {
-      /** @var \Drupal\views\ViewExecutable $view */
+      /** @var ViewExecutable $view */
       $view = $response->getView();
       // If view is excluded from conversion, don't add cache headers.
       if (_views_ajax_get_is_ajax_get_view($view)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 3 files have been changed by Rector                                       

