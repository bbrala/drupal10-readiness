modules/contrib/tmgmt/modules/demo/tests/src/Functional/TMGMTDemoTest.php
modules/contrib/tmgmt/modules/demo/tmgmt_demo.install
modules/contrib/tmgmt/modules/demo/tmgmt_demo.module
modules/contrib/tmgmt/sources/content/src/Access/KeyAccessCheck.php
modules/contrib/tmgmt/sources/content/src/ContentEntitySourcePluginUi.php
modules/contrib/tmgmt/sources/content/src/Controller/ContentTranslationControllerOverride.php
modules/contrib/tmgmt/sources/content/src/Controller/ContentTranslationPreviewController.php
modules/contrib/tmgmt/sources/content/src/DefaultFieldProcessor.php
modules/contrib/tmgmt/sources/content/src/FieldProcessorInterface.php
modules/contrib/tmgmt/sources/content/src/Form/ContentTranslateForm.php
modules/contrib/tmgmt/sources/content/src/LinkFieldProcessor.php
modules/contrib/tmgmt/sources/content/src/MetatagsFieldProcessor.php
modules/contrib/tmgmt/sources/content/src/PathFieldProcessor.php
modules/contrib/tmgmt/sources/content/src/Plugin/tmgmt/Source/ContentEntitySource.php
modules/contrib/tmgmt/sources/content/src/Routing/TmgmtContentRouteSubscriber.php
modules/contrib/tmgmt/sources/content/tests/modules/tmgmt_composite_test/src/Entity/EntityTestComposite.php
modules/contrib/tmgmt/sources/content/tests/src/Functional/ContentEntitySourceContentModerationTest.php
modules/contrib/tmgmt/sources/content/tests/src/Functional/ContentEntitySourceTranslatableEntityTest.php
modules/contrib/tmgmt/sources/content/tests/src/Functional/ContentTmgmtEntitySourceListTest.php
modules/contrib/tmgmt/sources/content/tests/src/Functional/ContentTmgmtEntitySourceNoCanonicalLinkTest.php
modules/contrib/tmgmt/sources/content/tests/src/Functional/ContentTmgmtEntitySourceUiTest.php
modules/contrib/tmgmt/sources/content/tests/src/Kernel/ContentEntityLinkTest.php
modules/contrib/tmgmt/sources/content/tests/src/Kernel/ContentEntityMetatagTest.php
modules/contrib/tmgmt/sources/content/tests/src/Kernel/ContentEntityPathTest.php
modules/contrib/tmgmt/sources/content/tests/src/Kernel/ContentEntitySourceContentModerationTest.php
modules/contrib/tmgmt/sources/content/tests/src/Kernel/ContentEntitySourceUnitTest.php
modules/contrib/tmgmt/sources/content/tests/src/Kernel/ContentEntitySourceUntranslatableTargetsUnitTest.php
modules/contrib/tmgmt/sources/content/tests/src/Kernel/ContentEntitySuggestionsTest.php
modules/contrib/tmgmt/sources/content/tests/src/Kernel/ContentEntityTestBase.php
modules/contrib/tmgmt/sources/content/tests/src/Kernel/ContentEntityUpdateParagraphTest.php
modules/contrib/tmgmt/sources/content/tmgmt_content.api.php
modules/contrib/tmgmt/sources/content/tmgmt_content.module
modules/contrib/tmgmt/sources/locale/src/LocaleSourcePluginUi.php
modules/contrib/tmgmt/sources/locale/src/Plugin/tmgmt/Source/LocaleSource.php
modules/contrib/tmgmt/sources/locale/tests/src/Functional/LocaleSourceUiTest.php
modules/contrib/tmgmt/sources/locale/tests/src/Kernel/LocaleSourceTest.php
modules/contrib/tmgmt/sources/tmgmt_config/src/ConfigProcessorInterface.php
modules/contrib/tmgmt/sources/tmgmt_config/src/ConfigSourcePluginUi.php
modules/contrib/tmgmt/sources/tmgmt_config/src/Controller/ConfigTranslationControllerOverride.php
modules/contrib/tmgmt/sources/tmgmt_config/src/DefaultConfigProcessor.php
modules/contrib/tmgmt/sources/tmgmt_config/src/Form/ConfigTranslateForm.php
modules/contrib/tmgmt/sources/tmgmt_config/src/Plugin/tmgmt/Source/ConfigSource.php
modules/contrib/tmgmt/sources/tmgmt_config/src/Routing/TmgmtConfigRouteSubscriber.php
modules/contrib/tmgmt/sources/tmgmt_config/src/WebformConfigProcessor.php
modules/contrib/tmgmt/sources/tmgmt_config/tests/src/Functional/ConfigSourceListTest.php
modules/contrib/tmgmt/sources/tmgmt_config/tests/src/Functional/ConfigSourceUiTest.php
modules/contrib/tmgmt/sources/tmgmt_config/tests/src/Kernel/ConfigSourceUnitTest.php
modules/contrib/tmgmt/sources/tmgmt_config/tests/src/Kernel/ConfigSourceWebformTest.php
modules/contrib/tmgmt/sources/tmgmt_config/tmgmt_config.module
modules/contrib/tmgmt/src/Annotation/SourcePlugin.php
modules/contrib/tmgmt/src/Annotation/TranslatorPlugin.php
modules/contrib/tmgmt/src/ContinuousManager.php
modules/contrib/tmgmt/src/ContinuousSourceInterface.php
modules/contrib/tmgmt/src/ContinuousTranslatorInterface.php
modules/contrib/tmgmt/src/Controller/TMGMTController.php
modules/contrib/tmgmt/src/Controller/TranslatorController.php
modules/contrib/tmgmt/src/Data.php
modules/contrib/tmgmt/src/Entity/Controller/JobAccessControlHandler.php
modules/contrib/tmgmt/src/Entity/Controller/JobItemAccessControlHandler.php
modules/contrib/tmgmt/src/Entity/Controller/TranslatorAccessControlHandler.php
modules/contrib/tmgmt/src/Entity/Job.php
modules/contrib/tmgmt/src/Entity/JobItem.php
modules/contrib/tmgmt/src/Entity/ListBuilder/JobItemListBuilder.php
modules/contrib/tmgmt/src/Entity/ListBuilder/JobListBuilder.php
modules/contrib/tmgmt/src/Entity/ListBuilder/TranslatorListBuilder.php
modules/contrib/tmgmt/src/Entity/Message.php
modules/contrib/tmgmt/src/Entity/RemoteMapping.php
modules/contrib/tmgmt/src/Entity/Translator.php
modules/contrib/tmgmt/src/Entity/ViewsData/JobItemViewsData.php
modules/contrib/tmgmt/src/Entity/ViewsData/JobViewsData.php
modules/contrib/tmgmt/src/Entity/ViewsData/MessageViewsData.php
modules/contrib/tmgmt/src/Events/ContinuousEvents.php
modules/contrib/tmgmt/src/Events/ShouldCreateJobEvent.php
modules/contrib/tmgmt/src/Form/CartForm.php
modules/contrib/tmgmt/src/Form/ContinuousJobForm.php
modules/contrib/tmgmt/src/Form/JobAbortForm.php
modules/contrib/tmgmt/src/Form/JobForm.php
modules/contrib/tmgmt/src/Form/JobItemAbortForm.php
modules/contrib/tmgmt/src/Form/JobItemDeleteForm.php
modules/contrib/tmgmt/src/Form/JobItemForm.php
modules/contrib/tmgmt/src/Form/JobResubmitForm.php
modules/contrib/tmgmt/src/Form/SettingsForm.php
modules/contrib/tmgmt/src/Form/SourceOverviewForm.php
modules/contrib/tmgmt/src/Form/TmgmtFormBase.php
modules/contrib/tmgmt/src/Form/TranslatorForm.php
modules/contrib/tmgmt/src/JobCheckoutManager.php
modules/contrib/tmgmt/src/JobInterface.php
modules/contrib/tmgmt/src/JobItemCart.php
modules/contrib/tmgmt/src/JobItemInterface.php
modules/contrib/tmgmt/src/JobQueue.php
modules/contrib/tmgmt/src/LanguageMatcher.php
modules/contrib/tmgmt/src/Menu/JobItemBreadcrumbBuilder.php
modules/contrib/tmgmt/src/MessageInterface.php
modules/contrib/tmgmt/src/NullSegmenter.php
modules/contrib/tmgmt/src/Plugin/views/access/ViewJobAccess.php
modules/contrib/tmgmt/src/Plugin/views/area/JobItemLegend.php
modules/contrib/tmgmt/src/Plugin/views/area/JobLegend.php
modules/contrib/tmgmt/src/Plugin/views/field/EntityLabel.php
modules/contrib/tmgmt/src/Plugin/views/field/JobItemState.php
modules/contrib/tmgmt/src/Plugin/views/field/JobItemType.php
modules/contrib/tmgmt/src/Plugin/views/field/JobState.php
modules/contrib/tmgmt/src/Plugin/views/field/Message.php
modules/contrib/tmgmt/src/Plugin/views/field/Progress.php
modules/contrib/tmgmt/src/Plugin/views/field/StatisticsBase.php
modules/contrib/tmgmt/src/Plugin/views/field/TagsCount.php
modules/contrib/tmgmt/src/Plugin/views/field/Translator.php
modules/contrib/tmgmt/src/Plugin/views/field/WordCount.php
modules/contrib/tmgmt/src/Plugin/views/filter/JobItemState.php
modules/contrib/tmgmt/src/Plugin/views/filter/JobState.php
modules/contrib/tmgmt/src/Plugin/views/filter/JobType.php
modules/contrib/tmgmt/src/RemoteMappingInterface.php
modules/contrib/tmgmt/src/SegmenterInterface.php
modules/contrib/tmgmt/src/SourceManager.php
modules/contrib/tmgmt/src/SourcePluginBase.php
modules/contrib/tmgmt/src/SourcePluginInterface.php
modules/contrib/tmgmt/src/SourcePluginUiBase.php
modules/contrib/tmgmt/src/SourcePluginUiInterface.php
modules/contrib/tmgmt/src/SourcePreviewInterface.php
modules/contrib/tmgmt/src/TMGMTException.php
modules/contrib/tmgmt/src/Tests/EntityTestBase.php
modules/contrib/tmgmt/src/Tests/TMGMTTestBase.php
modules/contrib/tmgmt/src/Translator/AvailableResult.php
modules/contrib/tmgmt/src/Translator/TranslatableResult.php
modules/contrib/tmgmt/src/Translator/TranslatorResult.php
modules/contrib/tmgmt/src/TranslatorInterface.php
modules/contrib/tmgmt/src/TranslatorManager.php
modules/contrib/tmgmt/src/TranslatorPluginBase.php
modules/contrib/tmgmt/src/TranslatorPluginInterface.php
modules/contrib/tmgmt/src/TranslatorPluginUiBase.php
modules/contrib/tmgmt/src/TranslatorPluginUiInterface.php
modules/contrib/tmgmt/src/TranslatorRejectDataInterface.php
modules/contrib/tmgmt/tests/src/Functional/LocalTasksTests.php
modules/contrib/tmgmt/tests/src/Functional/TMGMTCartTest.php
modules/contrib/tmgmt/tests/src/Functional/TMGMTTestBase.php
modules/contrib/tmgmt/tests/src/Functional/TMGMTUiContinuousTest.php
modules/contrib/tmgmt/tests/src/Functional/TMGMTUiReviewTest.php
modules/contrib/tmgmt/tests/src/Functional/TMGMTUiTest.php
modules/contrib/tmgmt/tests/src/Functional/TmgmtEntityTestTrait.php
modules/contrib/tmgmt/tests/src/Functional/TmgmtTestTrait.php
modules/contrib/tmgmt/tests/src/Functional/TranslatorTest.php
modules/contrib/tmgmt/tests/src/Functional/TranslatorUITest.php
modules/contrib/tmgmt/tests/src/FunctionalJavascript/TMGMTUiJavascriptTest.php
modules/contrib/tmgmt/tests/src/FunctionalJavascript/TmgmtContinuousJavascriptTest.php
modules/contrib/tmgmt/tests/src/FunctionalJavascript/TranslatorJavascriptTest.php
modules/contrib/tmgmt/tests/src/Kernel/CrudTest.php
modules/contrib/tmgmt/tests/src/Kernel/HelperTest.php
modules/contrib/tmgmt/tests/src/Kernel/PluginsTest.php
modules/contrib/tmgmt/tests/src/Kernel/TMGMTKernelTestBase.php
modules/contrib/tmgmt/tmgmt.api.php
modules/contrib/tmgmt/tmgmt.install
modules/contrib/tmgmt/tmgmt.module
modules/contrib/tmgmt/tmgmt.post_update.php
modules/contrib/tmgmt/tmgmt_test/src/EventSubscriber/TestContinuousEventSubscriber.php
modules/contrib/tmgmt/tmgmt_test/src/Plugin/tmgmt/Source/TestHtmlSource.php
modules/contrib/tmgmt/tmgmt_test/src/Plugin/tmgmt/Source/TestSource.php
modules/contrib/tmgmt/tmgmt_test/src/Plugin/tmgmt/Translator/TestTranslator.php
modules/contrib/tmgmt/tmgmt_test/src/TestController.php
modules/contrib/tmgmt/tmgmt_test/src/TestTranslatorUi.php
modules/contrib/tmgmt/tmgmt_test/tmgmt_test.module
modules/contrib/tmgmt/translators/tmgmt_file/src/Annotation/FormatPlugin.php
modules/contrib/tmgmt/translators/tmgmt_file/src/Commands/TmgmtFileCommands.php
modules/contrib/tmgmt/translators/tmgmt_file/src/FileTranslatorUi.php
modules/contrib/tmgmt/translators/tmgmt_file/src/Format/FormatInterface.php
modules/contrib/tmgmt/translators/tmgmt_file/src/Format/FormatManager.php
modules/contrib/tmgmt/translators/tmgmt_file/src/Plugin/tmgmt/Translator/FileTranslator.php
modules/contrib/tmgmt/translators/tmgmt_file/src/Plugin/tmgmt_file/Format/Html.php
modules/contrib/tmgmt/translators/tmgmt_file/src/Plugin/tmgmt_file/Format/Xliff.php
modules/contrib/tmgmt/translators/tmgmt_file/src/RecursiveDOMIterator.php
modules/contrib/tmgmt/translators/tmgmt_file/tests/src/Functional/FileTranslatorTest.php
modules/contrib/tmgmt/translators/tmgmt_file/tmgmt_file.api.php
modules/contrib/tmgmt/translators/tmgmt_file/tmgmt_file.drush.inc
modules/contrib/tmgmt/translators/tmgmt_file/tmgmt_file.module
modules/contrib/tmgmt/translators/tmgmt_local/skills/src/Plugin/Field/FieldFormatter/LanguageCombinationDefaultFormatter.php
modules/contrib/tmgmt/translators/tmgmt_local/skills/src/Plugin/Field/FieldFormatter/LanguageCombinationTableFormatter.php
modules/contrib/tmgmt/translators/tmgmt_local/skills/src/Plugin/Field/FieldType/LanguageCombination.php
modules/contrib/tmgmt/translators/tmgmt_local/skills/src/Plugin/Field/FieldWidget/LanguageCombinationWidget.php
modules/contrib/tmgmt/translators/tmgmt_local/skills/src/Plugin/Validation/Constraint/LanguageCombinationConstraint.php
modules/contrib/tmgmt/translators/tmgmt_local/skills/src/Plugin/Validation/Constraint/LanguageCombinationConstraintValidator.php
modules/contrib/tmgmt/translators/tmgmt_local/skills/tmgmt_language_combination.module
modules/contrib/tmgmt/translators/tmgmt_local/src/Controller/LocalTaskController.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Entity/Controller/LocalTaskAccessControlHandler.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Entity/Controller/LocalTaskItemAccessController.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Entity/ListBuilder/LocalTaskItemListBuilder.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Entity/ListBuilder/LocalTaskListBuilder.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Entity/LocalTask.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Entity/LocalTaskItem.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Entity/ViewsData/LocalTaskItemViewsData.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Entity/ViewsData/LocalTaskViewsData.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Form/AssignMultiple.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Form/LocalTaskAssignForm.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Form/LocalTaskForm.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Form/LocalTaskItemForm.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Form/LocalTaskUnassignForm.php
modules/contrib/tmgmt/translators/tmgmt_local/src/LocalTaskInterface.php
modules/contrib/tmgmt/translators/tmgmt_local/src/LocalTaskItemInterface.php
modules/contrib/tmgmt/translators/tmgmt_local/src/LocalTranslatorUi.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Menu/TMGMTLocalBreadcrumbBuilder.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/Action/AssignTask.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/Action/AssignToMeTask.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/Action/UnassignTask.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/tmgmt/Translator/LocalTranslator.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/views/area/TaskLegend.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/views/field/ItemCount.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/views/field/LoopCount.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/views/field/Progress.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/views/field/TaskItemStatus.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/views/field/TaskStatus.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/views/field/WordCount.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/views/filter/TaskEligible.php
modules/contrib/tmgmt/translators/tmgmt_local/src/Routing/RouteSubscriber.php
modules/contrib/tmgmt/translators/tmgmt_local/tests/src/Functional/LocalTranslatorContinuousTest.php
modules/contrib/tmgmt/translators/tmgmt_local/tests/src/Functional/LocalTranslatorPreviewTest.php
modules/contrib/tmgmt/translators/tmgmt_local/tests/src/Functional/LocalTranslatorTest.php
modules/contrib/tmgmt/translators/tmgmt_local/tests/src/Functional/LocalTranslatorTestBase.php
modules/contrib/tmgmt/translators/tmgmt_local/tmgmt_local.api.php
modules/contrib/tmgmt/translators/tmgmt_local/tmgmt_local.install
modules/contrib/tmgmt/translators/tmgmt_local/tmgmt_local.module
modules/contrib/tmgmt/translators/tmgmt_local/tmgmt_local.post_update.php
modules/contrib/tmgmt/translators/tmgmt_local/tmgmt_local.rules.inc
modules/contrib/tmgmt/translators/tmgmt_local/tmgmt_local.rules_defaults.inc
modules/contrib/tmgmt/translators/tmgmt_local/tmgmt_local.theme.inc

117 files with changes
======================

1) modules/contrib/tmgmt/translators/tmgmt_local/tmgmt_local.theme.inc:58

    ---------- begin diff ----------
@@ @@
       break;
     case TMGMT_DATA_ITEM_STATE_TRANSLATED:
       $title = t('Translated');
-      $icon = drupal_get_path('module', 'tmgmt') . '/icons/gray-check.svg';
+      $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/gray-check.svg';
       break;
     case TMGMT_DATA_ITEM_STATE_UNTRANSLATED:
     default:
       $title = t('Untranslated');
-      $icon = drupal_get_path('module', 'tmgmt') . '/icons/ready.svg';
+      $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg';
       break;
   }
   $variables['wrapper_attributes'] = new Attribute([
     'class' => $classes,
   ]);
-  $variables['icon_url'] = file_create_url($icon);
+  $variables['icon_url'] = \Drupal::service('file_url_generator')->generateAbsoluteString($icon);
   $variables['title'] = $title;
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector


2) modules/contrib/tmgmt/translators/tmgmt_local/tmgmt_local.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\tmgmt_local\Entity\LocalTaskItem;
 use Drupal\Component\Serialization\Json;

 /**
@@ @@
     return;
   }

-  /** @var \Drupal\tmgmt_local\Entity\LocalTaskItem[] $task_items */
+  /** @var LocalTaskItem[] $task_items */
   $task_items = $task_item_storage->loadMultiple($result);
   foreach ($task_items as $task_item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/tmgmt/translators/tmgmt_local/tmgmt_local.module:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\ProxyClass\Routing\RouteBuilder;
@@ @@
 /**
  * Implements hook_view_access().
  */
-function tmgmt_local_view_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
+function tmgmt_local_view_access(EntityInterface $entity, $operation, AccountInterface $account) {
   if ($entity->id() == 'tmgmt_local_task_overview') {
     switch ($operation) {
       case 'delete':
@@ @@
 function tmgmt_color_legend_local_task_item() {
   $items = [
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/ready.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg'),
       'legend' => t('Untranslated'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/gray-check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/gray-check.svg'),
       'legend' => t('Translated'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/rejected.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/rejected.svg'),
       'legend' => t('Rejected'),
     ],
     [
-      'icon' => file_create_url('core/misc/icons/73b355/check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString('core/misc/icons/73b355/check.svg'),
       'legend' => t('Completed'),
     ],
   ];
@@ @@
 function tmgmt_color_legend_local_task() {
   $items = [
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/rejected.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/rejected.svg'),
       'legend' => t('Unassigned'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/ready.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg'),
       'legend' => t('Needs action'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/hourglass.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/hourglass.svg'),
       'legend' => t('In review'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/ex-red.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ex-red.svg'),
       'legend' => t('Rejected'),
     ],
     [
-      'icon' => file_create_url('core/misc/icons/73b355/check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString('core/misc/icons/73b355/check.svg'),
       'legend' => t('Closed'),
     ],
   ];
@@ @@
 function tmgmt_color_local_review_legend() {
   $items = [
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/ready.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg'),
       'legend' => t('Untranslated'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/gray-check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/gray-check.svg'),
       'legend' => t('Translated'),
     ],
     [
-      'icon' => file_create_url('core/misc/icons/73b355/check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString('core/misc/icons/73b355/check.svg'),
       'legend' => t('Accepted'),
     ],
   ];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector


4) modules/contrib/tmgmt/translators/tmgmt_local/tests/src/Functional/LocalTranslatorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt_local\Functional;

+use Drupal\tmgmt_local\Entity\LocalTaskItem;
+use Drupal\tmgmt\JobItemInterface;
+use Drupal\tmgmt\JobInterface;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\tmgmt\Entity\Job;
 use Drupal\tmgmt\Entity\JobItem;
@@ @@
     \Drupal::state()->set('tmgmt.test_source_data', [
       'dummy' => [
         'deep_nesting' => [
-          '#text' => file_get_contents(drupal_get_path('module', 'tmgmt') . '/tests/testing_html/sample.html'),
+          '#text' => file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/tests/testing_html/sample.html'),
           '#label' => 'Label for job item with type test and id 2.',
           '#translate' => TRUE,
           '#format' => 'basic_html',
@@ @@
     $this->drupalGet('translate/pending');
     $this->clickLink(t('View'));
     $this->assertNotEmpty(preg_match('|translate/(\d+)|', $this->getUrl(), $matches), 'Task found');
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $task */
+    /** @var LocalTask $task */
     $task = \Drupal::entityTypeManager()->getStorage('tmgmt_local_task')->load($matches[1]);
     $this->assertTrue($task->isPending());

     $items = $task->getItems();
-    /** @var \Drupal\tmgmt_local\Entity\LocalTaskItem $first_task_item */
+    /** @var LocalTaskItem $first_task_item */
     $first_task_item = reset($items);
     $this->assertTrue($first_task_item->isPending());

@@ @@

     // Check that the source has not being modified.
     $this->clickLink(t('View'));
-    /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+    /** @var JobItemInterface $job_item */
     $job_items = $job->getItems(['tjiid' => 1]);
     $job_item = reset($job_items);
     $source = $job_item->getData(['dummy', 'deep_nesting', '#text']);
@@ @@
     // Review and accept the first item.
     \Drupal::entityTypeManager()->getStorage('tmgmt_job_item')->resetCache();
     drupal_static_reset('tmgmt_local_task_statistics_load');
-    /** @var \Drupal\tmgmt\JobItemInterface $item1 */
+    /** @var JobItemInterface $item1 */
     $item1 = JobItem::load(1);
     // The first item should be available for review.
     $this->assertTrue($item1->isNeedsReview(), 'Job item 1 needs review.');
@@ @@
     $this->drupalGet('translate/items/1');
     $this->clickLink($task->label());
     // Let's check the task status.
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $task */
+    /** @var LocalTask $task */
     $task = \Drupal::entityTypeManager()->getStorage('tmgmt_local_task')->loadUnchanged($task->id());
     $this->assertTrue($task->isPending());
-    /** @var \Drupal\tmgmt_local\Entity\LocalTaskItem $second_task_item */
+    /** @var LocalTaskItem $second_task_item */
     list($first_task_item, $second_task_item) = array_values($task->getItems());
     $this->assertTrue($first_task_item->isClosed());

@@ @@
     $this->assertSession()->pageTextContains('The translation for ' . $second_task_item->label() . ' has been saved.');

     drupal_static_reset('tmgmt_local_task_statistics_load');
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $task */
+    /** @var LocalTask $task */
     $task = \Drupal::entityTypeManager()->getStorage('tmgmt_local_task')->loadUnchanged($task->id());
     $this->assertTrue($task->isPending());

@@ @@

     \Drupal::entityTypeManager()->getStorage('tmgmt_local_task_item')->resetCache();
     drupal_static_reset('tmgmt_local_task_statistics_load');
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $task */
+    /** @var LocalTask $task */
     $task = \Drupal::entityTypeManager()->getStorage('tmgmt_local_task')->loadUnchanged($task->id());
     $this->assertTrue($task->isPending());
     list($first_task_item, $second_task_item) = array_values($task->getItems());
@@ @@

     // Check the job data.
     \Drupal::entityTypeManager()->getStorage('tmgmt_job_item')->resetCache();
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = Job::load($job->id());
-    /** @var \Drupal\tmgmt\JobItemInterface $item2 */
+    /** @var JobItemInterface $item2 */
     list($item1, $item2) = array_values($job->getItems());
     $this->assertTrue($item1->isAccepted(), 'Job item 1 is accepted.');
     // The first item should be active.
@@ @@
     $this->drupalGet('/manage-translate/completed');
     $this->assertTaskStatusIcon(1, 'manage-translate-task', 'completed', 'In review');
     // Accept translation of the job items.
-    /** @var \Drupal\tmgmt\Entity\Job $job1 */
+    /** @var Job $job1 */
     $job1 = Job::load($job->id());
-    /** @var \Drupal\tmgmt\Entity\JobItem $item */
+    /** @var JobItem $item */
     foreach ($job1->getItems() as $item) {
       $item->acceptTranslation();
     }
@@ @@
     \Drupal::state()->set('tmgmt.test_source_data', [
       'dummy' => [
         'deep_nesting' => [
-          '#text' => file_get_contents(drupal_get_path('module', 'tmgmt') . '/tests/testing_html/sample.html'),
+          '#text' => file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/tests/testing_html/sample.html'),
           '#label' => 'Label for job item with type test and id 2.',
           '#translate' => TRUE,
           '#format' => 'basic_html',
@@ @@
     $this->clickLink(t('View'));
     $this->assertSession()->responseContains('views-field-progress">Closed');
     $this->assertNotEmpty(preg_match('|translate/(\d+)|', $this->getUrl(), $matches), 'Task found');
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $task */
+    /** @var LocalTask $task */
     $task = \Drupal::entityTypeManager()->getStorage('tmgmt_local_task')->load($matches[1]);
     $this->assertTrue($task->isPending());
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/tmgmt/translators/tmgmt_local/tests/src/Functional/LocalTranslatorPreviewTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt_local\Functional;

+use Drupal\tmgmt\JobItemInterface;
 use Drupal\tmgmt\Entity\Translator;

 /**
@@ @@
     $job = $this->createJob('en', 'de');
     $job->translator = $translator;
     $job->save();
-    /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+    /** @var JobItemInterface $job_item */
     $job_item = tmgmt_job_item_create('content', $node->getEntityTypeId(), $node->id(), array('tjid' => $job->id()));
     $job_item->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/tmgmt/translators/tmgmt_local/src/Routing/RouteSubscriber.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new RouteSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/views/filter/TaskEligible.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local\Plugin\views\filter;

+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\views\Plugin\views\filter\FilterPluginBase;

 /**
@@ @@
   /**
    * Where the $query object will reside.
    *
-   * @var \Drupal\views\Plugin\views\query\Sql
+   * @var Sql
    */
   public $query = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/views/field/WordCount.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local\Plugin\views\field;

+use Drupal\tmgmt_local\LocalTaskInterface;
 use Drupal\tmgmt\Plugin\views\field\StatisticsBase;
 use Drupal\views\ResultRow;

@@ @@
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\tmgmt_local\LocalTaskInterface $entity */
+    /** @var LocalTaskInterface $entity */
     $entity = $values->_entity;
     return $entity->getWordCount();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/views/field/TaskStatus.php:20

    ---------- begin diff ----------
@@ @@
     switch ($value) {
       case LocalTaskInterface::STATUS_PENDING:
         $label = t('Needs action');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/ready.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg';
         break;

       case LocalTaskInterface::STATUS_COMPLETED:
         $label = t('In review');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/hourglass.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/hourglass.svg';
         break;

       case LocalTaskInterface::STATUS_REJECTED:
         $label = t('Rejected');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/ex-red.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ex-red.svg';
         break;

       case LocalTaskInterface::STATUS_CLOSED:
@@ @@

       default:
         $label = t('Unassigned');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/rejected.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/rejected.svg';
     }
     $element = [
       '#type' => 'inline_template',
       '#template' => '<img src="{{ icon }}" title="{{ label }}"><span></span></img>',
       '#context' => array(
-        'icon' => file_create_url($icon),
+        'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString($icon),
         'label' => $label,
       ),
     ];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/views/field/TaskItemStatus.php:20

    ---------- begin diff ----------
@@ @@
     switch ($value) {
       case LocalTaskItemInterface::STATUS_PENDING:
         $label = t('Untranslated');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/ready.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg';
         break;

       case LocalTaskItemInterface::STATUS_COMPLETED:
         $label = t('Translated');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/gray-check.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/gray-check.svg';
         break;

       case LocalTaskItemInterface::STATUS_REJECTED:
         $label = t('Rejected');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/rejected.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/rejected.svg';
         break;

       case LocalTaskItemInterface::STATUS_CLOSED:
@@ @@

       default:
         $label = t('Untranslated');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/ready.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg';
     }
     $element = [
       '#type' => 'inline_template',
       '#template' => '<img src="{{ icon }}" title="{{ label }}"><span></span></img>',
       '#context' => array(
-        'icon' => file_create_url($icon),
+        'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString($icon),
         'label' => $label,
       ),
     ];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/views/field/LoopCount.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local\Plugin\views\field;

+use Drupal\tmgmt_local\LocalTaskInterface;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;

@@ @@
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\tmgmt_local\LocalTaskInterface $entity */
+    /** @var LocalTaskInterface $entity */
     $entity = $values->_entity;
     return $entity->getLoopCount();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/views/field/ItemCount.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local\Plugin\views\field;

+use Drupal\views\Plugin\views\query\Sql;
+use Drupal\views\Plugin\views\join\Standard;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\tmgmt\Entity\JobItem;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
@@ @@
   /**
    * Where the $query object will reside.
    *
-   * @var \Drupal\views\Plugin\views\query\Sql
+   * @var Sql
    */
   public $query = NULL;

@@ @@
         ]
       ];
     }
-    /** @var \Drupal\views\Plugin\views\join\Standard $join */
+    /** @var Standard $join */
     $join = Views::pluginManager('join')->createInstance('standard', $configuration);

     // Add the join to the tmgmt_job_item table.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/tmgmt/Translator/LocalTranslator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local\Plugin\tmgmt\Translator;

+use Drupal\tmgmt\Entity\Job;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\tmgmt\ContinuousTranslatorInterface;
@@ @@
    * {@inheritdoc}
    */
   public function requestJobItemsTranslation(array $job_items) {
-    /** @var \Drupal\tmgmt\Entity\Job $job */
+    /** @var Job $job */
     $job = reset($job_items)->getJob();
     $tuid = $job->getSetting('translator');

     // Create local task for this job.
-    /** @var \Drupal\tmgmt_local\LocalTaskInterface $local_task */
+    /** @var LocalTaskInterface $local_task */
     $local_task = LocalTask::create(array(
       'uid' => $job->getOwnerId(),
       'tuid' => $tuid,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/Action/UnassignTask.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local\Plugin\Action;

+use Drupal\tmgmt_local\LocalTaskInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   public function executeMultiple(array $entities) {
-    /** @var \Drupal\tmgmt_local\LocalTaskInterface $task */
+    /** @var LocalTaskInterface $task */
     foreach ($entities as $task) {
       $task->unassign();
       $task->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/Action/AssignToMeTask.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local\Plugin\Action;

+use Drupal\tmgmt_local\LocalTaskInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
    * {@inheritdoc}
    */
   public function executeMultiple(array $entities) {
-    /** @var \Drupal\tmgmt_local\LocalTaskInterface $task */
+    /** @var LocalTaskInterface $task */
     foreach ($entities as $task) {
       $task->assign(\Drupal::currentUser());
       $task->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/tmgmt/translators/tmgmt_local/src/Plugin/Action/AssignTask.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local\Plugin\Action;

+use Drupal\tmgmt_local\LocalTaskInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
    * @param AccountInterface $current_user
    *   Current user.
@@ @@
    */
   public function executeMultiple(array $entities) {
     $info = [];
-    /** @var \Drupal\tmgmt_local\LocalTaskInterface $task */
+    /** @var LocalTaskInterface $task */
     foreach ($entities as $task) {
       $info[$task->id()] = $task;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/tmgmt/translators/tmgmt_local/src/LocalTaskItemInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local;

+use Drupal\tmgmt_local\Entity\LocalTask;
+use Drupal\tmgmt\JobItemInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;

@@ @@
   /**
    * Returns the translation task.
    *
-   * @return \Drupal\tmgmt_local\Entity\LocalTask
+   * @return LocalTask
    *   The LocalTask.
    */
   public function getTask();
@@ @@
   /**
    * Returns the translation job item.
    *
-   * @return \Drupal\tmgmt\JobItemInterface
+   * @return JobItemInterface
    *   The JobItem.
    */
   public function getJobItem();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/tmgmt/translators/tmgmt_local/src/LocalTaskInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local;

+use Drupal\tmgmt\JobInterface;
+use Drupal\tmgmt_local\Entity\LocalTaskItem;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Return the user assigned to this task.
    *
-   * @return \Drupal\Core\Session\AccountInterface|null
+   * @return AccountInterface|null
    *   The user assigned to this task or NULL if there is no user assigned.
    */
   public function getAssignee();
@@ @@
   /**
    * Return the corresponding translation job.
    *
-   * @return \Drupal\tmgmt\JobInterface
+   * @return JobInterface
    *   The job.
    */
   public function getJob();
@@ @@
   /**
    * Assign translation task to passed user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   User object.
    */
   public function assign(AccountInterface $user);
@@ @@
    * @param array $conditions
    *   Additional conditions.
    *
-   * @return \Drupal\tmgmt_local\Entity\LocalTaskItem[]
+   * @return LocalTaskItem[]
    *   An array of local task items.
    */
   public function getItems($conditions = array());
@@ @@
   /**
    * Create a task item for this task and the given job item.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item.
    */
   public function addTaskItem(JobItemInterface $job_item);
@@ @@
   /**
    * Checks whether the user described by $account is the author of this task.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (Optional) A user object. Defaults to the currently logged in user.
    */
   public function isAuthor(AccountInterface $account = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/tmgmt/translators/tmgmt_local/src/Form/LocalTaskItemForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local\Form;

+use Drupal\tmgmt_local\Entity\LocalTask;
+use Drupal\tmgmt\Entity\JobItem;
+use Drupal\Core\Url;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\Xss;
@@ @@
   /**
    * The task item.
    *
-   * @var \Drupal\tmgmt_local\Entity\LocalTaskItem
+   * @var LocalTaskItem
    */
   protected $entity;

@@ @@
         ];
         if (!empty($data[$key]['#format']) && \Drupal::config('tmgmt.settings')->get('respect_text_format') == '1') {
           $format_id = $data[$key]['#format'];
-          /** @var \Drupal\filter\Entity\FilterFormat $format */
+          /** @var FilterFormat $format */
           $format = FilterFormat::load($format_id);

           if ($format && $format->access('use')) {
@@ @@
    * Change items to needs review state and task to completed status.
    */
   public function saveAsComplete(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $task */
+    /** @var LocalTask $task */
     $task = $this->entity->getTask();

     /** @var LocalTaskItem $task_item */
@@ @@

     // Mark the task as completed if all assigned job items are at needs done.
     $all_done = TRUE;
-    /** @var \Drupal\tmgmt_local\Entity\LocalTaskItem $item */
+    /** @var LocalTaskItem $item */
     foreach ($task->getItems() as $item) {
       if (!$item->isCompleted() && !$item->isClosed()) {
         $all_done = FALSE;
@@ @@
       $form_state->setRedirect($uri->getRouteName(), $uri->getRouteParameters());
     }

-    /** @var \Drupal\tmgmt\Entity\JobItem $job_item */
+    /** @var JobItem $job_item */
     $job_item = $this->entity->getJobItem();

     // Add the translations to the job item.
@@ @@
   public function submitStatus(array $form, FormStateInterface $form_state) {
     $values = $form_state->getValues();

-    /** @var \Drupal\tmgmt_local\Entity\LocalTaskItem $item */
+    /** @var LocalTaskItem $item */
     $item = $this->entity;

     $action = $form_state->getTriggeringElement()['#tmgmt_local_action'];
@@ @@

     $job_item->addTranslatedData($this->prepareData($task_item->getData()), [], TMGMT_DATA_ITEM_STATE_PRELIMINARY);

-    /** @var \Drupal\Core\Url $url */
+    /** @var Url $url */
     $url = $job_item->getSourcePlugin()->getPreviewUrl($job_item);
     $form_state->setRedirectUrl($url);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/tmgmt/translators/tmgmt_local/src/Form/LocalTaskForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The local task.
    *
-   * @var \Drupal\tmgmt_local\LocalTaskInterface
+   * @var LocalTaskInterface
    */
   protected $entity;

@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $task */
+    /** @var LocalTask $task */
     $task = $this->getEntity();

     if (!empty($form_state->getValue('tuid'))) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/tmgmt/translators/tmgmt_local/src/Form/LocalTaskAssignForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local\Form;

+use Drupal\tmgmt_local\LocalTaskInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);

-    /** @var \Drupal\user\Entity\User $assignee */
+    /** @var User $assignee */
     $assignee = User::load($form_state->getValue('tuid'));

-    /** @var \Drupal\tmgmt_local\LocalTaskInterface $task */
+    /** @var LocalTaskInterface $task */
     $task = $this->getEntity();
     $task->assign($assignee);
     $task->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/tmgmt/translators/tmgmt_local/src/Form/AssignMultiple.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * Constructs a DeleteMultiple form object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/tmgmt/translators/tmgmt_local/src/Entity/ListBuilder/LocalTaskListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local\Entity\ListBuilder;

+use Drupal\tmgmt_local\Entity\LocalTask;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\tmgmt_local\LocalTaskInterface;
@@ @@
    */
   protected function getDefaultOperations(EntityInterface $entity) {
     $operations = parent::getDefaultOperations($entity);
-    /** @var \Drupal\tmgmt_local\Entity\LocalTask $entity */
+    /** @var LocalTask $entity */
     if ($entity->access('view')) {
       $operations['view'] = array(
         'title' => $this->t('View'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/tmgmt/translators/tmgmt_local/src/Entity/ListBuilder/LocalTaskItemListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local\Entity\ListBuilder;

+use Drupal\tmgmt_local\Entity\LocalTaskItem;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;

@@ @@
    * {@inheritdoc}
    */
   protected function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\tmgmt_local\Entity\LocalTaskItem $entity */
+    /** @var LocalTaskItem $entity */
     $operations = parent::getDefaultOperations($entity);
     if ($entity->access('view', \Drupal::currentUser()) && $entity->getTask()->getAssignee() && $entity->getTask()->getAssignee()->id() == \Drupal::currentUser()->id()) {
       if ($entity->isPending()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/tmgmt/translators/tmgmt_local/src/Controller/LocalTaskController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_local\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\tmgmt_local\LocalTaskInterface;
@@ @@
   /**
    * Assign this task to the current user and reloads the listing page.
    *
-   * @param \Drupal\tmgmt_local\LocalTaskInterface $tmgmt_local_task
+   * @param LocalTaskInterface $tmgmt_local_task
    *   The task being acted upon.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   Either returns a rebuilt listing page as an AJAX response, or redirects
    *   back to the listing page.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/tmgmt/translators/tmgmt_file/tmgmt_file.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\FileUsage\FileUsageInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\file\Entity\File;
 use Drupal\tmgmt\Entity\Job;
@@ @@
 function tmgmt_file_theme() {
   return array(
     'tmgmt_file_html_template' => array(
-      'path' => drupal_get_path('module', 'tmgmt_file') . '/templates',
+      'path' => \Drupal::service('extension.list.module')->getPath('tmgmt_file') . '/templates',
       'template' => 'tmgmt_file_html_template',
       'variables' => array('tjid' => NULL, 'source_language' => NULL, 'target_language' => NULL, 'items' => NULL),
     ),
@@ @@
   $fids = $result->fetchCol();
   if (!empty($fids)) {
     // Remove file usage record.
-    /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+    /** @var FileUsageInterface $file_usage */
     $file_usage = \Drupal::service('file.usage');
     foreach (File::loadMultiple($fids) as $file) {
       $file_usage->delete($file, 'tmgmt_file', 'tmgmt_job', $job->id());
@@ @@
     ->condition('uri', $uri)
     ->execute();
   if ($fids) {
-    $files = \Drupal\file\Entity\File::loadMultiple($fids);
+    $files = File::loadMultiple($fids);
     foreach ($files as $item) {
       // Since some database servers sometimes use a case-insensitive comparison
       // by default, double check that the filename is an exact match.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


27) modules/contrib/tmgmt/translators/tmgmt_file/tests/src/Functional/FileTranslatorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt_file\Functional;

+use Drupal\tmgmt\MessageInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Tests\tmgmt\Functional\TMGMTTestBase;
@@ @@
     ]);

     // Get the source text.
-    $source_text = trim(file_get_contents(drupal_get_path('module', 'tmgmt') . '/tests/testing_html/sample.html'));
+    $source_text = trim(file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/tests/testing_html/sample.html'));

     // Create the reader instance, it will be used through the tests.
     $reader = new \XMLReader();
@@ @@
     ]);

     // Get the source text.
-    $source_text = trim(file_get_contents(drupal_get_path('module', 'tmgmt') . '/tests/testing_html/sample.html'));
+    $source_text = trim(file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/tests/testing_html/sample.html'));

     // Create a new job.
     $job = $this->createJob();
@@ @@

     $dom = new \DOMDocument();
     $dom->loadXML($xliff);
-    $this->assertTrue($dom->schemaValidate(drupal_get_path('module', 'tmgmt_file') . '/xliff-core-1.2-strict.xsd'));
+    $this->assertTrue($dom->schemaValidate(\Drupal::service('extension.list.module')->getPath('tmgmt_file') . '/xliff-core-1.2-strict.xsd'));

     // "Translate" items.
     $xml = simplexml_import_dom($dom);
@@ @@
     \Drupal::state()->set('tmgmt.test_source_data', array(
       'dummy' => array(
         'deep_nesting' => array(
-          '#text' => file_get_contents(drupal_get_path('module', 'tmgmt') . '/tests/testing_html/sample.html') . ' @id.',
+          '#text' => file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/tests/testing_html/sample.html') . ' @id.',
           '#label' => 'Label of deep nested item @id',
         ),
         '#label' => 'Dummy item',
@@ @@
     $xliff = file_get_contents($download_url);
     $dom = new \DOMDocument();
     $dom->loadXML($xliff);
-    $this->assertTrue($dom->schemaValidate(drupal_get_path('module', 'tmgmt_file') . '/xliff-core-1.2-strict.xsd'));
+    $this->assertTrue($dom->schemaValidate(\Drupal::service('extension.list.module')->getPath('tmgmt_file') . '/xliff-core-1.2-strict.xsd'));

     // Build a list of expected note labels.
     $expected_notes = [
@@ @@
   /**
    * Asserts import integrity for a job.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job to check.
    * @param bool $expected
    *   (optional) If an integrity failed message is expected or not, defaults
@@ @@
    */
   protected function assertIntegrityCheck(JobInterface $job, $expected = TRUE) {
     $integrity_check_failed = FALSE;
-    /** @var \Drupal\tmgmt\MessageInterface $message */
+    /** @var MessageInterface $message */
     foreach ($job->getMessages() as $message) {
       if ($message->getMessage() == new TranslatableMarkup('Failed to validate semantic integrity of %key element. Please check also the HTML code of the element in the review process.', array('%key' => 'dummy][deep_nesting'))) {
         $integrity_check_failed = TRUE;
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/tmgmt/translators/tmgmt_file/src/Plugin/tmgmt_file/Format/Xliff.php:119

    ---------- begin diff ----------
@@ @@
    *   The unique identifier for this data element.
    * @param $element
    *   Array with the properties #text and optionally #label.
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Translation job.
    */
   protected function addTransUnit($key, $element, JobInterface $job) {
@@ @@
    *
    * @param string $translation
    *   Job data array.
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Translation job.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/tmgmt/translators/tmgmt_file/src/Plugin/tmgmt/Translator/FileTranslator.php:38

    ---------- begin diff ----------
@@ @@
     $path = $job->getSetting('scheme') . '://tmgmt_file/' . $name . '.' .  $job->getSetting('export_format');
     $dirname = dirname($path);
     if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS)) {
-      $file = file_save_data($export->export($job), $path, FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($export->export($job), $path, FileSystemInterface::EXISTS_REPLACE);
       \Drupal::service('file.usage')->add($file, 'tmgmt_file', 'tmgmt_job', $job->id());
-      $job->submitted('Exported file can be downloaded <a href="@link" download>here</a>.', array('@link' => file_create_url($path)));
+      $job->submitted('Exported file can be downloaded <a href="@link" download>here</a>.', array('@link' => \Drupal::service('file_url_generator')->generateAbsoluteString($path)));
     }
     else {
       $job->rejected('Failed to create writable directory @dirname, check file system permissions.', ['@dirname' => $dirname]);
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/tmgmt/translators/tmgmt_file/src/Format/FormatManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_file\Format;

+use Drupal\tmgmt\SourcePluginUiInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\DefaultPluginManager;
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    * @param string $plugin
    *   Name of the source plugin.
    *
-   * @return \Drupal\tmgmt\SourcePluginUiInterface
+   * @return SourcePluginUiInterface
    *   Instance a source plugin UI instance.
    */
   public function createUIInstance($plugin) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/tmgmt/translators/tmgmt_file/src/FileTranslatorUi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_file;

+use Drupal\tmgmt\TranslatorInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
@@ @@
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildConfigurationForm($form, $form_state);

-    /** @var \Drupal\tmgmt\TranslatorInterface $translator */
+    /** @var TranslatorInterface $translator */
     $translator = $form_state->getFormObject()->getEntity();
     $form['export_format'] = array(
       '#type' => 'radios',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/tmgmt/translators/tmgmt_file/src/Annotation/FormatPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_file\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


33) modules/contrib/tmgmt/tmgmt_test/tmgmt_test.module:65

    ---------- begin diff ----------
@@ @@
   $definitions['tmgmt_test_generating'] = [
     'label' => t('Translation is requested from the elders of the Internet'),
     'type' => 'translator_state',
-    'icon' => drupal_get_path('module', 'tmgmt') . '/icons/earth.svg',
+    'icon' => \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/earth.svg',
     'show_job_filter' => TRUE,
   ];
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


34) modules/contrib/tmgmt/tmgmt_test/src/TestTranslatorUi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_test;

+use Drupal\tmgmt\TranslatorInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\tmgmt\JobInterface;
 use Drupal\tmgmt\JobItemInterface;
@@ @@
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildConfigurationForm($form, $form_state);

-    /** @var \Drupal\tmgmt\TranslatorInterface $test_translator */
+    /** @var TranslatorInterface $test_translator */
     $test_translator = $form_state->getFormObject()->getEntity();

     $form['expose_settings'] = array(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/tmgmt/tmgmt_test/src/Plugin/tmgmt/Source/TestHtmlSource.php:21

    ---------- begin diff ----------
@@ @@
     return array(
       'dummy' => array(
         'deep_nesting' => array(
-          '#text' => file_get_contents(drupal_get_path('module', 'tmgmt') . '/tests/testing_html/sample.html'),
+          '#text' => file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/tests/testing_html/sample.html'),
           '#label' => 'Label for job item with type ' . $job_item->getItemType() . ' and id ' . $job_item->getItemId() . '.',
         ),
       ),
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/tmgmt/tmgmt_test/src/EventSubscriber/TestContinuousEventSubscriber.php:17

    ---------- begin diff ----------
@@ @@
   const DISALLOWED_LABEL = 'Testing SHOULD_CREATE_JOB event';

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * TestContinuousEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Do not add the job if we have a filter match.
    *
-   * @param \Drupal\tmgmt\Events\ShouldCreateJobEvent $event
+   * @param ShouldCreateJobEvent $event
    *   The event object.
    */
   public function onShouldCreateJob(ShouldCreateJobEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/tmgmt/tmgmt.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\tmgmt\Entity\JobItem;
 use Drupal\Component\Serialization\Json;

 /**
@@ @@
     return;
   }

-  /** @var \Drupal\tmgmt\Entity\JobItem[] $job_items */
+  /** @var JobItem[] $job_items */
   $job_items = $job_item_storage->loadMultiple($result);
   foreach ($job_items as $job_item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


38) modules/contrib/tmgmt/tmgmt.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\tmgmt\MessageInterface;
+use Drupal\tmgmt\JobItemCart;
 /**
  * @file
  * Main module file for the Translation Management module.
@@ @@
  * @addtogroup tmgmt_job
  * @{
  */
-
 /**
  * Loads active job entities that have a job item with the identifiers.
  *
@@ @@
  * @param string $source_language
  *   The source language of the item.
  *
- * @return \Drupal\tmgmt\Entity\JobItem[]
+ * @return JobItem[]
  *   An array of job item entities.
  */
 function tmgmt_job_item_load_latest($plugin, $item_type, $item_id, $source_language) {
@@ @@
  * @param string $source_language
  *   The source language of the item.
  *
- * @return \Drupal\tmgmt\Entity\JobItem[]
+ * @return JobItem[]
  *   An array of job item entities.
  */
 function tmgmt_job_item_load_all_latest($plugin, $item_type, $item_id, $source_language) {
@@ @@
  * @param $account
  *   (Optional) A user object. Defaults to the currently logged in user.
  *
- * @return \Drupal\tmgmt\JobInterface
+ * @return JobInterface
  *   The job entity.
  */
 function tmgmt_job_match_item($source_language, $target_language, $account = NULL) {
@@ @@
 }

 /**
- * Creates a translation job.
- *
- * @param string $source_language
- *   The source language from which should be translated.
- * @param string $target_language
- *   The target language into which should be translated.
- * @param int $uid
- *   The user ID.
- * @param array $values
- *   (Optional) An array of additional entity values.
- *
- * @return \Drupal\tmgmt\JobInterface The job entity.
- *   The job entity.
- */
+* Creates a translation job.
+*
+* @param string $source_language
+*   The source language from which should be translated.
+* @param string $target_language
+*   The target language into which should be translated.
+* @param int $uid
+*   The user ID.
+* @param array $values
+*   (Optional) An array of additional entity values.
+*
+* @return JobInterface The job entity.
+ The job entity.
+*/
 function tmgmt_job_create($source_language, $target_language, $uid = 0, array $values = array()) {
   return Job::create(array_merge($values, array(
     'source_language' => $source_language,
@@ @@
  * @param $values
  *   (Optional) An array of additional entity values to be set.
  *
- * @return \Drupal\tmgmt\JobItemInterface
+ * @return JobItemInterface
  *   The created, not yet saved, job item entity.
  */
 function tmgmt_job_item_create($plugin, $item_type, $item_id, array $values = array()) {
@@ @@
  * @param $values
  *   (Optional) An array of additional entity values to be set.
  *
- * @return \Drupal\tmgmt\MessageInterface
+ * @return MessageInterface
  *   The created, not yet saved, message entity.
  */
 function tmgmt_message_create($message = '', $variables = array(), $values = array()) {
@@ @@
  * @addtogroup tmgmt_translator
  * @{
  */
-
 /**
  * Loads all translators that are available and, if a translation job is given,
  * support translations for that job with its current configuration.
  *
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   (Optional) A translation job.
  *
  * @return array
@@ @@
  * This can either be because the configuration of the passed job is not
  * supported or because the translator service can't be reached.
  *
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   (Optional) A translation job.
  *
  * @return array
@@ @@
   $labels = array();
   $translators = Translator::loadMultiple();
   uasort($translators, array('Drupal\Core\Config\Entity\ConfigEntityBase', 'sort'));
-  /** @var \Drupal\tmgmt\Entity\Translator $translator */
+  /** @var Translator $translator */
   foreach ($translators as $translator) {
     if (isset($job) && $job->isContinuous() && !($translator->getPlugin() instanceof ContinuousTranslatorInterface)) {
       continue;
@@ @@
  * Attempts to check out a number of jobs. Performs a number of checks on each
  * job and also allows to alter the behavior through hooks.
  *
- * @param \Drupal\tmgmt\JobInterface[] $jobs
+ * @param JobInterface[] $jobs
  *   The jobs to be checked out.
  *
  * @return
@@ @@
  * more than one translator available, if he has settings and if the job has a
  * fixed target language.
  *
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   The job item
  *
  * @return
@@ @@
  * Requests translations for a job and prints messages which have happened since
  * then.
  *
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   The job object for which translations should be requested.
  *
  * @return
@@ @@
 /**
  * Print all messages that occurred since our request to the screen.
  *
- * @param \Drupal\tmgmt\JobInterface|\Drupal\tmgmt\JobItemInterface $entity
+ * @param JobInterface|JobItemInterface $entity
  *    The translation job or job item for which the message should be written.
  *
  * @return bool
@@ @@
  */
 function tmgmt_translation_review_form_revert(array $form, FormStateInterface $form_state) {

-  /** @var \Drupal\tmgmt\JobItemInterface $item */
+  /** @var JobItemInterface $item */
   $item = $form_state->getFormObject()->getEntity();

   $key = \Drupal::service('tmgmt.data')->ensureArrayKey($form_state->getTriggeringElement()['#data_item_key']);
@@ @@
   $data = array();
   $job_item = $form_state->getFormObject()->getEntity();

-  /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+  /** @var JobItemInterface $job_item */
   $plugin = $job_item->getTranslatorPlugin();
   $success = TRUE;
   switch ($matches['action']) {
@@ @@
 function tmgmt_color_legend() {
   $items = [
     [
-      'icon' => file_create_url('core/misc/icons/bebebe/house.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString('core/misc/icons/bebebe/house.svg'),
       'legend' => t('Original language'),
     ],
     [
-      'icon' => file_create_url('core/misc/icons/bebebe/ex.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString('core/misc/icons/bebebe/ex.svg'),
       'legend' => t('Not translated'),
     ],
     [
-      'icon' => file_create_url('core/misc/icons/73b355/check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString('core/misc/icons/73b355/check.svg'),
       'legend' => t('Translated'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/outdated.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/outdated.svg'),
       'legend' => t('Translation Outdated'),
     ],
   ];
@@ @@
   foreach (JobItem::getStateDefinitions() as $state_definition) {
     if (!empty($state_definition['icon'])) {
       $items[] = [
-        'icon' => file_url_transform_relative(file_create_url($state_definition['icon'])),
+        'icon' => \Drupal::service('file_url_generator')->generateString($state_definition['icon']),
         'legend' => $state_definition['label'],
       ];
     }
@@ @@
   foreach (JobItem::getStateDefinitions() as $state_definition) {
     if (!empty($state_definition['icon'])) {
       $items[] = [
-        'icon' => file_url_transform_relative(file_create_url($state_definition['icon'])),
+        'icon' => \Drupal::service('file_url_generator')->generateString($state_definition['icon']),
         'legend' => $state_definition['label'],
       ];
     }
@@ @@
 function tmgmt_color_job_legend() {
   $items = [
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/rejected.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/rejected.svg'),
       'legend' => t('Unprocessed'),
     ],
   ];
@@ @@
   foreach (JobItem::getStateDefinitions() as $state_definition) {
     if (!empty($state_definition['icon'])) {
       $items[] = [
-        'icon' => file_url_transform_relative(file_create_url($state_definition['icon'])),
+        'icon' => \Drupal::service('file_url_generator')->generateString($state_definition['icon']),
         'legend' => $state_definition['label'],
       ];
     }
@@ @@

   if (\Drupal::service('tmgmt.continuous')->hasContinuousJobs()) {
     $items[] = [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/continuous.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/continuous.svg'),
       'legend' => t('Continuous'),
     ];
   };
@@ @@
 function tmgmt_color_review_legend() {
   $items = [
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/hourglass.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/hourglass.svg'),
       'legend' => t('Pending'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/ready.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg'),
       'legend' => t('Translated'),
     ],
     [
-      'icon' => file_create_url(drupal_get_path('module', 'tmgmt') . '/icons/gray-check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/gray-check.svg'),
       'legend' => t('Reviewed'),
     ],
     [
-      'icon' => file_create_url('core/misc/icons/73b355/check.svg'),
+      'icon' => \Drupal::service('file_url_generator')->generateAbsoluteString('core/misc/icons/73b355/check.svg'),
       'legend' => t('Accepted'),
     ],
   ];
@@ @@
  * @addtogroup tmgmt_cart
  * @{
  */
-
 /**
  * Returns the cart service.
  *
- * @return \Drupal\tmgmt\JobItemCart
+ * @return JobItemCart
  *   The cart object.
  */
 function tmgmt_cart_get() {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector


39) modules/contrib/tmgmt/tmgmt.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\tmgmt\JobInterface;
 /**
  * @file
  * Update function for the tmgmt module.
@@ @@
  * Add job items overview.
  */
 function tmgmt_update_8005() {
-  $overview = file_get_contents(drupal_get_path('module', 'tmgmt') . '/config/install/views.view.tmgmt_translation_all_job_items.yml');
+  $overview = file_get_contents(\Drupal::service('extension.list.module')->getPath('tmgmt') . '/config/install/views.view.tmgmt_translation_all_job_items.yml');
   $values = Yaml::decode($overview);
   $storage_controller = \Drupal::entityTypeManager()->getStorage('view');
   $storage_controller->create($values)->save();
@@ @@
  */
 function tmgmt_update_8007() {
   $continuous_jobs = \Drupal::entityTypeManager()->getStorage('tmgmt_job')->loadByProperties(['job_type' => Job::TYPE_CONTINUOUS]);
-  /** @var \Drupal\tmgmt\JobInterface $continuous_job */
+  /** @var JobInterface $continuous_job */
   foreach ($continuous_jobs as $continuous_job) {
     $continuous_job->setState(Job::STATE_CONTINUOUS);
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


40) modules/contrib/tmgmt/tmgmt.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\tmgmt\Data;
 /**
  * @file
  * Hooks provided by the Translation Management module.
@@ @@
  *   translations.
  *   - JobItem A JobItem to check for suggestions.
  *   - ...
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   The current translation job to check for additional translation items.
  *
  * @return array
@@ @@
 /**
  * @} End of "addtogroup tmgmt_translator".
  */
-
 /**
  * @defgroup tmgmt_job Translation Jobs
  *
@@ @@
  * $job->accepted('Optional message');
  * @endcode
  */
-
 /**
  * @defgroup tmgmt_translator Translators
  *
@@ @@
  *
  * TBD.
  */
-
 /**
  * @defgroup tmgmt_source Translation source
  *
@@ @@
  *   sources in their implementation of
  *   SourcePluginControllerInterface::saveTranslation().
  */
-
 /**
  * @defgroup tmgmt_remote_languages_mapping Remote languages mapping
  *
@@ @@
  * request in the TranslatorPluginControllerInterface::requestTranslation()
  * plugin implementation.
  */
-
 /**
  * @defgroup tmgmt_cart Translation cart
  *
@@ @@
  * tmgmt_add_cart_form() on either the source overview page as well as the
  * translate tab.
  */
-
 /**
  * Allows to alter job checkout workflow before the default behavior kicks in.
  *
@@ @@
  * Note: The default behavior will ignore jobs that have already been checked
  * out. Remove jobs from the array to prevent the default behavior for them.
  *
- * @param \Drupal\tmgmt\JobInterface[] $remaining_jobs
+ * @param JobInterface[] $remaining_jobs
  *   List of redirects the user is supposed to be redirected to.
- * @param \Drupal\tmgmt\JobInterface[] $jobs
+ * @param JobInterface[] $jobs
  *   Array with the translation jobs to be checked out.
  */
 function hook_tmgmt_job_checkout_before_alter(&$remaining_jobs, &$jobs) {
@@ @@
 /**
  * Allows to alter job checkout workflow before the default behavior.
  *
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   The Job being submitted.
  */
 function hook_tmgmt_job_before_request_translation(JobInterface $job) {
-  /** @var \Drupal\tmgmt\Data $data_service */
+  /** @var Data $data_service */
   $data_service = \Drupal::service('tmgmt.data');

   // Do changes to the data for example.
@@ @@
 /**
  * Allows to alter job checkout workflow after the default behavior.
  *
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   The Job being submitted.
  */
 function hook_tmgmt_job_after_request_translation(JobInterface $job) {
-  /** @var \Drupal\tmgmt\Data $data_service */
+  /** @var Data $data_service */
   $data_service = \Drupal::service('tmgmt.data');

   // Reset the previous done changes to the data for example.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


41) modules/contrib/tmgmt/tests/src/Kernel/TMGMTKernelTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt\Kernel;

+use Drupal\tmgmt\TranslatorInterface;
+use Drupal\tmgmt\JobInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\tmgmt\Entity\Translator;
@@ @@
   /**
    * A default translator using the test translator.
    *
-   * @var \Drupal\tmgmt\TranslatorInterface
+   * @var TranslatorInterface
    */
   protected $default_translator;

@@ @@
   /**
    * Creates, saves and returns a translator.
    *
-   * @return \Drupal\tmgmt\TranslatorInterface
+   * @return TranslatorInterface
    */
   function createTranslator() {
     $translator = Translator::create([
@@ @@
   }

   /**
-   * Creates, saves and returns a translation job.
-   *
-   * @param string $source
-   *   The source langcode.
-   * @param string $target
-   *   The target langcode.
-   * @param int $uid
-   *   The user ID.
-   * @param array $values
-   *   (Optional) An array of additional entity values.
-   *
-   * @return \Drupal\tmgmt\JobInterface A new job.
-   *   A new job.
-   */
+  * Creates, saves and returns a translation job.
+  *
+  * @param string $source
+  *   The source langcode.
+  * @param string $target
+  *   The target langcode.
+  * @param int $uid
+  *   The user ID.
+  * @param array $values
+  *   (Optional) An array of additional entity values.
+  *
+   * @return JobInterface A new job.
+    A new job.
+  */
   protected function createJob($source = 'en', $target = 'de', $uid = 0, array $values = array()) {
     $job = tmgmt_job_create($source, $target, $uid, $values);
     $this->assertEquals(SAVED_NEW, $job->save());
@@ @@
   /**
    * Asserts job item language codes.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   Job item to check.
    * @param string $expected_source_lang
    *   Expected source language.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/tmgmt/tests/src/FunctionalJavascript/TMGMTUiJavascriptTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt\FunctionalJavascript;

+use Drupal\file\FileInterface;
 use Drupal\file\Entity\File;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ @@
   /**
    * A default translator using the test translator.
    *
-   * @var \Drupal\tmgmt\Entity\Translator
+   * @var Translator
    */
   protected $default_translator;

@@ @@
   /**
    * A file entity.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $image;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/tmgmt/tests/src/Functional/TranslatorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt\Functional;

+use Drupal\tmgmt\JobInterface;
 use Drupal\tmgmt\Entity\Job;
 use Drupal\tmgmt\Entity\JobItem;

@@ @@
     // Delete a provider using an API call and assert that active job and its
     // job item used by deleted translator were aborted.
     $translator->delete();
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = Job::load($job->id());
     $continuous = Job::load($continuous->id());
     $this->assertEquals(Job::STATE_ABORTED, $job->getState());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/tmgmt/tests/src/Functional/TmgmtTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt\Functional;

+use Drupal\user\UserInterface;
+use Drupal\tmgmt\TranslatorInterface;
+use Drupal\tmgmt\JobInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\tmgmt\Entity\Translator;
 use Drupal\tmgmt\JobItemInterface;
@@ @@
   /**
    * Drupal user object created by loginAsAdmin().
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin_user = NULL;

@@ @@
   /**
    * Drupal user object created by loginAsTranslator().
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $translator_user = NULL;

@@ @@
   /**
    * Creates, saves and returns a translator.
    *
-   * @return \Drupal\tmgmt\TranslatorInterface
+   * @return TranslatorInterface
    */
   function createTranslator(array $values = []) {
     $translator = Translator::create($values + [
@@ @@
   /**
    * Creates, saves and returns a translation job.
    *
-   * @return \Drupal\tmgmt\JobInterface
+   * @return JobInterface
    */
   function createJob($source = 'en', $target = 'de', $uid = 1, $values = array())  {
     $job = tmgmt_job_create($source, $target, $uid, $values);
@@ @@
   /**
    * Asserts job item language codes.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   Job item to check.
    * @param string $expected_source_lang
    *   Expected source language.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


45) modules/contrib/tmgmt/tests/src/Functional/TmgmtEntityTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt\Functional;

+use Drupal\node\NodeInterface;
 use Drupal\comment\Tests\CommentTestTrait;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ @@
    * @param string $sourcelang
    *   Source lang of the node to be created.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   Newly created node object.
    */
   protected function createTranslatableNode($bundle, $sourcelang = 'en') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


46) modules/contrib/tmgmt/tests/src/Functional/TMGMTUiTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt\Functional;

+use Drupal\tmgmt\JobCheckoutManager;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\tmgmt\Entity\Job;
@@ @@
     $this->assertSession()->pageTextContains(t('@translator can not translate from @source to @target.', array('@translator' => 'Test provider', '@source' => 'English', '@target' => 'Greek')));

     // Job still needs to be in state new.
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = \Drupal::entityTypeManager()->getStorage('tmgmt_job')->loadUnchanged($job->id());
     $this->assertTrue($job->isUnprocessed());

@@ @@
       'settings[action]' => 'translate',
     );
     $this->submitForm($edit, t('Submit to provider'));
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = \Drupal::entityTypeManager()->getStorage('tmgmt_job')->loadUnchanged($job->id());
     $this->assertTrue($job->isAuthor());

@@ @@
   function testCheckoutFunction() {
     $job = $this->createJob();

-    /** @var \Drupal\tmgmt\JobCheckoutManager $job_checkout_manager */
+    /** @var JobCheckoutManager $job_checkout_manager */
     $job_checkout_manager = \Drupal::service('tmgmt.job_checkout_manager');

     // Check out a job when only the test translator is available. That one has
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/tmgmt/src/TranslatorPluginUiInterface.php:23

    ---------- begin diff ----------
@@ @@
    * Services based translators with remote states should place a Poll button
    * here to sync the job state.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The translation job.
    */
   public function checkoutInfo(JobInterface $job);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


48) modules/contrib/tmgmt/src/TranslatorPluginUiBase.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Provides a simple wrapper for the checkout info fieldset.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Translation job object.
    * @param $form
    *   Partial form structure to be wrapped in the fieldset.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/tmgmt/src/TranslatorPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt;

+use Drupal\tmgmt\Translator\AvailableResult;
+use Drupal\tmgmt\Translator\TranslatableResult;
 use Drupal\Component\Plugin\PluginInspectionInterface;

 /**
@@ @@
    * @param TranslatorInterface $translator
    *   The translator entity.
    *
-   * @return \Drupal\tmgmt\Translator\AvailableResult
+   * @return AvailableResult
    *   The result of the availability check.
    */
   public function checkAvailable(TranslatorInterface $translator);
@@ @@
    *
    * @param TranslatorInterface $translator
    *   The Translator entity that should handle the translation.
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The Job entity that should be translated.
    *
-   * @return \Drupal\tmgmt\Translator\TranslatableResult
+   * @return TranslatableResult
    *   The result of the translatable check.
    */
   public function checkTranslatable(TranslatorInterface $translator, JobInterface $job);
@@ @@
    * This info may be used by other plugins to find out what language pairs
    * can handle the translator.
    *
-   * @param \Drupal\tmgmt\TranslatorInterface $translator
+   * @param TranslatorInterface $translator
    *   The translator entity.
    *
    * @return array
@@ @@
    * During the translation process, Job::getItems() will only return job items
    * that are not already fully translated.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job that should be submitted.
    *
    * @see hook_tmgmt_job_before_request_translation()
@@ @@
   /**
    * Aborts a translation job.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job that should have its translation aborted.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


50) modules/contrib/tmgmt/src/TranslatorManager.php:23

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    * @param string $plugin
    *   Name of the translator plugin.
    *
-   * @return \Drupal\tmgmt\TranslatorPluginUiInterface
+   * @return TranslatorPluginUiInterface
    *   Instance a translator plugin UI instance.
    */
   public function createUIInstance($plugin) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/tmgmt/src/TranslatorInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt;

+use Drupal\tmgmt\Translator\TranslatableResult;
+use Drupal\tmgmt\Translator\AvailableResult;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   /**
    * Returns the translator plugin of this translator.
    *
-   * @return \Drupal\tmgmt\TranslatorPluginInterface
+   * @return TranslatorPluginInterface
    *   Returns the TranslatorPluginInterface.
    */
   public function getPlugin();
@@ @@
    * @param \Drupal\tmgmt\JobInterface Job
    *   The Job entity that should be translated.
    *
-   * @return \Drupal\tmgmt\Translator\TranslatableResult
+   * @return TranslatableResult
    *   TRUE if the job can be processed and translated, FALSE otherwise.
    */
   public function checkTranslatable(JobInterface $job);
@@ @@
   /**
    * Checks whether a translator is available.
    *
-   * @return \Drupal\tmgmt\Translator\AvailableResult
+   * @return AvailableResult
    *   TRUE if the translator plugin is available, FALSE otherwise.
    */
   public function checkAvailable();
@@ @@
   /**
    * Returns if the plugin has any settings for this job.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The Job entity that should be translated.
    */
   public function hasCheckoutSettings(JobInterface $job);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


52) modules/contrib/tmgmt/src/Translator/TranslatorResult.php:27

    ---------- begin diff ----------
@@ @@
    *
    * @param bool $success
    *   Whether or not the check was successful.
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|null $reason
+   * @param TranslatableMarkup|null $reason
    *   The reason in case of an unsuccessful check.
    */
   protected function __construct($success, TranslatableMarkup $reason = NULL) {
@@ @@
   /**
    * Returns the reason for an unsuccessful result.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The reason.
    */
   public function getReason() {
@@ @@
   /**
    * Returns the object with FALSE and a message.
    *
-   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|null $reason
+   * @param TranslatableMarkup|null $reason
    *   The reason in case of an unsuccessful check.
    *
    * @return static
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


53) modules/contrib/tmgmt/src/SourcePreviewInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt;

+use Drupal\Core\Url;
 /**
  * Interface for source plugin controllers they may be previewed.
  *
@@ @@
   /**
    * Returns preview url if preview is supported.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   Job item.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Url object.
    */
   public function getPreviewUrl(JobItemInterface $job_item);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


54) modules/contrib/tmgmt/src/SourcePluginUiBase.php:45

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   Drupal form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $type
    *   Entity type.
@@ @@
    *
    * @param array $form
    *   Drupal form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $type
    *   Entity type.
@@ @@

         $job = tmgmt_job_create($source_language, $target_language, \Drupal::currentUser()->id());
         $job_empty = TRUE;
-        /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+        /** @var JobItemInterface $job_item */
         foreach ($job_items as $id => $job_item) {
           try {
             // As the same item might be added to multiple jobs, we need to
@@ @@
    *
    * @param int $status
    *   The source status: original, missing, current or outofdate.
-   * @param \Drupal\tmgmt\JobItemInterface|NULL $job_item
+   * @param JobItemInterface|NULL $job_item
    *   The existing job item for the source.
    *
    * @return array
@@ @@

       case 'outofdate':
         $label = t('Translation Outdated');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/outdated.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/outdated.svg';
         break;

       default:
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/tmgmt/src/SourcePluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt;

+use Drupal\Core\Url;
 use Drupal\Component\Plugin\PluginInspectionInterface;

 /**
@@ @@
   /**
    * Returns an array with the data structured for translation.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item entity.
    *
    * @see JobItem::getData()
@@ @@
   /**
    * Saves a translation.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item entity.
    * @param string $target_langcode
    *   The target language code.
@@ @@
   /**
    * Returns the Uri for this job item.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item entity.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The URL object for the source object.
    */
   public function getUrl(JobItemInterface $job_item);
@@ @@
   /**
    * Returns the type of a job item.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item.
    *
    * @return string
@@ @@
   /**
    * Gets language code of the job item source.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item.
    *
    * @return string|false
@@ @@
    * Returns language codes that can be used as the source language for a
    * translation job.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


56) modules/contrib/tmgmt/src/SourceManager.php:27

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    * @param string $plugin
    *   Name of the source plugin.
    *
-   * @return \Drupal\tmgmt\SourcePluginUiInterface
+   * @return SourcePluginUiInterface
    *   Instance a source plugin UI instance.
    */
   public function createUIInstance($plugin) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/tmgmt/src/SegmenterInterface.php:76

    ---------- begin diff ----------
@@ @@
    *
    * If the form does not validate, it will add the error to the $element.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   A string with the XML serialized data.
    * @param array $element
    *   The translation element of the form.
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The Job Item.
    */
   public function validateFormTranslation(FormStateInterface &$form_state, $element, JobItemInterface $job_item);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


58) modules/contrib/tmgmt/src/RemoteMappingInterface.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Gets translation job.
    *
-   * @return \Drupal\tmgmt\JobInterface
+   * @return JobInterface
    *   Returns the translation job.
    */
   public function getJob();
@@ @@
   /**
    * Gets translation job item.
    *
-   * @return \Drupal\tmgmt\JobItemInterface
+   * @return JobItemInterface
    *   Returns the job item.
    */
   public function getJobItem();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


59) modules/contrib/tmgmt/src/Plugin/views/filter/JobType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Plugin\views\filter;

+use Drupal\tmgmt\ContinuousManager;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The continuous manager.
    *
-   * @var \Drupal\tmgmt\ContinuousManager
+   * @var ContinuousManager
    */
   protected $continuousManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/tmgmt/src/Plugin/views/filter/JobState.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Plugin\views\filter;

+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\tmgmt\ContinuousTranslatorInterface;
 use Drupal\tmgmt\Entity\Job;
 use Drupal\tmgmt\Entity\JobItem;
@@ @@
   /**
    * Where the $query object will reside.
    *
-   * @var \Drupal\views\Plugin\views\query\Sql
+   * @var Sql
    */
   public $query = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


61) modules/contrib/tmgmt/src/Plugin/views/filter/JobItemState.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Plugin\views\filter;

+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\tmgmt\Entity\JobItem;
 use Drupal\views\Plugin\views\filter\ManyToOne;

@@ @@
   /**
    * Where the $query object will reside.
    *
-   * @var \Drupal\views\Plugin\views\query\Sql
+   * @var Sql
    */
   public $query = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


62) modules/contrib/tmgmt/src/Plugin/views/field/Translator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Plugin\views\field;

+use Drupal\tmgmt\JobInterface;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;

@@ @@
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     if ($job = $this->getEntity($values)) {
       return $job->getTranslatorLabel();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/tmgmt/src/Plugin/views/field/JobState.php:16

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = $this->getEntity($values);
     switch ($job->getState()) {
       case JobInterface::STATE_UNPROCESSED:
         $label = t('Unprocessed');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/rejected.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/rejected.svg';
         break;

       case JobInterface::STATE_ACTIVE:
@@ @@
           return $highest_weight_icon;
         }
         $label = t('In progress');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/hourglass.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/hourglass.svg';
         break;

       case JobInterface::STATE_CONTINUOUS:
         $label = t('Continuous');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/continuous.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/continuous.svg';
         break;

       case JobInterface::STATE_CONTINUOUS_INACTIVE:
         $label = t('Continuous Inactive');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/continuous_inactive.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/continuous_inactive.svg';
         break;

       default:
@@ @@
     if ($icon && $label) {
       return [
         '#theme' => 'image',
-        '#uri' => file_create_url($icon),
+        '#uri' => \Drupal::service('file_url_generator')->generateAbsoluteString($icon),
         '#title' => $label,
         '#alt' => $label,
         '#width' => 16,
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/tmgmt/src/Plugin/views/field/JobItemState.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Plugin\views\field;

+use Drupal\tmgmt\JobItemInterface;
 use Drupal\views\Plugin\views\field\NumericField;
 use Drupal\views\ResultRow;

@@ @@
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+    /** @var JobItemInterface $job_item */
     $job_item = $this->getEntity($values);
     return $job_item->getStateIcon();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/tmgmt/src/MessageInterface.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Loads the job entity that this job message is attached to.
    *
-   * @return \Drupal\tmgmt\JobInterface
+   * @return JobInterface
    *   The job entity that this job message is attached to or FALSE if there was
    *   a problem.
    */
@@ @@
   /**
    * Loads the job entity that this job message is attached to.
    *
-   * @return \Drupal\tmgmt\JobItemInterface
+   * @return JobItemInterface
    *   The job item entity that this job message is attached to or FALSE if
    *   there was a problem.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


66) modules/contrib/tmgmt/src/JobQueue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt;

+use Drupal\Core\Url;
 use Drupal\tmgmt\Entity\Job;

 /**
@@ @@
   /**
    * Initializes the queue with a set of jobs, resets the queue.
    *
-   * @param \Drupal\tmgmt\JobInterface[] $jobs
+   * @param JobInterface[] $jobs
    *   Job jobs to be added.
    * @param string $destination
    *   (optional) A destination to redirect to after the queue is finished.
@@ @@
   /**
    * Remove job jobs from the queue without marking them as processed.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Job to be marked as processed.
    */
   public function markJobAsProcessed(JobInterface $job) {
@@ @@
   }

   /**
-   * Gets jobs in the queue without removing them from the queue.
-   *
-   * @return \Drupal\tmgmt\JobInterface[] $jobs
-   *   Jobs in the queue.
-   */
+  * Gets jobs in the queue without removing them from the queue.
+  *
+   * @return JobInterface[] $jobs
+    Jobs in the queue.
+  */
   public function getAllJobs() {
     return Job::loadMultiple($this->queue);
   }
@@ @@
   /**
    * Returns the next job from the queue.
    *
-   * @return \Drupal\tmgmt\JobInterface|null
+   * @return JobInterface|null
    *   A job or NULL if the queue is empty.
    */
   public function getNextJob() {
@@ @@
   /**
    * Returns URL from the queue.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   A URL or NULL if the queue is empty.
    */
   public function getNextUrl() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


67) modules/contrib/tmgmt/src/JobItemInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt;

+use Drupal\Core\Url;
 use Drupal\Core\Entity\ContentEntityInterface;

 /**
@@ @@
   /**
    * Retrieves the path to the source object via the source controller.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL object for the source object.
    */
   public function getSourceUrl();
@@ @@
   /**
    * Loads the job entity that this job item is attached to.
    *
-   * @return \Drupal\tmgmt\JobInterface
+   * @return JobInterface
    *   The job entity that this job item is attached to or NULL if there is
    *   no job.
    */
@@ @@
   /**
    * Returns the translator for this job item.
    *
-   * @return \Drupal\tmgmt\TranslatorInterface
+   * @return TranslatorInterface
    *   The translator entity or NULL if there is none.
    */
   public function getTranslator();
@@ @@
   /**
    * Returns the translator plugin of the translator of this job item.
    *
-   * @return \Drupal\tmgmt\TranslatorPluginInterface|null
+   * @return TranslatorPluginInterface|null
    *   The translator plugin instance or NULL if there is none.
    */
   public function getTranslatorPlugin();
@@ @@
    * Already accepted job items can not be aborted. Always use this method if
    * you want to abort a translation job item.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   If fails to abort the job item.
    */
   public function abortTranslation();
@@ @@
   /**
    * Returns an instance of the configured source plugin.
    *
-   * @return \Drupal\tmgmt\SourcePluginInterface
+   * @return SourcePluginInterface
    */
   public function getSourcePlugin();

@@ @@
    *   TMGMT_DATA_ITEM_STATE_PRELIMINARY to set it to that value.
    *   Other statuses are not supported.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   If is given an unsupported status.
    */
   public function addTranslatedData(array $translation, $key = array(), $status = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


68) modules/contrib/tmgmt/src/JobItemCart.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * Adds existing job items into the cart.
    *
-   * @param \Drupal\tmgmt\JobItemInterface[] $items
+   * @param JobItemInterface[] $items
    *   Job items to be added.
    */
   public function addExistingJobItems(array $items) {
@@ @@
   }

   /**
-   * Gets job items in the cart.
-   *
-   * @return \Drupal\tmgmt\JobItemInterface[] $items
-   *   Job items in the cart.
-   */
+  * Gets job items in the cart.
+  *
+   * @return JobItemInterface[] $items
+    Job items in the cart.
+  */
   public function getJobItemsFromCart() {
     return JobItem::loadMultiple($this->cart);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


69) modules/contrib/tmgmt/src/JobInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt;

+use Drupal\Core\Language\LanguageInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\tmgmt\Entity\Translator;
+use Drupal\tmgmt\Translator\TranslatableResult;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\user\EntityOwnerInterface;
@@ @@
   /**
    * Returns the target language.
    *
-   * @return \Drupal\Core\Language\LanguageInterface
+   * @return LanguageInterface
    *   The target language.
    */
   public function getTargetLanguage();
@@ @@
   /**
    * Returns the source language.
    *
-   * @return \Drupal\Core\Language\LanguageInterface
+   * @return LanguageInterface
    *   The source language.
    */
   public function getSourceLanguage();
@@ @@
    * @param string $item_id
    *   The source item id.
    *
-   * @return \Drupal\tmgmt\JobItemInterface
+   * @return JobItemInterface
    *   The job item that was added to the job or FALSE if it couldn't be saved.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   On zero item word count.
    */
   public function addItem($plugin, $item_type, $item_id);
@@ @@
   /**
    * Add a givenJobItem to this job.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $item
+   * @param JobItemInterface $item
    *   The job item to add.
    */
   public function addExistingItem(JobItemInterface $item);
@@ @@
    * @param array $conditions
    *   Additional conditions.
    *
-   * @return \Drupal\tmgmt\JobItemInterface[]
+   * @return JobItemInterface[]
    *   An array of translation job items.
    */
   public function getItems($conditions = array());
@@ @@
    * @param string $item_id
    *   Source item ID.
    *
-   * @return \Drupal\tmgmt\JobItemInterface|null
+   * @return JobItemInterface|null
    *   The most recent job item that matches that source or NULL if none
    *   exists.
    */
@@ @@
    * @param array $conditions
    *   Additional conditions.
    *
-   * @return \Drupal\tmgmt\MessageInterface[]
+   * @return MessageInterface[]
    *   An array of translation job messages.
    */
   public function getMessages($conditions = array());
@@ @@
    *   (Optional) Messages need to have a newer timestamp than $time. Defaults
    *   to REQUEST_TIME.
    *
-   * @return \Drupal\tmgmt\MessageInterface[]
+   * @return MessageInterface[]
    *   An array of translation job messages.
    */
   public function getMessagesSince($time = NULL);
@@ @@
   /**
    * Returns the label of the translator for this job.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The label of the translator, "(Missing)" in case the translator has
    *   been deleted or "(Undefined)" in case the translator is not set.
    */
@@ @@
   /**
    * Returns the translator for this job.
    *
-   * @return \Drupal\tmgmt\Entity\Translator
+   * @return Translator
    *   The translator entity.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   Throws an exception when there is no translator assigned or when the
    *   translator is missing the plugin.
    */
@@ @@
   /**
    * Checks whether a job is translatable.
    *
-   * @return \Drupal\tmgmt\Translator\TranslatableResult
+   * @return TranslatableResult
    *   Whether the job can be translated or not.
    */
   public function canRequestTranslation();
@@ @@
   /**
    * Returns the translator plugin of the translator of this job.
    *
-   * @return \Drupal\tmgmt\TranslatorPluginInterface
+   * @return TranslatorPluginInterface
    *   The translator plugin instance.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   Throws an exception when there is no translator assigned or when the
    *   translator is missing the plugin.
    */
@@ @@
    *   TMGMT_DATA_ITEM_STATE_PRELIMINARY to set it to that value.
    *   Other statuses are not supported.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   If is given an unsupported status.
    */
   public function addTranslatedData(array $data, $key = NULL, $status = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


70) modules/contrib/tmgmt/src/JobCheckoutManager.php:22

    ---------- begin diff ----------
@@ @@
   use MessengerTrait;

   /**
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

   /**
-   * @var \Drupal\tmgmt\JobQueue
+   * @var JobQueue
    */
   protected $jobQueue;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Attempts to checkout a number of jobs and prepare the necessary redirects.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state array, used to set the initial redirect.
-   * @param \Drupal\tmgmt\JobInterface[] $jobs
+   * @param JobInterface[] $jobs
    *   Array of jobs to attempt checkout
    *
    * @ingroup tmgmt_job
@@ @@
    * Performs a number of checks on each job and also allows to alter the
    * behavior through hooks.
    *
-   * @param \Drupal\tmgmt\JobInterface[] $jobs
+   * @param JobInterface[] $jobs
    *   The jobs to be checked out.
    * @param bool $skip_request_translation
    *   (optional) If TRUE, the jobs that can be submitted immediately will be
@@ @@
    *   prepared but not submitted yet. They will not be returned, the caller
    *   is responsible for submitting them.
    *
-   * @return \Drupal\tmgmt\JobInterface[]
+   * @return JobInterface[]
    *   List of jobs that have not been submitted immediately and need to be
    *   processed.
    *
@@ @@
    * The current checks include if there is more than one translator available,
    * if he has settings and if the job has a fixed target language.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job item.
    *
    * @return bool
@@ @@
    *   (optional) A template job to use for the translator and settings.
    */
   public function doBatchSubmit($job_id, $template_job_id = NULL) {
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = $this->entityTypeManager->getStorage('tmgmt_job')->load($job_id);
     if (!$job) {
       return;
@@ @@
     }

     if ($template_job_id && $job_id != $template_job_id) {
-      /** @var \Drupal\tmgmt\JobInterface $template_job */
+      /** @var JobInterface $template_job */
       $template_job = $this->entityTypeManager->getStorage('tmgmt_job')->load($template_job_id);
       if ($template_job) {
         $job->set('translator', $template_job->getTranslatorId());
@@ @@
    * Requests translations for a job and prints messages which have happened since
    * then.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job object for which translations should be requested.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


71) modules/contrib/tmgmt/src/Form/TranslatorForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Form;

+use Drupal\tmgmt\TranslatorInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\tmgmt\SourceManager;
@@ @@
 class TranslatorForm extends EntityForm {

   /**
-   * @var \Drupal\tmgmt\TranslatorInterface
+   * @var TranslatorInterface
    */
   protected $entity;

@@ @@
   /**
    * Translator plugin manager.
    *
-   * @var \Drupal\tmgmt\TranslatorManager
+   * @var TranslatorManager
    */
   protected $translatorManager;

@@ @@
   /**
    * Source plugin manager.
    *
-   * @var \Drupal\tmgmt\SourceManager
+   * @var SourceManager
    */
   protected $sourceManager;

@@ @@
    *
    * @param \Drupal\Core\Extension\ModuleHandlerInterface
    *   The module handler service.
-   * @param \Drupal\tmgmt\TranslatorManager $translator_manager
+   * @param TranslatorManager $translator_manager
    *   The translator plugin manager.
    */
   public function __construct(TranslatorManager $translator_manager, SourceManager $source_manager) {
@@ @@
       if (isset($definition['logo'])) {
         $form['plugin_wrapper']['logo'] = $logo_render_array = [
           '#theme' => 'image',
-          '#uri' => file_create_url(drupal_get_path('module', $definition['provider']) . '/' . $definition['logo']),
+          '#uri' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath($definition['provider']) . '/' . $definition['logo']),
           '#alt' => $definition['label'],
           '#title' => $definition['label'],
           '#attributes' => [
@@ @@
    *
    * @param array $form
    *   An associative array containing the initial structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public static function updateRemoteLanguagesMappings(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


72) modules/contrib/tmgmt/src/Form/TmgmtFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Form;

+use Drupal\tmgmt\TranslatorManager;
+use Drupal\tmgmt\SourceManager;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Symfony\Component\DependencyInjection\ContainerInterface;

@@ @@
   /**
    * Translator plugin manager.
    *
-   * @var \Drupal\tmgmt\TranslatorManager
+   * @var TranslatorManager
    */
   protected $translatorManager;

@@ @@
   /**
    * Source plugin manager.
    *
-   * @var \Drupal\tmgmt\SourceManager
+   * @var SourceManager
    */
   protected $sourceManager;

@@ @@
   /**
    * Renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


73) modules/contrib/tmgmt/src/Form/SourceOverviewForm.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The source manager.
    *
-   * @var \Drupal\tmgmt\SourceManager
+   * @var SourceManager
    */
   protected $sourceManager;

@@ @@
   /**
    * The continuous manager.
    *
-   * @var \Drupal\tmgmt\ContinuousManager
+   * @var ContinuousManager
    */
   protected $continuousManager;

@@ @@
   /**
    * Constructs a new SourceLocalTasks object.
    *
-   * @param \Drupal\tmgmt\SourceManager $source_manager
+   * @param SourceManager $source_manager
    *   The source manager.
-   * @param \Drupal\tmgmt\ContinuousManager $continuous_manager
+   * @param ContinuousManager $continuous_manager
    *   The continuous manager.
    */
   public function __construct(SourceManager $source_manager, ContinuousManager $continuous_manager) {
@@ @@
    * Gets the url when selecting a source type.
    *
    * @param string $source
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getUrlForSource($source) {
     list($selected_plugin, $selected_item_type) = explode(':', $source);
@@ @@
    *
    * @param array $form
    *   An associate array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateItemsSelected(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


74) modules/contrib/tmgmt/src/Form/JobResubmitForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Form;

+use Drupal\tmgmt\JobItemInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
     $new_job = $this->entity->cloneAsUnprocessed();
     $new_job->uid = $this->currentUser()->id();
     $new_job->save();
-    /** @var \Drupal\tmgmt\JobItemInterface $item */
+    /** @var JobItemInterface $item */
     foreach ($this->entity->getItems() as $item) {
       $item_to_resubmit = $item->cloneAsActive();
       $new_job->addExistingItem($item_to_resubmit);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


75) modules/contrib/tmgmt/src/Form/JobItemForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Form;

+use Drupal\tmgmt\JobItemInterface;
+use Drupal\tmgmt\SegmenterInterface;
 use Drupal\Component\Diff\Diff;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
@@ @@
 class JobItemForm extends TmgmtFormBase {

   /**
-   * @var \Drupal\tmgmt\JobItemInterface
+   * @var JobItemInterface
    */
   protected $entity;

@@ @@
         $form_state->setError($form['review'][$group_key][$parent_key][$key]['translation'], $this->t('The field is empty.'));
         continue;
       }
-      /** @var \Drupal\tmgmt\SegmenterInterface $segmenter */
+      /** @var SegmenterInterface $segmenter */
       $segmenter = \Drupal::service('tmgmt.segmenter');
       $segmenter->validateFormTranslation($form_state, $form['review'][$group_key][$parent_key][$key]['translation'], $this->getEntity());
     }
@@ @@
    *
    * @param array $element
    *   The input element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateMaxLength(array $element, FormStateInterface &$form_state) {
@@ @@
    * @todo Mention in the api documentation that the char '|' is not allowed in
    * field names.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $data
    *   Flattened array of translation data items.
@@ @@
         // Check if the field has a text format attached and check access.
         if (!empty($data_item['#format'])) {
           $format_id = $data_item['#format'];
-          /** @var \Drupal\filter\Entity\FilterFormat $format */
+          /** @var FilterFormat $format */
           $format = FilterFormat::load($format_id);

           if (!$format || !$format->access('use')) {
@@ @@
         break;
       case TMGMT_DATA_ITEM_STATE_REVIEWED:
         $title = t('Reviewed');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/gray-check.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/gray-check.svg';
         break;
       case TMGMT_DATA_ITEM_STATE_TRANSLATED:
         $title = t('Translated');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/ready.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg';
         break;
       case TMGMT_DATA_ITEM_STATE_PENDING:
       default:
         $title = t('Pending');
-        $icon = drupal_get_path('module', 'tmgmt') . '/icons/hourglass.svg';
+        $icon = \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/hourglass.svg';
         break;
     }

@@ @@
    *
    * @param array $data
    *   The data items.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function trackChangedSource(array $data, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $item_element
    *   The form element for the data item.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param string $field_name
    *   The name of the form element.
@@ @@
    *   The data item.
    * @param int $rows
    *   The number of rows that should be displayed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param bool $is_preliminary
    *   TRUE is the data item is in the PRELIMINARY STATE, FALSE otherwise.
@@ @@
    *   The data item.
    * @param int $rows
    *   The number of rows that should be displayed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


76) modules/contrib/tmgmt/src/Form/JobItemAbortForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Form;

+use Drupal\tmgmt\Entity\JobItem;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\tmgmt\TMGMTException;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt\Entity\JobItem $entity */
+    /** @var JobItem $entity */
     $entity = $this->entity;
     try {
       if (!$entity->abortTranslation()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


77) modules/contrib/tmgmt/src/Form/JobForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Form;

+use Drupal\tmgmt\JobQueue;
+use Drupal\tmgmt\Entity\Translator;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\InsertCommand;
 use Drupal\Core\Ajax\InvokeCommand;
@@ @@
 class JobForm extends TmgmtFormBase {

   /**
-   * @var \Drupal\tmgmt\JobInterface
+   * @var JobInterface
    */
   protected $entity;

   /**
-   * @var \Drupal\tmgmt\JobQueue
+   * @var JobQueue
    */
   protected $jobQueue;

   /**
-   * @var \Drupal\tmgmt\JobCheckoutManager
+   * @var JobCheckoutManager
    */
   protected $jobCheckoutManager;

@@ @@
       );

       // Add the provider logo in the settings wrapper.
-      /** @var \Drupal\tmgmt\Entity\Translator $entity */
+      /** @var Translator $entity */
       $definition = \Drupal::service('plugin.manager.tmgmt.translator')->getDefinition($job->getTranslatorPlugin()->getPluginId());
       if (isset($definition['logo'])) {
         $form['translator_wrapper']['logo'] = $logo_render_array = [
           '#theme' => 'image',
-          '#uri' => file_create_url(drupal_get_path('module', $definition['provider']) . '/' . $definition['logo']),
+          '#uri' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath($definition['provider']) . '/' . $definition['logo']),
           '#alt' => $definition['label'],
           '#title' => $definition['label'],
           '#attributes' => [
@@ @@
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = parent::validateForm($form, $form_state);
     if ($job->hasTranslator()) {
       $translator = $job->getTranslator();
@@ @@
    * {@inheritdoc}
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt\JobInterface $job */
+    /** @var JobInterface $job */
     $job = parent::buildEntity($form, $form_state);

     if ($job->hasTranslator()) {
@@ @@
   /**
    * Builds a message on conflicting job items.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job to build the message for.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|null
+   * @return TranslatableMarkup|null
    *   Either a message with the inforamtion about the conflicting items or
    *   null if there are none.
    */
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/tmgmt/src/Form/JobAbortForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Form;

+use Drupal\tmgmt\Entity\Job;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt\Entity\Job $entity */
+    /** @var Job $entity */
     $entity = $this->entity;
     // It would make more sense to not display the button for the action,
     // however we do not know if the translator is able to abort a job until
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


79) modules/contrib/tmgmt/src/Form/ContinuousJobForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Form;

+use Drupal\tmgmt\JobInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ @@
 class ContinuousJobForm extends JobForm {

   /**
-   * @var \Drupal\tmgmt\JobInterface
+   * @var JobInterface
    */
   protected $entity;

@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return mixed
@@ @@
   /**
    * Custom access check for continuous job form.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Returns allowed if we have a translator with ContinuousSourceInterface
    *   and the logged in user has permission to create translation jobs.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


80) modules/contrib/tmgmt/src/Form/CartForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Form;

+use Drupal\tmgmt\JobItemInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Link;
 use Drupal\tmgmt\Entity\JobItem;
@@ @@

         $job = tmgmt_job_create($source_language, $target_language, $this->currentUser()->id());
         $job_empty = TRUE;
-        /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+        /** @var JobItemInterface $job_item */
         foreach ($job_items as $id => $job_item) {
           try {
             // As the same item might be added to multiple jobs, we need to
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


81) modules/contrib/tmgmt/src/Events/ShouldCreateJobEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Events;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\tmgmt\JobInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Represents a job item about to be added to a continuous job.
@@ @@
   /**
    *  Continuous job entity.
    *
-   * @var \Drupal\tmgmt\JobInterface
+   * @var JobInterface
    */
   protected $job;

@@ @@
   /**
    * ShouldCreateJobEvent constructor.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Continuous job.
    * @param string $plugin
    *   The plugin name.
@@ @@
   /**
    * Gets the job entity.
    *
-   * @return \Drupal\tmgmt\JobInterface
+   * @return JobInterface
    *   The Job object.
    */
   public function getJob() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/tmgmt/src/Entity/Translator.php:254

    ---------- begin diff ----------
@@ @@
         ->condition('translator', $key)
         ->execute();
       $jobs = Job::loadMultiple($job_ids);
-      /** @var \Drupal\tmgmt\JobInterface $job */
+      /** @var JobInterface $job */
       foreach ($jobs as $job) {
         $job->aborted('Job has been aborted because the translation provider %provider was deleted.', ['%provider' => $job->getTranslatorLabel()]);
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


83) modules/contrib/tmgmt/src/Entity/ListBuilder/TranslatorListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Entity\ListBuilder;

+use Drupal\tmgmt\Entity\Translator;
 use Drupal\Core\Config\Entity\DraggableListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilderInterface;
@@ @@
   /**
    * The entity storage class.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * Information about the entity type.
    *
-   * @var \Drupal\tmgmt\TranslatorManager $translatorManager
+   * @var TranslatorManager $translatorManager
    */
   protected $translatorManager;

@@ @@
   /**
    * Constructs a TranslatorListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The config storage definition.
-   * @param \Drupal\tmgmt\TranslatorManager $translator_manager
+   * @param TranslatorManager $translator_manager
    *   The language manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, TranslatorManager $translator_manager) {
@@ @@
   /**
    * Creates the instance of the list builder.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container entity.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type which should be created.
    *
    * @return TranslatorListBuilder
@@ @@
     $row['label'] = $entity->label();

     // Add provider logo.
-    /** @var \Drupal\tmgmt\Entity\Translator $entity */
+    /** @var Translator $entity */
     $definition = \Drupal::service('plugin.manager.tmgmt.translator')->getDefinition($entity->getPluginId());
     if (isset($definition['logo'])) {
       $logo_render_array = [
         '#theme' => 'image',
-        '#uri' => file_create_url(drupal_get_path('module', $definition['provider']) . '/' . $definition['logo']),
+        '#uri' => \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath($definition['provider']) . '/' . $definition['logo']),
         '#alt' => $definition['label'],
         '#title' => $definition['label'],
         '#attributes' => [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


84) modules/contrib/tmgmt/src/Entity/JobItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Entity;

+use Drupal\tmgmt\SegmenterInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Serialization\Json;
@@ @@
   public function getSourceData() {
     if ($plugin = $this->getSourcePlugin()) {
       $data = $plugin->getData($this);
-      /** @var \Drupal\tmgmt\SegmenterInterface $segmenter */
+      /** @var SegmenterInterface $segmenter */
       $segmenter = \Drupal::service('tmgmt.segmenter');
       return $segmenter->getSegmentedData($data);
     }
@@ @@
    *   TMGMT_DATA_ITEM_STATE_PRELIMINARY or TMGMT_DATA_ITEM_STATE_REVIEWED to
    *   set it to that value. Other statuses are not supported.
    *
-   * @throws \Drupal\tmgmt\TMGMTException
+   * @throws TMGMTException
    *   If is given an unsupported status.
    */
   protected function addTranslatedDataRecursive(array $translation, $key = array(), $status = NULL) {
@@ @@
       static::STATE_ACTIVE => [
         'label' => t('In progress'),
         'type' => 'state',
-        'icon' => drupal_get_path('module', 'tmgmt') . '/icons/hourglass.svg',
+        'icon' => \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/hourglass.svg',
         'weight' => 0,
         'show_job_filter' => TRUE,
       ],
@@ @@
       static::STATE_REVIEW => [
         'label' => t('Needs review'),
         'type' => 'state',
-        'icon' => drupal_get_path('module', 'tmgmt') . '/icons/ready.svg',
+        'icon' => \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/ready.svg',
         'weight' => 5,
         'show_job_filter' => TRUE,
       ],
@@ @@
       static::STATE_INACTIVE => [
         'label' => t('Inactive'),
         'type' => 'state',
-        'icon' => drupal_get_path('module', 'tmgmt') . '/icons/rejected.svg',
+        'icon' => \Drupal::service('extension.list.module')->getPath('tmgmt') . '/icons/rejected.svg',
         'weight' => 20,
       ],
     ];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


85) modules/contrib/tmgmt/src/Entity/Job.php:710

    ---------- begin diff ----------
@@ @@
     if (!isset($message)) {
       $message = 'The translation job has been aborted.';
     }
-    /** @var \Drupal\tmgmt\JobItemInterface $item */
+    /** @var JobItemInterface $item */
     foreach ($this->getItems() as $item) {
       $item->setState(JobItem::STATE_ABORTED);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


86) modules/contrib/tmgmt/src/Entity/Controller/TranslatorAccessControlHandler.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The translator manager which knows about installed translator plugins.
    *
-   * @var \Drupal\tmgmt\TranslatorManager $translatorManager
+   * @var TranslatorManager $translatorManager
    */
   protected $translatorManager;

@@ @@
   /**
    * Constructs a TranslatorAccessControlHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\tmgmt\TranslatorManager $translator_manager
+   * @param TranslatorManager $translator_manager
    *   The translator manager.
    */
   public function __construct(EntityTypeInterface $entity_type, TranslatorManager $translator_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


87) modules/contrib/tmgmt/src/Entity/Controller/JobAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Entity\Controller;

+use Drupal\tmgmt\JobInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\tmgmt\JobInterface $entity */
+    /** @var JobInterface $entity */
     if ($account->hasPermission('administer tmgmt')) {
       // Administrators can do everything.
       return AccessResult::allowed()->cachePerPermissions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


88) modules/contrib/tmgmt/src/Data.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Configuration constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
     $this->config = $config_factory->get('tmgmt.settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


89) modules/contrib/tmgmt/src/Controller/TranslatorController.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Drupal\tmgmt\TranslatorInterface $tmgmt_translator
    *   The Translator object to enable.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response to the tmgmt listing page.
    */
   function enable(TranslatorInterface $tmgmt_translator) {
@@ @@
    * @param \Drupal\tmgmt\TranslatorInterface $tmgmt_translator
    *   The Translator object to disable.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response to the tmgmt listing page.
    */
   function disable(TranslatorInterface $tmgmt_translator) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


90) modules/contrib/tmgmt/src/Controller/TMGMTController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Controller;

+use Drupal\Core\Url;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\system\SystemManager;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * System Manager Service.
    *
-   * @var \Drupal\system\SystemManager
+   * @var SystemManager
    */
   protected $systemManager;

@@ @@
   /**
    * Constructs a new TMGMTLocalController.
    *
-   * @param \Drupal\system\SystemManager $system_manager
+   * @param SystemManager $system_manager
    *   System manager service.
    */
   public function __construct(SystemManager $system_manager) {
@@ @@
   public function translatorAdminMenuBlockPage() {
     $contents = $this->systemManager->getBlockContents();
     if (count($contents['#content']) === 1) {
-      /** @var \Drupal\Core\Url $url */
+      /** @var Url $url */
       $url = reset($contents['#content'])['url'];
       return $this->redirect($url->getRouteName(), $url->getRouteParameters(), $url->getOptions());
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


91) modules/contrib/tmgmt/src/ContinuousSourceInterface.php:16

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The job form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\tmgmt\Entity\Job $job
+   * @param Job $job
    *   Continuous job.
    *
    * @return array
@@ @@
   /**
    * Checks whether the continuous job item should be created.
    *
-   * @param \Drupal\tmgmt\Entity\Job $job
+   * @param Job $job
    *   Continuous job.
    * @param string $plugin
    *   The plugin name.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


92) modules/contrib/tmgmt/src/ContinuousManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt;

+use Drupal\tmgmt\Entity\JobItem;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\tmgmt\Events\ShouldCreateJobEvent;
 use Drupal\tmgmt\Entity\Job;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The source plugin manager.
    *
-   * @var \Drupal\tmgmt\SourceManager
+   * @var SourceManager
    */
   protected $sourcePluginManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The translation manager.
    *
-   * @var \Drupal\tmgmt\TranslatorManager
+   * @var TranslatorManager
    */
   protected $translatorManager;

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new ContinuousManager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\tmgmt\SourceManager $source_plugin_manager
+   * @param SourceManager $source_plugin_manager
    *   The source plugin manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\tmgmt\TranslatorManager $translator_manager
+   * @param TranslatorManager $translator_manager
    *   The translation manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, SourceManager $source_plugin_manager, ConfigFactoryInterface $config_factory, TranslatorManager $translator_manager, EventDispatcherInterface $event_dispatcher) {
@@ @@
    * The job item will be immediately submitted to the translator unless
    * this happens on cron runs.
    *
-   * @param \Drupal\tmgmt\Entity\Job $job
+   * @param Job $job
    *   Continuous job.
    * @param string $plugin
    *   The plugin name.
@@ @@
    * @param string $item_id
    *   The source item id.
    *
-   * @return \Drupal\tmgmt\Entity\JobItem
+   * @return JobItem
    *   Continuous job item.
    *
    * @see \Drupal\tmgmt\Events\ContinuousEvents::SHOULD_CREATE_JOB
@@ @@

     // Some modules might want to filter out candidates for items.
     $event = new ShouldCreateJobEvent($job, $plugin, $item_type, $item_id, $should_create_item);
-    $this->eventDispatcher->dispatch(ContinuousEvents::SHOULD_CREATE_JOB, $event);
+    $this->eventDispatcher->dispatch($event, ContinuousEvents::SHOULD_CREATE_JOB);

     if ($event->shouldCreateItem()) {
       if ($most_recent_job_item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


93) modules/contrib/tmgmt/src/Annotation/TranslatorPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;

@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


94) modules/contrib/tmgmt/src/Annotation/SourcePlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;

@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $description;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


95) modules/contrib/tmgmt/sources/tmgmt_config/src/WebformConfigProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_config;

+use Drupal\config_translation\ConfigEntityMapper;
 use Drupal\Component\Serialization\Yaml;
 use Drupal\Core\Config\Schema\Mapping;
 use Drupal\Core\Config\Schema\Sequence;
@@ @@
   ];

   /**
-   * @var \Drupal\config_translation\ConfigEntityMapper
+   * @var ConfigEntityMapper
    */
   protected $configMapper;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


96) modules/contrib/tmgmt/sources/tmgmt_config/src/Plugin/tmgmt/Source/ConfigSource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_config\Plugin\tmgmt\Source;

+use Drupal\config_translation\ConfigMapperInterface;
+use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
+use Drupal\tmgmt_config\ConfigProcessorInterface;
 use Drupal\config_translation\ConfigMapperManagerInterface;
 use Drupal\config_translation\Form\ConfigTranslationFormBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The configuration mapper manager.
    *
-   * @var \Drupal\config_translation\ConfigMapperManagerInterface
+   * @var ConfigMapperManagerInterface
    */
   protected $configMapperManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Configuration factory manager
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactoryManager;

   /**
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface
+   * @var ConfigurableLanguageManagerInterface
    */
   protected $languageManager;

   /**
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\config_translation\ConfigMapperManagerInterface $config_mapper_manager
+   * @param ConfigMapperManagerInterface $config_mapper_manager
    *   The configuration mapper manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param  \Drupal\Core\Config\TypedConfigManagerInterface $typedConfigManagerInterface
+   * @param TypedConfigManagerInterface $typedConfigManagerInterface
    *   The typed config.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    * @param \Drupal\language\ConfigurableLanguageManagerInterface
    *   Configurable language manager.
@@ @@
   /**
    * Gets the mapper ID.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job item.
    *
    * @return string
@@ @@
   }

   /**
-   * Gets the mapper.
-   *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
-   *   Gets a job item as a parameter.
-   *
-   * @return \Drupal\config_translation\ConfigMapperInterface $config_mapper
-   *   Returns the config mapper.
-   *
-   * @throws \Drupal\tmgmt\TMGMTException
-   *   If there is no entity, throws an exception.
-   */
+  * Gets the mapper.
+  *
+   * @param JobItemInterface $job_item
+  *   Gets a job item as a parameter.
+  *
+   * @return ConfigMapperInterface $config_mapper
+    Returns the config mapper.
+  *
+   * @throws TMGMTException
+  *   If there is no entity, throws an exception.
+  */
   protected function getMapper(JobItemInterface $job_item) {
     $config_mapper =$this->configMapperManager->createInstance($this->getMapperId($job_item));

     if ($job_item->getItemType() != static::SIMPLE_CONFIG) {
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $entity_type */
+      /** @var ConfigEntityTypeInterface $entity_type */
       $entity_type = $this->entityTypeManager->getDefinition($config_mapper->getType());

       $pos = strpos($job_item->getItemId(), $entity_type->getConfigPrefix());
@@ @@
   /**
    * Returns the config processor for a given configuration definition.
    *
-   * @param \Drupal\Core\TypedData\TraversableTypedDataInterface $definition
+   * @param TraversableTypedDataInterface $definition
    *   The field type.
    *
-   * @return \Drupal\tmgmt_config\ConfigProcessorInterface
+   * @return ConfigProcessorInterface
    *   The config processor for this configuration definition.
    */
   protected function getConfigProcessor(TraversableTypedDataInterface $definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


97) modules/contrib/tmgmt/sources/tmgmt_config/src/Form/ConfigTranslateForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_config\Form;

+use Drupal\Core\Routing\RouteMatch;
+use Drupal\config_translation\ConfigMapperInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Link;
@@ @@
   /**
    * The configuration mapper manager.
    *
-   * @var \Drupal\config_translation\ConfigMapperManagerInterface
+   * @var ConfigMapperManagerInterface
    */
   protected $configMapperManager;

@@ @@
   /**
    * The RouteMatch service.
    *
-   * @var \Drupal\Core\Routing\RouteMatch
+   * @var RouteMatch
    */
   protected $routeMatch;

@@ @@
   /**
    * Constructs a ConfigTranslationController.
    *
-   * @param \Drupal\config_translation\ConfigMapperManagerInterface $config_mapper_manager
+   * @param ConfigMapperManagerInterface $config_mapper_manager
    *   The configuration mapper manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The RouteMatch service.
    */
   public function __construct(ConfigMapperManagerInterface $config_mapper_manager, RouteMatchInterface $route_match) {
@@ @@
   }

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @return static
    */
   public static function create(ContainerInterface $container) {
@@ @@
     // submit handler.
     $mapper_definition = \Drupal::service('plugin.manager.config_translation.mapper')->getDefinition($plugin_id);

-    /** @var \Drupal\config_translation\ConfigMapperInterface $mapper */
+    /** @var ConfigMapperInterface $mapper */
     $mapper = $this->configMapperManager->createInstance($plugin_id);
     $mapper->populateFromRouteMatch($this->routeMatch);

@@ @@
    * {@inheritdoc}
    */
   function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\config_translation\ConfigMapperManagerInterface $mapper */
+    /** @var ConfigMapperManagerInterface $mapper */
     $mapper = $form_state->get('mapper');
     $values = $form_state->getValues();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


98) modules/contrib/tmgmt/sources/tmgmt_config/src/DefaultConfigProcessor.php:12

    ---------- begin diff ----------
@@ @@
 class DefaultConfigProcessor implements ConfigProcessorInterface {

   /**
-   * @var \Drupal\config_translation\ConfigMapperInterface
+   * @var ConfigMapperInterface
    */
   protected $configMapper;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


99) modules/contrib/tmgmt/sources/tmgmt_config/src/ConfigSourcePluginUi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_config;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\tmgmt\SourcePluginUiBase;
@@ @@
   /**
    * Builds a table row for overview form.
    *
-   * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
+   * @param ConfigEntityInterface $entity
    *   Data needed to build the list row.
    *
    * @return array
@@ @@
    *   the provided entity property exists for given entity type and its value
    *   is processed.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface[]
+   * @return ConfigEntityInterface[]
    *   Array of translatable entities.
    */
   function getTranslatableEntities($entity_type_id, $property_conditions = array()) {
@@ @@
    * @param array $search_properties
    *   Search properties that are going to be used for the filter.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   Array of translatable definitions.
    */
   public function getFilteredSimpleConfigDefinitions($search_properties = array()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


100) modules/contrib/tmgmt/sources/tmgmt_config/src/ConfigProcessorInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_config;

+use Drupal\Core\TypedData\TypedDataInterface;
+use Drupal\Core\Config\Schema\TypedConfigInterface;
 use Drupal\config_translation\ConfigMapperInterface;

 interface ConfigProcessorInterface {
@@ @@
   public function setConfigMapper(ConfigMapperInterface $config_mapper);

   /**
-   * @param \Drupal\Core\TypedData\TypedDataInterface[]|\Drupal\Core\Config\Schema\TypedConfigInterface $schema
+   * @param TypedDataInterface[]|TypedConfigInterface $schema
    *   A list of schema definitions.
    * @param $config_data
    * @param string $base_key
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


101) modules/contrib/tmgmt/sources/locale/tests/src/Kernel/LocaleSourceTest.php:30

    ---------- begin diff ----------
@@ @@
     \Drupal::service('router.builder')->rebuild();
     $this->installSchema('locale', array('locales_source', 'locales_target'));
     $file = new \stdClass();
-    $file->uri =  \Drupal::service('file_system')->realpath(drupal_get_path('module', 'tmgmt_locale') . '/tests/test.xx.po');
+    $file->uri =  \Drupal::service('file_system')->realpath(\Drupal::service('extension.list.module')->getPath('tmgmt_locale') . '/tests/test.xx.po');
     $file->langcode = $this->langcode;
     Gettext::fileToDatabase($file, array());
     $this->addLanguage('es');
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


102) modules/contrib/tmgmt/sources/locale/tests/src/Functional/LocaleSourceUiTest.php:28

    ---------- begin diff ----------
@@ @@
     $this->langcode = 'de';
     $this->context = 'default';
     $file = new \stdClass();
-    $file->uri =  \Drupal::service('file_system')->realpath(drupal_get_path('module', 'tmgmt_locale') . '/tests/test.xx.po');
+    $file->uri =  \Drupal::service('file_system')->realpath(\Drupal::service('extension.list.module')->getPath('tmgmt_locale') . '/tests/test.xx.po');
     $file->langcode = $this->langcode;
     Gettext::fileToDatabase($file, array());
     $this->addLanguage($this->langcode);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


103) modules/contrib/tmgmt/sources/locale/src/Plugin/tmgmt/Source/LocaleSource.php:85

    ---------- begin diff ----------
@@ @@
   /**
    * Helper function to obtain a locale object for given job item.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *
    * @return locale object
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


104) modules/contrib/tmgmt/sources/content/tmgmt_content.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Menu\MenuLinkManagerInterface;
+use Drupal\menu_link_content\MenuLinkContentInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\field\Entity\FieldConfig;
 /**
  * @file
  * Source plugin for the Translation Management system that handles entities.
@@ @@
       }

       // Load translatable menu items.
-      /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
+      /** @var MenuLinkManagerInterface $menu_link_manager */
       $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
       $entity_type = $entity->getEntityType()->id();
       $menu_items = $menu_link_manager->loadLinksByRoute(
@@ @@
           if (!Uuid::isValid($menu_item->getDerivativeId())) {
             continue;
           }
-          /** @var \Drupal\menu_link_content\MenuLinkContentInterface $target */
+          /** @var MenuLinkContentInterface $target */
           $target = \Drupal::service('entity.repository')->loadEntityByUuid($menu_item->getBaseId(), $menu_item->getDerivativeId());
           if ($target->hasTranslation($job->getSourceLangcode())) {
             $suggestions[] = [
@@ @@
 }

   /**
-   * Implements hook_form_FORM_ID_alter() for tmgmt_settings_form().
-   *
-   * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   */
+ * Implements hook_form_FORM_ID_alter() for tmgmt_settings_form().
+ *
+ * @param array $form
+ * @param FormStateInterface $form_state
+ */
 function tmgmt_content_form_tmgmt_settings_form_alter(array &$form, FormStateInterface $form_state) {
   module_load_include('inc', 'views', 'views.views');
   $entity_types = \Drupal::entitytypeManager()->getDefinitions();
@@ @@
     $source_langcode = $entity->language()->getId();
     $current_job_items = tmgmt_job_item_load_latest('content', $entity->getEntityTypeId(), $entity->id(), $source_langcode);
     if ($current_job_items) {
-      /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+      /** @var JobItemInterface $job_item */
       foreach ($current_job_items as $job_item) {
         // If the job item is not yet submitted update its data.
         if ($job_item->getJob()->isSubmittable() || $job_item->isInactive()) {
@@ @@
 /**
  * Creates continuous job items for entity.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   Entity to be inserted or updated.
  *
  * @return int
@@ @@
 /**
  * Implements hook_entity_access().
  */
-function tmgmt_content_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
+function tmgmt_content_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
   $result = AccessResult::neutral();
   $key = \Drupal::request()->query->get('key');
   if ($entity instanceof ContentEntityInterface && $operation == 'view' && $key) {
@@ @@
     $entity = $entity->getUntranslated();
     $source_langcode = $entity->language()->getId();
     $current_job_items = tmgmt_job_item_load_latest('content', $entity->getEntityTypeId(), $entity->id(), $source_langcode);
-    /** @var \Drupal\tmgmt\JobItemInterface $job_item */
+    /** @var JobItemInterface $job_item */
     if ($current_job_items) {
       foreach ($current_job_items as $job_item) {
         $valid_key = \Drupal::service('tmgmt_content.key_access')
@@ @@
  */
 function tmgmt_content_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {

-  /** @var \Drupal\field\Entity\FieldConfig $field_config */
+  /** @var FieldConfig $field_config */
   $field_config = $form_state->getFormObject()->getEntity();
   $bundle_is_translatable = \Drupal::service('content_translation.manager')->isEnabled($field_config->getTargetEntityTypeId(), $field_config->getTargetBundle());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


105) modules/contrib/tmgmt/sources/content/tmgmt_content.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 /**
  * @file
  * Hooks provided by the content entity source module.
@@ @@
  *
  * @see TMGMTEntityDefaultSourceUIController
  */
-function hook_tmgmt_content_list_query_alter(\Drupal\Core\Entity\Query\QueryInterface $query) {
+function hook_tmgmt_content_list_query_alter(QueryInterface $query) {
   $query->condition('type', array('article', 'page'), 'IN');
 }

@@ @@
 /**
  * Allows to exclude some fields from translation with TMGMT.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   The entity to exclude fields from.
- * @param \Drupal\Core\Field\FieldDefinitionInterface[] $translatable_fields
+ * @param FieldDefinitionInterface[] $translatable_fields
  *   An array of field definitions, keyed by field name.
  */
-function hook_tmgmt_translatable_fields_alter(\Drupal\Core\Entity\ContentEntityInterface $entity, array &$translatable_fields) {
+function hook_tmgmt_translatable_fields_alter(ContentEntityInterface $entity, array &$translatable_fields) {
   if (isset($translatable_fields['title'])) {
     unset($translatable_fields['title']);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


106) modules/contrib/tmgmt/sources/content/tests/src/Kernel/ContentEntitySourceUntranslatableTargetsUnitTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt_content\Kernel;

+use Drupal\node\NodeInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ @@

     // Check that the translations of the composite references were duplicated
     // correctly.
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::load($node->id());
     $node_translation = $node->getTranslation('de');
     $composite_en = $node->get('t_composite')->entity;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


107) modules/contrib/tmgmt/sources/content/tests/src/Kernel/ContentEntitySourceUnitTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt_content\Kernel;

+use Drupal\tmgmt\Entity\JobItem;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ @@
     // Request translation. Here it fails.
     $job->requestTranslation();
     $items = $job->getItems();
-    /** @var \Drupal\tmgmt\Entity\JobItem $item */
+    /** @var JobItem $item */
     $item = reset($items);
     // As was set to auto_accept, should be accepted.
     $this->assertEquals(JobItemInterface::STATE_ACCEPTED, $item->getState());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


108) modules/contrib/tmgmt/sources/content/tests/src/Kernel/ContentEntitySourceContentModerationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt_content\Kernel;

+use Drupal\workflows\WorkflowInterface;
 use Drupal\entity_test\Entity\EntityTestMulRev;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\content_moderation\Traits\ContentModerationTestTrait;
@@ @@
   /**
    * The workflow entity.
    *
-   * @var \Drupal\workflows\WorkflowInterface
+   * @var WorkflowInterface
    */
   protected $workflow;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


109) modules/contrib/tmgmt/sources/content/tests/src/Functional/ContentTmgmtEntitySourceUiTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt_content\Functional;

+use Drupal\content_translation\ContentTranslationManagerInterface;
 use Drupal\block_content\Entity\BlockContent;
 use Drupal\block_content\Entity\BlockContentType;
 use Drupal\comment\Entity\Comment;
@@ @@
     $this->addDefaultCommentField('node', 'article');

     // Enable comment translation.
-    /** @var \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager */
+    /** @var ContentTranslationManagerInterface $content_translation_manager */
     $content_translation_manager = \Drupal::service('content_translation.manager');
     $content_translation_manager->setEnabled('comment', 'comment', TRUE);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


110) modules/contrib/tmgmt/sources/content/tests/src/Functional/ContentEntitySourceContentModerationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\tmgmt_content\Functional;

+use Drupal\workflows\WorkflowInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\field\Traits\EntityReferenceTestTrait;
@@ @@
   /**
    * The workflow entity.
    *
-   * @var \Drupal\workflows\WorkflowInterface
+   * @var WorkflowInterface
    */
   protected $workflow;

@@ @@
     // Create the reference field to the composite entity test.
     $this->createEntityReferenceField('node', 'composite', 'entity_test_composite', 'entity_test_composite', 'entity_test_composite');
     FieldConfig::loadByName('node', 'composite', 'entity_test_composite')->setTranslatable(FALSE)->save();
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $fd */
+    /** @var EntityFormDisplayInterface $fd */
     \Drupal::service('entity_display.repository')
       ->getFormDisplay('node', 'composite')
       ->setComponent('entity_test_composite', ['type' => 'entity_reference_autocomplete'])
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


111) modules/contrib/tmgmt/sources/content/src/Plugin/tmgmt/Source/ContentEntitySource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_content\Plugin\tmgmt\Source;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\content_translation\ContentTranslationManagerInterface;
+use Drupal\tmgmt_content\FieldProcessorInterface;
 use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Returns the entity for the given job item.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *   The job entity
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity.
    */
   protected function getEntity(JobItemInterface $job_item) {
@@ @@
    * @param string|null $langcode
    *   (optional) The language code. Defaults to source entity language.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Returns a list of entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function loadMultiple($entity_type_id, array $entity_ids, $langcode = NULL) {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+    /** @var EntityStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);

     $entities = $storage->loadMultiple($entity_ids);
@@ @@
    * @param string|null $langcode
    *   (optional) The language code. Defaults to source entity language.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The loaded entity or null if not found.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function load($entity_type_id, $id, $langcode = NULL) {
     $entities = static::loadMultiple($entity_type_id, [$id], $langcode);
@@ @@
    * {@inheritdoc}
    */
   public function getUrl(JobItemInterface $job_item) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $langcode = $job_item->getJob() ? $job_item->getJob()->getSourceLangcode() : NULL;
     if ($entity = static::load($job_item->getItemType(), $job_item->getItemId(), $langcode)) {
       if ($entity->hasLinkTemplate('canonical')) {
@@ @@
   /**
    * Extracts translatable data from an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to get the translatable data from.
    *
    * @return array $data
@@ @@
     $exclude_field_types = ['language'];
     $exclude_field_names = ['moderation_state'];

-    /** @var \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager */
+    /** @var ContentTranslationManagerInterface $content_translation_manager */
     $content_translation_manager = \Drupal::service('content_translation.manager');
     $is_bundle_translatable = $content_translation_manager->isEnabled($entity->getEntityTypeId(), $entity->bundle());

@@ @@
   /**
    * Determines whether an entity is moderated.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return bool
@@ @@
   }

   /**
-   * Returns fields that should be embedded into the data for the given entity.
-   *
-   * Includes explicitly enabled fields and composite entities that are
-   * implicitly included to the translatable data.
-   *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
-   *   The entity to get the translatable data from.
-   *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[] $embeddable_fields
-   *   A list of field definitions that can be embedded.
-   */
+  * Returns fields that should be embedded into the data for the given entity.
+  *
+  * Includes explicitly enabled fields and composite entities that are
+  * implicitly included to the translatable data.
+  *
+   * @param ContentEntityInterface $entity
+  *   The entity to get the translatable data from.
+  *
+   * @return FieldDefinitionInterface[] $embeddable_fields
+    A list of field definitions that can be embedded.
+  */
   public static function getEmbeddableFields(ContentEntityInterface $entity) {
     // Get the configurable embeddable references.
     $field_definitions = $entity->getFieldDefinitions();
@@ @@
       return FALSE;
     }

-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     if ($entity_revision = $this->getPendingRevisionWithCompositeReferenceField($job_item)) {
       $title = $entity_revision->hasLinkTemplate('latest-version') ? $entity_revision->toLink(NULL, 'latest-version')->toString() : $entity_revision->label();
       $job_item->addMessage('This translation cannot be accepted as there is a pending revision in the default translation. You must publish %title first before saving this translation.', [
@@ @@
   /**
    * Saves translation data in an entity translation.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity for which the translation should be saved.
    * @param array $data
    *   The translation data for the fields.
    * @param string $target_langcode
    *   The target language.
-   * @param \Drupal\tmgmt\JobItemInterface $item
+   * @param JobItemInterface $item
    *   The job item.
    * @param bool $save
    *   (optional) Whether to save the translation or not.
@@ @@
     }

     if ($entity->getEntityType()->isRevisionable()) {
-      /** @var \Drupal\Core\Entity\TranslatableRevisionableStorageInterface $storage */
+      /** @var TranslatableRevisionableStorageInterface $storage */
       $storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());

       if ($storage instanceof TranslatableRevisionableStorageInterface) {
@@ @@
   /**
    * Creates a translation duplicate of the given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $target_entity
+   * @param ContentEntityInterface $target_entity
    *   The target entity to clone.
    * @param string $langcode
    *   Language code for all the clone entities created.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   New entity object with the data from the original entity. Not
    *   saved. No sub-entities are cloned.
    */
@@ @@
   /**
    * Returns the bundle label for a given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return string
@@ @@
   }

   /**
-   * Returns the field processor for a given field type.
-   *
-   * @param string $field_type
-   *   The field type.
-   *
-   * @return \Drupal\tmgmt_content\FieldProcessorInterface $field_processor
-   *   The field processor for this field type.
-   */
+  * Returns the field processor for a given field type.
+  *
+  * @param string $field_type
+  *   The field type.
+  *
+   * @return FieldProcessorInterface $field_processor
+    The field processor for this field type.
+  */
   protected function getFieldProcessor($field_type) {
     $definition = \Drupal::service('plugin.manager.field.field_type')->getDefinition($field_type);

@@ @@
   }

   /**
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    * @param array $field_item
    * @param $delta
    * @param $property
@@ @@
    * @param bool $is_target_type_translatable
    *   (optional) Whether the target entity type is translatable.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    */
   protected function findReferencedEntity(FieldItemListInterface $field, array $field_item, $delta, $property, $is_target_type_translatable = TRUE) {
     // If an id is provided, loop over the field item deltas until we find the
@@ @@
   /**
    * Returns the source revision if it is a pending revision with an ERR field.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $job_item
+   * @param JobItemInterface $job_item
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The source revision entity if it is a pending revision with an ERR field.
    */
   public function getPendingRevisionWithCompositeReferenceField(JobItemInterface $job_item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


112) modules/contrib/tmgmt/sources/content/src/Form/ContentTranslateForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_content\Form;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $form_state->get('entity');
     $values = $form_state->getValues();
     $jobs = array();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


113) modules/contrib/tmgmt/sources/content/src/FieldProcessorInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Extracts the translatatable data structure from the given field.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field object.
    *
    * @return array $data
@@ @@
    *
    * @param array $field_data
    *   The translated data for this field.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field object.
    *
    * @see \Drupal\tmgmt_content\Plugin\tmgmt\Source\ContentEntitySource::doSaveTranslations()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


114) modules/contrib/tmgmt/sources/content/src/DefaultFieldProcessor.php:108

    ---------- begin diff ----------
@@ @@
   /**
    * Returns whether the property should be translated or not.
    *
-   * @param \Drupal\Core\TypedData\TypedDataInterface $property
+   * @param TypedDataInterface $property
    *   The field property to check.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


115) modules/contrib/tmgmt/sources/content/src/Controller/ContentTranslationPreviewController.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates an ContentTranslationPreviewController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Preview job item entity data.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $tmgmt_job_item
+   * @param JobItemInterface $tmgmt_job_item
    *   Job item to be previewed.
    * @param string $view_mode
    *   The view mode that should be used to display the entity.
@@ @@
   /**
    * The _title_callback for the page that renders a single node in preview.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $tmgmt_job_item
+   * @param JobItemInterface $tmgmt_job_item
    *   The current node.
    *
    * @return string
@@ @@
   /**
    * Builds the entity translation for the provided translation data.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity for which the translation should be returned.
    * @param array $data
    *   The translation data for the fields.
@@ @@
    * @param string $target_langcode
    *   The target language.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Translation data.
    */
   protected function makePreview(ContentEntityInterface $entity, array $data, $target_langcode) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


116) modules/contrib/tmgmt/sources/content/src/ContentEntitySourcePluginUi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_content;

+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\content_moderation\ModerationInformationInterface;
+use Drupal\workflows\Transition;
 use Drupal\content_translation\ContentTranslationManager;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
         $entity = $default_revision;
         $latest_revision_id = $storage->getLatestTranslationAffectedRevisionId($entity->id(), $langcode);
         if ($latest_revision_id) {
-          /** @var \Drupal\Core\Entity\ContentEntityInterface $latest_revision */
+          /** @var ContentEntityInterface $latest_revision */
           $latest_revision = $storage->loadRevision($latest_revision_id);
           // Make sure we do not list removed translations, i.e. translations
           // that have been part of a default revision but no longer are.
@@ @@
   /**
    * Adds selected sources to continuous jobs.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state array.
    * @param string $item_type
    *   Entity type.
@@ @@
    *   the provided entity property exists for given entity type and its value
    *   is processed.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface|NULL
+   * @return QueryInterface|NULL
    *   The query for translatable entities or NULL if the query can not be
    *   built for this entity type.
    */
@@ @@
       return $form;
     }

-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = ContentEntitySource::load($item->getItemType(), $item->getItemId());

     if (!$form_state->isRebuilding() && $entity) {
@@ @@
   /**
    * Build a publish state element.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $item
+   * @param JobItemInterface $item
    *   The job item.
-   * @param \Drupal\Core\Entity\EntityPublishedInterface $entity
+   * @param EntityPublishedInterface $entity
    *   The source publishable entity.
    *
    * @return array
@@ @@
   /**
    * Build a content moderation elemenet for the translation.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $item
+   * @param JobItemInterface $item
    *   The job item.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The source moderated entity.
    *
    * @return array
@@ @@
   protected function buildContentModerationElement(JobItemInterface $item, ContentEntityInterface $entity) {
     $element = [];

-    /** @var \Drupal\content_moderation\ModerationInformationInterface $moderation_info */
+    /** @var ModerationInformationInterface $moderation_info */
     $moderation_info = \Drupal::service('content_moderation.moderation_information');
     $workflow = $moderation_info->getWorkflowForEntity($entity);
     $moderation_validator = \Drupal::service('content_moderation.state_transition_validation');
@@ @@
     $default = $workflow->getTypePlugin()->getState($current_state);

     // Get a list of valid transitions.
-    /** @var \Drupal\workflows\Transition[] $transitions */
+    /** @var Transition[] $transitions */
     $transitions = $moderation_validator->getValidTransitions($entity, \Drupal::currentUser());

     $transition_labels = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


117) modules/contrib/tmgmt/sources/content/src/Access/KeyAccessCheck.php:19

    ---------- begin diff ----------
@@ @@
    * Checks access for TMGMT job item by comparing the hashed key from job item
    * data and key from the request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The incoming request.
-   * @param \Drupal\tmgmt\JobItemInterface $tmgmt_job_item
+   * @param JobItemInterface $tmgmt_job_item
    *   Job item.
    *
    * @return AccessResult
@@ @@
   /**
    * Generates a key from job item data that can be used in the URL.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $tmgmt_job_item
+   * @param JobItemInterface $tmgmt_job_item
    *   Job item.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [ERROR] Could not process "modules/contrib/tmgmt/src/Tests/TMGMTTestBase.php"  
         file, due to:                                                          
         "Analyze error: "Class Drupal\simpletest\WebTestBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/tmgmt/src/Tests/EntityTestBase.php" 
         file, due to:                                                          
         "Analyze error: "Class Drupal\simpletest\WebTestBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

