modules/contrib/alertbox/alertbox.install
modules/contrib/alertbox/alertbox.module
modules/contrib/alertbox/modules/alertbox_modal/alertbox_modal.install
modules/contrib/alertbox/modules/alertbox_modal/alertbox_modal.module
modules/contrib/alertbox/src/Form/AlertboxSettingsForm.php

2 files with changes
====================

1) modules/contrib/alertbox/src/Form/AlertboxSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\alertbox\Form;

+use Drupal\Core\Extension\ThemeHandler;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\block\BlockInterface;
@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $config = $this->config('alertbox.settings');
-    /** @var \Drupal\Core\Extension\ThemeHandler $theme_handler */
+    /** @var ThemeHandler $theme_handler */
     $theme_handler = \Drupal::service('theme_handler');

     $form['alertbox_interface_options'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/alertbox/alertbox.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Block\BlockManager;
 /**
  * @file
  * Alert box.
@@ @@
 /**
  * Function to update an alertbox content block.
  *
- * @param \Drupal\block_content\Entity\BlockContent $entity
+ * @param BlockContent $entity
  *   Entity being update/insert.
  * @param bool $is_new
  *   (optional) FALSE for entities being updated, TRUE when inserting a new one.
@@ @@
   }

   // Get the related block, based on the uuid.
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $block */
+  /** @var EntityTypeManagerInterface $block */
   $block = \Drupal::service('entity_type.manager');
-  /** @var \Drupal\Core\Block\BlockManager $block_alertbox */
+  /** @var BlockManager $block_alertbox */
   $block_alertboxes = $block->getStorage('block');
   $block_alertboxes = $block_alertboxes->loadByProperties(['plugin' => 'block_content:' . $uuid]);

-  /** @var \Drupal\Core\Entity\EntityInterface $block_alertbox */
+  /** @var EntityInterface $block_alertbox */
   foreach ($block_alertboxes as $block_alertbox) {
     // Here we get the corresponding block and now we are able to change the
     // block configuration for this alertbox.
@@ @@
 function alertbox_theme_suggestions_block_alter(array &$suggestions, array $variables) {
   // Block suggestions for custom block bundles.
   if (isset($variables['elements']['content']) && isset($variables['elements']['content']['#block_content'])) {
-    /** @var \Drupal\Core\Entity\EntityInterface $block_content */
+    /** @var EntityInterface $block_content */
     $block_content = $variables['elements']['content']['#block_content'];
     if (isset($block_content) && $block_content->bundle() == 'alertbox') {
       array_unshift($suggestions, 'block__block_content__alertbox');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 2 files have been changed by Rector                                       

