diff --git a/src/Plugin/tmgmt/Translator/YandexTranslator.php b/src/Plugin/tmgmt/Translator/YandexTranslator.php
index 3feca12..e3e01e0 100755
--- a/src/Plugin/tmgmt/Translator/YandexTranslator.php
+++ b/src/Plugin/tmgmt/Translator/YandexTranslator.php
@@ -7,6 +7,9 @@
 
 namespace Drupal\tmgmt_yandex_api\Plugin\tmgmt\Translator;
 
+use Psr\Http\Message\ResponseInterface;
+use Drupal\tmgmt\Entity\Job;
+use Drupal\tmgmt\Entity\JobItem;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\tmgmt\ContinuousTranslatorInterface;
@@ -57,14 +60,14 @@ class YandexTranslator extends TranslatorPluginBase implements ContainerFactoryP
   /**
    * Guzzle HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $client;
 
   /**
    * Constructs a LocalActionBase object.
    *
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    *   The Guzzle HTTP client.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
@@ -108,7 +111,7 @@ class YandexTranslator extends TranslatorPluginBase implements ContainerFactoryP
                ->filterTranslatable($job->getData()) as $value) {
       // If one of the texts in this job exceeds the max character count
       // the job can't be translated.
-      if (Unicode::strlen($value['#text']) > $this->maxCharacters) {
+      if (mb_strlen($value['#text']) > $this->maxCharacters) {
         return TranslatableResult::no(t('The length of the job exceeds tha max character count (@count).', ['@count' => $this->maxCharacters]));
       }
     }
@@ -202,7 +205,7 @@ class YandexTranslator extends TranslatorPluginBase implements ContainerFactoryP
    * @param $headers
    *   (Optional) Array of additional HTTP headers.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   The HTTP response.
    */
   protected function doRequest(Translator $translator, $path, array $query = [], array $headers = []) {
@@ -226,9 +229,9 @@ class YandexTranslator extends TranslatorPluginBase implements ContainerFactoryP
    * {@inheritdoc}
    */
   public function requestJobItemsTranslation(array $job_items) {
-    /** @var \Drupal\tmgmt\Entity\Job $job */
+    /** @var Job $job */
     $job = reset($job_items)->getJob();
-    /** @var \Drupal\tmgmt\Entity\JobItem $job_item */
+    /** @var JobItem $job_item */
     foreach ($job_items as $job_item) {
       if ($job->isContinuous()) {
         $job_item->active();
diff --git a/src/YandexTranslatorUi.php b/src/YandexTranslatorUi.php
index 3b84648..fcb3412 100755
--- a/src/YandexTranslatorUi.php
+++ b/src/YandexTranslatorUi.php
@@ -6,6 +6,7 @@
 
 namespace Drupal\tmgmt_yandex_api;
 
+use Drupal\tmgmt\TranslatorInterface;
 use Drupal\tmgmt\TranslatorPluginUiBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -20,7 +21,7 @@ class YandexTranslatorUi extends TranslatorPluginUiBase {
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildConfigurationForm($form, $form_state);
 
-    /** @var \Drupal\tmgmt\TranslatorInterface $translator */
+    /** @var TranslatorInterface $translator */
     $translator = $form_state->getFormObject()->getEntity();
     $register_app = 'https://tech.yandex.com/translate/';
     $form['api_key'] = array(
@@ -40,7 +41,7 @@ class YandexTranslatorUi extends TranslatorPluginUiBase {
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
     parent::validateConfigurationForm($form, $form_state);
-    /** @var \Drupal\tmgmt\TranslatorInterface $translator */
+    /** @var TranslatorInterface $translator */
     $translator = $form_state->getFormObject()->getEntity();
     $supported_remote_languages = $translator->getPlugin()
       ->getSupportedRemoteLanguages($translator);
