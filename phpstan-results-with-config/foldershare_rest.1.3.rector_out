modules/contrib/foldershare_rest/foldershare_rest.install
modules/contrib/foldershare_rest/foldershare_rest.module
modules/contrib/foldershare_rest/foldershare_rest.update.inc
modules/contrib/foldershare_rest/src/Branding.php
modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResource.php
modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResourceConstants.php
modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResourceTraits/ConfigureTrait.php
modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResourceTraits/DeleteResponseTrait.php
modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResourceTraits/GetResponseTrait.php
modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResourceTraits/ManageRequestTrait.php
modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResourceTraits/ManageResponseTrait.php
modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResourceTraits/PatchResponseTrait.php
modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResourceTraits/PostResponseTrait.php
modules/contrib/foldershare_rest/src/Plugin/rest/resource/UncacheableResponse.php

7 files with changes
====================

1) modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResourceTraits/PostResponseTrait.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * Responds to HTTP POST requests to create a new FolderShare entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The incoming HTTP POST request.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if arguments are bad.
    *
    * @todo Implement a post to create a new media entity.
@@ @@
    * @param string $name
    *   The name of the new folder.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if arguments are bad.
    */
   private function postNewRootFolder(string $name) {
@@ @@
    * @param string $name
    *   The name of the new folder.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if arguments are bad.
    */
   private function postNewFolder(string $name) {
@@ @@
    *   an existing file, the new file is given a unique sequence number to
    *   avoid overwriting.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if arguments are bad.
    */
   private function postNewRootFile(
@@ @@
    *   an existing file, the new file is given a unique sequence number to
    *   avoid overwriting.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if arguments are bad.
    */
   private function postNewFile(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResourceTraits/PatchResponseTrait.php:47

    ---------- begin diff ----------
@@ @@
    * PATCH requests update or edit content, copy, move, archive, and
    * unarchive entities.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The incoming HTTP POST request.
-   * @param \Drupal\Core\Entity\EntityInterface $dummy
+   * @param EntityInterface $dummy
    *   An unserialized partial entity containing values provided in
    *   the patch.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *
    * @todo Implement an update to access grants (sharing configuration) on
    * a root item.
@@ @@
    * @param int $id
    *   The FolderShare entity ID. If NULL, negative, or EMPTY_ITEM_ID,
    *   then no entity ID was provided.
-   * @param \Drupal\Core\Entity\EntityInterface $dummy
+   * @param EntityInterface $dummy
    *   The dummy entity created from incoming unserialized data. The dummy
    *   cannot be NULL.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    */
   private function patchEntity(
     int $id = FolderShareResourceConstants::EMPTY_ITEM_ID,
@@ @@
    *   When TRUE, allow the copy to overwrite a same-name entity at the
    *   destination.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an empty uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if there is no source or destination path,
    *   if either path is malformed, if items are locked, if the user
    *   does not have permission, or if there will be a collision but
@@ @@
    *   When TRUE, allow the move to overwrite a same-name entity at the
    *   destination.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an empty uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if there is no source or destination path,
    *   if either path is malformed, if items are locked, if the user
    *   does not have permission, or if there will be a collision but
@@ @@
    * @param bool $recurse
    *   When TRUE, recurse and change descendants as well.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an empty uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if there is no source path, the path is malformed,
    *   if there is no user, the user is malformed, items are locked, or the
    *   user does not have permission.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResourceTraits/ManageResponseTrait.php:61

    ---------- begin diff ----------
@@ @@
    * If the entity has any entity reference fields, this method loops
    * through them and adds them to a 'Link' header field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The FolderShare entity.
-   * @param \Symfony\Component\HttpFoundation\Response $response
+   * @param Response $response
    *   The response.
    *
    * @see https://tools.ietf.org/html/rfc5988#section-5
@@ @@
    *
    * If the field item list is empty, a NULL is returned.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $fieldList
+   * @param FieldItemListInterface $fieldList
    *   The field item list whose values contribute to a key-value pair output.
    *
    * @return mixed
@@ @@
   /**
    * Returns a simplified value for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $field
+   * @param FieldItemInterface $field
    *   The field item whose value contributes to a key-value pair output.
    *
    * @return string
@@ @@
    * @param \Drupal\foldeshare\FolderShareInterface $entity
    *   The entity whose fields should be cleared if they are not viewable.
    *
-   * @return \Drupal\foldershare\FolderShareInterface
+   * @return FolderShareInterface
    *   Returns the same entity.
    */
   private function cleanEntity(FolderShareInterface &$entity) {
@@ @@
    * and then formatted properly using the selected return format.
    * A response containing the formatted entity is returned.
    *
-   * @param \Drupal\foldershare\FolderShareInterface $entity
+   * @param FolderShareInterface $entity
    *   A single entity to return, after cleaning and formatting.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    */
   private function formatEntityResponse(FolderShareInterface $entity) {
@@ @@
    * and then formatted properly using the selected return format.
    * A response containing the formatted entity is returned.
    *
-   * @param \Drupal\foldershare\FolderShareInterface[] $entities
+   * @param FolderShareInterface[] $entities
    *   A list of entities to return, after cleaning and formatting.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    */
   private function formatEntityListResponse(array $entities) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResourceTraits/ManageRequestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\foldershare_rest\Plugin\rest\resource\FolderShareResourceTraits;

+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
@@ @@
    *   Returns the name of the operation, or the default if no operation
    *   was specified.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws a BadRequestHttpException if an unknown operation is found.
    *
    * @see ::getAndValidateGetOperation()
@@ @@
    *   Returns the name of the operation, or the default if no operation
    *   was specified.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws a BadRequestHttpException if an unknown operation is found.
    *
    * @see ::HEADER_GET_OPERATION
@@ @@
    *   Returns the name of the operation, or the default if no operation
    *   was specified.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws a BadRequestHttpException if an unknown operation is found.
    *
    * @see ::HEADER_DELETE_OPERATION
@@ @@
    *   Returns the name of the operation, or the default if no operation
    *   was specified.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws a BadRequestHttpException if an unknown operation is found.
    *
    * @see ::HEADER_PATCH_OPERATION
@@ @@
    *   Returns the name of the operation, or the default if no operation
    *   was specified.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws a BadRequestHttpException if an unknown operation is found.
    *
    * @see ::HEADER_POST_OPERATION
@@ @@
    * header within the request. This function gets that header,
    * parses out the filename, and returns it.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HTTP request to parse.
    *
    * @return string
@@ @@
    *   Returns the name of the return type, or the default if no return type
    *   was specified.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws a BadRequestHttpException if an unknown return type is found.
    *
    * @see ::HEADER_RETURN_FORMAT
@@ @@
    *   Returns the name of the return type, or the default if no return type
    *   was specified.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws a BadRequestHttpException if an unknown user is found.
    *
    * @see ::HEADER_USER
@@ @@
    *   The operation being performed (e.g. delete, view). This should
    *   already have been translated to the user's language choice.
    *
-   * @return \Drupal\foldershare\FolderShareInterface
+   * @return FolderShareInterface
    *   Returns the loaded entity.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws a NotFoundHttpException if the entity ID is bad, and
    *   an AccessDeniedHttpException if the user does not have access.
    */
@@ @@
    *   If so and the entity cannot be found, an exception is thrown. Otherwise
    *   a NULL is returned.
    *
-   * @return \Drupal\foldershare\FolderShareInterface
+   * @return FolderShareInterface
    *   Returns the loaded source entity.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if the source entity is required and there is
    *   no source found.
    */
@@ @@
    * @param string $operation
    *   The access operation to check for.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if access is denied.
    */
   private function validateAccess(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResourceTraits/GetResponseTrait.php:68

    ---------- begin diff ----------
@@ @@
    *   if the ID or path is specified by the X-FolderShare-Source-Path
    *   header.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws a variety of exceptions depending upon the operation.
    *
    * @todo Implement a request to get access grants (sharing configuration)
@@ @@
    * The HTTP response contains:
    * - A list of key-value pairs describing software version numbers
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns a response containing key-value pairs for version numbers.
    */
   private function getVersion() {
@@ @@
    * The HTTP response contains:
    * - A list of key-value pairs describing the site configuration.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns a response containing key-value pairs for module and
    *   site settings.
    */
@@ @@
    * The HTTP response contains:
    * - A list of key-value pairs describing the user's usage.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns a response containing key-value pairs for the user's current
    *   usage of the FolderShare module.
    */
@@ @@
    * @param int $id
    *   The ID of the entity from the URL.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if the request is bad.
    */
   private function getEntity(int $id) {
@@ @@
    * @param int $id
    *   The ID of the entity from the URL.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if the request is bad.
    */
   private function getEntityParent(int $id) {
@@ @@
    * @param int $id
    *   The ID of the entity from the URL.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if the request is bad.
    */
   private function getEntityRoot(int $id) {
@@ @@
    * @param int $id
    *   The ID of the entity from the URL.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if the request is bad.
    */
   private function getEntityAncestors(int $id) {
@@ @@
    * @param int $id
    *   The ID of the entity from the URL.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if the request is bad.
    */
   private function getEntityDescendants(int $id) {
@@ @@
    *   user. The value is ignored for the "public" scheme, which always
    *   returns all public items, regardless of who owns them.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if arguments are bad.
    */
   private function getRootList(string $scheme, int $uid = NULL) {
@@ @@
    * @param int $id
    *   The ID of the entity from the URL.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if the request is bad.
    */
   private function download(int $id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResourceTraits/DeleteResponseTrait.php:47

    ---------- begin diff ----------
@@ @@
    * The HTTP response contains:
    * - A no-content message.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The incoming HTTP POST request.
    *
-   * @return \Drupal\foldershare_rest\Plugin\rest\resource\UncacheableResponse
+   * @return UncacheableResponse
    *   Returns an uncacheable response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws an exception if arguments are bad.
    */
   public function delete(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/foldershare_rest/src/Plugin/rest/resource/FolderShareResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\foldershare_rest\Plugin\rest\resource;

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\rest\RestResourceConfigInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;

@@ @@
   /**
    * The entity type targeted by this resource.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $definition;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * The link relation type manager used to create HTTP header links.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $linkRelationTypeManager;

@@ @@
   /**
    * The MIME type guesser.
    *
-   * @var Drupal\Core\ProxyClass\File\MimeType\MimeTypeGuesser
+   * @var MimeTypeGuesser
    */
   protected $mimeTypeGuesser;

@@ @@
   /**
    * The list of installed modules.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleList;

@@ @@
   /**
    * The configuration for this REST resource.
    *
-   * @var \Drupal\rest\RestResourceConfigInterface
+   * @var RestResourceConfigInterface
    */
   protected $resourceConfiguration;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $typeManager;

@@ @@
    *   The ID for the REST plugin instance.
    * @param mixed $pluginDefinition
    *   The REST plugin implementation definition.
-   * @param Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $typeManager
+   * @param EntityTypeManagerInterface $typeManager
    *   The entity type manager.
    * @param array $serializerFormats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Symfony\Component\HttpFoundation\Request $currentRequest
+   * @param Request $currentRequest
    *   The current HTTP request.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $linkRelationTypeManager
+   * @param PluginManagerInterface $linkRelationTypeManager
    *   The link relation type manager.
-   * @param \Drupal\Core\File\FileSystem $fileSystem
+   * @param FileSystem $fileSystem
    *   The file system service.
-   * @param \Drupal\Core\Extension\ModuleExtensionList $moduleList
+   * @param ModuleExtensionList $moduleList
    *   The list of installed modules.
    * @param Drupal\Core\File\ProxyClass\MimeType\MimeTypeGuesser $mimeTypeGuesser
    *   The MIME type guesser.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

