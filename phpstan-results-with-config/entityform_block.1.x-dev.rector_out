modules/contrib/entityform_block/src/Plugin/Block/EntityEditFormBlock.php
modules/contrib/entityform_block/tests/src/Functional/EntityFormBlockTest.php
modules/contrib/entityform_block/tests/src/Functional/LocaleTest.php

3 files with changes
====================

1) modules/contrib/entityform_block/tests/src/Functional/LocaleTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $file = new \stdClass();
-    $file->uri =  \Drupal::service('file_system')->realpath(drupal_get_path('module', 'entityform_block') . '/tests/test.de.po');
+    $file->uri =  \Drupal::service('file_system')->realpath(\Drupal::service('extension.list.module')->getPath('entityform_block') . '/tests/test.de.po');
     $file->langcode = 'de';
     Gettext::fileToDatabase($file, array());
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entityform_block/tests/src/Functional/EntityFormBlockTest.php:52

    ---------- begin diff ----------
@@ @@
     $this->drupalGet('admin/structure/block/add/entityform_block/classy', ['query' => ['region' => 'content']]);

     // Assert that comments and personal form bundles are not displayed.
-    $this->assertNoOption('edit-settings-entity-type-bundle', 'comment.comment');
-    $this->assertNoOption('edit-settings-entity-type-bundle', 'contact_message.personal');
+    $this->assertSession()->optionNotExists('edit-settings-entity-type-bundle', 'comment.comment');
+    $this->assertSession()->optionNotExists('edit-settings-entity-type-bundle', 'contact_message.personal');

     $edit = array(
       'settings[entity_type_bundle]' => 'node.article',
     );
-    $this->drupalPostForm(NULL, $edit, t('Save block'));
+    $this->submitForm($edit, t('Save block'));

     $this->drupalGet('<front>');

@@ @@
       'name' => 'Vocabulary Tags',
       'vid' => 'vocabulary_tags',
     );
-    $this->drupalPostForm('admin/structure/taxonomy/add', $edit, t('Save'), [], 'taxonomy-vocabulary-form');
+    $this->drupalGet('admin/structure/taxonomy/add', []);
+    $this->submitForm($edit, t('Save'), 'taxonomy-vocabulary-form');
     $this->assertSession()->pageTextContains('Created new vocabulary Vocabulary Tags.');

     // Add a form block for creating tags.
@@ @@
     $edit = array(
       'settings[entity_type_bundle]' => 'taxonomy_term.vocabulary_tags',
     );
-    $this->drupalPostForm(NULL, $edit, t('Save block'));
+    $this->submitForm($edit, t('Save block'));

     $this->drupalGet('<front>');

@@ @@
     $edit = array(
       'settings[entity_type_bundle]' => 'user.user',
     );
-    $this->drupalPostForm(NULL, $edit, t('Save block'));
+    $this->submitForm($edit, t('Save block'));

     $this->drupalGet('<front>');
    ----------- end diff -----------

Applied rules:
 * AssertNoOptionRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entityform_block/src/Plugin/Block/EntityEditFormBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entityform_block\Plugin\Block;

+use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ @@
     $form = parent::blockForm($form, $form_state);

     // Get content entity types.
-    /** @var \Drupal\Core\Entity\ContentEntityTypeInterface[] $content_entity_types */
+    /** @var ContentEntityTypeInterface[] $content_entity_types */
     $content_entity_types = [];
     foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type_definition) {
       if ($entity_type_definition->getGroup() == 'content') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

