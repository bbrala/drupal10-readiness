modules/contrib/path_redirect_import/path_redirect_import.drush.inc
modules/contrib/path_redirect_import/path_redirect_import.module
modules/contrib/path_redirect_import/src/Commands/PathRedirectImport.php
modules/contrib/path_redirect_import/src/Form/RedirectImportForm.php
modules/contrib/path_redirect_import/src/ImporterService.php
modules/contrib/path_redirect_import/tests/src/Functional/RedirectImportTest.php

3 files with changes
====================

1) modules/contrib/path_redirect_import/tests/src/Functional/RedirectImportTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\path_redirect_import\Functional;

+use Drupal\user\UserInterface;
+use Drupal\file\FileInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ @@
   /**
    * A user with permission to administer nodes.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;

@@ @@
   /**
    * An CSV file path for uploading.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $csv;

@@ @@
   /**
    * An array of nodes created for testing purposes.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $nodes;

@@ @@

     $form_path = 'admin/config/search/redirect/import';
     $this->drupalGet($form_path);
-    $this->drupalPostForm(NULL, $edit, 'Import');
+    $this->submitForm($edit, 'Import');

     // Assertions.
     $web_assert = $this->assertSession();
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/path_redirect_import/src/ImporterService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\path_redirect_import;

+use Symfony\Cmf\Component\Routing\ChainRouter;
 use Drupal\redirect\Entity\Redirect;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Url;
@@ @@
     }

     if (empty($data)) {
-      \Drupal::messenger()->addWarning(t('The uploaded file contains no rows with compatible redirect data. No redirects have imported. Compare your file to <a href=":sample">this sample data.</a>', [':sample' => '/' . drupal_get_path('module', 'path_redirect_import') . '/redirect-example-file.csv']));
+      \Drupal::messenger()->addWarning(t('The uploaded file contains no rows with compatible redirect data. No redirects have imported. Compare your file to <a href=":sample">this sample data.</a>', [':sample' => '/' . \Drupal::service('extension.list.module')->getPath('path_redirect_import') . '/redirect-example-file.csv']));
     }
     else {
       if (PHP_SAPI == 'cli' && function_exists('drush_main')) {
@@ @@
             '\Drupal\path_redirect_import\ImporterService',
             'finish',
           ],
-          'file' => drupal_get_path('module', 'path_redirect_import') . '/path_redirect_import.module',
+          'file' => \Drupal::service('extension.list.module')->getPath('path_redirect_import') . '/path_redirect_import.module',
         ];

         batch_set($batch);
@@ @@
       $path = isset($parsed_url['path']) ? $parsed_url['path'] : NULL;
       $query = isset($parsed_url['query']) ? $parsed_url['query'] : NULL;

-      /** @var \Drupal\redirect\Entity\Redirect $redirect */
+      /** @var Redirect $redirect */
       $redirectEntityManager = \Drupal::entityTypeManager()->getStorage('redirect');
       $redirect = $redirectEntityManager->create();
       $redirect->setSource($path, $query);
@@ @@

       // Get the route object from the redirect location.
       try {
-        /** @var \Symfony\Cmf\Component\Routing\ChainRouter $router */
+        /** @var ChainRouter $router */
         $router = \Drupal::service('router');
         $router->match($alias);
       }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/path_redirect_import/src/Form/RedirectImportForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\path_redirect_import\Form;

+use Drupal\file\Entity\File;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\path_redirect_import\ImporterService;
@@ @@
   /**
    * Uploaded file entity.
    *
-   * @var \Drupal\file\Entity\File
+   * @var File
    */
   protected $file;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new RedirectImportForm.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(LanguageManagerInterface $language_manager, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 3 files have been changed by Rector                                       

