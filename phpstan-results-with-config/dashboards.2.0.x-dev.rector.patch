diff --git a/dashboards.install b/dashboards.install
index 70a874b..a715be2 100644
--- a/dashboards.install
+++ b/dashboards.install
@@ -1,19 +1,20 @@
 <?php
 
+use Drupal\user\UserDataInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 /**
  * @file
  * Install, update, and uninstall functions for dashboards.module.
  */
-
 /**
  * Implements hook_uninstall().
  */
 function dashboards_uninstall() {
-  /** @var \Drupal\user\UserDataInterface $userData */
+  /** @var UserDataInterface $userData */
   $userData = \Drupal::service('user.data');
   $userData->delete('dashboards');
 
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $manager */
+  /** @var EntityTypeManagerInterface $manager */
   $manager = \Drupal::service('entity_type.manager');
   $boards = $manager->getStorage('dashboard')->loadMultiple();
   $manager->getStorage('dashboard')->delete($boards);
diff --git a/dashboards.module b/dashboards.module
index 481a03f..8da25a7 100644
--- a/dashboards.module
+++ b/dashboards.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\dashboards\Entity\DashboardStorage;
 /**
  * @file
  * Contains dashboards.module.
@@ -83,7 +84,7 @@ function dashboards_toolbar() {
   $entityTypeManager = \Drupal::entityTypeManager();
 
   /**
-   * @var \Drupal\dashboards\Entity\DashboardStorage
+   * @var DashboardStorage
    */
   $storage = $entityTypeManager->getStorage('dashboard');
   $boards = $storage->loadMultipleOrderedByWeight();
diff --git a/modules/dashboards_comments/src/Plugin/Dashboard/Comments.php b/modules/dashboards_comments/src/Plugin/Dashboard/Comments.php
index b92a2a0..d997552 100644
--- a/modules/dashboards_comments/src/Plugin/Dashboard/Comments.php
+++ b/modules/dashboards_comments/src/Plugin/Dashboard/Comments.php
@@ -26,21 +26,21 @@ class Comments extends DashboardBase {
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeInfo;
 
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
diff --git a/modules/dashboards_matomo/src/Plugin/Dashboard/Browser.php b/modules/dashboards_matomo/src/Plugin/Dashboard/Browser.php
index 38cff8e..fcb94c9 100644
--- a/modules/dashboards_matomo/src/Plugin/Dashboard/Browser.php
+++ b/modules/dashboards_matomo/src/Plugin/Dashboard/Browser.php
@@ -18,7 +18,7 @@ class Browser extends MatomoBase {
   /**
    * Lazy build callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Matomo base plugin.
    * @param array $configuration
    *   Configuration.
diff --git a/modules/dashboards_matomo/src/Plugin/Dashboard/Country.php b/modules/dashboards_matomo/src/Plugin/Dashboard/Country.php
index 210a997..652b489 100644
--- a/modules/dashboards_matomo/src/Plugin/Dashboard/Country.php
+++ b/modules/dashboards_matomo/src/Plugin/Dashboard/Country.php
@@ -18,7 +18,7 @@ class Country extends MatomoBase {
   /**
    * Lazy build callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Matomo base plugin.
    * @param array $configuration
    *   Configuration.
diff --git a/modules/dashboards_matomo/src/Plugin/Dashboard/OsVersion.php b/modules/dashboards_matomo/src/Plugin/Dashboard/OsVersion.php
index e2bbbab..a36f95f 100644
--- a/modules/dashboards_matomo/src/Plugin/Dashboard/OsVersion.php
+++ b/modules/dashboards_matomo/src/Plugin/Dashboard/OsVersion.php
@@ -18,7 +18,7 @@ class OsVersion extends MatomoBase {
   /**
    * Lazy build callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Matomo base plugin.
    * @param array $configuration
    *   Configuration.
diff --git a/modules/dashboards_matomo/src/Plugin/Dashboard/TopUrls.php b/modules/dashboards_matomo/src/Plugin/Dashboard/TopUrls.php
index 9cd38ed..46778a7 100644
--- a/modules/dashboards_matomo/src/Plugin/Dashboard/TopUrls.php
+++ b/modules/dashboards_matomo/src/Plugin/Dashboard/TopUrls.php
@@ -28,7 +28,7 @@ class TopUrls extends MatomoBase {
   /**
    * Lazy build callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Matomo base plugin.
    * @param array $configuration
    *   Configuration.
diff --git a/modules/dashboards_matomo/src/Plugin/Dashboard/VisitStatistic.php b/modules/dashboards_matomo/src/Plugin/Dashboard/VisitStatistic.php
index 1934ad4..0b79ad3 100644
--- a/modules/dashboards_matomo/src/Plugin/Dashboard/VisitStatistic.php
+++ b/modules/dashboards_matomo/src/Plugin/Dashboard/VisitStatistic.php
@@ -52,7 +52,7 @@ class VisitStatistic extends MatomoBase {
   /**
    * Lazy build callback.
    *
-   * @param \Drupal\dashboards\Plugin\DashboardBase $plugin
+   * @param DashboardBase $plugin
    *   Matomo base plugin.
    * @param array $configuration
    *   Configuration.
diff --git a/modules/dashboards_statistic/src/Plugin/Dashboard/MostReaded.php b/modules/dashboards_statistic/src/Plugin/Dashboard/MostReaded.php
index 974f17c..ae08413 100644
--- a/modules/dashboards_statistic/src/Plugin/Dashboard/MostReaded.php
+++ b/modules/dashboards_statistic/src/Plugin/Dashboard/MostReaded.php
@@ -26,21 +26,21 @@ class MostReaded extends DashboardBase {
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeInfo;
 
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
diff --git a/modules/dashboards_webform/src/Plugin/Dashboard/Submissions.php b/modules/dashboards_webform/src/Plugin/Dashboard/Submissions.php
index b9ce6f2..aaee93c 100644
--- a/modules/dashboards_webform/src/Plugin/Dashboard/Submissions.php
+++ b/modules/dashboards_webform/src/Plugin/Dashboard/Submissions.php
@@ -25,14 +25,14 @@ class Submissions extends DashboardBase {
   /**
    * Database.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Annotation/Dashboard.php b/src/Annotation/Dashboard.php
index 8dd7be2..22a8d41 100644
--- a/src/Annotation/Dashboard.php
+++ b/src/Annotation/Dashboard.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dashboards\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class Dashboard extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -33,7 +34,7 @@ class Dashboard extends Plugin {
   /**
    * Category of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/DashboardsPermissions.php b/src/DashboardsPermissions.php
index 7e0a4fc..d9dde13 100644
--- a/src/DashboardsPermissions.php
+++ b/src/DashboardsPermissions.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\dashboards;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -17,14 +19,14 @@ class DashboardsPermissions implements ContainerInjectionInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;
 
   /**
    * Constructs a DashboardsPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ -44,8 +46,8 @@ class DashboardsPermissions implements ContainerInjectionInterface {
    * @return array
    *   An array of permissions.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function permissions(): array {
     $permissions = [];
diff --git a/src/Entity/Dashboard.php b/src/Entity/Dashboard.php
index 804d3e0..a400f1b 100644
--- a/src/Entity/Dashboard.php
+++ b/src/Entity/Dashboard.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dashboards\Entity;
 
+use Drupal\user\UserDataInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\layout_builder\Section;
 use Drupal\Core\Session\AccountInterface;
@@ -98,7 +99,7 @@ class Dashboard extends ConfigEntityBase implements SectionListInterface {
   /**
    * Section.
    *
-   * @var \Drupal\layout_builder\Section[]
+   * @var Section[]
    */
   public $sections = [];
 
@@ -119,7 +120,7 @@ class Dashboard extends ConfigEntityBase implements SectionListInterface {
   /**
    * Gets the layout sections.
    *
-   * @return \Drupal\layout_builder\Section[]
+   * @return Section[]
    *   A sequentially and numerically keyed array of section objects.
    */
   public function getSections() {
@@ -132,7 +133,7 @@ class Dashboard extends ConfigEntityBase implements SectionListInterface {
    * Implementations of this method are expected to call array_values() to rekey
    * the list of sections.
    *
-   * @param \Drupal\layout_builder\Section[] $sections
+   * @param Section[] $sections
    *   An array of section objects.
    *
    * @return $this
@@ -179,7 +180,7 @@ class Dashboard extends ConfigEntityBase implements SectionListInterface {
    */
   public static function preDelete(EntityStorageInterface $storage, array $entities) {
     /**
-     * @var \Drupal\user\UserDataInterface
+     * @var UserDataInterface
      */
     $userData = \Drupal::service('user.data');
     foreach ($entities as $entity) {
@@ -190,7 +191,7 @@ class Dashboard extends ConfigEntityBase implements SectionListInterface {
   /**
    * Check if is overriden.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Account to check.
    *
    * @return bool
@@ -201,7 +202,7 @@ class Dashboard extends ConfigEntityBase implements SectionListInterface {
       $account = \Drupal::currentUser();
     }
     /**
-     * @var \Drupal\user\UserDataInterface
+     * @var UserDataInterface
      */
     $dataService = \Drupal::service('user.data');
     $data = $dataService->get('dashboards', $account->id(), $this->id());
diff --git a/src/Entity/DashboardListBuilder.php b/src/Entity/DashboardListBuilder.php
index 7fd5bee..b45cb40 100644
--- a/src/Entity/DashboardListBuilder.php
+++ b/src/Entity/DashboardListBuilder.php
@@ -65,7 +65,7 @@ class DashboardListBuilder extends DraggableListBuilder {
    */
   public function buildRow(EntityInterface $entity) {
     /**
-     * @var \Drupal\dashboards\Entity\Dashboard $entity
+     * @var Dashboard $entity
      */
     $row = [];
     $row['label'] = $entity->label();
diff --git a/src/Entity/DashboardStorage.php b/src/Entity/DashboardStorage.php
index c35114e..f9cd401 100644
--- a/src/Entity/DashboardStorage.php
+++ b/src/Entity/DashboardStorage.php
@@ -18,7 +18,7 @@ class DashboardStorage extends ConfigEntityStorage {
    */
   public function loadMultipleOrderedByWeight(?array $ids = NULL) {
     /**
-     * @var \Drupal\dashboards\Entity\Dashboard[]
+     * @var Dashboard[]
      */
     $entites = parent::loadMultiple($ids);
     usort($entites, function ($a, $b) {
@@ -35,7 +35,7 @@ class DashboardStorage extends ConfigEntityStorage {
 
     /**
      * @var integer $delta
-     * @var \Drupal\layout_builder\Section $section
+     * @var Section $section
      */
     foreach ($record['sections'] as $delta => $section) {
       $record['sections'][$delta] = $section->toArray();
diff --git a/src/Entity/DashboardViewBuilder.php b/src/Entity/DashboardViewBuilder.php
index 43f6426..0c5fcba 100644
--- a/src/Entity/DashboardViewBuilder.php
+++ b/src/Entity/DashboardViewBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dashboards\Entity;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Theme\Registry;
 use Drupal\Core\Entity\EntityInterface;
@@ -26,42 +27,42 @@ class DashboardViewBuilder extends EntityViewBuilder {
   /**
    * Dashboard settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * Section storage handler.
    *
-   * @var \Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface
+   * @var SectionStorageManagerInterface
    */
   protected $sectionStorageManager;
 
   /**
    * Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new EntityViewBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Theme\Registry $theme_registry
+   * @param Registry $theme_registry
    *   The theme registry.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\layout_builder\SectionStorage\SectionStorageManagerInterface $section_storage_manager
+   * @param SectionStorageManagerInterface $section_storage_manager
    *   Section storage handler.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Module config factory interface.
    */
   public function __construct(
@@ -105,7 +106,7 @@ class DashboardViewBuilder extends EntityViewBuilder {
   /**
    * View entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity to display.
    * @param string $view_mode
    *   View mode.
@@ -114,7 +115,7 @@ class DashboardViewBuilder extends EntityViewBuilder {
    */
   public function view(EntityInterface $entity, $view_mode = 'full', $langcode = NULL) {
     /**
-     * @var \Drupal\dashboards\Entity\Dashboard $entity
+     * @var Dashboard $entity
      */
     $build_list = $this->viewMultiple([$entity], $view_mode, $langcode);
 
diff --git a/src/Form/DashboardForm.php b/src/Form/DashboardForm.php
index 46ce03f..105c429 100644
--- a/src/Form/DashboardForm.php
+++ b/src/Form/DashboardForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dashboards\Form;
 
+use Drupal\dashboards\Entity\Dashboard;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -15,7 +16,7 @@ class DashboardForm extends EntityForm {
    */
   public function form(array $form, FormStateInterface $form_state) {
     /**
-     * @var \Drupal\dashboards\Entity\Dashboard
+     * @var Dashboard
      */
     $entity = $this->entity;
     $form['#tree'] = TRUE;
diff --git a/src/Form/DashboardLayoutBuilderForm.php b/src/Form/DashboardLayoutBuilderForm.php
index 346e579..4eccee8 100644
--- a/src/Form/DashboardLayoutBuilderForm.php
+++ b/src/Form/DashboardLayoutBuilderForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dashboards\Form;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\TrustedRedirectResponse;
@@ -26,35 +27,35 @@ class DashboardLayoutBuilderForm extends EntityForm {
   /**
    * Dashboard settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * LayoutBuiolder Tempstore.
    *
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;
 
   /**
    * Section storage.
    *
-   * @var \Drupal\layout_builder\SectionStorageInterface
+   * @var SectionStorageInterface
    */
   protected $sectionStorage;
 
   /**
    * User data interface.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;
 
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
@@ -126,11 +127,11 @@ class DashboardLayoutBuilderForm extends EntityForm {
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function resetToDefault(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\dashboards\Entity\Dashboard $dashboard */
+    /** @var Dashboard $dashboard */
     $dashboard = $this->sectionStorage->getContextValue(Dashboard::CONTEXT_TYPE);
 
     // Delete the userdata containing the dashboard override.
@@ -214,7 +215,7 @@ class DashboardLayoutBuilderForm extends EntityForm {
   /**
    * Retrieves the section storage object.
    *
-   * @return \Drupal\layout_builder\SectionStorageInterface
+   * @return SectionStorageInterface
    *   The section storage for the current form.
    */
   public function getSectionStorage() {
