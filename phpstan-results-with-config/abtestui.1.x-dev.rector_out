modules/contrib/abtestui/abtestui.install
modules/contrib/abtestui/abtestui.module
modules/contrib/abtestui/abtestui.post_update.php
modules/contrib/abtestui/modules/abtestui_google_analytics/abtestui_google_analytics.install
modules/contrib/abtestui/modules/abtestui_google_analytics/abtestui_google_analytics.module
modules/contrib/abtestui/modules/abtestui_google_analytics/src/Controller/ListController.php
modules/contrib/abtestui/modules/abtestui_google_analytics/src/Routing/RouteSubscriber.php
modules/contrib/abtestui/src/AbAjaxFormHelperTrait.php
modules/contrib/abtestui/src/AbStorageTrait.php
modules/contrib/abtestui/src/Controller/ListController.php
modules/contrib/abtestui/src/Form/ABTestDeleteForm.php
modules/contrib/abtestui/src/Form/ABTestForm.php
modules/contrib/abtestui/src/Service/AbjsConditionStorage.php
modules/contrib/abtestui/src/Service/AbjsExperienceStorage.php
modules/contrib/abtestui/src/Service/AbjsTestStorage.php
modules/contrib/abtestui/src/Service/RequestParser.php
modules/contrib/abtestui/src/Service/TestStorage.php
modules/contrib/abtestui/src/Service/VariationStorage.php

15 files with changes
=====================

1) modules/contrib/abtestui/src/Service/VariationStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\abtestui\Service;

+use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\Connection;

 /**
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $db;

@@ @@
   /**
    * VariationStorage constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
    */
   public function __construct(Connection $database) {
@@ @@
    * @param array $values
    *   Variation data.
    *
-   * @return \Drupal\Core\Database\StatementInterface|int|mixed|string|null
+   * @return StatementInterface|int|mixed|string|null
    *   The variation ID.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/abtestui/src/Service/TestStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\abtestui\Service;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $db;

@@ @@
   /**
    * Logger channel fo abtestui.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;

@@ @@
   /**
    * Variation storage.
    *
-   * @var \Drupal\abtestui\Service\VariationStorage
+   * @var VariationStorage
    */
   private $variationStorage;

@@ @@
   /**
    * A/B JS test storage.
    *
-   * @var \Drupal\abtestui\Service\AbjsTestStorage
+   * @var AbjsTestStorage
    */
   private $abjsTestStorage;

@@ @@
   /**
    * A/B JS condition storage.
    *
-   * @var \Drupal\abtestui\Service\AbjsConditionStorage
+   * @var AbjsConditionStorage
    */
   private $abjsConditionStorage;

@@ @@
   /**
    * A/B JS experience storage.
    *
-   * @var \Drupal\abtestui\Service\AbjsExperienceStorage
+   * @var AbjsExperienceStorage
    */
   private $abjsExperienceStorage;

@@ @@
   /**
    * TestStorage constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   DB Connection.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Logger channel factory.
-   * @param \Drupal\abtestui\Service\VariationStorage $variationStorage
+   * @param VariationStorage $variationStorage
    *   Variation storage.
-   * @param \Drupal\abtestui\Service\AbjsTestStorage $abjsTestStorage
+   * @param AbjsTestStorage $abjsTestStorage
    *   A/B JS test storage.
-   * @param \Drupal\abtestui\Service\AbjsConditionStorage $abjsConditionStorage
+   * @param AbjsConditionStorage $abjsConditionStorage
    *   A/B JS condition storage.
-   * @param \Drupal\abtestui\Service\AbjsExperienceStorage $abjsExperienceStorage
+   * @param AbjsExperienceStorage $abjsExperienceStorage
    *   A/B JS experience storage.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/abtestui/src/Service/RequestParser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\abtestui\Service;

+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use PDO;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $database;

@@ @@
   /**
    * The current request.
    *
-   * @var null|\Symfony\Component\HttpFoundation\Request
+   * @var null|Request
    */
   private $request;

@@ @@
   /**
    * The abjs config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $abjsConfig;

@@ @@
   /**
    * RequestParser constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory service.
    */
   public function __construct(
@@ @@
     $mapValues = json_encode($mapValues);

     // Get the gatherer JS code.
-    $cookieGathererScript = file_get_contents(drupal_get_path('module', 'abtestui') . '/js/gatherCookieData.js');
+    $cookieGathererScript = file_get_contents(\Drupal::service('extension.list.module')->getPath('abtestui') . '/js/gatherCookieData.js');
     // Replace the placeholders as needed.
     $cookieGathererScript = str_replace(
       ['{{ cookie_prefix }}', "'{{ test_replace_map_content }}'"],
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/abtestui/src/Service/AbjsTestStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\abtestui\Service;

+use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\Connection;

 /**
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $db;

@@ @@
   /**
    * AbjsTestStorage constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(Connection $database) {
@@ @@
    * @param array $values
    *   Test data.
    *
-   * @return \Drupal\Core\Database\StatementInterface|int|mixed|string|null
+   * @return StatementInterface|int|mixed|string|null
    *   The saved test ID.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/abtestui/src/Service/AbjsExperienceStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\abtestui\Service;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Database\StatementInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $db;

@@ @@
   /**
    * Logger channel for abtestui.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;

@@ @@
   /**
    * Drupal state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   private $state;

@@ @@
   /**
    * Time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   private $time;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   private $currentUser;

@@ @@
   /**
    * AbjsExperienceStorage constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   DB connection.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Logger channel factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
    */
   public function __construct(
@@ @@
   /**
    * Creates the control experience, or loads it.
    *
-   * @return bool|\Drupal\Core\Database\StatementInterface|int|string|null
+   * @return bool|StatementInterface|int|string|null
    *   The ID of the control experience.
    *
    * @throws \Exception
@@ @@
   /**
    * Creates the control experience.
    *
-   * @return \Drupal\Core\Database\StatementInterface|int|string|null
+   * @return StatementInterface|int|string|null
    *   The ID of the control.
    *
    * @throws \Exception
@@ @@
    * @param array $values
    *   An associative array of values.
    *
-   * @return \Drupal\Core\Database\StatementInterface|int|mixed|string|null
+   * @return StatementInterface|int|mixed|string|null
    *   The ID of the saved experience.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/abtestui/src/Service/AbjsConditionStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\abtestui\Service;

+use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\Connection;
 use PDO;
 use function array_keys;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $db;

@@ @@
   /**
    * AbjsConditionStorage constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
    */
   public function __construct(Connection $database) {
@@ @@
    * @param array $values
    *   Condition data.
    *
-   * @return \Drupal\Core\Database\StatementInterface|int|mixed|string|null
+   * @return StatementInterface|int|mixed|string|null
    *   The ID of the saved condition.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/abtestui/src/Form/ABTestForm.php:42

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param string|int|null $ab_test_id
    *   The test ID.
@@ @@
    * @return array
    *   The built form.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    */
   public function buildForm(array $form, FormStateInterface $form_state, $ab_test_id = NULL) {
     $test = $this->testStorage()->load($ab_test_id);
@@ @@
         'link' => [
           '#title' => $this->t('How does this tool work?'),
           '#type' => 'link',
-          '#url' => Url::fromUri('base:/' . drupal_get_path('module', 'abtestui') . '/help/ab-test-tool-help.html'),
+          '#url' => Url::fromUri('base:/' . \Drupal::service('extension.list.module')->getPath('abtestui') . '/help/ab-test-tool-help.html'),
           '#options' => [
             'attributes' => [
               'class' => [
@@ @@
     ];
     $form['variations_fieldgroup']['variations']['base']['name'] = [
       '#type' => 'item',
-      '#markup' => $this->t('Base URL') . ' <a href="/' . drupal_get_path('module', 'abtestui') . '/help/base-url.html" class="help-modal"><img width="20" height="20" src="/' . drupal_get_path('module', 'abtestui') . '/img/help.svg" alt="Help about the base URL"></a>',
+      '#markup' => $this->t('Base URL') . ' <a href="/' . \Drupal::service('extension.list.module')->getPath('abtestui') . '/help/base-url.html" class="help-modal"><img width="20" height="20" src="/' . \Drupal::service('extension.list.module')->getPath('abtestui') . '/img/help.svg" alt="Help about the base URL"></a>',
     ];
     $form['variations_fieldgroup']['variations']['base']['url'] = [
       '#type' => 'url',
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function ajaxRemoveVariation(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function ajaxAddVariation(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function cancelCallback(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function deleteCallback(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/abtestui/src/Form/ABTestDeleteForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * A/B Test storage.
    *
-   * @var \Drupal\abtestui\Service\TestStorage
+   * @var TestStorage
    */
   private $testStorage;

@@ @@
   /**
    * ABTestDeleteForm constructor.
    *
-   * @param \Drupal\abtestui\Service\TestStorage $testStorage
+   * @param TestStorage $testStorage
    *   A/B Test storage.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param string|int|null $ab_test_id
    *   The test ID.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/abtestui/src/Controller/ListController.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * THe custom abtestui test storage.
    *
-   * @var \Drupal\abtestui\Service\TestStorage
+   * @var TestStorage
    */
   protected $testStorage;

@@ @@
   /**
    * Renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * ListController constructor.
    *
-   * @param \Drupal\abtestui\Service\TestStorage $testStorage
+   * @param TestStorage $testStorage
    *   Test storage.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Renderer.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   Date formatter.
    */
   public function __construct(
@@ @@
     $this->testStorage = $testStorage;
     $this->renderer = $renderer;
     $this->dateFormatter = $dateFormatter;
-    $this->abtestuiPath = drupal_get_path('module', 'abtestui');
+    $this->abtestuiPath = \Drupal::service('extension.list.module')->getPath('abtestui');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/abtestui/src/AbStorageTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\abtestui;

+use Drupal\abtestui\Service\AbjsTestStorage;
+use Drupal\abtestui\Service\AbjsConditionStorage;
+use Drupal\abtestui\Service\AbjsExperienceStorage;
+use Drupal\abtestui\Service\VariationStorage;
+use Drupal\abtestui\Service\TestStorage;
 use Drupal;

 /**
@@ @@
   /**
    * A/B JS Test storage.
    *
-   * @var \Drupal\abtestui\Service\AbjsTestStorage
+   * @var AbjsTestStorage
    */
   protected $abjsTestStorage;

@@ @@
   /**
    * A/B JS Condition storage.
    *
-   * @var \Drupal\abtestui\Service\AbjsConditionStorage
+   * @var AbjsConditionStorage
    */
   protected $abjsConditionStorage;

@@ @@
   /**
    * A/B JS Experience storage.
    *
-   * @var \Drupal\abtestui\Service\AbjsExperienceStorage
+   * @var AbjsExperienceStorage
    */
   protected $abjsExperienceStorage;

@@ @@
   /**
    * Variation storage.
    *
-   * @var \Drupal\abtestui\Service\VariationStorage
+   * @var VariationStorage
    */
   protected $variationStorage;

@@ @@
   /**
    * Test storage.
    *
-   * @var \Drupal\abtestui\Service\TestStorage
+   * @var TestStorage
    */
   protected $testStorage;

@@ @@
   /**
    * A/B JS Test storage.
    *
-   * @return \Drupal\abtestui\Service\AbjsTestStorage
+   * @return AbjsTestStorage
    *   The storage service.
    */
   public function abjsTestStorage() {
@@ @@
   /**
    * A/B JS Condition storage.
    *
-   * @return \Drupal\abtestui\Service\AbjsConditionStorage
+   * @return AbjsConditionStorage
    *   The storage service.
    */
   public function abjsConditionStorage() {
@@ @@
   /**
    * A/B JS Experience storage.
    *
-   * @return \Drupal\abtestui\Service\AbjsExperienceStorage
+   * @return AbjsExperienceStorage
    *   The storage service.
    */
   public function abjsExperienceStorage() {
@@ @@
   /**
    * Variation storage.
    *
-   * @return \Drupal\abtestui\Service\VariationStorage
+   * @return VariationStorage
    *   The storage service.
    */
   public function variationStorage() {
@@ @@
   /**
    * Test storage.
    *
-   * @return \Drupal\abtestui\Service\TestStorage
+   * @return TestStorage
    *   The storage service.
    */
   public function testStorage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/abtestui/src/AbAjaxFormHelperTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\abtestui;

+use Drupal\Component\Datetime\TimeInterface;
+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal;

 /**
@@ @@
   /**
    * Time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Returns the time service.
    *
-   * @return \Drupal\Component\Datetime\TimeInterface
+   * @return TimeInterface
    *   The service.
    */
   public function time() {
@@ @@
   /**
    * Returns the current user.
    *
-   * @return \Drupal\Core\Session\AccountProxyInterface
+   * @return AccountProxyInterface
    *   The user.
    */
   public function currentUser() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/abtestui/modules/abtestui_google_analytics/abtestui_google_analytics.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\abtestui\Service\TestStorage;
 /**
  * @file
  * Module files.
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function abtestui_google_analytics_form_abtestui_test_alter(&$form, FormStateInterface $form_state, $form_id) {
-  $modulePath = drupal_get_path('module', 'abtestui_google_analytics');
+  $modulePath = \Drupal::service('extension.list.module')->getPath('abtestui_google_analytics');

   // Header.
   $configFactory = Drupal::configFactory();
@@ @@

   $analyticsUrl = NULL;
   if (!empty($form['tid']['#value'])) {
-    /** @var \Drupal\abtestui\Service\TestStorage $testStorage */
+    /** @var TestStorage $testStorage */
     $testStorage = Drupal::service('abtestui.test_storage');
     $test = $testStorage->load($form['tid']['#value']);
     $analyticsUrl = empty($test['analytics_url']) ? NULL : $test['analytics_url'];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


13) modules/contrib/abtestui/modules/abtestui_google_analytics/abtestui_google_analytics.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\ConfigFactoryInterface;
 /**
  * @file
  * Module install file.
  */
-
 /**
  * Implements hook_install().
  */
 function abtestui_google_analytics_install() {
   // Add custom dimension and the gatherer function to GA 'before' snippets.
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+  /** @var ConfigFactoryInterface $configFactory */
   $configFactory = Drupal::configFactory();

   $analyticsConfigs = $configFactory->listAll('google_analytics');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/abtestui/abtestui.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\abtestui\Service\RequestParser;
 /**
  * @file
  * Module file for abtestui.
@@ @@
 function abtestui_page_attachments(array &$attachments) {
   $attachments['#attached']['library'][] = 'abtestui/admin_design_always';

-  /** @var \Drupal\abtestui\Service\RequestParser $requestParser */
+  /** @var RequestParser $requestParser */
   $requestParser = Drupal::service('abtestui.request_parser');
   $cookieGathererScript = $requestParser->generateGathererScript();

@@ @@
   // @todo: Clean up.
   if ($form_id === 'abjs_test' && isset($form['tid'])) {
     $id = $form['tid']['#value'];
-    /** @var \Drupal\abtestui\Service\TestStorage $storage */
+    /** @var TestStorage $storage */
     $storage = Drupal::service('abtestui.test_storage');
     $test = $storage->load($id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


15) modules/contrib/abtestui/abtestui.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleInstallerInterface;
 /**
  * @file
  * Install file for the module.
@@ @@
     return;
   }

-  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $installer */
+  /** @var ModuleInstallerInterface $installer */
   $installer = Drupal::service('module_installer');
   $installer->install(['abtestui_google_analytics']);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 15 files have been changed by Rector                                      

