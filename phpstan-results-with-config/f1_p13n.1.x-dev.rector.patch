diff --git a/f1_p13n.views.inc b/f1_p13n.views.inc
index c721bd4..c6fe4ae 100644
--- a/f1_p13n.views.inc
+++ b/f1_p13n.views.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
 /**
  * @file
  * Contains Views hooks.
@@ -14,7 +15,7 @@ function f1_p13n_field_views_data(FieldStorageConfigInterface $field_storage) {
   $data = views_field_default_views_data($field_storage);
   $entity_manager = \Drupal::entityTypeManager();
   $entity_type_id = $field_storage->getTargetEntityTypeId();
-  /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+  /** @var DefaultTableMapping $table_mapping */
   $table_mapping = $entity_manager->getStorage($entity_type_id)->getTableMapping();
   foreach ($data as $table_name => $table_data) {
     // Add a relationship to the target entity type.
diff --git a/modules/f1_p13n_paragraph_reaction/src/Form/ParagraphReactionSettingsForm.php b/modules/f1_p13n_paragraph_reaction/src/Form/ParagraphReactionSettingsForm.php
index 08fe920..1864765 100644
--- a/modules/f1_p13n_paragraph_reaction/src/Form/ParagraphReactionSettingsForm.php
+++ b/modules/f1_p13n_paragraph_reaction/src/Form/ParagraphReactionSettingsForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\f1_p13n_paragraph_reaction\Form;
 
+use Drupal\f1_p13n_paragraph_reaction\ParagraphReactionService;
+use Drupal\f1_p13n\ExperiencePluginManager;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -19,14 +21,14 @@ class ParagraphReactionSettingsForm extends ConfigFormBase {
   /**
    * The Paragraph reaction service.
    *
-   * @var \Drupal\f1_p13n_paragraph_reaction\ParagraphReactionService
+   * @var ParagraphReactionService
    */
   protected $paragraphReactionService;
 
   /**
    * The reaction plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $reactionManager;
 
diff --git a/modules/f1_p13n_paragraph_reaction/src/ParagraphReactionService.php b/modules/f1_p13n_paragraph_reaction/src/ParagraphReactionService.php
index 13e638e..598f7f9 100644
--- a/modules/f1_p13n_paragraph_reaction/src/ParagraphReactionService.php
+++ b/modules/f1_p13n_paragraph_reaction/src/ParagraphReactionService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\f1_p13n_paragraph_reaction;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 
@@ -13,23 +14,23 @@ class ParagraphReactionService {
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * Configuration settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $configFactory;
 
   /**
    * Constructs new EntityViewDeriver.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct(EntityTypeBundleInfoInterface $entity_type_bundle_info, ConfigFactoryInterface $config_factory) {
diff --git a/modules/f1_p13n_paragraph_reaction/src/Plugin/f1_p13n/Reaction/ParagraphReaction.php b/modules/f1_p13n_paragraph_reaction/src/Plugin/f1_p13n/Reaction/ParagraphReaction.php
index ef08ea9..a66a34e 100644
--- a/modules/f1_p13n_paragraph_reaction/src/Plugin/f1_p13n/Reaction/ParagraphReaction.php
+++ b/modules/f1_p13n_paragraph_reaction/src/Plugin/f1_p13n/Reaction/ParagraphReaction.php
@@ -34,28 +34,28 @@ class ParagraphReaction extends ReactionPluginBase implements ContainerFactoryPl
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity form builder.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -66,15 +66,15 @@ class ParagraphReaction extends ReactionPluginBase implements ContainerFactoryPl
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(
@@ -97,7 +97,7 @@ class ParagraphReaction extends ReactionPluginBase implements ContainerFactoryPl
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
@@ -215,7 +215,7 @@ class ParagraphReaction extends ReactionPluginBase implements ContainerFactoryPl
    *
    * @param array $element
    *   The form element.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state for the entire form.
    * @param array $form
    *   The entire form.
diff --git a/src/Annotation/Condition.php b/src/Annotation/Condition.php
index 89c1fbe..0868ee7 100644
--- a/src/Annotation/Condition.php
+++ b/src/Annotation/Condition.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\f1_p13n\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -31,7 +32,7 @@ class Condition extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -40,7 +41,7 @@ class Condition extends Plugin {
   /**
    * The plugin description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -49,7 +50,7 @@ class Condition extends Plugin {
   /**
    * The category under which the condition is listed in the UI.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/Reaction.php b/src/Annotation/Reaction.php
index 8ee2039..d6ecf94 100644
--- a/src/Annotation/Reaction.php
+++ b/src/Annotation/Reaction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\f1_p13n\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -31,7 +32,7 @@ class Reaction extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -40,7 +41,7 @@ class Reaction extends Plugin {
   /**
    * The plugin description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -49,7 +50,7 @@ class Reaction extends Plugin {
   /**
    * The category under which the reaction is listed in the UI.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/PersonalizationContent.php b/src/Controller/PersonalizationContent.php
index 36bdbc0..fcd9357 100644
--- a/src/Controller/PersonalizationContent.php
+++ b/src/Controller/PersonalizationContent.php
@@ -15,14 +15,14 @@ class PersonalizationContent extends ControllerBase {
   /**
    * The render service.
    *
-   * @var Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructor for personalization content fulfillment.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The render service.
    */
   public function __construct(RendererInterface $renderer) {
@@ -44,7 +44,7 @@ class PersonalizationContent extends ControllerBase {
    * @param string $data
    *   The encoded string from client.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response.
    *
    * @throws \Exception
diff --git a/src/EntityViewsData.php b/src/EntityViewsData.php
index 5bb68f9..0a06008 100644
--- a/src/EntityViewsData.php
+++ b/src/EntityViewsData.php
@@ -35,7 +35,7 @@ class EntityViewsData extends DrupalEntityViewsData {
    *
    * @param array $data
    *   The views data.
-   * @param \Drupal\Core\Field\BaseFieldDefinition[] $fields
+   * @param BaseFieldDefinition[] $fields
    *   The entity reference fields.
    */
   protected function addReverseRelationships(array &$data, array $fields) {
diff --git a/src/Event/ExperienceEvent.php b/src/Event/ExperienceEvent.php
index 10d2f0b..d571e36 100644
--- a/src/Event/ExperienceEvent.php
+++ b/src/Event/ExperienceEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\f1_p13n\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\f1_p13n\Entity\Experience;
 
 /**
@@ -15,14 +15,14 @@ class ExperienceEvent extends Event {
   /**
    * The experience entity.
    *
-   * @var \Drupal\f1_p13n\Entity\Experience
+   * @var Experience
    */
   protected $experience;
 
   /**
    * Constructs a ExperienceEvent.
    *
-   * @param \Drupal\f1_p13n\Entity\Experience $experience
+   * @param Experience $experience
    *   The experience entity.
    */
   public function __construct(Experience $experience) {
@@ -32,7 +32,7 @@ class ExperienceEvent extends Event {
   /**
    * Returns the experience that is undergoing some event operation.
    *
-   * @return \Drupal\f1_p13n\Entity\Experience
+   * @return Experience
    *   The experience entity.
    */
   public function getExperience() {
diff --git a/src/EventSubscriber/ExperienceRuleSubscriber.php b/src/EventSubscriber/ExperienceRuleSubscriber.php
index 8f1d351..6f0a6be 100644
--- a/src/EventSubscriber/ExperienceRuleSubscriber.php
+++ b/src/EventSubscriber/ExperienceRuleSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\f1_p13n\EventSubscriber;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\f1_p13n\Event\ExperienceEvent;
 use Drupal\f1_p13n\Event\ExperienceEvents;
 use Drupal\f1_p13n\ExperiencePluginManager;
@@ -17,23 +18,23 @@ class ExperienceRuleSubscriber implements EventSubscriberInterface {
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $conditionManager;
 
   /**
    * The reaction plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $reactionManager;
 
   /**
    * Constructs a new ExperienceRuleSubscriber.
    *
-   * @param \Drupal\f1_p13n\ExperiencePluginManager $condition_manager
+   * @param ExperiencePluginManager $condition_manager
    *   The experience condition manager.
-   * @param \Drupal\f1_p13n\ExperiencePluginManager $reaction_manager
+   * @param ExperiencePluginManager $reaction_manager
    *   The experience reaction manager.
    */
   public function __construct(
@@ -56,10 +57,10 @@ class ExperienceRuleSubscriber implements EventSubscriberInterface {
   /**
    * Subscribe to the user login event dispatched.
    *
-   * @param \Drupal\f1_p13n\Event\ExperienceEvent $event
+   * @param ExperienceEvent $event
    *   The experience event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function onExperiencePresave(ExperienceEvent $event) {
     /* @var \Drupal\f1_p13n\Entity\Experience $experience. */
@@ -172,7 +173,7 @@ class ExperienceRuleSubscriber implements EventSubscriberInterface {
    * @param array $rule
    *   The id (plugin id) of the condition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @return array
    *   An associative array of objects for the rule's Condition and Reaction.
@@ -209,7 +210,7 @@ class ExperienceRuleSubscriber implements EventSubscriberInterface {
    * @param array $settings
    *   The settings of the condition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @return object|null
    *   The Condition created.
@@ -233,7 +234,7 @@ class ExperienceRuleSubscriber implements EventSubscriberInterface {
    * @param array $settings
    *   The settings of the condition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @return object|null
    *   The Reaction created.
@@ -259,7 +260,7 @@ class ExperienceRuleSubscriber implements EventSubscriberInterface {
    * @param object $context
    *   Context to pass to the event (such as a new version of the condition).
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function _conditionEvent($condition, $event, $context = NULL) {
     if (method_exists($condition, $event)) {
@@ -277,7 +278,7 @@ class ExperienceRuleSubscriber implements EventSubscriberInterface {
    * @param array $context
    *   Context to pass to the event (such as a new version of the reaction).
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function _reactionEvent($reaction, $event, $context = NULL) {
     if (method_exists($reaction, $event)) {
diff --git a/src/ExperiencePluginManager.php b/src/ExperiencePluginManager.php
index 915815d..6e57a1c 100644
--- a/src/ExperiencePluginManager.php
+++ b/src/ExperiencePluginManager.php
@@ -27,9 +27,9 @@ class ExperiencePluginManager extends DefaultPluginManager implements Categorizi
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct($type, \Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Form/CampaignForm.php b/src/Form/CampaignForm.php
index 390d265..773e340 100644
--- a/src/Form/CampaignForm.php
+++ b/src/Form/CampaignForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\f1_p13n\Form;
 
+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,7 +17,7 @@ class CampaignForm extends ContentEntityForm {
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
diff --git a/src/Form/ExperienceForm.php b/src/Form/ExperienceForm.php
index 6bb57ea..36d9f79 100644
--- a/src/Form/ExperienceForm.php
+++ b/src/Form/ExperienceForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\f1_p13n\Form;
 
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\f1_p13n\ExperiencePluginManager;
+use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Entity\ContentEntityForm;
@@ -25,28 +28,28 @@ class ExperienceForm extends ContentEntityForm {
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $conditionManager;
 
   /**
    * The reaction plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $reactionManager;
 
   /**
    * The UUID service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuidService;
 
@@ -135,7 +138,7 @@ class ExperienceForm extends ContentEntityForm {
    *
    * @param array $form
    *   The form of the entity.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    */
   public function addRuleElement(array &$form, FormStateInterface $form_state) {
@@ -170,7 +173,7 @@ class ExperienceForm extends ContentEntityForm {
   /**
    * Helper method to set rule form fields.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    * @param int $delta
    *   The delta of the rule.
@@ -309,7 +312,7 @@ class ExperienceForm extends ContentEntityForm {
    *   The id of the condition or reaction.
    * @param array $settings
    *   The plugin configuration values.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    *
    * @return array
@@ -332,7 +335,7 @@ class ExperienceForm extends ContentEntityForm {
    *   The rule delta.
    * @param array $rule
    *   The rule being set.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    *
    * @return array
@@ -375,7 +378,7 @@ class ExperienceForm extends ContentEntityForm {
    *
    * @param array $form
    *   The form of the entity.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    *
    * @todo Use relateive parents.
@@ -400,7 +403,7 @@ class ExperienceForm extends ContentEntityForm {
    *
    * @param array $form
    *   The form of the entity.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    */
   public function updateRulesAjax(array &$form, FormStateInterface $form_state) {
@@ -428,7 +431,7 @@ class ExperienceForm extends ContentEntityForm {
   /**
    * Helper to set rules values on entity.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent form.
    * @param array $rules
    *   The current rules input values.
@@ -514,7 +517,7 @@ class ExperienceForm extends ContentEntityForm {
    *   The rule position.
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent.
    *
    * @todo Replace delta with rule uuid.
@@ -551,7 +554,7 @@ class ExperienceForm extends ContentEntityForm {
    *   The configuration settings for the plugin.
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the parent.
    *
    * @todo Use plugin instance info as array instead of passing delta, id,
diff --git a/src/Form/PersonalizationSettingsForm.php b/src/Form/PersonalizationSettingsForm.php
index 716791e..71388ba 100644
--- a/src/Form/PersonalizationSettingsForm.php
+++ b/src/Form/PersonalizationSettingsForm.php
@@ -17,14 +17,14 @@ class PersonalizationSettingsForm extends ConfigFormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * PersonalizationSettingsForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/Field/FieldFormatter/ExperienceDefaultFormatter.php b/src/Plugin/Field/FieldFormatter/ExperienceDefaultFormatter.php
index f274ee6..f78ed28 100644
--- a/src/Plugin/Field/FieldFormatter/ExperienceDefaultFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/ExperienceDefaultFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\f1_p13n\Plugin\Field\FieldFormatter;
 
+use Drupal\f1_p13n\ExperiencePluginManager;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -25,14 +26,14 @@ class ExperienceDefaultFormatter extends FormatterBase {
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $conditionManager;
 
   /**
    * The reaction plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $reactionManager;
 
diff --git a/src/Plugin/Field/FieldFormatter/RulesDefaultFormatter.php b/src/Plugin/Field/FieldFormatter/RulesDefaultFormatter.php
index 0eabf4f..a26da72 100644
--- a/src/Plugin/Field/FieldFormatter/RulesDefaultFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/RulesDefaultFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\f1_p13n\Plugin\Field\FieldFormatter;
 
+use Drupal\f1_p13n\ExperiencePluginManager;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -25,14 +26,14 @@ class RulesDefaultFormatter extends FormatterBase {
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $conditionManager;
 
   /**
    * The reaction plugin manager.
    *
-   * @var \Drupal\f1_p13n\ExperiencePluginManager
+   * @var ExperiencePluginManager
    */
   protected $reactionManager;
 
diff --git a/src/Plugin/f1_p13n/Condition/ContentTypeCondition.php b/src/Plugin/f1_p13n/Condition/ContentTypeCondition.php
index efd4c66..13dd9c4 100644
--- a/src/Plugin/f1_p13n/Condition/ContentTypeCondition.php
+++ b/src/Plugin/f1_p13n/Condition/ContentTypeCondition.php
@@ -23,7 +23,7 @@ class ContentTypeCondition extends ConditionPluginBase implements ContainerFacto
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -34,7 +34,7 @@ class ContentTypeCondition extends ConditionPluginBase implements ContainerFacto
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ -43,7 +43,7 @@ class ContentTypeCondition extends ConditionPluginBase implements ContainerFacto
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
diff --git a/src/Plugin/f1_p13n/Condition/SectionCondition.php b/src/Plugin/f1_p13n/Condition/SectionCondition.php
index b74decf..cd1cc00 100644
--- a/src/Plugin/f1_p13n/Condition/SectionCondition.php
+++ b/src/Plugin/f1_p13n/Condition/SectionCondition.php
@@ -23,7 +23,7 @@ class SectionCondition extends ConditionPluginBase implements ContainerFactoryPl
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -34,7 +34,7 @@ class SectionCondition extends ConditionPluginBase implements ContainerFactoryPl
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ -43,7 +43,7 @@ class SectionCondition extends ConditionPluginBase implements ContainerFactoryPl
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
diff --git a/src/Plugin/f1_p13n/Condition/TaxonomyCondition.php b/src/Plugin/f1_p13n/Condition/TaxonomyCondition.php
index 2dc8040..ba9c0d0 100644
--- a/src/Plugin/f1_p13n/Condition/TaxonomyCondition.php
+++ b/src/Plugin/f1_p13n/Condition/TaxonomyCondition.php
@@ -24,14 +24,14 @@ class TaxonomyCondition extends ConditionPluginBase implements ContainerFactoryP
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The related content service.
    *
-   * @var \Drupal\f1_p13n\TokenizationService
+   * @var TokenizationService
    */
   protected $tokenizationService;
 
@@ -42,11 +42,10 @@ class TaxonomyCondition extends ConditionPluginBase implements ContainerFactoryP
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param \Drupal\f1_p13n\Services\TokenizationService $tokenization_service
    *   The Related Content service.
-   *
    */
   public function __construct(
     array $configuration,
@@ -62,7 +61,7 @@ class TaxonomyCondition extends ConditionPluginBase implements ContainerFactoryP
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
diff --git a/src/Plugin/f1_p13n/Reaction/FilteredView.php b/src/Plugin/f1_p13n/Reaction/FilteredView.php
index 406a1da..283117d 100644
--- a/src/Plugin/f1_p13n/Reaction/FilteredView.php
+++ b/src/Plugin/f1_p13n/Reaction/FilteredView.php
@@ -56,7 +56,7 @@ class FilteredView extends ReactionPluginBase implements ContainerFactoryPluginI
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
diff --git a/src/Plugin/f1_p13n/Reaction/SimpleText.php b/src/Plugin/f1_p13n/Reaction/SimpleText.php
index c044f10..66a712d 100644
--- a/src/Plugin/f1_p13n/Reaction/SimpleText.php
+++ b/src/Plugin/f1_p13n/Reaction/SimpleText.php
@@ -23,14 +23,14 @@ class SimpleText extends ReactionPluginBase implements ContainerFactoryPluginInt
   /**
    * The related content service.
    *
-   * @var \Drupal\f1_p13n\TokenizationService
+   * @var TokenizationService
    */
   protected $tokenizationService;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -43,9 +43,8 @@ class SimpleText extends ReactionPluginBase implements ContainerFactoryPluginInt
    *   The plugin definition.
    * @param \Drupal\f1_p13n\Services\TokenizationService $tokenization_service
    *   The Related Content service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   *
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TokenizationService $tokenization_service, RendererInterface $renderer) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -55,7 +54,7 @@ class SimpleText extends ReactionPluginBase implements ContainerFactoryPluginInt
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
@@ -191,7 +190,7 @@ EOD,
    *
    * @param array $element
    *   The form element.
-   * @param Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state for the entire form.
    * @param array $form
    *   The entire form.
diff --git a/src/Plugin/metatag/Tag/Dimension.php b/src/Plugin/metatag/Tag/Dimension.php
index 4b3957a..c51d63d 100644
--- a/src/Plugin/metatag/Tag/Dimension.php
+++ b/src/Plugin/metatag/Tag/Dimension.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\f1_p13n\Plugin\metatag\Tag;
 
+use Drupal\Core\Menu\MenuActiveTrail;
+use Drupal\Core\Entity\EntityRepository;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Menu\MenuActiveTrailInterface;
@@ -31,35 +33,35 @@ class Dimension extends MetaPropertyBase implements ContainerFactoryPluginInterf
   /**
    * The menu active trail service.
    *
-   * @var \Drupal\Core\Menu\MenuActiveTrail
+   * @var MenuActiveTrail
    */
   protected $menuActiveTrail;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The RDFa service.
    *
-   * @var \Drupal\f1_p13n\RdfaService
+   * @var RdfaService
    */
   protected $rdfaService;
 
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepository
+   * @var EntityRepository
    */
   protected $entityRepository;
 
@@ -72,15 +74,15 @@ class Dimension extends MetaPropertyBase implements ContainerFactoryPluginInterf
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\f1_p13n\RdfaService $rdfa_service
+   * @param RdfaService $rdfa_service
    *   The RDFa service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The routeMatch service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Menu\MenuActiveTrailInterface $menu_active_trail
+   * @param MenuActiveTrailInterface $menu_active_trail
    *   The menu active trail service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
    */
   public function __construct(
diff --git a/src/RdfaService.php b/src/RdfaService.php
index 252ae1c..d12759d 100644
--- a/src/RdfaService.php
+++ b/src/RdfaService.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\f1_p13n;
 
+use Drupal\Core\Menu\MenuActiveTrail;
+use Drupal\Core\Entity\EntityRepository;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Config\Config;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -21,61 +26,61 @@ class RdfaService {
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
 
   /**
    * The menu active trail service.
    *
-   * @var \Drupal\Core\Menu\MenuActiveTrail
+   * @var MenuActiveTrail
    */
   protected $menuActiveTrail;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepository
+   * @var EntityRepository
    */
   protected $entityRepository;
 
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $vocabStorage;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Dimensions settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $configFactory;
 
   /**
    * Constructs a new RdfaService object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Menu\MenuActiveTrailInterface $menu_active_trail
+   * @param MenuActiveTrailInterface $menu_active_trail
    *   The menu active trail service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The config factory service.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(
@@ -179,7 +184,7 @@ class RdfaService {
           // taxonomy terms.
           $taxonomy_terms = $context_entity->get($field)->referencedEntities();
 
-          /** @var \Drupal\taxonomy\TermInterface $taxonomy_term */
+          /** @var TermInterface $taxonomy_term */
           foreach ($taxonomy_terms as $taxonomy_term) {
             $bundle = $taxonomy_term->bundle();
             // Check to make sure the bundle of the found term is one that we're
diff --git a/src/TokenizationService.php b/src/TokenizationService.php
index 019c19c..f1a06c9 100644
--- a/src/TokenizationService.php
+++ b/src/TokenizationService.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\f1_p13n;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -16,14 +18,14 @@ class TokenizationService {
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $vocabStorage;
 
   /**
    * Dimensions settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $configFactory;
 
@@ -44,9 +46,9 @@ class TokenizationService {
   /**
    * Constructs a new TokenizationService object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration service interface.
    */
   public function __construct(
