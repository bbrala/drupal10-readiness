diff --git a/prometheus_metrics.info.yml b/prometheus_metrics.info.yml
index e0c3742..b9e38b8 100644
--- a/prometheus_metrics.info.yml
+++ b/prometheus_metrics.info.yml
@@ -1,8 +1,7 @@
 name: 'Prometheus Metrics'
 type: module
 description: 'Provide metrics to Prometheus service'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'Statistics'
 configure: prometheus_metrics.configuration_form
 
diff --git a/prometheus_metrics.module b/prometheus_metrics.module
index 8acb7a8..b48180f 100644
--- a/prometheus_metrics.module
+++ b/prometheus_metrics.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 /**
  * @file
  * Implements necessary hooks to trigger events for metrics.
@@ -14,7 +15,7 @@ use Drupal\prometheus_metrics\EventSubscriber\PrometheusEntityCRUDSubscriber;
  */
 function prometheus_dispatch_event(string $eventName, EntityInterface $entity) {
   /**
-   * @var Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $event_dispatcher
+   * @var ContainerAwareEventDispatcher $event_dispatcher
    */
   $eventDispatcher = \Drupal::service('event_dispatcher');
   $event = new EntityCRUDEvent($entity);
@@ -24,7 +25,7 @@ function prometheus_dispatch_event(string $eventName, EntityInterface $entity) {
 /**
  * Implements hook_ENTITY_TYPE_insert.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Entity being inserted.
  */
 function prometheus_metrics_entity_insert(EntityInterface $entity) {
@@ -34,7 +35,7 @@ function prometheus_metrics_entity_insert(EntityInterface $entity) {
 /**
  * Implements hook_ENTITY_TYPE_update.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Entity being updated.
  */
 function prometheus_metrics_entity_update(EntityInterface $entity) {
@@ -44,7 +45,7 @@ function prometheus_metrics_entity_update(EntityInterface $entity) {
 /**
  * Implements hook_ENTITY_TYPE_delete.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Entity being deleted.
  */
 function prometheus_metrics_entity_delete(EntityInterface $entity) {
diff --git a/src/Bridge/PromPHPClientBridge.php b/src/Bridge/PromPHPClientBridge.php
index c552c1a..1299445 100644
--- a/src/Bridge/PromPHPClientBridge.php
+++ b/src/Bridge/PromPHPClientBridge.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\prometheus_metrics\Bridge;
 
+use Prometheus\Storage\Adapter;
 use Drupal\Core\Site\Settings;
 use Prometheus\CollectorRegistry;
 use Prometheus\Exception\StorageException;
@@ -17,21 +18,21 @@ class PromPHPClientBridge implements PrometheusMetricsInterface {
   /**
    * Handles storing/ retrieving metrics.
    *
-   * @var \Prometheus\Storage\Adapter
+   * @var Adapter
    */
   private $storageAdapter;
 
   /**
    * The registry populated from storage.
    *
-   * @var \Prometheus\CollectorRegistry
+   * @var CollectorRegistry
    */
   private $collectorRegistry;
 
   /**
    * The renderer used to expose metrics.
    *
-   * @var \Prometheus\RenderTextFormat
+   * @var RenderTextFormat
    */
   private $renderer;
 
@@ -71,7 +72,7 @@ class PromPHPClientBridge implements PrometheusMetricsInterface {
   /**
    * Returns the renderer.
    *
-   * @return \Prometheus\RenderTextFormat
+   * @return RenderTextFormat
    *   Returns a Text format renderer.
    */
   private function getRenderer(): RenderTextFormat {
@@ -81,7 +82,7 @@ class PromPHPClientBridge implements PrometheusMetricsInterface {
   /**
    * Returns the registry.
    *
-   * @return \Prometheus\CollectorRegistry
+   * @return CollectorRegistry
    *   Returns the registry.
    */
   private function getCollectorRegistry(): CollectorRegistry {
diff --git a/src/Controller/MetricsController.php b/src/Controller/MetricsController.php
index ff6870b..44b8da0 100644
--- a/src/Controller/MetricsController.php
+++ b/src/Controller/MetricsController.php
@@ -16,7 +16,7 @@ class MetricsController extends ControllerBase {
   /**
    * Interface to prometheus metrics service.
    *
-   * @var \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface
+   * @var PrometheusMetricsInterface
    */
   private PrometheusMetricsInterface $prometheusMetrics;
 
@@ -30,9 +30,9 @@ class MetricsController extends ControllerBase {
   /**
    * Constructs MetricsController object.
    *
-   * @param \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface $prometheusMetrics
+   * @param PrometheusMetricsInterface $prometheusMetrics
    *   Interface to prometheus metrics service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Used to access prometheus metrics config.
    */
   public function __construct(PrometheusMetricsInterface $prometheusMetrics, ConfigFactoryInterface $configFactory) {
diff --git a/src/EventSubscriber/PrometheusEntityCRUDSubscriber.php b/src/EventSubscriber/PrometheusEntityCRUDSubscriber.php
index 0edfa66..1145874 100644
--- a/src/EventSubscriber/PrometheusEntityCRUDSubscriber.php
+++ b/src/EventSubscriber/PrometheusEntityCRUDSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\prometheus_metrics\EventSubscriber;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface;
 use Drupal\prometheus_metrics\Events\EntityCRUDEvent;
@@ -20,14 +21,14 @@ class PrometheusEntityCRUDSubscriber implements EventSubscriberInterface {
   /**
    * The prometheus metrics service.
    *
-   * @var \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface
+   * @var PrometheusMetricsInterface
    */
   private $prometheusMetrics;
 
   /**
    * Prometheus metrics config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;
 
@@ -41,9 +42,9 @@ class PrometheusEntityCRUDSubscriber implements EventSubscriberInterface {
   /**
    * Contructs the CRUD event handler.
    *
-   * @param \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface $prometheusMetrics
+   * @param PrometheusMetricsInterface $prometheusMetrics
    *   The prometheus metrics service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Used to access prometheus metrics configuration.
    */
   public function __construct(
@@ -69,7 +70,7 @@ class PrometheusEntityCRUDSubscriber implements EventSubscriberInterface {
   /**
    * On insert create/ update metrics.
    *
-   * @param \Drupal\prometheus_metrics\Events\EntityCRUDEvent $event
+   * @param EntityCRUDEvent $event
    *   The entity crud event.
    */
   public function onEntityInsert(EntityCRUDEvent $event) {
@@ -87,7 +88,7 @@ class PrometheusEntityCRUDSubscriber implements EventSubscriberInterface {
   /**
    * On update create/ update metrics.
    *
-   * @param \Drupal\prometheus_metrics\Events\EntityCRUDEvent $event
+   * @param EntityCRUDEvent $event
    *   The entity crud event.
    */
   public function onEntityUpdate(EntityCRUDEvent $event) {
@@ -105,7 +106,7 @@ class PrometheusEntityCRUDSubscriber implements EventSubscriberInterface {
   /**
    * On delete create/ update metrics.
    *
-   * @param \Drupal\prometheus_metrics\Events\EntityCRUDEvent $event
+   * @param EntityCRUDEvent $event
    *   The entity crud event.
    */
   public function onEntityDelete(EntityCRUDEvent $event) {
diff --git a/src/EventSubscriber/PrometheusRequestSubscriber.php b/src/EventSubscriber/PrometheusRequestSubscriber.php
index f891ba9..658c3e2 100644
--- a/src/EventSubscriber/PrometheusRequestSubscriber.php
+++ b/src/EventSubscriber/PrometheusRequestSubscriber.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\prometheus_metrics\EventSubscriber;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
 use Psr\Log\LoggerInterface;
 use Drupal\Component\Utility\Timer;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -10,8 +13,6 @@ use Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -24,21 +25,21 @@ class PrometheusRequestSubscriber implements EventSubscriberInterface {
   /**
    * Used to retrieve route details.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;
 
   /**
    * The prometheus metrics service.
    *
-   * @var \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface
+   * @var PrometheusMetricsInterface
    */
   private $prometheusMetrics;
 
   /**
    * Used to access Prometheus Metrics config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;
 
@@ -52,20 +53,20 @@ class PrometheusRequestSubscriber implements EventSubscriberInterface {
   /**
    * Used to log messages.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * PrometheusRequestSubscriber constructor.
    *
-   * @param \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface $prometheusMetrics
+   * @param PrometheusMetricsInterface $prometheusMetrics
    *   The Prometheus Metrics service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   Used to retrieve route details.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger service.
    */
   public function __construct(
@@ -94,10 +95,10 @@ class PrometheusRequestSubscriber implements EventSubscriberInterface {
   /**
    * Start timer for the request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The start of request event.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     Timer::start(PrometheusDefaults::TIMER_NAME);
   }
 
@@ -107,10 +108,10 @@ class PrometheusRequestSubscriber implements EventSubscriberInterface {
    * Stores a histogram timer and counter for the request
    * by method, route and status.
    *
-   * @param \Symfony\Component\HttpKernel\Event\PostResponseEvent $event
+   * @param TerminateEvent $event
    *   The event.
    */
-  public function onTerminate(PostResponseEvent $event) {
+  public function onTerminate(TerminateEvent $event) {
     if (PHP_SAPI === 'cli') {
       // In CLI context there is no request to trace
       return;
@@ -163,7 +164,7 @@ class PrometheusRequestSubscriber implements EventSubscriberInterface {
   /**
    * Extracts the route name from the request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return string|null
@@ -182,7 +183,7 @@ class PrometheusRequestSubscriber implements EventSubscriberInterface {
   /**
    * Flattens Response Status codes into 4 strings 2xx - 5xx.
    *
-   * @param \Symfony\Component\HttpFoundation\Response $response
+   * @param Response $response
    *   The response object.
    *
    * @return int|string
diff --git a/src/Events/EntityCRUDEvent.php b/src/Events/EntityCRUDEvent.php
index 59f1b2d..4d90e7c 100644
--- a/src/Events/EntityCRUDEvent.php
+++ b/src/Events/EntityCRUDEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\prometheus_metrics\Events;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Entity\EntityInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Stores details about the event.
@@ -14,7 +14,7 @@ class EntityCRUDEvent extends Event {
    *
    * @todo// currently no value in having this. Remove/ use in logging?
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   private $entity;
 
@@ -37,7 +37,7 @@ class EntityCRUDEvent extends Event {
   /**
    * Creates the event entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being affected.
    */
   public function __construct(EntityInterface $entity) {
diff --git a/src/Form/ConfirmResetForm.php b/src/Form/ConfirmResetForm.php
index a2b87b0..9c07f6e 100644
--- a/src/Form/ConfirmResetForm.php
+++ b/src/Form/ConfirmResetForm.php
@@ -16,14 +16,14 @@ class ConfirmResetForm extends ConfirmFormBase {
   /**
    * The prometheus metrics service.
    *
-   * @var \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface
+   * @var PrometheusMetricsInterface
    */
   private PrometheusMetricsInterface $prometheusMetrics;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\prometheus_metrics\Bridge\PrometheusMetricsInterface $prometheusMetrics
+   * @param PrometheusMetricsInterface $prometheusMetrics
    *   The prometheus metrics service.
    */
   public function __construct(PrometheusMetricsInterface $prometheusMetrics) {
@@ -65,7 +65,7 @@ class ConfirmResetForm extends ConfirmFormBase {
    *
    * @param array $form
    *   The confirm reset form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   State of confirm reset form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/MetricsConfigurationForm.php b/src/Form/MetricsConfigurationForm.php
index 262b741..4c61a8b 100644
--- a/src/Form/MetricsConfigurationForm.php
+++ b/src/Form/MetricsConfigurationForm.php
@@ -18,16 +18,16 @@ class MetricsConfigurationForm extends ConfigFormBase {
   /**
    * Used to rebuild route if route name provided.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   private $routeBuilder;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $routeBuilder
+   * @param RouteBuilderInterface $routeBuilder
    *   Route builder service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteBuilderInterface $routeBuilder) {
diff --git a/src/Routing/MetricsRoutes.php b/src/Routing/MetricsRoutes.php
index daf86f3..775c953 100644
--- a/src/Routing/MetricsRoutes.php
+++ b/src/Routing/MetricsRoutes.php
@@ -17,7 +17,7 @@ class MetricsRoutes implements ContainerInjectionInterface {
   /**
    * Used to retrieve Prometheus Metrics config.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;
 
@@ -31,7 +31,7 @@ class MetricsRoutes implements ContainerInjectionInterface {
   /**
    * MetricsRoutes constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Used retrieve Prometheus Metrics config.
    */
   public function __construct(ConfigFactoryInterface $configFactory) {
@@ -45,7 +45,7 @@ class MetricsRoutes implements ContainerInjectionInterface {
    *
    * Defaults to /metrics.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   Config service.
    */
   private function setMetricsRoutePath(Config $config):void {
diff --git a/tests/Controller/MetricsControllerTest.php b/tests/Controller/MetricsControllerTest.php
index e68fd8d..ba79b0c 100644
--- a/tests/Controller/MetricsControllerTest.php
+++ b/tests/Controller/MetricsControllerTest.php
@@ -24,7 +24,7 @@ class MetricsControllerTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
   }
 
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index c2a646a..efc7524 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\prometheus_metrics\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,14 +23,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
