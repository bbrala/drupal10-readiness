diff --git a/composer.json b/composer.json
index 3e9c848..4541e14 100644
--- a/composer.json
+++ b/composer.json
@@ -7,7 +7,7 @@
         "drupal/key": "^1.0"
     },
     "require": {
-        "drupal/core": "^8.7.7 || ^9"
+        "drupal/core": "^9.3 || ^10"
     },
     "extra": {
         "branch-alias": {
diff --git a/shield.info.yml b/shield.info.yml
index e571a95..8366e5d 100644
--- a/shield.info.yml
+++ b/shield.info.yml
@@ -3,7 +3,7 @@ description: 'Creates a general shield for the site.'
 package: 'Administration'
 
 type: module
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.3 || ^10
 dependencies:
   - drupal:path_alias
 
diff --git a/src/EventSubscriber/ShieldSubscriber.php b/src/EventSubscriber/ShieldSubscriber.php
index d35f467..bd279fb 100644
--- a/src/EventSubscriber/ShieldSubscriber.php
+++ b/src/EventSubscriber/ShieldSubscriber.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\shield\EventSubscriber;
 
+use Drupal\Core\Config\Config;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Cache\CacheableResponseInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -16,14 +17,14 @@ class ShieldSubscriber implements EventSubscriberInterface {
   /**
    * The shield.settings configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * Constructs a new event listener.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ -40,10 +41,10 @@ class ShieldSubscriber implements EventSubscriberInterface {
   /**
    * Add shield header and cache tag.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event.
    */
-  public function onResponse(FilterResponseEvent $event) {
+  public function onResponse(ResponseEvent $event) {
     $response = $event->getResponse();
 
     // If configured, add the debug header calculated in ShieldMiddleware.
diff --git a/src/Form/ShieldSettingsForm.php b/src/Form/ShieldSettingsForm.php
index 8b47d98..8e067e7 100644
--- a/src/Form/ShieldSettingsForm.php
+++ b/src/Form/ShieldSettingsForm.php
@@ -19,7 +19,7 @@ class ShieldSettingsForm extends ConfigFormBase {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -33,9 +33,9 @@ class ShieldSettingsForm extends ConfigFormBase {
   /**
    * ShieldSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    * @param \Drupal\key\Plugin\KeyPluginManager|null $keyTypeManager
    *   The key plugin manager.
diff --git a/src/ShieldMiddleware.php b/src/ShieldMiddleware.php
index 3b0f3bf..0b0a48f 100644
--- a/src/ShieldMiddleware.php
+++ b/src/ShieldMiddleware.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\shield;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\basic_auth\Authentication\Provider\BasicAuth;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -29,77 +31,77 @@ class ShieldMiddleware implements HttpKernelInterface {
   /**
    * The decorated kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The EntityTypeManager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
 
   /**
    * The path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $pathAliasManager;
 
   /**
    * Language Manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Symfony\Component\HttpFoundation\RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Constructs a ShieldMiddleware object.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The decorated kernel.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager service.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher service.
-   * @param \Drupal\path_alias\AliasManagerInterface $path_alias_manager
+   * @param AliasManagerInterface $path_alias_manager
    *   The path alias manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language Manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack.
    */
   public function __construct(HttpKernelInterface $http_kernel,
@@ -185,7 +187,7 @@ class ShieldMiddleware implements HttpKernelInterface {
       case 'key':
         $user = $config->get('credentials.key.user');
 
-        /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+        /** @var EntityStorageInterface $storage */
         $storage = $this->entityTypeManager->getStorage('key');
         /** @var \Drupal\key\KeyInterface $pass_key */
         $pass_key = $storage->load($config->get('credentials.key.pass_key'));
@@ -195,7 +197,7 @@ class ShieldMiddleware implements HttpKernelInterface {
         break;
 
       case 'multikey':
-        /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
+        /** @var EntityStorageInterface $storage */
         $storage = $this->entityTypeManager->getStorage('key');
         /** @var \Drupal\key\KeyInterface $user_pass_key */
         $user_pass_key = $storage->load($config->get('credentials.multikey.user_pass_key'));
@@ -239,14 +241,14 @@ class ShieldMiddleware implements HttpKernelInterface {
   /**
    * Forward the request to the normal Kernel for processing.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param int $type
    *   The type of the request.
    * @param bool $catch
    *   Whether to catch exceptions or not.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A Response instance.
    *
    * @throws \Exception
@@ -268,9 +270,9 @@ class ShieldMiddleware implements HttpKernelInterface {
   /**
    * Checks if the current path should be allowed to bypass shield.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The global request object.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The current Shield config.
    *
    * @return bool
@@ -323,7 +325,7 @@ class ShieldMiddleware implements HttpKernelInterface {
    *
    * Call this if basic_auth is enabled.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request object on which headers will be modified.
    */
   private function basicAuthRequestAuthenticate(Request $request) {
@@ -332,7 +334,7 @@ class ShieldMiddleware implements HttpKernelInterface {
       // We need to push the current request to the request stack because
       // basic_auth uses a flood functionality which needs the client IP.
       $this->requestStack->push($request);
-      /** @var \Drupal\basic_auth\Authentication\Provider\BasicAuth $basicAuthService */
+      /** @var BasicAuth $basicAuthService */
       $basicAuthService = \Drupal::service('basic_auth.authentication.basic_auth');
       if ($basicAuthService->authenticate($request)) {
         // Reset request stack, as we don't need it anymore.
diff --git a/tests/src/Functional/ShieldTest.php b/tests/src/Functional/ShieldTest.php
index 7e15226..1845915 100644
--- a/tests/src/Functional/ShieldTest.php
+++ b/tests/src/Functional/ShieldTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\shield\Functional;
 
+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Exception\ResponseTextException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\key\Entity\Key;
 use Drupal\Tests\BrowserTestBase;
 
@@ -50,7 +53,7 @@ class ShieldTest extends BrowserTestBase {
       'key_type_settings' => [],
       'key_provider' => 'file',
       'key_provider_settings' => [
-        'file_location' => drupal_get_path('module', 'shield') . '/tests/files/shield_test.key',
+        'file_location' => \Drupal::service('extension.list.module')->getPath('shield') . '/tests/files/shield_test.key',
         'strip_line_breaks' => FALSE,
       ],
     ])->save();
@@ -59,7 +62,7 @@ class ShieldTest extends BrowserTestBase {
   /**
    * Validate debug_header config adds X-Shield-Status header.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testShieldHeader() {
     // Assert the response get the debug header.
@@ -89,7 +92,7 @@ class ShieldTest extends BrowserTestBase {
   /**
    * Validate shield_enable config display or not the http auth prompt.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testShieldEnable() {
     // Assert we are not presented with a http auth prompt.
@@ -109,7 +112,7 @@ class ShieldTest extends BrowserTestBase {
   /**
    * Validate the authentication message reflects.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testAuthMessage() {
     // Configure shield so it is enabled.
@@ -130,7 +133,7 @@ class ShieldTest extends BrowserTestBase {
   /**
    * Validate the Shield credential provider.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testShieldCred() {
     // Configure shield so it is enabled.
@@ -149,9 +152,9 @@ class ShieldTest extends BrowserTestBase {
   /**
    * Test shield module configuration with key module.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws ResponseTextException
+   * @throws EntityStorageException
    */
   public function testShieldKey() {
     $path_to_test = 'user';
@@ -197,7 +200,7 @@ class ShieldTest extends BrowserTestBase {
   /**
    * Validate the Shield pages exclude/include feature.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testShieldPages() {
     // Configure shield so it is enabled.
@@ -245,7 +248,7 @@ class ShieldTest extends BrowserTestBase {
   /**
    * Validate the http_method_allowlist feature.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testShieldHttpMethodAllowlist() {
     // Configure shield so it is enabled.
@@ -271,7 +274,7 @@ class ShieldTest extends BrowserTestBase {
   /**
    * Validate the basic_auth headers unset feature.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testShieldWithBasicAuth() {
     // Configure shield, so it is enabled and basic_auth headers are kept.
