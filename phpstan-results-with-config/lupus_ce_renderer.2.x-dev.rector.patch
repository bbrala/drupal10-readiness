diff --git a/lupus_ce_renderer.api.php b/lupus_ce_renderer.api.php
index c7a5792..98d14fe 100644
--- a/lupus_ce_renderer.api.php
+++ b/lupus_ce_renderer.api.php
@@ -16,9 +16,9 @@ use Symfony\Component\HttpFoundation\Request;
  *
  * @param array $data
  *   The response data.
- * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+ * @param BubbleableMetadata $bubbleable_metadata
  *   The cache metadata.
- * @param \Symfony\Component\HttpFoundation\Request $request
+ * @param Request $request
  *   The request being handled.
  */
 function hook_lupus_ce_renderer_response_alter(array $data, BubbleableMetadata $bubbleable_metadata, Request $request) {
diff --git a/src/Controller/CustomElementsController.php b/src/Controller/CustomElementsController.php
index a33afac..cff72d2 100644
--- a/src/Controller/CustomElementsController.php
+++ b/src/Controller/CustomElementsController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\lupus_ce_renderer\Controller;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use drunomics\ServiceUtils\Core\Entity\EntityTypeManagerTrait;
 use drunomics\ServiceUtils\Core\Routing\CurrentRouteMatchTrait;
 use Drupal\Core\Entity\EntityInterface;
@@ -26,10 +27,10 @@ class CustomElementsController {
    * @param string $view_mode
    *   (optional) The view mode to use. Defaults to 'full'.
    *
-   * @return \Drupal\custom_elements\CustomElement
+   * @return CustomElement
    *   Returns CustomElement object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function entityView($view_mode = 'full') {
     // Get the current entity type ID from the raw parameters, it's the first
@@ -55,12 +56,12 @@ class CustomElementsController {
   /**
    * Preview an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $node_preview
+   * @param EntityInterface $node_preview
    *   The entity / node to preview.
    * @param string $view_mode
    *   The view mode to use.
    *
-   * @return \Drupal\custom_elements\CustomElement
+   * @return CustomElement
    *   Returns CustomElement object.
    */
   public function entityPreview(EntityInterface $node_preview, $view_mode = 'full') {
diff --git a/src/CustomElementsRenderer.php b/src/CustomElementsRenderer.php
index 0398761..a760971 100644
--- a/src/CustomElementsRenderer.php
+++ b/src/CustomElementsRenderer.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\lupus_ce_renderer;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Link;
 use drunomics\ServiceUtils\Core\Routing\CurrentRouteMatchTrait;
 use drunomics\ServiceUtils\Symfony\HttpFoundation\RequestStackTrait;
 use Drupal\Core\Access\AccessResult;
@@ -43,14 +45,14 @@ class CustomElementsRenderer {
   /**
    * The title resolver.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface
+   * @var TitleResolverInterface
    */
   protected $titleResolver;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -65,65 +67,65 @@ class CustomElementsRenderer {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The messenger interface.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The block plugin manager.
    *
-   * @var \Drupal\Core\Block\BlockManager
+   * @var BlockManager
    */
   protected $blockManager;
 
   /**
    * The drupal settings.
    *
-   * @var \Drupal\Core\Site\Settings
+   * @var Settings
    */
   protected $settings;
 
   /**
    * The metatag manager.
    *
-   * @var \Drupal\metatag\MetatagManagerInterface
+   * @var MetatagManagerInterface
    */
   protected $metatagManager;
 
   /**
    * The kill switch.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $killSwitch;
 
   /**
    * Constructs the renderer.
    *
-   * @param \Drupal\Core\Controller\TitleResolverInterface $title_resolver
+   * @param TitleResolverInterface $title_resolver
    *   The title resolver.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    * @param array $renderer_config
    *   The renderer configuration array.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger interface.
-   * @param \Drupal\Core\Block\BlockManager $blockManager
+   * @param BlockManager $blockManager
    *   The block manager.
-   * @param \Drupal\Core\Site\Settings $settings
+   * @param Settings $settings
    *   The drupal settings.
-   * @param \Drupal\metatag\MetatagManagerInterface $metatagManager
+   * @param MetatagManagerInterface $metatagManager
    *   The module handler.
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $killSwitch
+   * @param KillSwitch $killSwitch
    *   The kill switch.
    */
   public function __construct(TitleResolverInterface $title_resolver, RendererInterface $renderer, array $renderer_config, ModuleHandlerInterface $module_handler, MessengerInterface $messenger, BlockManager $blockManager, Settings $settings, MetatagManagerInterface $metatagManager, KillSwitch $killSwitch) {
@@ -141,7 +143,7 @@ class CustomElementsRenderer {
   /**
    * Renders the given custom element into a response.
    *
-   * @param \Drupal\custom_elements\CustomElement $custom_element
+   * @param CustomElement $custom_element
    *   The custom element.
    * @param string $format
    *   (optional) The content format, markup or json.
@@ -149,10 +151,10 @@ class CustomElementsRenderer {
    *   (optional) The response attribute to select. Allows selecting parts of
    *   the response. Only supports 'content' at the moment. Defaults to NULL.
    *
-   * @return \Drupal\lupus_ce_renderer\Cache\CustomElementsJsonResponse|\Drupal\Core\Cache\CacheableResponse
+   * @return CustomElementsJsonResponse|CacheableResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   Thrown when entity loading goes wrong.
    */
   public function renderResponse(CustomElement $custom_element, $format = 'markup', $select = NULL) {
@@ -224,7 +226,7 @@ class CustomElementsRenderer {
    * @return array[]
    *   Data array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getDynamicContent() {
     return [
@@ -255,13 +257,13 @@ class CustomElementsRenderer {
   /**
    * Get breadcrumbs data and markup.
    *
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   The bubbleable metatada.
    *
    * @return array
    *   Array of breadcrumbs and markup data.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   private function getBreadcrumbs(BubbleableMetadata &$bubbleable_metadata) {
     try {
@@ -269,7 +271,7 @@ class CustomElementsRenderer {
       $breadcrumb_block = $this->blockManager->createInstance('system_breadcrumb_block', []);
       $breadcrumb_render = $breadcrumb_block->build();
       if (!empty($breadcrumb_render['#links'])) {
-        /** @var \Drupal\Core\Link $crumb */
+        /** @var Link $crumb */
         foreach ($breadcrumb_render['#links'] as $crumb) {
           $text = $crumb->getText();
           if (is_array($crumb->getText()) && isset($text['#markup'])) {
@@ -306,7 +308,7 @@ class CustomElementsRenderer {
    * @return array
    *   Array of local-task links.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   private function getLocalTasks() {
     $local_tasks = [];
@@ -334,7 +336,7 @@ class CustomElementsRenderer {
     $local_tasks = [];
     if (!empty($render_links)) {
       foreach ($render_links as $render_link) {
-        /** @var \Drupal\Core\Access\AccessResult $access */
+        /** @var AccessResult $access */
         $access = $render_link['#access'] ?? FALSE;
         // Check access to links.
         if ($access instanceof AccessResult && $access->isAllowed() || $access === TRUE) {
@@ -356,7 +358,7 @@ class CustomElementsRenderer {
   /**
    * Get metatags.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match, for context.
    *
    * @return array
@@ -390,7 +392,7 @@ class CustomElementsRenderer {
    *
    * @param array $data
    *   Response data.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request.
    */
   private function modifyResponseData(array &$data, Request $request) {
diff --git a/src/EventSubscriber/CustomElementsControllerSubscriber.php b/src/EventSubscriber/CustomElementsControllerSubscriber.php
index e6eb34a..fedb244 100644
--- a/src/EventSubscriber/CustomElementsControllerSubscriber.php
+++ b/src/EventSubscriber/CustomElementsControllerSubscriber.php
@@ -20,14 +20,14 @@ class CustomElementsControllerSubscriber implements EventSubscriberInterface {
   /**
    * The controller resolver.
    *
-   * @var \Drupal\Core\Controller\ControllerResolverInterface
+   * @var ControllerResolverInterface
    */
   protected $controllerResolver;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Controller\ControllerResolverInterface $controller_resolver
+   * @param ControllerResolverInterface $controller_resolver
    *   The controller resolver.
    */
   public function __construct(ControllerResolverInterface $controller_resolver) {
@@ -37,7 +37,7 @@ class CustomElementsControllerSubscriber implements EventSubscriberInterface {
   /**
    * Take over entity view routes.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ControllerEvent $event
+   * @param ControllerEvent $event
    *   The event.
    */
   public function onKernelController(ControllerEvent $event) {
diff --git a/src/EventSubscriber/CustomElementsDynamicResponseSubscriber.php b/src/EventSubscriber/CustomElementsDynamicResponseSubscriber.php
index e54c2c9..236b89c 100644
--- a/src/EventSubscriber/CustomElementsDynamicResponseSubscriber.php
+++ b/src/EventSubscriber/CustomElementsDynamicResponseSubscriber.php
@@ -19,14 +19,14 @@ class CustomElementsDynamicResponseSubscriber implements EventSubscriberInterfac
   /**
    * The custom element renderer.
    *
-   * @var \Drupal\lupus_ce_renderer\CustomElementsRenderer
+   * @var CustomElementsRenderer
    */
   protected $customElementRenderer;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\lupus_ce_renderer\CustomElementsRenderer $customElementRenderer
+   * @param CustomElementsRenderer $customElementRenderer
    *   The custom element renderer.
    */
   public function __construct(CustomElementsRenderer $customElementRenderer) {
@@ -36,7 +36,7 @@ class CustomElementsDynamicResponseSubscriber implements EventSubscriberInterfac
   /**
    * Stores a response in case of a Dynamic Page Cache miss, if cacheable.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
   public function onResponse(ResponseEvent $event) {
diff --git a/src/EventSubscriber/CustomElementsFormatSubscriber.php b/src/EventSubscriber/CustomElementsFormatSubscriber.php
index 45bb75e..b440b3a 100644
--- a/src/EventSubscriber/CustomElementsFormatSubscriber.php
+++ b/src/EventSubscriber/CustomElementsFormatSubscriber.php
@@ -24,7 +24,7 @@ class CustomElementsFormatSubscriber implements EventSubscriberInterface {
   /**
    * Responds to kernel responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The event.
    */
   public function onKernelResponse(ResponseEvent $event) {
diff --git a/src/EventSubscriber/CustomElementsRedirectResponseSubscriber.php b/src/EventSubscriber/CustomElementsRedirectResponseSubscriber.php
index 56f6a89..e731d6c 100644
--- a/src/EventSubscriber/CustomElementsRedirectResponseSubscriber.php
+++ b/src/EventSubscriber/CustomElementsRedirectResponseSubscriber.php
@@ -20,14 +20,14 @@ class CustomElementsRedirectResponseSubscriber implements EventSubscriberInterfa
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $moduleHandler) {
@@ -37,7 +37,7 @@ class CustomElementsRedirectResponseSubscriber implements EventSubscriberInterfa
   /**
    * Handles the response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
   public function onResponse(ResponseEvent $event) {
diff --git a/src/EventSubscriber/CustomElementsViewSubscriber.php b/src/EventSubscriber/CustomElementsViewSubscriber.php
index 9d7bb3b..4d97d11 100644
--- a/src/EventSubscriber/CustomElementsViewSubscriber.php
+++ b/src/EventSubscriber/CustomElementsViewSubscriber.php
@@ -23,14 +23,14 @@ class CustomElementsViewSubscriber implements EventSubscriberInterface {
   /**
    * The custom element renderer.
    *
-   * @var \Drupal\lupus_ce_renderer\CustomElementsRenderer
+   * @var CustomElementsRenderer
    */
   protected $customElementRenderer;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\lupus_ce_renderer\CustomElementsRenderer $customElementRenderer
+   * @param CustomElementsRenderer $customElementRenderer
    *   The custom element renderer.
    */
   public function __construct(CustomElementsRenderer $customElementRenderer) {
@@ -40,7 +40,7 @@ class CustomElementsViewSubscriber implements EventSubscriberInterface {
   /**
    * Sets a response given a custom element.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ViewEvent $event
+   * @param ViewEvent $event
    *   The event to process.
    */
   public function onKernelView(ViewEvent $event) {
@@ -85,7 +85,7 @@ class CustomElementsViewSubscriber implements EventSubscriberInterface {
   /**
    * Handles http 4xx responses gracefully.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ViewEvent $event
+   * @param ViewEvent $event
    *   The event to process.
    *
    * @see \Drupal\lupus_ce_renderer\EventSubscriber\CustomElementsHttpExceptionSubscriber
diff --git a/tests/src/Functional/LupusCeRendererAccessTest.php b/tests/src/Functional/LupusCeRendererAccessTest.php
index 119a27c..e15712b 100644
--- a/tests/src/Functional/LupusCeRendererAccessTest.php
+++ b/tests/src/Functional/LupusCeRendererAccessTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\lupus_ce_renderer\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -14,7 +16,7 @@ class LupusCeRendererAccessTest extends BrowserTestBase {
   /**
    * The node to use for testing.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
@@ -28,7 +30,7 @@ class LupusCeRendererAccessTest extends BrowserTestBase {
   /**
    * A user with administrative permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
diff --git a/tests/src/Functional/LupusCeRendererApiResponseTest.php b/tests/src/Functional/LupusCeRendererApiResponseTest.php
index 2676f8a..43cc5a0 100644
--- a/tests/src/Functional/LupusCeRendererApiResponseTest.php
+++ b/tests/src/Functional/LupusCeRendererApiResponseTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\lupus_ce_renderer\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\lupus_ce_renderer\CustomElementsRenderer;
 use Drupal\Tests\BrowserTestBase;
 use PHPUnit\Framework\Assert;
@@ -16,7 +18,7 @@ class LupusCeRendererApiResponseTest extends BrowserTestBase {
   /**
    * The node to use for testing.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
@@ -30,7 +32,7 @@ class LupusCeRendererApiResponseTest extends BrowserTestBase {
   /**
    * A user with administrative permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
diff --git a/tests/src/Functional/LupusCeRendererContentTest.php b/tests/src/Functional/LupusCeRendererContentTest.php
index a7f4303..7ec74c3 100644
--- a/tests/src/Functional/LupusCeRendererContentTest.php
+++ b/tests/src/Functional/LupusCeRendererContentTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\lupus_ce_renderer\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\user\UserInterface;
 use Drupal\lupus_ce_renderer\CustomElementsRenderer;
 use Drupal\Tests\BrowserTestBase;
 
@@ -15,7 +17,7 @@ class LupusCeRendererContentTest extends BrowserTestBase {
   /**
    * The node to use for testing.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
@@ -29,7 +31,7 @@ class LupusCeRendererContentTest extends BrowserTestBase {
   /**
    * A user with administrative permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
