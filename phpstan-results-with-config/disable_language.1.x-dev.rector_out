modules/contrib/disable_language/disable_language.install
modules/contrib/disable_language/disable_language.module
modules/contrib/disable_language/src/DisableLanguageCallback.php
modules/contrib/disable_language/src/DisableLanguageManager.php
modules/contrib/disable_language/src/EventSubscriber/DisabledLanguagesEventSubscriber.php
modules/contrib/disable_language/src/Form/DisableLanguageSettings.php
modules/contrib/disable_language/tests/src/Functional/DisableLanguageRedirectTest.php
modules/contrib/disable_language/tests/src/Functional/DisableLanguageSettingsFormTest.php
modules/contrib/disable_language/tests/src/Kernel/DisableLanguageManagerTest.php

6 files with changes
====================

1) modules/contrib/disable_language/tests/src/Kernel/DisableLanguageManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\disable_language\Kernel;

+use Drupal\disable_language\DisableLanguageManager;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;

@@ @@
   /**
    * The Disable language manager.
    *
-   * @var \Drupal\disable_language\DisableLanguageManager
+   * @var DisableLanguageManager
    */
   protected $disableLanguageManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->disableLanguageManager = \Drupal::service('disable_language.disable_language_manager');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/disable_language/tests/src/Functional/DisableLanguageSettingsFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\disable_language\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser(['access administration pages']);
@@ @@
    */
   public function testSettingsValidation() {
     $this->drupalGet('admin/config/regional/language/disable_language');
-    $this->assertField('redirect_override_routes');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('redirect_override_routes');
     $edit = ['redirect_override_routes' => 'foo.bar',];
     $this->submitForm($edit,t('Save configuration'));
     $this->assertSession()->pageTextContains('Route "foo.bar" does not exist.');
    ----------- end diff -----------

Applied rules:
 * AssertFieldRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/disable_language/tests/src/Functional/DisableLanguageRedirectTest.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     ConfigurableLanguage::load('en')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/disable_language/src/Form/DisableLanguageSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\disable_language\Form;

+use Drupal\Core\Routing\RouteProvider;
+use Drupal\Core\Condition\ConditionManager;
+use Drupal\system\Plugin\Condition\RequestPath;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ @@
   /**
    * RouteProvider.
    *
-   * @var \Drupal\Core\Routing\RouteProvider
+   * @var RouteProvider
    */
   protected $routeProvider;

@@ @@
   /**
    * ConditionManager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * Sets extra services during class creation.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    */
   public function setExtraServices(ContainerInterface $container) {
@@ @@
       '#default_value' => $default,
     ];

-    /** @var \Drupal\system\Plugin\Condition\RequestPath $condition */
+    /** @var RequestPath $condition */
     $condition = $this->conditionManager->createInstance('request_path');
     $form_state->set(['conditions', 'request_path'], $condition);
     $form['exclude_request_path'] = $condition->buildConfigurationForm([], $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/disable_language/src/EventSubscriber/DisabledLanguagesEventSubscriber.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\disable_language\EventSubscriber;

 // This is the interface we are going to implement.
+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Executable\ExecutableException;
+use Drupal\system\Plugin\Condition\RequestPath;
 use Drupal\Core\Condition\ConditionManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\RouteMatch;
@@ @@
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperManager;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-// This class contains the event we want to subscribe to.
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Url;
 use Drupal\disable_language\DisableLanguageManager;
@@ @@
   /**
    * Contains disable_language.disable_language_manager service.
    *
-   * @var \Drupal\disable_language\DisableLanguageManager
+   * @var DisableLanguageManager
    */
   protected $disableLanguageManager;

@@ @@
   /**
    * Contains current_user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * This module's settings configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * A plugin manager for conditions plugins.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * DisabledLanguagesEventSubscriber constructor.
    *
-   * @param \Drupal\disable_language\DisableLanguageManager $disableLanguageManager
+   * @param DisableLanguageManager $disableLanguageManager
    *   Class DisableLanguageManager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   A proxied implementation of AccountInterface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Condition\ConditionManager $conditionManager
+   * @param ConditionManager $conditionManager
    *   A plugin manager for conditions plugins.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManager $streamWrapperManager
+   * @param StreamWrapperManager $streamWrapperManager
    */
   public function __construct(DisableLanguageManager $disableLanguageManager, AccountProxyInterface $currentUser, ConfigFactoryInterface $configFactory, ConditionManager $conditionManager,StreamWrapperManager $streamWrapperManager) {
     $this->currentUser = $currentUser;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function checkForDisabledLanguageAndRedirect(GetResponseEvent $event) {
+  public function checkForDisabledLanguageAndRedirect(RequestEvent $event) {
     // Do not redirect if this is a file.
     $params = $event->getRequest()->attributes->all();
     if (isset($params['scheme']) && in_array($params['scheme'], $this->schemes)) {
@@ @@
    *
    * @return bool
    *   Whether or not the requested path being accessed is excluded.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Core\Executable\ExecutableException
+   * @throws PluginException
+   * @throws ExecutableException
    */
   private function isPathExcluded() {
     if (($excluded_path_config = $this->config->get('exclude_request_path')) && !empty($excluded_path_config['pages'])) {
-      /** @var \Drupal\system\Plugin\Condition\RequestPath $condition */
+      /** @var RequestPath $condition */
       $condition = $this->conditionManager->createInstance('request_path');
       $condition->setConfiguration($excluded_path_config);
       return $this->conditionManager->execute($condition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/disable_language/src/DisableLanguageManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\disable_language;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\core\Language\LanguageInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * Contains entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Contains language_manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager;

@@ @@
   /**
    * DisableLanguageManager constructor.
    *
-   * @param \Drupal\Core\Language\LanguageDefault $default_language
+   * @param LanguageDefault $default_language
    *   Provides a simple get and set wrapper to the default language object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Defines the interface for a configuration object factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Interface for classes that manage a set of enabled modules.
-   * @param \Drupal\language\Config\LanguageConfigFactoryOverrideInterface $config_override
+   * @param LanguageConfigFactoryOverrideInterface $config_override
    *   Interface for a configuration factory language override object.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   Request stack that controls the lifecycle of requests.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Manages entity type plugin definitions.
-   * @param \Drupal\Core\Language\LanguageManager $languageManager
+   * @param LanguageManager $languageManager
    *   Providing language support on language-unaware sites.
    */
   public function __construct(LanguageDefault $default_language, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, LanguageConfigFactoryOverrideInterface $config_override, RequestStack $request_stack, EntityTypeManagerInterface $entityTypeManager, languageManager $languageManager) {
@@ @@
   /**
    * Determine and return the fallback language id.
    *
-   * @return \Drupal\core\Language\LanguageInterface|null
+   * @return LanguageInterface|null
    *   The id of the language that functions as the fallback.
    */
   public function getFallbackLanguage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

