diff --git a/session_limit.info.yml b/session_limit.info.yml
index ee75ff9..1533327 100644
--- a/session_limit.info.yml
+++ b/session_limit.info.yml
@@ -1,5 +1,5 @@
 name: 'Session Limit'
 description: 'Limit simultaneous user sessions.'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 type: module
 configure: session_limit.config_form
diff --git a/src/Event/SessionLimitBypassEvent.php b/src/Event/SessionLimitBypassEvent.php
index f9f7b1d..bfc5838 100644
--- a/src/Event/SessionLimitBypassEvent.php
+++ b/src/Event/SessionLimitBypassEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\session_limit\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 class SessionLimitBypassEvent extends Event {
 
diff --git a/src/Event/SessionLimitCollisionEvent.php b/src/Event/SessionLimitCollisionEvent.php
index 6bb5baf..c32afef 100644
--- a/src/Event/SessionLimitCollisionEvent.php
+++ b/src/Event/SessionLimitCollisionEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\session_limit\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Session\AccountInterface;
 
 class SessionLimitCollisionEvent extends Event {
diff --git a/src/Event/SessionLimitDisconnectEvent.php b/src/Event/SessionLimitDisconnectEvent.php
index 18ae33e..1c67586 100644
--- a/src/Event/SessionLimitDisconnectEvent.php
+++ b/src/Event/SessionLimitDisconnectEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\session_limit\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Session\AccountInterface;
 
 class SessionLimitDisconnectEvent extends Event {
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 2ca7bda..a5002a0 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -19,16 +19,16 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler instance to use.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
diff --git a/src/Services/SessionLimit.php b/src/Services/SessionLimit.php
index 7c8cf91..56949df 100644
--- a/src/Services/SessionLimit.php
+++ b/src/Services/SessionLimit.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\session_limit\Services;
 
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\Core\Database\Query\Select;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -54,7 +56,7 @@ class SessionLimit implements EventSubscriberInterface {
   }
 
   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
@@ -64,7 +66,7 @@ class SessionLimit implements EventSubscriberInterface {
   protected $routeMatch;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -92,7 +94,7 @@ class SessionLimit implements EventSubscriberInterface {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
@@ -113,7 +115,7 @@ class SessionLimit implements EventSubscriberInterface {
    *   Module handler.
    * @param ConfigFactory $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(Connection $database, EventDispatcherInterface $eventDispatcher, RouteMatchInterface $routeMatch, AccountProxy $currentUser, SessionManager $sessionManager, ModuleHandler $moduleHandler, ConfigFactory $configFactory, MessengerInterface $messenger) {
@@ -142,7 +144,7 @@ class SessionLimit implements EventSubscriberInterface {
   }
 
   /**
-   * @return \Drupal\Core\Session\AccountProxyInterface
+   * @return AccountProxyInterface
    */
   protected function getCurrentUser() {
     return $this->currentUser;
@@ -170,7 +172,7 @@ class SessionLimit implements EventSubscriberInterface {
     /** @var SessionLimitBypassEvent $bypassEvent */
     $bypassEvent = $this
       ->getEventDispatcher()
-      ->dispatch('session_limit.bypass', new SessionLimitBypassEvent());
+      ->dispatch(new SessionLimitBypassEvent(), 'session_limit.bypass');
 
     // Check the result of the event to see if we should bypass.
     if ($bypassEvent->shouldBypass()) {
@@ -185,7 +187,7 @@ class SessionLimit implements EventSubscriberInterface {
 
       $this
         ->getEventDispatcher()
-        ->dispatch('session_limit.collision', $collisionEvent);
+        ->dispatch($collisionEvent, 'session_limit.collision');
     }
     else {
       // force checking this twice as there's a race condition around
@@ -294,7 +296,7 @@ class SessionLimit implements EventSubscriberInterface {
     /** @var SessionLimitDisconnectEvent $disconnectEvent */
     $disconnectEvent = $this
       ->getEventDispatcher()
-      ->dispatch('session_limit.disconnect', new SessionLimitDisconnectEvent($event->getSessionId(), $event, $this->getMessage($event->getAccount())));
+      ->dispatch(new SessionLimitDisconnectEvent($event->getSessionId(), $event, $this->getMessage($event->getAccount())), 'session_limit.disconnect');
 
     if (!$disconnectEvent->shouldPreventDisconnect()) {
       $this->sessionActiveDisconnect($disconnectEvent->getMessage());
@@ -331,7 +333,7 @@ class SessionLimit implements EventSubscriberInterface {
         /** @var SessionLimitDisconnectEvent $disconnectEvent */
         $disconnectEvent = $this
           ->getEventDispatcher()
-          ->dispatch('session_limit.disconnect', new SessionLimitDisconnectEvent($event->getSessionId(), $event, $this->getMessage($event->getAccount())));
+          ->dispatch(new SessionLimitDisconnectEvent($event->getSessionId(), $event, $this->getMessage($event->getAccount())), 'session_limit.disconnect');
 
         if (!$disconnectEvent->shouldPreventDisconnect()) {
           $this->sessionDisconnect($session->sid, $disconnectEvent->getMessage());
@@ -386,7 +388,7 @@ class SessionLimit implements EventSubscriberInterface {
   /**
    * Get the number of active sessions for a user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user to check on.
    *
    * @return int
@@ -406,14 +408,14 @@ class SessionLimit implements EventSubscriberInterface {
       $query->condition('s.session', $like, 'NOT LIKE');
     }
 
-    /** @var \Drupal\Core\Database\Query\Select $query */
+    /** @var Select $query */
     return $query->countQuery()->execute()->fetchField();
   }
 
   /**
    * Get a list of active sessions for a user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user to check on.
    *
    * @return array
@@ -430,14 +432,14 @@ class SessionLimit implements EventSubscriberInterface {
       $query->condition('s.session', $like, 'NOT LIKE');
     }
 
-    /** @var \Drupal\Core\Database\Query\Select $query */
+    /** @var Select $query */
     return $query->execute()->fetchAll();
   }
 
   /**
    * Get the maximum sessions allowed for a specific user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return int
    *   The number of allowed sessions. A value less than 1 means unlimited.
