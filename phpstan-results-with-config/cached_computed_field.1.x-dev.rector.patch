diff --git a/cached_computed_field.info.yml b/cached_computed_field.info.yml
index c43d291..dcf48be 100644
--- a/cached_computed_field.info.yml
+++ b/cached_computed_field.info.yml
@@ -1,5 +1,5 @@
 name: Cached Computed Field
 type: module
 description: A field that allows to cache computationally expensive computed data in field storage.
-core_version_requirement: ^8.9 || ^9.1
+core_version_requirement: ^8.9 || ^9.1 || ^10
 package: Fields
diff --git a/cached_computed_field.module b/cached_computed_field.module
index 9143380..b1f4132 100644
--- a/cached_computed_field.module
+++ b/cached_computed_field.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\cached_computed_field\CachedComputedFieldManagerInterface;
 /**
  * @file
  * Main functions and hook implementations of the Cached Computed Field module.
@@ -9,7 +10,7 @@
  * Implements hook_cron().
  */
 function cached_computed_field_cron() {
-  /** @var \Drupal\cached_computed_field\CachedComputedFieldManagerInterface $field_manager */
+  /** @var CachedComputedFieldManagerInterface $field_manager */
   $field_manager = \Drupal::service('cached_computed_field.manager');
 
   // If there are any items in the queue, process them. If not, repopulate the
diff --git a/src/CachedComputedFieldManager.php b/src/CachedComputedFieldManager.php
index a934bfc..37a362d 100644
--- a/src/CachedComputedFieldManager.php
+++ b/src/CachedComputedFieldManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cached_computed_field;
 
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\cached_computed_field\Event\RefreshExpiredFieldsEvent;
 use Drupal\cached_computed_field\Event\RefreshExpiredFieldsEventInterface;
 use Drupal\Component\Datetime\TimeInterface;
@@ -20,75 +21,75 @@ class CachedComputedFieldManager implements CachedComputedFieldManagerInterface
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The field type plugin manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypePluginManager;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The database queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs a CachedComputedFieldManager object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $fieldTypePluginManager
+   * @param FieldTypePluginManagerInterface $fieldTypePluginManager
    *   The field type plugin manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Queue\QueueFactory $queueFactory
+   * @param QueueFactory $queueFactory
    *   The queue factory.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(EntityFieldManagerInterface $entityFieldManager, EntityTypeManagerInterface $entityTypeManager, FieldTypePluginManagerInterface $fieldTypePluginManager, TimeInterface $time, ConfigFactoryInterface $configFactory, QueueFactory $queueFactory, EventDispatcherInterface $eventDispatcher) {
@@ -117,14 +118,14 @@ class CachedComputedFieldManager implements CachedComputedFieldManagerInterface
     $end = time() + $this->getTimeLimit();
     while ((time() < $end) && $items = $this->claimItems()) {
       $event = new RefreshExpiredFieldsEvent($items);
-      $this->eventDispatcher->dispatch(RefreshExpiredFieldsEventInterface::EVENT_NAME, $event);
+      $this->eventDispatcher->dispatch($event, RefreshExpiredFieldsEventInterface::EVENT_NAME);
     }
   }
 
   /**
    * Claims a batch of expired items from the queue and returns them.
    *
-   * @return \Drupal\cached_computed_field\ExpiredItemCollectionInterface|null
+   * @return ExpiredItemCollectionInterface|null
    *   A collection of expired items, or NULL if there are no more items in the
    *   queue.
    */
diff --git a/src/CachedComputedFieldManagerInterface.php b/src/CachedComputedFieldManagerInterface.php
index 64cf3a0..1f9620d 100644
--- a/src/CachedComputedFieldManagerInterface.php
+++ b/src/CachedComputedFieldManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cached_computed_field;
 
+use Drupal\Core\Queue\QueueInterface;
 /**
  * Interface for services that manage cached computed fields.
  */
@@ -45,7 +46,7 @@ interface CachedComputedFieldManagerInterface {
   /**
    * Returns the queue that holds the fields to process.
    *
-   * @return \Drupal\Core\Queue\QueueInterface
+   * @return QueueInterface
    *   The queue object.
    */
   public function getQueue();
diff --git a/src/Event/RefreshExpiredFieldsEvent.php b/src/Event/RefreshExpiredFieldsEvent.php
index 61b8b47..2132d6a 100644
--- a/src/Event/RefreshExpiredFieldsEvent.php
+++ b/src/Event/RefreshExpiredFieldsEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\cached_computed_field\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\cached_computed_field\ExpiredItemCollectionInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * An event that fires when cached computed fields expire.
@@ -13,14 +13,14 @@ class RefreshExpiredFieldsEvent extends Event implements RefreshExpiredFieldsEve
   /**
    * A collection of expired items.
    *
-   * @var \Drupal\cached_computed_field\ExpiredItemCollectionInterface
+   * @var ExpiredItemCollectionInterface
    */
   protected $expiredItems;
 
   /**
    * Constructs a new RefreshExpiredFieldsEvent.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemCollectionInterface $expiredItems
+   * @param ExpiredItemCollectionInterface $expiredItems
    *   The collection of expired items.
    */
   public function __construct(ExpiredItemCollectionInterface $expiredItems) {
diff --git a/src/Event/RefreshExpiredFieldsEventInterface.php b/src/Event/RefreshExpiredFieldsEventInterface.php
index 02ce059..e66d8fc 100644
--- a/src/Event/RefreshExpiredFieldsEventInterface.php
+++ b/src/Event/RefreshExpiredFieldsEventInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\cached_computed_field\Event;
 
+use Drupal\cached_computed_field\ExpiredItemCollection;
 /**
  * Interface for events that fire when cached computed fields expire.
  */
@@ -15,7 +16,7 @@ interface RefreshExpiredFieldsEventInterface {
   /**
    * Returns the expired items.
    *
-   * @return \Drupal\cached_computed_field\ExpiredItemCollection
+   * @return ExpiredItemCollection
    *   A collection of expired items.
    */
   public function getExpiredItems();
diff --git a/src/EventSubscriber/RefreshExpiredFieldsSubscriberBase.php b/src/EventSubscriber/RefreshExpiredFieldsSubscriberBase.php
index 29b70e2..fac2330 100644
--- a/src/EventSubscriber/RefreshExpiredFieldsSubscriberBase.php
+++ b/src/EventSubscriber/RefreshExpiredFieldsSubscriberBase.php
@@ -15,23 +15,23 @@ abstract class RefreshExpiredFieldsSubscriberBase implements RefreshExpiredField
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The system time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructs a new RefreshExpiredFieldSubscriberBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The system time service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, TimeInterface $time) {
diff --git a/src/EventSubscriber/RefreshExpiredFieldsSubscriberInterface.php b/src/EventSubscriber/RefreshExpiredFieldsSubscriberInterface.php
index bda55eb..cbaa652 100644
--- a/src/EventSubscriber/RefreshExpiredFieldsSubscriberInterface.php
+++ b/src/EventSubscriber/RefreshExpiredFieldsSubscriberInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\cached_computed_field\EventSubscriber;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\cached_computed_field\Event\RefreshExpiredFieldsEventInterface;
 use Drupal\cached_computed_field\ExpiredItemInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ -14,7 +17,7 @@ interface RefreshExpiredFieldsSubscriberInterface extends EventSubscriberInterfa
   /**
    * Event subscriber that reacts to the RefreshExpiredFieldsEvent.
    *
-   * @param \Drupal\cached_computed_field\Event\RefreshExpiredFieldsEventInterface $event
+   * @param RefreshExpiredFieldsEventInterface $event
    *   The triggering event.
    */
   public function refreshExpiredFields(RefreshExpiredFieldsEventInterface $event);
@@ -22,10 +25,10 @@ interface RefreshExpiredFieldsSubscriberInterface extends EventSubscriberInterfa
   /**
    * Returns the entity that contains the expired field.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemInterface $expiredItem
+   * @param ExpiredItemInterface $expiredItem
    *   The expired field item.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity.
    */
   public function getEntity(ExpiredItemInterface $expiredItem);
@@ -33,10 +36,10 @@ interface RefreshExpiredFieldsSubscriberInterface extends EventSubscriberInterfa
   /**
    * Returns the field definition of the expired field.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemInterface $expiredItem
+   * @param ExpiredItemInterface $expiredItem
    *   The expired field item.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    *   The definition of the field.
    */
   public function getFieldDefinition(ExpiredItemInterface $expiredItem);
@@ -44,7 +47,7 @@ interface RefreshExpiredFieldsSubscriberInterface extends EventSubscriberInterfa
   /**
    * Returns the expired data that is currently cached in the field.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemInterface $expiredItem
+   * @param ExpiredItemInterface $expiredItem
    *   The expired field item.
    *
    * @return mixed
@@ -58,7 +61,7 @@ interface RefreshExpiredFieldsSubscriberInterface extends EventSubscriberInterfa
    * Call this with the calculated value. It will write the value to the
    * database and reset the cache lifetime.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemInterface $expiredItem
+   * @param ExpiredItemInterface $expiredItem
    *   The expired field item.
    * @param mixed $value
    *   The value to set.
@@ -71,7 +74,7 @@ interface RefreshExpiredFieldsSubscriberInterface extends EventSubscriberInterfa
    * It is possible a field value has already been refreshed in the time between
    * it was added to the queue and the moment the event fires.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemInterface $expiredItem
+   * @param ExpiredItemInterface $expiredItem
    *   The expired field item.
    *
    * @return bool
@@ -83,10 +86,10 @@ interface RefreshExpiredFieldsSubscriberInterface extends EventSubscriberInterfa
   /**
    * Returns the expired field instance.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemInterface $expiredItem
+   * @param ExpiredItemInterface $expiredItem
    *   The expired field item.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface
+   * @return FieldItemListInterface
    *   The field instance.
    */
   public function getField(ExpiredItemInterface $expiredItem);
diff --git a/src/ExpiredItemCollection.php b/src/ExpiredItemCollection.php
index 45a0c67..fbb1423 100644
--- a/src/ExpiredItemCollection.php
+++ b/src/ExpiredItemCollection.php
@@ -10,14 +10,14 @@ class ExpiredItemCollection implements ExpiredItemCollectionInterface {
   /**
    * The expired items.
    *
-   * @var \Drupal\cached_computed_field\ExpiredItemInterface[]
+   * @var ExpiredItemInterface[]
    */
   protected $items;
 
   /**
    * Constructs a new ExpiredItemCollection object.
    *
-   * @param \Drupal\cached_computed_field\ExpiredItemInterface[] $items
+   * @param ExpiredItemInterface[] $items
    *   An array of expired items.
    */
   public function __construct(array $items) {
diff --git a/src/ExpiredItemCollectionInterface.php b/src/ExpiredItemCollectionInterface.php
index 15c7af5..012cf20 100644
--- a/src/ExpiredItemCollectionInterface.php
+++ b/src/ExpiredItemCollectionInterface.php
@@ -10,7 +10,7 @@ interface ExpiredItemCollectionInterface extends \IteratorAggregate, \Countable
   /**
    * Returns the expired items in the collection.
    *
-   * @return \Drupal\cached_computed_field\ExpiredItem[]
+   * @return ExpiredItem[]
    *   An array of expired items.
    */
   public function getItems();
diff --git a/tests/src/Kernel/KernelTestBase.php b/tests/src/Kernel/KernelTestBase.php
index f32931e..05b8739 100644
--- a/tests/src/Kernel/KernelTestBase.php
+++ b/tests/src/Kernel/KernelTestBase.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\cached_computed_field\Kernel;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Queue\QueueInterface;
+use Drupal\entity_test\Entity\EntityTest;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\KernelTestBase as DrupalKernelTestBase;
 
 /**
@@ -29,35 +34,35 @@ abstract class KernelTestBase extends DrupalKernelTestBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity_test entity type storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;
 
   /**
    * The queue that contains expired fields.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
   /**
    * The entities used in this test.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest[]
+   * @var EntityTest[]
    */
   protected $entities;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig([
@@ -77,7 +82,7 @@ abstract class KernelTestBase extends DrupalKernelTestBase {
    * @param int $count
    *   The number of entities to create.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   Thrown if the entity storage for the `entity_test` entity doesn't exist.
    */
   protected function createTestEntities($count) {
diff --git a/tests/src/Kernel/RefreshExpiredFieldsSubscriberBaseTest.php b/tests/src/Kernel/RefreshExpiredFieldsSubscriberBaseTest.php
index 45dd2c9..2f8445d 100644
--- a/tests/src/Kernel/RefreshExpiredFieldsSubscriberBaseTest.php
+++ b/tests/src/Kernel/RefreshExpiredFieldsSubscriberBaseTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\cached_computed_field\Kernel;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\cached_computed_field\ExpiredItem;
 use Drupal\cached_computed_field_test\EventSubscriber\RefreshExpiredFieldsTestSubscriber;
 use Drupal\Core\Entity\EntityInterface;
@@ -17,7 +18,7 @@ class RefreshExpiredFieldsSubscriberBaseTest extends KernelTestBase {
   /**
    * The event subscriber under test.
    *
-   * @var \Drupal\cached_computed_field_test\EventSubscriber\RefreshExpiredFieldsTestSubscriber
+   * @var RefreshExpiredFieldsTestSubscriber
    */
   protected $subscriber;
 
@@ -31,7 +32,7 @@ class RefreshExpiredFieldsSubscriberBaseTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Instantiate the event subscriber being tested with a mocked time service
@@ -125,10 +126,10 @@ class RefreshExpiredFieldsSubscriberBaseTest extends KernelTestBase {
   /**
    * Creates an ExpiredItem object for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to create the expired item.
    *
-   * @return \Drupal\cached_computed_field\ExpiredItem
+   * @return ExpiredItem
    *   The expired item.
    */
   protected function getExpiredItem(EntityInterface $entity) {
@@ -143,11 +144,11 @@ class RefreshExpiredFieldsSubscriberBaseTest extends KernelTestBase {
    * @param int|NULL $value
    *   Optional value to set on the cached computed field.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The test entity.
    */
   protected function createEntity(int $expire_time, int $value = NULL) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->entityStorage->create([
       'title' => $this->randomMachineName(),
       'type' => 'entity_test',
diff --git a/tests/src/Kernel/SlowQueueProcessingTest.php b/tests/src/Kernel/SlowQueueProcessingTest.php
index 6155ab8..45eecf1 100644
--- a/tests/src/Kernel/SlowQueueProcessingTest.php
+++ b/tests/src/Kernel/SlowQueueProcessingTest.php
@@ -14,7 +14,7 @@ class SlowQueueProcessingTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create 3 test entities.
