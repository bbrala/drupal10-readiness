diff --git a/micro_site.api.php b/micro_site.api.php
index b54e175..55b3370 100644
--- a/micro_site.api.php
+++ b/micro_site.api.php
@@ -1,19 +1,20 @@
 <?php
 
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Session\AccountInterface;
 /**
  * @file
  * API documentation file for micro_site module.
  */
-
 /**
  * Alter the list of sites that may be referenced.
  *
  * Note that this hook does not fire for users with the 'administer site entities'
  * permission.
  *
- * @param \Drupal\Core\Entity\Query\QueryInterface $query
+ * @param QueryInterface $query
  *   An entity query prepared by DomainSelection::buildEntityQuery().
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The account of the user viewing the reference list.
  * @param array $context
  *   A keyed array passing two items:
diff --git a/micro_site.install b/micro_site.install
index dc859f6..ad20796 100644
--- a/micro_site.install
+++ b/micro_site.install
@@ -1,5 +1,11 @@
 <?php
 
+use Drupal\block\BlockInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\Core\Database\Database;
+use Drupal\user\RoleInterface;
 /**
  * @file
  * Contains micro_site.install.
@@ -63,7 +69,7 @@ function micro_site_update_8102() {
 function micro_site_update_8103() {
   $blockStorage = \Drupal::entityTypeManager()->getStorage('block');
   $blocks = $blockStorage->loadMultiple();
-  /** @var \Drupal\block\BlockInterface $block */
+  /** @var BlockInterface $block */
   foreach ($blocks as $block) {
     $changed = FALSE;
     $visibility = $block->getVisibility();
@@ -98,13 +104,13 @@ function micro_site_update_8104() {
   $field_length = 128;
 
   // Ignore entity type manager caches.
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+  /** @var EntityTypeManagerInterface $entity_type_manager */
   $entity_type_manager = \Drupal::service('entity_type.manager');
   $entity_type_manager->useCaches(FALSE);
 
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $schema_repository */
   $schema_repository = \Drupal::service('entity.last_installed_schema.repository');
-  /** @var \Drupal\Core\Entity\EntityFieldManager $entity_field_manager */
+  /** @var EntityFieldManager $entity_field_manager */
   $entity_field_manager = \Drupal::service('entity_field.manager');
   $entity_field_manager->useCaches(FALSE);
   $base_field_definitions = $entity_field_manager->getBaseFieldDefinitions($entity_type_id);
@@ -128,7 +134,7 @@ function micro_site_update_8104() {
   $key_value->set($key_name, $storage_schema);
 
   // Updates the base database field.
-  $db_schema = \Drupal\Core\Database\Database::getConnection()->schema();
+  $db_schema = Database::getConnection()->schema();
   $db_schema->changeField($entity_type_id . '_field_data', $field_name, $field_name, [
     'type' => 'varchar',
     'length' => $field_length,
@@ -156,7 +162,7 @@ function micro_site_update_8105() {
   $blockStorage = \Drupal::entityTypeManager()->getStorage('block');
   $blocks = $blockStorage->loadMultiple();
   $changed = FALSE;
-  /** @var \Drupal\block\BlockInterface $block */
+  /** @var BlockInterface $block */
   foreach ($blocks as $block) {
     $plugin = $block->getPluginId();
     if ($plugin === 'micro_site_informations') {
@@ -180,7 +186,7 @@ function micro_site_update_8105() {
 function micro_site_update_8106() {
   $roles = Role::loadMultiple();
   $count = 0;
-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   foreach ($roles as $role) {
     if ($role->hasPermission('view micro site informations')) {
       $role->revokePermission('view micro site informations');
diff --git a/micro_site.module b/micro_site.module
index 1da944f..a96360d 100644
--- a/micro_site.module
+++ b/micro_site.module
@@ -1,5 +1,12 @@
 <?php
 
+use Drupal\micro_site\SiteNegotiatorInterface;
+use Drupal\file\FileInterface;
+use Drupal\Core\Image\Image;
+use Drupal\micro_site\Entity\SiteTypeInterface;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
 /**
  * @file
  * Contains micro_site.module.
@@ -66,9 +73,9 @@ function micro_site_cache_flush() {
  * Implements hook_preprocess_HOOK().
  */
 function micro_site_preprocess_html(&$variables) {
-  /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+  /** @var SiteNegotiatorInterface $negotiator */
   $negotiator = \Drupal::service('micro_site.negotiator');
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   if ($site = $negotiator->getActiveSite()) {
     $variables['attributes']['class'][] = 'site--entity';
     $variables['attributes']['class'][] = 'site--type--' . Html::cleanCssIdentifier($site->bundle());
@@ -81,19 +88,19 @@ function micro_site_preprocess_html(&$variables) {
  */
 function micro_site_preprocess_block__system_branding_block(&$variables) {
 
-  /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+  /** @var SiteNegotiatorInterface $negotiator */
   $negotiator = \Drupal::service('micro_site.negotiator');
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   if ($site = $negotiator->getActiveSite()) {
     $site = \Drupal::service('entity.repository')->getTranslationFromContext($site);
     // Override the site logo.
     $variables['site_logo'] = '';
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     if ($file = $site->getLogo()) {
-      /** @var \Drupal\Core\Image\Image $image */
+      /** @var Image $image */
       $image = \Drupal::service('image.factory')->get($file->getFileUri());
       if ($image->isValid()) {
-        $variables['site_logo'] = file_url_transform_relative(file_create_url($image->getSource()));
+        $variables['site_logo'] = \Drupal::service('file_url_generator')->generateString($image->getSource());
       }
     }
     // Override the site name and slogan.
@@ -158,7 +165,7 @@ function micro_site_site_insert(EntityInterface $entity) {
 /**
  * Helper function for creating the trusted host pattern file.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  * @param bool $force
  */
 function _micro_site_create_host_pattern_file(EntityInterface $entity, $force = FALSE) {
@@ -169,7 +176,7 @@ function _micro_site_create_host_pattern_file(EntityInterface $entity, $force =
   if ($custom_directory = Settings::get('micro_site.trusted_host_patterns_directory')) {
     $default_directory = $custom_directory;
   }
-  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+  /** @var FileSystemInterface $file_system */
   $file_system = \Drupal::service('file_system');
   $trusted_host_patterns_directory = $default_directory;
   $result = $file_system->prepareDirectory($trusted_host_patterns_directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
@@ -179,7 +186,7 @@ function _micro_site_create_host_pattern_file(EntityInterface $entity, $force =
   }
   FileSecurity::writeHtaccess($trusted_host_patterns_directory);
 
-  /** @var \Drupal\micro_site\Entity\SiteInterface $entity */
+  /** @var SiteInterface $entity */
   $site_url = $entity->getSiteUrl();
   $trusted_host_pattern = preg_quote($site_url);
   $trusted_host_pattern_file_path = $trusted_host_patterns_directory . '/' . $site_url . '.host.php';
@@ -196,7 +203,7 @@ function _micro_site_create_host_pattern_file(EntityInterface $entity, $force =
 */
 function micro_site_theme_suggestions_site(array $variables) {
   $suggestions = [];
-  /** @var \Drupal\micro_site\Entity\SiteInterface $entity */
+  /** @var SiteInterface $entity */
   $entity = $variables['elements']['#site'];
   $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
 
@@ -213,7 +220,7 @@ function micro_site_theme_suggestions_site(array $variables) {
  */
 function micro_site_theme_suggestions_page_alter(array &$suggestions, array $variables) {
   $negotiator = \Drupal::service('micro_site.negotiator');
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   if ($site = $negotiator->getActiveSite()) {
     $suggestions = [];
     $suggestions[] = 'page__site';
@@ -248,9 +255,9 @@ function micro_site_theme_suggestions_page_alter(array &$suggestions, array $var
  * Implements hook_theme_suggestions_HOOK_alter().
  */
 function micro_site_theme_suggestions_menu_local_tasks_alter(array &$suggestions, array $variables) {
-  /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+  /** @var SiteNegotiatorInterface $negotiator */
   $negotiator = \Drupal::service('micro_site.negotiator');
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   if ($site = $negotiator->loadFromRequest()) {
     if (!$site instanceof SiteInterface) {
       return;
@@ -266,9 +273,9 @@ function micro_site_theme_suggestions_menu_local_tasks_alter(array &$suggestions
  * Implements hook_page_attachments().
  */
 function micro_site_page_attachments(array &$attachments) {
-  /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+  /** @var SiteNegotiatorInterface $negotiator */
   $negotiator = \Drupal::service('micro_site.negotiator');
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   if ($site = $negotiator->getActiveSite()) {
     $micro_site_css = [
       '#tag' => 'link',
@@ -286,11 +293,11 @@ function micro_site_page_attachments(array &$attachments) {
  * Implements hook_page_attachments_alter().
  */
 function micro_site_page_attachments_alter(array &$attachments) {
-  /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+  /** @var SiteNegotiatorInterface $negotiator */
   $negotiator = \Drupal::service('micro_site.negotiator');
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   if ($site = $negotiator->getActiveSite()) {
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     if ($file = $site->getFavicon()) {
       $favicon_changed = FALSE;
       $type = $file->getMimeType();
@@ -333,7 +340,7 @@ function micro_site_page_attachments_alter(array &$attachments) {
  */
 function micro_site_preprocess_page(&$variables) {
   $negotiator = \Drupal::service('micro_site.negotiator');
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   if ($site = $negotiator->getActiveSite()) {
     // Provide the site entity.
     $variables['site'] = $site;
@@ -344,9 +351,9 @@ function micro_site_preprocess_page(&$variables) {
 
     // Build the site logo.
     $variables['site_logo'] = '';
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     if ($file = $site->logo->entity) {
-      /** @var \Drupal\Core\Image\Image $image */
+      /** @var Image $image */
       $image = \Drupal::service('image.factory')->get($file->getFileUri());
       if ($image->isValid()) {
         $logo = [
@@ -375,13 +382,13 @@ function micro_site_preprocess_page(&$variables) {
  */
 function micro_site_preprocess_maintenance_page(&$variables) {
   $negotiator = \Drupal::service('micro_site.negotiator');
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   if ($site = $negotiator->getActiveSite()) {
     $logo = $site->getLogo();
     $logo_url = '';
-    if ($logo instanceof \Drupal\file\FileInterface) {
+    if ($logo instanceof FileInterface) {
       $logo_uri = $logo->getFileUri();
-      $logo_url = file_url_transform_relative(file_create_url($logo_uri));
+      $logo_url = \Drupal::service('file_url_generator')->generateString($logo_uri);
     }
     $variables['logo'] = $logo_url;
     $variables['site_name'] = $site->getName();
@@ -400,7 +407,7 @@ function micro_site_menu_local_tasks_alter(&$data, $route_name, RefinableCacheab
  * Implements hook_form_BASE_FORM_ID_alter().
  */
 function micro_site_form_site_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   $form['#theme'] = ['site_edit_form'];
 
   // Site users fields wrapper.
@@ -416,7 +423,7 @@ function micro_site_form_site_form_alter(&$form, FormStateInterface $form_state)
   ];
 
   $site = $form_state->getFormObject()->getEntity();
-  /** @var \Drupal\micro_site\Entity\SiteTypeInterface $site_type */
+  /** @var SiteTypeInterface $site_type */
   $site_type = $site->type->entity;
 
   if (isset($form[SiteUsers::MICRO_SITE_ADMINISTRATOR])) {
@@ -448,7 +455,7 @@ function micro_site_form_site_form_alter(&$form, FormStateInterface $form_state)
  * Creates our fields when new node types are created.
  */
 function micro_site_site_type_insert(EntityInterface $entity) {
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+  /** @var ConfigEntityInterface $entity */
   if (!$entity->isSyncing()) {
     // Do not fire hook when config sync in progress.
     micro_site_assign_fields('site', $entity->id());
@@ -587,7 +594,7 @@ function micro_site_assign_fields($entity_type, $bundle) {
     }
 
     // Tell the form system how to behave. Default to auto complete.
-    /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $entity_form_display */
+    /** @var EntityFormDisplay $entity_form_display */
     $entity_form_display = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load($entity_type . '.' . $bundle . '.default');
     if (!$entity_form_display) {
       $values = array(
@@ -619,7 +626,7 @@ function micro_site_assign_fields($entity_type, $bundle) {
       ->save();
 
     // Tell the view system how to behave. Default to auto complete.
-    /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $entity_view_display */
+    /** @var EntityViewDisplay $entity_view_display */
     $entity_view_display = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load($entity_type . '.' . $bundle . '.default');
     if (!$entity_view_display) {
       $values = array(
diff --git a/micro_site.tokens.inc b/micro_site.tokens.inc
index 1232d81..ba5ddbd 100644
--- a/micro_site.tokens.inc
+++ b/micro_site.tokens.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\micro_site\SiteNegotiatorInterface;
+use Drupal\Core\GeneratedUrl;
 /**
  * @file
  * Builds placeholder replacement tokens micr site data.
@@ -71,9 +73,9 @@ function micro_site_tokens($type, $tokens, array $data, array $options, Bubbleab
   }
   $replacements = [];
 
-  /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+  /** @var SiteNegotiatorInterface $negotiator */
   $negotiator = \Drupal::service('micro_site.negotiator');
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   $site = $negotiator->getActiveSite();
 
   if ($type == 'micro_site' && $site instanceof SiteInterface) {
@@ -104,7 +106,7 @@ function micro_site_tokens($type, $tokens, array $data, array $options, Bubbleab
           break;
 
         case 'url-brief':
-          /** @var \Drupal\Core\GeneratedUrl $result */
+          /** @var GeneratedUrl $result */
           $replacements[$original] = $site->getSiteUrl();
           break;
 
@@ -132,9 +134,9 @@ function micro_site_tokens_alter(array &$replacements, array $context, Bubbleabl
       $site = $context['data']['micro_site'];
     }
     else {
-      /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+      /** @var SiteNegotiatorInterface $negotiator */
       $negotiator = \Drupal::service('micro_site.negotiator');
-      /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+      /** @var SiteInterface $site */
       $site = $negotiator->getActiveSite();
     }
 
diff --git a/site.page.inc b/site.page.inc
index ebe3892..ec6c8e6 100644
--- a/site.page.inc
+++ b/site.page.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\micro_site\Entity\SiteInterface;
 /**
  * @file
  * Contains site.page.inc.
@@ -22,7 +23,7 @@ use Drupal\Core\Url;
  *   - attributes: HTML attributes for the containing element.
  */
 function template_preprocess_site(array &$variables) {
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   $site = $variables['elements']['#site'];
   $view_mode = $variables['elements']['#view_mode'];
 
diff --git a/src/Access/DefaultSettingsAccess.php b/src/Access/DefaultSettingsAccess.php
index 7f87a29..4fd9560 100644
--- a/src/Access/DefaultSettingsAccess.php
+++ b/src/Access/DefaultSettingsAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micro_site\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -17,16 +18,16 @@ class DefaultSettingsAccess {
   /**
    * Checks access to the entity operation on the given route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\micro_site\Entity\SiteInterface $site
+   * @param SiteInterface $site
    *   The site entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account, SiteInterface $site = NULL) {
diff --git a/src/Access/SiteAccessCheck.php b/src/Access/SiteAccessCheck.php
index a95e590..5f9ec4e 100644
--- a/src/Access/SiteAccessCheck.php
+++ b/src/Access/SiteAccessCheck.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\micro_site\Access;
 
+use Drupal\micro_site\siteNegotiatorInterface;
+use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\Core\Access\AccessCheckInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -18,14 +20,14 @@ class SiteAccessCheck implements AccessCheckInterface {
   /**
    * The Site negotiator.
    *
-   * @var \Drupal\micro_site\siteNegotiatorInterface
+   * @var siteNegotiatorInterface
    */
   protected $negotiator;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -34,7 +36,7 @@ class SiteAccessCheck implements AccessCheckInterface {
    *
    * @param SiteNegotiatorInterface $negotiator
    *   The domain negotiation service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(SiteNegotiatorInterface $negotiator, ConfigFactoryInterface $config_factory) {
@@ -67,7 +69,7 @@ class SiteAccessCheck implements AccessCheckInterface {
    * {@inheritdoc}
    */
   public function access(AccountInterface $account) {
-    /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+    /** @var SiteInterface $site */
     $site = $this->negotiator->loadFromRequest();
     // No site, let it pass.
     if (empty($site)) {
diff --git a/src/AssetFileStorage.php b/src/AssetFileStorage.php
index 299a597..7f63fe2 100644
--- a/src/AssetFileStorage.php
+++ b/src/AssetFileStorage.php
@@ -32,14 +32,14 @@ abstract class AssetFileStorage {
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The site entity.
    *
-   * @var \Drupal\micro_site\Entity\SiteInterface
+   * @var SiteInterface
    */
   protected $site;
 
@@ -145,7 +145,7 @@ abstract class AssetFileStorage {
   /**
    * Gets the file system service.
    *
-   * @return \Drupal\Core\File\FileSystemInterface
+   * @return FileSystemInterface
    *   The file system service.
    */
   protected function fileSystem() {
diff --git a/src/Commands/MicroSiteCommands.php b/src/Commands/MicroSiteCommands.php
index 7b5d7e7..1377647 100644
--- a/src/Commands/MicroSiteCommands.php
+++ b/src/Commands/MicroSiteCommands.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\micro_site\Commands;
 
+use Drupal\micro_site\Entity\SiteInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -17,32 +20,32 @@ class MicroSiteCommands extends DrushCommands {
   /**
    * Date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Key-value store service.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactoryInterface
+   * @var KeyValueFactoryInterface
    */
   protected $keyValue;
 
   /**
    * MicroSiteCommands constructor.
    *
-   * @param \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   Date formatter service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $keyValue
+   * @param KeyValueFactoryInterface $keyValue
    *   Key-value store service.
    */
   public function __construct(DateFormatter $dateFormatter, EntityTypeManagerInterface $entityTypeManager, KeyValueFactoryInterface $keyValue) {
@@ -80,7 +83,7 @@ class MicroSiteCommands extends DrushCommands {
    *   https_new: HTTPS (new)
    * @default-fields id,type,site_url,https,site_url_new,https_new
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   Micro sites eligibles as table.
    */
   public function status($types = '', array $options = []) {
@@ -371,9 +374,9 @@ class MicroSiteCommands extends DrushCommands {
    * @param array $ids
    *   An array of micro site ID.
    *
-   * @return \Drupal\micro_site\Entity\SiteInterface[]
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return SiteInterface[]
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getMicroSites($types = '', array $ids = []) {
     if (empty($types)) {
diff --git a/src/ContextProvider/CurrentSiteContext.php b/src/ContextProvider/CurrentSiteContext.php
index d163436..e446b0a 100644
--- a/src/ContextProvider/CurrentSiteContext.php
+++ b/src/ContextProvider/CurrentSiteContext.php
@@ -22,23 +22,23 @@ class CurrentSiteContext implements ContextProviderInterface {
   /**
    * The Site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;
 
   /**
    * The route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Constructs a CurrentSiteContext object.
    *
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $negotiator
+   * @param SiteNegotiatorInterface $negotiator
    *   The domain negotiator.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
    */
   public function __construct(SiteNegotiatorInterface $negotiator, RouteMatchInterface $route_match) {
diff --git a/src/Controller/SiteController.php b/src/Controller/SiteController.php
index a48dec6..cf89479 100644
--- a/src/Controller/SiteController.php
+++ b/src/Controller/SiteController.php
@@ -49,7 +49,7 @@ class SiteController extends ControllerBase implements ContainerInjectionInterfa
   /**
    * Generates an overview table of older revisions of a Site .
    *
-   * @param \Drupal\micro_site\Entity\SiteInterface $site
+   * @param SiteInterface $site
    *   A Site  object.
    *
    * @return array
@@ -76,7 +76,7 @@ class SiteController extends ControllerBase implements ContainerInjectionInterfa
     $latest_revision = TRUE;
 
     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\micro_site\Entity\SiteInterface $revision */
+      /** @var SiteInterface $revision */
       $revision = $site_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
diff --git a/src/Entity/SiteInterface.php b/src/Entity/SiteInterface.php
index d9dff73..f1ecd78 100644
--- a/src/Entity/SiteInterface.php
+++ b/src/Entity/SiteInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micro_site\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\RevisionableInterface;
@@ -116,7 +117,7 @@ interface SiteInterface extends ContentEntityInterface, EntityChangedInterface,
   /**
    * Gets the Site logo.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *  The file entity.
    */
   public function getLogo();
@@ -124,7 +125,7 @@ interface SiteInterface extends ContentEntityInterface, EntityChangedInterface,
   /**
    * Sets the Site logo.
    *
-   * @param \Drupal\file\FileInterface $logo
+   * @param FileInterface $logo
    *   The logo file entity.
    *
    * @return \Drupal\micro_site\Entity\SiteInterface
@@ -135,7 +136,7 @@ interface SiteInterface extends ContentEntityInterface, EntityChangedInterface,
   /**
    * Gets the Site favicon.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *  The file entity.
    */
   public function getFavicon();
@@ -143,7 +144,7 @@ interface SiteInterface extends ContentEntityInterface, EntityChangedInterface,
   /**
    * Sets the Site favicon.
    *
-   * @param \Drupal\file\FileInterface $favicon
+   * @param FileInterface $favicon
    *   The favicon file entity.
    *
    * @return \Drupal\micro_site\Entity\SiteInterface
@@ -255,7 +256,7 @@ interface SiteInterface extends ContentEntityInterface, EntityChangedInterface,
   /**
    * Gets the Site revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
@@ -403,23 +404,23 @@ interface SiteInterface extends ContentEntityInterface, EntityChangedInterface,
    * @param string $field_name
    *   The field name which reference site users.
    *
-   * @return \Drupal\user\UserInterface[]
+   * @return UserInterface[]
    *   The users entities.
    */
   public function getUsers($field_name = SiteUsers::MICRO_SITE_ADMINISTRATOR);
 
 
   /**
- * Get the site users id for a given field_name.
- *
- * @param string $field_name
- *   The field name which reference site users.
- * @param boolean $return_entity
- *   If TRUE, return an array of user entity.
- *
- * @return array|\Drupal\user\UserInterface[]
- *   An array of the users id or users entity.
- */
+   * Get the site users id for a given field_name.
+   *
+   * @param string $field_name
+   *   The field name which reference site users.
+   * @param boolean $return_entity
+   *   If TRUE, return an array of user entity.
+   *
+   * @return array|UserInterface[]
+   *   An array of the users id or users entity.
+   */
   public function getUsersId($field_name = SiteUsers::MICRO_SITE_ADMINISTRATOR, $return_entity = FALSE);
 
   /**
@@ -428,9 +429,8 @@ interface SiteInterface extends ContentEntityInterface, EntityChangedInterface,
    * @param boolean $return_entity
    *   If TRUE, return an array of user entity.
    *
-   * @return array|\Drupal\user\UserInterface[]
+   * @return array|UserInterface[]
    *   An array of the users id or users entity.
-   *
    */
   public function getAllUsersId($return_entity = FALSE);
 
@@ -440,9 +440,8 @@ interface SiteInterface extends ContentEntityInterface, EntityChangedInterface,
    * @param boolean $return_entity
    *   If TRUE, return an array of user entity.
    *
-   * @return array|\Drupal\user\UserInterface[]
+   * @return array|UserInterface[]
    *   An array of the users id or users entity.
-   *
    */
   public function getAdminUsersId($return_entity = FALSE);
 
@@ -452,9 +451,8 @@ interface SiteInterface extends ContentEntityInterface, EntityChangedInterface,
    * @param boolean $return_entity
    *   If TRUE, return an array of user entity.
    *
-   * @return array|\Drupal\user\UserInterface[]
+   * @return array|UserInterface[]
    *   An array of the users id or users entity.
-   *
    */
   public function getManagerUsersId($return_entity = FALSE);
 
@@ -464,9 +462,8 @@ interface SiteInterface extends ContentEntityInterface, EntityChangedInterface,
    * @param boolean $return_entity
    *   If TRUE, return an array of user entity.
    *
-   * @return array|\Drupal\user\UserInterface[]
+   * @return array|UserInterface[]
    *   An array of the users id or users entity.
-   *
    */
   public function getContributorUsersId($return_entity = FALSE);
 
diff --git a/src/EventSubscriber/NodeSubscriber.php b/src/EventSubscriber/NodeSubscriber.php
index 0d4bad3..d1b3646 100644
--- a/src/EventSubscriber/NodeSubscriber.php
+++ b/src/EventSubscriber/NodeSubscriber.php
@@ -2,12 +2,12 @@
 
 namespace Drupal\micro_site\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\micro_node\MicroNodeFields;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\micro_site\SiteNegotiatorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -24,41 +24,41 @@ class NodeSubscriber implements EventSubscriberInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The site negotiator.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $route_match
+   * @param CurrentRouteMatch $route_match
    *   The current route match.
    */
   public function __construct(AccountInterface $current_user, EntityTypeManagerInterface $entity_type_manager, SiteNegotiatorInterface $site_negotiator, CurrentRouteMatch $route_match) {
@@ -79,10 +79,10 @@ class NodeSubscriber implements EventSubscriberInterface {
   /**
    * This method prevent to access to node without a site_id field.
    *
-   * @param GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event object.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();
 
     // If we've got an exception, nothing to do here.
diff --git a/src/EventSubscriber/Shield.php b/src/EventSubscriber/Shield.php
index 1210cc7..3331026 100644
--- a/src/EventSubscriber/Shield.php
+++ b/src/EventSubscriber/Shield.php
@@ -2,11 +2,11 @@
 
 namespace Drupal\micro_site\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\micro_site\SiteNegotiatorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Routing\UrlGeneratorInterface;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ -32,14 +32,14 @@ class Shield implements EventSubscriberInterface {
   /**
    * The Site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The site negotiator.
    */
   public function __construct(SiteNegotiatorInterface $site_negotiator) {
@@ -58,10 +58,10 @@ class Shield implements EventSubscriberInterface {
    * // only if KernelEvents::REQUEST !!!
    * @see \Symfony\Component\HttpKernel\KernelEvents for details
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The Event to process.
    */
-  public function ShieldLoad(GetResponseEvent $event) {
+  public function ShieldLoad(RequestEvent $event) {
     // allow Drush to bypass Shield
     if (PHP_SAPI === 'cli') {
       return;
diff --git a/src/EventSubscriber/SiteRedirectSubscriber.php b/src/EventSubscriber/SiteRedirectSubscriber.php
index 1360831..f437ea4 100644
--- a/src/EventSubscriber/SiteRedirectSubscriber.php
+++ b/src/EventSubscriber/SiteRedirectSubscriber.php
@@ -2,11 +2,11 @@
 
 namespace Drupal\micro_site\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\micro_site\SiteNegotiatorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Routing\UrlGeneratorInterface;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ -28,28 +28,28 @@ class SiteRedirectSubscriber implements EventSubscriberInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The url generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;
 
@@ -61,11 +61,11 @@ class SiteRedirectSubscriber implements EventSubscriberInterface {
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    * @param \\Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
    *   The site negotiator.
@@ -89,10 +89,10 @@ class SiteRedirectSubscriber implements EventSubscriberInterface {
   /**
    * This method is called whenever the kernel.request event is dispatched.
    *
-   * @param GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event object.
    */
-  public function onKernelRequestSite(GetResponseEvent $event) {
+  public function onKernelRequestSite(RequestEvent $event) {
     $request = $event->getRequest();
     $exception = $request->get('exception');
     // If we've got an exception, nothing to do here.
diff --git a/src/EventSubscriber/TermSubscriber.php b/src/EventSubscriber/TermSubscriber.php
index 6901471..d3f0341 100644
--- a/src/EventSubscriber/TermSubscriber.php
+++ b/src/EventSubscriber/TermSubscriber.php
@@ -2,12 +2,13 @@
 
 namespace Drupal\micro_site\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Drupal\taxonomy\Entity\Term;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\micro_site\SiteNegotiatorInterface;
 use Drupal\taxonomy\TermInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -23,41 +24,41 @@ class TermSubscriber implements EventSubscriberInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The site negotiator.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $route_match
+   * @param CurrentRouteMatch $route_match
    *   The current route match.
    */
   public function __construct(AccountInterface $current_user, EntityTypeManagerInterface $entity_type_manager, SiteNegotiatorInterface $site_negotiator, CurrentRouteMatch $route_match) {
@@ -78,10 +79,10 @@ class TermSubscriber implements EventSubscriberInterface {
   /**
    * This method prevent to access to node without a site_id field.
    *
-   * @param GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event object.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();
 
     // If we've got an exception, nothing to do here.
@@ -95,7 +96,7 @@ class TermSubscriber implements EventSubscriberInterface {
       return;
     }
 
-    /** @var \Drupal\taxonomy\Entity\Term $term */
+    /** @var Term $term */
     $term = $this->routeMatch->getParameter('taxonomy_term');
     $route_name = $this->routeMatch->getRouteName();
     if ($term instanceof TermInterface && $route_name == 'entity.taxonomy_term.canonical') {
diff --git a/src/Form/SiteForm.php b/src/Form/SiteForm.php
index 0527403..bdbe9ff 100644
--- a/src/Form/SiteForm.php
+++ b/src/Form/SiteForm.php
@@ -27,28 +27,28 @@ class SiteForm extends ContentEntityForm {
   /**
    * The domain entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -56,19 +56,19 @@ class SiteForm extends ContentEntityForm {
   /**
    * Constructs a SiteForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, EntityStorageInterface $storage, RendererInterface $renderer, AccountInterface $current_user, DateFormatterInterface $date_formatter) {
diff --git a/src/Form/SiteRevisionDeleteForm.php b/src/Form/SiteRevisionDeleteForm.php
index a48c06a..f31c83a 100644
--- a/src/Form/SiteRevisionDeleteForm.php
+++ b/src/Form/SiteRevisionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micro_site\Form;
 
+use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -21,39 +22,39 @@ class SiteRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Site revision.
    *
-   * @var \Drupal\micro_site\Entity\SiteInterface
+   * @var SiteInterface
    */
   protected $revision;
 
   /**
    * The Site storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $SiteStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new SiteRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection, DateFormatterInterface $date_formatter) {
diff --git a/src/Form/SiteRevisionRevertForm.php b/src/Form/SiteRevisionRevertForm.php
index e21947a..d83c513 100644
--- a/src/Form/SiteRevisionRevertForm.php
+++ b/src/Form/SiteRevisionRevertForm.php
@@ -22,39 +22,39 @@ class SiteRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Site revision.
    *
-   * @var \Drupal\micro_site\Entity\SiteInterface
+   * @var SiteInterface
    */
   protected $revision;
 
   /**
    * The Site storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $siteStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructs a new SiteRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $site_storage
+   * @param EntityStorageInterface $site_storage
    *   The Site storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $site_storage, DateFormatterInterface $date_formatter, TimeInterface $time) {
@@ -145,12 +145,12 @@ class SiteRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\micro_site\Entity\SiteInterface $revision
+   * @param SiteInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\micro_site\Entity\SiteInterface
+   * @return SiteInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(SiteInterface $revision, FormStateInterface $form_state) {
diff --git a/src/Form/SiteRevisionRevertTranslationForm.php b/src/Form/SiteRevisionRevertTranslationForm.php
index e239c05..42ffa23 100644
--- a/src/Form/SiteRevisionRevertTranslationForm.php
+++ b/src/Form/SiteRevisionRevertTranslationForm.php
@@ -27,20 +27,20 @@ class SiteRevisionRevertTranslationForm extends SiteRevisionRevertForm {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new SiteRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Site storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, TimeInterface $time, LanguageManagerInterface $language_manager) {
diff --git a/src/Form/SiteSettingsForm.php b/src/Form/SiteSettingsForm.php
index 247ff7b..4cca640 100644
--- a/src/Form/SiteSettingsForm.php
+++ b/src/Form/SiteSettingsForm.php
@@ -27,7 +27,7 @@ class SiteSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class SiteSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/SiteTypeForm.php b/src/Form/SiteTypeForm.php
index 256ba16..5e3fd24 100644
--- a/src/Form/SiteTypeForm.php
+++ b/src/Form/SiteTypeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micro_site\Form;
 
+use Drupal\micro_site\Entity\SiteTypeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
@@ -18,7 +19,7 @@ class SiteTypeForm extends BundleEntityFormBase {
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\micro_site\Entity\SiteTypeInterface $site_type */
+    /** @var SiteTypeInterface $site_type */
     $site_type = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
diff --git a/src/PathProcessor/SiteFrontPageProcessor.php b/src/PathProcessor/SiteFrontPageProcessor.php
index 1707386..84c2f14 100644
--- a/src/PathProcessor/SiteFrontPageProcessor.php
+++ b/src/PathProcessor/SiteFrontPageProcessor.php
@@ -19,23 +19,23 @@ class SiteFrontPageProcessor implements InboundPathProcessorInterface, OutboundP
   /**
    * A config factory for retrieving required config settings.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
   /**
    * The Site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;
 
   /**
    * Constructs the site front page processor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory, SiteNegotiatorInterface $site_negotiator ) {
diff --git a/src/PiwikConfigOverrides.php b/src/PiwikConfigOverrides.php
index 3373ee2..da592db 100644
--- a/src/PiwikConfigOverrides.php
+++ b/src/PiwikConfigOverrides.php
@@ -17,7 +17,7 @@ class PiwikConfigOverrides implements ConfigFactoryOverrideInterface {
   /**
    * The active micro site or NULL.
    *
-   * @var \Drupal\micro_site\Entity\SiteInterface|NULL
+   * @var SiteInterface|NULL
    */
   protected $activeSite = NULL;
 
@@ -62,9 +62,9 @@ class PiwikConfigOverrides implements ConfigFactoryOverrideInterface {
     // I don't use here a dependency injection because of a
     // CircularReferenceException thrown when injecting the negotiator.
     if (is_null($this->activeSite)) {
-      /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+      /** @var SiteNegotiatorInterface $negotiator */
       $negotiator = \Drupal::service('micro_site.negotiator');
-      /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+      /** @var SiteInterface $site */
       $this->activeSite = $negotiator->getActiveSite();
     }
     return $this->activeSite;
diff --git a/src/Plugin/Block/MicroSiteInformationBlock.php b/src/Plugin/Block/MicroSiteInformationBlock.php
index 9ff80ea..2adce82 100644
--- a/src/Plugin/Block/MicroSiteInformationBlock.php
+++ b/src/Plugin/Block/MicroSiteInformationBlock.php
@@ -30,21 +30,21 @@ class MicroSiteInformationBlock extends BlockBase implements ContainerFactoryPlu
   /**
    * Drupal\micro_site\SiteNegotiatorInterface definition.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $siteNegotiator;
 
   /**
    * Drupal\Core\Routing\CurrentRouteMatch definition.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;
 
   /**
    * Drupal\Core\Session\AccountProxyInterface definition.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
@@ -57,11 +57,11 @@ class MicroSiteInformationBlock extends BlockBase implements ContainerFactoryPlu
    *   The plugin id.
    * @param $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The site negotiator.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route_match
+   * @param CurrentRouteMatch $current_route_match
    *   The current route match.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, SiteNegotiatorInterface $site_negotiator, CurrentRouteMatch $current_route_match, AccountProxyInterface $current_user) {
@@ -169,7 +169,7 @@ class MicroSiteInformationBlock extends BlockBase implements ContainerFactoryPlu
   /**
    * Get the current entity from the route.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    */
   protected function getCurrentEntity() {
     $entity = NULL;
@@ -186,9 +186,9 @@ class MicroSiteInformationBlock extends BlockBase implements ContainerFactoryPlu
   /**
    * Get the main site of an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
-   * @return \Drupal\micro_site\Entity\SiteInterface|null
+   * @return SiteInterface|null
    */
   protected function getMainSite(ContentEntityInterface $entity) {
     $site = NULL;
@@ -202,7 +202,7 @@ class MicroSiteInformationBlock extends BlockBase implements ContainerFactoryPlu
   /**
    * Get the secondary sites of an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
    * @return \Drupal\micro_site\Entity\SiteInterface[]|[]
    */
@@ -217,7 +217,7 @@ class MicroSiteInformationBlock extends BlockBase implements ContainerFactoryPlu
   /**
    * Get the sites all option of an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
    * @return bool
    *   TRUE if the site is published on all micro sites. Otherwise FALSE.
@@ -236,7 +236,7 @@ class MicroSiteInformationBlock extends BlockBase implements ContainerFactoryPlu
   /**
    * Get the include master option of an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *
    * @return bool|null
    *   TRUE|FALSE if the entity has the option. Otherwise NULL.
diff --git a/src/Plugin/Condition/Site.php b/src/Plugin/Condition/Site.php
index 3c53401..3abfc27 100644
--- a/src/Plugin/Condition/Site.php
+++ b/src/Plugin/Condition/Site.php
@@ -24,14 +24,14 @@ class Site extends ConditionPluginBase implements ContainerFactoryPluginInterfac
   /**
    * The domain negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;
 
   /**
    * Constructs a Site condition plugin.
    *
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The site negotiator service.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Plugin/Validation/Constraint/RegisteredFieldConstraintValidator.php b/src/Plugin/Validation/Constraint/RegisteredFieldConstraintValidator.php
index d8e4443..1aa0878 100644
--- a/src/Plugin/Validation/Constraint/RegisteredFieldConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/RegisteredFieldConstraintValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micro_site\Plugin\Validation\Constraint;
 
+use Drupal\micro_site\Entity\SiteInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
 use GuzzleHttp\Exception\RequestException;
@@ -21,11 +22,11 @@ class RegisteredFieldConstraintValidator extends ConstraintValidator {
     if (!$item = $items->first()) {
       return;
     }
-    /** @var \Drupal\micro_site\Entity\SiteInterface $entity */
+    /** @var SiteInterface $entity */
     $entity = $items->getEntity();
     $registered = $item->value;
     if ($registered) {
-      $url = $entity->getSitePath() . '/' . drupal_get_path('module', 'micro_site') . '/tests/200.png';
+      $url = $entity->getSitePath() . '/' . \Drupal::service('extension.list.module')->getPath('micro_site') . '/tests/200.png';
       try {
         $request = \Drupal::httpClient()->get($url);
         $status_code = $request->getStatusCode();
diff --git a/src/Plugin/Validation/Constraint/StatusFieldConstraintValidator.php b/src/Plugin/Validation/Constraint/StatusFieldConstraintValidator.php
index b27a625..fd72381 100644
--- a/src/Plugin/Validation/Constraint/StatusFieldConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/StatusFieldConstraintValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micro_site\Plugin\Validation\Constraint;
 
+use Drupal\micro_site\Entity\SiteInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
 use GuzzleHttp\Exception\RequestException;
@@ -19,7 +20,7 @@ class StatusFieldConstraintValidator extends ConstraintValidator {
       return;
     }
 
-    /** @var \Drupal\micro_site\Entity\SiteInterface $entity */
+    /** @var SiteInterface $entity */
     $entity = $items->getEntity();
     $registered = $entity->isRegistered();
     $status = $item->value;
diff --git a/src/Plugin/views/argument_default/Site.php b/src/Plugin/views/argument_default/Site.php
index 4fa27ba..fb223a8 100644
--- a/src/Plugin/views/argument_default/Site.php
+++ b/src/Plugin/views/argument_default/Site.php
@@ -26,14 +26,14 @@ class Site extends ArgumentDefaultPluginBase implements CacheableDependencyInter
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;
 
@@ -46,9 +46,9 @@ class Site extends ArgumentDefaultPluginBase implements CacheableDependencyInter
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The site negotiator
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $route_match, SiteNegotiatorInterface $site_negotiator) {
diff --git a/src/SiteAccessControlHandler.php b/src/SiteAccessControlHandler.php
index 95688bb..dde19a2 100644
--- a/src/SiteAccessControlHandler.php
+++ b/src/SiteAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micro_site;
 
+use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class SiteAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\micro_site\Entity\SiteInterface $entity */
+    /** @var SiteInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished() && $account->hasPermission('administer sites entities')) {
diff --git a/src/SiteConfigOverrides.php b/src/SiteConfigOverrides.php
index ffeeecc..e870524 100644
--- a/src/SiteConfigOverrides.php
+++ b/src/SiteConfigOverrides.php
@@ -17,7 +17,7 @@ class SiteConfigOverrides implements ConfigFactoryOverrideInterface {
   /**
    * The active micro site or NULL.
    *
-   * @var \Drupal\micro_site\Entity\SiteInterface|NULL
+   * @var SiteInterface|NULL
    */
   protected $activeSite = NULL;
 
@@ -42,9 +42,9 @@ class SiteConfigOverrides implements ConfigFactoryOverrideInterface {
     // I don't use here a dependency injection because of a
     // CircularReferenceException thrown when injecting the negotiator.
     if (is_null($this->activeSite)) {
-      /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+      /** @var SiteNegotiatorInterface $negotiator */
       $negotiator = \Drupal::service('micro_site.negotiator');
-      /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+      /** @var SiteInterface $site */
       $this->activeSite = $negotiator->getActiveSite();
     }
     return $this->activeSite;
diff --git a/src/SiteHtmlRouteProvider.php b/src/SiteHtmlRouteProvider.php
index 619cc6e..c9db557 100644
--- a/src/SiteHtmlRouteProvider.php
+++ b/src/SiteHtmlRouteProvider.php
@@ -52,10 +52,10 @@ class SiteHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -76,10 +76,10 @@ class SiteHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -100,10 +100,10 @@ class SiteHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -124,10 +124,10 @@ class SiteHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -148,10 +148,10 @@ class SiteHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ -172,10 +172,10 @@ class SiteHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/SiteNegotiator.php b/src/SiteNegotiator.php
index ca19e13..a72345a 100644
--- a/src/SiteNegotiator.php
+++ b/src/SiteNegotiator.php
@@ -21,21 +21,21 @@ class SiteNegotiator implements SiteNegotiatorInterface {
   /**
    * The site record returned by the lookup request.
    *
-   * @var \Drupal\micro_site\Entity\SiteInterface
+   * @var SiteInterface
    */
   protected $site;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The request stack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
@@ -43,27 +43,27 @@ class SiteNegotiator implements SiteNegotiatorInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a DomainNegotiator object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack object.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The Domain loader object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(RequestStack $requestStack, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
diff --git a/src/SiteNegotiatorInterface.php b/src/SiteNegotiatorInterface.php
index ea1e1cb..3453171 100644
--- a/src/SiteNegotiatorInterface.php
+++ b/src/SiteNegotiatorInterface.php
@@ -26,7 +26,7 @@ interface SiteNegotiatorInterface {
   /**
    * Sets the active domain.
    *
-   * @param \Drupal\micro_site\Entity\SiteInterface $site
+   * @param SiteInterface $site
    *   Sets the domain record as active for the duration of that request.
    */
   public function setActiveSite(SiteInterface $site);
@@ -97,7 +97,7 @@ interface SiteNegotiatorInterface {
    * @param bool $reset
    *   Reset the internal cache of the active site.
    *
-   * @return \Drupal\micro_site\Entity\SiteInterface
+   * @return SiteInterface
    *   The active site object.
    */
   public function getActiveSite($reset = FALSE);
@@ -111,7 +111,7 @@ interface SiteNegotiatorInterface {
    * @param bool $reset
    *   Reset the internal cache of the active site.
    *
-   * @return \Drupal\micro_site\Entity\SiteInterface
+   * @return SiteInterface
    *   The active site object.
    */
   public function getSite($reset = FALSE);
diff --git a/src/SiteStorageInterface.php b/src/SiteStorageInterface.php
index 069ff35..4927553 100644
--- a/src/SiteStorageInterface.php
+++ b/src/SiteStorageInterface.php
@@ -20,7 +20,7 @@ interface SiteStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Site revision IDs for a specific Site.
    *
-   * @param \Drupal\micro_site\Entity\SiteInterface $entity
+   * @param SiteInterface $entity
    *   The Site entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface SiteStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as Site author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface SiteStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\micro_site\Entity\SiteInterface $entity
+   * @param SiteInterface $entity
    *   The Site entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface SiteStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all Site with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/SiteTypeHtmlRouteProvider.php b/src/SiteTypeHtmlRouteProvider.php
index bd576ff..917d284 100644
--- a/src/SiteTypeHtmlRouteProvider.php
+++ b/src/SiteTypeHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class SiteTypeHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
diff --git a/src/StackMiddleware/MicroSiteMiddleware.php b/src/StackMiddleware/MicroSiteMiddleware.php
index 58c51e9..38f7c47 100644
--- a/src/StackMiddleware/MicroSiteMiddleware.php
+++ b/src/StackMiddleware/MicroSiteMiddleware.php
@@ -18,23 +18,23 @@ class MicroSiteMiddleware implements HttpKernelInterface {
   /**
    * The decorated kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;
 
   /**
    * The Site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;
 
   /**
    * Constructs a BanMiddleware object.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   The decorated kernel.
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The Site negotiator.
    */
   public function __construct(HttpKernelInterface $http_kernel, SiteNegotiatorInterface $site_negotiator) {
