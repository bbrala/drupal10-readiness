modules/contrib/whoops/src/EventSubscriber/DefaultExceptionSubscriber.php
modules/contrib/whoops/src/EventSubscriber/ExceptionSubscriberBase.php
modules/contrib/whoops/src/EventSubscriber/JsonExceptionSubscriber.php
modules/contrib/whoops/src/StackMiddleware/WhoopsMiddleware.php
modules/contrib/whoops/tests/modules/whoops_test/src/Controller/WhoopsTestController.php
modules/contrib/whoops/tests/src/Functional/RequirementsTest.php
modules/contrib/whoops/tests/src/Functional/WhoopsTest.php
modules/contrib/whoops/tests/src/Unit/DefaultExceptionSubscriberTest.php
modules/contrib/whoops/tests/src/Unit/JsonExceptionSubscriberTest.php
modules/contrib/whoops/whoops.install

5 files with changes
====================

1) modules/contrib/whoops/tests/src/Unit/JsonExceptionSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\whoops\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Tests\UnitTestCase;
 use Drupal\whoops\EventSubscriber\JsonExceptionSubscriber;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpException;
 use Symfony\Component\HttpKernel\HttpKernelInterface;

@@ @@
  */
 class JsonExceptionSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The mocked HTTP kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $kernel;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->kernel = $this->prophesize(HttpKernelInterface::class)->reveal();
@@ @@
     $request->setRequestFormat('json');

     $exception = new \RuntimeException('Houston, we have a problem');
-    $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
+    $event = new ExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);

     $subscriber = new JsonExceptionSubscriber();
     $subscriber->onException($event);
@@ @@
     $request->setRequestFormat('hal_json');

     $exception = new \RuntimeException('Houston, we have a problem');
-    $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
+    $event = new ExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);

     $subscriber = new JsonExceptionSubscriber();
     $subscriber->onException($event);
@@ @@
     $request->setRequestFormat('html');

     $exception = new \Exception('Houston, we have a problem');
-    $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
+    $event = new ExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);

     $subscriber = new JsonExceptionSubscriber();
     $subscriber->onException($event);
@@ @@
       'X-Custom' => 'test',
     ];
     $exception = new HttpException(406, 'Houston, we have a problem', NULL, $headers);
-    $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
+    $event = new ExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);

     $subscriber = new JsonExceptionSubscriber();
     $subscriber->onException($event);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/whoops/tests/src/Unit/DefaultExceptionSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\whoops\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Tests\UnitTestCase;
 use Drupal\whoops\EventSubscriber\DefaultExceptionSubscriber;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpException;
 use Symfony\Component\HttpKernel\HttpKernelInterface;

@@ @@
  */
 class DefaultExceptionSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The mocked HTTP kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $kernel;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->kernel = $this->prophesize(HttpKernelInterface::class)->reveal();
@@ @@
     $request = Request::create('/whoops');

     $exception = new \RuntimeException('Houston, we have a problem');
-    $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
+    $event = new ExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);

     $subscriber = new DefaultExceptionSubscriber();
     $subscriber->onException($event);
@@ @@
     $request->setRequestFormat('unknown');

     $exception = new \Exception('Houston, we have a problem');
-    $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
+    $event = new ExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);

     $subscriber = new DefaultExceptionSubscriber();
     $subscriber->onException($event);
@@ @@
       'X-Custom' => 'test',
     ];
     $exception = new HttpException(406, 'Houston, we have a problem', NULL, $headers);
-    $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);
+    $event = new ExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, $exception);

     $subscriber = new DefaultExceptionSubscriber();
     $subscriber->onException($event);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/whoops/tests/modules/whoops_test/src/Controller/WhoopsTestController.php:24

    ---------- begin diff ----------
@@ @@
    * NOTE: Since all 4xx Http Status code errors are caught by the core's
    * subscribers use a non existent Http Status code for test the behaviour.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    */
   public function httpException() {
     throw new HttpException(599, 'Non Existent Http Status');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/whoops/src/StackMiddleware/WhoopsMiddleware.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The wrapped HTTP kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $kernel;

@@ @@
   /**
    * Constructs a new WhoopsMiddleware.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $app
+   * @param HttpKernelInterface $app
    *   The wrapped HTTP kernel.
    */
   public function __construct(HttpKernelInterface $app) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/whoops/src/EventSubscriber/ExceptionSubscriberBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\whoops\EventSubscriber;

+use Whoops\Handler\HandlerInterface;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\EventSubscriber\MainContentViewSubscriber;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Whoops\Run as Whoops;
@@ @@
   /**
    * Gets the handler dedicated to handle the exception in this subscriber.
    *
-   * @return \Whoops\Handler\HandlerInterface
+   * @return HandlerInterface
    *   The exception handler.
    */
   abstract protected function getHandler();
@@ @@
   /**
    * Determines whether the exception should be handled by this subscriber.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
    * @return bool
@@ @@
   /**
    * Handles exceptions for this subscriber.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The event to process.
    */
-  public function onException(GetResponseForExceptionEvent $event) {
+  public function onException(ExceptionEvent $event) {
     if ($this->applies($event->getRequest())) {
-      $exception = $event->getException();
+      $exception = $event->getThrowable();
       $response = $this->exceptionToResponse($exception);
       $event->setResponse($response);
     }
@@ @@
    * @param \Exception $exception
    *   The exception to be handled.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The error response associated with the given exception.
    */
   protected function exceptionToResponse(\Exception $exception) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 5 files have been changed by Rector                                       

