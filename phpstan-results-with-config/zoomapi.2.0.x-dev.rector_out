modules/contrib/zoomapi/src/Client/ZoomApiClient.php
modules/contrib/zoomapi/src/Controller/ZoomApiWebhooksController.php
modules/contrib/zoomapi/src/Event/ZoomApiEvents.php
modules/contrib/zoomapi/src/Event/ZoomApiWebhookEvent.php
modules/contrib/zoomapi/src/Form/ConfigForm.php
modules/contrib/zoomapi/src/Form/ConfigFormBase.php
modules/contrib/zoomapi/src/ZoomApiClientInterface.php
modules/contrib/zoomapi/tests/src/Functional/ApiRequestTest.php
modules/contrib/zoomapi/tests/src/Functional/ConfigLoadTest.php
modules/contrib/zoomapi/tests/src/Functional/WebhookPostTest.php
modules/contrib/zoomapi/zoomapi.install

6 files with changes
====================

1) modules/contrib/zoomapi/tests/src/Functional/WebhookPostTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\zoomapi\Functional;

+use Drupal\key\KeyInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\key\Entity\Key;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * A key entity to use for testing.
    *
-   * @var \Drupal\key\KeyInterface
+   * @var KeyInterface
    */
   protected $testKey;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer zoom api', 'administer keys']);
     $this->drupalLogin($this->user);
@@ @@
     $edit = [
       'webhook_verification_token' => 'zoomapi_webhook_test_key',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');

     $url = Url::fromRoute('zoomapi.webhooks')
       ->setAbsolute()
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/zoomapi/tests/src/Functional/ConfigLoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\zoomapi\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer zoom api']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/zoomapi/tests/src/Functional/ApiRequestTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\zoomapi\Functional;

+use Drupal\key\KeyInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\key\Functional\KeyTestTrait;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * A key entity to use for testing.
    *
-   * @var \Drupal\key\KeyInterface
+   * @var KeyInterface
    */
   protected $testKey;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer zoom api', 'administer keys']);
     $this->drupalLogin($this->user);
@@ @@
       'api_key' => 'test_zoomapi_key',
       'api_secret' => 'test_zoomapi_secret',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');

     // Post to the webhook controller.
     $client = \Drupal::service('zoomapi.client');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/zoomapi/src/Event/ZoomApiWebhookEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\zoomapi\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Symfony\Component\HttpFoundation\Request;

 /**
@@ @@
   /**
    * Type of the incoming post.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
    *   The type of webhook incoming.
    * @param array $payload
    *   The data posted.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The orignal request.
    */
   public function __construct($event, array $payload, Request $request) {
@@ @@
   /**
    * Return request.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   The original request in case you need more.
    */
   public function getRequest() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/zoomapi/src/Controller/ZoomApiWebhooksController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\zoomapi\Controller;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The Immutable Config Object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The KeyRepositoryInterface.
    *
-   * @var \Drupal\key\KeyRepositoryInterface
+   * @var KeyRepositoryInterface
    */
   protected $keyRepository;

@@ @@
   /**
    * Psr\Log\LoggerInterface definition.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Symfony\Component\HttpFoundation\RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Symfony\Component\EventDispatcher\EventDispatcherInterface definition.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructs a new WebhookController object.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger interface.
-   * @param \Drupal\key\KeyRepositoryInterface $key_repository
+   * @param KeyRepositoryInterface $key_repository
    *   Key repository interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory interface.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   Request stack.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher interface.
    */
   public function __construct(
@@ @@
   /**
    * Capture the incoming payload.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A simple JSON response.
    */
   public function capture(Request $request) {
@@ @@
     // Var $data['payload'] = Payload data from Zoom.
     // Var $request = The complete request from Zoom.
     $dispatch = new ZoomApiWebhookEvent($data['event'], $data['payload'], $request);
-    $this->eventDispatcher->dispatch(ZoomApiEvents::WEBHOOK_POST, $dispatch);
+    $this->eventDispatcher->dispatch($dispatch, ZoomApiEvents::WEBHOOK_POST);

     $response = [
       'success' => TRUE,
@@ @@
   /**
    * Compares local webhook token to incoming.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   AccessResult allowed or forbidden.
    */
   public function authorize() {
@@ @@
   /**
    * Gets the Zoom authorize header from the incoming request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The incoming request.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/zoomapi/src/Client/ZoomApiClient.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\zoomapi\Client;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\key\KeyRepositoryInterface;
@@ @@
   /**
    * The Immutable Config Object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The KeyRepositoryInterface.
    *
-   * @var \Drupal\key\KeyRepositoryInterface
+   * @var KeyRepositoryInterface
    */
   protected $keyRepository;

@@ @@
   /**
    * An http client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * Psr\Log\LoggerInterface definition.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Drupal\Component\Datetime\Time definition.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;

@@ @@
   /**
    * Constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   Client interface.
-   * @param \Drupal\key\KeyRepositoryInterface $key_repository
+   * @param KeyRepositoryInterface $key_repository
    *   Key repository interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory interface.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger interface.
-   * @param \Drupal\Component\Datetime\Time $time
+   * @param Time $time
    *   Time.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 6 files have been changed by Rector                                       

