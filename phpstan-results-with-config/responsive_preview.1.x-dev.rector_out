modules/contrib/responsive_preview/responsive_preview.module
modules/contrib/responsive_preview/src/Cache/RouteAdminCacheContext.php
modules/contrib/responsive_preview/src/DeviceHtmlRouteProvider.php
modules/contrib/responsive_preview/src/DeviceInterface.php
modules/contrib/responsive_preview/src/DeviceListBuilder.php
modules/contrib/responsive_preview/src/Entity/Device.php
modules/contrib/responsive_preview/src/Form/DeviceDeleteForm.php
modules/contrib/responsive_preview/src/Form/DeviceForm.php
modules/contrib/responsive_preview/src/Plugin/Block/ResponsivePreviewBlock.php
modules/contrib/responsive_preview/src/ResponsivePreview.php
modules/contrib/responsive_preview/tests/src/Functional/ResponsivePreviewAdminTest.php
modules/contrib/responsive_preview/tests/src/Functional/ResponsivePreviewBlockTest.php
modules/contrib/responsive_preview/tests/src/Functional/ResponsivePreviewContentFormTest.php
modules/contrib/responsive_preview/tests/src/Functional/ResponsivePreviewTestBase.php
modules/contrib/responsive_preview/tests/src/Functional/ResponsivePreviewToolbarTest.php
modules/contrib/responsive_preview/tests/src/FunctionalJavascript/ResponsivePreviewTest.php

8 files with changes
====================

1) modules/contrib/responsive_preview/tests/src/FunctionalJavascript/ResponsivePreviewTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\responsive_preview\FunctionalJavascript;

+use Drupal\user\UserInterface;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * The user for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $previewUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     NodeType::create(['type' => 'article', 'name' => 'Article'])->save();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/responsive_preview/tests/src/Functional/ResponsivePreviewToolbarTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\responsive_preview\Functional;

+use Drupal\user\UserInterface;
 /**
  * Tests the toolbar integration.
  *
@@ @@
   /**
    * The user for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $previewUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->previewUser = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/responsive_preview/tests/src/Functional/ResponsivePreviewContentFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\responsive_preview\Functional;

+use Drupal\user\UserInterface;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;

@@ @@
   /**
    * The user for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $previewUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/responsive_preview/tests/src/Functional/ResponsivePreviewAdminTest.php:64

    ---------- begin diff ----------
@@ @@
     // Ensures that all default devices are listed in the table.
     $default_devices = $this->getDefaultDevices();
     foreach ($default_devices as $label) {
-      $xpath = $this->assertSession()
-        ->buildXPathQuery('//table//tr//td[text()=:text]', [':text' => $label]);
+      $xpath = $this->assertSession()->buildXPathQuery('//table//tr//td[text()=:text]', [':text' => $label]);
       $this->assertSession()->elementExists('xpath', $xpath);
     }

@@ @@
       'dimensions[dppx]' => '3',
       'orientation' => 'portrait',
     ];
-    $this->drupalPostForm('admin/config/user-interface/responsive-preview/add', $edit, $this->t('Save'));
+    $this->drupalGet('admin/config/user-interface/responsive-preview/add');
+    $this->submitForm($edit, $this->t('Save'));
     $this->assertSession()
       ->responseContains($this->t('Device %name has been added.', ['%name' => 'Smartwatch']));
     $this->assertSession()
       ->elementExists('xpath', '//table//tr//td[text()="Smartwatch"]');
+    $this->drupalGet('admin/config/user-interface/responsive-preview/add');

     // Ensures that is not possible to insert a non-unique device id.
-    $this->drupalPostForm('admin/config/user-interface/responsive-preview/add', $edit, $this->t('Save'));
+    $this->submitForm($edit, $this->t('Save'));
     $this->assertSession()
       ->responseContains($this->t('The machine-readable name is already in use. It must be unique.'));

@@ @@
       'dimensions[dppx]' => '2.5',
       'orientation' => 'landscape',
     ];
-    $this->drupalPostForm('admin/config/user-interface/responsive-preview/small/edit', $edit, $this->t('Save'));
+    $this->drupalGet('admin/config/user-interface/responsive-preview/small/edit');
+    $this->submitForm($edit, $this->t('Save'));
     $this->assertSession()
       ->responseContains($this->t('Device %name has been updated.', ['%name' => 'Smart phone updated']));
     $this->assertSession()
       ->elementExists('xpath', '//table//tr//td[text()="Smart phone updated"]');
     $this->assertSession()->checkboxChecked('entities[small][status]');
+    $this->drupalGet('admin/config/user-interface/responsive-preview/large/delete');

     // Tests the delete of a predefined devices.
-    $this->drupalPostForm('admin/config/user-interface/responsive-preview/large/delete', [], $this->t('Delete'));
+    $this->submitForm([], $this->t('Delete'));
     $this->assertSession()
       ->responseContains($this->t('Device %name has been deleted.', ['%name' => 'Typical desktop']));
     $this->assertSession()
@@ @@
       'entities[small][status]' => 0,
       'entities[smartwatch][status]' => 0,
     ];
-    $this->drupalPostForm('admin/config/user-interface/responsive-preview', $edit, $this->t('Save'));
+    $this->drupalGet('admin/config/user-interface/responsive-preview');
+    $this->submitForm($edit, $this->t('Save'));
     $this->assertSession()
       ->responseContains($this->t('The device settings have been updated.'));
     $this->assertSession()->checkboxChecked('entities[medium][status]');
    ----------- end diff -----------

Applied rules:
 * BuildXPathQueryRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/responsive_preview/src/ResponsivePreview.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\responsive_preview;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\InvokeCommand;
 use Drupal\Core\Ajax\SettingsCommand;
@@ @@
   /**
    * Admin context service.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $routerAdminContext;

@@ @@
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPathStack;

@@ @@
   /**
    * The route match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * ResponsivePreview constructor.
    *
-   * @param \Drupal\Core\Routing\AdminContext $adminContext
+   * @param AdminContext $adminContext
    *   Admin context service.
-   * @param \Drupal\Core\Path\CurrentPathStack $currentPathStack
+   * @param CurrentPathStack $currentPathStack
    *   CurrentPathStack service to get the path.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The route match service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
    */
   public function __construct(AdminContext $adminContext, CurrentPathStack $currentPathStack, RouteMatchInterface $routeMatch, EntityTypeManagerInterface $entityTypeManager, AccountProxyInterface $currentUser) {
@@ @@
     }
     elseif ($form = $this->routeMatch->getRouteObject()->getDefault("_entity_form")) {
       $entity_type_id = current(explode('.', $form));
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       if (!($entity = $this->routeMatch->getParameter($entity_type_id))) {
         return NULL;
       }
@@ @@
   /**
    * Preview is enabled.
    *
-   * @param \Drupal\node\NodeTypeInterface $node_type
+   * @param NodeTypeInterface $node_type
    *   The node type.
    *
    * @return bool
@@ @@
    *
    * @return array
    *   A render array of enabled devices.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getRenderableDevicesList() {
     $links = [];

-    /** @var \Drupal\responsive_preview\Entity\Device[] $devices */
+    /** @var Device[] $devices */
     $devices = $this->entityTypeManager
       ->getStorage('responsive_preview_device')
       ->loadByProperties(['status' => 1]);
@@ @@
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    * @param string $form_id
    *   Form ID.
@@ @@
    *
    * @param array $form
    *   From array object.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|array
+   * @return AjaxResponse|array
    *   Returns AJAX response object.
    */
   public static function handleAjaxDevicePreview(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/responsive_preview/src/Plugin/Block/ResponsivePreviewBlock.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The router admin context service.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\AdminContext $admin_context
+   * @param AdminContext $admin_context
    *   The router admin context service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\responsive_preview\ResponsivePreview $responsivePreview
+   * @param ResponsivePreview $responsivePreview
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AdminContext $admin_context, EntityTypeManagerInterface $entity_type_manager, AccountProxyInterface $currentUser, ResponsivePreview $responsivePreview) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/responsive_preview/src/Cache/RouteAdminCacheContext.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The route admin context service.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $routeAdminContext;

@@ @@
   /**
    * Constructs a new RouteCacheContext class.
    *
-   * @param \Drupal\Core\Routing\AdminContext $route_admin_context
+   * @param AdminContext $route_admin_context
    *   The route admin context service.
    */
   public function __construct(AdminContext $route_admin_context) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/responsive_preview/responsive_preview.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\responsive_preview\ResponsivePreview;
 /**
  * @file
  * Provides a component that previews the a page in various device dimensions.
@@ @@
  * Implements hook_toolbar().
  */
 function responsive_preview_toolbar() {
-  /** @var \Drupal\responsive_preview\ResponsivePreview $responsivePreviewService */
+  /** @var ResponsivePreview $responsivePreviewService */
   $responsivePreviewService = \Drupal::service('responsive_preview');

   return $responsivePreviewService->previewToolbar();
@@ @@
 function responsive_preview_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   // Add alter of form for responsive preview triggering element. So that
   // responsive preview of non saved node entity is can be executed.
-  /** @var \Drupal\responsive_preview\ResponsivePreview $responsivePreviewService */
+  /** @var ResponsivePreview $responsivePreviewService */
   $responsivePreviewService = \Drupal::service('responsive_preview');

   $responsivePreviewService->formAlter($form, $form_state, $form_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

