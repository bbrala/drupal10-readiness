diff --git a/communication.api.php b/communication.api.php
index cb082e7..6427155 100644
--- a/communication.api.php
+++ b/communication.api.php
@@ -1,24 +1,25 @@
 <?php
 
+use Drupal\communication\Entity\CommunicationInterface;
 /**
  * Act before an operation.
  *
  * To alter the options, use an event instead.
  *
- * @param \Drupal\communication\Entity\CommunicationInterface $communication
+ * @param CommunicationInterface $communication
  * @param array $options
  * @param $operation
  */
-function hook_pre_communication_operation(\Drupal\communication\Entity\CommunicationInterface $communication, array $options, $operation) {
+function hook_pre_communication_operation(CommunicationInterface $communication, array $options, $operation) {
 
 }
 
 /**
  * Act before a specific operation.
  *
- * @param \Drupal\communication\Entity\CommunicationInterface $communication
+ * @param CommunicationInterface $communication
  * @param array $options
  */
-function hook_pre_communication_OPERATION_ID(\Drupal\communication\Entity\CommunicationInterface $communication, array $options) {
+function hook_pre_communication_OPERATION_ID(CommunicationInterface $communication, array $options) {
 
 }
diff --git a/communication.install b/communication.install
index 1ca7480..012f266 100644
--- a/communication.install
+++ b/communication.install
@@ -1,5 +1,13 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Field\FieldStorageDefinitionListenerInterface;
+use Drupal\Core\Field\FieldDefinitionListenerInterface;
+use Drupal\Core\Entity\EntityBundleListenerInterface;
+use Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface;
+use Drupal\communication\CommunicationModePluginManager;
+use Drupal\communication\Plugin\Communication\Mode\ModeInterface;
+use Drupal\communication\Plugin\Communication\ParticipantType\ParticipantTypeInterface;
 use Drupal\communication\Entity\Communication;
 use Drupal\communication\Entity\CommunicationParticipant;
 use Drupal\Core\Entity\ContentEntityType;
@@ -13,15 +21,15 @@ use Drupal\entity\BundleFieldDefinition;
  * Install all fields.
  */
 function communication_install() {
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+  /** @var EntityTypeManagerInterface $entity_type_manager */
   $entity_type_manager = \Drupal::service('entity_type.manager');
-  /** @var \Drupal\Core\Field\FieldStorageDefinitionListenerInterface $field_storage_definition_listener */
+  /** @var FieldStorageDefinitionListenerInterface $field_storage_definition_listener */
   $field_storage_definition_listener = \Drupal::service('field_storage_definition.listener');
-  /** @var \Drupal\Core\Field\FieldDefinitionListenerInterface $field_definition_listener */
+  /** @var FieldDefinitionListenerInterface $field_definition_listener */
   $field_definition_listener = \Drupal::service('field_definition.listener');
-  /** @var \Drupal\Core\Entity\EntityBundleListenerInterface $entity_bundle_listener */
+  /** @var EntityBundleListenerInterface $entity_bundle_listener */
   $entity_bundle_listener = \Drupal::service('entity_bundle.listener');
-  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $update_manager */
+  /** @var EntityDefinitionUpdateManagerInterface $update_manager */
   $update_manager = \Drupal::entityDefinitionUpdateManager();
 
   $definition = BaseFieldDefinition::create('string')
@@ -44,15 +52,15 @@ function communication_install() {
   $communication_base_field_definitions = Communication::baseFieldDefinitions(
     $entity_type_manager->getDefinition('communication')
   );
-  /** @var \Drupal\communication\CommunicationModePluginManager $mode_manager */
+  /** @var CommunicationModePluginManager $mode_manager */
   $mode_manager = \Drupal::service('plugin.manager.communication.mode');
   foreach ($mode_manager->getDefinitions() as $plugin_id => $definition) {
     $entity_bundle_listener->onBundleCreate($plugin_id, 'communication');
 
-    /** @var \Drupal\communication\Plugin\Communication\Mode\ModeInterface $plugin */
+    /** @var ModeInterface $plugin */
     $plugin = $mode_manager->createInstance($plugin_id);
 
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $bundle_field_definitions */
+    /** @var BaseFieldDefinition[] $bundle_field_definitions */
     $bundle_field_definitions = $plugin->communicationFieldDefinitions($communication_base_field_definitions);
     foreach ($bundle_field_definitions as $name => $field_definition) {
       $field_definition->setName($name);
@@ -68,15 +76,15 @@ function communication_install() {
   $participant_base_field_definitions = CommunicationParticipant::baseFieldDefinitions(
     $entity_type_manager->getDefinition('communication_participant')
   );
-  /** @var \Drupal\communication\CommunicationModePluginManager $participant_type_manager */
+  /** @var CommunicationModePluginManager $participant_type_manager */
   $participant_type_manager = \Drupal::service('plugin.manager.communication.participant_type');
   foreach ($participant_type_manager->getDefinitions() as $plugin_id => $definition) {
     $entity_bundle_listener->onBundleCreate($plugin_id, 'communication_participant');
 
-    /** @var \Drupal\communication\Plugin\Communication\ParticipantType\ParticipantTypeInterface $plugin */
+    /** @var ParticipantTypeInterface $plugin */
     $plugin = $participant_type_manager->createInstance($plugin_id);
 
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $bundle_field_definitions */
+    /** @var BaseFieldDefinition[] $bundle_field_definitions */
     $bundle_field_definitions = $plugin->communicationParticipantFieldDefinitions($participant_base_field_definitions);
     foreach ($bundle_field_definitions as $name => $field_definition) {
       $field_definition->setName($name);
@@ -116,9 +124,9 @@ function communication_update_8001() {
  * Install all fields.
  */
 function communication_update_8002() {
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+  /** @var EntityTypeManagerInterface $entity_type_manager */
   $entity_type_manager = \Drupal::service('entity_type.manager');
-  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $update_manager */
+  /** @var EntityDefinitionUpdateManagerInterface $update_manager */
   $update_manager = \Drupal::entityDefinitionUpdateManager();
 
   $definition = BaseFieldDefinition::create('string')
@@ -141,13 +149,13 @@ function communication_update_8002() {
   $communication_base_field_definitions = Communication::baseFieldDefinitions(
     $entity_type_manager->getDefinition('communication')
   );
-  /** @var \Drupal\communication\CommunicationModePluginManager $mode_manager */
+  /** @var CommunicationModePluginManager $mode_manager */
   $mode_manager = \Drupal::service('plugin.manager.communication.mode');
   foreach ($mode_manager->getDefinitions() as $plugin_id => $definition) {
-    /** @var \Drupal\communication\Plugin\Communication\Mode\ModeInterface $plugin */
+    /** @var ModeInterface $plugin */
     $plugin = $mode_manager->createInstance($plugin_id);
 
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $bundle_field_definitions */
+    /** @var BaseFieldDefinition[] $bundle_field_definitions */
     $bundle_field_definitions = $plugin->communicationFieldDefinitions($communication_base_field_definitions);
     foreach ($bundle_field_definitions as $name => $field_definition) {
       $update_manager->installFieldStorageDefinition(
@@ -163,13 +171,13 @@ function communication_update_8002() {
   $participant_base_field_definitions = CommunicationParticipant::baseFieldDefinitions(
     $entity_type_manager->getDefinition('communication_participant')
   );
-  /** @var \Drupal\communication\CommunicationModePluginManager $participant_type_manager */
+  /** @var CommunicationModePluginManager $participant_type_manager */
   $participant_type_manager = \Drupal::service('plugin.manager.communication.participant_type');
   foreach ($participant_type_manager->getDefinitions() as $plugin_id => $definition) {
-    /** @var \Drupal\communication\Plugin\Communication\ParticipantType\ParticipantTypeInterface $plugin */
+    /** @var ParticipantTypeInterface $plugin */
     $plugin = $participant_type_manager->createInstance($plugin_id);
 
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $bundle_field_definitions */
+    /** @var BaseFieldDefinition[] $bundle_field_definitions */
     $bundle_field_definitions = $plugin->communicationParticipantFieldDefinitions($participant_base_field_definitions);
     foreach ($bundle_field_definitions as $name => $field_definition) {
       $update_manager->installFieldStorageDefinition(
@@ -211,9 +219,9 @@ function communication_update_8003() {
  * Install all fields.
  */
 function communication_update_8004() {
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+  /** @var EntityTypeManagerInterface $entity_type_manager */
   $entity_type_manager = \Drupal::service('entity_type.manager');
-  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $update_manager */
+  /** @var EntityDefinitionUpdateManagerInterface $update_manager */
   $update_manager = \Drupal::entityDefinitionUpdateManager();
 
   $definition = BaseFieldDefinition::create('string')
@@ -236,13 +244,13 @@ function communication_update_8004() {
   $communication_base_field_definitions = Communication::baseFieldDefinitions(
     $entity_type_manager->getDefinition('communication')
   );
-  /** @var \Drupal\communication\CommunicationModePluginManager $mode_manager */
+  /** @var CommunicationModePluginManager $mode_manager */
   $mode_manager = \Drupal::service('plugin.manager.communication.mode');
   foreach ($mode_manager->getDefinitions() as $plugin_id => $definition) {
-    /** @var \Drupal\communication\Plugin\Communication\Mode\ModeInterface $plugin */
+    /** @var ModeInterface $plugin */
     $plugin = $mode_manager->createInstance($plugin_id);
 
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $bundle_field_definitions */
+    /** @var BaseFieldDefinition[] $bundle_field_definitions */
     $bundle_field_definitions = $plugin->communicationFieldDefinitions($communication_base_field_definitions);
     foreach ($bundle_field_definitions as $name => $field_definition) {
       $update_manager->installFieldStorageDefinition(
@@ -258,13 +266,13 @@ function communication_update_8004() {
   $participant_base_field_definitions = CommunicationParticipant::baseFieldDefinitions(
     $entity_type_manager->getDefinition('communication_participant')
   );
-  /** @var \Drupal\communication\CommunicationModePluginManager $participant_type_manager */
+  /** @var CommunicationModePluginManager $participant_type_manager */
   $participant_type_manager = \Drupal::service('plugin.manager.communication.participant_type');
   foreach ($participant_type_manager->getDefinitions() as $plugin_id => $definition) {
-    /** @var \Drupal\communication\Plugin\Communication\ParticipantType\ParticipantTypeInterface $plugin */
+    /** @var ParticipantTypeInterface $plugin */
     $plugin = $participant_type_manager->createInstance($plugin_id);
 
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $bundle_field_definitions */
+    /** @var BaseFieldDefinition[] $bundle_field_definitions */
     $bundle_field_definitions = $plugin->communicationParticipantFieldDefinitions($participant_base_field_definitions);
     foreach ($bundle_field_definitions as $name => $field_definition) {
       $update_manager->installFieldStorageDefinition(
@@ -321,13 +329,13 @@ function communication_update_8007() {
   $communication_base_field_definitions = Communication::baseFieldDefinitions(
     $entity_type_manager->getDefinition('communication')
   );
-  /** @var \Drupal\communication\CommunicationModePluginManager $mode_manager */
+  /** @var CommunicationModePluginManager $mode_manager */
   $mode_manager = \Drupal::service('plugin.manager.communication.mode');
   foreach ($mode_manager->getDefinitions() as $plugin_id => $definition) {
-    /** @var \Drupal\communication\Plugin\Communication\Mode\ModeInterface $plugin */
+    /** @var ModeInterface $plugin */
     $plugin = $mode_manager->createInstance($plugin_id);
 
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $bundle_field_definitions */
+    /** @var BaseFieldDefinition[] $bundle_field_definitions */
     $bundle_field_definitions = $plugin->communicationFieldDefinitions($communication_base_field_definitions);
     foreach ($bundle_field_definitions as $name => $field_definition) {
       $field_definition->setName($name);
@@ -341,13 +349,13 @@ function communication_update_8007() {
   $participant_base_field_definitions = CommunicationParticipant::baseFieldDefinitions(
     $entity_type_manager->getDefinition('communication_participant')
   );
-  /** @var \Drupal\communication\CommunicationModePluginManager $participant_type_manager */
+  /** @var CommunicationModePluginManager $participant_type_manager */
   $participant_type_manager = \Drupal::service('plugin.manager.communication.participant_type');
   foreach ($participant_type_manager->getDefinitions() as $plugin_id => $definition) {
-    /** @var \Drupal\communication\Plugin\Communication\ParticipantType\ParticipantTypeInterface $plugin */
+    /** @var ParticipantTypeInterface $plugin */
     $plugin = $participant_type_manager->createInstance($plugin_id);
 
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $bundle_field_definitions */
+    /** @var BaseFieldDefinition[] $bundle_field_definitions */
     $bundle_field_definitions = $plugin->communicationParticipantFieldDefinitions($participant_base_field_definitions);
     foreach ($bundle_field_definitions as $name => $field_definition) {
       $field_definition->setName($name);
diff --git a/communication.module b/communication.module
index a141588..1966ff7 100644
--- a/communication.module
+++ b/communication.module
@@ -1,5 +1,19 @@
 <?php
 
+use Drupal\communication\CommunicationModePluginManager;
+use Drupal\communication\Plugin\Communication\Mode\ModeInterface;
+use Drupal\communication\CommunicationParticipantTypePluginManager;
+use Drupal\communication\OperationPluginManager;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Field\FieldStorageDefinitionListenerInterface;
+use Drupal\Core\Field\FieldDefinitionListenerInterface;
+use Drupal\Core\Entity\EntityBundleListenerInterface;
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\communication\Plugin\Communication\ParticipantType\ParticipantTypeInterface;
+use Drupal\communication\Entity\CommunicationInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\communication\Ajax\SetFormValueCommand;
 use Drupal\communication\Entity\Communication;
 use Drupal\communication\Entity\CommunicationParticipant;
@@ -17,12 +31,12 @@ use Drupal\entity\BundleFieldDefinition;
 function communication_entity_bundle_info() {
   $bundles = [];
 
-  /** @var \Drupal\communication\CommunicationModePluginManager $mode_manager */
+  /** @var CommunicationModePluginManager $mode_manager */
   $mode_manager = \Drupal::service('plugin.manager.communication.mode');
   foreach ($mode_manager->getDefinitions() as $plugin_id => $definition) {
     $bundles['communication'][$plugin_id]['label'] = $definition['label'];
 
-    /** @var \Drupal\communication\Plugin\Communication\Mode\ModeInterface $plugin */
+    /** @var ModeInterface $plugin */
     $plugin = $mode_manager->createInstance($plugin_id);
     foreach ($plugin->supportedEvents() as $event_type => $event_info) {
       if (!isset($bundles['communication_event'][$event_type])) {
@@ -33,7 +47,7 @@ function communication_entity_bundle_info() {
     }
   }
 
-  /** @var \Drupal\communication\CommunicationParticipantTypePluginManager $participant_type_manager */
+  /** @var CommunicationParticipantTypePluginManager $participant_type_manager */
   $participant_type_manager = \Drupal::service('plugin.manager.communication.participant_type');
   foreach ($participant_type_manager->getDefinitions() as $plugin_id => $definition) {
     $bundles['communication_participant'][$plugin_id]['label'] = $definition['label'];
@@ -112,7 +126,7 @@ function communication_entity_field_storage_info(EntityTypeInterface $entity_typ
   if ($entity_type->id() === 'communication') {
     $base_field_definitions = Communication::baseFieldDefinitions($entity_type);
 
-    /** @var \Drupal\communication\CommunicationModePluginManager $mode_manager */
+    /** @var CommunicationModePluginManager $mode_manager */
     $mode_manager = \Drupal::service('plugin.manager.communication.mode');
     foreach ($mode_manager->getDefinitions() as $id => $definition) {
       foreach ($mode_manager->createInstance($id)->communicationFieldDefinitions($base_field_definitions) as $field_name => $field_definition) {
@@ -126,7 +140,7 @@ function communication_entity_field_storage_info(EntityTypeInterface $entity_typ
   if ($entity_type->id() === 'communication_participant') {
     $base_field_definitions = CommunicationParticipant::baseFieldDefinitions($entity_type);
 
-    /** @var \Drupal\communication\CommunicationParticipantTypePluginManager $participant_type_manager */
+    /** @var CommunicationParticipantTypePluginManager $participant_type_manager */
     $participant_type_manager = \Drupal::service('plugin.manager.communication.participant_type');
     foreach ($participant_type_manager->getDefinitions() as $id => $definition) {
       foreach ($participant_type_manager->createInstance($id)->communicationParticipantFieldDefinitions($base_field_definitions) as $field_name => $field_definition) {
@@ -144,7 +158,7 @@ function communication_entity_field_storage_info(EntityTypeInterface $entity_typ
  * Get communication event operation options.
  */
 function communication_event_operation_options() {
-  /** @var \Drupal\communication\OperationPluginManager $manager */
+  /** @var OperationPluginManager $manager */
   $manager = \Drupal::service('plugin.manager.communication.operation');
   $options = [];
   foreach ($manager->getDefinitions() as $id => $def) {
@@ -157,7 +171,7 @@ function communication_event_operation_options() {
  * Get communication event operation options.
  */
 function communication_event_operation_variant_options() {
-  /** @var \Drupal\communication\OperationPluginManager $manager */
+  /** @var OperationPluginManager $manager */
   $manager = \Drupal::service('plugin.manager.communication.operation_variant');
   $options = [];
   foreach ($manager->getDefinitions() as $id => $def) {
@@ -170,13 +184,13 @@ function communication_event_operation_variant_options() {
  * Implements hook_modules_installed().
  */
 function communication_modules_installed(array $modules) {
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+  /** @var EntityTypeManagerInterface $entity_type_manager */
   $entity_type_manager = \Drupal::service('entity_type.manager');
-  /** @var \Drupal\Core\Field\FieldStorageDefinitionListenerInterface $field_storage_definition_listener */
+  /** @var FieldStorageDefinitionListenerInterface $field_storage_definition_listener */
   $field_storage_definition_listener = \Drupal::service('field_storage_definition.listener');
-  /** @var \Drupal\Core\Field\FieldDefinitionListenerInterface $field_definition_listener */
+  /** @var FieldDefinitionListenerInterface $field_definition_listener */
   $field_definition_listener = \Drupal::service('field_definition.listener');
-  /** @var \Drupal\Core\Entity\EntityBundleListenerInterface $entity_bundle_listener */
+  /** @var EntityBundleListenerInterface $entity_bundle_listener */
   $entity_bundle_listener = \Drupal::service('entity_bundle.listener');
 
   // Install communication fields provided by mode plugins being installed.
@@ -184,19 +198,19 @@ function communication_modules_installed(array $modules) {
     $entity_type_manager->getDefinition('communication')
   );
 
-  /** @var \Drupal\communication\CommunicationModePluginManager $mode_manager */
+  /** @var CommunicationModePluginManager $mode_manager */
   $mode_manager = \Drupal::service('plugin.manager.communication.mode');
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $entity_last_installed_schema_repo */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $entity_last_installed_schema_repo */
   $entity_last_installed_schema_repo = \Drupal::service('entity.last_installed_schema.repository');
   $installed_field_storages = $entity_last_installed_schema_repo->getLastInstalledFieldStorageDefinitions('communication');
   foreach ($mode_manager->getDefinitions() as $plugin_id => $definition) {
     if (in_array($definition['provider'], $modules)) {
       $entity_bundle_listener->onBundleCreate($plugin_id, 'communication');
 
-      /** @var \Drupal\communication\Plugin\Communication\Mode\ModeInterface $plugin */
+      /** @var ModeInterface $plugin */
       $plugin = $mode_manager->createInstance($plugin_id);
 
-      /** @var \Drupal\Core\Field\BaseFieldDefinition[] $bundle_field_definitions */
+      /** @var BaseFieldDefinition[] $bundle_field_definitions */
       $bundle_field_definitions = $plugin->communicationFieldDefinitions($communication_base_field_definitions);
       foreach ($bundle_field_definitions as $name => $field_definition) {
         $field_definition->setName($name);
@@ -213,16 +227,16 @@ function communication_modules_installed(array $modules) {
   $participant_base_field_definitions = CommunicationParticipant::baseFieldDefinitions(
     $entity_type_manager->getDefinition('communication_participant')
   );
-  /** @var \Drupal\communication\CommunicationModePluginManager $participant_type_manager */
+  /** @var CommunicationModePluginManager $participant_type_manager */
   $participant_type_manager = \Drupal::service('plugin.manager.communication.participant_type');
   foreach ($participant_type_manager->getDefinitions() as $plugin_id => $definition) {
     if (in_array($definition['provider'], $modules)) {
       $entity_bundle_listener->onBundleCreate($plugin_id, 'communication_participant');
 
-      /** @var \Drupal\communication\Plugin\Communication\ParticipantType\ParticipantTypeInterface $plugin */
+      /** @var ParticipantTypeInterface $plugin */
       $plugin = $participant_type_manager->createInstance($plugin_id);
 
-      /** @var \Drupal\Core\Field\BaseFieldDefinition[] $bundle_field_definitions */
+      /** @var BaseFieldDefinition[] $bundle_field_definitions */
       $bundle_field_definitions = $plugin->communicationParticipantFieldDefinitions($participant_base_field_definitions);
       foreach ($bundle_field_definitions as $name => $field_definition) {
         $field_definition->setName($name);
@@ -240,7 +254,7 @@ function communication_modules_installed(array $modules) {
  * Implements hook_mail().
  */
 function communication_mail($key, &$message, $params) {
-  /** @var \Drupal\communication\Entity\CommunicationInterface $communication */
+  /** @var CommunicationInterface $communication */
   $communication = $params['communication'];
   $options = $params['options'];
 
@@ -305,7 +319,7 @@ function communication_form_alter(array &$form, FormStateInterface $form_state)
  * Return an ajax response to fill an entity reference field.
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function communication_form_submit_ajax_entity_reference_fill_result($form, FormStateInterface $form_state) {
   if ($form_state->isRebuilding() || !$form_state->isExecuted()) {
@@ -314,7 +328,7 @@ function communication_form_submit_ajax_entity_reference_fill_result($form, Form
 
   $response = new AjaxResponse();
 
-  /** @var \Drupal\Core\Entity\EntityInterface $entity */
+  /** @var EntityInterface $entity */
   $entity = $form_state->getFormObject()->getEntity();
   $response->addCommand(new SetFormValueCommand(
     $form_state->get('entity_reference_element_name'),
@@ -333,7 +347,7 @@ function communication_form_submit_ajax_entity_reference_fill_result($form, Form
  * For participant fields, ensure that the communication and role are set.
  */
 function communication_field_widget_inline_entity_form_complex_form_alter(&$element, FormStateInterface $form_state, $context) {
-  /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+  /** @var FieldItemListInterface $items */
   $items = $context['items'];
   $field_definition = $items->getFieldDefinition();
 
diff --git a/communication.views.inc b/communication.views.inc
index 6a4d86e..5b7f221 100644
--- a/communication.views.inc
+++ b/communication.views.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\communication\CommunicationModePluginManager;
+use Drupal\communication\Plugin\Communication\Mode\ModeInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
@@ -12,10 +14,10 @@ function communication_views_data_alter(&$data) {
     'field' => 'communication',
   ];
 
-  /** @var \Drupal\communication\CommunicationModePluginManager $mode_manager */
+  /** @var CommunicationModePluginManager $mode_manager */
   $mode_manager = \Drupal::service('plugin.manager.communication.mode');
   foreach ($mode_manager->getDefinitions() as $mode => $definition) {
-    /** @var \Drupal\communication\Plugin\Communication\Mode\ModeInterface $plugin */
+    /** @var ModeInterface $plugin */
     $plugin = $mode_manager->createInstance($mode);
 
     foreach ($plugin->participantRoles() as $role_name => $role_def) {
diff --git a/contrib/mailgun/src/Plugin/Communication/OperationVariant/SendEmailMailgunOperationVariant.php b/contrib/mailgun/src/Plugin/Communication/OperationVariant/SendEmailMailgunOperationVariant.php
index d5aabbe..54884bc 100644
--- a/contrib/mailgun/src/Plugin/Communication/OperationVariant/SendEmailMailgunOperationVariant.php
+++ b/contrib/mailgun/src/Plugin/Communication/OperationVariant/SendEmailMailgunOperationVariant.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\communication_mailgun\Plugin\Communication\OperationVariant;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\communication\EmailSendOperationHelperTrait;
 use Drupal\communication\Entity\CommunicationInterface;
 use Drupal\communication\Plugin\Communication\OperationVariant\OperationVariantBase;
@@ -48,44 +50,44 @@ class SendEmailMailgunOperationVariant extends OperationVariantBase implements C
   protected $mailgunClient;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
-   * @var \Drupal\Core\Theme\ThemeInitializationInterface
+   * @var ThemeInitializationInterface
    */
   protected $themeInitialization;
 
   /**
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $mailgunConfig;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;
 
@@ -116,14 +118,14 @@ class SendEmailMailgunOperationVariant extends OperationVariantBase implements C
    * @param $plugin_id
    * @param $plugin_definition
    * @param \Mailgun\Mailgun $mailgun_client
-   * @param \Drupal\Core\Render\RendererInterface $renderer
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
-   * @param \Drupal\Core\Theme\ThemeInitializationInterface $theme_initialization
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_channel_factory
+   * @param RendererInterface $renderer
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param FileSystemInterface $file_system
+   * @param ConfigFactoryInterface $config_factory
+   * @param ThemeManagerInterface $theme_manager
+   * @param ThemeInitializationInterface $theme_initialization
+   * @param ModuleHandlerInterface $module_handler
+   * @param LoggerChannelFactoryInterface $logger_channel_factory
    */
   public function __construct(
     array $configuration,
@@ -154,7 +156,7 @@ class SendEmailMailgunOperationVariant extends OperationVariantBase implements C
   /**
    * Run this operation.
    *
-   * @param \Drupal\communication\Entity\CommunicationInterface $communication
+   * @param CommunicationInterface $communication
    * @param array $options
    *
    * @return CommunicationInterface
@@ -316,7 +318,7 @@ class SendEmailMailgunOperationVariant extends OperationVariantBase implements C
   }
 
   /**
-   * @param \Drupal\communication\Entity\CommunicationInterface $communication
+   * @param CommunicationInterface $communication
    *
    * @return string
    */
@@ -367,7 +369,7 @@ class SendEmailMailgunOperationVariant extends OperationVariantBase implements C
   /**
    * Validate whether this operation can be run.
    *
-   * @param \Drupal\communication\Entity\CommunicationInterface $communication
+   * @param CommunicationInterface $communication
    * @param array $options
    * @param array $reasons
    *
@@ -382,7 +384,7 @@ class SendEmailMailgunOperationVariant extends OperationVariantBase implements C
   /**
    * Get the logger
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    */
   protected function logger() {
     return $this->loggerFactory->get('communication');
diff --git a/contrib/postal/src/EventSubscriber/PostalCommunicationPreSendSubscriber.php b/contrib/postal/src/EventSubscriber/PostalCommunicationPreSendSubscriber.php
index 1a23664..50ebea1 100644
--- a/contrib/postal/src/EventSubscriber/PostalCommunicationPreSendSubscriber.php
+++ b/contrib/postal/src/EventSubscriber/PostalCommunicationPreSendSubscriber.php
@@ -2,13 +2,16 @@
 
 namespace Drupal\communication_postal\EventSubscriber;
 
+use Symfony\Component\Mime\MimeTypesInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\file\Entity\File;
 use Drupal\communication\Event\CommunicationEvents;
 use Drupal\communication\Event\CommunicationOperationEvent;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\pdf_tools\PDFGeneratorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 
 class PostalCommunicationPreSendSubscriber implements EventSubscriberInterface {
 
@@ -18,22 +21,22 @@ class PostalCommunicationPreSendSubscriber implements EventSubscriberInterface {
   protected $pdfGenerator;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;
 
   /**
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fileStorage;
 
   /**
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
@@ -45,7 +48,7 @@ class PostalCommunicationPreSendSubscriber implements EventSubscriberInterface {
   public function __construct(
     PDFGeneratorInterface $pdf_generator,
     EntityTypeManagerInterface $entity_type_manager,
-    MimeTypeGuesserInterface $mime_type_guesser,
+    MimeTypesInterface $mime_type_guesser,
     FileSystemInterface $file_system
   ) {
     $this->pdfGenerator = $pdf_generator;
@@ -67,7 +70,7 @@ class PostalCommunicationPreSendSubscriber implements EventSubscriberInterface {
   /**
    * Generate a pdf prior to sending.
    *
-   * @param \Drupal\communication\Event\CommunicationOperationEvent $event
+   * @param CommunicationOperationEvent $event
    */
   public function preCommunicationSendPDFGenerate(CommunicationOperationEvent $event) {
     if ($event->getOperation() !== 'send' || $event->getCommunication()->bundle() !== 'post') {
@@ -87,7 +90,7 @@ class PostalCommunicationPreSendSubscriber implements EventSubscriberInterface {
       $pdf_options['pdf_style'] = $event->getCommunication()->pdf_style->entity;
     }
     if (empty($pdf_options['__destination'])) {
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_def */
+      /** @var FieldDefinitionInterface $field_def */
       $field_def = $event->getCommunication()->pdf->getFieldDefinition();
       $pdf_options['__destination'] =
         $field_def->getSetting('uri_scheme', 'private') . '://'
@@ -97,7 +100,7 @@ class PostalCommunicationPreSendSubscriber implements EventSubscriberInterface {
 
     $uri = $this->pdfGenerator->entityToPDF($event->getCommunication(), 'send', $pdf_options);
 
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = $this->fileStorage->create([
       'uri' => $uri,
       'size' => filesize($uri),
diff --git a/contrib/postal_c2m/communication_postal_c2m.install b/contrib/postal_c2m/communication_postal_c2m.install
index 0707e7f..40d56b7 100644
--- a/contrib/postal_c2m/communication_postal_c2m.install
+++ b/contrib/postal_c2m/communication_postal_c2m.install
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Field\FieldStorageDefinitionListenerInterface;
+use Drupal\Core\Field\FieldDefinitionListenerInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\entity\BundleFieldDefinition;
 
@@ -7,9 +9,9 @@ use Drupal\entity\BundleFieldDefinition;
  * Implements hook_install().
  */
 function communication_postal_c2m_install() {
-  /** @var \Drupal\Core\Field\FieldStorageDefinitionListenerInterface $field_storage_definition_listener */
+  /** @var FieldStorageDefinitionListenerInterface $field_storage_definition_listener */
   $field_storage_definition_listener = \Drupal::service('field_storage_definition.listener');
-  /** @var \Drupal\Core\Field\FieldDefinitionListenerInterface $field_definition_listener */
+  /** @var FieldDefinitionListenerInterface $field_definition_listener */
   $field_definition_listener = \Drupal::service('field_definition.listener');
 
   $fields = [];
@@ -39,7 +41,7 @@ function communication_postal_c2m_install() {
 
   /**
    * @var string $field_name
-   * @var \Drupal\entity\BundleFieldDefinition $definition
+   * @var BundleFieldDefinition $definition
    */
   foreach ($fields as $field_name => $definition) {
     $definition->setName($field_name);
diff --git a/contrib/postal_c2m/src/Plugin/Communication/OperationVariant/SendPostClick2MailVariant.php b/contrib/postal_c2m/src/Plugin/Communication/OperationVariant/SendPostClick2MailVariant.php
index f609f62..2a41f7e 100644
--- a/contrib/postal_c2m/src/Plugin/Communication/OperationVariant/SendPostClick2MailVariant.php
+++ b/contrib/postal_c2m/src/Plugin/Communication/OperationVariant/SendPostClick2MailVariant.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\communication_postal_c2m\Plugin\Communication\OperationVariant;
 
+use GuzzleHttp\Psr7\Response;
+use Drupal\file\Plugin\Field\FieldType\FileItem;
+use Drupal\file\Entity\File;
 use Drupal\communication\Entity\CommunicationInterface;
 use Drupal\communication\Plugin\Communication\OperationVariant\OperationVariantBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -75,17 +78,17 @@ class SendPostClick2MailVariant extends OperationVariantBase implements Containe
   const ENVELOPE__CERTIFIED_FLAT = 'Certified Mail Flat Envelope';
 
   /**
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
-   * @var \Symfony\Component\Serializer\Serializer
+   * @var Serializer
    */
   protected $serializer;
 
@@ -116,10 +119,10 @@ class SendPostClick2MailVariant extends OperationVariantBase implements Containe
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \GuzzleHttp\ClientInterface $client
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Symfony\Component\Serializer\Serializer $serializer
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ClientInterface $client
+   * @param ConfigFactoryInterface $config_factory
+   * @param Serializer $serializer
    * @param \Drupal\pdf_tools\PDFAnalyserInterface $pdf_analyser
    */
   public function __construct(
@@ -149,7 +152,7 @@ class SendPostClick2MailVariant extends OperationVariantBase implements Containe
   /**
    * Run this operation.
    *
-   * @param \Drupal\communication\Entity\CommunicationInterface $communication
+   * @param CommunicationInterface $communication
    * @param array $options
    *
    * @return CommunicationInterface
@@ -176,7 +179,7 @@ class SendPostClick2MailVariant extends OperationVariantBase implements Containe
       $mail_class = isset($options['mail_class']) ? $options['mail_class'] : static::CLASS__FIRST_CLASS;
       $document_class = ($mail_class === static::CLASS__FIRST_CLASS) ? static::DOC__LETTER85x11 : static::DOC__CERT_LETTER85x11;
 
-      /** @var \GuzzleHttp\Psr7\Response $response */
+      /** @var Response $response */
       $response = $this->httpClient->post(static::HOST . '/documents', [
           'multipart' => [
             [
@@ -203,9 +206,9 @@ class SendPostClick2MailVariant extends OperationVariantBase implements Containe
       if ($communication->attachments && !$communication->attachments->isEmpty()) {
         $document_ids = [];
 
-        /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $file_item */
+        /** @var FileItem $file_item */
         foreach ($communication->attachments as $file_item) {
-          /** @var \Drupal\file\Entity\File $file */
+          /** @var File $file */
           $file = $file_item->entity;
           $extension = strtolower(pathinfo($file->getFilename(), PATHINFO_EXTENSION));
           if ($extension === 'pdf') {
@@ -397,7 +400,7 @@ class SendPostClick2MailVariant extends OperationVariantBase implements Containe
   /**
    * Validate whether this operation can be run.
    *
-   * @param \Drupal\communication\Entity\CommunicationInterface $communication
+   * @param CommunicationInterface $communication
    * @param array $options
    * @param array $reasons
    *
diff --git a/contrib/service/src/Controller/OperationHandler.php b/contrib/service/src/Controller/OperationHandler.php
index 26a156e..aa0c181 100644
--- a/contrib/service/src/Controller/OperationHandler.php
+++ b/contrib/service/src/Controller/OperationHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\communication_service\Controller;
 
+use Drupal\communication\Plugin\Communication\Operation\OperationInterface;
 use Drupal\communication\Entity\Communication;
 use Drupal\communication\OperationPluginManager;
 use Drupal\communication\Plugin\Communication\Operation\OperationWithVariantsBase;
@@ -19,12 +20,12 @@ use Symfony\Component\Serializer\SerializerInterface;
 class OperationHandler extends ControllerBase {
 
   /**
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;
 
   /**
-   * @var \Drupal\communication\OperationPluginManager
+   * @var OperationPluginManager
    */
   protected $operationPluginManager;
 
@@ -43,20 +44,20 @@ class OperationHandler extends ControllerBase {
   /**
    * Handle operations.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
-   * @param \Drupal\Core\Routing\RouteMatch $route_match
-   * @param \Drupal\communication\Entity\Communication|NULL $communication
+   * @param Request $request
+   * @param RouteMatch $route_match
+   * @param Communication|NULL $communication
    */
   public function handle(Request $request, RouteMatch $route_match) {
     $operation_id = $route_match->getParameter('operation');
     $operation_variant_id = $route_match->getParameter('operation_variant') ?: NULL;
 
-    /** @var \Drupal\communication_service\OperationRequest $operation_request */
+    /** @var OperationRequest $operation_request */
     $operation_request = $this->serializer->deserialize($request->getContent(), OperationRequest::class, $request->query->get('_format'));
     $communication = $operation_request->getCommunication();
 
     try {
-      /** @var \Drupal\communication\Plugin\Communication\Operation\OperationInterface $plugin */
+      /** @var OperationInterface $plugin */
       $plugin = $this->operationPluginManager->createInstance($operation_id);
     }
     catch (PluginException $exception) {
diff --git a/contrib/service/src/Normalizer/OperationRequestNormalizer.php b/contrib/service/src/Normalizer/OperationRequestNormalizer.php
index a4b185f..3e8be4b 100644
--- a/contrib/service/src/Normalizer/OperationRequestNormalizer.php
+++ b/contrib/service/src/Normalizer/OperationRequestNormalizer.php
@@ -10,7 +10,7 @@ use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
 class OperationRequestNormalizer extends NormalizerBase implements DenormalizerInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -22,7 +22,7 @@ class OperationRequestNormalizer extends NormalizerBase implements DenormalizerI
   /**
    * OperationRequestNormalizer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ -32,7 +32,7 @@ class OperationRequestNormalizer extends NormalizerBase implements DenormalizerI
    * {@inheritdoc}
    */
   public function normalize($object, $format = NULL, array $context = []) {
-    /** @var \Drupal\communication_service\OperationRequest $object */
+    /** @var OperationRequest $object */
     $value = [];
 
     $communications = $object->getCommunications();
diff --git a/contrib/service/src/Normalizer/ParticipantFieldItemNormalizer.php b/contrib/service/src/Normalizer/ParticipantFieldItemNormalizer.php
index a2f910d..6a263ce 100644
--- a/contrib/service/src/Normalizer/ParticipantFieldItemNormalizer.php
+++ b/contrib/service/src/Normalizer/ParticipantFieldItemNormalizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\communication_service\Normalizer;
 
+use Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem;
 use Drupal\communication\Entity\CommunicationParticipant;
 use Drupal\communication\Plugin\Field\FieldType\ParticipantItem;
 use Drupal\serialization\Normalizer\EntityReferenceFieldItemNormalizer;
@@ -34,7 +35,7 @@ class ParticipantFieldItemNormalizer extends EntityReferenceFieldItemNormalizer
       $data = $data['entity'];
     }
 
-    /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $field_item */
+    /** @var EntityReferenceItem $field_item */
     $field_item = $context['target_instance'];
     if (!isset($data['role']) && ($role = $field_item->getFieldDefinition()->getSetting('participant_role'))) {
       $data['role'] = $role;
diff --git a/contrib/service/src/OperationRequest.php b/contrib/service/src/OperationRequest.php
index ce9ea19..940e7bb 100644
--- a/contrib/service/src/OperationRequest.php
+++ b/contrib/service/src/OperationRequest.php
@@ -7,7 +7,7 @@ use Drupal\communication\Entity\Communication;
 class OperationRequest {
 
   /**
-   * @var \Drupal\communication\Entity\Communication[]
+   * @var Communication[]
    */
   protected $communications = [];
 
@@ -19,7 +19,7 @@ class OperationRequest {
   /**
    * OperationRequest constructor.
    *
-   * @param \Drupal\communication\Entity\Communication[]|\Drupal\communication\Entity\Communication $communications
+   * @param Communication[]|Communication $communications
    * @param array $options
    */
   public function __construct($communications, array $options = []) {
@@ -39,7 +39,7 @@ class OperationRequest {
   /**
    * Get communications.
    *
-   * @return \Drupal\communication\Entity\Communication[]
+   * @return Communication[]
    */
   public function getCommunications() {
     return $this->communications;
@@ -50,7 +50,7 @@ class OperationRequest {
    *
    * @param int $index
    *
-   * @return \Drupal\communication\Entity\Communication|null
+   * @return Communication|null
    */
   public function getCommunication($index = 0) {
     return isset($this->communications[$index]) ? $this->communications[$index] : NULL;
@@ -59,7 +59,7 @@ class OperationRequest {
   /**
    * Set the communication
    *
-   * @param \Drupal\communication\Entity\Communication $communication
+   * @param Communication $communication
    * @param int $index
    *
    * @return static
diff --git a/contrib/service/src/Plugin/Communication/NotificationMethod/Webhook.php b/contrib/service/src/Plugin/Communication/NotificationMethod/Webhook.php
index b055159..83a1e45 100644
--- a/contrib/service/src/Plugin/Communication/NotificationMethod/Webhook.php
+++ b/contrib/service/src/Plugin/Communication/NotificationMethod/Webhook.php
@@ -25,22 +25,22 @@ use Symfony\Component\Serializer\SerializerInterface;
 class Webhook extends NotificationMethodBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    *
-   * @return \Drupal\communication_service\Plugin\CommunicationNotificationMethod\Webhook|\Drupal\Core\Plugin\ContainerFactoryPluginInterface
+   * @return \Drupal\communication_service\Plugin\CommunicationNotificationMethod\Webhook|ContainerFactoryPluginInterface
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     return new static(
@@ -58,7 +58,7 @@ class Webhook extends NotificationMethodBase implements ContainerFactoryPluginIn
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ClientInterface $http_client, SerializerInterface $serializer) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/contrib/service/src/Routing/OperationRoutes.php b/contrib/service/src/Routing/OperationRoutes.php
index 6dfc9c6..b325646 100644
--- a/contrib/service/src/Routing/OperationRoutes.php
+++ b/contrib/service/src/Routing/OperationRoutes.php
@@ -24,12 +24,12 @@ use Symfony\Component\Routing\Route;
 class OperationRoutes implements EventSubscriberInterface {
 
   /**
-   * @var \Drupal\communication\OperationPluginManager
+   * @var OperationPluginManager
    */
   protected $operationManager;
 
   /**
-   * @var \Drupal\communication\OperationVariantPluginManager
+   * @var OperationVariantPluginManager
    */
   protected $operationVariantManager;
 
@@ -49,7 +49,7 @@ class OperationRoutes implements EventSubscriberInterface {
   /**
    * Alters existing routes for a specific collection.
    *
-   * @param \Drupal\Core\Routing\RouteBuildEvent $event
+   * @param RouteBuildEvent $event
    *   The route build event.
    */
   public function onDynamicRouteEvent(RouteBuildEvent $event) {
diff --git a/contrib/subscription/src/Entity/Subscription.php b/contrib/subscription/src/Entity/Subscription.php
index e2895e2..21fea37 100644
--- a/contrib/subscription/src/Entity/Subscription.php
+++ b/contrib/subscription/src/Entity/Subscription.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\communication_subscription\Entity;
 
+use Drupal\communication_subscription\Plugin\Communication\NotificationMethod\NotificationMethodInterface;
 use Drupal\communication\Entity\CommunicationEvent;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -78,10 +79,10 @@ class Subscription extends ContentEntityBase implements EntityOwnerInterface {
   /**
    * Get the notification method.
    *
-   * @return \Drupal\communication_subscription\Plugin\Communication\NotificationMethod\NotificationMethodInterface
+   * @return NotificationMethodInterface
    */
   public function getNotificationMethod() {
-    /** @var \Drupal\communication_subscription\Plugin\Communication\NotificationMethod\NotificationMethodInterface $plugin */
+    /** @var NotificationMethodInterface $plugin */
     $plugin = \Drupal::service('plugin.manager.communication_subscription_notification_method')
       ->createInstance($this->bundle());
 
diff --git a/contrib/subscription/src/Entity/SubscriptionAccessControlHandler.php b/contrib/subscription/src/Entity/SubscriptionAccessControlHandler.php
index 77b7843..615975f 100644
--- a/contrib/subscription/src/Entity/SubscriptionAccessControlHandler.php
+++ b/contrib/subscription/src/Entity/SubscriptionAccessControlHandler.php
@@ -18,7 +18,7 @@ class SubscriptionAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\communication_subscription\Entity\Subscription $entity */
+    /** @var Subscription $entity */
     $access =  parent::checkAccess($entity, $operation, $account);
 
     if ($operation === 'edit') {
diff --git a/contrib/subscription/src/NotificationMethodManager.php b/contrib/subscription/src/NotificationMethodManager.php
index 95edad7..7af5ef9 100644
--- a/contrib/subscription/src/NotificationMethodManager.php
+++ b/contrib/subscription/src/NotificationMethodManager.php
@@ -20,9 +20,9 @@ class NotificationMethodManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/contrib/subscription/src/Notifier.php b/contrib/subscription/src/Notifier.php
index 90c2c35..fca6a05 100644
--- a/contrib/subscription/src/Notifier.php
+++ b/contrib/subscription/src/Notifier.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\communication_subscription;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\communication_subscription\Entity\Subscription;
 use Drupal\communication\Entity\CommunicationEvent;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ -14,19 +16,19 @@ use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 class Notifier implements NotifierInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * Notifier constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, LoggerChannelFactoryInterface $logger_factory) {
     $this->entityTypeManager = $entity_type_manager;
@@ -52,9 +54,9 @@ class Notifier implements NotifierInterface {
   /**
    * Get the subscriptions handling a particular event.
    *
-   * @param \Drupal\communication\Entity\CommunicationEvent $event
+   * @param CommunicationEvent $event
    *
-   * @return \Drupal\communication_subscription\Entity\Subscription[]
+   * @return Subscription[]
    */
   protected function getSubscriptions(CommunicationEvent $event) {
     $storage = $this->entityTypeManager->getStorage('communication_subscription');
@@ -73,7 +75,7 @@ class Notifier implements NotifierInterface {
 
     $subscriptions = [];
     if ($ids = $query->execute()) {
-      /** @var \Drupal\communication_subscription\Entity\Subscription $subscription */
+      /** @var Subscription $subscription */
       foreach ($storage->loadMultiple($ids) as $id => $subscription) {
         if ($subscription->communication->target_id == $event->communication->target_id) {
           $subscriptions[] = $subscription;
diff --git a/contrib/subscription/src/NotifierInterface.php b/contrib/subscription/src/NotifierInterface.php
index 9b9b934..c52e76b 100644
--- a/contrib/subscription/src/NotifierInterface.php
+++ b/contrib/subscription/src/NotifierInterface.php
@@ -20,7 +20,7 @@ interface NotifierInterface {
   /**
    * Notify all subscriptions of the event.
    *
-   * @param \Drupal\communication\Entity\CommunicationEvent $event
+   * @param CommunicationEvent $event
    */
   public function notify(CommunicationEvent $event);
 
diff --git a/contrib/subscription/src/Plugin/Communication/NotificationMethod/NotificationMethodBase.php b/contrib/subscription/src/Plugin/Communication/NotificationMethod/NotificationMethodBase.php
index 33a25b0..970749b 100644
--- a/contrib/subscription/src/Plugin/Communication/NotificationMethod/NotificationMethodBase.php
+++ b/contrib/subscription/src/Plugin/Communication/NotificationMethod/NotificationMethodBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\communication_subscription\Plugin\Communication\NotificationMethod;
 
+use Drupal\entity\BundleFieldDefinition;
 use Drupal\Core\Plugin\PluginBase;
 
 /**
@@ -18,7 +19,7 @@ abstract class NotificationMethodBase extends PluginBase implements Notification
    * Field names must be unique across all bundles.
    * It is recommended to prefix them with the bundle name (plugin ID).
    *
-   * @return \Drupal\entity\BundleFieldDefinition[]
+   * @return BundleFieldDefinition[]
    *   An array of bundle field definitions, keyed by field name.
    */
   public function buildFieldDefinitions() {
diff --git a/contrib/subscription/src/Plugin/Communication/NotificationMethod/NotificationMethodInterface.php b/contrib/subscription/src/Plugin/Communication/NotificationMethod/NotificationMethodInterface.php
index 2a0adc2..4a7db02 100644
--- a/contrib/subscription/src/Plugin/Communication/NotificationMethod/NotificationMethodInterface.php
+++ b/contrib/subscription/src/Plugin/Communication/NotificationMethod/NotificationMethodInterface.php
@@ -16,8 +16,8 @@ interface NotificationMethodInterface extends BundlePluginInterface {
   /**
    * Notify the subscriber of the event.
    *
-   * @param \Drupal\communication\Entity\CommunicationEvent $event
-   * @param \Drupal\communication_subscription\Entity\Subscription $subscription
+   * @param CommunicationEvent $event
+   * @param Subscription $subscription
    *
    * @return mixed
    */
diff --git a/contrib/user/communication_user.views.inc b/contrib/user/communication_user.views.inc
index f1af59d..648042d 100644
--- a/contrib/user/communication_user.views.inc
+++ b/contrib/user/communication_user.views.inc
@@ -1,10 +1,11 @@
 <?php
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 /**
  * Implements hook_views_data_alter().
  */
 function communication_user_views_data_alter(&$data) {
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
+  /** @var EntityFieldManagerInterface $field_manager */
   $field_manager = \Drupal::service('entity_field.manager');
   $user_definition = \Drupal::entityTypeManager()->getDefinition('user');
   $table = $user_definition->getDataTable();
diff --git a/contrib/user/src/Plugin/ContactInfoSource/ProfileFieldSource.php b/contrib/user/src/Plugin/ContactInfoSource/ProfileFieldSource.php
index ab19dc6..2e9d4e1 100644
--- a/contrib/user/src/Plugin/ContactInfoSource/ProfileFieldSource.php
+++ b/contrib/user/src/Plugin/ContactInfoSource/ProfileFieldSource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\communication_user\Plugin\ContactInfoSource;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\communication\Contact\ContactInfo;
 use Drupal\communication\Contact\ContactInfoDefinition;
 use Drupal\communication\Contact\ContactInfoDefinitionInterface;
@@ -26,7 +27,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class ProfileFieldSource extends ContactInfoSourceBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -49,8 +50,8 @@ class ProfileFieldSource extends ContactInfoSourceBase {
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_type_manager);
@@ -73,7 +74,7 @@ class ProfileFieldSource extends ContactInfoSourceBase {
     foreach ($profile_storage->loadMultiple($ids) as $profile) {
       $bundle = $profile->bundle();
 
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+      /** @var FieldDefinitionInterface $field_definition */
       foreach ($profile->getFieldDefinitions() as $field_definition) {
         $sub_key = "{$bundle}.{$field_definition->getName()}";
         if (
@@ -175,17 +176,17 @@ class ProfileFieldSource extends ContactInfoSourceBase {
       $build = $profile->get($field_name)->view([
         'label' => 'hidden',
       ]);
-      return drupal_render($build);
+      return \Drupal::service('renderer')->render($build);
     }
 
     return '';
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $key
    *
-   * @return \Drupal\communication\Contact\ContactInfoDefinitionInterface
+   * @return ContactInfoDefinitionInterface
    */
   public function getInfoDefinition(EntityInterface $entity, $key) {
     list($bundle, $field_name) = explode('.', $key, 2);
diff --git a/contrib/user/src/Plugin/ContactInfoSource/UserMailSource.php b/contrib/user/src/Plugin/ContactInfoSource/UserMailSource.php
index c57db4c..c2bc5a2 100644
--- a/contrib/user/src/Plugin/ContactInfoSource/UserMailSource.php
+++ b/contrib/user/src/Plugin/ContactInfoSource/UserMailSource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\communication_user\Plugin\ContactInfoSource;
 
+use Drupal\user\UserInterface;
 use Drupal\communication\Contact\ContactInfo;
 use Drupal\communication\Contact\ContactInfoDefinition;
 use Drupal\communication\Contact\ContactInfoDefinitionInterface;
@@ -28,7 +29,7 @@ class UserMailSource extends ContactInfoSourceBase {
    */
   public function collectInfo(EntityInterface $entity, ContactInfoDefinitionInterface $definition, array $options = []) {
     if ($definition->getDataType() == 'email') {
-      /** @var \Drupal\user\UserInterface $entity */
+      /** @var UserInterface $entity */
       $contact_info = (new ContactInfo($definition, $entity, $this->getPluginId()));
       if (!$entity->getEmail()) {
         $contact_info->setIncomplete();
@@ -43,7 +44,7 @@ class UserMailSource extends ContactInfoSourceBase {
    * {@inheritdoc}
    */
   public function getInfoValue(EntityInterface $entity, $key, $name, DataDefinitionInterface $definition) {
-    /** @var \Drupal\user\UserInterface $entity */
+    /** @var UserInterface $entity */
     if ($definition->getDataType() == 'email' || $name == 'email') {
       return $entity->getEmail();
     }
@@ -70,10 +71,10 @@ class UserMailSource extends ContactInfoSourceBase {
   }
 
   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $key
    *
-   * @return \Drupal\communication\Contact\ContactInfoDefinitionInterface
+   * @return ContactInfoDefinitionInterface
    */
   public function getInfoDefinition(EntityInterface $entity, $key) {
     return ContactInfoDefinition::create('email');
