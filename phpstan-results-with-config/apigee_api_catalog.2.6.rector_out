modules/contrib/apigee_api_catalog/apigee_api_catalog.install
modules/contrib/apigee_api_catalog/apigee_api_catalog.module
modules/contrib/apigee_api_catalog/src/Entity/Access/ApiDocAccessControlHandler.php
modules/contrib/apigee_api_catalog/src/Entity/ApiDoc.php
modules/contrib/apigee_api_catalog/src/Entity/ApiDocInterface.php
modules/contrib/apigee_api_catalog/src/Entity/Form/ApiDocReimportSpecForm.php
modules/contrib/apigee_api_catalog/src/Entity/Routing/ApiDocHtmlRouteProvider.php
modules/contrib/apigee_api_catalog/src/EventSubscriber/PageNotFoundEventSubscriber.php
modules/contrib/apigee_api_catalog/src/Plugin/Field/FieldFormatter/SmartDocsFormatter.php
modules/contrib/apigee_api_catalog/src/Plugin/Validation/Constraint/ApiDocFileLinkConstraint.php
modules/contrib/apigee_api_catalog/src/Plugin/Validation/Constraint/ApiDocFileLinkConstraintValidator.php
modules/contrib/apigee_api_catalog/src/SpecFetcher.php
modules/contrib/apigee_api_catalog/src/SpecFetcherInterface.php
modules/contrib/apigee_api_catalog/src/UpdateService.php
modules/contrib/apigee_api_catalog/tests/src/Functional/ApiDocsAdminTest.php
modules/contrib/apigee_api_catalog/tests/src/Functional/ApiDocsJsonApi.php
modules/contrib/apigee_api_catalog/tests/src/Functional/SmartdocRoutingTest.php
modules/contrib/apigee_api_catalog/tests/src/Kernel/ApidocEntityTest.php

15 files with changes
=====================

1) modules/contrib/apigee_api_catalog/tests/src/Kernel/ApidocEntityTest.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\apigee_api_catalog\Kernel;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('user', ['users_data']);
@@ @@
     // This needs to run before the alias can be picked up?
     $entity->toUrl()->toString();
     $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $entity->id(), $entity->language()->getId());
-    $this->assertEqual($alias, '/api/' . $entity->id());
+    $this->assertEquals($alias, '/api/' . $entity->id());

     $entity->delete();
     $this->assertNull($this->nodeStorage->load($entity_id));
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/apigee_api_catalog/tests/src/Functional/SmartdocRoutingTest.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\apigee_api_catalog\Functional;

+use Drupal\node\NodeInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A test doc.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $apidoc;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->apidoc = $this->container->get('entity_type.manager')
@@ @@
    * Tests the route subscriber will redirect from smartdoc routes.
    */
   public function testNotFoundSubscriber() {
-    $this->assertEqual($this->apidoc->id(), 1);
+    $this->assertEquals($this->apidoc->id(), 1);

     // This needs to run before the alias can be picked up?
     $this->apidoc->toUrl()->toString();
     $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/1', $this->apidoc->language()->getId());
-    $this->assertEqual($alias, '/api/1');
+    $this->assertEquals($alias, '/api/1');

     $assert = $this->assertSession();

@@ @@
     static::assertEmpty($this->getSession()->getResponseHeader('location'));

     // Test the canonical route uses the /api/* path alias.
-    $this->assertEqual(parse_url($this->getSession()->getCurrentUrl(), PHP_URL_PATH), '/api/1');
+    $this->assertEquals(parse_url($this->getSession()->getCurrentUrl(), PHP_URL_PATH), '/api/1');

     // Tests the node alias response.
     $this->drupalGet('/api/1');
@@ @@
     $response = $this->getHttpClient()->request('GET', $url->toString(), [
       'allow_redirects' => FALSE,
     ]);
-    $this->assertEqual($response->getStatusCode(), 302);
-    $this->assertEqual($response->getHeader('location')[0], '/api/1');
+    $this->assertEquals($response->getStatusCode(), 302);
+    $this->assertEquals($response->getHeader('location')[0], '/api/1');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/apigee_api_catalog/tests/src/Functional/ApiDocsJsonApi.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\apigee_api_catalog\Functional;

+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * A published API Doc.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $apidocPublished;

@@ @@
   /**
    * An unpublished API Doc.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $apidocUnpublished;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $nodeStorage = $this->container->get('entity_type.manager')->getStorage('node');
@@ @@
   /**
    * Make sure admin can filter and get results back.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testFilterAdminAccess() {
     $account = $this->drupalCreateUser([
@@ @@
   /**
    * View published permission can filter published docs.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testFilterViewAccessViewPublished() {
     $account = $this->drupalCreateUser([
@@ @@
   /**
    * Verify the account has access when making JSON:API call.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to send the call.
    * @param array $apidocs_expected
    *   An array of the expected API Docs.
@@ @@
       return strcmp($a['attributes']['title'], $b['attributes']['title']);
     });
     for ($i = 0; $i < count($apidocs_response); $i++) {
-      $this->assertEqual($apidocs_expected[$i]->label(), $apidocs_response[$i]['attributes']['title']);
+      $this->assertEquals($apidocs_expected[$i]->label(), $apidocs_response[$i]['attributes']['title']);
     }
     // Make sure the count is the same.
     $this->assertCount(count($apidocs_expected), $apidocs_response, 'Count of API Docs returned does not match count of expected.');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/apigee_api_catalog/tests/src/Functional/ApiDocsAdminTest.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\apigee_api_catalog\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Url;
 use Drupal\file\Entity\File;
@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Add the system menu blocks to appropriate regions.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/apigee_api_catalog/src/UpdateService.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Component\Uuid\UuidInterface definition.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityFieldManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface
+   * @var EntityLastInstalledSchemaRepositoryInterface
    */
   protected $lastInstalledSchemaRepository;

@@ @@
    */
   public function update8802() {
     $module = 'apigee_api_catalog';
-    $configPath = drupal_get_path('module', $module) . '/config';
+    $configPath = \Drupal::service('extension.list.module')->getPath($module) . '/config';
     $configToImport['install'] = [
       'node.type.apidoc',
       'core.base_field_override.node.apidoc.title',
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/apigee_api_catalog/src/SpecFetcherInterface.php:81

    ---------- begin diff ----------
@@ @@
    * it returns STATUS_UPDATED or STATUS_UNCHANGED), it does not save
    * the ApiDoc entity.
    *
-   * @param \Drupal\node\NodeInterface $apidoc
+   * @param NodeInterface $apidoc
    *   The ApiDoc entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/apigee_api_catalog/src/SpecFetcher.php:45

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\File\FileSystemInterface definition.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * GuzzleHttp\ClientInterface definition.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
   /**
    * Constructs a new SpecFetcher.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file_system service.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The http_client service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger service.
    */
   public function __construct(FileSystemInterface $file_system, ClientInterface $http_client, EntityTypeManagerInterface $entityTypeManager, TranslationInterface $translation, MessengerInterface $messenger, LoggerInterface $logger) {
@@ @@

         try {
           $this->checkRequirements($destination);
-          $file = file_save_data($data, $destination . $filename, FileSystemInterface::EXISTS_RENAME);
+          $file = \Drupal::service('file.repository')->writeData($data, $destination . $filename, FileSystemInterface::EXISTS_RENAME);

           if (empty($file)) {
             throw new \Exception('Could not save API Doc specification file.');
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/apigee_api_catalog/src/Plugin/Validation/Constraint/ApiDocFileLinkConstraintValidator.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_api_catalog\Plugin\Validation\Constraint;

+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Url;
 use GuzzleHttp\ClientInterface;
@@ @@
   /**
    * The HTTP client to fetch the files with.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * ApiDocFileLinkConstraintValidator constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   A Guzzle client object.
    */
   public function __construct(ClientInterface $http_client) {
@@ @@
    * {@inheritdoc}
    */
   public function validate($items, Constraint $constraint) {
-    /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+    /** @var FieldItemListInterface $items */
     if (!isset($items)) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/apigee_api_catalog/src/Plugin/Field/FieldFormatter/SmartDocsFormatter.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_api_catalog\Plugin\Field\FieldFormatter;

+use Drupal\file\Entity\File;
 use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   The logger factory.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, LoggerChannelFactoryInterface $loggerFactory) {
@@ @@
     // The list of OpenAPI specs to pass to SmartDocs Angular app.
     $openapi_files = [];

-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     foreach ($this->getEntitiesToView($items, $langcode) as $delta => $file) {
       $openapi_files[] = [
         // Get the URL of the file on server.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/apigee_api_catalog/src/EventSubscriber/PageNotFoundEventSubscriber.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_api_catalog\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
 use Drupal\Core\Path\PathMatcherInterface;
 use Drupal\Core\Path\PathValidatorInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;

@@ @@
   /**
    * The path validator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;

@@ @@
   /**
    * The patch matcher service.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;

@@ @@
   /**
    * PageNotFoundEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The patch matcher service.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator service.
    */
   public function __construct(PathMatcherInterface $path_matcher, PathValidatorInterface $path_validator) {
@@ @@
   /**
    * Redirects to the apidoc canonical route if we have a not found exception.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The exception event.
    */
-  public function onNotFoundException(GetResponseForExceptionEvent $event) {
+  public function onNotFoundException(ExceptionEvent $event) {
     // Check if the request uri matches an apidoc canonical route.
     // Also check for apidoc valid path.
-    if ($event->getException() instanceof NotFoundHttpException
+    if ($event->getThrowable() instanceof NotFoundHttpException
       && ($uri = $event->getRequest()->getRequestUri())
       && $this->pathMatcher->matchPath($uri, '/api/*/*')
       && (list(,, $id) = explode('/', $uri))
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/apigee_api_catalog/src/Entity/Routing/ApiDocHtmlRouteProvider.php:60

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the reimport-spec-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getReimportSpecFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/apigee_api_catalog/src/Entity/Form/ApiDocReimportSpecForm.php:18

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_api_catalog\Entity\Form;

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\node\NodeInterface;
 use Drupal\apigee_api_catalog\SpecFetcherInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The ApiDoc spec fetcher service.
    *
-   * @var \Drupal\apigee_api_catalog\SpecFetcherInterface
+   * @var SpecFetcherInterface
    */
   protected $specFetcher;

@@ @@
   /**
    * Constructs a ApiDocReimportSpecForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\apigee_api_catalog\SpecFetcherInterface $spec_fetcher
+   * @param SpecFetcherInterface $spec_fetcher
    *   The ApiDoc spec fetcher service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, MessengerInterface $messenger, SpecFetcherInterface $spec_fetcher) {
@@ @@
   /**
    * Checks access for the form page.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function checkAccess(RouteMatchInterface $route_match, AccountInterface $account) {
-    /** @var \Drupal\node\NodeInterface $entity */
+    /** @var NodeInterface $entity */
     $entity = $route_match->getParameter('node');

     return AccessResult::allowedIf($entity->bundle() == 'apidoc' && $entity->access('update', $account));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/apigee_api_catalog/src/Entity/Access/ApiDocAccessControlHandler.php:19

    ---------- begin diff ----------
@@ @@

 namespace Drupal\apigee_api_catalog\Entity\Access;

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\apigee_api_catalog\Entity\ApiDocInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityHandlerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs an access control handler instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\apigee_api_catalog\Entity\ApiDocInterface $entity */
+    /** @var ApiDocInterface $entity */
     $access = parent::checkAccess($entity, $operation, $account);

     // Access control for revisions.
@@ @@
   /**
    * Additional access control for revisions.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to check access.
    * @param string $operation
    *   The entity operation.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   protected function checkAccessRevisions(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $entity_storage */
+    /** @var EntityStorageInterface $entity_storage */
     $entity_storage = $this->entityTypeManager->getStorage($this->entityTypeId);

     // Must have access to the same operation on the default revision.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/apigee_api_catalog/apigee_api_catalog.module:185

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   The form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function _apigee_api_catalog_form_node_form_validate(&$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


15) modules/contrib/apigee_api_catalog/apigee_api_catalog.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 /**
  * @file
  * Copyright 2019 Google Inc.
@@ @@
   $entity_type = $definition_update_manager->getEntityType($entity_type_id);

   // Update the field storage definition.
-  /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $field_storage_definitions */
+  /** @var FieldStorageDefinitionInterface[] $field_storage_definitions */
   $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);
   $field_storage_definitions[$field_name]->setSetting('max_length', $field_length);
   $definition_update_manager->updateFieldableEntityType($entity_type, $field_storage_definitions, $sandbox);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 15 files have been changed by Rector                                      

