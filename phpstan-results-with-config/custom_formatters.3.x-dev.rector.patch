diff --git a/src/Controller/CustomFormattersController.php b/src/Controller/CustomFormattersController.php
index 642acf6..e687be3 100644
--- a/src/Controller/CustomFormattersController.php
+++ b/src/Controller/CustomFormattersController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\custom_formatters\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\custom_formatters\FormatterInterface;
@@ -57,7 +58,7 @@ class CustomFormattersController extends ControllerBase implements ContainerInje
   /**
    * Displays add content links for available formatter types.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the formatter types that can be added;
    *   however, if there is only one formatter type available for the user, the
    *   function will return a RedirectResponse to the formatter add page for
diff --git a/src/Entity/Formatter.php b/src/Entity/Formatter.php
index b77a3ef..ae0752f 100644
--- a/src/Entity/Formatter.php
+++ b/src/Entity/Formatter.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\custom_formatters\Entity;
 
+use Drupal\Core\Field\FieldTypePluginManagerInterface;
+use Drupal\custom_formatters\FormatterExtrasInterface;
+use Drupal\custom_formatters\FormatterTypeManager;
+use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -45,7 +49,7 @@ class Formatter extends ConfigEntityBase implements FormatterInterface {
    */
   public function calculateDependencies() {
     // Custom Formatter Type provider.
-    /** @var \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager */
+    /** @var FieldTypePluginManagerInterface $field_type_manager */
     $field_type_manager = \Drupal::service('plugin.manager.field.field_type');
     $field_type_definitions = $field_type_manager->getDefinitions();
     /** @var string $field_type */
@@ -68,7 +72,7 @@ class Formatter extends ConfigEntityBase implements FormatterInterface {
     }
 
     // Custom Formatter Extras.
-    /** @var \Drupal\custom_formatters\FormatterExtrasInterface $extras_manager */
+    /** @var FormatterExtrasInterface $extras_manager */
     $extras_manager = \Drupal::service('plugin.manager.custom_formatters.formatter_extras');
     $extras = $extras_manager->getDefinitions();
     if (isset($extras) && is_array($extras)) {
@@ -84,7 +88,7 @@ class Formatter extends ConfigEntityBase implements FormatterInterface {
    * {@inheritdoc}
    */
   public function getFormatterType() {
-    /** @var \Drupal\custom_formatters\FormatterTypeManager $plugin_manager */
+    /** @var FormatterTypeManager $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.custom_formatters.formatter_type');
 
     // Ensure Formatter Type exists.
@@ -100,7 +104,7 @@ class Formatter extends ConfigEntityBase implements FormatterInterface {
    * {@inheritdoc}
    */
   public function getDependentEntities() {
-    /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
+    /** @var ConfigManagerInterface $config_manager */
     $config_manager = \Drupal::service('config.manager');
 
     // Get the dependent entities.
@@ -113,7 +117,7 @@ class Formatter extends ConfigEntityBase implements FormatterInterface {
    * {@inheritdoc}
    */
   public static function postLoad(EntityStorageInterface $storage, array &$entities) {
-    /** @var \Drupal\custom_formatters\FormatterInterface $entity */
+    /** @var FormatterInterface $entity */
     foreach ($entities as $entity) {
       if ($entity->getFormatterType()) {
         $entity->getFormatterType()->postLoad();
diff --git a/src/Form/FormatterForm.php b/src/Form/FormatterForm.php
index 0073deb..f935f75 100644
--- a/src/Form/FormatterForm.php
+++ b/src/Form/FormatterForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\custom_formatters\Form;
 
+use Drupal\custom_formatters\FormatterInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\Core\Field\FormatterPluginManager;
@@ -18,7 +19,7 @@ class FormatterForm extends EntityForm {
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\custom_formatters\FormatterInterface
+   * @var FormatterInterface
    */
   protected $entity;
 
@@ -257,7 +258,7 @@ class FormatterForm extends EntityForm {
       }
       $list[$entity_type_id]['#items'][$entity->id()] = $entity->label() ?: $entity->id();
     }
-    return render($list);
+    return \Drupal::service('renderer')->render($list);
   }
 
   /**
diff --git a/src/FormatterExtrasBase.php b/src/FormatterExtrasBase.php
index fafa140..e149601 100644
--- a/src/FormatterExtrasBase.php
+++ b/src/FormatterExtrasBase.php
@@ -15,7 +15,7 @@ abstract class FormatterExtrasBase extends PluginBase implements FormatterExtras
   /**
    * The Formatter entity.
    *
-   * @var \Drupal\custom_formatters\FormatterInterface
+   * @var FormatterInterface
    */
   protected $entity = NULL;
 
diff --git a/src/FormatterListBuilder.php b/src/FormatterListBuilder.php
index 176ab6b..499569f 100644
--- a/src/FormatterListBuilder.php
+++ b/src/FormatterListBuilder.php
@@ -37,9 +37,9 @@ class FormatterListBuilder extends ConfigEntityListBuilder {
   /**
    * Constructs a new FormatterListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, FormatterTypeManager $formatter_type_manager) {
@@ -61,7 +61,7 @@ class FormatterListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\custom_formatters\FormatterInterface $formatter */
+    /** @var FormatterInterface $formatter */
     $formatter = $entity;
 
     $row['label'] = $formatter->label();
diff --git a/src/FormatterTypeBase.php b/src/FormatterTypeBase.php
index e1c74a7..ba10f9a 100644
--- a/src/FormatterTypeBase.php
+++ b/src/FormatterTypeBase.php
@@ -15,7 +15,7 @@ abstract class FormatterTypeBase extends PluginBase implements FormatterTypeInte
   /**
    * The Formatter entity.
    *
-   * @var \Drupal\custom_formatters\FormatterInterface
+   * @var FormatterInterface
    */
   protected $entity = NULL;
 
diff --git a/src/FormatterTypeInterface.php b/src/FormatterTypeInterface.php
index 09b769d..a67b02d 100644
--- a/src/FormatterTypeInterface.php
+++ b/src/FormatterTypeInterface.php
@@ -22,7 +22,7 @@ interface FormatterTypeInterface extends PluginInspectionInterface {
   /**
    * Builds a renderable array for a field value.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field values to be rendered.
    * @param string $langcode
    *   The language that should be used to render the field.
diff --git a/src/Plugin/CustomFormatters/FormatterType/FormatterPreset.php b/src/Plugin/CustomFormatters/FormatterType/FormatterPreset.php
index 6987ef9..5446125 100644
--- a/src/Plugin/CustomFormatters/FormatterType/FormatterPreset.php
+++ b/src/Plugin/CustomFormatters/FormatterType/FormatterPreset.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\custom_formatters\Plugin\CustomFormatters\FormatterType;
 
+use Drupal\Core\Field\FormatterPluginManager;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\Field\FormatterInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Form\FormStateInterface;
@@ -21,7 +24,7 @@ class FormatterPreset extends FormatterTypeBase {
   /**
    * The Formatter plugin manager.
    *
-   * @var \Drupal\Core\Field\FormatterPluginManager
+   * @var FormatterPluginManager
    */
   protected $formatterManager = NULL;
 
@@ -74,7 +77,7 @@ class FormatterPreset extends FormatterTypeBase {
     $formatters = $this->formatterManager->getDefinitions();
     foreach ($formatters as $formatter_name => $formatter) {
       if (in_array($field_type, $formatter['field_types'])) {
-        /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $label */
+        /** @var TranslatableMarkup $label */
         $label = $formatter['label'];
         $options[$formatter_name] = $label->render();
       }
@@ -145,7 +148,7 @@ class FormatterPreset extends FormatterTypeBase {
    * @param string $field_type
    *   The field type.
    *
-   * @return \Drupal\Core\Field\FormatterInterface
+   * @return FormatterInterface
    *   A dummy formatter instance.
    */
   protected function getFormatter($formatter_name, $field_type) {
diff --git a/src/Plugin/Derivative/CustomFormatters.php b/src/Plugin/Derivative/CustomFormatters.php
index 1013765..11effb6 100644
--- a/src/Plugin/Derivative/CustomFormatters.php
+++ b/src/Plugin/Derivative/CustomFormatters.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\custom_formatters\Plugin\Derivative;
 
+use Drupal\custom_formatters\FormatterInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 
 /**
@@ -25,7 +26,7 @@ class CustomFormatters extends DeriverBase {
     $formatters = \Drupal::entityTypeManager()
       ->getStorage('formatter')
       ->loadMultiple();
-    /** @var \Drupal\custom_formatters\FormatterInterface $formatter */
+    /** @var FormatterInterface $formatter */
     foreach ($formatters as $formatter) {
       if ($formatter->get('status')) {
         $this->derivatives[$formatter->id()] = $base_plugin_definition;
diff --git a/src/Plugin/Field/FieldFormatter/CustomFormatters.php b/src/Plugin/Field/FieldFormatter/CustomFormatters.php
index 404fb34..a76a623 100644
--- a/src/Plugin/Field/FieldFormatter/CustomFormatters.php
+++ b/src/Plugin/Field/FieldFormatter/CustomFormatters.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\custom_formatters\Plugin\Field\FieldFormatter;
 
+use Drupal\custom_formatters\FormatterInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\Plugin\Field\FieldFormatter\EntityReferenceFormatterBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -21,7 +22,7 @@ class CustomFormatters extends EntityReferenceFormatterBase {
    * {@inheritdoc}
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
-    /** @var \Drupal\custom_formatters\FormatterInterface $formatter */
+    /** @var FormatterInterface $formatter */
     $formatter = \Drupal::entityTypeManager()
       ->getStorage('formatter')
       ->load($this->getPluginDefinition()['formatter']);
