modules/contrib/error_page/src/ErrorPageErrorHandler.php
modules/contrib/error_page/src/ErrorPagePhpErrorLogger.php
modules/contrib/error_page/src/ErrorPagePhpErrorLoggerInterface.php
modules/contrib/error_page/src/ErrorPageRenderer.php
modules/contrib/error_page/src/ErrorPageServiceProvider.php
modules/contrib/error_page/src/EventSubscriber/ErrorPageExceptionLoggingSubscriber.php
modules/contrib/error_page/src/EventSubscriber/ErrorPageFinalExceptionSubscriber.php
modules/contrib/error_page/tests/modules/error_page_test/src/Controller/ErrorPageTestController.php
modules/contrib/error_page/tests/src/Functional/ErrorPageTest.php

4 files with changes
====================

1) modules/contrib/error_page/tests/src/Functional/ErrorPageTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\error_page\Functional;

+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Exception\ResponseTextException;
+use Drupal\Core\Database\Connection;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
    * @param int $code
    *   The expected HTTP code.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    *   When the expectation is not met.
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    *   When the response code expectation is not met.
    */
   protected function doTest(string $path, int $code): void {
@@ @@
     $this->assertArrayNotHasKey('@uuid', $variables);

     // Customize the template.
-    $template = file_get_contents(drupal_get_path('module', 'error_page') . '/markup/error_page.html');
+    $template = file_get_contents(\Drupal::service('extension.list.module')->getPath('error_page') . '/markup/error_page.html');
     // Fix the message to work without UUID.
     $template = str_replace(' including <em>{{ uuid }}</em> in your message', '', $template);
     file_put_contents('public://error_page.html', $template);
@@ @@
    *   The last log entry.
    */
   protected function getLastLog(): \stdClass {
-    /** @var \Drupal\Core\Database\Connection $db */
+    /** @var Connection $db */
     $db = $this->container->get('database');
     $log = $db->select('watchdog', 'w')
       ->fields('w')
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/error_page/src/EventSubscriber/ErrorPageFinalExceptionSubscriber.php:9

    ---------- begin diff ----------
@@ @@
 use Drupal\error_page\ErrorPageRenderer;
 use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpKernel\Event\ExceptionEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;
 use Symfony\Component\HttpKernel\KernelEvents;

@@ @@
    * {@inheritdoc}
    */
   public function onException(ExceptionEvent $event): void {
-    $exception = $event->getException();
+    $exception = $event->getThrowable();
     $error = Error::decodeException($exception);

     // Generate an error report if the current error reporting level allows this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/error_page/src/EventSubscriber/ErrorPageExceptionLoggingSubscriber.php:9

    ---------- begin diff ----------
@@ @@
 use Drupal\Core\Utility\Error;
 use Drupal\error_page\ErrorPagePhpErrorLogger;
 use Symfony\Component\HttpKernel\Event\ExceptionEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;

 /**
@@ @@
     // Attach the UUID to the the event. Don't call the generator as service.
     $event->uuid = $uuid_enabled ? (new Php())->generate() : NULL;

-    $exception = $event->getException();
+    $exception = $event->getThrowable();
     $error = Error::decodeException($exception);
     if ($event->uuid) {
       $error += ['@uuid' => $event->uuid];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/error_page/src/ErrorPageRenderer.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\error_page;

+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Site\Settings;

 /**
@@ @@
    * @param mixed $original_exception
    *   The original exception. Is used if an additional exception occurs during
    *   handling the current error.
-   * @param \Drupal\Component\Render\MarkupInterface|string $error_report
+   * @param MarkupInterface|string $error_report
    *   The technical error report, including the backtrace, if the site's
    *   configuration allows it.
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 4 files have been changed by Rector                                       

