diff --git a/bookable_calendar.info.yml b/bookable_calendar.info.yml
index 21a5955..e5baec8 100644
--- a/bookable_calendar.info.yml
+++ b/bookable_calendar.info.yml
@@ -2,8 +2,7 @@ name: Bookable Calendar
 type: module
 description: 'Create an easy to use bookable calendar for people to book time.'
 package: Other
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 dependencies:
   - drupal:text
   - drupal:views
diff --git a/src/BookableCalendarListBuilder.php b/src/BookableCalendarListBuilder.php
index f6a914f..c6c5cc0 100644
--- a/src/BookableCalendarListBuilder.php
+++ b/src/BookableCalendarListBuilder.php
@@ -18,27 +18,27 @@ class BookableCalendarListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * Constructs a new BookableCalendarListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
diff --git a/src/BookableCalendarOpeningListBuilder.php b/src/BookableCalendarOpeningListBuilder.php
index 2127802..1ff866e 100644
--- a/src/BookableCalendarOpeningListBuilder.php
+++ b/src/BookableCalendarOpeningListBuilder.php
@@ -18,27 +18,27 @@ class BookableCalendarOpeningListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * Constructs a new BookableCalendarOpeningListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
diff --git a/src/BookingContactAccessControlHandler.php b/src/BookingContactAccessControlHandler.php
index d170ddf..25fa799 100644
--- a/src/BookingContactAccessControlHandler.php
+++ b/src/BookingContactAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bookable_calendar;
 
+use Drupal\bookable_calendar\Entity\BookingContact;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Entity\EntityAccessControlHandler;
@@ -58,7 +59,7 @@ class BookingContactAccessControlHandler extends EntityAccessControlHandler {
    * Take a Booking Contact entity and check for query params
    * email and login_token and validate those match the Entity
    *
-   * @param Drupal\bookable_calendar\Entity\BookingContact $entity
+   * @param BookingContact $entity
    * @return boolean
    */
   protected function checkTokenAccess($entity) {
@@ -76,7 +77,7 @@ class BookingContactAccessControlHandler extends EntityAccessControlHandler {
   /**
    * Check if tempstore allows user on this entity
    *
-   * @param Drupal\bookable_calendar\Entity\BookingContact $entity
+   * @param BookingContact $entity
    * @return boolean
    */
   protected function checkTempStore($entity) {
@@ -89,7 +90,7 @@ class BookingContactAccessControlHandler extends EntityAccessControlHandler {
    * Check different methods whether this non logged in user
    * has access to this Entity
    *
-   * @param Drupal\bookable_calendar\Entity\BookingContact $entity
+   * @param BookingContact $entity
    * @return boolean
    */
   protected function checkAccessAlt($entity) {
diff --git a/src/BookingContactListBuilder.php b/src/BookingContactListBuilder.php
index ddc4f6b..ccbec51 100644
--- a/src/BookingContactListBuilder.php
+++ b/src/BookingContactListBuilder.php
@@ -18,27 +18,27 @@ class BookingContactListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * Constructs a new BookingContactListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ -87,7 +87,9 @@ class BookingContactListBuilder extends EntityListBuilder {
    */
   public function buildRow(EntityInterface $entity) {
     /* @var $entity \Drupal\bookable_calendar\BookingContactInterface */
-    $row['id'] = $entity->link();
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Please confirm that `$entity` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+    $row['id'] = $entity->toLink()->toString();
     return $row + parent::buildRow($entity);
   }
 
diff --git a/src/BookingListBuilder.php b/src/BookingListBuilder.php
index 6dc10fd..4e4af88 100644
--- a/src/BookingListBuilder.php
+++ b/src/BookingListBuilder.php
@@ -17,18 +17,18 @@ class BookingListBuilder extends EntityListBuilder {
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new BookingListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter) {
diff --git a/src/Form/BookableCalendarForm.php b/src/Form/BookableCalendarForm.php
index 84f4b25..c7a1add 100644
--- a/src/Form/BookableCalendarForm.php
+++ b/src/Form/BookableCalendarForm.php
@@ -20,7 +20,7 @@ class BookableCalendarForm extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New bookable calendar %label has been created.', $message_arguments));
diff --git a/src/Form/BookableCalendarOpeningForm.php b/src/Form/BookableCalendarOpeningForm.php
index 00b0a52..f94c5b6 100644
--- a/src/Form/BookableCalendarOpeningForm.php
+++ b/src/Form/BookableCalendarOpeningForm.php
@@ -20,7 +20,7 @@ class BookableCalendarOpeningForm extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New bookable calendar opening %label has been created.', $message_arguments));
diff --git a/src/Form/BookingContactForm.php b/src/Form/BookingContactForm.php
index 6266f64..fc23034 100644
--- a/src/Form/BookingContactForm.php
+++ b/src/Form/BookingContactForm.php
@@ -20,7 +20,7 @@ class BookingContactForm extends ContentEntityForm {
     $link = $entity->toLink($this->t('View'))->toRenderable();
 
     $message_arguments = ['%label' => $this->entity->label()];
-    $logger_arguments = $message_arguments + ['link' => render($link)];
+    $logger_arguments = $message_arguments + ['link' => \Drupal::service('renderer')->render($link)];
 
     if ($result == SAVED_NEW) {
       $this->messenger()->addStatus($this->t('New booking contact %label has been created.', $message_arguments));
diff --git a/src/Notification.php b/src/Notification.php
index 1202e19..7eaef84 100644
--- a/src/Notification.php
+++ b/src/Notification.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bookable_calendar;
 
+use Drupal\bookable_calendar\Entity\BookingContact;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Mail\MailManagerInterface;
@@ -15,21 +16,21 @@ class Notification {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
   /**
    * Undocumented variable
    *
-   * @var \Drupal\bookable_calendar\Entity\BookingContact
+   * @var BookingContact
    */
   protected $bookableContact;
 
@@ -43,11 +44,11 @@ class Notification {
   /**
    * Creates a new ModerationInformation instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, MailManagerInterface $mail_manager, MessengerInterface $messenger) {
@@ -59,7 +60,7 @@ class Notification {
   /**
    * Notify the proper users of a new booking taking place
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity we need to send a notification on.
    *
    * @return void
diff --git a/src/Plugin/Validation/Constraint/CalendarOpeningIsActiveValidator.php b/src/Plugin/Validation/Constraint/CalendarOpeningIsActiveValidator.php
index 40a4d3d..a36b72e 100644
--- a/src/Plugin/Validation/Constraint/CalendarOpeningIsActiveValidator.php
+++ b/src/Plugin/Validation/Constraint/CalendarOpeningIsActiveValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bookable_calendar\Plugin\Validation\Constraint;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ -15,7 +16,7 @@ class CalendarOpeningIsActiveValidator extends ConstraintValidator {
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->context->getRoot()->getValue();
 
     $parent_opening_instance = $entity->booking_instance->entity;
diff --git a/src/Plugin/Validation/Constraint/CalendarOpeningMaxPartySizeValidator.php b/src/Plugin/Validation/Constraint/CalendarOpeningMaxPartySizeValidator.php
index fffe5c8..b601483 100644
--- a/src/Plugin/Validation/Constraint/CalendarOpeningMaxPartySizeValidator.php
+++ b/src/Plugin/Validation/Constraint/CalendarOpeningMaxPartySizeValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bookable_calendar\Plugin\Validation\Constraint;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ -15,7 +16,7 @@ class CalendarOpeningMaxPartySizeValidator extends ConstraintValidator {
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->context->getRoot()->getValue();
 
     $parent_opening_instance = $entity->booking_instance->entity;
diff --git a/src/Plugin/Validation/Constraint/CalendarOpeningNotInPastValidator.php b/src/Plugin/Validation/Constraint/CalendarOpeningNotInPastValidator.php
index db20cac..b1093d6 100644
--- a/src/Plugin/Validation/Constraint/CalendarOpeningNotInPastValidator.php
+++ b/src/Plugin/Validation/Constraint/CalendarOpeningNotInPastValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bookable_calendar\Plugin\Validation\Constraint;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ -15,7 +16,7 @@ class CalendarOpeningNotInPastValidator extends ConstraintValidator {
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->context->getRoot()->getValue();
 
     $parent_opening_instance = $entity->booking_instance->entity;
diff --git a/src/Plugin/Validation/Constraint/CalendarOpeningTooFarAwayValidator.php b/src/Plugin/Validation/Constraint/CalendarOpeningTooFarAwayValidator.php
index 958a090..65664e7 100644
--- a/src/Plugin/Validation/Constraint/CalendarOpeningTooFarAwayValidator.php
+++ b/src/Plugin/Validation/Constraint/CalendarOpeningTooFarAwayValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bookable_calendar\Plugin\Validation\Constraint;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ -15,7 +16,7 @@ class CalendarOpeningTooFarAwayValidator extends ConstraintValidator {
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->context->getRoot()->getValue();
 
     $parent_opening_instance = $entity->booking_instance->entity;
diff --git a/src/Plugin/Validation/Constraint/CalendarOpeningTooSoonValidator.php b/src/Plugin/Validation/Constraint/CalendarOpeningTooSoonValidator.php
index ae81878..0c2d006 100644
--- a/src/Plugin/Validation/Constraint/CalendarOpeningTooSoonValidator.php
+++ b/src/Plugin/Validation/Constraint/CalendarOpeningTooSoonValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bookable_calendar\Plugin\Validation\Constraint;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ -15,7 +16,7 @@ class CalendarOpeningTooSoonValidator extends ConstraintValidator {
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->context->getRoot()->getValue();
 
     $parent_opening_instance = $entity->booking_instance->entity;
diff --git a/src/Plugin/Validation/Constraint/CalendarOpeningVacancyValidator.php b/src/Plugin/Validation/Constraint/CalendarOpeningVacancyValidator.php
index a01ee99..b2287af 100644
--- a/src/Plugin/Validation/Constraint/CalendarOpeningVacancyValidator.php
+++ b/src/Plugin/Validation/Constraint/CalendarOpeningVacancyValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\bookable_calendar\Plugin\Validation\Constraint;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ -15,7 +16,7 @@ class CalendarOpeningVacancyValidator extends ConstraintValidator {
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->context->getRoot()->getValue();
 
     $parent_opening_instance = $entity->booking_instance->entity;
