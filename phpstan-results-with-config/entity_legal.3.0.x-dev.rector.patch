diff --git a/entity_legal.install b/entity_legal.install
index 3d1e609..cd787b8 100644
--- a/entity_legal.install
+++ b/entity_legal.install
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\entity_legal\EntityLegalDocumentAcceptanceInterface;
+use Drupal\entity_legal\EntityLegalDocumentVersionInterface;
+use Drupal\entity_legal\EntityLegalDocumentInterface;
 /**
  * @file
  * Install, update and uninstall functions for the entity_legal module.
@@ -19,7 +22,7 @@ function entity_legal_update_8100() {
   $map = [];
   $document_acceptances = $entity_manager->getStorage(ENTITY_LEGAL_DOCUMENT_ACCEPTANCE_ENTITY_NAME)
     ->loadMultiple();
-  /** @var \Drupal\entity_legal\EntityLegalDocumentAcceptanceInterface $document_acceptance */
+  /** @var EntityLegalDocumentAcceptanceInterface $document_acceptance */
   foreach ($document_acceptances as $id => $document_acceptance) {
     $map['acceptances'][$id] = $document_acceptance->get('document_version_name')->entity->id();
   }
@@ -29,7 +32,7 @@ function entity_legal_update_8100() {
     ->loadMultiple();
   $update_manager->uninstallEntityType($update_manager->getEntityType(ENTITY_LEGAL_DOCUMENT_VERSION_ENTITY_NAME));
   $update_manager->installEntityType($entity_manager->getDefinition(ENTITY_LEGAL_DOCUMENT_VERSION_ENTITY_NAME));
-  /** @var \Drupal\entity_legal\EntityLegalDocumentVersionInterface $document_version */
+  /** @var EntityLegalDocumentVersionInterface $document_version */
   foreach ($document_versions as $id => $document_version) {
     $map['versions'][$id] = $document_version->bundle() . '_' . $document_version->getCreatedTime();
     $entity_manager->getStorage(ENTITY_LEGAL_DOCUMENT_VERSION_ENTITY_NAME)
@@ -60,7 +63,7 @@ function entity_legal_update_8100() {
 
   $documents = $entity_manager->getStorage(ENTITY_LEGAL_DOCUMENT_ENTITY_NAME)
     ->loadMultiple();
-  /** @var \Drupal\entity_legal\EntityLegalDocumentInterface $document */
+  /** @var EntityLegalDocumentInterface $document */
   foreach ($documents as $document) {
     $document->set('published_version', $map['versions'][$document->get('published_version')]);
     $document->save();
@@ -106,7 +109,7 @@ function entity_legal_update_8200(array &$sandbox) {
   }
 
   $ids_to_process = array_splice($sandbox['published'], 0, 10);
-  /** @var \Drupal\entity_legal\EntityLegalDocumentVersionInterface $entity */
+  /** @var EntityLegalDocumentVersionInterface $entity */
   foreach (EntityLegalDocumentVersion::loadMultiple($ids_to_process) as $entity) {
     $entity->publish()->save();
   }
@@ -127,7 +130,7 @@ function entity_legal_update_9001(array &$sandbox = NULL) {
 
   $ids_to_process = array_splice($sandbox['ids'], 0, 50);
   $sandbox['current'] += count($ids_to_process);
-  /** @var \Drupal\entity_legal\EntityLegalDocumentAcceptanceInterface $entity */
+  /** @var EntityLegalDocumentAcceptanceInterface $entity */
   foreach ($storage->loadMultiple($ids_to_process) as $entity) {
     $entity->set('data', serialize([]))->save();
   }
diff --git a/entity_legal.module b/entity_legal.module
index 7ce2005..83cebfe 100644
--- a/entity_legal.module
+++ b/entity_legal.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\entity_legal\EntityLegalDocumentInterface;
 /**
  * @file
  * Entity Legal module.
@@ -64,7 +65,7 @@ function entity_legal_entity_extra_field_info() {
   $documents = \Drupal::entityTypeManager()
     ->getStorage(ENTITY_LEGAL_DOCUMENT_ENTITY_NAME)
     ->loadByProperties(['require_signup' => 1]);
-  /** @var \Drupal\entity_legal\EntityLegalDocumentInterface $document */
+  /** @var EntityLegalDocumentInterface $document */
   foreach ($documents as $document) {
     if ($document->getPublishedVersion()) {
       $extra['user']['user']['form']['legal_' . $document->id()] = [
diff --git a/entity_legal.tokens.inc b/entity_legal.tokens.inc
index d737336..bb1a285 100644
--- a/entity_legal.tokens.inc
+++ b/entity_legal.tokens.inc
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\entity_legal\EntityLegalDocumentInterface;
+use Drupal\entity_legal\EntityLegalDocumentVersionInterface;
+use Drupal\entity_legal\EntityLegalDocumentAcceptanceInterface;
+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 /**
  * @file
  * Builds placeholder replacement tokens for entity_legal.
@@ -118,7 +122,7 @@ function entity_legal_tokens($type, $tokens, array $data, array $options, Bubble
   switch ($type) {
     case ENTITY_LEGAL_DOCUMENT_ENTITY_NAME:
       if (isset($data[ENTITY_LEGAL_DOCUMENT_ENTITY_NAME])) {
-        /** @var \Drupal\entity_legal\EntityLegalDocumentInterface $entity */
+        /** @var EntityLegalDocumentInterface $entity */
         $entity = $data[ENTITY_LEGAL_DOCUMENT_ENTITY_NAME];
         foreach ($tokens as $name => $original) {
           switch ($name) {
@@ -146,7 +150,7 @@ function entity_legal_tokens($type, $tokens, array $data, array $options, Bubble
 
     case ENTITY_LEGAL_DOCUMENT_VERSION_ENTITY_NAME:
       if (isset($data[ENTITY_LEGAL_DOCUMENT_VERSION_ENTITY_NAME])) {
-        /** @var \Drupal\entity_legal\EntityLegalDocumentVersionInterface $entity */
+        /** @var EntityLegalDocumentVersionInterface $entity */
         $entity = $data[ENTITY_LEGAL_DOCUMENT_VERSION_ENTITY_NAME];
         foreach ($tokens as $name => $original) {
           switch ($name) {
@@ -180,7 +184,7 @@ function entity_legal_tokens($type, $tokens, array $data, array $options, Bubble
 
     case ENTITY_LEGAL_DOCUMENT_ACCEPTANCE_ENTITY_NAME:
       if (isset($data[ENTITY_LEGAL_DOCUMENT_ACCEPTANCE_ENTITY_NAME])) {
-        /** @var \Drupal\entity_legal\EntityLegalDocumentAcceptanceInterface $entity */
+        /** @var EntityLegalDocumentAcceptanceInterface $entity */
         $entity = $data[ENTITY_LEGAL_DOCUMENT_ACCEPTANCE_ENTITY_NAME];
 
         foreach ($tokens as $name => $original) {
@@ -195,7 +199,7 @@ function entity_legal_tokens($type, $tokens, array $data, array $options, Bubble
               break;
 
             case 'author':
-              /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $item */
+              /** @var EntityReferenceFieldItemListInterface $item */
               $item = $entity->get('uid');
               $replacements[$original] = $item->referencedEntities()[0]->label();
               break;
diff --git a/src/Annotation/EntityLegal.php b/src/Annotation/EntityLegal.php
index 936f083..3c79a3a 100644
--- a/src/Annotation/EntityLegal.php
+++ b/src/Annotation/EntityLegal.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_legal\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class EntityLegal extends Plugin {
   /**
    * The human-readable name of the Entity Legal method plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/EntityLegalController.php b/src/Controller/EntityLegalController.php
index 76b9722..2c79221 100644
--- a/src/Controller/EntityLegalController.php
+++ b/src/Controller/EntityLegalController.php
@@ -21,14 +21,14 @@ class EntityLegalController extends ControllerBase {
   /**
    * The entity legal document version storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityLegalDocumentVersionStorage;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
@@ -45,9 +45,9 @@ class EntityLegalController extends ControllerBase {
   /**
    * EntityLegalController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_legal_document_version_storage
+   * @param EntityStorageInterface $entity_legal_document_version_storage
    *   The custom block storage.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    */
   public function __construct(EntityStorageInterface $entity_legal_document_version_storage, Token $token) {
@@ -58,7 +58,7 @@ class EntityLegalController extends ControllerBase {
   /**
    * Page title callback for the Entity Legal Document edit form.
    *
-   * @param \Drupal\entity_legal\EntityLegalDocumentInterface $entity_legal_document
+   * @param EntityLegalDocumentInterface $entity_legal_document
    *   The Entity Legal Document entity.
    */
   public function documentEditPageTitle(EntityLegalDocumentInterface $entity_legal_document) {
@@ -68,9 +68,9 @@ class EntityLegalController extends ControllerBase {
   /**
    * Page callback for the Entity Legal Document.
    *
-   * @param \Drupal\entity_legal\EntityLegalDocumentInterface $entity_legal_document
+   * @param EntityLegalDocumentInterface $entity_legal_document
    *   The Entity Legal Document entity.
-   * @param \Drupal\entity_legal\EntityLegalDocumentVersionInterface|null $entity_legal_document_version
+   * @param EntityLegalDocumentVersionInterface|null $entity_legal_document_version
    *   The Entity Legal Document version entity.
    */
   public function documentPage(EntityLegalDocumentInterface $entity_legal_document, EntityLegalDocumentVersionInterface $entity_legal_document_version = NULL) {
@@ -94,9 +94,9 @@ class EntityLegalController extends ControllerBase {
   /**
    * Page title callback for the Entity Legal Document.
    *
-   * @param \Drupal\entity_legal\EntityLegalDocumentInterface $entity_legal_document
+   * @param EntityLegalDocumentInterface $entity_legal_document
    *   The Entity Legal Document entity.
-   * @param \Drupal\entity_legal\EntityLegalDocumentVersionInterface|null $entity_legal_document_version
+   * @param EntityLegalDocumentVersionInterface|null $entity_legal_document_version
    *   The Entity Legal Document version entity.
    */
   public function documentPageTitle(EntityLegalDocumentInterface $entity_legal_document, EntityLegalDocumentVersionInterface $entity_legal_document_version = NULL) {
@@ -114,9 +114,9 @@ class EntityLegalController extends ControllerBase {
   /**
    * Page callback for the Entity Legal Document Version form.
    *
-   * @param \Drupal\entity_legal\EntityLegalDocumentInterface $entity_legal_document
+   * @param EntityLegalDocumentInterface $entity_legal_document
    *   The entity legal document.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return array
@@ -132,7 +132,7 @@ class EntityLegalController extends ControllerBase {
   /**
    * Page title callback for the Entity Legal Document Version add form.
    *
-   * @param \Drupal\entity_legal\EntityLegalDocumentInterface $entity_legal_document
+   * @param EntityLegalDocumentInterface $entity_legal_document
    *   The entity legal document.
    *
    * @return string
@@ -145,7 +145,7 @@ class EntityLegalController extends ControllerBase {
   /**
    * Page title callback for the Entity Legal Document Version edit form.
    *
-   * @param \Drupal\entity_legal\EntityLegalDocumentVersionInterface $entity_legal_document_version
+   * @param EntityLegalDocumentVersionInterface $entity_legal_document_version
    *   The Entity Legal Document version entity.
    *
    * @return string
diff --git a/src/Entity/EntityLegalDocument.php b/src/Entity/EntityLegalDocument.php
index b1c4fd4..9980650 100644
--- a/src/Entity/EntityLegalDocument.php
+++ b/src/Entity/EntityLegalDocument.php
@@ -116,7 +116,7 @@ class EntityLegalDocument extends ConfigEntityBundleBase implements EntityLegalD
    * {@inheritdoc}
    */
   public function getAcceptanceForm() {
-    /** @var \Drupal\entity_legal\Form\EntityLegalDocumentAcceptanceForm $form */
+    /** @var EntityLegalDocumentAcceptanceForm $form */
     $form = \Drupal::classResolver()->getInstanceFromDefinition(EntityLegalDocumentAcceptanceForm::class);
     $form->setDocument($this);
     return \Drupal::formBuilder()->getForm($form);
@@ -169,7 +169,7 @@ class EntityLegalDocument extends ConfigEntityBundleBase implements EntityLegalD
    */
   public function setPublishedVersion(EntityLegalDocumentVersionInterface $version_entity) {
     if (!$version_entity->isNew()) {
-      /** @var \Drupal\entity_legal\EntityLegalDocumentVersionInterface $unchanged_version */
+      /** @var EntityLegalDocumentVersionInterface $unchanged_version */
       $unchanged_version = $this->entityTypeManager()
         ->getStorage(ENTITY_LEGAL_DOCUMENT_VERSION_ENTITY_NAME)
         ->loadUnchanged($version_entity->id());
@@ -266,7 +266,7 @@ class EntityLegalDocument extends ConfigEntityBundleBase implements EntityLegalD
       $versions = $this->getAllVersions();
     }
 
-    /** @var \Drupal\entity_legal\EntityLegalDocumentVersionInterface $version */
+    /** @var EntityLegalDocumentVersionInterface $version */
     foreach ($versions as $version) {
       $acceptances += $version->getAcceptances($account);
     }
diff --git a/src/Entity/EntityLegalDocumentAcceptance.php b/src/Entity/EntityLegalDocumentAcceptance.php
index 0b7bb35..d51e8e4 100644
--- a/src/Entity/EntityLegalDocumentAcceptance.php
+++ b/src/Entity/EntityLegalDocumentAcceptance.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_legal\Entity;
 
+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ -85,7 +86,7 @@ class EntityLegalDocumentAcceptance extends ContentEntityBase implements EntityL
    * {@inheritdoc}
    */
   public function getDocumentVersion() {
-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $item */
+    /** @var EntityReferenceFieldItemListInterface $item */
     $item = $this->get('document_version_name');
     return $item->referencedEntities()[0];
   }
diff --git a/src/EntityLegalDocumentAcceptanceInterface.php b/src/EntityLegalDocumentAcceptanceInterface.php
index 19fd430..bd83259 100644
--- a/src/EntityLegalDocumentAcceptanceInterface.php
+++ b/src/EntityLegalDocumentAcceptanceInterface.php
@@ -12,7 +12,7 @@ interface EntityLegalDocumentAcceptanceInterface extends ContentEntityInterface
   /**
    * Get the document version this acceptance belongs to.
    *
-   * @return \Drupal\entity_legal\EntityLegalDocumentVersionInterface
+   * @return EntityLegalDocumentVersionInterface
    *   The version of the document corresponding to this acceptance.
    */
   public function getDocumentVersion();
diff --git a/src/EntityLegalDocumentAccessControlHandler.php b/src/EntityLegalDocumentAccessControlHandler.php
index fee3313..f739719 100644
--- a/src/EntityLegalDocumentAccessControlHandler.php
+++ b/src/EntityLegalDocumentAccessControlHandler.php
@@ -23,7 +23,7 @@ class EntityLegalDocumentAccessControlHandler extends EntityAccessControlHandler
       return AccessResult::allowed();
     }
 
-    /** @var \Drupal\entity_legal\EntityLegalDocumentInterface $entity */
+    /** @var EntityLegalDocumentInterface $entity */
     if ($operation == 'view' && $account->hasPermission($entity->getPermissionView())) {
       return AccessResult::allowed();
     }
diff --git a/src/EntityLegalDocumentInterface.php b/src/EntityLegalDocumentInterface.php
index 1e9ed6b..96ed799 100644
--- a/src/EntityLegalDocumentInterface.php
+++ b/src/EntityLegalDocumentInterface.php
@@ -42,7 +42,7 @@ interface EntityLegalDocumentInterface extends ConfigEntityInterface {
   /**
    * Get the acceptances for this entity legal document revision.
    *
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The Drupal user account to check for, or get all acceptances if FALSE.
    * @param bool $published
    *   Get acceptances only for the currently published version.
@@ -98,7 +98,7 @@ interface EntityLegalDocumentInterface extends ConfigEntityInterface {
   /**
    * Check if the given user has agreed to the current version of this document.
    *
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The Drupal user account to check. Default logged in user if not provided.
    *
    * @return bool
@@ -111,7 +111,7 @@ interface EntityLegalDocumentInterface extends ConfigEntityInterface {
    *
    * @param bool $new_user
    *   Whether or not the user to check is a new user signup or not.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The user account to check the access permissions of. Defaults to the
    *   current user if none is provided.
    *
diff --git a/src/EntityLegalDocumentVersionInterface.php b/src/EntityLegalDocumentVersionInterface.php
index 0eacabc..b11d25f 100644
--- a/src/EntityLegalDocumentVersionInterface.php
+++ b/src/EntityLegalDocumentVersionInterface.php
@@ -14,7 +14,7 @@ interface EntityLegalDocumentVersionInterface extends ContentEntityInterface, En
   /**
    * Get the acceptances for this entity legal document version.
    *
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   The Drupal user account to check for, or get all acceptances if NULL.
    *
    * @return array
diff --git a/src/EntityLegalDocumentVersionViewBuilder.php b/src/EntityLegalDocumentVersionViewBuilder.php
index 886d705..b9aa079 100644
--- a/src/EntityLegalDocumentVersionViewBuilder.php
+++ b/src/EntityLegalDocumentVersionViewBuilder.php
@@ -17,7 +17,7 @@ class EntityLegalDocumentVersionViewBuilder extends EntityViewBuilder {
   public function buildComponents(array &$build, array $entities, array $displays, $view_mode) {
     parent::buildComponents($build, $entities, $displays, $view_mode);
 
-    /** @var \Drupal\entity_legal\EntityLegalDocumentVersionInterface $entity */
+    /** @var EntityLegalDocumentVersionInterface $entity */
     foreach ($entities as $id => $entity) {
       // Get acceptance form or information for the current user.
       $document = $entity->getDocument();
diff --git a/src/EntityLegalPermissions.php b/src/EntityLegalPermissions.php
index b6c0bb2..a939a8e 100644
--- a/src/EntityLegalPermissions.php
+++ b/src/EntityLegalPermissions.php
@@ -23,7 +23,7 @@ class EntityLegalPermissions {
   public function permissions() {
     $perms = [];
 
-    /** @var \Drupal\entity_legal\Entity\EntityLegalDocument $document */
+    /** @var EntityLegalDocument $document */
     foreach (EntityLegalDocument::loadMultiple() as $document) {
       $perms[$document->getPermissionView()] = [
         'title' => $this->t('View "@name"', [
diff --git a/src/EntityLegalPluginBase.php b/src/EntityLegalPluginBase.php
index fca3f15..37c7f6f 100644
--- a/src/EntityLegalPluginBase.php
+++ b/src/EntityLegalPluginBase.php
@@ -55,7 +55,7 @@ abstract class EntityLegalPluginBase extends PluginBase implements EntityLegalPl
 
     // Remove any documents from the array set that don't use the given
     // acceptance method.
-    /** @var \Drupal\entity_legal\EntityLegalDocumentInterface $document */
+    /** @var EntityLegalDocumentInterface $document */
     foreach ($documents as $name => $document) {
       $agreed = !$document->userMustAgree($this->pluginDefinition['type'] == 'new_users') || $document->userHasAgreed();
       $is_method = $document->getAcceptanceDeliveryMethod($this->pluginDefinition['type'] == 'new_users') == $this->pluginId;
diff --git a/src/EventSubscriber/EntityLegalSubscriber.php b/src/EventSubscriber/EntityLegalSubscriber.php
index 192d8bc..ea6e087 100644
--- a/src/EventSubscriber/EntityLegalSubscriber.php
+++ b/src/EventSubscriber/EntityLegalSubscriber.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\entity_legal\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -16,10 +16,10 @@ class EntityLegalSubscriber implements EventSubscriberInterface {
   /**
    * Request event callback.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The request event.
    */
-  public function checkRedirect(GetResponseEvent $event) {
+  public function checkRedirect(RequestEvent $event) {
     $context = ['event' => $event];
 
     // Execute Redirect method plugin.
diff --git a/src/Form/EntityLegalDocumentAcceptanceForm.php b/src/Form/EntityLegalDocumentAcceptanceForm.php
index 9e5a2d5..9934949 100644
--- a/src/Form/EntityLegalDocumentAcceptanceForm.php
+++ b/src/Form/EntityLegalDocumentAcceptanceForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_legal\Form;
 
+use Drupal\Core\TempStore\PrivateTempStore;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;
@@ -16,21 +17,21 @@ class EntityLegalDocumentAcceptanceForm extends FormBase {
   /**
    * The Entity Legal Document used by this form.
    *
-   * @var \Drupal\entity_legal\EntityLegalDocumentInterface
+   * @var EntityLegalDocumentInterface
    */
   protected $document;
 
   /**
    * The private temp store.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;
 
   /**
    * Builds a new form instance.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $private_temp_store_factory
+   * @param PrivateTempStoreFactory $private_temp_store_factory
    *   The private temp store factory service.
    */
   public function __construct(PrivateTempStoreFactory $private_temp_store_factory) {
@@ -47,7 +48,7 @@ class EntityLegalDocumentAcceptanceForm extends FormBase {
   /**
    * Sets the legal document.
    *
-   * @param \Drupal\entity_legal\EntityLegalDocumentInterface $document
+   * @param EntityLegalDocumentInterface $document
    *   The legal document.
    */
   public function setDocument(EntityLegalDocumentInterface $document) {
diff --git a/src/Form/EntityLegalDocumentForm.php b/src/Form/EntityLegalDocumentForm.php
index 4a4953e..3687923 100644
--- a/src/Form/EntityLegalDocumentForm.php
+++ b/src/Form/EntityLegalDocumentForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entity_legal\Form;
 
+use Drupal\entity_legal\EntityLegalDocumentInterface;
+use Drupal\entity_legal\Entity\EntityLegalDocumentVersion;
+use Drupal\entity_legal\EntityLegalDocumentVersionInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityStorageInterface;
@@ -29,35 +32,35 @@ class EntityLegalDocumentForm extends EntityForm implements ContainerInjectionIn
   /**
    * The path alias storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $aliasStorage;
 
   /**
    * The entity legal plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;
 
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\entity_legal\EntityLegalDocumentInterface
+   * @var EntityLegalDocumentInterface
    */
   protected $entity;
 
   /**
    * The AccountProxy service.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
 
   /**
    * The Module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
@@ -133,7 +136,7 @@ class EntityLegalDocumentForm extends EntityForm implements ContainerInjectionIn
       ];
       $options = [];
 
-      /** @var \Drupal\entity_legal\Entity\EntityLegalDocumentVersion $version */
+      /** @var EntityLegalDocumentVersion $version */
       $published_version = NULL;
       foreach ($versions as $version) {
         $route_parameters = ['entity_legal_document' => $this->entity->id()];
@@ -179,7 +182,7 @@ class EntityLegalDocumentForm extends EntityForm implements ContainerInjectionIn
           'title' => Link::createFromRoute($version->label(), $route_name, $route_parameters),
           'created' => $version->getFormattedDate('created'),
           'changed' => $version->getFormattedDate('changed'),
-          'operations' => render($operations),
+          'operations' => \Drupal::service('renderer')->render($operations),
         ];
       }
 
@@ -302,7 +305,7 @@ class EntityLegalDocumentForm extends EntityForm implements ContainerInjectionIn
       return;
     }
 
-    /** @var \Drupal\path_alias\PathAliasInterface $alias */
+    /** @var PathAliasInterface $alias */
     $alias = $this->pathAlias($this->entity->language()->getId());
     $aliasSource = NULL;
 
@@ -367,7 +370,7 @@ class EntityLegalDocumentForm extends EntityForm implements ContainerInjectionIn
     if (!$path) {
       return NULL;
     }
-    /** @var \Drupal\path_alias\PathAliasInterface[] $aliases */
+    /** @var PathAliasInterface[] $aliases */
     $aliases = $this->aliasStorage->loadByProperties([
       'langcode' => $lang_code,
       'path' => $path,
@@ -487,7 +490,7 @@ class EntityLegalDocumentForm extends EntityForm implements ContainerInjectionIn
     // Update the published version.
     if ($form_state->get('published_version') && $form_state->get('published_version') !== $form_state->getValue('published_version')) {
       $storage = $this->entityTypeManager->getStorage(ENTITY_LEGAL_DOCUMENT_VERSION_ENTITY_NAME);
-      /** @var \Drupal\entity_legal\EntityLegalDocumentVersionInterface $published_version */
+      /** @var EntityLegalDocumentVersionInterface $published_version */
       $published_version = $storage->load($form_state->getValue('published_version'));
       $this->entity->setPublishedVersion($published_version);
     }
diff --git a/src/Form/EntityLegalDocumentVersionDeleteForm.php b/src/Form/EntityLegalDocumentVersionDeleteForm.php
index a9f2c2b..c579e68 100644
--- a/src/Form/EntityLegalDocumentVersionDeleteForm.php
+++ b/src/Form/EntityLegalDocumentVersionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_legal\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -44,7 +45,7 @@ class EntityLegalDocumentVersionDeleteForm extends ContentEntityConfirmFormBase
    *
    * Delete the entity and log the event. logger() replaces the watchdog.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $entity = $this->getEntity();
diff --git a/src/Form/EntityLegalDocumentVersionForm.php b/src/Form/EntityLegalDocumentVersionForm.php
index e63fa32..c2667b9 100644
--- a/src/Form/EntityLegalDocumentVersionForm.php
+++ b/src/Form/EntityLegalDocumentVersionForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_legal\Form;
 
+use Drupal\entity_legal\EntityLegalDocumentVersionInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ -17,7 +18,7 @@ class EntityLegalDocumentVersionForm extends ContentEntityForm {
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\entity_legal\EntityLegalDocumentVersionInterface
+   * @var EntityLegalDocumentVersionInterface
    */
   protected $entity;
 
@@ -34,8 +35,8 @@ class EntityLegalDocumentVersionForm extends ContentEntityForm {
           $clone = $published_version->createDuplicate();
           // Unset properties that shouldn't be copied over.
           $clone->set('name', NULL);
-          $clone->set('created', REQUEST_TIME);
-          $clone->set('changed', REQUEST_TIME);
+          $clone->set('created', \Drupal::time()->getRequestTime());
+          $clone->set('changed', \Drupal::time()->getRequestTime());
           $clone->set('published', FALSE);
           $this->setEntity($clone);
         }
diff --git a/src/Plugin/EntityLegal/Message.php b/src/Plugin/EntityLegal/Message.php
index 3e66c30..4185739 100644
--- a/src/Plugin/EntityLegal/Message.php
+++ b/src/Plugin/EntityLegal/Message.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_legal\Plugin\EntityLegal;
 
+use Drupal\entity_legal\EntityLegalDocumentInterface;
 use Drupal\entity_legal\EntityLegalPluginBase;
 use Drupal\Core\Link;
 
@@ -20,7 +21,7 @@ class Message extends EntityLegalPluginBase {
    * {@inheritdoc}
    */
   public function execute(array &$context = []) {
-    /** @var \Drupal\entity_legal\EntityLegalDocumentInterface $document */
+    /** @var EntityLegalDocumentInterface $document */
     foreach ($this->documents as $document) {
       $message = t('Please accept the @document_name.', [
         '@document_name' => Link::createFromRoute($document->getPublishedVersion()->label(), 'entity.entity_legal_document.canonical', [
diff --git a/src/Plugin/EntityLegal/Popup.php b/src/Plugin/EntityLegal/Popup.php
index 443d3ca..a90391c 100644
--- a/src/Plugin/EntityLegal/Popup.php
+++ b/src/Plugin/EntityLegal/Popup.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_legal\Plugin\EntityLegal;
 
+use Drupal\Core\Render\RendererInterface;
+use Drupal\entity_legal\EntityLegalDocumentInterface;
 use Drupal\entity_legal\EntityLegalPluginBase;
 
 /**
@@ -20,12 +22,12 @@ class Popup extends EntityLegalPluginBase {
    */
   public function execute(array &$context = []) {
     if (!empty($this->documents)) {
-      /** @var \Drupal\Core\Render\RendererInterface $renderer */
+      /** @var RendererInterface $renderer */
       $renderer = \Drupal::service('renderer');
       $view_builder = \Drupal::entityTypeManager()
         ->getViewBuilder(ENTITY_LEGAL_DOCUMENT_VERSION_ENTITY_NAME);
 
-      /** @var \Drupal\entity_legal\EntityLegalDocumentInterface $document */
+      /** @var EntityLegalDocumentInterface $document */
       foreach ($this->documents as $document) {
         $context['attachments']['#cache']['tags'][] = "entity_legal_document:{$document->id()}";
 
diff --git a/src/Plugin/EntityLegal/ProfileForm.php b/src/Plugin/EntityLegal/ProfileForm.php
index 51ce664..8b16c0d 100644
--- a/src/Plugin/EntityLegal/ProfileForm.php
+++ b/src/Plugin/EntityLegal/ProfileForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entity_legal\Plugin\EntityLegal;
 
+use Drupal\entity_legal\EntityLegalDocumentInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_legal\EntityLegalPluginBase;
 
@@ -23,7 +24,7 @@ class ProfileForm extends EntityLegalPluginBase {
     if (!empty($this->documents)) {
       $context['form']['actions']['submit']['#submit'][] = [get_class($this), 'submitForm'];
 
-      /** @var \Drupal\entity_legal\EntityLegalDocumentInterface $document */
+      /** @var EntityLegalDocumentInterface $document */
       foreach ($this->documents as $document) {
         $context['form']['#cache']['tags'][] = "entity_legal_document:{$document->id()}";
 
@@ -43,7 +44,7 @@ class ProfileForm extends EntityLegalPluginBase {
    * Submit handler for user register form.
    */
   public static function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\entity_legal\EntityLegalDocumentInterface $document */
+    /** @var EntityLegalDocumentInterface $document */
     foreach ($form['#entity_legal']->documents as $document) {
       if (!empty($form_state->getValue(['legal_' . $document->id()]))) {
         $published_version = $document->getPublishedVersion();
diff --git a/src/Plugin/EntityLegal/ProfileFormEmbedded.php b/src/Plugin/EntityLegal/ProfileFormEmbedded.php
index 04709d8..c7d49cb 100644
--- a/src/Plugin/EntityLegal/ProfileFormEmbedded.php
+++ b/src/Plugin/EntityLegal/ProfileFormEmbedded.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_legal\Plugin\EntityLegal;
 
+use Drupal\Core\Render\RendererInterface;
+use Drupal\entity_legal\EntityLegalDocumentInterface;
 /**
  * Method class for displaying a checkbox on the user register form.
  *
@@ -20,12 +22,12 @@ class ProfileFormEmbedded extends ProfileForm {
     parent::execute($context);
 
     if (!empty($this->documents)) {
-      /** @var \Drupal\Core\Render\RendererInterface $renderer */
+      /** @var RendererInterface $renderer */
       $renderer = \Drupal::service('renderer');
       $view_builder = \Drupal::entityTypeManager()
         ->getViewBuilder(ENTITY_LEGAL_DOCUMENT_VERSION_ENTITY_NAME);
 
-      /** @var \Drupal\entity_legal\EntityLegalDocumentInterface $document */
+      /** @var EntityLegalDocumentInterface $document */
       foreach ($this->documents as $document) {
         $document_markup = $view_builder->view($document->getPublishedVersion());
         $context['form']["legal_{$document->id()}"]['#prefix'] = $renderer->renderPlain($document_markup);
diff --git a/src/Plugin/EntityLegal/Redirect.php b/src/Plugin/EntityLegal/Redirect.php
index e752ce4..ca1b3f8 100644
--- a/src/Plugin/EntityLegal/Redirect.php
+++ b/src/Plugin/EntityLegal/Redirect.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_legal\Plugin\EntityLegal;
 
+use Drupal\Core\TempStore\PrivateTempStore;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Messenger\MessengerTrait;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Routing\RedirectDestinationTrait;
@@ -33,21 +35,21 @@ class Redirect extends EntityLegalPluginBase implements ContainerFactoryPluginIn
   /**
    * The current route match service.
    *
-   * @var \Drupal\Core\Routing\ResettableStackedRouteMatchInterface
+   * @var ResettableStackedRouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The private temp store.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;
 
@@ -60,11 +62,11 @@ class Redirect extends EntityLegalPluginBase implements ContainerFactoryPluginIn
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\ResettableStackedRouteMatchInterface $route_match
+   * @param ResettableStackedRouteMatchInterface $route_match
    *   The current route match service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $private_temp_store_factory
+   * @param PrivateTempStoreFactory $private_temp_store_factory
    *   The private temp store factory service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ResettableStackedRouteMatchInterface $route_match, AccountProxyInterface $current_user, PrivateTempStoreFactory $private_temp_store_factory) {
@@ -92,9 +94,9 @@ class Redirect extends EntityLegalPluginBase implements ContainerFactoryPluginIn
    * {@inheritdoc}
    */
   public function execute(array &$context = []) {
-    /** @var \Drupal\entity_legal\EntityLegalDocumentInterface $document */
+    /** @var EntityLegalDocumentInterface $document */
     foreach ($this->documents as $document) {
-      /** @var \Symfony\Component\HttpKernel\Event\GetResponseEvent $event */
+      /** @var RequestEvent $event */
       $event = $context['event'];
       $request = $event->getRequest();
 
@@ -149,7 +151,7 @@ class Redirect extends EntityLegalPluginBase implements ContainerFactoryPluginIn
    *
    * @param string $route_name
    *   The route name.
-   * @param \Drupal\entity_legal\EntityLegalDocumentInterface $document
+   * @param EntityLegalDocumentInterface $document
    *   The legal document entity.
    *
    * @return bool
@@ -167,7 +169,7 @@ class Redirect extends EntityLegalPluginBase implements ContainerFactoryPluginIn
   /**
    * Check if this is a valid password reset request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HTTP request object.
    *
    * @return bool
diff --git a/src/Plugin/Validation/Constraint/SingleLegalDocumentPublishedVersionConstraintValidator.php b/src/Plugin/Validation/Constraint/SingleLegalDocumentPublishedVersionConstraintValidator.php
index cdb8e75..2079b23 100644
--- a/src/Plugin/Validation/Constraint/SingleLegalDocumentPublishedVersionConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/SingleLegalDocumentPublishedVersionConstraintValidator.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\entity_legal\Plugin\Validation\Constraint;
 
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\entity_legal\Entity\EntityLegalDocumentVersion;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ -15,7 +17,7 @@ class SingleLegalDocumentPublishedVersionConstraintValidator extends ConstraintV
    * {@inheritdoc}
    */
   public function validate($items, Constraint $constraint) {
-    /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+    /** @var FieldItemListInterface $items */
     if ($items->isEmpty()) {
       return;
     }
@@ -26,7 +28,7 @@ class SingleLegalDocumentPublishedVersionConstraintValidator extends ConstraintV
       return;
     }
 
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $items->getEntity();
     $entity_type_id = $entity->getEntityTypeId();
 
