diff --git a/cache_register.info.yml b/cache_register.info.yml
index de247e3..8a76794 100644
--- a/cache_register.info.yml
+++ b/cache_register.info.yml
@@ -1,6 +1,5 @@
 name: 'Cache Register'
 type: module
 description: "Simplifies interactions with Drupal's cache."
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'Custom'
diff --git a/src/Manager.php b/src/Manager.php
index 145c05d..d267159 100644
--- a/src/Manager.php
+++ b/src/Manager.php
@@ -16,14 +16,14 @@ class Manager implements ManagerInterface {
   /**
    * Drupal\Core\Cache\CacheBackendInterface definition.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * Constructs a new CacheRegisterFactory object.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The CacheBackendInterface.
    */
   public function __construct(CacheBackendInterface $cache) {
diff --git a/src/ManagerInterface.php b/src/ManagerInterface.php
index b5224b1..cea8f93 100644
--- a/src/ManagerInterface.php
+++ b/src/ManagerInterface.php
@@ -35,7 +35,7 @@ interface ManagerInterface {
    *   Drawer is likely to open a large number of slots.
    *   As such, this defaults to FALSE.
    *
-   * @return \Drupal\cache_register\Object\SlotInterface
+   * @return SlotInterface
    *   Returns the slot object.
    */
   public function openSlot(string $implementor_id, $drawer_name, $slot_ids, bool $open_register_if_inactive = FALSE): SlotInterface;
@@ -61,7 +61,7 @@ interface ManagerInterface {
    *   Drawer is likely to open a large number of slots.
    *   As such, this defaults to FALSE.
    *
-   * @return \Drupal\cache_register\Object\DrawerInterface
+   * @return DrawerInterface
    *   Returns the Drawer object.
    */
   public function openDrawer(string $implementor_id, $drawer_name, bool $open_register_if_inactive = FALSE): DrawerInterface;
@@ -77,7 +77,7 @@ interface ManagerInterface {
    *   The name(s) should reflect the data the drawer contains.
    *   Used to construct the cache IDs for the Drawer's slots.
    *
-   * @return \Drupal\cache_register\Object\RegisterInterface
+   * @return RegisterInterface
    *   Returns the register object.
    */
   public function openRegister(string $implementor_id, $drawer_name): RegisterInterface;
diff --git a/src/Object/Drawer.php b/src/Object/Drawer.php
index c76733c..bb7cb1c 100644
--- a/src/Object/Drawer.php
+++ b/src/Object/Drawer.php
@@ -16,7 +16,7 @@ class Drawer implements DrawerInterface {
   /**
    * The cache backend service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
@@ -37,7 +37,7 @@ class Drawer implements DrawerInterface {
   /**
    * The constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Cache backend.
    * @param string $drawer_id
    *   Prefixes the cache entry IDs of child Slots.
diff --git a/src/Object/DrawerInterface.php b/src/Object/DrawerInterface.php
index d714cb1..8a1d2c7 100644
--- a/src/Object/DrawerInterface.php
+++ b/src/Object/DrawerInterface.php
@@ -33,7 +33,7 @@ interface DrawerInterface {
   /**
    * Gets the Cache Backend associated with the Drawer.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   The Cache Backend.
    */
   public function getCacheBackend(): CacheBackendInterface;
@@ -41,7 +41,7 @@ interface DrawerInterface {
   /**
    * Gets the Drawer's Register.
    *
-   * @return \Drupal\cache_register\Object\RegisterInterface|null
+   * @return RegisterInterface|null
    *   Returns the drawer's register, or NULL if not initialized.
    */
   public function getRegister(): ?RegisterInterface;
@@ -66,7 +66,7 @@ interface DrawerInterface {
    *   cache entry. You must implement $slot->set($data)
    *   to populate its cache entry.
    *
-   * @return \Drupal\cache_register\Object\SlotInterface
+   * @return SlotInterface
    *   Returns a Slot in the Drawer.
    */
   public function openSlot($slot_ids): SlotInterface;
diff --git a/src/Object/Register.php b/src/Object/Register.php
index a3d3ddf..545f91d 100644
--- a/src/Object/Register.php
+++ b/src/Object/Register.php
@@ -17,7 +17,7 @@ class Register extends SlotBase implements RegisterInterface {
   /**
    * The constructor.
    *
-   * @param \Drupal\cache_register\Object\DrawerInterface $drawer_to_track
+   * @param DrawerInterface $drawer_to_track
    *   The drawer that this register tracks.
    */
   public function __construct(DrawerInterface $drawer_to_track) {
@@ -67,7 +67,7 @@ class Register extends SlotBase implements RegisterInterface {
    *
    * @param string $add_or_remove
    *   Either 'add' or 'remove'.
-   * @param \Drupal\cache_register\Object\SlotInterface $slot_to_add_remove
+   * @param SlotInterface $slot_to_add_remove
    *   The slot we are adding or removing.
    */
   protected function addRemoveSlot(string $add_or_remove, SlotInterface $slot_to_add_remove): void {
diff --git a/src/Object/RegisterInterface.php b/src/Object/RegisterInterface.php
index 8d1f2be..e5d97dc 100644
--- a/src/Object/RegisterInterface.php
+++ b/src/Object/RegisterInterface.php
@@ -20,7 +20,7 @@ interface RegisterInterface extends SlotBaseInterface {
   /**
    * Add a slot to the register.
    *
-   * @param \Drupal\cache_register\Object\SlotInterface $slot_to_add
+   * @param SlotInterface $slot_to_add
    *   Add slot.
    */
   public function addSlot(SlotInterface $slot_to_add): void;
@@ -28,7 +28,7 @@ interface RegisterInterface extends SlotBaseInterface {
   /**
    * Remove a slot from the register.
    *
-   * @param \Drupal\cache_register\Object\SlotInterface $slot_to_remove
+   * @param SlotInterface $slot_to_remove
    *   Remove slot.
    */
   public function removeSlot(SlotInterface $slot_to_remove): void;
diff --git a/src/Object/SlotBase.php b/src/Object/SlotBase.php
index 99cb0e8..716a560 100644
--- a/src/Object/SlotBase.php
+++ b/src/Object/SlotBase.php
@@ -15,14 +15,14 @@ abstract class SlotBase implements SlotBaseInterface {
   /**
    * The cache backend service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The parent CacheRegister.
    *
-   * @var \Drupal\cache_register\Object\DrawerInterface
+   * @var DrawerInterface
    */
   protected $drawer;
 
diff --git a/src/Object/SlotBaseInterface.php b/src/Object/SlotBaseInterface.php
index e26bec0..a191d8e 100644
--- a/src/Object/SlotBaseInterface.php
+++ b/src/Object/SlotBaseInterface.php
@@ -20,7 +20,7 @@ interface SlotBaseInterface {
   /**
    * Gets the slots parent drawer.
    *
-   * @return \Drupal\cache_register\Object\DrawerInterface
+   * @return DrawerInterface
    *   The drawer.
    */
   public function getDrawer(): DrawerInterface;
@@ -28,7 +28,7 @@ interface SlotBaseInterface {
   /**
    * Gets the slot's drawer's register.
    *
-   * @return \Drupal\cache_register\Object\DrawerInterface|null
+   * @return DrawerInterface|null
    *   The drawer.
    */
   public function getRegister(): ?RegisterInterface;
@@ -36,7 +36,7 @@ interface SlotBaseInterface {
   /**
    * Gets the cache backend.
    *
-   * @return \Drupal\Core\Cache\CacheBackendInterface
+   * @return CacheBackendInterface
    *   The cache backend.
    */
   public function getCacheBackend(): CacheBackendInterface;
diff --git a/tests/src/Kernel/CacheRegisterKernelTestBase.php b/tests/src/Kernel/CacheRegisterKernelTestBase.php
index fa7bf2d..4e3d0fd 100644
--- a/tests/src/Kernel/CacheRegisterKernelTestBase.php
+++ b/tests/src/Kernel/CacheRegisterKernelTestBase.php
@@ -50,7 +50,7 @@ abstract class CacheRegisterKernelTestBase extends DatabaseBackendTest {
    * @param bool $open_register
    *   Whether or not the open the register.
    *
-   * @return \Drupal\cache_register\Object\DrawerInterface
+   * @return DrawerInterface
    *   Returns the drawer object.
    */
   public function createDrawer($drawer_id = '', $open_register = FALSE): DrawerInterface {
@@ -63,10 +63,10 @@ abstract class CacheRegisterKernelTestBase extends DatabaseBackendTest {
    *
    * @param string $slot_ids
    *   The slot IDs.
-   * @param \Drupal\cache_register\Object\DrawerInterface|null $drawer
+   * @param DrawerInterface|null $drawer
    *   The drawer.
    *
-   * @return \Drupal\cache_register\Object\SlotBaseInterface|object
+   * @return SlotBaseInterface|object
    *   Returns the slotbase object.
    */
   public function createSlotBase($slot_ids = 'sid', $drawer = NULL): SlotBaseInterface {
@@ -106,10 +106,10 @@ abstract class CacheRegisterKernelTestBase extends DatabaseBackendTest {
    *
    * @param int $slot_ids
    *   The slot IDs.
-   * @param \Drupal\cache_register\Object\DrawerInterface|null $drawer
+   * @param DrawerInterface|null $drawer
    *   The drawer.
    *
-   * @return \Drupal\cache_register\Object\SlotInterface
+   * @return SlotInterface
    *   Retirns the slot object.
    */
   public function createSlot($slot_ids, $drawer = NULL): SlotInterface {
@@ -119,10 +119,10 @@ abstract class CacheRegisterKernelTestBase extends DatabaseBackendTest {
   /**
    * Creates a Register for testing.
    *
-   * @param \Drupal\cache_register\Object\DrawerInterface|null $drawer
+   * @param DrawerInterface|null $drawer
    *   The drawer.
    *
-   * @return \Drupal\cache_register\Object\RegisterInterface
+   * @return RegisterInterface
    *   The register.
    */
   public function createRegister($drawer = NULL): RegisterInterface {
@@ -191,7 +191,7 @@ abstract class CacheRegisterKernelTestBase extends DatabaseBackendTest {
 
     // After caching.
     $slot->getCacheBackend()->set($cid, 'cache_data');
-    $this->assertNotEqual($slot->getCacheData(), NULL);
+    $this->assertNotEquals($slot->getCacheData(), NULL);
     $this->assertEquals(
       $slot->getCache()->data,
       $slot->getCacheData()
@@ -200,7 +200,7 @@ abstract class CacheRegisterKernelTestBase extends DatabaseBackendTest {
     // After invalidating the cache.
     $slot->getCacheBackend()->invalidate($slot->id());
     $this->assertEquals(NULL, $slot->getCacheData());
-    $this->assertNotEqual($slot->getCacheData(TRUE), NULL);
+    $this->assertNotEquals($slot->getCacheData(TRUE), NULL);
     $this->assertEquals(
       $slot->getCache(TRUE)->data,
       $slot->getCacheData(TRUE)
@@ -219,10 +219,10 @@ abstract class CacheRegisterKernelTestBase extends DatabaseBackendTest {
   /**
    * Validates/provides a drawer for test slots.
    *
-   * @param \Drupal\cache_register\Object\DrawerInterface|null $drawer
+   * @param DrawerInterface|null $drawer
    *   The drawer, if present.
    *
-   * @return \Drupal\cache_register\Object\DrawerInterface
+   * @return DrawerInterface
    *   The drawer.
    */
   private function slotTestDrawerValidatorProvider(DrawerInterface $drawer = NULL): DrawerInterface {
diff --git a/tests/src/Kernel/DrawerTest.php b/tests/src/Kernel/DrawerTest.php
index 30bf883..02479ea 100644
--- a/tests/src/Kernel/DrawerTest.php
+++ b/tests/src/Kernel/DrawerTest.php
@@ -15,7 +15,7 @@ class DrawerTest extends CacheRegisterKernelTestBase {
    */
   public function testId() {
     $drawer = $this->createDrawer('testId', FALSE);
-    $this->assert('testId', $drawer->id());
+    $this->assertTrue('testId', $drawer->id());
   }
 
   /**
@@ -23,10 +23,10 @@ class DrawerTest extends CacheRegisterKernelTestBase {
    */
   public function testHasActiveRegister() {
     $drawer = $this->createDrawer('testHasActiveRegister', FALSE);
-    $this->assertEqual(FALSE, $drawer->hasActiveRegister());
+    $this->assertEquals(FALSE, $drawer->hasActiveRegister());
 
     $this->createRegister($drawer);
-    $this->assertEqual(TRUE, $drawer->hasActiveRegister());
+    $this->assertEquals(TRUE, $drawer->hasActiveRegister());
   }
 
   /**
@@ -42,7 +42,7 @@ class DrawerTest extends CacheRegisterKernelTestBase {
    */
   public function testGetRegister() {
     $drawer = $this->createDrawer('cr.d', FALSE);
-    $this->assertEqual(NULL, $drawer->getRegister());
+    $this->assertEquals(NULL, $drawer->getRegister());
 
     $this->createRegister($drawer);
     $this->assertInstanceOf('\Drupal\cache_register\Object\RegisterInterface', $drawer->getRegister());
@@ -78,19 +78,19 @@ class DrawerTest extends CacheRegisterKernelTestBase {
     $slot_1->setCache('slot_1_data');
     $slot_2->setCache('slot_2_data');
 
-    $this->assertNotEqual($drawer->getRegister()->getCache(), NULL);
-    $this->assertNotEqual($slot_1->getCache(), NULL);
-    $this->assertNotEqual($slot_2->getCache(), NULL);
+    $this->assertNotEquals($drawer->getRegister()->getCache(), NULL);
+    $this->assertNotEquals($slot_1->getCache(), NULL);
+    $this->assertNotEquals($slot_2->getCache(), NULL);
 
     $drawer->invalidate($reopen_register);
     if ($reopen_register) {
-      $this->assertNotEqual($drawer->getRegister()->getCache(), NULL);
+      $this->assertNotEquals($drawer->getRegister()->getCache(), NULL);
     }
     else {
-      $this->assertEqual(NULL, $drawer->getRegister());
+      $this->assertEquals(NULL, $drawer->getRegister());
     }
-    $this->assertEqual(NULL, $slot_1->getCache());
-    $this->assertEqual(NULL, $slot_2->getCache());
+    $this->assertEquals(NULL, $slot_1->getCache());
+    $this->assertEquals(NULL, $slot_2->getCache());
   }
 
 }
diff --git a/tests/src/Kernel/ManagerTest.php b/tests/src/Kernel/ManagerTest.php
index 162aea1..a3d91e0 100644
--- a/tests/src/Kernel/ManagerTest.php
+++ b/tests/src/Kernel/ManagerTest.php
@@ -22,7 +22,7 @@ class ManagerTest extends CacheRegisterKernelTestBase {
       $this->assertInstanceOf("Drupal\cache_register\Object\RegisterInterface", $slot->getRegister());
     }
     else {
-      $this->assertEqual(NULL, $slot->getRegister());
+      $this->assertEquals(NULL, $slot->getRegister());
     }
   }
 
@@ -38,7 +38,7 @@ class ManagerTest extends CacheRegisterKernelTestBase {
       $this->assertInstanceOf("Drupal\cache_register\Object\RegisterInterface", $drawer->getRegister());
     }
     else {
-      $this->assertEqual(NULL, $drawer->getRegister());
+      $this->assertEquals(NULL, $drawer->getRegister());
     }
   }
 
diff --git a/tests/src/Kernel/RegisterTest.php b/tests/src/Kernel/RegisterTest.php
index 8e796d7..678d6f7 100644
--- a/tests/src/Kernel/RegisterTest.php
+++ b/tests/src/Kernel/RegisterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\cache_register\Kernel;
 
+use Drupal\cache_register\Manager;
 /**
  * Tests the Register class.
  *
@@ -22,19 +23,16 @@ class RegisterTest extends CacheRegisterKernelTestBase {
     // Reopen the slot.
     $slot_2 = $this->createSlotBase('testReopenRegister');
     $slot_cache_2 = $slot_2->getCache();
-    $this->assertEqual($slot_cache_1, $slot_cache_2);
+    $this->assertEquals($slot_cache_1, $slot_cache_2);
   }
 
   /**
    * @covers ::getList
    */
   public function testGetList() {
-    /** @var \Drupal\cache_register\Manager $manager */
+    /** @var Manager $manager */
     $register = $this->createRegister();
-    $this->assertEqual(
-      $register->getCacheBackend()->get($register->id())->data,
-      $register->getList()
-    );
+    $this->assertEquals($register->getCacheBackend()->get($register->id())->data, $register->getList());
   }
 
   /**
diff --git a/tests/src/Kernel/SlotBaseTest.php b/tests/src/Kernel/SlotBaseTest.php
index 1a7217f..1feb395 100644
--- a/tests/src/Kernel/SlotBaseTest.php
+++ b/tests/src/Kernel/SlotBaseTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\cache_register\Kernel;
 
+use Drupal\cache_register\Object\SlotBase;
 use Drupal\Core\Cache\CacheBackendInterface;
 
 /**
@@ -16,7 +17,7 @@ class SlotBaseTest extends CacheRegisterKernelTestBase {
    * Ensure slot cache persists reopening.
    */
   public function testReopenSlot() {
-    /** @var \Drupal\cache_register\Object\SlotBase $slot */
+    /** @var SlotBase $slot */
     $slot_1 = $this->createSlotBase('testReopenSlot');
     $cache_data = 'cached_data';
     $this->callMethod(
@@ -29,7 +30,7 @@ class SlotBaseTest extends CacheRegisterKernelTestBase {
     // Reopen the slot.
     $slot_2 = $this->createSlotBase('testReopenSlot');
     $slot_cache_2 = $slot_2->getCache();
-    $this->assertEqual($slot_cache_1, $slot_cache_2);
+    $this->assertEquals($slot_cache_1, $slot_cache_2);
   }
 
   /**
@@ -50,7 +51,7 @@ class SlotBaseTest extends CacheRegisterKernelTestBase {
     $slot = $this->createSlotBase('slot', $drawer);
 
     if (!$open_register) {
-      $this->assertEqual(NULL, $slot->getRegister());
+      $this->assertEquals(NULL, $slot->getRegister());
     }
     else {
       $this->assertInstanceOf('Drupal\cache_register\Object\Register', $slot->getRegister());
@@ -77,6 +78,7 @@ class SlotBaseTest extends CacheRegisterKernelTestBase {
    *   Cannot rely on strtotime or associated approaches.
    * @param array $tags
    *   Array value.
+   * @doesNotPerformAssertions
    */
   public function testDoSetCache($data, int $expire = CacheBackendInterface::CACHE_PERMANENT, array $tags = []) {
     $slot = $this->createSlotBase('testIsCached');
@@ -116,13 +118,13 @@ class SlotBaseTest extends CacheRegisterKernelTestBase {
 
     // After caching.
     $slot->getCacheBackend()->set($slot->id(), 'cache_data');
-    $this->assertNotEqual($slot->getCache(), NULL);
+    $this->assertNotEquals($slot->getCache(), NULL);
     $this->assertEquals($slot->getCacheBackend()->get($slot->id()), $slot->getCache());
 
     // After invalidating the cache.
     $slot->getCacheBackend()->invalidate($slot->id());
     $this->assertEquals(NULL, $slot->getCache());
-    $this->assertNotEqual($slot->getCache(TRUE), NULL);
+    $this->assertNotEquals($slot->getCache(TRUE), NULL);
     $this->assertEquals($slot->getCacheBackend()->get($slot->id()), $slot->getCache());
 
     // Repopulate and then delete the cache.
@@ -142,10 +144,7 @@ class SlotBaseTest extends CacheRegisterKernelTestBase {
 
     // After caching.
     $slot->getCacheBackend()->set($cid, 'cache_data');
-    $this->assertNotEqual(
-      $this->callMethod($slot, 'doGetCacheData', [FALSE]),
-      NULL
-    );
+    $this->assertNotEquals($this->callMethod($slot, 'doGetCacheData', [FALSE]), NULL);
     $this->assertEquals(
       $slot->getCache()->data,
       $this->callMethod($slot, 'doGetCacheData', [FALSE])
@@ -157,10 +156,7 @@ class SlotBaseTest extends CacheRegisterKernelTestBase {
       NULL,
       $this->callMethod($slot, 'doGetCacheData', [FALSE])
     );
-    $this->assertNotEqual(
-      $this->callMethod($slot, 'doGetCacheData', [TRUE]),
-      NULL
-    );
+    $this->assertNotEquals($this->callMethod($slot, 'doGetCacheData', [TRUE]), NULL);
     $this->assertEquals(
       $slot->getCache(TRUE)->data,
       $this->callMethod($slot, 'doGetCacheData', [TRUE])
diff --git a/tests/src/Kernel/SlotTest.php b/tests/src/Kernel/SlotTest.php
index 2d50527..b0863f3 100644
--- a/tests/src/Kernel/SlotTest.php
+++ b/tests/src/Kernel/SlotTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\cache_register\Kernel;
 
+use Drupal\cache_register\Manager;
 use Drupal\Core\Cache\CacheBackendInterface;
 
 /**
@@ -24,12 +25,13 @@ class SlotTest extends CacheRegisterKernelTestBase {
     // Reopen the slot.
     $slot_2 = $this->createSlotBase('testReopenSlot');
     $slot_cache_2 = $slot_2->getCache();
-    $this->assertEqual($slot_cache_1, $slot_cache_2);
+    $this->assertEquals($slot_cache_1, $slot_cache_2);
   }
 
   /**
    * @covers ::setCache
    * @dataProvider cacheDataProvider
+   * @doesNotPerformAssertions
    */
   public function testSetCache($data, int $expire = CacheBackendInterface::CACHE_PERMANENT, array $tags = []) {
     $slot = $this->createSlot('testIsCached');
@@ -38,9 +40,10 @@ class SlotTest extends CacheRegisterKernelTestBase {
 
   /**
    * @covers ::getCacheData
+   * @doesNotPerformAssertions
    */
   public function testGetCacheData() {
-    /** @var \Drupal\cache_register\Manager $manager */
+    /** @var Manager $manager */
     $manager = $this->getManager();
     $slot = $manager->openSlot('cr', 'd', 's');
     $this->commonTestGetCacheData($slot);
@@ -57,11 +60,11 @@ class SlotTest extends CacheRegisterKernelTestBase {
 
     // Set the empty cache.
     $slot->setCacheStrict('valid');
-    $this->assertEqual($slot->getCacheData(), 'valid');
+    $this->assertEquals($slot->getCacheData(), 'valid');
 
     // Try to override existing cache entry.
     $slot->setCacheStrict('invalid');
-    $this->assertEqual($slot->getCacheData(), 'valid');
+    $this->assertEquals($slot->getCacheData(), 'valid');
   }
 
   /**
@@ -69,13 +72,13 @@ class SlotTest extends CacheRegisterKernelTestBase {
    * @dataProvider boolProvider
    */
   public function testDeleteCache(bool $open_register) {
-    /** @var \Drupal\cache_register\Manager $manager */
+    /** @var Manager $manager */
     $manager = $this->getManager();
     $slot = $manager->openSlot('cr', 'd', 's', $open_register);
     $slot->setCache('data');
-    $this->assertEqual('data', $slot->getCacheData());
+    $this->assertEquals('data', $slot->getCacheData());
     $slot->deleteCache();
-    $this->assertEqual(NULL, $slot->getCacheData());
+    $this->assertEquals(NULL, $slot->getCacheData());
     if ($open_register) {
       $this->assertNotContains($slot->id(), array_keys($slot->getRegister()->getList()));
     }
@@ -86,14 +89,14 @@ class SlotTest extends CacheRegisterKernelTestBase {
    * @dataProvider boolProvider
    */
   public function testInvalidateCache(bool $open_register) {
-    /** @var \Drupal\cache_register\Manager $manager */
+    /** @var Manager $manager */
     $manager = $this->getManager();
     $slot = $manager->openSlot('cr', 'd', 's', $open_register);
     $slot->setCache('data');
-    $this->assertEqual('data', $slot->getCacheData());
+    $this->assertEquals('data', $slot->getCacheData());
     $slot->invalidateCache();
-    $this->assertEqual(NULL, $slot->getCacheData());
-    $this->assertEqual('data', $slot->getCacheData(TRUE));
+    $this->assertEquals(NULL, $slot->getCacheData());
+    $this->assertEquals('data', $slot->getCacheData(TRUE));
 
     if ($open_register) {
       $this->assertNotContains($slot->id(), array_keys($slot->getRegister()->getList()));
