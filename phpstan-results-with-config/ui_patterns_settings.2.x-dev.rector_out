modules/contrib/ui_patterns_settings/src/Annotation/UiPatternsSettingType.php
modules/contrib/ui_patterns_settings/src/ConfigManager.php
modules/contrib/ui_patterns_settings/src/Definition/PatternDefinitionSetting.php
modules/contrib/ui_patterns_settings/src/Element/PatternSettings.php
modules/contrib/ui_patterns_settings/src/Form/SettingsFormBuilder.php
modules/contrib/ui_patterns_settings/src/Plugin/EnumerationSettingTypeBase.php
modules/contrib/ui_patterns_settings/src/Plugin/LanguageCheckboxesSettingTypeBase.php
modules/contrib/ui_patterns_settings/src/Plugin/Layout/PatternSettingsLayout.php
modules/contrib/ui_patterns_settings/src/Plugin/PatternSettingTypeBase.php
modules/contrib/ui_patterns_settings/src/Plugin/PatternSettingTypeInterface.php
modules/contrib/ui_patterns_settings/src/Plugin/TokenSettingTypeBase.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/AttributesSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/BooleanSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/CheckboxesSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/ColorWidgetSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/ColorisWidgetSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/EnumerationSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/GroupType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/LanguageAccessSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/LanguageCheckboxesSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/MediaLibrarySettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/NumberSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/PublishSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/RadiosSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/SelectSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/TextfieldSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/TokenSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/SettingType/UrlSettingType.php
modules/contrib/ui_patterns_settings/src/Plugin/UiPatterns/Source/SettingFieldSource.php
modules/contrib/ui_patterns_settings/src/TwigExtension/UIPatternsSettingsExtension.php
modules/contrib/ui_patterns_settings/src/UiPatternsSettings.php
modules/contrib/ui_patterns_settings/src/UiPatternsSettingsManager.php
modules/contrib/ui_patterns_settings/tests/src/Functional/UiPatternsSettingsRenderTest.php
modules/contrib/ui_patterns_settings/ui_patterns_settings.api.php
modules/contrib/ui_patterns_settings/ui_patterns_settings.module

13 files with changes
=====================

1) modules/contrib/ui_patterns_settings/ui_patterns_settings.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\media_library\MediaLibraryUiBuilder;
+use Drupal\Core\Layout\LayoutDefinition;
 /**
  * @file
  * Contains ui_patterns_settings.module.
@@ @@
     'media_library_edit_entity_id' => $media_id,
   ];
   $edit_url = Url::fromUserInput(str_replace('{media}', $media_id, $edit_template) . '?' . UrlHelper::buildQuery($edit_url_query_params));
-  $dialog_options = \Drupal\media_library\MediaLibraryUiBuilder::dialogOptions();
+  $dialog_options = MediaLibraryUiBuilder::dialogOptions();
   return [
     '#type' => 'link',
     '#title' => '',
@@ @@
  * Implements hook_form_field_storage_config_edit_form_alter().
  */
 function ui_patterns_settings_form_field_storage_config_edit_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\field\Entity\FieldStorageConfig $entity */
+  /** @var FieldStorageConfig $entity */
   $entity = $form_state->getFormObject()->getEntity();
   array_unshift($form['actions']['submit']['#submit'], 'ui_patterns_settings_form_field_storage_config_edit_form_submit');

@@ @@
  */
 function ui_patterns_settings_form_field_storage_config_edit_form_submit(array $form, FormStateInterface $form_state) {
   $settings = $form_state->getValue('settings');
-  /** @var \Drupal\field\Entity\FieldStorageConfig $entity */
+  /** @var FieldStorageConfig $entity */
   $entity = $form_state->getFormObject()->getEntity();

   if (isset($settings['use_pattern']) && $settings['use_pattern'] === 1) {
@@ @@
  * Implements hook_entity_field_storage_info_alter().
  */
 function ui_patterns_settings_entity_field_storage_info_alter(&$fields, EntityTypeInterface $entity_type) {
-  /** @var \Drupal\field\Entity\FieldStorageConfig $field */
+  /** @var FieldStorageConfig $field */
   foreach ($fields as $field) {
     if ($field instanceof FieldStorageConfig) {
       if (($mapping = UiPatternsSettings::getConfigManager()
@@ @@
 /**
  * The storage config.
  *
- * @param \Drupal\field\Entity\FieldStorageConfig $storage_config
+ * @param FieldStorageConfig $storage_config
  *   The field storage config.
  *
  * @return string[]
@@ @@
  * Implements hook_layout_alter().
  */
 function ui_patterns_settings_layout_alter(&$definitions) {
-  /** @var \Drupal\Core\Layout\LayoutDefinition $definition */
+  /** @var LayoutDefinition $definition */
   foreach ($definitions as $definition) {
     if ($definition->getClass() == '\Drupal\ui_patterns_layouts\Plugin\Layout\PatternLayout') {
       $definition->setClass(PatternSettingsLayout::class);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/ui_patterns_settings/tests/src/Functional/UiPatternsSettingsRenderTest.php:94

    ---------- begin diff ----------
@@ @@
     $edit = [
       'ds_layout' => 'pattern_foo_settings',
     ];
-    $this->drupalPostForm('/admin/structure/types/manage/article/display', $edit, 'Save');
+    $this->drupalGet('/admin/structure/types/manage/article/display');
+    $this->submitForm($edit, 'Save');

     // Fill settings.
     $edit = [];
@@ @@
     foreach ($mappings as $key => $mapping) {
       $edit['layout_configuration[pattern][settings]' . $key] = $mapping['input'];
     }
-    $this->drupalPostForm('/admin/structure/types/manage/article/display', $edit, 'Save');
+    $this->drupalGet('/admin/structure/types/manage/article/display');
+    $this->submitForm($edit, 'Save');

     // Check values.
     $this->drupalGet('/node/' . $created_node->id());
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ui_patterns_settings/src/UiPatternsSettingsManager.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Returns TRUE if a variant token can configured.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $pattern_definition
+   * @param PatternDefinition $pattern_definition
    *   The pattern definition.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ui_patterns_settings/src/UiPatternsSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_settings;

+use Drupal\ui_patterns_settings\Plugin\PatternSettingTypeInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\ui_patterns\Definition\PatternDefinition;
@@ @@
   /**
    * Cached pattern definition settings.
    *
-   * @var \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting[]
+   * @var PatternDefinitionSetting[]
    */
   private static $settings;

@@ @@
   /**
    * Get pattern manager setting instance.
    *
-   * @return \Drupal\ui_patterns_settings\UiPatternsSettingsManager
+   * @return UiPatternsSettingsManager
    *   UI Patterns setting manager instance.
    */
   public static function getManager() {
@@ @@
   /**
    * Get config manager instance.
    *
-   * @return \Drupal\ui_patterns_settings\ConfigManager
+   * @return ConfigManager
    *   UI Patterns setting config manager.
    */
   public static function getConfigManager() {
@@ @@
   /**
    * Preprocess exposed settings variables.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *   The entity.
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern definition.
    *
    * @return array
@@ @@
    *   The variant.
    * @param bool $preview
    *   Is preview.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity of the pattern. Useful for dynamic settings.
    *
    * @return array
@@ @@
    * Returns a list of all exposed pattern setting definitions
    * filtered by the provided field storage type.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern definition.
    * @param string $field_storage_type
    *   The field storage type.
@@ @@
   /**
    * Get pattern configuration for a pattern definition.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The definition.
    * @param string $variant
    *   The pattern variant.
@@ @@
   /**
    * Get setting definition for a pattern and a setting name.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern definition.
    * @param string $setting_name
    *   The setting name.
@@ @@
   /**
    * Get setting definitions for a pattern definition.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The definition.
    *
-   * @return \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting[]
+   * @return PatternDefinitionSetting[]
    *   Setting pattern definitons.
    */
   public static function getPatternDefinitionSettings(PatternDefinition $definition) {
@@ @@
   /**
    * Create setting type plugin.
    *
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $pattern_definition
+   * @param PatternDefinition $pattern_definition
    *   The pattern definition.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $setting_defintion
+   * @param PatternDefinitionSetting $setting_defintion
    *   The setting definition.
    *
-   * @return \Drupal\ui_patterns_settings\Plugin\PatternSettingTypeInterface
+   * @return PatternSettingTypeInterface
    *   UI Patterns setting manager instance.
    */
   public static function createSettingType(PatternDefinition $pattern_definition, PatternDefinitionSetting $setting_defintion) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/ui_patterns_settings/src/Plugin/TokenSettingTypeBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_settings\Plugin;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Utility\Token;
 use Drupal\Core\Entity\EntityMalformedException;
@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $tokenService;

@@ @@

     if (is_string($value)) {
       $token_data = [];
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = isset($context['entity']) ? $context['entity'] : NULL;
       if ($entity !== NULL) {
         $token_data[$entity->getEntityTypeId()] = $entity;
@@ @@
   /**
    * Sets the token service.
    *
-   * @param \Drupal\Core\Utility\Token $token_service
+   * @param Token $token_service
    *   The token service.
    *
    * @return self
@@ @@
   /**
    * Gets the token service.
    *
-   * @return \Drupal\Core\Utility\Token
+   * @return Token
    *   The token service.
    */
   public function getTokenService() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/ui_patterns_settings/src/Plugin/PatternSettingTypeInterface.php:18

    ---------- begin diff ----------
@@ @@
    *   The form definition array for the settings configuration form.
    * @param string $value
    *   The stored default value.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition.
    * @param string $form_type
    *   The form type. Either layout or layouts_display or display.
@@ @@
    *   Context informations.
    *   Keys:
    *    - entity.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition.
    *
    * @return string
@@ @@
   /**
    * Returns the processed setting variable for an exposed field.
    *
-   * @param \Drupal\Core\Field\FieldItemList $field
+   * @param FieldItemList $field
    *   The stored value.
    *
    * @return mixed
@@ @@
   /**
    * Alter the storage of a connected field storage.
    *
-   * @param \Drupal\field\Entity\FieldStorageConfig $storage_config
+   * @param FieldStorageConfig $storage_config
    *   The storage type.
    */
   public function alterFieldStorage(FieldStorageConfig $storage_config);
@@ @@
    *
    * @param string $value
    *   The value.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition.
    * @param array $element
    *   The render element.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/ui_patterns_settings/src/Plugin/PatternSettingTypeBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_settings\Plugin;

+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\ui_patterns\Definition\PatternDefinition;
+use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;

@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;

@@ @@
   /**
    * Return pattern definitions for setting .
    *
-   * @var \Drupal\ui_patterns\Definition\PatternDefinition
+   * @var PatternDefinition
    */
   private $patternDefinition;

@@ @@
   /**
    * Return pattern definitions for setting .
    *
-   * @var \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting
+   * @var PatternDefinitionSetting
    */
   private $patternSettingDefinition;

@@ @@
   /**
    * Return pattern definitions for setting .
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Return pattern setting definition.
    *
-   * @return \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting
+   * @return PatternDefinitionSetting
    *   Pattern setting definition.
    */
   protected function getPatternSettingDefinition() {
@@ @@
       $container->get('module_handler'),
       $container->get('entity_type.manager')
     );
-    /** @var \Drupal\Core\StringTranslation\TranslationInterface $translation */
+    /** @var TranslationInterface $translation */
     $translation = $container->get('string_translation');

     $plugin->setStringTranslation($translation);
@@ @@
    *   The form definition array for the settings configuration form.
    * @param string $value
    *   The stored default value.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition.
    *
    * @return array
@@ @@
    *
    * @param array $element
    *   The element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $form
    *   The form.
@@ @@
    *
    * @param array $input
    *   The input field.
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition.
    * @param string $form_type
    *   The form type. Either layouts_display or display.
@@ @@
    *
    * @param array $element
    *   The form field.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The pattern definition.
    * @param mixed $form
    *   The form.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/ui_patterns_settings/src/Plugin/LanguageCheckboxesSettingTypeBase.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected LanguageManagerInterface $languageManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/ui_patterns_settings/src/Plugin/EnumerationSettingTypeBase.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the enumeration type.
    *
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *   The pattern definition setting.
    *
    * @return string
@@ @@
   /**
    * Returns the enumeration options.
    *
-   * @param \Drupal\ui_patterns_settings\Definition\PatternDefinitionSetting $def
+   * @param PatternDefinitionSetting $def
    *  The pattern definition.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/ui_patterns_settings/src/Form/SettingsFormBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_settings\Form;

+use Drupal\layout_builder\Plugin\SectionStorage\DefaultsSectionStorage;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Render\Element\Form;
@@ @@
     $request = \Drupal::request();
     $entity_type_id = $request->attributes->get('entity_type_id');
     if (empty($entity_type_id)) {
-      /** @var \Drupal\layout_builder\Plugin\SectionStorage\DefaultsSectionStorage $section_storage */
+      /** @var DefaultsSectionStorage $section_storage */
       $section_storage = $request->attributes->get('section_storage');
       if ($section_storage !== NULL) {
         $entity_type_id = explode('.', $section_storage->getStorageId())[0];
@@ @@
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern definition.
    * @param array $configuration
    *   The pattern configuration.
@@ @@
    *   The id of the variant select field.
    * @param array $fieldset
    *   The fieldset.
-   * @param \Drupal\ui_patterns\Definition\PatternDefinition $definition
+   * @param PatternDefinition $definition
    *   The pattern definition.
    */
   private static function buildVariantsForm($select_selector, array &$fieldset, PatternDefinition $definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/ui_patterns_settings/src/Element/PatternSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_settings\Element;

+use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Security\TrustedCallbackInterface;
 use Drupal\Core\Template\Attribute;
 use Drupal\ui_patterns\UiPatterns;
@@ @@
     $alter_context = [];
     $context = $element['#context'];
     $pattern_id = $element['#id'];
-    /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+    /** @var ContentEntityBase $entity */
     $entity = $context->getProperty('entity');
     if ($context->getType() === 'layout' && $entity !== NULL) {
       $mappings = UiPatternsSettings::getConfigManager()->findVariantMappings($entity->getEntityTypeId());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/ui_patterns_settings/src/ConfigManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_settings;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;

 /**
@@ @@
   /**
    * The config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   private $config;

@@ @@
   /**
    * Constructs a new Fast404ExceptionHtmlSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/ui_patterns_settings/src/Annotation/UiPatternsSettingType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ui_patterns_settings\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 13 files have been changed by Rector                                      

