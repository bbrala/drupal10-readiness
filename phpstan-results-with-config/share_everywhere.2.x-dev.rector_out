modules/contrib/share_everywhere/share_everywhere.install
modules/contrib/share_everywhere/share_everywhere.module
modules/contrib/share_everywhere/share_everywhere.views.inc
modules/contrib/share_everywhere/src/Form/ShareEverywhereConfigForm.php
modules/contrib/share_everywhere/src/Plugin/Block/ShareEverywhereBlock.php
modules/contrib/share_everywhere/src/Plugin/views/field/ShareEverywhereField.php
modules/contrib/share_everywhere/src/ShareEverywhereService.php
modules/contrib/share_everywhere/src/ShareEverywhereServiceInterface.php
modules/contrib/share_everywhere/tests/src/Kernel/ConfigTest.php

4 files with changes
====================

1) modules/contrib/share_everywhere/src/ShareEverywhereService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\share_everywhere;

+use Drupal\system\Plugin\Condition\RequestPath;
 use Drupal\Core\Condition\ConditionManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The config object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The condition manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * Constructs an ShareEverywhereService object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Configuration Factory.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The condition manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ConditionManager $condition_manager) {
@@ @@
   public function build($url, $id) {
     global $base_url;
     $config = $this->configFactory->get('share_everywhere.settings');
-    $module_path = drupal_get_path('module', 'share_everywhere');
+    $module_path = \Drupal::service('extension.list.module')->getPath('share_everywhere');
     $build = ['#theme' => 'share_everywhere'];
     $buttons = [];
     $library = [];
@@ @@
         $restricted_pages[$index] = '<front>';
       }

-      /** @var \Drupal\system\Plugin\Condition\RequestPath $request_path_condition */
+      /** @var RequestPath $request_path_condition */
       $request_path_condition = $this->conditionManager->createInstance('request_path', [
         'pages' => implode("\n", $restricted_pages),
         'negate' => $restriction_type == 'show' ? TRUE : FALSE,
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/share_everywhere/src/Plugin/views/field/ShareEverywhereField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\share_everywhere\Plugin\views\field;

+use Drupal\share_everywhere\ShareEverywhereService;
 use Drupal\views\ResultRow;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The ShareEverywhere service.
    *
-   * @var Drupal\share_everywhere\ShareEverywhereService
+   * @var ShareEverywhereService
    */
   protected $shareService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\share_everywhere\ShareEverywhereServiceInterface $share_service
+   * @param ShareEverywhereServiceInterface $share_service
    *   The module manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ShareEverywhereServiceInterface $share_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/share_everywhere/src/Plugin/Block/ShareEverywhereBlock.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The ShareEverywhere service.
    *
-   * @var \Drupal\share_everywhere\ShareEverywhereServiceInterface
+   * @var ShareEverywhereServiceInterface
    */
   protected $shareService;

@@ @@
   /**
    * The path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\share_everywhere\ShareEverywhereServiceInterface $share_service
+   * @param ShareEverywhereServiceInterface $share_service
    *   The module manager service.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The path alias manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ShareEverywhereServiceInterface $share_service, AliasManagerInterface $alias_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/share_everywhere/src/Form/ShareEverywhereConfigForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The entity type Bundle Information.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity display Repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The entity field Manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The path Validator.
    *
-   * @var \Drupal\Core\Path\PathValidator
+   * @var PathValidator
    */
   protected $pathValidator;

@@ @@
   /**
    * The render cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $renderCache;

@@ @@
   /**
    * Constructs a \Drupal\user\ShareEverywhereConfigForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module Handler.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle information.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display Repository.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field Manager.
-   * @param \Drupal\Core\Path\PathValidator $path_validator
+   * @param PathValidator $path_validator
    *   The path Validator.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $render_cache
+   * @param CacheBackendInterface $render_cache
    *   The render cache.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityDisplayRepositoryInterface $entity_display_repository, EntityFieldManagerInterface $entity_field_manager, PathValidator $path_validator, CacheBackendInterface $render_cache) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

