diff --git a/src/Plugin/views/field/BaseUrl.php b/src/Plugin/views/field/BaseUrl.php
index 6b0b061..e24b9c7 100755
--- a/src/Plugin/views/field/BaseUrl.php
+++ b/src/Plugin/views/field/BaseUrl.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\views_base_url\Plugin\views\field;
 
+use Drupal\path_alias\AliasManager;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\path_alias\AliasManagerInterface;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
@@ -22,7 +23,7 @@ class BaseUrl extends FieldPluginBase {
   /**
    * Definition of path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManager
+   * @var AliasManager
    */
   protected $pathAliasManager;
 
diff --git a/tests/src/Functional/ViewsBaseUrlFieldTest.php b/tests/src/Functional/ViewsBaseUrlFieldTest.php
index a7d5b4a..0e0039f 100644
--- a/tests/src/Functional/ViewsBaseUrlFieldTest.php
+++ b/tests/src/Functional/ViewsBaseUrlFieldTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\views_base_url\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\path_alias\PathAliasStorage;
+use Drupal\path_alias\AliasManager;
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\Component\Utility\Random;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
@@ -21,7 +25,7 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
   /**
    * A user with various administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -55,14 +59,14 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
   /**
    * Path alias storage.
    *
-   * @var \Drupal\path_alias\PathAliasStorage
+   * @var PathAliasStorage
    */
   protected $pathAliasStorage;
 
   /**
    * Path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManager
+   * @var AliasManager
    */
   protected $pathAliasManager;
 
@@ -78,14 +82,14 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
   /**
    * Definition of File System Interface.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser([
@@ -93,11 +97,12 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
     ]);
     $random = new Random();
 
-    /** @var \Drupal\path_alias\PathAliasStorage $pathAliasStorage */
+    /** @var PathAliasStorage $pathAliasStorage */
     $this->pathAliasStorage = $this->container->get('entity_type.manager')->getStorage('path_alias');
-    /** @var \Drupal\path_alias\AliasManager $pathAliasManager */
+    /** @var AliasManager $pathAliasManager */
     $this->pathAliasManager = $this->container->get('path_alias.manager');
-    /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */;
+    /** @var FileSystemInterface $fileSystem */
+    ;
     $this->fileSystem = $this->container->get('file_system');
     // Create $this->nodeCount nodes.
     $this->drupalLogin($this->adminUser);
@@ -109,8 +114,9 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
         'title[0][value]' => $title,
         'files[field_image_0]' => $this->fileSystem->realpath($image->uri),
       ];
-      $this->drupalPostForm('node/add/article', $edit, t('Save'));
-      $this->drupalPostForm(NULL, ['field_image[0][alt]' => $title], t('Save'));
+      $this->drupalGet('node/add/article');
+      $this->submitForm($edit, t('Save'));
+      $this->submitForm(['field_image[0][alt]' => $title], t('Save'));
 
       $this->nodes[$i] = $this->drupalGetNodeByTitle($title);
       $path_alias = $this->pathAliasStorage->create([
@@ -129,10 +135,10 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
     global $base_url;
 
     $this->drupalGet('views-base-url-link-no-settings-test');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $elements = $this->xpath('//div[contains(@class,"view-views-base-url-link-no-settings-test")]/div[@class="view-content"]/div[contains(@class,"views-row")]');
-    $this->assertEqual(count($elements), $this->nodeCount, t('There are @count rows', [
+    $this->assertEquals(count($elements), $this->nodeCount, t('There are @count rows', [
       '@count' => $this->nodeCount,
     ]));
 
@@ -142,7 +148,7 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
       ':path' => $link_path,
       ':text' => $link_text,
     ]);
-    $this->assertEqual(count($elements), $this->nodeCount, 'Views base url rendered as link with no settings set');
+    $this->assertEquals(count($elements), $this->nodeCount, 'Views base url rendered as link with no settings set');
   }
 
   /**
@@ -152,17 +158,17 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
     global $base_url;
 
     $this->drupalGet('views-base-url-nolink-test');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $elements = $this->xpath('//div[contains(@class,"view-views-base-url-no-link-test")]/div[@class="view-content"]/div[contains(@class,"views-row")]');
-    $this->assertEqual(count($elements), $this->nodeCount, t('There are @count rows', [
+    $this->assertEquals(count($elements), $this->nodeCount, t('There are @count rows', [
       '@count' => $this->nodeCount,
     ]));
 
     $elements = $this->xpath('//div[contains(@class,"views-field-base-url")]/span[@class="field-content" and text()=:value]', [
       ':value' => $base_url,
     ]);
-    $this->assertEqual(count($elements), $this->nodeCount, t('Base url is displayed @count times', [
+    $this->assertEquals(count($elements), $this->nodeCount, t('Base url is displayed @count times', [
       '@count' => $this->nodeCount,
     ]));
   }
@@ -174,10 +180,10 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
     global $base_url;
 
     $this->drupalGet('views-base-url-link-all-settings-test');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $elements = $this->xpath('//div[contains(@class,"view-views-base-url-link-all-settings-test")]/div[@class="view-content"]/div[contains(@class,"views-row")]');
-    $this->assertEqual(count($elements), $this->nodeCount, t('There are @count rows', [
+    $this->assertEquals(count($elements), $this->nodeCount, t('There are @count rows', [
       '@count' => $this->nodeCount,
     ]));
 
@@ -208,7 +214,7 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
         ':target' => $link_target,
         ':text' => $link_text,
       ]);
-      $this->assertEqual(count($elements), 1, 'Views base url rendered as link with all settings');
+      $this->assertEquals(count($elements), 1, 'Views base url rendered as link with all settings');
     }
   }
 
@@ -219,10 +225,10 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
     global $base_url;
 
     $this->drupalGet('views-base-url-link-link-path-test');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $elements = $this->xpath('//div[contains(@class,"view-views-base-url-link-link-path-test")]/div[@class="view-content"]/div[contains(@class,"views-row")]');
-    $this->assertEqual(count($elements), $this->nodeCount, t('There are @count rows', [
+    $this->assertEquals(count($elements), $this->nodeCount, t('There are @count rows', [
       '@count' => $this->nodeCount,
     ]));
 
@@ -234,7 +240,7 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
         ':path' => $link_path,
         ':text' => $link_text,
       ]);
-      $this->assertEqual(count($elements), 1, 'Views base url rendered as link with link path set');
+      $this->assertEquals(count($elements), 1, 'Views base url rendered as link with link path set');
     }
   }
 
@@ -252,10 +258,10 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
     global $base_url;
 
     $this->drupalGet('views-base-url-link-link-text-test');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $elements = $this->xpath('//div[contains(@class,"view-views-base-url-link-link-text-test")]/div[@class="view-content"]/div[contains(@class,"views-row")]');
-    $this->assertEqual(count($elements), $this->nodeCount, t('There are @count rows', [
+    $this->assertEquals(count($elements), $this->nodeCount, t('There are @count rows', [
       '@count' => $this->nodeCount,
     ]));
 
@@ -267,7 +273,7 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
         ':path' => $link_path,
         ':text' => $link_text,
       ]);
-      $this->assertEqual(count($elements), 1, 'Views base url rendered as link with link text set');
+      $this->assertEquals(count($elements), 1, 'Views base url rendered as link with link text set');
     }
   }
 
@@ -285,10 +291,10 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
     global $base_url;
 
     $this->drupalGet('views-base-url-link-link-query-test');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $elements = $this->xpath('//div[contains(@class,"view-views-base-url-link-link-query-test")]/div[@class="view-content"]/div[contains(@class,"views-row")]');
-    $this->assertEqual(count($elements), $this->nodeCount, t('There are @count rows', [
+    $this->assertEquals(count($elements), $this->nodeCount, t('There are @count rows', [
       '@count' => $this->nodeCount,
     ]));
 
@@ -303,7 +309,7 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
       ])->toUriString(),
       ':text' => $link_text,
     ]);
-    $this->assertEqual(count($elements), $this->nodeCount, 'Views base url rendered as link with link query set');
+    $this->assertEquals(count($elements), $this->nodeCount, 'Views base url rendered as link with link query set');
   }
 
   /**
@@ -320,10 +326,10 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
     global $base_url;
 
     $this->drupalGet('views-base-url-image-test');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     $elements = $this->xpath('//div[contains(@class,"view-views-base-url-image-test")]/div[@class="view-content"]/div[contains(@class,"views-row")]');
-    $this->assertEqual(count($elements), $this->nodeCount, t('There are @count rows', [
+    $this->assertEquals(count($elements), $this->nodeCount, t('There are @count rows', [
       '@count' => $this->nodeCount,
     ]));
 
@@ -331,7 +337,7 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
       $field = $node->get('field_image');
       $value = $field->getValue();
 
-      $image_uri = file_url_transform_relative(file_create_url($field->entity->getFileUri()));
+      $image_uri = \Drupal::service('file_url_generator')->generateString($field->entity->getFileUri());
       $image_alt = $value[0]['alt'];
       $image_width = $value[0]['width'];
       $image_height = $value[0]['height'];
@@ -364,7 +370,7 @@ class ViewsBaseUrlFieldTest extends BrowserTestBase {
         ':height' => $image_height,
         ':alt' => $image_alt,
       ]);
-      $this->assertEqual(count($elements), 1, 'Views base url rendered as link image');
+      $this->assertEquals(count($elements), 1, 'Views base url rendered as link image');
     }
   }
 
