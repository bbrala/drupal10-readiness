modules/contrib/micro_contact/micro_contact.install
modules/contrib/micro_contact/micro_contact.module
modules/contrib/micro_contact/src/Access/ContactAccess.php
modules/contrib/micro_contact/src/MicroContactManager.php
modules/contrib/micro_contact/src/MicroContactManagerInterface.php
modules/contrib/micro_contact/src/Routing/RouteSubscriber.php
modules/contrib/micro_contact/tests/src/Functional/LoadTest.php

6 files with changes
====================

1) modules/contrib/micro_contact/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\micro_contact\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\micro_site\Functional\MicroSiteBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/micro_contact/src/MicroContactManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micro_contact;

+use Drupal\contact\ContactFormInterface;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * @param boolean $reset
    *   Reset the static cache.
    *
-   * @return array|\Drupal\contact\ContactFormInterface[]
+   * @return array|ContactFormInterface[]
    *   An array of contact form id (or entity) keyed by the contact form id.
    */
   public function getContactFormAllowed($type = 'canonical', $return_entity = FALSE, $reset = FALSE);
@@ @@
   /**
    * Get the contact form id of a micro site.
    *
-   * @param \Drupal\micro_site\Entity\SiteInterface $site
+   * @param SiteInterface $site
    *   The site entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/micro_contact/src/MicroContactManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micro_contact;

+use Drupal\contact\ContactFormInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The site record returned by the lookup request.
    *
-   * @var \Drupal\micro_site\Entity\SiteInterface
+   * @var SiteInterface
    */
   protected $site;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The request stack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;

@@ @@
   /**
    * Constructs a DomainNegotiator object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack object.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The Domain loader object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The site negotiator.
    */
   public function __construct(RequestStack $requestStack, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, SiteNegotiatorInterface $site_negotiator) {
@@ @@
    * {@inheritdoc}
    */
   public static function getCurrentSiteId() {
-    /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+    /** @var SiteInterface $site */
     $site = \Drupal::service('micro_site.negotiator')->getActiveSite();

     // We are not on a active site url. Try to load it from the Request.
@@ @@
     if (is_null($list)) {
       $list = [];
       $contact_forms = $this->entityTypeManager->getStorage('contact_form')->loadMultiple();
-      /** @var \Drupal\contact\ContactFormInterface $contact_form */
+      /** @var ContactFormInterface $contact_form */
       foreach ($contact_forms as $id => $contact_form) {
         if ($contact_form->getThirdPartySetting('micro_contact', $type)) {
           $list[$id] = $return_entity ? $contact_form : $id;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/micro_contact/src/Access/ContactAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micro_contact\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\contact\ContactFormInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   /**
    * The site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;

@@ @@
   /**
    * The system theme config object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The micro contact manager service.
    *
-   * @var \Drupal\micro_contact\MicroContactManagerInterface
+   * @var MicroContactManagerInterface
    */
   protected $microContactManager;

@@ @@
   /**
    * Constructs a NodeAccess object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The site negotiator.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\micro_contact\MicroContactManagerInterface $micro_contact_manager
+   * @param MicroContactManagerInterface $micro_contact_manager
    *   The micro contact manager service.
    */
   function __construct(EntityTypeManagerInterface $entity_type_manager, SiteNegotiatorInterface $site_negotiator, ConfigFactoryInterface $config_factory, MicroContactManagerInterface $micro_contact_manager) {
@@ @@
   /**
    * Checks access to the entity operation on the given route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\contact\ContactFormInterface $contact_form
+   * @param ContactFormInterface $contact_form
    *   The contact form on which check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account, ContactFormInterface $contact_form = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/micro_contact/micro_contact.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\micro_contact\MicroContactManagerInterface;
+use Drupal\micro_site\Entity\SiteInterface;
+use Drupal\micro_site\Entity\SiteTypeInterface;
+use Drupal\node\NodeTypeInterface;
+use Drupal\micro_site\SiteNegotiatorInterface;
 use Drupal\contact\MessageInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   $fields = [];
   if ($entity_type->id() === 'site') {

-    /** @var \Drupal\micro_contact\MicroContactManagerInterface $micro_contact_manager */
+    /** @var MicroContactManagerInterface $micro_contact_manager */
     $micro_contact_manager = \Drupal::service('micro_contact.manager');
     $contactForms = $micro_contact_manager->getContactFormAllowed('canonical', TRUE);
     $options = ['_none' => t('- None -')];
@@ @@
  * Implements hook_form_BASE_FORM_ID_alter().
  */
 function micro_contact_form_site_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   $site = $form_state->getFormObject()->getEntity();
-  /** @var \Drupal\micro_site\Entity\SiteTypeInterface $site_type */
+  /** @var SiteTypeInterface $site_type */
   $site_type = $site->type->entity;

   if (isset($form['contact_id'])) {
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function micro_contact_form_contact_form_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\node\NodeTypeInterface $type */
+  /** @var NodeTypeInterface $type */
   $type = $form_state->getFormObject()->getEntity();

   $form['micro_contact'] = [
@@ @@
     }
     $active_site = NULL;
     if (!$contact_message->hasField('site_id')) {
-      /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+      /** @var SiteNegotiatorInterface $negotiator */
       $negotiator = \Drupal::service('micro_site.negotiator');
       $active_site = $negotiator->getActiveSite();
     }
@@ @@
     else {
       $sites = $contact_message->get('site_id')->referencedEntities();
       if ($sites) {
-        /** @var \Drupal\micro_site\Entity\SiteInterface $active_site */
+        /** @var SiteInterface $active_site */
         $active_site = reset($sites);
       }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


6) modules/contrib/micro_contact/micro_contact.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityFieldManagerInterface;
 /**
  * @file
  * Contains micro_contact.install.
@@ @@
  * Ensure fields are added.
  */
 function _micro_contact_ensure_fields() {
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
+  /** @var EntityFieldManagerInterface $field_manager */
   $field_manager = \Drupal::service('entity_field.manager');

   $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

