diff --git a/panelizer.api.php b/panelizer.api.php
index 6d60a6e..1b5b0bb 100644
--- a/panelizer.api.php
+++ b/panelizer.api.php
@@ -1,4 +1,5 @@
 <?php
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Developer documentation.
@@ -19,7 +20,7 @@
  * @param string $langcode
  *   The langcode.
  */
-function hook_panelizer_pre_view_builder_alter(&$view_mode, \Drupal\Core\Entity\EntityInterface $entity, &$langcode) {
+function hook_panelizer_pre_view_builder_alter(&$view_mode, EntityInterface $entity, &$langcode) {
   if ($entity->bundle() == 'page') {
     $view_mode = 'my_custom_view_mode';
   }
@@ -27,4 +28,4 @@ function hook_panelizer_pre_view_builder_alter(&$view_mode, \Drupal\Core\Entity\
 
 /**
  * @} End of "addtogroup hooks".
- */
\ No newline at end of file
+ */
diff --git a/panelizer.module b/panelizer.module
index badc90d..6ffbc1c 100644
--- a/panelizer.module
+++ b/panelizer.module
@@ -1,4 +1,13 @@
 <?php
+use Drupal\panelizer\Plugin\PanelizerEntityManager;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\panelizer\PanelizerInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityFormInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\panelizer\Panelizer;
+use Drupal\Core\Menu\LocalActionManager;
+use Drupal\panelizer\Plugin\PanelizerEntityInterface;
 /**
  * @file
  * Hook implementations for the Panelizer module.
@@ -37,7 +46,7 @@ function panelizer_theme() {
  * Implements hook_entity_type_alter().
  */
 function panelizer_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\panelizer\Plugin\PanelizerEntityManager $panelizer_manager */
+  /** @var PanelizerEntityManager $panelizer_manager */
   $panelizer_manager = \Drupal::service('plugin.manager.panelizer_entity');
 
   // Replace the entity view builder on any entity where we have a Panelizer
@@ -67,7 +76,7 @@ function panelizer_panels_build_alter(&$build, PanelsDisplayVariant $panels_disp
   if ($is_panelizer) {
     $build['#attached']['library'][] = 'panelizer/panels_ipe';
 
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $panels_display->getContexts()['@panelizer.entity_context:entity']->getContextValue();
     $revision_id = ($entity instanceof RevisionableInterface && $entity->getEntityType()->isRevisionable()) && !$entity->isDefaultRevision() ? $entity->getRevisionId() : NULL;
     list (,, $view_mode) = explode(':', $panels_display->getStorageId());
@@ -99,7 +108,7 @@ function panelizer_panels_build_alter(&$build, PanelsDisplayVariant $panels_disp
     }
     $panelizer_field_storage_id = implode(':', $panelizer_field_storage_id_parts);
 
-    /** @var \Drupal\panelizer\PanelizerInterface $panelizer */
+    /** @var PanelizerInterface $panelizer */
     $panelizer = \Drupal::service('panelizer');
 
     $build['#attached']['drupalSettings']['panelizer']['entity'] = [
@@ -159,12 +168,12 @@ function panelizer_panels_ipe_panels_display_presave(PanelsDisplayVariant $panel
     // save specially to the Panelizer field so that we can tell it we're on
     // a default.
     if ($panelizer_save_as == 'panelizer_default') {
-      /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+      /** @var EntityTypeManagerInterface $entity_type_manager */
       $entity_type_manager = \Drupal::service("entity_type.manager");
       $storage = $entity_type_manager->getStorage($panelizer_entity['entity_type_id']);
       $entity = $storage->load($panelizer_entity['entity_id']);
       if ($entity instanceof FieldableEntityInterface) {
-        /** @var \Drupal\panelizer\PanelizerInterface $panelizer */
+        /** @var PanelizerInterface $panelizer */
         $panelizer = \Drupal::service('panelizer');
         list (,,, $default_name) = explode(':', $panelizer_entity['panelizer_default_storage_id']);
         $panelizer->setPanelsDisplay($entity, $panelizer_entity['view_mode'], $default_name);
@@ -187,14 +196,14 @@ function panelizer_panels_ipe_panels_display_presave(PanelsDisplayVariant $panel
  * Implements hook_form_FORM_ID_alter().
  */
 function panelizer_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
+  /** @var EntityFormInterface $form_object */
   $form_object = $form_state->getFormObject();
-  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+  /** @var EntityViewDisplayInterface $display */
   $display = $form_object->getEntity();
 
-  /** @var \Drupal\panelizer\Plugin\PanelizerEntityManager $panelizer_manager */
+  /** @var PanelizerEntityManager $panelizer_manager */
   $panelizer_manager = \Drupal::service('plugin.manager.panelizer_entity');
-  /** @var \Drupal\panelizer\PanelizerInterface $panelizer */
+  /** @var PanelizerInterface $panelizer */
   $panelizer = \Drupal::service('panelizer');
 
   $entity_type_id = $display->getTargetEntityTypeId();
@@ -295,13 +304,13 @@ function panelizer_form_entity_view_display_edit_form_alter(&$form, FormStateInt
 
 function panelizer_form_entity_view_display_edit_submit(&$form, FormStateInterface $form_state) {
   $rebuild = FALSE;
-  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
+  /** @var EntityFormInterface $form_object */
   $form_object = $form_state->getFormObject();
-  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+  /** @var EntityViewDisplayInterface $display */
   $display = $form_object->getEntity();
-  /** @var \Drupal\panelizer\Plugin\PanelizerEntityManager $panelizer_manager */
+  /** @var PanelizerEntityManager $panelizer_manager */
   $panelizer_manager = \Drupal::service('plugin.manager.panelizer_entity');
-  /** @var \Drupal\panelizer\Panelizer $panelizer */
+  /** @var Panelizer $panelizer */
   $panelizer = \Drupal::service('panelizer');
 
   if ($panelizer_manager->hasDefinition($display->getTargetEntityTypeId())) {
@@ -315,7 +324,7 @@ function panelizer_form_entity_view_display_edit_submit(&$form, FormStateInterfa
     $panelizer->setPanelizerSettings($display->getTargetEntityTypeId(), $display->getTargetBundle(), $display->getMode(), $settings, $display);
     if ($rebuild) {
       \Drupal::service('router.builder')->rebuild();
-      /** @var \Drupal\Core\Menu\LocalActionManager $local_action_manager */
+      /** @var LocalActionManager $local_action_manager */
       $local_action_manager = \Drupal::service('plugin.manager.menu.local_action');
       $local_action_manager->clearCachedDefinitions();
       // Manually reinitialize these.
@@ -385,11 +394,11 @@ function template_preprocess_panelizer_view_mode(&$variables) {
   $element = $variables['element'];
 
   // Copy values into the variables.
-  /** @var \Drupal\panelizer\Plugin\PanelizerEntityInterface $panelizer_plugin */
+  /** @var PanelizerEntityInterface $panelizer_plugin */
   $panelizer_plugin = $variables['panelizer_plugin'] = $element['#panelizer_plugin'];
-  /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display */
+  /** @var PanelsDisplayVariant $panels_display */
   $panels_display = $variables['panels_display'] = $element['#panels_display'];
-  /** @var \Drupal\Core\Entity\EntityInterface $entity */
+  /** @var EntityInterface $entity */
   $entity = $variables['entity'] = $element['#entity'];
   $view_mode = $variables['view_mode'] = $element['#view_mode'];
   $variables['content'] = $element['content'];
diff --git a/panelizer.post_update.php b/panelizer.post_update.php
index fcb8e18..981ff70 100644
--- a/panelizer.post_update.php
+++ b/panelizer.post_update.php
@@ -1,19 +1,17 @@
 <?php
 
+use Drupal\panelizer\Plugin\PanelizerEntityManager;
 /**
  * @file
  * Post update functions for Panelizer.
  */
-
 /**
  * @addtogroup updates-8.3.0
  * @{
  */
-
 /**
  * Implementations of hook_post_update_NAME().
  */
-
 /**
  * Rename layout machine names in content entities to match layout discovery's
  * default layouts.
@@ -21,7 +19,7 @@
 function panelizer_post_update_rename_layout_machine_names(&$sandbox) {
   module_load_install('panels');
 
-  /** @var \Drupal\panelizer\Plugin\PanelizerEntityManager $panelizer_manager */
+  /** @var PanelizerEntityManager $panelizer_manager */
   $panelizer_manager = \Drupal::service('plugin.manager.panelizer_entity');
 
   $results = [];
diff --git a/panelizer_quickedit/panelizer_quickedit.module b/panelizer_quickedit/panelizer_quickedit.module
index 44c19f0..2f5146c 100644
--- a/panelizer_quickedit/panelizer_quickedit.module
+++ b/panelizer_quickedit/panelizer_quickedit.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\panelizer\PanelizerInterface;
+use Drupal\ctools_block\Plugin\Block\EntityField;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Render\Element;
@@ -16,11 +18,11 @@ function panelizer_quickedit_render_field(EntityInterface $entity, $field_name,
   list($view_mode, $block_id) = explode('-block-id-', $temp);
 
   // Load the Panelizer display.
-  /** @var \Drupal\panelizer\PanelizerInterface $panelizer */
+  /** @var PanelizerInterface $panelizer */
   $panelizer = \Drupal::service('panelizer');
   $display = $panelizer->getPanelsDisplay($entity, $view_mode);
 
-  /** @var \Drupal\ctools_block\Plugin\Block\EntityField $plugin */
+  /** @var EntityField $plugin */
   $plugin = $display->getBlock($block_id);
 
   // Set the appropriate Entity context and build the plugin.
diff --git a/panelizer_quickedit/tests/src/FunctionalJavascript/PanelizerQuickEditTest.php b/panelizer_quickedit/tests/src/FunctionalJavascript/PanelizerQuickEditTest.php
index 3619b4b..a5dec45 100644
--- a/panelizer_quickedit/tests/src/FunctionalJavascript/PanelizerQuickEditTest.php
+++ b/panelizer_quickedit/tests/src/FunctionalJavascript/PanelizerQuickEditTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\panelizer_quickedit\FunctionalJavascript;
 
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\panelizer\PanelizerInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
@@ -26,7 +29,7 @@ class PanelizerQuickEditTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalCreateContentType(['type' => 'page', 'name' => 'Page']);
@@ -48,13 +51,13 @@ class PanelizerQuickEditTest extends WebDriverTestBase {
       'description' => '',
       ])->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
+    /** @var EntityFormDisplayInterface $entity_form_display */
     $entity_form_display = \Drupal::entityTypeManager()
       ->getStorage('entity_form_display')
       ->load('node.page.default');
     $entity_form_display->setComponent('test_field')->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $entity_display */
+    /** @var EntityViewDisplayInterface $entity_display */
     $entity_display = \Drupal::entityTypeManager()
       ->getStorage('entity_view_display')
       ->load('node.page.default');
@@ -87,7 +90,7 @@ class PanelizerQuickEditTest extends WebDriverTestBase {
    * Tests Quick Editing a Panelized Node.
    */
   public function testPanelizerQuickEdit() {
-    /** @var \Drupal\panelizer\PanelizerInterface $panelizer */
+    /** @var PanelizerInterface $panelizer */
     $panelizer = \Drupal::service('panelizer');
     $displays = $panelizer->getDefaultPanelsDisplays('node', 'page', 'default');
     $display = $displays['default'];
diff --git a/src/Access/DefaultAccess.php b/src/Access/DefaultAccess.php
index 45af311..781568a 100644
--- a/src/Access/DefaultAccess.php
+++ b/src/Access/DefaultAccess.php
@@ -14,14 +14,14 @@ class DefaultAccess implements AccessInterface {
   /**
    * The Panelizer service.
    *
-   * @var \Drupal\panelizer\PanelizerInterface
+   * @var PanelizerInterface
    */
   protected $panelizer;
 
   /**
    * DefaultAccess constructor.
    *
-   * @param \Drupal\panelizer\PanelizerInterface $panelizer
+   * @param PanelizerInterface $panelizer
    *   The Panelizer service.
    */
   public function __construct(PanelizerInterface $panelizer) {
@@ -38,7 +38,7 @@ class DefaultAccess implements AccessInterface {
    * @param string $view_mode_name
    *   The panelized view mode ID.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function access($entity_type_id, $bundle, $view_mode_name) {
     $settings = $this->panelizer->getPanelizerSettings($entity_type_id, $bundle, $view_mode_name);
diff --git a/src/Access/PanelizerDefaultsDisplayAccess.php b/src/Access/PanelizerDefaultsDisplayAccess.php
index 1e76a9b..3946ed3 100644
--- a/src/Access/PanelizerDefaultsDisplayAccess.php
+++ b/src/Access/PanelizerDefaultsDisplayAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer\Access;
 
+use Drupal\panelizer\Panelizer;
 use Drupal\Core\Access\AccessResult;
 
 /**
@@ -15,11 +16,11 @@ class PanelizerDefaultsDisplayAccess {
    * @param string $machine_name
    *   The machine name of the default display.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function isNotDefaultDisplay($machine_name) {
     list($entity_type, $bundle, $view_mode, $default) = explode('__', $machine_name);
-    /** @var \Drupal\panelizer\Panelizer $panelizer */
+    /** @var Panelizer $panelizer */
     $panelizer = \Drupal::service('panelizer');
     $settings = $panelizer->getPanelizerSettings($entity_type, $bundle, $view_mode);
     if ($settings['default'] != $default) {
diff --git a/src/Access/ViewModeAccessCheck.php b/src/Access/ViewModeAccessCheck.php
index bb28110..03d9e6a 100644
--- a/src/Access/ViewModeAccessCheck.php
+++ b/src/Access/ViewModeAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -32,16 +33,16 @@ class ViewModeAccessCheck implements AccessInterface {
   /**
    * Adapt the panelizer defaults access check to correspond to field ui.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The original route definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route matched.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user's account.
    * @param string $machine_name
    *   The machine name of the panelizer default.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    * @throws \Exception
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account, $machine_name) {
diff --git a/src/Controller/PanelizerPanelsIPEController.php b/src/Controller/PanelizerPanelsIPEController.php
index 6e14bc2..f5aa5cf 100644
--- a/src/Controller/PanelizerPanelsIPEController.php
+++ b/src/Controller/PanelizerPanelsIPEController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer\Controller;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
@@ -22,14 +23,14 @@ class PanelizerPanelsIPEController extends ControllerBase {
   /**
    * The Panelizer service.
    *
-   * @var \Drupal\panelizer\PanelizerInterface
+   * @var PanelizerInterface
    */
   protected $panelizer;
 
   /**
    * Constructs a PanelizerPanelsIPEController.
    *
-   * @param \Drupal\panelizer\PanelizerInterface $panelizer
+   * @param PanelizerInterface $panelizer
    *   The Panelizer service.
    */
   public function __construct(PanelizerInterface $panelizer) {
@@ -48,15 +49,15 @@ class PanelizerPanelsIPEController extends ControllerBase {
   /**
    * Reverts an entity view mode to a particular named default.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity.
    * @param string $view_mode
    *   The view mode.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   An empty response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\BadRequestHttpException
+   * @throws BadRequestHttpException
    */
   public function revertToDefault(FieldableEntityInterface $entity, $view_mode) {
     // Get the bundle specific default display as a fallback.
@@ -82,14 +83,14 @@ class PanelizerPanelsIPEController extends ControllerBase {
   /**
    * Custom access checker for reverting an entity view mode to a named default.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity.
    * @param string $view_mode
    *   The view mode.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function accessRevertToDefault(FieldableEntityInterface $entity, $view_mode, AccountInterface $account) {
diff --git a/src/Form/PanelizerDefaultDelete.php b/src/Form/PanelizerDefaultDelete.php
index fb96cc5..6799d24 100644
--- a/src/Form/PanelizerDefaultDelete.php
+++ b/src/Form/PanelizerDefaultDelete.php
@@ -47,39 +47,39 @@ class PanelizerDefaultDelete extends ConfirmFormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Panelizer service.
    *
-   * @var \Drupal\panelizer\PanelizerInterface
+   * @var PanelizerInterface
    */
   protected $panelizer;
 
   /**
    * The Panels display manager.
    *
-   * @var \Drupal\panels\PanelsDisplayManagerInterface
+   * @var PanelsDisplayManagerInterface
    */
   protected $panelsDisplayManager;
 
   /**
    * The cache tag invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $invalidator;
 
   /**
    * PanelizerDefaultDelete constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\panelizer\PanelizerInterface $panelizer
+   * @param PanelizerInterface $panelizer
    *   The Panelizer service.
-   * @param \Drupal\panels\PanelsDisplayManagerInterface $panels_display_manager
+   * @param PanelsDisplayManagerInterface $panels_display_manager
    *   The Panels display manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, PanelizerInterface $panelizer, PanelsDisplayManagerInterface $panels_display_manager, CacheTagsInvalidatorInterface $invalidator) {
diff --git a/src/Form/PanelizerDefaultSelect.php b/src/Form/PanelizerDefaultSelect.php
index e1c98f1..b15966e 100644
--- a/src/Form/PanelizerDefaultSelect.php
+++ b/src/Form/PanelizerDefaultSelect.php
@@ -45,21 +45,21 @@ class PanelizerDefaultSelect extends ConfirmFormBase {
   /**
    * The Panelizer service.
    *
-   * @var \Drupal\panelizer\PanelizerInterface
+   * @var PanelizerInterface
    */
   protected $panelizer;
 
   /**
    * The cache tag invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $invalidator;
 
   /**
    * PanelizerDefaultSelect constructor.
    *
-   * @param \Drupal\panelizer\PanelizerInterface $panelizer
+   * @param PanelizerInterface $panelizer
    *   The Panelizer service.
    */
   public function __construct(PanelizerInterface $panelizer, CacheTagsInvalidatorInterface $invalidator) {
diff --git a/src/Form/PanelizerWizardContextConfigure.php b/src/Form/PanelizerWizardContextConfigure.php
index e987030..032ad4e 100644
--- a/src/Form/PanelizerWizardContextConfigure.php
+++ b/src/Form/PanelizerWizardContextConfigure.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer\Form;
 
+use Drupal\ctools\ContextMapperInterface;
 use Drupal\Core\Plugin\Context\ContextInterface;
 use Drupal\ctools\Form\ContextConfigure;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,7 +15,7 @@ class PanelizerWizardContextConfigure extends ContextConfigure {
   /**
    * The context mapper.
    *
-   * @var \Drupal\ctools\ContextMapperInterface
+   * @var ContextMapperInterface
    */
   protected $contextMapper;
 
diff --git a/src/Form/PanelizerWizardContextForm.php b/src/Form/PanelizerWizardContextForm.php
index 9ebfbd8..e84f2fc 100644
--- a/src/Form/PanelizerWizardContextForm.php
+++ b/src/Form/PanelizerWizardContextForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer\Form;
 
+use Drupal\Core\TempStore\SharedTempStoreFactory;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
 use Drupal\Core\Form\FormBuilderInterface;
@@ -23,7 +24,7 @@ class PanelizerWizardContextForm extends ManageContext {
   /**
    * The shared temp store factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $tempstoreFactory;
 
diff --git a/src/Form/PanelizerWizardGeneralForm.php b/src/Form/PanelizerWizardGeneralForm.php
index dcb84a9..bb89af6 100644
--- a/src/Form/PanelizerWizardGeneralForm.php
+++ b/src/Form/PanelizerWizardGeneralForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer\Form;
 
+use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormStateInterface;
@@ -24,7 +25,7 @@ class PanelizerWizardGeneralForm extends FormBase {
   /**
    * The Panelizer service.
    *
-   * @var \Drupal\panelizer\PanelizerInterface
+   * @var PanelizerInterface
    */
   protected $panelizer;
 
@@ -52,9 +53,9 @@ class PanelizerWizardGeneralForm extends FormBase {
   /**
    * PanelizerWizardGeneralForm constructor.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\panelizer\PanelizerInterface $panelizer
+   * @param PanelizerInterface $panelizer
    *   The Panelizer service.
    */
   public function __construct(RouteMatchInterface $route_match, PanelizerInterface $panelizer) {
@@ -104,7 +105,7 @@ class PanelizerWizardGeneralForm extends FormBase {
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $plugin */
+    /** @var PanelsDisplayVariant $plugin */
     $plugin = $cached_values['plugin'];
 
     $form_state = new FormState();
@@ -144,7 +145,7 @@ class PanelizerWizardGeneralForm extends FormBase {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $cached_values = $form_state->getTemporaryValue('wizard');
-    /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $plugin */
+    /** @var PanelsDisplayVariant $plugin */
     $plugin = $cached_values['plugin'];
     $plugin->submitConfigurationForm($form['variant_settings'], (new FormState())->setValues($form_state->getValue('variant_settings', [])));
     $configuration = $plugin->getConfiguration();
diff --git a/src/Panelizer.php b/src/Panelizer.php
index d34b8de..58f9fb0 100644
--- a/src/Panelizer.php
+++ b/src/Panelizer.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\panelizer;
 
+use Drupal\panelizer\Plugin\PanelizerEntityInterface;
+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ -33,49 +35,49 @@ class Panelizer implements PanelizerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity type bundle info manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The field type manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The Panelizer entity manager.
    *
-   * @var \Drupal\panelizer\Plugin\PanelizerEntityManager
+   * @var PanelizerEntityManager
    */
   protected $panelizerEntityManager;
 
@@ -89,32 +91,32 @@ class Panelizer implements PanelizerInterface {
   /**
    * The context mapper.
    *
-   * @var \Drupal\ctools\ContextMapperInterface
+   * @var ContextMapperInterface
    */
   protected $contextMapper;
 
   /**
    * Constructs a Panelizer.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user service.
-   * @param \Drupal\panelizer\Plugin\PanelizerEntityManager $panelizer_entity_manager
+   * @param PanelizerEntityManager $panelizer_entity_manager
    *   The Panelizer entity manager.
-   * @param \Drupal\panels\PanelsDisplayManagerInterface $panels_manager
+   * @param PanelsDisplayManagerInterface $panels_manager
    *   The Panels display manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
-   * @param \Drupal\ctools\ContextMapperInterface $context_mapper
+   * @param ContextMapperInterface $context_mapper
    *   The context mapper service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ModuleHandlerInterface $module_handler, AccountProxyInterface $current_user, PanelizerEntityManager $panelizer_entity_manager, PanelsDisplayManagerInterface $panels_manager, TranslationInterface $string_translation, ContextMapperInterface $context_mapper) {
@@ -136,7 +138,7 @@ class Panelizer implements PanelizerInterface {
    * @param $entity_type_id
    *   The entity type id.
    *
-   * @return \Drupal\panelizer\Plugin\PanelizerEntityInterface
+   * @return PanelizerEntityInterface
    */
   protected function getEntityPlugin($entity_type_id) {
     return $this->panelizerEntityManager->createInstance($entity_type_id, []);
@@ -145,7 +147,7 @@ class Panelizer implements PanelizerInterface {
   /**
    * Load a Panels Display via an ID (Machine Name).
    *
-   * @return \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant|NULL
+   * @return PanelsDisplayVariant|NULL
    *   The default Panels display with the given name if it exists; otherwise
    *   NULL.
    */
@@ -213,7 +215,7 @@ class Panelizer implements PanelizerInterface {
   public function getPanelsDisplay(FieldableEntityInterface $entity, $view_mode, EntityViewDisplayInterface $display = NULL) {
     $settings = $this->getPanelizerSettings($entity->getEntityTypeId(), $entity->bundle(), $view_mode, $display);
     if (($settings['custom'] || $settings['allow']) && isset($entity->panelizer) && $entity->panelizer->first()) {
-      /** @var \Drupal\Core\Field\FieldItemInterface[] $values */
+      /** @var FieldItemInterface[] $values */
       $values = [];
       foreach ($entity->panelizer as $item) {
         $values[$item->view_mode] = $item;
@@ -254,7 +256,7 @@ class Panelizer implements PanelizerInterface {
   /**
    * Properly determine the cache tags for a display and set them.
    *
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    *   The panels display variant.
    * @param string $entity_type_id
    *   The entity type id.
@@ -262,7 +264,7 @@ class Panelizer implements PanelizerInterface {
    *   The bundle.
    * @param string $view_mode
    *   The view mode.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface|NULL $display
+   * @param EntityViewDisplayInterface|NULL $display
    *   If the caller already has the correct display, it can optionally be
    *   passed in here so the Panelizer service doesn't have to look it up;
    *   otherwise, this argument can be omitted.
@@ -291,7 +293,7 @@ class Panelizer implements PanelizerInterface {
     $settings = $this->getPanelizerSettings($entity->getEntityTypeId(), $entity->bundle(), $view_mode);
     if (($settings['custom'] || $settings['allow']) && isset($entity->panelizer)) {
       $panelizer_item = NULL;
-      /** @var \Drupal\Core\Field\FieldItemInterface $item */
+      /** @var FieldItemInterface $item */
       foreach ($entity->panelizer as $item) {
         if ($item->view_mode == $view_mode) {
           $panelizer_item = $item;
@@ -504,7 +506,7 @@ class Panelizer implements PanelizerInterface {
       // Set the default display.
       $displays = $display->getThirdPartySetting('panelizer', 'displays', []);
       if (empty($displays['default'])) {
-        /** @var \Drupal\panelizer\Plugin\PanelizerEntityInterface $panelizer_entity_plugin */
+        /** @var PanelizerEntityInterface $panelizer_entity_plugin */
         $panelizer_entity_plugin = $this->panelizerEntityManager->createInstance($display->getTargetEntityTypeId(), []);
         $displays['default'] = $this->panelsManager->exportDisplay($panelizer_entity_plugin->getDefaultDisplay($display, $display->getTargetBundle(), $display->getMode()));
         $settings['default'] = "{$display->getTargetEntityTypeId()}__{$display->getTargetBundle()}__{$view_mode}__default";
@@ -608,7 +610,7 @@ class Panelizer implements PanelizerInterface {
    *   The entity type id.
    * @param string $bundle
    *   The bundle.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
    * @return bool
diff --git a/src/PanelizerEntityViewBuilder.php b/src/PanelizerEntityViewBuilder.php
index 5fa1e97..c3e8eb7 100644
--- a/src/PanelizerEntityViewBuilder.php
+++ b/src/PanelizerEntityViewBuilder.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\panelizer;
 
+use Drupal\panelizer\Plugin\PanelizerEntityManager;
+use Drupal\panelizer\Plugin\PanelizerEntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Core\Plugin\Context\Context;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
@@ -35,64 +40,64 @@ class PanelizerEntityViewBuilder implements EntityViewBuilderInterface, EntityHa
   /**
    * Information about the entity type.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The panelizer service.
    *
-   * @var \Drupal\panelizer\PanelizerInterface
+   * @var PanelizerInterface
    */
   protected $panelizer;
 
   /**
    * The Panelizer entity manager.
    *
-   * @var \Drupal\panelizer\Plugin\PanelizerEntityManager
+   * @var PanelizerEntityManager
    */
   protected $panelizerManager;
 
   /**
    * The Panels display manager.
    *
-   * @var \Drupal\Panels\PanelsDisplayManagerInterface
+   * @var PanelsDisplayManagerInterface
    */
   protected $panelsManager;
 
   /**
    * The Panelizer entity plugin for this entity type.
    *
-   * @var \Drupal\panelizer\Plugin\PanelizerEntityInterface
+   * @var PanelizerEntityInterface
    */
   protected $panelizerPlugin;
 
   /**
    * Constructs a new EntityViewBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\panelizer\PanelizerInterface $panelizer
+   * @param PanelizerInterface $panelizer
    *   The Panelizer service.
-   * @param \Drupal\panelizer\Plugin\PanelizerEntityManager $panelizer_manager
+   * @param PanelizerEntityManager $panelizer_manager
    *   The Panelizer entity manager.
-   * @param \Drupal\Panels\PanelsDisplayManagerInterface $panels_manager
+   * @param PanelsDisplayManagerInterface $panels_manager
    *   The Panels display manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, PanelizerInterface $panelizer, PanelizerEntityManagerInterface $panelizer_manager, PanelsDisplayManagerInterface $panels_manager) {
@@ -122,7 +127,7 @@ class PanelizerEntityViewBuilder implements EntityViewBuilderInterface, EntityHa
   /**
    * Get the Panelizer entity plugin.
    *
-   * @return \Drupal\panelizer\Plugin\PanelizerEntityInterface|FALSE
+   * @return PanelizerEntityInterface|FALSE
    */
   protected function getPanelizerPlugin() {
     if (!isset($this->panelizerPlugin)) {
@@ -140,7 +145,7 @@ class PanelizerEntityViewBuilder implements EntityViewBuilderInterface, EntityHa
   /**
    * Check if Panelizer should be used for building this display.
    *
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The display we're building.
    *
    * @return bool
@@ -152,9 +157,9 @@ class PanelizerEntityViewBuilder implements EntityViewBuilderInterface, EntityHa
   /**
    * Gets the original view builder for this entity.
    *
-   * @return \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @return EntityViewBuilderInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getFallbackViewBuilder() {
     return $this->entityTypeManager->getHandler($this->entityTypeId, 'fallback_view_builder');
@@ -163,14 +168,14 @@ class PanelizerEntityViewBuilder implements EntityViewBuilderInterface, EntityHa
   /**
    * Get the Panels display out of an the entity view display
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The display.
    * @param $view_mode
    *   The view mode.
    *
-   * @return \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant
+   * @return PanelsDisplayVariant
    *   The Panels display.
    */
   protected function getPanelsDisplay(EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
@@ -183,12 +188,12 @@ class PanelizerEntityViewBuilder implements EntityViewBuilderInterface, EntityHa
    * Wraps EntityViewDisplay::collectRenderDisplays() so we can mock it in
    * tests.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface[] $entities
+   * @param FieldableEntityInterface[] $entities
    *   The entities being rendered. They should all be of the same entity type.
    * @param string $view_mode
    *   The view mode being rendered.
    *
-   * @return \Drupal\Core\Entity\Display\EntityViewDisplayInterface[]
+   * @return EntityViewDisplayInterface[]
    *   The display objects to use to render the entities, keyed by entity
    *   bundle.
    *
@@ -203,10 +208,10 @@ class PanelizerEntityViewBuilder implements EntityViewBuilderInterface, EntityHa
    *
    * Wraps creating new Context objects to avoid typed data in tests.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\Core\Plugin\Context\Context
+   * @return Context
    *   The context.
    */
   protected function getEntityContext(EntityInterface $entity) {
@@ -227,7 +232,7 @@ class PanelizerEntityViewBuilder implements EntityViewBuilderInterface, EntityHa
     $fallback_entities = [];
     /**
      * @var string $id
-     * @var \Drupal\Core\Entity\EntityInterface $entity
+     * @var EntityInterface $entity
      */
     foreach ($entities as $id => $entity) {
       $display = $displays[$entity->bundle()];
@@ -334,12 +339,11 @@ class PanelizerEntityViewBuilder implements EntityViewBuilderInterface, EntityHa
   /*
    * Methods for actually rendering the Panelized entities.
    */
-
   /**
    * Build the render array for a list of panelized entities.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface[] $displays
+   * @param EntityInterface[] $entities
+   * @param EntityViewDisplayInterface[] $displays
    * @param string $view_mode
    * @param string|NULL $langcode
    *
@@ -368,8 +372,8 @@ class PanelizerEntityViewBuilder implements EntityViewBuilderInterface, EntityHa
   /**
    * Build the render array for a single panelized entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param EntityInterface $entity
+   * @param PanelsDisplayVariant $panels_display
    * @param string $view_mode
    * @param string $langcode
    *
diff --git a/src/PanelizerInterface.php b/src/PanelizerInterface.php
index 76a472c..aabffd7 100644
--- a/src/PanelizerInterface.php
+++ b/src/PanelizerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer;
 
+use Drupal\panelizer\Exception\PanelizerException;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ -23,7 +24,7 @@ interface PanelizerInterface {
    * @param $view_mode
    *   The view mode.
    *
-   * @return \Drupal\Core\Entity\Display\EntityViewDisplayInterface|NULL
+   * @return EntityViewDisplayInterface|NULL
    *   The entity view display if one exists; NULL otherwise.
    */
   public function getEntityViewDisplay($entity_type_id, $bundle, $view_mode);
@@ -31,16 +32,16 @@ interface PanelizerInterface {
   /**
    * Gets the Panels display for a given entity and view mode.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $view_mode
    *   The entity view mode.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface|NULL $display
+   * @param EntityViewDisplayInterface|NULL $display
    *   If the caller already has the correct display, it can optionally be
    *   passed in here so the Panelizer service doesn't have to look it up;
    *   otherwise, this argument can bo omitted.
    *
-   * @return \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant|NULL
+   * @return PanelsDisplayVariant|NULL
    *   The Panels display if panelized; NULL otherwise.
    */
   public function getPanelsDisplay(FieldableEntityInterface $entity, $view_mode, EntityViewDisplayInterface $display = NULL);
@@ -48,16 +49,16 @@ interface PanelizerInterface {
   /**
    * Sets the Panels display for a given entity and view mode.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity.
    * @param string $view_mode
    *   The entity view mode.
    * @param string|NULL $default
    *   The name of the default if setting to a default; otherwise NULL.
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant|NULL $panels_display
+   * @param PanelsDisplayVariant|NULL $panels_display
    *   The Panels display if this is an override; otherwise NULL.
    *
-   * @throws \Drupal\panelizer\Exception\PanelizerException
+   * @throws PanelizerException
    *   When custom overrides aren't enabled on this entity, bundle and view
    *   mode.
    */
@@ -72,12 +73,12 @@ interface PanelizerInterface {
    *   The bundle.
    * @param string $view_mode
    *   The view mode.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface|NULL $display
+   * @param EntityViewDisplayInterface|NULL $display
    *   If the caller already has the correct display, it can optionally be
    *   passed in here so the Panelizer service doesn't have to look it up;
    *   otherwise, this argument can bo omitted.
    *
-   * @return \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant[]
+   * @return PanelsDisplayVariant[]
    *   An associative array of Panels displays, keyed by the machine name of
    *   the default if panelized; NULL otherwise. All panelized view modes will
    *   have at least one named 'default'.
@@ -95,12 +96,12 @@ interface PanelizerInterface {
    *   The bundle.
    * @param string $view_mode
    *   The view mode.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface|NULL $display
+   * @param EntityViewDisplayInterface|NULL $display
    *   If the caller already has the correct display, it can optionally be
    *   passed in here so the Panelizer service doesn't have to look it up;
    *   otherwise, this argument can bo omitted.
    *
-   * @return \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant|NULL
+   * @return PanelsDisplayVariant|NULL
    *   The default Panels display with the given name if it exists; otherwise
    *   NULL.
    */
@@ -115,10 +116,10 @@ interface PanelizerInterface {
    *   The bundle.
    * @param $view_mode
    *   The view mode.
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    *   The Panels display to use as the default.
    *
-   * @throws \Drupal\panelizer\Exception\PanelizerException
+   * @throws PanelizerException
    *   When a display can't be found for the given entity type, bundle and view
    *   mode.
    */
@@ -139,7 +140,7 @@ interface PanelizerInterface {
    *   The bundle.
    * @param string $view_mode
    *   The view mode.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface|NULL $display
+   * @param EntityViewDisplayInterface|NULL $display
    *   If the caller already has the correct display, it can optionally be
    *   passed in here so the Panelizer service doesn't have to look it up;
    *   otherwise, this argument can bo omitted.
@@ -158,7 +159,7 @@ interface PanelizerInterface {
    *   The bundle.
    * @param string $view_mode
    *   The view mode.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface|NULL $display
+   * @param EntityViewDisplayInterface|NULL $display
    *   If the caller already has the correct display, it can optionally be
    *   passed in here so the Panelizer service doesn't have to look it up;
    *   otherwise, this argument can bo omitted.
@@ -180,7 +181,7 @@ interface PanelizerInterface {
    * @param array $settings
    *   An associative array with the same keys as the associative array
    *   returned by getPanelizerSettings().
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface|NULL $display
+   * @param EntityViewDisplayInterface|NULL $display
    *   If the caller already has the correct display, it can optionally be
    *   passed in here so the Panelizer service doesn't have to look it up;
    *   otherwise, this argument can bo omitted.
@@ -206,11 +207,11 @@ interface PanelizerInterface {
    *   The operation. Possible values include:
    *   - "revert to default"
    *   - "change content"
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $view_mode
    *   The view mode.
-   * @param \Drupal\Core\Session\AccountInterface|NULL $account
+   * @param AccountInterface|NULL $account
    *   (optional) The user account to check; or the current user if omitted.
    *
    * @return bool
@@ -232,7 +233,7 @@ interface PanelizerInterface {
    *   The view mode.
    * @param string $default
    *   The name of the default.
-   * @param \Drupal\Core\Session\AccountInterface|NULL $account
+   * @param AccountInterface|NULL $account
    *   (optional) The user account to check; or the current user if omitted.
    *
    * @return bool
diff --git a/src/Plugin/AddDefaultLinkDeriver.php b/src/Plugin/AddDefaultLinkDeriver.php
index 62d7786..5ab08be 100644
--- a/src/Plugin/AddDefaultLinkDeriver.php
+++ b/src/Plugin/AddDefaultLinkDeriver.php
@@ -14,14 +14,14 @@ class AddDefaultLinkDeriver extends DeriverBase implements ContainerDeriverInter
   /**
    * The Panelizer entity manager.
    *
-   * @var \Drupal\panelizer\Plugin\PanelizerEntityManagerInterface
+   * @var PanelizerEntityManagerInterface
    */
   protected $panelizerEntityManager;
 
   /**
    * AddDefaultLinkDeriver constructor.
    *
-   * @param \Drupal\panelizer\Plugin\PanelizerEntityManagerInterface $panelizer_entity_manager
+   * @param PanelizerEntityManagerInterface $panelizer_entity_manager
    *   The panelizer entity manager.
    */
   public function __construct(PanelizerEntityManagerInterface $panelizer_entity_manager) {
diff --git a/src/Plugin/Field/FieldFormatter/PanelizerFormatter.php b/src/Plugin/Field/FieldFormatter/PanelizerFormatter.php
index 7eb3666..7e285fb 100644
--- a/src/Plugin/Field/FieldFormatter/PanelizerFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/PanelizerFormatter.php
@@ -41,7 +41,7 @@ class PanelizerFormatter extends FormatterBase {
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
diff --git a/src/Plugin/Field/FieldType/PanelizerFieldType.php b/src/Plugin/Field/FieldType/PanelizerFieldType.php
index 8f56c1b..b0ea7e2 100644
--- a/src/Plugin/Field/FieldType/PanelizerFieldType.php
+++ b/src/Plugin/Field/FieldType/PanelizerFieldType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer\Plugin\Field\FieldType;
 
+use Drupal\panels\PanelsDisplayManagerInterface;
 use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemBase;
@@ -83,7 +84,7 @@ class PanelizerFieldType extends FieldItemBase {
   /**
    * Returns the Panels display plugin manager.
    *
-   * @return \Drupal\panels\PanelsDisplayManagerInterface
+   * @return PanelsDisplayManagerInterface
    */
   protected static function getPanelsDisplayManager() {
     return \Drupal::service('panels.display_manager');
diff --git a/src/Plugin/Field/FieldWidget/PanelizerWidget.php b/src/Plugin/Field/FieldWidget/PanelizerWidget.php
index 1695b83..7bf4565 100644
--- a/src/Plugin/Field/FieldWidget/PanelizerWidget.php
+++ b/src/Plugin/Field/FieldWidget/PanelizerWidget.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\panelizer\Plugin\Field\FieldWidget;
 
+use Drupal\panels\PanelsDisplayManagerInterface;
+use Drupal\panelizer\Plugin\PanelizerEntityManager;
+use Drupal\panelizer\PanelizerInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
@@ -24,7 +29,7 @@ class PanelizerWidget extends WidgetBase {
   /**
    * Returns the Panels display plugin manager.
    *
-   * @return \Drupal\panels\PanelsDisplayManagerInterface
+   * @return PanelsDisplayManagerInterface
    */
   public function getPanelsManager() {
     // @todo: is it possible to inject this?
@@ -34,7 +39,7 @@ class PanelizerWidget extends WidgetBase {
   /**
    * Returns the Panelizer entity plugin manager.
    *
-   * @return \Drupal\panelizer\Plugin\PanelizerEntityManager
+   * @return PanelizerEntityManager
    */
   public function getPanelizerManager() {
     // @todo: is it possible to inject this?
@@ -44,7 +49,7 @@ class PanelizerWidget extends WidgetBase {
   /**
    * Returns the Panelizer service.
    *
-   * @return \Drupal\panelizer\PanelizerInterface
+   * @return PanelizerInterface
    */
   public function getPanelizer() {
     // @todo: is it possible to inject this?
@@ -52,7 +57,7 @@ class PanelizerWidget extends WidgetBase {
   }
 
   /**
-   * @return \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @return EntityDisplayRepositoryInterface
    */
   public function getEntityDisplayRepository() {
     // @todo: is it possible to inject this?
@@ -69,7 +74,7 @@ class PanelizerWidget extends WidgetBase {
 
     // Get the current values from the entity.
     $values = [];
-    /** @var \Drupal\Core\Field\FieldItemInterface $item */
+    /** @var FieldItemInterface $item */
     foreach ($items as $item) {
       $values[$item->view_mode] = [
         'default' => $item->default,
diff --git a/src/Plugin/PanelizerEntity/PanelizerNode.php b/src/Plugin/PanelizerEntity/PanelizerNode.php
index aeec6f9..c69b3ff 100644
--- a/src/Plugin/PanelizerEntity/PanelizerNode.php
+++ b/src/Plugin/PanelizerEntity/PanelizerNode.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\panelizer\Plugin\PanelizerEntity;
 
+use Drupal\Core\Block\BlockPluginInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\panelizer\Plugin\PanelizerEntityBase;
@@ -23,7 +25,7 @@ class PanelizerNode extends PanelizerEntityBase {
 
     // Remove the 'title' block because it's covered already.
     foreach ($panels_display->getRegionAssignments() as $region => $blocks) {
-      /** @var \Drupal\Core\Block\BlockPluginInterface[] $blocks */
+      /** @var BlockPluginInterface[] $blocks */
       foreach ($blocks as $block_id => $block) {
         if ($block->getPluginId() == 'entity_field:node:title') {
           $panels_display->removeBlock($block_id);
@@ -63,7 +65,7 @@ class PanelizerNode extends PanelizerEntityBase {
   public function preprocessViewMode(array &$variables, EntityInterface $entity, PanelsDisplayVariant $panels_display, $view_mode) {
     parent::preprocessViewMode($variables, $entity, $panels_display, $view_mode);
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $entity;
 
     // Add node specific CSS classes.
diff --git a/src/Plugin/PanelizerEntity/PanelizerTerm.php b/src/Plugin/PanelizerEntity/PanelizerTerm.php
index a78a7d3..21add95 100644
--- a/src/Plugin/PanelizerEntity/PanelizerTerm.php
+++ b/src/Plugin/PanelizerEntity/PanelizerTerm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer\Plugin\PanelizerEntity;
 
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\panelizer\Plugin\PanelizerEntityBase;
@@ -23,7 +24,7 @@ class PanelizerTerm extends PanelizerEntityBase {
 
     // Remove the 'name' block because it's covered already.
     foreach ($panels_display->getRegionAssignments() as $region => $blocks) {
-      /** @var \Drupal\Core\Block\BlockPluginInterface[] $blocks */
+      /** @var BlockPluginInterface[] $blocks */
       foreach ($blocks as $block_id => $block) {
         if ($block->getPluginId() == 'entity_field:taxonomy_term:name') {
           $panels_display->removeBlock($block_id);
diff --git a/src/Plugin/PanelizerEntity/PanelizerUser.php b/src/Plugin/PanelizerEntity/PanelizerUser.php
index c2f84f2..83c70bc 100644
--- a/src/Plugin/PanelizerEntity/PanelizerUser.php
+++ b/src/Plugin/PanelizerEntity/PanelizerUser.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer\Plugin\PanelizerEntity;
 
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\panelizer\Plugin\PanelizerEntityBase;
@@ -24,7 +25,7 @@ class PanelizerUser extends PanelizerEntityBase {
 
     // Remove the 'name' block because it's covered already.
     foreach ($panels_display->getRegionAssignments() as $region => $blocks) {
-      /** @var \Drupal\Core\Block\BlockPluginInterface[] $blocks */
+      /** @var BlockPluginInterface[] $blocks */
       foreach ($blocks as $block_id => $block) {
         if ($block->getPluginId() == 'entity_field:user:name') {
           $panels_display->removeBlock($block_id);
diff --git a/src/Plugin/PanelizerEntityBase.php b/src/Plugin/PanelizerEntityBase.php
index 30a8b53..be94de9 100644
--- a/src/Plugin/PanelizerEntityBase.php
+++ b/src/Plugin/PanelizerEntityBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer\Plugin;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -19,12 +20,12 @@ abstract class PanelizerEntityBase extends PluginBase implements PanelizerEntity
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\Panels\PanelsDisplayManager
+   * @var PanelsDisplayManager
    */
   protected $panelsManager;
 
   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -35,9 +36,9 @@ abstract class PanelizerEntityBase extends PluginBase implements PanelizerEntity
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Panels\PanelsDisplayManager $panels_manager
+   * @param PanelsDisplayManager $panels_manager
    *   The Panels display manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PanelsDisplayManager $panels_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ -75,7 +76,7 @@ abstract class PanelizerEntityBase extends PluginBase implements PanelizerEntity
     $entity_type_id = $this->getPluginId();
     /**
      * @var string $field_name
-     * @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+     * @var FieldDefinitionInterface $field_definition
      */
     foreach ($this->entityFieldManager->getFieldDefinitions($entity_type_id, $bundle) as $field_name => $field_definition) {
       // Skip the Panelizer field.
diff --git a/src/Plugin/PanelizerEntityInterface.php b/src/Plugin/PanelizerEntityInterface.php
index 189e2db..60f9eb0 100644
--- a/src/Plugin/PanelizerEntityInterface.php
+++ b/src/Plugin/PanelizerEntityInterface.php
@@ -13,11 +13,8 @@ use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 interface PanelizerEntityInterface extends PluginInspectionInterface {
 
   // @todo: Do we need get the form alterations in the right place or is this standardized in D8?
-
   // @todo: Do we need something to tell page_manager where the entity view page is?
-
   // @todo: In D7 there's lots more stuff on the plugin, like permissions, admin routes, etc..
-
   /**
    * Creates a default Panels display from the core Entity display.
    *
@@ -25,7 +22,7 @@ interface PanelizerEntityInterface extends PluginInspectionInterface {
    * Panels display match the existing core settings, so that ideally the user
    * doesn't notice any change upon Panelizing an entity's view mode.
    *
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The entity view display holding the display options configured for the
    *   entity components.
    * @param string $bundle
@@ -33,7 +30,7 @@ interface PanelizerEntityInterface extends PluginInspectionInterface {
    * @param string $view_mode
    *   The view mode to panelize.
    *
-   * @return \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant
+   * @return PanelsDisplayVariant
    */
   public function getDefaultDisplay(EntityViewDisplayInterface $display, $bundle, $view_mode);
 
@@ -44,9 +41,9 @@ interface PanelizerEntityInterface extends PluginInspectionInterface {
    *
    * @param array $build
    *   The render array that is being created.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to be prepared.
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    *   The Panels display used to render this entity.
    * @param string $view_mode
    *   The view mode that should be used to prepare the entity.
@@ -58,9 +55,9 @@ interface PanelizerEntityInterface extends PluginInspectionInterface {
    *
    * @param array $variables
    *   The variables to pass to the view mode template.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
-   * @param \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $panels_display
+   * @param PanelsDisplayVariant $panels_display
    *   The Panels display used to render this entity.
    * @param string $view_mode
    *   The view mode.
diff --git a/src/Plugin/PanelizerEntityManager.php b/src/Plugin/PanelizerEntityManager.php
index 7abd8a8..1b10b8f 100644
--- a/src/Plugin/PanelizerEntityManager.php
+++ b/src/Plugin/PanelizerEntityManager.php
@@ -17,9 +17,9 @@ class PanelizerEntityManager extends DefaultPluginManager implements PanelizerEn
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/PanelsStorage/PanelizerDefaultPanelsStorage.php b/src/Plugin/PanelsStorage/PanelizerDefaultPanelsStorage.php
index 9528456..89f0333 100644
--- a/src/Plugin/PanelsStorage/PanelizerDefaultPanelsStorage.php
+++ b/src/Plugin/PanelsStorage/PanelizerDefaultPanelsStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer\Plugin\PanelsStorage;
 
+use Drupal\Core\Plugin\Context\Context;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -23,12 +24,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class PanelizerDefaultPanelsStorage extends PanelsStorageBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\panelizer\PanelizerInterface
+   * @var PanelizerInterface
    */
   protected $panelizer;
 
@@ -41,9 +42,9 @@ class PanelizerDefaultPanelsStorage extends PanelsStorageBase implements Contain
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\panelizer\PanelizerInterface $panelizer
+   * @param PanelizerInterface $panelizer
    *   The Panelizer service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, PanelizerInterface $panelizer) {
@@ -84,7 +85,7 @@ class PanelizerDefaultPanelsStorage extends PanelsStorageBase implements Contain
    *   - Default name: string
    *   - Entity: \Drupal\Core\Entity\EntityInterface|NULL
    *
-   * @throws \Drupal\panelizer\Exception\PanelizerException
+   * @throws PanelizerException
    */
   protected function parseId($id) {
     list ($entity_type_id, $part_two, $view_mode, $name) = explode(':', $id);
@@ -114,10 +115,10 @@ class PanelizerDefaultPanelsStorage extends PanelsStorageBase implements Contain
    *
    * @param string $entity_type_id
    *   The entity type id.
-   * @param \Drupal\Core\Entity\EntityInterface|NULL $entity
+   * @param EntityInterface|NULL $entity
    *   The entity.
    *
-   * @return \Drupal\Core\Plugin\Context\Context[]
+   * @return Context[]
    *   The available contexts.
    */
   protected function getEntityContext($entity_type_id, EntityInterface $entity = NULL) {
diff --git a/src/Plugin/PanelsStorage/PanelizerFieldPanelsStorage.php b/src/Plugin/PanelsStorage/PanelizerFieldPanelsStorage.php
index 15d1135..a5e341a 100644
--- a/src/Plugin/PanelsStorage/PanelizerFieldPanelsStorage.php
+++ b/src/Plugin/PanelsStorage/PanelizerFieldPanelsStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer\Plugin\PanelsStorage;
 
+use Drupal\Core\Plugin\Context\Context;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -24,12 +25,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class PanelizerFieldPanelsStorage extends PanelsStorageBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\panelizer\PanelizerInterface
+   * @var PanelizerInterface
    */
   protected $panelizer;
 
@@ -42,9 +43,9 @@ class PanelizerFieldPanelsStorage extends PanelsStorageBase implements Container
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\panelizer\PanelizerInterface $panelizer
+   * @param PanelizerInterface $panelizer
    *   The Panelizer service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, PanelizerInterface $panelizer) {
@@ -72,7 +73,7 @@ class PanelizerFieldPanelsStorage extends PanelsStorageBase implements Container
    * @param $id
    *   The storage service id.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|NULL
+   * @return EntityInterface|NULL
    */
   protected function loadEntity($id) {
     list ($entity_type, $id, , $revision_id) = array_pad(explode(':', $id), 4, NULL);
@@ -95,10 +96,10 @@ class PanelizerFieldPanelsStorage extends PanelsStorageBase implements Container
    *
    * @param string $entity_type_id
    *   The entity type id.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\Core\Plugin\Context\Context
+   * @return Context
    *   The context.
    */
   protected function getEntityContext($entity_type_id, EntityInterface $entity) {
diff --git a/src/Wizard/PanelizerAddWizard.php b/src/Wizard/PanelizerAddWizard.php
index 85513e8..c8a2e15 100644
--- a/src/Wizard/PanelizerAddWizard.php
+++ b/src/Wizard/PanelizerAddWizard.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer\Wizard;
 
+use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\panelizer\Form\PanelizerWizardContentForm;
 use Drupal\panelizer\Form\PanelizerWizardContextForm;
@@ -52,7 +53,7 @@ class PanelizerAddWizard extends PanelizerWizardBase {
       }
       if ($form_state->hasValue('id')) {
         $cached_values['id'] = $form_state->getValue('id');
-        /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $plugin */
+        /** @var PanelsDisplayVariant $plugin */
         $plugin = $cached_values['plugin'];
         $plugin->setStorage($plugin->getStorageType(), $cached_values['id']);
       }
diff --git a/src/Wizard/PanelizerEditWizard.php b/src/Wizard/PanelizerEditWizard.php
index fd68561..2c3efd4 100644
--- a/src/Wizard/PanelizerEditWizard.php
+++ b/src/Wizard/PanelizerEditWizard.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\panelizer\Wizard;
 
+use Drupal\panelizer\Panelizer;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Form\FormInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -27,7 +28,7 @@ class PanelizerEditWizard extends PanelizerWizardBase {
     list($entity_type, $bundle, $view_mode, $display_id) = explode('__', $this->getMachineName());
     $panelizer = \Drupal::service('panelizer');
     // Load the panels display variant.
-    /** @var \Drupal\panelizer\Panelizer $panelizer */
+    /** @var Panelizer $panelizer */
     // @todo this $display_id looks all wrong to me since it's the name and view_mode.
     $variant_plugin = $panelizer->getDefaultPanelsDisplay($display_id, $entity_type, $bundle, $view_mode);
     $cached_values['plugin'] = $variant_plugin;
@@ -200,7 +201,7 @@ class PanelizerEditWizard extends PanelizerWizardBase {
    * Clears the temporary store.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function clearTempstore(array &$form, FormStateInterface $form_state) {
     $this->getTempstore()->delete($this->getMachineName());
diff --git a/src/Wizard/PanelizerWizardBase.php b/src/Wizard/PanelizerWizardBase.php
index ac446b4..0275239 100644
--- a/src/Wizard/PanelizerWizardBase.php
+++ b/src/Wizard/PanelizerWizardBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\panelizer\Wizard;
 
+use Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
+use Drupal\panelizer\Panelizer;
+use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
+use Drupal\ctools\ContextMapperInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\ctools\Wizard\FormWizardBase;
 use Drupal\panelizer\Access\PanelizerUIAccess;
@@ -114,7 +118,7 @@ abstract class PanelizerWizardBase extends FormWizardBase {
     $cached_values = parent::initValues();
     $cached_values['access'] = new PanelizerUIAccess();
     if (empty($cached_values['plugin'])) {
-      /** @var \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant $plugin */
+      /** @var PanelsDisplayVariant $plugin */
       $plugin = \Drupal::service('plugin.manager.display_variant')->createInstance('panels_variant');
       $plugin->setPattern('panelizer');
       $plugin->setBuilder('ipe');
@@ -136,9 +140,9 @@ abstract class PanelizerWizardBase extends FormWizardBase {
 
     // Save the panels display mode and its custom settings as third party
     // data of the display mode for this entity+bundle+display.
-    /** @var \Drupal\panelizer\Panelizer $panelizer */
+    /** @var Panelizer $panelizer */
     $panelizer = \Drupal::service('panelizer');
-    /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $invalidator */
+    /** @var CacheTagsInvalidatorInterface $invalidator */
     $invalidator = \Drupal::service('cache_tags.invalidator');
     list($entity_type, $bundle, $view_mode, $display_id) = explode('__', $cached_values['id']);
     $panelizer->setDefaultPanelsDisplay($display_id, $entity_type, $bundle, $view_mode, $cached_values['plugin']);
@@ -152,7 +156,7 @@ abstract class PanelizerWizardBase extends FormWizardBase {
   /**
    * Wraps the context mapper.
    *
-   * @return \Drupal\ctools\ContextMapperInterface
+   * @return ContextMapperInterface
    */
   protected function getContextMapper() {
     return \Drupal::service('ctools.context_mapper');
diff --git a/tests/src/Functional/PanelizerAddDefaultLinkTest.php b/tests/src/Functional/PanelizerAddDefaultLinkTest.php
index fc83ce5..6e65921 100644
--- a/tests/src/Functional/PanelizerAddDefaultLinkTest.php
+++ b/tests/src/Functional/PanelizerAddDefaultLinkTest.php
@@ -60,13 +60,13 @@ class PanelizerAddDefaultLinkTest extends BrowserTestBase {
     $this->panelize($content_type);
 
     // Confirm that the content type is now panelized.
-    $this->assertLink('Add a new Panelizer default display');
+    $this->assertSession()->linkExists('Add a new Panelizer default display');
 
     // Un-panelize the content type.
     $this->unpanelize($content_type);
 
     // Confirm that the content type is no longer panelized.
-    $this->assertNoLink('Add a new Panelizer default display');
+    $this->assertSession()->linkNotExists('Add a new Panelizer default display');
   }
 
 }
diff --git a/tests/src/Functional/PanelizerDefaultsTest.php b/tests/src/Functional/PanelizerDefaultsTest.php
index 79e7fc0..a38657d 100644
--- a/tests/src/Functional/PanelizerDefaultsTest.php
+++ b/tests/src/Functional/PanelizerDefaultsTest.php
@@ -44,7 +44,7 @@ class PanelizerDefaultsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Place the local actions block in the theme so that we can assert the
@@ -70,18 +70,18 @@ class PanelizerDefaultsTest extends BrowserTestBase {
       // to (the panelizer[allow] checkbox in the view display configuration). By
       // default, they aren't.
       $this->drupalGet('node/add/page');
-      $this->assertResponse(200);
-      $this->assertNoFieldByName("panelizer['{$i}][default]");
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->fieldValueNotEquals("panelizer['{$i}][default]", '');
       // Allow user to select panelized modes in UI.
       $this->panelize('page', $view_mode_name, [
         'panelizer[custom]' => TRUE,
         'panelizer[allow]' => TRUE,
       ]);
       $this->drupalGet('node/add/page');
-      $this->assertResponse(200);
-      $this->assertFieldByName("panelizer[{$i}][default]");
-      $this->assertOption("edit-panelizer-{$i}-default", 'default');
-      $this->assertOption("edit-panelizer-{$i}-default", $panelizer_id);
+      $this->assertSession()->statusCodeEquals(200);
+      $this->assertSession()->fieldExists("panelizer[{$i}][default]");
+      $this->assertSession()->optionExists("edit-panelizer-{$i}-default", 'default');
+      $this->assertSession()->optionExists("edit-panelizer-{$i}-default", $panelizer_id);
       // Clean up.
       $this->deletePanelizerDefault('page', $view_mode_name, $panelizer_id);
       $this->assertDefaultNotExists('page', $view_mode_name, $panelizer_id);
diff --git a/tests/src/Functional/PanelizerIpeTest.php b/tests/src/Functional/PanelizerIpeTest.php
index 1a82981..ccabe22 100644
--- a/tests/src/Functional/PanelizerIpeTest.php
+++ b/tests/src/Functional/PanelizerIpeTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panelizer\Functional;
 
+use Drupal\user\Entity\User;
 use Drupal\Component\Serialization\Json;
 use Drupal\Tests\BrowserTestBase;
 
@@ -44,7 +45,7 @@ class PanelizerIpeTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Reload all caches.
@@ -64,7 +65,7 @@ class PanelizerIpeTest extends BrowserTestBase {
    * @param array $perms
    *   Any additiona permissions that need to be added.
    *
-   * @return Drupal\user\Entity\User
+   * @return User
    *   The user account that was created.
    */
   protected function createAdminUser(array $perms = array()) {
@@ -104,12 +105,12 @@ class PanelizerIpeTest extends BrowserTestBase {
 
     // Load the test node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Confirm the JSON Drupal settings are appropriate.
     $drupalSettings = NULL;
     $matches = [];
-    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getRawContent(), $matches)) {
+    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getSession()->getPage()->getContent(), $matches)) {
       $drupalSettings = Json::decode($matches[1]);
       $this->verbose('<pre>' . print_r($drupalSettings, TRUE) . '</pre>');
     }
@@ -124,9 +125,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ -151,12 +152,12 @@ class PanelizerIpeTest extends BrowserTestBase {
 
     // Load the test node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Confirm the appropriate DOM structures are present for the IPE.
     $drupalSettings = NULL;
     $matches = [];
-    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getRawContent(), $matches)) {
+    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getSession()->getPage()->getContent(), $matches)) {
       $drupalSettings = Json::decode($matches[1]);
       $this->verbose('<pre>' . print_r($drupalSettings, TRUE) . '</pre>');
     }
@@ -171,9 +172,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ -223,9 +224,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ -278,9 +279,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ -334,9 +335,9 @@ class PanelizerIpeTest extends BrowserTestBase {
       $this->assertTrue(isset($drupalSettings['panelizer']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']));
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_type_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_type_id'], 'node');
       $this->assertTrue(isset($drupalSettings['panelizer']['entity']['entity_id']));
-      $this->assertEqual($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
+      $this->assertEquals($drupalSettings['panelizer']['entity']['entity_id'], $node->id());
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['revert']));
       $this->assertTrue(isset($drupalSettings['panelizer']['user_permission']['save_default']));
@@ -368,12 +369,12 @@ class PanelizerIpeTest extends BrowserTestBase {
 
     // Load the test node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Extract the drupalSettings structure and return it.
     $drupalSettings = NULL;
     $matches = [];
-    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getRawContent(), $matches)) {
+    if (preg_match('@<script type="application/json" data-drupal-selector="drupal-settings-json">([^<]*)</script>@', $this->getSession()->getPage()->getContent(), $matches)) {
       $drupalSettings = Json::decode($matches[1]);
       $this->verbose('<pre>' . print_r($drupalSettings, TRUE) . '</pre>');
     }
diff --git a/tests/src/Functional/PanelizerNodeFunctionalTest.php b/tests/src/Functional/PanelizerNodeFunctionalTest.php
index 15fef8f..7da6467 100644
--- a/tests/src/Functional/PanelizerNodeFunctionalTest.php
+++ b/tests/src/Functional/PanelizerNodeFunctionalTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panelizer\Functional;
 
+use Drupal\panelizer\PanelizerInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -44,7 +45,7 @@ class PanelizerNodeFunctionalTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->setupContentType();
@@ -58,13 +59,21 @@ class PanelizerNodeFunctionalTest extends BrowserTestBase {
   public function testWizardUI() {
     // Enter the wizard.
     $this->drupalGet('admin/structure/panelizer/edit/node__page__default__default');
-    $this->assertResponse(200);
-    $this->assertText('Wizard Information');
-    $this->assertField('edit-label');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Wizard Information');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('edit-label');
 
     // Contexts step.
     $this->clickLink('Contexts');
-    $this->assertText('@panelizer.entity_context:entity', 'The current entity context is present.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('@panelizer.entity_context:entity');
 
     // Layout selection step.
     $this->clickLink('Layout');
@@ -77,65 +86,76 @@ class PanelizerNodeFunctionalTest extends BrowserTestBase {
     $edit = [
       'region' => 'content',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Add block'));
-    $this->assertResponse(200);
+    $this->submitForm($edit, t('Add block'));
+    $this->assertSession()->statusCodeEquals(200);
 
     // Finish the wizard.
-    $this->drupalPostForm(NULL, [], t('Update and save'));
-    $this->assertResponse(200);
+    $this->submitForm([], t('Update and save'));
+    $this->assertSession()->statusCodeEquals(200);
     // Confirm this returned to the main wizard page.
-    $this->assertText('Wizard Information');
-    $this->assertField('edit-label');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Wizard Information');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('edit-label');
 
     // Return to the Manage Display page, which is where the Cancel button
     // currently sends you. That's a UX WTF and should be fixed...
-    $this->drupalPostForm(NULL, [], t('Cancel'));
-    $this->assertResponse(200);
+    $this->submitForm([], t('Cancel'));
+    $this->assertSession()->statusCodeEquals(200);
 
     // Confirm the page is back to the content type settings page.
-    $this->assertFieldChecked('edit-panelizer-custom');
+    $this->assertSession()->checkboxChecked('edit-panelizer-custom');
 
     // Now change and save the general setting.
     $edit = [
       'panelizer[custom]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertResponse(200);
-    $this->assertNoFieldChecked('edit-panelizer-custom');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->checkboxNotChecked('edit-panelizer-custom');
 
     // Add another block at the Content step and then save changes.
     $this->drupalGet('admin/structure/panelizer/edit/node__page__default__default/content');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Add new block');
     $this->clickLink('Body');
     $edit = [
       'region' => 'content',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Add block'));
-    $this->assertResponse(200);
-    $this->assertText('entity_field:node:body', 'The body block was added successfully.');
-    $this->drupalPostForm(NULL, [], t('Save'));
-    $this->assertResponse(200);
+    $this->submitForm($edit, t('Add block'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('entity_field:node:body');
+    $this->submitForm([], t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Content');
-    $this->assertText('entity_field:node:body', 'The body block was saved successfully.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('entity_field:node:body');
 
     // Check that the Manage Display tab changed now that Panelizer is set up.
     // Also, the field display table should be hidden.
-    $this->assertNoRaw('<div id="field-display-overview-wrapper">');
+    $this->assertSession()->responseNotContains('<div id="field-display-overview-wrapper">');
 
     // Disable Panelizer for the default display mode. This should bring back
     // the field overview table at Manage Display and not display the link to
     // edit the default Panelizer layout.
     $this->unpanelize('page');
-    $this->assertNoLinkByHref('admin/structure/panelizer/edit/node__page__default');
-    $this->assertRaw('<div id="field-display-overview-wrapper">');
+    $this->assertSession()->linkByHrefNotExists('admin/structure/panelizer/edit/node__page__default');
+    $this->assertSession()->responseContains('<div id="field-display-overview-wrapper">');
   }
 
   /**
    * Tests rendering a node with Panelizer default.
    */
   public function testPanelizerDefault() {
-    /** @var \Drupal\panelizer\PanelizerInterface $panelizer */
+    /** @var PanelizerInterface $panelizer */
     $panelizer = $this->container->get('panelizer');
     $displays = $panelizer->getDefaultPanelsDisplays('node', 'page', 'default');
     $display = $displays['default'];
@@ -150,19 +170,25 @@ class PanelizerNodeFunctionalTest extends BrowserTestBase {
     // Create a node, and check that the IPE is visible on it.
     $node = $this->drupalCreateNode(['type' => 'page']);
     $out = $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->verbose($out);
     $elements = $this->xpath('//*[@id="panels-ipe-content"]');
     if (is_array($elements)) {
-      $this->assertIdentical(count($elements), 1);
+      $this->assertSame(count($elements), 1);
     }
     else {
       $this->fail('Could not parse page content.');
     }
 
     // Check that the block we added is visible.
-    $this->assertText('Panelizer test');
-    $this->assertText('Abracadabra');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Panelizer test');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Abracadabra');
   }
 
 }
diff --git a/tests/src/Functional/PanelizerNodeTranslationsTest.php b/tests/src/Functional/PanelizerNodeTranslationsTest.php
index 714f92e..a167d30 100644
--- a/tests/src/Functional/PanelizerNodeTranslationsTest.php
+++ b/tests/src/Functional/PanelizerNodeTranslationsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panelizer\Functional;
 
+use Drupal\panelizer\PanelizerInterface;
 use Drupal\Tests\content_translation\Functional\ContentTranslationTestBase;
 
 /**
@@ -44,7 +45,7 @@ class PanelizerNodeTranslationsTest extends ContentTranslationTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->loginUser1();
@@ -72,13 +73,21 @@ class PanelizerNodeTranslationsTest extends ContentTranslationTestBase {
 
     // Enter the wizard.
     $this->drupalGet("admin/structure/panelizer/edit/{$this->entityTypeId}__{$this->bundle}__default__default");
-    $this->assertResponse(200);
-    $this->assertText('Wizard Information');
-    $this->assertField('edit-label');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Wizard Information');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('edit-label');
 
     // Contexts step.
     $this->clickLink('Contexts');
-    $this->assertText('@panelizer.entity_context:entity', 'The current entity context is present.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('@panelizer.entity_context:entity');
 
     // Layout selection step.
     $this->clickLink('Layout');
@@ -92,58 +101,69 @@ class PanelizerNodeTranslationsTest extends ContentTranslationTestBase {
     $edit = [
       'region' => 'content',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Add block'));
-    $this->assertResponse(200);
+    $this->submitForm($edit, t('Add block'));
+    $this->assertSession()->statusCodeEquals(200);
 
     // Finish the wizard.
-    $this->drupalPostForm(NULL, [], t('Update and save'));
-    $this->assertResponse(200);
+    $this->submitForm([], t('Update and save'));
+    $this->assertSession()->statusCodeEquals(200);
     // Confirm this returned to the main wizard page.
-    $this->assertText('Wizard Information');
-    $this->assertField('edit-label');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Wizard Information');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Change assertion to buttonExists() if checking for a button.
+    $this->assertSession()->fieldExists('edit-label');
 
     // Return to the Manage Display page, which is where the Cancel button
     // currently sends you. That's a UX WTF and should be fixed...
-    $this->drupalPostForm(NULL, [], t('Cancel'));
-    $this->assertResponse(200);
+    $this->submitForm([], t('Cancel'));
+    $this->assertSession()->statusCodeEquals(200);
 
     // Confirm the page is back to the content type settings page.
-    $this->assertFieldChecked('edit-panelizer-custom');
+    $this->assertSession()->checkboxChecked('edit-panelizer-custom');
 
     // Now change and save the general setting.
     $edit = [
       'panelizer[custom]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertResponse(200);
-    $this->assertNoFieldChecked('edit-panelizer-custom');
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->checkboxNotChecked('edit-panelizer-custom');
 
     // Add another block at the Content step and then save changes.
     $this->drupalGet("admin/structure/panelizer/edit/{$this->entityTypeId}__{$this->bundle}__default__default/content");
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Add new block');
     $this->clickLink('Body');
     $edit = [
       'region' => 'content',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Add block'));
-    $this->assertResponse(200);
-    $this->assertText("entity_field:{$this->entityTypeId}:body", 'The body block was added successfully.');
-    $this->drupalPostForm(NULL, [], t('Save'));
-    $this->assertResponse(200);
+    $this->submitForm($edit, t('Add block'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("entity_field:{$this->entityTypeId}:body");
+    $this->submitForm([], t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
     $this->clickLink('Content', 1);
-    $this->assertText("entity_field:{$this->entityTypeId}:body", 'The body block was saved successfully.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("entity_field:{$this->entityTypeId}:body");
 
     // Check that the Manage Display tab changed now that Panelizer is set up.
     // Also, the field display table should be hidden.
-    $this->assertNoRaw('<div id="field-display-overview-wrapper">');
+    $this->assertSession()->responseNotContains('<div id="field-display-overview-wrapper">');
 
     // Disable Panelizer for the default display mode. This should bring back
     // the field overview table at Manage Display and not display the link to
     // edit the default Panelizer layout.
     $this->unpanelize($this->bundle);
-    $this->assertNoLinkByHref("admin/structure/panelizer/edit/{$this->entityTypeId}__{$this->bundle}__default");
-    $this->assertRaw('<div id="field-display-overview-wrapper">');
+    $this->assertSession()->linkByHrefNotExists("admin/structure/panelizer/edit/{$this->entityTypeId}__{$this->bundle}__default");
+    $this->assertSession()->responseContains('<div id="field-display-overview-wrapper">');
   }
 
   /**
@@ -151,7 +171,7 @@ class PanelizerNodeTranslationsTest extends ContentTranslationTestBase {
    */
   public function testPanelizerDefault() {
     $this->panelize($this->bundle, NULL, ['panelizer[custom]' => TRUE]);
-    /** @var \Drupal\panelizer\PanelizerInterface $panelizer */
+    /** @var PanelizerInterface $panelizer */
     $panelizer = $this->container->get('panelizer');
     $displays = $panelizer->getDefaultPanelsDisplays($this->entityTypeId, $this->bundle, 'default');
     $display = $displays['default'];
@@ -173,25 +193,40 @@ class PanelizerNodeTranslationsTest extends ContentTranslationTestBase {
       ],
     ]);
     $out = $this->drupalGet('node/' . $node->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->verbose($out);
     $elements = $this->xpath('//*[@id="panels-ipe-content"]');
     if (is_array($elements)) {
-      $this->assertIdentical(count($elements), 1);
+      $this->assertSame(count($elements), 1);
     }
     else {
       $this->fail('Could not parse page content.');
     }
 
     // Check that the block we added is visible.
-    $this->assertText('Panelizer test');
-    $this->assertText('Abracadabra');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Panelizer test');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Abracadabra');
 
     // Load the translation page.
     $this->clickLink('Translate');
-    $this->assertText('English (Original language)');
-    $this->assertText('Published');
-    $this->assertText('Not translated');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('English (Original language)');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Published');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Not translated');
   }
 
   // @todo Confirm that the different languages of a translated node are loaded properly when using a default display.
diff --git a/tests/src/Functional/PanelizerTermFunctionalTest.php b/tests/src/Functional/PanelizerTermFunctionalTest.php
index c8ccd11..14c8117 100644
--- a/tests/src/Functional/PanelizerTermFunctionalTest.php
+++ b/tests/src/Functional/PanelizerTermFunctionalTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\panelizer\Functional;
 
+use Drupal\panelizer\PanelizerInterface;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\Tests\BrowserTestBase;
@@ -44,7 +45,7 @@ class PanelizerTermFunctionalTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     Vocabulary::create([
@@ -67,8 +68,8 @@ class PanelizerTermFunctionalTest extends BrowserTestBase {
       'panelizer[enable]' => TRUE,
       'panelizer[custom]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertResponse(200);
+    $this->submitForm($edit, t('Save'));
+    $this->assertSession()->statusCodeEquals(200);
     $this->rebuildAll();
   }
 
@@ -76,7 +77,7 @@ class PanelizerTermFunctionalTest extends BrowserTestBase {
    * Tests rendering a taxonomy term with Panelizer default.
    */
   public function testPanelizerDefault() {
-    /** @var \Drupal\panelizer\PanelizerInterface $panelizer */
+    /** @var PanelizerInterface $panelizer */
     $panelizer = \Drupal::service('panelizer');
     $displays = $panelizer->getDefaultPanelsDisplays('taxonomy_term', 'tags', 'default');
     $display = $displays['default'];
@@ -92,19 +93,25 @@ class PanelizerTermFunctionalTest extends BrowserTestBase {
     $term = $this->createTerm();
 
     $out = $this->drupalGet('taxonomy/term/' . $term->id());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->verbose($out);
     $elements = $this->xpath('//*[@id="panels-ipe-content"]');
     if (is_array($elements)) {
-      $this->assertIdentical(count($elements), 1);
+      $this->assertSame(count($elements), 1);
     }
     else {
       $this->fail('Could not parse page content.');
     }
 
     // Check that the block we added is visible.
-    $this->assertText('Panelizer test');
-    $this->assertText('Abracadabra');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Panelizer test');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Abracadabra');
   }
 
   /**
