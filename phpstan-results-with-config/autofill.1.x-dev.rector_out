modules/contrib/autofill/autofill.module
modules/contrib/autofill/tests/src/FunctionalJavascript/AutofillJavascriptTest.php

2 files with changes
====================

1) modules/contrib/autofill/tests/src/FunctionalJavascript/AutofillJavascriptTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\autofill\FunctionalJavascript;

+use Drupal\node\NodeTypeInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * The content type.
    *
-   * @var \Drupal\node\NodeTypeInterface
+   * @var NodeTypeInterface
    */
   protected $contentType;

@@ @@
   /**
    * Creates the necessary fields.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setupFields(): void {
     // Set up two source fields and one target.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/autofill/autofill.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field\FieldConfigInterface;
 /**
  * @file
  * Contains autofill.module.
@@ @@
  * Implements hook_field_widget_settings_summary_alter().
  */
 function autofill_field_widget_settings_summary_alter(array &$summary, array $context): void {
-  /** @var \Drupal\Core\Field\WidgetInterface $widget */
+  /** @var WidgetInterface $widget */
   $widget = $context['widget'];
   if ($widget->getThirdPartySetting('autofill', 'enabled') && $source_field = $widget->getThirdPartySetting('autofill', 'source_field')) {
     $summary[] = t('Autofill from: @source_field', ['@source_field' => $source_field]);
@@ @@

   $form_fields = array_intersect_key($available_entity_fields, array_flip($form['#fields']));

-  /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field */
+  /** @var FieldStorageDefinitionInterface $field */
   foreach ($form_fields as $field) {
     $label = $field->getLabel();

@@ @@
         'entity_type' => $entity_type,
         'bundle' => $bundle,
       ]);
-    /** @var \Drupal\field\FieldConfigInterface $field_config */
+    /** @var FieldConfigInterface $field_config */
     if ($field_config = array_pop($field_configs)) {
       $label = $field_config->getLabel();
     }
@@ @@
  * Implements hook_field_widget_single_element_form_alter().
  */
 function autofill_field_widget_single_element_form_alter(array &$element, FormStateInterface $form_state, array $context): void {
-  /** @var \Drupal\Core\Field\WidgetInterface $widget */
+  /** @var WidgetInterface $widget */
   $widget = $context['widget'];
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+  /** @var FieldDefinitionInterface $field_definition */
   $field_definition = $context['items']->getFieldDefinition();
   if ($widget->getThirdPartySetting('autofill', 'enabled') && $source_field = $widget->getThirdPartySetting('autofill', 'source_field')) {
     $element['#attached']['library'][] = 'autofill/autofill';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 2 files have been changed by Rector                                       

