modules/contrib/search_api_solr_multilingual/search_api_solr_multilingual.drush.inc
modules/contrib/search_api_solr_multilingual/search_api_solr_multilingual.install
modules/contrib/search_api_solr_multilingual/search_api_solr_multilingual.module
modules/contrib/search_api_solr_multilingual/search_api_solr_multilingual.post_update.php
modules/contrib/search_api_solr_multilingual/src/Access/LocalActionAccessCheck.php
modules/contrib/search_api_solr_multilingual/src/Controller/SolrFieldTypeController.php
modules/contrib/search_api_solr_multilingual/src/Controller/SolrFieldTypeListBuilder.php
modules/contrib/search_api_solr_multilingual/src/Entity/SolrFieldType.php
modules/contrib/search_api_solr_multilingual/src/EventSubscriber/ConfigSubscriber.php
modules/contrib/search_api_solr_multilingual/src/Form/SolrFieldTypeDeleteForm.php
modules/contrib/search_api_solr_multilingual/src/Form/SolrFieldTypeExportForm.php
modules/contrib/search_api_solr_multilingual/src/Form/SolrFieldTypeForm.php
modules/contrib/search_api_solr_multilingual/src/Plugin/search_api/backend/AbstractSearchApiSolrMultilingualBackend.php
modules/contrib/search_api_solr_multilingual/src/Plugin/search_api/backend/SearchApiSolrMultilingualBackend.php
modules/contrib/search_api_solr_multilingual/src/Plugin/search_api/backend/SearchApiSolrMultilingualManagedSchemaBackend.php
modules/contrib/search_api_solr_multilingual/src/SearchApiSolrMultilingualException.php
modules/contrib/search_api_solr_multilingual/src/SolrFieldTypeInterface.php
modules/contrib/search_api_solr_multilingual/src/SolrMultilingualBackendInterface.php
modules/contrib/search_api_solr_multilingual/src/Utility/Utility.php
modules/contrib/search_api_solr_multilingual/tests/src/Functional/IntegrationTest.php
modules/contrib/search_api_solr_multilingual/tests/src/Functional/ViewsTest.php
modules/contrib/search_api_solr_multilingual/tests/src/Kernel/Processor/AddHierarchyTest.php
modules/contrib/search_api_solr_multilingual/tests/src/Kernel/Processor/ContentAccessTest.php
modules/contrib/search_api_solr_multilingual/tests/src/Kernel/SearchApiSolrMultilingualLocationTest.php
modules/contrib/search_api_solr_multilingual/tests/src/Kernel/SearchApiSolrMultilingualTest.php
modules/contrib/search_api_solr_multilingual/tests/src/Kernel/SolrFieldTypeTest.php
modules/contrib/search_api_solr_multilingual/tests/src/Kernel/UtilitiesTest.php

19 files with changes
=====================

1) modules/contrib/search_api_solr_multilingual/tests/src/Kernel/UtilitiesTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/search_api_solr_multilingual/tests/src/Kernel/SolrFieldTypeTest.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

-    $this->configNames = array_keys(\Drupal::service('file_system')->scanDirectory(drupal_get_path('module', 'search_api_solr_multilingual') . '/config', '/search_api_solr_multilingual.solr_field_type.text_/', ['key' => 'name']));
+    $this->configNames = array_keys(\Drupal::service('file_system')->scanDirectory(\Drupal::service('extension.list.module')->getPath('search_api_solr_multilingual') . '/config', '/search_api_solr_multilingual.solr_field_type.text_/', ['key' => 'name']));

     foreach ($this->configNames as $config_name) {
       preg_match('/search_api_solr_multilingual.solr_field_type.text_(.*)_\d+_\d+_\d+/', $config_name, $matches);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/search_api_solr_multilingual/tests/src/Kernel/SearchApiSolrMultilingualTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\search_api_solr_multilingual\Kernel;

+use Psr\Log\LoggerInterface;
+use Drupal\search_api_solr\SolrBackendInterface;
+use Drupal\search_api_solr_multilingual\Controller\SolrFieldTypeListBuilder;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\search_api\Entity\Server;
 use Drupal\search_api\Utility\Utility;
@@ @@
   /**
    * The mocked logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     BackendTestBase::setUp();

     $this->installEntitySchema('user');
@@ @@

   /**
    * {@inheritdoc}
+   * @doesNotPerformAssertions
    */
   public function testAutocomplete() {
     // @todo
@@ @@
    * Tests the conversion of language aware queries into Solr queries.
    */
   public function testQueryConditionsAndLanguageFilter() {
-    /** @var \Drupal\search_api_solr\SolrBackendInterface $backend */
+    /** @var SolrBackendInterface $backend */
     $backend = Server::load($this->serverId)->getBackend();
     list($fields, $mapping) = $this->getFieldsAndMapping($backend);
     $options = [];
@@ @@

   /**
    * Tests classic multilingual schema.
+   * @doesNotPerformAssertions
    */
   public function testClassicMultilingualSchema() {
-    /** @var Drupal\search_api_solr_multilingual\Controller\SolrFieldTypeListBuilder $list_builder */
+    /** @var SolrFieldTypeListBuilder $list_builder */
     $list_builder = \Drupal::entityTypeManager()
       ->getListBuilder('solr_field_type');
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/search_api_solr_multilingual/tests/src/Kernel/SearchApiSolrMultilingualLocationTest.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     BackendTestBase::setUp();

     $this->installConfig([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/search_api_solr_multilingual/tests/src/Kernel/Processor/ContentAccessTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp($processor = NULL) {
+  public function setUp($processor = NULL): void {
     parent::setUp();
     $this->enableSolrServer('search_api_solr_multilingual_test', '/config/install/search_api.server.solr_multilingual_search_server.yml');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/search_api_solr_multilingual/tests/src/Kernel/Processor/AddHierarchyTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp($processor = NULL) {
+  public function setUp($processor = NULL): void {
     parent::setUp();
     $this->enableSolrServer('search_api_solr_multilingual_test', '/config/install/search_api.server.solr_multilingual_search_server.yml');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/search_api_solr_multilingual/tests/src/Functional/ViewsTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     // Skip parent::setUp().
     SearchApiBrowserTestBase::setUp();

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     $index = Index::load($this->indexId);
     $index->clear();
     sleep(2);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/search_api_solr_multilingual/tests/src/Functional/IntegrationTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
   }

   /**
    * {@inheritdoc}
+   * @doesNotPerformAssertions
    */
   public function testFramework() {
     parent::testFramework();
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/search_api_solr_multilingual/src/Plugin/search_api/backend/SearchApiSolrMultilingualManagedSchemaBackend.php:55

    ---------- begin diff ----------
@@ @@
     $field_type_name = 'm_' . Utility::decodeSolrName($solr_field_type_name) . '_5_2_0';

     // Get the field type definition from Drupal.
-    /** @var \Drupal\search_api_solr_multilingual\Entity\SolrFieldType $field_type_entity */
+    /** @var SolrFieldType $field_type_entity */
     $field_type_entity = SolrFieldType::load($field_type_name);
     if (!$field_type_entity) {
       throw new SearchApiSolrMultilingualException("There's no field type $field_type_name.");
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/search_api_solr_multilingual/src/Plugin/search_api/backend/AbstractSearchApiSolrMultilingualBackend.php:201

    ---------- begin diff ----------
@@ @@
         $solr_fields = implode(' ', $solarium_query->getMltFields());
       }
       else {
-        /** @var \Solarium\QueryType\Select\Query\Query $solarium_query */
+        /** @var Query $solarium_query */
         $edismax = $solarium_query->getEDisMax();
         $solr_fields = $edismax->getQueryFields();
         $hl = $solarium_query->getHighlighting();
@@ @@
    *   The lanaguage to get the mapping for.
    * @param array $solr_fields
    *   The mapping from Drupal to Solr field names.
-   * @param \Drupal\search_api\IndexInterface $index_fields
+   * @param IndexInterface $index_fields
    *   The fields handled by the curent index.
    *
    * @return array
@@ @@
    * @param \Solarium\QueryType\Update\Query\Document\Document[] $documents
    *   An array of \Solarium\QueryType\Update\Query\Document\Document objects
    *   ready to be indexed, generated from $items array.
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The search index for which items are being indexed.
    * @param array $items
    *   An array of items being indexed.
@@ @@
    * @return bool
    *   True if an element of the given kind and name exists, false otherwise.
    *
-   * @throws \Drupal\search_api_solr_multilingual\SearchApiSolrMultilingualException
+   * @throws SearchApiSolrMultilingualException
    */
   protected function isPartOfSchema($kind, $name) {
     static $previous_calls;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/search_api_solr_multilingual/src/Form/SolrFieldTypeExportForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_solr_multilingual\Form;

+use Drupal\search_api_solr_multilingual\Entity\SolrFieldType;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\search_api_solr_multilingual\Entity\SolrFieldType $solr_field_type */
+    /** @var SolrFieldType $solr_field_type */
     $solr_field_type = $this->entity;

     $form['id'] = array(
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\search_api_solr_multilingual\Entity\SolrFieldType $solr_field_type */
+    /** @var SolrFieldType $solr_field_type */
     $solr_field_type = $this->entity;

-    $form_state->setRedirectUrl($solr_field_type->urlInfo('collection'));
+    $form_state->setRedirectUrl($solr_field_type->toUrl('collection'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceUrlInfoRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/search_api_solr_multilingual/src/EventSubscriber/ConfigSubscriber.php:15

    ---------- begin diff ----------
@@ @@
 class ConfigSubscriber implements EventSubscriberInterface {

   /**
-   * @var \Drupal\Core\Config\ConfigInstallerInterface
+   * @var ConfigInstallerInterface
    */
   protected $configInstaller;

   /**
-   * @param \Drupal\Core\Config\ConfigInstallerInterface $configInstaller
+   * @param ConfigInstallerInterface $configInstaller
    *   The Config Installer.
    */
   public function __construct(ConfigInstallerInterface $configInstaller) {
@@ @@
   /**
    * Installs all available Solr Field Types for a new language.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    */
   public function onConfigSave(ConfigCrudEvent $event) {
     $saved_config = $event->getConfig();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/search_api_solr_multilingual/src/Controller/SolrFieldTypeListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_solr_multilingual\Controller;

+use Drupal\search_api_solr_multilingual\SolrMultilingualBackendInterface;
+use Drupal\search_api_solr_multilingual\SolrFieldTypeInterface;
+use Drupal\search_api_solr\SolrBackendInterface;
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\search_api\ServerInterface;
@@ @@
 class SolrFieldTypeListBuilder extends ConfigEntityListBuilder {

   /**
-   * @var \Drupal\search_api_solr_multilingual\SolrMultilingualBackendInterface
+   * @var SolrMultilingualBackendInterface
    */
   protected $backend;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $solr_field_type) {
-    /** @var \Drupal\search_api_solr_multilingual\SolrFieldTypeInterface $solr_field_type */
+    /** @var SolrFieldTypeInterface $solr_field_type */
     $domains = $solr_field_type->getDomains();
     if (empty($domains)) {
       $domains = ['generic'];
@@ @@
       $domain = 'generic';
       $warning = FALSE;
       try {
-        /** @var \Drupal\search_api_solr\SolrBackendInterface $backend */
+        /** @var SolrBackendInterface $backend */
         $backend = $this->getBackend();
         $domain = $backend->getDomain();
         $solr_version = $backend->getSolrConnector()->getSolrVersion();
@@ @@
         $warning = TRUE;
       }
       $entity_ids = $this->getEntityIds();
-      /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $storage */
+      /** @var ConfigEntityStorageInterface $storage */
       $storage = $this->getStorage();
       $entities = $storage->loadMultipleOverrideFree($entity_ids);

@@ @@
       // values for managed_schema, minimum_solr_version and domains.
       $selection = [];
       foreach ($entities as $key => $solr_field_type) {
-        /** @var \Drupal\search_api_solr_multilingual\SolrFieldTypeInterface $solr_field_type */
+        /** @var SolrFieldTypeInterface $solr_field_type */
         $version = $solr_field_type->getMinimumSolrVersion();
         $domains = $solr_field_type->getDomains();
         if (
@@ @@
    * @inheritdoc
    */
   public function getDefaultOperations(EntityInterface $solr_field_type) {
-    /** @var \Drupal\search_api_solr_multilingual\SolrFieldTypeInterface $solr_field_type */
+    /** @var SolrFieldTypeInterface $solr_field_type */
     $operations = parent::getDefaultOperations($solr_field_type);

     if ($solr_field_type->access('view') && $solr_field_type->hasLinkTemplate('export-form')) {
@@ @@
       $indentation .= '  ';
     }
     $xml = $this->getExtraFileHead($target_solr_version, 'types');
-    /** @var \Drupal\search_api_solr_multilingual\SolrFieldTypeInterface $solr_field_type */
+    /** @var SolrFieldTypeInterface $solr_field_type */
     foreach ($this->load() as $solr_field_type) {
       if (!$solr_field_type->isManagedSchema()) {
         $xml .= "\n$indentation" . str_replace("\n", "\n$indentation", $solr_field_type->getFieldTypeAsXml());
@@ @@
       $indentation .= '  ';
     }

-    /** @var \Drupal\search_api_solr_multilingual\SolrFieldTypeInterface $solr_field_type */
+    /** @var SolrFieldTypeInterface $solr_field_type */
     foreach ($this->load() as $solr_field_type) {
       if (!$solr_field_type->isManagedSchema()) {
         foreach ($solr_field_type->getDynamicFields() as $dynamic_field) {
@@ @@
   }

   /**
-   * @return \ZipStream\ZipStream
+   * @return ZipStream
    */
   public function getConfigZip() {
     $solr_field_types = $this->load();

-    /** @var \Drupal\search_api_solr\SolrBackendInterface $backend */
+    /** @var SolrBackendInterface $backend */
     $backend = $this->getBackend();
     $connector = $backend->getSolrConnector();
     $solr_branch = $connector->getSolrBranch($this->assumed_minimum_version);
-    $search_api_solr_conf_path = drupal_get_path('module', 'search_api_solr') . '/solr-conf/' . $solr_branch;
+    $search_api_solr_conf_path = \Drupal::service('extension.list.module')->getPath('search_api_solr') . '/solr-conf/' . $solr_branch;
     $solrcore_properties = parse_ini_file($search_api_solr_conf_path . '/solrcore.properties', FALSE, INI_SCANNER_RAW);
     $schema = file_get_contents($search_api_solr_conf_path . '/schema.xml');
     $schema = preg_replace('@<fieldType name="text_und".*?</fieldType>@ms', '<!-- fieldType text_und is moved to schema_extra_types.xml by Search API Multilingual Solr -->', $schema);
@@ @@
     $zip->addFile('schema_extra_fields.xml', $this->generateSchemaExtraFieldsXml());

     // Add language specific text files.
-    /** @var \Drupal\search_api_solr_multilingual\SolrFieldTypeInterface $solr_field_type */
+    /** @var SolrFieldTypeInterface $solr_field_type */
     foreach ($solr_field_types as $solr_field_type) {
       $text_files = $solr_field_type->getTextFiles();
       foreach ($text_files as $text_file_name => $text_file) {
@@ @@
   }

   /**
-   * @return \Drupal\search_api_solr_multilingual\SolrMultilingualBackendInterface
+   * @return SolrMultilingualBackendInterface
    */
   protected function getBackend() {
     return $this->backend;
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/search_api_solr_multilingual/src/Controller/SolrFieldTypeController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\search_api_solr_multilingual\Controller;

+use ZipStream\ZipStream;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\search_api\ServerInterface;
 use Symfony\Component\HttpFoundation\Response;
@@ @@
   /**
    * Provides the listing page.
    *
-   * @param \Drupal\search_api\ServerInterface $search_api_server
+   * @param ServerInterface $search_api_server
    *
    * @return array
    *   A render array as expected by drupal_render().
@@ @@
   /**
    * Provides an XML snippet containing all extra Solr field types.
    *
-   * @param \Drupal\search_api\ServerInterface $search_api_server
+   * @param ServerInterface $search_api_server
    *
    * @return array
    *   A render array as expected by drupal_render().
@@ @@
   /**
    * Provides an XML snippet containing all extra Solr fields.
    *
-   * @param \Drupal\search_api\ServerInterface $search_api_server
+   * @param ServerInterface $search_api_server
    *
    * @return array
    *   A render array as expected by drupal_render().
@@ @@
   /**
    * Provides a zip archive containing a complete Solr configuration.
    *
-   * @param \Drupal\search_api\ServerInterface $search_api_server
+   * @param ServerInterface $search_api_server
    *
    * @return array
    *   A render array as expected by drupal_render().
@@ @@
     ob_clean();

     try {
-      /** @var \ZipStream\ZipStream $zip */
+      /** @var ZipStream $zip */
       $zip = $this->getListBuilder($search_api_server)->getConfigZip();
       $zip->finish();

@@ @@
    *
    * Ensures that the list builder uses the correct Solr backend.
    *
-   * @param \Drupal\search_api\ServerInterface $search_api_server
+   * @param ServerInterface $search_api_server
    *
-   * @return \Drupal\search_api_solr_multilingual\Controller\SolrFieldTypeListBuilder
+   * @return SolrFieldTypeListBuilder
    */
   protected function getListBuilder(ServerInterface $search_api_server) {
     /** @var SolrFieldTypeListBuilder $list_builder */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/search_api_solr_multilingual/src/Access/LocalActionAccessCheck.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * A custom access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    */
   public function access(AccountInterface $account, ServerInterface $search_api_server = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/search_api_solr_multilingual/search_api_solr_multilingual.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\search_api\ServerInterface;
+use Drupal\Core\Config\ConfigInstallerInterface;
 /**
  * Re-installs all Solr Field Types to be compatible to the latest structure.
  */
@@ @@
  */
 function search_api_solr_multilingual_post_update_fix_backend_ids() {
   $storage = \Drupal::entityTypeManager()->getStorage('search_api_server');
-  /** @var \Drupal\search_api\ServerInterface[] $servers */
+  /** @var ServerInterface[] $servers */
   $servers = $storage->loadByProperties(['backend' => 'search_api_solr.multilingual']);
   foreach ($servers as $server) {
     $server->set('backend', 'search_api_solr_multilingual');
@@ @@
     $storage->delete([$field_type]);
   }

-  /** @var \Drupal\Core\Config\ConfigInstallerInterface $config_installer */
+  /** @var ConfigInstallerInterface $config_installer */
   $config_installer = \Drupal::service('config.installer');
   $config_installer->installDefaultConfig('module', 'search_api_solr_multilingual');
   $restrict_by_dependency = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


17) modules/contrib/search_api_solr_multilingual/search_api_solr_multilingual.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\ConfigInstallerInterface;
 /**
  * @file
  * Contains search_api_solr_multilingual.module.
@@ @@
   $storage = \Drupal::entityTypeManager()->getStorage('solr_field_type');
   $storage->delete($storage->loadMultiple());

-  /** @var \Drupal\Core\Config\ConfigInstallerInterface $config_installer */
+  /** @var ConfigInstallerInterface $config_installer */
   $config_installer = \Drupal::service('config.installer');
   $config_installer->installDefaultConfig('module', 'search_api_solr_multilingual');
   $restrict_by_dependency = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


18) modules/contrib/search_api_solr_multilingual/search_api_solr_multilingual.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\search_api\ServerInterface;
+use Drupal\search_api_solr_multilingual\SolrMultilingualBackendInterface;
 /**
  * @file
  * Install, update, and uninstall functions for Search API Multilingual Solr.
@@ @@
   if ($phase == 'runtime') {

     $storage = \Drupal::entityTypeManager()->getStorage('search_api_server');
-    /** @var \Drupal\search_api\ServerInterface[] $servers */
+    /** @var ServerInterface[] $servers */
     if ($servers = $storage->loadByProperties(['backend' => 'search_api_solr_multilingual'])) {
       foreach ($servers as $server) {
         $key = 'search_api_solr_multilingual_' . $server->id();
@@ @@
           ]),
         ];

-        /** @var \Drupal\search_api_solr_multilingual\SolrMultilingualBackendInterface $backend */
+        /** @var SolrMultilingualBackendInterface $backend */
         $backend = $server->getBackend();
         if ($backend->isAvailable()) {
           $stats = $backend->getSchemaLanguageStatistics();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


19) modules/contrib/search_api_solr_multilingual/search_api_solr_multilingual.drush.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\search_api_solr_multilingual\Controller\SolrFieldTypeListBuilder;
 use Drupal\search_api\Entity\Server;

 /**
@@ @@
  *   The targeted Solr version.
  */
 function drush_search_api_solr_multilingual_get_server_config($server_id, $file_name, $solr_version = NULL) {
-  /** @var Drupal\search_api_solr_multilingual\Controller\SolrFieldTypeListBuilder $list_builder */
+  /** @var SolrFieldTypeListBuilder $list_builder */
   $list_builder = Drupal::entityTypeManager()->getListBuilder('solr_field_type');
   $server = Server::load($server_id);
   if ($solr_version) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 19 files have been changed by Rector                                      

