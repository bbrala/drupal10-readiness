modules/contrib/transaction_workflow/src/Access/TransactionWorkflowTypeAccess.php
modules/contrib/transaction_workflow/src/Form/TransactionWorkflowTransactionForm.php
modules/contrib/transaction_workflow/src/Form/TransactionWorkflowTransitionsForm.php
modules/contrib/transaction_workflow/src/Plugin/Block/TransactionWorkflowFormBlock.php
modules/contrib/transaction_workflow/src/Plugin/Transaction/WorkflowTransactor.php
modules/contrib/transaction_workflow/src/TransactionWorkflowService.php
modules/contrib/transaction_workflow/src/TransactionWorkflowServiceInterface.php
modules/contrib/transaction_workflow/tests/src/Kernel/WorkflowTransactionTest.php
modules/contrib/transaction_workflow/transaction_workflow.module

8 files with changes
====================

1) modules/contrib/transaction_workflow/transaction_workflow.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\transaction_workflow\TransactionWorkflowServiceInterface;
 /**
  * @file
  * Contains transaction_workflow.module.
@@ @@
 /**
  * Callback for allowed values in state string list fields.
  *
- * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
+ * @param FieldStorageDefinitionInterface $definition
  *   The field storage definition.
- * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
+ * @param FieldableEntityInterface|null $entity
  *   (optional) The entity.
  * @param bool $cacheable
  *   (optional) Boolean indicating it is cacheable.
@@ @@
   // Only cacheable when all values returned.
   $cacheable = FALSE;

-  /** @var \Drupal\transaction_workflow\TransactionWorkflowServiceInterface $workflow_service */
+  /** @var TransactionWorkflowServiceInterface $workflow_service */
   $workflow_service = \Drupal::service('transaction_workflow');
   $current_state = $workflow_service->getCurrentState($entity->getTargetEntityId(), $transaction_type) ?: '';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/transaction_workflow/src/TransactionWorkflowServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\transaction_workflow;

+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\transaction\TransactionTypeInterface;
 /**
  * Transaction workflow service interface.
  */
@@ @@
   /**
    * Gets the current workflow state of a given entity.
    *
-   * @param string|\Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param string|ContentEntityInterface $entity
    *   The entity object or ID.
-   * @param string|\Drupal\transaction\TransactionTypeInterface $transaction_type
+   * @param string|TransactionTypeInterface $transaction_type
    *   The workflow transaction type object or ID.
    *
    * @return string|false
@@ @@
    *
    * @param string $from_state
    *   The transition from state.
-   * @param string|\Drupal\transaction\TransactionTypeInterface $transaction_type
+   * @param string|TransactionTypeInterface $transaction_type
    *   The workflow transaction type object or ID.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/transaction_workflow/src/TransactionWorkflowService.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The transaction service.
    *
-   * @var \Drupal\transaction\TransactionServiceInterface
+   * @var TransactionServiceInterface
    */
   protected $transactionService;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\transaction\TransactionServiceInterface $transaction_service
+   * @param TransactionServiceInterface $transaction_service
    *   The transaction service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TransactionServiceInterface $transaction_service) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/transaction_workflow/src/Plugin/Transaction/WorkflowTransactor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\transaction_workflow\Plugin\Transaction;

+use Drupal\transaction\TransactionTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\transaction\Plugin\Transaction\GenericTransactor;
@@ @@
   /**
    * The transactor workflow service.
    *
-   * @var \Drupal\transaction_workflow\TransactionWorkflowServiceInterface
+   * @var TransactionWorkflowServiceInterface
    */
   protected $transactionWorkflowService;

@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+    /** @var TransactionTypeInterface $transaction_type */
     $transaction_type = $form_state->getFormObject()->getEntity();
     $states = $transaction_type->getThirdPartySetting('transaction_workflow', 'states', []);

@@ @@
    *
    * @param array $form
    *   The transaction type form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function transitionsRedirectOnSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
     parent::submitConfigurationForm($form, $form_state);

-    /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+    /** @var TransactionTypeInterface $transaction_type */
     $transaction_type = $form_state->getFormObject()->getEntity();
     $transactor_settings = $transaction_type->getPluginSettings();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/transaction_workflow/src/Plugin/Block/TransactionWorkflowFormBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\transaction_workflow\Plugin\Block;

+use Drupal\transaction\TransactionTypeInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The transaction service.
    *
-   * @var \Drupal\transaction\TransactionServiceInterface
+   * @var TransactionServiceInterface
    */
   protected $transactionService;

@@ @@
   /**
    * The transactor workflow service.
    *
-   * @var \Drupal\transaction_workflow\TransactionWorkflowServiceInterface
+   * @var TransactionWorkflowServiceInterface
    */
   protected $transactionWorkflowService;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\transaction\TransactionServiceInterface $transaction_service
+   * @param TransactionServiceInterface $transaction_service
    *   The transaction service.
-   * @param \Drupal\transaction_workflow\TransactionWorkflowServiceInterface $transaction_workflow_service
+   * @param TransactionWorkflowServiceInterface $transaction_workflow_service
    *   The transaction workflow service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder object.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TransactionServiceInterface $transaction_service, TransactionWorkflowServiceInterface $transaction_workflow_service, EntityTypeManagerInterface $entity_type_manager, FormBuilderInterface $form_builder, AccountInterface $current_user, EntityDisplayRepositoryInterface $entity_display_repository, RequestStack $request_stack) {
@@ @@

     if ($result->isAllowed()) {
       // Verify contextual transaction type and target entity.
-      /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+      /** @var TransactionTypeInterface $transaction_type */
       $transaction_type = $this->entityTypeManager->getStorage('transaction_type')->load($this->configuration['transaction_type']);
       $result->addCacheableDependency($transaction_type);
       $request = $this->requestStack->getCurrentRequest();
@@ @@
   public function blockForm($form, FormStateInterface $form_state) {
     // The transaction type.
     $options = [];
-    /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+    /** @var TransactionTypeInterface $transaction_type */
     foreach ($this->entityTypeManager->getStorage('transaction_type')->loadMultiple() as $transaction_type) {
       if ($transaction_type->getPluginId() == 'transaction_workflow') {
         $options[$transaction_type->id()] = $transaction_type->label();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/transaction_workflow/src/Form/TransactionWorkflowTransitionsForm.php:54

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\transaction\TransactionTypeInterface $transaction_type */
+    /** @var TransactionTypeInterface $transaction_type */
     $transaction_type = $form['#transaction_type'];
     $transactor_settings = $transaction_type->getPluginSettings();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/transaction_workflow/src/Form/TransactionWorkflowTransactionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\transaction_workflow\Form;

+use Drupal\transaction\TransactionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\transaction\Form\TransactionForm;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
-    /** @var \Drupal\transaction\TransactionInterface $transaction */
+    /** @var TransactionInterface $transaction */
     $transaction = $this->buildEntity($form, $form_state);
     // Try to execute the transaction.
     if (!$transaction->execute(FALSE)) {
@@ @@
    */
   public function save(array $form, FormStateInterface $form_state) {
     $saved = parent::save($form, $form_state);
-    /** @var \Drupal\transaction\TransactionInterface $transaction */
+    /** @var TransactionInterface $transaction */
     $transaction = $this->entity;
     // Redirect to the target entity canonical URL.
     $form_state->setRedirectUrl($transaction->getTargetEntity()->toUrl());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/transaction_workflow/src/Access/TransactionWorkflowTypeAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\transaction_workflow\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\transaction\TransactionTypeInterface;
@@ @@
   /**
    * Check that transaction type is workflow.
    *
-   * @param \Drupal\transaction\TransactionTypeInterface $transaction_type
+   * @param TransactionTypeInterface $transaction_type
    *   The transaction type.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Allowed if the transaction type is workflow.
    */
   public function access(TransactionTypeInterface $transaction_type = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 8 files have been changed by Rector                                       

