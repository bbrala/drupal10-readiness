diff --git a/src/Periodicity/MidnightResolver.php b/src/Periodicity/MidnightResolver.php
index 41150f0..03db719 100644
--- a/src/Periodicity/MidnightResolver.php
+++ b/src/Periodicity/MidnightResolver.php
@@ -31,7 +31,7 @@ class MidnightResolver extends PeriodicityBaseResolver {
   /**
    * Get the DrupalDateTime object of Today at Midnight as UTC as Timezone.
    *
-   * @return \Drupal\Component\Datetime\DateTimePlus
+   * @return DateTimePlus
    *   The Today at Midnight DrupalDateTime object.
    */
   protected function getTodayMidnight(): DateTimePlus {
diff --git a/src/Periodicity/PeriodicityBaseResolver.php b/src/Periodicity/PeriodicityBaseResolver.php
index cfea99d..3377c7f 100644
--- a/src/Periodicity/PeriodicityBaseResolver.php
+++ b/src/Periodicity/PeriodicityBaseResolver.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\timesup\Periodicity;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\State\StateInterface;
@@ -18,41 +19,41 @@ abstract class PeriodicityBaseResolver implements PeriodicityResolverInterface {
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The registered logger for this channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * Constructs a PeriodicityBaseResolver object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger channel factory service.
    */
   public function __construct(CacheTagsInvalidatorInterface $cache_tags_invalidator, StateInterface $state, TimeInterface $time, LoggerChannelFactoryInterface $logger_factory) {
diff --git a/src/Resolver/ChainPeriodicityResolver.php b/src/Resolver/ChainPeriodicityResolver.php
index e19fc13..ce4c4ca 100644
--- a/src/Resolver/ChainPeriodicityResolver.php
+++ b/src/Resolver/ChainPeriodicityResolver.php
@@ -10,14 +10,14 @@ class ChainPeriodicityResolver {
   /**
    * The resolvers.
    *
-   * @var \Drupal\timesup\Resolver\PeriodicityResolverInterface[]
+   * @var PeriodicityResolverInterface[]
    */
   protected $resolvers = [];
 
   /**
    * Constructs a new ChainPeriodicityResolver object.
    *
-   * @param \Drupal\timesup\Resolver\PeriodicityResolverInterface[] $resolvers
+   * @param PeriodicityResolverInterface[] $resolvers
    *   The resolvers.
    */
   public function __construct(array $resolvers = []) {
@@ -27,7 +27,7 @@ class ChainPeriodicityResolver {
   /**
    * Adds a periodicity resolver.
    *
-   * @param \Drupal\timesup\Resolver\PeriodicityResolverInterface $resolver
+   * @param PeriodicityResolverInterface $resolver
    *   The resolver.
    */
   public function addResolver(PeriodicityResolverInterface $resolver): void {
@@ -37,7 +37,7 @@ class ChainPeriodicityResolver {
   /**
    * Gets all added resolvers.
    *
-   * @return \Drupal\timesup\Resolver\PeriodicityResolverInterface[]
+   * @return PeriodicityResolverInterface[]
    *   The resolvers.
    */
   public function getResolvers(): array {
diff --git a/tests/src/Unit/Resolver/ChainPeriodicityResolverTest.php b/tests/src/Unit/Resolver/ChainPeriodicityResolverTest.php
index 676f9fa..29878d0 100644
--- a/tests/src/Unit/Resolver/ChainPeriodicityResolverTest.php
+++ b/tests/src/Unit/Resolver/ChainPeriodicityResolverTest.php
@@ -16,7 +16,7 @@ class ChainPeriodicityResolverTest extends UnitTestCase {
   /**
    * The resolver.
    *
-   * @var \Drupal\timesup\Resolver\ChainPeriodicityResolver
+   * @var ChainPeriodicityResolver
    */
   protected $resolver;
 
diff --git a/tests/src/Unit/Resolver/DailyResolverTest.php b/tests/src/Unit/Resolver/DailyResolverTest.php
index a8174bd..37d4986 100644
--- a/tests/src/Unit/Resolver/DailyResolverTest.php
+++ b/tests/src/Unit/Resolver/DailyResolverTest.php
@@ -22,7 +22,7 @@ class DailyResolverTest extends UnitTestCase {
   /**
    * The resolver.
    *
-   * @var \Drupal\timesup\Periodicity\DailyResolver
+   * @var DailyResolver
    */
   protected $resolver;
 
@@ -30,25 +30,15 @@ class DailyResolverTest extends UnitTestCase {
    * {@inheritdoc}
    */
   public function setUp(): void {
-    $this->cacheTagsInvalidator = $this->getMockBuilder(CacheTagsInvalidatorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->cacheTagsInvalidator = $this->createMock(CacheTagsInvalidatorInterface::class);
 
-    $this->state = $this->getMockBuilder(StateInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(StateInterface::class);
 
-    $this->time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);
 
-    $this->logger = $this->getMockBuilder(LoggerChannelInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->logger = $this->createMock(LoggerChannelInterface::class);
 
-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);
     $this->loggerFactory->expects($this->once())
       ->method('get')->with('timesup')->willReturn($this->logger);
   }
@@ -105,6 +95,7 @@ class DailyResolverTest extends UnitTestCase {
 
   /**
    * @covers ::purge
+   * @doesNotPerformAssertions
    */
   public function testPurge() {
     $this->cacheTagsInvalidator->expects($this->once())
diff --git a/tests/src/Unit/Resolver/HourlyResolverTest.php b/tests/src/Unit/Resolver/HourlyResolverTest.php
index d9c7ee8..63457ee 100644
--- a/tests/src/Unit/Resolver/HourlyResolverTest.php
+++ b/tests/src/Unit/Resolver/HourlyResolverTest.php
@@ -22,7 +22,7 @@ class HourlyResolverTest extends UnitTestCase {
   /**
    * The resolver.
    *
-   * @var \Drupal\timesup\Periodicity\HourlyResolver
+   * @var HourlyResolver
    */
   protected $resolver;
 
@@ -30,25 +30,15 @@ class HourlyResolverTest extends UnitTestCase {
    * {@inheritdoc}
    */
   public function setUp(): void {
-    $this->cacheTagsInvalidator = $this->getMockBuilder(CacheTagsInvalidatorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->cacheTagsInvalidator = $this->createMock(CacheTagsInvalidatorInterface::class);
 
-    $this->state = $this->getMockBuilder(StateInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(StateInterface::class);
 
-    $this->time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);
 
-    $this->logger = $this->getMockBuilder(LoggerChannelInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->logger = $this->createMock(LoggerChannelInterface::class);
 
-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);
     $this->loggerFactory->expects($this->once())
       ->method('get')->with('timesup')->willReturn($this->logger);
   }
@@ -105,6 +95,7 @@ class HourlyResolverTest extends UnitTestCase {
 
   /**
    * @covers ::purge
+   * @doesNotPerformAssertions
    */
   public function testPurge() {
     $this->cacheTagsInvalidator->expects($this->once())
diff --git a/tests/src/Unit/Resolver/MidnightResolverTest.php b/tests/src/Unit/Resolver/MidnightResolverTest.php
index df59222..570793e 100644
--- a/tests/src/Unit/Resolver/MidnightResolverTest.php
+++ b/tests/src/Unit/Resolver/MidnightResolverTest.php
@@ -23,7 +23,7 @@ final class MidnightResolverTest extends UnitTestCase {
   /**
    * The resolver.
    *
-   * @var \Drupal\timesup\Periodicity\MidnightResolver
+   * @var MidnightResolver
    */
   protected $resolver;
 
@@ -31,25 +31,15 @@ final class MidnightResolverTest extends UnitTestCase {
    * {@inheritdoc}
    */
   public function setUp(): void {
-    $this->cacheTagsInvalidator = $this->getMockBuilder(CacheTagsInvalidatorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->cacheTagsInvalidator = $this->createMock(CacheTagsInvalidatorInterface::class);
 
-    $this->state = $this->getMockBuilder(StateInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(StateInterface::class);
 
-    $this->time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);
 
-    $this->logger = $this->getMockBuilder(LoggerChannelInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->logger = $this->createMock(LoggerChannelInterface::class);
 
-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);
     $this->loggerFactory->expects($this->once())
       ->method('get')->with('timesup')->willReturn($this->logger);
   }
@@ -126,6 +116,7 @@ final class MidnightResolverTest extends UnitTestCase {
 
   /**
    * @covers ::purge
+   * @doesNotPerformAssertions
    */
   public function testPurge() {
     $this->cacheTagsInvalidator->expects($this->once())
diff --git a/tests/src/Unit/Resolver/MinutelyResolverTest.php b/tests/src/Unit/Resolver/MinutelyResolverTest.php
index e5a892b..fedf6bc 100644
--- a/tests/src/Unit/Resolver/MinutelyResolverTest.php
+++ b/tests/src/Unit/Resolver/MinutelyResolverTest.php
@@ -22,7 +22,7 @@ class MinutelyResolverTest extends UnitTestCase {
   /**
    * The resolver.
    *
-   * @var \Drupal\timesup\Periodicity\MinutelyResolver
+   * @var MinutelyResolver
    */
   protected $resolver;
 
@@ -30,25 +30,15 @@ class MinutelyResolverTest extends UnitTestCase {
    * {@inheritdoc}
    */
   public function setUp(): void {
-    $this->cacheTagsInvalidator = $this->getMockBuilder(CacheTagsInvalidatorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->cacheTagsInvalidator = $this->createMock(CacheTagsInvalidatorInterface::class);
 
-    $this->state = $this->getMockBuilder(StateInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(StateInterface::class);
 
-    $this->time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);
 
-    $this->logger = $this->getMockBuilder(LoggerChannelInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->logger = $this->createMock(LoggerChannelInterface::class);
 
-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);
     $this->loggerFactory->expects($this->once())
       ->method('get')->with('timesup')->willReturn($this->logger);
   }
@@ -107,6 +97,7 @@ class MinutelyResolverTest extends UnitTestCase {
 
   /**
    * @covers ::purge
+   * @doesNotPerformAssertions
    */
   public function testPurge() {
     $this->cacheTagsInvalidator->expects($this->once())
diff --git a/tests/src/Unit/Resolver/WeeklyResolverTest.php b/tests/src/Unit/Resolver/WeeklyResolverTest.php
index 01f0c57..4f4d6a7 100644
--- a/tests/src/Unit/Resolver/WeeklyResolverTest.php
+++ b/tests/src/Unit/Resolver/WeeklyResolverTest.php
@@ -22,7 +22,7 @@ class WeeklyResolverTest extends UnitTestCase {
   /**
    * The resolver.
    *
-   * @var \Drupal\timesup\Periodicity\WeeklyResolver
+   * @var WeeklyResolver
    */
   protected $resolver;
 
@@ -30,25 +30,15 @@ class WeeklyResolverTest extends UnitTestCase {
    * {@inheritdoc}
    */
   public function setUp(): void {
-    $this->cacheTagsInvalidator = $this->getMockBuilder(CacheTagsInvalidatorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->cacheTagsInvalidator = $this->createMock(CacheTagsInvalidatorInterface::class);
 
-    $this->state = $this->getMockBuilder(StateInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(StateInterface::class);
 
-    $this->time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);
 
-    $this->logger = $this->getMockBuilder(LoggerChannelInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->logger = $this->createMock(LoggerChannelInterface::class);
 
-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);
     $this->loggerFactory->expects($this->once())
       ->method('get')->with('timesup')->willReturn($this->logger);
   }
@@ -109,6 +99,7 @@ class WeeklyResolverTest extends UnitTestCase {
 
   /**
    * @covers ::purge
+   * @doesNotPerformAssertions
    */
   public function testPurge() {
     $this->cacheTagsInvalidator->expects($this->once())
