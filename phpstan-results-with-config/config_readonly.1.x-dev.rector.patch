diff --git a/config_readonly.module b/config_readonly.module
index 580fe64..10c69f1 100644
--- a/config_readonly.module
+++ b/config_readonly.module
@@ -34,7 +34,7 @@ function config_readonly_form_alter(array &$form, FormStateInterface &$form_stat
  *
  * @param array $form
  *   A build form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function _config_readonly_validate_failure(array $form, FormStateInterface &$form_state) {
diff --git a/src/Config/ConfigReadonlyStorage.php b/src/Config/ConfigReadonlyStorage.php
index 7d792be..3b4162c 100644
--- a/src/Config/ConfigReadonlyStorage.php
+++ b/src/Config/ConfigReadonlyStorage.php
@@ -26,29 +26,29 @@ class ConfigReadonlyStorage extends CachedStorage {
   /**
    * The used lock backend instance.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Constructs a new ConfigReadonlyStorage.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   A configuration storage to be cached.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   A cache backend used to store configuration.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock backend to check if config imports are in progress.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke hooks.
    */
   public function __construct(StorageInterface $storage, CacheBackendInterface $cache, LockBackendInterface $lock, RequestStack $request_stack, ModuleHandlerInterface $module_handler) {
@@ -74,7 +74,7 @@ class ConfigReadonlyStorage extends CachedStorage {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\config_readonly\Exception\ConfigReadonlyStorageException
+   * @throws ConfigReadonlyStorageException
    */
   public function write($name, array $data) {
     $this->checkLock($name);
@@ -84,7 +84,7 @@ class ConfigReadonlyStorage extends CachedStorage {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\config_readonly\Exception\ConfigReadonlyStorageException
+   * @throws ConfigReadonlyStorageException
    */
   public function delete($name) {
     $this->checkLock($name);
@@ -94,7 +94,7 @@ class ConfigReadonlyStorage extends CachedStorage {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\config_readonly\Exception\ConfigReadonlyStorageException
+   * @throws ConfigReadonlyStorageException
    */
   public function rename($name, $new_name) {
     $this->checkLock($name);
@@ -105,7 +105,7 @@ class ConfigReadonlyStorage extends CachedStorage {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\config_readonly\Exception\ConfigReadonlyStorageException
+   * @throws ConfigReadonlyStorageException
    */
   public function deleteAll($prefix = '') {
     $this->checkLock();
@@ -118,7 +118,7 @@ class ConfigReadonlyStorage extends CachedStorage {
    * @param string $name
    *   Check for a specific lock config.
    *
-   * @throws \Drupal\config_readonly\Exception\ConfigReadonlyStorageException
+   * @throws ConfigReadonlyStorageException
    */
   protected function checkLock($name = '') {
     // If settings.php says to lock config changes and if the config importer
diff --git a/src/ConfigReadonlyWhitelistTrait.php b/src/ConfigReadonlyWhitelistTrait.php
index 5ea2028..215ae24 100644
--- a/src/ConfigReadonlyWhitelistTrait.php
+++ b/src/ConfigReadonlyWhitelistTrait.php
@@ -14,7 +14,7 @@ trait ConfigReadonlyWhitelistTrait {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -28,7 +28,7 @@ trait ConfigReadonlyWhitelistTrait {
   /**
    * Set the module handler.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke hooks.
    */
   protected function setModuleHandler(ModuleHandlerInterface $module_handler) {
diff --git a/src/EventSubscriber/ReadOnlyFormSubscriber.php b/src/EventSubscriber/ReadOnlyFormSubscriber.php
index 4ce7731..fc004a6 100644
--- a/src/EventSubscriber/ReadOnlyFormSubscriber.php
+++ b/src/EventSubscriber/ReadOnlyFormSubscriber.php
@@ -20,7 +20,7 @@ class ReadOnlyFormSubscriber implements EventSubscriberInterface {
   /**
    * ReadOnlyFormSubscriber constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke hooks.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
@@ -94,7 +94,7 @@ class ReadOnlyFormSubscriber implements EventSubscriberInterface {
   /**
    * Get the editable configuration names.
    *
-   * @param \Drupal\Core\Form\ConfigFormBase $form
+   * @param ConfigFormBase $form
    *   The configuration form.
    *
    * @return array
diff --git a/src/ReadOnlyFormEvent.php b/src/ReadOnlyFormEvent.php
index 58f80ec..1506029 100644
--- a/src/ReadOnlyFormEvent.php
+++ b/src/ReadOnlyFormEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\config_readonly;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Readonly form event.
@@ -15,7 +15,7 @@ class ReadOnlyFormEvent extends Event {
   /**
    * The form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;
 
@@ -29,7 +29,7 @@ class ReadOnlyFormEvent extends Event {
   /**
    * Constructs a new ReadOnlyFormEvent object.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function __construct(FormStateInterface $form_state) {
@@ -40,7 +40,7 @@ class ReadOnlyFormEvent extends Event {
   /**
    * Get the form state.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   The form state.
    */
   public function getFormState() {
