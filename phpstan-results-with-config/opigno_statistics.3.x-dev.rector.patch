diff --git a/opigno_statistics.install b/opigno_statistics.install
index 7865e8b..9f74638 100644
--- a/opigno_statistics.install
+++ b/opigno_statistics.install
@@ -58,7 +58,7 @@ function opigno_statistics_install() {
  */
 function opigno_statistics_update_9001() {
   $config_storage = \Drupal::service('config.storage');
-  $opigno_module_path = drupal_get_path('module', 'opigno_module') . '/config/optional/';
+  $opigno_module_path = \Drupal::service('extension.list.module')->getPath('opigno_module') . '/config/optional/';
   $configs = [
     'core.entity_view_display.group.learning_path.list_item' => $opigno_module_path,
     'core.entity_view_display.user.user.compact' => $opigno_module_path,
@@ -124,7 +124,7 @@ function opigno_statistics_update_9002() {
  * Import statistics configs.
  */
 function opigno_statistics_update_9003() {
-  $config_path = drupal_get_path('module', 'opigno_statistics') . '/config/optional/';
+  $config_path = \Drupal::service('extension.list.module')->getPath('opigno_statistics') . '/config/optional/';
   $config_source = new FileStorage($config_path);
   \Drupal::service('config.installer')->installOptionalConfig($config_source);
 }
@@ -134,7 +134,7 @@ function opigno_statistics_update_9003() {
  */
 function opigno_statistics_update_9004() {
   $config_storage = \Drupal::service('config.storage');
-  $config_path = drupal_get_path('module', 'opigno_module') . '/config/optional/';
+  $config_path = \Drupal::service('extension.list.module')->getPath('opigno_module') . '/config/optional/';
   $source = new FileStorage($config_path);
   $config_storage->write('views.view.opigno_score_modules', $source->read('views.view.opigno_score_modules'));
 }
diff --git a/opigno_statistics.module b/opigno_statistics.module
index a5bc95c..dbebecd 100644
--- a/opigno_statistics.module
+++ b/opigno_statistics.module
@@ -187,7 +187,7 @@ function opigno_statistics_user_access(UserInterface $user, $operation, AccountI
  * Implements hook_user_login().
  */
 function opigno_statistics_user_login($account) {
-  /** @var \Drupal\Core\Session\AccountInterface $account */
+  /** @var AccountInterface $account */
   $uid = $account->id();
   $timestamp = \Drupal::time()->getRequestTime();
   $datetime = DrupalDateTime::createFromTimestamp($timestamp);
diff --git a/src/Access/UserAchievementsAccess.php b/src/Access/UserAchievementsAccess.php
index 1db47f2..2db988c 100644
--- a/src/Access/UserAchievementsAccess.php
+++ b/src/Access/UserAchievementsAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_statistics\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -25,21 +26,21 @@ class UserAchievementsAccess implements ContainerAwareInterface, AccessInterface
   /**
    * The Opigno user access manager service.
    *
-   * @var \Drupal\opigno_social\Services\UserAccessManager
+   * @var UserAccessManager
    */
   protected $accessManager;
 
   /**
    * Checks the access.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check the access to.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in user's account.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to check the access to.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, AccountInterface $account, UserInterface $user) {
diff --git a/src/Controller/UserAchievements.php b/src/Controller/UserAchievements.php
index bbd8626..11ec864 100644
--- a/src/Controller/UserAchievements.php
+++ b/src/Controller/UserAchievements.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_statistics\Controller;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Access\CsrfTokenGenerator;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\HtmlCommand;
@@ -44,23 +45,23 @@ class UserAchievements extends ControllerBase {
   /**
    * Opigno user statistics manager service.
    *
-   * @var \Drupal\opigno_statistics\Services\UserStatisticsManager
+   * @var UserStatisticsManager
    */
   protected $statsManager;
 
   /**
    * The CSRF token generator service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;
 
   /**
    * UserAchievements constructor.
    *
-   * @param \Drupal\opigno_statistics\Services\UserStatisticsManager $stats_manager
+   * @param UserStatisticsManager $stats_manager
    *   Opigno user statistics manager service.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrf_token
+   * @param CsrfTokenGenerator $csrf_token
    *   The CSRF token generator service.
    */
   public function __construct(UserStatisticsManager $stats_manager, CsrfTokenGenerator $csrf_token) {
@@ -81,9 +82,9 @@ class UserAchievements extends ControllerBase {
   /**
    * Build the user achievements page content.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to get achievements of.
    *
    * @return array
@@ -146,7 +147,7 @@ class UserAchievements extends ControllerBase {
    * @param string $tab
    *   The tab machine name to get the title for.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The tab title.
    */
   private function getTabTitle(string $tab) {
@@ -195,12 +196,12 @@ class UserAchievements extends ControllerBase {
   /**
    * Ajax callback to swith tabs content.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to render the content for.
    * @param string $tab
    *   The tab machine name to be displayed.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response to display the tab content.
    */
   public function switchTabs(UserInterface $user, string $tab): AjaxResponse {
diff --git a/src/Controller/UserController.php b/src/Controller/UserController.php
index bf2fc05..48106fa 100644
--- a/src/Controller/UserController.php
+++ b/src/Controller/UserController.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\opigno_statistics\Controller;
 
+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\opigno_module\Entity\UserModuleStatus;
+use Drupal\opigno_module\Entity\OpignoAnswer;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Ajax\AfterCommand;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\InvokeCommand;
@@ -37,42 +43,42 @@ class UserController extends ControllerBase {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The user statistics manager service.
    *
-   * @var \Drupal\opigno_statistics\Services\UserStatisticsManager
+   * @var UserStatisticsManager
    */
   protected $statsManager;
 
   /**
    * The Opigno user access manager.
    *
-   * @var \Drupal\opigno_social\Services\UserAccessManager
+   * @var UserAccessManager
    */
   protected $userAccessManager;
 
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * Opigno user connections manager service.
    *
-   * @var \Drupal\opigno_social\Services\UserConnectionManager
+   * @var UserConnectionManager
    */
   protected $connectionsManager;
 
@@ -112,7 +118,7 @@ class UserController extends ControllerBase {
   /**
    * Builds render array for a user info block.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User.
    * @param bool $is_private
    *   Whether the user's profile private or not.
@@ -205,15 +211,15 @@ class UserController extends ControllerBase {
    *   Path to the image in theme.
    */
   private function getAchievementImagePath(string $image): string {
-    $path = drupal_get_path('theme', 'aristotle') . "/src/images/design/$image";
+    $path = \Drupal::service('extension.list.theme')->getPath('aristotle') . "/src/images/design/$image";
 
-    return file_exists($path) ? file_url_transform_relative(base_path() . $path) : '';
+    return file_exists($path) ? \Drupal::service('file_url_generator')->transformRelative(base_path() . $path) : '';
   }
 
   /**
    * Build the url to the achievement page with the anchor to the needed tab.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The achievement page url object.
    * @param string $tab
    *   The machine name of the tab that should be opened.
@@ -235,9 +241,9 @@ class UserController extends ControllerBase {
   /**
    * Returns max score that user can have in this module & activity.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoModule $module
+   * @param OpignoModule $module
    *   Module.
-   * @param \Drupal\opigno_module\Entity\OpignoActivity $activity
+   * @param OpignoActivity $activity
    *   Activity.
    *
    * @return int
@@ -276,20 +282,20 @@ class UserController extends ControllerBase {
   /**
    * Build render array for a user module details.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User.
-   * @param \Drupal\group\Entity\GroupInterface $training
+   * @param GroupInterface $training
    *   Training.
-   * @param null|\Drupal\group\Entity\GroupInterface $course
+   * @param null|GroupInterface $course
    *   Course.
-   * @param \Drupal\opigno_module\Entity\OpignoModule $module
+   * @param OpignoModule $module
    *   Module.
    *
    * @return array
    *   Render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function buildModuleDetails(
     UserInterface $user,
@@ -317,9 +323,9 @@ class UserController extends ControllerBase {
         : '';
     }
 
-    /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+    /** @var OpignoModule $module */
     $module = OpignoModule::load($step['id']);
-    /** @var \Drupal\opigno_module\Entity\UserModuleStatus[] $attempts */
+    /** @var UserModuleStatus[] $attempts */
     $attempts = !$expired ? $module->getModuleAttempts($user, NULL, $latest_cert_date, FALSE, $training->id()) : [];
 
     if ($moduleHandler->moduleExists('opigno_skills_system') && $module->getSkillsActive()
@@ -348,9 +354,9 @@ class UserController extends ControllerBase {
       $activities = $module->getModuleActivities();
     }
 
-    /** @var \Drupal\opigno_module\Entity\OpignoActivity[] $activities */
+    /** @var OpignoActivity[] $activities */
     $activities = array_map(function ($activity) {
-      /** @var \Drupal\opigno_module\Entity\OpignoActivity $activity */
+      /** @var OpignoActivity $activity */
       return OpignoActivity::load($activity->id);
     }, $activities);
 
@@ -375,7 +381,7 @@ class UserController extends ControllerBase {
 
     $activities = array_map(function ($activity) use ($user, $module, $attempt) {
       /** @var \Drupal\opigno_module\Entity\OpignoActivity $activity */
-      /** @var \Drupal\opigno_module\Entity\OpignoAnswer $answer */
+      /** @var OpignoAnswer $answer */
       $answer = isset($attempt)
         ? $activity->getUserAnswer($module, $attempt, $user)
         : NULL;
@@ -524,10 +530,10 @@ class UserController extends ControllerBase {
    *
    * @param array $attempts
    *   User module attempts.
-   * @param \Drupal\opigno_module\Entity\OpignoModule $module
+   * @param OpignoModule $module
    *   Module.
    *
-   * @return \Drupal\opigno_module\Entity\UserModuleStatus
+   * @return UserModuleStatus
    *   $attempt
    */
   protected function getTargetAttempt(array $attempts, OpignoModule $module) {
@@ -544,19 +550,19 @@ class UserController extends ControllerBase {
   /**
    * Builds render array for a user course details.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User.
-   * @param \Drupal\group\Entity\GroupInterface $training
+   * @param GroupInterface $training
    *   Training.
-   * @param \Drupal\group\Entity\GroupInterface $course
+   * @param GroupInterface $course
    *   Course.
    *
    * @return array
    *   Render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function buildCourseDetails(
     UserInterface $user,
@@ -674,17 +680,17 @@ class UserController extends ControllerBase {
   /**
    * Builds render array for a user training details.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User.
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Training.
    *
    * @return array
    *   Render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function buildTrainingDetails(UserInterface $user, GroupInterface $group) {
     $gid = $group->id();
@@ -990,20 +996,20 @@ class UserController extends ControllerBase {
   /**
    * Loads module panel with a AJAX.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User.
-   * @param \Drupal\group\Entity\GroupInterface $training
+   * @param GroupInterface $training
    *   Training.
-   * @param null|\Drupal\group\Entity\GroupInterface $course
+   * @param null|GroupInterface $course
    *   Course.
-   * @param \Drupal\opigno_module\Entity\OpignoModule $module
+   * @param OpignoModule $module
    *   Module.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   AJAX response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function ajaxLoadCourseModuleDetails(
     UserInterface $user,
@@ -1026,18 +1032,18 @@ class UserController extends ControllerBase {
   /**
    * Loads module panel with a AJAX.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User.
-   * @param \Drupal\group\Entity\GroupInterface $training
+   * @param GroupInterface $training
    *   Training.
-   * @param \Drupal\opigno_module\Entity\OpignoModule $module
+   * @param OpignoModule $module
    *   Module.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   AJAX response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function ajaxLoadTrainingModuleDetails(
     UserInterface $user,
@@ -1058,19 +1064,19 @@ class UserController extends ControllerBase {
   /**
    * Loads a user course details with the AJAX.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User.
-   * @param \Drupal\group\Entity\GroupInterface $training
+   * @param GroupInterface $training
    *   Training.
-   * @param \Drupal\group\Entity\GroupInterface $course
+   * @param GroupInterface $course
    *   Course.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   AJAX response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function ajaxLoadCourseDetails(
     UserInterface $user,
@@ -1139,17 +1145,17 @@ class UserController extends ControllerBase {
   /**
    * Loads a user training details with the AJAX.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User.
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Training.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   AJAX response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function ajaxLoadTrainingDetails(
     UserInterface $user,
@@ -1216,7 +1222,7 @@ class UserController extends ControllerBase {
   /**
    * Builds render array for a user trainings list.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User.
    *
    * @return array
@@ -1285,20 +1291,20 @@ class UserController extends ControllerBase {
   /**
    * Builds render array for a user course statistics page.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User.
-   * @param \Drupal\group\Entity\GroupInterface $training
+   * @param GroupInterface $training
    *   Training.
-   * @param \Drupal\group\Entity\GroupInterface $course
+   * @param GroupInterface $course
    *   Course.
-   * @param \Drupal\opigno_module\Entity\OpignoModule $module
+   * @param OpignoModule $module
    *   Module.
    *
    * @return array
    *   Render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function courseModule(
     UserInterface $user,
@@ -1315,18 +1321,18 @@ class UserController extends ControllerBase {
   /**
    * Builds render array for a user course statistics page.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User.
-   * @param \Drupal\group\Entity\GroupInterface $training
+   * @param GroupInterface $training
    *   Training.
-   * @param \Drupal\opigno_module\Entity\OpignoModule $module
+   * @param OpignoModule $module
    *   Module.
    *
    * @return array
    *   Render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function trainingModule(
     UserInterface $user,
@@ -1366,7 +1372,7 @@ class UserController extends ControllerBase {
   /**
    * Builds render array for a user statistics index page.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   User.
    *
    * @return array
@@ -1412,10 +1418,10 @@ class UserController extends ControllerBase {
   /**
    * Get user statistics block.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response object.
    */
   public function getUserStatsBlock(Request $request): AjaxResponse {
diff --git a/src/Form/DashboardForm.php b/src/Form/DashboardForm.php
index c561d22..c16ebce 100644
--- a/src/Form/DashboardForm.php
+++ b/src/Form/DashboardForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\opigno_statistics\Form;
 
+use Drupal\Component\Datetime\Time;
+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ -32,50 +35,50 @@ class DashboardForm extends FormBase {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Time.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;
 
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The taxonomy term storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected $termStorage = NULL;
 
   /**
    * DashboardForm constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connecion service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(
@@ -121,7 +124,7 @@ class DashboardForm extends FormBase {
   /**
    * Builds active users per day graph.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $datetime
+   * @param DrupalDateTime $datetime
    *   Date.
    * @param array $lp_ids
    *   LP IDs.
@@ -218,7 +221,7 @@ class DashboardForm extends FormBase {
   /**
    * Builds trainings progress.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $datetime
+   * @param DrupalDateTime $datetime
    *   Date.
    * @param array $lp_ids
    *   LP IDs.
@@ -622,7 +625,7 @@ class DashboardForm extends FormBase {
   /**
    * Get array of learning paths ID's where user have role 'student manager'.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
    * @return array
@@ -648,10 +651,10 @@ class DashboardForm extends FormBase {
   /**
    * Access callback to check that the user can access to view global statistic.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access(AccountInterface $account): AccessResult {
diff --git a/src/Form/TrainingForm.php b/src/Form/TrainingForm.php
index be78bed..31ac4bb 100644
--- a/src/Form/TrainingForm.php
+++ b/src/Form/TrainingForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\opigno_statistics\Form;
 
+use Drupal\Component\Datetime\Time;
+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ -31,41 +34,41 @@ class TrainingForm extends FormBase {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Time.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;
 
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * The user storage exception.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected $userStorage = NULL;
 
   /**
    * TrainingForm constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(
@@ -107,9 +110,9 @@ class TrainingForm extends FormBase {
   /**
    * Builds training progress.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
-   * @param \Drupal\Core\Datetime\DrupalDateTime|bool $datetime
+   * @param DrupalDateTime|bool $datetime
    *   Date.
    * @param mixed $expired_uids
    *   Users uids with the training expired certification.
@@ -248,7 +251,7 @@ class TrainingForm extends FormBase {
   /**
    * Builds user metrics.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
    *
    * @return array
@@ -330,7 +333,7 @@ AND gc.gid = :gid",
   /**
    * Builds training content.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
    * @param mixed $expired_uids
    *   Users uids with the training expired certification.
@@ -460,7 +463,7 @@ AND gc.gid = :gid",
   /**
    * Builds users results for Learning paths.
    *
-   * @param \Drupal\group\Entity\GroupInterface $group
+   * @param GroupInterface $group
    *   Group.
    * @param mixed $expired_uids
    *   Users uids with the training expired certification.
diff --git a/src/Services/UserStatisticsManager.php b/src/Services/UserStatisticsManager.php
index e0d8fba..3c83905 100644
--- a/src/Services/UserStatisticsManager.php
+++ b/src/Services/UserStatisticsManager.php
@@ -44,35 +44,35 @@ class UserStatisticsManager {
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * The database connection service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The User module status entities storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected $userModuleStatusStorage = NULL;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The CSRF token generator service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;
 
@@ -86,26 +86,26 @@ class UserStatisticsManager {
   /**
    * The taxonomy term storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   public $termStorage = NULL;
 
   /**
    * UserStatisticsManager constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrf_token
+   * @param CsrfTokenGenerator $csrf_token
    *   The CSRF token generator service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(
@@ -539,10 +539,10 @@ class UserStatisticsManager {
   /**
    * Get the user role name.
    *
-   * @param \Drupal\user\UserInterface|\Drupal\Core\Session\AccountInterface|null $user
+   * @param UserInterface|AccountInterface|null $user
    *   The user to get the role of.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translatable user role name.
    */
   public function getUserRole(?AccountInterface $user = NULL): TranslatableMarkup {
@@ -568,7 +568,7 @@ class UserStatisticsManager {
   /**
    * Get the default user picture.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to get the name.
    * @param string $image_style
    *   The image style to render the user picture.
@@ -595,19 +595,19 @@ class UserStatisticsManager {
   /**
    * Get the default user image.
    *
-   * @param \Drupal\user\UserInterface|NULL $user
+   * @param UserInterface|NULL $user
    *   The user to display the image for.
    *
    * @return array
    *   Render array to display the default user image.
    */
   public static function getDefaultUserPicture(?UserInterface $user = NULL): array {
-    $path = drupal_get_path('theme', 'aristotle') . '/src/images/content/profil.svg';
+    $path = \Drupal::service('extension.list.theme')->getPath('aristotle') . '/src/images/content/profil.svg';
     $name = $user instanceof UserInterface ? $user->getDisplayName() : t('User');
 
     return [
       '#theme' => 'image',
-      '#uri' => file_exists($path) ? file_url_transform_relative(base_path() . $path) : '',
+      '#uri' => file_exists($path) ? \Drupal::service('file_url_generator')->transformRelative(base_path() . $path) : '',
       '#alt' => $name,
       '#title' => $name,
     ];
diff --git a/src/StatisticsPageTrait.php b/src/StatisticsPageTrait.php
index da0ba32..36cddac 100644
--- a/src/StatisticsPageTrait.php
+++ b/src/StatisticsPageTrait.php
@@ -243,7 +243,7 @@ trait StatisticsPageTrait {
    *
    * They shouldn't have an attempts after expiration date.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    *
    * @return array
@@ -357,11 +357,11 @@ trait StatisticsPageTrait {
   /**
    * Returns group content average statistics for certificated training.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group object.
    * @param mixed $users
    *   Users IDs array.
-   * @param \Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent $content
+   * @param OpignoGroupManagedContent $content
    *   Group content object.
    *
    * @return array
@@ -444,7 +444,7 @@ trait StatisticsPageTrait {
    *
    * @param array $data
    *   Rows data to get available years.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ -485,7 +485,7 @@ trait StatisticsPageTrait {
    *   Rows data to get available months.
    * @param int $year_selected
    *   The previously selected year.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ -524,10 +524,10 @@ trait StatisticsPageTrait {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The updated progress element.
    */
   public function updateTrainingProgressAjax(array &$form, FormStateInterface &$form_state): AjaxResponse {
diff --git a/tests/src/Functional/OpignoStatisticsBrowserTestBase.php b/tests/src/Functional/OpignoStatisticsBrowserTestBase.php
index b14b576..66aafef 100644
--- a/tests/src/Functional/OpignoStatisticsBrowserTestBase.php
+++ b/tests/src/Functional/OpignoStatisticsBrowserTestBase.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\Tests\opigno_statistics\Functional;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\group\Entity\Group;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -23,21 +30,21 @@ abstract class OpignoStatisticsBrowserTestBase extends BrowserTestBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * A test user with group creation rights.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $groupCreator;
 
   /**
    * Account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
@@ -46,7 +53,7 @@ abstract class OpignoStatisticsBrowserTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->entityTypeManager = $this->container->get('entity_type.manager');
     $this->accountSwitcher = $this->container->get('account_switcher');
@@ -82,12 +89,12 @@ abstract class OpignoStatisticsBrowserTestBase extends BrowserTestBase {
    * @param array $values
    *   (optional) The values used to create the entity.
    *
-   * @return \Drupal\group\Entity\Group
+   * @return Group
    *   The created group entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function createGroup(array $values = []) {
     /* @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
