modules/contrib/date_time_day/date_time_day.install
modules/contrib/date_time_day/date_time_day.module
modules/contrib/date_time_day/src/DateDayComputed.php
modules/contrib/date_time_day/src/DateTimeDayComputed.php
modules/contrib/date_time_day/src/DateTimeDayTrait.php
modules/contrib/date_time_day/src/Plugin/Field/FieldFormatter/DateTimeDayDefaultFormatter.php
modules/contrib/date_time_day/src/Plugin/Field/FieldType/DateTimeDayFieldItemList.php
modules/contrib/date_time_day/src/Plugin/Field/FieldType/DateTimeDayItem.php
modules/contrib/date_time_day/src/Plugin/Field/FieldWidget/DateTimeDayDefaultWidget.php
modules/contrib/date_time_day/src/Plugin/Field/FieldWidget/DateTimeDaySecondsWidget.php
modules/contrib/date_time_day/src/Plugin/Field/FieldWidget/DateTimeDayWidgetBase.php
modules/contrib/date_time_day/tests/src/Functional/DateTimeDayFieldTest.php
modules/contrib/date_time_day/tests/src/Kernel/DateTimeDayItemTest.php
modules/contrib/date_time_day/tests/src/Kernel/SeparatorsTranslationTest.php

9 files with changes
====================

1) modules/contrib/date_time_day/tests/src/Kernel/SeparatorsTranslationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\date_time_day\Kernel;

+use Drupal\language\ConfigurableLanguageManagerInterface;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Language\Language;
 use Drupal\date_time_day\Plugin\Field\FieldType\DateTimeDayItem;
@@ @@
   /**
    * A field storage to use in this test class.
    *
-   * @var \Drupal\field\Entity\FieldStorageConfig
+   * @var FieldStorageConfig
    */
   protected $fieldStorage;

@@ @@
   /**
    * The field used in this test class.
    *
-   * @var \Drupal\field\Entity\FieldConfig
+   * @var FieldConfig
    */
   protected $field;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('entity_test');
@@ @@

     // Translate the separators.
     ConfigurableLanguage::createFromLangcode('nl')->save();
-    /** @var \Drupal\language\ConfigurableLanguageManagerInterface $language_manager */
+    /** @var ConfigurableLanguageManagerInterface $language_manager */
     $language_manager = $this->container->get('language_manager');
     $language_manager->getLanguageConfigOverride('nl', 'core.entity_view_display.entity_test.entity_test.default')
       ->set('content.' . $this->fieldStorage->getName() . '.settings.day_separator', 'DNL_TRANSLATED!')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/date_time_day/tests/src/Kernel/DateTimeDayItemTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * A field storage to use in this test class.
    *
-   * @var \Drupal\field\Entity\FieldStorageConfig
+   * @var FieldStorageConfig
    */
   protected $fieldStorage;

@@ @@
   /**
    * The field used in this test class.
    *
-   * @var \Drupal\field\Entity\FieldConfig
+   * @var FieldConfig
    */
   protected $field;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Add a date_time_day field.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/date_time_day/tests/src/Functional/DateTimeDayFieldTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\date_time_day\Functional;

+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\datetime\Plugin\Field\FieldType\DateTimeItem;
 use Drupal\Tests\datetime\Functional\DateTestBase;
@@ @@
         ->save();
       // Display creation form.
       $this->drupalGet('entity_test/add');
-      $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Date element found.');
-      $this->assertFieldByName("{$field_name}[0][start_time_value]", '', 'Start time element found.');
-      $this->assertFieldByName("{$field_name}[0][end_time_value]", '', 'End time element found.');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][start_time_value]", '');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][end_time_value]", '');
       $this->assertFieldByXPath('//*[@id="edit-' . $field_name . '-wrapper"]//label[contains(@class, "js-form-required")]', TRUE, 'Required markup found');
       $this->assertFieldByXPath('//fieldset[@id="edit-' . $field_name . '-0"]/legend', $field_label, 'Fieldset and label found');
       $this->assertFieldByXPath('//fieldset[@aria-describedby="edit-' . $field_name . '-0--description"]', NULL, 'ARIA described-by found');
@@ @@
         "{$field_name}[0][start_time_value]" => $start_time_value,
         "{$field_name}[0][end_time_value]" => $end_time_value,
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
       preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
       $id = $match[1];
       $this->assertSession()->pageTextContains("entity_test $id has been created.");
-      $this->assertRaw('2012-12-30');
-      $this->assertRaw($start_time_value);
-      $this->assertRaw($end_time_value);
+      $this->assertSession()->responseContains('2012-12-30');
+      $this->assertSession()->responseContains($start_time_value);
+      $this->assertSession()->responseContains($end_time_value);
       // Verify the date doesn't change when entity is edited through the form.
       $entity = EntityTest::load($id);
-      $this->assertEqual('2012-12-30', $entity->{$field_name}->value);
-      $this->assertEqual($start_time_value, $entity->{$field_name}->start_time_value);
-      $this->assertEqual($end_time_value, $entity->{$field_name}->end_time_value);
+      $this->assertEquals('2012-12-30', $entity->{$field_name}->value);
+      $this->assertEquals($start_time_value, $entity->{$field_name}->start_time_value);
+      $this->assertEquals($end_time_value, $entity->{$field_name}->end_time_value);
       $this->drupalGet('entity_test/manage/' . $id . '/edit');
-      $this->drupalPostForm(NULL, [], t('Save'));
+      $this->submitForm([], t('Save'));
       $this->drupalGet('entity_test/manage/' . $id . '/edit');
-      $this->drupalPostForm(NULL, [], t('Save'));
+      $this->submitForm([], t('Save'));
       $this->drupalGet('entity_test/manage/' . $id . '/edit');
-      $this->drupalPostForm(NULL, [], t('Save'));
+      $this->submitForm([], t('Save'));
       $entity = EntityTest::load($id);
-      $this->assertEqual('2012-12-30', $entity->{$field_name}->value);
-      $this->assertEqual($start_time_value, $entity->{$field_name}->start_time_value);
-      $this->assertEqual($end_time_value, $entity->{$field_name}->end_time_value);
+      $this->assertEquals('2012-12-30', $entity->{$field_name}->value);
+      $this->assertEquals($start_time_value, $entity->{$field_name}->start_time_value);
+      $this->assertEquals($end_time_value, $entity->{$field_name}->end_time_value);
     }
   }

@@ @@
       $this->fieldStorage->save();
       // Display creation form.
       $this->drupalGet('entity_test/add');
-      $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Date element found.');
-      $this->assertFieldByName("{$field_name}[0][start_time_value][time]", '', 'Start time element found.');
-      $this->assertFieldByName("{$field_name}[0][end_time_value][time]", '', 'End time element found.');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][start_time_value][time]", '');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][end_time_value][time]", '');
       $this->assertFieldByXPath('//*[@id="edit-' . $field_name . '-wrapper"]//label[contains(@class, "js-form-required")]', TRUE, 'Required markup found');
       $this->assertFieldByXPath('//fieldset[@id="edit-' . $field_name . '-0"]/legend', $field_label, 'Fieldset and label found');
       $this->assertFieldByXPath('//fieldset[@aria-describedby="edit-' . $field_name . '-0--description"]', NULL, 'ARIA described-by found');
@@ @@
         "{$field_name}[0][start_time_value][time]" => $start_time_value,
         "{$field_name}[0][end_time_value][time]" => $end_time_value,
       ];
-      $this->drupalPostForm(NULL, $edit, t('Save'));
+      $this->submitForm($edit, t('Save'));
       preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
       $id = $match[1];
       $this->assertSession()->pageTextContains("entity_test $id has been created.");
-      $this->assertRaw('2012-12-30');
-      $this->assertRaw($start_time_value);
-      $this->assertRaw($end_time_value);
+      $this->assertSession()->responseContains('2012-12-30');
+      $this->assertSession()->responseContains($start_time_value);
+      $this->assertSession()->responseContains($end_time_value);
       // Verify the date doesn't change when entity is edited through the form.
       $entity = EntityTest::load($id);
-      $this->assertEqual('2012-12-30', $entity->{$field_name}->value);
-      $this->assertEqual($start_time_value, $entity->{$field_name}->start_time_value);
-      $this->assertEqual($end_time_value, $entity->{$field_name}->end_time_value);
+      $this->assertEquals('2012-12-30', $entity->{$field_name}->value);
+      $this->assertEquals($start_time_value, $entity->{$field_name}->start_time_value);
+      $this->assertEquals($end_time_value, $entity->{$field_name}->end_time_value);
       $this->drupalGet('entity_test/manage/' . $id . '/edit');
-      $this->drupalPostForm(NULL, [], t('Save'));
+      $this->submitForm([], t('Save'));
       $this->drupalGet('entity_test/manage/' . $id . '/edit');
-      $this->drupalPostForm(NULL, [], t('Save'));
+      $this->submitForm([], t('Save'));
       $this->drupalGet('entity_test/manage/' . $id . '/edit');
-      $this->drupalPostForm(NULL, [], t('Save'));
+      $this->submitForm([], t('Save'));
       $entity = EntityTest::load($id);
-      $this->assertEqual('2012-12-30', $entity->{$field_name}->value);
-      $this->assertEqual($start_time_value, $entity->{$field_name}->start_time_value);
-      $this->assertEqual($end_time_value, $entity->{$field_name}->end_time_value);
+      $this->assertEquals('2012-12-30', $entity->{$field_name}->value);
+      $this->assertEquals($start_time_value, $entity->{$field_name}->start_time_value);
+      $this->assertEquals($end_time_value, $entity->{$field_name}->end_time_value);
     }
   }

@@ @@
     ]);
     $field->save();

-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+    /** @var EntityDisplayRepositoryInterface $display_repository */
     $display_repository = \Drupal::service('entity_display.repository');

     $display_repository->getFormDisplay('node', 'date_content', 'default')
@@ @@
       $field_name . '[0][start_time_value]' => '10:00',
       $field_name . '[0][end_time_value]' => '19:00',
     ];
-    $this->drupalPostForm('node/add/date_content', $edit, t('Save'));
+    $this->drupalGet('node/add/date_content');
+    $this->submitForm($edit, t('Save'));
     $this->drupalGet('admin/structure/types/manage/date_content/fields/node.date_content.' . $field_name . '/storage');
     $result = $this->xpath("//*[@id='edit-settings-datetime-type' and contains(@disabled, 'disabled')]");
-    $this->assertEqual(count($result), 1, "Changing datetime setting is disabled.");
+    $this->assertEquals(count($result), 1, "Changing datetime setting is disabled.");
     $this->assertSession()->pageTextContains('There is data for this field in the database. The field settings can no longer be changed.');
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertFieldByNameRector
 * AssertRawRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/date_time_day/src/Plugin/Field/FieldWidget/DateTimeDayWidgetBase.php:33

    ---------- begin diff ----------
@@ @@
       '#title' => $this->t('End time'),
     ] + $element['value'];
     if ($items[$delta]->date) {
-      /** @var \Drupal\Core\Datetime\DrupalDateTime $value */
+      /** @var DrupalDateTime $value */
       $value = $items[$delta]->date;
       $element['value']['#default_value'] = $this->createDateTimeDayDefaultValue($value, $element['value']['#date_timezone']);
     }

     if ($items[$delta]->start_time) {
-      /** @var \Drupal\Core\Datetime\DrupalDateTime $start_date */
+      /** @var DrupalDateTime $start_date */
       $start_time = $items[$delta]->start_time;
       $element['start_time_value']['#default_value'] = $this->createDateTimeDayDefaultValue($start_time, $element['start_time_value']['#date_timezone']);
     }

     if ($items[$delta]->end_time) {
-      /** @var \Drupal\Core\Datetime\DrupalDateTime $end_date */
+      /** @var DrupalDateTime $end_date */
       $end_time = $items[$delta]->end_time;
       $element['end_time_value']['#default_value'] = $this->createDateTimeDayDefaultValue($end_time, $element['end_time_value']['#date_timezone']);
     }
@@ @@
     // storage timezone and format.
     foreach ($values as &$item) {
       if (!empty($item['value']) && $item['value'] instanceof DrupalDateTime) {
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $value_date */
+        /** @var DrupalDateTime $value_date */
         $value_date = $item['value'];
         $value_format = DateTimeItemInterface::DATE_STORAGE_FORMAT;
         // Adjust the date for storage.
@@ @@
         $item['value'] = $value_date->format($value_format);
       }
       if (!empty($item['start_time_value']) && $item['start_time_value'] instanceof DrupalDateTime) {
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $start_time_date */
+        /** @var DrupalDateTime $start_time_date */
         $start_time_date = $item['start_time_value'];
         $start_time_format = '';
         switch ($this->getFieldSetting('time_type')) {
@@ @@
       }

       if (!empty($item['end_time_value']) && $item['end_time_value'] instanceof DrupalDateTime) {
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $end_time_date */
+        /** @var DrupalDateTime $end_time_date */
         $end_time_date = $item['end_time_value'];
         $end_time_format = '';
         switch ($this->getFieldSetting('time_type')) {
@@ @@
    * This will take a default value, apply the proper timezone for display in
    * a widget, and set the default time for date-only fields.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The UTC default date.
    * @param string $timezone
    *   The timezone to apply.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   A date object for use as a default value in a field widget.
    */
   protected function createDateTimeDayDefaultValue(DrupalDateTime $date, $timezone) {
@@ @@
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/date_time_day/src/Plugin/Field/FieldWidget/DateTimeDayDefaultWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\date_time_day\Plugin\Field\FieldWidget;

+use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\date_time_day\Plugin\Field\FieldType\DateTimeDayItem;
@@ @@
       '#attributes' => ['pattern' => '([01]?[0-9]{2}|2[0-3]):[0-5][0-9]', 'title' => 'hh:mm'],
     ];
     if ($items[$delta]->start_time) {
-      /** @var \Drupal\Core\Datetime\DrupalDateTime $start_date */
+      /** @var DrupalDateTime $start_date */
       $start_time = $items[$delta]->start_time;
       $element['start_time_value']['#default_value'] = $start_time->format($value_date_format);
     }
@@ @@
       '#attributes' => ['pattern' => '([01]?[0-9]{2}|2[0-3]):[0-5][0-9]', 'title' => 'hh:mm'],
     ];
     if ($items[$delta]->end_time) {
-      /** @var \Drupal\Core\Datetime\DrupalDateTime $end_date */
+      /** @var DrupalDateTime $end_date */
       $end_time = $items[$delta]->end_time;
       $element['end_time_value']['#default_value'] = $end_time->format($value_date_format);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/date_time_day/src/Plugin/Field/FieldType/DateTimeDayItem.php:47

    ---------- begin diff ----------
@@ @@
   public static function propertyDefinitions(FieldStorageDefinitionInterface $field_definition) {
     $properties = parent::propertyDefinitions($field_definition);

-    /** @var \Drupal\Core\TypedData\DataDefinition $date */
+    /** @var DataDefinition $date */
     $date = $properties['date'];
     $date->setClass(DateDayComputed::class);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/date_time_day/src/Plugin/Field/FieldFormatter/DateTimeDayDefaultFormatter.php:99

    ---------- begin diff ----------
@@ @@
   /**
    * Formats the date to time format.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $date
+   * @param DrupalDateTime $date
    *   The date to format to time.
    *
    * @return string
@@ @@
   /**
    * Creates a render array from a date object with time attribute.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $dateTime
+   * @param DrupalDateTime $dateTime
    *   A date object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/date_time_day/src/DateTimeDayComputed.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\date_time_day;

+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\date_time_day\Plugin\Field\FieldType\DateTimeDayItem;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\TypedData\DataDefinitionInterface;
@@ @@
       return $this->date;
     }

-    /** @var \Drupal\Core\Field\FieldItemInterface $item */
+    /** @var FieldItemInterface $item */
     $item = $this->getParent();
     $value = $item->{($this->definition->getSetting('date source'))};
     $datetime_type = $item->getFieldDefinition()->getSetting('time_type');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/date_time_day/src/DateDayComputed.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\date_time_day;

+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\TypedData\DataDefinitionInterface;
 use Drupal\Core\TypedData\TypedDataInterface;
@@ @@
       return $this->date;
     }

-    /** @var \Drupal\Core\Field\FieldItemInterface $item */
+    /** @var FieldItemInterface $item */
     $item = $this->getParent();
     $value = $item->{($this->definition->getSetting('date source'))};
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

