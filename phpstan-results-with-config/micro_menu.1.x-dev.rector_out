modules/contrib/micro_menu/micro_menu.install
modules/contrib/micro_menu/micro_menu.module
modules/contrib/micro_menu/src/Access/SiteMenuAccess.php
modules/contrib/micro_menu/src/Form/SiteMenuForm.php
modules/contrib/micro_menu/src/Menu/SiteMenuLocalTask.php
modules/contrib/micro_menu/src/Plugin/Block/MicroMenuBlock.php
modules/contrib/micro_menu/src/ResponsiveMenuConfigOverrides.php
modules/contrib/micro_menu/src/Routing/RouteProcessor.php
modules/contrib/micro_menu/tests/src/Functional/LoadTest.php

7 files with changes
====================

1) modules/contrib/micro_menu/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\micro_menu\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\micro_site\Functional\MicroSiteBase;
@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/micro_menu/src/Routing/RouteProcessor.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The request stack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Constructs a RouteProcessor object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack object.
    */
   function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, RequestStack $requestStack) {
@@ @@

     if (in_array($route_name, $routes_to_check)) {
       $request = $this->requestStack->getCurrentRequest();
-      /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+      /** @var SiteInterface $site */
       $site = $request->get('site');
-      /** @var \Drupal\system\MenuInterface $menu */
+      /** @var MenuInterface $menu */
       $menu = $request->get('menu');

       // @TODO test if the active site is retrieved when we are on the site url.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/micro_menu/src/ResponsiveMenuConfigOverrides.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micro_menu;

+use Drupal\micro_site\SiteNegotiatorInterface;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\ConfigFactoryOverrideInterface;
@@ @@
   /**
    * The active micro site or NULL.
    *
-   * @var \Drupal\micro_site\Entity\SiteInterface|NULL
+   * @var SiteInterface|NULL
    */
   protected $activeSite = NULL;

@@ @@
     // I don't use here a dependency injection because of a
     // CircularReferenceException thrown when injecting the negotiator.
     if (is_null($this->activeSite)) {
-      /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+      /** @var SiteNegotiatorInterface $negotiator */
       $negotiator = \Drupal::service('micro_site.negotiator');
-      /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+      /** @var SiteInterface $site */
       $this->activeSite = $negotiator->getActiveSite();
     }
     return $this->activeSite;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/micro_menu/src/Plugin/Block/MicroMenuBlock.php:22

    ---------- begin diff ----------
@@ @@
 class MicroMenuBlock extends BlockBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuTree;

@@ @@
   protected $menuName;

   /**
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;

@@ @@
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menuTree
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param MenuLinkTreeInterface $menuTree
+   * @param SiteNegotiatorInterface $site_negotiator
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MenuLinkTreeInterface $menuTree, SiteNegotiatorInterface $site_negotiator)  {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/micro_menu/src/Form/SiteMenuForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micro_menu\Form;

+use Drupal\micro_site\Entity\SiteInterface;
+use Drupal\system\MenuInterface;
+use Drupal\menu_link_content\Plugin\Menu\MenuLinkContent;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Url;
@@ @@
   /**
    * The site entity.
    *
-   * @var \Drupal\micro_site\Entity\SiteInterface|NULL
+   * @var SiteInterface|NULL
    */
   protected $site;

@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\system\MenuInterface $menu */
+    /** @var MenuInterface $menu */
     $menu = $this->entity;
     // We check if we are in a site entity context, and so get the site
     // parameter into the route, which is the site id.
@@ @@
     $elements = &$form['links']['links'];
     foreach (Element::children($elements) as $key) {
       if (isset($elements[$key]['#item'])) {
-        /** @var \Drupal\menu_link_content\Plugin\Menu\MenuLinkContent $menu_link_plugin */
+        /** @var MenuLinkContent $menu_link_plugin */
         $menu_link_plugin = $elements[$key]['#item']->link;
         $uuid = $menu_link_plugin->getDerivativeId();
         $entity = $this->entityManager->loadEntityByUuid('menu_link_content', $uuid);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/micro_menu/src/Access/SiteMenuAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micro_menu\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
   /**
    * Checks access to the entity operation on the given route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\system\MenuInterface $menu
+   * @param MenuInterface $menu
    *   The menu on which check access.
-   * @param \Drupal\micro_site\Entity\SiteInterface $site
+   * @param SiteInterface $site
    *   The site entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account, MenuInterface $menu, SiteInterface $site = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/micro_menu/micro_menu.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\menu_link_content\Entity\MenuLinkContent;
+use Drupal\node\NodeTypeInterface;
+use Drupal\micro_site\SiteNegotiatorInterface;
 /**
  * @file
  * Contains micro_menu.module.
@@ @@
  * Implements hook_ENTITY_TYPE_insert().
  */
 function micro_menu_site_insert(EntityInterface $entity) {
-  /** @var \Drupal\micro_site\Entity\SiteInterface $entity */
+  /** @var SiteInterface $entity */
   if (!$entity->hasMenu()) {
     return;
   }
   $site_menu = $entity->getSiteMenu();
   if (empty($site_menu)) {
-    /** @var \Drupal\system\Entity\Menu $menu */
+    /** @var Menu $menu */
     $menu = Menu::create([
       'id' => 'site-' . $entity->id(),
       'label' => 'Menu ' . $entity->label(),
@@ @@
  * Implements hook_ENTITY_TYPE_insert().
  */
 function micro_menu_site_update(EntityInterface $entity) {
-  /** @var \Drupal\micro_site\Entity\SiteInterface $entity */
+  /** @var SiteInterface $entity */
   if (!$entity->hasMenu()) {
     return;
   }
   $site_menu = $entity->getSiteMenu();
   if (empty($site_menu)) {
-    /** @var \Drupal\system\Entity\Menu $menu */
+    /** @var Menu $menu */
     $menu = Menu::create([
       'id' => 'site-' . $entity->id(),
       'label' => 'Menu ' . $entity->label(),
@@ @@
  */
 function micro_menu_menu_link_content_access(EntityInterface $entity, $operation, AccountInterface $account) {
   $site = NULL;
-  /** @var \Drupal\menu_link_content\Entity\MenuLinkContent $entity */
+  /** @var MenuLinkContent $entity */
   $menu_name = $entity->getMenuName();
   $menu = Menu::load($menu_name);
   if ($menu instanceof MenuInterface) {
@@ @@
 function micro_menu_form_node_form_alter(&$form, FormStateInterface $form_state) {
   $account = \Drupal::currentUser();
   $node = $form_state->getFormObject()->getEntity();
-  /** @var \Drupal\node\NodeTypeInterface $node_type */
+  /** @var NodeTypeInterface $node_type */
   $node_type = $node->type->entity;
-  /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+  /** @var SiteNegotiatorInterface $negotiator */
   $negotiator = \Drupal::service('micro_site.negotiator');
   $site = $negotiator->getSite();
   if (!$site instanceof SiteInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

