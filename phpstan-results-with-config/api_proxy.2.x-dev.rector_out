modules/contrib/api_proxy/src/Annotation/HttpApi.php
modules/contrib/api_proxy/src/ApiProxyPermissions.php
modules/contrib/api_proxy/src/Controller/Forwarder.php
modules/contrib/api_proxy/src/EventSubscriber/OptionsRequestSubscriber.php
modules/contrib/api_proxy/src/Form/ApiProxyForm.php
modules/contrib/api_proxy/src/Form/SettingsForm.php
modules/contrib/api_proxy/src/ParamConverter/HttpApiProxyConverter.php
modules/contrib/api_proxy/src/Plugin/HttpApiInterface.php
modules/contrib/api_proxy/src/Plugin/HttpApiPluginBase.php
modules/contrib/api_proxy/src/Plugin/HttpApiPluginManager.php
modules/contrib/api_proxy/src/Plugin/api_proxy/HttpApiCommonConfigs.php

10 files with changes
=====================

1) modules/contrib/api_proxy/src/Plugin/HttpApiPluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Instantiates all the HTTP API plugins.
    *
-   * @return \Drupal\api_proxy\Plugin\HttpApiPluginBase[]
+   * @return HttpApiPluginBase[]
    *   The plugin instances.
    */
   public function getHttpApis($plugin_ids = NULL): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/api_proxy/src/Plugin/HttpApiPluginBase.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   private $client;

@@ @@
   /**
    * Translates between Symfony and PRS objects.
    *
-   * @var \Symfony\Bridge\PsrHttpMessage\HttpFoundationFactoryInterface
+   * @var HttpFoundationFactoryInterface
    */
   private $foundationFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/api_proxy/src/Plugin/HttpApiInterface.php:27

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The configuration form to alter for the this plugin settings.
-   * @param \Drupal\Core\Form\SubformStateInterface $form_state
+   * @param SubformStateInterface $form_state
    *   The form state for the plugin settings.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/api_proxy/src/ParamConverter/HttpApiProxyConverter.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\api_proxy\Plugin\HttpApiPluginManager
+   * @var HttpApiPluginManager
    */
   private $pluginManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/api_proxy/src/Form/SettingsForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin manager for the HTTP API proxies.
    *
-   * @var \Drupal\api_proxy\Plugin\HttpApiPluginManager
+   * @var HttpApiPluginManager
    */
   private $apiProxyManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function __construct(ConfigFactoryInterface $config_factory, HttpApiPluginManager $api_proxy_manager) {
+  public function __construct(ConfigFactoryInterface $config_factory, HttpApiPluginManager $api_proxy_manager, HttpApiPluginManager $apiProxyManager) {
     $this->setConfigFactory($config_factory);
     $this->apiProxyManager = $api_proxy_manager;
+    $this->apiProxyManager = $apiProxyManager;
   }

   /**
@@ @@
   public static function create(ContainerInterface $container) {
     return new static(
       $container->get('config.factory'),
-      $container->get(HttpApiPluginManager::class)
+      $this->apiProxyManager
     );
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/api_proxy/src/Form/ApiProxyForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The HTTP API proxy plugin manager.
    *
-   * @var \Drupal\api_proxy\Plugin\HttpApiPluginManager
+   * @var HttpApiPluginManager
    */
   private $apiProxyManager;
+  public function __construct(HttpApiPluginManager $apiProxyManager)
+  {
+      $this->apiProxyManager = $apiProxyManager;
+  }

   /**
    * {@inheritdoc}
@@ @@
   public static function create(ContainerInterface $container): self {
     /** @var \Drupal\api_proxy\Form\ApiProxyForm $form_object */
     $form_object = parent::create($container);
-    $form_object->setApiProxyManager($container->get(HttpApiPluginManager::class));
+    $form_object->setApiProxyManager($this->apiProxyManager);

     return $form_object;
   }
@@ @@
   /**
    * Set the HTTP API proxy manager.
    *
-   * @param \Drupal\api_proxy\Plugin\HttpApiPluginManager $api_proxy_manager
+   * @param HttpApiPluginManager $api_proxy_manager
    *   The plugin manager.
    */
   public function setApiProxyManager(HttpApiPluginManager $api_proxy_manager): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/api_proxy/src/EventSubscriber/OptionsRequestSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\api_proxy\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\api_proxy\Controller\Forwarder;
 use Drupal\api_proxy\Plugin\HttpApiPluginBase;
 use Drupal\Core\Cache\CacheableMetadata;
@@ @@
 use Drupal\Core\Config\ImmutableConfig;
 use Symfony\Cmf\Component\Routing\RouteProviderInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The route provider.
    *
-   * @var \Symfony\Cmf\Component\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The decorated service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventSubscriberInterface
+   * @var EventSubscriberInterface
    */
   protected $subject;

@@ @@
   /**
    * Creates a new OptionsRequestSubscriber instance.
    *
-   * @param \Symfony\Cmf\Component\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
    * @param \Symfony\Component\EventDispatcher\EventSubscriberInterface
    *   The decorated service.
@@ @@
   /**
    * Tries to handle the options request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The request event.
    */
-  public function onRequest(GetResponseEvent $event) {
+  public function onRequest(RequestEvent $event) {
     $request = $event->getRequest();
     $routes = $this->routeProvider->getRouteCollectionForRequest($event->getRequest());
     if ($request->getMethod() !== 'OPTIONS') {
@@ @@
    * @param string $config_id
    *   The config ID.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The immutable configuration object.
    *
    * @todo: use dependency injection to pass the configFactory.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/api_proxy/src/Controller/Forwarder.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * Forwards incoming requests to the connected API.
    *
-   * @param \Drupal\api_proxy\Plugin\HttpApiInterface $api_proxy
+   * @param HttpApiInterface $api_proxy
    *   The API proxy plugin.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The incoming request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response object.
    */
   public function forward(HttpApiInterface $api_proxy, Request $request): Response {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/api_proxy/src/ApiProxyPermissions.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The API Proxy resource plugin manager.
    *
-   * @var \Drupal\api_proxy\Plugin\HttpApiPluginManager
+   * @var HttpApiPluginManager
    */
   private $proxyPluginManager;

@@ @@
   /**
    * Constructs a new ApiProxyPermissions instance.
    *
-   * @param \Drupal\api_proxy\Plugin\HttpApiPluginManager $proxy_plugin_manager
+   * @param HttpApiPluginManager $proxy_plugin_manager
    *   The HTTP API proxy plugin manager.
    */
-  public function __construct(HttpApiPluginManager $proxy_plugin_manager) {
+  public function __construct(HttpApiPluginManager $proxy_plugin_manager, HttpApiPluginManager $proxyPluginManager) {
     $this->proxyPluginManager = $proxy_plugin_manager;
+    $this->proxyPluginManager = $proxyPluginManager;
   }

   /**
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    return new static($container->get(HttpApiPluginManager::class));
+    return new static($this->proxyPluginManager);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * ContainerGetToConstructorInjectionRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/api_proxy/src/Annotation/HttpApi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\api_proxy\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the formatter type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A short description of the formatter type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 10 files have been changed by Rector                                      

