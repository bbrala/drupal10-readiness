diff --git a/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataConverterTest.php b/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataConverterTest.php
index d23f6df..cdea4cd 100644
--- a/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataConverterTest.php
+++ b/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataConverterTest.php
@@ -137,10 +137,7 @@ class AcquiaCohesionDataConverterTest extends SmartlingTestBase {
 
     $acquiaDataConverter = new AcquiaCohesionDataConverter($this->loggerMock);
 
-    $this->assertEqual(
-      $acquiaDataConverter->findAndConvertCohesionJsonDataToCohesionXmlData($input),
-      $expected
-    );
+    $this->assertEquals($acquiaDataConverter->findAndConvertCohesionJsonDataToCohesionXmlData($input), $expected);
   }
 
   public function testXmlToJsonTransformation() {
@@ -247,11 +244,8 @@ class AcquiaCohesionDataConverterTest extends SmartlingTestBase {
         ]
     ];
 
-    $this->assertEqual(
-      $acquiaDataConverter->findAndConvertCohesionXmlDataToCohesionJsonData(
-        $input
-      ),
-      $expected
-    );
+    $this->assertEquals($acquiaDataConverter->findAndConvertCohesionXmlDataToCohesionJsonData(
+      $input
+    ), $expected);
   }
 }
diff --git a/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataSuggesterTest.php b/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataSuggesterTest.php
index fa63a74..9c6c463 100644
--- a/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataSuggesterTest.php
+++ b/modules/tmgmt_smartling_acquia_cohesion/tests/src/Kernel/AcquiaCohesionDataSuggesterTest.php
@@ -78,24 +78,12 @@ class AcquiaCohesionDataSuggesterTest extends SmartlingTestBase {
 
     $result = $acquiaDataSuggester->suggestCohesionContentComponents([$jobItemMock]);
 
-    $this->assertEqual(
-      count($result),
-      1
-    );
+    $this->assertEquals(count($result), 1);
 
-    $this->assertEqual(
-      $result[0]["from_item"],
-      1
-    );
+    $this->assertEquals($result[0]["from_item"], 1);
 
-    $this->assertEqual(
-      $result[0]["job_item"] instanceof JobItemInterface,
-      true
-    );
+    $this->assertEquals($result[0]["job_item"] instanceof JobItemInterface, true);
 
-    $this->assertEqual(
-      (string) $result[0]["reason"],
-      "Referenced content component"
-    );
+    $this->assertEquals((string) $result[0]["reason"], "Referenced content component");
   }
 }
diff --git a/modules/tmgmt_smartling_context_debug/src/Form/TmgmtSmartlingContextDebugForm.php b/modules/tmgmt_smartling_context_debug/src/Form/TmgmtSmartlingContextDebugForm.php
index aed607e..e5df3a1 100644
--- a/modules/tmgmt_smartling_context_debug/src/Form/TmgmtSmartlingContextDebugForm.php
+++ b/modules/tmgmt_smartling_context_debug/src/Form/TmgmtSmartlingContextDebugForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_smartling_context_debug\Form;
 
+use Drupal\tmgmt_smartling\Context\ContextUploader;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -97,7 +98,7 @@ class TmgmtSmartlingContextDebugForm extends FormBase {
     $url = $form_state->getValue('url');
     $current_user_name = \Drupal::currentUser()->getAccountName();
 
-    /** @var \Drupal\tmgmt_smartling\Context\ContextUploader $context_uploader */
+    /** @var ContextUploader $context_uploader */
     $context_uploader = \Drupal::getContainer()->get('tmgmt_smartling.utils.context.uploader');
 
     if ($form_state->getValue('do_direct_output')) {
diff --git a/modules/tmgmt_smartling_log_settings/tests/src/Functional/TmgmtSmartlingLogSettingsTest.php b/modules/tmgmt_smartling_log_settings/tests/src/Functional/TmgmtSmartlingLogSettingsTest.php
index a95acfd..3b4616c 100644
--- a/modules/tmgmt_smartling_log_settings/tests/src/Functional/TmgmtSmartlingLogSettingsTest.php
+++ b/modules/tmgmt_smartling_log_settings/tests/src/Functional/TmgmtSmartlingLogSettingsTest.php
@@ -28,7 +28,7 @@ class TmgmtSmartlingLogSettingsTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $admin_user = $this->drupalCreateUser(['administer site configuration']);
@@ -39,7 +39,8 @@ class TmgmtSmartlingLogSettingsTest extends BrowserTestBase {
    * Tests the tmgmt_smartling_log_settings settings page.
    */
   public function testValidSettingsNotEmptyConfig() {
-    $this->drupalPostForm('admin/config/development/logging', ['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api: info\r\ntmgmt_smartling: notice"], t('Save configuration'));
+    $this->drupalGet('admin/config/development/logging');
+    $this->submitForm(['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api: info\r\ntmgmt_smartling: notice"], t('Save configuration'));
     $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
   }
 
@@ -47,7 +48,8 @@ class TmgmtSmartlingLogSettingsTest extends BrowserTestBase {
    * Tests the tmgmt_smartling_log_settings settings page: empty config.
    */
   public function testValidSettingsEmptyConfig() {
-    $this->drupalPostForm('admin/config/development/logging', ['tmgmt_smartling_log_settings_severity_mapping' => ""], t('Save configuration'));
+    $this->drupalGet('admin/config/development/logging');
+    $this->submitForm(['tmgmt_smartling_log_settings_severity_mapping' => ""], t('Save configuration'));
     $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
   }
 
@@ -55,7 +57,8 @@ class TmgmtSmartlingLogSettingsTest extends BrowserTestBase {
    * Tests the tmgmt_smartling_log_settings settings page: invalid yaml.
    */
   public function testSettingsInvalidYaml() {
-    $this->drupalPostForm('admin/config/development/logging', ['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api: info\r\n- tmgmt_smartling: notice"], t('Save configuration'));
+    $this->drupalGet('admin/config/development/logging');
+    $this->submitForm(['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api: info\r\n- tmgmt_smartling: notice"], t('Save configuration'));
     $this->assertSession()->pageTextContains(t('Config must be a valid yaml.'));
   }
 
@@ -63,7 +66,8 @@ class TmgmtSmartlingLogSettingsTest extends BrowserTestBase {
    * Tests the tmgmt_smartling_log_settings settings page: not array.
    */
   public function testSettingsInvalidConfigNotArray() {
-    $this->drupalPostForm('admin/config/development/logging', ['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api info"], t('Save configuration'));
+    $this->drupalGet('admin/config/development/logging');
+    $this->submitForm(['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api info"], t('Save configuration'));
     $this->assertSession()->pageTextContains(t('Invalid config format.'));
   }
 
@@ -71,7 +75,8 @@ class TmgmtSmartlingLogSettingsTest extends BrowserTestBase {
    * Tests the tmgmt_smartling_log_settings settings page: keys are not strings.
    */
   public function testSettingsInvalidConfigKeysAreNotStrings() {
-    $this->drupalPostForm('admin/config/development/logging', ['tmgmt_smartling_log_settings_severity_mapping' => "- smartling_api: info\r\n- tmgmt_smartling: notice"], t('Save configuration'));
+    $this->drupalGet('admin/config/development/logging');
+    $this->submitForm(['tmgmt_smartling_log_settings_severity_mapping' => "- smartling_api: info\r\n- tmgmt_smartling: notice"], t('Save configuration'));
     $this->assertSession()->pageTextContains(t('Invalid config format.'));
   }
 
@@ -79,7 +84,8 @@ class TmgmtSmartlingLogSettingsTest extends BrowserTestBase {
    * Tests the tmgmt_smartling_log_settings settings page: values are not strings.
    */
   public function testSettingsInvalidConfigOneOrMoreValuesAreNotValidSeverityLevel() {
-    $this->drupalPostForm('admin/config/development/logging', ['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api: info\r\ntmgmt_smartling: severity_level"], t('Save configuration'));
+    $this->drupalGet('admin/config/development/logging');
+    $this->submitForm(['tmgmt_smartling_log_settings_severity_mapping' => "smartling_api: info\r\ntmgmt_smartling: severity_level"], t('Save configuration'));
     $this->assertSession()->pageTextContains(t('Invalid config format.'));
   }
 
diff --git a/modules/tmgmt_smartling_log_settings/tests/src/Kernel/TmgmtSmartlingLogSettingsTest.php b/modules/tmgmt_smartling_log_settings/tests/src/Kernel/TmgmtSmartlingLogSettingsTest.php
index fe4e797..37c603c 100644
--- a/modules/tmgmt_smartling_log_settings/tests/src/Kernel/TmgmtSmartlingLogSettingsTest.php
+++ b/modules/tmgmt_smartling_log_settings/tests/src/Kernel/TmgmtSmartlingLogSettingsTest.php
@@ -16,7 +16,7 @@ class TmgmtSmartlingLogSettingsTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['syslog', 'tmgmt_smartling_log_settings']);
   }
diff --git a/src/Context/ContextUploader.php b/src/Context/ContextUploader.php
index cee6940..780d9e3 100644
--- a/src/Context/ContextUploader.php
+++ b/src/Context/ContextUploader.php
@@ -67,7 +67,7 @@ class ContextUploader {
    * @param bool $debug
    *
    * @return mixed|string|void
-   * @throws \Drupal\tmgmt_smartling\Exceptions\EmptyContextParameterException
+   * @throws EmptyContextParameterException
    * @throws Exception
    */
   public function getContextualizedPage($url, array $settings, $debug = FALSE) {
@@ -98,7 +98,7 @@ class ContextUploader {
    * @param string $filename
    * @param array $proj_settings
    * @return bool
-   * @throws \Drupal\tmgmt_smartling\Exceptions\EmptyContextParameterException
+   * @throws EmptyContextParameterException
    */
   public function upload($url, $filename = '', $proj_settings = []) {
     $response = [];
@@ -126,7 +126,7 @@ class ContextUploader {
 
       // Save context file.
       if (\Drupal::service('file_system')->prepareDirectory($smartling_context_directory, FileSystemInterface::CREATE_DIRECTORY) &&
-          ($file = file_save_data($html, $smartling_context_file, FileSystemInterface::EXISTS_REPLACE))
+          ($file = \Drupal::service('file.repository')->writeData($html, $smartling_context_file, FileSystemInterface::EXISTS_REPLACE))
       ) {
         $response = $this->uploadContextBody($url, $file, $proj_settings, $filename);
         $this->uploadContextMissingResources($smartling_context_directory, $proj_settings);
@@ -291,7 +291,7 @@ class ContextUploader {
             // be able to fopen() resource which is behind basic auth. So
             // download it first (with a help of curl), save it to smartling's
             // directory and then upload.
-            if ($file = file_save_data($smartling_context_resource_file_content, $smartling_context_resource_file, FileSystemInterface::EXISTS_REPLACE)) {
+            if ($file = \Drupal::service('file.repository')->writeData($smartling_context_resource_file_content, $smartling_context_resource_file, FileSystemInterface::EXISTS_REPLACE)) {
               $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager')->getViaUri($file->getFileUri());
               $params = new UploadResourceParameters();
               $params->setFile($stream_wrapper_manager->realpath());
diff --git a/src/Context/ContextUserAuth.php b/src/Context/ContextUserAuth.php
index 397e023..fc7a52b 100644
--- a/src/Context/ContextUserAuth.php
+++ b/src/Context/ContextUserAuth.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tmgmt_smartling\Context;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\tmgmt_smartling\Exceptions\WrongUsernameException;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -15,28 +17,28 @@ class ContextUserAuth {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
   /**
    * The user storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;
 
   /**
    * The session manager service.
    *
-   * @var \Drupal\Core\Session\SessionManagerInterface
+   * @var SessionManagerInterface
    */
   protected $sessionManager;
 
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\Session
+   * @var Session
    */
   protected $session;
 
@@ -48,17 +50,17 @@ class ContextUserAuth {
   /**
    * Constructs a new SwitchUserController object
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_manager
+   * @param EntityTypeManager $entity_manager
    *   The user storage.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The user storage.
-   * @param \Drupal\Core\Session\SessionManagerInterface $session_manager
+   * @param SessionManagerInterface $session_manager
    *   The session manager service.
-   * @param \Symfony\Component\HttpFoundation\Session\Session $session
+   * @param Session $session
    *   The session.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    */
   public function __construct(
     AccountProxyInterface $account,
@@ -82,7 +84,7 @@ class ContextUserAuth {
    * @param string $name
    * @param bool $context_silent_user_switching
    * @return string
-   * @throws \Drupal\tmgmt_smartling\Exceptions\WrongUsernameException
+   * @throws WrongUsernameException
    */
   public function getCookies($name, $context_silent_user_switching = FALSE) {
     if ($this->account->getAccountName() !== $name) {
@@ -97,19 +99,19 @@ class ContextUserAuth {
   }
 
   /**
-   * Switches to a different user.
-   *
-   * We don't call session_save_session() because we really want to change users.
-   * Usually unsafe!
-   *
-   * @param string $name
-   *   The username to switch to, or NULL to log out.
-   * @param bool $context_silent_user_switching
-   *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse.
-   * A redirect response object.
-   * @throws \Drupal\tmgmt_smartling\Exceptions\WrongUsernameException
-   */
+  * Switches to a different user.
+  *
+  * We don't call session_save_session() because we really want to change users.
+  * Usually unsafe!
+  *
+  * @param string $name
+  *   The username to switch to, or NULL to log out.
+  * @param bool $context_silent_user_switching
+  *
+   * @return RedirectResponse .
+  A redirect response object.
+   * @throws WrongUsernameException
+  */
   public function switchUser($name = NULL, $context_silent_user_switching = FALSE) {
     $this->logger->info(
       'We are about to switch user from "@user1" to "@user2"',
diff --git a/src/Event/AfterFileDownloadEvent.php b/src/Event/AfterFileDownloadEvent.php
index 4f8bafb..e890b33 100644
--- a/src/Event/AfterFileDownloadEvent.php
+++ b/src/Event/AfterFileDownloadEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tmgmt_smartling\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 class AfterFileDownloadEvent extends Event implements JobBasedEventInterface {
   use JobBasedEventTrait;
diff --git a/src/Event/JobBasedEventInterface.php b/src/Event/JobBasedEventInterface.php
index 2f63f4a..e51bfc5 100644
--- a/src/Event/JobBasedEventInterface.php
+++ b/src/Event/JobBasedEventInterface.php
@@ -2,12 +2,13 @@
 
 namespace Drupal\tmgmt_smartling\Event;
 
+use Drupal\tmgmt\JobInterface;
 interface JobBasedEventInterface {
 
   /**
    * Returns the TMGMT job in question.
    *
-   * @return \Drupal\tmgmt\JobInterface
+   * @return JobInterface
    */
   public function getJob();
 
diff --git a/src/Event/JobBasedEventTrait.php b/src/Event/JobBasedEventTrait.php
index e0c8c0f..9b6eb98 100644
--- a/src/Event/JobBasedEventTrait.php
+++ b/src/Event/JobBasedEventTrait.php
@@ -9,14 +9,14 @@ trait JobBasedEventTrait {
   /**
    * New TMGMT Job.
    *
-   * @var \Drupal\tmgmt\JobInterface
+   * @var JobInterface
    */
   protected $job;
 
   /**
    * Constructs an AfterFileDownloadEvent object.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The translation job for the file that was downloaded.
    */
   public function __construct(JobInterface $job) {
diff --git a/src/Event/RequestTranslationEvent.php b/src/Event/RequestTranslationEvent.php
index 79b2a16..e32a553 100644
--- a/src/Event/RequestTranslationEvent.php
+++ b/src/Event/RequestTranslationEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tmgmt_smartling\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 class RequestTranslationEvent extends Event implements JobBasedEventInterface {
   use JobBasedEventTrait;
diff --git a/src/EventSubscriber/ConfigEventsSubscriber.php b/src/EventSubscriber/ConfigEventsSubscriber.php
index 3847b63..7ed7947 100644
--- a/src/EventSubscriber/ConfigEventsSubscriber.php
+++ b/src/EventSubscriber/ConfigEventsSubscriber.php
@@ -22,7 +22,7 @@ class ConfigEventsSubscriber implements EventSubscriberInterface {
   /**
    * ConfigEventsSubscriber constructor.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidator $cacheInvalidator
+   * @param CacheTagsInvalidator $cacheInvalidator
    */
   public function __construct(CacheTagsInvalidator $cacheInvalidator) {
     $this->cacheInvalidator = $cacheInvalidator;
diff --git a/src/Form/SendContextActionApproveForm.php b/src/Form/SendContextActionApproveForm.php
index 1b106fb..7e97481 100644
--- a/src/Form/SendContextActionApproveForm.php
+++ b/src/Form/SendContextActionApproveForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_smartling\Form;
 
+use Drupal\node\NodeInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -28,42 +29,42 @@ class SendContextActionApproveForm extends ConfirmFormBase {
   /**
    * The temp store factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The shared store factory.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStoreFactory
+   * @var SharedTempStoreFactory
    */
   protected $sharedStoreFactory;
 
   /**
    * Context user auth.
    *
-   * @var \Drupal\tmgmt_smartling\Context\ContextUserAuth
+   * @var ContextUserAuth
    */
   protected $contextUserAuth;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The upload queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
@@ -84,15 +85,15 @@ class SendContextActionApproveForm extends ConfirmFormBase {
   /**
    * Constructs a new UserMultipleCancelConfirm.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The temp store factory.
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $shared_store_factory
-   * @param \Drupal\tmgmt_smartling\Context\ContextUserAuth $context_user_auth
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param SharedTempStoreFactory $shared_store_factory
+   * @param ContextUserAuth $context_user_auth
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager service.
-   * @param \Drupal\Core\Queue\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The upload queue.
    */
   public function __construct(
@@ -171,7 +172,7 @@ class SendContextActionApproveForm extends ConfirmFormBase {
     if ($number_of_entity_types == 1) {
       $entity_type = array_values($entity_ids)[0];
       $ids = array_keys($entity_ids);
-      /** @var \Drupal\node\NodeInterface[] $nodes */
+      /** @var NodeInterface[] $nodes */
       $entities = $this->entityTypeManager->getStorage($entity_type)
         ->loadMultiple($ids);
     } else {
diff --git a/src/Logger/BufferLogger.php b/src/Logger/BufferLogger.php
index b4203c8..441fb11 100644
--- a/src/Logger/BufferLogger.php
+++ b/src/Logger/BufferLogger.php
@@ -146,7 +146,7 @@ class BufferLogger implements LoggerInterface {
   /**
    * Setter for config manager.
    *
-   * @param \Drupal\tmgmt_smartling\Smartling\ConfigManager\SmartlingConfigManager $config_manager
+   * @param SmartlingConfigManager $config_manager
    */
   public function setConfigManager(SmartlingConfigManager $config_manager) {
     $this->configManager = $config_manager;
diff --git a/src/Plugin/Action/SendContextAction.php b/src/Plugin/Action/SendContextAction.php
index 249335f..660f81b 100644
--- a/src/Plugin/Action/SendContextAction.php
+++ b/src/Plugin/Action/SendContextAction.php
@@ -30,14 +30,14 @@ class SendContextAction extends ActionBase implements ContainerFactoryPluginInte
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -50,9 +50,9 @@ class SendContextAction extends ActionBase implements ContainerFactoryPluginInte
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
    */
   public function __construct(
@@ -99,7 +99,7 @@ class SendContextAction extends ActionBase implements ContainerFactoryPluginInte
   public function executeMultiple(array $entities) {
     $ids = [];
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     foreach ($entities as $entity) {
       $ids[$entity->id()] = $entity->getEntityTypeId();
     }
diff --git a/src/Plugin/QueueWorker/ContextUpload.php b/src/Plugin/QueueWorker/ContextUpload.php
index be170fd..d21fc94 100644
--- a/src/Plugin/QueueWorker/ContextUpload.php
+++ b/src/Plugin/QueueWorker/ContextUpload.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tmgmt_smartling\Plugin\QueueWorker;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Config\Config;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ -24,14 +26,14 @@ class ContextUpload extends QueueWorkerBase implements ContainerFactoryPluginInt
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $contextUploader;
 
   /**
    * The queue object.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
@@ -41,7 +43,7 @@ class ContextUpload extends QueueWorkerBase implements ContainerFactoryPluginInt
   protected $logger;
 
   /**
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
@@ -54,11 +56,11 @@ class ContextUpload extends QueueWorkerBase implements ContainerFactoryPluginInt
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\tmgmt_smartling\Context\ContextUploader $context_uploader
+   * @param ContextUploader $context_uploader
    *   The module handler.
-   * @param \Drupal\Core\Queue\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The queue object.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    */
   public function __construct(
     array $configuration,
diff --git a/src/Plugin/tmgmt/Translator/SmartlingTranslator.php b/src/Plugin/tmgmt/Translator/SmartlingTranslator.php
index 06c8269..fb340e7 100755
--- a/src/Plugin/tmgmt/Translator/SmartlingTranslator.php
+++ b/src/Plugin/tmgmt/Translator/SmartlingTranslator.php
@@ -7,6 +7,8 @@
 
 namespace Drupal\tmgmt_smartling\Plugin\tmgmt\Translator;
 
+use Drupal\Core\GeneratedUrl;
+use Drupal\tmgmt\Entity\Job;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -52,22 +54,22 @@ class SmartlingTranslator extends TranslatorPluginBase implements
   ContinuousTranslatorInterface {
 
   /**
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $client;
 
   /**
-   * @var \Drupal\tmgmt_file\Format\FormatManager
+   * @var FormatManager
    */
   protected $formatPluginsManager;
 
   /**
-   * @var \Drupal\file\FileUsage\DatabaseFileUsageBackend
+   * @var DatabaseFileUsageBackend
    */
   protected $fileUsage;
 
   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -96,22 +98,22 @@ class SmartlingTranslator extends TranslatorPluginBase implements
   /**
    * Constructs a LocalActionBase object.
    *
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    *   The Guzzle HTTP client.
-   * @param \Drupal\tmgmt_file\Format\FormatManager $format_plugin_manager
-   * @param \Drupal\file\FileUsage\DatabaseFileUsageBackend $file_usage
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param FormatManager $format_plugin_manager
+   * @param DatabaseFileUsageBackend $file_usage
+   * @param EventDispatcherInterface $event_dispatcher
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
    * @param string $plugin_id
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Psr\Log\LoggerInterface $logger
-   * @param \Drupal\tmgmt_smartling\Smartling\SmartlingApiWrapper $api_wrapper
-   * @param \Drupal\tmgmt_smartling\Smartling\Submission\TranslationRequestManager $translation_request_manager
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param LoggerInterface $logger
+   * @param SmartlingApiWrapper $api_wrapper
+   * @param TranslationRequestManager $translation_request_manager
+   * @param ModuleHandlerInterface $module_handler
+   * @param AccountProxyInterface $current_user
    */
   public function __construct(
     ClientInterface $client,
@@ -190,7 +192,7 @@ class SmartlingTranslator extends TranslatorPluginBase implements
    *
    * @param JobInterface $job
    *
-   * @return Drupal\Core\GeneratedUrl|string
+   * @return GeneratedUrl|string
    */
   private function getCallbackUrl(JobInterface $job) {
     $callback_url = Url::fromRoute('tmgmt_smartling.push_callback', ['job' => $job->id()])->setOptions(['absolute' => TRUE])->toString();
@@ -208,7 +210,7 @@ class SmartlingTranslator extends TranslatorPluginBase implements
 
   /**
    * @param array $settings
-   * @return \Drupal\tmgmt_smartling\Smartling\SmartlingApiWrapper
+   * @return SmartlingApiWrapper
    */
   public function getApiWrapper(array $settings) {
     ConnectorInfo::setUpCurrentClientInfo();
@@ -275,9 +277,9 @@ class SmartlingTranslator extends TranslatorPluginBase implements
 
     if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY)) {
       $data = $export->export($job);
-      $file = file_save_data($data, $path, FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($data, $path, FileSystemInterface::EXISTS_REPLACE);
       $this->fileUsage->add($file, 'tmgmt_smartling', 'tmgmt_job', $job->id());
-      $job->submitted('Exported file can be downloaded <a href="@link">here</a>.', array('@link' => file_create_url($path)));
+      $job->submitted('Exported file can be downloaded <a href="@link">here</a>.', array('@link' => \Drupal::service('file_url_generator')->generateAbsoluteString($path)));
     }
     else {
       $e = new \Exception('It is not possible to create a directory ' . $dirname);
@@ -337,7 +339,7 @@ class SmartlingTranslator extends TranslatorPluginBase implements
         ]);
       }
 
-      $this->eventDispatcher->dispatch(RequestTranslationEvent::REQUEST_TRANSLATION_EVENT, new RequestTranslationEvent($job));
+      $this->eventDispatcher->dispatch(new RequestTranslationEvent($job), RequestTranslationEvent::REQUEST_TRANSLATION_EVENT);
 
       if (!$this->translationRequestManager->commitSuccessfulUpload($job, $translation_request)) {
         $warning_message = 'Can\'t update submitted date for translation request = @translation_request.';
@@ -379,10 +381,10 @@ class SmartlingTranslator extends TranslatorPluginBase implements
    * Array of directives can be altered by `tmgmt_smartling_directives_alter`
    * hook.
    *
-   * @param \Smartling\File\Params\UploadFileParameters $params
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param UploadFileParameters $params
+   * @param JobInterface $job
    *
-   * @return \Smartling\File\Params\UploadFileParameters
+   * @return UploadFileParameters
    */
   protected function addSmartlingDirectives(UploadFileParameters $params, JobInterface $job) {
     $directives = [
@@ -503,7 +505,7 @@ class SmartlingTranslator extends TranslatorPluginBase implements
   /**
    * Returns file name.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    * @return string
    */
   public function getFileName(JobInterface $job) {
@@ -670,7 +672,7 @@ class SmartlingTranslator extends TranslatorPluginBase implements
    * {@inheritdoc}
    */
   public function requestJobItemsTranslation(array $job_items) {
-    /** @var \Drupal\tmgmt\Entity\Job $job */
+    /** @var Job $job */
     $job = reset($job_items)->getJob();
     foreach ($job_items as $job_item) {
       //tmgmt_smartling_download_file($job_item->getJob());
@@ -718,7 +720,7 @@ class SmartlingTranslator extends TranslatorPluginBase implements
   /**
    * Requests translation.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    * @param array $data
    *
    * @return mixed
diff --git a/src/Smartling/BucketJobManager.php b/src/Smartling/BucketJobManager.php
index c4701ac..4c6263a 100644
--- a/src/Smartling/BucketJobManager.php
+++ b/src/Smartling/BucketJobManager.php
@@ -20,22 +20,22 @@ use Smartling\Jobs\JobStatus;
 class BucketJobManager {
 
   /**
-   * @var \Drupal\tmgmt_smartling\Smartling\SmartlingApiWrapper
+   * @var SmartlingApiWrapper
    */
   private $apiWrapper;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;
 
   /**
-   * @var \Drupal\tmgmt_extension_suit\Utils\UniqueQueueItem
+   * @var UniqueQueueItem
    */
   private $uniqueQueueItemUtil;
 
   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
@@ -47,10 +47,10 @@ class BucketJobManager {
   /**
    * BucketJobManager constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
-   * @param \Drupal\tmgmt_smartling\Smartling\SmartlingApiWrapper $api_wrapper
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Drupal\tmgmt_extension_suit\Utils\UniqueQueueItem $unique_queue_item_util
+   * @param LoggerInterface $logger
+   * @param SmartlingApiWrapper $api_wrapper
+   * @param ModuleHandlerInterface $module_handler
+   * @param UniqueQueueItem $unique_queue_item_util
    */
   public function __construct(
     LoggerInterface $logger,
diff --git a/src/Smartling/ConfigManager/FirebaseConfigManager.php b/src/Smartling/ConfigManager/FirebaseConfigManager.php
index e49c81e..8bc4070 100644
--- a/src/Smartling/ConfigManager/FirebaseConfigManager.php
+++ b/src/Smartling/ConfigManager/FirebaseConfigManager.php
@@ -16,24 +16,24 @@ use Drupal\tmgmt_smartling\Smartling\SmartlingApiWrapper;
 class FirebaseConfigManager extends SmartlingConfigManager {
 
   /**
-   * @var \Drupal\tmgmt_smartling\Smartling\SmartlingApiWrapper
+   * @var SmartlingApiWrapper
    */
   protected $apiWrapper;
 
   /**
-   * @var \Drupal\Core\Cache\CacheBackendInterface $defaultCache
+   * @var CacheBackendInterface $defaultCache
    */
   protected $defaultCache;
 
   /**
-   * @param \Drupal\tmgmt_smartling\Smartling\SmartlingApiWrapper $apiWrapper
+   * @param SmartlingApiWrapper $apiWrapper
    */
   public function setSmartlingApiWrapper(SmartlingApiWrapper $apiWrapper) {
     $this->apiWrapper = $apiWrapper;
   }
 
   /**
-   * @param \Drupal\Core\Cache\CacheBackendInterface $defaultCache
+   * @param CacheBackendInterface $defaultCache
    */
   public function setDefaultCache(CacheBackendInterface $defaultCache) {
     $this->defaultCache = $defaultCache;
diff --git a/src/Smartling/ConfigManager/SmartlingConfigManager.php b/src/Smartling/ConfigManager/SmartlingConfigManager.php
index ac3182a..6985ad7 100644
--- a/src/Smartling/ConfigManager/SmartlingConfigManager.php
+++ b/src/Smartling/ConfigManager/SmartlingConfigManager.php
@@ -16,14 +16,14 @@ use Drupal\Core\Config\ConfigFactoryInterface;
 class SmartlingConfigManager {
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * SmartlingConfigManager constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    */
   public function __construct(ConfigFactoryInterface $configFactory) {
     $this->configFactory = $configFactory;
diff --git a/src/Smartling/Submission/TranslationRequestManager.php b/src/Smartling/Submission/TranslationRequestManager.php
index 799a5d7..c2eb70e 100644
--- a/src/Smartling/Submission/TranslationRequestManager.php
+++ b/src/Smartling/Submission/TranslationRequestManager.php
@@ -52,9 +52,9 @@ class TranslationRequestManager {
   /**
    * Submission constructor.
    *
-   * @param \Drupal\tmgmt_smartling\Smartling\SmartlingApiWrapper $apiWrapper
-   * @param \Drupal\Core\State\StateInterface $state
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param SmartlingApiWrapper $apiWrapper
+   * @param StateInterface $state
+   * @param LoggerInterface $logger
    */
   public function __construct(SmartlingApiWrapper $apiWrapper, StateInterface $state, LoggerInterface $logger) {
     $this->apiWrapper = $apiWrapper;
@@ -63,7 +63,7 @@ class TranslationRequestManager {
   }
 
   /**
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    */
   protected function initApiWrapper(JobInterface $job) {
     $this->apiWrapper->setSettings($job->getTranslator()->getSettings());
@@ -72,7 +72,7 @@ class TranslationRequestManager {
   /**
    * Check if job ready for download.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    * @return mixed
    */
   public function isTranslationRequestReadyForDownload(JobInterface $job) {
@@ -107,7 +107,7 @@ class TranslationRequestManager {
   /**
    * Send jobs to Submission service.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    * @return mixed
    */
   public function upsertTranslationRequest(JobInterface $job) {
@@ -128,7 +128,7 @@ class TranslationRequestManager {
   /**
    * Returns translation request.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *
    * @return string
    */
@@ -151,7 +151,7 @@ class TranslationRequestManager {
   /**
    * Creates translation request.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *
    * @return bool
    */
@@ -183,7 +183,7 @@ class TranslationRequestManager {
   /**
    * Updates translation request.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    * @param array $translation_request
    *
    * @return bool
@@ -210,7 +210,7 @@ class TranslationRequestManager {
   }
 
   /**
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    * @param $translation_request
    *
    * @return mixed
@@ -241,7 +241,7 @@ class TranslationRequestManager {
   }
 
   /**
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    * @param array $translation_request
    * @param \Exception $e
    *
@@ -274,7 +274,7 @@ class TranslationRequestManager {
   }
 
   /**
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    * @param array $translation_request
    * @return mixed
    */
diff --git a/src/SmartlingTranslatorUi.php b/src/SmartlingTranslatorUi.php
index 4abdb98..eee13d9 100755
--- a/src/SmartlingTranslatorUi.php
+++ b/src/SmartlingTranslatorUi.php
@@ -34,7 +34,7 @@ class SmartlingTranslatorUi extends TranslatorPluginUiBase {
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildConfigurationForm($form, $form_state);
 
-    /** @var \Drupal\tmgmt\TranslatorInterface $translator */
+    /** @var TranslatorInterface $translator */
     $translator = $form_state->getFormObject()->getEntity();
 
     $form['project_id'] = [
@@ -350,7 +350,7 @@ class SmartlingTranslatorUi extends TranslatorPluginUiBase {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function processSelectedQueues(array &$form, FormStateInterface $form_state) {
     $selected_queues = array_filter($form_state->getValue('queues'));
@@ -411,7 +411,7 @@ class SmartlingTranslatorUi extends TranslatorPluginUiBase {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function runCron(array &$form, FormStateInterface $form_state) {
     if (\Drupal::service('cron')->run()) {
@@ -502,7 +502,7 @@ class SmartlingTranslatorUi extends TranslatorPluginUiBase {
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
     parent::validateConfigurationForm($form, $form_state);
-    /** @var \Drupal\tmgmt\TranslatorInterface $translator */
+    /** @var TranslatorInterface $translator */
     $translator = $form_state->getFormObject()->getEntity();
     $supported_remote_languages = $translator->getPlugin()->getSupportedRemoteLanguages($translator);
 
@@ -594,7 +594,7 @@ class SmartlingTranslatorUi extends TranslatorPluginUiBase {
   /**
    * Returns "Create job" form part.
    *
-   * @param \Drupal\tmgmt\TranslatorInterface $translator
+   * @param TranslatorInterface $translator
    * @return array
    */
   protected function checkoutSettingsCreateJobForm(TranslatorInterface $translator) {
@@ -630,7 +630,7 @@ class SmartlingTranslatorUi extends TranslatorPluginUiBase {
   /**
    * Returns "Add to job" from part.
    *
-   * @param \Drupal\tmgmt\TranslatorInterface $translator
+   * @param TranslatorInterface $translator
    * @param array $statuses
    * @param array $add_to_job_values
    * @return array
diff --git a/tests/src/Functional/BaseFlowTest.php b/tests/src/Functional/BaseFlowTest.php
index d7d127f..e8d6ea0 100644
--- a/tests/src/Functional/BaseFlowTest.php
+++ b/tests/src/Functional/BaseFlowTest.php
@@ -21,16 +21,22 @@ class BaseFlowTest extends SmartlingTestBase {
 
       // Check fr node title before translation (should be same as en title).
       $this->drupalGet("$this->targetLanguage/node/$this->testNodeId");
-      $this->assertResponse(200);
-      $this->assertText($this->testNodeTitle);
+      $this->assertSession()->statusCodeEquals(200);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains($this->testNodeTitle);
 
       // Download translated file.
       $this->downloadAndCheckTranslatedFile($job->id(), $fileName);
 
       // Check translation.
       $this->drupalGet("$this->targetLanguage/node/$this->testNodeId");
-      $this->assertResponse(200);
-      $this->assertNoText($this->testNodeTitle);
+      $this->assertSession()->statusCodeEquals(200);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains($this->testNodeTitle);
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -45,19 +51,33 @@ class BaseFlowTest extends SmartlingTestBase {
    */
   public function testRequestTranslationWhenOneProviderAvailable() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/translators/manage/smartling', $this->smartlingPluginProviderSettings, t('Save'));
-      $this->drupalPostForm('/admin/tmgmt/translators/manage/local/delete', [], t('Delete'));
-      $this->drupalPostForm('/admin/tmgmt/translators/manage/file/delete', [], t('Delete'));
-      $this->drupalPostForm('/admin/tmgmt/translators/manage/test_translator/delete', [], t('Delete'));
+      $this->drupalGet('/admin/tmgmt/translators/manage/smartling');
+      $this->submitForm($this->smartlingPluginProviderSettings, t('Save'));
+      $this->drupalGet('/admin/tmgmt/translators/manage/local/delete');
+      $this->submitForm([], t('Delete'));
+      $this->drupalGet('/admin/tmgmt/translators/manage/file/delete');
+      $this->submitForm([], t('Delete'));
+      $this->drupalGet('/admin/tmgmt/translators/manage/test_translator/delete');
+      $this->submitForm([], t('Delete'));
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
         'target_language' => 'de',
       ], t('Request translation'));
 
-      $this->assertText('One job needs to be checked out.');
-      $this->assertText('Create new job');
-      $this->assertText('Add to job');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains('One job needs to be checked out.');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains('Create new job');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains('Add to job');
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
diff --git a/tests/src/Functional/ContextTest.php b/tests/src/Functional/ContextTest.php
index b93a4e1..1849a83 100644
--- a/tests/src/Functional/ContextTest.php
+++ b/tests/src/Functional/ContextTest.php
@@ -21,21 +21,22 @@ class ContextTest extends SmartlingTestBase {
       $translator = $this->setUpSmartlingProviderSettings($this->smartlingPluginProviderSettings);
       $job = $this->requestTranslationForNode($this->testNodeId, $this->targetLanguage, $translator);
       $fileName = $job->getTranslatorPlugin()->getFileName($job);
-      $this->drupalPostForm('admin/tmgmt/job_items', [
-        'action' => 'tmgmt_smartling_send_context',
-        'tmgmt_job_item_bulk_form[0]' => 'WyJ1bmQiLCIxIl0=',
-      ], t('Apply to selected items'), [
+      $this->drupalGet('admin/tmgmt/job_items', [
         'query' => [
           'state' => 'All',
           'source_language' => 'All',
           'target_language' => 'All',
         ],
       ]);
-      $this->drupalPostForm(NULL, [], t('Send Context to Smartling'));
+      $this->submitForm([
+        'action' => 'tmgmt_smartling_send_context',
+        'tmgmt_job_item_bulk_form[0]' => 'WyJ1bmQiLCIxIl0=',
+      ], t('Apply to selected items'));
+      $this->submitForm([], t('Send Context to Smartling'));
       $this->drupalGet('admin/reports/dblog');
-      $this->assertRaw('We are about to switch user');
-      $this->assertRaw('User was successfully switched');
-      $this->assertRaw(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
+      $this->assertSession()->responseContains('We are about to switch user');
+      $this->assertSession()->responseContains('User was successfully switched');
+      $this->assertSession()->responseContains(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -52,9 +53,9 @@ class ContextTest extends SmartlingTestBase {
       $fileName = $job->getTranslatorPlugin()->getFileName($job);
       $this->cronRun();
       $this->drupalGet('admin/reports/dblog');
-      $this->assertRaw('We are about to switch user');
-      $this->assertRaw('User was successfully switched');
-      $this->assertRaw(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
+      $this->assertSession()->responseContains('We are about to switch user');
+      $this->assertSession()->responseContains('User was successfully switched');
+      $this->assertSession()->responseContains(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -67,12 +68,16 @@ class ContextTest extends SmartlingTestBase {
   public function testSmartlingContextDebuggerShowContext() {
     if (!empty($this->smartlingPluginProviderSettings)) {
       global $base_url;
+      $this->drupalGet('admin/tmgmt/smartling-context-debug');
 
-      $this->drupalPostForm('admin/tmgmt/smartling-context-debug', [
+      $this->submitForm([
         'do_direct_output' => TRUE,
         'url' => 'https://www.smartling.com',
       ], t('Test context'));
-      $this->assertText("Move the World with Words");
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains("Move the World with Words");
       $this->drupalGet('admin/reports/dblog');
     }
     else {
@@ -96,7 +101,10 @@ class ContextTest extends SmartlingTestBase {
       }
 
       $this->drupalGet('admin/tmgmt/smartling-context-debug');
-      $this->assertText('No Smartling configs found. Please create Smartling config first');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains('No Smartling configs found. Please create Smartling config first');
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -109,27 +117,38 @@ class ContextTest extends SmartlingTestBase {
   public function testSmartlingContextDebuggerSendContext() {
     if (!empty($this->smartlingPluginProviderSettings)) {
       global $base_url;
+      $this->drupalGet('admin/tmgmt/translators/manage/smartling');
 
       // Workaround: TmgmtSmartlingContextDebugForm::submitForm() uses global
       // config not provider config:
       // \Drupal::config('tmgmt.translator.smartling')->get('settings');
-      $this->drupalPostForm('admin/tmgmt/translators/manage/smartling', $this->smartlingPluginProviderSettings, t('Save'));
+      $this->submitForm($this->smartlingPluginProviderSettings, t('Save'));
 
       $translator = $this->setUpSmartlingProviderSettings($this->smartlingPluginProviderSettings);
       $job = $this->requestTranslationForNode($this->testNodeId, $this->targetLanguage, $translator);
       $fileName = $job->getTranslatorPlugin()->getFileName($job);
       $this->checkGeneratedFile($fileName, $this->testNodeTitle);
+      $this->drupalGet('admin/tmgmt/smartling-context-debug');
 
-      $this->drupalPostForm('admin/tmgmt/smartling-context-debug', [
+      $this->submitForm([
         'do_direct_output' => FALSE,
         'filename' => $fileName,
         'url' => $base_url . '/node/' . $this->testNodeId,
       ], t('Test context'));
-      $this->assertNoText($this->testNodeTitle);
-      $this->assertNoText($this->testNodeBody);
-      $this->assertText('Smartling response');
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains($this->testNodeTitle);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains($this->testNodeBody);
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains('Smartling response');
       $this->drupalGet('admin/reports/dblog');
-      $this->assertRaw(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
+      $this->assertSession()->responseContains(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -146,15 +165,15 @@ class ContextTest extends SmartlingTestBase {
       $fileName = $job->getTranslatorPlugin()->getFileName($job);
       $this->cronRun();
       $this->drupalGet('admin/reports/dblog');
-      $this->assertRaw('We are about to switch user');
-      $this->assertRaw(t('User @name has logged out.', [
+      $this->assertSession()->responseContains('We are about to switch user');
+      $this->assertSession()->responseContains(t('User @name has logged out.', [
         '@name' => 'Anonymous',
       ]));
-      $this->assertRaw(t('User @name has logged in.', [
+      $this->assertSession()->responseContains(t('User @name has logged in.', [
         '@name' => $this->smartlingPluginProviderSettings['settings[contextUsername]'],
       ]));
-      $this->assertRaw('User was successfully switched');
-      $this->assertRaw(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
+      $this->assertSession()->responseContains('User was successfully switched');
+      $this->assertSession()->responseContains(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -175,15 +194,15 @@ class ContextTest extends SmartlingTestBase {
       $fileName = $job->getTranslatorPlugin()->getFileName($job);
       $this->cronRun();
       $this->drupalGet('admin/reports/dblog');
-      $this->assertRaw('We are about to switch user');
-      $this->assertNoRaw(t('User @name has logged out.', [
+      $this->assertSession()->responseContains('We are about to switch user');
+      $this->assertSession()->responseNotContains(t('User @name has logged out.', [
         '@name' => 'Anonymous',
       ]));
-      $this->assertNoRaw(t('User @name has logged in.', [
+      $this->assertSession()->responseNotContains(t('User @name has logged in.', [
         '@name' => $this->smartlingPluginProviderSettings['settings[contextUsername]'],
       ]));
-      $this->assertRaw('User was successfully switched');
-      $this->assertRaw(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
+      $this->assertSession()->responseContains('User was successfully switched');
+      $this->assertSession()->responseContains(t('Context upload for file @filename completed successfully.', ['@filename' => $fileName]));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -201,17 +220,18 @@ class ContextTest extends SmartlingTestBase {
       $translator = $this->setUpSmartlingProviderSettings($this->smartlingPluginProviderSettings);
       $job = $this->requestTranslationForNode($this->testNodeId, $this->targetLanguage, $translator);
       $fileName = $job->getTranslatorPlugin()->getFileName($job);
-      $this->drupalPostForm('admin/tmgmt/job_items', [
-        'action' => 'tmgmt_smartling_send_context',
-        'tmgmt_job_item_bulk_form[0]' => 'WyJ1bmQiLCIxIl0=',
-      ], t('Apply to selected items'), [
+      $this->drupalGet('admin/tmgmt/job_items', [
         'query' => [
           'state' => 'All',
           'source_language' => 'All',
           'target_language' => 'All',
         ],
       ]);
-      $this->drupalPostForm(NULL, [], t('Send Context to Smartling'));
+      $this->submitForm([
+        'action' => 'tmgmt_smartling_send_context',
+        'tmgmt_job_item_bulk_form[0]' => 'WyJ1bmQiLCIxIl0=',
+      ], t('Apply to selected items'));
+      $this->submitForm([], t('Send Context to Smartling'));
 
       $fileName = str_replace('.', '_', $fileName);
       $file_path = \Drupal::getContainer()->get('file_system')->realpath(\Drupal::config('system.file')->get('default_scheme') . "://tmgmt_smartling_context/{$fileName}.html");
diff --git a/tests/src/Functional/FileNameTest.php b/tests/src/Functional/FileNameTest.php
index ec0584f..fad1988 100644
--- a/tests/src/Functional/FileNameTest.php
+++ b/tests/src/Functional/FileNameTest.php
@@ -16,13 +16,13 @@ class FileNameTest extends SmartlingTestBase {
     $translator = $this->setUpSmartlingProviderSettings($this->smartlingPluginProviderSettings);
     $job = $this->requestTranslationForNode($this->testNodeId, $this->targetLanguage, $translator);
     $fileName = $job->getTranslatorPlugin()->getFileName($job);
-    $this->assertEqual($fileName, 'JobID1_en_fr.xml');
+    $this->assertEquals($fileName, 'JobID1_en_fr.xml');
 
     $newJob = $this->requestTranslationForNode($this->testNodeId, 'de', $translator);
     $newFileName = $newJob->getTranslatorPlugin()->getFileName($newJob);
-    $this->assertEqual($newFileName, 'JobID2_en_de.xml');
-    $this->assertNotEqual($job->id(), $newJob->id());
-    $this->assertNotEqual($fileName, $newFileName);
+    $this->assertEquals($newFileName, 'JobID2_en_de.xml');
+    $this->assertNotEquals($job->id(), $newJob->id());
+    $this->assertNotEquals($fileName, $newFileName);
   }
 
   /**
@@ -32,7 +32,7 @@ class FileNameTest extends SmartlingTestBase {
     $translator = $this->setUpSmartlingProviderSettings($this->smartlingPluginProviderSettings);
     $job = $this->requestTranslationForNode($this->testNodeId, $this->targetLanguage, $translator);
     $fileName = $job->getTranslatorPlugin()->getFileName($job);
-    $this->assertEqual($fileName, 'JobID1_en_fr.xml');
+    $this->assertEquals($fileName, 'JobID1_en_fr.xml');
   }
 
   /**
@@ -44,8 +44,8 @@ class FileNameTest extends SmartlingTestBase {
     $translator = $this->setUpSmartlingProviderSettings($this->smartlingPluginProviderSettings);
     $job = $this->requestTranslationForNode($this->testNodeId, $this->targetLanguage, $translator);
     $fileName = $job->getTranslatorPlugin()->getFileName($job);
-    $this->assertNotEqual($fileName, 'JobID1_en_fr.xml');
-    $this->assertEqual($fileName, 'TEST_job_id_1.xml');
+    $this->assertNotEquals($fileName, 'JobID1_en_fr.xml');
+    $this->assertEquals($fileName, 'TEST_job_id_1.xml');
   }
 
 }
diff --git a/tests/src/Functional/JobsTest.php b/tests/src/Functional/JobsTest.php
index 4c37c31..af9ecfd 100644
--- a/tests/src/Functional/JobsTest.php
+++ b/tests/src/Functional/JobsTest.php
@@ -36,8 +36,9 @@ class JobsTest extends SmartlingTestBase {
     }
     catch (SchemaObjectExistsException $e) {
     }
+    $this->drupalGet('/admin/tmgmt/translators/manage/smartling');
 
-    $this->drupalPostForm('/admin/tmgmt/translators/manage/smartling', [
+    $this->submitForm([
       'settings[project_id]' => $this->smartlingPluginProviderSettings['settings[project_id]'],
       'settings[user_id]' => $this->smartlingPluginProviderSettings['settings[user_id]'],
       'settings[token_secret]' => $this->smartlingPluginProviderSettings['settings[token_secret]'],
@@ -47,7 +48,7 @@ class JobsTest extends SmartlingTestBase {
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     $api_wrapper = Drupal::service('tmgmt_smartling.smartling_api_wrapper');
     $api_wrapper->setSettings([
       'user_id' => $this->smartlingPluginProviderSettings['settings[user_id]'],
@@ -83,16 +84,28 @@ class JobsTest extends SmartlingTestBase {
     $job->requestTranslation();
 
     $this->drupalGet('/admin/reports/dblog');
-    $this->assertUniqueText(t('File @name (job id = @job_id) wasn\'t uploaded', [
+    $this->assertSession()->pageTextContainsOnce(t('File @name (job id = @job_id) wasn\'t uploaded', [
       '@name' => $job->getTranslatorPlugin()->getFileName($job),
       '@job_id' => $job->id(),
     ]));
-    $this->assertNoText(t('Smartling updated a job'));
-    $this->assertNoText(t('Smartling created a batch'));
-    $this->assertNoText(t('File uploaded. Job id: @job_id.', [
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Smartling updated a job'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Smartling created a batch'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('File uploaded. Job id: @job_id.', [
       '@job_id' => $job->id(),
     ]));
-    $this->assertNoText(t('Smartling executed a batch'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(t('Smartling executed a batch'));
   }
 
   /**
@@ -107,12 +120,12 @@ class JobsTest extends SmartlingTestBase {
     $method->setAccessible(true);
 
     $job_bucket_name = $method->invokeArgs($bucket_job_manager, []);
-    $this->assertNotEqual($job_bucket_name, $name);
+    $this->assertNotEquals($job_bucket_name, $name);
 
     \Drupal::service('module_installer')->install(['tmgmt_smartling_test_alter_filename']);
 
     $job_bucket_name = $method->invokeArgs($bucket_job_manager, []);
-    $this->assertEqual($job_bucket_name, $name);
+    $this->assertEquals($job_bucket_name, $name);
   }
 
   /**
@@ -120,13 +133,14 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testBucketJob() {
     if (!empty($this->smartlingPluginProviderSettings)) {
+      $this->drupalGet('/admin/tmgmt/sources');
       // 1. Send content in a job.
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
         'target_language' => '_all',
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -150,8 +164,8 @@ class JobsTest extends SmartlingTestBase {
       $batch_uid_old_1 = $data1[0]['batch_uid'];
       $batch_uid_old_2 = $data1[1]['batch_uid'];
 
-      $this->assertEqual($batch_uid_old_1, $batch_uid_old_2, 'First two files will be uploaded into the same batch.');
-      $this->assertEqual($data1, [
+      $this->assertEquals($batch_uid_old_1, $batch_uid_old_2, 'First two files will be uploaded into the same batch.');
+      $this->assertEquals($data1, [
         [
           'id' => 1,
           'batch_uid' => $batch_uid_old_1,
@@ -176,9 +190,9 @@ class JobsTest extends SmartlingTestBase {
       $batch_uid_new_1 = $data2[2]['batch_uid'];
       $batch_uid_new_2 = $data2[3]['batch_uid'];
 
-      $this->assertEqual($batch_uid_new_1, $batch_uid_new_2, 'Second two files will be uploaded into the same batch.');
-      $this->assertNotEqual($batch_uid_old_1, $batch_uid_new_1, 'First and second batches are different.');
-      $this->assertEqual($data2, [
+      $this->assertEquals($batch_uid_new_1, $batch_uid_new_2, 'Second two files will be uploaded into the same batch.');
+      $this->assertNotEquals($batch_uid_old_1, $batch_uid_new_1, 'First and second batches are different.');
+      $this->assertEquals($data2, [
         [
           'id' => 1,
           'batch_uid' => $batch_uid_old_1,
@@ -211,11 +225,12 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testCreateJobEmptyNameValidation() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => '',
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -224,7 +239,10 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Job Name field is required.'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains(t('Job Name field is required.'));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -237,12 +255,13 @@ class JobsTest extends SmartlingTestBase {
   public function testCreateJobExistingNameValidation() {
     if (!empty($this->smartlingPluginProviderSettings)) {
       $existing_job_name = 'Drupal TMGMT connector test: EXISTING JOB';
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => $existing_job_name,
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -250,12 +269,13 @@ class JobsTest extends SmartlingTestBase {
         'settings[create_new_job_tab][authorize]' => TRUE,
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => $existing_job_name,
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -264,7 +284,10 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Job with name "@name" already exists. Please choose another job name.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains(t('Job with name "@name" already exists. Please choose another job name.', [
         '@name' => $existing_job_name,
       ]));
     }
@@ -278,11 +301,12 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testCreateJobDueDateValidation() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Test',
         'settings[create_new_job_tab][due_date][date]' => '2012-12-12',
@@ -291,8 +315,14 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Due date can not be in the past.'));
-      $this->assertNoText(t('Please enter a date in the format'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains(t('Due date can not be in the past.'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Please enter a date in the format'));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -304,11 +334,12 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testCreateJobDueDateValidationInvalidDate() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Test',
         'settings[create_new_job_tab][due_date][date]' => '2012-12-12',
@@ -317,14 +348,21 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Please enter a date in the format'));
-      $this->assertNoText(t('Due date can not be in the past.'));
-
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains(t('Please enter a date in the format'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Due date can not be in the past.'));
+      $this->drupalGet('/admin/tmgmt/sources');
+
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Test',
         'settings[create_new_job_tab][due_date][date]' => '',
@@ -333,8 +371,14 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Please enter a date in the format'));
-      $this->assertNoText(t('Due date can not be in the past.'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains(t('Please enter a date in the format'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Due date can not be in the past.'));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -346,11 +390,12 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testAddToJobDueDateValidation() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[switcher]' => TMGMT_SMARTLING_ADD_TO_JOB,
         'settings[add_to_job_tab][container][job_info][due_date][date]' => '2012-12-12',
@@ -359,8 +404,14 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Due date can not be in the past.'));
-      $this->assertNoText(t('Please enter a date in the format'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains(t('Due date can not be in the past.'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Please enter a date in the format'));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -372,11 +423,12 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testAddToJobDueDateValidationInvalidDate() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[switcher]' => TMGMT_SMARTLING_ADD_TO_JOB,
         'settings[add_to_job_tab][container][job_info][due_date][date]' => '2012-12-12',
@@ -385,14 +437,21 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Please enter a date in the format'));
-      $this->assertNoText(t('Due date can not be in the past.'));
-
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains(t('Please enter a date in the format'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Due date can not be in the past.'));
+      $this->drupalGet('/admin/tmgmt/sources');
+
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[switcher]' => TMGMT_SMARTLING_ADD_TO_JOB,
         'settings[add_to_job_tab][container][job_info][due_date][date]' => '',
@@ -401,8 +460,14 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Please enter a date in the format'));
-      $this->assertNoText(t('Due date can not be in the past.'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains(t('Please enter a date in the format'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Due date can not be in the past.'));
     }
     else {
       $this->fail("Smartling settings file for simpletests not found.");
@@ -414,11 +479,12 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testCreateJobSingleSync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -430,18 +496,24 @@ class JobsTest extends SmartlingTestBase {
       $job = Job::load(1);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertUniqueText(t('Smartling created a job'));
-      $this->assertNoText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a job'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 1);
     }
@@ -455,12 +527,13 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testCreateJobQueueSync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
         'target_language' => '_all',
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -473,26 +546,35 @@ class JobsTest extends SmartlingTestBase {
       $job2 = Job::load(2);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertUniqueText(t('Smartling created a job'));
-      $this->assertNoText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a job'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 2);
     }
@@ -506,15 +588,17 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testCreateJobSingleAsync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/translators/manage/smartling', [
+      $this->drupalGet('/admin/tmgmt/translators/manage/smartling');
+      $this->submitForm([
         'settings[async_mode]' => TRUE,
       ], t('Save'));
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -523,23 +607,38 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider'));
 
-      $this->assertText(t('Job has been put into upload queue.'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains(t('Job has been put into upload queue.'));
 
       $job = Job::load(1);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertUniqueText(t('Smartling created a job'));
-      $this->assertNoText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertNoText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a job'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Smartling executed a batch'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 1);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 0);
@@ -547,18 +646,24 @@ class JobsTest extends SmartlingTestBase {
       $this->processQueue('tmgmt_extension_suit_upload');
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertUniqueText(t('Smartling created a job'));
-      $this->assertNoText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a job'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 0);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 1);
@@ -573,16 +678,18 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testCreateJobQueueAsync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/translators/manage/smartling', [
+      $this->drupalGet('/admin/tmgmt/translators/manage/smartling');
+      $this->submitForm([
         'settings[async_mode]' => TRUE,
       ], t('Save'));
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
         'target_language' => '_all',
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[create_new_job_tab][name]' => 'Drupal TMGMT connector test ' . mt_rand(),
         'settings[create_new_job_tab][due_date][date]' => '2120-12-12',
@@ -591,32 +698,53 @@ class JobsTest extends SmartlingTestBase {
         'settings[smartling_users_time_zone]' => 'Europe/Kiev',
       ], t('Submit to provider and continue'));
 
-      $this->assertText(t('Job has been put into upload queue.'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextContains(t('Job has been put into upload queue.'));
 
       $job1 = Job::load(1);
       $job2 = Job::load(2);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertUniqueText(t('Smartling created a job'));
-      $this->assertNoText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertNoText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a job'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Smartling executed a batch'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 2);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 0);
@@ -624,26 +752,35 @@ class JobsTest extends SmartlingTestBase {
       $this->processQueue('tmgmt_extension_suit_upload');
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertUniqueText(t('Smartling created a job'));
-      $this->assertNoText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a job'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 0);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 2);
@@ -658,11 +795,12 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testAddToJobSingleSync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[switcher]' => TMGMT_SMARTLING_ADD_TO_JOB,
         'settings[add_to_job_tab][container][job_info][due_date][date]' => '2120-12-12',
@@ -674,18 +812,24 @@ class JobsTest extends SmartlingTestBase {
       $job = Job::load(1);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertNoText(t('Smartling created a job'));
-      $this->assertUniqueText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling created a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 1);
     }
@@ -699,12 +843,13 @@ class JobsTest extends SmartlingTestBase {
    */
   public function testAddToJobQueueSync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->drupalGet('/admin/tmgmt/sources');
+      $this->submitForm([
         'items[1]' => 1,
         'target_language' => '_all',
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[switcher]' => TMGMT_SMARTLING_ADD_TO_JOB,
         'settings[add_to_job_tab][container][job_info][due_date][date]' => '2120-12-12',
@@ -717,26 +862,35 @@ class JobsTest extends SmartlingTestBase {
       $job2 = Job::load(2);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertNoText(t('Smartling created a job'));
-      $this->assertUniqueText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling created a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 2);
     }
@@ -751,16 +905,18 @@ class JobsTest extends SmartlingTestBase {
   public function testAddToJobSingleAsync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
       if (!empty($this->smartlingPluginProviderSettings)) {
-        $this->drupalPostForm('/admin/tmgmt/translators/manage/smartling', [
+        $this->drupalGet('/admin/tmgmt/translators/manage/smartling');
+        $this->submitForm([
           'settings[async_mode]' => TRUE,
         ], t('Save'));
       }
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[switcher]' => TMGMT_SMARTLING_ADD_TO_JOB,
         'settings[add_to_job_tab][container][job_info][due_date][date]' => '2120-12-12',
@@ -772,18 +928,30 @@ class JobsTest extends SmartlingTestBase {
       $job = Job::load(1);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertNoText(t('Smartling created a job'));
-      $this->assertUniqueText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertNoText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling created a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Smartling executed a batch'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 1);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 0);
@@ -791,18 +959,24 @@ class JobsTest extends SmartlingTestBase {
       $this->processQueue('tmgmt_extension_suit_upload');
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertNoText(t('Smartling created a job'));
-      $this->assertUniqueText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling created a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job->id(),
         '@filename' => $job->getTranslatorPlugin()->getFileName($job),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 0);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 1);
@@ -818,17 +992,19 @@ class JobsTest extends SmartlingTestBase {
   public function testAddToJobQueueAsync() {
     if (!empty($this->smartlingPluginProviderSettings)) {
       if (!empty($this->smartlingPluginProviderSettings)) {
-        $this->drupalPostForm('/admin/tmgmt/translators/manage/smartling', [
+        $this->drupalGet('/admin/tmgmt/translators/manage/smartling');
+        $this->submitForm([
           'settings[async_mode]' => TRUE,
         ], t('Save'));
       }
+      $this->drupalGet('/admin/tmgmt/sources');
 
-      $this->drupalPostForm('/admin/tmgmt/sources', [
+      $this->submitForm([
         'items[1]' => 1,
         'target_language' => '_all',
       ], t('Request translation'));
 
-      $this->drupalPostForm(NULL, [
+      $this->submitForm([
         'target_language' => 'de',
         'settings[switcher]' => TMGMT_SMARTLING_ADD_TO_JOB,
         'settings[add_to_job_tab][container][job_info][due_date][date]' => '2120-12-12',
@@ -841,26 +1017,44 @@ class JobsTest extends SmartlingTestBase {
       $job2 = Job::load(2);
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertNoText(t('Smartling created a job'));
-      $this->assertUniqueText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertNoText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling created a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Smartling executed a batch'));
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 2);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 0);
@@ -868,26 +1062,35 @@ class JobsTest extends SmartlingTestBase {
       $this->processQueue('tmgmt_extension_suit_upload');
 
       $this->drupalGet('/admin/reports/dblog');
-      $this->assertNoText(t('Smartling created a job'));
-      $this->assertUniqueText(t('Smartling updated a job'));
-      $this->assertUniqueText(t('Smartling created a batch'));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Smartling created a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling updated a job'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling created a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job1->id(),
         '@filename' => $job1->getTranslatorPlugin()->getFileName($job1),
       ]));
-      $this->assertUniqueText(t('File uploaded. Job id: @job_id, file name: @filename.', [
+      $this->assertSession()->pageTextContainsOnce(t('File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertNoText(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+      // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+      $this->assertSession()->pageTextNotContains(t('Fallback: File uploaded. Job id: @job_id, file name: @filename.', [
         '@job_id' => $job2->id(),
         '@filename' => $job2->getTranslatorPlugin()->getFileName($job2),
       ]));
-      $this->assertUniqueText(t('Smartling executed a batch'));
+      $this->assertSession()->pageTextContainsOnce(t('Smartling executed a batch'));
 
       $this->assertTrue($this->getCountOfItemsInQueue('tmgmt_extension_suit_upload') == 0);
       $this->assertTrue($this->getCountOfItemsInQueue('smartling_context_upload') == 2);
