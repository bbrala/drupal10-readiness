modules/contrib/pdfpreview/pdfpreview.install
modules/contrib/pdfpreview/pdfpreview.module
modules/contrib/pdfpreview/src/PDFPreviewGenerator.php
modules/contrib/pdfpreview/src/PDFPreviewSettingsForm.php
modules/contrib/pdfpreview/src/Plugin/Field/FieldFormatter/PDFPreviewFormatter.php
modules/contrib/pdfpreview/tests/src/Unit/PDFPreviewGeneratorTest.php

3 files with changes
====================

1) modules/contrib/pdfpreview/tests/src/Unit/PDFPreviewGeneratorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pdfpreview\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
+use Drupal\file\FileInterface;
 use Drupal\Component\Transliteration\TransliterationInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
@@ @@
  */
 class PDFPreviewGeneratorTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var ConfigFactoryInterface|ProphecyInterface
    */
   protected $configFactory;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->configFactory = $this->prophesize(ConfigFactoryInterface::class);
@@ @@
   /**
    * Gets a mocked PDF Preview Generator for testing.
    *
-   * @return \Drupal\pdfpreview\PDFPreviewGenerator
+   * @return PDFPreviewGenerator
    *   Mocked PDF Preview Generator.
    */
   protected function getPdfPreviewGeneratorMock() {
-    $file_system = $this->getMockBuilder('\Drupal\Core\File\FileSystem')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $file_system = $this->createMock('\Drupal\Core\File\FileSystem');
     $file_system
       ->expects($this->any())
       ->method('basename')
       ->with('public://Test File.pdf', '.pdf')
       ->willReturn('Test File');
-    $transliteration = $this->getMockBuilder(TransliterationInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $transliteration = $this->createMock(TransliterationInterface::class);
     $transliteration
       ->expects($this->any())
       ->method('transliterate')
@@ @@

     $image_toolkit_manager = $this->createMock('\Drupal\Core\ImageToolkit\ImageToolkitManager');

-    $language = $this->getMockBuilder('Drupal\Core\Language\Language')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $language = $this->createMock('Drupal\Core\Language\Language');
     $language
       ->expects($this->any())
       ->method('getId')
       ->willReturn('en');

-    $language_manager = $this->getMockBuilder('Drupal\Core\Language\LanguageManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $language_manager = $this->createMock('Drupal\Core\Language\LanguageManager');
     $language_manager
       ->expects($this->any())
       ->method('getCurrentLanguage')
@@ @@
    * @param int $id
    *   The file id.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The mocked file.
    */
   protected function getFileMock($filename, $id) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/pdfpreview/src/Plugin/Field/FieldFormatter/PDFPreviewFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pdfpreview\Plugin\Field\FieldFormatter;

+use Drupal\file\Entity\File;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

   /**
    * The PDF Preview generator.
-   * @var \Drupal\pdfpreview\PDFPreviewGenerator
+   * @var PDFPreviewGenerator
    */
   protected $pdfPreviewGenerator;

@@ @@
   /**
    * Sets the config factory.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function setConfigFactory(ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Sets the image factory.
    *
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
    */
   public function setImageFactory(ImageFactory $image_factory) {
@@ @@
   /**
    * Sets the PDF Preview generator.
    *
-   * @param \Drupal\pdfpreview\PDFPreviewGenerator $pdf_preview_generator
+   * @param PDFPreviewGenerator $pdf_preview_generator
    *   The PDF Preview generator.
    */
   public function setPdfPreviewGenerator(PDFPreviewGenerator $pdf_preview_generator) {
@@ @@
       $cache_tags = $image_style->getCacheTags();
     }

-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     foreach ($files as $delta => $file) {
       $cache_contexts = [];
       if (isset($link_file)) {
@@ @@
         // context to ensure different file URLs are generated for different
         // sites in a multisite setup, including HTTP and HTTPS versions of the
         // same site. Fix in https://www.drupal.org/node/2646744.
-        $url = Url::fromUri(file_create_url($image_uri));
+        $url = \Drupal::service('file_url_generator')->generate($image_uri);
         $cache_contexts[] = 'url.site';
       }
       $cache_tags = Cache::mergeTags($cache_tags, $file->getCacheTags());
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/pdfpreview/src/PDFPreviewGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pdfpreview;

+use Drupal\imagemagick\Plugin\ImageToolkit\ImagemagickToolkit;
 use Drupal\Component\Transliteration\TransliterationInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The transliteration service.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface
+   * @var TransliterationInterface
    */
   protected $transliteration;

@@ @@
   /**
    * The toolkit manager service.
    *
-   * @var \Drupal\Core\ImageToolkit\ImageToolkitManager
+   * @var ImageToolkitManager
    */
   protected $toolkitManager;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a PDFPreviewGenerator object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliteration
+   * @param TransliterationInterface $transliteration
    *   The transliteration service.
-   * @param \Drupal\Core\ImageToolkit\ImageToolkitManager $toolkit_manager
+   * @param ImageToolkitManager $toolkit_manager
    *   The image toolkit plugin manager service..
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, FileSystemInterface $file_system, TransliterationInterface $transliteration, ImageToolkitManager $toolkit_manager, LanguageManagerInterface $language_manager) {
@@ @@
   /**
    * Gets the preview image if it exists, or creates it if it doesnt.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   The file to generate a preview for.
    */
   public function getPDFPreview(File $file) {
@@ @@
   /**
    * Deletes the preview image for a file.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   The file to delete the preview for.
    */
   public function deletePDFPreview(File $file) {
@@ @@
   /**
    * Deletes the preview image for a file when the file is updated.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   The file to delete the preview for.
    */
   public function updatePDFPreview(File $file) {
-    /** @var \Drupal\file\Entity\File $original */
+    /** @var File $original */
     $original = $file->original;
     if ($file->getFileUri() != $original->getFileUri()
       || filesize($file->getFileUri()) != filesize($original->getFileUri())) {
@@ @@
   /**
    * Creates a preview image of the first page of a PDF file.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   The file to generate a preview for.
    * @param string $destination
    *   The URI where the preview should be created.
@@ @@
     $local_path = $this->fileSystem->realpath($file_uri);
     $config = $this->configFactory->get('pdfpreview.settings');

-    /** @var \Drupal\imagemagick\Plugin\ImageToolkit\ImagemagickToolkit $toolkit */
+    /** @var ImagemagickToolkit $toolkit */
     $toolkit = $this->toolkitManager->createInstance('imagemagick');

     $directory = $this->fileSystem->dirname($destination);
@@ @@
   /**
    * Gets the destination URI of the file.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   The file that is being converted.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 3 files have been changed by Rector                                       

