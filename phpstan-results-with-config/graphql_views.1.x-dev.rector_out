modules/contrib/graphql_views/src/Plugin/Deriver/Enums/ViewSortByDeriver.php
modules/contrib/graphql_views/src/Plugin/Deriver/Fields/ViewDeriver.php
modules/contrib/graphql_views/src/Plugin/Deriver/Fields/ViewResultCountDeriver.php
modules/contrib/graphql_views/src/Plugin/Deriver/Fields/ViewResultListDeriver.php
modules/contrib/graphql_views/src/Plugin/Deriver/Fields/ViewRowFieldDeriver.php
modules/contrib/graphql_views/src/Plugin/Deriver/InputTypes/ViewContextualFilterInputDeriver.php
modules/contrib/graphql_views/src/Plugin/Deriver/InputTypes/ViewFilterInputDeriver.php
modules/contrib/graphql_views/src/Plugin/Deriver/Types/ViewResultTypeDeriver.php
modules/contrib/graphql_views/src/Plugin/Deriver/Types/ViewRowTypeDeriver.php
modules/contrib/graphql_views/src/Plugin/Deriver/ViewDeriverBase.php
modules/contrib/graphql_views/src/Plugin/GraphQL/Enums/ViewSortBy.php
modules/contrib/graphql_views/src/Plugin/GraphQL/Enums/ViewSortDirection.php
modules/contrib/graphql_views/src/Plugin/GraphQL/Fields/Entity/Fields/View/ViewDerivative.php
modules/contrib/graphql_views/src/Plugin/GraphQL/Fields/View.php
modules/contrib/graphql_views/src/Plugin/GraphQL/Fields/ViewResultCount.php
modules/contrib/graphql_views/src/Plugin/GraphQL/Fields/ViewResultList.php
modules/contrib/graphql_views/src/Plugin/GraphQL/Fields/ViewRowField.php
modules/contrib/graphql_views/src/Plugin/GraphQL/InputTypes/ViewContextualFilterInput.php
modules/contrib/graphql_views/src/Plugin/GraphQL/InputTypes/ViewFilterInput.php
modules/contrib/graphql_views/src/Plugin/GraphQL/Scalars/TypedData/ViewsContextualFilterInput.php
modules/contrib/graphql_views/src/Plugin/GraphQL/Scalars/TypedData/ViewsFilterInput.php
modules/contrib/graphql_views/src/Plugin/GraphQL/Scalars/TypedData/ViewsSortByInput.php
modules/contrib/graphql_views/src/Plugin/GraphQL/Types/ViewResultType.php
modules/contrib/graphql_views/src/Plugin/GraphQL/Types/ViewRowType.php
modules/contrib/graphql_views/src/Plugin/GraphQL/UnionTypes/ViewResult.php
modules/contrib/graphql_views/src/Plugin/views/display/GraphQL.php
modules/contrib/graphql_views/src/Plugin/views/exposed_form/GraphQL.php
modules/contrib/graphql_views/src/Plugin/views/row/GraphQLEntityRow.php
modules/contrib/graphql_views/src/Plugin/views/row/GraphQLFieldRow.php
modules/contrib/graphql_views/src/Plugin/views/style/GraphQL.php
modules/contrib/graphql_views/src/ViewDeriverHelperTrait.php
modules/contrib/graphql_views/tests/modules/graphql_views_test/graphql_views_test.module
modules/contrib/graphql_views/tests/src/Kernel/ContextualViewsTest.php
modules/contrib/graphql_views/tests/src/Kernel/ViewsTest.php
modules/contrib/graphql_views/tests/src/Kernel/ViewsTestBase.php

12 files with changes
=====================

1) modules/contrib/graphql_views/src/ViewDeriverHelperTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_views;

+use Drupal\graphql_views\Plugin\views\display\GraphQL;
+use Drupal\views\Plugin\views\style\StylePluginBase;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\graphql\Utility\StringHelper;
@@ @@
   /**
    * Helper function to retrieve the sort arguments if any are exposed.
    *
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginInterface $display
+   * @param DisplayPluginInterface $display
    *   The display plugin.
    * @param string $id
    *   The plugin derivative id.
@@ @@
   /**
    * Helper function to return the filter argument if applicable.
    *
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginInterface $display
+   * @param DisplayPluginInterface $display
    *   The display plugin.
    * @param string $id
    *   The plugin derivative id.
@@ @@
   /**
    * Helper function to retrieve the pager arguments if the display is paged.
    *
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginInterface $display
+   * @param DisplayPluginInterface $display
    *   The display plugin.
    *
    * @return array
@@ @@
   /**
    * Check if a pager is configured.
    *
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginInterface $display
+   * @param DisplayPluginInterface $display
    *   The display configuration.
    *
    * @return bool
@@ @@
   /**
    * Returns a view display object.
    *
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    *   The view object.
    * @param string $displayId
    *   The display ID to use.
    *
-   * @return \Drupal\views\Plugin\views\display\DisplayPluginInterface
+   * @return DisplayPluginInterface
    *   The view display object.
    */
   protected function getViewDisplay(ViewEntityInterface $view, $displayId) {
@@ @@
   /**
    * Get the configured default limit.
    *
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginInterface $display
+   * @param DisplayPluginInterface $display
    *   The display configuration.
    *
    * @return int
@@ @@
   /**
    * Get the configured default offset.
    *
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginInterface $display
+   * @param DisplayPluginInterface $display
    *   The display configuration.
    *
    * @return int
@@ @@
    *
    * @param string $interface
    *   The GraphQL interface name.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $interfacePluginManager
+   * @param PluginManagerInterface $interfacePluginManager
    *   Plugin interface manager.
    *
    * @return bool
@@ @@
   /**
    * Retrieves the type the view's rows resolve to.
    *
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    *   The view entity.
    * @param string $displayId
    *   The id of the current display.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $interfacePluginManager
+   * @param PluginManagerInterface $interfacePluginManager
    *   Interface plugin manager.
    *
    * @return null|string
@@ @@
    *   The name of the type or NULL if the type could not be derived.
    */
   protected function getRowResolveType(ViewEntityInterface $view, $displayId, PluginManagerInterface $interfacePluginManager) {
-    /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+    /** @var GraphQL $display */
     $display = $this->getViewDisplay($view, $displayId);
     $rowPlugin = $display->getPlugin('row');

@@ @@
   /**
    * Returns a view style object.
    *
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    *   The view object.
    * @param string $displayId
    *   The display ID to use.
    *
-   * @return \Drupal\views\Plugin\views\style\StylePluginBase
+   * @return StylePluginBase
    *   The view style object.
    */
   protected function getViewStyle(ViewEntityInterface $view, $displayId) {
@@ @@
   /**
    * Returns cache metadata plugin definitions.
    *
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    *   The view object.
-   * @param \Drupal\views\Plugin\views\display\DisplayPluginInterface $display
+   * @param DisplayPluginInterface $display
    *   The view display.
    *
    * @return array
@@ @@
    *     - entity_type: target entity type.
    *     - bundles: target bundles (can be empty).
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function getArgumentsInfo(array $viewArguments) {
     $argumentsInfo = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/graphql_views/src/Plugin/views/row/GraphQLEntityRow.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_views\Plugin\views\row;

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Entity\EntityRepository;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfo;
@@ @@
   /**
    * Contains the entity type of this row plugin instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityType;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityRepository
+   * @var EntityRepository
    */
   protected $entityRepository;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfo $entityTypeBundleInfo
+   * @param EntityTypeBundleInfo $entityTypeBundleInfo
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
    */
   public function __construct(array $configuration, $pluginId, $pluginDefinition, EntityTypeBundleInfo $entityTypeBundleInfo, LanguageManagerInterface $languageManager, EntityTypeManagerInterface $entityTypeManager, EntityRepositoryInterface $entityRepository) {
@@ @@
    * @param \Drupal\Views\ResultRow $row
    *   The views result row object.
    *
-   * @return null|\Drupal\Core\Entity\EntityInterface
+   * @return null|EntityInterface
    *   The extracted entity object or NULL if it could not be retrieved.
    */
   protected function getEntityFromRow(ResultRow $row) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/graphql_views/src/Plugin/Deriver/ViewDeriverBase.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The interface plugin manager to search for return type candidates.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $interfacePluginManager;

@@ @@
   /**
    * Creates a ViewDeriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   An entity type manager instance.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $interfacePluginManager
+   * @param PluginManagerInterface $interfacePluginManager
    *   The plugin manager for graphql interfaces.
    */
   public function __construct(
@@ @@
   /**
    * Retrieves the type the view's rows resolve to.
    *
-   * @param \Drupal\views\ViewEntityInterface $view
+   * @param ViewEntityInterface $view
    *   The view entity.
    * @param string $displayId
    *   Interface plugin manager.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/graphql_views/src/Plugin/Deriver/Types/ViewRowTypeDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_views\Plugin\Deriver\Types;

+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
 use Drupal\views\Views;

@@ @@
       $viewStorage = $this->entityTypeManager->getStorage('view');

       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
         if (!$this->getRowResolveType($view, $displayId)) {
           continue;
@@ @@
           continue;
         }

-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);

         $id = implode('-', [$viewId, $displayId, 'row']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/graphql_views/src/Plugin/Deriver/Types/ViewResultTypeDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_views\Plugin\Deriver\Types;

+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
 use Drupal\views\Views;

@@ @@
       $viewStorage = $this->entityTypeManager->getStorage('view');

       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
         if (!$this->getRowResolveType($view, $displayId)) {
           continue;
         }

-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);

         $id = implode('-', [$viewId, $displayId, 'result']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/graphql_views/src/Plugin/Deriver/InputTypes/ViewFilterInputDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_views\Plugin\Deriver\InputTypes;

+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\graphql\Utility\StringHelper;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
@@ @@
       $viewStorage = $this->entityTypeManager->getStorage('view');

       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
         if (!$this->getRowResolveType($view, $displayId)) {
           continue;
         }

-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);
         $id = implode('_', [$viewId, $displayId, 'view', 'filter', 'input']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/graphql_views/src/Plugin/Deriver/InputTypes/ViewContextualFilterInputDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_views\Plugin\Deriver\InputTypes;

+use Drupal\views\ViewEntityInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\graphql\Utility\StringHelper;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
@@ @@
       $viewStorage = $this->entityTypeManager->getStorage('view');

       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
         if (!$this->getRowResolveType($view, $displayId)) {
           continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/graphql_views/src/Plugin/Deriver/Fields/ViewRowFieldDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_views\Plugin\Deriver\Fields;

+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\graphql_views\Plugin\views\row\GraphQLFieldRow;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
 use Drupal\views\Views;
@@ @@
       $viewStorage = $this->entityTypeManager->getStorage('view');

       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);
         $rowPlugin = $display->getPlugin('row');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/graphql_views/src/Plugin/Deriver/Fields/ViewResultListDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_views\Plugin\Deriver\Fields;

+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\graphql\Utility\StringHelper;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
 use Drupal\views\Views;
@@ @@
       $viewStorage = $this->entityTypeManager->getStorage('view');

       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
         if (!$type = $this->getRowResolveType($view, $displayId)) {
           continue;
         }

-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);

         $id = implode('-', [$viewId, $displayId, 'result', 'list']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/graphql_views/src/Plugin/Deriver/Fields/ViewResultCountDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_views\Plugin\Deriver\Fields;

+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
 use Drupal\views\Views;

@@ @@
       $viewStorage = $this->entityTypeManager->getStorage('view');

       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);
         if (!$this->isPaged($display)) {
           continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/graphql_views/src/Plugin/Deriver/Fields/ViewDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_views\Plugin\Deriver\Fields;

+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
 use Drupal\views\Views;
@@ @@
       $viewStorage = $this->entityTypeManager->getStorage('view');

       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
         if (!$this->getRowResolveType($view, $displayId)) {
           continue;
         }

-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);

         $id = implode('-', [$viewId, $displayId, 'view']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/graphql_views/src/Plugin/Deriver/Enums/ViewSortByDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_views\Plugin\Deriver\Enums;

+use Drupal\views\ViewEntityInterface;
+use Drupal\graphql_views\Plugin\views\display\GraphQL;
 use Drupal\graphql\Utility\StringHelper;
 use Drupal\graphql_views\Plugin\Deriver\ViewDeriverBase;
 use Drupal\views\Views;
@@ @@
       $viewStorage = $this->entityTypeManager->getStorage('view');

       foreach (Views::getApplicableViews('graphql_display') as list($viewId, $displayId)) {
-        /** @var \Drupal\views\ViewEntityInterface $view */
+        /** @var ViewEntityInterface $view */
         $view = $viewStorage->load($viewId);
         if (!$type = $this->getRowResolveType($view, $displayId)) {
           continue;
         }

-        /** @var \Drupal\graphql_views\Plugin\views\display\GraphQL $display */
+        /** @var GraphQL $display */
         $display = $this->getViewDisplay($view, $displayId);
         $sorts = array_filter($display->getOption('sorts') ?: [], function ($sort) {
           return $sort['exposed'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/tests/src/Kernel/ViewsTestBase.php" file,
         due to:                                                                
         "Analyze error: "Class                                                 
         Drupal\Tests\graphql_core\Kernel\GraphQLContentTestBase not found.".   
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/tests/src/Kernel/ViewsTest.php" file, due
         to:                                                                    
         "Analyze error: "Class                                                 
         Drupal\Tests\graphql_core\Kernel\GraphQLContentTestBase not found.".   
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/tests/src/Kernel/ContextualViewsTest.php"
         file, due to:                                                          
         "Analyze error: "Class                                                 
         Drupal\Tests\graphql_core\Kernel\GraphQLContentTestBase not found.".   
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/UnionTypes/ViewResult.p
         hp" file, due to:                                                      
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Unions\UnionTypePluginBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/Types/ViewRowType.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\graphql\Plugin\GraphQL\Types\TypePluginBase
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/Types/ViewResultType.ph
         p" file, due to:                                                       
         "Analyze error: "Class Drupal\graphql\Plugin\GraphQL\Types\TypePluginBase
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/Scalars/TypedData/Views
         SortByInput.php" file, due to:                                         
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Scalars\ScalarPluginBase not found.".    
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/Scalars/TypedData/Views
         FilterInput.php" file, due to:                                         
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Scalars\ScalarPluginBase not found.".    
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/Scalars/TypedData/Views
         ContextualFilterInput.php" file, due to:                               
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Scalars\ScalarPluginBase not found.".    
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/InputTypes/ViewFilterIn
         put.php" file, due to:                                                 
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\InputTypes\InputTypePluginBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/InputTypes/ViewContextu
         alFilterInput.php" file, due to:                                       
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\InputTypes\InputTypePluginBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/Fields/ViewRowField.php
         " file, due to:                                                        
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/Fields/ViewResultList.p
         hp" file, due to:                                                      
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/Fields/ViewResultCount.
         php" file, due to:                                                     
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/Fields/View.php" file,
         due to:                                                                
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/Fields/Entity/Fields/Vi
         ew/ViewDerivative.php" file, due to:                                   
         "Analyze error: "Class                                                 
         Drupal\graphql\Plugin\GraphQL\Fields\FieldPluginBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/Enums/ViewSortDirection
         .php" file, due to:                                                    
         "Analyze error: "Class Drupal\graphql\Plugin\GraphQL\Enums\EnumPluginBase
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/graphql_views/src/Plugin/GraphQL/Enums/ViewSortBy.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\graphql\Plugin\GraphQL\Enums\EnumPluginBase
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

