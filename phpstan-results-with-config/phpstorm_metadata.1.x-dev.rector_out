modules/contrib/phpstorm_metadata/phpstorm_metadata.drush.inc
modules/contrib/phpstorm_metadata/src/Commands/PhpstormMetadataDrushCommands.php
modules/contrib/phpstorm_metadata/src/Service/MetadataGenerator.php
modules/contrib/phpstorm_metadata/tests/src/Unit/MetadataGeneratorTest.php

3 files with changes
====================

1) modules/contrib/phpstorm_metadata/src/Service/MetadataGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\phpstorm_metadata\Service;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;

@@ @@
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * MetadataGenerator constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(ContainerInterface $container, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * Generate PHPStorm metadata file contents.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function generate() {
     $serviceMap = $this->getServiceMap();
@@ @@
    * @return array
    *   Map of storage class names keyed by entity name.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getStorageMap() {
     $storageMap = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/phpstorm_metadata/src/Commands/PhpstormMetadataDrushCommands.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * PHPStorm metadata generator.
    *
-   * @var \Drupal\phpstorm_metadata\Service\MetadataGenerator
+   * @var MetadataGenerator
    */
   private $metadataGenerator;

@@ @@
   /**
    * PhpstormMetadataDrushCommands constructor.
    *
-   * @param \Drupal\phpstorm_metadata\Service\MetadataGenerator $metadataGenerator
+   * @param MetadataGenerator $metadataGenerator
    *   PHPStorm metadata generator.
    */
   public function __construct(MetadataGenerator $metadataGenerator) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/phpstorm_metadata/phpstorm_metadata.drush.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\phpstorm_metadata\Service\MetadataGenerator;
 /**
  * @file
  * Contains the code to generate the custom drush commands.
@@ @@
 function drush_phpstorm_metadata_generate() {
   try {
     drush_log(dt('Generating PHPStorm Metadata file'), LogLevel::OK);
-    /** @var Drupal\phpstorm_metadata\Service\MetadataGenerator $metadata_service */
+    /** @var MetadataGenerator $metadata_service */
     $metadata_service = \Drupal::service('phpstorm_metadata.generator');
     $file = $metadata_service->generate();
     file_put_contents(DRUPAL_ROOT . '/.phpstorm.meta.php', $file);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

