modules/contrib/field_collection/field_collection.api.php
modules/contrib/field_collection/field_collection.install
modules/contrib/field_collection/field_collection.module
modules/contrib/field_collection/field_collection.views.inc
modules/contrib/field_collection/src/Access/FieldCollectionItemHostAddOperationCheck.php
modules/contrib/field_collection/src/Access/FieldCollectionItemHostOperationCheck.php
modules/contrib/field_collection/src/Access/FieldCollectionItemHostRevisionsOperationCheck.php
modules/contrib/field_collection/src/Controller/FieldCollectionItemController.php
modules/contrib/field_collection/src/Entity/FieldCollection.php
modules/contrib/field_collection/src/Entity/FieldCollectionItem.php
modules/contrib/field_collection/src/FieldCollectionAccessControlHandler.php
modules/contrib/field_collection/src/FieldCollectionForm.php
modules/contrib/field_collection/src/FieldCollectionInterface.php
modules/contrib/field_collection/src/FieldCollectionItemAccessControlHandler.php
modules/contrib/field_collection/src/FieldCollectionItemForm.php
modules/contrib/field_collection/src/FieldCollectionItemInterface.php
modules/contrib/field_collection/src/FieldCollectionItemList.php
modules/contrib/field_collection/src/FieldCollectionListBuilder.php
modules/contrib/field_collection/src/Form/FieldCollectionItemDeleteForm.php
modules/contrib/field_collection/src/Normalizer/FieldCollectionItemNormalizer.php
modules/contrib/field_collection/src/Plugin/Field/FieldFormatter/FieldCollectionEditableFormatter.php
modules/contrib/field_collection/src/Plugin/Field/FieldFormatter/FieldCollectionItemsFormatter.php
modules/contrib/field_collection/src/Plugin/Field/FieldFormatter/FieldCollectionLinksFormatter.php
modules/contrib/field_collection/src/Plugin/Field/FieldFormatter/FieldCollectionListFormatter.php
modules/contrib/field_collection/src/Plugin/Field/FieldType/FieldCollection.php
modules/contrib/field_collection/src/Plugin/Field/FieldWidget/FieldCollectionEmbedWidget.php
modules/contrib/field_collection/src/Plugin/migrate/destination/EntityFieldCollection.php
modules/contrib/field_collection/src/Plugin/views/relationship/FieldCollectionHandlerRelationship.php
modules/contrib/field_collection/src/Tests/FieldCollectionRESTTest.php
modules/contrib/field_collection/src/Tests/Update/Update8001Test.php
modules/contrib/field_collection/tests/src/Functional/FieldCollectionBasicTestCase.php
modules/contrib/field_collection/tests/src/Functional/FieldCollectionTestTrait.php
modules/contrib/field_collection/tests/src/FunctionalJavascript/FieldCollectionAjaxTest.php
modules/contrib/field_collection/tests/src/Kernel/DuplicateFieldCollectionTest.php

14 files with changes
=====================

1) modules/contrib/field_collection/tests/src/Kernel/DuplicateFieldCollectionTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['field_collection']);
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/field_collection/tests/src/Functional/FieldCollectionTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_collection\Functional;

+use Drupal\Core\Field\FieldConfigInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field_collection\Entity\FieldCollectionItem;
@@ @@
   /**
    * Field storage config for the field collection bundle.
    *
-   * @var \Drupal\field\Entity\FieldStorageConfig
+   * @var FieldStorageConfig
    */
   protected $field_collection_field_storage;

@@ @@
   /**
    * Field config for the field collection bundle.
    *
-   * @var \Drupal\Core\Field\FieldConfigInterface
+   * @var FieldConfigInterface
    */
   protected $field_collection_field;

@@ @@
   /**
    * EntityStorageInterface for nodes.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/field_collection/tests/src/Functional/FieldCollectionBasicTestCase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_collection\Functional;

+use Drupal\field_collection\FieldCollectionItemInterface;
 use Drupal\field_collection\Entity\FieldCollection;
 use Drupal\field_collection\Entity\FieldCollectionItem;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * Sets up the data structures for the tests.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->setUpFieldCollectionTest();
   }
@@ @@
    */
   public function testCRUD() {
     /** @var \Drupal\node\NodeInterface $node */
-    /** @var \Drupal\field_collection\FieldCollectionItemInterface $field_collection_item */
+    /** @var FieldCollectionItemInterface $field_collection_item */
     list ($node, $field_collection_item) = $this->createNodeWithFieldCollection('article');

-    $this->assertEqual($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'A field_collection_item has been successfully created and referenced.');
+    $this->assertEquals($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'A field_collection_item has been successfully created and referenced.');

-    $this->assertEqual($field_collection_item->revision_id->value, $node->{$this->field_collection_name}->revision_id, 'The new field_collection_item has the correct revision.');
+    $this->assertEquals($field_collection_item->revision_id->value, $node->{$this->field_collection_name}->revision_id, 'The new field_collection_item has the correct revision.');

     // Test adding an additional field_collection_item.
     $field_collection_item_2 = FieldCollectionItem::create(['field_name' => $this->field_collection_name]);
@@ @@

     $this->assertTrue(!empty($field_collection_item_2->getRevisionId()), 'Second field_collection_item has a revision.');

-    $this->assertEqual(count(FieldCollectionItem::loadMultiple()), 2, 'Field_collection_items have been stored.');
+    $this->assertEquals(count(FieldCollectionItem::loadMultiple()), 2, 'Field_collection_items have been stored.');

-    $this->assertEqual($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'Existing reference has been kept during update.');
+    $this->assertEquals($field_collection_item->id(), $node->{$this->field_collection_name}->target_id, 'Existing reference has been kept during update.');

-    $this->assertEqual($field_collection_item->getRevisionId(), $node->{$this->field_collection_name}[0]->revision_id, 'Revision: Existing reference has been kept during update.');
+    $this->assertEquals($field_collection_item->getRevisionId(), $node->{$this->field_collection_name}[0]->revision_id, 'Revision: Existing reference has been kept during update.');

-    $this->assertEqual($field_collection_item_2->id(), $node->{$this->field_collection_name}[1]->target_id, 'New field_collection_item has been properly referenced.');
+    $this->assertEquals($field_collection_item_2->id(), $node->{$this->field_collection_name}[1]->target_id, 'New field_collection_item has been properly referenced.');

-    $this->assertEqual($field_collection_item_2->getRevisionId(), $node->{$this->field_collection_name}[1]->revision_id, 'Revision: New field_collection_item has been properly referenced.');
+    $this->assertEquals($field_collection_item_2->getRevisionId(), $node->{$this->field_collection_name}[1]->revision_id, 'Revision: New field_collection_item has been properly referenced.');

     // Make sure deleting the field collection item removes the reference.
     $field_collection_item_2->delete();
@@ @@
     // Make sure field_collections are removed during deletion of the host.
     $node->delete();

-    $this->assertIdentical(FieldCollectionItem::loadMultiple(), [], 'field_collection_item deleted when the host is deleted.');
+    $this->assertSame(FieldCollectionItem::loadMultiple(), [], 'field_collection_item deleted when the host is deleted.');

     // Try deleting nodes with collections without any values.
     $node = $this->drupalCreateNode(['type' => 'article']);
@@ @@

     list(, $field_collection_item_2) = $this->createNodeWithFieldCollection('test_content_type');

-    /** @var \Drupal\field_collection\FieldCollectionItemInterface $field_collection_item_1 */
+    /** @var FieldCollectionItemInterface $field_collection_item_1 */
     $field_collection_item_id_1 = $field_collection_item_1->id();
-    /** @var \Drupal\field_collection\FieldCollectionItemInterface $field_collection_item_2 */
+    /** @var FieldCollectionItemInterface $field_collection_item_2 */
     $field_collection_item_id_2 = $field_collection_item_2->id();

     $field_collection_field_1->delete();
@@ @@
     $path = "field_collection_item/add/field_test_collection/node/{$node->id()}";

     $this->drupalGet($path);
-    $this->assertText(t('Access denied'), 'Access has been denied.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Access denied'));

     // Login with new user that has basic edit rights.
     $user_privileged = $this->drupalCreateUser([
@@ @@
     // Test field collection item add form.
     $this->drupalGet('admin/structure/types/manage/article/display');
     $this->drupalGet("node/{$node->id()}");
-    $this->assertLinkByHref($path, 0, 'Add link is shown.');
+    $this->assertSession()->linkByHrefExists($path, 0, 'Add link is shown.');
     $this->drupalGet($path);

-    $this->assertText(t($this->inner_field_definition['label']), 'Add form is shown.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t($this->inner_field_definition['label']));

     $edit = ["$this->inner_field_name[0][value]" => rand()];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

-    $this->assertText(t('Successfully added a @field.', ['@field' => $this->field_collection_name]), 'Field collection saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Successfully added a @field.', ['@field' => $this->field_collection_name]));

-    $this->assertText($edit["$this->inner_field_name[0][value]"], 'Added field value is shown.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit["$this->inner_field_name[0][value]"]);

     $field_collection_item = FieldCollectionItem::load(1);

     // Test field collection item edit form.
     $edit["$this->inner_field_name[0][value]"] = rand();
-    $this->drupalPostForm('field_collection_item/1/edit', $edit, t('Save'));
+    $this->drupalGet('field_collection_item/1/edit');
+    $this->submitForm($edit, t('Save'));

-    $this->assertText(t('Successfully edited @field.', ['@field' => $field_collection_item->label()]), 'Field collection saved.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Successfully edited @field.', ['@field' => $field_collection_item->label()]));

-    $this->assertText($edit["$this->inner_field_name[0][value]"], 'Field collection has been edited.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit["$this->inner_field_name[0][value]"]);

     $this->drupalGet('field_collection_item/1');

-    $this->assertText($edit["$this->inner_field_name[0][value]"], 'Field collection can be viewed.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($edit["$this->inner_field_name[0][value]"]);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertIdenticalRector
 * AssertLinkByHrefRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/field_collection/src/Plugin/migrate/destination/EntityFieldCollection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_collection\Plugin\migrate\destination;

+use Drupal\field_collection\Entity\FieldCollectionItem;
 use Drupal\migrate\Plugin\migrate\destination\EntityContentBase;
 use Drupal\migrate\Row;

@@ @@
    */
   public function import(Row $row, array $old_destination_id_values = []) {

-    /** @var \Drupal\field_collection\Entity\FieldCollectionItem $field_collection */
+    /** @var FieldCollectionItem $field_collection */
     $field_collection = $this->getEntity($row, $old_destination_id_values);

     if ($field_collection->isNew()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/field_collection/src/Plugin/Field/FieldWidget/FieldCollectionEmbedWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_collection\Plugin\Field\FieldWidget;

+use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
@@ @@
    * Ajax callback to remove a field collection from a multi-valued field.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An AjaxResponse object.
    *
    * @see self::removeSubmit()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/field_collection/src/FieldCollectionItemInterface.php:24

    ---------- begin diff ----------
@@ @@
    *   (optional) TRUE to reset the internal cache for the host's entity type.
    *   Defaults to FALSE.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The host entity of this field collection item or NULL if the reference
    *   doesn't exist in the host yet.
    */
@@ @@
   /**
    * Sets the host entity. Only possible during creation of a item.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The host entity to add the the field collection item to.
    *
    * @param $create_link
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/field_collection/src/FieldCollectionItemAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_collection;

+use Drupal\field_collection\Entity\FieldCollectionItem;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\field_collection\Entity\FieldCollectionItem $entity */
+    /** @var FieldCollectionItem $entity */
     $result = parent::checkAccess($entity, $operation, $account);

     if (!$result->isForbidden()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/field_collection/src/Controller/FieldCollectionItemController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Provides the field collection item submission form.
    *
-   * @param \Drupal\field_collection\Entity\FieldCollection $field_collection
+   * @param FieldCollection $field_collection
    *   The field_collection entity for the field collection item.
    *
    * @param $host_type
@@ @@
   /**
    * Displays a field collection item.
    *
-   * @param \Drupal\field_collection\Entity\FieldCollectionItem $field_collection_item
+   * @param FieldCollectionItem $field_collection_item
    *   The field collection item we are displaying.
    *
    * @return array
@@ @@
   /**
    * Builds a field collection item page render array.
    *
-   * @param \Drupal\field_collection\Entity\FieldCollectionItem $field_collection_item
+   * @param FieldCollectionItem $field_collection_item
    *   The field collection item we are displaying.
    *
    * @return array
@@ @@
   /**
    * The _title_callback for the field_collection_item.add route.
    *
-   * @param \Drupal\field_collection\Entity\FieldCollection $field_collection
+   * @param FieldCollection $field_collection
    *   The current field collection.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/field_collection/src/Access/FieldCollectionItemHostRevisionsOperationCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_collection\Access;

+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The permission handler.
    *
-   * @var \Drupal\user\PermissionHandlerInterface
+   * @var PermissionHandlerInterface
    */
   protected $permissionHandler;

@@ @@
   /**
    * The field collection item storage.
    *
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage
+   * @var SqlContentEntityStorage
    */
   protected $fieldCollectionItemStorage;

@@ @@
   /**
    * Constructs a new FieldCollectionItemHostRevisionsOperationCheck.
    *
-   * @param \Drupal\user\PermissionHandlerInterface $permission_handler
+   * @param PermissionHandlerInterface $permission_handler
    *   The permission handler.
    */
   public function __construct(PermissionHandlerInterface $permission_handler) {
@@ @@
   /**
    * Checks operation access on the field collection item's host's revisions.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
    * TODO: Document params
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/field_collection/src/Access/FieldCollectionItemHostOperationCheck.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Checks access to the operation on the field collection item's host.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
    * TODO: Document params
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/field_collection/src/Access/FieldCollectionItemHostAddOperationCheck.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a FieldCollectionItemHostAddOperationCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Checks access to add a field collection item to its future host.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
    * TODO: Document params
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/field_collection/field_collection.views.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Sql\DefaultTableMapping;
 /**
  * @file
  * Provide views data that isn't tied to any other module.
@@ @@
 function field_collection_field_views_data(FieldStorageConfigInterface $field_storage) {
   $data = views_field_default_views_data($field_storage);
   $storage = _views_field_get_entity_type_storage($field_storage);
-  /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+  /** @var DefaultTableMapping $table_mapping */
   $table_mapping = $storage->getTableMapping();

   $entity_type_id = $field_storage->getTargetEntityTypeId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


13) modules/contrib/field_collection/field_collection.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Entity\Sql\TableMappingInterface;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
 /**
  * @file
  * Install, update and uninstall functions for the field_collection module.
@@ @@
  * Update database tables to support extended entity references.
  */
 function field_collection_update_8001() {
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+  /** @var EntityFieldManagerInterface $entity_field_manager */
   $entity_field_manager = \Drupal::service('entity_field.manager');
   // The key-value collection for tracking installed storage schema.
   $installed_storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
@@ @@
     }

     $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
-    /** @var \Drupal\Core\Entity\Sql\TableMappingInterface $table_mapping */
+    /** @var TableMappingInterface $table_mapping */
     $table_mapping = $entity_storage->getTableMapping($field_storage_definitions);
     // Only need field storage definitions of field_collection fields.
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition */
+    /** @var FieldStorageDefinitionInterface $field_storage_definition */
     foreach (array_intersect_key($field_storage_definitions, $map) as $field_storage_definition) {
       $field_name = $field_storage_definition->getName();
       $column_name = $table_mapping->getFieldColumnName($field_storage_definition, 'target_id');
@@ @@
  * Update database to support entity references for pre-existing content types.
  */
 function field_collection_update_8002() {
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+  /** @var EntityFieldManagerInterface $entity_field_manager */
   $entity_field_manager = \Drupal::service('entity_field.manager');
   $entity_type_manager = \Drupal::entityTypeManager();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/field_collection/field_collection.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field_collection\Entity\FieldCollectionItem;
 /**
  * @file
  * Contains API documentation and examples for the Field collection.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alter whether a field collection item is considered empty.
  *
@@ @@
  *
  * @param bool $is_empty
  *   Whether or not the field should be considered empty.
- * @param \Drupal\field_collection\Entity\FieldCollectionItem $item
+ * @param FieldCollectionItem $item
  *   The field collection we are currently operating on.
  */
-function hook_field_collection_is_empty_alter(&$is_empty, \Drupal\field_collection\Entity\FieldCollectionItem $item) {
+function hook_field_collection_is_empty_alter(&$is_empty, FieldCollectionItem $item) {
   if (isset($item->my_field) && empty($item->my_field)) {
     $is_empty = TRUE;
   }
    ----------- end diff -----------

 [ERROR] Could not process                                                      
         "modules/contrib/field_collection/tests/src/FunctionalJavascript/FieldCol
         lectionAjaxTest.php" file, due to:                                     
         "Analyze error: "Class                                                 
         Drupal\FunctionalJavascriptTests\JavascriptTestBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/field_collection/src/Tests/Update/Update8001Test.php" 
         file, due to:                                                          
         "Analyze error: "Class Drupal\system\Tests\Update\UpdatePathTestBase not
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/field_collection/src/Tests/FieldCollectionRESTTest.php"
         file, due to:                                                          
         "Analyze error: "Class Drupal\rest\Tests\RESTTestBase not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

