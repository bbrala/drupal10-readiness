modules/contrib/field_permissions/field_permissions.api.php
modules/contrib/field_permissions/field_permissions.module
modules/contrib/field_permissions/src/Annotation/FieldPermissionType.php
modules/contrib/field_permissions/src/Controller/FieldPermissionsController.php
modules/contrib/field_permissions/src/FieldPermissionsService.php
modules/contrib/field_permissions/src/FieldPermissionsServiceInterface.php
modules/contrib/field_permissions/src/Plugin/AdminFormSettingsInterface.php
modules/contrib/field_permissions/src/Plugin/CustomPermissionsInterface.php
modules/contrib/field_permissions/src/Plugin/FieldPermissionType/Base.php
modules/contrib/field_permissions/src/Plugin/FieldPermissionType/CustomAccess.php
modules/contrib/field_permissions/src/Plugin/FieldPermissionType/Manager.php
modules/contrib/field_permissions/src/Plugin/FieldPermissionType/PrivateAccess.php
modules/contrib/field_permissions/src/Plugin/FieldPermissionTypeInterface.php
modules/contrib/field_permissions/src/Plugin/migrate/process/FieldPermissionSettings.php
modules/contrib/field_permissions/tests/fixtures/drupal7.php
modules/contrib/field_permissions/tests/modules/field_permissions_test/src/Plugin/FieldPermissionType/TestAccess.php
modules/contrib/field_permissions/tests/src/Functional/FieldPermissionsCommentTest.php
modules/contrib/field_permissions/tests/src/Functional/FieldPermissionsNodeTest.php
modules/contrib/field_permissions/tests/src/Functional/FieldPermissionsTestBase.php
modules/contrib/field_permissions/tests/src/Functional/FieldPermissionsUserTest.php
modules/contrib/field_permissions/tests/src/Functional/FieldReportTest.php
modules/contrib/field_permissions/tests/src/Kernel/Plugin/FieldPermissionType/ManagerTest.php
modules/contrib/field_permissions/tests/src/Kernel/ViewsFieldAccessTest.php
modules/contrib/field_permissions/tests/src/Kernel/migrate/FieldPermissionsMigrationTest.php
modules/contrib/field_permissions/tests/src/Unit/FieldPermissionsServiceTest.php
modules/contrib/field_permissions/tests/src/Unit/Plugin/FieldPermissionType/CustomAccessTest.php
modules/contrib/field_permissions/tests/src/Unit/Plugin/FieldPermissionType/PrivateAccessTest.php

19 files with changes
=====================

1) modules/contrib/field_permissions/tests/src/Unit/Plugin/FieldPermissionType/PrivateAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_permissions\Unit\Plugin\FieldPermissionType;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\field\FieldStorageConfigInterface;
@@ @@
  */
 class PrivateAccessTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The private access plugin.
    *
-   * @var \Drupal\field_permissions\Plugin\FieldPermissionType\PrivateAccess
+   * @var PrivateAccess
    */
   protected $plugin;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/field_permissions/tests/src/Unit/Plugin/FieldPermissionType/CustomAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_permissions\Unit\Plugin\FieldPermissionType;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\field\FieldStorageConfigInterface;
@@ @@
  */
 class CustomAccessTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The custom access plugin.
    *
-   * @var \Drupal\field_permissions\Plugin\FieldPermissionType\CustomAccess
+   * @var CustomAccess
    */
   protected $plugin;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/field_permissions/tests/src/Unit/FieldPermissionsServiceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_permissions\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\field_permissions\FieldPermissionsServiceInterface;
 use Drupal\comment\CommentManagerInterface;
 use Drupal\Core\DependencyInjection\Container;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
  */
 class FieldPermissionsServiceTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Mock entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Mock permission type manager.
    *
-   * @var \Drupal\field_permissions\Plugin\FieldPermissionType\Manager
+   * @var Manager
    */
   protected $permissionTypeManager;

@@ @@
   /**
    * The field permissions service.
    *
-   * @var \Drupal\field_permissions\FieldPermissionsServiceInterface
+   * @var FieldPermissionsServiceInterface
    */
   protected $fieldPermissionsService;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/field_permissions/tests/src/Kernel/ViewsFieldAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_permissions\Kernel;

+use Drupal\user\UserInterface;
+use Drupal\user\RoleInterface;
+use Drupal\field\FieldStorageConfigInterface;
+use Drupal\field\FieldConfigInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * Stores an user entity with access to fields.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $userWithAccess;

@@ @@
   /**
    * Stores an user entity without access to fields.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $userWithoutAccess;

@@ @@
   /**
    * Role with access.
    *
-   * @var \Drupal\user\RoleInterface
+   * @var RoleInterface
    */
   protected $roleWithAccess;

@@ @@
   /**
    * Role without access.
    *
-   * @var \Drupal\user\RoleInterface
+   * @var RoleInterface
    */
   protected $roleWithoutAccess;

@@ @@
   /**
    * A field to test with.
    *
-   * @var \Drupal\field\FieldStorageConfigInterface
+   * @var FieldStorageConfigInterface
    */
   protected $fieldStorage;

@@ @@
   /**
    * Field config on entity_test.
    *
-   * @var \Drupal\field\FieldConfigInterface
+   * @var FieldConfigInterface
    */
   protected $field;

@@ @@
   /**
    * An entity to test with.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $entity;

@@ @@
    * Checks views field access on the test entity and field.
    */
   protected function assertFieldAccess() {
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     $entity_type = $this->container->get('entity_type.manager')->getDefinition('entity_test');
     $view_id = $this->randomMachineName();
     $data_table = $entity_type->getDataTable();
@@ @@
     ]);
     $entity->save();

-    /** @var \Drupal\Core\Session\AccountSwitcherInterface $account_switcher */
+    /** @var AccountSwitcherInterface $account_switcher */
     $account_switcher = $this->container->get('account_switcher');

-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->container->get('renderer');

     $account_switcher->switchTo($this->userWithAccess);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/field_permissions/tests/src/Kernel/Plugin/FieldPermissionType/ManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_permissions\Kernel\Plugin\FieldPermissionType;

+use Drupal\field_permissions\Plugin\FieldPermissionType\Manager;
+use Drupal\user\UserInterface;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * The field permission plugin manager service.
    *
-   * @var \Drupal\field_permissions\Plugin\FieldPermissionType\Manager
+   * @var Manager
    */
   protected $fieldPermissionTypeManager;

@@ @@
   /**
    * A user to test with.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $account;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/field_permissions/tests/src/Functional/FieldReportTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_permissions\Functional;

+use Drupal\field\FieldStorageConfigInterface;
 use Drupal\Core\Url;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * Field storage.
    *
-   * @var \Drupal\field\FieldStorageConfigInterface
+   * @var FieldStorageConfigInterface
    */
   protected $fieldStorage;

@@ @@

     // Grant anonymous and authenticated view permission.
     foreach ([RoleInterface::ANONYMOUS_ID, RoleInterface::AUTHENTICATED_ID] as $role_id) {
-      /** @var \Drupal\user\RoleInterface $role */
+      /** @var RoleInterface $role */
       $role = $this->container->get('entity_type.manager')
         ->getStorage('user_role')
         ->load($role_id);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/field_permissions/tests/src/Functional/FieldPermissionsUserTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_permissions\Functional;

+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\field_permissions\Plugin\FieldPermissionTypeInterface;
@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * Tests field permissions on the user edit form for a given account.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account to edit.
    */
   protected function checkUserFieldEdit(UserInterface $account) {
@@ @@
   /**
    * Verify the test field is accessible when viewing the given user.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The account to verify field permissions for viewing.
    */
   protected function assertUserFieldAccess(UserInterface $account) {
@@ @@
   /**
    * Verify the test field is not accessible when viewing the given user.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The account to verify field permissions for viewing.
    */
   protected function assertUserFieldNoAccess(UserInterface $account) {
@@ @@
   /**
    * Verifies that the current logged in user can edit the user field.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account to edit.
    */
   protected function assertUserEditFieldAccess(UserInterface $account) {
@@ @@
   /**
    * Verifies that the current logged in user cannot edit the user field.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account to edit.
    */
   protected function assertUserEditFieldNoAccess(UserInterface $account) {
    ----------- end diff -----------

Applied rules:
 * AssertEscapedRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/field_permissions/tests/src/Functional/FieldPermissionsTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_permissions\Functional;

+use Drupal\user\UserInterface;
+use Drupal\user\RoleInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\Entity\Role;

@@ @@
   /**
    * An administrative user with permission to configure comment settings.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * An limit user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $limitedUser;

@@ @@
   /**
    * A normal user with permission.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;

@@ @@
   /**
    * The role for the admin user.
    *
-   * @var \Drupal\user\RoleInterface
+   * @var RoleInterface
    */
   protected $adminUserRole;

@@ @@
   /**
    * The role for the authenticated user.
    *
-   * @var \Drupal\user\RoleInterface
+   * @var RoleInterface
    */
   protected $limitUserRole;

@@ @@
   /**
    * The role for the anonymous user.
    *
-   * @var \Drupal\user\RoleInterface
+   * @var RoleInterface
    */
   protected $webUserRole;

@@ @@
   /**
    * A node to test with.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/field_permissions/tests/src/Functional/FieldPermissionsCommentTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_permissions\Functional;

+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\field_permissions\Plugin\FieldPermissionTypeInterface;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@

   /**
    * Test field permissions on comments.
+   * @doesNotPerformAssertions
    */
   public function testFieldPermissionComment() {
     // These are all run within a single test method to avoid unnecessary site
    ----------- end diff -----------

Applied rules:
 * AssertEscapedRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/field_permissions/src/Plugin/FieldPermissionTypeInterface.php:68

    ---------- begin diff ----------
@@ @@
    *
    * @param string $operation
    *   The operation to check. Either 'view' or 'edit'.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the field is attached to.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user to check access for.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/field_permissions/src/Plugin/FieldPermissionType/Manager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_permissions\Plugin\FieldPermissionType;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Factory\DefaultFactory;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    *   The plugin ID.
    * @param array $configuration
    *   The plugin configuration.
-   * @param \Drupal\field\FieldStorageConfigInterface $field_storage
+   * @param FieldStorageConfigInterface $field_storage
    *   The field storage.
    *
-   * @return \Drupal\field_permissions\Plugin\FieldPermissionTypeInterface
+   * @return FieldPermissionTypeInterface
    *   The field permission type plugin instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function createInstance($plugin_id, array $configuration = [], FieldStorageConfigInterface $field_storage = NULL) {
     $plugin_definition = $this->getDefinition($plugin_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/field_permissions/src/Plugin/FieldPermissionType/CustomAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_permissions\Plugin\FieldPermissionType;

+use Drupal\user\RoleInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    */
   public function submitAdminForm(array &$form, FormStateInterface $form_state, RoleStorageInterface $role_storage) {
     $custom_permissions = $form_state->getValue('permissions');
-    /** @var \Drupal\user\RoleInterface[] $roles */
+    /** @var RoleInterface[] $roles */
     $roles = [];
     foreach ($custom_permissions as $permission_name => $field_perm) {
       foreach ($field_perm as $role_name => $role_permission) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\user\RoleStorageInterface $role_storage
+   * @param RoleStorageInterface $role_storage
    *   The user role storage.
    */
   protected function addPermissionsGrid(array &$form, FormStateInterface $form_state, RoleStorageInterface $role_storage) {
-    /** @var \Drupal\user\RoleInterface[] $roles */
+    /** @var RoleInterface[] $roles */
     $roles = $role_storage->loadMultiple();
     $permissions = $this->getPermissions();
     $options = array_keys($permissions);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/field_permissions/src/Plugin/FieldPermissionType/Base.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The field storage.
    *
-   * @var \Drupal\field\FieldStorageConfigInterface
+   * @var FieldStorageConfigInterface
    */
   protected $fieldStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\field\FieldStorageConfigInterface $field_storage
+   * @param FieldStorageConfigInterface $field_storage
    *   The field storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FieldStorageConfigInterface $field_storage) {
@@ @@
    * @endcode
    * returns TRUE for all possible $entity values.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user to check access for.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/field_permissions/src/Plugin/AdminFormSettingsInterface.php:14

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\user\RoleStorageInterface $role_storage
+   * @param RoleStorageInterface $role_storage
    *   The user role storage.
    */
   public function buildAdminForm(array &$form, FormStateInterface $form_state, RoleStorageInterface $role_storage);
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\user\RoleStorageInterface $role_storage
+   * @param RoleStorageInterface $role_storage
    *   The user role storage.
    */
   public function submitAdminForm(array &$form, FormStateInterface $form_state, RoleStorageInterface $role_storage);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/field_permissions/src/FieldPermissionsServiceInterface.php:52

    ---------- begin diff ----------
@@ @@
   /**
    * Get the permission type for a given field.
    *
-   * @param \Drupal\field\FieldStorageConfigInterface $field
+   * @param FieldStorageConfigInterface $field
    *   The field to return permissions for.
    */
   public function fieldGetPermissionType(FieldStorageConfigInterface $field);
@@ @@
   /**
    * Field is attached to comment entity.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Fields to get permissions.
    *
    * @return bool
@@ @@
    *
    * @param string $operation
    *   String operation on field.
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The entity field object on which to check access.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Account to get permissions.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Fields to get permissions.
    */
   public function getFieldAccess($operation, FieldItemListInterface $items, AccountInterface $account, FieldDefinitionInterface $field_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/field_permissions/src/FieldPermissionsService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_permissions;

+use Drupal\user\RoleInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The permission type plugin manager.
    *
-   * @var \Drupal\field_permissions\Plugin\FieldPermissionType\Manager
+   * @var Manager
    */
   protected $permissionTypeManager;

@@ @@
   /**
    * Construct the field permission service.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\field_permissions\Plugin\FieldPermissionType\Manager $permission_type_manager
+   * @param Manager $permission_type_manager
    *   The permission type plugin manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Manager $permission_type_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function getPermissionsByRole() {
-    /** @var \Drupal\user\RoleInterface[] $roles */
+    /** @var RoleInterface[] $roles */
     $roles = $this->entityTypeManager->getStorage('user_role')->loadMultiple();
     $field_field_permissions = [];
     $field_permission_perm = $this->getAllPermissions();
@@ @@
    */
   public function getAllPermissions() {
     $permissions = [];
-    /** @var \Drupal\field\FieldStorageConfigInterface[] $fields */
+    /** @var FieldStorageConfigInterface[] $fields */
     $fields = $this->entityTypeManager->getStorage('field_storage_config')->loadMultiple();
     foreach ($fields as $key => $field) {
       // Check if this plugin defines custom permissions.
@@ @@
    * @endcode
    * returns TRUE for all possible values of $items.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Account for which to check access.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Field for which to check access.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/field_permissions/src/Controller/FieldPermissionsController.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The field permission service.
    *
-   * @var \Drupal\field_permissions\FieldPermissionsServiceInterface
+   * @var FieldPermissionsServiceInterface
    */
   protected $fieldPermissions;

@@ @@
   /**
    * The field permission type plugin manager.
    *
-   * @var \Drupal\field_permissions\Plugin\FieldPermissionType\Manager
+   * @var Manager
    */
   protected $permissionTypeManager;

@@ @@
   /**
    * Construct the field permission controller.
    *
-   * @param \Drupal\field_permissions\FieldPermissionsServiceInterface $field_permissions_service
+   * @param FieldPermissionsServiceInterface $field_permissions_service
    *   Field permissions services.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\field_permissions\Plugin\FieldPermissionType\Manager $permission_type_manager
+   * @param Manager $permission_type_manager
    *   The permission type plugin manager.
    */
   public function __construct(FieldPermissionsServiceInterface $field_permissions_service, EntityTypeManagerInterface $entity_type_manager, Manager $permission_type_manager) {
@@ @@
    * Build table rows.
    */
   protected function buildRows() {
-    /** @var \Drupal\field\FieldStorageConfigInterface $instances */
+    /** @var FieldStorageConfigInterface $instances */
     $instances = $this->entityTypeManager->getStorage('field_storage_config')->loadMultiple();
     $rows = [];
     foreach ($instances as $key => $instance) {
@@ @@
   /**
    * Build a single row.
    *
-   * @param \Drupal\field\FieldStorageConfigInterface $field_storage
+   * @param FieldStorageConfigInterface $field_storage
    *   Field to populate row.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/field_permissions/src/Annotation/FieldPermissionType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_permissions\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable title.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The permission type description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


19) modules/contrib/field_permissions/field_permissions.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field_permissions\FieldPermissionsServiceInterface;
 /**
  * @file
  * Contains field_permissions.module.
@@ @@
     return AccessResult::neutral();
   }

-  /** @var \Drupal\field_permissions\FieldPermissionsServiceInterface $service */
+  /** @var FieldPermissionsServiceInterface $service */
   $service = \Drupal::service('field_permissions.permissions_service');
   if ($service instanceof FieldPermissionsService) {
     $access = $service->hasFieldViewAccessForEveryEntity($account, $field_definition);
@@ @@
  */
 function field_permissions_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
   $account = \Drupal::currentUser();
-  /** @var \Drupal\field\FieldConfigInterface $field */
+  /** @var FieldConfigInterface $field */
   $field = $form_state->getFormObject()->getEntity();
   if (!$account->hasPermission('administer field permissions')) {
     return $form;
@@ @@
  * @see field_permissions_form_field_config_edit_form_alter()
  */
 function field_permission_field_config_edit_form_submit(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
+  /** @var FieldDefinitionInterface $field */
   $field = $form_state->getFormObject()->getEntity();

   // Allow all plugin types to react to the submitted form.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 19 files have been changed by Rector                                      

