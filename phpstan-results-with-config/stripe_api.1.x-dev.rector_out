modules/contrib/stripe_api/src/Controller/StripeApiWebhook.php
modules/contrib/stripe_api/src/Controller/StripeApiWebhookRedirect.php
modules/contrib/stripe_api/src/Event/StripeApiWebhookEvent.php
modules/contrib/stripe_api/src/Event/StripeApiWebhookSubscriber.php
modules/contrib/stripe_api/src/Form/StripeApiAdminForm.php
modules/contrib/stripe_api/src/StripeApiService.php
modules/contrib/stripe_api/stripe_api.module

7 files with changes
====================

1) modules/contrib/stripe_api/stripe_api.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Messenger\MessengerInterface;
 /**
  * Implements hook_preprocess_HOOK().
  */
@@ @@
   if ($stripe_api->getMode() === 'test') {
     \Drupal::messenger()
       ->addMessage(t('Stripe API is running in test mode.'),
-        \Drupal\Core\Messenger\MessengerInterface::TYPE_WARNING);
+        MessengerInterface::TYPE_WARNING);
   }
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/stripe_api/src/StripeApiService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_api;

+use Drupal\Core\Config\ConfigFactory;
+use Stripe\ApiResource;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The Key Repository.
    *
-   * @var \Drupal\key\KeyRepositoryInterface
+   * @var KeyRepositoryInterface
    */
   protected $key;

@@ @@
    * @param ...
    *   Additional params to pass to the method. Can be an array, string.
    *
-   * @return \Stripe\ApiResource|string|null
+   * @return ApiResource|string|null
    *   Returns the ApiResource or NULL on error or string which contains called
    *   class if method not exist.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/stripe_api/src/Form/StripeApiAdminForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Stripe API service.
    *
-   * @var \Drupal\stripe_api\StripeApiService
+   * @var StripeApiService
    */
   protected $stripeApi;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\stripe_api\StripeApiService $stripe_api
+   * @param StripeApiService $stripe_api
    *   Stripe API service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StripeApiService $stripe_api) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/stripe_api/src/Event/StripeApiWebhookSubscriber.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Process an incoming webhook.
    *
-   * @param \Drupal\stripe_api\Event\StripeApiWebhookEvent $event
+   * @param StripeApiWebhookEvent $event
    *   Logs an incoming webhook of the setting is on.
    */
   public function onIncomingWebhook(StripeApiWebhookEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/stripe_api/src/Event/StripeApiWebhookEvent.php:9

    ---------- begin diff ----------
@@ @@
  *
  * Provides the Stripe API Webhook Event.
  */
-class StripeApiWebhookEvent extends SymfonyEvent {
+class StripeApiWebhookEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * Webhook event type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/stripe_api/src/Controller/StripeApiWebhookRedirect.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Redirects the user to home page and show the message.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response object.
    */
   public function webhookRedirect() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/stripe_api/src/Controller/StripeApiWebhook.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stripe_api\Controller;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\stripe_api\Event\StripeApiWebhookEvent;
 use Drupal\stripe_api\StripeApiService;
@@ @@
   /**
    * Stripe API service.
    *
-   * @var \Drupal\stripe_api\StripeApiService
+   * @var StripeApiService
    */
   protected $stripeApi;

@@ @@
   /**
    * Captures the incoming webhook request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A Response object.
    */
   public function handleIncomingWebhook(Request $request) {
@@ @@
     }

     if ($config->get('log_webhooks')) {
-       /** @var \Drupal\Core\Logger\LoggerChannelInterface $logger */
+       /** @var LoggerChannelInterface $logger */
        $logger = $this->getLogger('stripe_api');
        $logger->info("Stripe webhook received event:\n @event", ['@event' => (string)$event]);
     }
@@ @@
    * @param object $event_json
    *   Stripe event object parsed from JSON.
    *
-   * @return bool|\Stripe\Event
+   * @return bool|Event
    *   Returns a Stripe Event object or false if validation fails.
    */
   private function isValidWebhook(object $event_json) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

