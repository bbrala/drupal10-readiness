modules/contrib/file_browser/file_browser.install
modules/contrib/file_browser/file_browser.module
modules/contrib/file_browser/file_browser.post_update.php
modules/contrib/file_browser/file_browser.views.inc
modules/contrib/file_browser/src/Controller/FileBrowserController.php
modules/contrib/file_browser/src/Plugin/Block/ImageEmbedBlock.php
modules/contrib/file_browser/src/Plugin/Field/FieldWidget/FileBrowser.php
modules/contrib/file_browser/src/Plugin/views/field/FileBrowserPreview.php
modules/contrib/file_browser/tests/src/Functional/InstallTest.php
modules/contrib/file_browser/tests/src/FunctionalJavascript/FileBrowserTest.php

7 files with changes
====================

1) modules/contrib/file_browser/tests/src/FunctionalJavascript/FileBrowserTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\file_browser\FunctionalJavascript;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\Tests\entity_browser\FunctionalJavascript\EntityBrowserWebDriverTestBase;

 /**
@@ @@
    * Tests that selecting files in the view works.
    */
   public function testFileBrowserView() {
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.article.default');
@@ @@
    * @param string $entityId
    *   Entity ID that will be selected. Format: "file:1".
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   protected function clickViewEntity($entityId) {
     $xpathViewRow = '//*[./*[contains(@class, "views-field-entity-browser-select") and .//input[@name="entity_browser_select[' . $entityId . ']"]]]';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/file_browser/tests/src/Functional/InstallTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\file_browser\Functional;

+use Drupal\Core\Extension\ModuleInstaller;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
     $this->copyConfig($active, $sync);

     // Uninstall File browser.
-    /** @var \Drupal\Core\Extension\ModuleInstaller $module_installer */
+    /** @var ModuleInstaller $module_installer */
     $module_installer = $this->container->get('module_installer');
     $module_installer->uninstall(['file_browser']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/file_browser/src/Plugin/views/field/FileBrowserPreview.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_browser\Plugin\views\field;

+use Drupal\file\Entity\File;
 use Drupal\Core\Url;
 use Drupal\file\FileInterface;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
@@ @@
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = $this->getEntity($values);
     $build = [];

@@ @@
   /**
    * Renders a preview of an arbitrary file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file you want to render a preview of.
    * @param string $image_style
    *   (Optional) An image style to render the preview in.
@@ @@
     // Use a placeholder image for now.
     // @todo See if we can use fallback formatters for this.
     else {
-      $path = drupal_get_path('module', 'file_browser');
+      $path = \Drupal::service('extension.list.module')->getPath('file_browser');
       $build = [
         '#theme' => 'image',
         '#attributes' => [
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/file_browser/src/Plugin/Field/FieldWidget/FileBrowser.php:35

    ---------- begin diff ----------
@@ @@
       ->condition('bundle', $bundle)
       ->condition('targetEntityType', $entity_type_id)
       ->execute();
-    /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay[] $displays */
+    /** @var EntityFormDisplay[] $displays */
     $displays = EntityFormDisplay::loadMultiple($ids);
     foreach ($displays as $display) {
       $configuration = $display->getComponent($field_definition->getName());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/file_browser/src/Plugin/Block/ImageEmbedBlock.php:211

    ---------- begin diff ----------
@@ @@
     $build = [];

     foreach ($this->configuration['files'] as $info) {
-      /** @var \Drupal\file\Entity\File $file */
+      /** @var File $file */
       $file = File::load($info['fid']);
       if ($file && $file->access('view')) {
         $uri = $file->getFileUri();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/file_browser/src/Controller/FileBrowserController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Renders a preview of a file for use with File Browser.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The requested file.
    * @param string $image_style
    *   (Optional) An image style to preview the (image) file in.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/file_browser/file_browser.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\FileInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
 /**
  * @file
  * Defines library requirements and install routines for File Browser.
@@ @@
   // Add an icon for File Browser if we aren't installing from configuration.
   if (!\Drupal::isConfigSyncing()) {
     $data = file_get_contents(dirname(__FILE__) . '/file_browser_icon.png');
-    /** @var \Drupal\file\FileInterface $file */
-    $file = file_save_data($data, 'public://file_browser_icon.png', FileSystemInterface::EXISTS_REPLACE);
+    /** @var FileInterface $file */
+    $file = \Drupal::service('file.repository')->writeData($data, 'public://file_browser_icon.png', FileSystemInterface::EXISTS_REPLACE);
     if ($file) {
       // Set file uuid same as default config.
       $uuid = Yaml::decode(file_get_contents(dirname(__FILE__) . '/config/install/embed.button.file_browser.yml'))['icon_uuid'];
@@ @@
  * Updates entity browser configuration to remove outdated values.
  */
 function file_browser_update_8001() {
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+  /** @var ConfigFactoryInterface $config_factory */
   $config_factory = \Drupal::service('config.factory');
   $list = $config_factory->listAll('entity_browser.browser');

@@ @@
  * Updates entity browser configuration to update outdated values.
  */
 function file_browser_update_8002() {
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+  /** @var ConfigFactoryInterface $config_factory */
   $config_factory = \Drupal::service('config.factory');
   $list = $config_factory->listAll('entity_browser.browser');

@@ @@
     }
   }

-  /** @var \Drupal\image\Entity\ImageStyle $image_style */
+  /** @var ImageStyle $image_style */
   if ($image_style = ImageStyle::load('file_entity_browser_small')) {
     $effect = $image_style->getEffect('374fe20a-a27c-45f5-b76d-d851cabcf7b0');
     $effect->setConfiguration([
@@ @@
  * Updates the file browser view to only show permanent files.
  */
 function file_browser_update_8003() {
-  /** @var \Drupal\views\Entity\View $view */
+  /** @var View $view */
   if ($view = View::load('file_entity_browser')) {
     $display = &$view->getDisplay('default');
     $display['display_options']['filters']['status'] = [
@@ @@
  * Updates alpha1 users to use the correct View machine name.
  */
 function file_browser_update_8004() {
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+  /** @var ConfigFactoryInterface $config_factory */
   $config_factory = \Drupal::service('config.factory');
   if (empty($config_factory->get('views.view.file_entity_browser')->getRawData()) && !empty($config_factory->get('views.view.files_entity_browser')->getRawData())) {
     $config_factory->rename('views.view.files_entity_browser', 'views.view.file_entity_browser');
@@ @@
  * Fix widget configuration if it was broken by a previous update.
  */
 function file_browser_update_8005() {
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
+  /** @var ConfigFactoryInterface $config_factory */
   $config_factory = \Drupal::service('config.factory');
   $list = $config_factory->listAll('entity_browser.browser');
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

