modules/contrib/require_login/require_login.api.php
modules/contrib/require_login/require_login.install
modules/contrib/require_login/require_login.module
modules/contrib/require_login/src/EventSubscriber/RequireLoginSubscriber.php
modules/contrib/require_login/src/Form/RequireLoginSettingsForm.php

2 files with changes
====================

1) modules/contrib/require_login/src/Form/RequireLoginSettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The routing provider.
    *
-   * @var \Drupal\Core\Routing\RouteProvider
+   * @var RouteProvider
    */
   protected $routeProvider;

@@ @@
     $form['excluded_paths'] = [
       '#type' => 'textarea',
       '#title' => $this->t('Excluded paths'),
-      '#description' => render($items),
+      '#description' => \Drupal::service('renderer')->render($items),
       '#default_value' => $config->get('excluded_paths'),
     ];
     $node_types = $config->get('excluded_node_types');
@@ @@
    *   The path input.
    * @var string $config_key
    *   The configuration key.
-   * @var \Drupal\Core\Form\FormStateInterface $form_state
+   * @var FormStateInterface $form_state
    *   The form state.
    */
   private function processPathInput(&$path, $config_key, FormStateInterface $form_state) {
@@ @@
           '#prefix' => $this->t('Missing route names detected. You may remove them if the related modules will not be installed.'),
           '#items' => $invalid_route_names,
         ];
-        $this->messenger()->addWarning(render($items));
+        $this->messenger()->addWarning(\Drupal::service('renderer')->render($items));
       }
     }
   }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/require_login/src/EventSubscriber/RequireLoginSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\require_login\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Path\CurrentPathStack;
@@ @@
 use Drupal\path_alias\AliasManager;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The account proxy.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $accountProxy;

@@ @@
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcher
+   * @var PathMatcher
    */
   protected $pathMatcher;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The current path stack.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
   /**
    * The path alias manager.
    *
-   * @var \Drupal\path_alias\AliasManager
+   * @var AliasManager
    */
   protected $aliasManager;

@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account_proxy
+   * @param AccountProxyInterface $account_proxy
    *   The account proxy.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\Path\PathMatcher $path_matcher
+   * @param PathMatcher $path_matcher
    *   The path matcher.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path stack.
-   * @param \Drupal\path_alias\AliasManager $alias_manager
+   * @param AliasManager $alias_manager
    *   The path alias manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory, RequestStack $request_stack, AccountProxyInterface $account_proxy, MessengerInterface $messenger, PathMatcher $path_matcher, CurrentPathStack $current_path, AliasManager $alias_manager, RouteMatchInterface $route_match) {
@@ @@
   /**
    * Check login authentication enforcement for current request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event response.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   The configuration object.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HTTP request.
    *
    * @return bool
    *   Return FALSE if authentication isn't required. Otherwise TRUE.
    */
-  private function checkLogin(GetResponseEvent $event, ImmutableConfig $config, Request $request) {
+  private function checkLogin(RequestEvent $event, ImmutableConfig $config, Request $request) {
     // Check event exception status codes.
-    if ($event instanceof GetResponseForExceptionEvent) {
-      /** @var \Symfony\Component\HttpKernel\Exception\HttpException $exception */
-      $exception = $event->getException();
+    if ($event instanceof ExceptionEvent) {
+      /** @var HttpException $exception */
+      $exception = $event->getThrowable();
       switch ($exception->getStatusCode()) {
         case '403':
           if ($config->get('excluded_403')) {
@@ @@
       }
     }

-    /** @var \Symfony\Component\Routing\Route $route */
+    /** @var Route $route */
     $route = $request->get('_route_object');

     // Default authentication exclusions.
@@ @@
   /**
    * Prepare login redirect response.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event response.
    *
    * @return string|null
    *   The redirect URL.
    */
-  private function loginRedirect(GetResponseEvent $event) {
+  private function loginRedirect(RequestEvent $event) {
     if ($this->accountProxy->getAccount()->isAuthenticated()) {
       // Stop if user is authenticated.
       return NULL;
@@ @@
   /**
    * Login redirect on KernelEvents::EXCEPTION.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event response.
    */
-  public function exceptionRedirect(GetResponseEvent $event) {
+  public function exceptionRedirect(RequestEvent $event) {
     // Boolean indicating event exception. Prevents potential infinite
     // redirect loop on KernelEvents::REQUEST.
     $this->eventException = TRUE;
@@ @@
   /**
    * Login redirect on KernelEvents::REQUEST.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event response.
    */
-  public function requestRedirect(GetResponseEvent $event) {
+  public function requestRedirect(RequestEvent $event) {
     if (!$this->eventException && ($redirect = $this->loginRedirect($event))) {
       $response = new RedirectResponse($redirect);
       $event->setResponse($response);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 2 files have been changed by Rector                                       

