diff --git a/role_toggle.info.yml b/role_toggle.info.yml
index 991c164..21bd1be 100644
--- a/role_toggle.info.yml
+++ b/role_toggle.info.yml
@@ -1,6 +1,6 @@
 name: 'Role Toggle'
 description: 'Allows permitted users to toggle a role.'
 package: clever-systems.net
-core_version_requirement: ^8.7.7 || ^9
+core_version_requirement: ^8.7.7 || ^9 || ^10
 type: module
 dependencies: {  }
diff --git a/src/AccountProxyDecoratorBase.php b/src/AccountProxyDecoratorBase.php
index 99f1581..9347091 100644
--- a/src/AccountProxyDecoratorBase.php
+++ b/src/AccountProxyDecoratorBase.php
@@ -8,28 +8,28 @@ use Drupal\Core\Session\AccountProxyInterface;
 abstract class AccountProxyDecoratorBase implements AccountProxyInterface {
 
   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $decorated;
 
   /**
    * AccountProxyDecoratorBase constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $decorated
+   * @param AccountProxyInterface $decorated
    */
   public function __construct(AccountProxyInterface $decorated) {
     $this->decorated = $decorated;
   }
 
   /**
-   * @return \Drupal\Core\Session\AccountProxyInterface
+   * @return AccountProxyInterface
    */
   public function getDecorated() {
     return $this->decorated;
   }
 
   /**
-   * @param \Drupal\Core\Session\AccountProxyInterface $decorated
+   * @param AccountProxyInterface $decorated
    */
   public function setDecorated(AccountProxyInterface $decorated) {
     $this->decorated = $decorated;
diff --git a/src/RoleToggle.php b/src/RoleToggle.php
index f989b91..e5480f3 100644
--- a/src/RoleToggle.php
+++ b/src/RoleToggle.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\role_toggle;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
@@ -46,7 +48,7 @@ class RoleToggle {
   }
 
   /**
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    * @return bool
    */
   public static function userAccess($role) {
@@ -54,7 +56,7 @@ class RoleToggle {
   }
 
   /**
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    * @return string
    */
   public static function permissionIdToToggle($role) {
@@ -62,8 +64,8 @@ class RoleToggle {
   }
 
   /**
-   * @param \Drupal\user\RoleInterface $role
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @param RoleInterface $role
+   * @return TranslatableMarkup
    */
   public static function permissionLabel($role) {
     return t('Toggle role %role', array('%role' => $role->label()));
@@ -72,7 +74,7 @@ class RoleToggle {
   /**
    * Get all applicable user roles.
    *
-   * @return \Drupal\user\RoleInterface[]
+   * @return RoleInterface[]
    */
   public static function configurableRoles() {
     $roles = user_roles();
@@ -83,7 +85,7 @@ class RoleToggle {
   }
 
   /**
-   * @return \Drupal\user\RoleInterface[]
+   * @return RoleInterface[]
    */
   public static function togglableRoles() {
     return array_filter(self::configurableRoles(), function(RoleInterface $role) {
@@ -113,7 +115,7 @@ class RoleToggle {
   /**
    * Check if a user can toggle a role.
    *
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    * @return bool
    */
   public static function canToggle($role, AccountInterface $account = NULL) {
@@ -132,7 +134,7 @@ class RoleToggle {
    *
    * @see \Drupal\user\RoleStorage::isPermissionInRoles
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    * @param string $permissionId
    *
    * @return bool
@@ -150,7 +152,7 @@ class RoleToggle {
   }
 
   /**
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    * @return bool
    */
   public static function canToggleAny(AccountInterface $account = NULL) {
@@ -166,7 +168,7 @@ class RoleToggle {
   }
 
   /**
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    * @return bool
    */
   public static function isEnabledRole($role) {
@@ -182,7 +184,7 @@ class RoleToggle {
     ];
 
     if (static::canToggleAny($account)) {
-      /** @var \Drupal\Core\Form\FormBuilderInterface $form_builder */
+      /** @var FormBuilderInterface $form_builder */
       $form_builder = \Drupal::service('form_builder');
       $form = $form_builder->getForm(RoleToggleForm::class);
 
diff --git a/src/RoleToggleCurrentUser.php b/src/RoleToggleCurrentUser.php
index 7489bd5..6a98997 100644
--- a/src/RoleToggleCurrentUser.php
+++ b/src/RoleToggleCurrentUser.php
@@ -12,7 +12,7 @@ class RoleToggleCurrentUser extends AccountProxyDecoratorBase {
    *
    * Ensure this is done before any code can query roles.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    */
   protected function prepareAccount(AccountInterface $account) {
     if ($account instanceof UserInterface && empty($account->role_toggle_account_prepared)) {
diff --git a/src/RoleToggleForm.php b/src/RoleToggleForm.php
index 2c1625c..b79d2a9 100644
--- a/src/RoleToggleForm.php
+++ b/src/RoleToggleForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\role_toggle;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Form\FormInterface;
@@ -22,9 +23,9 @@ class RoleToggleForm implements FormInterface {
   /**
    * Checks access for a specific request.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account) {
diff --git a/tests/src/Functional/AdminPageTest.php b/tests/src/Functional/AdminPageTest.php
index c83a5e3..e2dfd63 100644
--- a/tests/src/Functional/AdminPageTest.php
+++ b/tests/src/Functional/AdminPageTest.php
@@ -33,7 +33,7 @@ class AdminPageTest extends BrowserTestBase {
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
