modules/contrib/elementree/elementree.module
modules/contrib/elementree/elementree.post_update.php
modules/contrib/elementree/modules/elementree_example/elementree_example.module
modules/contrib/elementree/modules/elementree_example/src/Controller/ElementreeExampleController.php
modules/contrib/elementree/modules/elementree_example/src/Plugin/Block/ElementreeExampleBlock.php
modules/contrib/elementree/src/ElementreeBaseProvider.php
modules/contrib/elementree/src/ElementreeBaseProviderInterface.php
modules/contrib/elementree/src/Form/ElementreeSettingsForm.php
modules/contrib/elementree/src/Plugin/Block/ElementreeBlock.php

4 files with changes
====================

1) modules/contrib/elementree/src/ElementreeBaseProviderInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elementree;

+use Drupal\block_content\Entity\BlockContent;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityRepository;
 use Drupal\paragraphs\ParagraphInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Constructs a ElementreeBaseProviderInterface object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Entity\EntityRepository $entityRepository
+   * @param EntityRepository $entityRepository
    *   Entity repository.
    */
   public function __construct(LanguageManagerInterface $language_manager, EntityTypeManagerInterface $entity_type_manager, EntityRepository $entityRepository);
@@ @@
   /**
    * Gets params for React Components from Elementree block.
    *
-   * @param \Drupal\block_content\Entity\BlockContent|null $block_content
+   * @param BlockContent|null $block_content
    *   Elementree block content.
    *
    * @return array
@@ @@
    *   - 'component_name': Name of the Elementree component item.
    *   - 'labels': List of element keys with labels.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getBlockParams($block_content);

@@ @@
   /**
    * Gets params for React Components from Elementree block dependencies.
    *
-   * @param \Drupal\block_content\Entity\BlockContent|null $block_content
+   * @param BlockContent|null $block_content
    *   Elementree block content.
    *
    * @return array
@@ @@
    *   - 'component_name': Name of the Elementree component item.
    *   - 'labels': List of element keys with labels.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getBlockDependenciesParams($block_content);

@@ @@
   /**
    * Helper function for returning values from Elementree Labels.
    *
-   * @param \Drupal\paragraphs\ParagraphInterface $labels_paragraph
+   * @param ParagraphInterface $labels_paragraph
    *   The instance of Elementree Label paragraph.
    * @param string $field_type
    *   Type of field, which should be returned.
@@ @@
    * @return array
    *   Array of values or empty array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getLabelValue(ParagraphInterface $labels_paragraph, string $field_type);

@@ @@
    * @param string $component
    *   Component name.
    *
-   * @return \Drupal\block_content\Entity\BlockContent|null
+   * @return BlockContent|null
    *   Return block or null if block doesn't exist.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getBidByComponent(string $component);

@@ @@
    * @return array
    *   Array of term identifier and term title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getTermsByVid(array $vocabularies);

@@ @@
    * @return array
    *   Array of node identifier and node title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getNodesByType(array $types);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/elementree/src/ElementreeBaseProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\elementree;

+use Drupal\paragraphs\Entity\Paragraph;
+use Drupal\block_content\Entity\BlockContent;
+use Drupal\media\MediaInterface;
+use Drupal\file\FileInterface;
+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\Entity\EntityRepository;
 use Drupal\paragraphs\ParagraphInterface;
 use Drupal\block_content\BlockContentInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   public EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepository
+   * @var EntityRepository
    */
   public EntityRepository $entityRepository;

@@ @@
       }

       if (!$block_content->get(ELEMENTREE_BLOCK_FIELD_LABELS)->isEmpty()) {
-        /** @var \Drupal\paragraphs\Entity\Paragraph[] $labels_paragraphs */
+        /** @var Paragraph[] $labels_paragraphs */
         $labels_paragraphs = $block_content
           ->get(ELEMENTREE_BLOCK_FIELD_LABELS)
           ->referencedEntities();
@@ @@
           ->get(ELEMENTREE_BLOCK_FIELD_REFERENCE_BLOCK)
           ->referencedEntities();

-        /** @var \Drupal\block_content\Entity\BlockContent[] $dependent_blocks */
+        /** @var BlockContent[] $dependent_blocks */
         foreach ($dependent_blocks as $dependent_block) {
           $dependent_block_component_name = $dependent_block
             ->get(ELEMENTREE_BLOCK_FIELD_COMPONENT_NAME)
@@ @@
       if ($field_machine_name === 'field_image_value') {
         foreach ($label_values as $label_key => $label_value) {
           if (!empty($label_value['target_id'])) {
-            /** @var \Drupal\media\MediaInterface $media */
+            /** @var MediaInterface $media */
             $media = $this->entityTypeManager
               ->getStorage('media')
               ->load($label_value['target_id']);

             if ($file_id = $media->get('field_media_image')[0]->getValue()['target_id']) {
-              /** @var \Drupal\file\FileInterface $file */
+              /** @var FileInterface $file */
               $file = $this->entityTypeManager
                 ->getStorage('file')
                 ->load($file_id);

               if (!empty($file)) {
-                $absolute_path = file_create_url($file->getFileUri());
-                $label_values[$label_key] = file_url_transform_relative($absolute_path);
+                $absolute_path = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
+                $label_values[$label_key] = \Drupal::service('file_url_generator')->transformRelative($absolute_path);
               }
               else {
                 unset($label_key[$label_key]);
@@ @@
    * {@inheritdoc}
    */
   public function getBidByComponent(string $component) {
-    /** @var \Drupal\block_content\Entity\BlockContent[] $block */
+    /** @var BlockContent[] $block */
     $block = $this->entityTypeManager
       ->getStorage('block_content')
       ->loadByProperties([
@@ @@
       ->getStorage('taxonomy_term');

     foreach ($vocabularies as $key => $value) {
-      /** @var object[]|\Drupal\taxonomy\TermInterface[] $terms */
+      /** @var object[]|TermInterface[] $terms */
       $terms = $termEntityStorage
         ->loadTree($value);

       foreach ($terms as $term) {
-        /** @var \Drupal\taxonomy\TermInterface $taxonomy_term */
+        /** @var TermInterface $taxonomy_term */
         $taxonomy_term = $termEntityStorage->load($term->tid);
-        /** @var \Drupal\taxonomy\TermInterface $taxonomy_term_trans */
+        /** @var TermInterface $taxonomy_term_trans */
         $taxonomy_term_trans = $this->entityRepository
           ->getTranslationFromContext($taxonomy_term, $this->currentLanguage);
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/elementree/elementree.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\paragraphs\ParagraphInterface;
 /**
  * @file
  * Contains update functions for Elementree.
  */
-
 /**
  * Implements hook_post_update_NAME() for setting default value for property type field.
  */
@@ @@
     $entityTypeManager = \Drupal::entityTypeManager()
       ->getStorage('paragraph');

-    /** @var \Drupal\paragraphs\ParagraphInterface[] $paragraphs */
+    /** @var ParagraphInterface[] $paragraphs */
     $paragraphs = $entityTypeManager
       ->loadByProperties([
         'type' => 'elementree_label',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/elementree/elementree.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\block_content\BlockContentInterface;
 /**
  * @file
  * Elementree module.
@@ @@
  *
  * @param array $form
  *   Block crete/edit form render array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  *
  * @return array
@@ @@
  *
  * @param array $form
  *   Block crete/edit form render array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  */
 function _elementree_submit_save_elementree_settings(array &$form, FormStateInterface $form_state) {
@@ @@
  */
 function elementree_theme_suggestions_block_alter(array &$suggestions, array $variables) {
   if (!empty($variables['elements']['content']['#block_content'])) {
-    /** @var \Drupal\block_content\BlockContentInterface $block */
+    /** @var BlockContentInterface $block */
     $block = $variables['elements']['content']['#block_content'];
     if ($block->bundle() === 'elementree') {
       $suggestions[] = 'block__bundle__elementree';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

