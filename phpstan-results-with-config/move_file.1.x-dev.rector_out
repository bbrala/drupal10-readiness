modules/contrib/move_file/move_file.module
modules/contrib/move_file/src/DirectoryListBuilder.php
modules/contrib/move_file/src/Entity/DirectoryEntity.php
modules/contrib/move_file/src/Entity/DirectoryEntityInterface.php
modules/contrib/move_file/src/Form/DirectoryDeleteForm.php
modules/contrib/move_file/src/Form/DirectoryForm.php
modules/contrib/move_file/src/Form/MoveFileContentTypesForm.php
modules/contrib/move_file/src/Form/MoveFileSettingsForm.php
modules/contrib/move_file/src/Services/MoveFileService.php
modules/contrib/move_file/src/Tests/Form/MoveFileContentTypesFormTest.php
modules/contrib/move_file/src/Tests/Form/MoveFileCreateConfigEntityTest.php
modules/contrib/move_file/src/Tests/Form/MoveFileSettingsFormTest.php
modules/contrib/move_file/src/Tests/MoveFileComplexTest.php

7 files with changes
====================

1) modules/contrib/move_file/src/Tests/MoveFileComplexTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\move_file\Tests;

+use Drupal\user\UserInterface;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\file\Entity\File;
 use Drupal\move_file\Entity\DirectoryEntity;
 use Drupal\taxonomy\Entity\Term;
@@ @@
   /**
    * An user with administration permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $adminUser;

@@ @@
   /**
    * The first taxonomy term.
    *
-   * @var \Drupal\taxonomy\Entity\Term
+   * @var Term
    */
   private $termA;

@@ @@
   /**
    * The second taxonomy term.
    *
-   * @var \Drupal\taxonomy\Entity\Term
+   * @var Term
    */
   private $termB;

@@ @@
   /**
    * File used for testing.
    *
-   * @var \Drupal\file\Entity\File
+   * @var File
    */
   private $fileToMove;

@@ @@
   /**
    * Article.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   private $article;

@@ @@
    * permissions:
    * http://drupal.stackexchange.com/q/233416/72107
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Set up our custom test config.
@@ @@
    * Test the complete module. Update the article and test, if the image is
    * moved.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws EntityStorageException
+   * @throws ResponseTextException
    */
   public function testMovingTheFile() {
     $this->drupalLogin($this->adminUser);
@@ @@
       'id' => '_aaa',
       'term_id' => $this->termA->id(),
     ];
-    $this->drupalPostForm(NULL,
-      $edit,
-      t('Save')
-    );
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(
       'The directory /aaa was saved successfully.'
     );
@@ @@
       'id' => '_bbb',
       'term_id' => $this->termB->id(),
     ];
-    $this->drupalPostForm(NULL,
-      $edit,
-      t('Save')
-    );
+    $this->submitForm($edit, t('Save'));
     $this->assertSession()->pageTextContains(
       'The directory /bbb was saved successfully.'
     );
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/move_file/src/Tests/Form/MoveFileSettingsFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\move_file\Tests\Form;

+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\Entity\Role;

@@ @@
   /**
    * The role anonymous user.
    *
-   * @var \Drupal\user\Entity\Role
+   * @var Role
    */
   private $guestRole;

@@ @@
   /**
    * An user with administration permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $adminUser;

@@ @@
   /**
    * An user with guest permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $guestUser;

@@ @@
    * Info to administrator permissions:
    * http://drupal.stackexchange.com/q/233416/72107
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->guestRole = Role::load('anonymous');
@@ @@
    * Test, that the '/admin/config/media/move-file' path returns
    * the right content and can be saved.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testSettingsFormAsAdmin() {

@@ @@
     $edit = [
       'move_file_vocabulary' => 'tags',
     ];
-    $this->drupalPostForm(NULL,
-      $edit,
-      t('Save configuration')
-    );
+    $this->submitForm($edit, t('Save configuration'));

     $this->assertSession()->pageTextContains(
       'The configuration options have been saved.'
@@ @@
    * Tests that the '/admin/config/media/move-file' path is not
    * accessible for guests.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testSettingsFormAsGuest() {
     $this->drupalLogin($this->guestUser);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/move_file/src/Tests/Form/MoveFileCreateConfigEntityTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\move_file\Tests\Form;

+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\Entity\Role;
@@ @@
   /**
    * The role anonymous user.
    *
-   * @var \Drupal\user\Entity\Role
+   * @var Role
    */
   private $guestRole;

@@ @@
   /**
    * An user with administration permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $adminUser;

@@ @@
   /**
    * An user with guest permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $guestUser;

@@ @@
   /**
    * A taxonomy term.
    *
-   * @var \Drupal\taxonomy\Entity\Term
+   * @var Term
    */
   private $term;

@@ @@
    * Info to administrator permissions:
    * http://drupal.stackexchange.com/q/233416/72107
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->guestRole = Role::load('anonymous');
@@ @@
    * Test, that the '/admin/config/media/move-file/directories' path returns
    * the right content.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testSettingsFormAsAdmin() {

@@ @@
       'id' => '_aaa',
       'term_id' => $this->term->id(),
     ];
-    $this->drupalPostForm(NULL,
-      $edit,
-      t('Save')
-    );
+    $this->submitForm($edit, t('Save'));

     $this->assertSession()->pageTextContains(
       'The directory /aaa was saved successfully.'
@@ @@
    * Tests that the '/admin/config/media/move-file/directories' path is not
    * accessible for guests.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testSettingsFormAsGuest() {
     $this->drupalLogin($this->guestUser);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/move_file/src/Tests/Form/MoveFileContentTypesFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\move_file\Tests\Form;

+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\Entity\Role;

@@ @@
   /**
    * The role anonymous user.
    *
-   * @var \Drupal\user\Entity\Role
+   * @var Role
    */
   private $guestRole;

@@ @@
   /**
    * An user with administration permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $adminUser;

@@ @@
   /**
    * An user with guest permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $guestUser;

@@ @@
    * Info to administrator permissions:
    * http://drupal.stackexchange.com/q/233416/72107
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->guestRole = Role::load('anonymous');
@@ @@
    * Test, that the '/admin/config/media/move-file/content-types' path returns
    * the right content and can be saved.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ResponseTextException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
    */
   public function testSettingsFormAsAdmin() {

@@ @@
       'settings[article][vocabulary_field]' => 'field_tags',
       'settings[article][file_field][field_image]' => 'field_image',
     ];
-    $this->drupalPostForm(NULL,
-      $edit,
-      t('Save configuration')
-    );
+    $this->submitForm($edit, t('Save configuration'));

     $this->assertSession()->pageTextContains(
       'The configuration options have been saved.'
@@ @@
    * Tests that the '/admin/config/media/move-file/content-types' path is not
    * accessible for guests.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testSettingsFormAsGuest() {
     $this->drupalLogin($this->guestUser);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/move_file/src/Services/MoveFileService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\move_file\Services;

+use Drupal\Core\Config\ImmutableConfig;
+use Psr\Log\LoggerInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * Configurations.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * An entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(ConfigFactory $config_factory, LoggerChannelFactoryInterface $logger_factory, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Move files referenced by a node.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    *   The files referenced by this node will be moved.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function move(Node $node) {
     // Get activated content types from the config object.
@@ @@
             // The file should be moved only if the target URI is different from
             // the recent URI.
             if ($file_target_uri != $file->getFileUri()) {
-              if (file_move($file, $file_target_uri)) {
+              if (\Drupal::service('file.repository')->move($file, $file_target_uri)) {
                 $this->logger->notice('The file "' . $file->getFilename() . '" has been moved to the path: ' . $file_target_uri);
               }
               else {
    ----------- end diff -----------

Applied rules:
 * FileMoveRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/move_file/src/Form/MoveFileContentTypesForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\move_file\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs a new DefaultSelection object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ @@
    * @return array
    *   List of content types.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getContentTypesList() {
     $content_types = $this->entityTypeManager->getStorage('node_type')->loadMultiple();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/move_file/src/Form/DirectoryForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\move_file\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Constructs a DirectoryForm.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(FileSystemInterface $file_system = NULL) {
@@ @@
    * @return bool
    *   Returns true, if the directory exist.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exists($id) {
     $storage = $this->entityTypeManager->getStorage('move_file_directory');
@@ @@
    * @return array
    *   Taxonomy terms.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getTermsList() {
     // Retrieve the configuration object.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

