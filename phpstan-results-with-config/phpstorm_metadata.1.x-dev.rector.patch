diff --git a/phpstorm_metadata.drush.inc b/phpstorm_metadata.drush.inc
index 23f0e8c..01cf59b 100644
--- a/phpstorm_metadata.drush.inc
+++ b/phpstorm_metadata.drush.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\phpstorm_metadata\Service\MetadataGenerator;
 /**
  * @file
  * Contains the code to generate the custom drush commands.
@@ -26,7 +27,7 @@ function phpstorm_metadata_drush_command() {
 function drush_phpstorm_metadata_generate() {
   try {
     drush_log(dt('Generating PHPStorm Metadata file'), LogLevel::OK);
-    /** @var Drupal\phpstorm_metadata\Service\MetadataGenerator $metadata_service */
+    /** @var MetadataGenerator $metadata_service */
     $metadata_service = \Drupal::service('phpstorm_metadata.generator');
     $file = $metadata_service->generate();
     file_put_contents(DRUPAL_ROOT . '/.phpstorm.meta.php', $file);
diff --git a/src/Commands/PhpstormMetadataDrushCommands.php b/src/Commands/PhpstormMetadataDrushCommands.php
index 50e4135..06aec7f 100644
--- a/src/Commands/PhpstormMetadataDrushCommands.php
+++ b/src/Commands/PhpstormMetadataDrushCommands.php
@@ -13,14 +13,14 @@ class PhpstormMetadataDrushCommands extends DrushCommands {
   /**
    * PHPStorm metadata generator.
    *
-   * @var \Drupal\phpstorm_metadata\Service\MetadataGenerator
+   * @var MetadataGenerator
    */
   private $metadataGenerator;
 
   /**
    * PhpstormMetadataDrushCommands constructor.
    *
-   * @param \Drupal\phpstorm_metadata\Service\MetadataGenerator $metadataGenerator
+   * @param MetadataGenerator $metadataGenerator
    *   PHPStorm metadata generator.
    */
   public function __construct(MetadataGenerator $metadataGenerator) {
diff --git a/src/Service/MetadataGenerator.php b/src/Service/MetadataGenerator.php
index f305e54..c9044d4 100644
--- a/src/Service/MetadataGenerator.php
+++ b/src/Service/MetadataGenerator.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\phpstorm_metadata\Service;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -13,23 +15,23 @@ class MetadataGenerator {
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * MetadataGenerator constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(ContainerInterface $container, EntityTypeManagerInterface $entityTypeManager) {
@@ -40,8 +42,8 @@ class MetadataGenerator {
   /**
    * Generate PHPStorm metadata file contents.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function generate() {
     $serviceMap = $this->getServiceMap();
@@ -90,8 +92,8 @@ class MetadataGenerator {
    * @return array
    *   Map of storage class names keyed by entity name.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function getStorageMap() {
     $storageMap = [];
