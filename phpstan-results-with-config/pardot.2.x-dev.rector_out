modules/contrib/pardot/pardot.module
modules/contrib/pardot/src/Annotation/PardotFieldFormatter.php
modules/contrib/pardot/src/Annotation/PardotFormHandler.php
modules/contrib/pardot/src/Controller/AutoCompleteController.php
modules/contrib/pardot/src/Controller/PardotFormMappingController.php
modules/contrib/pardot/src/EntityTypeInfo.php
modules/contrib/pardot/src/EventSubscriber/PardotEventSubscriber.php
modules/contrib/pardot/src/Form/PardotFormMappingForm.php
modules/contrib/pardot/src/Form/PardotSettingsForm.php
modules/contrib/pardot/src/FormMap.php
modules/contrib/pardot/src/FormMapForm.php
modules/contrib/pardot/src/FormMapInterface.php
modules/contrib/pardot/src/FormOperations.php
modules/contrib/pardot/src/MappedEmailField.php
modules/contrib/pardot/src/MappedField.php
modules/contrib/pardot/src/MappedFieldBase.php
modules/contrib/pardot/src/MappedFieldInterface.php
modules/contrib/pardot/src/PardotFormMapHtmlRouteProvider.php
modules/contrib/pardot/src/Plugin/PardotFieldFormatterBase.php
modules/contrib/pardot/src/Plugin/PardotFieldFormatterInterface.php
modules/contrib/pardot/src/Plugin/PardotFieldFormatterManager.php
modules/contrib/pardot/src/Plugin/PardotFormHandlerBase.php
modules/contrib/pardot/src/Plugin/PardotFormHandlerInterface.php
modules/contrib/pardot/src/Plugin/PardotFormHandlerManager.php
modules/contrib/pardot/src/Plugin/pardot/FieldFormatter/AutoPath.php
modules/contrib/pardot/src/Plugin/pardot/FieldFormatter/Cookie.php
modules/contrib/pardot/src/Plugin/pardot/FieldFormatter/DefaultValue.php
modules/contrib/pardot/src/Plugin/pardot/FieldFormatter/Token.php
modules/contrib/pardot/src/Plugin/pardot/FieldFormatter/WebformSubmissionValue.php
modules/contrib/pardot/src/Plugin/pardot/FormHandler/ContactPardotFormMapping.php
modules/contrib/pardot/src/Plugin/pardot/FormHandler/WebformMapping.php
modules/contrib/pardot/src/PluginSubFormHelpers.php
modules/contrib/pardot/src/Routing/RouteSubscriber.php
modules/contrib/pardot/src/Service/PardotClient.php
modules/contrib/pardot/src/Service/PardotClientInterface.php
modules/contrib/pardot/tests/Controller/AutoCompleteControllerTest.php
modules/contrib/pardot/tests/Controller/PardotFormMappingControllerTest.php
modules/contrib/pardot/tests/src/Functional/LoadTest.php

29 files with changes
=====================

1) modules/contrib/pardot/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pardot\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/pardot/tests/Controller/PardotFormMappingControllerTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/pardot/tests/Controller/AutoCompleteControllerTest.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\typed_data\DataFetcherInterface definition.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $typedDataDataFetcher;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/pardot/src/Service/PardotClient.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pardot\Service;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\State\StateInterface;
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The Pardot settings configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $pardotSettings;

@@ @@
   /**
    * Logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * State storage.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Auth provider manager.
    *
-   * @var \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface
+   * @var SalesforceAuthProviderPluginManagerInterface
    */
   protected $authManager;

@@ @@
   /**
    * PersonifySsoClient constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The config factory service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger channel factory.
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   HTTP client.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State storage.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   Translation.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   Time service.
-   * @param \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface $authManager
+   * @param SalesforceAuthProviderPluginManagerInterface $authManager
    *   Auth manager service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/pardot/src/Routing/RouteSubscriber.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/pardot/src/PluginSubFormHelpers.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Help Submit plugin forms.
    *
-   * @param \Drupal\Core\Plugin\PluginFormInterface $plugin
+   * @param PluginFormInterface $plugin
    *   The plugin instance.
    * @param array $form
    *   The form for creating the subform.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state to use for creating the subform state.
    * @param array $parents
    *   The array parent. Where to get the plugin instance form.
    *
-   * @return array|\Drupal\Core\Plugin\PluginFormInterface
+   * @return array|PluginFormInterface
    *   Either return the plugin or an empty array.
    */
   public static function pluginSubmit($plugin, array &$form, FormStateInterface $form_state, array $parents) {
@@ @@
   /**
    * Help Submit plugin forms.
    *
-   * @param \Drupal\Core\Plugin\PluginFormInterface $plugin
+   * @param PluginFormInterface $plugin
    *   The plugin instance.
    * @param array $form
    *   The form for creating the subform.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state to use for creating the subform state.
    * @param array $parents
    *   The array parent. Where to get the plugin instance form.
    *
-   * @return array|\Drupal\Core\Plugin\PluginFormInterface
+   * @return array|PluginFormInterface
    *   Either return the plugin or an empty array.
    */
   public static function buildPluginForm($plugin, array $form, FormStateInterface $form_state, array $parents) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/pardot/src/Plugin/pardot/FieldFormatter/WebformSubmissionValue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pardot\Plugin\pardot\FieldFormatter;

+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\pardot\Plugin\PardotFieldFormatterBase;
@@ @@
   /**
    * Entity field manager to get the contact form field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Get the form field from the form state and apply formatting.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return mixed
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|mixed|null
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function pluginTypeChangeSubmit(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/pardot/src/Plugin/pardot/FieldFormatter/Token.php:93

    ---------- begin diff ----------
@@ @@
   /**
    * Get the form field from the form state and apply formatting.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state that holds the input values.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/pardot/src/Plugin/pardot/FieldFormatter/DefaultValue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pardot\Plugin\pardot\FieldFormatter;

+use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\pardot\Plugin\PardotFieldFormatterBase;
@@ @@
   /**
    * Entity field manager to get the contact form field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
    *
    * @param string $field_name
    *   The name of the field we are looking at.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state that holds the input values.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/pardot/src/Plugin/pardot/FieldFormatter/Cookie.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pardot\Plugin\pardot\FieldFormatter;

+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\pardot\Plugin\PardotFieldFormatterBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Get the form field from the form state and apply formatting.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state that holds the input values.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/pardot/src/Plugin/pardot/FieldFormatter/AutoPath.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pardot\Plugin\pardot\FieldFormatter;

+use Drupal\typed_data\DataFetcherInterface;
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\contact\Entity\Message;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\pardot\Plugin\PardotFieldFormatterBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The data fetcher object.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $dataFetcher;

@@ @@
   /**
    * Entity field manager to get the contact form field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Get the form field from the form state and apply formatting.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state that holds the input values.
    *
    * @return mixed
@@ @@
    *   The formatted value or null i guess.
    */
   public function getFormattedValue(FormStateInterface $form_state) {
-    /** @var \Drupal\contact\Entity\Message $form_entity */
+    /** @var Message $form_entity */
     $form_entity = $form_state->getFormObject()->getEntity();
     $path = $this->getConfiguration()['path'] ?? '';
     if ($path) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/pardot/src/Plugin/PardotFormHandlerManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/pardot/src/Plugin/PardotFormHandlerBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pardot\Plugin;

+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\pardot\Service\PardotClient;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Executable\ExecutableManagerInterface;
@@ @@
   /**
    * Entity field manager to get the contact form field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Plugin factory to create instances of plugins for formatters.
    *
-   * @var \Drupal\pardot\Plugin\PardotFieldFormatterManager
+   * @var PardotFieldFormatterManager
    */
   protected $pardotFormMapFormatterManagerPlugin;

@@ @@
   /**
    * Pardot api client to interact with endpoints.
    *
-   * @var \Drupal\pardot\Service\PardotClient
+   * @var PardotClient
    */
   protected $pardotApiClient;

@@ @@
   /**
    * The condition manager to proxy execute calls through.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected ExecutableManagerInterface $executableManager;

@@ @@
   /**
    * Class that defines a form mapping.
    *
-   * @var \Drupal\pardot\FormMap
+   * @var FormMap
    */
   protected FormMap $formMap;

@@ @@
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\pardot\FormMap $pardot_form_map */
+    /** @var FormMap $pardot_form_map */
     if (empty($form_state->get('pardot_form_map'))) {
       $pardot_form_map = new FormMap($this->configuration['settings']);
       $form_state->set('pardot_form_map', $pardot_form_map);
@@ @@
    *
    * @param array $form
    *   The form for creating the subform.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state to use for creating the subform state.
    * @param int $key
    *   Row index.
-   * @param \Drupal\pardot\MappedFieldInterface $row
+   * @param MappedFieldInterface $row
    *   Row data.
    * @param string $form_handler_id
    *   Form handler id.
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|mixed|null
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function addFieldMapSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|mixed|null
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function pluginTypeChangeSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|mixed|null
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function removeFieldMapSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
     $array_parents = $form['#array_parents'];
     $values = $form_state->getCompleteFormState()->getValue($array_parents);
     $settings = $values['settings_container']['settings'];
-    /** @var \Drupal\pardot\FormMap $pardot_form_map */
+    /** @var FormMap $pardot_form_map */
     $pardot_form_map = $form_state->get('pardot_form_map');
     $pardot_form_map->setPostUrl($values['post_url']);
     $pardot_form_map->setFormHandlerId((int) $values['form_handler_id']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/pardot/src/Plugin/PardotFieldFormatterManager.php:15

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/pardot/src/Plugin/PardotFieldFormatterInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Get the form field from the form state and apply formatting.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state that holds the input values.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/pardot/src/Plugin/PardotFieldFormatterBase.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The condition manager to proxy execute calls through.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected ExecutableManagerInterface $executableManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/pardot/src/FormOperations.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pardot;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ @@
   /**
    * State manager.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected State $state;

   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private ImmutableConfig $pardotSettings;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private EntityTypeManagerInterface $entityTypeManager;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   private LoggerChannelFactoryInterface $logger;

   /**
-   * @var \Drupal\pardot\Service\PardotClientInterface
+   * @var PardotClientInterface
    */
   private PardotClientInterface $pardotClient;

@@ @@
   /**
    * Stuff.
    *
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *   The core state.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Channel for logging messages.
-   * @param \Drupal\pardot\Service\PardotClientInterface $pardotClient
+   * @param PardotClientInterface $pardotClient
    *   Client to interact with salesforce/pardot endpoints.
    */
   public function __construct(State $state, ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entityTypeManager, LoggerChannelFactoryInterface $loggerChannelFactory, PardotClientInterface $pardotClient) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $formClassName
    *   The Class string to check the form objects against.
@@ @@
    * @param string $entity_type_id
    *   The entity type id we should get the storage for.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getFormEntity(array &$form, FormStateInterface $form_state, string $formClassName, string $entity_type_id): void {
     // Get conditional state variable.
@@ @@
   }

   /**
-   * Set Pardot form submit.
-   *
-   * @param object $entity
-   *   The entity (form) you want to attach the pardot form submit functionality.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   *   Form state interface.
-   *
-   * @see pardot_form_contact_message_form_alter()
-   */
+  * Set Pardot form submit.
+  *
+  * @param object $entity
+  *   The entity (form) you want to attach the pardot form submit functionality.
+  * @param FormStateInterface $form_state
+  *   Form state interface.
+  *
+  * @see pardot_form_contact_message_form_alter()
+  */
  public function setPardotFormSubmit(object $entity, &$form ,FormStateInterface $form_state): void {
     $pardot_form_map_plugin = $entity->getThirdPartySetting('pardot', 'pardot_form_mapping_plugin', FALSE);
     if ($pardot_form_map_plugin) {
@@ @@
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state interface.
    *
    * @see pardot_form_contact_message_form_alter()
@@ @@
     if (isset($storage['pardot_form_map'])) {


-      /** @var \Drupal\pardot\FormMap $pardot_form_map */
+      /** @var FormMap $pardot_form_map */
       $pardot_form_map = $storage['pardot_form_map'];
       $post_url = $pardot_form_map->getPostUrl();
       $field_map_collection = $pardot_form_map->getMappedFieldCollection();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/pardot/src/FormMapInterface.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * Get the array of MappedField instances.
    *
-   * @return \Drupal\pardot\MappedField[]
+   * @return MappedField[]
    *   The array of MappedField instances.
    */
   public function getMappedFieldCollection();
@@ @@
   /**
    * Set the array of field map configurations.
    *
-   * @param \Drupal\pardot\MappedField[] $mapping
+   * @param MappedField[] $mapping
    *   The array of MappedField instances.
    */
   public function setMappedFieldCollection(array $mapping);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/pardot/src/FormMapForm.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Entity field manager to get the contact form field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected EntityFieldManager $entityFieldManager;

@@ @@
   /**
    * Plugin factory to create instances of plugins for formatters.
    *
-   * @var \Drupal\pardot\Plugin\PardotFieldFormatterManager
+   * @var PardotFieldFormatterManager
    */
   protected PardotFieldFormatterManager $pardotFormMapFormatterManagerPlugin;

@@ @@
   /**
    * EntityTypeInfo constructor.
    *
-   * @param \Drupal\pardot\Plugin\PardotFieldFormatterManager $pardotFormMapFormatterManagerPlugin
+   * @param PardotFieldFormatterManager $pardotFormMapFormatterManagerPlugin
    *   The formatter plugins manager.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entityFieldManager
+   * @param EntityFieldManager $entityFieldManager
    *   The entity field manager for grabbing fields off entities.
    */
   public function __construct(PardotFieldFormatterManager $pardotFormMapFormatterManagerPlugin, EntityFieldManager $entityFieldManager, array $configuration) {
@@ @@
   }

   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\pardot\FormMap $pardot_form_map */
+    /** @var FormMap $pardot_form_map */
     if (empty($form_state->get('pardot_form_map'))) {
       $pardot_form_map = new FormMap($this->configuration);
       $form_state->set('pardot_form_map', $pardot_form_map);
@@ @@
    *
    * @param array $form
    *   The form for creating the subform.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state to use for creating the subform state.
    * @param int $key
    *   Row index.
-   * @param \Drupal\pardot\MappedFieldInterface $row
+   * @param MappedFieldInterface $row
    *   Row data.
    */
   public function buildRow(array &$form, FormStateInterface $form_state, int $key, MappedFieldInterface $row) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|mixed|null
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function addFieldMapSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|mixed|null
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function pluginTypeChangeSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|mixed|null
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function removeFieldMapSubmit(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/pardot/src/FormMap.php:162

    ---------- begin diff ----------
@@ @@
    */
   public function disableMappedField(int $key) {
     if (isset($this->mapping[$key])) {
-      /** @var \Drupal\pardot\MappedFieldInterface $plugin */
+      /** @var MappedFieldInterface $plugin */
       $plugin = $this->mapping[$key];
       $plugin->setStatus(FALSE);
     }
@@ @@
    */
   public function enableMappedField(int $key) {
     if (isset($this->mapping[$key])) {
-      /** @var \Drupal\pardot\MappedFieldInterface $plugin */
+      /** @var MappedFieldInterface $plugin */
       $plugin = $this->mapping[$key];
       $plugin->setStatus(TRUE);
     }
@@ @@
    */
   public function requireMappedField(int $key) {
     if (isset($this->mapping[$key])) {
-      /** @var \Drupal\pardot\MappedFieldInterface $plugin */
+      /** @var MappedFieldInterface $plugin */
       $plugin = $this->mapping[$key];
       $plugin->setIsRequired(TRUE);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/pardot/src/Form/PardotSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Pardot\Form;

+use Drupal\system\Plugin\Condition\RequestPath;
+use Drupal\user\Plugin\Condition\UserRole;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\salesforce\SalesforceAuthProviderPluginManager;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Executable\ExecutableManagerInterface;
@@ @@
   protected $settings;

   /**
-   * @var \Drupal\system\Plugin\Condition\RequestPath $path_condition .
+   * @var RequestPath $path_condition .
    */
   protected $path_condition;

   /**
-   * @var \Drupal\user\Plugin\Condition\UserRole $user_role_condition .
+   * @var UserRole $user_role_condition .
    */
   protected $user_role_condition;

@@ @@
   /**
    * Auth provider manager.
    *
-   * @var \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface
+   * @var SalesforceAuthProviderPluginManagerInterface
    */
   protected $authManager;

@@ @@
   /**
    * PardotSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $plugin_factory
+   * @param ExecutableManagerInterface $plugin_factory
    *   The condition plugin factory.
-   * @param \Drupal\salesforce\SalesforceAuthProviderPluginManagerInterface $authManager
+   * @param SalesforceAuthProviderPluginManagerInterface $authManager
    *   Auth manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
-
   public function __construct(ConfigFactoryInterface $config_factory, ExecutableManagerInterface $plugin_factory, SalesforceAuthProviderPluginManagerInterface $authManager) {
     parent::__construct($config_factory);
     // Load from pardot.settings.yml.
@@ @@
     }

     //    $salesforce_auth_provider_value = $form_state->getValue('salesforce_auth_provider');
-    /** @var \Drupal\salesforce\SalesforceAuthProviderPluginManager $auth_provider_service */
+    /** @var SalesforceAuthProviderPluginManager $auth_provider_service */
     //    $auth_provider_service = \Drupal::service('plugin.manager.salesforce.auth_providers');
     //    $auth_providers = $auth_provider_service->getProviders();
     //    $salesforce_auth_provider = $auth_providers[$salesforce_auth_provider_value] ?? false;
@@ @@
     //      $form_state->setErrorByName('salesforce_auth_provider', $message);
     //      return;
     //    }
-
     parent::validateForm($form, $form_state);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/pardot/src/Form/PardotFormMappingForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pardot\Form;

+use Drupal\pardot\Plugin\PardotFormHandlerManager;
+use Drupal\pardot\Plugin\PardotFormHandlerBase;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\pardot\PluginSubFormHelpers;
@@ @@
   /**
    * Drupal\pardot\Plugin\FormMapHandlerPluginManager definition.
    *
-   * @var \Drupal\pardot\Plugin\PardotFormHandlerManager
+   * @var PardotFormHandlerManager
    */
   protected $pluginManagerFormMapHandlerPlugin;

@@ @@
     $form_map_plugin_instance_id = $form_state->get('form_map_plugin_instance_id');
     if ($pardot_form_mapping && $form_map_plugin_instance_id && $entity) {
       $plugin = $this->pluginManagerFormMapHandlerPlugin;
-      /** @var \Drupal\pardot\Plugin\PardotFormHandlerBase $plugin */
+      /** @var PardotFormHandlerBase $plugin */
       $plugin = $plugin->createInstance($form_map_plugin_instance_id);
       $plugin->validateConfigurationForm($form, $form_state);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/pardot/src/EventSubscriber/PardotEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pardot\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\Core\Session\AccountInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The condition manager.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   private $condition_manager;

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $account;

@@ @@
   /**
    * Creates a new PardotEventSubscriber.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    *
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $condition_manager
+   * @param ExecutableManagerInterface $condition_manager
    *   The condition manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, AccountInterface $account, EntityTypeManagerInterface $entity_type_manager, ExecutableManagerInterface $condition_manager) {
@@ @@
   /**
    * Evaluates tracking scoping conditions and sets state setting.
    *
-   * @param GetResponseEvent $event
+   * @param RequestEvent $event
    */
-  public function evaluateTrackingScope(GetResponseEvent $event) {
+  public function evaluateTrackingScope(RequestEvent $event) {
     // Check if Pardot is configured with an account ID.
     if (null !== $this->config->get('account_id')) {
       // Load use role condition configuration and current user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/pardot/src/EntityTypeInfo.php:39

    ---------- begin diff ----------
@@ @@

   /**
    * @param array $operations
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   public function entityOperation(array &$operations, EntityInterface $entity) {
     $has_permission = \Drupal::currentUser()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/pardot/src/Controller/PardotFormMappingController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pardot\Controller;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\pardot\Form\PardotFormMappingForm;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/pardot/src/Controller/AutoCompleteController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pardot\Controller;

+use Drupal\typed_data\DataFetcherInterface;
+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
@@ @@
   /**
    * Drupal\typed_data\DataFetcherInterface definition.
    *
-   * @var \Drupal\typed_data\DataFetcherInterface
+   * @var DataFetcherInterface
    */
   protected $typedDataDataFetcher;

@@ @@
   /**
    * Entity field manager to get the contact form field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/pardot/src/Annotation/PardotFormHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pardot\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


28) modules/contrib/pardot/src/Annotation/PardotFieldFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pardot\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


29) modules/contrib/pardot/pardot.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\pardot\EntityTypeInfo;
+use Drupal\pardot\FormOperations;
 /**
  * @file
  * Contains pardot.module.
@@ @@
  */
 function pardot_entity_type_alter(array &$entity_types) {
   return \Drupal::service('class_resolver')
-    ->getInstanceFromDefinition(\Drupal\pardot\EntityTypeInfo::class)
+    ->getInstanceFromDefinition(EntityTypeInfo::class)
     ->entityTypeAlter($entity_types);
 }

@@ @@
  * Implements hook_entity_operation_alter().
  *
  * @param array $operations
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *
  * @return mixed
  */
 function pardot_entity_operation_alter(array &$operations, EntityInterface $entity) {
   return \Drupal::service('class_resolver')
-    ->getInstanceFromDefinition(\Drupal\pardot\EntityTypeInfo::class)
+    ->getInstanceFromDefinition(EntityTypeInfo::class)
     ->entityOperation($operations, $entity);
 }

@@ @@

 function pardot_webform_submission_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
   return \Drupal::service('class_resolver')
-    ->getInstanceFromDefinition(\Drupal\pardot\FormOperations::class)
+    ->getInstanceFromDefinition(FormOperations::class)
     ->getFormEntity($form, $form_state, WebformSubmissionForm::class, 'webform');
 }

@@ @@
  */
 function pardot_form_contact_message_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
   return \Drupal::service('class_resolver')
-    ->getInstanceFromDefinition(\Drupal\pardot\FormOperations::class)
+    ->getInstanceFromDefinition(FormOperations::class)
     ->getFormEntity($form, $form_state, MessageForm::class, 'contact_form');
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 29 files have been changed by Rector                                      

