modules/contrib/civicrm_group_roles-civicrm_group_roles/civicrm_group_roles.module
modules/contrib/civicrm_group_roles-civicrm_group_roles/src/Batch/Sync.php
modules/contrib/civicrm_group_roles-civicrm_group_roles/src/CivicrmGroupRoleRuleHtmlRouteProvider.php
modules/contrib/civicrm_group_roles-civicrm_group_roles/src/CivicrmGroupRoleRuleListBuilder.php
modules/contrib/civicrm_group_roles-civicrm_group_roles/src/CivicrmGroupRoles.php
modules/contrib/civicrm_group_roles-civicrm_group_roles/src/Entity/CivicrmGroupRoleRule.php
modules/contrib/civicrm_group_roles-civicrm_group_roles/src/Entity/CivicrmGroupRoleRuleInterface.php
modules/contrib/civicrm_group_roles-civicrm_group_roles/src/Form/CivicrmGroupRoleRuleDeleteForm.php
modules/contrib/civicrm_group_roles-civicrm_group_roles/src/Form/CivicrmGroupRoleRuleForm.php
modules/contrib/civicrm_group_roles-civicrm_group_roles/src/Form/ManualSyncForm.php
modules/contrib/civicrm_group_roles-civicrm_group_roles/src/Form/SettingsForm.php

7 files with changes
====================

1) modules/contrib/civicrm_group_roles-civicrm_group_roles/src/Form/ManualSyncForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * CiviCRM group roles sync batch.
    *
-   * @var \Drupal\civicrm_group_roles\Batch\Sync
+   * @var Sync
    */
   protected $sync;

@@ @@
   /**
    * CivicrmMemberRoleRuleForm constructor.
    *
-   * @param \Drupal\civicrm_group_roles\Batch\Sync $sync
+   * @param Sync $sync
    *   CiviCRM group roles service.
    */
   public function __construct(Sync $sync) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/civicrm_group_roles-civicrm_group_roles/src/Form/CivicrmGroupRoleRuleForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civicrm_group_roles\Form;

+use Drupal\civicrm_group_roles\Entity\CivicrmGroupRoleRuleInterface;
 use Drupal\civicrm_group_roles\CivicrmGroupRoles;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * CiviCRM group roles service.
    *
-   * @var \Drupal\civicrm_group_roles\CivicrmGroupRoles
+   * @var CivicrmGroupRoles
    */
   protected $groupRoles;

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @var MessengerInterface $messenger
    */
   protected $messenger;

@@ @@
   /**
    * CivicrmGroupRoleRuleForm constructor.
    *
-   * @param \Drupal\civicrm_group_roles\CivicrmGroupRoles $groupRoles
+   * @param CivicrmGroupRoles $groupRoles
    *   CiviCRM group roles service.
    */
   public function __construct(
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\civicrm_group_roles\Entity\CivicrmGroupRoleRuleInterface $rule */
+    /** @var CivicrmGroupRoleRuleInterface $rule */
     $rule = $this->entity;
     \Drupal::service('civicrm')->initialize();

@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\civicrm_group_roles\Entity\CivicrmGroupRoleRuleInterface $rule */
+    /** @var CivicrmGroupRoleRuleInterface $rule */
     $rule = $this->entity;

     $rule->setGroup($form_state->getValue('group'))
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/civicrm_group_roles-civicrm_group_roles/src/Form/CivicrmGroupRoleRuleDeleteForm.php:12

    ---------- begin diff ----------
@@ @@
 class CivicrmGroupRoleRuleDeleteForm extends EntityConfirmFormBase {

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @var MessengerInterface $messenger
    */
   protected $messenger;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/civicrm_group_roles-civicrm_group_roles/src/CivicrmGroupRoles.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civicrm_group_roles;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\civicrm_group_roles\Entity\CivicrmGroupRoleRuleInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\civicrm\Civicrm;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * CiviCRM group roles configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * @param \Drupal\civicrm\Civicrm $civicrm
    *   CiviCRM service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager service.
    */
   public function __construct(Civicrm $civicrm, ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * Loads all assignment rules.
    *
-   * @return \Drupal\civicrm_group_roles\Entity\CivicrmGroupRoleRuleInterface[]
+   * @return CivicrmGroupRoleRuleInterface[]
    *   The assignment rules.
    */
   protected function getRules() {
@@ @@
   /**
    * Sync group roles for a user account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    */
   public function syncUser(AccountInterface $account) {
@@ @@
   /**
    * Obtain the contact for a user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
    * @return int|null
@@ @@
    * @param int $cid
    *   The contact ID.
    *
-   * @return \Drupal\Core\Session\AccountInterface|null
+   * @return AccountInterface|null
    *   The contact ID, or NULL if not found.
    */
   public function getContactAccount($cid) {
@@ @@
    *
    * @param int $cid
    *   The contact ID.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    */
   public function syncContact($cid, AccountInterface $account) {
@@ @@
   /**
    * Returns a mapping of role => group rules.
    *
-   * @param \Drupal\civicrm_group_roles\Entity\CivicrmGroupRoleRuleInterface[] $rules
+   * @param CivicrmGroupRoleRuleInterface[] $rules
    *   Assignment rules.
    *
    * @return array
@@ @@
   /**
    * Finds roles used in a set of assignment rules.
    *
-   * @param \Drupal\civicrm_group_roles\Entity\CivicrmGroupRoleRuleInterface[] $rules
+   * @param CivicrmGroupRoleRuleInterface[] $rules
    *   Assignment rules.
    * @param array role
    *  If specified, groups synced to this role is returned.
@@ @@
   /**
    * Gets the user for a user account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity.
    */
   protected function getAccountUser(AccountInterface $account) {
@@ @@
   /**
    * Gets roles to add for a contact's groups.
    *
-   * @param \Drupal\civicrm_group_roles\Entity\CivicrmGroupRoleRuleInterface[] $rules
+   * @param CivicrmGroupRoleRuleInterface[] $rules
    *   Assignment rules.
    * @param array $groups
    *   Contact group data.
@@ @@
   /**
    * Gets the database.
    *
-   * @return \Drupal\Core\Database\Connection
+   * @return Connection
    *   The database.
    */
   protected function getDatabase() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/civicrm_group_roles-civicrm_group_roles/src/CivicrmGroupRoleRuleListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civicrm_group_roles;

+use Drupal\civicrm_group_roles\Entity\CivicrmGroupRoleRuleInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * CiviCRM group roles service.
    *
-   * @var \Drupal\civicrm_group_roles\CivicrmGroupRoles
+   * @var CivicrmGroupRoles
    */
   protected $groupRoles;

@@ @@
   /**
    * User role storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $roleStorage;

@@ @@
   /**
    * CivicrmGroupRoleRuleListBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $roleStorage
+   * @param EntityStorageInterface $roleStorage
    *   The use role storage class.
-   * @param \Drupal\civicrm_group_roles\CivicrmGroupRoles $groupRoles
+   * @param CivicrmGroupRoles $groupRoles
    *   CiviCRM group roles service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, EntityStorageInterface $roleStorage, CivicrmGroupRoles $groupRoles) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\civicrm_group_roles\Entity\CivicrmGroupRoleRuleInterface $entity */
+    /** @var CivicrmGroupRoleRuleInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['group'] = $this->getGroupTitle($entity->getGroup());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/civicrm_group_roles-civicrm_group_roles/src/Batch/Sync.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\civicrm_group_roles\Batch;

+use Drupal\civicrm_group_roles\civicrmGroupRoles;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @var MessengerInterface $messenger
    */
   protected $messenger;

@@ @@
   /**
    * Sync constructor.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $stringTranslation
+   * @param TranslationInterface $stringTranslation
    *   The string translation service.
    */
   public function __construct(
@@ @@
    * This is called directly from the Drupal object to avoid dealing with
    * serialization.
    *
-   * @return \Drupal\civicrm_group_roles\civicrmGroupRoles
+   * @return civicrmGroupRoles
    *   The CiviCRM group roles service.
    */
   protected function getcivicrmGroupRoles() {
@@ @@
    * This is called directly from the Drupal object to avoid dealing with
    * serialization.
    *
-   * @return \Drupal\Core\Database\Connection
+   * @return Connection
    *   The database connection.
    */
   protected function getDatabase() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/civicrm_group_roles-civicrm_group_roles/civicrm_group_roles.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\civicrm_group_roles\CivicrmGroupRoles;
 /**
  * @file
  * CiviGroup Roles Sync module code.
@@ @@
  * Implements hook_user_login().
  */
 function civicrm_group_roles_user_login(AccountInterface $account) {
-  /** @var \Drupal\civicrm_group_roles\CivicrmGroupRoles $civicrm_group_roles */
+  /** @var CivicrmGroupRoles $civicrm_group_roles */
   $civicrm_group_roles = \Drupal::service('civicrm_group_roles');
   $civicrm_group_roles->syncUser($account);
 }
@@ @@
 function civicrm_group_roles_user_insert($account) {
   $roles = $account->getRoles();
   if ($roles) {
-    /** @var \Drupal\civicrm_group_roles\CivicrmGroupRoles $civicrm_group_roles */
+    /** @var CivicrmGroupRoles $civicrm_group_roles */
     $civicrm_group_roles = \Drupal::service('civicrm_group_roles');
     $civicrm_group_roles->addGroupsOnCreate($account, $roles);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

