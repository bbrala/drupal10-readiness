diff --git a/asset_injector.module b/asset_injector.module
index 83b8f71..7080b22 100644
--- a/asset_injector.module
+++ b/asset_injector.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 /**
  * @file
  * Contains module asset_injector.
@@ -72,7 +74,7 @@ function asset_injector_css_alter(array &$css, AttachedAssetsInterface $assets)
  */
 function asset_injector_ckeditor_css_alter(array &$css, Editor $editor) {
   foreach (asset_injector_get_assets(TRUE, ['asset_injector_css']) as $asset) {
-    $css[] = file_create_url($asset->internalFileUri());
+    $css[] = \Drupal::service('file_url_generator')->generateAbsoluteString($asset->internalFileUri());
   }
 }
 
@@ -117,9 +119,9 @@ function asset_injector_library_info_build() {
  * asset creation.
  */
 function asset_injector_page_attachments(array &$attachments) {
-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');
-  /** @var \Drupal\Core\Asset\AttachedAssetsInterface $asset */
+  /** @var AttachedAssetsInterface $asset */
   foreach (asset_injector_get_assets(TRUE) as $asset) {
     $attachments['#attached']['library'][] = 'asset_injector/' . $asset->libraryNameSuffix();
     $renderer->addCacheableDependency($attachments, $asset);
@@ -134,11 +136,11 @@ function asset_injector_page_attachments(array &$attachments) {
  * @param array $types
  *   Array of entity type ids to limit the return.
  *
- * @return \Drupal\asset_injector\AssetInjectorInterface[]
+ * @return AssetInjectorInterface[]
  *   Assets from css & js injectors.
  */
 function asset_injector_get_assets($active = NULL, array $types = []) {
-  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+  /** @var EntityTypeManagerInterface $entity_type_manager */
   $entity_type_manager = \Drupal::entityTypeManager();
   $assets = [];
   foreach (asset_injector_get_entity_types($types) as $entity_type_id => $entity_type) {
diff --git a/src/AssetFileStorage.php b/src/AssetFileStorage.php
index e3c086b..b101fc1 100644
--- a/src/AssetFileStorage.php
+++ b/src/AssetFileStorage.php
@@ -101,7 +101,7 @@ final class AssetFileStorage {
   /**
    * Get the Drupal file system service.
    *
-   * @return \Drupal\Core\File\FileSystemInterface
+   * @return FileSystemInterface
    *   File System service.
    */
   protected static function getFileSystemService() {
diff --git a/src/AssetInjectorAccessControlHandler.php b/src/AssetInjectorAccessControlHandler.php
index 9f09e4d..d2d918f 100644
--- a/src/AssetInjectorAccessControlHandler.php
+++ b/src/AssetInjectorAccessControlHandler.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\asset_injector;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\system\Plugin\Condition\CurrentThemeCondition;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\Cache;
@@ -29,14 +32,14 @@ class AssetInjectorAccessControlHandler extends EntityAccessControlHandler imple
   /**
    * The plugin context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
    * The context manager service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
@@ -54,11 +57,11 @@ class AssetInjectorAccessControlHandler extends EntityAccessControlHandler imple
   /**
    * Constructs the asset_injector access control handler instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The ContextHandler for applying contexts to conditions properly.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
    */
   public function __construct(EntityTypeInterface $entity_type, ContextHandlerInterface $context_handler, ContextRepositoryInterface $context_repository) {
@@ -78,7 +81,7 @@ class AssetInjectorAccessControlHandler extends EntityAccessControlHandler imple
       return parent::checkAccess($entity, $operation, $account);
     }
 
-    /** @var \Drupal\asset_injector\AssetInjectorInterface $entity */
+    /** @var AssetInjectorInterface $entity */
     // Don't grant access to disabled assets.
     if (!$entity->status()) {
       return AccessResult::forbidden()->addCacheableDependency($entity);
@@ -138,13 +141,13 @@ class AssetInjectorAccessControlHandler extends EntityAccessControlHandler imple
   /**
    * Resolve only current_theme condition plugins.
    *
-   * @param \Drupal\asset_injector\AssetInjectorInterface $entity
+   * @param AssetInjectorInterface $entity
    *   The asset with theme conditions.
    *
    * @return bool
    *   If the theme condition resolves true or not.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function resolveThemeConditions(AssetInjectorInterface $entity) {
 
@@ -157,7 +160,7 @@ class AssetInjectorAccessControlHandler extends EntityAccessControlHandler imple
       return TRUE;
     }
 
-    /** @var \Drupal\system\Plugin\Condition\CurrentThemeCondition $theme_condition */
+    /** @var CurrentThemeCondition $theme_condition */
     $theme_condition = $conditions->get('current_theme');
     $config = $theme_condition->getConfig();
 
@@ -176,9 +179,9 @@ class AssetInjectorAccessControlHandler extends EntityAccessControlHandler imple
   /**
    * Merges cacheable metadata from conditions onto the access result object.
    *
-   * @param \Drupal\Core\Access\AccessResult $access
+   * @param AccessResult $access
    *   The access result object.
-   * @param \Drupal\Core\Condition\ConditionInterface[] $conditions
+   * @param ConditionInterface[] $conditions
    *   List of conditions.
    */
   protected function mergeCacheabilityFromConditions(AccessResult $access, array $conditions) {
diff --git a/src/AssetInjectorInterface.php b/src/AssetInjectorInterface.php
index 1c64879..c8e1d7e 100644
--- a/src/AssetInjectorInterface.php
+++ b/src/AssetInjectorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\asset_injector;
 
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
@@ -64,7 +65,7 @@ interface AssetInjectorInterface extends ConfigEntityInterface {
   /**
    * Gets conditions for this asset.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface[]|\Drupal\Core\Condition\ConditionPluginCollection
+   * @return ConditionInterface[]|ConditionPluginCollection
    *   An array or collection of configured condition plugins.
    */
   public function getConditionsCollection();
@@ -72,7 +73,7 @@ interface AssetInjectorInterface extends ConfigEntityInterface {
   /**
    * Set new conditions on the asset.
    *
-   * @param \Drupal\Core\Condition\ConditionPluginCollection $conditions
+   * @param ConditionPluginCollection $conditions
    *   Conditions to set.
    */
   public function setConditionsCollection(ConditionPluginCollection $conditions);
@@ -83,7 +84,7 @@ interface AssetInjectorInterface extends ConfigEntityInterface {
    * @param string $instance_id
    *   The condition plugin instance ID.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface
+   * @return ConditionInterface
    *   A condition plugin.
    */
   public function getConditionsInstance($instance_id);
diff --git a/src/AssetInjectorListBuilder.php b/src/AssetInjectorListBuilder.php
index 82feaee..c876c59 100644
--- a/src/AssetInjectorListBuilder.php
+++ b/src/AssetInjectorListBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\asset_injector;
 
+use Drupal\Core\Condition\ConditionPluginBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ -28,7 +30,7 @@ class AssetInjectorListBuilder extends ConfigEntityListBuilder {
 
     $data['conditions'] = [];
 
-    /** @var \Drupal\Core\Condition\ConditionPluginBase $condition */
+    /** @var ConditionPluginBase $condition */
     foreach ($entity->getConditionsCollection() as $condition_id => $condition) {
       if ($condition_id == 'current_theme') {
         $config = $condition->getConfiguration();
@@ -36,7 +38,7 @@ class AssetInjectorListBuilder extends ConfigEntityListBuilder {
       }
 
       $data['conditions'][$condition_id] = $this->t('%plugin is configured.', ['%plugin' => $condition->getPluginDefinition()['label']]);
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $summary */
+      /** @var TranslatableMarkup $summary */
       if ($summary = $condition->summary()) {
         $data['conditions'][$condition_id] = Html::decodeEntities($summary->render());
       }
@@ -47,7 +49,7 @@ class AssetInjectorListBuilder extends ConfigEntityListBuilder {
       '#list_type' => 'ul',
       '#items' => empty($data['conditions']) ? [$this->t('Global')] : $data['conditions'],
     ];
-    $data['conditions'] = render($data['conditions']);
+    $data['conditions'] = \Drupal::service('renderer')->render($data['conditions']);
 
     $row = [
       'class' => $entity->status() ? 'enabled' : 'disabled',
diff --git a/src/Entity/AssetInjectorBase.php b/src/Entity/AssetInjectorBase.php
index 8f86a50..d8d8957 100644
--- a/src/Entity/AssetInjectorBase.php
+++ b/src/Entity/AssetInjectorBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\asset_injector\Entity;
 
+use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\asset_injector\AssetInjectorInterface;
 use Drupal\asset_injector\AssetFileStorage;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ -61,14 +62,14 @@ abstract class AssetInjectorBase extends ConfigEntityBase implements AssetInject
   /**
    * The conditions collection.
    *
-   * @var \Drupal\Core\Condition\ConditionPluginCollection
+   * @var ConditionPluginCollection
    */
   protected $conditionsCollection;
 
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected $conditionPluginManager;
 
@@ -199,7 +200,7 @@ abstract class AssetInjectorBase extends ConfigEntityBase implements AssetInject
   /**
    * Gets the condition plugin manager.
    *
-   * @return \Drupal\Core\Executable\ExecutableManagerInterface
+   * @return ExecutableManagerInterface
    *   The condition plugin manager.
    */
   protected function conditionPluginManager() {
diff --git a/src/Form/AssetInjectorCssDuplicateForm.php b/src/Form/AssetInjectorCssDuplicateForm.php
index 88f0b31..c9fa0aa 100644
--- a/src/Form/AssetInjectorCssDuplicateForm.php
+++ b/src/Form/AssetInjectorCssDuplicateForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\asset_injector\Form;
 
+use Drupal\asset_injector\Entity\AssetInjectorCss;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
@@ -15,7 +16,7 @@ class AssetInjectorCssDuplicateForm extends AssetInjectorCssForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\asset_injector\Entity\AssetInjectorCss $entity */
+    /** @var AssetInjectorCss $entity */
     $entity = $this->entity->createDuplicate();
     $entity->label = $this->t('Duplicate of @label', ['@label' => $this->entity->label()]);
     $this->entity = $entity;
diff --git a/src/Form/AssetInjectorCssForm.php b/src/Form/AssetInjectorCssForm.php
index ccf0c4e..b09a99e 100644
--- a/src/Form/AssetInjectorCssForm.php
+++ b/src/Form/AssetInjectorCssForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\asset_injector\Form;
 
+use Drupal\asset_injector\Entity\AssetInjectorCss;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
@@ -17,7 +18,7 @@ class AssetInjectorCssForm extends AssetInjectorFormBase {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\asset_injector\Entity\AssetInjectorCss $entity */
+    /** @var AssetInjectorCss $entity */
     $entity = $this->entity;
 
     // Advanced options fieldset.
diff --git a/src/Form/AssetInjectorDeleteForm.php b/src/Form/AssetInjectorDeleteForm.php
index e827980..56635d2 100644
--- a/src/Form/AssetInjectorDeleteForm.php
+++ b/src/Form/AssetInjectorDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\asset_injector\Form;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -41,7 +42,7 @@ class AssetInjectorDeleteForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $this->logger('asset_injector')->notice('%type asset %id deleted', [
       '%type' => $entity->get('entityTypeId'),
diff --git a/src/Form/AssetInjectorDisableForm.php b/src/Form/AssetInjectorDisableForm.php
index 725611b..7098d24 100644
--- a/src/Form/AssetInjectorDisableForm.php
+++ b/src/Form/AssetInjectorDisableForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\asset_injector\Form;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -46,7 +47,7 @@ class AssetInjectorDisableForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $entity->disable()->save();
 
diff --git a/src/Form/AssetInjectorEnableForm.php b/src/Form/AssetInjectorEnableForm.php
index 9480382..88fb342 100644
--- a/src/Form/AssetInjectorEnableForm.php
+++ b/src/Form/AssetInjectorEnableForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\asset_injector\Form;
 
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -46,7 +47,7 @@ class AssetInjectorEnableForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $entity->enable()->save();
 
diff --git a/src/Form/AssetInjectorFormBase.php b/src/Form/AssetInjectorFormBase.php
index af7a2d2..8d3a7b0 100644
--- a/src/Form/AssetInjectorFormBase.php
+++ b/src/Form/AssetInjectorFormBase.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\asset_injector\Form;
 
+use Drupal\asset_injector\AssetInjectorInterface;
+use Drupal\Core\Condition\ConditionManager;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\Extension\ThemeHandler;
+use Drupal\asset_injector\Entity\AssetInjectorBase;
+use Drupal\Core\Condition\ConditionInterface;
 use Psr\Log\LoggerInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -23,56 +29,56 @@ class AssetInjectorFormBase extends EntityForm {
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The Asset entity.
    *
-   * @var \Drupal\asset_injector\AssetInjectorInterface
+   * @var AssetInjectorInterface
    */
   protected $entity;
 
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $manager;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $language;
 
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandler
+   * @var ThemeHandler
    */
   protected $themeHandler;
 
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The plugin form manager.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;
 
@@ -93,17 +99,17 @@ class AssetInjectorFormBase extends EntityForm {
   /**
    * AssetInjectorFormBase constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $manager
+   * @param ExecutableManagerInterface $manager
    *   The ConditionManager for building the conditions UI.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language
+   * @param LanguageManagerInterface $language
    *   The language manager.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $plugin_form_manager
+   * @param PluginFormFactoryInterface $plugin_form_manager
    *   The plugin form manager.
    */
   public function __construct(LoggerInterface $logger, ExecutableManagerInterface $manager, ContextRepositoryInterface $context_repository, LanguageManagerInterface $language, ThemeHandlerInterface $theme_handler, PluginFormFactoryInterface $plugin_form_manager) {
@@ -126,7 +132,7 @@ class AssetInjectorFormBase extends EntityForm {
     // during form building.
     $form_state->setTemporaryValue('gathered_contexts', $this->contextRepository->getAvailableContexts());
 
-    /** @var \Drupal\asset_injector\Entity\AssetInjectorBase $entity */
+    /** @var AssetInjectorBase $entity */
     $entity = $this->entity;
 
     $form['label'] = [
@@ -189,7 +195,7 @@ class AssetInjectorFormBase extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -217,7 +223,7 @@ class AssetInjectorFormBase extends EntityForm {
       }
 
       $condition_config = isset($conditions[$condition_id]) ? $conditions[$condition_id] : [];
-      /** @var \Drupal\Core\Condition\ConditionInterface $condition */
+      /** @var ConditionInterface $condition */
       $condition = $this->manager->createInstance($condition_id, $condition_config);
       $form_state->set(['conditions', $condition_id], $condition);
       $condition_form = $condition->buildConfigurationForm([], $form_state);
diff --git a/src/Form/AssetInjectorJsDuplicateForm.php b/src/Form/AssetInjectorJsDuplicateForm.php
index c9a7080..6d8a727 100644
--- a/src/Form/AssetInjectorJsDuplicateForm.php
+++ b/src/Form/AssetInjectorJsDuplicateForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\asset_injector\Form;
 
+use Drupal\asset_injector\Entity\AssetInjectorJs;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
@@ -15,7 +16,7 @@ class AssetInjectorJsDuplicateForm extends AssetInjectorJsForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\asset_injector\Entity\AssetInjectorJs $entity */
+    /** @var AssetInjectorJs $entity */
     $entity = $this->entity->createDuplicate();
     $entity->label = $this->t('Duplicate of @label', ['@label' => $this->entity->label()]);
     $this->entity = $entity;
diff --git a/src/Form/AssetInjectorJsForm.php b/src/Form/AssetInjectorJsForm.php
index 24eee5d..16b5c87 100644
--- a/src/Form/AssetInjectorJsForm.php
+++ b/src/Form/AssetInjectorJsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\asset_injector\Form;
 
+use Drupal\asset_injector\Entity\AssetInjectorJs;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
@@ -17,7 +18,7 @@ class AssetInjectorJsForm extends AssetInjectorFormBase {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\asset_injector\Entity\AssetInjectorJs $entity */
+    /** @var AssetInjectorJs $entity */
     $entity = $this->entity;
     // Advanced options fieldset.
     $form['advanced'] = [
diff --git a/tests/src/Functional/AssetInjectorCssTest.php b/tests/src/Functional/AssetInjectorCssTest.php
index 795642a..4032630 100644
--- a/tests/src/Functional/AssetInjectorCssTest.php
+++ b/tests/src/Functional/AssetInjectorCssTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\asset_injector\Functional;
 
+use Drupal\asset_injector\Entity\AssetInjectorCss;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 
@@ -31,7 +32,7 @@ class AssetInjectorCssTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->drupalPlaceBlock('local_tasks_block');
@@ -80,7 +81,7 @@ class AssetInjectorCssTest extends BrowserTestBase {
     ], $this->t('Save'));
 
     $this->getSession()->getPage()->hasContent('asset_injector/css/blocks');
-    /** @var \Drupal\asset_injector\Entity\AssetInjectorCss $asset */
+    /** @var AssetInjectorCss $asset */
     foreach (asset_injector_get_assets(NULL, ['asset_injector_css']) as $asset) {
       $path = parse_url(file_create_url($asset->internalFileUri()), PHP_URL_PATH);
       $path = str_replace(base_path(), '/', $path);
diff --git a/tests/src/Functional/AssetInjectorJsTest.php b/tests/src/Functional/AssetInjectorJsTest.php
index 6a30185..2a37e45 100644
--- a/tests/src/Functional/AssetInjectorJsTest.php
+++ b/tests/src/Functional/AssetInjectorJsTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\asset_injector\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\asset_injector\Entity\AssetInjectorJs;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 
@@ -31,14 +33,14 @@ class AssetInjectorJsTest extends BrowserTestBase {
   /**
    * The account to be used to test access to both workflows.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $administrator;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->drupalPlaceBlock('local_tasks_block');
@@ -88,7 +90,7 @@ class AssetInjectorJsTest extends BrowserTestBase {
 
     $this->getSession()->getPage()->hasContent('asset_injector/js/blocks');
 
-    /** @var \Drupal\asset_injector\Entity\AssetInjectorJs $asset */
+    /** @var AssetInjectorJs $asset */
     foreach (asset_injector_get_assets(NULL, ['asset_injector_js']) as $asset) {
       $path = parse_url(file_create_url($asset->internalFileUri()), PHP_URL_PATH);
       $path = str_replace(base_path(), '/', $path);
