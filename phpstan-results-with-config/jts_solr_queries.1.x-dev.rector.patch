diff --git a/jts_solr_queries.info.yml b/jts_solr_queries.info.yml
index 7a47072..f67ff4e 100644
--- a/jts_solr_queries.info.yml
+++ b/jts_solr_queries.info.yml
@@ -1,8 +1,7 @@
 name: 'jts solr queries'
 type: module
 description: 'Solr Spatial queries with polygons'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'Search API'
 dependencies:
   - geofield:geofield
diff --git a/jts_solr_queries.module b/jts_solr_queries.module
index 801c4ba..81d4c96 100644
--- a/jts_solr_queries.module
+++ b/jts_solr_queries.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\search_api\IndexInterface;
+use Drupal\search_api\Item\FieldInterface;
 /**
  * @file
  * Contains jts_solr_queries.module.
@@ -104,11 +106,11 @@ function jts_solr_queries_search_api_solr_config_files_alter(array &$files, stri
  * Implements hook_views_data_alter().
  */
 function jts_solr_queries_views_data_alter(&$data) {
-  /** @var \Drupal\search_api\IndexInterface $index */
+  /** @var IndexInterface $index */
   foreach (Index::loadMultiple() as $index) {
     $table = &$data['search_api_index_' . $index->id()];
 
-    /** @var \Drupal\search_api\Item\FieldInterface $field */
+    /** @var FieldInterface $field */
     foreach ($index->getFields(TRUE) as $field_id => $field) {
       // @todo convert to search_api_rpt search filter!!
       // && $field->getOriginalFieldIdentifier() == 'rpt') {
diff --git a/src/EventSubscriber/EventListener.php b/src/EventSubscriber/EventListener.php
index cd8be97..5aac22e 100644
--- a/src/EventSubscriber/EventListener.php
+++ b/src/EventSubscriber/EventListener.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\jts_solr_queries\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\search_api\Event\SearchApiEvents;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -18,7 +18,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Drupal\Core\Messenger\MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
@@ -41,7 +41,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Method called when SearchApiEvents::GATHERING_DATA_SOURCES is dispatched.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The dispatched event.
    */
   public function dataTypeInfoAlter(Event $event) {
diff --git a/src/Plugin/views/filter/SearchApiJtsFilter.php b/src/Plugin/views/filter/SearchApiJtsFilter.php
index 1ff6226..02c4b1d 100644
--- a/src/Plugin/views/filter/SearchApiJtsFilter.php
+++ b/src/Plugin/views/filter/SearchApiJtsFilter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\jts_solr_queries\Plugin\views\filter;
 
+use Drupal\geofield\Plugin\GeofieldProximitySourceInterface;
+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\geofield\Plugin\views\filter\GeofieldProximityFilter;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -101,7 +103,7 @@ class SearchApiJtsFilter extends GeofieldProximityFilter {
    */
   public function query() {
     try {
-      /** @var \Drupal\geofield\Plugin\GeofieldProximitySourceInterface $source_plugin */
+      /** @var GeofieldProximitySourceInterface $source_plugin */
       $this->sourcePlugin = $this->proximitySourceManager->createInstance($this->options['source'], $this->options['source_configuration']);
       $this->sourcePlugin->setViewHandler($this);
       $this->sourcePlugin->setUnits($this->options['units']);
@@ -113,7 +115,7 @@ class SearchApiJtsFilter extends GeofieldProximityFilter {
       // Otherwise output empty result in case of unexposed proximity filter.
       elseif (!$this->isExposed()) {
         // Origin is not valid so return no results (if not exposed filter).
-        drupal_set_message($this->t('The location %location could not be resolved and was ignored.', ['%location' => $this->value['value']]), 'warning');
+        $this->messenger()->addWarning($this->t('The location %location could not be resolved and was ignored.', ['%location' => $this->value['value']]));
       }
     }
     catch (\Exception $e) {
@@ -155,7 +157,7 @@ class SearchApiJtsFilter extends GeofieldProximityFilter {
     ) {
       // We are not using $this->value['value'] here... @todo whenever
       // predicates are used.
-      /** @var \Drupal\views\Plugin\views\query\Sql $query */
+      /** @var Sql $query */
       $query = $this->query;
       $predicate = $this->operators()[$this->operator]['short'];
       $query->setOption("solr_param_fq", "rptm_" . $options["field"] . ":\"$predicate(" . $options["lat"] . "," . $options["lon"] . ")\"");
