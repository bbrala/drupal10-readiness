diff --git a/dru_chat.module b/dru_chat.module
index 528b993..5595738 100644
--- a/dru_chat.module
+++ b/dru_chat.module
@@ -51,5 +51,5 @@ function dru_chat_theme() {
  * Implements hook_preprocess().
  */
 function dru_chat_preprocess(&$variables, $hook) {
-  $variables['dru_chat_missing_image'] = file_create_url(drupal_get_path('module', 'dru_chat') . '/images/missing_image.svg');
+  $variables['dru_chat_missing_image'] = \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('dru_chat') . '/images/missing_image.svg');
 }
diff --git a/src/Controller/MessagesController.php b/src/Controller/MessagesController.php
index ec73747..2cd6439 100644
--- a/src/Controller/MessagesController.php
+++ b/src/Controller/MessagesController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\dru_chat\Controller;
 
+use Symfony\Component\HttpFoundation\Session\Session;
+use Pusher\Pusher;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Render\Renderer;
 use Drupal\Core\Session\AccountInterface;
@@ -22,23 +24,23 @@ class MessagesController extends ControllerBase {
   /**
    * The dru_chat.messages service.
    *
-   * @var \Drupal\dru_chat\Service\Messages
+   * @var Messages
    */
   private $messages;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   private $renderer;
 
   /**
    * MessagesController constructor.
    *
-   * @param \Drupal\dru_chat\Service\Messages $messages
+   * @param Messages $messages
    *   The dru_chat.messages service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
    */
   public function __construct(Messages $messages, Renderer $renderer) {
@@ -58,12 +60,12 @@ class MessagesController extends ControllerBase {
   /**
    * Builds a messages view related to the two users.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   User Account entity.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Symfony Request object from ajax request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response.
    */
   public function getMessages(AccountInterface $user, Request $request) {
@@ -96,10 +98,10 @@ class MessagesController extends ControllerBase {
   /**
    * Returns a json response.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The symfony request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response, in json format.
    */
   public function newMessage(Request $request) {
@@ -118,7 +120,7 @@ class MessagesController extends ControllerBase {
    * Registers a user to pusher presence api.
    *   Easier to track online users this way, than implementing
    *   a custom session handler
-   * @throws \Pusher\PusherException
+   * @throws PusherException
    */
   public function presence(Request $request) {
     $channelName = $request->request->get('channel_name', NULL);
@@ -128,7 +130,7 @@ class MessagesController extends ControllerBase {
       throw new BadRequestHttpException('Bad request object');
     }
 
-    /** @var \Symfony\Component\HttpFoundation\Session\Session $session */
+    /** @var Session $session */
     $session = $request->getSession();
     if (!$session->get('dru_chat_user')) {
       $user_id = $session->getId();
@@ -136,7 +138,7 @@ class MessagesController extends ControllerBase {
       try {
         $pusher = \Drupal::service('dru_chat.messages');
         // @todo doesn't work!!! because of issue @ https://github.com/pusher/pusher-js/issues/485
-        /** @var \Pusher\Pusher $pusherInstance */
+        /** @var Pusher $pusherInstance */
         $pusherInstance = $pusher->pusherInstance();
 
         $presenceItem = [
diff --git a/src/Event/DruChatEvent.php b/src/Event/DruChatEvent.php
index 2aee660..d3dcf3f 100644
--- a/src/Event/DruChatEvent.php
+++ b/src/Event/DruChatEvent.php
@@ -1,8 +1,8 @@
 <?php
 namespace Drupal\dru_chat\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\dru_chat\Entity\Message;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Defines DruChatEvent class.
@@ -14,14 +14,14 @@ class DruChatEvent extends Event {
   /**
    * The current message instance.
    *
-   * @var \Drupal\dru_chat\Entity\Message
+   * @var Message
    */
   protected $msg_item;
 
   /**
    * DruChatEvent constructor.
    *
-   * @param \Drupal\dru_chat\Entity\Message $msg_item
+   * @param Message $msg_item
    *   The Message class.
    */
   public function __construct(Message $msg_item) {
@@ -29,7 +29,7 @@ class DruChatEvent extends Event {
   }
 
   /**
-   * @return \Drupal\dru_chat\Entity\Message
+   * @return Message
    *   The current message object instance.
    */
   public function getMessageItem(){
diff --git a/src/Event/DruChatPresenceEvent.php b/src/Event/DruChatPresenceEvent.php
index dfe7216..122be13 100644
--- a/src/Event/DruChatPresenceEvent.php
+++ b/src/Event/DruChatPresenceEvent.php
@@ -4,7 +4,7 @@
 namespace Drupal\dru_chat\Event;
 
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event fired when a new user presence is registered.
diff --git a/src/Event/DruChatUserListEvent.php b/src/Event/DruChatUserListEvent.php
index 1bb6406..05bd58a 100644
--- a/src/Event/DruChatUserListEvent.php
+++ b/src/Event/DruChatUserListEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\dru_chat\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Defines DruChatUserListEvent.
diff --git a/src/Examples/DruChatExampleSubscriber.php b/src/Examples/DruChatExampleSubscriber.php
index be352a5..20facee 100644
--- a/src/Examples/DruChatExampleSubscriber.php
+++ b/src/Examples/DruChatExampleSubscriber.php
@@ -23,7 +23,7 @@ use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 class DruChatExampleSubscriber implements EventSubscriberInterface {
 
   /**
-   * @param \Drupal\dru_chat\Event\DruChatEvent $event
+   * @param DruChatEvent $event
    */
   public function druChatNewMessage(DruChatEvent $event){
 
@@ -38,7 +38,7 @@ class DruChatExampleSubscriber implements EventSubscriberInterface {
   }
 
   /**
-   * @param \Drupal\dru_chat\Event\DruChatPresenceEvent $event
+   * @param DruChatPresenceEvent $event
    * "channelName" => "hohjohohohohoouxgsagF",
    * "socketId" => "KJHBCKJSGBKJDSBDJMAsgdsagdkasgddgk",
    * "userId" => 1629375665,
diff --git a/src/Plugin/Block/DruChatBlock.php b/src/Plugin/Block/DruChatBlock.php
index 2937e0c..af66f15 100644
--- a/src/Plugin/Block/DruChatBlock.php
+++ b/src/Plugin/Block/DruChatBlock.php
@@ -27,34 +27,34 @@ class DruChatBlock extends BlockBase implements ContainerFactoryPluginInterface
 
   /**
    *
-   * @var \Drupal\dru_chat\Service\Messages
+   * @var Messages
    */
   private $messages;
 
   /**
    * The module_handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   private $moduleHandler;
 
   /**
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   private $accountProxy;
 
   /**
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   private $csrfToken;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -64,12 +64,12 @@ class DruChatBlock extends BlockBase implements ContainerFactoryPluginInterface
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\dru_chat\Service\Messages $messages
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
-   * @param \Drupal\Core\Session\AccountProxyInterface $accountProxy
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrfToken
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param Messages $messages
+   * @param ConfigFactoryInterface $configFactory
+   * @param ModuleHandlerInterface $moduleHandler
+   * @param AccountProxyInterface $accountProxy
+   * @param CsrfTokenGenerator $csrfToken
+   * @param EntityTypeManagerInterface $entityTypeManager
    */
   public function __construct(array $configuration,
                               $plugin_id,
@@ -93,7 +93,7 @@ class DruChatBlock extends BlockBase implements ContainerFactoryPluginInterface
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Service/Messages.php b/src/Service/Messages.php
index 0c014a7..122ef2e 100644
--- a/src/Service/Messages.php
+++ b/src/Service/Messages.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\dru_chat\Service;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Session\AccountProxy;
+use Pusher\PusherException;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Pusher\ApiErrorException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\InvalidQueryException;
@@ -18,21 +25,21 @@ class Messages {
   /**
    * The EntityTypeManagerInterface class.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The ConfigFactoryInterface service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Setter for EntityTypeManagerInterface class.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The EntityTypeManagerInterface class.
    */
   public function setEntity(EntityTypeManagerInterface $entityTypeManager) {
@@ -42,7 +49,7 @@ class Messages {
   /**
    * Setter for the ConfigFactoryInterface service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The ConfigFactoryInterface service.
    */
   public function setConfig(ConfigFactoryInterface $configFactory) {
@@ -55,13 +62,13 @@ class Messages {
    * @param string $user_id
    *   User id.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of message entities, relating to
    *   current user and the user param passed.
    */
   public function getMessages($user_id) {
 
-    /** @var \Drupal\Core\Session\AccountProxy $current_user */
+    /** @var AccountProxy $current_user */
     $current_user = \Drupal::currentUser();
 
     // @todo for guests.
@@ -97,8 +104,8 @@ class Messages {
   /**
    * Returns a pusher instance we can reuse.
    *
-   * @return \Pusher\Pusher
-   * @throws \Pusher\PusherException
+   * @return Pusher
+   * @throws PusherException
    */
   public function pusherInstance() {
     $config = $this->configFactory->getEditable('dru_chat.settings');
@@ -129,16 +136,16 @@ class Messages {
    * @param string $message
    *   The message string to send.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Pusher\ApiErrorException
-   * @throws \Pusher\PusherException
+   * @return EntityStorageInterface|null
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws ApiErrorException
+   * @throws PusherException
    */
   public function createMessage($to, $message) {
 
-    /** @var \Drupal\Core\Session\AccountProxy $current_user */
+    /** @var AccountProxy $current_user */
     $current_user = \Drupal::currentUser();
     $from = $current_user->id();
 
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 02e2bc6..670b834 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\dru_chat\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,14 +23,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
