modules/contrib/user_history/src/Entity/UserHistory.php
modules/contrib/user_history/src/Entity/UserHistoryInterface.php
modules/contrib/user_history/src/EventSubscriber/ConfigEventsSubscriber.php
modules/contrib/user_history/src/Form/UserHistoryAddForm.php
modules/contrib/user_history/src/Form/UserHistoryArchiveForm.php
modules/contrib/user_history/src/Form/UserHistoryDeleteForm.php
modules/contrib/user_history/src/Form/UserHistoryEditForm.php
modules/contrib/user_history/src/Form/UserHistoryForm.php
modules/contrib/user_history/src/Form/UserHistoryInitialiseForm.php
modules/contrib/user_history/src/Form/UserHistoryRestoreForm.php
modules/contrib/user_history/src/Form/UserHistorySettingsForm.php
modules/contrib/user_history/src/Form/UserHistoryUpdateForm.php
modules/contrib/user_history/src/UserHistoryAccessControlHandler.php
modules/contrib/user_history/src/UserHistoryHtmlRouteProvider.php
modules/contrib/user_history/src/UserHistoryListBuilder.php
modules/contrib/user_history/src/UserHistoryViewBuilder.php
modules/contrib/user_history/src/UserHistoryViewsData.php
modules/contrib/user_history/tests/src/Functional/LoadFrontPageTest.php
modules/contrib/user_history/user_history.archive.inc
modules/contrib/user_history/user_history.batch.inc
modules/contrib/user_history/user_history.install
modules/contrib/user_history/user_history.module
modules/contrib/user_history/user_history.page.inc
modules/contrib/user_history/user_history.restore.inc

19 files with changes
=====================

1) modules/contrib/user_history/user_history.restore.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityStorageException;
 /**
  * @file
  * Contains functions for restoring archived user_history records.
@@ @@
  * @param array $context
  *   The batch processing context.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function user_history_restore_records($archive_file, array $uids, $batch_size, array &$context) {

@@ @@
  * @param array $operations
  *   A list of the batch operations.
  *
- * @return \Symfony\Component\HttpFoundation\RedirectResponse
+ * @return RedirectResponse
  *   The next page to display to the user.
  */
 function user_history_finished_restore_records($success, array $results, array $operations) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/user_history/user_history.page.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\user_history\Entity\UserHistoryInterface;
 /**
  * @file
  * Contains user_history.page.inc.
@@ @@
  *   - elements: An associative array containing the user information and any
  *   - attributes: HTML attributes for the containing element.
  *
- * @throws \Drupal\Core\Entity\EntityMalformedException
+ * @throws EntityMalformedException
  */
 function template_preprocess_user_history(array &$variables) {

   // Fetch UserHistory Entity Object.
-  /** @var \Drupal\user_history\Entity\UserHistoryInterface $entity */
+  /** @var UserHistoryInterface $entity */
   $entity = $variables['elements']['#user_history'];
   // Provide the label.
   $variables['label'] = $entity->label();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/user_history/user_history.module:118

    ---------- begin diff ----------
@@ @@
   // Get the most recent user_history record for this user.
   $ids = \Drupal::entityQuery('user_history')->condition('user_id', $user->id())->execute();
   if ($ids) {
-    /** @var \Drupal\user_history\Entity\UserHistory $recent */
+    /** @var UserHistory $recent */
     $recent = \Drupal::entityTypeManager()->getStorage('user_history')->load(max($ids));
     $difference = user_history_diff_user_history($recent, $user_history);
     // Check if this record should be ignored because there is no change.
@@ @@
     // Add values of tracked fields attached to the user entity.
     foreach ($attached_fields as $field_name => $tracked) {
       if ($tracked) {
-        /** @var \Drupal\field\Entity\FieldConfig $field_definition */
+        /** @var FieldConfig $field_definition */
         $field_definition = $field_definitions[$field_name];
         if ($field_definition instanceof FieldConfig) {
           // $field_type is not currently used.
@@ @@
           $field_type = $field_definition->getType();
         }

-        /** @var \Drupal\Core\Field\FieldItemList $field_item_list */
+        /** @var FieldItemList $field_item_list */
         $field_item_list = $account->get($field_name);

         $history_values = user_history_get_tracked_field_value($field_item_list);
@@ @@
 /**
  * Function to prepare an array of history values for a tracked field.
  *
- * @param \Drupal\Core\Field\FieldItemList $field_item_list
+ * @param FieldItemList $field_item_list
  *   The list of field values to be tracked.
  *
  * @return array|null
@@ @@
     // Check for changes in values of tracked fields attached to user entity.
     foreach ($attached_fields as $field_name => $tracked) {
       if ($tracked) {
-        /** @var \Drupal\field\Entity\FieldConfig $fieldConfig */
+        /** @var FieldConfig $fieldConfig */
         $fieldConfig = $field_definitions[$field_name];

         $recent_values = [];
@@ @@
       $ids = array_slice($ids, 0, $config->get('no_change.batch'));
     }

-    /** @var \Drupal\user_history\Entity\UserHistory[] $user_histories */
+    /** @var UserHistory[] $user_histories */
     $user_histories = \Drupal::entityTypeManager()->getStorage('user_history')->loadMultiple($ids);
     foreach ($user_histories as $user_history) {
       $user_history->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/user_history/user_history.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user_history\Entity\UserHistory;
 /**
  * @file
  * Provide hook_install() / hook_uninstall() and hook_update_N() functions.
@@ @@

       $prev_user_history = NULL;
       foreach ($user_history_ids as $user_history_id) {
-        /** @var \Drupal\user_history\Entity\UserHistory $user_history */
+        /** @var UserHistory $user_history */
         $user_history = \Drupal::entityTypeManager()->getStorage('user_history')->load($user_history_id);
         if ($prev_user_history) {
           $difference = user_history_diff_user_history($prev_user_history, $user_history);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


5) modules/contrib/user_history/user_history.batch.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\user\Entity\User;
+use Drupal\Core\Field\FieldItemList;
 /**
  * @file
  * Batch processing functions for user_history records.
@@ @@
  * @param array $context
  *   The batch processing context.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function user_history_add_tracked_fields(array $tracked_fields, array &$context) {

@@ @@
   // and add fields to user_history entity.
   foreach ($tracked_fields as $field_name) {

-    /** @var \Drupal\field\Entity\FieldConfig $user_field */
+    /** @var FieldConfig $user_field */
     $user_field = $field_definitions[$field_name];

     $field_storage = FieldStorageConfig::loadByName('user_history', $field_name);
@@ @@
  * @param array $context
  *   Batch processing context.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function user_history_remove_tracked_fields(array $remove_fields, array &$context) {
   \Drupal::messenger()->addMessage(t('Remove fields from user_history: %fields', ['%fields' => implode(', ', $remove_fields)]));
@@ @@
  * @param array $context
  *   The batch processing context.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
+ * @throws EntityStorageException
  */
 function user_history_create_initial_history($batch_size, array &$context) {

@@ @@

   $accounts = \Drupal::entityTypeManager()->getStorage('user')->loadMultiple($uids);

-  /** @var \Drupal\user\Entity\User $account */
+  /** @var User $account */
   foreach ($accounts as $account) {
     // Ignore the anonymous account.
     if (!$account->isAnonymous()) {
@@ @@
       // Add values of tracked fields attached to the user entity.
       foreach ($tracked_fields as $field_name) {

-        /** @var \Drupal\field\Entity\FieldConfig $field_definition */
+        /** @var FieldConfig $field_definition */
         $field_definition = $field_definitions[$field_name];
         // $field_type is not currently used.
         // Present for development/debug purposes.
         $field_type = $field_definition->getType();

-        /** @var \Drupal\Core\Field\FieldItemList $field_item_list */
+        /** @var FieldItemList $field_item_list */
         $field_item_list = $account->get($field_name);

         $history_values = user_history_get_tracked_field_value($field_item_list);
@@ @@
  * @param array $operations
  *   The list of batch operations performed.
  *
- * @return \Symfony\Component\HttpFoundation\RedirectResponse
+ * @return RedirectResponse
  *   The next page to display to the user.
  */
 function user_history_finished_initial_history($success, array $results, array $operations) {
@@ @@
  * @param array $context
  *   The batch processing context.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
+ * @throws EntityStorageException
  */
 function user_history_update_tracked_history($batch_size, array $add_fields, array $remove_fields, array &$context) {

@@ @@

   $accounts = \Drupal::entityTypeManager()->getStorage('user')->loadMultiple($uids);

-  /** @var \Drupal\user\Entity\User $account */
+  /** @var User $account */
   foreach ($accounts as $account) {
     // Ignore the anonymous account.
     if (!$account->isAnonymous()) {
@@ @@
       // Get a list of fields attached to the user_history entity.
       $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('user_history', 'user_history');
       // Process each of these defined fields.
-      /** @var \Drupal\field\Entity\FieldConfig $field_definition */
+      /** @var FieldConfig $field_definition */
       foreach ($field_definitions as $field_name => $field_definition) {
         // Ignore base field definitions and process only attached fields.
         if ($field_definition instanceof FieldConfig) {
-          /** @var \Drupal\Core\Field\FieldItemList $field_item_list */
+          /** @var FieldItemList $field_item_list */
           $field_item_list = $account->get($field_name);

           // Record the value (if any) of the attached field in the
@@ @@
  * @param array $operations
  *   The list of batch operations performed.
  *
- * @return \Symfony\Component\HttpFoundation\RedirectResponse
+ * @return RedirectResponse
  *   The next page to display to the user.
  */
 function user_history_finished_update_attached_fields($success, array $results, array $operations) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


6) modules/contrib/user_history/user_history.archive.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\user_history\Entity\userHistory;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\field\Entity\FieldConfig;
 /**
  * @file
  * Contains functions for archiving user_history records.
@@ @@
  * @param array $context
  *   The batch context array.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function user_history_archive_records($archive_date, $min_records, $max_records, $file_format, $batch_size, array &$context) {

@@ @@
       }

       // Now load and archive the selected records.
-      /** @var \Drupal\user_history\Entity\userHistory[] $user_histories */
+      /** @var userHistory[] $user_histories */
       $user_histories = \Drupal::entityTypeManager()->getStorage('user_history')->loadMultiple($uhids);

       foreach ($user_histories as $user_history) {
@@ @@
  * @param array $context
  *   The batch context array.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
+ * @throws EntityStorageException
  */
 function user_history_delete_records($batch_size, array &$context) {

@@ @@
  * @param array $operations
  *   The list of operations that have been performed.
  *
- * @return \Symfony\Component\HttpFoundation\RedirectResponse
+ * @return RedirectResponse
  *   The next page to display to the user.
  */
 function user_history_finished_archive_records($success, array $results, array $operations) {
@@ @@
  * then the array is serialized and massaged to deal with embedded newline
  * characters.
  *
- * @param \Drupal\user_history\Entity\UserHistoryInterface $user_history
+ * @param UserHistoryInterface $user_history
  *   The user_history record to convert.
  *
  * @return string
@@ @@
  * then the elements of the array are processed to generate CSV columns matching
  * the csv header that has been generated.
  *
- * @param \Drupal\user_history\Entity\UserHistoryInterface $user_history
+ * @param UserHistoryInterface $user_history
  *   The user_history record to convert.
  * @param array $uh_field_info
  *   The array of field information arrays.
@@ @@
  * Function to convert a user_history entity into a serialized XML data
  * structure using the core normalizations and serialization functions.
  *
- * @param \Drupal\user_history\Entity\UserHistoryInterface $user_history
+ * @param UserHistoryInterface $user_history
  *   The user_history record to convert.
  *
  * @return string
@@ @@
  * Function to convert a user_history entity into a serialized JSON data
  * structure using the core normalizations and serialization functions.
  *
- * @param \Drupal\user_history\Entity\UserHistoryInterface $user_history
+ * @param UserHistoryInterface $user_history
  *   The user_history record to convert.
  *
  * @return string
@@ @@
     }
     else {
       // Field added through UI or programmatically.
-      /** @var \Drupal\field\Entity\FieldConfig $field_config */
+      /** @var FieldConfig $field_config */
       $field_config = $field_definition;
       $field_storage_defn = $field_config->getFieldStorageDefinition();
       foreach (array_keys($field_storage_defn->getColumns()) as $property) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


7) modules/contrib/user_history/tests/src/Functional/LoadFrontPageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\user_history\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Set the front page to "/node".
     \Drupal::configFactory()
@@ @@
     // Confirm that the page loaded correctly.
     $this->assertSession()->statusCodeEquals(200);
     // Confirm that the front page contains the standard text.
-    $this->assertText('Welcome to Drupal');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Welcome to Drupal');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/user_history/src/UserHistoryListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\user_history;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\user_history\Entity\UserHistory;
+use Drupal\user\Entity\User;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new UserHistoryListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager) {
     parent::__construct($entity_type, $entity_type_manager->getStorage($entity_type->id()));
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\user_history\Entity\UserHistory $entity */
+    /** @var UserHistory $entity */
     $row['label'] = Link::createFromRoute(
       $entity->label(),
       'entity.user_history.canonical',
@@ @@
     );
     $row['user_name'] = $entity->getUserName();
     $row['user_mail'] = $entity->getUserMail();
-    /** @var \Drupal\user\Entity\User $modified_by */
+    /** @var User $modified_by */
     $modified_by = $this->entityTypeManager
       ->getStorage('user')
       ->load($entity->getModifiedBy());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/user_history/src/UserHistoryHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/user_history/src/UserHistoryAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\user_history;

+use Drupal\user_history\Entity\UserHistoryInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\user_history\Entity\UserHistoryInterface $entity */
-
+    /** @var UserHistoryInterface $entity */
     switch ($operation) {

       case 'view':
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/user_history/src/Form/UserHistoryUpdateForm.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Constructs a new UserHistorySettingsForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state api service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory, StateInterface $state) {
@@ @@
       if ($tracked) {
         $tracked_fields[] = $field_name;
       }
-      /** @var \Drupal\field\Entity\FieldConfig $field_definition */
+      /** @var FieldConfig $field_definition */
       $field_definition = $field_definitions[$field_name];
       $field_options[$field_name] = $field_definition->getLabel();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/user_history/src/Form/UserHistorySettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\user_history\Form;

+use Drupal\field\Entity\FieldConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Constructs a new UserHistorySettingsForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state api service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityFieldManagerInterface $entity_field_manager, StateInterface $state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
       }
       else {
         // Field added through UI or programmatically.
-        /** @var \Drupal\field\Entity\FieldConfig $field_config */
+        /** @var FieldConfig $field_config */
         $field_config = $field_definition;
         $form['attached_fields'][$field_name] = [
           '#type' => 'checkbox',
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/user_history/src/Form/UserHistoryRestoreForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Constructs a new UserHistorySettingsForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state api service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory, StateInterface $state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/user_history/src/Form/UserHistoryInitialiseForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\user_history\Form;

+use Drupal\field\Entity\FieldConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Constructs a new UserHistorySettingsForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state api service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory, StateInterface $state) {
@@ @@
       if ($tracked) {
         $tracked_fields[] = $field_name;
       }
-      /** @var \Drupal\field\Entity\FieldConfig $field_definition */
+      /** @var FieldConfig $field_definition */
       $field_definition = $field_definitions[$field_name];
       $field_options[$field_name] = $field_definition->getLabel();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/user_history/src/Form/UserHistoryForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
   /**
    * Constructs a new UserHistoryForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The current user account.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, AccountProxyInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/user_history/src/Form/UserHistoryArchiveForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Constructs a new UserHistorySettingsForm.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state api service.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory, StateInterface $state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/user_history/src/EventSubscriber/ConfigEventsSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Constructs a new ConfigEventsSubscriber.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state api service.
    */
   public function __construct(StateInterface $state) {
@@ @@
   /**
    * React to a config object being saved.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   Config crud event.
    */
   public function configSave(ConfigCrudEvent $event) {
@@ @@
   /**
    * React to a config object being deleted.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   Config crud event.
    */
   public function configDelete(ConfigCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/user_history/src/Entity/UserHistoryInterface.php:67

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the User account responsible for modifying the user entity.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   User account responsible for user entity changes.
    */
   public function getModifiedBy();
@@ @@
   /**
    * Sets the user account responsible for modifying the user entity.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The account responsible for modifying the user entity.
    *
    * @return \Drupal\user_history\Entity\UserHistoryInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/user_history/src/Entity/UserHistory.php:59

    ---------- begin diff ----------
@@ @@
    * @param string $label
    *   The label for the user_history entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setLabel(string $label) {
@@ @@
    * @param int $timestamp
    *   The creation timestamp for the user_history entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setCreatedTime(int $timestamp) {
@@ @@
    * @param string $action
    *   The action used to modify the user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setAction(string $action) {
@@ @@
   /**
    * Gets the User account responsible for modifying the user entity.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   User account responsible for user entity change.
    */
   public function getModifiedBy() {
@@ @@
   /**
    * Sets the user account responsible for modifying the user entity.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The account responsible for modifying the user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setModifiedBy(UserInterface $user) {
@@ @@
    * @param int $uid
    *   The id of the account responsible for modifying the user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setModifiedByUid(int $uid) {
@@ @@
    * @param bool $deleted
    *   Boolean indicating whether the user entity exists.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserDeleted(bool $deleted) {
@@ @@
    * @param int $uid
    *   The User id from the modified user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserid(int $uid) {
@@ @@
    * @param string $name
    *   The name from the modified user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserName(string $name) {
@@ @@
    * @param string $pass
    *   The hashed password from the modified user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserPass(string $pass) {
@@ @@
    * @param string $mail
    *   The mail from the modified user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserMail(string $mail) {
@@ @@
    * @param string $timezone
    *   The timezone from the modified user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserTimezone(string $timezone) {
@@ @@
    * @param bool $status
    *   The status from the modified user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserStatus(bool $status) {
@@ @@
    * @param string $roles
    *   The roles from the modified user entity, separated by "; ".
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserRoles(string $roles) {
@@ @@
    * @param int $timestamp
    *   The creation timestamp from the modified user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserCreated(int $timestamp) {
@@ @@
    * @param int $timestamp
    *   The last changed timestamp from the modified user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserChanged(int $timestamp) {
@@ @@
    * @param int $timestamp
    *   The last access timestamp from the modified user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserAccess(int $timestamp) {
@@ @@
    * @param int $timestamp
    *   The most recent login timestamp from the modified user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserLogin(int $timestamp) {
@@ @@
    * @param string $mail
    *   The original from the modified user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserInit(string $mail) {
@@ @@
    * @param string $langcode
    *   The user langcode from the modified user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserLangcode(string $langcode) {
@@ @@
    * @param string $langcode
    *   The user preferred langcode from the modified user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserPreferredLangcode(string $langcode) {
@@ @@
    * @param string $langcode
    *   The user preferred admin langcode from the modified user entity.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setUserPreferredAdminLangcode(string $langcode) {
@@ @@
    * @param string $difference
    *   The differences between the modified user entity and a previous copy.
    *
-   * @return \Drupal\user_history\Entity\UserHistoryInterface
+   * @return UserHistoryInterface
    *   The called user_history entity.
    */
   public function setDifference(string $difference) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 19 files have been changed by Rector                                      

