modules/contrib/i18n_sso/i18n_sso.install
modules/contrib/i18n_sso/i18n_sso.module
modules/contrib/i18n_sso/src/Controller/TokenController.php
modules/contrib/i18n_sso/src/EventSubscriber/SsoAllowOrigin.php
modules/contrib/i18n_sso/src/Service/Token.php

4 files with changes
====================

1) modules/contrib/i18n_sso/src/Service/Token.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\i18n_sso\Service;

+use Drupal\Core\Database\StatementInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Database\Connection;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The datetime service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $datetime;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection object.
-   * @param \Drupal\Component\Datetime\TimeInterface $datetime
+   * @param TimeInterface $datetime
    *   The datetime service.
    */
   public function __construct(Connection $connection, TimeInterface $datetime) {
@@ @@
       ->condition('user_ip', $user_ip, 'LIKE')
       ->condition('uid', strval($uid), '=')
       ->condition('expire', strval($this->datetime->getRequestTime()), '>');
-    /** @var \Drupal\Core\Database\StatementInterface $result */
+    /** @var StatementInterface $result */
     $result = $token->range(0, 1)->execute();
     /** @var object $fetchedObject */
     $fetchedObject = $result->fetchObject();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/i18n_sso/src/EventSubscriber/SsoAllowOrigin.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new SsoAllowOrigin object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Adds header "Allow-origin" to allow XHR requests across website domains.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The event.
    */
   public function onRespond(ResponseEvent $event) : void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/i18n_sso/src/Controller/TokenController.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\i18n_sso\Controller;

+use Drupal\user\UserInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\i18n_sso\Service\Token;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\i18n_sso\Service\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * TokenController constructor.
    *
-   * @param \Drupal\i18n_sso\Service\Token $token
+   * @param Token $token
    *   Token service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack to get the current request object.
    */
   public function __construct(Token $token, RequestStack $requestStack) {
@@ @@
   /**
    * Returns json_encoded object containing token.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response.
    */
   public function getToken() {
@@ @@
   /**
    * Logs user in if token is valid for user IP and deletes it.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response.
    */
   public function useToken() {
@@ @@
       $request_token
     );
     if (!empty($uid)) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = $this->entityTypeManager()->getStorage('user')->load($uid);
       user_login_finalize($user);
       $data = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/i18n_sso/i18n_sso.module:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types = 1);
+use Symfony\Component\HttpFoundation\Request;
+use Psr\Http\Message\ResponseInterface;

 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Url;
@@ @@
  * already logged in on the main website (default language website url).
  */
 function i18n_sso_preprocess_page(array &$variables) : void {
-  /** @var \Symfony\Component\HttpFoundation\Request|null $current_request */
+  /** @var Request|null $current_request */
   $current_request = \Drupal::requestStack()->getCurrentRequest();
-  /** @var \Psr\Http\Message\ResponseInterface|null $exception */
+  /** @var ResponseInterface|null $exception */
   $exception = $current_request ? $current_request->attributes->get('exception') : NULL;
   $current_path = \Drupal::service('path.current')->getPath();
   if ($exception && $exception->getStatusCode() == '403' && $current_path !== '/user/logout') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

