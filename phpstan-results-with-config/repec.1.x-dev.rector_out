modules/contrib/repec/repec.api.php
modules/contrib/repec/repec.install
modules/contrib/repec/repec.module
modules/contrib/repec/src/Form/EntityTypeSettingsForm.php
modules/contrib/repec/src/Form/SettingsForm.php
modules/contrib/repec/src/Plugin/Derivative/RepecLocalTask.php
modules/contrib/repec/src/Repec.php
modules/contrib/repec/src/RepecInterface.php
modules/contrib/repec/src/Routing/RouteSubscriber.php
modules/contrib/repec/tests/src/Functional/LoadTest.php

10 files with changes
=====================

1) modules/contrib/repec/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\repec\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/repec/src/Routing/RouteSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * RouteSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/repec/src/RepecInterface.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Maps a template to an entity based on its bundle configuration.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the template.
    *
    * @return array
@@ @@
   /**
    * Maps a template to an entity based on its bundle configuration.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the template.
    *
    * @return array
@@ @@
    * The scope of this template is per entity, so meant tho be stored in
    * a sub-directory e.g. aaa/wpaper.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the template.
    * @param int $templateType
    *   The template type.
@@ @@
    * The scope of this template is per entity, so meant tho be stored in
    * a sub-directory e.g. aaa/wpaper.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the template.
    * @param int $templateType
    *   The template type.
@@ @@
    * The scope of this template is per entity, so meant tho be stored in
    * a sub-directory e.g. aaa/wpaper.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the template.
    */
   public function deleteEntityTemplate(ContentEntityInterface $entity);
@@ @@
   /**
    * Checks if an entity type and bundle is RePEc enabled.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the template.
    *
    * @return bool
@@ @@
    * conditions to share a template: published, per entity configuration,
    * content access, ...
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the template.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/repec/src/Repec.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\repec;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\taxonomy\Entity\Term;
+use Drupal\user\Entity\User;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\File\FileSystemInterface definition.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * System wide settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $settings;

@@ @@
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Repec constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   File system service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system, ConfigFactoryInterface $config_factory, MessengerInterface $messenger) {
@@ @@
    *
    * The attribute / field mapping is done via the entity type configuration.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to get the field value from.
    * @param string $attribute_key
    *   The attribute key that is mapped to the field for the entity bundle.
@@ @@
   /**
    * Get the entity field value for a RePEc attribute.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that will be used to get its bundle configuration.
    * @param string $attribute_key
    *   The RePEc attribute that is mapped to the field.
@@ @@
         $terms = $this->entityTypeManager->getStorage('taxonomy_term')
           ->loadMultiple($tids);
         $termNames = [];
-        /** @var \Drupal\taxonomy\Entity\Term $term */
+        /** @var Term $term */
         foreach ($terms as $term) {
           // @todo get translation
           $termNames[] = $term->getName();
@@ @@
         }
         $users = $this->entityTypeManager->getStorage('user')
           ->loadMultiple($uids);
-        /** @var \Drupal\user\Entity\User $user */
+        /** @var User $user */
         foreach ($users as $user) {
           // @todo this needs to be set from the config as user names
           // can be fetched from first name / last name instead of
@@ @@
   /**
    * Maps the series fields with the node fields to create the template file.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity that is the subject of the mapping.
    */
   private function createPaperTemplate(ContentEntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/repec/src/Plugin/Derivative/RepecLocalTask.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * RepecLocalTask constructor.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   Route provider.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
    */
   public function __construct(RouteProviderInterface $route_provider, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/repec/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\repec\Form;

+use Drupal\repec\RepecInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
       ->save();

     // @todo if directory exists, add confirmation, this removes / recreates all rdf files.
-    /** @var \Drupal\repec\RepecInterface $repec */
+    /** @var RepecInterface $repec */
     $repec = \Drupal::service('repec');
     $repec->initializeTemplates();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/repec/src/Form/EntityTypeSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\repec\Form;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Repec service.
    *
-   * @var \Drupal\repec\RepecInterface
+   * @var RepecInterface
    */
   protected $repec;

@@ @@
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * EntityTypeSettingsForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\repec\RepecInterface $repec
+   * @param RepecInterface $repec
    *   Repec service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RepecInterface $repec, MessengerInterface $messenger, EntityFieldManagerInterface $entity_field_manager) {
@@ @@
   private function getBooleanFields($entity_type_id, $bundle) {
     $result = [];
     $bundleFields = $this->entityFieldManager->getFieldDefinitions($entity_type_id, $bundle);
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition */
+    /** @var FieldDefinitionInterface $fieldDefinition */
     foreach ($bundleFields as $fieldName => $fieldDefinition) {
       if ($fieldDefinition->getType() === 'boolean') {
         $result[$fieldName] = $fieldDefinition->getLabel();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/repec/repec.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\repec\RepecInterface;
 /**
  * @file
  * Contains repec.module.
@@ @@
     return;
   }

-  /** @var \Drupal\repec\RepecInterface $repec */
+  /** @var RepecInterface $repec */
   $repec = \Drupal::service('repec');
   if ($repec->isEntityShareable($entity)) {
     $repec->createEntityTemplate($entity, Repec::SERIES_WORKING_PAPER);
@@ @@
     return;
   }

-  /** @var \Drupal\repec\RepecInterface $repec */
+  /** @var RepecInterface $repec */
   $repec = \Drupal::service('repec');
   if ($repec->isEntityShareable($entity)) {
     $repec->updateEntityTemplate($entity, Repec::SERIES_WORKING_PAPER);
@@ @@
     return;
   }

-  /** @var \Drupal\repec\RepecInterface $repec */
+  /** @var RepecInterface $repec */
   $repec = \Drupal::service('repec');
   $repec->deleteEntityTemplate($entity);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/repec/repec.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\repec\RepecInterface;
 /**
  * @file
  * Install, update and uninstall functions for the RePEc module.
  */
-
 /**
  * Implements hook_uninstall().
  */
 function repec_uninstall() {
-  /** @var \Drupal\repec\RepecInterface $repec */
+  /** @var RepecInterface $repec */
   $repec = \Drupal::service('repec');
   \Drupal::service('file_system')->deleteRecursive($repec->getArchiveDirectory());
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


10) modules/contrib/repec/repec.api.php:10

    ---------- begin diff ----------
@@ @@
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Maps the series fields with the entity fields to generate the template file.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   The entity that is the subject of the mapping.
  *
  * @ingroup repec
    ----------- end diff -----------

 [OK] 10 files have been changed by Rector                                      

