diff --git a/src/Form/ReplicateConfirmForm.php b/src/Form/ReplicateConfirmForm.php
index c0a5dad..6127015 100644
--- a/src/Form/ReplicateConfirmForm.php
+++ b/src/Form/ReplicateConfirmForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\replicate_ui\Form;
 
+use Drupal\replicate\Replicator;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Entity\TranslatableInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -12,12 +14,12 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class ReplicateConfirmForm extends ContentEntityConfirmFormBase {
 
   /**
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
-   * @var \Drupal\replicate\Replicator
+   * @var Replicator
    */
   protected $replicator;
 
@@ -35,7 +37,7 @@ class ReplicateConfirmForm extends ContentEntityConfirmFormBase {
    */
   public function buildForm(array $form, FormStateInterface $form_state, RouteMatchInterface $route_match = NULL) {
     $this->routeMatch = $route_match;
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->routeMatch->getParameter($this->getEntityTypeId());
     $this->setEntity($entity);
 
@@ -46,7 +48,7 @@ class ReplicateConfirmForm extends ContentEntityConfirmFormBase {
       if ($entity instanceof TranslatableInterface) {
         foreach ($entity->getTranslationLanguages() as $translation_language) {
           $langcode = $translation_language->getId();
-          /** @var \Drupal\Core\Entity\TranslatableInterface $translation */
+          /** @var TranslatableInterface $translation */
           $translation = $entity->getTranslation($langcode);
           $form['new_label_' . $langcode] = [
             '#type' => 'textfield',
@@ -90,14 +92,14 @@ class ReplicateConfirmForm extends ContentEntityConfirmFormBase {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     $label_key = $entity->getEntityType()->getKey('label');
     if ($entity instanceof TranslatableInterface) {
       foreach ($entity->getTranslationLanguages() as $translation_language) {
         $langcode = $translation_language->getId();
         if ($new_label = $form_state->getValue('new_label_' . $langcode)) {
-          /** @var \Drupal\Core\Entity\TranslatableInterface $translation */
+          /** @var TranslatableInterface $translation */
           $translation = $entity->getTranslation($langcode);
           $translation->set($label_key, $new_label);
         }
diff --git a/src/Form/ReplicateUISettingsForm.php b/src/Form/ReplicateUISettingsForm.php
index fa8d532..3e2be85 100644
--- a/src/Form/ReplicateUISettingsForm.php
+++ b/src/Form/ReplicateUISettingsForm.php
@@ -15,25 +15,25 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class ReplicateUISettingsForm extends ConfigFormBase {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The route builder.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routerBuilder;
 
   /**
    * Creates a new ReplicateUISettingsForm instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $router_builder
+   * @param RouteBuilderInterface $router_builder
    *   The router builder.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $config_factory, RouteBuilderInterface $router_builder) {
diff --git a/src/Hooks/EntityTypeBuild.php b/src/Hooks/EntityTypeBuild.php
index 3354b85..eec54c2 100644
--- a/src/Hooks/EntityTypeBuild.php
+++ b/src/Hooks/EntityTypeBuild.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\replicate_ui\Hooks;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
@@ -18,14 +19,14 @@ class EntityTypeBuild implements ContainerInjectionInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a new EntityTypeBuild instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $configFactory) {
@@ -44,7 +45,7 @@ class EntityTypeBuild implements ContainerInjectionInterface {
   /**
    * Helper function for hook_entity_type_build().
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+   * @param EntityTypeInterface[] $entity_types
    *   The entity type.
    */
   public function build(array $entity_types) {
diff --git a/src/Plugin/Action/EntityReplicate.php b/src/Plugin/Action/EntityReplicate.php
index d818772..d5b9ed9 100644
--- a/src/Plugin/Action/EntityReplicate.php
+++ b/src/Plugin/Action/EntityReplicate.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\replicate_ui\Plugin\Action;
 
+use Drupal\replicate_ui\ReplicateAccessChecker;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Routing\RouteMatch;
@@ -34,7 +36,7 @@ class EntityReplicate extends ActionBase implements ContainerFactoryPluginInterf
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\replicate_ui\ReplicateAccessChecker $access_check */
+    /** @var ReplicateAccessChecker $access_check */
     $access_check = \Drupal::service('replicate_ui.access_check');
     $entity_type_id = $this->getPluginDefinition()['type'];
 
@@ -57,7 +59,7 @@ class EntityReplicate extends ActionBase implements ContainerFactoryPluginInterf
     );
     $route_match = new RouteMatch("entity.$entity_type_id.replicate", $route, [$entity_type_id => $object], [$entity_type_id => $object->id()]);
 
-    /** @var \Drupal\Core\Access\AccessResultInterface $result */
+    /** @var AccessResultInterface $result */
     $result = $access_check->access($route, $route_match, $account);
     return $return_as_object ? $result : $result->isAllowed();
   }
diff --git a/src/Plugin/Derivative/EntityReplicateActions.php b/src/Plugin/Derivative/EntityReplicateActions.php
index e41abf9..cc90717 100644
--- a/src/Plugin/Derivative/EntityReplicateActions.php
+++ b/src/Plugin/Derivative/EntityReplicateActions.php
@@ -15,21 +15,21 @@ class EntityReplicateActions extends DeriverBase implements ContainerDeriverInte
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Creates a new RouteSubscriber instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $config_factory) {
diff --git a/src/Plugin/Derivative/ReplicateUILocalTasks.php b/src/Plugin/Derivative/ReplicateUILocalTasks.php
index 382d2f2..a56de3e 100644
--- a/src/Plugin/Derivative/ReplicateUILocalTasks.php
+++ b/src/Plugin/Derivative/ReplicateUILocalTasks.php
@@ -15,21 +15,21 @@ class ReplicateUILocalTasks extends DeriverBase implements ContainerDeriverInter
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Creates a new RouteSubscriber instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $config_factory) {
diff --git a/src/ReplicateAccessChecker.php b/src/ReplicateAccessChecker.php
index 81903c2..6ebd49b 100644
--- a/src/ReplicateAccessChecker.php
+++ b/src/ReplicateAccessChecker.php
@@ -15,20 +15,20 @@ use Symfony\Component\Routing\Route;
 class ReplicateAccessChecker implements AccessInterface {
 
   /**
-   * @var \Drupal\user\Access\PermissionAccessCheck
+   * @var PermissionAccessCheck
    */
   protected $permAccessChecker;
 
   /**
-   * @var \Drupal\Core\Entity\EntityAccessCheck
+   * @var EntityAccessCheck
    */
   protected $entityAccessChecker;
 
   /**
    * Creates a new ReplicateAccessChecker instance.
    *
-   * @param \Drupal\user\Access\PermissionAccessCheck $permAccessChecker
-   * @param \Drupal\Core\Entity\EntityAccessCheck $entityAccessChecker
+   * @param PermissionAccessCheck $permAccessChecker
+   * @param EntityAccessCheck $entityAccessChecker
    */
   public function __construct(PermissionAccessCheck $permAccessChecker, EntityAccessCheck $entityAccessChecker) {
     $this->permAccessChecker = $permAccessChecker;
diff --git a/src/RouteSubscriber.php b/src/RouteSubscriber.php
index 24db509..eda82f5 100644
--- a/src/RouteSubscriber.php
+++ b/src/RouteSubscriber.php
@@ -13,21 +13,21 @@ use Symfony\Component\Routing\Route;
 class RouteSubscriber implements EventSubscriberInterface {
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Creates a new RouteSubscriber instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $config_factory) {
diff --git a/tests/src/Functional/ReplicateUITest.php b/tests/src/Functional/ReplicateUITest.php
index d82b773..b5267b3 100644
--- a/tests/src/Functional/ReplicateUITest.php
+++ b/tests/src/Functional/ReplicateUITest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\replicate_ui\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\node\Entity\Node;
@@ -37,19 +39,19 @@ class ReplicateUITest extends BrowserTestBase {
   protected $defaultTheme = 'stark';
 
   /**
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->user = $this->drupalCreateUser([
@@ -107,11 +109,11 @@ class ReplicateUITest extends BrowserTestBase {
     $this->getSession()->getPage()->pressButton('Replicate');
     $replicated_nodes = \Drupal::entityTypeManager()->getStorage('node')
       ->loadByProperties(['title' => 'Replicate operation (Copy)']);
-    /** @var \Drupal\node\NodeInterface $replicated_node */
+    /** @var NodeInterface $replicated_node */
     $replicated_node = reset($replicated_nodes);
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->responseContains('(<em class="placeholder">' . $test_node->id() . '</em>) has been replicated to id <em class="placeholder">' . $replicated_node->id() . '</em>!');
-    $this->assertUrl($replicated_node->toUrl());
+    $this->assertSession()->addressEquals($replicated_node->toUrl());
 
     $this->drupalGet($this->node->toUrl());
     $this->assertSession()->pageTextContains('Replicate');
@@ -157,7 +159,7 @@ class ReplicateUITest extends BrowserTestBase {
       'settings[node][page][fields][title]' => TRUE,
       'settings[node][page][translatable]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save configuration');
+    $this->submitForm($edit, 'Save configuration');
 
     $node = Node::create([
       'type' => 'page',
@@ -180,7 +182,7 @@ class ReplicateUITest extends BrowserTestBase {
       'es' => $node->getTranslation('es'),
       'fr' => $node->getTranslation('fr'),
     ];
-    /** @var \Drupal\node\NodeInterface $translation */
+    /** @var NodeInterface $translation */
     foreach ($test_sets as $langcode => $translation) {
       $new_element_label = $this->assertSession()->elementExists('css', 'input[name="new_label_' . $langcode . '"]');
       $this->assertequals($translation->label() . ' (Copy)', $new_element_label->getValue());
diff --git a/tests/src/Unit/RouteSubscriberTest.php b/tests/src/Unit/RouteSubscriberTest.php
index ab40e4e..b03f0fd 100644
--- a/tests/src/Unit/RouteSubscriberTest.php
+++ b/tests/src/Unit/RouteSubscriberTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\replicate_ui\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteBuildEvent;
@@ -16,6 +17,7 @@ use Symfony\Component\Routing\RouteCollection;
  */
 class RouteSubscriberTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::onRouteBuild
    */
