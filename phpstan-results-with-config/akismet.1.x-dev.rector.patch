diff --git a/akismet.install b/akismet.install
index 78f77b3..121a359 100644
--- a/akismet.install
+++ b/akismet.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Routing\CurrentRouteMatch;
 /**
  * @file
  * Install and update functions for the Akismet module.
@@ -35,7 +36,7 @@ function akismet_requirements($phase = 'runtime', $check = TRUE) {
     // except on the settings page itself. These error messages also need to be
     // shown on the settings page, since Akismet API keys can be entered later.
     $admin_message = '';
-    /** @var \Drupal\Core\Routing\CurrentRouteMatch $current_route */
+    /** @var CurrentRouteMatch $current_route */
     $current_route = \Drupal::service('current_route_match');
     if ($current_route->getRouteName() !== 'akismet.settings') {
       $admin_message = t('Visit the <a href="@settings-url">Akismet settings page</a> to add your API key.', [
diff --git a/akismet.module b/akismet.module
index 716e36e..5b84e03 100644
--- a/akismet.module
+++ b/akismet.module
@@ -136,7 +136,7 @@ function node_akismet_form_info($form_id) {
   $entity_type = implode('_', $form_parts);
 
   /**
-   * @var \Drupal\node\Entity\NodeType $type;
+   * @var NodeType $type ;
    */
   if (!$type = NodeType::load($entity_type)) {
     return '';
@@ -209,7 +209,7 @@ function node_akismet_form_moderation(array &$form, FormStateInterface $form_sta
 /**
  * Entity report access callback for nodes.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Optional entity object to check access to a specific entity.
  */
 function node_akismet_entity_report_access(EntityInterface $entity = NULL) {
@@ -251,7 +251,7 @@ function akismet_form_node_multiple_delete_confirm_submit(array $form, FormState
 /**
  * Entity report access callback for comments.
  *
- * @param \Drupal\comment\CommentInterface $entity
+ * @param CommentInterface $entity
  *   Optional entity object to check access to a specific entity.
  */
 function comment_akismet_entity_report_access(CommentInterface $entity = NULL) {
@@ -511,7 +511,7 @@ function akismet_form_alter(&$form, FormStateInterface $form_state, $form_id) {
     // out whether the bundle of the entity being deleted is protected.
     $form_object = $form_state->getFormObject();
     if ($form_object instanceof ContentEntityFormInterface) {
-      /** @var \Drupal\Core\Entity\ContentEntityFormInterface $form_object */
+      /** @var ContentEntityFormInterface $form_object */
       $entity = $form_object->getEntity();
       $ids = \Drupal::entityQuery('akismet_form')
         ->condition('entity', $entity->getEntityTypeId())
diff --git a/src/Client/Client.php b/src/Client/Client.php
index 2702428..c91f7ca 100644
--- a/src/Client/Client.php
+++ b/src/Client/Client.php
@@ -309,17 +309,17 @@ abstract class Client {
    * @param array $data
    *   Data to send.
    *
-   * @return \Drupal\akismet\Client\AkismetResponse
+   * @return AkismetResponse
    *   The response returned from the server.
    *
-   * @throws \Drupal\akismet\Client\Exception\AkismetAuthenticationException
+   * @throws AkismetAuthenticationException
    *   Thrown when the API returns an authentication error.
-   * @throws \Drupal\akismet\Client\Exception\AkismetNetworkException
+   * @throws AkismetNetworkException
    *   Thrown when a network problem occurred.
-   * @throws \Drupal\akismet\Client\Exception\AkismetResponseException
+   * @throws AkismetResponseException
    *   Thrown when an error occurred in the API, e.g. internal server error or
    *   service not available.
-   * @throws \Drupal\akismet\Client\Exception\AkismetException
+   * @throws AkismetException
    *   Thrown if the response is an error but not one of the above.
    */
   protected function handleRequest(string $method, string $server, string $path, array $data) {
diff --git a/src/Client/DrupalClient.php b/src/Client/DrupalClient.php
index 49d4c71..5ed53d8 100644
--- a/src/Client/DrupalClient.php
+++ b/src/Client/DrupalClient.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\akismet\Client;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Logger\RfcLogLevel;
@@ -24,14 +25,14 @@ class DrupalClient extends Client implements DrupalClientInterface, ContainerInj
   /**
    * The settings configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   public $config;
 
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   public $client;
 
@@ -58,9 +59,9 @@ class DrupalClient extends Client implements DrupalClientInterface, ContainerInj
    *
    * Overrides the connection timeout based on module configuration.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The Guzzle HTTP client.
    * @param string $profile_name
    *   The name of the profile. Inject container variable.
diff --git a/src/Client/DrupalClientFactory.php b/src/Client/DrupalClientFactory.php
index 06e5445..d7bc8f1 100644
--- a/src/Client/DrupalClientFactory.php
+++ b/src/Client/DrupalClientFactory.php
@@ -22,9 +22,9 @@ class DrupalClientFactory {
   /**
    * Factory method to select the correct Akismet client service.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory in order to retrieve Akismet settings data.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   An http client.
    *
    * @return DrupalClientInterface
diff --git a/src/Client/Exception/AkismetException.php b/src/Client/Exception/AkismetException.php
index 18f5c86..38fbb90 100644
--- a/src/Client/Exception/AkismetException.php
+++ b/src/Client/Exception/AkismetException.php
@@ -44,7 +44,7 @@ class AkismetException extends \Exception {
   /**
    * The client that was being used when the exception was thrown.
    *
-   * @var \Drupal\akismet\Client\Client
+   * @var Client
    */
   protected $client;
 
diff --git a/src/Client/FeedbackManager.php b/src/Client/FeedbackManager.php
index 52045e2..a629516 100644
--- a/src/Client/FeedbackManager.php
+++ b/src/Client/FeedbackManager.php
@@ -24,7 +24,7 @@ class FeedbackManager {
    *
    * @param array $form
    *   The form to alter.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state for the form.
    *
    * @see akismet_form_alter()
@@ -54,7 +54,7 @@ class FeedbackManager {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state for the submission.
    */
   public static function addFeedbackOptionsSubmit(array &$form, FormStateInterface &$form_state) {
diff --git a/src/Controller/FormController.php b/src/Controller/FormController.php
index 3093860..7e653a9 100644
--- a/src/Controller/FormController.php
+++ b/src/Controller/FormController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\akismet\Controller;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\akismet\Client\DrupalClient;
 use Drupal\akismet\Client\Client;
 use Drupal\akismet\Entity\Form;
 use Drupal\Component\Utility\Unicode;
@@ -119,7 +122,7 @@ class FormController extends ControllerBase {
    *   specified data property. This is usually the case for form elements that
    *   hold system user information.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Contains both the submitted form values and a list of button form
    *   elements.
    * @param array $fields
@@ -232,7 +235,7 @@ class FormController extends ControllerBase {
     // Load the user account of the author, if any, for the following author*
     // property assignments.
     if (isset($author_id)) {
-      /** @var \Drupal\user\Entity\User $account */
+      /** @var User $account */
       $account = User::load($author_id);
       $author_username = $account->getAccountName();
       $author_email = $account->getEmail();
@@ -426,7 +429,7 @@ class FormController extends ControllerBase {
    * @param string $bundle
    *   The entity bundle name; e.g., 'article'.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   When the entity type is unknown.
    */
   public static function addProtectableFields(array &$form_info, string $entity_type, string $bundle) {
@@ -438,7 +441,7 @@ class FormController extends ControllerBase {
     $title_parts = explode('][', $title);
     $base_title = reset($title_parts);
 
-    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions */
+    /** @var FieldDefinitionInterface[] $field_definitions */
     $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $bundle);
     foreach ($field_definitions as $field_name => $field) {
       $supported_field_types = [
@@ -467,7 +470,7 @@ class FormController extends ControllerBase {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateAnalysis(array &$form, FormStateInterface $form_state) {
@@ -480,7 +483,7 @@ class FormController extends ControllerBase {
       return;
     }
 
-    /** @var \Drupal\akismet\Entity\Form $akismet */
+    /** @var Form $akismet */
     $akismet = $form_state->getValue('akismet');
 
     // Perform textual analysis.
@@ -508,7 +511,7 @@ class FormController extends ControllerBase {
     // Allow modules to alter data sent.
     \Drupal::moduleHandler()->alter('akismet_content', $data);
 
-    /** @var \Drupal\akismet\Client\DrupalClient $akismet_client */
+    /** @var DrupalClient $akismet_client */
     $akismet_client = \Drupal::service('akismet.client');
     $response = $akismet_client->checkContent($data);
 
@@ -607,7 +610,7 @@ class FormController extends ControllerBase {
     if (empty($akismet) || empty($akismet['entity']) || empty($akismet_response) || !($form_object instanceof EntityFormInterface)) {
       return;
     }
-    /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
+    /** @var EntityFormInterface $form_object */
     $entity_id = $form_object->getEntity()->id();
     $data = (object) $akismet;
     $data->id = $entity_id;
diff --git a/src/Element/Akismet.php b/src/Element/Akismet.php
index e388ba9..7cde3c3 100644
--- a/src/Element/Akismet.php
+++ b/src/Element/Akismet.php
@@ -40,7 +40,7 @@ class Akismet extends FormElement {
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $form
    *   The form containing the element.
diff --git a/src/EntityReportAccessManager.php b/src/EntityReportAccessManager.php
index 39a22eb..e22555b 100644
--- a/src/EntityReportAccessManager.php
+++ b/src/EntityReportAccessManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\akismet;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResultAllowed;
 use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\akismet\Controller\FormController;
@@ -25,15 +27,15 @@ class EntityReportAccessManager {
    *   The entity to check access for.
    * @param string $form_id
    *   The form that is protected for this entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to use.  If null, use the current user.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Indicates whether the user should have access to the report for the
    *   given entity and form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function accessReport(
     EntityInterface $entity,
diff --git a/src/Form/FormAdd.php b/src/Form/FormAdd.php
index 5c93962..1efdf1f 100644
--- a/src/Form/FormAdd.php
+++ b/src/Form/FormAdd.php
@@ -22,7 +22,7 @@ class FormAdd extends FormFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
diff --git a/src/Form/FormDelete.php b/src/Form/FormDelete.php
index f897bf7..bb498d4 100644
--- a/src/Form/FormDelete.php
+++ b/src/Form/FormDelete.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\akismet\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Url;
@@ -29,7 +30,7 @@ class FormDelete extends EntityConfirmFormBase {
    * forms, this typically takes the form of "Are you sure you want to
    * delete...", including the entity label.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Translated string.
    */
   public function getQuestion(): TranslatableMarkup {
@@ -46,7 +47,7 @@ class FormDelete extends EntityConfirmFormBase {
    * The confirm text is used as a the text in the button that confirms the
    * question posed by getQuestion().
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Translated string.
    */
   public function getConfirmText(): TranslatableMarkup {
@@ -60,7 +61,7 @@ class FormDelete extends EntityConfirmFormBase {
    * delete forms, this is typically the route that points at the list
    * controller.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to go to if the user cancels the deletion.
    */
   public function getCancelUrl(): Url {
@@ -75,10 +76,10 @@ class FormDelete extends EntityConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   When deleting the form entity fails.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/FormEdit.php b/src/Form/FormEdit.php
index cda9dd7..a5f029f 100644
--- a/src/Form/FormEdit.php
+++ b/src/Form/FormEdit.php
@@ -22,7 +22,7 @@ class FormEdit extends FormFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -42,7 +42,7 @@ class FormEdit extends FormFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
diff --git a/src/Form/FormFormBase.php b/src/Form/FormFormBase.php
index 29228c5..a51f4b2 100644
--- a/src/Form/FormFormBase.php
+++ b/src/Form/FormFormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\akismet\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -25,14 +26,14 @@ class FormFormBase extends EntityForm {
   /**
    * The permission handler.
    *
-   * @var \Drupal\user\PermissionHandlerInterface
+   * @var PermissionHandlerInterface
    */
   protected $permissionHandler;
 
   /**
    * Construct the FormFormBase.
    *
-   * @param \Drupal\user\PermissionHandlerInterface $permission_handler
+   * @param PermissionHandlerInterface $permission_handler
    *   Retrieves user permission information to determine bypass permissions.
    */
   public function __construct(PermissionHandlerInterface $permission_handler) {
@@ -59,7 +60,7 @@ class FormFormBase extends EntityForm {
     AkismetUtilities::getAdminApiKeyStatus();
     AkismetUtilities::displayAkismetTestModeWarning();
 
-    /** @var \Drupal\akismet\Entity\FormInterface $entity */
+    /** @var FormInterface $entity */
     $entity = $this->getEntity();
     $form_id = '';
     $akismet_form = [];
@@ -259,15 +260,15 @@ class FormFormBase extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   When saving the form entity fails.
    */
   public function save(array $form, FormStateInterface $form_state) {
     // Only store a list of enabled textual analysis checks.
-    /** @var \Drupal\akismet\Entity\FormInterface $akismetForm */
+    /** @var FormInterface $akismetForm */
     $akismetForm = $this->entity;
     // Prepare selected fields for storage.
     $enabled_fields = [];
diff --git a/src/Plugin/Action/UnpublishReportComment.php b/src/Plugin/Action/UnpublishReportComment.php
index a3c9c78..df88b65 100644
--- a/src/Plugin/Action/UnpublishReportComment.php
+++ b/src/Plugin/Action/UnpublishReportComment.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\akismet\Plugin\Action;
 
+use Drupal\comment\CommentInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\akismet\Client\FeedbackManager;
@@ -35,8 +36,7 @@ class UnpublishReportComment extends ActionBase {
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\comment\CommentInterface $object */
-
+    /** @var CommentInterface $object */
     $node = $object->getCommentedEntity();
     $form_id = 'comment_' . $node->getEntityTypeId() . '_' . $node->bundle() . '_form';
     $result = EntityReportAccessManager::accessReport($object, $form_id, $account);
diff --git a/src/Plugin/Action/UnpublishReportNode.php b/src/Plugin/Action/UnpublishReportNode.php
index 724bbdf..aed1856 100644
--- a/src/Plugin/Action/UnpublishReportNode.php
+++ b/src/Plugin/Action/UnpublishReportNode.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\akismet\Plugin\Action;
 
+use Drupal\node\NodeInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\akismet\Client\FeedbackManager;
@@ -35,7 +36,7 @@ class UnpublishReportNode extends ActionBase {
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\node\NodeInterface $object */
+    /** @var NodeInterface $object */
     $form_id = 'node_' . $object->bundle() . '_form';
     $result = EntityReportAccessManager::accessReport($object, $form_id, $account);
     return $return_as_object ? $result : $result->isAllowed();
diff --git a/src/Utility/AkismetUtilities.php b/src/Utility/AkismetUtilities.php
index 409fc44..1dcf1bd 100644
--- a/src/Utility/AkismetUtilities.php
+++ b/src/Utility/AkismetUtilities.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\akismet\Utility;
 
+use Drupal\akismet\Client\DrupalClient;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\Core\Url;
@@ -77,7 +78,7 @@ class AkismetUtilities {
       ->get('test_mode.enabled');
 
     // Re-check configuration status.
-    /** @var \Drupal\akismet\Client\DrupalClient $akismet */
+    /** @var DrupalClient $akismet */
     $akismet = \Drupal::service('akismet.client');
     $status = [
       'isConfigured' => FALSE,
@@ -186,7 +187,7 @@ class AkismetUtilities {
    * unavailable, set an error on the passed form (when available) and output
    * an error message..
    *
-   * @param \Drupal\Core\Form\FormStateInterface|null $form_state
+   * @param FormStateInterface|null $form_state
    *   Form state for the currently handled form.
    * @param string $element_name
    *   Element name to set an error on when appropriate.
diff --git a/tests/modules/akismet_test/akismet_test.module b/tests/modules/akismet_test/akismet_test.module
index cb2c90e..5936a3f 100644
--- a/tests/modules/akismet_test/akismet_test.module
+++ b/tests/modules/akismet_test/akismet_test.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * @file akismet_test.module: Main module file for hooks related to testing
  * Akismet.
@@ -84,9 +87,9 @@ function akismet_test_akismet_form_moderation(array &$form, FormStateInterface $
  * @param int $mid
  *   The mid to delete.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
+ * @throws EntityStorageException
  */
 function akismet_test_delete($mid) {
   $record = \Drupal::entityTypeManager()->getStorage('akismet_test_post')->load($mid);
diff --git a/tests/modules/akismet_test/src/TestController.php b/tests/modules/akismet_test/src/TestController.php
index 8cf5970..a8dee5a 100644
--- a/tests/modules/akismet_test/src/TestController.php
+++ b/tests/modules/akismet_test/src/TestController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\akismet_test;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Routing\RouteMatch;
 use Symfony\Component\HttpFoundation\Request;
@@ -14,10 +15,10 @@ class TestController extends ControllerBase {
   /**
    * Route callback for resetting the view count.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response.
    */
   public function resetViewCount(Request $request) {
diff --git a/tests/modules/akismet_test_server/src/ServerController.php b/tests/modules/akismet_test_server/src/ServerController.php
index 736ec17..e6bab04 100644
--- a/tests/modules/akismet_test_server/src/ServerController.php
+++ b/tests/modules/akismet_test_server/src/ServerController.php
@@ -31,23 +31,23 @@ class ServerController extends ControllerBase {
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * UUID service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;
 
   /**
    * ServerController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   The UUID service.
    */
   public function __construct(Request $request, UuidInterface $uuid) {
@@ -166,7 +166,7 @@ class ServerController extends ControllerBase {
    * @param int $code
    *   The HTTP response code to return.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response for chaining.
    */
   protected function serializeResponseData(string $data, int $code = Response::HTTP_OK): Response {
diff --git a/tests/src/Functional/AccessTest.php b/tests/src/Functional/AccessTest.php
index c5b7152..4b8ffad 100644
--- a/tests/src/Functional/AccessTest.php
+++ b/tests/src/Functional/AccessTest.php
@@ -41,7 +41,7 @@ class AccessTest extends AkismetTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $settings = \Drupal::configFactory()->getEditable('akismet.settings');
     $settings->set('test_mode.enabled', FALSE);
@@ -58,23 +58,36 @@ class AccessTest extends AkismetTestBase {
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/content/akismet/settings');
 
-    $this->assertText(self::MESSAGE_NOT_CONFIGURED);
-    $this->assertNoText(self::MESSAGE_SAVED);
-    $this->assertNoText(self::MESSAGE_INVALID);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(self::MESSAGE_NOT_CONFIGURED);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(self::MESSAGE_SAVED);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(self::MESSAGE_INVALID);
 
     // Set up an invalid test key and check that an error message is shown.
     $edit = [
       'api_key' => 'foo',
     ];
-    $this->drupalPostForm(
-      NULL,
-      $edit,
-      'Save configuration',
-      ['watchdog' => RfcLogLevel::EMERGENCY]
-    );
-    $this->assertText(self::MESSAGE_SAVED);
-    $this->assertText(self::MESSAGE_INVALID);
-    $this->assertNoText(self::MESSAGE_NOT_CONFIGURED);
+    $this->submitForm($edit, 'Save configuration');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(self::MESSAGE_SAVED);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(self::MESSAGE_INVALID);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(self::MESSAGE_NOT_CONFIGURED);
   }
 
   /**
@@ -90,7 +103,7 @@ class AccessTest extends AkismetTestBase {
     // the Akismet settings page.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/content/akismet');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Check access for a user that has everything except the 'administer
     // akismet' permission. This user should not have access to the Akismet
@@ -98,7 +111,7 @@ class AccessTest extends AkismetTestBase {
     $web_user = $this->drupalCreateUser(array_diff(\Drupal::moduleHandler()->invokeAll('perm'), ['administer akismet']));
     $this->drupalLogin($web_user);
     $this->drupalGet('admin/config/content/akismet', ['watchdog' => RfcLogLevel::WARNING]);
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);
   }
 
 }
