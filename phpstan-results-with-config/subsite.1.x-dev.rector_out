modules/contrib/subsite/src/BaseSubsitePlugin.php
modules/contrib/subsite/src/Cache/SubsiteCacheContext.php
modules/contrib/subsite/src/Controller/SubsiteController.php
modules/contrib/subsite/src/Form/SubsiteSettingsForm.php
modules/contrib/subsite/src/PathProcessor/SubsitePathProcessor.php
modules/contrib/subsite/src/Plugin/Block/BookMainNavigationBlock.php
modules/contrib/subsite/src/Plugin/Block/SubsiteFooterLinksBlock.php
modules/contrib/subsite/src/Plugin/Block/SubsiteSocialLinksBlock.php
modules/contrib/subsite/src/Plugin/Field/FieldType/Subsite.php
modules/contrib/subsite/src/Plugin/Subsite/BookSubsitePlugin.php
modules/contrib/subsite/src/Plugin/Subsite/BrandingSubsitePlugin.php
modules/contrib/subsite/src/Plugin/Subsite/SocialMediaPlugin.php
modules/contrib/subsite/src/Plugin/Subsite/ThemeSubsitePlugin.php
modules/contrib/subsite/src/SubsiteBookManager.php
modules/contrib/subsite/src/SubsiteManager.php
modules/contrib/subsite/src/SubsiteManagerInterface.php
modules/contrib/subsite/src/SubsitePluginInterface.php
modules/contrib/subsite/src/SubsitePluginManager.php
modules/contrib/subsite/src/Theme/SubsiteNegotiator.php
modules/contrib/subsite/subsite.module

15 files with changes
=====================

1) modules/contrib/subsite/subsite.module:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\Core\Block\BlockPluginInterface;
 /**
  * Created by PhpStorm.
  * User: andy
@@ @@
  *
  * @param $attachments
  */
-function subsite_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
+function subsite_block_view_alter(array &$build, BlockPluginInterface $block) {
   $subsite_manager = \Drupal::service('subsite.manager');
   $subsite_manager->blockViewAlter($build, $block);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/subsite/src/SubsitePluginManager.php:21

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/subsite/src/SubsiteManagerInterface.php:7

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subsite;

+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node whose form is being viewed.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account viewing the form.
    * @param bool $collapsed
    *   If TRUE, the fieldset starts out collapsed.
@@ @@
   public function validateFormElements(array $form, FormStateInterface $form_state, NodeInterface $node, AccountInterface $account);
   public function getFormValues(array $form, FormStateInterface $form_state);

-  public function blockViewAlter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block);
+  public function blockViewAlter(array &$build, BlockPluginInterface $block);
   public function nodeViewAlter(array &$build, EntityInterface $node, EntityViewDisplayInterface $display);
   public function pageAttachmentsAlter(array &$attachments);

   /**
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    */
   public function getSubsiteField(Node $node);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/subsite/src/SubsiteManager.php:7

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subsite;

+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   }

   /**
-   * @return \Drupal\subsite\SubsitePluginInterface[]
+   * @return SubsitePluginInterface[]
    */
   public function getPluginDefinitions() {
     /** @var SubsitePluginManager $subsitePluginManager */
@@ @@
   /**
    * Get the subsite field attached to a given node.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    */
   public function getSubsiteField(Node $node) {
     $subsite_fields = array();
@@ @@

     if ($current_bid) {
       /** @var Node $subsite_node */
-      $subsite_node = \Drupal\node\Entity\Node::load($current_bid);
+      $subsite_node = Node::load($current_bid);
       if ($this->getSubsiteField($subsite_node)) {
         return $subsite_node;
       }
@@ @@
    * that need to.
    *
    * @param array $build
-   * @param \Drupal\Core\Block\BlockPluginInterface $block
+   * @param BlockPluginInterface $block
    */
-  public function blockViewAlter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
+  public function blockViewAlter(array &$build, BlockPluginInterface $block) {
     $prerender_plugins = $this->getBlockPrerenderPluginIds($block->getPluginId());
     if (!empty($prerender_plugins)) {
       $build['#pre_render'][] = '\Drupal\subsite\SubsiteManager::blockPrerender';
@@ @@
    * Allow all plugins to alter the current node.
    *
    * @param array $build
-   * @param \Drupal\Core\Entity\EntityInterface $node
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityInterface $node
+   * @param EntityViewDisplayInterface $display
    */
   public function nodeViewAlter(array &$build, EntityInterface $node, EntityViewDisplayInterface $display) {
     $pluginDefinitions = $this->getPluginDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/subsite/src/Plugin/Subsite/ThemeSubsitePlugin.php:101

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the initial structure of the plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @return array
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/subsite/src/Plugin/Subsite/SocialMediaPlugin.php:107

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the initial structure of the plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @return array
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/subsite/src/Plugin/Subsite/BrandingSubsitePlugin.php:8

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subsite\Plugin\Subsite;

+use Drupal\file\FileInterface;
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Cache\Cache;
@@ @@
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\subsite\BaseSubsitePlugin;
 use Drupal\subsite\SubsitePluginInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;

 /**
  * @Plugin(
@@ @@
    *
    * @param array $form
    *   An associative array containing the initial structure of the plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @return array
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ @@
     // If the user uploaded a new logo or favicon, save it to a permanent location
     // and use it in place of the default theme-provided file.
     if (!empty($plugin_form_values['logo_upload'])) {
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = $plugin_form_values['logo_upload'];
       $filename = FileSystemInterface::copy($file->getFileUri(), \Drupal::config('system.file')->get('default_scheme') . '://' . $file->getFilename());
       $plugin_form_values['logo_path'] = $filename;
@@ @@
     }

     if (!empty($plugin_form_values['favicon_upload'])) {
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = $plugin_form_values['favicon_upload'];
       $filename = FileSystemInterface::copy($file->getFileUri(), \Drupal::config('system.file')->get('default_scheme') . '://' . $file->getFilename());
       $plugin_form_values['favicon_path'] = $filename;
@@ @@
     }

     if (!empty($branding_configuration['logo_path'])) {
-      $logo_url = file_create_url($branding_configuration['logo_path']);
+      $logo_url = \Drupal::service('file_url_generator')->generateAbsoluteString($branding_configuration['logo_path']);
       $build['content']['site_logo']['#uri'] = $logo_url;
     }

@@ @@
     $branding_configuration = $this->getConfiguration();

     if (!empty($branding_configuration['favicon_path'])) {
-      /** @var MimeTypeGuesserInterface $mime_type_guesser */
+      /** @var MimeTypesInterface $mime_type_guesser */
       $mime_type_guesser = \Drupal::service('file.mime_type.guesser');
       $mime_type = $mime_type_guesser->guess($branding_configuration['favicon_path']);
-      $favicon_url = file_create_url($branding_configuration['favicon_path']);
+      $favicon_url = \Drupal::service('file_url_generator')->generateAbsoluteString($branding_configuration['favicon_path']);
       foreach ($attachments['#attached']['html_head_link'] as $key => $value) {
         foreach ($value as $inner_key => $inner_value) {
           if (!empty($inner_value['rel']) && $inner_value['rel'] == 'shortcut icon') {
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/subsite/src/Plugin/Subsite/BookSubsitePlugin.php:6

    ---------- begin diff ----------
@@ @@
  */

 namespace Drupal\subsite\Plugin\Subsite;
+use Drupal\node\Entity\Node;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    *
    * @param array $form
    *   An associative array containing the initial structure of the plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @return array
@@ @@

   /**
    * @param array $build
-   * @param \Drupal\Core\Entity\EntityInterface $node
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityInterface $node
+   * @param EntityViewDisplayInterface $display
    */
   public function nodeViewAlter(array &$build, EntityInterface $node, EntityViewDisplayInterface $display) {
     $configuration = $this->getConfiguration();
@@ @@
                 }

                 if (!empty($child_nids)) {
-                  $nodes = \Drupal\node\Entity\Node::loadMultiple($child_nids);
+                  $nodes = Node::loadMultiple($child_nids);
                   $built_child_nodes = \Drupal::entityTypeManager()->getViewBuilder('node')->viewMultiple($nodes, 'teaser');
                   $built_child_nodes['#weight'] = 200;
                   $build['subsite_touts'] = $built_child_nodes;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/subsite/src/Plugin/Block/SubsiteSocialLinksBlock.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subsite\Plugin\Block;

+use Drupal\node\Entity\Node;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
     }

     if ($current_bid) {
-      /** @var \Drupal\node\Entity\Node $theme_node */
-      $subsite_node = \Drupal\node\Entity\Node::load($current_bid);
+      /** @var Node $theme_node */
+      $subsite_node = Node::load($current_bid);

       if ($subsite_node->getType() == 'sub_site') {
         // Expect theme ref field.
@@ @@
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/subsite/src/Plugin/Block/SubsiteFooterLinksBlock.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\subsite\Plugin\Block;

+use Drupal\node\Entity\Node;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
     }

     if ($current_bid) {
-      /** @var \Drupal\node\Entity\Node $theme_node */
-      $subsite_node = \Drupal\node\Entity\Node::load($current_bid);
+      /** @var Node $theme_node */
+      $subsite_node = Node::load($current_bid);

       if ($subsite_node->getType() == 'sub_site') {
         // Expect theme ref field.
@@ @@
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/subsite/src/Plugin/Block/BookMainNavigationBlock.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The request object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The book manager.
    *
-   * @var \Drupal\book\BookManagerInterface
+   * @var BookManagerInterface
    */
   protected $bookManager;

@@ @@
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $nodeStorage;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack object.
-   * @param \Drupal\book\BookManagerInterface $book_manager
+   * @param BookManagerInterface $book_manager
    *   The book manager.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $node_storage
+   * @param EntityStorageInterface $node_storage
    *   The node storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RequestStack $request_stack, BookManagerInterface $book_manager, EntityStorageInterface $node_storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/subsite/src/PathProcessor/SubsitePathProcessor.php:42

    ---------- begin diff ----------
@@ @@
    *     dependent URL requires so.
    *   - 'route': The route object for the given path. It will be set by
    *     \Drupal\Core\Routing\UrlGenerator::generateFromRoute().
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The HttpRequest object representing the current request.
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   (optional) Object to collect path processors' bubbleable metadata.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/subsite/src/Controller/SubsiteController.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The subsite manager.
    *
-   * @var \Drupal\subsite\SubsiteManagerInterface
+   * @var SubsiteManagerInterface
    */
   protected $subsiteManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a SubsiteController object.
    *
-   * @param \Drupal\subsite\SubsiteManagerInterface $subsiteManager
+   * @param SubsiteManagerInterface $subsiteManager
    *   The subsite manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(SubsiteManagerInterface $subsiteManager, RendererInterface $renderer) {
@@ @@
    *   currently supported in book module:
    *   - html: Printer-friendly HTML.
    *   Other types may be supported in contributed modules.
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node to export.
    *
    * @return array
@@ @@
    *   A render array representing the node and its children in the book
    *   hierarchy in a format determined by the $type parameter.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    */
   public function bookExport($type, NodeInterface $node) {
     $method = 'bookExport' . Container::camelize($type);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/subsite/src/Cache/SubsiteCacheContext.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Constructs a new BookNavigationCacheContext service.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(RequestStack $request_stack) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/subsite/src/BaseSubsitePlugin.php:87

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the initial structure of the plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    *
    * @return array
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 15 files have been changed by Rector                                      

