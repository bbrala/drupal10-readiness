modules/contrib/webauthn/src/Entity/Handlers/PublicKeyCredentialSourceAccessControlHandler.php
modules/contrib/webauthn/src/Entity/Handlers/PublicKeyCredentialSourceHtmlRouteProvider.php
modules/contrib/webauthn/src/Entity/Handlers/PublicKeyCredentialSourceListBuilder.php
modules/contrib/webauthn/src/Entity/Handlers/PublicKeyCredentialSourceViewsData.php
modules/contrib/webauthn/src/Entity/PublicKeyCredentialSource.php
modules/contrib/webauthn/src/Entity/PublicKeyCredentialSourceInterface.php
modules/contrib/webauthn/src/Entity/PublicKeyCredentialSourceRepository.php
modules/contrib/webauthn/src/EventSubscriber/UserRouteAlterSubscriber.php
modules/contrib/webauthn/src/Form/AccountForm.php
modules/contrib/webauthn/src/Form/PublicKeyCredentialCreationForm.php
modules/contrib/webauthn/src/Form/PublicKeyCredentialRequestForm.php
modules/contrib/webauthn/src/Form/PublicKeyCredentialSourceDeleteForm.php
modules/contrib/webauthn/src/Form/SettingsForm.php
modules/contrib/webauthn/src/Plugin/Field/FieldType/TrustPathItem.php
modules/contrib/webauthn/src/Plugin/Validation/Constraint/UserMailRequired.php
modules/contrib/webauthn/src/Plugin/Validation/Constraint/UserMailRequiredValidator.php
modules/contrib/webauthn/src/Routing/RouteProvider.php
modules/contrib/webauthn/src/Server.php
modules/contrib/webauthn/src/ServerInterface.php
modules/contrib/webauthn/webauthn.module

13 files with changes
=====================

1) modules/contrib/webauthn/webauthn.module:0

    ---------- begin diff ----------
@@ @@
 <?php

 declare(strict_types=1);
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\webauthn\Entity\PublicKeyCredentialSource;

 /**
  * @file
@@ @@
     return;
   }

-  /** @var \Drupal\Core\Entity\EntityTypeInterface $user_type */
+  /** @var EntityTypeInterface $user_type */
   $user_type = $entity_types['user'];
   $config = \Drupal::config('webauthn.settings');
   // By default, create a new operation for registering.
@@ @@
  * @see \Drupal\webauthn\Plugin\Validation\Constraint\UserMailRequired
  */
 function webauthn_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
+  /** @var FieldDefinitionInterface[] $fields */
   if (!empty($fields['mail']) && $entity_type->id() === 'user') {
     $constraints = $fields['mail']->getConstraints();
     unset($constraints['UserMailRequired']);
@@ @@
  *   - attributes: HTML attributes for the containing element.
  */
 function template_preprocess_public_key_credential_source(array &$variables) {
-  /** @var \Drupal\webauthn\Entity\PublicKeyCredentialSource $public_key_credential_source */
+  /** @var PublicKeyCredentialSource $public_key_credential_source */
   $public_key_credential_source = $variables['elements']['#public_key_credential_source'];

   foreach (Element::children($variables['elements']) as $key) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/webauthn/src/ServerInterface.php:4

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webauthn;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\user\UserInterface;
 use Webauthn\PublicKeyCredentialCreationOptions;
 use Webauthn\PublicKeyCredentialRequestOptions;
@@ @@
   /**
    * Start the attestation ceremony for a given user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The Drupal user.
    *
-   * @return \Webauthn\PublicKeyCredentialCreationOptions
+   * @return PublicKeyCredentialCreationOptions
    *   The credential creation options.
    */
   public function attestation(UserInterface $user): PublicKeyCredentialCreationOptions;
@@ @@
   /**
    * Handle attestation response.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user instance.
    * @param string $response
    *   The authenticator response (JSON encoded).
    *
-   * @return \Webauthn\PublicKeyCredentialSource|null
+   * @return PublicKeyCredentialSource|null
    *   Returns the credential source on success or NULL on error.
    */
   public function handleAttestation(UserInterface $user, string $response): ?PublicKeyCredentialSource;
@@ @@
   /**
    * Start the assertion ceremony for a given user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The drupal user.
    *
-   * @return \Webauthn\PublicKeyCredentialRequestOptions
+   * @return PublicKeyCredentialRequestOptions
    *   The credential request options.
    */
   public function assertion(UserInterface $user): PublicKeyCredentialRequestOptions;
@@ @@
   /**
    * Handle assertion response.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user instance.
    * @param string $response
    *   The authenticator response (JSON encoded).
    *
-   * @return \Webauthn\PublicKeyCredentialSource|null
+   * @return PublicKeyCredentialSource|null
    *   Returns the credential source on success or NULL on error.
    */
   public function handleAssertion(UserInterface $user, string $response): ?PublicKeyCredentialSource;
@@ @@
   /**
    * Get a relying party object.
    *
-   * @return \Webauthn\PublicKeyCredentialRpEntity
+   * @return PublicKeyCredentialRpEntity
    *   THe relying party object.
    */
   public function getRp(): PublicKeyCredentialRpEntity;
@@ @@
    * @param string $name
    *   The user name.
    *
-   * @return \Webauthn\PublicKeyCredentialUserEntity|null
+   * @return PublicKeyCredentialUserEntity|null
    *   The user entity if found, NULL otherwise.
    */
   public function findUserEntityByUsername(string $name): ?PublicKeyCredentialUserEntity;
@@ @@
    * @param string $userHandle
    *   The user handle (uuid).
    *
-   * @return \Webauthn\PublicKeyCredentialUserEntity|null
+   * @return PublicKeyCredentialUserEntity|null
    *   The user entity if found, NULL otherwise.
    */
   public function findUserEntityByUserHandle(string $userHandle): ?PublicKeyCredentialUserEntity;
@@ @@
   /**
    * Create user entity from a Drupal user.
    *
-   * @param \Drupal\user\UserInterface|\Drupal\Core\Session\AccountInterface $user
+   * @param UserInterface|AccountInterface $user
    *
-   * @return \Webauthn\PublicKeyCredentialUserEntity
+   * @return PublicKeyCredentialUserEntity
    */
   public function createUserEntity(UserInterface $user): PublicKeyCredentialUserEntity;

@@ @@
   /**
    * Get the credential source repository.
    *
-   * @return \Webauthn\PublicKeyCredentialSourceRepository
+   * @return PublicKeyCredentialSourceRepository
    *   The credential source repository.
    */
   public function getPublicKeyCredentialSourceRepository(): PublicKeyCredentialSourceRepository;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/webauthn/src/Server.php:4

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webauthn;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The site configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

   /**
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   private $privateTempStore;

   /**
-   * @var \Webauthn\PublicKeyCredentialSourceRepository
+   * @var PublicKeyCredentialSourceRepository
    */
   private $pkCredentialSourceRepository;

   /**
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   private $request;

@@ @@
   /**
    * Server constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity-type manager service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $private_temp_store
+   * @param PrivateTempStoreFactory $private_temp_store
    *   The private temp-store service.
-   * @param \Webauthn\PublicKeyCredentialSourceRepository $pk_credential_source_repository
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param PublicKeyCredentialSourceRepository $pk_credential_source_repository
+   * @param RequestStack $request
    */
   public function __construct(ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entity_type_manager, PrivateTempStoreFactory $private_temp_store, PublicKeyCredentialSourceRepository $pk_credential_source_repository, RequestStack $request) {
     $this->config = $configFactory->get('webauthn.settings');
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function handleAttestation(UserInterface $user, string $response): ?\Webauthn\PublicKeyCredentialSource {
+  public function handleAttestation(UserInterface $user, string $response): ?PublicKeyCredentialSource {
     try {
       // Convert Symfony request into PSR-7 compatible request.
       // @link https://symfony.com/doc/3.4/components/psr7.html
@@ @@
       $request = $psrHttpFactory->createRequest($this->request);

       $data = Json::decode($this->privateTempStore->get('attestation'));
-      /** @var \Webauthn\PublicKeyCredentialCreationOptions $options */
+      /** @var PublicKeyCredentialCreationOptions $options */
       $options = PublicKeyCredentialCreationOptions::createFromArray($data);

       if ($options === NULL) {
@@ @@
    */
   public function findUserEntityByUsername(string $name): ?PublicKeyCredentialUserEntity {
     $storage = $this->entityTypeManager->getStorage('user');
-    /** @var \Drupal\user\UserInterface[] $user */
+    /** @var UserInterface[] $user */
     $user = $storage->loadByProperties(['name' => $name]);

     if (empty($user)) {
@@ @@
    */
   public function findUserEntityByUserHandle(string $userHandle): ?PublicKeyCredentialUserEntity {
     $storage = $this->entityTypeManager->getStorage('user');
-    /** @var \Drupal\user\UserInterface[] $user */
+    /** @var UserInterface[] $user */
     $user = $storage->loadByProperties(['uuid' => $userHandle]);

     if (empty($user)) {
@@ @@
       $request = $psrHttpFactory->createRequest($this->request);

       $data = Json::decode($this->privateTempStore->get('attestation'));
-      /** @var \Webauthn\PublicKeyCredentialRequestOptions $options */
+      /** @var PublicKeyCredentialRequestOptions $options */
       $options = PublicKeyCredentialRequestOptions::createFromArray($data);

       if ($options === NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/webauthn/src/Routing/RouteProvider.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webauthn\Routing;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\webauthn\Form\PublicKeyCredentialRequestForm;
 use Symfony\Component\Routing\Route;
@@ @@
   /**
    * The webauthn settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;

@@ @@
   /**
    * RouteProvider constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/webauthn/src/Plugin/Validation/Constraint/UserMailRequiredValidator.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webauthn\Plugin\Validation\Constraint;

+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\user\Plugin\Validation\Constraint\UserMailRequiredValidator as BaseValidator;
 use Symfony\Component\Validator\Constraint;

@@ @@
    * {@inheritdoc}
    */
   public function validate($items, Constraint $constraint) {
-    /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+    /** @var FieldItemListInterface $items */
     /* @var \Drupal\user\UserInterface $account */
     $account = $items->getEntity();
     if (!isset($account) || !empty($account->_skipUserMailRequiredConstraint)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/webauthn/src/Form/SettingsForm.php:108

    ---------- begin diff ----------
@@ @@
   /**
    * Process uploaded file and store it as base64 encoded data.
    *
-   * @param \Symfony\Component\HttpFoundation\File\UploadedFile $file_upload
+   * @param UploadedFile $file_upload
    *   Uploaded file.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/webauthn/src/Form/PublicKeyCredentialRequestForm.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $flood;

@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * The WebAuthn server instance.
    *
-   * @var \Drupal\webauthn\ServerInterface
+   * @var ServerInterface
    */
   protected $server;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form-state instance.
    */
   public function validateName(array &$form, FormStateInterface $form_state): void {
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form-state instance.
    */
   public function validateAuthentication(array &$form, FormStateInterface $form_state): void {
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form-state instance.
    */
   public function validateFinal(array &$form, FormStateInterface $form_state): void {
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     if ($this->step === self::ASSERTION_PREPARE) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = $form_state->get('user');
       $options = $this->server->assertion($user);
       $form_state->set('assertion_options', $options);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/webauthn/src/Form/PublicKeyCredentialCreationForm.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webauthn\Form;

+use Drupal\user\UserInterface;
+use Webauthn\PublicKeyCredentialSource;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\EntityConstraintViolationListInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The WebAuthn server instance.
    *
-   * @var \Drupal\webauthn\ServerInterface
+   * @var ServerInterface
    */
   protected $server;

@@ @@
       $entity = parent::buildEntity($form, $form_state);
       $entity->set('name', $form_state->getValue('name'));
       $entity->set('mail', $form_state->getValue('mail'));
-      $entity->set('pass', user_password());
+      $entity->set('pass', \Drupal::service('password_generator')->generate());
       $entity->set('init', $form_state->getValue('mail'));
     }

@@ @@
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\user\UserInterface|null $entity */
+    /** @var UserInterface|null $entity */
     $entity = parent::validateForm($form, $form_state);

     if ($entity && $this->step === self::ATTESTATION_HANDLE) {
@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state): void {
     parent::submitForm($form, $form_state);
     if ($this->step === self::ATTESTATION_PREPARE) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = $this->entity;
       $options = $this->server->attestation($user);
       $form_state->set('user', $user);
@@ @@
   public function save(array $form, FormStateInterface $form_state) {
     if (!$this->getRequest()->isXmlHttpRequest()) {
       // The `credential_source` is stored during ::validateForm.
-      /** @var \Webauthn\PublicKeyCredentialSource $source */
+      /** @var PublicKeyCredentialSource $source */
       $source = $form_state->get('credential_source');
-      /** @var \Drupal\user\UserInterface $account */
+      /** @var UserInterface $account */
       $account = $this->entity;
       $account->set('uuid', $source->getUserHandle());
       parent::save($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/webauthn/src/Form/AccountForm.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new AccountForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface|null $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface|null $time
+   * @param TimeInterface|null $time
    *   The time service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, LanguageManagerInterface $language_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
@@ @@
    * @uses \Drupal\webauthn\Form\AccountForm::syncUserLangcode
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = $this->entity;
     $user = $this->currentUser();
     $config = \Drupal::config('user.settings');
@@ @@
    *
    * @param string $entity_type_id
    *   The entity type identifier.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The entity updated with the submitted values.
    * @param array $form
    *   The complete form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function syncUserLangcode($entity_type_id, UserInterface $user, array &$form, FormStateInterface $form_state) {
@@ @@
       $form_state->setValue('roles', array_keys(array_filter($form_state->getValue('roles'))));
     }

-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = parent::buildEntity($form, $form_state);

     // Translate the empty value '' of language selects to an unset field.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/webauthn/src/EventSubscriber/UserRouteAlterSubscriber.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webauthn\EventSubscriber;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\RouteBuildEvent;
 use Drupal\Core\Routing\RoutingEvents;
@@ @@
   /**
    * The webauthn settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $config;

@@ @@
   /**
    * UserRouteAlterSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Replace login form.
    *
-   * @param \Drupal\Core\Routing\RouteBuildEvent $event
+   * @param RouteBuildEvent $event
    *   The event to process.
    */
   public function onRoutingAlterReplaceLogin(RouteBuildEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/webauthn/src/Entity/PublicKeyCredentialSourceRepository.php:4

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webauthn\Entity;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Webauthn\PublicKeyCredentialSource as PKCredentialSource;
@@ @@
   use StringTranslationTrait;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

   /**
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $storage;

@@ @@
   /**
    * PublicKeyCredentialSourceRepository constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity-type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
    * {@inheritdoc}
    */
   public function findOneByCredentialId(string $publicKeyCredentialId): ?PKCredentialSource {
-    /** @var \Drupal\webauthn\Entity\PublicKeyCredentialSourceInterface[] $entity */
+    /** @var PublicKeyCredentialSourceInterface[] $entity */
     $entity = $this->storage->loadByProperties(['publicKeyCredentialId' => $publicKeyCredentialId]);

     if (empty($entity)) {
@@ @@
   public function saveCredentialSource(PKCredentialSource $publicKeyCredentialSource): void {
     $entity = PublicKeyCredentialSource::createFromSourceObject($publicKeyCredentialSource);
     $storage = $this->entityTypeManager->getStorage('user');
-    /** @var \Drupal\user\UserInterface[] $user */
+    /** @var UserInterface[] $user */
     $user = $storage->loadByProperties(['uuid' => $publicKeyCredentialSource->getUserHandle()]);

     if (empty($user)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/webauthn/src/Entity/PublicKeyCredentialSource.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webauthn\Entity;

+use Drupal\Component\Uuid\UuidInterface;
 use Base64Url\Base64Url;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
    */
   public static function createFromSourceObject(PKCredentialSource $source): PublicKeyCredentialSourceInterface {
     $values = $source->jsonSerialize();
-    /** @var \Drupal\Component\Uuid\UuidInterface $uuid */
+    /** @var UuidInterface $uuid */
     $uuid = \Drupal::service('uuid');
     $values += [
       'uuid' => $uuid->generate(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/webauthn/src/Entity/Handlers/PublicKeyCredentialSourceAccessControlHandler.php:4

    ---------- begin diff ----------
@@ @@

 namespace Drupal\webauthn\Entity\Handlers;

+use Drupal\webauthn\Entity\PublicKeyCredentialSourceInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\webauthn\Entity\PublicKeyCredentialSourceInterface $entity */
+    /** @var PublicKeyCredentialSourceInterface $entity */
     switch ($operation) {
       case 'view':
         $has_permission = $account->hasPermission('view public key credential source entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 13 files have been changed by Rector                                      

