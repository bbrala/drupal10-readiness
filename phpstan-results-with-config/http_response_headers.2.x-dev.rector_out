modules/contrib/http_response_headers/http_response_headers.install
modules/contrib/http_response_headers/http_response_headers.module
modules/contrib/http_response_headers/src/Controller/ResponseHeaderListBuilder.php
modules/contrib/http_response_headers/src/Entity/ResponseHeader.php
modules/contrib/http_response_headers/src/EventSubscriber/AddHTTPHeaders.php
modules/contrib/http_response_headers/src/Form/ResponseHeaderDeleteForm.php
modules/contrib/http_response_headers/src/Form/ResponseHeaderForm.php
modules/contrib/http_response_headers/src/ResponseHeaderInterface.php

3 files with changes
====================

1) modules/contrib/http_response_headers/src/Form/ResponseHeaderForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\http_response_headers\Form;

+use Drupal\http_response_headers\Entity\ResponseHeader;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
 class ResponseHeaderForm extends EntityForm {

   /**
-   * Constructs an ResponseHeaderForm object.
-   *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager;
-   *   The entity query.
-   */
+  * Constructs an ResponseHeaderForm object.
+  *
+   * @param EntityTypeManagerInterface $entityTypeManager ;
+    The entity query.
+  */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
     $this->entityTypeManager = $entityTypeManager;
   }
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\http_response_headers\Entity\ResponseHeader $response_header */
+    /** @var ResponseHeader $response_header */
     $response_header = $this->entity;

     $form['label'] = array(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/http_response_headers/src/EventSubscriber/AddHTTPHeaders.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\http_response_headers\EventSubscriber;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;

@@ @@
   /**
    * The entity storage manager for response_header entities.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityManager;

@@ @@
   /**
    * Constructs a new Google Tag response subscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory service.
    */
   public function __construct(ConfigFactoryInterface $configFactory) {
@@ @@
   /**
    * Sets extra HTTP headers.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/http_response_headers/http_response_headers.module:31

    ---------- begin diff ----------
@@ @@
     '#attributes' => ['class' => 'help-resources'],
     '#wrapper_attributes' => ['class' => 'container'],
   ];
-  $output .= render($help);
+  $output .= \Drupal::service('renderer')->render($help);

   return $output;
 }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

