modules/contrib/views_templates/src/Annotation/ViewsBuilder.php
modules/contrib/views_templates/src/Controller/ViewsBuilderController.php
modules/contrib/views_templates/src/Plugin/ViewsBuilderBase.php
modules/contrib/views_templates/src/Plugin/ViewsBuilderPluginInterface.php
modules/contrib/views_templates/src/Plugin/ViewsBuilderPluginManager.php
modules/contrib/views_templates/src/Plugin/ViewsDuplicateBuilderBase.php
modules/contrib/views_templates/src/Plugin/ViewsDuplicateBuilderPluginInterface.php
modules/contrib/views_templates/src/ViewTemplateForm.php
modules/contrib/views_templates/src/ViewsTemplateLoader.php
modules/contrib/views_templates/src/ViewsTemplateLoaderInterface.php
modules/contrib/views_templates/tests/modules/views_templates_builder_test/src/Plugin/ViewsTemplateBuilder/NodeViewBuilder.php
modules/contrib/views_templates/tests/modules/views_templates_builder_test/src/Plugin/ViewsTemplateBuilder/ViewDuplicatorTest.php

8 files with changes
====================

1) modules/contrib/views_templates/src/ViewsTemplateLoaderInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_templates;

+use Symfony\Component\HttpFoundation\File\Exception\FileNotFoundException;
 use Drupal\views_templates\Plugin\ViewsDuplicateBuilderPluginInterface;

 /**
@@ @@
   /**
    * Load template array values from file system for builder plugin.
    *
-   * @param \Drupal\views_templates\Plugin\ViewsDuplicateBuilderPluginInterface $builder
+   * @param ViewsDuplicateBuilderPluginInterface $builder
    *   The Views Duplicate Builder Interface.
    *
-   * @throws \Symfony\Component\HttpFoundation\File\Exception\FileNotFoundException
+   * @throws FileNotFoundException
    *   If template does not exist.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/views_templates/src/ViewsTemplateLoader.php:18

    ---------- begin diff ----------
@@ @@

     $template_id = $builder->getViewTemplateId();
     if (!isset($templates[$template_id])) {
-      $dir = drupal_get_path('module', $builder->getDefinitionValue('provider')) . '/views_templates';
+      $dir = \Drupal::service('extension.list.module')->getPath($builder->getDefinitionValue('provider')) . '/views_templates';
       if (is_dir($dir)) {

         $file_path = $dir . '/' . $builder->getViewTemplateId() . '.yml';
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/views_templates/src/ViewTemplateForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_templates;

+use Drupal\views_templates\Plugin\ViewsBuilderPluginInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The plugin manager interface.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $builderManager;

@@ @@
   /**
    * Constructs a new ViewsBuilderController object.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $builderManager
+   * @param PluginManagerInterface $builderManager
    *   The Views Builder Plugin Interface.
    */
   public function __construct(PluginManagerInterface $builderManager) {
@@ @@
    * @param mixed $plugin_id
    *   The plugin it to create builder.
    *
-   * @return \Drupal\views_templates\Plugin\ViewsBuilderPluginInterface
+   * @return ViewsBuilderPluginInterface
    *   Returns a builder.
    */
   public function createBuilder($plugin_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/views_templates/src/Plugin/ViewsDuplicateBuilderBase.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The view template loader.
    *
-   * @var \Drupal\views_templates\ViewsTemplateLoaderInterface
+   * @var ViewsTemplateLoaderInterface
    */
   protected $templateLoader;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/views_templates/src/Plugin/ViewsBuilderPluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/views_templates/src/Plugin/ViewsBuilderPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_templates\Plugin;

+use Drupal\views\ViewEntityInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * @param mixed $options
    *   Options to create a view.
    *
-   * @return \Drupal\views\ViewEntityInterface
+   * @return ViewEntityInterface
    *   Returns a view.
    */
   public function createView($options = NULL);
@@ @@
    *
    * @param array $form
    *   The form in array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The values from the form.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/views_templates/src/Controller/ViewsBuilderController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_templates\Controller;

+use Drupal\views_templates\Plugin\ViewsBuilderPluginInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Url;
@@ @@
   /**
    * The plugin builder servive.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $builderManager;

@@ @@
   /**
    * Constructs a new ViewsBuilderController object.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $builderManager
+   * @param PluginManagerInterface $builderManager
    *   The Views Builder Plugin Interface.
    */
   public function __construct(PluginManagerInterface $builderManager) {
@@ @@
       '#empty' => $this->t('There are no available Views Templates'),
     ];

-    /** @var \Drupal\views_templates\Plugin\ViewsBuilderPluginInterface $definition */
+    /** @var ViewsBuilderPluginInterface $definition */
     foreach ($this->builderManager->getDefinitions() as $definition) {

-      /** @var \Drupal\views_templates\Plugin\ViewsBuilderPluginInterface $builder */
+      /** @var ViewsBuilderPluginInterface $builder */
       $builder = $this->builderManager->createInstance($definition['id']);
       if ($builder->templateExists()) {
         $plugin_id = $builder->getPluginId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/views_templates/src/Annotation/ViewsBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\views_templates\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The administrative label of the View Builder.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 8 files have been changed by Rector                                       

