modules/contrib/real_estate/modules/agency/real_estate_agency.install
modules/contrib/real_estate/modules/agency/real_estate_agency.module
modules/contrib/real_estate/modules/agency/real_estate_agency.page.inc
modules/contrib/real_estate/modules/agency/src/AgencyAccessControlHandler.php
modules/contrib/real_estate/modules/agency/src/AgencyHtmlRouteProvider.php
modules/contrib/real_estate/modules/agency/src/AgencyListBuilder.php
modules/contrib/real_estate/modules/agency/src/AgencyPermissions.php
modules/contrib/real_estate/modules/agency/src/AgencyTranslationHandler.php
modules/contrib/real_estate/modules/agency/src/AgencyTypeHtmlRouteProvider.php
modules/contrib/real_estate/modules/agency/src/AgencyTypeListBuilder.php
modules/contrib/real_estate/modules/agency/src/Entity/Agency.php
modules/contrib/real_estate/modules/agency/src/Entity/AgencyInterface.php
modules/contrib/real_estate/modules/agency/src/Entity/AgencyType.php
modules/contrib/real_estate/modules/agency/src/Entity/AgencyTypeInterface.php
modules/contrib/real_estate/modules/agency/src/Entity/AgencyViewsData.php
modules/contrib/real_estate/modules/agency/src/Form/AgencyDeleteForm.php
modules/contrib/real_estate/modules/agency/src/Form/AgencyForm.php
modules/contrib/real_estate/modules/agency/src/Form/AgencySettingsForm.php
modules/contrib/real_estate/modules/agency/src/Form/AgencyTypeDeleteForm.php
modules/contrib/real_estate/modules/agency/src/Form/AgencyTypeForm.php
modules/contrib/real_estate/modules/gmap/real_estate_gmap.module
modules/contrib/real_estate/modules/kickstart/real_estate_kickstart.install
modules/contrib/real_estate/modules/kickstart/real_estate_kickstart.module
modules/contrib/real_estate/modules/openimmo/real_estate_openimmo.module
modules/contrib/real_estate/modules/openimmo/src/Entity/OpenImmo.php
modules/contrib/real_estate/modules/openimmo/src/Entity/OpenImmoInterface.php
modules/contrib/real_estate/modules/openimmo/src/Form/OpenImmoDeleteForm.php
modules/contrib/real_estate/modules/openimmo/src/Form/OpenImmoForm.php
modules/contrib/real_estate/modules/openimmo/src/Form/OpenImmoQueriesList.php
modules/contrib/real_estate/modules/openimmo/src/Form/OpenImmoQueryAddForm.php
modules/contrib/real_estate/modules/openimmo/src/Form/OpenImmoQueryDeleteForm.php
modules/contrib/real_estate/modules/openimmo/src/Form/OpenImmoQueryEditForm.php
modules/contrib/real_estate/modules/openimmo/src/OpenImmoHtmlRouteProvider.php
modules/contrib/real_estate/modules/openimmo/src/OpenImmoListBuilder.php
modules/contrib/real_estate/modules/openimmo/src/OpenImmoQuery.php
modules/contrib/real_estate/modules/openimmo/src/OpenImmoQueryInterface.php
modules/contrib/real_estate/modules/property/real_estate_property.install
modules/contrib/real_estate/modules/property/real_estate_property.module
modules/contrib/real_estate/modules/property/real_estate_property.page.inc
modules/contrib/real_estate/modules/property/src/Entity/Property.php
modules/contrib/real_estate/modules/property/src/Entity/PropertyInterface.php
modules/contrib/real_estate/modules/property/src/Entity/PropertyType.php
modules/contrib/real_estate/modules/property/src/Entity/PropertyTypeInterface.php
modules/contrib/real_estate/modules/property/src/Entity/PropertyViewsData.php
modules/contrib/real_estate/modules/property/src/Form/PropertyDeleteForm.php
modules/contrib/real_estate/modules/property/src/Form/PropertyForm.php
modules/contrib/real_estate/modules/property/src/Form/PropertySettingsForm.php
modules/contrib/real_estate/modules/property/src/Form/PropertyTypeDeleteForm.php
modules/contrib/real_estate/modules/property/src/Form/PropertyTypeForm.php
modules/contrib/real_estate/modules/property/src/PropertyAccessControlHandler.php
modules/contrib/real_estate/modules/property/src/PropertyHtmlRouteProvider.php
modules/contrib/real_estate/modules/property/src/PropertyListBuilder.php
modules/contrib/real_estate/modules/property/src/PropertyPermissions.php
modules/contrib/real_estate/modules/property/src/PropertyTranslationHandler.php
modules/contrib/real_estate/modules/property/src/PropertyTypeHtmlRouteProvider.php
modules/contrib/real_estate/modules/property/src/PropertyTypeListBuilder.php
modules/contrib/real_estate/modules/property/tests/src/Functional/PropertyTypeTest.php
modules/contrib/real_estate/modules/rets/real_estate_rets.install
modules/contrib/real_estate/modules/rets/real_estate_rets.module
modules/contrib/real_estate/modules/rets/src/Entity/RetsConnection.php
modules/contrib/real_estate/modules/rets/src/Entity/RetsConnectionInterface.php
modules/contrib/real_estate/modules/rets/src/Form/RetsConnectionDeleteForm.php
modules/contrib/real_estate/modules/rets/src/Form/RetsConnectionForm.php
modules/contrib/real_estate/modules/rets/src/Form/RetsConnectionQueriesList.php
modules/contrib/real_estate/modules/rets/src/Form/RetsConnectionQueryAddForm.php
modules/contrib/real_estate/modules/rets/src/Form/RetsConnectionQueryDeleteForm.php
modules/contrib/real_estate/modules/rets/src/Form/RetsConnectionQueryEditForm.php
modules/contrib/real_estate/modules/rets/src/Form/RetsManualLoad.php
modules/contrib/real_estate/modules/rets/src/RetsConnectionHtmlRouteProvider.php
modules/contrib/real_estate/modules/rets/src/RetsConnectionListBuilder.php
modules/contrib/real_estate/modules/rets/src/RetsFetcher.php
modules/contrib/real_estate/modules/rets/src/RetsFetcherInterface.php
modules/contrib/real_estate/modules/rets/src/RetsManager.php
modules/contrib/real_estate/modules/rets/src/RetsManagerInterface.php
modules/contrib/real_estate/modules/rets/src/RetsProcessor.php
modules/contrib/real_estate/modules/rets/src/RetsProcessorInterface.php
modules/contrib/real_estate/modules/rets/src/RetsQuery.php
modules/contrib/real_estate/modules/rets/src/RetsQueryInterface.php
modules/contrib/real_estate/real_estate.module

31 files with changes
=====================

1) modules/contrib/real_estate/modules/rets/src/RetsQuery.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The connection that this query is connected to.
    *
-   * @var \Drupal\real_estate_rets\Entity\RetsConnectionInterface
+   * @var RetsConnectionInterface
    */
   private $connection;

@@ @@
   /**
    * RetsQuery constructor.
    *
-   * @param \Drupal\real_estate_rets\Entity\RetsConnectionInterface $connection
+   * @param RetsConnectionInterface $connection
    *   The connection the query is attached to.
    * @param string $id
    *   The query's ID.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/real_estate/modules/rets/src/RetsProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\real_estate_rets;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Queue\QueueFactory;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The rets settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $retsSettings;

@@ @@
   /**
    * The RetsFetcher service.
    *
-   * @var \Drupal\real_estate_rets\RetsFetcherInterface
+   * @var RetsFetcherInterface
    */
   protected $retsFetcher;

@@ @@
   /**
    * The rets fetch queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $fetchQueue;

@@ @@
   /**
    * The RetsFetcher service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a RetsProcessor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\real_estate_rets\RetsFetcherInterface $rets_fetcher
+   * @param RetsFetcherInterface $rets_fetcher
    *   The rets fetcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The Entity Type Manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, QueueFactory $queue_factory, RetsFetcherInterface $rets_fetcher, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/real_estate/modules/rets/src/RetsManager.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $retsSettings;

@@ @@
   /**
    * Drupal\real_estate_rets\RetsProcessorInterface definition.
    *
-   * @var \Drupal\real_estate_rets\RetsProcessorInterface
+   * @var RetsProcessorInterface
    */
   protected $retsProcessor;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a RetsManager.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\real_estate_rets\RetsProcessorInterface $rets_processor
+   * @param RetsProcessorInterface $rets_processor
    *   The Rets Processor service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The Entity Type Manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RetsProcessorInterface $rets_processor, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/real_estate/modules/rets/src/RetsFetcher.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\real_estate_rets;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Queue\RequeueException;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use PHRETS\Configuration;
@@ @@
   /**
    * The rets settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $retsSettings;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/real_estate/modules/rets/src/RetsConnectionHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/real_estate/modules/rets/src/Form/RetsManualLoad.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\real_estate_rets\Form;

+use Drupal\update\UpdateManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Drupal\real_estate_rets\RetsFetcher definition.
    *
-   * @var \Drupal\real_estate_rets\RetsFetcher
+   * @var RetsFetcher
    */
   protected $realEstateRetsFetcher;
   /**
    * Drupal\Core\Config\ConfigManager definition.
    *
-   * @var \Drupal\Core\Config\ConfigManager
+   * @var ConfigManager
    */
   protected $configManager;
   /**
    * Update manager service.
    *
-   * @var \Drupal\update\UpdateManagerInterface
+   * @var UpdateManagerInterface
    */
   protected $retsManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/real_estate/modules/rets/src/Form/RetsConnectionQueryEditForm.php:160

    ---------- begin diff ----------
@@ @@
   /**
    * Copies top-level form values to entity properties.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/real_estate/modules/rets/src/Form/RetsConnectionQueryDeleteForm.php:65

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\real_estate_rets\Entity\RetsConnectionInterface $real_estate_rets_connection
+   * @param RetsConnectionInterface $real_estate_rets_connection
    *   The connect entity being edited.
    * @param string|null $connection_query
    *   The connect query being deleted.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/real_estate/modules/rets/src/Form/RetsConnectionQueryAddForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The RetsFetcher service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a EntityTypeManager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    *
    * This form can only change values for a query, which is part of connection.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/real_estate/modules/rets/src/Form/RetsConnectionForm.php:139

    ---------- begin diff ----------
@@ @@

     switch ($status) {
       case SAVED_NEW:
-        drupal_set_message($this->t('Created the %label RETS Connection.', [
+        $this->messenger()->addStatus($this->t('Created the %label RETS Connection.', [
           '%label' => $real_estate_rets_connection->label(),
         ]));
         break;

       default:
-        drupal_set_message($this->t('Saved the %label RETS Connection.', [
+        $this->messenger()->addStatus($this->t('Saved the %label RETS Connection.', [
           '%label' => $real_estate_rets_connection->label(),
         ]));
     }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/real_estate/modules/rets/real_estate_rets.module:35

    ---------- begin diff ----------
@@ @@
   if ($success) {
     if (!empty($results)) {
       if (!empty($results['updated'])) {
-        drupal_set_message(\Drupal::translation()->formatPlural($results['updated'], 'Loaded rets data for one query.', 'Loaded rets data for @count queries.'));
+        \Drupal::messenger()->addStatus(\Drupal::translation()->formatPlural($results['updated'], 'Loaded rets data for one query.', 'Loaded rets data for @count queries.'));
       }
       if (!empty($results['failures'])) {
-        drupal_set_message(\Drupal::translation()->formatPlural($results['failures'], 'Failed to get rets data for one query.', 'Failed to get rets data for @count queries.'), 'error');
+        \Drupal::messenger()->addError(\Drupal::translation()->formatPlural($results['failures'], 'Failed to get rets data for one query.', 'Failed to get rets data for @count queries.'));
       }
     }
   }
   else {
-    drupal_set_message(t('An error occurred trying to get rets data.'), 'error');
+    \Drupal::messenger()->addError(t('An error occurred trying to get rets data.'));
   }
 }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector


12) modules/contrib/real_estate/modules/property/tests/src/Functional/PropertyTypeTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $user = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/real_estate/modules/property/src/PropertyPermissions.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\real_estate_property\Entity\Property $type
+   * @param Property $type
    *   The Property type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/real_estate/modules/property/src/PropertyListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\real_estate_property;

+use Drupal\real_estate_property\Entity\Property;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\real_estate_property\Entity\Property $entity */
+    /** @var Property $entity */
     $row['id'] = $entity->id();
     $row['title'] = Link::createFromRoute(
       $entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/real_estate/modules/property/src/PropertyHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/real_estate/modules/property/src/PropertyAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\real_estate_property;

+use Drupal\real_estate_property\Entity\PropertyInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\real_estate_property\Entity\PropertyInterface $entity */
-
+    /** @var PropertyInterface $entity */
     switch ($operation) {

       case 'view':
@@ @@
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $operation
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return string|null
    *   The permission string indicating it's allowed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/real_estate/modules/property/src/Form/PropertySettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/real_estate/modules/property/src/Form/PropertyForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\real_estate_property\Form;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\real_estate_property\Entity\Property;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\real_estate_property\Entity\Property $entity */
+    /** @var Property $entity */
     $form = parent::buildForm($form, $form_state);

     return $form;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/real_estate/modules/property/real_estate_property.module:63

    ---------- begin diff ----------
@@ @@
 /**
  * Adds the default agencies field to a property.
  *
- * @param \Drupal\real_estate_property\Entity\PropertyTypeInterface $property_type
+ * @param PropertyTypeInterface $property_type
  *   The property type.
  *
- * @return \Drupal\field\Entity\FieldConfig
+ * @return FieldConfig
  *   A Agency field object.
  */
 function real_estate_property_add_agencies_field(PropertyTypeInterface $property_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


20) modules/contrib/real_estate/modules/openimmo/src/OpenImmoQuery.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The source that this query is connected to.
    *
-   * @var \Drupal\real_estate_openimmo\Entity\OpenImmoInterface
+   * @var OpenImmoInterface
    */
   private $source;

@@ @@
   /**
    * OpenImmoQuery constructor.
    *
-   * @param \Drupal\real_estate_openimmo\Entity\OpenImmoInterface $source
+   * @param OpenImmoInterface $source
    *   The source the query is attached to.
    * @param string $id
    *   The query's ID.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/real_estate/modules/openimmo/src/OpenImmoHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/real_estate/modules/openimmo/src/Form/OpenImmoQueryEditForm.php:104

    ---------- begin diff ----------
@@ @@
   /**
    * Copies top-level form values to entity properties.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/real_estate/modules/openimmo/src/Form/OpenImmoQueryDeleteForm.php:65

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\real_estate_openimmo\Entity\OpenImmoInterface $real_estate_openimmo
+   * @param OpenImmoInterface $real_estate_openimmo
    *   The connect entity being edited.
    * @param string|null $source_query
    *   The connect query being deleted.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/real_estate/modules/openimmo/src/Form/OpenImmoQueryAddForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The OpenImmoFetcher service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a EntityTypeManager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    *
    * This form can only change values for a query, which is part of source.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/real_estate/modules/kickstart/real_estate_kickstart.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\File\FileSystemInterface;
 /**
  * @file
  * Real Estate Kickstart setup.
@@ @@
   // Generate properties.
   $property_storage = \Drupal::entityTypeManager()->getStorage('real_estate_property');
   $random = new Random();
-  $image_path = drupal_get_path('module', 'real_estate_kickstart') . '/images/';
+  $image_path = \Drupal::service('extension.list.module')->getPath('real_estate_kickstart') . '/images/';

   for ($i = 1; $i <= 3; $i++) {
     $property = $property_storage->create([
@@ @@
     ]);

     $data = file_get_contents($image_path . 'house' . $i . '.jpg');
-    $file = file_save_data($data, 'public://house' . $i . '.jpg', FILE_EXISTS_REPLACE);
+    $file = \Drupal::service('file.repository')->writeData($data, 'public://house' . $i . '.jpg', FileSystemInterface::EXISTS_REPLACE);
     if ($file) {
       $property->set('field_photo', [
         'target_id' => $file->id(),
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileExistsReplaceRector
 * FileSaveDataRector
 * ArgumentRemoverRector


26) modules/contrib/real_estate/modules/agency/src/Form/AgencySettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/real_estate/modules/agency/src/Form/AgencyForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\real_estate_agency\Form;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\real_estate_agency\Entity\Agency;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\real_estate_agency\Entity\Agency $entity */
+    /** @var Agency $entity */
     $form = parent::buildForm($form, $form_state);

     return $form;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/real_estate/modules/agency/src/AgencyPermissions.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\real_estate_agency\Entity\Agency $type
+   * @param Agency $type
    *   The Agency type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/real_estate/modules/agency/src/AgencyListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\real_estate_agency;

+use Drupal\real_estate_agency\Entity\Agency;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\real_estate_agency\Entity\Agency $entity */
+    /** @var Agency $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/real_estate/modules/agency/src/AgencyHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/real_estate/modules/agency/src/AgencyAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\real_estate_agency;

+use Drupal\real_estate_agency\Entity\AgencyInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\real_estate_agency\Entity\AgencyInterface $entity */
-
+    /** @var AgencyInterface $entity */
     switch ($operation) {

       case 'view':
@@ @@
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $operation
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return string|null
    *   The permission string indicating it's allowed.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 31 files have been changed by Rector                                      

