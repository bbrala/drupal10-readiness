diff --git a/media_entity_slideshow.install b/media_entity_slideshow.install
index e0ee870..6be6bb4 100644
--- a/media_entity_slideshow.install
+++ b/media_entity_slideshow.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Extension\ModuleExtensionList;
 /**
  * @file
  * Install, uninstall and update hooks for Media entity slideshow module.
@@ -11,10 +12,10 @@ use Drupal\Core\File\FileSystemInterface;
  * Implements hook_install().
  */
 function media_entity_slideshow_install() {
-  /** @var \Drupal\Core\Extension\ModuleExtensionList $extension_list */
+  /** @var ModuleExtensionList $extension_list */
   $source = \Drupal::service('extension.list.module')->getPath('media_entity_slideshow') . '/images/icons';
   $destination = \Drupal::config('media.settings')->get('icon_base_uri');
-  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+  /** @var FileSystemInterface $file_system */
   $file_system = \Drupal::service('file_system');
   $file_system->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
 
diff --git a/src/Plugin/media/Source/Slideshow.php b/src/Plugin/media/Source/Slideshow.php
index 86c5d1c..d21c9d9 100644
--- a/src/Plugin/media/Source/Slideshow.php
+++ b/src/Plugin/media/Source/Slideshow.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\media_entity_slideshow\Plugin\media\Source;
 
+use Drupal\media\MediaTypeInterface;
 use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
 use Drupal\media\MediaInterface;
 use Drupal\media\MediaSourceBase;
@@ -62,13 +63,13 @@ class Slideshow extends MediaSourceBase implements MediaSourceEntityConstraintsI
           return parent::getMetadata($media, 'thumbnail_uri');
         }
 
-        /** @var \Drupal\media\MediaInterface $slideshow_item */
+        /** @var MediaInterface $slideshow_item */
         $slideshow_item = $this->entityTypeManager->getStorage('media')->load($media->{$source_field}->target_id);
         if (!$slideshow_item) {
           return parent::getMetadata($media, 'thumbnail_uri');
         }
 
-        /** @var \Drupal\media\MediaTypeInterface $bundle */
+        /** @var MediaTypeInterface $bundle */
         $bundle = $this->entityTypeManager->getStorage('media_type')->load($slideshow_item->bundle());
         if (!$bundle) {
           return parent::getMetadata($media, 'thumbnail_uri');
diff --git a/tests/src/Functional/MediaEntitySlideshowTest.php b/tests/src/Functional/MediaEntitySlideshowTest.php
index fefa2d6..47b2f17 100644
--- a/tests/src/Functional/MediaEntitySlideshowTest.php
+++ b/tests/src/Functional/MediaEntitySlideshowTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\media_entity_slideshow\Functional;
 
+use Drupal\media\MediaTypeInterface;
+use Drupal\media\MediaInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Language\Language;
 use Drupal\file\Entity\File;
 use Drupal\media\Entity\Media;
@@ -28,21 +33,21 @@ class MediaEntitySlideshowTest extends BrowserTestBase {
   /**
    * The slideshow media bundle.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   protected $slideshowMediaBundle;
 
   /**
    * The image media bundle.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   protected $imageMediaBundle;
 
   /**
    * A collection of media entities, to be used in our test.
    *
-   * @var \Drupal\media\MediaInterface[]
+   * @var MediaInterface[]
    */
   protected $mediaImageCollection;
 
@@ -131,7 +136,7 @@ class MediaEntitySlideshowTest extends BrowserTestBase {
    * @param int $count
    *   (optional) The number of items to create. Defaults to 3.
    *
-   * @return \Drupal\media\MediaInterface[]
+   * @return MediaInterface[]
    *   An indexed array of fully-loaded media objects of bundle image.
    */
   private function createMediaImageCollection($count = 3) {
@@ -158,11 +163,11 @@ class MediaEntitySlideshowTest extends BrowserTestBase {
    * @param int $id
    *   The media identifier.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The loaded media entity.
    */
   protected function loadMedia($id) {
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage('media');
     return $storage->loadUnchanged($id);
   }
@@ -170,13 +175,13 @@ class MediaEntitySlideshowTest extends BrowserTestBase {
   /**
    * Retrieves a sample file of the specified type.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   A file object recently created and saved.
    */
   protected function getTestFile($type_name, $size = NULL) {
     $file = current($this->getTestFiles($type_name, $size));
     $file->filesize = filesize($file->uri);
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = File::create((array) $file);
     $file->setPermanent();
     $file->save();
diff --git a/tests/src/Unit/ConstraintsTest.php b/tests/src/Unit/ConstraintsTest.php
index fb1edd6..c6a58cc 100644
--- a/tests/src/Unit/ConstraintsTest.php
+++ b/tests/src/Unit/ConstraintsTest.php
@@ -25,9 +25,7 @@ class ConstraintsTest extends UnitTestCase {
     $this->assertEquals('At least one slideshow item must exist.', $constraint->message, 'Correct constraint message found.');
 
     // Test the validator with valid values.
-    $execution_context = $this->getMockBuilder('\Drupal\Core\TypedData\Validation\ExecutionContext')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $execution_context = $this->createMock('\Drupal\Core\TypedData\Validation\ExecutionContext');
 
     $execution_context->expects($this->exactly(0))
       ->method('addViolation');
@@ -39,9 +37,7 @@ class ConstraintsTest extends UnitTestCase {
     $validator->validate($value, $constraint);
 
     // Test the validator with invalid values.
-    $execution_context = $this->getMockBuilder('\Drupal\Core\TypedData\Validation\ExecutionContext')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $execution_context = $this->createMock('\Drupal\Core\TypedData\Validation\ExecutionContext');
 
     $execution_context->expects($this->exactly(1))
       ->method('addViolation')
