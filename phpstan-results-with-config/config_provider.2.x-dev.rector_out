modules/contrib/config_provider/config_provider.install
modules/contrib/config_provider/src/Annotation/ConfigProvider.php
modules/contrib/config_provider/src/ConfigProviderConfigInstaller.php
modules/contrib/config_provider/src/ConfigProviderServiceProvider.php
modules/contrib/config_provider/src/Plugin/ConfigCollector.php
modules/contrib/config_provider/src/Plugin/ConfigCollectorInterface.php
modules/contrib/config_provider/src/Plugin/ConfigProvider/ConfigProviderInstall.php
modules/contrib/config_provider/src/Plugin/ConfigProvider/ConfigProviderOptional.php
modules/contrib/config_provider/src/Plugin/ConfigProviderBase.php
modules/contrib/config_provider/src/Plugin/ConfigProviderInterface.php
modules/contrib/config_provider/src/Plugin/ConfigProviderManager.php
modules/contrib/config_provider/src/ProxyClass/ConfigProviderConfigInstaller.php
modules/contrib/config_provider/tests/modules/config_provider_multi_providers_test/src/Plugin/ConfigProvider/Foo.php
modules/contrib/config_provider/tests/src/Kernel/ConfigCollectorTest.php

8 files with changes
====================

1) modules/contrib/config_provider/src/ProxyClass/ConfigProviderConfigInstaller.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_provider\ProxyClass {

+    use Drupal\Core\Config\ConfigInstallerInterface;
+    use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use Symfony\Component\DependencyInjection\ContainerInterface;
+    use Drupal\Core\Config\StorageInterface;
     /**
      * Provides a proxy class for \Drupal\config_provider\ConfigProviderConfigInstaller.
      *
      * @see \Drupal\Component\ProxyBuilder
      */
-    class ConfigProviderConfigInstaller implements \Drupal\Core\Config\ConfigInstallerInterface
+    class ConfigProviderConfigInstaller implements ConfigInstallerInterface
     {

-        use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+        use DependencySerializationTrait;

         /**
          * The id of the original proxied service.
@@ @@
         /**
          * The service container.
          *
-         * @var \Symfony\Component\DependencyInjection\ContainerInterface
+         * @var ContainerInterface
          */
         protected $container;

@@ @@
         /**
          * Constructs a ProxyClass Drupal proxy object.
          *
-         * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+         * @param ContainerInterface $container
          *   The container.
          * @param string $drupal_proxy_original_service_id
          *   The service ID of the original service.
          */
-        public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id)
+        public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id)
         {
             $this->container = $container;
             $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
@@ @@
         /**
          * {@inheritdoc}
          */
-        public function installOptionalConfig(\Drupal\Core\Config\StorageInterface $storage = NULL, $dependency = array (
+        public function installOptionalConfig(StorageInterface $storage = NULL, $dependency = array (
         ))
         {
             return $this->lazyLoadItself()->installOptionalConfig($storage, $dependency);
@@ @@
         /**
          * {@inheritdoc}
          */
-        public function setSourceStorage(\Drupal\Core\Config\StorageInterface $storage)
+        public function setSourceStorage(StorageInterface $storage)
         {
             return $this->lazyLoadItself()->setSourceStorage($storage);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/config_provider/src/Plugin/ConfigProviderManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/config_provider/src/Plugin/ConfigProviderInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_provider\Plugin;

+use Drupal\Core\Extension\Extension;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ConfigManagerInterface;
@@ @@
   /**
    * Injects the active configuration storage.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function setConfigFactory(ConfigFactoryInterface $config_factory);
@@ @@
   /**
    * Injects the active configuration storage.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The configuration storage to read configuration from.
    */
   public function setActiveStorages(StorageInterface $active_storage);
@@ @@
   /**
    * Injects the active configuration storage.
    *
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The configuration manager.
    */
   public function setConfigManager(ConfigManagerInterface $config_manager);
@@ @@
    *   The configuration collection to use.
    * @param string $prefix
    *   (optional) Limit to configuration starting with the provided string.
-   * @param \Drupal\Core\Config\StorageInterface[] $profile_storages
+   * @param StorageInterface[] $profile_storages
    *   An array of storage interfaces containing profile configuration to check
    *   for overrides.
    *
@@ @@
    * Implementing plugins should write configuration as appropriate to the
    * ::providerStorage storage.
    *
-   * @param \Drupal\Core\Extension\Extension[] $extensions
+   * @param Extension[] $extensions
    *   (Optional) An associative array of Extension objects, keyed by extension
    *   name. If provided, data loaded will be limited to these extensions.
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/config_provider/src/Plugin/ConfigProviderBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_provider\Plugin;

+use Drupal\Core\Extension\Extension;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The active configuration storages, keyed by collection.
    *
-   * @var \Drupal\Core\Config\StorageInterface[]
+   * @var StorageInterface[]
    */
   protected $activeStorages;

@@ @@
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * The provider configuration storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $providerStorage;

@@ @@
    *   (optional) The configuration collection. Defaults to the default
    *   collection.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The configuration storage that provides the default configuration.
    */
   protected function getExtensionInstallStorage($directory, $collection = StorageInterface::DEFAULT_COLLECTION) {
@@ @@
    *   (optional) The configuration collection. Defaults to the default
    *   collection.
    *
-   * @return \Drupal\Core\Config\StorageInterface
+   * @return StorageInterface
    *   The configuration storage that provides the default configuration.
    */
   protected function getActiveStorages($collection = StorageInterface::DEFAULT_COLLECTION) {
@@ @@
    * the core method, here we don't use an argument for the extension being
    * installed, since our usage isn't in the context of extension installation.
    *
-   * @return \Drupal\Core\Config\StorageInterface[]|null
+   * @return StorageInterface[]|null
    *   Storages to access configuration from the installation profile.
    */
   protected function getProfileStorages() {
@@ @@
   /**
    * Returns a list of all configuration items or those of extensions.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   A configuration storage.
-   * @param \Drupal\Core\Extension\Extension[] $extensions
+   * @param Extension[] $extensions
    *   An associative array of Extension objects, keyed by extension name.
    *
    * @return array
@@ @@
    *   found.
    */
   protected function drupalGetPath($type, $name) {
-    return drupal_get_path($type, $name);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+    return \Drupal::service('extension.path.resolver')->getPath($type, $name);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/config_provider/src/Plugin/ConfigCollectorInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_provider\Plugin;

+use Drupal\Core\Extension\Extension;
 /**
  * Class for invoking configuration providers..
  */
@@ @@
   /**
    * Gets all configuration provider plugins.
    *
-   * @return \Drupal\config_provider\Plugin\ConfigProviderInterface[]
+   * @return ConfigProviderInterface[]
    *   An array of fully initialized configuration provider instances.
    */
   public function getConfigProviders();
@@ @@
   /**
    * Adds installable configuration from all provider plugins.
    *
-   * @param \Drupal\Core\Extension\Extension[] $extensions
+   * @param Extension[] $extensions
    *   (Optional) An associative array of Extension objects, keyed by extension
    *   name. If provided, data loaded will be limited to these extensions.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/config_provider/src/Plugin/ConfigCollector.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The active configuration storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $activeStorage;

@@ @@
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;

@@ @@
   /**
    * The provider configuration storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $providerStorage;

@@ @@
   /**
    * The configuration provider manager.
    *
-   * @var \Drupal\config_provider\Plugin\ConfigProviderManager
+   * @var ConfigProviderManager
    */
   protected $configProviderManager;

@@ @@
   /**
    * Constructor for ConfigCollector objects.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Config\StorageInterface $active_storage
+   * @param StorageInterface $active_storage
    *   The active configuration storage.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The configuration manager.
-   * @param \Drupal\Core\Config\StorageInterface $provider_storage
+   * @param StorageInterface $provider_storage
    *   The provider configuration storage.
-   * @param \Drupal\config_provider\Plugin\ConfigProviderManager $config_provider_manager
+   * @param ConfigProviderManager $config_provider_manager
    *   The configuration provider manager.
    * @param string $install_profile
    *   (optional) The current installation profile. This parameter will be
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/config_provider/src/ConfigProviderConfigInstaller.php:18

    ---------- begin diff ----------
@@ @@
    *  The configuration collection to use.
    * @param string $prefix
    *   (optional) Limit to configuration starting with the provided string.
-   * @param \Drupal\Core\Config\StorageInterface[] $profile_storages
+   * @param StorageInterface[] $profile_storages
    *   An array of storage interfaces containing profile configuration to check
    *   for overrides.
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/config_provider/src/Annotation/ConfigProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\config_provider\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 8 files have been changed by Rector                                       

