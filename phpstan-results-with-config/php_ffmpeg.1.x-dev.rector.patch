diff --git a/composer.json b/composer.json
index 34e858c..b7fc4a0 100644
--- a/composer.json
+++ b/composer.json
@@ -15,7 +15,7 @@
     "issues": "http://drupal.org/project/issues/php_ffmpeg"
   },
   "require": {
-    "drupal/core": "^8.0 | ^9.0",
-    "php-ffmpeg/php-ffmpeg": "*"
+    "php-ffmpeg/php-ffmpeg": "*",
+    "drupal/core": "^9.1 || ^10"
   }
 }
diff --git a/php_ffmpeg.info.yml b/php_ffmpeg.info.yml
index 508cb70..9dc729b 100644
--- a/php_ffmpeg.info.yml
+++ b/php_ffmpeg.info.yml
@@ -2,6 +2,5 @@ name: PHP-FFMpeg
 description: 'Integrates with the PHP FFmpeg library.'
 type: module
 package: Development
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.1 || ^10
 configure: php_ffmpeg.settings
diff --git a/src/PHPFFMpegFactory.php b/src/PHPFFMpegFactory.php
index 5b465b1..38a2b23 100644
--- a/src/PHPFFMpegFactory.php
+++ b/src/PHPFFMpegFactory.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\php_ffmpeg;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;
 use Doctrine\Common\Cache\Cache;
@@ -23,7 +24,7 @@ class PHPFFMpegFactory {
   /**
    * Logger channel that logs execution within FFMpeg extension to watchdog.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    *   The registered logger for this channel.
    */
   protected $logger;
@@ -31,7 +32,7 @@ class PHPFFMpegFactory {
   /**
    * The config object providing the module's config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
@@ -40,9 +41,9 @@ class PHPFFMpegFactory {
    *
    * @param \Doctrine\Common\Cache\Cache $cache
    *   The cache backend.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   Prefix used for appending to cached item identifiers.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A configuration factory instance.
    */
   public function __construct(Cache $cache, LoggerChannelInterface $logger, ConfigFactoryInterface $config_factory) {
@@ -54,7 +55,7 @@ class PHPFFMpegFactory {
   /**
    * Factory function for the FFMpeg object.
    *
-   * @return \FFMpeg\FFMpeg
+   * @return FFMpeg
    */
   public function getFFMpeg() {
     return FFMpeg::create(
@@ -67,7 +68,7 @@ class PHPFFMpegFactory {
   /**
    * Factory function for the FFProbe object.
    *
-   * @return \FFMpeg\FFProbe
+   * @return FFProbe
    */
   public function getFFMpegProbe() {
     return FFProbe::create(
diff --git a/tests/src/Functional/PHPFFMpegTestCase.php b/tests/src/Functional/PHPFFMpegTestCase.php
index 9f861db..afad636 100644
--- a/tests/src/Functional/PHPFFMpegTestCase.php
+++ b/tests/src/Functional/PHPFFMpegTestCase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\php_ffmpeg\Functional;
 
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\TestFileCreationTrait;
 use FFMpeg\FFMpeg;
@@ -35,14 +36,14 @@ class PHPFFMpegTestCase extends BrowserTestBase {
   /**
    * The Drupal FS.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->fileSystem = $this->container->get('file_system');
@@ -69,17 +70,17 @@ class PHPFFMpegTestCase extends BrowserTestBase {
     $this->drupalLogin($account);
     $this->drupalGet('admin/config/development/php-ffmpeg');
 
-    $this->assertFieldByName('ffmpeg_binary', $ffmpeg_binary, 'The PHP-FFMpeg settings page should provide a field for the ffmpeg binary path.');
-    $this->assertFieldByName('ffprobe_binary', $ffprobe_binary, 'The PHP-FFMpeg settings page should provide a field for the ffprobe binary path.');
-    $this->assertFieldByName('execution_timeout', $execution_timeout, 'The PHP-FFMpeg settings page should provide a field for the ffmpeg command timeout.');
-    $this->assertFieldByName('threads_amount', $threads_amount, 'The PHP-FFMpeg settings page should provide a field for the number of threads to use for ffmpeg commands.');
+    $this->assertSession()->fieldValueEquals('ffmpeg_binary', $ffmpeg_binary);
+    $this->assertSession()->fieldValueEquals('ffprobe_binary', $ffprobe_binary);
+    $this->assertSession()->fieldValueEquals('execution_timeout', $execution_timeout);
+    $this->assertSession()->fieldValueEquals('threads_amount', $threads_amount);
 
     $ffmpeg_binary = $this->fileSystem->realpath($this->drupalGetTestFiles('binary')[0]->uri);
     $ffprobe_binary = $this->fileSystem->realpath($this->drupalGetTestFiles('binary')[1]->uri);
     $execution_timeout = mt_rand(1, 42);
     $threads_amount = mt_rand(1, 42);
 
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'ffmpeg_binary' => $ffmpeg_binary,
       'ffprobe_binary' => $ffprobe_binary,
       'execution_timeout' => $execution_timeout,
@@ -87,22 +88,22 @@ class PHPFFMpegTestCase extends BrowserTestBase {
     ], 'Save configuration');
     $settings = $this->config('php_ffmpeg.settings');
 
-    $this->assertFieldByName('ffmpeg_binary', $ffmpeg_binary, 'Submitting he PHP-FFMpeg settings page should update the value of the field for the ffmpeg binary path.');
-    $this->assertFieldByName('ffprobe_binary', $ffprobe_binary, 'Submitting he PHP-FFMpeg settings page should update the value of the field for the ffprobe binary path.');
-    $this->assertFieldByName('execution_timeout', $execution_timeout, 'Submitting he PHP-FFMpeg settings page should update the value of the field for the ffmpeg command timeout.');
-    $this->assertFieldByName('threads_amount', $threads_amount, 'Submitting he PHP-FFMpeg settings page should update the value of the field for the number of threads to use for ffmpeg commands.');
+    $this->assertSession()->fieldValueEquals('ffmpeg_binary', $ffmpeg_binary);
+    $this->assertSession()->fieldValueEquals('ffprobe_binary', $ffprobe_binary);
+    $this->assertSession()->fieldValueEquals('execution_timeout', $execution_timeout);
+    $this->assertSession()->fieldValueEquals('threads_amount', $threads_amount);
 
-    $this->assertEqual($settings->get('ffmpeg_binary'), $ffmpeg_binary, 'Submitting he PHP-FFMpeg settings page should update the ffmpeg binary path.');
-    $this->assertEqual($settings->get('ffprobe_binary'), $ffprobe_binary, 'Submitting he PHP-FFMpeg settings page should update the ffproe binary path.');
-    $this->assertEqual($settings->get('execution_timeout'), $execution_timeout, 'Submitting he PHP-FFMpeg settings page should update the ffmpeg command timeout.');
-    $this->assertEqual($settings->get('threads_amount'), $threads_amount, 'Submitting he PHP-FFMpeg settings page should update the number of threads to use for ffmpeg commands.');
+    $this->assertEquals($settings->get('ffmpeg_binary'), $ffmpeg_binary, 'Submitting he PHP-FFMpeg settings page should update the ffmpeg binary path.');
+    $this->assertEquals($settings->get('ffprobe_binary'), $ffprobe_binary, 'Submitting he PHP-FFMpeg settings page should update the ffproe binary path.');
+    $this->assertEquals($settings->get('execution_timeout'), $execution_timeout, 'Submitting he PHP-FFMpeg settings page should update the ffmpeg command timeout.');
+    $this->assertEquals($settings->get('threads_amount'), $threads_amount, 'Submitting he PHP-FFMpeg settings page should update the number of threads to use for ffmpeg commands.');
 
     $invalidFilenames = [
       $this->randomMachineName(),
       $this->randomMachineName(),
     ];
 
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'ffmpeg_binary' => $invalidFilenames[0],
       'ffprobe_binary' => $invalidFilenames[1],
       'execution_timeout' => $this->randomString(),
@@ -110,12 +111,18 @@ class PHPFFMpegTestCase extends BrowserTestBase {
     ], 'Save configuration');
     $settings = $this->config('php_ffmpeg.settings');
 
-    $this->assertText("File not found: $invalidFilenames[0]", "Submission of the the PHP-FFMpeg settings page should validate the ffmpeg binary path is an existing file.");
-    $this->assertText("File not found: $invalidFilenames[1]", "Submission of the the PHP-FFMpeg settings page should validate the ffprobe binary path is an existing file.");
-    $this->assertEqual($settings->get('ffmpeg_binary'), $ffmpeg_binary, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg binary path.');
-    $this->assertEqual($settings->get('ffprobe_binary'), $ffprobe_binary, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffprobe path.');
-    $this->assertEqual($settings->get('execution_timeout'), $execution_timeout, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg command time path.');
-    $this->assertEqual($settings->get('threads_amount'), $threads_amount, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg command threads number.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("File not found: $invalidFilenames[0]");
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains("File not found: $invalidFilenames[1]");
+    $this->assertEquals($settings->get('ffmpeg_binary'), $ffmpeg_binary, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg binary path.');
+    $this->assertEquals($settings->get('ffprobe_binary'), $ffprobe_binary, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffprobe path.');
+    $this->assertEquals($settings->get('execution_timeout'), $execution_timeout, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg command time path.');
+    $this->assertEquals($settings->get('threads_amount'), $threads_amount, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg command threads number.');
   }
 
   /**
