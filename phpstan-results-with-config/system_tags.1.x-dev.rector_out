modules/contrib/system_tags/modules/theme/system_tags_theme.module
modules/contrib/system_tags/src/Annotation/SystemTagFinder.php
modules/contrib/system_tags/src/Config/SystemPageConfigOverrider.php
modules/contrib/system_tags/src/Config/SystemTagDefinitions.php
modules/contrib/system_tags/src/Entity/SystemTag.php
modules/contrib/system_tags/src/Entity/SystemTagInterface.php
modules/contrib/system_tags/src/Form/SystemTagDeleteForm.php
modules/contrib/system_tags/src/Form/SystemTagForm.php
modules/contrib/system_tags/src/Plugin/Condition/SystemTags.php
modules/contrib/system_tags/src/Plugin/SystemTagFinder/SystemTagBlockFinder.php
modules/contrib/system_tags/src/Plugin/SystemTagFinder/SystemTagNodeFinder.php
modules/contrib/system_tags/src/SystemTagAccessControlHandler.php
modules/contrib/system_tags/src/SystemTagFinder/SystemTagFinderInterface.php
modules/contrib/system_tags/src/SystemTagFinder/SystemTagFinderManager.php
modules/contrib/system_tags/src/SystemTagFinder/SystemTagFinderManagerInterface.php
modules/contrib/system_tags/src/SystemTagFinder/SystemTagFinderPluginBase.php
modules/contrib/system_tags/src/SystemTagHelper.php
modules/contrib/system_tags/src/SystemTagHelperInterface.php
modules/contrib/system_tags/src/SystemTagHtmlRouteProvider.php
modules/contrib/system_tags/src/SystemTagListBuilder.php
modules/contrib/system_tags/src/TwigExtension/SystemTagsTwigExtension.php
modules/contrib/system_tags/system_tags.module
modules/contrib/system_tags/system_tags.tokens.inc
modules/contrib/system_tags/tests/src/Functional/DefaultSystemTagsTest.php

9 files with changes
====================

1) modules/contrib/system_tags/tests/src/Functional/DefaultSystemTagsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\system_tags\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\field\Traits\EntityReferenceTestTrait;
 use Drupal\system_tags\Config\SystemTagDefinitions;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   private $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/system_tags/system_tags.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\system_tags\SystemTagFinder\SystemTagFinderInterface;
 /**
  * @file
  * Token callbacks for the system_tags module.
@@ @@
     foreach ($tokens as $token_id => $original) {
       list($entity_type, $tag_id) = explode('--', $token_id);

-      /** @var \Drupal\system_tags\SystemTagFinder\SystemTagFinderInterface $system_tag_finder */
+      /** @var SystemTagFinderInterface $system_tag_finder */
       $system_tag_finder = Drupal::service('plugin.manager.system_tags.system_tag_finder_manager')
         ->getInstance(compact('entity_type'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/system_tags/src/TwigExtension/SystemTagsTwigExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\system_tags\TwigExtension;

+use Drupal\system_tags\SystemTagFinder\SystemTagFinderManager;
+use Drupal\system_tags\SystemTagFinder\SystemTagFinderInterface;
 use Drupal\system_tags\SystemTagFinder\SystemTagFinderManagerInterface;

 /**
@@ @@
   /**
    * The system tag finder manager.
    *
-   * @var \Drupal\system_tags\SystemTagFinder\SystemTagFinderManager
+   * @var SystemTagFinderManager
    */
   protected $systemTagFinderManager;

@@ @@
   /**
    * Constructs a new SystemTagTwigExtension object.
    *
-   * @param \Drupal\system_tags\SystemTagFinder\SystemTagFinderManagerInterface $system_tag_finder_manager
+   * @param SystemTagFinderManagerInterface $system_tag_finder_manager
    *   The system tag finder manager.
    */
   public function __construct(SystemTagFinderManagerInterface $system_tag_finder_manager) {
@@ @@
    *   The url of the tagged entity or '#'.
    */
   public function getSystemTagUrl($systemTagId, $entityTypeId = 'node', array $options = []) {
-    /** @var \Drupal\system_tags\SystemTagFinder\SystemTagFinderInterface $systemTagFinder */
+    /** @var SystemTagFinderInterface $systemTagFinder */
     $systemTagFinder = $this->systemTagFinderManager->getInstance(['entity_type' => $entityTypeId]);

     if ($entity = $systemTagFinder->findOneByTag($systemTagId)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/system_tags/src/SystemTagHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\system_tags;

+use Drupal\field\FieldStorageConfigInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;

 /**
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * SystemTagHelper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
           'settings' => ['target_type' => 'system_tag'],
         ]);

-      /** @var \Drupal\field\FieldStorageConfigInterface $value */
+      /** @var FieldStorageConfigInterface $value */
       foreach ($config as $value) {
         $map[$value->getTargetEntityTypeId()][] = $value->getName();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/system_tags/src/SystemTagFinder/SystemTagFinderPluginBase.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The system tag helper.
    *
-   * @var \Drupal\system_tags\SystemTagHelperInterface
+   * @var SystemTagHelperInterface
    */
   protected $systemTagHelper;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\system_tags\SystemTagHelperInterface $system_tag_helper
+   * @param SystemTagHelperInterface $system_tag_helper
    *   The system tag helper.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/system_tags/src/SystemTagFinder/SystemTagFinderInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\system_tags\SystemTagFinder;

+use Drupal\Core\Entity\EntityInterface;
 /**
  * Interface SystemTagFinderInterface.
  *
@@ @@
    * @param string|null $langcode
    *   Use a specific language code.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of entities, tagged with the given ID.
    */
   public function findByTag($systemTagId, $langcode = NULL);
@@ @@
    * @param string|null $langcode
    *   Use a specific language code.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   An entity, tagged with the given ID or NULL if nothing is found.
    */
   public function findOneByTag($systemTagId, $langcode = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/system_tags/src/Plugin/Condition/SystemTags.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\system_tags\Plugin\Condition;

+use Drupal\system_tags\Entity\SystemTagInterface;
 use Drupal\Core\Condition\ConditionPluginBase;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(
@@ @@
     $form = parent::buildConfigurationForm($form, $form_state);

     $options = [];
-    /** @var \Drupal\system_tags\Entity\SystemTagInterface $tag */
+    /** @var SystemTagInterface $tag */
     foreach (SystemTag::loadMultiple() as $tag) {
       $options[$tag->id()] = $tag->label();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/system_tags/src/Config/SystemPageConfigOverrider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\system_tags\Config;

+use Drupal\system_tags\SystemTagFinder\SystemTagFinderInterface;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\ConfigFactoryOverrideInterface;
 use Drupal\Core\Config\StorageInterface;
@@ @@
   /**
    * The system tag finder manager.
    *
-   * @var \Drupal\system_tags\SystemTagFinder\SystemTagFinderManagerInterface
+   * @var SystemTagFinderManagerInterface
    */
   protected $tagFinderManager;

@@ @@
   /**
    * SystemPageConfigOverrider constructor.
    *
-   * @param \Drupal\system_tags\SystemTagFinder\SystemTagFinderManagerInterface $tagFinderManager
+   * @param SystemTagFinderManagerInterface $tagFinderManager
    *   The system tag finder manager.
    */
   public function __construct(SystemTagFinderManagerInterface $tagFinderManager) {
@@ @@
   public function loadOverrides($names) {
     $overrides = [];
     if (in_array('system.site', $names, TRUE)) {
-      /** @var \Drupal\system_tags\SystemTagFinder\SystemTagFinderInterface $systemTagFinder */
+      /** @var SystemTagFinderInterface $systemTagFinder */
       $systemTagFinder = $this->tagFinderManager->getInstance(['entity_type' => 'node']);

       if ($node = $systemTagFinder->findOneByTag(SystemTagDefinitions::TAG_ACCESS_DENIED)) {
@@ @@
   /**
    * Generate a path to the node.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node.
    *
    * @return string
    *   The path.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   private function generatePath(NodeInterface $node) {
     return sprintf('/%s', $node->toUrl()->getInternalPath());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/system_tags/modules/theme/system_tags_theme.module:5

    ---------- begin diff ----------
@@ @@
  */

 declare(strict_types = 1);
+use Drupal\system_tags\SystemTagHelperInterface;
+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;

 use Drupal\node\NodeInterface;

@@ @@
  *
  * @param string $prefix
  *   An optional prefix.
- * @param \Drupal\node\NodeInterface|null $node
+ * @param NodeInterface|null $node
  *   An optional node to work with.
  *
  * @return array
@@ @@
   }

   if ($node instanceof NodeInterface) {
-    /** @var \Drupal\system_tags\SystemTagHelperInterface $systemTagHelper */
+    /** @var SystemTagHelperInterface $systemTagHelper */
     $systemTagHelper = \Drupal::service('system_tags.system_tag_helper');
     foreach ($systemTagHelper->getReferenceFieldNames('node') as $field) {
       if (!$node->hasField($field)) {
@@ @@
         continue;
       }

-      /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $tags */
+      /** @var EntityReferenceFieldItemListInterface $tags */
       $tags = $node->get($field);
       foreach ($tags->referencedEntities() as $tag) {
         $suggestions[] = $prefix . $tag->id();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 9 files have been changed by Rector                                       

