diff --git a/src/Asset/CssCollectionOptimizer.php b/src/Asset/CssCollectionOptimizer.php
index ce0d485..17ecccf 100644
--- a/src/Asset/CssCollectionOptimizer.php
+++ b/src/Asset/CssCollectionOptimizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flysystem\Asset;
 
+use Drupal\Core\File\FileSystem;
 use Drupal\Core\Asset\CssCollectionOptimizer as DrupalCssCollectionOptimizer;
 
 /**
@@ -16,7 +17,7 @@ class CssCollectionOptimizer extends DrupalCssCollectionOptimizer {
    */
   public function deleteAll() {
     $this->state->delete('drupal_css_cache_files');
-    /** @var \Drupal\Core\File\FileSystem $file_system */
+    /** @var FileSystem $file_system */
     $file_system = \Drupal::service('file_system');
     $delete_stale = static function ($uri) use ($file_system) {
       // Default stale file threshold is 30 days (2592000 seconds).
diff --git a/src/Asset/CssOptimizer.php b/src/Asset/CssOptimizer.php
index 1e16e36..087a895 100644
--- a/src/Asset/CssOptimizer.php
+++ b/src/Asset/CssOptimizer.php
@@ -24,7 +24,7 @@ class CssOptimizer extends DrupalCssOptimizer {
     }
 
     // file_url_transform_relative() was removed here.
-    return 'url(' . file_create_url($path) . ')';
+    return 'url(' . \Drupal::service('file_url_generator')->generateAbsoluteString($path) . ')';
   }
 
 }
diff --git a/src/Asset/JsCollectionOptimizer.php b/src/Asset/JsCollectionOptimizer.php
index 972a7b2..e614999 100644
--- a/src/Asset/JsCollectionOptimizer.php
+++ b/src/Asset/JsCollectionOptimizer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flysystem\Asset;
 
+use Drupal\Core\File\FileSystem;
 use Drupal\Core\Asset\JsCollectionOptimizer as DrupalJsCollectionOptimizer;
 
 /**
@@ -16,7 +17,7 @@ class JsCollectionOptimizer extends DrupalJsCollectionOptimizer {
    */
   public function deleteAll() {
     $this->state->delete('system.js_cache_files');
-    /** @var \Drupal\Core\File\FileSystem $file_system */
+    /** @var FileSystem $file_system */
     $file_system = \Drupal::service('file_system');
     $delete_stale = static function ($uri) use ($file_system) {
       // Default stale file threshold is 30 days (2592000 seconds).
diff --git a/src/Event/EnsureEvent.php b/src/Event/EnsureEvent.php
index 304b9ba..82b66ae 100644
--- a/src/Event/EnsureEvent.php
+++ b/src/Event/EnsureEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\flysystem\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * The event fired for every result from an ensure() call.
diff --git a/src/EventSubscriber/EnsureSubscriber.php b/src/EventSubscriber/EnsureSubscriber.php
index 6cc07bd..4590532 100644
--- a/src/EventSubscriber/EnsureSubscriber.php
+++ b/src/EventSubscriber/EnsureSubscriber.php
@@ -17,7 +17,7 @@ class EnsureSubscriber implements EventSubscriberInterface {
   /**
    * The logger to use.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -35,7 +35,7 @@ class EnsureSubscriber implements EventSubscriberInterface {
   /**
    * Constructs an EnsureSubscriber object.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.
    */
   public function __construct(LoggerInterface $logger) {
diff --git a/src/Flysystem/Adapter/CacheItemBackend.php b/src/Flysystem/Adapter/CacheItemBackend.php
index b4e92a6..5bf5969 100644
--- a/src/Flysystem/Adapter/CacheItemBackend.php
+++ b/src/Flysystem/Adapter/CacheItemBackend.php
@@ -17,7 +17,7 @@ class CacheItemBackend {
   /**
    * The Drupal cache backend to store data in.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
@@ -31,7 +31,7 @@ class CacheItemBackend {
   /**
    * Constructs a new CacheItemBackend.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The Drupal cache backend to store items in.
    */
   public function __construct($scheme, CacheBackendInterface $cacheBackend) {
@@ -58,14 +58,14 @@ class CacheItemBackend {
    * @param string $path
    *   The path of the item to load.
    *
-   * @return \Drupal\flysystem\Flysystem\Adapter\CacheItem
+   * @return CacheItem
    *   The cache item, or a new cache item if one isn't in the cache.
    */
   public function load($path) {
     $key = $this->getCacheKey($path);
 
     if ($cached = $this->cacheBackend->get($key)) {
-      /** @var \Drupal\flysystem\Flysystem\Adapter\CacheItem $item */
+      /** @var CacheItem $item */
       $item = $cached->data;
     }
     else {
@@ -80,7 +80,7 @@ class CacheItemBackend {
    *
    * @param string $path
    *   The file path.
-   * @param \Drupal\flysystem\Flysystem\Adapter\CacheItem $item
+   * @param CacheItem $item
    *   The item to set.
    */
   public function set($path, CacheItem $item) {
diff --git a/src/Flysystem/Adapter/DrupalCacheAdapter.php b/src/Flysystem/Adapter/DrupalCacheAdapter.php
index 1abfe4e..57d8986 100644
--- a/src/Flysystem/Adapter/DrupalCacheAdapter.php
+++ b/src/Flysystem/Adapter/DrupalCacheAdapter.php
@@ -13,14 +13,14 @@ class DrupalCacheAdapter implements AdapterInterface {
   /**
    * The Flysystem adapter to cache data for.
    *
-   * @var \League\Flysystem\AdapterInterface
+   * @var AdapterInterface
    */
   protected $adapter;
 
   /**
    * The cache backend to store data in.
    *
-   * @var \Drupal\flysystem\Flysystem\Adapter\CacheItemBackend
+   * @var CacheItemBackend
    */
   protected $cacheItemBackend;
 
@@ -36,9 +36,9 @@ class DrupalCacheAdapter implements AdapterInterface {
    *
    * @param string $scheme
    *   The scheme of the stream wrapper used for this adapter.
-   * @param \League\Flysystem\AdapterInterface $adapter
+   * @param AdapterInterface $adapter
    *   The flysystem adapter to cache data for.
-   * @param \Drupal\flysystem\Flysystem\Adapter\CacheItemBackend $cacheItemBackend
+   * @param CacheItemBackend $cacheItemBackend
    *   The cache backend to store data in.
    */
   public function __construct($scheme, AdapterInterface $adapter, CacheItemBackend $cacheItemBackend) {
diff --git a/src/FlysystemBridge.php b/src/FlysystemBridge.php
index b21940c..0446b41 100644
--- a/src/FlysystemBridge.php
+++ b/src/FlysystemBridge.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flysystem;
 
+use League\Flysystem\FilesystemInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use League\Flysystem\Util;
@@ -93,7 +94,7 @@ class FlysystemBridge extends FlysystemStreamWrapper implements StreamWrapperInt
    * @param string $scheme
    *   The scheme.
    *
-   * @return \League\Flysystem\FilesystemInterface
+   * @return FilesystemInterface
    *   The filesystem for the scheme.
    */
   protected function getFilesystemForScheme($scheme) {
@@ -121,7 +122,7 @@ class FlysystemBridge extends FlysystemStreamWrapper implements StreamWrapperInt
   /**
    * Returns the filesystem factory.
    *
-   * @return \Drupal\flysystem\FlysystemFactory
+   * @return FlysystemFactory
    *   The Flysystem factory.
    */
   protected function getFactory() {
diff --git a/src/FlysystemFactory.php b/src/FlysystemFactory.php
index 41fb8c8..310dec8 100644
--- a/src/FlysystemFactory.php
+++ b/src/FlysystemFactory.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\flysystem;
 
+use League\Flysystem\FilesystemInterface;
+use Drupal\flysystem\Plugin\FlysystemPluginInterface;
+use League\Flysystem\AdapterInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ -39,35 +42,35 @@ class FlysystemFactory {
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * A cache of filesystems.
    *
-   * @var \League\Flysystem\FilesystemInterface[]
+   * @var FilesystemInterface[]
    */
   protected $filesystems = [];
 
   /**
    * The Flysystem plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;
 
   /**
    * Created plugins.
    *
-   * @var \Drupal\flysystem\Plugin\FlysystemPluginInterface[]
+   * @var FlysystemPluginInterface[]
    */
   protected $plugins = [];
 
@@ -81,13 +84,13 @@ class FlysystemFactory {
   /**
    * Constructs a FlysystemFactory object.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $plugin_manager
+   * @param PluginManagerInterface $plugin_manager
    *   The plugin manager.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(PluginManagerInterface $plugin_manager, StreamWrapperManagerInterface $stream_wrapper_manager, CacheBackendInterface $cache, EventDispatcherInterface $event_dispatcher) {
@@ -113,7 +116,7 @@ class FlysystemFactory {
    * @param string $scheme
    *   The scheme.
    *
-   * @return \League\Flysystem\FilesystemInterface
+   * @return FilesystemInterface
    *   The filesystem for the scheme.
    */
   public function getFilesystem($scheme) {
@@ -130,7 +133,7 @@ class FlysystemFactory {
    * @param string $scheme
    *   The scheme.
    *
-   * @return \Drupal\flysystem\Plugin\FlysystemPluginInterface
+   * @return FlysystemPluginInterface
    *   The plugin.
    */
   public function getPlugin($scheme) {
@@ -189,7 +192,7 @@ class FlysystemFactory {
           $error['context']
         );
 
-        $this->eventDispatcher->dispatch(FlysystemEvents::ENSURE, $event);
+        $this->eventDispatcher->dispatch($event, FlysystemEvents::ENSURE);
 
         $errors[$scheme][] = $error;
       }
@@ -204,7 +207,7 @@ class FlysystemFactory {
    * @param string $scheme
    *   The scheme to find an adapter for.
    *
-   * @return \League\Flysystem\AdapterInterface
+   * @return AdapterInterface
    *   The correct adapter from settings.
    */
   protected function getAdapter($scheme) {
diff --git a/src/FlysystemServiceProvider.php b/src/FlysystemServiceProvider.php
index ca881b2..bcfcf77 100644
--- a/src/FlysystemServiceProvider.php
+++ b/src/FlysystemServiceProvider.php
@@ -46,7 +46,7 @@ class FlysystemServiceProvider implements ServiceProviderInterface {
   /**
    * Swaps the js/css dumper if a scheme is configured to serve it.
    *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The container.
    * @param string $extension
    *   The file extension to swap.
diff --git a/src/Form/ConfigForm.php b/src/Form/ConfigForm.php
index 42755bf..76d549f 100644
--- a/src/Form/ConfigForm.php
+++ b/src/Form/ConfigForm.php
@@ -17,14 +17,14 @@ class ConfigForm extends FormBase {
   /**
    * The Flysystem factory.
    *
-   * @var \Drupal\flysystem\FlysystemFactory
+   * @var FlysystemFactory
    */
   protected $factory;
 
   /**
    * Constructs a ConfigForm object.
    *
-   * @param \Drupal\flysystem\FlysystemFactory $factory
+   * @param FlysystemFactory $factory
    *   The FlysystemF factory.
    */
   public function __construct(FlysystemFactory $factory) {
diff --git a/src/Plugin/FlysystemPluginInterface.php b/src/Plugin/FlysystemPluginInterface.php
index bc42f8f..3b65b67 100644
--- a/src/Plugin/FlysystemPluginInterface.php
+++ b/src/Plugin/FlysystemPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flysystem\Plugin;
 
+use League\Flysystem\AdapterInterface;
 interface FlysystemPluginInterface {
 
   /**
@@ -11,7 +12,7 @@ interface FlysystemPluginInterface {
    * perform filesystem operations, it should either use a scheme:// or have the
    * \Drupal\flysystem\FlysystemFactory injected.
    *
-   * @return \League\Flysystem\AdapterInterface
+   * @return AdapterInterface
    *   The Flysytem adapter.
    */
   public function getAdapter();
diff --git a/src/Plugin/FlysystemPluginManager.php b/src/Plugin/FlysystemPluginManager.php
index 19135a6..e21d71a 100644
--- a/src/Plugin/FlysystemPluginManager.php
+++ b/src/Plugin/FlysystemPluginManager.php
@@ -18,9 +18,9 @@ class FlysystemPluginManager extends DefaultPluginManager implements FallbackPlu
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Routing/FlysystemRoutes.php b/src/Routing/FlysystemRoutes.php
index 05d4f91..6e5d64a 100644
--- a/src/Routing/FlysystemRoutes.php
+++ b/src/Routing/FlysystemRoutes.php
@@ -18,32 +18,32 @@ class FlysystemRoutes implements ContainerInjectionInterface {
   /**
    * The Flysystem factory.
    *
-   * @var \Drupal\flysystem\FlysystemFactory
+   * @var FlysystemFactory
    */
   protected $factory;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * Constructs a new FlysystemRoutes object.
    *
-   * @param \Drupal\flysystem\FlysystemFactory $factory
+   * @param FlysystemFactory $factory
    *   The Flysystem factory.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(FlysystemFactory $factory, StreamWrapperManagerInterface $stream_wrapper_manager, ModuleHandlerInterface $module_handler) {
@@ -66,7 +66,7 @@ class FlysystemRoutes implements ContainerInjectionInterface {
   /**
    * Returns a list of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes() {
diff --git a/tests/src/Functional/ModuleInstallUninstallWebTest.php b/tests/src/Functional/ModuleInstallUninstallWebTest.php
index 0d3a488..9c1cd82 100644
--- a/tests/src/Functional/ModuleInstallUninstallWebTest.php
+++ b/tests/src/Functional/ModuleInstallUninstallWebTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Functional;
 
+use Drupal\Core\Extension\ModuleInstallerInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -28,7 +29,7 @@ class ModuleInstallUninstallWebTest extends BrowserTestBase {
     $module_handler = \Drupal::moduleHandler();
     $this->assertTrue($module_handler->moduleExists(reset(static::$modules)));
 
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = \Drupal::service('module_installer');
 
     $module_installer->uninstall(static::$modules);
diff --git a/tests/src/Kernel/CollectionOptimizerTest.php b/tests/src/Kernel/CollectionOptimizerTest.php
index a6dd6fc..b6aa0e7 100644
--- a/tests/src/Kernel/CollectionOptimizerTest.php
+++ b/tests/src/Kernel/CollectionOptimizerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Asset\AssetCollectionGrouperInterface;
 use Drupal\Core\Asset\CssOptimizer;
 use Drupal\Core\Asset\JsOptimizer;
@@ -20,10 +21,11 @@ use org\bovigo\vfs\vfsStream;
  */
 class CollectionOptimizerTest extends KernelTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->cleanUp();
   }
@@ -31,7 +33,7 @@ class CollectionOptimizerTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     $this->cleanUp();
     parent::tearDown();
   }
@@ -68,7 +70,7 @@ class CollectionOptimizerTest extends KernelTestBase {
 
     foreach ($this->jsFilesUnderTest() as $js_file => $expired) {
       if ($expired === TRUE) {
-        $this->assertFileNotExists($js_file);
+        $this->assertFileDoesNotExist($js_file);
         continue;
       }
       $this->assertFileExists($js_file);
@@ -108,7 +110,7 @@ class CollectionOptimizerTest extends KernelTestBase {
 
     foreach ($this->cssFilesUnderTest() as $css_file => $expired) {
       if ($expired === TRUE) {
-        $this->assertFileNotExists($css_file);
+        $this->assertFileDoesNotExist($css_file);
         continue;
       }
       $this->assertFileExists($css_file);
diff --git a/tests/src/Unit/EventSubscriber/EnsureSubscriberTest.php b/tests/src/Unit/EventSubscriber/EnsureSubscriberTest.php
index 156a003..35cf185 100644
--- a/tests/src/Unit/EventSubscriber/EnsureSubscriberTest.php
+++ b/tests/src/Unit/EventSubscriber/EnsureSubscriberTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Unit\EventSubscriber;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\flysystem\EventSubscriber\EnsureSubscriber;
 use Drupal\flysystem\Event\EnsureEvent;
@@ -17,6 +18,7 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
  */
 class EnsureSubscriberTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Tests that the event subscriber logs ensure() calls.
    */
diff --git a/tests/src/Unit/Flysystem/Adapter/CacheItemBackendTest.php b/tests/src/Unit/Flysystem/Adapter/CacheItemBackendTest.php
index dbf423d..ee57435 100644
--- a/tests/src/Unit/Flysystem/Adapter/CacheItemBackendTest.php
+++ b/tests/src/Unit/Flysystem/Adapter/CacheItemBackendTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Unit\Flysystem\Adapter;
 
+use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\MemoryBackend;
 use Drupal\Tests\UnitTestCase;
 use Drupal\flysystem\Flysystem\Adapter\CacheItem;
@@ -18,21 +19,21 @@ class CacheItemBackendTest extends UnitTestCase {
   /**
    * The cache backend used in the CacheItemBackend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
   /**
    * The cache item backend to test.
    *
-   * @var \Drupal\flysystem\Flysystem\Adapter\CacheItemBackend
+   * @var CacheItemBackend
    */
   protected $cacheItemBackend;
 
   /**
    * {@inheritdoc}
    */
-  public function setup() {
+  public function setup(): void {
     $this->cacheBackend = new MemoryBackend('foo');
     $this->cacheItemBackend = new CacheItemBackend('test-scheme', $this->cacheBackend);
   }
diff --git a/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php b/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php
index e655a5b..72eb6e5 100644
--- a/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php
+++ b/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\flysystem\Unit\Flysystem\Adapter;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Cache\MemoryBackend;
 use Drupal\Tests\UnitTestCase;
 use Drupal\flysystem\Flysystem\Adapter\CacheItemBackend;
@@ -32,32 +34,33 @@ class DrupalCacheAdapterTest extends UnitTestCase {
    * @var string
    */
   const FILE = 'test.txt';
+  use ProphecyTrait;
 
   /**
    * The wrapped Flysytem adaper.
    *
-   * @var \League\Flysystem\AdapterInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var AdapterInterface|MockObject
    */
   protected $adapter;
 
   /**
    * The cache adapter under test.
    *
-   * @var \Drupal\flysystem\Flysystem\Adapter\DrupalCacheAdapter
+   * @var DrupalCacheAdapter
    */
   protected $cacheAdapter;
 
   /**
    * The flysystem backend for testing.
    *
-   * @var \Drupal\flysystem\Flysystem\Adapter\CacheItemBackend
+   * @var CacheItemBackend
    */
   protected $cacheItemBackend;
 
   /**
    * {@inheritdoc}
    */
-  public function setup() {
+  public function setup(): void {
     $this->cacheItemBackend = new CacheItemBackend(static::SCHEME, new MemoryBackend('foo'));
     $this->adapter = $this->prophesize(AdapterInterface::class);
     $this->cacheAdapter = new DrupalCacheAdapter(static::SCHEME, $this->adapter->reveal(), $this->cacheItemBackend);
diff --git a/tests/src/Unit/Flysystem/FtpTest.php b/tests/src/Unit/Flysystem/FtpTest.php
index 0e657a7..2f28bf7 100644
--- a/tests/src/Unit/Flysystem/FtpTest.php
+++ b/tests/src/Unit/Flysystem/FtpTest.php
@@ -17,7 +17,7 @@ namespace Drupal\Tests\flysystem\Unit\Flysystem {
     /**
      * {@inheritdoc}
      */
-    public function setUp() {
+    public function setUp(): void {
       parent::setUp();
       if (!defined('FTP_BINARY')) {
         $this->markTestSkipped('The FTP_BINARY constant is not defined.');
diff --git a/tests/src/Unit/Flysystem/LocalTest.php b/tests/src/Unit/Flysystem/LocalTest.php
index fbc75fa..a603d5c 100644
--- a/tests/src/Unit/Flysystem/LocalTest.php
+++ b/tests/src/Unit/Flysystem/LocalTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\flysystem\Unit\Flysystem;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\Core\Routing\UrlGeneratorInterface;
@@ -18,10 +19,11 @@ use Prophecy\Argument;
  */
 class LocalTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $GLOBALS['base_url'] = 'http://example.com';
 
@@ -42,7 +44,7 @@ class LocalTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     (new LocalAdapter('foo'))->deleteDir('');
     @rmdir('foo');
 
diff --git a/tests/src/Unit/FlysystemBridgeTest.php b/tests/src/Unit/FlysystemBridgeTest.php
index ce3704e..3b634ad 100644
--- a/tests/src/Unit/FlysystemBridgeTest.php
+++ b/tests/src/Unit/FlysystemBridgeTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\flysystem\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use League\Flysystem\FilesystemInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\flysystem\FlysystemBridge;
@@ -17,20 +19,21 @@ use Symfony\Component\DependencyInjection\ContainerBuilder;
  */
 class FlysystemBridgeTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
-   * @var \Drupal\flysystem\FlysystemBridge
+   * @var FlysystemBridge
    */
   protected $bridge;
 
   /**
-   * @var \League\Flysystem\FilesystemInterface
+   * @var FilesystemInterface
    */
   protected $filesystem;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->bridge = new FlysystemBridge();
     $this->bridge->setStringTranslation($this->getStringTranslationStub());
