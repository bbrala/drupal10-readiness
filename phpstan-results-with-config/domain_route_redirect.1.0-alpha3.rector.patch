diff --git a/src/Controller/DomainRouteRedirectController.php b/src/Controller/DomainRouteRedirectController.php
index b6f883e..c5b0a49 100644
--- a/src/Controller/DomainRouteRedirectController.php
+++ b/src/Controller/DomainRouteRedirectController.php
@@ -13,7 +13,7 @@ class DomainRouteRedirectController extends ControllerBase {
   /**
    * Provides the domain route redirect submission form.
    *
-   * @param \Drupal\domain\DomainInterface $domain
+   * @param DomainInterface $domain
    *   An domain record entity.
    *
    * @return array
@@ -33,7 +33,7 @@ class DomainRouteRedirectController extends ControllerBase {
   /**
    * Provides the listing page for route redirects.
    *
-   * @param \Drupal\domain\DomainInterface $domain
+   * @param DomainInterface $domain
    *   An domain record entity.
    *
    * @return array
diff --git a/src/DomainRouteRedirectForm.php b/src/DomainRouteRedirectForm.php
index 0967355..1691cf6 100644
--- a/src/DomainRouteRedirectForm.php
+++ b/src/DomainRouteRedirectForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\domain_route_redirect;
 
+use Drupal\domain\DomainAccessControlHandler;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -19,66 +20,66 @@ class DomainRouteRedirectForm extends EntityForm {
   /**
    * The configuration factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
   /**
    * The domain entity access control handler.
    *
-   * @var \Drupal\domain\DomainAccessControlHandler
+   * @var DomainAccessControlHandler
    */
   protected $accessHandler;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The domain route redirect storage manager.
    *
-   * @var \Drupal\domain_route_redirect\DomainRouteRedirectStorageInterface
+   * @var DomainRouteRedirectStorageInterface
    */
   protected $redirectStorage;
 
   /**
    * The domain storage manager.
    *
-   * @var \Drupal\domain\DomainStorageInterface
+   * @var DomainStorageInterface
    */
   protected $domainStorage;
 
   /**
    * Drupal\Core\Logger\LoggerChannelInterface definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerChannelDomainRedirect;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * Constructs a DomainRouteRedirectForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The configuration factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\domain_route_redirect\DomainRouteRedirectStorageInterface $redirectStorage
+   * @param DomainRouteRedirectStorageInterface $redirectStorage
    *   The route redirect storage.
-   * @param \Drupal\domain\DomainStorageInterface $domain_storage
+   * @param DomainStorageInterface $domain_storage
    *   The domain storage manager.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger_channel
+   * @param LoggerChannelInterface $logger_channel
    *   The logger channel.
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger.
    */
   public function __construct(ConfigFactoryInterface $config, EntityTypeManagerInterface $entity_type_manager, DomainRouteRedirectStorageInterface $redirectStorage, DomainStorageInterface $domain_storage, LoggerChannelInterface $logger_channel, Messenger $messenger) {
@@ -110,7 +111,7 @@ class DomainRouteRedirectForm extends EntityForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\domain_route_redirect\DomainRouteRedirectInterface $redirect */
+    /** @var DomainRouteRedirectInterface $redirect */
     $redirect = $this->entity;
 
     $form['domain_id'] = [
@@ -203,7 +204,7 @@ class DomainRouteRedirectForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\domain_route_redirect\DomainRouteRedirectInterface $redirect */
+    /** @var DomainRouteRedirectInterface $redirect */
     $redirect = $this->entity;
     $edit_link = $redirect->toLink($this->t('Edit'), 'edit-form')->toString();
     if ($redirect->save() == SAVED_NEW) {
diff --git a/src/DomainRouteRedirectInterface.php b/src/DomainRouteRedirectInterface.php
index 27d1289..2c920ae 100644
--- a/src/DomainRouteRedirectInterface.php
+++ b/src/DomainRouteRedirectInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\domain_route_redirect;
 
+use Drupal\domain\Entity\Domain;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -28,7 +29,7 @@ interface DomainRouteRedirectInterface extends ConfigEntityInterface {
   /**
    * Get the parent domain entity for a route redirect record.
    *
-   * @return \Drupal\domain\Entity\Domain
+   * @return Domain
    *   The parent domain for the route redirect record or NULL if not set.
    */
   public function getDomain();
@@ -80,7 +81,7 @@ interface DomainRouteRedirectInterface extends ConfigEntityInterface {
   /**
    * Get the domain target.
    *
-   * @return \Drupal\domain\Entity\Domain
+   * @return Domain
    *   The domain target to which to redirect.
    */
   public function getDomainTarget();
diff --git a/src/DomainRouteRedirectListBuilder.php b/src/DomainRouteRedirectListBuilder.php
index 708e4cc..83ee5a3 100644
--- a/src/DomainRouteRedirectListBuilder.php
+++ b/src/DomainRouteRedirectListBuilder.php
@@ -15,7 +15,7 @@ class DomainRouteRedirectListBuilder extends DraggableListBuilder {
   /**
    * A domain object loaded from the controller.
    *
-   * @var \Drupal\domain\DomainInterface
+   * @var DomainInterface
    */
   protected $domain;
 
@@ -88,7 +88,7 @@ class DomainRouteRedirectListBuilder extends DraggableListBuilder {
   /**
    * Sets the domain context for this list.
    *
-   * @param \Drupal\domain\DomainInterface $domain
+   * @param DomainInterface $domain
    *   The domain to set as context for the list.
    */
   public function setDomain(DomainInterface $domain) {
@@ -98,7 +98,7 @@ class DomainRouteRedirectListBuilder extends DraggableListBuilder {
   /**
    * Gets the domain context for this list.
    *
-   * @return \Drupal\domain\DomainInterface
+   * @return DomainInterface
    *   The domain that is context for this list.
    */
   public function getDomainId() {
diff --git a/src/DomainRouteRedirectMatcherService.php b/src/DomainRouteRedirectMatcherService.php
index 098652c..365fdab 100644
--- a/src/DomainRouteRedirectMatcherService.php
+++ b/src/DomainRouteRedirectMatcherService.php
@@ -13,14 +13,14 @@ class DomainRouteRedirectMatcherService {
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\Core\Path\PathMatcherInterface definition.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
 
diff --git a/src/DomainRouteRedirectStorage.php b/src/DomainRouteRedirectStorage.php
index a53116c..8a7ee31 100644
--- a/src/DomainRouteRedirectStorage.php
+++ b/src/DomainRouteRedirectStorage.php
@@ -19,24 +19,24 @@ class DomainRouteRedirectStorage extends ConfigEntityStorage implements DomainRo
   /**
    * The typed config handler.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;
 
   /**
    * Constructs a DomainRouteRedirectStorage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_service
+   * @param UuidInterface $uuid_service
    *   The UUID service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config
+   * @param TypedConfigManagerInterface $typed_config
    *   The typed config handler.
    */
   public function __construct(EntityTypeInterface $entity_type, ConfigFactoryInterface $config_factory, UuidInterface $uuid_service, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache, TypedConfigManagerInterface $typed_config) {
diff --git a/src/DomainRouteRedirectStorageInterface.php b/src/DomainRouteRedirectStorageInterface.php
index 131c2b3..52655e3 100644
--- a/src/DomainRouteRedirectStorageInterface.php
+++ b/src/DomainRouteRedirectStorageInterface.php
@@ -21,7 +21,7 @@ interface DomainRouteRedirectStorageInterface extends ConfigEntityStorageInterfa
   /**
    * Loads a domain route redirect record by parent domain lookup.
    *
-   * @param \Drupal\domain\DomainInterface $domain
+   * @param DomainInterface $domain
    *   A domain entity.
    *
    * @return array
diff --git a/src/EventSubscriber/DomainRedirectSubscriber.php b/src/EventSubscriber/DomainRedirectSubscriber.php
index 5063252..e880361 100644
--- a/src/EventSubscriber/DomainRedirectSubscriber.php
+++ b/src/EventSubscriber/DomainRedirectSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\domain_route_redirect\EventSubscriber;
 
+use Drupal\Core\Access\AccessCheckInterface;
+use Symfony\Component\HttpKernel\Event\ControllerEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 use Drupal\domain\DomainNegotiatorInterface;
@@ -10,8 +12,6 @@ use Drupal\Core\Routing\CurrentRouteMatch;
 use Drupal\domain_route_redirect\DomainRouteRedirectMatcherService;
 
 use Symfony\Component\HttpKernel\KernelEvents;
-
-use Symfony\Component\HttpKernel\Event\FilterControllerEvent;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Symfony\Component\HttpFoundation\Response;
 
@@ -23,32 +23,32 @@ class DomainRedirectSubscriber implements EventSubscriberInterface {
   /**
    * The domain negotiator service.
    *
-   * @var \Drupal\domain\DomainNegotiatorInterface
+   * @var DomainNegotiatorInterface
    */
   protected $domainNegotiator;
 
   /**
    * The core access check service.
    *
-   * @var \Drupal\Core\Access\AccessCheckInterface
+   * @var AccessCheckInterface
    */
   protected $accessCheck;
 
   /**
    * The current route match.
    *
-   * @var Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;
 
   /**
    * Constructs a DomainSubscriber object.
    *
-   * @param \Drupal\domain\DomainNegotiatorInterface $negotiator
+   * @param DomainNegotiatorInterface $negotiator
    *   The domain negotiator service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route_match
+   * @param CurrentRouteMatch $current_route_match
    *   The current route match.
-   * @param Drupal\domain_route_redirect\DomainRouteRedirectMatcherService $matcher
+   * @param DomainRouteRedirectMatcherService $matcher
    *   The domain_route_redirect matcher service.
    */
   public function __construct(DomainNegotiatorInterface $negotiator, CurrentRouteMatch $current_route_match, DomainRouteRedirectMatcherService $matcher) {
@@ -71,10 +71,10 @@ class DomainRedirectSubscriber implements EventSubscriberInterface {
   /**
    * Decides whether to redirect depending on the identified route.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterControllerEvent $event
+   * @param ControllerEvent $event
    *   The Event to process.
    */
-  public function onKernelRouteDeterminedDomain(FilterControllerEvent $event) {
+  public function onKernelRouteDeterminedDomain(ControllerEvent $event) {
     if (!$event->isMasterRequest()) {
       return;
     }
diff --git a/src/HttpKernel/DomainRouteRedirectPathProcessor.php b/src/HttpKernel/DomainRouteRedirectPathProcessor.php
index f5de878..b7918ca 100644
--- a/src/HttpKernel/DomainRouteRedirectPathProcessor.php
+++ b/src/HttpKernel/DomainRouteRedirectPathProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\domain_route_redirect\HttpKernel;
 
+use Drupal\domain\DomainInterface;
 use Drupal\Core\PathProcessor\OutboundPathProcessorInterface;
 
 use Drupal\domain\DomainNegotiatorInterface;
@@ -21,7 +22,7 @@ class DomainRouteRedirectPathProcessor implements OutboundPathProcessorInterface
   /**
    * The Domain negotiator.
    *
-   * @var \Drupal\domain\DomainNegotiatorInterface
+   * @var DomainNegotiatorInterface
    */
   protected $negotiator;
 
@@ -35,25 +36,25 @@ class DomainRouteRedirectPathProcessor implements OutboundPathProcessorInterface
   /**
    * The domain_route_redirect matcher service.
    *
-   * @var \Drupal\domain_route_redirect\DomainRouteRedirectMatcherService
+   * @var DomainRouteRedirectMatcherService
    */
   protected $matcher;
 
   /**
    * The active domain request.
    *
-   * @var \Drupal\domain\DomainInterface
+   * @var DomainInterface
    */
   protected $activeDomain;
 
   /**
    * Constructs a DomainSourcePathProcessor object.
    *
-   * @param \Drupal\domain\DomainNegotiatorInterface $negotiator
+   * @param DomainNegotiatorInterface $negotiator
    *   The domain negotiator.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The path alias manager.
-   * @param Drupal\domain_route_redirect\DomainRouteRedirectMatcherService $matcher
+   * @param DomainRouteRedirectMatcherService $matcher
    *   The domain_route_redirect matcher service.
    */
   public function __construct(DomainNegotiatorInterface $negotiator, AliasManagerInterface $alias_manager, DomainRouteRedirectMatcherService $matcher) {
@@ -114,7 +115,7 @@ class DomainRouteRedirectPathProcessor implements OutboundPathProcessorInterface
   /**
    * Gets the active domain.
    *
-   * @return \Drupal\domain\DomainInterface
+   * @return DomainInterface
    *   The active domain.
    */
   public function getActiveDomain() {
