modules/contrib/badgr_badge/badgr_badge.install
modules/contrib/badgr_badge/badgr_badge.module
modules/contrib/badgr_badge/src/BadgrHelpers.php
modules/contrib/badgr_badge/src/BadgrService.php
modules/contrib/badgr_badge/src/BadgrServiceInterface.php
modules/contrib/badgr_badge/src/Controller/AddToBackpack.php
modules/contrib/badgr_badge/src/Form/BadgrConfigForm.php

6 files with changes
====================

1) modules/contrib/badgr_badge/src/Form/BadgrConfigForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The badgr service manager.
    *
-   * @var \Drupal\badgr_badge\BadgrServiceInterface
+   * @var BadgrServiceInterface
    */
   protected $badgrService;

@@ @@
   /**
    * Constructs a \Drupal\badgr_badge\Form object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\badgr_badge\BadgrServiceInterface $badgrService
+   * @param BadgrServiceInterface $badgrService
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, BadgrServiceInterface $badgrService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/badgr_badge/src/Controller/AddToBackpack.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\badgr_badge\BadgrServiceInterface definition.
    *
-   * @var \Drupal\badgr_badge\BadgrServiceInterface
+   * @var BadgrServiceInterface
    */
   protected $badgrService;

@@ @@
   /**
    * Constructs a \Drupal\badgr_badge\Form object.
    *
-   * @param \Drupal\badgr_badge\BadgrServiceInterface $badgrService
+   * @param BadgrServiceInterface $badgrService
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(BadgrServiceInterface $badgrService, AccountInterface $current_user) {
@@ @@
       }

       if (!$badge->get('field_badge_image')->isEmpty()) {
-        $badge_image = file_create_url($badge->field_badge_image->entity->getFileUri());
+        $badge_image = \Drupal::service('file_url_generator')->generateAbsoluteString($badge->field_badge_image->entity->getFileUri());
       }

       if (!$badge->get('field_badge_account')->isEmpty()) {
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/badgr_badge/src/BadgrServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\badgr_badge;

+use GuzzleHttp\Exception\GuzzleException;
 /**
  * Interface BadgrServiceInterface.
  */
@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   function badgr_list_all_issuer(string &$access_token, int $badgr_account_id);

@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   function badgr_list_all_existing_issuer(string &$access_token, int $badgr_account_id);

@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   function badgr_create_issuer_badges(string &$access_token, string $_post_details, string $entity_id, int $badgr_account_id);

@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   function badgr_list_all_badges(string &$access_token, int $badgr_account_id);

@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   function badgr_list_all_existing_badges(string &$access_token, int $badgr_account_id);

@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   function badgr_update_rud_badges(string $access_token, string $entity_id, string $method = NULL, array $_post_details = NULL, int $badgr_account_id);

@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   function badgr_award_badges(string &$access_token, string $_post_details, string $entity_id, int $badgr_account_id);

@@ @@
    * @param string $recipient
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   function badgr_get_award_badges(string &$access_token, int $badgr_account_id, string $entity_id, string $recipient);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/badgr_badge/src/BadgrService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\badgr_badge;

+use Drupal\Core\Session\AccountProxyInterface;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Core\Session\AccountInterface;
 use GuzzleHttp\Exception\RequestException;
 use Drupal\Component\Serialization\Json;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * An http client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * Constructs a new BadgrService object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *    An current user.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *    An HTTP client.
    */
   public function __construct(AccountInterface $currentUser, ClientInterface $http_client) {
@@ @@
    * @param array $_post_details
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function badgr_initiate(array $_post_details) {

@@ @@
    * @param string $refresh_token
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function badgr_refresh_token(string $refresh_token) {
     $_post_details = [
@@ @@
    * @param string $access_token
    *
    * @return boolean
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function badgr_user_authenticate(string $access_token) {
     $_headers = $this->badgr_set_header($access_token);
@@ @@
    * @param string $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function badgr_create_issuer(string $access_token, string $_post_details, string $badgr_account_id) {
     if (!$this->badgr_user_authenticate($access_token)) {
@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function badgr_update_rud_issuer(string $access_token, string $entity_id, string $method = NULL, array $_post_details = NULL, int $badgr_account_id) {
     if (!$this->badgr_user_authenticate($access_token)) {
@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function badgr_list_all_issuer(string &$access_token, int $badgr_account_id) {
     if (!$this->badgr_user_authenticate($access_token)) {
@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function badgr_list_all_existing_issuer(string &$access_token, int $badgr_account_id) {
     $issuer_data = [];
@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function badgr_create_issuer_badges(string &$access_token, string $_post_details, string $entity_id, int $badgr_account_id) {
     if (!$this->badgr_user_authenticate($access_token)) {
@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function badgr_list_all_badges(string &$access_token, int $badgr_account_id) {
     if (!$this->badgr_user_authenticate($access_token)) {
@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function badgr_list_all_existing_badges(string &$access_token, int $badgr_account_id) {
     $badges_options = [];
@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function badgr_update_rud_badges(string $access_token, string $entity_id, string $method = NULL, array $_post_details = NULL, int $badgr_account_id) {
     if (!$this->badgr_user_authenticate($access_token)) {
@@ @@
    * @param int $badgr_account_id
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function badgr_award_badges(string &$access_token, string $_post_details, string $entity_id, int $badgr_account_id) {
     if (!$this->badgr_user_authenticate($access_token)) {
@@ @@
    * @param string $recipient
    *
    * @return mixed
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function badgr_get_award_badges(string &$access_token, int $badgr_account_id, string $entity_id, string $recipient) {
     if (!$this->badgr_user_authenticate($access_token)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/badgr_badge/src/BadgrHelpers.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a BadgrHelpers object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
             if (!empty($value_badges['image'])) {
               $image_file_name = pathinfo($value_badges['image']);
               $image = file_get_contents($value_badges['image']);
-              $file = file_save_data($image, 'public://' . $image_file_name['basename'], FileSystemInterface::EXISTS_RENAME);
-              $file = file_copy($file, 'public://');
+              $file = \Drupal::service('file.repository')->writeData($image, 'public://' . $image_file_name['basename'], FileSystemInterface::EXISTS_RENAME);
+              $file = \Drupal::service('file.repository')->copy($file, 'public://');
               $issuer_content->set('field_badge_image',['target_id' => $file->id()]);
             }
             $issuer_content->save();
@@ @@
             if (!empty($value_badges['image'])) {
               $image_file_name = pathinfo($value_badges['image']);
               $image = file_get_contents($value_badges['image']);
-              $file = file_save_data($image, 'public://' . $image_file_name['basename'], FileSystemInterface::EXISTS_RENAME);
+              $file = \Drupal::service('file.repository')->writeData($image, 'public://' . $image_file_name['basename'], FileSystemInterface::EXISTS_RENAME);
               if (!empty($file) && !empty($file->id())) {
                 $file->setPermanent();
                 $file->save();
@@ @@
           if (!empty($value_issuer['image'])) {
             $image_file_name = pathinfo($value_issuer['image']);
             $image = file_get_contents($value_issuer['image']);
-            $file = file_save_data($image, 'public://' . $image_file_name['basename']);
+            $file = \Drupal::service('file.repository')->writeData($image, 'public://' . $image_file_name['basename']);
             if (!empty($file) && !empty($file->id())) {
             $file->setPermanent();
             $file->save();
@@ @@
         if (!empty($value_issuer['image'])) {
           $image_file_name = pathinfo($value_issuer['image']);
           $image = file_get_contents($value_issuer['image']);
-          $file = file_save_data($image, 'public://' . $image_file_name['basename'], FileSystemInterface::EXISTS_RENAME);
+          $file = \Drupal::service('file.repository')->writeData($image, 'public://' . $image_file_name['basename'], FileSystemInterface::EXISTS_RENAME);
           if (!empty($file) && !empty($file->id())) {
             $file->setPermanent();
             $file->save();
    ----------- end diff -----------

Applied rules:
 * FileCopyRector
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/badgr_badge/badgr_badge.install:11

    ---------- begin diff ----------
@@ @@
   $result = \Drupal::entityQuery('node')
       ->condition('type', ['badgr_account','badgr_issuer','badgr_badges'], 'IN')
       ->execute();
-  entity_delete_multiple('node', $result);
+  \Drupal::service('entity_type.manager')->getStorage('node')->delete(\Drupal::service('entity_type.manager')->getStorage('node')->loadMultiple($result));
   $configFactory = \Drupal::configFactory();
   $configNames = [
     'field.field.node.badgr_account.field_badgr_access_token',
    ----------- end diff -----------

Applied rules:
 * EntityDeleteMultipleRector
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

