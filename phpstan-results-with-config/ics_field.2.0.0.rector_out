modules/contrib/ics_field/ics_field.module
modules/contrib/ics_field/src/CalendarProperty/CalendarPropertyProcessor.php
modules/contrib/ics_field/src/CalendarProperty/CalendarPropertyProcessorFactory.php
modules/contrib/ics_field/src/Exception/CalendarDownloadInvalidParametersException.php
modules/contrib/ics_field/src/Exception/CalendarDownloadInvalidPropertiesException.php
modules/contrib/ics_field/src/Exception/IcalTimezoneInvalidTimestampException.php
modules/contrib/ics_field/src/ICalFactory.php
modules/contrib/ics_field/src/ICalTimezoneGenerator.php
modules/contrib/ics_field/src/IcsFileManager.php
modules/contrib/ics_field/src/Normalizer/UrlNormalizer.php
modules/contrib/ics_field/src/Normalizer/UrlNormalizerInterface.php
modules/contrib/ics_field/src/Plugin/Field/FieldFormatter/CalendarDownloadDefaultFormatter.php
modules/contrib/ics_field/src/Plugin/Field/FieldType/CalendarDownloadType.php
modules/contrib/ics_field/src/Plugin/Field/FieldWidget/CalendarDownloadDefaultWidget.php
modules/contrib/ics_field/src/Timezone/DrupalUserTimezoneProvider.php
modules/contrib/ics_field/src/Timezone/TimezoneProviderInterface.php
modules/contrib/ics_field/tests/src/Functional/CalendarDownloadNodeFormTest.php
modules/contrib/ics_field/tests/src/Unit/CalendarProperty/CalendarPropertyProcessorFactoryTest.php
modules/contrib/ics_field/tests/src/Unit/CalendarProperty/CalendarPropertyProcessorTest.php
modules/contrib/ics_field/tests/src/Unit/ICalFactoryTest.php
modules/contrib/ics_field/tests/src/Unit/ICalTimezoneGeneratorTest.php
modules/contrib/ics_field/tests/src/Unit/Normalizer/UrlNormalizerTest.php

12 files with changes
=====================

1) modules/contrib/ics_field/tests/src/Unit/ICalFactoryTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ics_field\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\ics_field\ICalFactory;
 use Drupal\ics_field\Normalizer\UrlNormalizer;
 use Drupal\Tests\UnitTestCase;
@@ @@
   /**
    * A data provider.
    *
-   * @return \PHPUnit_Framework_MockObject_MockObject[]
+   * @return MockObject[]
    *   The mock object for Symfony\Component\HttpFoundation\Request.
    */
   public function schemeHttpHostProvider() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ics_field/tests/src/Unit/CalendarProperty/CalendarPropertyProcessorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ics_field\Unit\CalendarProperty;

+use Drupal\Core\Entity\ContentEntityInterface;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\ics_field\CalendarProperty\CalendarPropertyProcessor;
 use Drupal\ics_field\Exception\CalendarDownloadInvalidPropertiesException;
 use Drupal\Tests\UnitTestCase;
@@ @@
 class CalendarPropertyProcessorTest extends UnitTestCase {

   /**
-   * @var \Drupal\ics_field\CalendarProperty\CalendarPropertyProcessor
+   * @var CalendarPropertyProcessor
    */
   protected $cpp;

   /**
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $ce;

@@ @@
   }

   /**
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return MockObject
    */
   private function getTokenMock() {
-    $token = $this->getMockBuilder('Drupal\Core\Utility\Token')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $token = $this->createMock('Drupal\Core\Utility\Token');
     $token->expects($this->any())
       ->method('replace')
       ->will($this->returnArgument(0));
@@ @@
    * Get TimezoneProviderInterface mock.
    */
   private function getTzpMock() {
-    $tzp = $this->getMockBuilder('Drupal\ics_field\Timezone\TimezoneProviderInterface')
-      ->getMock();
+    $tzp = $this->createMock('Drupal\ics_field\Timezone\TimezoneProviderInterface');
     $tzp->expects($this->any())
       ->method('getTimezoneString')
       ->will($this->returnValue('Europe/Zurich'));
@@ @@
   }

   /**
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return MockObject
    */
   private function getTranslationManagerMock() {

-    $tr = $this->getMockBuilder('Drupal\Core\StringTranslation\TranslationManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $tr = $this->createMock('Drupal\Core\StringTranslation\TranslationManager');
     $tr->expects($this->any())
       ->method('translate')
       ->will($this->returnArgument(0));
@@ @@
   }

   /**
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return MockObject
    */
   private function getContentEntityMock() {

-    $ce = $this->getMockBuilder('Drupal\Core\Entity\ContentEntityInterface')
-      ->getMock();
+    $ce = $this->createMock('Drupal\Core\Entity\ContentEntityInterface');
     $ce->expects($this->any())
       ->method('uuid')
       ->will($this->returnValue('i_am_the_uuid'));
@@ @@
       ->will($this->returnValue('node'));

     // Method get needs to return some mocks.
-    $il = $this->getMockBuilder('Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $il = $this->createMock('Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList');
     // Returning a value that is not a instanceof DrupalDateTime will result in the datetime being skipped
     // this is enough to get our tests working here.
     $il->expects($this->any())
@@ @@
   }

   /**
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return MockObject
    */
   private function getContentEntityWithDateTimeMock($datetimeString = '2020-11-17T00:00:00') {

-    $ce = $this->getMockBuilder('Drupal\Core\Entity\ContentEntityInterface')
-      ->getMock();
+    $ce = $this->createMock('Drupal\Core\Entity\ContentEntityInterface');
     $ce->expects($this->any())
       ->method('uuid')
       ->will($this->returnValue('i_am_the_uuid'));
@@ @@
       ->will($this->returnValue('node'));

     // Method get needs to return some mocks.
-    $il = $this->getMockBuilder('Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $il = $this->createMock('Drupal\datetime\Plugin\Field\FieldType\DateTimeFieldItemList');

-    $dt = $this->getMockBuilder('Drupal\Core\Datetime\DrupalDateTime')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dt = $this->createMock('Drupal\Core\Datetime\DrupalDateTime');
     $dt->expects($this->any())
       ->method('render')
       ->will($this->returnValue($datetimeString));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ics_field/tests/src/Unit/CalendarProperty/CalendarPropertyProcessorFactoryTest.php:16

    ---------- begin diff ----------
@@ @@
    */
   public function testInstantiation() {

-    $tpi = $this->getMockBuilder('Drupal\ics_field\Timezone\TimezoneProviderInterface')
-      ->getMock();
-    $t = $this->getMockBuilder('Drupal\Core\Utility\Token')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $tpi = $this->createMock('Drupal\ics_field\Timezone\TimezoneProviderInterface');
+    $t = $this->createMock('Drupal\Core\Utility\Token');
     $f = new CalendarPropertyProcessorFactory($tpi, $t);

     $this->assertInstanceOf('Drupal\ics_field\CalendarProperty\CalendarPropertyProcessorFactory',
@@ @@
    */
   public function testGeneration() {

-    $tpi = $this->getMockBuilder('Drupal\ics_field\Timezone\TimezoneProviderInterface')
-      ->getMock();
-    $t = $this->getMockBuilder('Drupal\Core\Utility\Token')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $tpi = $this->createMock('Drupal\ics_field\Timezone\TimezoneProviderInterface');
+    $t = $this->createMock('Drupal\Core\Utility\Token');
     $f = new CalendarPropertyProcessorFactory($tpi, $t);

-    $fdi = $this->getMockBuilder('Drupal\Core\Field\FieldDefinitionInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fdi = $this->createMock('Drupal\Core\Field\FieldDefinitionInterface');
     $fdi->expects($this->once())
       ->method('getSetting')
       ->will($this->returnValue('I am the reference'));

-    $fci = $this->getMockBuilder('Drupal\Core\Field\FieldConfigInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fci = $this->createMock('Drupal\Core\Field\FieldConfigInterface');
     $fci->expects($this->once())
       ->method('uuid')
       ->will($this->returnValue('i am the uuid'));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ics_field/tests/src/Functional/CalendarDownloadNodeFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\ics_field\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Config\Schema\SchemaIncompleteException;
 use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
 use Drupal\node\Entity\NodeType;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The admin user used in the tests.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;

@@ @@
   /**
    * A node created for testing.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $testNode;

@@ @@

   /**
    * {@inheritdoc}
-   *
-   * @expectedException \Drupal\Core\Config\Schema\SchemaIncompleteException
    */
   public function setUp(): void {
+    $this->expectException(SchemaIncompleteException::class);
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([], NULL, 1);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ics_field/src/Plugin/Field/FieldWidget/CalendarDownloadDefaultWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ics_field\Plugin\Field\FieldWidget;

+use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
+use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The entity_field.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $tokenService;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException
+   * @throws ServiceCircularReferenceException
+   * @throws ServiceNotFoundException
    */
   public static function create(ContainerInterface $container,
                                 array $configuration,
@@ @@
   }

   /**
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *
    * @return bool
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/ics_field/src/Plugin/Field/FieldType/CalendarDownloadType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ics_field\Plugin\Field\FieldType;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $tokenService;

@@ @@
   /**
    * The file.usage service.
    *
-   * @var \Drupal\file\FileUsage\FileUsageInterface
+   * @var FileUsageInterface
    */
   protected $fileUsageService;

@@ @@
   /**
    * The ics_field.file_manager service.
    *
-   * @var \Drupal\ics_field\IcsFileManager
+   * @var IcsFileManager
    */
   protected $icsFileManager;

@@ @@
   /**
    * The filesystem service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $filesystem;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public static function schema(FieldStorageDefinitionInterface $fieldDefinition) {
     $targetTypeInfo = \Drupal::entityTypeManager()->getDefinition('file');
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    * @throws \InvalidArgumentException
    */
   public function isEmpty() {
@@ @@
    *
    * @param array $element
    *   The field element.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The form state of the form the field element is part of.
    */
   public function checkWriteableDirectory(array $element,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/ics_field/src/Plugin/Field/FieldFormatter/CalendarDownloadDefaultFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ics_field\Plugin\Field\FieldFormatter;

+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    * @throws \InvalidArgumentException
    */
   public function viewElements(FieldItemListInterface $items, $langcode) {
@@ @@
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return mixed[]|null
    *
    * @throws \InvalidArgumentException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    *   A render array for a link element.
    */
   protected function viewValue(FieldItemInterface $item) {
@@ @@
     $fileRef = $item->get('fileref')->getValue();
     $file = File::load($fileRef);//TODO - once formatter classes get container access replace with DI
     if ($file) {
-      $fileUrlObj = Url::fromUri(file_create_url($file->getFileUri()));
+      $fileUrlObj = \Drupal::service('file_url_generator')->generate($file->getFileUri());
       $build = [
         '#type'  => 'link',
         '#title' => $this->t('iCal Download'),
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/ics_field/src/IcsFileManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ics_field;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
   /**
    * The logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The entity_field.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The file.usage service.
    *
-   * @var \Drupal\file\FileUsage\FileUsageInterface
+   * @var FileUsageInterface
    */
   protected $fileUsageService;

@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $tokenService;

@@ @@
   /**
    * The calendar properties processor factory.
    *
-   * @var \Drupal\ics_field\CalendarProperty\CalendarPropertyProcessorFactory
+   * @var CalendarPropertyProcessorFactory
    */
   protected $calendarPropertyProcessorFactory;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The filesystem service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $filesystem;

@@ @@
   /**
    * Updates a node's ics file(s).
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $contentEntity
+   * @param ContentEntityBase $contentEntity
    *   Incoming content entity.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldConfig
+   * @param FieldDefinitionInterface $fieldConfig
    *   Field configuration.
    * @param array $fieldValue
    *   Incoming content entity.
@@ @@
    * can't save a file during post-save so we'll create an empty file during
    * pre-save and update it with the actual content later during post-save.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $contentEntity
+   * @param ContentEntityBase $contentEntity
    *   Incoming content entity.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldConfig
+   * @param FieldDefinitionInterface $fieldConfig
    *   Field configuration.
    * @param array $fieldValue
    *   Field value.
@@ @@
   /**
    * Create/Update managed ical file.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $contentEntity
+   * @param ContentEntityBase $contentEntity
    *   Incoming content entity.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldConfig
+   * @param FieldDefinitionInterface $fieldConfig
    *   Field configuration.
    * @param string $icsFileStr
    *   The ics file as a string.
@@ @@

     $file = File::load($fileId);
     $fileUri = $file->getFileUri();
-    if (!file_save_data($icsFileStr, $fileUri, FileSystemInterface::EXISTS_REPLACE)) {
+    if (!\Drupal::service('file.repository')->writeData($icsFileStr, $fileUri, FileSystemInterface::EXISTS_REPLACE)) {
       $this->handleFileSaveError($fileUri);
     }
     // Always return the file id, so that it retains the reference to the
@@ @@
   /**
    * Creates a new managed file.
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $contentEntity
+   * @param ContentEntityBase $contentEntity
    *   Incoming content entity.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldConfig
+   * @param FieldDefinitionInterface $fieldConfig
    *   Field configuration.
    * @param string $icsFileStr
    *   The ics file as a string.
@@ @@
                         ->uuid()) .
                   '_event.ics';
       $fileUri = $uploadLocation . '/' . $fileName;
-      $file = file_save_data($icsFileStr,
-                             $fileUri,
-                             FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($icsFileStr, $fileUri, FileSystemInterface::EXISTS_REPLACE);
       if ($file) {
         return $file->id();
       }
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/ics_field/src/ICalTimezoneGenerator.php:39

    ---------- begin diff ----------
@@ @@
    *   depending on the user's timezone.
    * @param array    $dateList
    *
-   * @return \Eluceo\iCal\Component\Timezone The modified timezone object.
+   * @return Timezone The modified timezone object.
    */
   public function applyTimezoneTransitions(Timezone $iCalendarTimezone,
                                            array $dateList) {
@@ @@
    * @param array $datesList
    *
    * @return \DateTime[]
-   * @throws \Drupal\ics_field\Exception\IcalTimezoneInvalidTimestampException
+   * @throws IcalTimezoneInvalidTimestampException
    */
   public function getMinMaxTimestamps(array $datesList) {

@@ @@
    * @param bool          $daylightSavings
    * @param int           $timezoneOffsetFrom
    *
-   * @return \Eluceo\iCal\Component\TimezoneRule
+   * @return TimezoneRule
    *
    * @throws \InvalidArgumentException
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/ics_field/src/ICalFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ics_field;

+use Drupal\ics_field\Exception\IcalTimezoneInvalidTimestampException;
 use Drupal\ics_field\Normalizer\UrlNormalizerInterface;
 use Eluceo\iCal\Component\Calendar;
 use Eluceo\iCal\Component\Event;
@@ @@
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   protected $userDatetimezone;

   /**
-   * @var \Drupal\ics_field\Normalizer\UrlNormalizerInterface
+   * @var UrlNormalizerInterface
    */
   protected $urlNormalizer;

@@ @@
   /**
    * Constructs a new CalendarDownloadUtil.
    *
-   * @param \Drupal\ics_field\Normalizer\UrlNormalizerInterface $normalizer
+   * @param UrlNormalizerInterface $normalizer
    *
    * @internal param \string[] $calendarProperties An array of calendar
    *           properties.*   An array of calendar properties.
@@ @@
    *
    * @return string The generated ical file as a string.
    *
-   * @throws \Drupal\ics_field\Exception\IcalTimezoneInvalidTimestampException
+   * @throws IcalTimezoneInvalidTimestampException
    * @throws \InvalidArgumentException
    * @throws \UnexpectedValueException
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/ics_field/src/CalendarProperty/CalendarPropertyProcessorFactory.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * CalendarPropertyProcessorFactory constructor.
    *
-   * @param \Drupal\ics_field\Timezone\TimezoneProviderInterface $timezoneProvider
-   * @param \Drupal\Core\Utility\Token                                      $token
+   * @param TimezoneProviderInterface $timezoneProvider
+   * @param Token $token
    */
   public function __construct(TimezoneProviderInterface $timezoneProvider,
                               Token $token) {
@@ @@
   }

   /**
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *
-   * @return \Drupal\ics_field\CalendarProperty\CalendarPropertyProcessor
+   * @return CalendarPropertyProcessor
    */
   public function create(FieldDefinitionInterface $fieldDefinition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/ics_field/src/CalendarProperty/CalendarPropertyProcessor.php:18

    ---------- begin diff ----------
@@ @@
   use DependencySerializationTrait;

   /**
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $tokenService;

@@ @@
   protected $dateFieldUuid;

   /**
-   * @var \Drupal\ics_field\Timezone\TimezoneProviderInterface
+   * @var TimezoneProviderInterface
    */
   protected $timezoneProvider;

@@ @@
   /**
    * CalendarPropertyProcessor constructor.
    *
-   * @param \Drupal\Core\Utility\Token $tokenService
+   * @param Token $tokenService
    * @param TimezoneProviderInterface  $timezoneProvider
    * @param string                     $dateFieldReference
    * @param string                     $dateFieldUuid
@@ @@

   /**
    * @param array                                      $tokens
-   * @param \Drupal\Core\Entity\ContentEntityInterface $contentEntity
+   * @param ContentEntityInterface $contentEntity
    * @param string                                     $host
    *
    * @return array
@@ @@

   /**
    * @return array
-   * @throws \Drupal\ics_field\Exception\CalendarDownloadInvalidPropertiesException
+   * @throws CalendarDownloadInvalidPropertiesException
    * @throws \InvalidArgumentException
    */
   private function processDateList(ContentEntityInterface $contentEntity) {
@@ @@
    *
    * @return bool
    *
-   * @throws \Drupal\ics_field\Exception\CalendarDownloadInvalidPropertiesException
+   * @throws CalendarDownloadInvalidPropertiesException
    *   True if the check was successful, otherwise false.
    *
    * @throws CalendarDownloadInvalidPropertiesException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 12 files have been changed by Rector                                      

