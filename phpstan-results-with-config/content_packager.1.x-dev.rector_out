modules/contrib/content_packager/content_packager.install
modules/contrib/content_packager/content_packager.module
modules/contrib/content_packager/src/Annotation/PackageSource.php
modules/contrib/content_packager/src/BatchOperations.php
modules/contrib/content_packager/src/EntityProcessor.php
modules/contrib/content_packager/src/FieldProcessor.php
modules/contrib/content_packager/src/Form/ContentPackagerAdmin.php
modules/contrib/content_packager/src/Form/CreatePackage.php
modules/contrib/content_packager/src/JsonApiHelper.php
modules/contrib/content_packager/src/Plugin/PackageSourceBase.php
modules/contrib/content_packager/src/Plugin/PackageSourceInterface.php
modules/contrib/content_packager/src/Plugin/SourcePluginManager.php
modules/contrib/content_packager/src/Plugin/source/JsonApiPackageSource.php
modules/contrib/content_packager/src/Plugin/source/RestPackageSource.php
modules/contrib/content_packager/src/PluginForm/JsonApiSourceConfig.php
modules/contrib/content_packager/src/PluginForm/JsonApiSourcePackage.php
modules/contrib/content_packager/src/PluginForm/RestSourcePackage.php
modules/contrib/content_packager/tests/src/Functional/ContentPackagerDirectoryTest.php

15 files with changes
=====================

1) modules/contrib/content_packager/tests/src/Functional/ContentPackagerDirectoryTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\content_packager\Functional;

+use Drupal\user\UserInterface;
+use Drupal\file\FileInterface;
 use Drupal\content_packager\BatchOperations;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\image\Kernel\ImageFieldCreationTrait;
@@ @@
   /**
    * An user with administration permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser([
       'access administration pages',
@@ @@
   /**
    * Retrieves a sample file of the specified type.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   A test File object with filesize added.
    */
   public function getTestFile($type_name, $size = NULL) {
@@ @@
     $this->drupalGet('admin/config/content/content_packager');
     $this->assertSession()->statusCodeEquals(200);

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'package_scheme' => 'public://',
       'package_destination' => 'test_folder',
     ], t('Save configuration'));
@@ @@
     $this->drupalGet('admin/config/content/content_packager');
     $this->assertSession()->statusCodeEquals(200);

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'package_scheme' => 'public://',
       'package_destination' => 'test_folder',
     ], t('Save configuration'));
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/content_packager/src/PluginForm/RestSourcePackage.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * RestSourcePackage constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Sets the config factory for this form.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/content_packager/src/PluginForm/JsonApiSourcePackage.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * JsonApiSourcePackage constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Sets the config factory for this form.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/content_packager/src/PluginForm/JsonApiSourceConfig.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * JsonApiSourcePackage constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Sets the config factory for this form.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/content_packager/src/Plugin/SourcePluginManager.php:21

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   Cache backend instance to use.
    */
   public function __construct(\Traversable $namespaces, ModuleHandlerInterface $module_handler, CacheBackendInterface $cacheBackend) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/content_packager/src/Plugin/PackageSourceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_packager\Plugin;

+use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\PluginWithFormsInterface;

@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state for entire "Create package" form.
    *
-   * @return \Drupal\Core\Plugin\PluginFormInterface
+   * @return PluginFormInterface
    *   The "create package" plugin form for the source.
    */
   public function getPackageForm(array $form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $form
    *   The "Configure Package" form specific to this data source.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state for entire "Create package" form.
    *
-   * @return \Drupal\Core\Plugin\PluginFormInterface
+   * @return PluginFormInterface
    *   The configure plugin form for the source.
    */
   public function getConfigureForm(array $form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $form
    *   The configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state for entire "Create package" form.
    */
   public function submitConfigureForm(array $form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/content_packager/src/Plugin/PackageSourceBase.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin form factory service.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   private $pluginFormFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $plugin_form_factory
+   * @param PluginFormFactoryInterface $plugin_form_factory
    *   Plugin form factory to discover and instantiate plugin forms.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PluginFormFactoryInterface $plugin_form_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/content_packager/src/JsonApiHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_packager;

+use Symfony\Component\HttpKernel\HttpKernel;
+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Component\Serialization\Json;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
@@ @@
    *   An array of individual parsed JSON:API results converted into PHP data.
    */
   public static function retrievePagesFromUri($uri) {
-    /** @var \Symfony\Component\HttpKernel\HttpKernel $http_kernel */
+    /** @var HttpKernel $http_kernel */
     $http_kernel = \Drupal::service('http_kernel.basic');
-    /** @var \Symfony\Component\HttpFoundation\RequestStack $request_stack */
+    /** @var RequestStack $request_stack */
     $request_stack = \Drupal::service('request_stack');

     $content = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/content_packager/src/Form/CreatePackage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_packager\Form;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\content_packager\Plugin\SourcePluginManager;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private $fileSystem;

@@ @@
   /**
    * The source plugin manager.
    *
-   * @var \Drupal\content_packager\Plugin\SourcePluginManager
+   * @var SourcePluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * Constructs a \Drupal\content_packager\Form\CreatePackage object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\content_packager\Plugin\SourcePluginManager $plugin_manager
+   * @param SourcePluginManager $plugin_manager
    *   The Content Packager source plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManager $typeManager
+   * @param EntityTypeManager $typeManager
    *   The Entity Type manager.
-   * @param \Drupal\Core\File\FileSystem $fileSystem
+   * @param FileSystem $fileSystem
    *   The file system helpers.
    */
   public function __construct(ConfigFactoryInterface $config_factory, SourcePluginManager $plugin_manager, EntityTypeManager $typeManager, FileSystem $fileSystem) {
@@ @@
       return;
     }

-    $url = file_create_url($full_package_uri);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($full_package_uri);

     $form['existing_file'] = [
       '#type' => 'details',
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function zip(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/content_packager/src/Form/ContentPackagerAdmin.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The source plugin manager.
    *
-   * @var \Drupal\content_packager\Plugin\SourcePluginManager
+   * @var SourcePluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * Constructs a ContentPackagerAdmin object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\File\FileSystem $file_system
+   * @param FileSystem $file_system
    *   The file system service.
-   * @param \Drupal\Core\Path\PathValidator $validator
+   * @param PathValidator $validator
    *   The path validator service.
-   * @param \Drupal\content_packager\Plugin\SourcePluginManager $plugin_manager
+   * @param SourcePluginManager $plugin_manager
    *   The Content Packager source plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, FileSystem $file_system, PathValidator $validator, SourcePluginManager $plugin_manager) {
@@ @@
       '#default_value' => $config->get('include_orig_image'),
     ];

-    /** @var \Drupal\image\Entity\ImageStyle $style */
+    /** @var ImageStyle $style */
     foreach ($styles as $style) {
       $style_id = $style->getName();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/content_packager/src/FieldProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_packager;

+use Drupal\file\Plugin\Field\FieldType\FileItem;
+use Drupal\image\Plugin\Field\FieldType\ImageItem;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemList;
 use Drupal\file\Entity\File;
 use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;
@@ @@
   /**
    * Convert file field items into file URIs to be packaged.
    *
-   * @param \Drupal\file\Plugin\Field\FieldType\FileFieldItemList $fieldItemList
+   * @param FileFieldItemList $fieldItemList
    *   File field items to turn into URLs.
    *
    * @return array
@@ @@
   public static function processFileField(FileFieldItemList $fieldItemList) {
     $uris = [];

-    /** @var \Drupal\file\Plugin\Field\FieldType\FileItem $item */
+    /** @var FileItem $item */
     foreach ($fieldItemList as $item) {
       $value = $item->getValue();
       $file = File::load($value['target_id']);
@@ @@
   /**
    * Convert image field items into file URIs to be packaged.
    *
-   * @param \Drupal\file\Plugin\Field\FieldType\FileFieldItemList $fieldItemList
+   * @param FileFieldItemList $fieldItemList
    *   File field items to turn into URLs.
    * @param array $options
    *   Options, used to refine/filter behavior during packaging.
@@ @@
     $styles_to_pack = $options['image_styles'];
     $include_original = \Drupal::config('content_packager.settings')->get('include_orig_image');

-    /** @var \Drupal\image\Plugin\Field\FieldType\ImageItem $item */
+    /** @var ImageItem $item */
     foreach ($fieldItemList as $item) {
       $value = $item->getValue();

@@ @@

       $styles = ImageStyle::loadMultiple($styles_to_pack);

-      /** @var \Drupal\image\Entity\ImageStyle $style */
+      /** @var ImageStyle $style */
       foreach ($styles as $style) {
         $style_uri = self::generateImageStyle($primary_uri, $style);
         if ($style_uri) {
@@ @@
    *
    * @param string $image_uri
    *   The image URI.
-   * @param \Drupal\image\Entity\ImageStyle $style
+   * @param ImageStyle $style
    *   The style we want to derive for $image_uri.
    *
    * @return bool|string
@@ @@
   /**
    * Convert image field items into file URIs to be packaged.
    *
-   * @param \Drupal\Core\Field\EntityReferenceFieldItemList $fieldItemList
+   * @param EntityReferenceFieldItemList $fieldItemList
    *   File field items to turn into URLs.
    * @param array $options
    *   Options, used to refine/filter behavior during packaging.
@@ @@
   public static function processEntityRefField(EntityReferenceFieldItemList $fieldItemList, array $options) {
     $uris = [];

-    /** @var \Drupal\Core\Entity\EntityInterface $item */
+    /** @var EntityInterface $item */
     foreach ($fieldItemList->referencedEntities() as $item) {
       $temp = EntityProcessor::processEntity($item, $options);
       $uris = array_merge($temp, $uris);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/content_packager/src/EntityProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_packager;

+use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;
+use Drupal\Core\Field\EntityReferenceFieldItemList;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;

@@ @@
   /**
    * Dig up URIs from fields on an entity (and referenced entities).
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to process.
    * @param array $options
    *   The image styles we want to generate URIs for and the fields we want
@@ @@
     if ($fieldable !== TRUE) {
       return $uris;
     }
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+    /** @var FieldableEntityInterface $entity */
     $fields = $entity->getFields();

     foreach ($fields as $field) {
@@ @@

       switch ($type) {
         case 'file':
-          /** @var \Drupal\file\Plugin\Field\FieldType\FileFieldItemList $field */
+          /** @var FileFieldItemList $field */
           $uris = array_merge(FieldProcessor::processFileField($field), $uris);
           break;

         case 'image':
-          /** @var \Drupal\file\Plugin\Field\FieldType\FileFieldItemList $field */
+          /** @var FileFieldItemList $field */
           $uris = array_merge(FieldProcessor::processImageField($field, $options), $uris);
           break;

         case 'entity_reference':
-          /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $field */
+          /** @var EntityReferenceFieldItemList $field */
           $uris = array_merge(FieldProcessor::processEntityRefField($field, $options), $uris);
           break;
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/content_packager/src/BatchOperations.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_packager;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\views\Views;

 /**
@@ @@
    * @param array $context
    *   The batch context array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function copyEntityFiles(array $entity_infos, $package_uri, array $options, array &$context) {
     if (!isset($context['results']['failed']['copy'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/content_packager/src/Annotation/PackageSource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_packager\Annotation;

+use Drupal\Core\Annotation\Translation;
+use Drupal\Core\Plugin\PluginWithFormsInterface;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
    * Key-value pairs of classes that implement PluginWithFormsInterface.
    * Keys used will be 'package' and 'configure'.
    *
-   * @var \Drupal\Core\Plugin\PluginWithFormsInterface[]
+   * @var PluginWithFormsInterface[]
    * @see \Drupal\content_packager\Plugin\source\RestPackageSource
    *
    * @see \Drupal\content_packager\Plugin\source\JsonApiPackageSource
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


15) modules/contrib/content_packager/content_packager.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\File\FileSystem;
 /**
  * @file
  * Provides a method to compile and bundle/package content and associated media.
@@ @@
  * @return array
  *   A list of arrays containing the $view_id and $display_id.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function content_packager_get_rest_export_views() {

@@ @@
  *
  * @param array $form_element
  *   The form element containing the name of the directory to check.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  *
  * @see \system_check_directory()
@@ @@
  */
 function content_packager_prepare_directory($uri) {
   $logger = \Drupal::logger('content_packager');
-  /** @var \Drupal\Core\File\FileSystem $file_system */
+  /** @var FileSystem $file_system */
   $file_system = \Drupal::service('file_system');
   $errors = [];
   if (!is_dir($uri) && !$file_system->mkdir($uri, NULL, TRUE)) {
@@ @@
 /**
  * Verify whether the content packager has processed a given entity.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity to verify.
  *
  * @return bool
@@ @@
 /**
  * Mark a particular entity as processed.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity to mark as 'processed'.
  */
 function content_packager_add_processed(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 15 files have been changed by Rector                                      

