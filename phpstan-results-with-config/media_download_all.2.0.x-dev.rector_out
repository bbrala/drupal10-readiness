modules/contrib/media_download_all/media_download_all.install
modules/contrib/media_download_all/media_download_all.module
modules/contrib/media_download_all/media_download_all.post_update.php
modules/contrib/media_download_all/src/Cache/MdaCacheTagsInvalidator.php
modules/contrib/media_download_all/src/Controller/DownloadController.php
modules/contrib/media_download_all/src/Plugin/Archiver/Zip.php
modules/contrib/media_download_all/src/Plugin/Field/FieldFormatter/MediaDownloadAllEntityFormatter.php
modules/contrib/media_download_all/src/Plugin/Field/FieldFormatter/MediaDownloadAllIdFormatter.php
modules/contrib/media_download_all/src/Plugin/Field/FieldFormatter/MediaDownloadAllLabelFormatter.php
modules/contrib/media_download_all/src/Plugin/Field/FieldFormatter/MediaDownloadAllThumbnailFormatter.php
modules/contrib/media_download_all/src/Traits/MdaFormatterTrait.php
modules/contrib/media_download_all/tests/src/Functional/MdaFormatterTest.php

6 files with changes
====================

1) modules/contrib/media_download_all/tests/src/Functional/MdaFormatterTest.php:165

    ---------- begin diff ----------
@@ @@
     $entity_id = $entity->id();

     $this->drupalGet($entity->toUrl());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $link = $this->xpath("//a[@class='media-download-all']");
     $this->assertCount(1, $link);
     $mda_link = $link[0];
@@ @@
     ]);
     $entity->save();
     $this->drupalGet($entity->toUrl());
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $link = $this->xpath("//a[@class='media-download-all']");
     $this->assertCount(0, $link);
   }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/media_download_all/src/Traits/MdaFormatterTrait.php:15

    ---------- begin diff ----------
@@ @@
    *
    * @param array $elements
    *   The renderable array to append.
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field values to be rendered.
    * @param string $langcode
    *   The language that should be used to render the field.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/media_download_all/src/Plugin/Archiver/Zip.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_download_all\Plugin\Archiver;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\File\FileSystem;
 use Drupal\Core\Archiver\Zip as BaseZip;
 use Drupal\Core\Archiver\ArchiverException;
 use Drupal\Core\StreamWrapper\StreamWrapperManager;
@@ @@
   /**
    * A file storage instance.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private $fileStorage;

@@ @@
   /**
    * File system.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
     $file_name = $fid . ' - ' . $file->label();
     $uri = $file->getFileUri();
     if ($this->isAliyunOssSchema($uri)) {
-      $url = file_create_url($uri);
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
       $this->zip->addFromString($file_name, file_get_contents($url));
       return $this;
     }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/media_download_all/src/Controller/DownloadController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_download_all\Controller;

+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
+use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
+use Symfony\Component\HttpFoundation\Response;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Archiver\ArchiverException;
 use Drupal\Core\Batch\BatchBuilder;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * Entity Field Manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * File system.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Constructs a new DownloadController object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\File\FileSystem $file_system
+   * @param FileSystem $file_system
    *   The file system.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack service.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager, FileSystem $file_system, RequestStack $request_stack) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException
+   * @throws ServiceNotFoundException
+   * @throws ServiceCircularReferenceException
    */
   public static function create(ContainerInterface $container) {
     return new static(
@@ @@
    * @param string $field_name
    *   The field name.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Return the file.
    *
    * @throws \InvalidArgumentException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Core\Archiver\ArchiverException
+   * @throws InvalidPluginDefinitionException
+   * @throws ArchiverException
    */
   public function download($entity_type, $entity_id, $field_name) {
     // Cache ID to store files for this entity.
@@ @@
    * @param string $field_name
    *   The field name.
    *
-   * @return \Drupal\Core\Batch\BatchBuilder
+   * @return BatchBuilder
    *   The batch builder.
    */
   private function getBatch(array $files, $file_path, $entity_type, $entity_id, $field_name) {
@@ @@
    * @return array
    *   The file IDs.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getFiles($entity_type, $entity_id, $field_name) {
     $entity_storage = $this->entityTypeManager()->getStorage($entity_type);
@@ @@
    * @param string $file_path
    *   File physical path.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+   * @return BinaryFileResponse
    *   The binary file.
    */
   protected function streamZipFile($file_path) {
@@ @@
    * @param string $field_name
    *   The field name.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Return the result of the access check   *
    */
   public function access($entity_type, $entity_id, $field_name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/media_download_all/src/Cache/MdaCacheTagsInvalidator.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * MdaCacheTagsInvalidator constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(CacheBackendInterface $cache, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/media_download_all/media_download_all.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Archiver\ArchiverException;
 /**
  * @file
  * This is the Media Download All module.
@@ @@
  * @param array $context
  *   The context.
  *
- * @throws \Drupal\Core\Archiver\ArchiverException
+ * @throws ArchiverException
  */
 function media_download_all_operation($file_path, $entity_type, $entity_id, $field_name, $fid, $file_name, array &$context) {
   $file_zip = new Zip($file_path, TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

