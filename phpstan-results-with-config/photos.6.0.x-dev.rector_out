modules/contrib/photos/photos.install
modules/contrib/photos/photos.module
modules/contrib/photos/photos.post_update.php
modules/contrib/photos/photos_access/photos_access.install
modules/contrib/photos/photos_access/photos_access.module
modules/contrib/photos/photos_access/src/Controller/DefaultController.php
modules/contrib/photos/photos_access/src/Form/PhotosAccessPasswordForm.php
modules/contrib/photos/photos_access/src/Plugin/migrate/destination/PhotosAccess.php
modules/contrib/photos/photos_access/src/Plugin/migrate/destination/PhotosAccessUser.php
modules/contrib/photos/photos_access/src/Plugin/migrate/source/PhotosAccess.php
modules/contrib/photos/photos_access/src/Plugin/migrate/source/PhotosAccessUser.php
modules/contrib/photos/photos_access/src/Plugin/views/access/PhotosAccess.php
modules/contrib/photos/photos_access/tests/src/Functional/PhotosAccessTest.php
modules/contrib/photos/src/Controller/PhotosAlbumController.php
modules/contrib/photos/src/Controller/PhotosEditController.php
modules/contrib/photos/src/Controller/PhotosImageViewController.php
modules/contrib/photos/src/Controller/PhotosLegacyAlbumViewController.php
modules/contrib/photos/src/Controller/PhotosLegacyImageViewController.php
modules/contrib/photos/src/Controller/PhotosRearrangeController.php
modules/contrib/photos/src/Controller/PhotosStatisticsUpdateController.php
modules/contrib/photos/src/Entity/PhotosImage.php
modules/contrib/photos/src/Entity/PhotosRouteProvider.php
modules/contrib/photos/src/Form/PhotosAdminLegacySettingsForm.php
modules/contrib/photos/src/Form/PhotosAdminSettingsForm.php
modules/contrib/photos/src/Form/PhotosAdminStructureForm.php
modules/contrib/photos/src/Form/PhotosDirectoryImportForm.php
modules/contrib/photos/src/Form/PhotosImageAddForm.php
modules/contrib/photos/src/Form/PhotosImageDeleteForm.php
modules/contrib/photos/src/Form/PhotosImageEditForm.php
modules/contrib/photos/src/Form/PhotosMediaLibraryForm.php
modules/contrib/photos/src/Form/PhotosUploadForm.php
modules/contrib/photos/src/PhotosAccessControlHandler.php
modules/contrib/photos/src/PhotosAlbum.php
modules/contrib/photos/src/PhotosImageFile.php
modules/contrib/photos/src/PhotosImageInterface.php
modules/contrib/photos/src/PhotosImageListBuilder.php
modules/contrib/photos/src/PhotosImageStorage.php
modules/contrib/photos/src/PhotosImageStorageInterface.php
modules/contrib/photos/src/PhotosImageStorageSchema.php
modules/contrib/photos/src/PhotosUpload.php
modules/contrib/photos/src/PhotosUploadInterface.php
modules/contrib/photos/src/PhotosViewsData.php
modules/contrib/photos/src/Plugin/Block/PhotosInformation.php
modules/contrib/photos/src/Plugin/Field/FieldFormatter/PhotosAlbumCoverImageFormatter.php
modules/contrib/photos/src/Plugin/Field/FieldFormatter/PhotosAlbumFormatter.php
modules/contrib/photos/src/Plugin/Field/FieldFormatter/PhotosImageMediaFieldFormatter.php
modules/contrib/photos/src/Plugin/Filter/PhotosFilter.php
modules/contrib/photos/src/Plugin/Search/PhotosImageSearch.php
modules/contrib/photos/src/Plugin/media/Source/Photos.php
modules/contrib/photos/src/Plugin/migrate/destination/Photos.php
modules/contrib/photos/src/Plugin/migrate/destination/PhotosComment.php
modules/contrib/photos/src/Plugin/migrate/destination/PhotosCount.php
modules/contrib/photos/src/Plugin/migrate/destination/PhotosImage.php
modules/contrib/photos/src/Plugin/migrate/source/Photos.php
modules/contrib/photos/src/Plugin/migrate/source/PhotosComment.php
modules/contrib/photos/src/Plugin/migrate/source/PhotosCount.php
modules/contrib/photos/src/Plugin/migrate/source/PhotosImage.php
modules/contrib/photos/src/Plugin/views/field/PhotosImageCover.php
modules/contrib/photos/src/Plugin/views/field/PhotosImageSetCover.php
modules/contrib/photos/src/Routing/PhotosRouteSubscriber.php
modules/contrib/photos/tests/src/Functional/AddPhotosAlbumImageTest.php
modules/contrib/photos/tests/src/Kernel/CreatePhotosAlbumTest.php
modules/contrib/photos/tests/src/Unit/PhotosAlbumTest.php

43 files with changes
=====================

1) modules/contrib/photos/tests/src/Kernel/CreatePhotosAlbumTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['system']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/photos/tests/src/Functional/AddPhotosAlbumImageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\photos\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\node\Entity\Node;
 use Drupal\photos\PhotosAlbum;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The user account for testing.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * The admin user account for testing.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminAccount;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create user with permissions to edit own photos.
     $this->account = $this->drupalCreateUser([
@@ @@
     $album->save();

     // Get test image file.
-    $testPhotoUri = drupal_get_path('module', 'photos') . '/tests/images/photos-test-picture.jpg';
+    $testPhotoUri = \Drupal::service('extension.list.module')->getPath('photos') . '/tests/images/photos-test-picture.jpg';
     $fileSystem = \Drupal::service('file_system');

     // Post image upload form.
@@ @@
     $this->submitForm($edit, 'Save');

     // Confirm that image title has been updated.
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage('photos_image');
     // Must explicitly clear cache to see new title.
     // @see https://www.drupal.org/project/drupal/issues/3040878
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/photos/src/Routing/PhotosRouteSubscriber.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new PhotosRouteSubscriber.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/photos/src/Plugin/views/field/PhotosImageCover.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * EntityTypeManager class.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $connection, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository = NULL) {
@@ @@
     $picture_id = $this->getValue($values);
     $photosImage = FALSE;
     if ($picture_id) {
-      /** @var \Drupal\photos\Entity\PhotosImage $photosImage */
+      /** @var PhotosImage $photosImage */
       $photosImage = $this->entityTypeManager->getStorage('photos_image')->load($picture_id);
     }
     else {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/photos/src/Plugin/migrate/destination/PhotosImage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos\Plugin\migrate\destination;

+use Drupal\file\FileInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The image factory service.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * The photos upload handler.
    *
-   * @var \Drupal\photos\PhotosUploadInterface
+   * @var PhotosUploadInterface
    */
   protected $photosUpload;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The current migration.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory service.
-   * @param \Drupal\photos\PhotosUploadInterface $photos_upload
+   * @param PhotosUploadInterface $photos_upload
    *   The photos upload service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, Connection $connection, EntityTypeManagerInterface $entity_manager, ImageFactory $image_factory, PhotosUploadInterface $photos_upload, TimeInterface $time) {
@@ @@
     $title = $row->getDestinationProperty('title');
     $fid = $row->getDestinationProperty('fid');
     try {
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = $this->entityTypeManager->getStorage('file')->load($fid);
       $image = $this->imageFactory->get($file->getFileUri());
       if ($image) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/photos/src/Plugin/migrate/destination/PhotosCount.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The current migration.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/photos/src/Plugin/migrate/destination/Photos.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The current migration.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/photos/src/Plugin/Search/PhotosImageSearch.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos\Plugin\Search;

+use Drupal\node\NodeInterface;
 use Drupal\Core\Access\AccessibleInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\CacheableMetadata;
@@ @@
   /**
    * The current database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The replica database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $databaseReplica;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A module manager object.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * A config object for 'search.settings'.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $searchSettings;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The Drupal account to use for checking for access to advanced search.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * The Renderer service to format the username and node.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The search index.
    *
-   * @var \Drupal\search\SearchIndexInterface
+   * @var SearchIndexInterface
    */
   protected $searchIndex;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The current database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   A module manager object.
-   * @param \Drupal\Core\Config\Config $search_settings
+   * @param Config $search_settings
    *   A config object for 'search.settings'.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The $account object to use for checking for access to advanced search.
-   * @param \Drupal\Core\Database\Connection|null $database_replica
+   * @param Connection|null $database_replica
    *   (Optional) the replica database connection.
-   * @param \Drupal\search\SearchIndexInterface $search_index
+   * @param SearchIndexInterface $search_index
    *   The search index.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, Config $search_settings, LanguageManagerInterface $language_manager, RendererInterface $renderer, MessengerInterface $messenger, AccountInterface $account = NULL, Connection $database_replica = NULL, SearchIndexInterface $search_index = NULL) {
@@ @@
    * This method can assume that $this->isSearchExecutable() has already been
    * checked and returned TRUE.
    *
-   * @return \Drupal\Core\Database\StatementInterface|null
+   * @return StatementInterface|null
    *   Results from search query execute() method, or NULL if the search
    *   failed.
    */
@@ @@
   /**
    * Prepares search results for rendering.
    *
-   * @param \Drupal\Core\Database\StatementInterface $found
+   * @param StatementInterface $found
    *   Results found from a successful search query execute() method.
    *
    * @return array
@@ @@

     foreach ($found as $item) {
       // Render the node.
-      /** @var \Drupal\photos\Entity\PhotosImage $photosImage */
+      /** @var PhotosImage $photosImage */
       $photosImage = $photosImageStorage->load($item->sid)->getTranslation($item->langcode);
       $build = $photosImageRender->view($photosImage, 'search_result', $item->langcode);

-      /** @var \Drupal\node\NodeInterface $node */
+      /** @var NodeInterface $node */
       $node = $nodeStorage->load($photosImage->getAlbumId())->getTranslation($item->langcode);

       unset($build['#theme']);
@@ @@
   /**
    * Adds the configured rankings to the search query.
    *
-   * @param \Drupal\Core\Database\Query\SelectExtender $query
+   * @param SelectExtender $query
    *   A query object that has been extended with the Search DB Extender.
    */
   protected function addPhotosImageRankings(SelectExtender $query) {
@@ @@
   /**
    * Indexes a single node.
    *
-   * @param \Drupal\photos\Entity\PhotosImage $photosImage
+   * @param PhotosImage $photosImage
    *   The photos_image to index.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/photos/src/Plugin/Field/FieldFormatter/PhotosImageMediaFieldFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos\Plugin\Field\FieldFormatter;

+use Drupal\photos\PhotosImageInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem;
@@ @@

     $imageLinkSetting = $this->getSetting('image_link');
     if ($imageLinkSetting == 'photos_album') {
-      /** @var \Drupal\photos\PhotosImageInterface $photosImage */
+      /** @var PhotosImageInterface $photosImage */
       $photosImage = $items->getEntity();
       $url = $photosImage->getAlbumUrl();
       foreach ($elements as $delta => $element) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/photos/src/Plugin/Field/FieldFormatter/PhotosAlbumFormatter.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\image\ImageStyleStorageInterface $image_style_storage
+   * @param ImageStyleStorageInterface $image_style_storage
    *   The image style entity storage handler.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user, ImageStyleStorageInterface $image_style_storage, RendererInterface $renderer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/photos/src/Plugin/Field/FieldFormatter/PhotosAlbumCoverImageFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos\Plugin\Field\FieldFormatter;

+use Drupal\photos\PhotosImageInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem;
@@ @@
     $elements = parent::viewElements($items, $langcode);
     $imageLinkSetting = $this->getSetting('image_link');
     if ($imageLinkSetting == 'photos_album') {
-      /** @var \Drupal\photos\PhotosImageInterface $photosImage */
+      /** @var PhotosImageInterface $photosImage */
       $photosImage = $items->getEntity();
       $url = $photosImage->getAlbumUrl();
       foreach ($elements as $delta => $element) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/photos/src/Plugin/Block/PhotosInformation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos\Plugin\Block;

+use Drupal\user\UserInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The current request stack.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $connection, EntityTypeManagerInterface $entity_manager, RequestStack $request_stack, RouteMatchInterface $route_match) {
@@ @@
       $image = $query->execute()->fetchObject();
       $blockImage = [];
       if ($image) {
-        /** @var \Drupal\user\UserInterface $account */
+        /** @var UserInterface $account */
         try {
           $account = $this->entityTypeManager->getStorage('user')
             ->load($image->uid);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/photos/src/PhotosUploadInterface.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * Attach image file to PhotosImage entity.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/photos/src/PhotosUpload.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos;

+use Drupal\Core\Image\Image;
+use Drupal\media\MediaInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Render\PlainTextOutput;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The Current User object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * File usage interface to configurate an file object.
    *
-   * @var \Drupal\file\FileUsage\FileUsageInterface
+   * @var FileUsageInterface
    */
   protected $fileUsage;

@@ @@
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * The token replacement instance.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * Transliteration service.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface
+   * @var TransliterationInterface
    */
   protected $transliteration;

@@ @@
   /**
    * Creates a new AliasCleaner.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager service.
-   * @param \Drupal\Core\File\FileSystem $file_system
+   * @param FileSystem $file_system
    *   The file system service.
-   * @param \Drupal\file\FileUsage\FileUsageInterface $file_usage
+   * @param FileUsageInterface $file_usage
    *   File usage service.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token replacement instance.
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliteration
+   * @param TransliterationInterface $transliteration
    *   The transliteration service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Connection $connection, AccountInterface $current_user, EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_manager, FileSystem $file_system, FileUsageInterface $file_usage, ImageFactory $image_factory, MessengerInterface $messenger, ModuleHandlerInterface $module_handler, StreamWrapperManagerInterface $stream_wrapper_manager, Token $token, TransliterationInterface $transliteration) {
@@ @@
       }

       // Create photos_image entity.
-      /** @var \Drupal\Core\Image\Image $image */
+      /** @var Image $image */
       $image = $this->imageFactory->get($file->getFileUri());
       $defaultWeight = $this->connection->select('photos_image_field_data', 'i')
         ->fields('i', ['weight'])
@@ @@
    */
   public function saveExistingMedia($mediaId, $albumId) {
     $config = $this->configFactory->get('photos.settings');
-    /** @var \Drupal\media\MediaInterface $mediaItem */
+    /** @var MediaInterface $mediaItem */
     $mediaItem = NULL;
     try {
       $mediaItem = $this->entityTypeManager->getStorage('media')
@@ @@
               break;
             }
             $path = $this->fileSystem->createFilename($image['name'], $this->path($scheme));
-            if ($temp_file = file_save_data($zip->getFromIndex($x), $path)) {
+            if ($temp_file = \Drupal::service('file.repository')->writeData($zip->getFromIndex($x), $path)) {
               // Update file values.
               $temp_file->album_id = $params['album_id'];
               $temp_file->nid = $params['nid'];
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/photos/src/PhotosImageStorageInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of image revision IDs for a specific image.
    *
-   * @param \Drupal\photos\PhotosImageInterface $image
+   * @param PhotosImageInterface $image
    *   The image entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as image author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\photos\PhotosImageInterface $image
+   * @param PhotosImageInterface $image
    *   The image entity.
    *
    * @return int
@@ @@
   /**
    * Moves an image from one album to another.
    *
-   * @param \Drupal\photos\PhotosImageInterface $image
+   * @param PhotosImageInterface $image
    *   The image entity.
    * @param int $new_album
    *   The new image album.
@@ @@
   /**
    * Unsets the language for all images with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/photos/src/PhotosImageListBuilder.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new PhotosImageListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\photos\PhotosImageInterface $entity */
+    /** @var PhotosImageInterface $entity */
     $langcode = $entity->language()->getId();
     $uri = $entity->toUrl();
     $options = $uri->getOptions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/photos/src/PhotosImageInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos;

+use Drupal\Core\Url;
 use Drupal\Core\Entity\EntityPublishedInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\user\EntityOwnerInterface;
@@ @@
   /**
    * Gets the album url.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The album url.
    */
   public function getAlbumUrl();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/photos/src/PhotosImageFile.php:150

    ---------- begin diff ----------
@@ @@
     $style->createDerivative($uri, $destination);

     // Return URL.
-    return file_create_url($destination);
+    return \Drupal::service('file_url_generator')->generateAbsoluteString($destination);
   }

   /**
@@ @@
         $image_url = ImageStyle::load($style_name)->buildUrl($uri);
       }
       else {
-        $image_url = file_create_url($uri);
+        $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
       }
     }
     else {
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/photos/src/PhotosAccessControlHandler.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs the photos access control handler instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/photos/src/Form/PhotosUploadForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos\Form;

+use Psr\Log\LoggerInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The photos upload handler.
    *
-   * @var \Drupal\photos\PhotosUploadInterface
+   * @var PhotosUploadInterface
    */
   protected $photosUpload;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager service.
-   * @param \Drupal\Core\File\FileSystem $file_system
+   * @param FileSystem $file_system
    *   The file system service.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\photos\PhotosUploadInterface $photos_upload
+   * @param PhotosUploadInterface $photos_upload
    *   The photos upload handler.
    */
   public function __construct(Connection $connection, EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_manager, FileSystem $file_system, ImageFactory $image_factory, MessengerInterface $messenger, ModuleHandlerInterface $module_handler, RouteMatchInterface $route_match, PhotosUploadInterface $photos_upload) {
@@ @@
   /**
    * A custom access check.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The album node entity.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access(NodeInterface $node) {
@@ @@
               $image = $this->imageFactory->get($file_uri);
               if (isset($path_parts['extension']) && $path_parts['extension'] && $image->getWidth()) {
                 // Create a file entity.
-                /** @var \Drupal\file\FileInterface $file */
+                /** @var FileInterface $file */
                 $file = $this->entityTypeManager->getStorage('file')->create([
                   'uri' => $file_uri,
                   'uid' => $user->id(),
@@ @@
               // @todo file_validate_is_image?
               if (isset($path_parts['extension']) && $path_parts['extension'] && $image->getWidth()) {
                 // Create a file entity.
-                /** @var \Drupal\file\FileInterface $file */
+                /** @var FileInterface $file */
                 $file = $this->entityTypeManager->getStorage('file')->create([
                   'uri' => $file_uri,
                   'uid' => $user->id(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/photos/src/Form/PhotosMediaLibraryForm.php:92

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function addButtonSubmit(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/photos/src/Form/PhotosImageEditForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos\Form;

+use Drupal\photos\PhotosImageInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The Current User object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\photos\PhotosImageInterface $photosImage */
+    /** @var PhotosImageInterface $photosImage */
     $photosImage = $this->entity;

     // @todo phase out type (no more sub-albums...).
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/photos/src/Form/PhotosImageDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos\Form;

+use Drupal\photos\PhotosImageInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;

 /**
@@ @@
    * {@inheritdoc}
    */
   protected function getRedirectUrl() {
-    /** @var \Drupal\photos\PhotosImageInterface $entity */
+    /** @var PhotosImageInterface $entity */
     $entity = $this->getEntity();
     return $entity->getAlbumUrl();
   }
@@ @@
    * {@inheritdoc}
    */
   protected function logDeletionMessage() {
-    /** @var \Drupal\photos\PhotosImageInterface $entity */
+    /** @var PhotosImageInterface $entity */
     $entity = $this->getEntity();
     $this->logger('photos')->notice('Deleted image %title.', ['%title' => $entity->label()]);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/photos/src/Form/PhotosImageAddForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos\Form;

+use Drupal\photos\PhotosImageInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The Current User object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    */
   public function save(array $form, FormStateInterface $form_state) {
     // Save changes.
-    /** @var \Drupal\photos\PhotosImageInterface $photosImage */
+    /** @var PhotosImageInterface $photosImage */
     $photosImage = $this->entity;
     $photosImage->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/photos/src/Form/PhotosDirectoryImportForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos\Form;

+use Drupal\Core\Image\Image;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;

@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\File\FileSystem $file_system
+   * @param FileSystem $file_system
    *   The file system service.
    */
   public function __construct(Connection $connection, EntityTypeManagerInterface $entity_manager, ModuleHandlerInterface $module_handler, FileSystem $file_system) {
@@ @@
    *
    * @param array $files
    *   The files to be moved or copied.
-   * @param \Drupal\user\Entity\User $account
+   * @param User $account
    *   The selected user account.
    * @param int $nid
    *   The album node id.
@@ @@
         }
         if ($file_processed) {
           // Save file to album. Include title and description.
-          /** @var \Drupal\Core\Image\Image $image */
+          /** @var Image $image */
           $image = \Drupal::service('image.factory')->get($file_uri);
           if ($image->getWidth()) {
             // Create a file entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/photos/src/Form/PhotosAdminStructureForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs PhotosAdminSettingsForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityDisplayRepositoryInterface $entity_display_repository, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/photos/src/Form/PhotosAdminSettingsForm.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The route builder.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;

@@ @@
   /**
    * Constructs PhotosAdminSettingsForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route builder.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityDisplayRepositoryInterface $entity_display_repository, EntityFieldManagerInterface $entity_field_manager, ModuleHandlerInterface $module_handler, RouteBuilderInterface $route_builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/photos/src/Form/PhotosAdminLegacySettingsForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs PhotosAdminSettingsForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/photos/src/Entity/PhotosImage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos\Entity;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\EditorialContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
     $photosImageFields = \Drupal::service('entity_field.manager')->getFieldDefinitions('photos_image', 'photos_image');
     // @todo warn if other unhandled fields exist?
     foreach ($photosImageFields as $key => $field) {
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
+      /** @var FieldDefinitionInterface $field */
       $fieldType = $field->getType();
       if ($fieldType == 'file' || $fieldType == 'image') {
         // Check image and file fields.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/photos/src/Controller/PhotosStatisticsUpdateController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(Connection $connection) {
@@ @@
   /**
    * Ajax callback to record photos_image visit.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON object containing the image visit count.
    */
   public function updateCount() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/photos/src/Controller/PhotosRearrangeController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos\Controller;

+use Drupal\photos\PhotosImageInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Html;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The current request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The current request stack.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(Connection $connection, EntityTypeManagerInterface $entity_manager, RendererInterface $renderer, RequestStack $request_stack, RouteMatchInterface $route_match) {
@@ @@
   /**
    * A custom access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The album node entity.
-   * @param \Drupal\user\Entity\User $user
+   * @param User $user
    *   The user account being viewed.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access(AccountInterface $account = NULL, NodeInterface $node = NULL, User $user = NULL) {
@@ @@
         foreach ($order as $imageId) {
           if ($type == 'images') {
             // Save sort order for images in album.
-            /** @var \Drupal\photos\PhotosImageInterface $photosImage */
+            /** @var PhotosImageInterface $photosImage */
             $photosImage = $photosImageStorage->load($imageId);
             $photosImage->set('weight', $weight);
             $photosImage->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/photos/src/Controller/PhotosLegacyImageViewController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos\Controller;

+use Drupal\photos\Entity\PhotosImage;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
@@ @@
    * {@inheritdoc}
    */
   public function view(EntityInterface $photos_image, $view_mode = 'full', $langcode = NULL) {
-    /** @var \Drupal\photos\Entity\PhotosImage $photosImage */
+    /** @var PhotosImage $photosImage */
     $photosImage = $photos_image;
     if (!$photosImage) {
       throw new NotFoundHttpException();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/photos/src/Controller/PhotosImageViewController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos\Controller;

+use Drupal\photos\Entity\PhotosImage;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Asset\LibraryDiscoveryInterface;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The library discovery service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, Connection $connection, LibraryDiscoveryInterface $library_discovery, RouteMatchInterface $route_match, EntityRepositoryInterface $entity_repository = NULL) {
@@ @@
   /**
    * A custom access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    */
   public function access(AccountInterface $account) {
@@ @@
     }

     $build = parent::view($photos_image, $view_mode);
-    /** @var \Drupal\photos\Entity\PhotosImage $photosImage */
+    /** @var PhotosImage $photosImage */
     $photosImage = $photos_image;

     // Get config settings.
@@ @@
   /**
    * The _title_callback for the page that renders a single photos image.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $photos_image
+   * @param EntityInterface $photos_image
    *   The current photos_image.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/photos/src/Controller/PhotosEditController.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
   /**
    * The FormBuilder object.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The current request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The current request stack.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(Connection $connection, CurrentPathStack $current_path, FormBuilderInterface $form_builder, ModuleHandlerInterface $module_handler, RendererInterface $renderer, RequestStack $request_stack, RouteMatchInterface $route_match) {
@@ @@
   /**
    * A custom access check.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The album node entity.
-   * @param \Drupal\photos\PhotosImageInterface $photos_image
+   * @param PhotosImageInterface $photos_image
    *   The photos_image entity.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access(NodeInterface $node, PhotosImageInterface $photos_image) {
@@ @@
   /**
    * Set album cover.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The photo album node.
-   * @param \Drupal\photos\PhotosImageInterface $photos_image
+   * @param PhotosImageInterface $photos_image
    *   The photos_image entity.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect to destination or photo album node page.
    */
   public function setAlbumCover(NodeInterface $node, PhotosImageInterface $photos_image) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/photos/src/Controller/PhotosAlbumController.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * The library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The current request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The library discovery service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The current request stack.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(Connection $connection, DateFormatterInterface $date_formatter, EntityTypeManagerInterface $entity_manager, ImageFactory $image_factory, LibraryDiscoveryInterface $library_discovery, RendererInterface $renderer, RequestStack $request_stack, RouteMatchInterface $route_match) {
@@ @@
   /**
    * A custom access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The album node entity.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access(AccountInterface $account, NodeInterface $node) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/photos/photos_access/tests/src/Functional/PhotosAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\photos\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\file\FileInterface;
 use Drupal\photos\Entity\PhotosImage;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * The user account for testing.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * The user account for testing role access.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $accountEditOwnPhotosRole;

@@ @@
   /**
    * The user account for testing access denied.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $accountViewPhotosOnly;

@@ @@
   /**
    * The album node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $album;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create admin user and adjust photos admin settings. This user will also
@@ @@
     $this->accountEditOwnPhotosRole->addRole('role_access_test');
     $this->accountEditOwnPhotosRole->save();

-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage('node');
     // Create a locked photos node.
     $this->drupalGet('/node/add/photos');
@@ @@
     ];
     $this->submitForm($edit, 'Save');
     $storage->resetCache([1]);
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage('node');
     $this->album = $storage->load(1);
     $this->assertNotNull($this->album->photos_privacy);
@@ @@
     $this->assertEquals($this->album->photos_privacy['viewid'], 1, 'Album is set to locked.');

     // Get test image file.
-    /** @var \Drupal\Core\File\FileSystemInterface $fileSystem */
+    /** @var FileSystemInterface $fileSystem */
     $fileSystem = \Drupal::service('file_system');
-    $testImageFile = drupal_get_path('module', 'photos') . '/tests/images/photos-test-picture.jpg';
+    $testImageFile = \Drupal::service('extension.list.module')->getPath('photos') . '/tests/images/photos-test-picture.jpg';
     // Add image to album.
     $edit = [
       'files[images_0]' => $fileSystem->realpath($testImageFile),
@@ @@
     // Get album images.
     $photosImage = $this->container->get('entity_type.manager')->getStorage('photos_image')->load(1);

-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $this->container->get('entity_type.manager')->getStorage('file')->load($photosImage->field_image->target_id);

     // Check that owner does have access.
@@ @@
       $this->assertSession()->responseContains('Role access');
     }
     $this->submitForm($edit, 'Save');
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage('node');
     // Must explicitly clear cache to see privacy settings?
     // @see https://www.drupal.org/project/drupal/issues/3040878
@@ @@
   /**
    * Test access to photo album, photos node, photos_image and raw image file.
    *
-   * @param \Drupal\photos\Entity\PhotosImage $photosImage
+   * @param PhotosImage $photosImage
    *   The photos_image entity.
    * @param int $viewCode
    *   The expected response code.
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/photos/photos_access/src/Plugin/views/access/PhotosAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\photos_access\Plugin\views\access;

+use Drupal\node\Entity\Node;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_manager, RouteMatchInterface $route_match) {
@@ @@
     if ($account->hasPermission('view photo')) {
       if ($viewId && $viewId != 3) {
         // Check node access.
-        /** @var \Drupal\node\Entity\Node $node */
+        /** @var Node $node */
         $node = $this->entityTypeManager->getStorage('node')->load($nid);
         $access = $node->access('view');
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/photos/photos_access/src/Form/PhotosAccessPasswordForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection used to check the password.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Construct the PhotosAccessPasswordForm.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection which will be used to check the password.
    */
   public function __construct(Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/photos/photos_access/src/Controller/DefaultController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The renderer service.
    *
-   * @var Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Photos album password required page.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The album node that requires the password.
    */
   public function photosAccessPasswordPage(NodeInterface $node) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/photos/photos_access/photos_access.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\node\Entity\Node;
+use Drupal\photos\Entity\PhotosImage;
+use Drupal\file\FileInterface;
+use Drupal\field\Entity\FieldConfig;
 /**
  * @file
  * Implementation of photos_access.module.
@@ @@
  */
 function photos_access_form_node_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
   // Get form node.
-  /** @var \Drupal\node\Entity\Node $node */
+  /** @var Node $node */
   $node = $form_state->getFormObject()->getEntity();
   if ($node && $node_type = $node->getType()) {
     if (\Drupal::config('photos.settings')->get('photos_access_' . $node_type)) {
@@ @@
           $form['photos_privacy']['viewremove'][$u['target_id']] = [
             '#type' => 'checkbox',
             '#default_value' => isset($node->viewremove[$u['target_id']]) ? $node->viewremove[$u['target_id']] : '',
-            '#title' => t('Delete: @name', ['@name' => render($u['username'])]),
+            '#title' => t('Delete: @name', ['@name' => \Drupal::service('renderer')->render($u['username'])]),
             '#prefix' => '<div id="photos-access-remove"' . $classes . '>',
             '#suffix' => '</div>',
           ];
@@ @@
           $form['photos_privacy']['updateremove'][$u['target_id']] = [
             '#type' => 'checkbox',
             '#default_value' => isset($node->updateremove[$u['target_id']]) ? $node->updateremove[$u['target_id']] : '',
-            '#title' => t('Delete: @name', ['@name' => render($u['username'])]),
+            '#title' => t('Delete: @name', ['@name' => \Drupal::service('renderer')->render($u['username'])]),
             '#prefix' => '<div id="photos_access_updateremove" class="photos-access-update-remove">',
             '#suffix' => '</div>',
           ];
@@ @@
 /**
  * Move files from public to private and private to public as needed.
  *
- * @param \Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  *   The node.
  * @param bool $public
  *   Whether to use the default filesystem scheme or not.
@@ @@
   foreach ($results as $result) {
     $photosImage = NULL;
     try {
-      /** @var \Drupal\photos\Entity\PhotosImage $photosImage */
+      /** @var PhotosImage $photosImage */
       $photosImage = \Drupal::entityTypeManager()
         ->getStorage('photos_image')
         ->load($result->id);
@@ @@
       foreach ($fids as $fid) {
         $file = NULL;
         try {
-          /** @var \Drupal\file\FileInterface $file */
+          /** @var FileInterface $file */
           $file = \Drupal::entityTypeManager()->getStorage('file')->load($fid);
         }
         catch (InvalidPluginDefinitionException $e) {
@@ @@
           $new_uri = str_replace($old_file_wrapper, $file_wrapper, $file->getFileUri());
           $dirname = $file_system->dirname($new_uri);
           $file_system->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY);
-          file_move($file, $new_uri);
+          \Drupal::service('file.repository')->move($file, $new_uri);
           // Clear image page cache.
           $cache_tags[] = 'photos:image:' . $fid;
         }
@@ @@
 /**
  * Update access to album.
  *
- * @param \Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  *   The node being updated.
  * @param array $privacy_settings
  *   The album privacy settings.
@@ @@
   if (!\Drupal::moduleHandler()->moduleExists('filefield_paths')) {
     foreach ($entity->getFields() as $field) {
       if ($field instanceof FileFieldItemList) {
-        /** @var \Drupal\field\Entity\FieldConfig $definition */
+        /** @var FieldConfig $definition */
         $definition = $field->getFieldDefinition();
         // Ignore base fields.
         if ($definition instanceof ThirdPartySettingsInterface) {
@@ @@
  * Helper function to make sure file fields respect album privacy settings.
  */
 function _photos_access_move_field_image(EntityInterface $entity, FileFieldItemList $field) {
-  /** @var \Drupal\photos\Entity\PhotosImage $entity */
+  /** @var PhotosImage $entity */
   $album_node = \Drupal::entityTypeManager()->getStorage('node')->load($entity->getAlbumId());
   // Check album privacy settings.
   if (isset($album_node->photos_privacy) && isset($album_node->photos_privacy['viewid'])) {
@@ @@
       if (PrivateStream::basePath() && !empty($wrappers['private'])) {
         // Make sure private scheme is used.
         $file_wrapper = 'private://';
-        /** @var \Drupal\file\FileInterface $file */
+        /** @var FileInterface $file */
         foreach ($field->referencedEntities() as $file) {
           $old_file_wrapper = \Drupal::service('stream_wrapper_manager')
             ->getScheme($file->getFileUri()) . '://';
@@ @@
             $new_uri = str_replace($old_file_wrapper, $file_wrapper, $file->getFileUri());
             $dirname = $file_system->dirname($new_uri);
             $file_system->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY);
-            file_move($file, $new_uri);
+            \Drupal::service('file.repository')->move($file, $new_uri);
           }
         }
       }
    ----------- end diff -----------

Applied rules:
 * FileMoveRector
 * RenderRector
 * ArgumentRemoverRector


41) modules/contrib/photos/photos.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\FileInterface;
 /**
  * @file
  * Post update functions for Photos module.
@@ @@
       $sandbox['current_fid'] = $fid;
       try {
         $title = $result->title;
-        /** @var \Drupal\file\FileInterface $file */
+        /** @var FileInterface $file */
         $file = \Drupal::entityTypeManager()->getStorage('file')->load($fid);
         $image = \Drupal::service('image.factory')->get($file->getFileUri());
         if ($image) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


42) modules/contrib/photos/photos.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\photos\Entity\PhotosImage;
+use Drupal\photos\PhotosImageStorageInterface;
 /**
  * @file
  * Implementation of photos.module.
@@ @@
  * Implements hook_ENTITY_TYPE_delete().
  */
 function photos_photos_image_delete(PhotosImageInterface $photos_image) {
-  /** @var \Drupal\photos\Entity\PhotosImage $photos_image */
+  /** @var PhotosImage $photos_image */
   // If this entity is the album cover, clear it.
   $db = \Drupal::database();
   $db->update('photos_album')
@@ @@
       if (!file_exists($styleUri)) {
         $style->createDerivative($uri, $styleUri);
       }
-      $url = file_create_url($styleUri);
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($styleUri);
     }

     // Render image view.
@@ @@
  */
 function photos_preprocess_photos_image_block(&$variables) {
   // Prepare variables for photos_image_block.html.twig.
-  /** @var \Drupal\photos\Entity\PhotosImage $photos_image */
+  /** @var PhotosImage $photos_image */
   $photos_image = $variables['image']['photos_image'];
   $variables['created'] = \Drupal::service('date.formatter')->format($photos_image->getCreatedTime(), 'short');
   $variables['user_url'] = '';
@@ @@
 function template_preprocess_photos_image(array &$variables) {
   $variables['view_mode'] = $variables['elements']['#view_mode'];
   $variables['photos_image'] = $variables['elements']['#photos_image'];
-  /** @var \Drupal\photos\Entity\PhotosImage $photos_image */
+  /** @var PhotosImage $photos_image */
   $photos_image = $variables['photos_image'];

   // Get the album node.
@@ @@
 /**
  * Returns whether the current page is the photos_image page.
  *
- * @param \Drupal\photos\PhotosImageInterface $photos_image
+ * @param PhotosImageInterface $photos_image
  *   A photos_image entity.
  *
  * @return bool
@@ @@
 /**
  * Exif module integration, update exif data.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The photos_image entity.
  */
 function photos_image_update_exif_data(EntityInterface $entity) {
@@ @@
       ':cid' => $cid,
     ])->fetchField();
     if ($fid) {
-      /** @var \Drupal\photos\PhotosImageStorageInterface $photos_image_storage */
+      /** @var PhotosImageStorageInterface $photos_image_storage */
       $photos_image_storage = \Drupal::entityTypeManager()->getStorage('photos_image');
-      /** @var \Drupal\photos\PhotosImageInterface $photos_image */
+      /** @var PhotosImageInterface $photos_image */
       $photos_image_results = $photos_image_storage->getQuery()
         ->condition('field_image.target_id', $fid)
         ->execute();
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector


43) modules/contrib/photos/photos.install:326

    ---------- begin diff ----------
@@ @@
     $all_created = TRUE;
     // Only create if the photos view doesn't exist and views is enabled.
     if (!View::load('photos')) {
-      $config_path = drupal_get_path('module', 'photos') . '/config/optional/views.view.photos.yml';
+      $config_path = \Drupal::service('extension.list.module')->getPath('photos') . '/config/optional/views.view.photos.yml';
       $data = Yaml::parseFile($config_path);
       \Drupal::configFactory()->getEditable('views.view.photos')->setData($data)->save(TRUE);
     }
@@ @@
     }
     // Album view.
     if (!View::load('photos_album')) {
-      $config_path = drupal_get_path('module', 'photos') . '/config/optional/views.view.photos_album.yml';
+      $config_path = \Drupal::service('extension.list.module')->getPath('photos') . '/config/optional/views.view.photos_album.yml';
       $data = Yaml::parseFile($config_path);
       \Drupal::configFactory()->getEditable('views.view.photos_album')->setData($data)->save(TRUE);
     }
@@ @@
     }
     // Album list view.
     if (!View::load('photos_album_list')) {
-      $config_path = drupal_get_path('module', 'photos') . '/config/optional/views.view.photos_album_list.yml';
+      $config_path = \Drupal::service('extension.list.module')->getPath('photos') . '/config/optional/views.view.photos_album_list.yml';
       $data = Yaml::parseFile($config_path);
       \Drupal::configFactory()->getEditable('views.view.photos_album_list')->setData($data)->save(TRUE);
     }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 43 files have been changed by Rector                                      

