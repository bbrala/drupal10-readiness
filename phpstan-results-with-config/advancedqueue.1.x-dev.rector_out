modules/contrib/advancedqueue/advancedqueue.install
modules/contrib/advancedqueue/advancedqueue.module
modules/contrib/advancedqueue/advancedqueue.post_update.php
modules/contrib/advancedqueue/advancedqueue.views.inc
modules/contrib/advancedqueue/src/Annotation/AdvancedQueueBackend.php
modules/contrib/advancedqueue/src/Annotation/AdvancedQueueJobType.php
modules/contrib/advancedqueue/src/BackendManager.php
modules/contrib/advancedqueue/src/BackendPluginCollection.php
modules/contrib/advancedqueue/src/Commands/AdvancedQueueCommands.php
modules/contrib/advancedqueue/src/Entity/Queue.php
modules/contrib/advancedqueue/src/Entity/QueueInterface.php
modules/contrib/advancedqueue/src/Event/AdvancedQueueEvents.php
modules/contrib/advancedqueue/src/Event/JobEvent.php
modules/contrib/advancedqueue/src/Form/DeleteJob.php
modules/contrib/advancedqueue/src/Form/QueueForm.php
modules/contrib/advancedqueue/src/Form/ReleaseJob.php
modules/contrib/advancedqueue/src/Job.php
modules/contrib/advancedqueue/src/JobResult.php
modules/contrib/advancedqueue/src/JobTypeManager.php
modules/contrib/advancedqueue/src/Plugin/AdvancedQueue/Backend/BackendBase.php
modules/contrib/advancedqueue/src/Plugin/AdvancedQueue/Backend/BackendInterface.php
modules/contrib/advancedqueue/src/Plugin/AdvancedQueue/Backend/Database.php
modules/contrib/advancedqueue/src/Plugin/AdvancedQueue/Backend/NullBackend.php
modules/contrib/advancedqueue/src/Plugin/AdvancedQueue/Backend/SupportsDeletingJobsInterface.php
modules/contrib/advancedqueue/src/Plugin/AdvancedQueue/Backend/SupportsListingJobsInterface.php
modules/contrib/advancedqueue/src/Plugin/AdvancedQueue/Backend/SupportsReleasingJobsInterface.php
modules/contrib/advancedqueue/src/Plugin/AdvancedQueue/JobType/JobTypeBase.php
modules/contrib/advancedqueue/src/Plugin/AdvancedQueue/JobType/JobTypeInterface.php
modules/contrib/advancedqueue/src/Plugin/views/argument_validator/QueueBackend.php
modules/contrib/advancedqueue/src/Plugin/views/field/JobState.php
modules/contrib/advancedqueue/src/Plugin/views/field/JobType.php
modules/contrib/advancedqueue/src/Plugin/views/field/Json.php
modules/contrib/advancedqueue/src/Plugin/views/field/Operations.php
modules/contrib/advancedqueue/src/Processor.php
modules/contrib/advancedqueue/src/ProcessorInterface.php
modules/contrib/advancedqueue/src/QueueAccessControlHandler.php
modules/contrib/advancedqueue/src/QueueListBuilder.php
modules/contrib/advancedqueue/tests/modules/advancedqueue_test/src/Plugin/AdvancedQueue/JobType/Flexible.php
modules/contrib/advancedqueue/tests/modules/advancedqueue_test/src/Plugin/AdvancedQueue/JobType/Retry.php
modules/contrib/advancedqueue/tests/modules/advancedqueue_test/src/Plugin/AdvancedQueue/JobType/Simple.php
modules/contrib/advancedqueue/tests/modules/advancedqueue_test/src/Plugin/AdvancedQueue/JobType/Sleepy.php
modules/contrib/advancedqueue/tests/src/Functional/QueueTest.php
modules/contrib/advancedqueue/tests/src/Kernel/DatabaseBackendTest.php
modules/contrib/advancedqueue/tests/src/Kernel/ProcessorTest.php
modules/contrib/advancedqueue/tests/src/Unit/JobResultTest.php
modules/contrib/advancedqueue/tests/src/Unit/JobTest.php

26 files with changes
=====================

1) modules/contrib/advancedqueue/tests/src/Kernel/ProcessorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\advancedqueue\Kernel;

+use Drupal\advancedqueue\Entity\QueueInterface;
+use Drupal\advancedqueue\ProcessorInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\advancedqueue\Entity\Queue;
 use Drupal\advancedqueue\Job;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * The test queue.
    *
-   * @var \Drupal\advancedqueue\Entity\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * The processor being tested.
    *
-   * @var \Drupal\advancedqueue\ProcessorInterface
+   * @var ProcessorInterface
    */
   protected $processor;

@@ @@
     $num_processed = $this->processor->processQueue($this->queue);
     $this->assertEquals(4, $num_processed);

-    /** @var \Drupal\Core\Database\Connection $connection */
+    /** @var Connection $connection */
     $connection = $this->container->get('database');
     $raw_jobs = $connection->query('SELECT job_id, state, message FROM {advancedqueue}')->fetchAllAssoc('job_id', \PDO::FETCH_ASSOC);
     $this->assertEquals([
@@ @@
     $counts = $this->queue->getBackend()->countJobs();
     $this->assertEquals([Job::STATE_FAILURE => 1], array_filter($counts));

-    /** @var \Drupal\Core\Database\Connection $connection */
+    /** @var Connection $connection */
     $connection = $this->container->get('database');
     $raw_jobs = $connection->query('SELECT job_id, state, num_retries FROM {advancedqueue}')->fetchAllAssoc('job_id', \PDO::FETCH_ASSOC);
     $this->assertEquals([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/advancedqueue/tests/src/Kernel/DatabaseBackendTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\advancedqueue\Kernel;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\advancedqueue\Entity\QueueInterface;
 use Drupal\advancedqueue\Entity\Queue;
 use Drupal\advancedqueue\Job;
 use Drupal\Component\Datetime\TimeInterface;
@@ @@
  */
 class DatabaseBackendTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * The first tested queue.
    *
-   * @var \Drupal\advancedqueue\Entity\QueueInterface
+   * @var QueueInterface
    */
   protected $firstQueue;

@@ @@
   /**
    * The second tested queue.
    *
-   * @var \Drupal\advancedqueue\Entity\QueueInterface
+   * @var QueueInterface
    */
   protected $secondQueue;

@@ @@
    *   The expected queue ID.
    * @param int $expected_delay
    *   The expected delay.
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    */
   protected function assertQueuedJob($expected_id, $expected_queue_id, $expected_delay, Job $job) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/advancedqueue/tests/src/Functional/QueueTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\advancedqueue\Functional;

+use Drupal\user\UserInterface;
 use Drupal\advancedqueue\Entity\Queue;
 use Drupal\advancedqueue\Entity\QueueInterface;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/advancedqueue/src/QueueListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\advancedqueue;

+use Drupal\advancedqueue\Entity\QueueInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\advancedqueue\Entity\QueueInterface $entity */
+    /** @var QueueInterface $entity */
     $count_labels = [
       Job::STATE_QUEUED => $this->t('Queued'),
       Job::STATE_PROCESSING => $this->t('Processing'),
@@ @@
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\advancedqueue\Entity\QueueInterface $entity */
+    /** @var QueueInterface $entity */
     $operations = parent::getDefaultOperations($entity);

     if ($entity->getBackendId() === 'database') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/advancedqueue/src/QueueAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\advancedqueue;

+use Drupal\advancedqueue\Entity\QueueInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\advancedqueue\Entity\QueueInterface $entity */
+    /** @var QueueInterface $entity */
     $admin_permission = $entity->getEntityType()->getAdminPermission();
     if ($operation === 'delete') {
       if ($entity->isLocked()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/advancedqueue/src/ProcessorInterface.php:14

    ---------- begin diff ----------
@@ @@
    * Jobs will be claimed and processed one by one until the configured
    * processing time ($queue->getProcessingTime()) passes.
    *
-   * @param \Drupal\advancedqueue\Entity\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The queue.
    *
    * @return int
@@ @@
   /**
    * Processes the given job.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
-   * @param \Drupal\advancedqueue\Entity\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The parent queue.
    *
-   * @return \Drupal\advancedqueue\JobResult
+   * @return JobResult
    *   The job result.
    */
   public function processJob(Job $job, QueueInterface $queue);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/advancedqueue/src/Processor.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The current time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The job type manager.
    *
-   * @var \Drupal\advancedqueue\JobTypeManager
+   * @var JobTypeManager
    */
   protected $jobTypeManager;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a new Processor object.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The current time.
-   * @param \Drupal\advancedqueue\JobTypeManager $job_type_manager
+   * @param JobTypeManager $job_type_manager
    *   The queue job type manager.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher, TimeInterface $time, JobTypeManager $job_type_manager, LoggerInterface $logger = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/advancedqueue/src/Plugin/views/field/JobType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\advancedqueue\Plugin\views\field;

+use Drupal\advancedqueue\JobTypeManager;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;

@@ @@
    *   The job type labels, keyed by ID.
    */
   public static function getOptions() {
-    /** @var \Drupal\advancedqueue\JobTypeManager $job_type_manager */
+    /** @var JobTypeManager $job_type_manager */
     $job_type_manager = \Drupal::service('plugin.manager.advancedqueue_job_type');
     return array_map(function ($definition) {
       return $definition['label'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/advancedqueue/src/Plugin/AdvancedQueue/JobType/JobTypeInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\advancedqueue\Plugin\AdvancedQueue\JobType;

+use Drupal\advancedqueue\JobResult;
 use Drupal\advancedqueue\Job;
 use Drupal\Component\Plugin\PluginInspectionInterface;

@@ @@
   /**
    * Processes the given job.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    *
-   * @return \Drupal\advancedqueue\JobResult
+   * @return JobResult
    *   The job result.
    */
   public function process(Job $job);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/advancedqueue/src/Plugin/AdvancedQueue/Backend/Database.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TimeInterface $time, Connection $connection) {
@@ @@
       $this->connection->startTransaction();
     }

-    /** @var \Drupal\advancedqueue\Job $job */
+    /** @var Job $job */
     foreach ($jobs as $job) {
       $job->setQueueId($this->queueId);
       $job->setState(Job::STATE_QUEUED);
@@ @@
   /**
    * Updates the given job.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    */
   protected function updateJob(Job $job) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/advancedqueue/src/Plugin/AdvancedQueue/Backend/BackendInterface.php:69

    ---------- begin diff ----------
@@ @@
    * The job will be modified with the assigned queue ID, job ID, and
    * relevant timestamps.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    * @param int $delay
    *   The time, in seconds, after which the job will become available to
@@ @@
    * Each job will be modified with the assigned queue ID, job ID, and
    * relevant timestamps.
    *
-   * @param \Drupal\advancedqueue\Job[] $jobs
+   * @param Job[] $jobs
    *   The jobs.
    * @param int $delay
    *   The time, in seconds, after which the jobs will become available to
@@ @@
   /**
    * Retries the given job.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    * @param int $delay
    *   The time, in seconds, after which the retried job will become available
@@ @@
   /**
    * Claims the next available job for processing.
    *
-   * @return \Drupal\advancedqueue\Job|null
+   * @return Job|null
    *   The job, or NULL if none available.
    */
   public function claimJob();
@@ @@
   /**
    * Called when a job has been successfully processed.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    */
   public function onSuccess(Job $job);
@@ @@
    * Non-SQL backends that wish to preserve failed jobs can use this method
    * to populate a failure/dead-letter queue.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    */
   public function onFailure(Job $job);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/advancedqueue/src/Plugin/AdvancedQueue/Backend/BackendBase.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TimeInterface $time) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/advancedqueue/src/JobTypeManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/advancedqueue/src/Form/ReleaseJob.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The queue.
    *
-   * @var \Drupal\advancedqueue\Entity\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/advancedqueue/src/Form/QueueForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\advancedqueue\Form;

+use Drupal\advancedqueue\Plugin\AdvancedQueue\Backend\BackendInterface;
 use Drupal\advancedqueue\BackendManager;
 use Drupal\advancedqueue\Entity\QueueInterface;
 use Drupal\Component\Utility\Html;
@@ @@
   /**
    * The backend plugin manager.
    *
-   * @var \Drupal\advancedqueue\BackendManager
+   * @var BackendManager
    */
   protected $backendManager;

@@ @@
   /**
    * Constructs a new QueueForm object.
    *
-   * @param \Drupal\advancedqueue\BackendManager $backend_manager
+   * @param BackendManager $backend_manager
    *   The backend plugin manager.
    */
   public function __construct(BackendManager $backend_manager) {
@@ @@
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\advancedqueue\Entity\QueueInterface $queue */
+    /** @var QueueInterface $queue */
     $queue = $this->entity;
     $backends = array_column($this->backendManager->getDefinitions(), 'label', 'id');
     asort($backends);
@@ @@
     parent::submitForm($form, $form_state);

     $values = $form_state->getValues();
-    /** @var \Drupal\advancedqueue\Plugin\AdvancedQueue\Backend\BackendInterface $backend */
+    /** @var BackendInterface $backend */
     $backend = $this->backendManager->createInstance($values['backend'], $form['configuration']['#default_configuration']);
     $backend->submitConfigurationForm($form['configuration'], $form_state);
-    /** @var \Drupal\advancedqueue\Entity\QueueInterface $queue */
+    /** @var QueueInterface $queue */
     $queue = $this->entity;
     $queue->setBackendConfiguration($backend->getConfiguration());
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/advancedqueue/src/Form/DeleteJob.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The queue.
    *
-   * @var \Drupal\advancedqueue\Entity\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/advancedqueue/src/Event/JobEvent.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The job.
    *
-   * @var \Drupal\advancedqueue\Job
+   * @var Job
    */
   protected $job;

@@ @@
   /**
    * Constructs a new JobEvent object.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    */
   public function __construct(Job $job) {
@@ @@
   /**
    * Gets the job.
    *
-   * @return \Drupal\advancedqueue\Job
+   * @return Job
    *   The job.
    */
   public function getJob() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/advancedqueue/src/Entity/QueueInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\advancedqueue\Entity;

+use Drupal\advancedqueue\Plugin\AdvancedQueue\Backend\BackendInterface;
 use Drupal\advancedqueue\Job;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
@@ @@
    * The job will be modified with the assigned queue ID, job ID, and
    * relevant timestamps.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    * @param int $delay
    *   The time, in seconds, after which the job will become available to
@@ @@
    * Each job will be modified with the assigned queue ID, job ID, and
    * relevant timestamps.
    *
-   * @param \Drupal\advancedqueue\Job[] $jobs
+   * @param Job[] $jobs
    *   The jobs.
    * @param int $delay
    *   The time, in seconds, after which the jobs will become available to
@@ @@
   /**
    * Gets the backend plugin.
    *
-   * @return \Drupal\advancedqueue\Plugin\AdvancedQueue\Backend\BackendInterface
+   * @return BackendInterface
    *   The backend plugin.
    */
   public function getBackend();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/advancedqueue/src/Entity/Queue.php:111

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin collection that holds the backend plugin.
    *
-   * @var \Drupal\advancedqueue\BackendPluginCollection
+   * @var BackendPluginCollection
    */
   protected $pluginCollection;

@@ @@
    *
    * Ensures the plugin collection is initialized before returning it.
    *
-   * @return \Drupal\advancedqueue\BackendPluginCollection
+   * @return BackendPluginCollection
    *   The backend plugin collection.
    */
   protected function getBackendCollection() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/advancedqueue/src/Commands/AdvancedQueueCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\advancedqueue\Commands;

+use Drupal\advancedqueue\Entity\QueueInterface;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\advancedqueue\Job;
 use Drupal\advancedqueue\ProcessorInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The queue processor.
    *
-   * @var \Drupal\advancedqueue\ProcessorInterface
+   * @var ProcessorInterface
    */
   protected $processor;

@@ @@
   /**
    * Constructs a new AdvancedQueueCommands object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\advancedqueue\ProcessorInterface $processor
+   * @param ProcessorInterface $processor
    *   The queue processor.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ProcessorInterface $processor) {
@@ @@
    */
   public function process($queue_id) {
     $queue_storage = $this->entityTypeManager->getStorage('advancedqueue_queue');
-    /** @var \Drupal\advancedqueue\Entity\QueueInterface $queue */
+    /** @var QueueInterface $queue */
     $queue = $queue_storage->load($queue_id);
     if (!$queue) {
       throw new \Exception(dt('Could not find queue "@queue_id".', ['@queue_id' => $queue_id]));
@@ @@
    *   label: Label
    *   jobs: Jobs
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The output.
    *
    * @command advancedqueue:queue:list
@@ @@
     $queue_storage = $this->entityTypeManager->getStorage('advancedqueue_queue');
     $rows = [];
     foreach ($queue_storage->loadMultiple() as $queue) {
-      /** @var \Drupal\advancedqueue\Entity\QueueInterface $queue */
+      /** @var QueueInterface $queue */
       $jobs = [];
       foreach ($queue->getBackend()->countJobs() as $state => $count) {
         $jobs[] = sprintf('%s: %s', $count_labels[$state], $count);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/advancedqueue/src/BackendPluginCollection.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new BackendPluginCollection object.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The manager to be used for instantiating plugins.
    * @param string $instance_id
    *   The ID of the plugin instance.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/advancedqueue/src/BackendManager.php:29

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/advancedqueue/src/Annotation/AdvancedQueueJobType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\advancedqueue\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


24) modules/contrib/advancedqueue/src/Annotation/AdvancedQueueBackend.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\advancedqueue\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


25) modules/contrib/advancedqueue/advancedqueue.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 /**
  * @file
  * Post update functions for Advanced Queue.
@@ @@
  * Replace the "advancedqueue_jobs" view with the updated version.
  */
 function advancedqueue_post_update_1() {
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $view_storage */
+  /** @var ConfigEntityStorageInterface $view_storage */
   $view_storage = \Drupal::entityTypeManager()->getStorage('view');
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $view */
+  /** @var ConfigEntityInterface $view */
   $view = $view_storage->load('advancedqueue_jobs');
   if (!$view) {
     return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


26) modules/contrib/advancedqueue/advancedqueue.module:12

    ---------- begin diff ----------
@@ @@
 function advancedqueue_cron() {
   $queue_processor = \Drupal::service('advancedqueue.processor');
   $queue_storage = \Drupal::entityTypeManager()->getStorage('advancedqueue_queue');
-  /** @var \Drupal\advancedqueue\Entity\QueueInterface[] $queues */
+  /** @var QueueInterface[] $queues */
   $queues = $queue_storage->loadByProperties(['processor' => QueueInterface::PROCESSOR_CRON]);
   foreach ($queues as $queue) {
     $queue_processor->processQueue($queue);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 26 files have been changed by Rector                                      

