modules/contrib/moodle_rest/modules/moodle_rest_migrate/src/Plugin/migrate/process/MoodleFile.php
modules/contrib/moodle_rest/modules/moodle_rest_migrate/src/Plugin/migrate/source/MoodleBase.php
modules/contrib/moodle_rest/modules/moodle_rest_migrate/src/Plugin/migrate/source/MoodleGetCoursesByField.php
modules/contrib/moodle_rest/modules/moodle_rest_migrate/tests/modules/moodle_rest_migrate_test/moodle_rest_migrate_test.module
modules/contrib/moodle_rest/modules/moodle_rest_migrate/tests/src/Kernel/Plugin/migrate/process/MoodleFileTest.php
modules/contrib/moodle_rest/modules/moodle_rest_migrate/tests/src/Kernel/Plugin/migrate/source/MoodleBaseTest.php
modules/contrib/moodle_rest/modules/moodle_rest_user/moodle_rest_user.module
modules/contrib/moodle_rest/modules/moodle_rest_user/src/Commands/MoodleDrushCommands.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/Controller/CourseController.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/Event/MoodleUserAssociate.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/Event/MoodleUserMap.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/EventSubscriber/AssociateEventSubscriber.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/EventSubscriber/UserMapSubscriber.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/ExtraFields.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/Form/SettingsForm.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/UserBatchHelper.php
modules/contrib/moodle_rest/modules/moodle_rest_user/src/UserEventHelper.php
modules/contrib/moodle_rest/modules/moodle_rest_user/tests/src/Kernel/UserEventHelperTest.php
modules/contrib/moodle_rest/moodle_rest.install
modules/contrib/moodle_rest/src/Form/MoodleSettingsForm.php
modules/contrib/moodle_rest/src/Plugin/Field/FieldFormatter/MoodleIdFormatter.php
modules/contrib/moodle_rest/src/Plugin/Field/FieldFormatter/MoodleIdLinkFormatter.php
modules/contrib/moodle_rest/src/Plugin/Field/FieldType/MoodleId.php
modules/contrib/moodle_rest/src/Plugin/Field/FieldWidget/MoodleIdWidget.php
modules/contrib/moodle_rest/src/Services/MoodleRest.php
modules/contrib/moodle_rest/src/Services/MoodleRestException.php
modules/contrib/moodle_rest/src/Services/RestFunctions.php
modules/contrib/moodle_rest/tests/src/Kernel/Fixtures/MoodleFixturesTrait.php
modules/contrib/moodle_rest/tests/src/Kernel/Fixtures/v3.php
modules/contrib/moodle_rest/tests/src/Kernel/FunctionsServiceTest.php
modules/contrib/moodle_rest/tests/src/Kernel/RestServiceTest.php

20 files with changes
=====================

1) modules/contrib/moodle_rest/tests/src/Kernel/RestServiceTest.php:35

    ---------- begin diff ----------
@@ @@
    * Check configuration handling in request.
    */
   public function testConfig(): void {
-    $http_client = $this->getMockBuilder(ClientInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(ClientInterface::class);
     $http_client->expects($this->once())
       ->method('request')
       ->with(
@@ @@
    * Test wsfunction call.
    */
   public function testRequestFunction(): void {
-    $http_client = $this->getMockBuilder(ClientInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(ClientInterface::class);
     $http_client->expects($this->exactly(2))
       ->method('request')
       ->withConsecutive([
@@ @@
    * Test guzzle exception.
    */
   public function testRequestException(): void {
-    $http_client = $this->getMockBuilder(ClientInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(ClientInterface::class);
     $http_client->expects($this->any())
       ->method('request')
       ->will($this->throwException(new TransferException()));
@@ @@
    * Test Moodle exceptions.
    */
   public function testMoodleException(): void {
-    $http_client = $this->getMockBuilder(ClientInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(ClientInterface::class);
     $http_client->expects($this->exactly(2))
       ->method('request')
       ->willReturnOnConsecutiveCalls(
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/moodle_rest/tests/src/Kernel/FunctionsServiceTest.php:28

    ---------- begin diff ----------
@@ @@
    */
   public function testSiteInfo(array $result): void {
     // Use default REST client from container.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_webservice_get_site_info')
@@ @@
    * Test handling exceptions in siteInfo field methods.
    */
   public function testSiteInfoExceptions(): void {
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->any())
       ->method('requestFunction')
       ->will($this->throwException(new MoodleRestException('', 500)));
@@ @@
     $this->assertEquals('', $rest_functions->getSiteInfoSitename());
     $this->assertEquals([], $rest_functions->getSiteInfoFunctions());

-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->any())
       ->method('requestFunction')
       ->will($this->throwException(new MoodleRestException('', 403, NULL, ['errorcode' => 'accessexception'])));
@@ @@
    */
   public function testSwitchRestClient(): void {
     // Use default REST client from container.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_webservice_get_site_info')
@@ @@
     $rest_functions = $this->container->get('moodle_rest.rest_functions');
     $this->assertEquals(['original_result'], $rest_functions->getSiteInfo());

-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_webservice_get_site_info')
@@ @@
    */
   public function testGetCourses(array $result): void {
     // Use default REST client from container.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_course_get_courses')
@@ @@
    */
   public function testGetCoursesByField(array $result): void {
     // Use default REST client from container.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_course_get_courses_by_field')
@@ @@

     // Request a single course id.
     // Then request courses and get an access denied on one.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->any())
       ->method('requestFunction')
       ->withConsecutive(
@@ @@
         ],
       );
     $this->container->set('moodle_rest.rest_ws', $rest);
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock(LoggerInterface::class);
     $logger->expects($this->once())
       ->method('warning');
     $this->container->set('logger.channel.moodle_rest', $logger);
@@ @@
     $this->assertEquals([['id' => 1]], $rest_functions->getCoursesByField('ids', '1,2'));

     // Send incorrect parameters get an exception.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->will(
@@ @@
     ];
     $delete_users = [3, 6];

-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->any())
       ->method('requestFunction')
       ->withConsecutive(
@@ @@
    */
   public function testGetUsers(array $result): void {
     // Use default REST client from container.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_user_get_users', [
@@ @@
    */
   public function testGetUsersByField(array $result): void {
     // Use default REST client from container.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_user_get_users_by_field', [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/moodle_rest/src/Services/RestFunctions.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The Rest WS connector.
    *
-   * @var \Drupal\moodle_rest\Services\MoodleRest
+   * @var MoodleRest
    */
   protected $rest;

@@ @@
   /**
    * The module logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a RestFunctions object.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.channel.moodle_rest service.
    */
   public function __construct(LoggerInterface $logger) {
@@ @@
    *
    * Moodle `core_webservice_*` functions.
    */
-
   /**
    * Get some site info / user info / list web service functions.
    *
@@ @@
    * @return array
    *   Array as defined by version of Moodle.
    *
-   * @throws \Drupal\moodle_rest\Services\MoodleRestException
+   * @throws MoodleRestException
    */
   public function getSiteInfo() {
     if (empty(self::$cache['site_info'])) {
@@ @@
    *
    * @see https://github.com/moodle/moodle/blob/master/user/externallib.php
    */
-
   /**
    * Create Users.
    *
@@ @@
    *     username string user name
    *   ].
    *
-   * @throws \Drupal\moodle_rest\Services\MoodleRestException
+   * @throws MoodleRestException
    *   Notably: Invalid parameter value detected. Including with message
    *   Invalid parameter value detected (Username already exists: username).
    */
@@ @@
    * @param array $users
    *   Array of users. Required key 'id', and fields to update.
    *
-   * @throws \Drupal\moodle_rest\Services\MoodleRestException
+   * @throws MoodleRestException
    */
   public function updateUsers(array $users): void {
     $this->getRestClient()->requestFunction('core_user_update_users', ['users' => $users]);
@@ @@
    * @param int[] $user_ids
    *   User IDs.
    *
-   * @throws \Drupal\moodle_rest\Services\MoodleRestException
+   * @throws MoodleRestException
    */
   public function deleteUsers(array $user_ids): void {
     $this->getRestClient()->requestFunction('core_user_delete_users', ['userids' => $user_ids]);
@@ @@
    * @return array
    *   Array of matching users.
    *
-   * @throws \Drupal\moodle_rest\Services\MoodleRestException
+   * @throws MoodleRestException
    */
   public function getUsers(array $criteria): array {
     $arguments = [];
@@ @@
    * @return array
    *   Array of matching users.
    *
-   * @throws \Drupal\moodle_rest\Services\MoodleRestException
+   * @throws MoodleRestException
    */
   public function getUsersByField(string $field, array $values): array {
     return $this->getRestClient()->requestFunction('core_user_get_users_by_field', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/moodle_rest/src/Services/MoodleRest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\moodle_rest\Services;

+use GuzzleHttp\Psr7\Response;
 use GuzzleHttp\ClientInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use GuzzleHttp\Exception\TransferException;
@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a MoodleRest object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The HTTP client.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ClientInterface $http_client) {
@@ @@
    * @return mixed
    *   NULL, string or array as defined by the Webservice Function.
    *
-   * @throws \Drupal\moodle_rest\Services\MoodleRestException
+   * @throws MoodleRestException
    */
   public function requestFunction($name, array $params = []) {
     $host = $this->getBaseUrl();
@@ @@
    * @param string $type
    *   Optional request type.
    *
-   * @return \GuzzleHttp\Psr7\Response
+   * @return Response
    *   Guzzle response object.
    *
-   * @throws \Drupal\moodle_rest\Services\MoodleRestException
-   * @throws \GuzzleHttp\Exception\TransferException
+   * @throws MoodleRestException
+   * @throws TransferException
    */
   public function request(array $options, $type = 'GET') {
     $host = $this->getBaseUrl();
@@ @@
    *   if it was an external link. The repository may have to export the file
    *   to an offline format.
    *
-   * @return \GuzzleHttp\Psr7\Response
+   * @return Response
    *   Guzzle response object.
    *
-   * @throws \Drupal\moodle_rest\Services\MoodleRestException
-   * @throws \GuzzleHttp\Exception\TransferException
+   * @throws MoodleRestException
+   * @throws TransferException
    */
   public function requestFile($url, $preview = '', $offline = NULL) {
     $host = $this->getBaseUrl();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/moodle_rest/src/Plugin/Field/FieldFormatter/MoodleIdLinkFormatter.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The Moodle REST settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $moodleSettings;

@@ @@
   /**
    * Set Moodle settings.
    *
-   * @param \Drupal\Core\Config\ImmutableConfig $settings
+   * @param ImmutableConfig $settings
    *   The Moodle REST settings.
    */
   public function setMoodleSettings(ImmutableConfig $settings) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/moodle_rest/modules/moodle_rest_user/tests/src/Kernel/UserEventHelperTest.php:68

    ---------- begin diff ----------
@@ @@
     $this->assertEquals($pull, $settings->get('pull_fields'));

     // Create user. Default config. No ID found.
-    $event_dispatcher = $this->getMockBuilder(EventDispatcherInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $event_dispatcher = $this->createMock(EventDispatcherInterface::class);
     $event_dispatcher->expects($this->once())
       ->method('dispatch');
     $this->container->set('event_dispatcher', $event_dispatcher);
@@ @@
     // Would be nice to run this via calling the
     // UserEventHelper::associateAccount method calling the event subscribers
     // however it serializes the required mock which breaks phpunit.
-    $moodle = $this->getMockBuilder(RestFunctions::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $moodle = $this->createMock(RestFunctions::class);
     $moodle->expects($this->once())
       ->method('getUsersByField')
       ->with('email', ['two@example.com'])
@@ @@

   /**
    * Test create user.
+   * @doesNotPerformAssertions
    */
   public function testCreateUser(): void {
     $settings = $this->container->get('config.factory')
@@ @@
     ]);
     $settings->save();

-    $moodle = $this->getMockBuilder(RestFunctions::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $moodle = $this->createMock(RestFunctions::class);
     $moodle->expects($this->once())
       ->method('createUsers')
       ->with([
@@ @@
     $settings->save();

     // Use default REST client from container.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->once())
       ->method('requestFunction')
       ->with('core_user_get_users', [
@@ @@
     \Drupal::entityTypeManager()->getStorage('user')->resetCache();
     $account = User::load($account->id());

-    $this->assertEqual($account->getAccountName(), 'student_one');
-    $this->assertEqual($account->getEmail(), 'one@example.com');
+    $this->assertEquals($account->getAccountName(), 'student_one');
+    $this->assertEquals($account->getEmail(), 'one@example.com');
   }

   /**
@@ @@
    * Test push users.
    */
   public function testPushUsers(): void {
-    $moodle = $this->getMockBuilder(RestFunctions::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $moodle = $this->createMock(RestFunctions::class);
     $moodle->expects($this->once())
       ->method('updateUsers')
       ->with([
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/moodle_rest/modules/moodle_rest_user/src/UserEventHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\moodle_rest_user;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Module settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;

@@ @@
   /**
    * Moodle Rest Functions connector.
    *
-   * @var \Drupal\moodle_rest\Services\RestFunctions
+   * @var RestFunctions
    */
   protected $moodle;

@@ @@
   /**
    * User Event Helper constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\moodle_rest\Services\RestFunctions $moodle
+   * @param RestFunctions $moodle
    *   The Moodle REST Functions connector.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher, ConfigFactoryInterface $config_factory, RestFunctions $moodle) {
@@ @@
    */
   public function associateAccount(UserInterface $account): int {
     $event = new MoodleUserAssociate($account);
-    $this->eventDispatcher->dispatch(MoodleUserAssociate::EVENT_NAME, $event);
+    $this->eventDispatcher->dispatch($event, MoodleUserAssociate::EVENT_NAME);
     return $event->moodleId;
   }

@@ @@
   /**
    * Push a new user into Moodle.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user to be added to Moodle.
    */
   protected function createMoodleUser(UserInterface $account) {
@@ @@
     $row = new Row($source, array_flip(array_column($mapping, 'drupal')));
     // @todo Map can throw an exception for missing fields?
     $event = new MoodleUserMap($row, $mapping);
-    $this->eventDispatcher->dispatch(MoodleUserMap::PUSH_EVENT, $event);
+    $this->eventDispatcher->dispatch($event, MoodleUserMap::PUSH_EVENT);
     try {
       $result = $this->moodle->createUsers([$event->row->getDestination()]);
       $result = reset($result);
@@ @@
   /**
    * Pull user fields from Moodle to a user.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account to be pulled.
    * @param int $moodle_id
    *   Moodle ID of account.
@@ @@
       $mapping = $this->settings->get('pull_fields');
       $row = new Row($moodle_user, array_flip(array_column($mapping, 'moodle')));
       $event = new MoodleUserMap($row, $mapping);
-      $this->eventDispatcher->dispatch(MoodleUserMap::PULL_EVENT, $event);
+      $this->eventDispatcher->dispatch($event, MoodleUserMap::PULL_EVENT);
       foreach ($row->getDestination() as $field_name => $values) {
         $field = $update_account->$field_name;
         if ($field instanceof TypedDataInterface) {
@@ @@
   /**
    * Push user fields to a Moodle user.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user accout to push.
    * @param int $moodle_id
    *   Moodle ID of account.
@@ @@
     $row = new Row($source, array_flip(array_column($mapping, 'drupal')));
     // @todo Map can throw an exception for missing fields?
     $event = new MoodleUserMap($row, $mapping);
-    $this->eventDispatcher->dispatch(MoodleUserMap::PUSH_EVENT, $event);
+    $this->eventDispatcher->dispatch($event, MoodleUserMap::PUSH_EVENT);
     try {
       $mapped_fields = $event->row->getDestination();
       $mapped_fields['id'] = $moodle_id;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/moodle_rest/modules/moodle_rest_user/src/UserBatchHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\moodle_rest_user;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\user\UserStorage;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Module settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;

@@ @@
   /**
    * User storage.
    *
-   * @var \Drupal\user\UserStorage
+   * @var UserStorage
    */
   protected $userStorage;

@@ @@
   /**
    * Batch Helper constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event Dispatcher.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
@@ @@

     try {
       $event = new MoodleUserAssociate($account);
-      $this->eventDispatcher->dispatch(MoodleUserAssociate::EVENT_NAME, $event);
+      $this->eventDispatcher->dispatch($event, MoodleUserAssociate::EVENT_NAME);
     }
     catch (ServicesMoodleRestException $e) {
       \watchdog_exception('issup_moodle', $e, '%type: @message "@body" in %function (line %line of %file).', ['@body' => $e->getBody()['exception']]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/moodle_rest/modules/moodle_rest_user/src/Form/SettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityFieldManagerInterface $entity_field_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/moodle_rest/modules/moodle_rest_user/src/ExtraFields.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Moodle REST functions service.
    *
-   * @var \Drupal\moodle_rest\Services\RestFunctions
+   * @var RestFunctions
    */
   protected $moodle;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Current Route Match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * DirectoryExtraFieldDisplay constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\moodle_rest\Services\RestFunctions $moodle
+   * @param RestFunctions $moodle
    *   Moodle REST functions service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Current user.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   Current Route Match.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RestFunctions $moodle, AccountProxyInterface $current_user, RouteMatchInterface $route_match, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/moodle_rest/modules/moodle_rest_user/src/EventSubscriber/UserMapSubscriber.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Map fields from Drupal User Account to Moodle Account.
    *
-   * @param \Drupal\moodle_rest_user\Event\MoodleUserMap $event
+   * @param MoodleUserMap $event
    *   Mapping event.
    */
   public function mapToMoodle(MoodleUserMap $event) {
@@ @@
   /**
    * Map fields from Drupal User Account to Moodle Account.
    *
-   * @param \Drupal\moodle_rest_user\Event\MoodleUserMap $event
+   * @param MoodleUserMap $event
    *   Mapping event.
    */
   public function mapToDrupal(MoodleUserMap $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/moodle_rest/modules/moodle_rest_user/src/EventSubscriber/AssociateEventSubscriber.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Moodle REST functions.
    *
-   * @var \Drupal\moodle_rest\Services\RestFunctions
+   * @var RestFunctions
    */
   protected $moodle;

@@ @@
   /**
    * Subscribe to the user login event dispatched.
    *
-   * @param \Drupal\moodle_rest_user\Event\MoodleUserAssociate $event
+   * @param MoodleUserAssociate $event
    *   User association event.
    */
   public function associateByEmail(MoodleUserAssociate $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/moodle_rest/modules/moodle_rest_user/src/Event/MoodleUserMap.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\moodle_rest_user\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\migrate\Row;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Map fields for push to, pull from, Moodle.
@@ @@
    * there and calling the NestedArray functions. Well that and having a source
    * and destination.
    *
-   * @var \Drupal\migrate\Row
+   * @var Row
    */
   public $row;

@@ @@
   /**
    * Event constructor.
    *
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row being mapped.
    * @param array $config
    *   The mapping configuration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/moodle_rest/modules/moodle_rest_user/src/Event/MoodleUserAssociate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\moodle_rest_user\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\user\UserInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * A matching Moodle acount is trying to be found for a user entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/moodle_rest/modules/moodle_rest_user/src/Controller/CourseController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Moodle Rest Functions Service.
    *
-   * @var \Drupal\moodle_rest\Services\RestFunctions
+   * @var RestFunctions
    */
   protected $moodle;

@@ @@
   /**
    * Construct for Course Controller.
    *
-   * @param Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param Drupal\moodle_rest\Services\RestFunctions $moodle
+   * @param RestFunctions $moodle
    *   Moodle rest functions service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RestFunctions $moodle) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/moodle_rest/modules/moodle_rest_user/src/Commands/MoodleDrushCommands.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Moodle Batch helper class.
    *
-   * @var \Drupal\moodle_rest_user\UserBatchHelper
+   * @var UserBatchHelper
    */
   protected $batchHelper;

@@ @@
   /**
    * Entity type service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/moodle_rest/modules/moodle_rest_migrate/tests/src/Kernel/Plugin/migrate/source/MoodleBaseTest.php:42

    ---------- begin diff ----------
@@ @@
     $this->installConfig(['node', 'moodle_rest_migrate_test']);

     // Mock results from Moodle Server.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->any())
       ->method('requestFunction')
       ->with('core_course_get_courses')
@@ @@
     $this->installConfig(['node', 'moodle_rest_migrate_test']);

     // Mock results from Moodle Server.
-    $rest = $this->getMockBuilder(MoodleRest::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rest = $this->createMock(MoodleRest::class);
     $rest->expects($this->any())
       ->method('requestFunction')
       ->with('core_course_get_courses_by_field')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/moodle_rest/modules/moodle_rest_migrate/tests/src/Kernel/Plugin/migrate/process/MoodleFileTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\moodle_rest_migrate\Kernel\Plugin\migrate\process;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\KernelTests\Core\File\FileTestBase;
 use Drupal\migrate\MigrateExecutableInterface;
@@ @@
  */
 class MoodleFileTest extends FileTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/moodle_rest/modules/moodle_rest_migrate/src/Plugin/migrate/source/MoodleBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\moodle_rest_migrate\Plugin\migrate\source;

+use Drupal\migrate\MigrateException;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\moodle_rest\Services\MoodleRest;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   public function initializeIterator() {
     foreach ($this->getResults() as $result) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/moodle_rest/modules/moodle_rest_migrate/src/Plugin/migrate/process/MoodleFile.php:61

    ---------- begin diff ----------
@@ @@
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The Moodle rest connection.
    *
-   * @var \Drupal\moodle_rest\Services\MoodleRest
+   * @var MoodleRest
    */
   protected $moodle;

@@ @@
    *   The plugin ID.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrappers
+   * @param StreamWrapperManagerInterface $stream_wrappers
    *   The stream wrapper manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\moodle_rest\Services\MoodleRest $moodle
+   * @param MoodleRest $moodle
    *   The moodle rest connection.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, StreamWrapperManagerInterface $stream_wrappers, EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system, MoodleRest $moodle) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 20 files have been changed by Rector                                      

