modules/contrib/sm_appdashboard_apigee/modules/sm_appdashboard_apigee_rules/sm_appdashboard_apigee_rules.module
modules/contrib/sm_appdashboard_apigee/modules/sm_appdashboard_apigee_rules/src/Event/AppdashboardEvent.php
modules/contrib/sm_appdashboard_apigee/modules/sm_appdashboard_apigee_rules/src/Event/AppdashboardStatusApprovedEvent.php
modules/contrib/sm_appdashboard_apigee/modules/sm_appdashboard_apigee_rules/src/Event/AppdashboardStatusRevokedEvent.php
modules/contrib/sm_appdashboard_apigee/sm_appdashboard_apigee.install
modules/contrib/sm_appdashboard_apigee/sm_appdashboard_apigee.module
modules/contrib/sm_appdashboard_apigee/src/AppsDashboardStorageService.php
modules/contrib/sm_appdashboard_apigee/src/AppsDashboardStorageServiceInterface.php
modules/contrib/sm_appdashboard_apigee/src/Controller/AppsDashboardController.php
modules/contrib/sm_appdashboard_apigee/src/Form/AppDetailsEditForm.php
modules/contrib/sm_appdashboard_apigee/src/Form/AppDetailsSearchForm.php
modules/contrib/sm_appdashboard_apigee/tests/src/Unit/Controller/AppsDashboardControllerTest.php

8 files with changes
====================

1) modules/contrib/sm_appdashboard_apigee/tests/src/Unit/Controller/AppsDashboardControllerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sm_appdashboard_apigee\Unit\Controller;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\apigee_edge\Entity\DeveloperApp;
 use Drupal\Core\Form\FormBuilder;
 use Drupal\sm_appdashboard_apigee\AppsDashboardStorageService;
@@ @@
  */
 class AppsDashboardControllerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The AppsDashboardController.
    *
-   * @var \Drupal\sm_appdashboard_apigee\Controller\AppsDashboardController
+   * @var AppsDashboardController
    */
   protected $appsDashboardController;

@@ @@
   /**
    * The AppsDashboardStorageService under test.
    *
-   * @var \Drupal\sm_appdashboard_apigee\AppsDashboardStorageService
+   * @var AppsDashboardStorageService
    */
   protected $appsDashboardStorage;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The Form Builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->appsDashboardStorage = $this->prophesize(AppsDashboardStorageService::class);
     $this->formBuilder = $this->prophesize(FormBuilder::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/sm_appdashboard_apigee/src/Form/AppDetailsSearchForm.php:19

    ---------- begin diff ----------
@@ @@
  * with this program; if not, write to the Free Software Foundation, Inc.,
  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
-
+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/sm_appdashboard_apigee/src/Form/AppDetailsEditForm.php:19

    ---------- begin diff ----------
@@ @@
  * with this program; if not, write to the Free Software Foundation, Inc.,
  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
-
+use Drupal\apigee_edge\SDKConnectorInterface;
+use Drupal\sm_appdashboard_apigee\AppsDashboardStorageServiceInterface;
+use Drupal\Core\Messenger\MessengerInterface;
+use Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerFactoryInterface;
+use Drupal\apigee_edge_teams\Entity\Controller\TeamAppCredentialControllerFactoryInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Apigee\Edge\Exception\ApiException;
 use Apigee\Edge\Exception\ApiRequestException;
 use Apigee\Edge\Exception\ClientErrorException;
@@ @@
   /**
    * The SDK connector service.
    *
-   * @var \Drupal\apigee_edge\SDKConnectorInterface
+   * @var SDKConnectorInterface
    */
   protected $connector;

@@ @@
   /**
    * AppsDashboardStorageServiceInterface definition.
    *
-   * @var Drupal\sm_appdashboard_apigee\AppsDashboardStorageServiceInterface
+   * @var AppsDashboardStorageServiceInterface
    */
   protected $appsDashboardStorage;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * DeveloperAppCredentialControllerFactoryInterface definition.
    *
-   * @var \Drupal\apigee_edge\Entity\Controller\DeveloperAppCredentialControllerFactoryInterface
+   * @var DeveloperAppCredentialControllerFactoryInterface
    */
   protected $developerAppCredentialControllerFactory;

@@ @@
   /**
    * TeamAppCredentialControllerFactoryInterface definition.
    *
-   * @var \Drupal\apigee_edge_teams\Entity\Controller\TeamAppCredentialControllerFactoryInterface
+   * @var TeamAppCredentialControllerFactoryInterface
    */
   protected $teamAppCredentialControllerFactory;

@@ @@
   /**
    * ModuleHandlerInterface definition.
    *
-   * @var Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * EventDispatcherInterface definition.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
         $app_entity_id = $form_state->getValue('app_id');
         $app_entity = $this->appsDashboardStorage->getAppDetailsById($app_entity_type, $app_entity_id);
         $status_event_change = new AppdashboardEvent($app_entity);
-        $this->eventDispatcher->dispatch(AppdashboardEvent::APP_STATUS_CHANGE, $status_event_change);
+        $this->eventDispatcher->dispatch($status_event_change, AppdashboardEvent::APP_STATUS_CHANGE);
         // Dispatch event if app status is changed from revoked to approved.
         if ($product_previous_status === 'revoked' && $product_status === 'approved') {
           $event_approved = new AppdashboardStatusApprovedEvent($app_entity);
-          $this->eventDispatcher->dispatch(AppdashboardStatusApprovedEvent::APP_STATUS_APPROVED, $event_approved);
+          $this->eventDispatcher->dispatch($event_approved, AppdashboardStatusApprovedEvent::APP_STATUS_APPROVED);
         }
         // Dispatch event if app status is changed from approved to revoked.
         if ($product_previous_status === 'approved' && $product_status === 'revoked') {
           $event_revoked = new AppdashboardStatusRevokedEvent($app_entity);
-          $this->eventDispatcher->dispatch(AppdashboardStatusRevokedEvent::APP_STATUS_REVOKED, $event_revoked);
+          $this->eventDispatcher->dispatch($event_revoked, AppdashboardStatusRevokedEvent::APP_STATUS_REVOKED);
         }
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/sm_appdashboard_apigee/src/Controller/AppsDashboardController.php:19

    ---------- begin diff ----------
@@ @@
  * with this program; if not, write to the Free Software Foundation, Inc.,
  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  */
-
+use Drupal\sm_appdashboard_apigee\AppsDashboardStorageServiceInterface;
+use Drupal\Core\Form\FormBuilder;
+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Url;
@@ @@
   /**
    * AppsDashboardStorageServiceInterface definition.
    *
-   * @var Drupal\sm_appdashboard_apigee\AppsDashboardStorageServiceInterface
+   * @var AppsDashboardStorageServiceInterface
    */
   protected $appsDashboardStorage;

@@ @@
   /**
    * The Form Builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/sm_appdashboard_apigee/src/AppsDashboardStorageService.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Symfony\Component\HttpFoundation\RequestStack definition.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Drupal\Core\Pager\PagerManagerInterface definition.
    *
-   * @var \Drupal\Core\Pager\PagerManagerInterface
+   * @var PagerManagerInterface
    */
   protected $pagerManager;

@@ @@
   /**
    * AppsDashboardStorageService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The current request object.
-   * @param \Drupal\Core\Pager\PagerManagerInterface $pager_manager
+   * @param PagerManagerInterface $pager_manager
    *   The pager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, RequestStack $request_stack, PagerManagerInterface $pager_manager = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/sm_appdashboard_apigee/modules/sm_appdashboard_apigee_rules/src/Event/AppdashboardStatusRevokedEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sm_appdashboard_apigee_rules\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Apigee\Edge\Api\Management\Entity\App;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * AppdashboardStatusRevoked event when apps status getting revoked.
@@ @@
   /**
    * The apigee app entity.
    *
-   * @var \Apigee\Edge\Api\Management\Entity\App
+   * @var App
    */
   protected $appEntity;

@@ @@
   /**
    * AppdashboardEvent constructor.
    *
-   * @param \Apigee\Edge\Api\Management\Entity\App $app_entity
+   * @param App $app_entity
    *   The app entity.
    */
   public function __construct(App $app_entity) {
@@ @@
   /**
    * Returns the app entity.
    *
-   * @return \Apigee\Edge\Api\Management\Entity\App
+   * @return App
    *   The app details.
    */
   public function geAppEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/sm_appdashboard_apigee/modules/sm_appdashboard_apigee_rules/src/Event/AppdashboardStatusApprovedEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sm_appdashboard_apigee_rules\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Apigee\Edge\Api\Management\Entity\App;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * AppdashboardStatusApproved event when apps status getting approved.
@@ @@
   /**
    * The apigee app entity.
    *
-   * @var \Apigee\Edge\Api\Management\Entity\App
+   * @var App
    */
   protected $appEntity;

@@ @@
   /**
    * AppdashboardEvent constructor.
    *
-   * @param \Apigee\Edge\Api\Management\Entity\App $app_entity
+   * @param App $app_entity
    *   The app entity.
    */
   public function __construct(App $app_entity) {
@@ @@
   /**
    * Returns the app entity.
    *
-   * @return \Apigee\Edge\Api\Management\Entity\App
+   * @return App
    *   The app details.
    */
   public function geAppEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/sm_appdashboard_apigee/modules/sm_appdashboard_apigee_rules/src/Event/AppdashboardEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sm_appdashboard_apigee_rules\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Apigee\Edge\Api\Management\Entity\App;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Appdashboard event for rules module integration.
@@ @@
   /**
    * The apigee app entity.
    *
-   * @var \Apigee\Edge\Api\Management\Entity\App
+   * @var App
    */
   protected $appEntity;

@@ @@
   /**
    * AppdashboardEvent constructor.
    *
-   * @param \Apigee\Edge\Api\Management\Entity\App $app_entity
+   * @param App $app_entity
    *   The app entity.
    */
   public function __construct(App $app_entity) {
@@ @@
   /**
    * Returns the app entity.
    *
-   * @return \Apigee\Edge\Api\Management\Entity\App
+   * @return App
    *   The app details.
    */
   public function geAppEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 3 nodes were removed                                                 

 [OK] 8 files have been changed by Rector                                       

