modules/contrib/field_encrypt/field_encrypt.api.php
modules/contrib/field_encrypt/field_encrypt.install
modules/contrib/field_encrypt/field_encrypt.module
modules/contrib/field_encrypt/src/Controller/FieldOverviewController.php
modules/contrib/field_encrypt/src/EncryptedFieldComputedProperty.php
modules/contrib/field_encrypt/src/Entity/FieldEncryptEntityType.php
modules/contrib/field_encrypt/src/EventSubscriber/ConfigSubscriber.php
modules/contrib/field_encrypt/src/Form/DecryptFieldForm.php
modules/contrib/field_encrypt/src/Form/EntityTypeForm.php
modules/contrib/field_encrypt/src/Form/ProcessQueueForm.php
modules/contrib/field_encrypt/src/Form/SettingsForm.php
modules/contrib/field_encrypt/src/Form/UpdateEncryptionProfileForm.php
modules/contrib/field_encrypt/src/Plugin/Field/FieldType/EncryptedFieldStorageItem.php
modules/contrib/field_encrypt/src/Plugin/QueueWorker/FieldEncryptQueueWorkerInterface.php
modules/contrib/field_encrypt/src/Plugin/QueueWorker/UpdateEntityEncryption.php
modules/contrib/field_encrypt/src/ProcessEntities.php
modules/contrib/field_encrypt/src/StateManager.php
modules/contrib/field_encrypt/tests/modules/field_encrypt_test/field_encrypt_test.install
modules/contrib/field_encrypt/tests/modules/field_encrypt_test/field_encrypt_test.module
modules/contrib/field_encrypt/tests/scripts/performance_test.php
modules/contrib/field_encrypt/tests/src/Functional/BaseFieldTest.php
modules/contrib/field_encrypt/tests/src/Functional/CacheTest.php
modules/contrib/field_encrypt/tests/src/Functional/CommerceTest.php
modules/contrib/field_encrypt/tests/src/Functional/ConfigurableFieldTest.php
modules/contrib/field_encrypt/tests/src/Functional/EncryptUserTest.php
modules/contrib/field_encrypt/tests/src/Functional/EncryptingExistingDataTest.php
modules/contrib/field_encrypt/tests/src/Functional/EntityHooksTest.php
modules/contrib/field_encrypt/tests/src/Functional/FieldEncryptApiHooksTest.php
modules/contrib/field_encrypt/tests/src/Functional/FieldEncryptTestBase.php
modules/contrib/field_encrypt/tests/src/Functional/FieldEncryptUpdatePathTest.php
modules/contrib/field_encrypt/tests/src/Functional/KeyChangeTest.php
modules/contrib/field_encrypt/tests/src/Functional/PerformanceScriptTest.php
modules/contrib/field_encrypt/tests/src/FunctionalJavascript/BaseFieldSettingsFormTest.php
modules/contrib/field_encrypt/tests/src/Kernel/DynamicEntityHooksTest.php
modules/contrib/field_encrypt/tests/src/Unit/ProcessEntitiesTest.php

28 files with changes
=====================

1) modules/contrib/field_encrypt/tests/src/Unit/ProcessEntitiesTest.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\Tests\field_encrypt\Unit;

 // phpcs:disable Drupal.Arrays.Array.LongLineDeclaration
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\TypedData\DataDefinition;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * A mock entity.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;

@@ @@
   /**
    * A mock field.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface
+   * @var FieldItemListInterface
    */
   protected $field;

@@ @@
   /**
    * A mock encrypted storage field.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface
+   * @var FieldItemListInterface
    */
   protected $storageField;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     if (version_compare(Version::id(), '8.0', '<')) {
@@ @@
     }

     // Set up a mock entity.
-    $this->entity = $this->getMockBuilder('\Drupal\Core\Entity\ContentEntityInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock('\Drupal\Core\Entity\ContentEntityInterface');

     // Set up language object.
-    $language = $this->getMockBuilder('\Drupal\Core\Language\LanguageInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $language = $this->createMock('\Drupal\Core\Language\LanguageInterface');

     // Set up expectations for language.
     $language->expects($this->any())
@@ @@
       ->will($this->returnSelf());

     // Set up a mock field.
-    $this->field = $this->getMockBuilder('\Drupal\Core\Field\FieldItemListInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->field = $this->createMock('\Drupal\Core\Field\FieldItemListInterface');

     // Set up a mock storage field.
-    $storage_item = $this->getMockBuilder(EncryptedFieldStorageItem::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $this->storageField = $this->getMockBuilder('\Drupal\Core\Field\FieldItemListInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $storage_item = $this->createMock(EncryptedFieldStorageItem::class);
+    $this->storageField = $this->createMock('\Drupal\Core\Field\FieldItemListInterface');
     $this->storageField->expects($this->any())
       ->method('offsetGet')
       ->with(0)
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/field_encrypt/tests/src/FunctionalJavascript/BaseFieldSettingsFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_encrypt\FunctionalJavascript;

+use Drupal\user\Entity\User;
 use Drupal\encrypt\Entity\EncryptionProfile;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\key\Entity\Key;
@@ @@
   /**
    * An administrator user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * A list of test keys.
    *
-   * @var \Drupal\key\Entity\Key[]
+   * @var Key[]
    */
   protected $testKeys;

@@ @@
   /**
    * A list of test encryption profiles.
    *
-   * @var \Drupal\encrypt\Entity\EncryptionProfile[]
+   * @var EncryptionProfile[]
    */
   protected $encryptionProfiles;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->adminUser = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/field_encrypt/tests/src/Functional/PerformanceScriptTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // This test relies on
     // \Drupal\Tests\encrypt\Functional\EncryptTestBase::setUp()
     // creating an encryption profile called 'encryption_profile_1' to avoid
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/field_encrypt/tests/src/Functional/KeyChangeTest.php:36

    ---------- begin diff ----------
@@ @@
    *
    * @TODO: Simplify setUp() by extending EncryptTestBase when https://www.drupal.org/node/2692387 lands.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create an admin user.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/field_encrypt/tests/src/Functional/FieldEncryptTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_encrypt\Functional;

+use Drupal\node\NodeTypeInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ @@
   /**
    * The page node type.
    *
-   * @var \Drupal\node\NodeTypeInterface
+   * @var NodeTypeInterface
    */
   protected $nodeType;

@@ @@
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A test node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $testNode;

@@ @@
    *
    * @TODO: Simplify setUp() by extending EncryptTestBase when https://www.drupal.org/node/2692387 lands.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create an admin user.
@@ @@
       'label' => 'Single field',
     ]);
     $single_field->save();
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+    /** @var EntityDisplayRepositoryInterface $display_repository */
     $display_repository = \Drupal::service('entity_display.repository');
     $display_repository->getFormDisplay('node', 'page', 'default')
       ->setComponent('field_test_single')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/field_encrypt/tests/src/Functional/EntityHooksTest.php:34

    ---------- begin diff ----------
@@ @@
    *
    * @TODO: Simplify setUp() by extending EncryptTestBase when https://www.drupal.org/node/2692387 lands.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Disable eval().
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/field_encrypt/tests/src/Functional/EncryptingExistingDataTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_encrypt\Functional;

+use Drupal\node\NodeInterface;
 use Drupal\field_encrypt\ProcessEntities;

 /**
@@ @@
   /**
    * Test nodes.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $testNodes = [];
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/field_encrypt/tests/src/Functional/EncryptUserTest.php:34

    ---------- begin diff ----------
@@ @@
    *
    * @TODO: Simplify setUp() by extending EncryptTestBase when https://www.drupal.org/node/2692387 lands.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create an admin user.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/field_encrypt/tests/src/Functional/ConfigurableFieldTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_encrypt\Functional;

+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\field_encrypt\ProcessEntities;
 use Drupal\Tests\Traits\Core\CronRunTrait;
@@ @@
     $single_field = $fields['field_test_single'];
     $definition = $single_field->getFieldDefinition();
     $this->assertTrue($definition instanceof FieldDefinitionInterface);
-    /** @var \Drupal\Core\Field\FieldConfigInterface $storage */
+    /** @var FieldConfigInterface $storage */
     $storage = $definition->getFieldStorageDefinition();
     $this->assertEquals(TRUE, $storage->getThirdPartySetting('field_encrypt', 'encrypt', FALSE));
     $this->assertEquals(
@@ @@
     $single_field = $fields['field_test_multi'];
     $definition = $single_field->getFieldDefinition();
     $this->assertTrue($definition instanceof FieldDefinitionInterface);
-    /** @var \Drupal\Core\Field\FieldConfigInterface $storage */
+    /** @var FieldConfigInterface $storage */
     $storage = $definition->getFieldStorageDefinition();
     $this->assertEquals(TRUE, $storage->getThirdPartySetting('field_encrypt', 'encrypt', FALSE));
     $this->assertEquals(['value' => 'value'], array_filter($storage->getThirdPartySetting('field_encrypt', 'properties', [])));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/field_encrypt/tests/src/Functional/CacheTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_encrypt\Functional;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\dynamic_page_cache\EventSubscriber\DynamicPageCacheSubscriber;
 use Drupal\field\Entity\FieldStorageConfig;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->entityTypeManager = $this->container->get('entity_type.manager');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/field_encrypt/tests/src/Functional/BaseFieldTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\field_encrypt\Functional;

+use Drupal\Core\Field\FieldConfigInterface;
+use Drupal\field_encrypt\Entity\FieldEncryptEntityType;
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\field_encrypt\ProcessEntities;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ @@
    *
    * @TODO: Simplify setUp() by extending EncryptTestBase when https://www.drupal.org/node/2692387 lands.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create an admin user.
@@ @@
     // Check title base field settings.
     $definition = $fields['title']->getFieldDefinition();
     $this->assertTrue($definition instanceof FieldDefinitionInterface);
-    /** @var \Drupal\Core\Field\FieldConfigInterface $storage */
+    /** @var FieldConfigInterface $storage */
     $storage = $definition->getFieldStorageDefinition();
     $this->assertEquals(TRUE, $storage->getSetting('field_encrypt.encrypt'));
     $this->assertEquals(['value'], array_filter($storage->getSetting('field_encrypt.properties')));
@@ @@
    */
   public function testEntityTypeDependencies() {
     $this->setFieldStorageSettings(TRUE);
-    /** @var \Drupal\field_encrypt\Entity\FieldEncryptEntityType $config_entity */
+    /** @var FieldEncryptEntityType $config_entity */
     $config_entity = \Drupal::entityTypeManager()->getStorage('field_encrypt_entity_type')->load('node');
     $this->assertNotNull($config_entity);
     $old_config = $config_entity->getBaseFields();
@@ @@
     // Remove title encryption and set up encryption on the test base field.
     $config_entity = \Drupal::entityTypeManager()->getStorage('field_encrypt_entity_type')->load('node');
     $config_entity->setBaseFields(['field_encrypt_test_base_field' => ['value']])->save();
-    /** @var \Drupal\Core\Queue\QueueInterface $queue */
+    /** @var QueueInterface $queue */
     $queue = \Drupal::service('queue')->get('field_encrypt_update_entity_encryption');
     $this->assertSame(1, $queue->numberOfItems());
     $this->cronRun();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/field_encrypt/tests/scripts/performance_test.php:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 // @codingStandardsIgnoreFile
 /**
  * @file
@@ @@
     'label' => 'Single field',
   ]);
   $single_field->save();
-  /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+  /** @var EntityDisplayRepositoryInterface $display_repository */
   $display_repository = \Drupal::service('entity_display.repository');
   $display_repository->getFormDisplay('node', 'page', 'default')
     ->setComponent('field_test_single')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


13) modules/contrib/field_encrypt/src/StateManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt;

+use Drupal\field\FieldStorageConfigInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\DynamicallyFieldableEntityStorageInterface;
 use Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The state key value store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The entity last installed schema repository.
    *
-   * @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface
+   * @var EntityLastInstalledSchemaRepositoryInterface
    */
   protected $entitySchemaRepository;

@@ @@
   /**
    * The entity definition update manager.
    *
-   * @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface
+   * @var EntityDefinitionUpdateManagerInterface
    */
   protected $entityDefinitionUpdateManager;
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a new ConfigSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value store.
-   * @param \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $entity_schema_repository
+   * @param EntityLastInstalledSchemaRepositoryInterface $entity_schema_repository
    *   The entity last installed schema repository.
-   * @param \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $entity_definition_update_manager
+   * @param EntityDefinitionUpdateManagerInterface $entity_definition_update_manager
    *   The entity definition update manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, QueueFactory $queue_factory, StateInterface $state, EntityLastInstalledSchemaRepositoryInterface $entity_schema_repository, EntityDefinitionUpdateManagerInterface $entity_definition_update_manager, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Gets the field definition for the blob where we store data.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   The field definition for the blob where we store data.
    */
   public static function getEncryptedFieldStorageDefinition() {
@@ @@
             ->condition('id', $entity_type_id . '.', 'STARTS_WITH')
             ->execute();
           // Fetch all fields on entity type.
-          /** @var \Drupal\field\FieldStorageConfigInterface[] $field_storages */
+          /** @var FieldStorageConfigInterface[] $field_storages */
           $field_storages = $this->entityTypeManager->getStorage('field_storage_config')->loadMultiple($ids);
           foreach ($field_storages as $storage) {
             // Check if field is encrypted.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/field_encrypt/src/ProcessEntities.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt;

+use Drupal\field\FieldStorageConfigInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a ProcessEntities object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Encrypts an entity's encrypted fields.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to encrypt.
    *
    * @see field_encrypt_entity_presave()
@@ @@
   /**
    * Decrypts an entity's encrypted fields.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to decrypt.
    *
    * @see field_encrypt_entity_storage_load()
@@ @@
   /**
    * Encrypts a field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity being encrypted.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field to encrypt.
    */
   protected function encryptField(ContentEntityInterface $entity, FieldItemListInterface $field) {
@@ @@
       $properties = $storage->getSetting('field_encrypt.properties') ?? [];
     }
     else {
-      /** @var \Drupal\field\FieldStorageConfigInterface $storage */
+      /** @var FieldStorageConfigInterface $storage */
       $properties = $storage->getThirdPartySetting('field_encrypt', 'properties', []);
     }
     // Process the field with the given encryption provider.
@@ @@
   /**
    * Sets an entity's encrypted fields to a value.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to set the values on.
    * @param string|null $method
    *   (optional) The method call to set the value. By default, this code sets
@@ @@
   /**
    * Gets the encrypted fields from the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity with encrypted fields.
    *
    * @return iterable
@@ @@
   /**
    * Moves the unencrypted value to the encrypted field storage.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to process.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field to process.
    * @param int $delta
    *   The field delta.
@@ @@
   /**
    * Render a placeholder value to be stored in the unencrypted field storage.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to encrypt fields on.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field to encrypt.
    * @param string $property_name
    *   The property to encrypt.
@@ @@
   /**
    * Sets an entity's encrypted field's cache tags appropriately.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity being viewed.
    * @param array $build
    *   A renderable array representing the entity content.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/field_encrypt/src/Plugin/QueueWorker/UpdateEntityEncryption.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/field_encrypt/src/Plugin/QueueWorker/FieldEncryptQueueWorkerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt\Plugin\QueueWorker;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Queue\QueueWorkerInterface;

 /**
@@ @@
    * @param array $data
    *   The data that to generate the message.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Translatable markup
    */
   public function batchMessage(array $data);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/field_encrypt/src/Plugin/Field/FieldType/EncryptedFieldStorageItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt\Plugin\Field\FieldType;

+use Drupal\encrypt\EncryptionProfileInterface;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
   /**
    * Loads the encryption profile config entity.
    *
-   * @return \Drupal\encrypt\EncryptionProfileInterface
+   * @return EncryptionProfileInterface
    *   The EncryptionProfile entity.
    */
   protected function loadEncryptionProfile($encryption_profile) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/field_encrypt/src/Form/UpdateEncryptionProfileForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt\Form;

+use Drupal\Core\Entity\EntityType;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity type.
    *
-   * @var \Drupal\Core\Entity\EntityType
+   * @var EntityType
    */
   protected $entityType;

@@ @@
   /**
    * The encryption profile.
    *
-   * @var \Drupal\encrypt\Entity\EncryptionProfile
+   * @var EncryptionProfile
    */
   protected $encryptionProfile;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * Constructs a new FieldEncryptDecryptForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Queue\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The field encryption entity update queue.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, QueueInterface $queue) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/field_encrypt/src/Form/SettingsForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The field type plugin manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypePluginManager;

@@ @@
   /**
    * The encryption profile manager.
    *
-   * @var \Drupal\encrypt\EncryptionProfileManagerInterface
+   * @var EncryptionProfileManagerInterface
    */
   protected $encryptionProfileManager;

@@ @@
   /**
    * Constructs a new FieldEncryptSettingsForm.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_plugin_manager
+   * @param FieldTypePluginManagerInterface $field_type_plugin_manager
    *   The field type plugin manager.
-   * @param \Drupal\encrypt\EncryptionProfileManagerInterface $encryption_profile_manager
+   * @param EncryptionProfileManagerInterface $encryption_profile_manager
    *   The encryption profile manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, FieldTypePluginManagerInterface $field_type_plugin_manager, EncryptionProfileManagerInterface $encryption_profile_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/field_encrypt/src/Form/ProcessQueueForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt\Form;

+use Drupal\Core\Queue\QueueInterface;
+use Drupal\field_encrypt\Plugin\QueueWorker\FieldEncryptQueueWorkerInterface;
 use Drupal\Core\Batch\BatchBuilder;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The QueueWorker manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueManager;

@@ @@
   /**
    * Constructs a new FieldEncryptUpdateForm.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_manager
+   * @param QueueWorkerManagerInterface $queue_manager
    *   The QueueWorker manager.
    */
   public function __construct(QueueFactory $queue_factory, QueueWorkerManagerInterface $queue_manager) {
@@ @@
   public static function processUpdates($queue_id, array &$context) {
     $batch_size = \Drupal::config('field_encrypt.settings')->get('batch_size');

-    /** @var \Drupal\Core\Queue\QueueInterface $queue */
+    /** @var QueueInterface $queue */
     $queue = \Drupal::service('queue')->get($queue_id);
     $num_items = $queue->numberOfItems();

-    /** @var \Drupal\field_encrypt\Plugin\QueueWorker\FieldEncryptQueueWorkerInterface $queue_worker */
+    /** @var FieldEncryptQueueWorkerInterface $queue_worker */
     $queue_worker = \Drupal::service('plugin.manager.queue_worker')->createInstance($queue_id);

     if (empty($context['sandbox'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/field_encrypt/src/Form/EntityTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt\Form;

+use Drupal\field_encrypt\Entity\FieldEncryptEntityType;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * FieldEncryptDecryptForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ @@
     $default_value = [];
     $possible_fields = [];
     if ($entity_type_id) {
-      /** @var \Drupal\field_encrypt\Entity\FieldEncryptEntityType $field_encrypt_settings */
+      /** @var FieldEncryptEntityType $field_encrypt_settings */
       $field_encrypt_settings = $this->entityTypeManager->getStorage('field_encrypt_entity_type')->load($entity_type_id);
       if ($field_encrypt_settings) {
         $default_value = array_keys($field_encrypt_settings->getBaseFields());
@@ @@
     // Get information required to build a property field for each base field.
     $form = [];
     $base_field_definitions = $this->entityFieldManager->getBaseFieldDefinitions($entity_type_id);
-    /** @var \Drupal\field_encrypt\Entity\FieldEncryptEntityType $field_encrypt_settings */
+    /** @var FieldEncryptEntityType $field_encrypt_settings */
     $field_encrypt_settings = $this->entityTypeManager->getStorage('field_encrypt_entity_type')->load($entity_type_id);
     $default_values = $field_encrypt_settings ? $field_encrypt_settings->getBaseFields() : [];
     $default_properties = $this->config('field_encrypt.settings')->get('default_properties');
@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $entity_type_id = $form_state->getValue('entity_type');
     if ($form['entity_type']['#default_value'] === $form_state->getValue('entity_type')) {
-      /** @var \Drupal\field_encrypt\Entity\FieldEncryptEntityType $field_encrypt_settings */
+      /** @var FieldEncryptEntityType $field_encrypt_settings */
       $field_encrypt_settings = $this->entityTypeManager->getStorage('field_encrypt_entity_type')->load($entity_type_id);
       if (!$field_encrypt_settings) {
         $field_encrypt_settings = $this->entityTypeManager->getStorage('field_encrypt_entity_type')->create([
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    * @param string $entity_type_id
    *   The entity type ID.
    *
-   * @return string[]|\Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return string[]|TranslatableMarkup[]
    *   A array of base fields labels that can be encrypted. Keyed by base field
    *   name.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/field_encrypt/src/Form/DecryptFieldForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt\Form;

+use Drupal\field_encrypt\Entity\FieldEncryptEntityType;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new FieldEncryptDecryptForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     if ($this->baseField) {
-      /** @var \Drupal\field_encrypt\Entity\FieldEncryptEntityType $field_encrypt_settings */
+      /** @var FieldEncryptEntityType $field_encrypt_settings */
       $field_encrypt_settings = $this->entityTypeManager->getStorage('field_encrypt_entity_type')->load($this->entityType);
       $field_encrypt_settings
         ->removeBaseField($this->fieldName)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/field_encrypt/src/EventSubscriber/ConfigSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt\EventSubscriber;

+use Drupal\field_encrypt\Entity\FieldEncryptEntityType;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigCrudEvent;
 use Drupal\Core\Config\ConfigEvents;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The state manager.
    *
-   * @var \Drupal\field_encrypt\StateManager
+   * @var StateManager
    */
   protected $stateManager;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new ConfigSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\field_encrypt\StateManager $state_manager
+   * @param StateManager $state_manager
    *   The state manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, QueueFactory $queue_factory, StateManager $state_manager, TranslationInterface $translation, MessengerInterface $messenger) {
@@ @@
   /**
    * React on the configuration save event.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    *
    * @todo why is this not just using hook_field_storage_update?
@@ @@
   /**
    * Reacts to changes in field.storage.*.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The field storage config.
    */
   protected function onFieldStorageChange(Config $config) {
@@ @@
   /**
    * Reacts to changes in field_encrypt.settings.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   The field_encrypt.settings config object.
    */
   protected function onFieldEncryptSettingsChange(Config $config) {
@@ @@
   /**
    * React on the configuration delete event.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The configuration event.
    */
   public function onConfigDelete(ConfigCrudEvent $event) {
@@ @@
   /**
    * React to a base field being deleted.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionEvent $event
+   * @param FieldStorageDefinitionEvent $event
    *   The field storage event.
    */
   public function onBaseFieldDelete(FieldStorageDefinitionEvent $event) {
@@ @@
     //   configuration import?
     $field = $event->getFieldStorageDefinition();
     if ($event->getFieldStorageDefinition()->isBaseField()) {
-      /** @var \Drupal\field_encrypt\Entity\FieldEncryptEntityType $field_encrypt_settings */
+      /** @var FieldEncryptEntityType $field_encrypt_settings */
       $field_encrypt_settings = $this->entityTypeManager->getStorage('field_encrypt_entity_type')->load($field->getTargetEntityTypeId());
       if ($field_encrypt_settings && $field_encrypt_settings->hasBaseField($field->getName())) {
         $field_encrypt_settings->removeBaseField($field->getName());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/field_encrypt/src/Entity/FieldEncryptEntityType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt\Entity;

+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ @@
    *   entity type the config entity is configures.
    */
   private static function queueEntityUpdates($entity_type_id) {
-    /** @var \Drupal\Core\Queue\QueueInterface $queue */
+    /** @var QueueInterface $queue */
     $queue = \Drupal::service('queue')->get('field_encrypt_update_entity_encryption');
     $entity_type_manager = \Drupal::entityTypeManager();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/field_encrypt/src/EncryptedFieldComputedProperty.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt;

+use Drupal\field_encrypt\Plugin\Field\FieldType\EncryptedFieldStorageItem;
 use Drupal\Core\TypedData\TypedData;

 /**
@@ @@
    */
   public function getValue() {
     if ($this->decryptedData === NULL) {
-      /** @var \Drupal\field_encrypt\Plugin\Field\FieldType\EncryptedFieldStorageItem $item */
+      /** @var EncryptedFieldStorageItem $item */
       $item = $this->getParent();
       $this->decryptedData = $item->decrypt();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/field_encrypt/src/Controller/FieldOverviewController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_encrypt\Controller;

+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Creates a new FieldOverviewController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ @@
   /**
    * Get a list of encrypted fields' storage entities.
    *
-   * @return \Drupal\Core\Field\FieldStorageDefinitionInterface[]
+   * @return FieldStorageDefinitionInterface[]
    *   An array of FieldStorageConfig entities and base fields for encrypted
    *   fields.
    */
@@ @@
     foreach ($this->entityTypeManager->getDefinitions() as $entity_type) {
       // Only content entity types support encryption.
       if ($entity_type instanceof ContentEntityTypeInterface) {
-        /** @var \Drupal\Core\Field\BaseFieldDefinition $base_field */
+        /** @var BaseFieldDefinition $base_field */
         foreach ($this->entityFieldManager->getBaseFieldDefinitions($entity_type->id()) as $base_field) {
           if ($base_field->getSetting('field_encrypt.encrypt')) {
             $encrypted_fields[] = $base_field;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/field_encrypt/field_encrypt.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field_encrypt\Entity\FieldEncryptEntityType;
 /**
  * @file
  * Contains module hooks for field_encrypt.
@@ @@
     // Check permissions.
     $user = \Drupal::currentUser();
     if ($user->hasPermission('administer field encryption') && \Drupal::config('field_encrypt.settings')->get('encryption_profile') !== '') {
-      /** @var \Drupal\field\Entity\FieldStorageConfig $field */
+      /** @var FieldStorageConfig $field */
       $field = $form_state->getFormObject()->getEntity();
       $field_type = $field->getType();
       $default_properties = \Drupal::config('field_encrypt.settings')->get('default_properties');
@@ @@
  *
  * @param string $entity_type
  *   The entity type.
- * @param \Drupal\field\Entity\FieldStorageConfig $field_storage_config
+ * @param FieldStorageConfig $field_storage_config
  *   The field storage config entity.
  * @param array $form
  *   The complete form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function field_encrypt_form_field_add_form_builder($entity_type, FieldStorageConfig $field_storage_config, array &$form, FormStateInterface $form_state) {
@@ @@
     return;
   }

-  /** @var \Drupal\field_encrypt\ProcessEntities $field_encrypt_process_entities */
+  /** @var ProcessEntities $field_encrypt_process_entities */
   $field_encrypt_process_entities = \Drupal::service('field_encrypt.process_entities');

   foreach ($entities as $entity) {
@@ @@
 /**
  * Verify if the given entity has encrypted fields.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity to check.
  *
  * @return bool
@@ @@
  */
 function field_encrypt_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
   /** @var \Drupal\Core\Field\BaseFieldDefinition[] $fields */
-  /** @var \Drupal\field_encrypt\Entity\FieldEncryptEntityType $field_encrypt_settings */
+  /** @var FieldEncryptEntityType $field_encrypt_settings */
   $field_encrypt_settings = \Drupal::entityTypeManager()->getStorage('field_encrypt_entity_type')->load($entity_type->id());
   if ($field_encrypt_settings) {
     foreach ($field_encrypt_settings->getBaseFields() as $field_name => $encrypted_properties) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


28) modules/contrib/field_encrypt/field_encrypt.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * @file
  * Hooks for Field Encrypt module.
@@ @@
  * encrypted. It does not allow an entity that is not configured to be
  * encrypted, because there are no settings defined to do so.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   The entity to encrypt fields on.
  *
  * @return bool
  *   Return FALSE if entity should not be encrypted.
  */
-function hook_field_encrypt_allow_encryption(\Drupal\Core\Entity\ContentEntityInterface $entity) {
+function hook_field_encrypt_allow_encryption(ContentEntityInterface $entity) {
   // Only encrypt fields on unpublished nodes.
   if ($entity instanceof Node) {
     if ($entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 28 files have been changed by Rector                                      

