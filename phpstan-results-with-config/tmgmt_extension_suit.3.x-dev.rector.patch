diff --git a/modules/tmgmt_extension_suit_test/src/Plugin/tmgmt/Translator/TestLocalTranslator.php b/modules/tmgmt_extension_suit_test/src/Plugin/tmgmt/Translator/TestLocalTranslator.php
index acc27f1..3cd6ef8 100644
--- a/modules/tmgmt_extension_suit_test/src/Plugin/tmgmt/Translator/TestLocalTranslator.php
+++ b/modules/tmgmt_extension_suit_test/src/Plugin/tmgmt/Translator/TestLocalTranslator.php
@@ -24,7 +24,7 @@ class TestLocalTranslator extends LocalTranslator implements ExtendedTranslatorP
   /**
    * Checks whether job is ready for download or not.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Job object.
    *
    * @return bool
@@ -38,7 +38,7 @@ class TestLocalTranslator extends LocalTranslator implements ExtendedTranslatorP
    * Applies translation for all the job items inside the job if $jobitem is
    * NULL. Applies translation to only one job item if $jobItem is passed.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Job object.
    * @param JobItemInterface $jobItem
    *
@@ -54,7 +54,7 @@ class TestLocalTranslator extends LocalTranslator implements ExtendedTranslatorP
   /**
    * Returns file name for a given job.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Job object.
    *
    * @return string
@@ -68,7 +68,7 @@ class TestLocalTranslator extends LocalTranslator implements ExtendedTranslatorP
    * This method cancels not Drupal translation but translation in
    * 3rd party service instead.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Job object.
    *
    * @return bool
@@ -79,7 +79,7 @@ class TestLocalTranslator extends LocalTranslator implements ExtendedTranslatorP
   /**
    * Requests translation.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   TMGMT Job.
    * @param array $data
    *   Data from queue item.
diff --git a/src/ExtendedTranslatorPluginInterface.php b/src/ExtendedTranslatorPluginInterface.php
index 685ae58..3b5bbd5 100644
--- a/src/ExtendedTranslatorPluginInterface.php
+++ b/src/ExtendedTranslatorPluginInterface.php
@@ -14,7 +14,7 @@ interface ExtendedTranslatorPluginInterface extends TranslatorPluginInterface {
   /**
    * Checks whether job is ready for download or not.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Job object.
    *
    * @return bool
@@ -28,7 +28,7 @@ interface ExtendedTranslatorPluginInterface extends TranslatorPluginInterface {
    * Applies translation for all the job items inside the job if $jobitem is
    * NULL. Applies translation to only one job item if $jobItem is passed.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Job object.
    * @param JobItemInterface $jobItem
    *
@@ -41,7 +41,7 @@ interface ExtendedTranslatorPluginInterface extends TranslatorPluginInterface {
   /**
    * Returns file name for a given job.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Job object.
    *
    * @return string
@@ -55,7 +55,7 @@ interface ExtendedTranslatorPluginInterface extends TranslatorPluginInterface {
    * This method cancels not Drupal translation but translation in
    * 3rd party service instead.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Job object.
    *
    * @return bool
@@ -66,7 +66,7 @@ interface ExtendedTranslatorPluginInterface extends TranslatorPluginInterface {
   /**
    * Requests translation.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   TMGMT Job.
    * @param array $data
    *   Data from queue item.
diff --git a/src/Form/BaseTmgmtActionApproveForm.php b/src/Form/BaseTmgmtActionApproveForm.php
index 53c2528..6ac2060 100644
--- a/src/Form/BaseTmgmtActionApproveForm.php
+++ b/src/Form/BaseTmgmtActionApproveForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tmgmt_extension_suit\Form;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\tmgmt\JobInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -21,28 +23,28 @@ abstract class BaseTmgmtActionApproveForm extends ConfirmFormBase {
   /**
    * The temp store factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The upload queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
@@ -63,15 +65,15 @@ abstract class BaseTmgmtActionApproveForm extends ConfirmFormBase {
   /**
    * Constructs a new UserMultipleCancelConfirm.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   Temp storage factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager service.
-   * @param \Drupal\Core\Queue\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The upload queue.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   Immutable config instance that contains settings.
    */
   public function __construct(
@@ -124,7 +126,7 @@ abstract class BaseTmgmtActionApproveForm extends ConfirmFormBase {
    * @param array $entity_ids
    *   Entity ids.
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface[]
+   * @return array|EntityInterface[]
    *   Returns array of loaded entities.
    */
   protected function getEntities(array $entity_ids) {
@@ -234,7 +236,7 @@ abstract class BaseTmgmtActionApproveForm extends ConfirmFormBase {
    * @param array $context
    *   The batch context.
    *
-   * @return \Drupal\tmgmt\JobInterface|mixed
+   * @return JobInterface|mixed
    *   Returns TMGMT job on success and FALSE otherwise.
    */
   public static function processBatch(array $data, array &$context) {
diff --git a/src/Form/CancelTmgmtActionApproveForm.php b/src/Form/CancelTmgmtActionApproveForm.php
index 71741a1..17a7ad3 100644
--- a/src/Form/CancelTmgmtActionApproveForm.php
+++ b/src/Form/CancelTmgmtActionApproveForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_extension_suit\Form;
 
+use Drupal\tmgmt\MessageInterface;
 use Drupal\Component\Render\FormattableMarkup;
 
 /**
@@ -58,7 +59,7 @@ class CancelTmgmtActionApproveForm extends BaseTmgmtActionApproveForm {
       // however we do not know if the translator is able to abort a job until
       // we trigger the action.
       foreach ($job->getMessagesSince() as $message) {
-        /** @var \Drupal\tmgmt\MessageInterface $message */
+        /** @var MessageInterface $message */
         if ($message->getType() == 'debug') {
           continue;
         }
diff --git a/src/Form/RequestTranslationTmgmtActionApproveForm.php b/src/Form/RequestTranslationTmgmtActionApproveForm.php
index 21f6a20..1421a1f 100644
--- a/src/Form/RequestTranslationTmgmtActionApproveForm.php
+++ b/src/Form/RequestTranslationTmgmtActionApproveForm.php
@@ -22,33 +22,33 @@ class RequestTranslationTmgmtActionApproveForm extends BaseTmgmtActionApproveFor
   /**
    * Job checkout manager.
    *
-   * @var \Drupal\tmgmt\JobCheckoutManager
+   * @var JobCheckoutManager
    */
   protected $checkoutManager;
 
   /**
    * Job queue.
    *
-   * @var \Drupal\tmgmt\JobQueue
+   * @var JobQueue
    */
   protected $jobQueue;
 
   /**
    * Constructs a new UserMultipleCancelConfirm.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The temp store factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager service.
-   * @param \Drupal\Core\Queue\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The upload queue.
-   * @param \Drupal\Core\Config\ImmutableConfig $config
+   * @param ImmutableConfig $config
    *   Immutable config instance that contains settings.
-   * @param \Drupal\tmgmt\JobCheckoutManager $checkout_manager
+   * @param JobCheckoutManager $checkout_manager
    *   Job checkout manager.
-   * @param \Drupal\tmgmt\JobQueue $job_queue
+   * @param JobQueue $job_queue
    *   Job queue.
    */
   public function __construct(
@@ -127,7 +127,7 @@ class RequestTranslationTmgmtActionApproveForm extends BaseTmgmtActionApproveFor
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Plugin/Action/BaseJobAction.php b/src/Plugin/Action/BaseJobAction.php
index a18c993..1390cae 100644
--- a/src/Plugin/Action/BaseJobAction.php
+++ b/src/Plugin/Action/BaseJobAction.php
@@ -20,14 +20,14 @@ abstract class BaseJobAction extends ActionBase implements ContainerFactoryPlugi
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -40,9 +40,9 @@ abstract class BaseJobAction extends ActionBase implements ContainerFactoryPlugi
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
    */
   public function __construct(
@@ -97,7 +97,7 @@ abstract class BaseJobAction extends ActionBase implements ContainerFactoryPlugi
   public function executeMultiple(array $entities) {
     $ids = [];
 
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     foreach ($entities as $entity) {
       $ids[$entity->id()] = $entity->getEntityTypeId();
     }
diff --git a/src/Plugin/QueueWorker/QueueWorkerLockedBase.php b/src/Plugin/QueueWorker/QueueWorkerLockedBase.php
index 349f4e2..26f6a73 100644
--- a/src/Plugin/QueueWorker/QueueWorkerLockedBase.php
+++ b/src/Plugin/QueueWorker/QueueWorkerLockedBase.php
@@ -22,14 +22,14 @@ abstract class QueueWorkerLockedBase extends QueueWorkerBase implements Containe
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Lock service.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
@@ -42,9 +42,9 @@ abstract class QueueWorkerLockedBase extends QueueWorkerBase implements Containe
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   Lock service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, LockBackendInterface $lock, LoggerInterface $logger) {
diff --git a/src/Utils/UniqueQueueItem.php b/src/Utils/UniqueQueueItem.php
index 8486019..fd909cc 100644
--- a/src/Utils/UniqueQueueItem.php
+++ b/src/Utils/UniqueQueueItem.php
@@ -18,32 +18,32 @@ class UniqueQueueItem {
   /**
    * Queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   private $queueFactory;
 
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;
 
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $databaseConnection;
 
   /**
    * UniqueQueueItem constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   Queue factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logger.
-   * @param \Drupal\Core\Database\Connection $database_connection
+   * @param Connection $database_connection
    *   Database connection.
    */
   public function __construct(QueueFactory $queue_factory, LoggerInterface $logger, Connection $database_connection) {
