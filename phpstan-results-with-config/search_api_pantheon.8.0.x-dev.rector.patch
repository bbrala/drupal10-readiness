diff --git a/RoboFile.php b/RoboFile.php
index ea5d32d..97db501 100644
--- a/RoboFile.php
+++ b/RoboFile.php
@@ -172,7 +172,7 @@ class RoboFile extends Tasks {
    * @param string $site_name
    *  The machine name of the site to create.
    *
-   * @return \Robo\Result
+   * @return Result
    */
   public function testCreateSite(string $site_name, array $options = ['org' => NULL]) {
     $site_info = $this->siteInfo($site_name);
@@ -290,7 +290,7 @@ class RoboFile extends Tasks {
    * @param string $site_name
    *   The machine name of the site to clone.
    *
-   * @return \Robo\Result
+   * @return Result
    */
   public function testCloneSite(string $site_name) {
     if (!is_dir($this->getSiteFolder($site_name))) {
diff --git a/modules/search_api_pantheon_admin/src/Access/AdminAccessCheck.php b/modules/search_api_pantheon_admin/src/Access/AdminAccessCheck.php
index 1f400d5..8f5b5bb 100644
--- a/modules/search_api_pantheon_admin/src/Access/AdminAccessCheck.php
+++ b/modules/search_api_pantheon_admin/src/Access/AdminAccessCheck.php
@@ -16,9 +16,9 @@ class AdminAccessCheck implements AccessInterface {
   /**
    * A custom access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
-   * @param \Drupal\search_api\ServerInterface|null $search_api_server
+   * @param ServerInterface|null $search_api_server
    *   (optional) The Search API server entity.
    */
   public function access(AccountInterface $account, ServerInterface $search_api_server = NULL) {
diff --git a/modules/search_api_pantheon_admin/src/Form/PantheonSolrAdminForm.php b/modules/search_api_pantheon_admin/src/Form/PantheonSolrAdminForm.php
index 368f219..798462e 100644
--- a/modules/search_api_pantheon_admin/src/Form/PantheonSolrAdminForm.php
+++ b/modules/search_api_pantheon_admin/src/Form/PantheonSolrAdminForm.php
@@ -19,7 +19,7 @@ class PantheonSolrAdminForm extends FormBase {
   /**
    * The PantheonGuzzle service.
    *
-   * @var \Drupal\search_api_pantheon\Services\PantheonGuzzle
+   * @var PantheonGuzzle
    */
   protected PantheonGuzzle $pantheonGuzzle;
 
diff --git a/modules/search_api_pantheon_admin/src/Form/PostSolrSchema.php b/modules/search_api_pantheon_admin/src/Form/PostSolrSchema.php
index 178aae2..1352c67 100644
--- a/modules/search_api_pantheon_admin/src/Form/PostSolrSchema.php
+++ b/modules/search_api_pantheon_admin/src/Form/PostSolrSchema.php
@@ -18,7 +18,7 @@ class PostSolrSchema extends FormBase {
   /**
    * The PantheonGuzzle service.
    *
-   * @var \Drupal\search_api_pantheon\Services\SchemaPoster
+   * @var SchemaPoster
    */
   protected SchemaPoster $schemaPoster;
 
diff --git a/src/Commands/Diagnose.php b/src/Commands/Diagnose.php
index bb2c0e8..633f949 100644
--- a/src/Commands/Diagnose.php
+++ b/src/Commands/Diagnose.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search_api_pantheon\Commands;
 
+use Drupal\search_api_solr\SearchApiSolrException;
+use Solarium\QueryType\Ping\Result;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\search_api_pantheon\Services\Endpoint;
 use Drupal\search_api_pantheon\Services\PantheonGuzzle;
@@ -33,13 +35,13 @@ class Diagnose extends DrushCommands {
   /**
    * Class Constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\PantheonGuzzle $pantheonGuzzle
+   * @param PantheonGuzzle $pantheonGuzzle
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\Endpoint $endpoint
+   * @param Endpoint $endpoint
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\SolariumClient $solariumClient
+   * @param SolariumClient $solariumClient
    *   Injected by container.
    */
   public function __construct(
@@ -63,7 +65,7 @@ class Diagnose extends DrushCommands {
    * @command search-api-pantheon:diagnose
    * @aliases sapd
    *
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
+   * @throws SearchApiSolrException
    * @throws \JsonException
    * @throws \Exception
    */
@@ -218,7 +220,7 @@ class Diagnose extends DrushCommands {
    * @command search-api-pantheon:ping
    * @aliases sapp
    *
-   * @return \Solarium\Core\Query\Result\ResultInterface|\Solarium\QueryType\Ping\Result|void
+   * @return ResultInterface|Result|void
    *   The result.
    */
   public function pingSolrHost() {
@@ -237,7 +239,7 @@ class Diagnose extends DrushCommands {
   /**
    * Indexes a single item.
    *
-   * @return \Solarium\Core\Query\Result\ResultInterface|\Solarium\QueryType\Update\Result
+   * @return ResultInterface|\Solarium\QueryType\Update\Result
    *   The result.
    */
   protected function indexSingleItem() {
diff --git a/src/Commands/Query.php b/src/Commands/Query.php
index 4abad68..1993aec 100644
--- a/src/Commands/Query.php
+++ b/src/Commands/Query.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_pantheon\Commands;
 
+use Drupal\search_api_solr\SearchApiSolrException;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\search_api_pantheon\Services\Endpoint;
 use Drupal\search_api_pantheon\Services\PantheonGuzzle;
@@ -29,13 +30,13 @@ class Query extends DrushCommands {
   /**
    * Class Constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\PantheonGuzzle $pantheonGuzzle
+   * @param PantheonGuzzle $pantheonGuzzle
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\Endpoint $endpoint
+   * @param Endpoint $endpoint
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\SolariumClient $solariumClient
+   * @param SolariumClient $solariumClient
    *   Injected by container.
    */
   public function __construct(
@@ -67,7 +68,7 @@ class Query extends DrushCommands {
    *
    * @aliases saps
    *
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
+   * @throws SearchApiSolrException
    * @throws \JsonException
    * @throws \Exception
    */
diff --git a/src/Commands/Schema.php b/src/Commands/Schema.php
index 4249f40..d920482 100644
--- a/src/Commands/Schema.php
+++ b/src/Commands/Schema.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_pantheon\Commands;
 
+use Psr\Http\Client\ClientExceptionInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelTrait;
 use Drupal\search_api_pantheon\Plugin\SolrConnector\PantheonSolrConnector;
@@ -18,25 +19,25 @@ class Schema extends DrushCommands {
   /**
    * Configured pantheon-solr-specific guzzle client.
    *
-   * @var \Drupal\search_api_pantheon\Services\PantheonGuzzle
+   * @var PantheonGuzzle
    */
   private PantheonGuzzle $pantheonGuzzle;
 
   /**
    * Configured pantheon-solr-specific schema poster class.
    *
-   * @var \Drupal\search_api_pantheon\Services\SchemaPoster
+   * @var SchemaPoster
    */
   private SchemaPoster $schemaPoster;
 
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\PantheonGuzzle $pantheonGuzzle
+   * @param PantheonGuzzle $pantheonGuzzle
    *   Injected by container.
-   * @param \Drupal\search_api_pantheon\Services\SchemaPoster $schemaPoster
+   * @param SchemaPoster $schemaPoster
    *   Injected by Container.
    */
   public function __construct(
@@ -83,7 +84,7 @@ class Schema extends DrushCommands {
    * @usage search-api-pantheon:view-schema elevate.xml
    *
    * @throws \Exception
-   * @throws \Psr\Http\Client\ClientExceptionInterface
+   * @throws ClientExceptionInterface
    */
   public function viewSchema(string $filename = 'schema.xml') {
     $currentSchema = $this->schemaPoster->viewSchema($filename);
diff --git a/src/Plugin/SolrConnector/PantheonSolrConnector.php b/src/Plugin/SolrConnector/PantheonSolrConnector.php
index 2f87711..43b9e87 100644
--- a/src/Plugin/SolrConnector/PantheonSolrConnector.php
+++ b/src/Plugin/SolrConnector/PantheonSolrConnector.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\search_api_pantheon\Plugin\SolrConnector;
 
+use Drupal\search_api\Plugin\ConfigurablePluginBase;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\search_api_solr\SearchApiSolrException;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ -43,7 +47,7 @@ class PantheonSolrConnector extends SolrConnectorPluginBase implements
   /**
    * The PantheonGuzzle service.
    *
-   * @var \Drupal\search_api_pantheon\Services\PantheonGuzzle
+   * @var PantheonGuzzle
    */
   protected PantheonGuzzle $pantheonGuzzle;
 
@@ -57,14 +61,14 @@ class PantheonSolrConnector extends SolrConnectorPluginBase implements
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
@@ -93,12 +97,12 @@ class PantheonSolrConnector extends SolrConnectorPluginBase implements
   }
 
   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
    *
-   * @return \Drupal\search_api\Plugin\ConfigurablePluginBase|\Drupal\search_api_pantheon\Plugin\SolrConnector\PantheonSolrConnector|static
+   * @return ConfigurablePluginBase|\Drupal\search_api_pantheon\Plugin\SolrConnector\PantheonSolrConnector|static
    * @throws \Exception
    */
   public static function create(
@@ -167,7 +171,7 @@ class PantheonSolrConnector extends SolrConnectorPluginBase implements
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
    * @return array
@@ -208,7 +212,7 @@ class PantheonSolrConnector extends SolrConnectorPluginBase implements
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function validateConfigurationForm(
@@ -222,7 +226,7 @@ class PantheonSolrConnector extends SolrConnectorPluginBase implements
    *
    * @param array $form
    *   Form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   public function submitConfigurationForm(
@@ -242,8 +246,8 @@ class PantheonSolrConnector extends SolrConnectorPluginBase implements
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function adjustTimeout(int $seconds, string $timeout = self::QUERY_TIMEOUT, ?Endpoint &$endpoint = NULL): int {
     $this->connect();
@@ -358,7 +362,7 @@ class PantheonSolrConnector extends SolrConnectorPluginBase implements
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
+   * @throws SearchApiSolrException
    */
   public function viewSettings() {
     $view_settings = [];
diff --git a/src/Services/Endpoint.php b/src/Services/Endpoint.php
index 7b9cf98..9052bf7 100644
--- a/src/Services/Endpoint.php
+++ b/src/Services/Endpoint.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\search_api_pantheon\Services;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\search_api\ServerInterface;
+use Solarium\Exception\UnexpectedValueException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\search_api_pantheon\Plugin\SolrConnector\PantheonSolrConnector;
 use Drupal\search_api_solr\SolrConnectorInterface;
@@ -45,14 +49,14 @@ class Endpoint extends SolariumEndpoint {
    * @param array $options
    *   Array of options for the endpoint. Currently,
    *   they are used by other functions of the endpoint.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type Manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $options, EntityTypeManagerInterface $entityTypeManager) {
-    /** @var \Drupal\search_api\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $entityTypeManager->getStorage('search_api_server')->load(self::DEFAULT_NAME);
     $timeout_config = [];
     if ($server) {
@@ -84,7 +88,7 @@ class Endpoint extends SolariumEndpoint {
    * @return string
    *   Get the base URI for the Endpoint plus plath and the core vars.
    *
-   * @throws \Solarium\Exception\UnexpectedValueException
+   * @throws UnexpectedValueException
    */
   public function getCoreBaseUri(): string {
     return vsprintf(
@@ -120,7 +124,7 @@ class Endpoint extends SolariumEndpoint {
    * @return string
    *   Base v1 URi for the endpoint.
    *
-   * @throws \Solarium\Exception\UnexpectedValueException
+   * @throws UnexpectedValueException
    */
   public function getV1BaseUri(): string {
     return isset($_ENV['PANTHEON_ENVIRONMENT'])
@@ -133,7 +137,7 @@ class Endpoint extends SolariumEndpoint {
    * @return string
    *   V2 base URI for the endpoint.
    *
-   * @throws \Solarium\Exception\UnexpectedValueException
+   * @throws UnexpectedValueException
    */
   public function getV2BaseUri(): string {
     return $this->getBaseUri() . '/api/';
diff --git a/src/Services/PantheonGuzzle.php b/src/Services/PantheonGuzzle.php
index 9eeec08..1288636 100644
--- a/src/Services/PantheonGuzzle.php
+++ b/src/Services/PantheonGuzzle.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_pantheon\Services;
 
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\search_api_pantheon\Traits\EndpointAwareTrait;
 use GuzzleHttp\Client;
 use GuzzleHttp\Handler\CurlHandler;
@@ -77,13 +78,13 @@ class PantheonGuzzle extends Client implements
   /**
    * Send a guzzle request.
    *
-   * @param \Psr\Http\Message\RequestInterface $request
+   * @param RequestInterface $request
    *   A PSR 7 request.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   Response from the guzzle send.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function sendRequest(RequestInterface $request): ResponseInterface {
     return $this->send($request);
@@ -129,7 +130,7 @@ class PantheonGuzzle extends Client implements
   /**
    * Get a PSR adapter interface based on this class.
    *
-   * @return \Solarium\Core\Client\Adapter\AdapterInterface
+   * @return AdapterInterface
    *   The interface in question.
    */
   public function getPsr18Adapter(): AdapterInterface {
@@ -143,9 +144,9 @@ class PantheonGuzzle extends Client implements
   /**
    * Request Middleware Callback.
    *
-   * @param \Psr\Http\Message\RequestInterface $request
+   * @param RequestInterface $request
    *
-   * @return \Psr\Http\Message\RequestInterface
+   * @return RequestInterface
    */
   public function requestUriAlterForPantheonEnvironment(RequestInterface $request) {
     $toAdd = '';
diff --git a/src/Services/SchemaPoster.php b/src/Services/SchemaPoster.php
index abd7d00..04f732f 100644
--- a/src/Services/SchemaPoster.php
+++ b/src/Services/SchemaPoster.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\search_api_pantheon\Services;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\search_api\SearchApiException;
+use Drupal\search_api_solr\SearchApiSolrException;
+use Drupal\search_api\ServerInterface;
 use Drupal\Component\FileSystem\FileSystem;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -46,7 +51,7 @@ class SchemaPoster implements LoggerAwareInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
@@ -72,10 +77,10 @@ class SchemaPoster implements LoggerAwareInterface {
    * @return array
    *   Array of response messages.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\search_api\SearchApiException
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws SearchApiException
+   * @throws SearchApiSolrException
    */
   public function postSchema(string $server_id): array {
     // PANTHEON Environment.
@@ -116,7 +121,7 @@ class SchemaPoster implements LoggerAwareInterface {
    * @param array $schemaFiles
    *   A key => value paired array of filenames => file_contents.
    *
-   * @return \Psr\Http\Message\ResponseInterface|null
+   * @return ResponseInterface|null
    *   A PSR-7 response object from the API call.
    */
   public function uploadSchemaFiles(array $schemaFiles): ?ResponseInterface {
@@ -196,8 +201,7 @@ class SchemaPoster implements LoggerAwareInterface {
    * @throws \Drupal\search_api\SearchApiException
    * @throws \Drupal\search_api_solr\SearchApiSolrException
    */
-    // @codingStandardsIgnoreLine
-
+  // @codingStandardsIgnoreLine
   /**
    * Get the schema and config files for posting on the solr server.
    *
@@ -207,15 +211,15 @@ class SchemaPoster implements LoggerAwareInterface {
    * @return array
    *   Array of key-value pairs: 'filename' => 'file contents'.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\search_api\SearchApiException
-   * @throws \Drupal\search_api_solr\SearchApiSolrException
+   * @throws PluginNotFoundException
+   * @throws SearchApiException
+   * @throws SearchApiSolrException
    * @throws \Exception
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function getSolrFiles(string $server_id = 'pantheon_solr8') {
-    /** @var \Drupal\search_api\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $this->entityTypeManager
       ->getStorage('search_api_server')
       ->load($server_id);
@@ -360,7 +364,7 @@ class SchemaPoster implements LoggerAwareInterface {
   /**
    * Get Logger Instance.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   Drupal's Logger Interface.
    */
   public function getLogger() {
@@ -370,7 +374,7 @@ class SchemaPoster implements LoggerAwareInterface {
   /**
    * Set Logger Instance.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Drupal's Logger Interface.
    */
   public function setLogger(LoggerInterface $logger): void {
diff --git a/src/Services/SolariumClient.php b/src/Services/SolariumClient.php
index 3afd20d..74abb27 100644
--- a/src/Services/SolariumClient.php
+++ b/src/Services/SolariumClient.php
@@ -40,10 +40,10 @@ class SolariumClient extends Client {
   /**
    * Always use the default endpoint.
    *
-   * @param \Solarium\Core\Query\QueryInterface $query
+   * @param QueryInterface $query
    * @param \Solarium\Core\Client\Endpoint|string|null $endpoint
    *
-   * @return \Solarium\Core\Query\Result\ResultInterface
+   * @return ResultInterface
    */
   public function execute(QueryInterface $query, $endpoint = NULL): ResultInterface {
     return parent::execute($query, $this->defaultEndpoint);
@@ -52,10 +52,10 @@ class SolariumClient extends Client {
   /**
    * Always use the default endpoint.
    *
-   * @param \Solarium\Core\Client\Request $request
+   * @param Request $request
    * @param \Solarium\Core\Client\Endpoint|string|null $endpoint
    *
-   * @return \Solarium\Core\Client\Response
+   * @return Response
    */
   public function executeRequest(Request $request, $endpoint = NULL): Response {
     return parent::executeRequest($request, $this->defaultEndpoint);
diff --git a/src/Solarium/EventDispatcher/EventProxy.php b/src/Solarium/EventDispatcher/EventProxy.php
index 1a76e1b..d4be8b4 100644
--- a/src/Solarium/EventDispatcher/EventProxy.php
+++ b/src/Solarium/EventDispatcher/EventProxy.php
@@ -2,14 +2,14 @@
 
 namespace Drupal\search_api_pantheon\Solarium\EventDispatcher;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * A proxy for events defined by symfony contracts to be used with older Drupal.
  */
 class EventProxy extends Event {
   /**
-   * @var \Symfony\Contracts\EventDispatcher\Event
+   * @var Event
    */
   protected $event;
 
diff --git a/src/Solarium/EventDispatcher/Psr14Bridge.php b/src/Solarium/EventDispatcher/Psr14Bridge.php
index 572012d..6bf252d 100644
--- a/src/Solarium/EventDispatcher/Psr14Bridge.php
+++ b/src/Solarium/EventDispatcher/Psr14Bridge.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\search_api_pantheon\Solarium\EventDispatcher;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
 use Psr\EventDispatcher\EventDispatcherInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * A helper to decorate the legacy EventDispatcherInterface::dispatch().
@@ -12,7 +12,7 @@ use Symfony\Component\EventDispatcher\Event;
 final class Psr14Bridge extends ContainerAwareEventDispatcher implements EventDispatcherInterface {
 
   /**
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $dispatcher;
 
@@ -22,7 +22,7 @@ final class Psr14Bridge extends ContainerAwareEventDispatcher implements EventDi
 
   public function dispatch($event, Event $null = NULL) {
     if (\is_object($event)) {
-      return $this->dispatcher->dispatch(\get_class($event), new EventProxy($event));
+      return $this->dispatcher->dispatch(new EventProxy($event), \get_class($event));
     }
     return $this->dispatcher->dispatch($event, $null);
   }
diff --git a/src/Traits/EndpointAwareTrait.php b/src/Traits/EndpointAwareTrait.php
index 39ef446..3cd8002 100644
--- a/src/Traits/EndpointAwareTrait.php
+++ b/src/Traits/EndpointAwareTrait.php
@@ -12,7 +12,7 @@ trait EndpointAwareTrait {
   /**
    * The endpoint in question.
    *
-   * @var \Drupal\search_api_pantheon\Services\Endpoint
+   * @var Endpoint
    */
   protected Endpoint $endpoint;
 
diff --git a/tests/Unit/GuzzleClassTest.php b/tests/Unit/GuzzleClassTest.php
index d5e07c5..fa704e8 100644
--- a/tests/Unit/GuzzleClassTest.php
+++ b/tests/Unit/GuzzleClassTest.php
@@ -24,13 +24,9 @@ class GuzzleClassTest extends TestCase {
   protected function setUp(): void {
     parent::setUp();
 
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock(LoggerInterface::class);
 
-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);
 
     $this->loggerFactory
       ->expects($this->any())
@@ -43,6 +39,7 @@ class GuzzleClassTest extends TestCase {
    * Test the Pantheon Guzzle Client.
    *
    * @test
+   * @doesNotPerformAssertions
    */
   public function testGuzzleClient() {
 
diff --git a/tests/Unit/SchemaPosterTest.php b/tests/Unit/SchemaPosterTest.php
index 303e629..306cc4d 100644
--- a/tests/Unit/SchemaPosterTest.php
+++ b/tests/Unit/SchemaPosterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\search_api_pantheon\tests\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use PHPCouchDB\Server;
 use GuzzleHttp\Client;
 use GuzzleHttp\HandlerStack;
@@ -23,7 +24,7 @@ class SchemaPosterTest extends TestCase {
   /**
    * The Logger Factory service mock.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface|mixed|\PHPUnit\Framework\MockObject\MockObject
+   * @var LoggerChannelFactoryInterface|mixed|MockObject
    */
   protected LoggerChannelFactoryInterface $loggerFactory;
 
@@ -33,13 +34,9 @@ class SchemaPosterTest extends TestCase {
   protected function setUp(): void {
     parent::setUp();
 
-    $logger = $this->getMockBuilder(LoggerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger = $this->createMock(LoggerInterface::class);
 
-    $this->loggerFactory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);
 
     $this->loggerFactory
       ->expects($this->any())
