modules/contrib/disqus/disqus.api.php
modules/contrib/disqus/disqus.install
modules/contrib/disqus/disqus.module
modules/contrib/disqus/src/Controller/DisqusController.php
modules/contrib/disqus/src/Controller/NewCommentController.php
modules/contrib/disqus/src/DisqusCommentManager.php
modules/contrib/disqus/src/DisqusCommentManagerInterface.php
modules/contrib/disqus/src/Element/Disqus.php
modules/contrib/disqus/src/Event/NewCommentEvent.php
modules/contrib/disqus/src/EventSubscriber/NewCommentSubscriber.php
modules/contrib/disqus/src/Form/DisqusSettingsForm.php
modules/contrib/disqus/src/Plugin/Block/DisqusBaseBlock.php
modules/contrib/disqus/src/Plugin/Block/DisqusCombinationWidgetBlock.php
modules/contrib/disqus/src/Plugin/Block/DisqusPopularThreadsBlock.php
modules/contrib/disqus/src/Plugin/Block/DisqusRecentCommentBlock.php
modules/contrib/disqus/src/Plugin/Block/DisqusTopCommentersBlock.php
modules/contrib/disqus/src/Plugin/Field/FieldFormatter/DisqusFormatter.php
modules/contrib/disqus/src/Plugin/Field/FieldType/DisqusItem.php
modules/contrib/disqus/src/Plugin/Field/FieldWidget/DisqusWidget.php
modules/contrib/disqus/src/Plugin/migrate/DisqusDeriver.php
modules/contrib/disqus/src/Plugin/migrate/destination/DisqusComment.php
modules/contrib/disqus/src/Plugin/migrate/process/DisqusEntityId.php
modules/contrib/disqus/src/Plugin/migrate/process/DisqusEntityType.php
modules/contrib/disqus/src/Plugin/migrate/source/DisqusComment.php
modules/contrib/disqus/src/Plugin/migrate/source/DisqusEnabledNodeTypes.php
modules/contrib/disqus/src/Plugin/views/field/DisqusCommentCount.php
modules/contrib/disqus/tests/src/Functional/DisqusAdminTest.php

14 files with changes
=====================

1) modules/contrib/disqus/src/Plugin/views/field/DisqusCommentCount.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\disqus\Plugin\views\field;

+use Drupal\Core\Config\Config;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Disqus comment manager object.
    *
-   * @var \Drupal\disqus\DisqusCommentManager
+   * @var DisqusCommentManager
    */
   protected $disqusManager;

@@ @@
   /**
    * The disqus.settings configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\disqus\DisqusCommentManager $disqus_manager
+   * @param DisqusCommentManager $disqus_manager
    *   The disqus comment manager object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountInterface $current_user, DisqusCommentManager $disqus_manager, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/disqus/src/Plugin/migrate/source/DisqusComment.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\disqus\Plugin\migrate\source;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\migrate\Plugin\migrate\source\SourcePluginBase;
@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The disqus.settings configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implemetation definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, LoggerInterface $logger, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/disqus/src/Plugin/migrate/process/DisqusEntityType.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/disqus/src/Plugin/migrate/destination/DisqusComment.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\disqus\Plugin\migrate\destination;

+use Drupal\Core\Config\Config;
 use Drupal\migrate\Plugin\migrate\destination\DestinationBase;
 use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\migrate\Row;
@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The disqus.settings configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implemetation definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, LoggerInterface $logger, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/disqus/src/Plugin/Field/FieldWidget/DisqusWidget.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/disqus/src/Plugin/Field/FieldFormatter/DisqusFormatter.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The formatter label display setting.
    * @param string $view_mode
    *   The view mode.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, AccountInterface $current_user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/disqus/src/Plugin/Block/DisqusBaseBlock.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Disqus comment manager object.
    *
-   * @var \Drupal\disqus\DisqusCommentManager
+   * @var DisqusCommentManager
    */
   protected $disqusManager;

@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * Disqus config object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $disqusConfig;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\disqus\DisqusCommentManager $disqus_manager
+   * @param DisqusCommentManager $disqus_manager
    *   The disqus comment manager object.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The account for which view access should be checked.
-   * @param \Drupal\Core\Config\ImmutableConfig $disqus_config
+   * @param ImmutableConfig $disqus_config
    *   Disqus config object.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $route_match, DisqusCommentManager $disqus_manager, AccountInterface $current_user, ImmutableConfig $disqus_config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/disqus/src/Form/DisqusSettingsForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * A database backend file usage overridable.
    *
-   * @var \Drupal\file\FileUsage\FileUsageInterface
+   * @var FileUsageInterface
    */
   protected $fileUsage;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a \Drupal\disqus\DisqusSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\file\FileUsage\FileUsageInterface $file_usage
+   * @param FileUsageInterface $file_usage
    *   The file usage overridable.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, FileUsageInterface $file_usage, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/disqus/src/EventSubscriber/NewCommentSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\disqus\EventSubscriber;

+use Psr\Log\LoggerInterface;
+use Symfony\Component\Routing\Route;
 use Drupal\disqus\Event\NewCommentEvent;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * A router implementation which does not check access.
    *
-   * @var \Symfony\Component\Routing\Matcher\UrlMatcherInterface
+   * @var UrlMatcherInterface
    */
   protected $accessUnawareRouter;

@@ @@
   /**
    * Constructs a NewCommentSubscriber object.
    *
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The email plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   A logger factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Symfony\Component\Routing\Matcher\UrlMatcherInterface $access_unaware_router
+   * @param UrlMatcherInterface $access_unaware_router
    *   A router implementation which does not check access.
    */
   public function __construct(MailManagerInterface $mail_manager, EntityTypeManagerInterface $entity_type_manager, LoggerChannelFactoryInterface $logger_factory, LanguageManagerInterface $language_manager, UrlMatcherInterface $access_unaware_router) {
@@ @@
   /**
    * Send email notification of new comment.
    *
-   * @param \Drupal\disqus\Event\NewCommentEvent $event
+   * @param NewCommentEvent $event
    *   The new comment event object.
    */
   public function onNewComment(NewCommentEvent $event) {
@@ @@
       try {
         $result = $this->accessUnawareRouter->match($post->url);
         if (!empty($result['_route_object'])) {
-          /** @var \Symfony\Component\Routing\Route $route */
+          /** @var Route $route */
           $route = $result['_route_object'];
           if ($parameters = $route->getOption('parameters')) {
             foreach ($parameters as $name => $options) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/disqus/src/Event/NewCommentEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\disqus\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Wraps a new comment event for event listeners.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/disqus/src/Element/Disqus.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\disqus\Element;

+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Render\Element\RenderElement;

 /**
@@ @@
    */
   public static function displayDisqusComments($title, $url, $identifier, $callbacks) {
     $disqus_settings = \Drupal::config('disqus.settings');
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
     $element = [
       '#theme_wrappers' => ['disqus_noscript', 'container'],
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/disqus/src/DisqusCommentManager.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Configuration Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs the DisqusCommentManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   A module handler.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   A module handler.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, AccountInterface $current_user, ModuleHandlerInterface $module_handler, ConfigFactory $config_factory) {
@@ @@
         $data['avatar'] = !empty($file_uri) ? $file_uri : NULL;
       }
       if (isset($data['avatar'])) {
-        $data['avatar'] = file_create_url($data['avatar']);
+        $data['avatar'] = \Drupal::service('file_url_generator')->generateAbsoluteString($data['avatar']);
       }
     }
     $this->moduleHandler->alter('disqus_user_data', $data);
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/disqus/src/Controller/NewCommentController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\disqus\Controller;

+use Drupal\Core\TempStore\SharedTempStore;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\disqus\Event\NewCommentEvent;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $flood;

@@ @@
   /**
    * The comments temp store.
    *
-   * @var \Drupal\Core\TempStore\SharedTempStore
+   * @var SharedTempStore
    */
   protected $tempStore;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * NewComment constructor.
    *
-   * @param \Drupal\Core\Flood\FloodInterface $flood
+   * @param FloodInterface $flood
    *   The flood service.
-   * @param \Drupal\Core\TempStore\SharedTempStoreFactory $temp_store_factory
+   * @param SharedTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
    */
   public function __construct(FloodInterface $flood, SharedTempStoreFactory $temp_store_factory, TimeInterface $time, EventDispatcherInterface $event_dispatcher) {
@@ @@
    * @param string $comment_id
    *   The comment ID.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A Symfony response object.
    */
   public function receiver($comment_id) {
@@ @@
             ->format('U');
           if ($this->time->getRequestTime() <= strtotime('+1 hour', $created)) {
             $this->tempStore->set($comment_id, TRUE);
-            $this->eventDispatcher->dispatch(NewCommentEvent::NEW_COMMENT, new NewCommentEvent($post));
+            $this->eventDispatcher->dispatch(new NewCommentEvent($post), NewCommentEvent::NEW_COMMENT);

             // Clear flood control for this user as this was a genuine comment.
             $this->flood->clear('disqus.new_comment');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/disqus/disqus.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field\Entity\FieldStorageConfig;
+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 /**
  * @file
  * Provides any upgrade path requirements.
@@ @@
     ->getStorage('field_storage_config')
     ->loadByProperties(['type' => 'disqus_comment']);

-  /** @var \Drupal\field\Entity\FieldStorageConfig $field */
+  /** @var FieldStorageConfig $field */
   foreach ($fields as $field) {
     $schema = $field->getSchema();
     $target_entity_type = \Drupal::entityTypeManager()
@@ @@
       ->getDefinition($field->getTargetEntityTypeId());
     $stored_schema = \Drupal::keyValue('entity.storage_schema.sql')
       ->get($target_entity_type->id() . '.field_schema_data.' . $field->getName());
-    /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $storage */
+    /** @var SqlContentEntityStorage $storage */
     $storage = \Drupal::entityTypeManager()->getStorage($target_entity_type->id());
     $table_mapping = $storage->getTableMapping();
     $column_name = $table_mapping->getFieldColumnName($field, $property_name);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 14 files have been changed by Rector                                      

