modules/contrib/media_acquiadam/media_acquiadam.install
modules/contrib/media_acquiadam/media_acquiadam.module
modules/contrib/media_acquiadam/modules/media_acquiadam_example/media_acquiadam_example.install
modules/contrib/media_acquiadam/modules/media_acquiadam_report/media_acquiadam_report.install
modules/contrib/media_acquiadam/modules/media_acquiadam_report/media_acquiadam_report.module
modules/contrib/media_acquiadam/modules/media_acquiadam_report/src/EventSubscriber/AcquiadamUsageSubscriber.php
modules/contrib/media_acquiadam/modules/media_acquiadam_report/src/Routing/RouteSubscriber.php
modules/contrib/media_acquiadam/src/Acquiadam.php
modules/contrib/media_acquiadam/src/AcquiadamAuthService.php
modules/contrib/media_acquiadam/src/AcquiadamAuthServiceInterface.php
modules/contrib/media_acquiadam/src/AcquiadamInterface.php
modules/contrib/media_acquiadam/src/AssetData.php
modules/contrib/media_acquiadam/src/AssetDataInterface.php
modules/contrib/media_acquiadam/src/Batch/AcquiadamUpdateAssetsReference.php
modules/contrib/media_acquiadam/src/Client.php
modules/contrib/media_acquiadam/src/Commands/AcquiadamCommands.php
modules/contrib/media_acquiadam/src/Controller/AcquiadamAuthController.php
modules/contrib/media_acquiadam/src/Controller/AcquiadamController.php
modules/contrib/media_acquiadam/src/Entity/Asset.php
modules/contrib/media_acquiadam/src/Entity/Category.php
modules/contrib/media_acquiadam/src/Entity/EntityInterface.php
modules/contrib/media_acquiadam/src/Exception/InvalidCredentialsException.php
modules/contrib/media_acquiadam/src/Exception/UploadAssetException.php
modules/contrib/media_acquiadam/src/Form/AcquiadamConfig.php
modules/contrib/media_acquiadam/src/Form/AcquiadamUpdateAssetsReference.php
modules/contrib/media_acquiadam/src/MediaEntityHelper.php
modules/contrib/media_acquiadam/src/Plugin/EntityBrowser/Widget/Acquiadam.php
modules/contrib/media_acquiadam/src/Plugin/Linkit/Substitution/DAMAsset.php
modules/contrib/media_acquiadam/src/Plugin/QueueWorker/AssetRefresh.php
modules/contrib/media_acquiadam/src/Plugin/QueueWorker/IntegrationLinkReport.php
modules/contrib/media_acquiadam/src/Plugin/media/Source/AcquiadamAsset.php
modules/contrib/media_acquiadam/src/Service/AssetFileEntityHelper.php
modules/contrib/media_acquiadam/src/Service/AssetImageHelper.php
modules/contrib/media_acquiadam/src/Service/AssetMediaFactory.php
modules/contrib/media_acquiadam/src/Service/AssetMetadataHelper.php
modules/contrib/media_acquiadam/src/Service/AssetRefreshManager.php
modules/contrib/media_acquiadam/src/Service/AssetRefreshManagerInterface.php
modules/contrib/media_acquiadam/tests/modules/media_acquiadam_test/src/TestClient.php
modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamKernelTestBase.php
modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamMediaTest.php
modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetDataTrait.php
modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetImageHelperTrait.php
modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamConfigTrait.php
modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamLoggerFactoryTrait.php
modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamMockedMediaEntityTrait.php
modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamAssetTest.php
modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamAuthTest.php
modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamClientTest.php
modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamConfigFormTest.php
modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamServiceTest.php
modules/contrib/media_acquiadam/tests/src/Unit/AssetDataTest.php
modules/contrib/media_acquiadam/tests/src/Unit/AssetFileEntityHelperTest.php
modules/contrib/media_acquiadam/tests/src/Unit/AssetImageHelperTest.php
modules/contrib/media_acquiadam/tests/src/Unit/AssetMediaFactoryTest.php
modules/contrib/media_acquiadam/tests/src/Unit/AssetMetadataHelperTest.php
modules/contrib/media_acquiadam/tests/src/Unit/AssetRefreshManagerTest.php
modules/contrib/media_acquiadam/tests/src/Unit/MediaEntityHelperTest.php
modules/contrib/media_acquiadam/tests/src/Unit/Plugin/QueueWorker/AssetRefreshTest.php

41 files with changes
=====================

1) modules/contrib/media_acquiadam/tests/src/Unit/MediaEntityHelperTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_acquiadam\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Container builder helper.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
     $this->assertInstanceOf(FileInterface::class,
       $this->getNewMediaEntityHelper()->getExistingFile());

-    $media = $this->getMockBuilder(MediaInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media = $this->createMock(MediaInterface::class);

-    /** @var \Drupal\media\MediaInterface|\PHPUnit\Framework\MockObject\MockObject $media */
+    /** @var MediaInterface|MockObject $media */
     $this->assertFalse($this->getNewMediaEntityHelper($media)
       ->getExistingFile());
   }
@@ @@
     $this->assertEquals($this->getMockedFileEntity()->id(),
       $this->getNewMediaEntityHelper()->getExistingFileId());

-    /** @var \Drupal\media\MediaInterface|\PHPUnit\Framework\MockObject\MockObject $media */
-    $media = $this->getMockBuilder(MediaInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var MediaInterface|MockObject $media */
+    $media = $this->createMock(MediaInterface::class);

     $this->assertFalse($this->getNewMediaEntityHelper($media)
       ->getExistingFileId());
@@ @@
     $this->assertEquals('phpunit_file_field',
       $this->getNewMediaEntityHelper()->getAssetFileField());

-    /** @var \Drupal\media\MediaInterface|\PHPUnit\Framework\MockObject\MockObject $media */
-    $media = $this->getMockBuilder(MediaInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var MediaInterface|MockObject $media */
+    $media = $this->createMock(MediaInterface::class);

     $this->assertFalse($this->getNewMediaEntityHelper($media)
       ->getAssetFileField());
@@ @@
   /**
    * Gets an instance of the MediaEntityHelper class.
    *
-   * @param \Drupal\media\MediaInterface|null $media
+   * @param MediaInterface|null $media
    *   The media entity to wrap.
    *
-   * @return \Drupal\media_acquiadam\MediaEntityHelper
+   * @return MediaEntityHelper
    *   An instance of the MediaEntityHelper class.
    */
   protected function getNewMediaEntityHelper(MediaInterface $media = NULL) {
@@ @@
   /**
    * Sets Drupal mocked services into a container.
    *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The container to set mocks into.
    */
   protected function setMockedDrupalServices(ContainerBuilder $container) {
@@ @@
     $media_bundle->method('getFieldMap')
       ->willReturn(['file' => 'phpunit_file_field']);

-    $entity_storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_storage = $this->createMock(EntityStorageInterface::class);
     $entity_storage->method('load')->willReturnMap([
       [$this->getMockedFileEntity()->id(), $this->getMockedFileEntity()],
       ['media_acquiadam', $media_bundle],
@@ @@
       ],
     ]);

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_type_manager->method('getStorage')->willReturnMap([
       ['file', $entity_storage],
       ['media_type', $entity_storage],
@@ @@
   /**
    * Sets Acquia DAM mocked services into a container.
    *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The container to set mocks into.
    */
   protected function setMockedAcquiaDamServices(ContainerBuilder $container) {
-    $asset_data = $this->getMockBuilder(AssetData::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_data = $this->createMock(AssetData::class);
     $asset_data->method('isUpdatedAsset')->willReturnOnConsecutiveCalls(FALSE,
       TRUE);

-    $acquiadam = $this->getMockBuilder(Acquiadam::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam = $this->createMock(Acquiadam::class);
     $acquiadam->method('getAsset')->willReturnMap([
       [$this->getAssetData()->id, TRUE, $this->getAssetData()],
     ]);

-    $asset_file_helper = $this->getMockBuilder(AssetFileEntityHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_file_helper = $this->createMock(AssetFileEntityHelper::class);
     $asset_file_helper->method('getDestinationFromEntity')
       ->willReturn('private://assets/replaced');
     $asset_file_helper->method('createNewFile')->with($this->anything(),
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/media_acquiadam/tests/src/Unit/AssetRefreshManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_acquiadam\Unit;

+use Drupal\media_acquiadam\Service\AssetRefreshManagerInterface;
+use Drupal\Core\Queue\QueueInterface;
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\media_acquiadam\AcquiadamInterface;
+use Drupal\Core\State\StateInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * DI container.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * AssetRefreshManager service.
    *
-   * @var \Drupal\media_acquiadam\Service\AssetRefreshManagerInterface
+   * @var AssetRefreshManagerInterface
    */
   protected $assetRefreshManager;

@@ @@
   /**
    * The Queue Worker.
    *
-   * @var \Drupal\Core\Queue\QueueInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var QueueInterface|MockObject
    */
   protected $queue;

@@ @@
   /**
    * The media entity query.
    *
-   * @var \Drupal\Core\Entity\Query\QueryInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var QueryInterface|MockObject
    */
   protected $entityQuery;

@@ @@
   /**
    * The Acquiadam Service.
    *
-   * @var \Drupal\media_acquiadam\AcquiadamInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var AcquiadamInterface|MockObject
    */
   protected $acquiadamClient;

@@ @@
   /**
    * The Drupal State Service.
    *
-   * @var \Drupal\Core\State\StateInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var StateInterface|MockObject
    */
   protected $state;

@@ @@
     $real_time = new \DateTime('now');
     $sync_time = new \DateTime('now');
     $sync_time->modify($last_sync_offset);
-    $state = $this->getMockBuilder(State::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $state = $this->createMock(State::class);
     $state->method('get')
       ->with('media_acquiadam.last_sync')
       ->willReturn($sync_time->getTimestamp());
-    $time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $time = $this->createMock(TimeInterface::class);
     $time->method('getCurrentTime')
       ->willReturn($real_time->getTimestamp());
     $asset_before_time = $real_time->modify('-1 hour');
@@ @@
       ->disableOriginalConstructor()
       ->getMock();

-    $this->state = $this->getMockBuilder(State::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(State::class);
     $this->state->method('get')
       ->with('media_acquiadam.last_sync')
       // 2022-05-24T09:14:42Z UTC.
       ->willReturn('1653383682');

-    $this->queue = $this->getMockBuilder(DatabaseQueue::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    /** @var \Drupal\Core\Queue\QueueFactory|\PHPUnit\Framework\MockObject\MockObject $queue_factory */
-    $queue_factory = $this->getMockBuilder(QueueFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->queue = $this->createMock(DatabaseQueue::class);
+    /** @var QueueFactory|MockObject $queue_factory */
+    $queue_factory = $this->createMock(QueueFactory::class);
     $queue_factory->method('get')
       ->willReturn($this->queue);

@@ @@
       ->disableOriginalConstructor()
       ->getMock();

-    $entity_storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_storage = $this->createMock(EntityStorageInterface::class);
     $entity_storage->method('getQuery')->willReturn($this->entityQuery);

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_type_manager->method('getStorage')->willReturnMap([
       ['media', $entity_storage],
     ]);

-    $language_manager = $this->getMockBuilder(LanguageManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $language_manager = $this->createMock(LanguageManagerInterface::class);
     $language_manager->method('getCurrentLanguage')
       ->willReturn(new Language(Language::$defaultValues));

-    $time = $this->getMockBuilder(TimeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $time = $this->createMock(TimeInterface::class);
     $time->method('getCurrentTime')
       // 2022-05-24T15:17:00Z UTC.
       ->willReturn('1653405420');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/media_acquiadam/tests/src/Unit/AssetMetadataHelperTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Container builder helper.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * Acquia DAM asset metadata helper service.
    *
-   * @var \Drupal\media_acquiadam\Service\AssetMetadataHelper
+   * @var AssetMetadataHelper
    */
   protected $assetMetadataHelper;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $date_formatter = $this->getMockBuilder(DateFormatterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $date_formatter = $this->createMock(DateFormatterInterface::class);
     $date_formatter->method('format')
       ->willReturnCallback(function ($timestamp, $type, $format) {
         if ('custom' == $type) {
@@ @@
         return FALSE;
       });

-    $acquiadam_client = $this->getMockBuilder(Acquiadam::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam_client = $this->createMock(Acquiadam::class);

     $this->container = new ContainerBuilder();
     $this->container->set('string_translation',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/media_acquiadam/tests/src/Unit/AssetMediaFactoryTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_acquiadam\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Container builder helper.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * The asset media factory.
    *
-   * @var \Drupal\media_acquiadam\Service\AssetMediaFactory|\PHPUnit\Framework\MockObject\MockObject
+   * @var AssetMediaFactory|MockObject
    */
   protected $assetMediaFactory;

@@ @@
   /**
    * A mock media entity.
    *
-   * @var \Drupal\media\MediaInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var MediaInterface|MockObject
    */
   protected $mediaEntity;

@@ @@

     $this->mediaEntity = $this->getMockedMediaEntity($asset->id);

-    $media_bundle = $this->getMockBuilder(MediaTypeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media_bundle = $this->createMock(MediaTypeInterface::class);
     $media_bundle->method('getSource')->willReturn($this->mediaEntity->getSource());
     $media_bundle->method('getFieldMap')
       ->willReturn(['file' => 'phpunit_file_field']);

-    $entity_storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_storage = $this->createMock(EntityStorageInterface::class);
     $entity_storage->method('loadByProperties')
       ->with(['source' => 'acquiadam_asset'])
       ->willReturn([
@@ @@
       ['media_acquiadam', $media_bundle],
     ]);

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_type_manager->method('getStorage')->willReturnMap([
       ['media_type', $entity_storage],
       ['media', $entity_storage],
@@ @@
       ['file', $entity_storage],
     ]);

-    $asset_data = $this->getMockBuilder(AssetDataInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_data = $this->createMock(AssetDataInterface::class);

-    $acquiadam_client = $this->getMockBuilder(AcquiadamInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam_client = $this->createMock(AcquiadamInterface::class);

-    $asset_file_helper = $this->getMockBuilder(AssetFileEntityHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_file_helper = $this->createMock(AssetFileEntityHelper::class);

     $this->container = new ContainerBuilder();
     $this->container->set('entity_type.manager', $entity_type_manager);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/media_acquiadam/tests/src/Unit/AssetImageHelperTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_acquiadam\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystem;
@@ @@
   /**
    * Container builder helper.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * A mocked version of the AssetImageHelper service.
    *
-   * @var \Drupal\media_acquiadam\Service\AssetImageHelper|\PHPUnit\Framework\MockObject\MockObject
+   * @var AssetImageHelper|MockObject
    */
   protected $assetImageHelper;

@@ @@
    * This is used to provide some implemented methods that would normally be
    * an issue to test.
    *
-   * @return \Drupal\media_acquiadam\Service\AssetImageHelper|\PHPUnit\Framework\MockObject\MockObject
+   * @return AssetImageHelper|MockObject
    *   A mocked AssetImageHelper object.
    */
   protected function getMockedAssetImageHelper() {
@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $http_client = $this->getMockBuilder(GuzzleClient::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(GuzzleClient::class);

     $file_system = $this->getMockBuilder(FileSystem::class)
       ->disableOriginalConstructor()
@@ @@
         return is_string($target) ? $target . '_copy' : $target . '_blah';
       });

-    $mime_type_guesser = $this->getMockBuilder(MimeTypeGuesser::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mime_type_guesser = $this->createMock(MimeTypeGuesser::class);
     $mime_type_guesser->method('guessMimeType')->willReturnCallback(function ($uri) {
       $map = [
         'public://test.jpg' => 'image/jpg',
@@ @@
       return $map[$uri] ?? '';
     });

-    $image_factory = $this->getMockBuilder(ImageFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $image_factory = $this->createMock(ImageFactory::class);

-    $url_assembler = $this->getMockBuilder(UnroutedUrlAssemblerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url_assembler = $this->createMock(UnroutedUrlAssemblerInterface::class);

     $url_assembler
       ->expects($this->any())
@@ @@
         ['https://demo.widen.net/content/demoextid/original/theHumanRaceMakesSense.jpg?u=lv0nkk&download=true', ['query' => ['h' => 650, 'q' => 80], 'external' => TRUE], FALSE, 'https://demo.widen.net/content/demoextid/original/theHumanRaceMakesSense.jpg?u=lv0nkk&download=true&h=650&q=80'],
       ]);

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);

     $this->container = new ContainerBuilder();
     $this->container->set('http_client', $http_client);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/media_acquiadam/tests/src/Unit/AssetFileEntityHelperTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_acquiadam\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * Container builder helper.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * A mocked AssetFileEntityHelper.
    *
-   * @var \Drupal\media_acquiadam\Service\AssetFileEntityHelper|\PHPUnit\Framework\MockObject\MockObject
+   * @var AssetFileEntityHelper|MockObject
    */
   protected $assetFileEntityHelper;

@@ @@
   /**
    * A mocked file entity.
    *
-   * @var \Drupal\file\FileInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var FileInterface|MockObject
    */
   protected $mockedFileEntity;

@@ @@
       ->getMockForAbstractClass();
     $this->mockedFileEntity->method('id')->willReturn(333);

-    $acquiadam = $this->getMockBuilder(Acquiadam::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam = $this->createMock(Acquiadam::class);

-    $asset_media_factory = $this->getMockBuilder(AssetMediaFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_media_factory = $this->createMock(AssetMediaFactory::class);
     $asset_media_factory->method('getFileEntity')
       ->willReturn($this->mockedFileEntity->id());

@@ @@
   /**
    * Sets Drupal mocked services into a container.
    *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The container to set mocks into.
    */
   protected function setMockedDrupalServices(ContainerBuilder $container) {
-    $file_storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $file_storage = $this->createMock(EntityStorageInterface::class);
     $file_storage->method('load')
       ->with($this->mockedFileEntity->id())
       ->willReturn($this->mockedFileEntity);
@@ @@
       ],
     ]);

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);
     $entity_type_manager->method('getStorage')->willReturnMap([
       ['file', $file_storage],
     ]);

-    $data_definition = $this->getMockBuilder(DataDefinitionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $data_definition = $this->createMock(DataDefinitionInterface::class);
     $data_definition->method('getSetting')->willReturnMap([
       ['uri_scheme', 'private'],
       ['file_directory', 'assets/[token]'],
     ]);

-    $field_definition = $this->getMockBuilder(FieldDefinitionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $field_definition = $this->createMock(FieldDefinitionInterface::class);
     $field_definition->method('getItemDefinition')
       ->willReturn($data_definition);

-    $entity_field_manager = $this->getMockBuilder(EntityFieldManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_field_manager = $this->createMock(EntityFieldManagerInterface::class);
     $entity_field_manager->method('getFieldDefinitions')->willReturnMap([
       ['media', 'media_acquiadam', ['phpunit_file_field' => $field_definition]],
     ]);

-    $token = $this->getMockBuilder(Token::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $token = $this->createMock(Token::class);
     $token->method('replace')
       ->willReturnCallback(function ($string, $a, $b, $c) {
         return ('assets/[token]' == $string) ? 'assets/replaced' : $string;
@@ @@
   /**
    * Get a mocked AssetFileEntityHelper that stubs file operations.
    *
-   * @return \Drupal\media_acquiadam\Service\AssetFileEntityHelper|\PHPUnit\Framework\MockObject\MockObject
+   * @return AssetFileEntityHelper|MockObject
    *   The mocked AssetFileEntityHelper class.
    */
   protected function getMockedAssetFileEntityHelper() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/media_acquiadam/tests/src/Unit/AssetDataTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_acquiadam\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\media_acquiadam\AssetData;
@@ @@
   /**
    * Container builder helper.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
    *
    * Mocked to have a fixed set/get.
    *
-   * @var \Drupal\media_acquiadam\AssetData|\PHPUnit\Framework\MockObject\MockObject
+   * @var AssetData|MockObject
    */
   protected $acquiaAssetData;

@@ @@
   protected function setUp() :void {
     parent::setUp();

-    $connection = $this->getMockBuilder(Connection::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $connection = $this->createMock(Connection::class);

     $asset_data = $this->getMockBuilder(AssetData::class)
       ->disableOriginalConstructor()
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamServiceTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Container builder helper.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * Acquia DAM client.
    *
-   * @var \Drupal\media_acquiadam\Acquiadam
+   * @var Acquiadam
    */
   protected $acquiaDamClient;

@@ @@
   protected function setUp() :void {
     parent::setUp();

-    $dam_client = $this->getMockBuilder(Client::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dam_client = $this->createMock(Client::class);
     $dam_client->expects($this->any())
       ->method('getCategoryData')
       ->willReturnCallback(function ($category) {
@@ @@
       ->willReturnCallback(function () {
         return $this->getAssetData();
       });
-    $acquiadam_asset_data = $this->getMockBuilder(AssetDataInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam_asset_data = $this->createMock(AssetDataInterface::class);

     $this->container = new ContainerBuilder();
     $this->container->set('logger.factory', $this->getLoggerFactoryStub());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamConfigFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_acquiadam\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Datetime\Time;
 use Drupal\Core\Batch\BatchBuilder;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ @@
   /**
    * Container builder helper.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * Drupal State service.
    *
-   * @var \Drupal\Core\State\State|\PHPUnit\Framework\MockObject\MockObject
+   * @var State|MockObject
    */
   protected $state;

@@ @@
   /**
    * Queue Worker.
    *
-   * @var \Drupal\media_acquiadam\Plugin\QueueWorker\AssetRefresh|\PHPUnit\Framework\MockObject\MockObject
+   * @var AssetRefresh|MockObject
    */
   protected $queueWorker;

@@ @@
    */
   public function testPerformManualSync() {
     $form = [];
-    $form_state = $this->getMockBuilder(FormStateInterface::class)
-      ->getMock();
+    $form_state = $this->createMock(FormStateInterface::class);

     $this->assertFalse($this->acquiaDamConfig->performManualSync($form, $form_state));

@@ @@
    * @covers ::processBatchItems
    * @covers ::finishBatchOperation
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function testProcessBatchItems() {
     // Generate a set of test media entity ids.
@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $http_client = $this->getMockBuilder(ClientInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $time = $this->getMockBuilder(Time::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(ClientInterface::class);
+    $time = $this->createMock(Time::class);
     $time->method('getRequestTime')
       ->willReturn(1560000000);

-    $this->queueWorker = $this->getMockBuilder(AssetRefresh::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $queue_worker_manager = $this->getMockBuilder(QueueWorkerManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->queueWorker = $this->createMock(AssetRefresh::class);
+    $queue_worker_manager = $this->createMock(QueueWorkerManager::class);
     $queue_worker_manager->expects($this->any())
       ->method('createInstance')
       ->willReturn($this->queueWorker);

-    $this->state = $this->getMockBuilder(State::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->state = $this->createMock(State::class);

     $this->container = new ContainerBuilder();
     $this->container->set('string_translation',
@@ @@
   /**
    * Get a partially mocked AcquiadamConfig object.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject|\Drupal\media_acquiadam\Form\AcquiadamConfig
+   * @return MockObject|AcquiadamConfig
    *   A mocked version of the AcquiadamConfig form class.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamClientTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Container builder helper.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * Acquia DAM client factory.
    *
-   * @var \Drupal\media_acquiadam\Client
+   * @var Client
    */
   protected $client;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $current_user = $this->getMockBuilder(AccountProxyInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $current_user = $this->createMock(AccountProxyInterface::class);

-    $http_client = $this->getMockBuilder(ClientInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_client = $this->createMock(ClientInterface::class);

-    $user_data = $this->getMockBuilder(UserDataInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $user_data = $this->createMock(UserDataInterface::class);

-    $request_stack = $this->getMockBuilder(RequestStack::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $request_stack = $this->createMock(RequestStack::class);

     $client = new Client($http_client, $user_data, $current_user, $this->getDefaultConfigFactoryStub(), $request_stack);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamAuthTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Acquia DAM Auth service.
    *
-   * @var \Drupal\media_acquiadam\AcquiadamAuthService
+   * @var AcquiadamAuthService
    */
   protected $acquidamAuth;

@@ @@
     parent::setUp();

     $acquidamAuth = new AcquiadamAuthService();
-    $response = $this->getMockBuilder(ResponseInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $response = $this->createMock(ResponseInterface::class);
     $response->expects($this->any())
       ->method('getBody')
       ->willReturn('{"access_token":"subdomain/l0p94ab7m05646d0a7f2dc023b94nm90", "username":"abc@abc.com"}');
@@ @@
       ->getMock();
     $http_client->expects($this->any())->method('post')->willReturn($response);

-    $messenger = $this->getMockBuilder(Messenger::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $messenger = $this->createMock(Messenger::class);

     $this->container = new ContainerBuilder();
     \Drupal::setContainer($this->container);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/media_acquiadam/tests/src/Unit/AcquiadamAssetTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Container builder helper.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;

@@ @@
   /**
    * Acquia DAM media source.
    *
-   * @var \Drupal\media_acquiadam\Plugin\media\Source\AcquiadamAsset
+   * @var AcquiadamAsset
    */
   protected $acquiadamMediaSource;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);

-    $entity_field_manager = $this->getMockBuilder(EntityFieldManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_field_manager = $this->createMock(EntityFieldManagerInterface::class);

-    $field_type_plugin_manager = $this->getMockBuilder(FieldTypePluginManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $field_type_plugin_manager = $this->createMock(FieldTypePluginManagerInterface::class);

-    $asset_image_helper = $this->getMockBuilder(AssetImageHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_image_helper = $this->createMock(AssetImageHelper::class);

-    $asset_metadata_helper = $this->getMockBuilder(AssetMetadataHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_metadata_helper = $this->createMock(AssetMetadataHelper::class);

-    $asset_media_helper = $this->getMockBuilder(MediaEntityHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_media_helper = $this->createMock(MediaEntityHelper::class);
     $asset_media_helper->method('getAsset')->willReturn($this->getAssetData());
     $asset_media_helper->method('getFile')
       ->willReturn($this->getMockedFileEntity());

-    $asset_media_factory = $this->getMockBuilder(AssetMediaFactory::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_media_factory = $this->createMock(AssetMediaFactory::class);
     $asset_media_factory->method('get')->willReturn($asset_media_helper);

     $this->container = new ContainerBuilder();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamMockedMediaEntityTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_acquiadam\Traits;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\file\FileInterface;
 use Drupal\media\MediaInterface;
@@ @@
    * @param int $mediaEntityId
    *   The ID to assign to the media entity.
    *
-   * @return \Drupal\media\MediaInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @return MediaInterface|MockObject
    *   The mocked MediaInterface entity.
    */
   protected function getMockedMediaEntity($assetId, $sourceField = NULL, $mediaEntityId = 47247625) {
     $sourceField = $sourceField ?? 'phpunit_asset_id_field';

-    $source_field_definition = $this->getMockBuilder(FieldDefinitionInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $source_field_definition = $this->createMock(FieldDefinitionInterface::class);
     $source_field_definition->method('getName')
       ->willReturn($sourceField);

-    $media_source = $this->getMockBuilder(MediaSourceInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media_source = $this->createMock(MediaSourceInterface::class);
     $media_source->method('getSourceFieldDefinition')
       ->willReturn($source_field_definition);

-    $media_bundle = $this->getMockBuilder(MediaTypeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $bundle_definition = $this->getMockBuilder(EntityReferenceFieldItemListInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media_bundle = $this->createMock(MediaTypeInterface::class);
+    $bundle_definition = $this->createMock(EntityReferenceFieldItemListInterface::class);
     $bundle_definition->entity = $media_bundle;

-    $media = $this->getMockBuilder(MediaInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $media = $this->createMock(MediaInterface::class);

     $media->method('getSource')->willReturn($media_source);
     $media->method('uuid')->willReturn('e63ce44d-4cfe-44d4-af7d-0692821d52cc');
@@ @@
   /**
    * Return a consistent, barebones file entity.
    *
-   * @return \Drupal\file\FileInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @return FileInterface|MockObject
    *   A mocked file entity.
    */
   protected function getMockedFileEntity() {
-    $file_entity = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $file_entity = $this->createMock(FileInterface::class);
     $file_entity->method('id')->willReturn(894782578);

     return $file_entity;
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamLoggerFactoryTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_acquiadam\Traits;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;

@@ @@
   /**
    * Gets a stubbed out Logger factory for Acquia DAM test usage.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject|\Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @return MockObject|LoggerChannelFactoryInterface
    *   A mock LoggerChannelFactoryInstance with a acquiadam channel.
    */
   protected function getLoggerFactoryStub() {
-    $logger_channel = $this->getMockBuilder(LoggerChannelInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_channel = $this->createMock(LoggerChannelInterface::class);

-    $logger_factory = $this->getMockBuilder(LoggerChannelFactoryInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $logger_factory = $this->createMock(LoggerChannelFactoryInterface::class);
     $logger_factory->method('get')
       ->with('media_acquiadam')
       ->willReturn($logger_channel);
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetImageHelperTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_acquiadam\Traits;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\media_acquiadam\Service\AssetImageHelper;

 /**
@@ @@
   /**
    * Create a stub AssetImageHelper that implements some basic functions.
    *
-   * @return \Drupal\media_acquiadam\Service\AssetImageHelper|\PHPUnit\Framework\MockObject\MockObject
+   * @return AssetImageHelper|MockObject
    *   The stubbed service.
    */
   public function getAssetImageHelperStub() {
-    $asset_image_helper = $this->getMockBuilder(AssetImageHelper::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $asset_image_helper = $this->createMock(AssetImageHelper::class);
     $asset_image_helper->method('getMimeTypeFromFileUri')->willReturnMap([
       ['public://test.jpg', ['discrete' => 'image', 'sub' => 'jpg']],
       ['public://test.mov', ['discrete' => 'quicktime', 'sub' => 'mov']],
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/media_acquiadam/tests/src/Traits/AcquiadamAssetDataTrait.php:14

    ---------- begin diff ----------
@@ @@
    * @param array $values
    *   Extra values for the asset.
    *
-   * @return \Drupal\media_acquiadam\Entity\Asset
+   * @return Asset
    *   A hard-coded Asset item.
    */
   protected function getAssetData(array $values = []) {
@@ @@
   /**
    * Create a new version of a given asset.
    *
-   * @param \Drupal\media_acquiadam\Entity\Asset $asset
+   * @param Asset $asset
    *   The asset to be updated.
    *
-   * @return \Drupal\media_acquiadam\Entity\Asset
+   * @return Asset
    *   The updated asset.
    */
   protected function generateNewVersion(Asset $asset) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamMediaTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_acquiadam\Kernel;

+use Drupal\media_acquiadam\Entity\Asset;
+use Drupal\media\Entity\Media;
+use Drupal\media_acquiadam\Service\AssetFileEntityHelper;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\File\FileSystem;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\media_acquiadam\Acquiadam;
@@ @@
   /**
    * The initial asset for this test.
    *
-   * @var \Drupal\media_acquiadam\Entity\Asset
+   * @var Asset
    */
   protected $asset;

@@ @@
   /**
    * The media entity with mocked asset data.
    *
-   * @var \Drupal\media\Entity\Media
+   * @var Media
    */
   protected $media;

@@ @@
     $dir_path = 'public://acquiadam/';
     $contents = 'test';
     $this->container->get('file_system')->prepareDirectory($dir_path, FileSystemInterface::CREATE_DIRECTORY);
-    file_save_data($contents, $dir_path . $this->asset->filename);
+    \Drupal::service('file.repository')->writeData($contents, $dir_path . $this->asset->filename);

     $this->testClient->addAsset($this->asset);
     $this->media = $this->createMedia($this->asset->id);
@@ @@
    * Tests that version is only updated when file is saved correctly.
    */
   public function testFailedFileSave() {
-    /** @var \Drupal\media_acquiadam\Service\AssetFileEntityHelper $asset_file_helper */
+    /** @var AssetFileEntityHelper $asset_file_helper */
     $asset_file_helper = $this->container->get('media_acquiadam.asset_file.helper');
-    /** @var \Drupal\Core\File\FileSystem $file_system */
+    /** @var FileSystem $file_system */
     $file_system = $this->container->get('file_system');

     // Makes directory read only so file save fails.
@@ @@
   /**
    * Re-saves media to generate new revision.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createNewMediaRevision() {
     $this->media->setName('test');
@@ @@
   /**
    * Clears source current asset so we can simulate updates from the API.
    *
-   * @param \Drupal\media_acquiadam\Plugin\media\Source\AcquiadamAsset $source
+   * @param AcquiadamAsset $source
    *   The source to clear.
    */
   protected function clearCurrentAssetFromSource(AcquiadamAsset $source) {
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/media_acquiadam/tests/src/Kernel/AcquiadamKernelTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_acquiadam\Kernel;

+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\media\Entity\Media;
 use Drupal\media\MediaInterface;
@@ @@
   /**
    * The test client.
    *
-   * @var \Drupal\media_acquiadam_test\TestClient
+   * @var TestClient
    */
   protected $testClient;

@@ @@
    *
    * Mocked to have a fixed set/get.
    *
-   * @var \Drupal\media_acquiadam\AssetData|\PHPUnit\Framework\MockObject\MockObject
+   * @var AssetData|MockObject
    */
   protected $acquiaAssetData;

@@ @@
   protected function setTestClient() {
     $this->testClient = new TestClient();

-    $acquiadam_client_factory = $this->getMockBuilder(Client::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $acquiadam_client_factory = $this->createMock(Client::class);
     $acquiadam_client_factory->expects($this->any())
       ->method('getAsset')
       ->willReturnCallback(function ($assetId) {
@@ @@
    * @param string $bundle
    *   The media entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Drupal\media\Entity\Media
+   * @return EntityInterface|Media
    *   The created media entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createMedia(string $asset_id, string $bundle = self::DEFAULT_BUNDLE) {
     $media = Media::create([
@@ @@
   /**
    * Get asset file entity from Media entity.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity to get the file from.
    *
    * @return mixed
@@ @@
   /**
    * Get the URI from a given asset.
    *
-   * @param \Drupal\media_acquiadam\Entity\Asset $asset
+   * @param Asset $asset
    *   The asset to generate the URI.
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity for this asset.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/media_acquiadam/tests/modules/media_acquiadam_test/src/TestClient.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Add or modify a test asset.
    *
-   * @param \Drupal\media_acquiadam\Entity\Asset $asset
+   * @param Asset $asset
    *   The asset to add/modify.
    */
   public function addAsset(Asset $asset) {
@@ @@
    * @param int $assetId
    *   The test Asset ID.
    *
-   * @return \Drupal\media_acquiadam\Entity\Asset
+   * @return Asset
    *   The test asset.
    */
   public function getAsset($assetId) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/media_acquiadam/src/Service/AssetRefreshManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_acquiadam\Service;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Queue\QueueInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ @@
   /**
    * The Acquiadam Service.
    *
-   * @var \Drupal\media_acquiadam\AcquiadamInterface
+   * @var AcquiadamInterface
    */
   protected $acquiadam;

@@ @@
   /**
    * The Drupal State Service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The Logger Factory Service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The Queue Worker.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * The media storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $mediaStorage;

@@ @@
   /**
    * The config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * AssetRefreshManager constructor.
    *
-   * @param \Drupal\media_acquiadam\AcquiadamInterface $acquiadam
+   * @param AcquiadamInterface $acquiadam
    *   The Acquiadam Service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The Drupal State Service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The Logger Factory Service.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The Queue Factory Service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(AcquiadamInterface $acquiadam, StateInterface $state, LoggerChannelFactoryInterface $logger_factory, QueueFactory $queue_factory, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, TimeInterface $time) {
     $this->acquiadam = $acquiadam;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/media_acquiadam/src/Service/AssetMetadataHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_acquiadam\Service;

+use Drupal\media_acquiadam\Client;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * Drupal date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * A configured API object.
    *
-   * @var \Drupal\media_acquiadam\AcquiadamInterface|\Drupal\media_acquiadam\Client
+   * @var AcquiadamInterface|Client
    *   $acquiadam
    */
   protected $acquiadam;
@@ @@
   /**
    * AssetImageHelper constructor.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   A Drupal date formatter service.
-   * @param \Drupal\media_acquiadam\AcquiadamInterface|\Drupal\media_acquiadam\Client $acquiadam
+   * @param AcquiadamInterface|Client $acquiadam
    *   A configured API object.
    */
   public function __construct(DateFormatterInterface $dateFormatter, AcquiadamInterface $acquiadam) {
@@ @@
   /**
    * Gets a metadata item from the given asset.
    *
-   * @param \Drupal\media_acquiadam\Entity\Asset $asset
+   * @param Asset $asset
    *   The asset to get metadata from.
    * @param string $name
    *   The name of the metadata item to retrieve.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/media_acquiadam/src/Service/AssetMediaFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_acquiadam\Service;

+use Drupal\media\MediaStorage;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\media\MediaSourceInterface;
+use Drupal\media\Entity\MediaType;
+use Drupal\file\FileInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\media\MediaInterface;
@@ @@
   /**
    * Drupal entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Entity storage for Media types.
    *
-   * @var \Drupal\media\MediaStorage
+   * @var MediaStorage
    */
   protected $mediaStorage;

@@ @@
   /**
    * AssetMediaFactory constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type Manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
     $this->entityTypeManager = $entityTypeManager;
@@ @@
    * @param string $bundle
    *   A specific bundle to fetch the media entity from.
    *
-   * @return false|\Drupal\media\MediaSourceInterface
+   * @return false|MediaSourceInterface
    *   The media source for the given asset or FALSE.
    */
   public function getMediaSource($assetId, $bundle = NULL) {
@@ @@
    * @param string $bundle
    *   A specific bundle to fetch the media entity from.
    *
-   * @return \Drupal\media\MediaInterface|false
+   * @return MediaInterface|false
    *   The media entity the given asset is associated with or FALSE.
    *
    * @BUG: Only returns the first media entity it finds.
@@ @@
    * @param string $bundle
    *   A specific bundle to fetch the media entity from.
    *
-   * @return \Drupal\media\MediaInterface[]|false
+   * @return MediaInterface[]|false
    *   An array of media entities keyed by their bundles or FALSE on failure.
    */
   public function getMediaEntities($assetId, $bundle = NULL) {
@@ @@
     }

     $asset_id_fields = [];
-    /** @var \Drupal\media\Entity\MediaType $bundle */
+    /** @var MediaType $bundle */
     foreach ($media_bundles as $name => $bundle) {
       $asset_id_fields[$name] = $bundle->getSource()
         ->getSourceFieldDefinition($bundle)
@@ @@
    * @param string $bundle
    *   A specific bundle to fetch the media entity from.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   An existing file entity for the asset or FALSE.
    */
   public function getFileEntity($assetId, $bundle = NULL) {
@@ @@
   /**
    * Wrap a media entity with a helper to enable asset functionality.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity to wrap.
    *
-   * @return \Drupal\media_acquiadam\MediaEntityHelper
+   * @return MediaEntityHelper
    *   A media entity wrapped with a helper class.
    */
   public function get(MediaInterface $media) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/media_acquiadam/src/Service/AssetImageHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_acquiadam\Service;

+use GuzzleHttp\Client;
+use Drupal\Core\Image\Image;
+use Drupal\image\Entity\ImageStyle;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Guzzle HTTP Client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * Drupal config service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal filesystem wrapper.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Drupal MIME type guesser.
    *
-   * @var \Drupal\Core\File\MimeType\MimeTypeGuesser
+   * @var MimeTypeGuesser
    */
   protected $mimeTypeGuesser;

@@ @@
   /**
    * Drupal ImageFactory service.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * Entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * AssetImageHelper constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config service.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   Drupal filesystem wrapper.
-   * @param \GuzzleHttp\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   Guzzle HTTP Client.
-   * @param \Drupal\Core\File\MimeType\MimeTypeGuesser $mimeTypeGuesser
+   * @param MimeTypeGuesser $mimeTypeGuesser
    *   Drupal MIME type guesser.
-   * @param \Drupal\Core\Image\ImageFactory $imageFactory
+   * @param ImageFactory $imageFactory
    *   Drupal ImageFactory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   // phpcs:ignore
@@ @@
   /**
    * Get the URL to the DAM-provided thumbnail if possible.
    *
-   * @param \Drupal\media_acquiadam\Entity\Asset $asset
+   * @param Asset $asset
    *   The asset to get the thumbnail size from.
    * @param int $thumbnailSize
    *   Find the closest thumbnail size without going over when multiple
@@ @@
   /**
    * Get the thumbnail for the given asset.
    *
-   * @param \Drupal\file\FileInterface|false $file
+   * @param FileInterface|false $file
    *   The file entity to create a thumbnail uri from.
    *
    * @return string|false
@@ @@
    */
   protected function getAcquiaDamModulePath() {
     // @phpstan-ignore-next-line
-    return drupal_get_path('module', 'media_acquiadam');
+    return \Drupal::service('extension.list.module')->getPath('media_acquiadam');
   }

   /**
@@ @@
   /**
    * Get an image path from a file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The image file to get the image path for.
    *
    * @return false|string
@@ @@
    *   The image path to use or FALSE on failure.
    */
   public function getImageThumbnail(FileInterface $file) {
-    /** @var \Drupal\Core\Image\Image $image */
+    /** @var Image $image */
     $image = $this->imageFactory->get($file->getFileUri());

     if ($image->isValid()) {
@@ @@
       // Pre-create all image styles.
       $styles = $this->entityTypeManager->getStorage('image_style')->loadMultiple();
       foreach ($styles as $style) {
-        /** @var \Drupal\image\Entity\ImageStyle $style */
+        /** @var ImageStyle $style */
         $style->flush($file->getFileUri());
       }
       return $file->getFileUri();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/media_acquiadam/src/Service/AssetFileEntityHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_acquiadam\Service;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Entity Field Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Acquia DAM config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Drupal filesystem service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Drupal token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * Acquia DAM asset image helper service.
    *
-   * @var \Drupal\media_acquiadam\Service\AssetImageHelper
+   * @var AssetImageHelper
    */
   protected $assetImageHelper;

@@ @@
   /**
    * Acquia DAM client.
    *
-   * @var \Drupal\media_acquiadam\AcquiadamInterface
+   * @var AcquiadamInterface
    */
   protected $acquiaDamClient;

@@ @@
   /**
    * Acquia DAM factory for wrapping media entities.
    *
-   * @var \Drupal\media_acquiadam\Service\AssetMediaFactory
+   * @var AssetMediaFactory
    */
   protected $assetMediaFactory;

@@ @@
   /**
    * Acquia DAM logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerChannel;

@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * AssetFileEntityHelper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type Manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Entity Field Manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config factory.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   Drupal filesystem service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Drupal token service.
-   * @param \Drupal\media_acquiadam\Service\AssetImageHelper $assetImageHelper
+   * @param AssetImageHelper $assetImageHelper
    *   Acquia DAM asset image helper service.
-   * @param \Drupal\media_acquiadam\AcquiadamInterface $acquiaDamClient
+   * @param AcquiadamInterface $acquiaDamClient
    *   Acquia DAM client.
-   * @param \Drupal\media_acquiadam\Service\AssetMediaFactory $assetMediaFactory
+   * @param AssetMediaFactory $assetMediaFactory
    *   Acquia DAM Asset Media Factory service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   The Drupal LoggerChannelFactory service.
-   * @param \GuzzleHttp\Client $client
+   * @param Client $client
    *   The HTTP client.
    */
   public function __construct(
@@ @@
   /**
    * Get a destination uri from the given entity and field combo.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check the field configuration on.
    * @param string $fileField
    *   The name of the file field.
@@ @@
   /**
    * Creates a new file for an asset.
    *
-   * @param \Drupal\media_acquiadam\Entity\Asset $asset
+   * @param Asset $asset
    *   The asset to save a new file for.
    * @param string $destination_folder
    *   The path to save the asset into.
    *
-   * @return bool|\Drupal\file\FileInterface
+   * @return bool|FileInterface
    *   The created file or FALSE on failure.
    */
   public function createNewFile(Asset $asset, $destination_folder) {
@@ @@
   /**
    * Fetches binary asset data from a remote source.
    *
-   * @param \Drupal\media_acquiadam\Entity\Asset $asset
+   * @param Asset $asset
    *   The asset to fetch data for.
    * @param string $filename
    *   The filename as a reference so it can be overridden.
@@ @@
   /**
    * Replaces the binary contents of the given file entity.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity to replace the binary contents of.
    * @param mixed $data
    *   The contents to save.
@@ @@
    * @param string $destination
    *   The destination uri to save to.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file entity that was updated.
    */
   protected function replaceExistingFile(FileInterface $file, $data, $destination) {
@@ @@
    *   generated and the file will be saved using Drupal's default files scheme,
    *   usually "public://".
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   A file entity, or FALSE on error.
    */
   protected function drupalFileSaveData($data, $destination = NULL) {
     // Deprecated after 9.3, module still supports 8.x.
     // @phpstan-ignore-next-line
-    return file_save_data($data, $destination, FileSystemInterface::EXISTS_REPLACE);
+    return \Drupal::service('file.repository')->writeData($data, $destination, FileSystemInterface::EXISTS_REPLACE);
   }

 }
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/media_acquiadam/src/Plugin/media/Source/AcquiadamAsset.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_acquiadam\Plugin\media\Source;

+use Drupal\media_acquiadam\Entity\Asset;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The asset that we're going to render details for.
    *
-   * @var \Drupal\media_acquiadam\Entity\Asset|null
+   * @var Asset|null
    */
   protected $currentAsset;

@@ @@
   /**
    * Acquia DAM asset image helper service.
    *
-   * @var \Drupal\media_acquiadam\Service\AssetImageHelper
+   * @var AssetImageHelper
    */
   protected $assetImageHelper;

@@ @@
   /**
    * Acquia DAM asset metadata helper service.
    *
-   * @var \Drupal\media_acquiadam\Service\AssetMetadataHelper
+   * @var AssetMetadataHelper
    */
   protected $assetMetadataHelper;

@@ @@
   /**
    * Acquia DAM Asset Media Factory service.
    *
-   * @var \Drupal\media_acquiadam\Service\AssetMediaFactory
+   * @var AssetMediaFactory
    */
   protected $assetMediaFactory;

@@ @@
   /**
    * Gets the metadata for the given entity.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity to get metadata from.
    * @param string $name
    *   The metadata item to get the value of.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/media_acquiadam/src/Plugin/QueueWorker/IntegrationLinkReport.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Acquia DAM client factory.
    *
-   * @var \Drupal\media_acquiadam\Client
+   * @var Client
    */
   protected $client;

@@ @@
   /**
    * Drupal logger channel service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerChannel;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/media_acquiadam/src/Plugin/QueueWorker/AssetRefresh.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal logger channel service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $loggerChannel;

@@ @@
   /**
    * Drupal entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Acquia DAM Asset Media Factory service.
    *
-   * @var \Drupal\media_acquiadam\Service\AssetMediaFactory
+   * @var AssetMediaFactory
    */
   protected $assetMediaFactory;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/media_acquiadam/src/MediaEntityHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_acquiadam;

+use Drupal\file\FileInterface;
+use Drupal\media\Entity\MediaType;
+use Drupal\media_acquiadam\Entity\Asset;
+use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\media\MediaInterface;
 use Drupal\media_acquiadam\Service\AssetFileEntityHelper;
@@ @@
   /**
    * Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Acquia DAM asset data service.
    *
-   * @var \Drupal\media_acquiadam\AssetData
+   * @var AssetData
    */
   protected $assetData;

@@ @@
   /**
    * Acquia DAM client.
    *
-   * @var \Drupal\media_acquiadam\Acquiadam
+   * @var Acquiadam
    */
   protected $acquiaDamClient;

@@ @@
   /**
    * Acquia DAM asset file helper service.
    *
-   * @var \Drupal\media_acquiadam\Service\AssetFileEntityHelper
+   * @var AssetFileEntityHelper
    */
   protected $assetFileHelper;

@@ @@
   /**
    * The media entity that is being wrapped.
    *
-   * @var \Drupal\media\MediaInterface
+   * @var MediaInterface
    */
   protected $mediaEntity;

@@ @@
   /**
    * MediaEntityHelper constructor.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity to wrap.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type Manager service.
-   * @param \Drupal\media_acquiadam\AssetDataInterface $assetData
+   * @param AssetDataInterface $assetData
    *   Acquia DAM asset data service.
-   * @param \Drupal\media_acquiadam\AcquiadamInterface $acquiaDamClient
+   * @param AcquiadamInterface $acquiaDamClient
    *   Acquia DAM client.
-   * @param \Drupal\media_acquiadam\Service\AssetFileEntityHelper $assetFileHelper
+   * @param AssetFileEntityHelper $assetFileHelper
    *   Acquia DAM file entity helper service.
    */
   public function __construct(MediaInterface $media, EntityTypeManagerInterface $entityTypeManager, AssetDataInterface $assetData, AcquiadamInterface $acquiaDamClient, AssetFileEntityHelper $assetFileHelper) {
@@ @@
   /**
    * Returns an associated file or creates a new one.
    *
-   * @return false|\Drupal\file\FileInterface
+   * @return false|FileInterface
    *   A file entity or FALSE on failure.
    */
   public function getFile() {
@@ @@
   /**
    * Attempts to load an existing file entity from the given media entity.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   A loaded file entity or FALSE if none could be found.
    */
   public function getExistingFile() {
     try {
       if ($fid = $this->getExistingFileId()) {
-        /** @var \Drupal\file\FileInterface $file */
+        /** @var FileInterface $file */
         $file = $this->entityTypeManager->getStorage('file')->load($fid);
       }
     }
@@ @@
    */
   public function getAssetFileField() {
     try {
-      /** @var \Drupal\media\Entity\MediaType $bundle */
+      /** @var MediaType $bundle */
       $bundle = $this->entityTypeManager->getStorage('media_type')
         ->load($this->mediaEntity->bundle());
       $field_map = !empty($bundle) ? $bundle->getFieldMap() : FALSE;
@@ @@
   /**
    * Get the asset from a media entity.
    *
-   * @return \Drupal\media_acquiadam\Entity\Asset|null
+   * @return Asset|null
    *   The asset or NULL on failure.
    */
   public function getAsset() {
@@ @@
    */
   protected function getFieldPropertyValue($fieldName) {
     if ($this->mediaEntity->hasField($fieldName)) {
-      /** @var \Drupal\Core\Field\FieldItemInterface $item */
+      /** @var FieldItemInterface $item */
       $item = $this->mediaEntity->{$fieldName}->first();
       if (!empty($item)) {
         $property_name = $item->mainPropertyName();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


29) modules/contrib/media_acquiadam/src/Form/AcquiadamUpdateAssetsReference.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_acquiadam\Form;

+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Drupal entity type management service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * AcquiadamUpdateAssetsReference constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/media_acquiadam/src/Form/AcquiadamConfig.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_acquiadam\Form;

+use Drupal\Component\Datetime\Time;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\media_acquiadam\Plugin\QueueWorker\AssetRefresh;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Batch\BatchBuilder;
@@ @@
   /**
    * The Guzzle HTTP client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The Batch Builder.
    *
-   * @var \Drupal\Core\Batch\BatchBuilder
+   * @var BatchBuilder
    */
   protected $batchBuilder;

@@ @@
   /**
    * The Drupal DateTime Service.
    *
-   * @var \Drupal\Component\Datetime\Time
+   * @var Time
    */
   protected $time;

@@ @@
   /**
    * The Queue Worker Manager Service.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueWorkerManager;

@@ @@
   /**
    * The Drupal State Service.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
    *
    * @param array $form
    *   A Drupal form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The FormState object.
    *
    * @return array|bool
@@ @@
    * @param array $context
    *   Context.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function processBatchItems(array $media_ids, array &$context) {
-    /** @var \Drupal\media_acquiadam\Plugin\QueueWorker\AssetRefresh $asset_refresh_queue_worker */
+    /** @var AssetRefresh $asset_refresh_queue_worker */
     $asset_refresh_queue_worker = $this->queueWorkerManager
       ->createInstance('media_acquiadam_asset_refresh');

@@ @@
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/media_acquiadam/src/Controller/AcquiadamController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_acquiadam\Controller;

+use Drupal\media_acquiadam\Acquiadam;
+use Drupal\media_acquiadam\Entity\Asset;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\media_acquiadam\AcquiadamInterface;
@@ @@
   /**
    * A configured API object.
    *
-   * @var \Drupal\media_acquiadam\Acquiadam
+   * @var Acquiadam
    */
   protected $acquiadam;

@@ @@
   /**
    * The asset that we're going to render details for.
    *
-   * @var \Drupal\media_acquiadam\Entity\Asset
+   * @var Asset
    */
   protected $asset;

@@ @@
   /**
    * Drupal config service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Acquia DAM config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Acquia DAM asset image helper service.
    *
-   * @var \Drupal\media_acquiadam\Service\AssetImageHelper
+   * @var AssetImageHelper
    */
   protected $assetImageHelper;

@@ @@
   /**
    * Acquia DAM asset metadata helper service.
    *
-   * @var \Drupal\media_acquiadam\Service\AssetMetadataHelper
+   * @var AssetMetadataHelper
    */
   protected $assetMetadataHelper;

@@ @@
   /**
    * AcquiadamController constructor.
    *
-   * @param \Drupal\media_acquiadam\AcquiadamInterface $acquiadam
+   * @param AcquiadamInterface $acquiadam
    *   The Acquiadam Interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal config factory.
-   * @param \Drupal\media_acquiadam\Service\AssetImageHelper $assetImageHelper
+   * @param AssetImageHelper $assetImageHelper
    *   Acquia DAM asset image helper service.
-   * @param \Drupal\media_acquiadam\Service\AssetMetadataHelper $assetMetadataHelper
+   * @param AssetMetadataHelper $assetMetadataHelper
    *   Acquia DAM asset metadata helper service.
    */
   public function __construct(AcquiadamInterface $acquiadam, ConfigFactoryInterface $configFactory, AssetImageHelper $assetImageHelper, AssetMetadataHelper $assetMetadataHelper) {
@@ @@
    * @param string $assetId
    *   The asset ID for the asset to render details for.
    *
-   * @return \Drupal\media_acquiadam\Entity\Asset
+   * @return Asset
    *   The asset or NULL on failure.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   protected function getAsset(string $assetId) {
     if ($this->asset === NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/media_acquiadam/src/Controller/AcquiadamAuthController.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The request stack factory service.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;

@@ @@
   /**
    * The user data factory service.
    *
-   * @var \Drupal\user\UserData
+   * @var UserData
    */
   protected $userData;

@@ @@
   /**
    * Constructs a new AcquiadamAuthController.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack factory.
-   * @param \Drupal\user\UserData $user_data
+   * @param UserData $user_data
    *   The user data factory.
    */
   public function __construct(RequestStack $request_stack, UserData $user_data) {
@@ @@
    *
    * @param string $auth_code
    *   The authorization code provided during user creation.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user account.
    *
    * @todo improve function documentation block.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/media_acquiadam/src/Commands/AcquiadamCommands.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The acquiadam configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueService;

@@ @@
   /**
    * The state interface.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Validate handler for the acquiadam:update command.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data.
    *
    * @hook validate acquiadam:update
@@ @@
   /**
    * The validation handler for the acquiadam:sync command.
    *
-   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
+   * @param CommandData $commandData
    *   The command data.
    *
    * @hook validate acquiadam:sync
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/media_acquiadam/src/Client.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_acquiadam;

+use Drupal\Core\Config\ImmutableConfig;
+use GuzzleHttp\Exception\GuzzleException;
+use GuzzleHttp\Exception\RequestException;
+use Drupal\media_acquiadam\Exception\InvalidCredentialsException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\media_acquiadam\Entity\Asset;
@@ @@
   /**
    * The Guzzle client to use for communication with the Acquia DAM API.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $client;

@@ @@
   /**
    * The user data factory service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;

@@ @@
   /**
    * Drupal config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Acquia DAM config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Client constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    *   The Guzzle client interface.
-   * @param \Drupal\user\UserDataInterface $user_data
+   * @param UserDataInterface $user_data
    *   The user data interface.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account interface.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config interface.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(ClientInterface $client, UserDataInterface $user_data, AccountInterface $account, ConfigFactoryInterface $configFactory, RequestStack $request_stack) {
@@ @@
    * @param string $categoryName
    *   The Acquia DAM Category Name.
    *
-   * @return \Drupal\media_acquiadam\Entity\Category
+   * @return Category
    *   The category object.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function getCategoryByName(string $categoryName): Category {
     $this->checkAuth();
@@ @@
   /**
    * Load subcategories by Category link or parts (used in breadcrumb).
    *
-   * @param \Drupal\media_acquiadam\Entity\Category $category
+   * @param Category $category
    *   Category object.
    *
-   * @return \Drupal\media_acquiadam\Entity\Category[]
+   * @return Category[]
    *   A list of sub-categories (ie: child categories).
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function getCategoryData(Category $category): array {
     $this->checkAuth();
@@ @@
   /**
    * Get top level categories.
    *
-   * @return Drupal\media_acquiadam\Entity\Category[]
+   * @return Category[]
    *   A list of top level categories (ie: root categories).
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function getTopLevelCategories(): array {
     $this->checkAuth();
@@ @@
    * @param array $expands
    *   The additional properties to be included.
    *
-   * @return \Drupal\media_acquiadam\Entity\Asset
+   * @return Asset
    *   The asset entity.
    *
-   * @throws \GuzzleHttp\Exception\RequestException
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws RequestException
+   * @throws GuzzleException
    */
   public function getAsset(string $assetId, array $expands = []): Asset {
     $this->checkAuth();
@@ @@
    * @return array
    *   Response Status 100 / 200
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \Drupal\media_acquiadam\Exception\InvalidCredentialsException
+   * @throws GuzzleException
+   * @throws InvalidCredentialsException
    */
   protected function uploadPresigned($presignedUrl, $file_uri, $file_type) {
     $this->checkAuth();
@@ @@
    *       pages.
    *     - assets: an array of Asset objects.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function getAssetsByCategory(string $category_name, array $params = []): array {
     if ($category_name) {
@@ @@
    * @return array
    *   A list of assets.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function searchAssets(array $params): array {
     $this->checkAuth();
@@ @@
    * @return array
    *   An array of response data.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \Drupal\media_acquiadam\Exception\InvalidCredentialsException
+   * @throws GuzzleException
+   * @throws InvalidCredentialsException
    */
   public function queueAssetDownload($assetIDs, array $options): array {
     $this->checkAuth();
@@ @@
    * @return array
    *   An array of response data.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \Drupal\media_acquiadam\Exception\InvalidCredentialsException
+   * @throws GuzzleException
+   * @throws InvalidCredentialsException
    */
   public function downloadFromQueue($downloadKey): array {
     $this->checkAuth();
@@ @@
    *                             Values: '+3 min', '+15 min', '+2 hours',
    *                             '+1 day', '+2 weeks', 'no-expiration'.
    *
-   * @return \Drupal\media_acquiadam\Entity\Asset|bool
+   * @return Asset|bool
    *   An asset object on success, or FALSE on failure.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
-   * @throws \Drupal\media_acquiadam\Exception\InvalidCredentialsException
+   * @throws GuzzleException
+   * @throws InvalidCredentialsException
    */
   public function editAsset(string $assetID, array $data) {
     $this->checkAuth();
@@ @@
    * @return array
    *   A list of metadata fields.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function getSpecificMetadataFields(): array {
     if (!empty($this->specificMetadataFields)) {
@@ @@
    * @param array $data
    *   The body of the POST request.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function registerIntegrationLink(array $data) {
     try {
@@ @@
    * @return array
    *   All the integration links which are registered on Acquia DAM.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function getIntegrationLinks(): array {
     $this->checkAuth();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


35) modules/contrib/media_acquiadam/src/AssetData.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection to use.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new asset data service.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    */
   public function __construct(Connection $connection) {
@@ @@
   /**
    * Check if the given asset is different than what is stored.
    *
-   * @param \Drupal\media_acquiadam\Entity\Asset $asset
+   * @param Asset $asset
    *   The current version of the asset.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


36) modules/contrib/media_acquiadam/src/AcquiadamAuthService.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * Returns acquiadam setting config where it stores the authentication data.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   An immutable configuration object.
    */
   public static function getConfig(): ImmutableConfig {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/media_acquiadam/src/Acquiadam.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_acquiadam;

+use Drupal\media_acquiadam\Entity\Asset;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use GuzzleHttp\Exception\ClientException;
@@ @@
    *
    * @var array
    *
-   * @phpstan-var array<string, \Drupal\media_acquiadam\Entity\Asset|null>
+   * @phpstan-var array<string, (Asset | null)>
    */
   protected static $cachedAssets = [];

@@ @@
   /**
    * The Acquia DAM client service.
    *
-   * @var \Drupal\media_acquiadam\Client
+   * @var Client
    */
   protected $acquiaDamClient;

@@ @@
   /**
    * Acquia DAM logging service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerChannel;

@@ @@
   /**
    * Acquiadam constructor.
    *
-   * @param \Drupal\media_acquiadam\Client $client
+   * @param Client $client
    *   An instance of Client that we can get a acquiadam client from.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   The Drupal LoggerChannelFactory service.
    */
   public function __construct(Client $client, LoggerChannelFactoryInterface $loggerChannelFactory) {
@@ @@
    * @param string $assetId
    *   The asset ID.
    *
-   * @return \Drupal\media_acquiadam\Entity\Asset
+   * @return Asset
    *   The asset.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    * @throws \Exception
    */
   public function getAsset(string $assetId) {
@@ @@
    *   The operation to perform. One of get, set, or clear.
    * @param string|null $assetId
    *   The asset ID when using get or set.
-   * @param \Drupal\media_acquiadam\Entity\Asset|null $asset
+   * @param Asset|null $asset
    *   The data to store under the given asset ID.
    *
-   * @return \Drupal\media_acquiadam\Entity\Asset|null
+   * @return Asset|null
    *   The static cache or NULL if unset.
    */
   public function staticAssetCache(string $op, string $assetId = NULL, $asset = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


38) modules/contrib/media_acquiadam/modules/media_acquiadam_report/src/EventSubscriber/AcquiadamUsageSubscriber.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a AcquiadamUsageSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


39) modules/contrib/media_acquiadam/modules/media_acquiadam_report/media_acquiadam_report.install:17

    ---------- begin diff ----------
@@ @@
   if ($view) {
     // Deprecated after 9.3, module still supports 8.x.
     /** @phpstan-ignore-next-line */
-    $views_config_path = drupal_get_path('module', 'media_acquiadam_report') . '/config/install/views.view.acquia_dam_reporting.yml';
+    $views_config_path = \Drupal::service('extension.list.module')->getPath('media_acquiadam_report') . '/config/install/views.view.acquia_dam_reporting.yml';
     $views_data = Yaml::parseFile($views_config_path);
     $config_factory->getEditable('views.view.acquia_dam_reporting')->setData($views_data)->save();
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


40) modules/contrib/media_acquiadam/media_acquiadam.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\media_acquiadam\Plugin\media\Source\AcquiadamAsset;
+use Drupal\media_acquiadam\Service\AssetMediaFactory;
+use Drupal\media\Entity\Media;
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\media_acquiadam\Service\AssetRefreshManagerInterface;
 /**
  * @file
  * Integrates Drupal with Acquia DAM.
@@ @@
     return;
   }

-  /** @var \Drupal\media_acquiadam\Plugin\media\Source\AcquiadamAsset $source */
+  /** @var AcquiadamAsset $source */
   $source = $entity->getSource();
   if ($source->getPluginId() !== 'acquiadam_asset') {
     return;
   }

-  /** @var \Drupal\media_acquiadam\Service\AssetMediaFactory $asset_media_factory */
+  /** @var AssetMediaFactory $asset_media_factory */
   $asset_media_factory = \Drupal::service('media_acquiadam.asset_media.factory');
   $media_helper = $asset_media_factory->get($entity);

@@ @@
     }
   }

-  /** @var \Drupal\media\Entity\Media $entity */
+  /** @var Media $entity */
   $entity->updateQueuedThumbnail();
 }

@@ @@
   }

   // Only process the media using the Acquia DAM source.
-  /** @var \Drupal\media_acquiadam\Plugin\media\Source\AcquiadamAsset $source */
+  /** @var AcquiadamAsset $source */
   $source = $entity->getSource();
   if ($source->getPluginId() !== 'acquiadam_asset') {
     return;
@@ @@
   }

   // Only process the media which have an asset id (uuid).
-  /** @var \Drupal\media_acquiadam\Service\AssetMediaFactory $asset_media_factory */
+  /** @var AssetMediaFactory $asset_media_factory */
   $asset_media_factory = \Drupal::service('media_acquiadam.asset_media.factory');
   $media_helper = $asset_media_factory->get($entity);
   $assetID = $media_helper->getAssetId();
@@ @@
     return;
   }

-  /** @var \Drupal\media_acquiadam\Service\AssetMediaFactory $asset_media_factory */
+  /** @var AssetMediaFactory $asset_media_factory */
   $asset_media_factory = \Drupal::service('media_acquiadam.asset_media.factory');
   $asset_id = $asset_media_factory->get($entity)->getAssetId();
   if (!empty($asset_id)) {
@@ @@

   $count = \Drupal::queue('media_acquiadam_asset_refresh')->numberOfItems();

-  /** @var \Drupal\Core\Logger\LoggerChannelInterface $logger */
+  /** @var LoggerChannelInterface $logger */
   $logger = \Drupal::service('logger.factory')->get('media_acquiadam');
   $logger->info('Total items in the queue: @count.', ['@count' => $count]);

@@ @@
     return FALSE;
   }

-  /** @var \Drupal\media_acquiadam\Service\AssetRefreshManagerInterface $asset_refresh_manager */
+  /** @var AssetRefreshManagerInterface $asset_refresh_manager */
   $asset_refresh_manager = \Drupal::service('media_acquiadam.asset_refresh.manager');
   $asset_refresh_manager->updateQueue($asset_id_fields);

@@ @@
  */
 function media_acquiadam_form_media_form_alter(&$form, FormStateInterface &$form_state) {

-  /** @var \Drupal\media\Entity\Media $entity */
+  /** @var Media $entity */
   $entity = $form_state->getFormObject()->getEntity();

-  /** @var \Drupal\media_acquiadam\Plugin\media\Source\AcquiadamAsset $source */
+  /** @var AcquiadamAsset $source */
   $source = $entity->getSource();
   if ($entity->isNew() || $source->getPluginId() !== 'acquiadam_asset') {
     return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


41) modules/contrib/media_acquiadam/media_acquiadam.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\media\Entity\MediaType;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 /**
  * @file
  * Installation related hooks and functions.
@@ @@
     ->getStorage('media_type')
     ->loadByProperties(['source' => 'acquiadam_asset']);

-  /** @var \Drupal\media\Entity\MediaType $bundle */
+  /** @var MediaType $bundle */
   foreach ($media_bundles as $bundle) {
     $mapping = $bundle->getFieldMap();

@@ @@
     'datemodified' => 'datemodified_unix',
   ];

-  /** @var \Drupal\media\Entity\MediaType $bundle */
+  /** @var MediaType $bundle */
   foreach ($media_bundles as $bundle) {
     $field_mapping = $bundle->getFieldMap();

@@ @@
   // Update Acquiadam Config Object.
   // Deprecated after 9.3, module still supports 8.x.
   /** @phpstan-ignore-next-line */
-  $config_path = drupal_get_path('module', 'media_acquiadam') . '/config/install/media_acquiadam.settings.yml';
+  $config_path = \Drupal::service('extension.list.module')->getPath('media_acquiadam') . '/config/install/media_acquiadam.settings.yml';
   $data = Yaml::parseFile($config_path);
   $config_factory->getEditable('media_acquiadam.settings')->setData($data)->save(TRUE);
 }
@@ @@
  *   The view mode, or 'default' to retrieve the 'default' display object for
  *   this bundle.
  *
- * @return \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+ * @return EntityViewDisplayInterface
  *   The entity view display associated with the view mode.
  *
  * @see \Drupal\Core\Entity\EntityStorageInterface::create()
@@ @@
  * @param string $form_mode
  *   The form mode.
  *
- * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+ * @return EntityFormDisplayInterface
  *   The entity form display associated with the given form mode.
  *
  * @see \Drupal\Core\Entity\EntityStorageInterface::create()
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/media_acquiadam/src/Plugin/Linkit/Substitution/DAMAsset.
         php" file, due to:                                                     
         "Analyze error: "Class Drupal\linkit\Plugin\Linkit\Substitution\Media not
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/media_acquiadam/src/Plugin/EntityBrowser/Widget/Acquiada
         m.php" file, due to:                                                   
         "Analyze error: "Class Drupal\entity_browser\WidgetBase not found.".   
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

