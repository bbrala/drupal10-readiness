modules/contrib/cookies_info/cookies_info.install
modules/contrib/cookies_info/cookies_info.module
modules/contrib/cookies_info/src/Cookies/Collector.php
modules/contrib/cookies_info/src/EventSubscriber/EventSubscriber.php
modules/contrib/cookies_info/src/Form/Settings.php
modules/contrib/cookies_info/src/Plugin/rest/resource/Cookies.php
modules/contrib/cookies_info/src/Utility/CookiesInfo.php

5 files with changes
====================

1) modules/contrib/cookies_info/src/Utility/CookiesInfo.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cookies_info\Utility;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Url;
 use Drupal\jwt\Authentication\Provider\JwtAuth;
@@ @@
   /**
    * Privileged user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $user;

@@ @@
   /**
    * User storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * JWT service.
    *
-   * @var \Drupal\jwt\Authentication\Provider\JwtAuth
+   * @var JwtAuth
    */
   protected $jwt;

@@ @@
   /**
    * Permission service.
    *
-   * @var \Drupal\user\PermissionHandlerInterface
+   * @var PermissionHandlerInterface
    */
   protected $permission;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * CookiesInfo constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\jwt\Authentication\Provider\JwtAuth $jwt
+   * @param JwtAuth $jwt
    *   JWT service.
-   * @param \Drupal\user\PermissionHandlerInterface $user_permissions
+   * @param PermissionHandlerInterface $user_permissions
    *   Permissions service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, JwtAuth $jwt, PermissionHandlerInterface $user_permissions, ConfigFactoryInterface $config) {
     $this->userStorage = $entity_type_manager->getStorage('user');
@@ @@
   /**
    * User defined in the settings.
    *
-   * @return \Drupal\Core\Session\AccountProxyInterface|null
+   * @return AccountProxyInterface|null
    *   User instance, null - otherwise.
    */
   protected function loadUser() {
@@ @@
    * @param string $title
    *   Unique title.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Template result.
    */
   protected function titleTemplate($title) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/cookies_info/src/Plugin/rest/resource/Cookies.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Collector service.
    *
-   * @var \Drupal\cookies_info\Cookies\Collector
+   * @var Collector
    */
   protected $collector;

@@ @@
   /**
    * Responds to entity GET requests.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   Cookies collection.
    */
   public function get() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cookies_info/src/Form/Settings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cookies_info\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * User storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;

@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $user_field = $this->configFactory()->getEditable('cookies_info.settings')->get('settings.privileged_user');
     if (!empty($user_field)) {
-      /** @var \Drupal\Core\Session\AccountProxyInterface[] $users */
+      /** @var AccountProxyInterface[] $users */
       $users = $this->userStorage->loadByProperties(['name' => $user_field]);
       $user_field = reset($users);
       if (!($user_field->hasPermission('cookie info allow to communicate with a cookie server') && $user_field->hasPermission('restful get cookies_info_resource'))) {
@@ @@
    * @param mixed $value
    *   Input value.
    *
-   * @return \Drupal\user\UserInterface|\Drupal\Core\Entity\EntityInterface|null
+   * @return UserInterface|EntityInterface|null
    *   User instance.
    */
   protected function loadUserByValue($value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cookies_info/src/EventSubscriber/EventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cookies_info\EventSubscriber;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\cookies_info\Cookies\Collector;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Collector service.
    *
-   * @var \Drupal\cookies_info\Cookies\Collector
+   * @var Collector
    */
   protected $collector;

@@ @@
   /**
    * Settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * EventSubscriber constructor.
    *
-   * @param \Drupal\cookies_info\Cookies\Collector $collector
+   * @param Collector $collector
    *   Collector service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Settings.
    */
   public function __construct(Collector $collector, ConfigFactoryInterface $config) {
@@ @@
   /**
    * Aggregate cookies event subscriber.
    *
-   * @param \Symfony\Component\HttpKernel\Event\PostResponseEvent $event
+   * @param TerminateEvent $event
    *   Post response event instance.
    */
-  public function onAggregate(PostResponseEvent $event) {
+  public function onAggregate(TerminateEvent $event) {
     if ($this->config->get('settings.collector_enabled')) {
       $this->collector->parseCookies($event->getRequest()->cookies);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/cookies_info/src/Cookies/Collector.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

   /**
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *
    * @return \Drupal\cookies_info\Cookies\Collector
    */
@@ @@
   /**
    * Collector constructor.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State service.
    */
   public function __construct(StateInterface $state) {
@@ @@
   /**
    * Parse cookies collection.
    *
-   * @param \Symfony\Component\HttpFoundation\ParameterBag $cookiesBag
+   * @param ParameterBag $cookiesBag
    *   Cookies collection.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 5 files have been changed by Rector                                       

