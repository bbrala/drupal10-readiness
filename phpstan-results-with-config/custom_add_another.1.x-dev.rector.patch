diff --git a/custom_add_another.module b/custom_add_another.module
index 0a2c6b5..9b9ea9e 100644
--- a/custom_add_another.module
+++ b/custom_add_another.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\field\FieldStorageConfigInterface;
 /**
  * @file
  * Allows the 'Add another item' button text to be customised.
@@ -17,10 +18,10 @@ use Drupal\field\FieldConfigInterface;
  * field instance' form.
  */
 function custom_add_another_form_field_storage_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\field\FieldConfigInterface $field */
+  /** @var FieldConfigInterface $field */
   $field = $form_state->getStorage()['field_config'];
 
-  /** @var \Drupal\field\FieldStorageConfigInterface $field_storage */
+  /** @var FieldStorageConfigInterface $field_storage */
   $field_storage = $form_state->getFormObject()->getEntity();
 
   if (!$field_storage->isLocked()) {
@@ -66,7 +67,7 @@ function custom_add_another_form_field_storage_config_edit_form_alter(&$form, Fo
  * Submit callback that saves custom labels to field Third Party Settings.
  */
 function custom_add_another_third_party_settings_submit($form, FormStateInterface $form_state) {
-  /** @var \Drupal\field\FieldConfigInterface $field */
+  /** @var FieldConfigInterface $field */
   $field = $form_state->getStorage()['field_config'];
 
   if (!empty($form_state->getValue('custom_add_another'))) {
@@ -97,7 +98,7 @@ function custom_add_another_field_widget_form_alter(&$element, FormStateInterfac
   $field = $context['items']->getFieldDefinition();
 
   if ($field instanceof FieldConfigInterface) {
-    /** @var \Drupal\field\FieldStorageConfigInterface $field_storage */
+    /** @var FieldStorageConfigInterface $field_storage */
     $field_storage = $field->getFieldStorageDefinition();
 
     if ($field_storage->getCardinality() == FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED) {
diff --git a/src/Tests/AddAnotherItemButtonTest.php b/src/Tests/AddAnotherItemButtonTest.php
index 625d09a..278859a 100644
--- a/src/Tests/AddAnotherItemButtonTest.php
+++ b/src/Tests/AddAnotherItemButtonTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\custom_add_another\Tests;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\field\FieldConfigInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Tests\field\Functional\FieldTestBase;
 
@@ -26,7 +29,7 @@ class AddAnotherItemButtonTest extends FieldTestBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -47,7 +50,7 @@ class AddAnotherItemButtonTest extends FieldTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $web_user = $this->drupalCreateUser(['view test entity', 'administer entity_test content']);
@@ -89,14 +92,14 @@ class AddAnotherItemButtonTest extends FieldTestBase {
       ->create($field_storage)
       ->save();
 
-    /** @var \Drupal\field\FieldConfigInterface $field_config_entity */
+    /** @var FieldConfigInterface $field_config_entity */
     $field_config_entity = $this
       ->entityTypeManager
       ->getStorage('field_config')
       ->create($this->field);
     $field_config_entity->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
+    /** @var EntityFormDisplayInterface $entity_form_display */
     $entity_form_display = $this
       ->entityTypeManager
       ->getStorage('entity_form_display')
diff --git a/src/Tests/RemoveButtonTest.php b/src/Tests/RemoveButtonTest.php
index 19587d0..263873f 100644
--- a/src/Tests/RemoveButtonTest.php
+++ b/src/Tests/RemoveButtonTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\custom_add_another\Tests;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\File\FileSystem;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Tests\file\Functional\FileFieldTestBase;
 
@@ -26,21 +28,21 @@ class RemoveButtonTest extends FileFieldTestBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The file system manager.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ -61,7 +63,7 @@ class RemoveButtonTest extends FileFieldTestBase {
     $edit = [
       'files[' . $field_name . '_0][]' => $this->fileSystem->realpath($test_file->getFileUri()),
     ];
-    $this->drupalPostForm(NULL, $edit, t('Upload'));
+    $this->submitForm($edit, t('Upload'));
 
     $button_name = $field_name . '_0_remove_button';
     $remove_button_xpath = '//input[@name="' . $button_name . '"]';
@@ -80,7 +82,7 @@ class RemoveButtonTest extends FileFieldTestBase {
 
     $this->drupalGet("node/add/$type_name");
     $edit = ['files[' . $field_name . '_0][]' => $this->fileSystem->realpath($test_file->getFileUri())];
-    $this->drupalPostForm(NULL, $edit, $updated_add_more_value);
+    $this->submitForm($edit, $updated_add_more_value);
 
     $this->assertFieldsByValue($this->xpath('.' . $remove_button_xpath), $updated_remove_value, 'Found the "Remove" button with updated value.');
   }
