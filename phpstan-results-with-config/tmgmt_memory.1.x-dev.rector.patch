diff --git a/src/Controller/ExportController.php b/src/Controller/ExportController.php
index c31b393..a2ad287 100644
--- a/src/Controller/ExportController.php
+++ b/src/Controller/ExportController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_memory\Controller;
 
+use Drupal\tmgmt_memory\SegmentTranslationInterface;
 use Drupal\Core\Archiver\ArchiveTar;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -19,28 +20,28 @@ class ExportController implements ContainerInjectionInterface {
   /**
    * The EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The file download controller.
    *
-   * @var \Drupal\system\FileDownloadController
+   * @var FileDownloadController
    */
   protected FileDownloadController $fileDownloadController;
 
   /**
    * The file system helpers.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;
 
   /**
    * The TMX processor.
    *
-   * @var \Drupal\tmgmt_memory\Tmx
+   * @var Tmx
    */
   protected Tmx $tmxProcessor;
 
@@ -65,13 +66,13 @@ class ExportController implements ContainerInjectionInterface {
   /**
    * Constructs a ExportController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The source storage.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system helpers.
-   * @param \Drupal\tmgmt_memory\Tmx $tmx_processor
+   * @param Tmx $tmx_processor
    *   The TMX Processor.
-   * @param \Drupal\system\FileDownloadController $file_download_controller
+   * @param FileDownloadController $file_download_controller
    *   The file download controller.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system, Tmx $tmx_processor, FileDownloadController $file_download_controller) {
@@ -91,7 +92,7 @@ class ExportController implements ContainerInjectionInterface {
 
     $segment_translations = $this->entityTypeManager->getStorage('tmgmt_memory_segment_translation')->loadMultiple();
     $languages = array_unique(array_map(function (&$value){
-      /** @var \Drupal\tmgmt_memory\SegmentTranslationInterface $value */
+      /** @var SegmentTranslationInterface $value */
       return $value->getSource()->getLangcode();
     }, $segment_translations));
     foreach ($languages as $language) {
diff --git a/src/Controller/ViewUsageController.php b/src/Controller/ViewUsageController.php
index 30ea9ab..b6b4ff4 100644
--- a/src/Controller/ViewUsageController.php
+++ b/src/Controller/ViewUsageController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\tmgmt_memory\Controller;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\tmgmt\Data;
+use Drupal\tmgmt\SegmenterInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Render\Markup;
@@ -17,14 +20,14 @@ class ViewUsageController extends ControllerBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an ContentTranslationPreviewController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -35,7 +38,7 @@ class ViewUsageController extends ControllerBase {
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager */
+    /** @var EntityTypeManagerInterface $entity_manager */
     $entity_manager = $container->get('entity_type.manager');
     return new static($entity_manager);
   }
@@ -43,7 +46,7 @@ class ViewUsageController extends ControllerBase {
   /**
    * Preview job item entity data.
    *
-   * @param \Drupal\tmgmt_memory\UsageInterface $tmgmt_memory_usage
+   * @param UsageInterface $tmgmt_memory_usage
    *   The usage.
    *
    * @return array
@@ -53,7 +56,7 @@ class ViewUsageController extends ControllerBase {
     $langcode = $tmgmt_memory_usage->getLangcode();
     $job_item = $tmgmt_memory_usage->getJobItem();
     // Load entity.
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->entityTypeManager
       ->getStorage($job_item->getItemType())
       ->load($job_item->getItemId());
@@ -72,9 +75,9 @@ class ViewUsageController extends ControllerBase {
       ->getViewBuilder($entity->getEntityTypeId())
       ->view($preview, 'full', $preview->language()->getId());
 
-    /** @var \Drupal\tmgmt\Data $data_service */
+    /** @var Data $data_service */
     $data_service = \Drupal::service('tmgmt.data');
-    /** @var \Drupal\tmgmt\SegmenterInterface $segmenter */
+    /** @var SegmenterInterface $segmenter */
     $segmenter = \Drupal::service('tmgmt.segmenter');
 
     $flat_data = $data_service->flatten($data);
diff --git a/src/Entity/ListBuilder/SegmentTranslationListBuilder.php b/src/Entity/ListBuilder/SegmentTranslationListBuilder.php
index 64ab1e0..e5a6742 100644
--- a/src/Entity/ListBuilder/SegmentTranslationListBuilder.php
+++ b/src/Entity/ListBuilder/SegmentTranslationListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_memory\Entity\ListBuilder;
 
+use Drupal\tmgmt_memory\SegmentTranslationInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -16,7 +17,7 @@ SegmentTranslationListBuilder extends EntityListBuilder {
    */
   protected function getDefaultOperations(EntityInterface $entity) {
     $operations = parent::getDefaultOperations($entity);
-    /** @var \Drupal\tmgmt_memory\SegmentTranslationInterface $entity */
+    /** @var SegmentTranslationInterface $entity */
     if ($entity->access('view') && $entity->hasLinkTemplate('canonical')) {
       $operations['view'] = [
         'title' => $this->t('View'),
diff --git a/src/Entity/ListBuilder/UsageListBuilder.php b/src/Entity/ListBuilder/UsageListBuilder.php
index 93153b8..0b2d81d 100644
--- a/src/Entity/ListBuilder/UsageListBuilder.php
+++ b/src/Entity/ListBuilder/UsageListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_memory\Entity\ListBuilder;
 
+use Drupal\tmgmt_memory\UsageInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -15,7 +16,7 @@ class UsageListBuilder extends EntityListBuilder {
    */
   protected function getDefaultOperations(EntityInterface $entity) {
     $operations = parent::getDefaultOperations($entity);
-    /** @var \Drupal\tmgmt_memory\UsageInterface $entity */
+    /** @var UsageInterface $entity */
     if ($entity->access('view') && $entity->hasLinkTemplate('canonical')
       && $entity->getJobItemId() && $entity->getDataItemKey() && $entity->getSegmentDelta()) {
       $operations['view'] = [
diff --git a/src/Entity/SegmentTranslation.php b/src/Entity/SegmentTranslation.php
index 7a308d0..fead433 100644
--- a/src/Entity/SegmentTranslation.php
+++ b/src/Entity/SegmentTranslation.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\tmgmt_memory\Entity;
 
+use Drupal\tmgmt_memory\SegmentStorageInterface;
+use Drupal\tmgmt_memory\UsageStorageInterface;
+use Drupal\tmgmt_memory\UsageTranslationStorageInterface;
+use Drupal\tmgmt_memory\UsageTranslationInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ -94,7 +98,7 @@ class SegmentTranslation extends ContentEntityBase implements SegmentTranslation
    * {@inheritdoc}
    */
   public function getSource() {
-    /** @var \Drupal\tmgmt_memory\SegmentStorageInterface $storage */
+    /** @var SegmentStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_segment');
     return $storage->load($this->getSourceId());
   }
@@ -110,7 +114,7 @@ class SegmentTranslation extends ContentEntityBase implements SegmentTranslation
    * {@inheritdoc}
    */
   public function getTarget() {
-    /** @var \Drupal\tmgmt_memory\SegmentStorageInterface $storage */
+    /** @var SegmentStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_segment');
     return $storage->load($this->getTargetId());
   }
@@ -127,14 +131,14 @@ class SegmentTranslation extends ContentEntityBase implements SegmentTranslation
    */
   public function setState($state) {
     $this->set('state', $state);
-    /** @var \Drupal\tmgmt_memory\UsageStorageInterface $storage */
+    /** @var UsageStorageInterface $storage */
     $storage = $this->entityTypeManager()->getStorage('tmgmt_memory_usage');
     $source_usage = $storage->loadMultipleBySegment($this->getSourceId());
     $target_usage = $storage->loadMultipleBySegment($this->getTargetId());
-    /** @var \Drupal\tmgmt_memory\UsageTranslationStorageInterface $storage */
+    /** @var UsageTranslationStorageInterface $storage */
     $storage = $this->entityTypeManager()->getStorage('tmgmt_memory_usage_translation');
     $usage_translations = $storage->loadMultipleBySourcesAndTargets($source_usage, $target_usage);
-    /** @var \Drupal\tmgmt_memory\UsageTranslationInterface $usage_translation */
+    /** @var UsageTranslationInterface $usage_translation */
     foreach ($usage_translations as $usage_translation) {
       $usage_translation->setState($state);
       $usage_translation->save();
diff --git a/src/Entity/Usage.php b/src/Entity/Usage.php
index 3cf0031..1865a77 100644
--- a/src/Entity/Usage.php
+++ b/src/Entity/Usage.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tmgmt_memory\Entity;
 
+use Drupal\tmgmt_memory\SegmentStorageInterface;
+use Drupal\tmgmt_memory\SegmentInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -114,7 +116,7 @@ class Usage extends ContentEntityBase implements UsageInterface {
    * {@inheritdoc}
    */
   public function getSegment() {
-    /** @var \Drupal\tmgmt_memory\SegmentStorageInterface $storage */
+    /** @var SegmentStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_segment');
     return $storage->load($this->getSegmentId());
   }
@@ -155,7 +157,7 @@ class Usage extends ContentEntityBase implements UsageInterface {
   public function postCreate(EntityStorageInterface $storage) {
     parent::postCreate($storage);
 
-    /** @var \Drupal\tmgmt_memory\SegmentInterface $segment */
+    /** @var SegmentInterface $segment */
     $segment = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_segment')->load($this->get('segment_id')->target_id);
     $segment->incrementCounterUsages();
     $segment->save();
diff --git a/src/Entity/UsageTranslation.php b/src/Entity/UsageTranslation.php
index 86db2ca..1cece05 100644
--- a/src/Entity/UsageTranslation.php
+++ b/src/Entity/UsageTranslation.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_memory\Entity;
 
+use Drupal\tmgmt_memory\UsageStorageInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ -83,7 +84,7 @@ class UsageTranslation extends ContentEntityBase implements UsageTranslationInte
    * {@inheritdoc}
    */
   public function getSource() {
-    /** @var \Drupal\tmgmt_memory\UsageStorageInterface $storage */
+    /** @var UsageStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_usage');
     return $storage->load($this->getSourceId());
   }
@@ -99,7 +100,7 @@ class UsageTranslation extends ContentEntityBase implements UsageTranslationInte
    * {@inheritdoc}
    */
   public function getTarget() {
-    /** @var \Drupal\tmgmt_memory\UsageStorageInterface $storage */
+    /** @var UsageStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_usage');
     return $storage->load($this->getTargetId());
   }
diff --git a/src/Form/ChangeConfirmationForm.php b/src/Form/ChangeConfirmationForm.php
index c3f5eed..491aebf 100644
--- a/src/Form/ChangeConfirmationForm.php
+++ b/src/Form/ChangeConfirmationForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_memory\Form;
 
+use Drupal\tmgmt_memory\SegmentTranslationInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -32,7 +33,7 @@ class ChangeConfirmationForm extends ContentEntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt_memory\SegmentTranslationInterface $entity */
+    /** @var SegmentTranslationInterface $entity */
     $entity = $this->getEntity();
 
     $old_state = $entity->getState();
diff --git a/src/Form/ImportForm.php b/src/Form/ImportForm.php
index 5dbbe83..53048d8 100644
--- a/src/Form/ImportForm.php
+++ b/src/Form/ImportForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_memory\Form;
 
+use Drupal\tmgmt_memory\MemoryManager;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -54,7 +55,7 @@ class ImportForm extends FormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\tmgmt_memory\MemoryManager $memory_manager */
+    /** @var MemoryManager $memory_manager */
     $memory_manager = \Drupal::service('tmgmt_memory.memory_manager');
     $supported_formats = ['tmx'];
     if ($file = file_save_upload('import', ['file_validate_extensions' => [implode(' ', $supported_formats)]], FALSE, 0)) {
diff --git a/src/Form/SegmentTranslationForm.php b/src/Form/SegmentTranslationForm.php
index f40cc30..f699aa3 100644
--- a/src/Form/SegmentTranslationForm.php
+++ b/src/Form/SegmentTranslationForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_memory\Form;
 
+use Drupal\tmgmt_memory\SegmentTranslationInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Views;
@@ -19,7 +20,7 @@ class SegmentTranslationForm extends ContentEntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\tmgmt_memory\SegmentTranslationInterface $segment_translation */
+    /** @var SegmentTranslationInterface $segment_translation */
     $segment_translation = $this->entity;
 
     $form['info'] = [
diff --git a/src/MemoryManager.php b/src/MemoryManager.php
index 1377b09..49746f1 100644
--- a/src/MemoryManager.php
+++ b/src/MemoryManager.php
@@ -18,7 +18,7 @@ class MemoryManager {
    * @param string $stripped_data
    *   The data of the segment without HTML tags.
    *
-   * @return \Drupal\tmgmt_memory\SegmentInterface
+   * @return SegmentInterface
    *   The new Segment or the existing one.
    */
   public function addSegment($language, $stripped_data) {
@@ -42,11 +42,11 @@ class MemoryManager {
    * @param string $stripped_data
    *   The data of the segment without HTML tags.
    *
-   * @return \Drupal\tmgmt_memory\SegmentInterface|NULL
+   * @return SegmentInterface|NULL
    *   The Segment or NULL if the segment does not exist.
    */
   public function getSegment($language, $stripped_data) {
-    /** @var \Drupal\tmgmt_memory\SegmentStorageInterface $storage */
+    /** @var SegmentStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_segment');
     return $storage->loadByLanguageAndData($language, $stripped_data);
   }
@@ -71,11 +71,11 @@ class MemoryManager {
    * @param array $context_data
    *   (Optional) The context data of the usage.
    *
-   * @return \Drupal\tmgmt_memory\UsageInterface
+   * @return UsageInterface
    *   The new Usage or the existing one.
    */
   public function addUsage($language, $data, $job_item_id, $data_item_key, $segment_delta, $context_data = []) {
-    /** @var \Drupal\tmgmt_memory\SegmentStorageInterface $storage */
+    /** @var SegmentStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_segment');
     $stripped_data = strip_tags($data);
     $segment = $storage->loadByLanguageAndData($language, $stripped_data);
@@ -111,11 +111,11 @@ class MemoryManager {
    * @param int $segment_id
    *   The Segment ID.
    *
-   * @return \Drupal\tmgmt_memory\UsageInterface|null
+   * @return UsageInterface|null
    *   An Usage object. NULL if no matching entity is found.
    */
   public function getUsage($job_item_id, $data_item_key, $segment_delta, $segment_id) {
-    /** @var \Drupal\tmgmt_memory\UsageStorageInterface $storage */
+    /** @var UsageStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_usage');
     return $storage->loadByIdentifiers($job_item_id, $data_item_key, $segment_delta, $segment_id);
   }
@@ -142,7 +142,7 @@ class MemoryManager {
    *   (Optional) The state of the translation, TRUE if enabled (default),
    *   FALSE otherwise.
    *
-   * @return \Drupal\tmgmt_memory\SegmentTranslationInterface
+   * @return SegmentTranslationInterface
    *   The new SegmentTranslation or the existing one.
    */
   public function addSegmentTranslation($source_language, $source_stripped_data, $target_language, $target_stripped_data, $quality = NULL, $state = TRUE) {
@@ -150,7 +150,7 @@ class MemoryManager {
     if ($segment_translation) {
       return $segment_translation;
     }
-    /** @var \Drupal\tmgmt_memory\SegmentStorageInterface $storage */
+    /** @var SegmentStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_segment');
     $source = $storage->loadByLanguageAndData($source_language, $source_stripped_data);
     $target = $storage->loadByLanguageAndData($target_language, $target_stripped_data);
@@ -187,11 +187,11 @@ class MemoryManager {
    * @param string $target_stripped_data
    *   (Optional) The source data without HTML tags.
    *
-   * @return \Drupal\tmgmt_memory\SegmentTranslationInterface|null
+   * @return SegmentTranslationInterface|null
    *   A SegmentTranslation object. NULL if no matching entity is found.
    */
   public function getSegmentTranslation($source_language, $source_stripped_data, $target_language, $target_stripped_data = NULL) {
-    /** @var \Drupal\tmgmt_memory\SegmentTranslationStorageInterface $storage */
+    /** @var SegmentTranslationStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_segment_translation');
     return $storage->loadByLanguageAndData($source_language, $source_stripped_data, $target_language, $target_stripped_data);
   }
@@ -206,12 +206,12 @@ class MemoryManager {
    * @param string $target_language
    *   The langcode of the target language.
    *
-   * @return \Drupal\tmgmt_memory\SegmentTranslationInterface[]|null
+   * @return SegmentTranslationInterface[]|null
    *   An array of SegmentTranslation objects. NULL if no matching entity is
    *   found.
    */
   public function getSegmentTranslations($source_language, $source_stripped_data, $target_language) {
-    /** @var \Drupal\tmgmt_memory\SegmentTranslationStorageInterface $storage */
+    /** @var SegmentTranslationStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_segment_translation');
     return $storage->loadMultipleByLanguageAndData($source_language, $source_stripped_data, $target_language);
   }
@@ -222,9 +222,9 @@ class MemoryManager {
    * It will just create the new usage translation if it does not already exist,
    * otherwise will return the existing one.
    *
-   * @param \Drupal\tmgmt_memory\UsageInterface $source
+   * @param UsageInterface $source
    *   The source usage.
-   * @param \Drupal\tmgmt_memory\UsageInterface $target
+   * @param UsageInterface $target
    *   The target usage.
    * @param int $quality
    *   (Optional) The quality from 0 to 10.
@@ -232,7 +232,7 @@ class MemoryManager {
    *   (Optional) The state of the translation, TRUE if enabled (default),
    *   FALSE otherwise.
    *
-   * @return \Drupal\tmgmt_memory\UsageTranslationInterface|NULL
+   * @return UsageTranslationInterface|NULL
    *   The new UsageTranslation or the existing one.
    */
   public function addUsageTranslation(UsageInterface $source, UsageInterface $target, $quality = NULL, $state = TRUE) {
@@ -263,11 +263,11 @@ class MemoryManager {
    * @param string $target_data
    *   (Optional) The source data with HTML tags.
    *
-   * @return \Drupal\tmgmt_memory\UsageTranslationInterface|null
+   * @return UsageTranslationInterface|null
    *   A SegmentTranslation object. NULL if no matching entity is found.
    */
   public function getUsageTranslation($source_language, $source_data, $target_language, $target_data = NULL) {
-    /** @var \Drupal\tmgmt_memory\UsageTranslationStorageInterface $storage */
+    /** @var UsageTranslationStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_usage_translation');
     return $storage->loadBestMatchByLanguageAndData($source_language, $source_data, $target_language, $target_data);
   }
@@ -282,12 +282,12 @@ class MemoryManager {
    * @param string $target_language
    *   The langcode of the target language.
    *
-   * @return \Drupal\tmgmt_memory\UsageTranslationInterface[]|null
+   * @return UsageTranslationInterface[]|null
    *   An array of UsageTranslation objects. NULL if no matching entity is
    *   found.
    */
   public function getUsageTranslations($source_language, $source_data, $target_language) {
-    /** @var \Drupal\tmgmt_memory\UsageTranslationStorageInterface $storage */
+    /** @var UsageTranslationStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_usage_translation');
     return $storage->loadMultipleByLanguageAndData($source_language, $source_data, $target_language);
   }
@@ -311,9 +311,9 @@ class MemoryManager {
    *   The translated data_item. NULL if there is no perfect match.
    */
   public function getPerfectMatchForDataItem($source_language, $target_language, $data_item) {
-    /** @var \Drupal\tmgmt_memory\Segmenter $segmenter */
+    /** @var Segmenter $segmenter */
     $segmenter = \Drupal::service('tmgmt.segmenter');
-    /** @var \Drupal\tmgmt_memory\UsageTranslationStorageInterface $usage_translation_storage */
+    /** @var UsageTranslationStorageInterface $usage_translation_storage */
     $usage_translation_storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_usage_translation');
     if ($data_item['#segmented_text']) {
       $segments = $segmenter->getSegmentsOfData($data_item['#segmented_text']);
@@ -324,7 +324,7 @@ class MemoryManager {
           return NULL;
         }
         $target_id = $entity->get('target')->target_id;
-        /** @var \Drupal\tmgmt_memory\UsageInterface $target */
+        /** @var UsageInterface $target */
         $target = \Drupal::entityTypeManager()
           ->getStorage('tmgmt_memory_usage')
           ->load($target_id);
diff --git a/src/Plugin/Action/DisableSegmentTranslation.php b/src/Plugin/Action/DisableSegmentTranslation.php
index 6207e6c..4ae6706 100644
--- a/src/Plugin/Action/DisableSegmentTranslation.php
+++ b/src/Plugin/Action/DisableSegmentTranslation.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_memory\Plugin\Action;
 
+use Drupal\tmgmt_memory\SegmentTranslationInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -34,7 +35,7 @@ class DisableSegmentTranslation extends ActionBase implements ContainerFactoryPl
    * {@inheritdoc}
    */
   public function executeMultiple(array $entities) {
-    /** @var \Drupal\tmgmt_memory\SegmentTranslationInterface $entity */
+    /** @var SegmentTranslationInterface $entity */
     foreach ($entities as $entity) {
       $entity->setState(FALSE);
       $entity->save();
diff --git a/src/Plugin/Action/EnableSegmentTranslation.php b/src/Plugin/Action/EnableSegmentTranslation.php
index dd802b0..93c482c 100644
--- a/src/Plugin/Action/EnableSegmentTranslation.php
+++ b/src/Plugin/Action/EnableSegmentTranslation.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_memory\Plugin\Action;
 
+use Drupal\tmgmt_memory\SegmentTranslationInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -34,7 +35,7 @@ class EnableSegmentTranslation extends ActionBase implements ContainerFactoryPlu
    * {@inheritdoc}
    */
   public function executeMultiple(array $entities) {
-    /** @var \Drupal\tmgmt_memory\SegmentTranslationInterface $entity */
+    /** @var SegmentTranslationInterface $entity */
     foreach ($entities as $entity) {
       $entity->setState(TRUE);
       $entity->save();
diff --git a/src/SegmentInterface.php b/src/SegmentInterface.php
index e0273fa..b060d93 100644
--- a/src/SegmentInterface.php
+++ b/src/SegmentInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_memory;
 
+use Drupal\Core\Language\Language;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -14,7 +15,7 @@ interface SegmentInterface extends ContentEntityInterface {
   /**
    * Return the language of the Segment.
    *
-   * @return \Drupal\Core\Language\Language
+   * @return Language
    *   The language.
    */
   public function getLanguage();
diff --git a/src/SegmentStorageInterface.php b/src/SegmentStorageInterface.php
index 2b85dbc..6a84d53 100644
--- a/src/SegmentStorageInterface.php
+++ b/src/SegmentStorageInterface.php
@@ -17,7 +17,7 @@ interface SegmentStorageInterface extends EntityStorageInterface {
    * @param string $stripped_data
    *   The data of the entity to load without HTML tags.
    *
-   * @return \Drupal\tmgmt_memory\SegmentInterface[]
+   * @return SegmentInterface[]
    *   An array of Segment objects. Returns an empty array if no
    *   matching entities are found.
    */
@@ -31,7 +31,7 @@ interface SegmentStorageInterface extends EntityStorageInterface {
    * @param string $stripped_data
    *   The data of the entity to load without HTML tags.
    *
-   * @return \Drupal\tmgmt_memory\SegmentInterface|null
+   * @return SegmentInterface|null
    *   An entity object. NULL if no matching entity is found.
    */
   public function loadByLanguageAndData($language, $stripped_data);
diff --git a/src/SegmentTranslationInterface.php b/src/SegmentTranslationInterface.php
index b288592..8bd7030 100644
--- a/src/SegmentTranslationInterface.php
+++ b/src/SegmentTranslationInterface.php
@@ -32,7 +32,7 @@ interface SegmentTranslationInterface extends ContentEntityInterface {
   /**
    * Return the source.
    *
-   * @return \Drupal\tmgmt_memory\SegmentInterface
+   * @return SegmentInterface
    *   The Segment entity.
    */
   public function getSource();
@@ -48,7 +48,7 @@ interface SegmentTranslationInterface extends ContentEntityInterface {
   /**
    * Return the Target.
    *
-   * @return \Drupal\tmgmt_memory\SegmentInterface
+   * @return SegmentInterface
    *   The Segment entity.
    */
   public function getTarget();
diff --git a/src/SegmentTranslationStorage.php b/src/SegmentTranslationStorage.php
index 64fea42..ad9a390 100644
--- a/src/SegmentTranslationStorage.php
+++ b/src/SegmentTranslationStorage.php
@@ -16,7 +16,7 @@ class SegmentTranslationStorage extends SqlContentEntityStorage implements Segme
    * {@inheritdoc}
    */
   public function loadMultipleByLanguageAndData($source_language, $source_stripped_data, $target_language, $target_stripped_data = NULL) {
-    /** @var \Drupal\tmgmt_memory\SegmentStorageInterface $segment_storage */
+    /** @var SegmentStorageInterface $segment_storage */
     $segment_storage = \Drupal::entityTypeManager()->getStorage('tmgmt_memory_segment');
     $source_segment = $segment_storage->loadByLanguageAndData($source_language, $source_stripped_data);
     if (!$source_segment) {
diff --git a/src/SegmentTranslationStorageInterface.php b/src/SegmentTranslationStorageInterface.php
index 21890c3..5a53eba 100644
--- a/src/SegmentTranslationStorageInterface.php
+++ b/src/SegmentTranslationStorageInterface.php
@@ -21,7 +21,7 @@ interface SegmentTranslationStorageInterface extends EntityStorageInterface {
    * @param string $target_stripped_data
    *   (Optional) The source data without HTML tags.
    *
-   * @return \Drupal\tmgmt_memory\SegmentTranslationInterface[]
+   * @return SegmentTranslationInterface[]
    *   An array of SegmentTranslation objects. Returns an empty array if no
    *   matching entities are found.
    */
@@ -43,7 +43,7 @@ interface SegmentTranslationStorageInterface extends EntityStorageInterface {
    * @param string $target_stripped_data
    *   (Optional) The source data without HTML tags.
    *
-   * @return \Drupal\tmgmt_memory\SegmentTranslationInterface|null
+   * @return SegmentTranslationInterface|null
    *   A SegmentTranslation object. NULL if no matching entity is found.
    */
   public function loadByLanguageAndData($source_language, $source_stripped_data, $target_language, $target_stripped_data = NULL);
diff --git a/src/Segmenter.php b/src/Segmenter.php
index c583795..0e7d08a 100644
--- a/src/Segmenter.php
+++ b/src/Segmenter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tmgmt_memory;
 
+use Drupal\tmgmt\Data;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
@@ -209,7 +210,7 @@ class Segmenter implements SegmenterInterface {
    * {@inheritdoc}
    */
   public function getSegmentedData($data) {
-    /** @var \Drupal\tmgmt\Data $data_service */
+    /** @var Data $data_service */
     $data_service = \Drupal::service('tmgmt.data');
     $fields = $data_service->flatten($data);
     foreach ($fields as $key => $field) {
