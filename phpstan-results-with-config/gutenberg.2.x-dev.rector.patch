diff --git a/gutenberg.api.php b/gutenberg.api.php
index 0d3f06e..bd470b8 100644
--- a/gutenberg.api.php
+++ b/gutenberg.api.php
@@ -12,17 +12,16 @@ use Symfony\Component\HttpFoundation\Request;
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Perform alterations to a gutenberg's media (file entity) search query.
  *
- * @param \Symfony\Component\HttpFoundation\Request $request
+ * @param Request $request
  *   The request.
  * @param string $type
  *   MIME type search string.
  * @param string $search
  *   Filename search string.
- * @param \Drupal\Core\Entity\Query\Sql\Query $query
+ * @param Query $query
  *   Entity query object.
  */
 function hook_gutenberg_media_search_query_alter(Request $request, string $type, string $search, Query $query) {
diff --git a/gutenberg.module b/gutenberg.module
index 696ac9a..8a36b72 100644
--- a/gutenberg.module
+++ b/gutenberg.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\gutenberg\GutenbergLibraryManagerInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Entity\ContentEntityForm;
+use Drupal\Core\Config\Config;
 /**
  * @file
  * Provides integration with the Gutenberg editor.
@@ -64,7 +68,7 @@ function gutenberg_theme() {
    * module in which they were created, so we must add them manually here.
    */
   $base_hook = 'gutenberg_block';
-  /** @var \Drupal\gutenberg\GutenbergLibraryManagerInterface $gutenberg_library_manager */
+  /** @var GutenbergLibraryManagerInterface $gutenberg_library_manager */
   $gutenberg_library_manager = \Drupal::service('plugin.manager.gutenberg.library');
   foreach ($gutenberg_library_manager->getModuleDefinitions() as $module => $definition) {
     if (empty($definition['dynamic-blocks'])) {
@@ -75,7 +79,7 @@ function gutenberg_theme() {
     $template_hooks = drupal_find_theme_templates(
       $templates,
       '.html.twig',
-      drupal_get_path('module', $module) . '/templates'
+      \Drupal::service('extension.list.module')->getPath($module) . '/templates'
     );
 
     foreach ($definition['dynamic-blocks'] as $block_name => $block_theme_definition) {
@@ -341,7 +345,7 @@ function gutenberg_form_alter(&$form, FormStateInterface $form_state, $form_id)
  *
  * @param array $form
  *   The form definition array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function _gutenberg_node_type_form_submit(array $form, FormStateInterface $form_state) {
@@ -404,7 +408,7 @@ function gutenberg_form_node_form_alter(&$form, FormStateInterface $form_state)
   $form['#attached']['drupalSettings']['gutenberg']['template'] = $gutenberg_template;
   $form['#attached']['drupalSettings']['gutenberg']['template-lock'] = $config->get($node_type . '_template_lock');
 
-  /** @var \Drupal\gutenberg\MappingFieldsHelper $mapping_fields */
+  /** @var MappingFieldsHelper $mapping_fields */
   $mapping_fields = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(MappingFieldsHelper::class);
 
@@ -414,7 +418,7 @@ function gutenberg_form_node_form_alter(&$form, FormStateInterface $form_state)
     $form[$item['field']]['#access'] = FALSE;
   }
 
-  /** @var \Drupal\gutenberg\GutenbergLibraryManagerInterface $gutenberg_library_manager */
+  /** @var GutenbergLibraryManagerInterface $gutenberg_library_manager */
   $gutenberg_library_manager = \Drupal::service('plugin.manager.gutenberg.library');
   $module_definitions = $gutenberg_library_manager->getModuleDefinitions();
 
@@ -591,7 +595,7 @@ function gutenberg_form_node_form_alter(&$form, FormStateInterface $form_state)
 
   $form['#attached']['drupalSettings']['gutenberg']['metaboxes'][] = 'edit-metabox-fields';
 
-  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
+  /** @var ModuleHandlerInterface $module_handler */
   $module_handler = \Drupal::service('module_handler');
   $form['#attached']['drupalSettings']['gutenberg']['media-enabled'] = $module_handler->moduleExists('media');
   if ($form['#attached']['drupalSettings']['gutenberg']['media-library-enabled'] = $module_handler->moduleExists('media_library')) {
@@ -696,7 +700,7 @@ function gutenberg_entity_presave($entity) {
     return;
   }
 
-  /** @var \Drupal\gutenberg\MappingFieldsHelper $mapping_fields */
+  /** @var MappingFieldsHelper $mapping_fields */
   $mapping_fields = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(MappingFieldsHelper::class);
 
@@ -788,7 +792,7 @@ function gutenberg_element_info_alter(array &$info) {
  *
  * @param array $element
  *   Render Element.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form state object.
  * @param array $complete_form
  *   Complete form array.
@@ -802,7 +806,7 @@ function _gutenberg_text_format_processor(array $element, FormStateInterface $fo
   if (!empty($element['format']) && isset($element['format']['format']['#options']['gutenberg'])) {
     // By default let's assume that gutenberg format is not allowed.
     $gutenberg_allowed = FALSE;
-    /** @var \Drupal\Core\Entity\ContentEntityForm $form */
+    /** @var ContentEntityForm $form */
     $form = $form_state->getFormObject();
     // Check whether the form that contains the element is an EntityForm.
     if ($form instanceof EntityFormInterface) {
@@ -813,7 +817,7 @@ function _gutenberg_text_format_processor(array $element, FormStateInterface $fo
       if ($entity instanceof NodeInterface) {
         // Get the node type to get the Gutenberg experience setting.
         $node_type = $entity->bundle();
-        /** @var \Drupal\Core\Config\Config $config */
+        /** @var Config $config */
         $config = \Drupal::service('config.factory')
           ->getEditable('gutenberg.settings');
         $gutenberg_enabled = $config->get($node_type . '_enable_full');
@@ -857,8 +861,7 @@ function gutenberg_page_attachments(array &$page) {
    *  If the functionality is truly needed, it could be added as a third
    *  party/custom module.
    */
-
-  /** @var \Drupal\gutenberg\GutenbergLibraryManagerInterface $gutenberg_library_manager */
+  /** @var GutenbergLibraryManagerInterface $gutenberg_library_manager */
   $gutenberg_library_manager = \Drupal::service('plugin.manager.gutenberg.library');
 
   $theme_definition = $gutenberg_library_manager->getActiveThemeMergedDefinition();
@@ -959,7 +962,7 @@ function gutenberg_themes_uninstalled(array $themes) {
 /**
  * Checks whether Gutenberg is enabled for an entity.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity to check.
  *
  * @return bool
diff --git a/gutenberg.post_update.php b/gutenberg.post_update.php
index 6670738..d550142 100644
--- a/gutenberg.post_update.php
+++ b/gutenberg.post_update.php
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\filter\Entity\FilterFormat;
+use Drupal\filter\Plugin\FilterInterface;
 /**
  * @file
  * Post update functions for Gutenberg.
@@ -30,9 +32,9 @@ function gutenberg_post_update_reusable_block_view_access() {
  */
 function gutenberg_post_update_fix_youtube_instagram_oembed_processor(&$sandbox) {
   $filterFormatStorage = \Drupal::entityTypeManager()->getStorage('filter_format');
-  /** @var \Drupal\filter\Entity\FilterFormat $format */
+  /** @var FilterFormat $format */
   foreach ($filterFormatStorage->loadMultiple() as $format) {
-    /** @var \Drupal\filter\Plugin\FilterInterface $filter */
+    /** @var FilterInterface $filter */
     foreach ($format->filters()->getIterator() as $instanceId => $filter) {
       if ($filter->getPluginId() === 'gutenberg') {
         $configuration = $filter->getConfiguration();
diff --git a/gutenberg.theme.inc b/gutenberg.theme.inc
index 47c025a..b5b473d 100644
--- a/gutenberg.theme.inc
+++ b/gutenberg.theme.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\gutenberg\MediaEntityRendererInterface;
 /**
  * @file
  * Theme related functions and hooks for the Gutenberg module.
@@ -49,7 +50,7 @@ function template_preprocess_gutenberg_block(array &$variables) {
  */
 function template_preprocess_gutenberg_block__drupalmedia__drupal_media_entity(&$variables) {
   if (!empty($variables['block_attributes']['mediaEntityIds'])) {
-    /** @var \Drupal\gutenberg\MediaEntityRendererInterface $media_entity_renderer */
+    /** @var MediaEntityRendererInterface $media_entity_renderer */
     $media_entity_renderer = \Drupal::service('gutenberg.media_entity.renderer');
     $variables['block_content'] = $media_entity_renderer->renderArray(
       reset($variables['block_attributes']['mediaEntityIds']),
diff --git a/modules/gutenberg_cloud/src/CloudBlockManager.php b/modules/gutenberg_cloud/src/CloudBlockManager.php
index 4242884..2e2119c 100644
--- a/modules/gutenberg_cloud/src/CloudBlockManager.php
+++ b/modules/gutenberg_cloud/src/CloudBlockManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg_cloud;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use GuzzleHttp\ClientInterface;
 
@@ -23,14 +24,14 @@ class CloudBlockManager {
   /**
    * The http client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
@@ -44,9 +45,9 @@ class CloudBlockManager {
   /**
    * CloudBlockManager constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   Http client service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   Config factory service.
    */
   public function __construct(ClientInterface $http_client, ConfigFactoryInterface $config) {
@@ -57,7 +58,7 @@ class CloudBlockManager {
   /**
    * Getter for Gutenberg Cloud Blocks config.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   Config.
    */
   public function getConfig() {
@@ -122,7 +123,7 @@ class CloudBlockManager {
    * @param \Drupal\gutenberg_cloud\string $name
    *   Block name.
    *
-   * @return \Drupal\gutenberg_cloud\CloudBlock|null
+   * @return CloudBlock|null
    *   Instance of Cloud Block or null.
    */
   public function loadRemote(string $name) {
@@ -151,7 +152,7 @@ class CloudBlockManager {
   /**
    * Check if the block is enabled locally.
    *
-   * @param \Drupal\gutenberg_cloud\CloudBlock $block
+   * @param CloudBlock $block
    *   CloudBlock instance.
    *
    * @return bool
@@ -166,7 +167,7 @@ class CloudBlockManager {
   /**
    * Compare remote and local version of block.
    *
-   * @param \Drupal\gutenberg_cloud\CloudBlock $block
+   * @param CloudBlock $block
    *   CloudBlock instance.
    *
    * @return bool
diff --git a/modules/gutenberg_cloud/src/Form/BlockManagerForm.php b/modules/gutenberg_cloud/src/Form/BlockManagerForm.php
index 08602b8..ec739a0 100644
--- a/modules/gutenberg_cloud/src/Form/BlockManagerForm.php
+++ b/modules/gutenberg_cloud/src/Form/BlockManagerForm.php
@@ -30,32 +30,32 @@ class BlockManagerForm extends ConfigFormBase {
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Cloud Block Manager service.
    *
-   * @var \Drupal\gutenberg_cloud\CloudBlockManager
+   * @var CloudBlockManager
    */
   protected $blockManager;
 
   /**
    * Library Discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;
 
   /**
    * BlockManagerForm constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messanger service.
-   * @param \Drupal\gutenberg_cloud\CloudBlockManager $block_manager
+   * @param CloudBlockManager $block_manager
    *   Cloud Block Manager service.
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   Library Discovery service.
    */
   public function __construct(MessengerInterface $messenger, CloudBlockManager $block_manager, LibraryDiscoveryInterface $library_discovery) {
@@ -238,10 +238,10 @@ class BlockManagerForm extends ConfigFormBase {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Modal dialog.
    */
   public function viewDetails(array &$form, FormStateInterface $form_state) {
@@ -275,7 +275,7 @@ class BlockManagerForm extends ConfigFormBase {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
@@ -292,7 +292,7 @@ class BlockManagerForm extends ConfigFormBase {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
@@ -309,7 +309,7 @@ class BlockManagerForm extends ConfigFormBase {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
@@ -331,7 +331,7 @@ class BlockManagerForm extends ConfigFormBase {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    * @param string $type
    *   Action to perform.
diff --git a/src/Annotation/GutenbergPlugin.php b/src/Annotation/GutenbergPlugin.php
index 788ca28..47b0ba9 100644
--- a/src/Annotation/GutenbergPlugin.php
+++ b/src/Annotation/GutenbergPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -30,7 +31,7 @@ class GutenbergPlugin extends Plugin {
   /**
    * The human-readable name of the Gutenberg plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/AssertMediaTrait.php b/src/AssertMediaTrait.php
index 56ce132..813c5b2 100644
--- a/src/AssertMediaTrait.php
+++ b/src/AssertMediaTrait.php
@@ -16,7 +16,7 @@ trait AssertMediaTrait {
   /**
    * Assert if provided entity is type of FileInterface.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance to check.
    *
    * @throws \Exception
@@ -30,7 +30,7 @@ trait AssertMediaTrait {
   /**
    * Assert if provided entity is type of MediaInterface.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance to check.
    *
    * @throws \Exception
diff --git a/src/BlockProcessor/DrupalBlockProcessor.php b/src/BlockProcessor/DrupalBlockProcessor.php
index 523c263..adc1c3c 100644
--- a/src/BlockProcessor/DrupalBlockProcessor.php
+++ b/src/BlockProcessor/DrupalBlockProcessor.php
@@ -20,23 +20,23 @@ class DrupalBlockProcessor implements GutenbergBlockProcessorInterface {
   /**
    * Drupal\gutenberg\BlocksRendererHelper instance.
    *
-   * @var \Drupal\gutenberg\BlocksRendererHelper
+   * @var BlocksRendererHelper
    */
   protected $blocksRenderer;
 
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * DynamicRenderProcessor constructor.
    *
-   * @param \Drupal\gutenberg\BlocksRendererHelper $blocks_renderer
+   * @param BlocksRendererHelper $blocks_renderer
    *   The block renderer.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(
diff --git a/src/BlockProcessor/DuotoneProcessor.php b/src/BlockProcessor/DuotoneProcessor.php
index 7a41b90..bce1ff0 100644
--- a/src/BlockProcessor/DuotoneProcessor.php
+++ b/src/BlockProcessor/DuotoneProcessor.php
@@ -16,32 +16,32 @@ class DuotoneProcessor implements GutenbergBlockProcessorInterface {
   /**
    * TinyColor.
    *
-   * @var \Drupal\gutenberg\TinyColor
+   * @var TinyColor
    */
   protected $tinyColor;
 
   /**
    * Gutenberg blocks library.
    *
-   * @var \Drupal\gutenberg\BlocksLibraryManager
+   * @var BlocksLibraryManager
    */
   protected $blocksLibrary;
 
   /**
    * The Gutenberg logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * DuotoneProcessor constructor.
    *
-   * @param \Drupal\gutenberg\TinyColor $tiny_color
+   * @param TinyColor $tiny_color
    *   The renderer.
-   * @param \Drupal\gutenberg\BlocksLibraryManager $blocks_library
+   * @param BlocksLibraryManager $blocks_library
    *   Blocks library manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Gutenberg logger interface.
    */
   public function __construct(
diff --git a/src/BlockProcessor/DynamicRenderProcessor.php b/src/BlockProcessor/DynamicRenderProcessor.php
index a0c49c6..cdaf73d 100644
--- a/src/BlockProcessor/DynamicRenderProcessor.php
+++ b/src/BlockProcessor/DynamicRenderProcessor.php
@@ -17,14 +17,14 @@ class DynamicRenderProcessor implements GutenbergBlockProcessorInterface {
   /**
    * The Gutenberg library manager.
    *
-   * @var \Drupal\gutenberg\GutenbergLibraryManagerInterface
+   * @var GutenbergLibraryManagerInterface
    */
   protected $libraryManager;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -38,18 +38,18 @@ class DynamicRenderProcessor implements GutenbergBlockProcessorInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * DynamicRenderProcessor constructor.
    *
-   * @param \Drupal\gutenberg\GutenbergLibraryManagerInterface $library_manager
+   * @param GutenbergLibraryManagerInterface $library_manager
    *   The Gutenberg library manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(
diff --git a/src/BlockProcessor/GutenbergBlockProcessorInterface.php b/src/BlockProcessor/GutenbergBlockProcessorInterface.php
index 64502da..d40226d 100644
--- a/src/BlockProcessor/GutenbergBlockProcessorInterface.php
+++ b/src/BlockProcessor/GutenbergBlockProcessorInterface.php
@@ -19,7 +19,7 @@ interface GutenbergBlockProcessorInterface {
    *   The block object.
    * @param string $block_content
    *   The inner block content.
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $bubbleable_metadata
+   * @param RefinableCacheableDependencyInterface $bubbleable_metadata
    *   The bubbleable metadata.
    *
    * @return bool|null
diff --git a/src/BlockProcessor/GutenbergBlockProcessorManager.php b/src/BlockProcessor/GutenbergBlockProcessorManager.php
index 952d0ce..c8b5a35 100644
--- a/src/BlockProcessor/GutenbergBlockProcessorManager.php
+++ b/src/BlockProcessor/GutenbergBlockProcessorManager.php
@@ -30,7 +30,7 @@ class GutenbergBlockProcessorManager {
   /**
    * Adds a block processor object.
    *
-   * @param \Drupal\gutenberg\BlockProcessor\GutenbergBlockProcessorInterface $processor
+   * @param GutenbergBlockProcessorInterface $processor
    *   The processor object to add.
    * @param int $priority
    *   The priority of the processor being added.
diff --git a/src/BlockProcessor/GutenbergConfigurableBlockProcessorInterface.php b/src/BlockProcessor/GutenbergConfigurableBlockProcessorInterface.php
index 05ccd9c..2d1386d 100644
--- a/src/BlockProcessor/GutenbergConfigurableBlockProcessorInterface.php
+++ b/src/BlockProcessor/GutenbergConfigurableBlockProcessorInterface.php
@@ -16,7 +16,7 @@ interface GutenbergConfigurableBlockProcessorInterface {
    *
    * @param array $form
    *   A minimally prepopulated form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the (entire) configuration form.
    *
    * @return array
diff --git a/src/BlockProcessor/OEmbedProcessor.php b/src/BlockProcessor/OEmbedProcessor.php
index d6b710a..87f2705 100644
--- a/src/BlockProcessor/OEmbedProcessor.php
+++ b/src/BlockProcessor/OEmbedProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\BlockProcessor;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Cache\Cache;
@@ -23,28 +24,28 @@ class OEmbedProcessor extends ConfigurableProcessorBase {
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The oembed resolver.
    *
-   * @var \Drupal\gutenberg\OEmbedResolverInterface
+   * @var OEmbedResolverInterface
    */
   protected $oembedResolver;
 
@@ -58,15 +59,15 @@ class OEmbedProcessor extends ConfigurableProcessorBase {
   /**
    * OEmbedProcessor constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\gutenberg\OEmbedResolverInterface $oembed_resolver
+   * @param OEmbedResolverInterface $oembed_resolver
    *   The oEmbed resolver.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   (optional) The cache backend.
    */
   public function __construct(
@@ -311,7 +312,7 @@ EOL
    * @param string $url
    *   The oEmbed URL.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    *   The oEmbed markup or original URL if a markup could not be resolved.
    *
    * @throws \Exception
diff --git a/src/BlockProcessor/ReusableBlockProcessor.php b/src/BlockProcessor/ReusableBlockProcessor.php
index 766e716..96a8154 100644
--- a/src/BlockProcessor/ReusableBlockProcessor.php
+++ b/src/BlockProcessor/ReusableBlockProcessor.php
@@ -17,32 +17,32 @@ class ReusableBlockProcessor implements GutenbergBlockProcessorInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The Gutenberg logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * ReusableBlockProcessor constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Gutenberg logger interface.
    */
   public function __construct(
diff --git a/src/BlocksLibraryManager.php b/src/BlocksLibraryManager.php
index e290f3a..af02668 100644
--- a/src/BlocksLibraryManager.php
+++ b/src/BlocksLibraryManager.php
@@ -26,21 +26,21 @@ class BlocksLibraryManager extends DefaultPluginManager {
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The theme initialization.
    *
-   * @var \Drupal\Core\Theme\ThemeInitializationInterface
+   * @var ThemeInitializationInterface
    */
   protected $themeInitialization;
 
   /**
    * The Gutenberg logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -56,15 +56,15 @@ class BlocksLibraryManager extends DefaultPluginManager {
    *
    * @param string $root
    *   App root.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Theme\ThemeInitializationInterface $theme_initialization
+   * @param ThemeInitializationInterface $theme_initialization
    *   The theme initialization.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Gutenberg logger interface.
    */
   public function __construct(
diff --git a/src/BlocksRendererHelper.php b/src/BlocksRendererHelper.php
index 59550c2..ea698f9 100644
--- a/src/BlocksRendererHelper.php
+++ b/src/BlocksRendererHelper.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\gutenberg;
 
+use Drupal\Component\Plugin\Exception\ContextException;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Block\BlockPluginInterface;
@@ -24,68 +27,68 @@ class BlocksRendererHelper {
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Drupal\Core\Block\BlockManagerInterface instance.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * Drupal\Core\Session\AccountProxyInterface instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The context handler service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
    * The title resolver.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface
+   * @var TitleResolverInterface
    */
   protected $titleResolver;
 
   /**
    * The Gutenberg logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * BlocksRendererHelper constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Renderer service.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   Block manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Current user service.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The plugin context handler.
-   * @param \Drupal\Core\Controller\TitleResolverInterface $title_resolver
+   * @param TitleResolverInterface $title_resolver
    *   The title resolver.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Gutenberg logger interface.
    */
   public function __construct(
@@ -114,10 +117,10 @@ class BlocksRendererHelper {
    * @param array $config
    *   Block configuration.
    *
-   * @return \Drupal\Core\Block\BlockPluginInterface|null
+   * @return BlockPluginInterface|null
    *   Block Plugin instance or null.
    *
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
+   * @throws ContextException
    */
   public function getBlockFromPluginId($id, array $config = []) {
     try {
@@ -145,12 +148,12 @@ class BlocksRendererHelper {
   /**
    * Return render array for given block plugin.
    *
-   * @param \Drupal\Core\Block\BlockPluginInterface $plugin_block
+   * @param BlockPluginInterface $plugin_block
    *   Block Plugin instance.
    * @param bool $render_markup
    *   Render the response as markup.
    *
-   * @return array|\Drupal\Component\Render\MarkupInterface
+   * @return array|MarkupInterface
    *   Array containing render array, or empty.
    */
   public function getRenderFromBlockPlugin(BlockPluginInterface $plugin_block, $render_markup = TRUE) {
@@ -196,12 +199,12 @@ class BlocksRendererHelper {
   /**
    * Check the access of the block.
    *
-   * @param \Drupal\Core\Block\BlockPluginInterface $plugin_block
+   * @param BlockPluginInterface $plugin_block
    *   Block Plugin instance.
    * @param bool $return_as_object
    *   Whether to return as an object or not.
    *
-   * @return bool|\Drupal\Core\Access\AccessResultInterface
+   * @return bool|AccessResultInterface
    *   The access result.
    */
   public function getBlockAccess(BlockPluginInterface $plugin_block, $return_as_object = TRUE) {
diff --git a/src/Controller/BlocksController.php b/src/Controller/BlocksController.php
index bad46e1..099590f 100644
--- a/src/Controller/BlocksController.php
+++ b/src/Controller/BlocksController.php
@@ -19,41 +19,41 @@ class BlocksController extends ControllerBase {
   /**
    * Drupal\Core\Block\BlockManagerInterface instance.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * Drupal\Core\Config\ConfigFactoryInterface instance.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Drupal\Core\Render\Renderer instance.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
    * Drupal\gutenberg\BlocksRendererHelper instance.
    *
-   * @var \Drupal\gutenberg\BlocksRendererHelper
+   * @var BlocksRendererHelper
    */
   protected $blocksRenderer;
 
   /**
    * BlocksController constructor.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   Block manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   Render service.
-   * @param \Drupal\gutenberg\BlocksRendererHelper $blocks_renderer
+   * @param BlocksRendererHelper $blocks_renderer
    *   Blocks renderer helper service.
    */
   public function __construct(
@@ -82,12 +82,12 @@ class BlocksController extends ControllerBase {
   /**
    * Returns JSON representing the loaded blocks.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $content_type
    *   The content type to fetch settings from.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function loadByType(Request $request, $content_type) {
@@ -126,12 +126,12 @@ class BlocksController extends ControllerBase {
   /**
    * Returns JSON representing the loaded blocks.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $plugin_id
    *   Plugin ID.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function loadById(Request $request, $plugin_id) {
diff --git a/src/Controller/MediaController.php b/src/Controller/MediaController.php
index 96a8e34..21c398d 100644
--- a/src/Controller/MediaController.php
+++ b/src/Controller/MediaController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\gutenberg\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\file\Entity\File;
@@ -29,50 +32,50 @@ class MediaController extends ControllerBase {
   /**
    * The media service.
    *
-   * @var \Drupal\gutenberg\Service\MediaService
+   * @var MediaService
    */
   protected $mediaService;
 
   /**
    * The media selection processor manager.
    *
-   * @var \Drupal\gutenberg\MediaSelectionProcessor\MediaSelectionProcessorManagerInterface
+   * @var MediaSelectionProcessorManagerInterface
    */
   protected $mediaSelectionProcessorManager;
 
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Drupal\Core\Image\ImageFactory instance.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;
 
   /**
    * Drupal\Core\File\FileSystemInterface instance.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * MediaController constructor.
    *
-   * @param \Drupal\gutenberg\Service\MediaService $media_service
+   * @param MediaService $media_service
    *   The media service.
-   * @param \Drupal\gutenberg\MediaSelectionProcessor\MediaSelectionProcessorManagerInterface $media_selection_processor_manager
+   * @param MediaSelectionProcessorManagerInterface $media_selection_processor_manager
    *   The media selection processor manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The image factory.
    */
   public function __construct(
@@ -105,13 +108,13 @@ class MediaController extends ControllerBase {
   /**
    * Render Drupal's media library dialog.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    */
   public function dialog(Request $request) {
     try {
@@ -130,16 +133,16 @@ class MediaController extends ControllerBase {
   /**
    * Load media data.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    * @param string $media
    *   Media data (numeric or stringified JSON for media data processing).
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadMedia(Request $request, string $media) {
     $media_entities = $this->mediaSelectionProcessorManager->processData($media);
@@ -162,7 +165,7 @@ class MediaController extends ControllerBase {
    * @param string $media
    *   Media data (numeric or stringified JSON for media data processing).
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function render(string $media) {
@@ -191,12 +194,12 @@ class MediaController extends ControllerBase {
   /**
    * Upload files, save as file and media entity if possible.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
-   * @param \Drupal\editor\Entity\Editor|null $editor
+   * @param Editor|null $editor
    *   Editor entity instance.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
    * @throws \Exception
@@ -224,12 +227,12 @@ class MediaController extends ControllerBase {
   /**
    * Get data of the media entity required for Gutenberg editor.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
-   * @param \Drupal\file\Entity\File|null $file
+   * @param File|null $file
    *   Loaded found file entity instance.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
    * @throws \Exception
@@ -250,12 +253,12 @@ class MediaController extends ControllerBase {
   /**
    * Create a new media from Gutenberg image editing.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
-   * @param \Drupal\file\Entity\File|null $file
+   * @param File|null $file
    *   Loaded found file entity instance.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
    * @throws \Exception
@@ -308,18 +311,18 @@ class MediaController extends ControllerBase {
   /**
    * Searches for files.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $type
    *   The MIME type search string.
    * @param string $search
    *   The filename search string.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function search(Request $request, string $type = '', string $search = '') {
     return new JsonResponse(
@@ -330,15 +333,15 @@ class MediaController extends ControllerBase {
   /**
    * Updates file data.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    * @param string|int $fid
    *   File id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    */
   public function updateData(Request $request, $fid) {
     $data = json_decode($request->getContent(), TRUE);
@@ -360,10 +363,10 @@ class MediaController extends ControllerBase {
   /**
    * Get data for autocomplete.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function autocomplete(Request $request) {
diff --git a/src/Controller/OEmbedProxyUrlController.php b/src/Controller/OEmbedProxyUrlController.php
index 17284f9..5679f9f 100644
--- a/src/Controller/OEmbedProxyUrlController.php
+++ b/src/Controller/OEmbedProxyUrlController.php
@@ -22,14 +22,14 @@ class OEmbedProxyUrlController extends ControllerBase {
   /**
    * The oembed resolver.
    *
-   * @var \Drupal\gutenberg\OEmbedResolverInterface
+   * @var OEmbedResolverInterface
    */
   protected $oembedResolver;
 
   /**
    * OEmbedProxyUrlController constructor.
    *
-   * @param \Drupal\gutenberg\OEmbedResolverInterface $oembed_resolver
+   * @param OEmbedResolverInterface $oembed_resolver
    *   The oEmbed resolver.
    */
   public function __construct(OEmbedResolverInterface $oembed_resolver) {
@@ -48,10 +48,10 @@ class OEmbedProxyUrlController extends ControllerBase {
   /**
    * Handle an oEmbed proxy request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
+   * @return CacheableJsonResponse
    *   The JSON response.
    */
   public function request(Request $request) {
diff --git a/src/Controller/ReusableBlocksController.php b/src/Controller/ReusableBlocksController.php
index d302c38..b2268e6 100644
--- a/src/Controller/ReusableBlocksController.php
+++ b/src/Controller/ReusableBlocksController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\Controller;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\block_content\BlockContentInterface;
 use Drupal\block_content\Entity\BlockContent;
 use Drupal\Core\Access\AccessResult;
@@ -21,12 +22,12 @@ class ReusableBlocksController extends ControllerBase {
   /**
    * Returns JSON representing the loaded blocks.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $block_id
    *   The reusable block id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    */
   public function load(Request $request, $block_id = NULL) {
@@ -59,7 +60,7 @@ class ReusableBlocksController extends ControllerBase {
     $blocks = BlockContent::loadMultiple($ids);
     $result = [];
 
-    /** @var \Drupal\block_content\BlockContentInterface[] $blocks */
+    /** @var BlockContentInterface[] $blocks */
     foreach ($blocks as $key => $block) {
       $result[] = $this->getBlockAttributes($block);
     }
@@ -70,15 +71,15 @@ class ReusableBlocksController extends ControllerBase {
   /**
    * Saves reusable block.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $block_id
    *   The reusable block id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function save(Request $request, $block_id = NULL) {
     $updating_block = $block_id && $block_id > 0;
@@ -129,15 +130,15 @@ class ReusableBlocksController extends ControllerBase {
   /**
    * Delete reusable block.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $block_id
    *   The reusable block id.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function delete(Request $request, $block_id = NULL) {
     $block = $this->loadBlockOrThrow($block_id);
@@ -151,12 +152,12 @@ class ReusableBlocksController extends ControllerBase {
   /**
    * Controller routes access callback.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Current user.
    * @param string $block_id
    *   Block id from route parameter.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Allowed access result if all conditions are met.
    */
   public function access(AccountInterface $account, $block_id) {
@@ -188,14 +189,14 @@ class ReusableBlocksController extends ControllerBase {
    * @param int $block_id
    *   The block ID.
    *
-   * @return \Drupal\block_content\BlockContentInterface
+   * @return BlockContentInterface
    *   The block instance.
    */
   protected function loadBlockOrThrow($block_id) {
     $block_id = (int) $block_id;
 
     if ($block_id > 0 && $block = BlockContent::load($block_id)) {
-      /** @var \Drupal\block_content\BlockContentInterface $block */
+      /** @var BlockContentInterface $block */
       if ($block->bundle() !== 'reusable_block') {
         // Avoid accidental/malicious manipulation of non reusable blocks in
         // this controller.
@@ -210,7 +211,7 @@ class ReusableBlocksController extends ControllerBase {
   /**
    * Get the block as a response array.
    *
-   * @param \Drupal\block_content\BlockContentInterface $block
+   * @param BlockContentInterface $block
    *   The block instance.
    *
    * @return array
diff --git a/src/Controller/SearchController.php b/src/Controller/SearchController.php
index 0487aa3..8a2381f 100644
--- a/src/Controller/SearchController.php
+++ b/src/Controller/SearchController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\Controller;
 
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpFoundation\Request;
@@ -17,13 +18,13 @@ class SearchController extends ControllerBase {
    *
    * Used for link auto-completion.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The JSON response.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function search(Request $request) {
     $search = (string) $request->query->get('search');
diff --git a/src/Controller/UtilsController.php b/src/Controller/UtilsController.php
index 8df7198..e9fe11c 100644
--- a/src/Controller/UtilsController.php
+++ b/src/Controller/UtilsController.php
@@ -56,7 +56,7 @@ class UtilsController extends ControllerBase {
   /**
    * Get all the entity text fields.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   An entity instance.
    *
    * @return array
@@ -92,7 +92,7 @@ class UtilsController extends ControllerBase {
   /**
    * Get a list of entity field names.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   An entity instance.
    *
    * @return array
diff --git a/src/DataProvider/BaseDataProvider.php b/src/DataProvider/BaseDataProvider.php
index 5142518..4c98a54 100644
--- a/src/DataProvider/BaseDataProvider.php
+++ b/src/DataProvider/BaseDataProvider.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\gutenberg\DataProvider;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\image\Entity\ImageStyle;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Image\ImageFactory;
@@ -16,32 +19,32 @@ abstract class BaseDataProvider implements DataProviderInterface {
   /**
    * Entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Image factory instance.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;
 
   /**
    * BaseDataProvider constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Connection $connection, ImageFactory $image_factory) {
@@ -78,8 +81,8 @@ abstract class BaseDataProvider implements DataProviderInterface {
    * @return array
    *   The sizes of the image styles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getSizes(string $source_url, string $uri) {
     // SVG's don't have image styles.
@@ -96,9 +99,9 @@ abstract class BaseDataProvider implements DataProviderInterface {
     ];
 
     foreach ($styles as $style) {
-      /** @var \Drupal\image\Entity\ImageStyle $style */
+      /** @var ImageStyle $style */
       $sizes[$style->getName()] = [
-        'source_url' => file_url_transform_relative($style->buildUrl($uri)),
+        'source_url' => \Drupal::service('file_url_generator')->transformRelative($style->buildUrl($uri)),
       ];
     }
 
diff --git a/src/DataProvider/DataProviderInterface.php b/src/DataProvider/DataProviderInterface.php
index 02df4e3..f0ff819 100644
--- a/src/DataProvider/DataProviderInterface.php
+++ b/src/DataProvider/DataProviderInterface.php
@@ -14,7 +14,7 @@ interface DataProviderInterface {
   /**
    * Returns array data.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance to process.
    * @param array $data
    *   Array of additional data to process.
diff --git a/src/DataProvider/EntityDataProviderManagerInterface.php b/src/DataProvider/EntityDataProviderManagerInterface.php
index 379ddca..98b2f8c 100644
--- a/src/DataProvider/EntityDataProviderManagerInterface.php
+++ b/src/DataProvider/EntityDataProviderManagerInterface.php
@@ -14,7 +14,7 @@ interface EntityDataProviderManagerInterface {
   /**
    * Register entity type data provider.
    *
-   * @param \Drupal\gutenberg\DataProvider\DataProviderInterface $data_provider
+   * @param DataProviderInterface $data_provider
    *   Data provider to register.
    * @param string $entity_type
    *   Entity type machine name.
@@ -28,7 +28,7 @@ interface EntityDataProviderManagerInterface {
    *
    * @param string $entity_type
    *   Entity type machine name.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   Entity instance.
    * @param array $data
    *   (optional) Additional data to process.
diff --git a/src/DataProvider/FileEntityDataProvider.php b/src/DataProvider/FileEntityDataProvider.php
index 92bdeba..c0ddf5a 100644
--- a/src/DataProvider/FileEntityDataProvider.php
+++ b/src/DataProvider/FileEntityDataProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\DataProvider;
 
+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\gutenberg\AssertMediaTrait;
 
@@ -22,9 +23,9 @@ class FileEntityDataProvider extends BaseDataProvider {
   public function getData(ContentEntityInterface $entity, array $data = []) {
     $this->assertIsFileEntity($entity);
 
-    /** @var \Drupal\file\FileInterface $entity */
+    /** @var FileInterface $entity */
     $uri = $entity->getFileUri();
-    $source_url = file_url_transform_relative(file_create_url($uri));
+    $source_url = \Drupal::service('file_url_generator')->generateString($uri);
     $image = $this->imageFactory->get($uri);
     $file_data = $this->getFileData($entity->id());
 
@@ -36,7 +37,7 @@ class FileEntityDataProvider extends BaseDataProvider {
       'title' => $file_data['title'] ?? '',
       'filename' => urldecode($entity->getFilename()),
       'url' => $source_url,
-      'link' => file_create_url($source_url),
+      'link' => \Drupal::service('file_url_generator')->generateAbsoluteString($source_url),
       'alt' => $file_data['alt_text'] ?? '',
       'author' => $entity->getOwnerId(),
       'description' => '',
diff --git a/src/DataProvider/MediaEntityDataProvider.php b/src/DataProvider/MediaEntityDataProvider.php
index 89e6c2c..6af5864 100644
--- a/src/DataProvider/MediaEntityDataProvider.php
+++ b/src/DataProvider/MediaEntityDataProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\DataProvider;
 
+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\gutenberg\AssertMediaTrait;
 
@@ -22,9 +23,9 @@ class MediaEntityDataProvider extends BaseDataProvider {
   public function getData(ContentEntityInterface $entity, array $data = []) {
     $this->assertIsFileEntity($entity);
 
-    /** @var \Drupal\file\FileInterface $entity */
+    /** @var FileInterface $entity */
     $uri = $entity->getFileUri();
-    $source_url = file_url_transform_relative(file_create_url($uri));
+    $source_url = \Drupal::service('file_url_generator')->generateString($uri);
     $file_data = $this->getFileData($entity->id());
 
     $result = [
diff --git a/src/Form/BlockSettingsForm.php b/src/Form/BlockSettingsForm.php
index 48218ac..bfcb8a5 100644
--- a/src/Form/BlockSettingsForm.php
+++ b/src/Form/BlockSettingsForm.php
@@ -26,32 +26,32 @@ class BlockSettingsForm extends FormBase implements BaseFormIdInterface {
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * The plugin form manager.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;
 
   /**
    * Drupal\gutenberg\BlocksRendererHelper instance.
    *
-   * @var \Drupal\gutenberg\BlocksRendererHelper
+   * @var BlocksRendererHelper
    */
   protected $blocksRenderer;
 
   /**
    * Constructs a new block form.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $plugin_form_manager
+   * @param PluginFormFactoryInterface $plugin_form_manager
    *   The plugin form manager.
-   * @param \Drupal\gutenberg\BlocksRendererHelper $blocks_renderer
+   * @param BlocksRendererHelper $blocks_renderer
    *   Blocks renderer helper service.
    */
   public function __construct(BlockManagerInterface $block_manager, PluginFormFactoryInterface $plugin_form_manager, BlocksRendererHelper $blocks_renderer) {
@@ -90,7 +90,7 @@ class BlockSettingsForm extends FormBase implements BaseFormIdInterface {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $plugin_id
    *   The plugin ID.
@@ -101,11 +101,11 @@ class BlockSettingsForm extends FormBase implements BaseFormIdInterface {
   public function buildForm(array $form, FormStateInterface $form_state, $plugin_id = NULL, $config = []) {
     function array_flatten($array = null) {
       $result = array();
-  
+
       if (!is_array($array)) {
           $array = func_get_args();
       }
-  
+
       foreach ($array as $key => $value) {
           if (is_array($value)) {
               $result = array_merge($result, array_flatten($value));
@@ -113,7 +113,7 @@ class BlockSettingsForm extends FormBase implements BaseFormIdInterface {
               $result = array_merge($result, array($key => $value));
           }
       }
-  
+
       return $result;
     }
 
@@ -123,7 +123,7 @@ class BlockSettingsForm extends FormBase implements BaseFormIdInterface {
 
     $plugin_block = $this->blocksRenderer->getBlockFromPluginId($plugin_id, $configuration ?? []);
     $block_form = $plugin_block->blockForm($form, $form_state);
- 
+
     // $form['#attached']['library'][] = 'gutenberg/drupal-block-settings';
 
     $form['#tree'] = TRUE;
diff --git a/src/GutenbergLibraryManager.php b/src/GutenbergLibraryManager.php
index e99c378..0f93834 100644
--- a/src/GutenbergLibraryManager.php
+++ b/src/GutenbergLibraryManager.php
@@ -33,21 +33,21 @@ class GutenbergLibraryManager extends DefaultPluginManager implements GutenbergL
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The theme initialization.
    *
-   * @var \Drupal\Core\Theme\ThemeInitializationInterface
+   * @var ThemeInitializationInterface
    */
   protected $themeInitialization;
 
   /**
    * The Gutenberg logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -74,19 +74,18 @@ class GutenbergLibraryManager extends DefaultPluginManager implements GutenbergL
 
   /* @noinspection MagicMethodsValidityInspection */
   /* @noinspection PhpMissingParentConstructorInspection */
-
   /**
    * Constructs a new GutenbergManager object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Theme\ThemeInitializationInterface $theme_initialization
+   * @param ThemeInitializationInterface $theme_initialization
    *   The theme initialization.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Gutenberg logger interface.
    */
   public function __construct(
@@ -148,7 +147,7 @@ class GutenbergLibraryManager extends DefaultPluginManager implements GutenbergL
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function processDefinition(&$definition, $plugin_id) {
     parent::processDefinition($definition, $plugin_id);
diff --git a/src/GutenbergPluginConfigurableInterface.php b/src/GutenbergPluginConfigurableInterface.php
index 891c855..a6ee089 100644
--- a/src/GutenbergPluginConfigurableInterface.php
+++ b/src/GutenbergPluginConfigurableInterface.php
@@ -24,9 +24,9 @@ interface GutenbergPluginConfigurableInterface extends GutenbergPluginInterface
    *
    * @param array $form
    *   An empty form array to be populated with a configuration form, if any.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state of the entire filter administration form.
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
diff --git a/src/GutenbergPluginInterface.php b/src/GutenbergPluginInterface.php
index 41075cd..ab43030 100644
--- a/src/GutenbergPluginInterface.php
+++ b/src/GutenbergPluginInterface.php
@@ -16,7 +16,7 @@ interface GutenbergPluginInterface extends PluginInspectionInterface {
    * These libraries will be attached to the text_format element on which the
    * editor is being loaded.
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
@@ -49,7 +49,7 @@ interface GutenbergPluginInterface extends PluginInspectionInterface {
    * $plugin_specific_settings = $settings['plugins'][$plugin_id];
    * @endcode
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
diff --git a/src/GutenbergPluginManager.php b/src/GutenbergPluginManager.php
index 53f0cfd..d6df49a 100644
--- a/src/GutenbergPluginManager.php
+++ b/src/GutenbergPluginManager.php
@@ -19,9 +19,9 @@ class GutenbergPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -35,9 +35,9 @@ class GutenbergPluginManager extends DefaultPluginManager {
    *
    * @param array &$form
    *   A reference to an associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    */
   public function injectPluginSettingsForm(array &$form, FormStateInterface $form_state, Editor $editor) {
diff --git a/src/MappingFieldsHelper.php b/src/MappingFieldsHelper.php
index 6986247..937fe02 100644
--- a/src/MappingFieldsHelper.php
+++ b/src/MappingFieldsHelper.php
@@ -25,23 +25,23 @@ class MappingFieldsHelper implements ContainerInjectionInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The Gutenberg logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * EntityTypePresave constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The Gutenberg logger.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerInterface $logger) {
@@ -62,7 +62,7 @@ class MappingFieldsHelper implements ContainerInjectionInterface {
   /**
    * Set the entity field values based on the mapping field settings.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The Drupal entity to presave.
    */
   public function setFieldMappingValues(EntityInterface $entity) {
diff --git a/src/MediaEntityRenderer.php b/src/MediaEntityRenderer.php
index e50a334..d2ba7a0 100644
--- a/src/MediaEntityRenderer.php
+++ b/src/MediaEntityRenderer.php
@@ -17,23 +17,23 @@ class MediaEntityRenderer implements MediaEntityRendererInterface {
   /**
    * The Drupal renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * MediaEntityRenderer constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(RendererInterface $renderer, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/MediaEntityRendererInterface.php b/src/MediaEntityRendererInterface.php
index 4127def..24cd918 100644
--- a/src/MediaEntityRendererInterface.php
+++ b/src/MediaEntityRendererInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg;
 
+use Drupal\media\Entity\Media;
 /**
  * Renders media entities.
  *
@@ -12,7 +13,7 @@ interface MediaEntityRendererInterface {
   /**
    * Render media entities.
    *
-   * @param \Drupal\media\Entity\Media|string $media_entity
+   * @param Media|string $media_entity
    *   Media entity ID or loaded media entity instance.
    * @param string $view_mode
    *   (optional) View mode of media entity, 'full' is default.
@@ -25,7 +26,7 @@ interface MediaEntityRendererInterface {
   /**
    * Return the media entity render array.
    *
-   * @param \Drupal\media\Entity\Media|string $media_entity
+   * @param Media|string $media_entity
    *   Media entity ID or loaded media entity instance.
    * @param string $view_mode
    *   (optional) View mode of media entity, 'full' is default.
diff --git a/src/MediaSelectionProcessor/DefaultMediaSelectionProcessor.php b/src/MediaSelectionProcessor/DefaultMediaSelectionProcessor.php
index 869aa89..53ebfa2 100644
--- a/src/MediaSelectionProcessor/DefaultMediaSelectionProcessor.php
+++ b/src/MediaSelectionProcessor/DefaultMediaSelectionProcessor.php
@@ -14,14 +14,14 @@ class DefaultMediaSelectionProcessor implements MediaSelectionProcessorInterface
   /**
    * Entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * DefaultMediaSelectionProcessor constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/MediaSelectionProcessor/MediaSelectionProcessorInterface.php b/src/MediaSelectionProcessor/MediaSelectionProcessorInterface.php
index 39e8c47..f95fce2 100644
--- a/src/MediaSelectionProcessor/MediaSelectionProcessorInterface.php
+++ b/src/MediaSelectionProcessor/MediaSelectionProcessorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\MediaSelectionProcessor;
 
+use Drupal\media\MediaInterface;
 /**
  * Interface MediaSelectionProcessorInterface.
  *
@@ -15,7 +16,7 @@ interface MediaSelectionProcessorInterface {
    * @param array $data
    *   Array of data to process.
    *
-   * @return \Drupal\media\MediaInterface[]
+   * @return MediaInterface[]
    *   The list of media entities.
    */
   public function process(array $data);
diff --git a/src/MediaSelectionProcessor/MediaSelectionProcessorManagerInterface.php b/src/MediaSelectionProcessor/MediaSelectionProcessorManagerInterface.php
index c3b9211..ceeedae 100644
--- a/src/MediaSelectionProcessor/MediaSelectionProcessorManagerInterface.php
+++ b/src/MediaSelectionProcessor/MediaSelectionProcessorManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\MediaSelectionProcessor;
 
+use Drupal\media\MediaInterface;
 /**
  * Provides contract for media selection processor manager.
  *
@@ -12,7 +13,7 @@ interface MediaSelectionProcessorManagerInterface {
   /**
    * Register media selection processor.
    *
-   * @param \Drupal\gutenberg\MediaSelectionProcessor\MediaSelectionProcessorInterface $processor
+   * @param MediaSelectionProcessorInterface $processor
    *   Media selection processor instance.
    * @param \Drupal\gutenberg\MediaSelectionProcessor\string $processor_name
    *   Processor name.
@@ -40,7 +41,7 @@ interface MediaSelectionProcessorManagerInterface {
    * @param string $data
    *   Serialized data to process.
    *
-   * @return \Drupal\media\MediaInterface[]
+   * @return MediaInterface[]
    *   List of media entities.
    */
   public function processData(string $data);
diff --git a/src/MediaTypeGuesser.php b/src/MediaTypeGuesser.php
index 5cc9d73..dcc4d69 100644
--- a/src/MediaTypeGuesser.php
+++ b/src/MediaTypeGuesser.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg;
 
+use Drupal\media\Entity\MediaType;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 
 /**
@@ -27,23 +28,23 @@ class MediaTypeGuesser implements MediaTypeGuesserInterface {
   /**
    * Entity type manager instance.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The file extension guesser.
    *
-   * @var \Drupal\gutenberg\FileExtensionGuesserInterface
+   * @var FileExtensionGuesserInterface
    */
   protected $fileExtensionGuesser;
 
   /**
    * MediaTypeGuesser constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\gutenberg\FileExtensionGuesserInterface $file_extension_guesser
+   * @param FileExtensionGuesserInterface $file_extension_guesser
    *   The file extension guesser.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FileExtensionGuesserInterface $file_extension_guesser) {
@@ -59,7 +60,7 @@ class MediaTypeGuesser implements MediaTypeGuesserInterface {
     $media_type_entities = $this->entityTypeManager->getStorage('media_type')->loadMultiple();
     $media_types = [];
 
-    /** @var \Drupal\media\Entity\MediaType $media_type_entity */
+    /** @var MediaType $media_type_entity */
     foreach ($media_type_entities as $media_type_entity) {
       $field_config = $media_type_entity->getSource()->getSourceFieldDefinition($media_type_entity);
       $media_type_file_extensions = explode(' ', $field_config->getSetting('file_extensions'));
diff --git a/src/MediaUploader.php b/src/MediaUploader.php
index 42ea1d0..b9314e1 100644
--- a/src/MediaUploader.php
+++ b/src/MediaUploader.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg;
 
+use Drupal\file\Entity\File;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\Environment;
 use Drupal\Core\File\FileSystemInterface;
@@ -18,14 +19,14 @@ class MediaUploader implements MediaUploaderInterface {
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * MediaUploader constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(FileSystemInterface $file_system) {
@@ -77,7 +78,7 @@ class MediaUploader implements MediaUploaderInterface {
     // Upload a temporary file.
     $result = file_save_upload($form_field_name, $validators, $destination);
     if (is_array($result) && $result[0]) {
-      /** @var \Drupal\file\Entity\File $file */
+      /** @var File $file */
       $file = $result[0];
       return $file;
     }
diff --git a/src/MediaUploaderInterface.php b/src/MediaUploaderInterface.php
index 004b605..f718f2a 100644
--- a/src/MediaUploaderInterface.php
+++ b/src/MediaUploaderInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg;
 
+use Drupal\file\Entity\File;
 use Drupal\editor\Entity\Editor;
 use Symfony\Component\HttpFoundation\File\UploadedFile;
 
@@ -18,14 +19,14 @@ interface MediaUploaderInterface {
    * @param string $form_field_name
    *   A string that is the associative array key of the upload form element in
    *   the form array.
-   * @param \Symfony\Component\HttpFoundation\File\UploadedFile $uploaded_file
+   * @param UploadedFile $uploaded_file
    *   Uploaded file instance.
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   Editor entity.
    * @param array $file_settings
    *   A list of file configurations. e.g. 'file_extensions' etc.
    *
-   * @return \Drupal\file\Entity\File|null
+   * @return File|null
    *   File entity or null on failure.
    */
   public function upload(string $form_field_name, UploadedFile $uploaded_file, Editor $editor, array $file_settings = []);
diff --git a/src/OEmbedResolver.php b/src/OEmbedResolver.php
index 75c6e72..f728fb7 100644
--- a/src/OEmbedResolver.php
+++ b/src/OEmbedResolver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\gutenberg;
 
+use Drupal\media\OEmbed\UrlResolverInterface;
+use Drupal\media\OEmbed\ResourceFetcherInterface;
 use \Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -22,48 +24,48 @@ class OEmbedResolver implements OEmbedResolverInterface {
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The media module's oEmbed Url resolver.
    *
-   * @var \Drupal\media\OEmbed\UrlResolverInterface
+   * @var UrlResolverInterface
    */
   protected $mediaOembedResolver;
 
   /**
    * The media module's OEmbed resource fetcher service.
    *
-   * @var \Drupal\media\OEmbed\ResourceFetcherInterface
+   * @var ResourceFetcherInterface
    */
   protected $mediaOembedResourceFetcher;
 
   /**
    * OEmbedProcessor constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    *   The HTTP client.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(
diff --git a/src/OEmbedResolverInterface.php b/src/OEmbedResolverInterface.php
index bb707ce..cc65ec8 100644
--- a/src/OEmbedResolverInterface.php
+++ b/src/OEmbedResolverInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg;
 
+use Drupal\Component\Render\MarkupInterface;
 /**
  * Resolves oEmbed urls.
  */
@@ -28,7 +29,7 @@ interface OEmbedResolverInterface {
    * @param string $url
    *   The oEmbed resource.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|null
+   * @return MarkupInterface|null
    *   The oEmbed HTML.
    */
   public function fetchOembedHtml($url);
diff --git a/src/Persistence/MediaTypePersistenceManager.php b/src/Persistence/MediaTypePersistenceManager.php
index abbc210..493c92e 100644
--- a/src/Persistence/MediaTypePersistenceManager.php
+++ b/src/Persistence/MediaTypePersistenceManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\Persistence;
 
+use Drupal\media\MediaTypeInterface;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -17,23 +18,23 @@ class MediaTypePersistenceManager implements MediaTypePersistenceManagerInterfac
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * MediaTypePersistenceManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AccountInterface $account) {
@@ -76,7 +77,7 @@ class MediaTypePersistenceManager implements MediaTypePersistenceManagerInterfac
    * {@inheritDoc}
    */
   public function getFileSettings(string $media_type) {
-    /** @var \Drupal\media\MediaTypeInterface $media_type_entity */
+    /** @var MediaTypeInterface $media_type_entity */
     $media_type_entity = $this->entityTypeManager->getStorage('media_type')->load($media_type);
     $source = $media_type_entity->getSource();
     $source_field_definition = $source->getSourceFieldDefinition($media_type_entity);
diff --git a/src/Persistence/MediaTypePersistenceManagerInterface.php b/src/Persistence/MediaTypePersistenceManagerInterface.php
index ac41995..68cbfbd 100644
--- a/src/Persistence/MediaTypePersistenceManagerInterface.php
+++ b/src/Persistence/MediaTypePersistenceManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\Persistence;
 
+use Drupal\media\Entity\Media;
 use Drupal\file\Entity\File;
 
 /**
@@ -16,10 +17,10 @@ interface MediaTypePersistenceManagerInterface {
    *
    * @param string $media_type
    *   Media type machine name.
-   * @param \Drupal\file\Entity\File $file_entity
+   * @param File $file_entity
    *   File entity instance.
    *
-   * @return \Drupal\media\Entity\Media|null
+   * @return Media|null
    *   Created media type or null if failed.
    *
    * @throws \Exception
diff --git a/src/Plugin/Action/ReusableBlockDelete.php b/src/Plugin/Action/ReusableBlockDelete.php
index 5bcd4d4..73d350f 100644
--- a/src/Plugin/Action/ReusableBlockDelete.php
+++ b/src/Plugin/Action/ReusableBlockDelete.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\gutenberg\Plugin\Action;
 
+use Drupal\block_content\BlockContentInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Session\AccountInterface;
 
@@ -20,7 +21,7 @@ class ReusableBlockDelete extends ActionBase {
    * {@inheritdoc}
    */
   public function execute($entity = NULL) {
-    /** @var \Drupal\block_content\BlockContentInterface $entity */
+    /** @var BlockContentInterface $entity */
     $entity->delete();
   }
 
@@ -28,7 +29,7 @@ class ReusableBlockDelete extends ActionBase {
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\block_content\BlockContentInterface $object */
+    /** @var BlockContentInterface $object */
     return $object->access('delete', $account, $return_as_object);
   }
 
diff --git a/src/Plugin/Editor/Gutenberg.php b/src/Plugin/Editor/Gutenberg.php
index 3d4182e..c18e95d 100644
--- a/src/Plugin/Editor/Gutenberg.php
+++ b/src/Plugin/Editor/Gutenberg.php
@@ -33,28 +33,28 @@ class Gutenberg extends EditorBase implements ContainerFactoryPluginInterface {
   /**
    * The module handler to invoke hooks on.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The Gutenberg plugin manager.
    *
-   * @var \Drupal\gutenberg\GutenbergPluginManager
+   * @var GutenbergPluginManager
    */
   protected $gutenbergPluginManager;
 
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -67,13 +67,13 @@ class Gutenberg extends EditorBase implements ContainerFactoryPluginInterface {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\gutenberg\GutenbergPluginManager $gutenberg_plugin_manager
+   * @param GutenbergPluginManager $gutenberg_plugin_manager
    *   The Gutenberg plugin manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke hooks on.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GutenbergPluginManager $gutenberg_plugin_manager, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager, RendererInterface $renderer) {
@@ -112,7 +112,7 @@ class Gutenberg extends EditorBase implements ContainerFactoryPluginInterface {
    * {@inheritdoc}
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\editor\Entity\Editor $editor */
+    /** @var Editor $editor */
     $editor = $form_state->get('editor');
     // Gutenberg plugin settings, if any.
     $form['plugin_settings'] = [
@@ -144,7 +144,7 @@ class Gutenberg extends EditorBase implements ContainerFactoryPluginInterface {
   /**
    * Get javascript settings.
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    */
   public function getJsSettings(Editor $editor) {
@@ -193,7 +193,7 @@ class Gutenberg extends EditorBase implements ContainerFactoryPluginInterface {
   /**
    * Builds the "toolbar" configuration part of the CKEditor JS settings.
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
@@ -210,7 +210,7 @@ class Gutenberg extends EditorBase implements ContainerFactoryPluginInterface {
   /**
    * Builds the "contentsCss" configuration part of the CKEditor JS settings.
    *
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   A configured text editor object.
    *
    * @return array
diff --git a/src/Plugin/Filter/GutenbergFilter.php b/src/Plugin/Filter/GutenbergFilter.php
index 83e3a8a..16987b9 100644
--- a/src/Plugin/Filter/GutenbergFilter.php
+++ b/src/Plugin/Filter/GutenbergFilter.php
@@ -34,21 +34,21 @@ class GutenbergFilter extends FilterBase implements ContainerFactoryPluginInterf
   /**
    * The Gutenberg block processor manager.
    *
-   * @var \Drupal\gutenberg\BlockProcessor\GutenbergBlockProcessorManager
+   * @var GutenbergBlockProcessorManager
    */
   protected $blockProcessorManager;
 
   /**
    * The Gutenberg library manager.
    *
-   * @var \Drupal\gutenberg\GutenbergLibraryManagerInterface
+   * @var GutenbergLibraryManagerInterface
    */
   protected $libraryManager;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -61,11 +61,11 @@ class GutenbergFilter extends FilterBase implements ContainerFactoryPluginInterf
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\gutenberg\BlockProcessor\GutenbergBlockProcessorManager $block_processor_manager
+   * @param GutenbergBlockProcessorManager $block_processor_manager
    *   The block processor manager instance.
-   * @param \Drupal\gutenberg\GutenbergLibraryManagerInterface $library_manager
+   * @param GutenbergLibraryManagerInterface $library_manager
    *   The library manager instance.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(
@@ -173,7 +173,7 @@ class GutenbergFilter extends FilterBase implements ContainerFactoryPluginInterf
    *
    * @param array $block
    *   The Gutenberg block.
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $bubbleable_metadata
+   * @param RefinableCacheableDependencyInterface $bubbleable_metadata
    *   The bubbleable metadata.
    *
    * @return string
@@ -209,7 +209,7 @@ class GutenbergFilter extends FilterBase implements ContainerFactoryPluginInterf
   /**
    * Attach Gutenberg frontend libraries to the result.
    *
-   * @param \Drupal\filter\FilterProcessResult $result
+   * @param FilterProcessResult $result
    *   The resulting markup.
    */
   protected function addAttachments(FilterProcessResult $result) {
diff --git a/src/Service/MediaService.php b/src/Service/MediaService.php
index 49a2f11..0a44a16 100644
--- a/src/Service/MediaService.php
+++ b/src/Service/MediaService.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\gutenberg\Service;
 
+use Drupal\media_library\MediaLibraryUiBuilder;
+use Drupal\media\Entity\Media;
+use Drupal\file\Entity\File;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -28,111 +33,111 @@ class MediaService {
   /**
    * The media type guesser.
    *
-   * @var \Drupal\gutenberg\MediaTypeGuesserInterface
+   * @var MediaTypeGuesserInterface
    */
   protected $mediaTypeGuesser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The media type persistence manager.
    *
-   * @var \Drupal\gutenberg\Persistence\MediaTypePersistenceManager
+   * @var MediaTypePersistenceManager
    */
   protected $mediaTypePersisterManager;
 
   /**
    * The entity data provider manager.
    *
-   * @var \Drupal\gutenberg\DataProvider\EntityDataProviderManager
+   * @var EntityDataProviderManager
    */
   protected $entityDataProviderManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The media uploader.
    *
-   * @var \Drupal\gutenberg\MediaUploaderInterface
+   * @var MediaUploaderInterface
    */
   protected $mediaUploader;
 
   /**
    * Drupal\Core\Render\RendererInterface instance.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The media entity renderer.
    *
-   * @var \Drupal\gutenberg\MediaEntityRendererInterface
+   * @var MediaEntityRendererInterface
    */
   protected $mediaEntityRenderer;
 
   /**
    * The media library UI builder.
    *
-   * @var \Drupal\media_library\MediaLibraryUiBuilder|null
+   * @var MediaLibraryUiBuilder|null
    */
   protected $builder;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * MediaController constructor.
    *
-   * @param \Drupal\gutenberg\MediaTypeGuesserInterface $media_type_guesser
+   * @param MediaTypeGuesserInterface $media_type_guesser
    *   The media type guesser.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\gutenberg\Persistence\MediaTypePersistenceManager $media_type_persistence_manager
+   * @param MediaTypePersistenceManager $media_type_persistence_manager
    *   The media type persistence manager.
-   * @param \Drupal\gutenberg\DataProvider\EntityDataProviderManager $entity_data_provider_manager
+   * @param EntityDataProviderManager $entity_data_provider_manager
    *   The entity data provider manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\gutenberg\MediaUploaderInterface $media_uploader
+   * @param MediaUploaderInterface $media_uploader
    *   The media uploader.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\gutenberg\MediaEntityRendererInterface $media_entity_renderer
+   * @param MediaEntityRendererInterface $media_entity_renderer
    *   The media entity renderer.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(
@@ -176,7 +181,7 @@ class MediaService {
    * @return string
    *   The rendered element.
    *
-   * @throws \Drupal\gutenberg\Service\MediaTypeNotFoundException
+   * @throws MediaTypeNotFoundException
    */
   public function renderDialog(array $media_types, array $media_bundles = NULL) {
     $media_types = array_filter($media_types)
@@ -207,7 +212,7 @@ class MediaService {
   /**
    * Render media entities.
    *
-   * @param \Drupal\media\MediaInterface $media_entity
+   * @param MediaInterface $media_entity
    *   Media entity instance.
    *
    * @return array
@@ -217,7 +222,7 @@ class MediaService {
     $rendered_view_modes = [];
 
     try {
-      /** @var \Drupal\media\Entity\Media $media_entity */
+      /** @var Media $media_entity */
       $view_modes = $this->entityDisplayRepository->getViewModeOptionsByBundle('media', $media_entity->bundle());
 
       foreach ($view_modes as $view_mode => $view_mode_name) {
@@ -240,17 +245,17 @@ class MediaService {
    *
    * @param string $form_field_name
    *   The file field name.
-   * @param \Symfony\Component\HttpFoundation\File\UploadedFile $uploaded_file
+   * @param UploadedFile $uploaded_file
    *   Uploaded file instance.
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   Editor entity instance.
    *
    * @return mixed
    *   The media entity data.
    *
-   * @throws \Drupal\gutenberg\Service\FileEntityNotSavedException
-   * @throws \Drupal\gutenberg\Service\MediaEntityNotSavedException
-   * @throws \Drupal\gutenberg\Service\MediaEntityNotMatchedException
+   * @throws FileEntityNotSavedException
+   * @throws MediaEntityNotSavedException
+   * @throws MediaEntityNotMatchedException
    */
   public function processMediaEntityUpload(string $form_field_name, UploadedFile $uploaded_file, Editor $editor) {
     $media_installed = $this->moduleHandler->moduleExists('media');
@@ -271,7 +276,7 @@ class MediaService {
       $file_settings = $this->mediaTypePersisterManager->getFileSettings($media_type);
     }
 
-    /** @var \Drupal\file\Entity\File $file_entity */
+    /** @var File $file_entity */
     if (!$file_entity = $this->mediaUploader->upload($form_field_name, $uploaded_file, $editor, $file_settings)) {
       throw new FileEntityNotSavedException();
     }
@@ -293,7 +298,7 @@ class MediaService {
   /**
    * Load file entity data.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File entity instance.
    *
    * @return mixed
@@ -308,14 +313,14 @@ class MediaService {
   /**
    * Load media entity data.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   Media entity instance.
    *
    * @return mixed
    *   The file entity data for the specified media.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadMediaData(MediaInterface $media) {
     $data = [];
@@ -354,7 +359,7 @@ class MediaService {
   /**
    * Search for file entities.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
    * @param string $type
    *   Mime type of searched files.
@@ -364,8 +369,8 @@ class MediaService {
    * @return array
    *   The found file entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function search(Request $request, string $type = '', string $search = '') {
     $query = $this->entityTypeManager->getStorage('file')->getQuery();
