modules/contrib/event_scheduler_publish/event_scheduler_publish.module
modules/contrib/event_scheduler_publish/src/Event/EntityPublishEvent.php
modules/contrib/event_scheduler_publish/src/Event/EntityPublishEventBase.php
modules/contrib/event_scheduler_publish/src/Event/EntityPublishEventInterface.php
modules/contrib/event_scheduler_publish/src/Event/EntityPublishedEvent.php
modules/contrib/event_scheduler_publish/src/Event/EntityScheduledPublishEvent.php
modules/contrib/event_scheduler_publish/src/Event/EntityScheduledUnpublishEvent.php
modules/contrib/event_scheduler_publish/src/Event/EntityUnpublishEvent.php
modules/contrib/event_scheduler_publish/src/Event/EntityUnpublishedEvent.php
modules/contrib/event_scheduler_publish/src/EventSubscriber/EntityPublishSubscriber.php
modules/contrib/event_scheduler_publish/src/SchedulerPublishUtils.php
modules/contrib/event_scheduler_publish/src/SchedulerPublishUtilsInterface.php

3 files with changes
====================

1) modules/contrib/event_scheduler_publish/src/SchedulerPublishUtilsInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Insert the publish/unpublish events for this entity (as appropriate).
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *
    * @return void
    */
@@ @@
   /**
    * Update the publish/unpublish events for this entity (as appropriate).
    *
-   * @param \Drupal\Core\Entity\ContentEntityBase $entity
+   * @param ContentEntityBase $entity
    *
    * @return void
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/event_scheduler_publish/src/SchedulerPublishUtils.php:18

    ---------- begin diff ----------
@@ @@
 class SchedulerPublishUtils implements SchedulerPublishUtilsInterface {

   /**
-   * @var \Drupal\event_scheduler\EventSchedulerDispatcher
+   * @var EventSchedulerDispatcher
    */
   protected $dispatcher;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

   /**
-   * @var \Drupal\event_scheduler\EventSchedulerDatabaseInterface
+   * @var EventSchedulerDatabaseInterface
    */
   protected $database;

@@ @@
   /**
    * Constructs a new SchedulerPublishUtils object.
    *
-   * @param \Drupal\event_scheduler\EventSchedulerDispatcher $dispatcher
-   * @param \Drupal\event_scheduler\EventSchedulerDatabaseInterface $database
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param EventSchedulerDispatcher $dispatcher
+   * @param EventSchedulerDatabaseInterface $database
+   * @param LoggerChannelInterface $logger
    */
   public function __construct(
     EventSchedulerDispatcher        $dispatcher,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/event_scheduler_publish/src/EventSubscriber/EntityPublishSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\event_scheduler_publish\EventSubscriber;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\event_scheduler\EventSchedulerDispatcher;
@@ @@
   /**
    * Constructs a new EntityPublishSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    * @param EventSchedulerDispatcher $dispatcher
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EventSchedulerDispatcher $dispatcher) {
@@ @@
    * @param EntityPublishEventInterface $event
    *   The dispatched event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function onEntityPublish(EntityPublishEventInterface $event) {
     $storage = $this->entityTypeManager->getStorage($event->getEntityType());
@@ @@
    * @param EntityPublishEventInterface $event
    *   The dispatched event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function onEntityUnpublish(EntityPublishEventInterface $event) {
     $storage = $this->entityTypeManager->getStorage($event->getEntityType());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 3 files have been changed by Rector                                       

