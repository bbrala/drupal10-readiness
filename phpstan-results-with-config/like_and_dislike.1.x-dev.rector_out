modules/contrib/like_and_dislike/like_and_dislike.module
modules/contrib/like_and_dislike/like_and_dislike.views.inc
modules/contrib/like_and_dislike/src/Controller/VoteController.php
modules/contrib/like_and_dislike/src/Form/SettingsForm.php
modules/contrib/like_and_dislike/src/LikeDislikePermissions.php
modules/contrib/like_and_dislike/src/LikeDislikeVoteBuilder.php
modules/contrib/like_and_dislike/src/LikeDislikeVoteBuilderInterface.php
modules/contrib/like_and_dislike/src/Plugin/views/field/LikeAndDislike.php
modules/contrib/like_and_dislike/tests/src/FunctionalJavascript/LikeAndDislikeTest.php

7 files with changes
====================

1) modules/contrib/like_and_dislike/tests/src/FunctionalJavascript/LikeAndDislikeTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\like_and_dislike\FunctionalJavascript;

+use Drupal\user\Entity\User;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * A test user with administration permissions.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a node type.
@@ @@
     $edit = [
       'display_modes_custom[teaser]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->pageTextContains('Your settings have been saved.');

     // Enable like an dislike for our article node type, disable for our
@@ @@
       'allow_cancel_vote' => TRUE,
       'hide_vote_widget' => FALSE,
     ];
-    $this->drupalPostForm('admin/config/search/votingapi/like_and_dislike', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/votingapi/like_and_dislike');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
-    $this->assertFieldChecked('edit-enabled-types-node-enabled');
-    $this->assertFieldChecked('edit-enabled-types-comment-enabled');
-    $this->assertFieldChecked('edit-enabled-types-node-bundle-info-bundles-article');
-    $this->assertNoFieldChecked('edit-enabled-types-comment-bundle-info-bundles-comment');
-    $this->assertFieldChecked('edit-enabled-types-comment-bundle-info-bundles-test-comment-type');
-    $this->assertFieldChecked('edit-allow-cancel-vote');
-    $this->assertNoFieldChecked('edit-hide-vote-widget');
+    $this->assertSession()->checkboxChecked('edit-enabled-types-node-enabled');
+    $this->assertSession()->checkboxChecked('edit-enabled-types-comment-enabled');
+    $this->assertSession()->checkboxChecked('edit-enabled-types-node-bundle-info-bundles-article');
+    $this->assertSession()->checkboxNotChecked('edit-enabled-types-comment-bundle-info-bundles-comment');
+    $this->assertSession()->checkboxChecked('edit-enabled-types-comment-bundle-info-bundles-test-comment-type');
+    $this->assertSession()->checkboxChecked('edit-allow-cancel-vote');
+    $this->assertSession()->checkboxNotChecked('edit-hide-vote-widget');

     // Verify there are new like and dislike permissions.
     $this->drupalGet('admin/people/permissions');
@@ @@
       $user_role . '[add or remove like votes on test_comment_type of comment]' => TRUE,
       $user_role . '[add or remove dislike votes on test_comment_type of comment]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save permissions');
+    $this->submitForm($edit, 'Save permissions');

     // Verify that like and dislike field is showing up as a field for default
     // view mode and that it is disabled by default.
     $this->drupalGet('admin/structure/types/manage/article/display');
     $this->assertSession()->pageTextContains('Like and dislike');
-    $this->assertOptionSelected('edit-fields-like-and-dislike-region', 'hidden');
+    $this->assertTrue($this->assertSession()->optionExists('edit-fields-like-and-dislike-region', 'hidden')->hasAttribute('selected'));
     // Same for teaser view mode.
     $this->drupalGet('admin/structure/types/manage/article/display/teaser');
     $this->assertSession()->pageTextContains('Like and dislike');
-    $this->assertOptionSelected('edit-fields-like-and-dislike-region', 'hidden');
+    $this->assertTrue($this->assertSession()->optionExists('edit-fields-like-and-dislike-region', 'hidden')->hasAttribute('selected'));

     // Toggle on visibility of the extra field for default view mode.
     $this->drupalGet('admin/structure/types/manage/article/display');
@@ @@
     $this->assertTrue($this->assertSession()->optionExists('fields[like_and_dislike][region]', 'hidden')->isSelected());
     $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains('Your settings have been saved.');
-    $this->assertOptionSelected('edit-fields-like-and-dislike-region', 'hidden');
-    $this->drupalPostForm('admin/structure/types/manage/article/display/teaser', ['fields[like_and_dislike][region]' => 'content'], 'Save');
+    $this->assertTrue($this->assertSession()->optionExists('edit-fields-like-and-dislike-region', 'hidden')->hasAttribute('selected'));
+    $this->drupalGet('admin/structure/types/manage/article/display/teaser');
+    $this->submitForm(['fields[like_and_dislike][region]' => 'content'], 'Save');
     $this->assertSession()->pageTextContains('Your settings have been saved.');
     $this->assertFalse($this->assertSession()->optionExists('edit-fields-like-and-dislike-region', 'hidden')->isSelected());

@@ @@
       'enabled_types[comment][bundle_info][bundles][test_comment_type]' => TRUE,
       'allow_cancel_vote' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/search/votingapi/like_and_dislike', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/votingapi/like_and_dislike');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains('The configuration options have been saved.');

     // Verify that like and dislike are no longer showing up for nodes.
@@ @@
       'enabled_types[node][bundle_info][bundles][article]' => TRUE,
       'allow_cancel_vote' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/search/votingapi/like_and_dislike', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/votingapi/like_and_dislike');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->drupalGet('admin/structure/types/manage/article/display');
     $this->getSession()->getPage()->selectFieldOption('fields[like_and_dislike][region]', 'content');
@@ @@
     $edit = [
       'hide_vote_widget' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/search/votingapi/like_and_dislike', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/votingapi/like_and_dislike');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
-    $this->assertFieldChecked('edit-hide-vote-widget');
+    $this->assertSession()->checkboxChecked('edit-hide-vote-widget');

     // Turn off dislike permission for node and comment.
     $this->drupalGet('admin/people/permissions');
@@ @@
       $user_role . '[add or remove dislike votes on article of node]' => FALSE,
       $user_role . '[add or remove dislike votes on test_comment_type of comment]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save permissions');
+    $this->submitForm($edit, 'Save permissions');

     // Verify that dislike icon is not showed in default view mode.
     $this->drupalGet('node/' . $node_id);
@@ @@
       $user_role . '[add or remove like votes on article of node]' => FALSE,
       $user_role . '[add or remove like votes on test_comment_type of comment]' => FALSE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save permissions');
+    $this->submitForm($edit, 'Save permissions');

     // Verify that both like and dislike icons are not showed in default view
     // mode.
@@ @@
       'enabled_types[user][enabled]' => TRUE,
       'allow_cancel_vote' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/search/votingapi/like_and_dislike', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/votingapi/like_and_dislike');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
-    $this->assertFieldChecked('edit-enabled-types-user-enabled');
+    $this->assertSession()->checkboxChecked('edit-enabled-types-user-enabled');

     // Make "like and dislike" component visible.
     $this->drupalGet('admin/config/people/accounts/display');
@@ @@
     $edit = [
       $user_role . '[add or remove like votes on user]' => TRUE,
     ];
-    $this->drupalPostForm('admin/people/permissions', $edit, 'Save permissions');
+    $this->drupalGet('admin/people/permissions');
+    $this->submitForm($edit, 'Save permissions');
     $this->drupalGet('user/' . $user_id);

     // Assert user is able to like, but not to dislike.
@@ @@
       'enabled_types[comment][bundle_info][bundles][test_comment_type]' => TRUE,
       'allow_cancel_vote' => TRUE,
     ];
-    $this->drupalPostForm('admin/config/search/votingapi/like_and_dislike', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/votingapi/like_and_dislike');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains('The configuration options have been saved.');

     // Update user with voting permissions.
@@ @@
       $user_role . '[add or remove like votes on test_comment_type of comment]' => TRUE,
       $user_role . '[add or remove dislike votes on test_comment_type of comment]' => TRUE,
     ];
-    $this->drupalPostForm('admin/people/permissions', $edit, 'Save permissions');
+    $this->drupalGet('admin/people/permissions');
+    $this->submitForm($edit, 'Save permissions');

     // Toggle on visibility of the extra fields.
     $this->drupalGet('admin/structure/types/manage/article/display');
@@ @@
       'enabled_types[comment][bundle_info][bundles][test_comment_type]' => TRUE,
       'allow_cancel_vote' => FALSE,
     ];
-    $this->drupalPostForm('admin/config/search/votingapi/like_and_dislike', $edit, t('Save configuration'));
+    $this->drupalGet('admin/config/search/votingapi/like_and_dislike');
+    $this->submitForm($edit, t('Save configuration'));
     $this->assertSession()->pageTextContains('The configuration options have been saved.');
     $this->drupalLogin($user2);
    ----------- end diff -----------

Applied rules:
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * AssertOptionSelectedRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/like_and_dislike/src/Plugin/views/field/LikeAndDislike.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * LikeDislikeVoteBuilder definition.
    *
-   * @var \Drupal\like_and_dislike\LikeDislikeVoteBuilderInterface
+   * @var LikeDislikeVoteBuilderInterface
    */
   protected $likeDislikeBuilder;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\like_and_dislike\LikeDislikeVoteBuilderInterface $likeDislikeBuilder
+   * @param LikeDislikeVoteBuilderInterface $likeDislikeBuilder
    *   Like and Dislike builder.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/like_and_dislike/src/LikeDislikeVoteBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\like_and_dislike;

+use Drupal\votingapi\VoteStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Template\Attribute;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The voting storage.
    *
-   * @var \Drupal\votingapi\VoteStorageInterface
+   * @var VoteStorageInterface
    */
   protected $voteStorage;

@@ @@
   /**
    * The account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new LikeDislikeVoteBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AccountInterface $current_user, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/like_and_dislike/src/LikeDislikePermissions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\like_and_dislike;

+use Drupal\Core\Config\Config;
+use Drupal\votingapi\VoteTypeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $configFactory;

@@ @@
   /**
    * The bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfoService;

@@ @@
   /**
    * Constructs a \Drupal\like_and_dislike\Form\SettingsForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info_service
+   * @param EntityTypeBundleInfoInterface $bundle_info_service
    *   The bundle info service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, EntityTypeBundleInfoInterface $bundle_info_service) {
@@ @@
    *
    * @param array &$permissions
    *   An array of created permissions.
-   * @param \Drupal\votingapi\VoteTypeInterface[] $vote_types
+   * @param VoteTypeInterface[] $vote_types
    *   An array of voting types.
    * @param string $entity_type_id
    *   The entity type ID.
@@ @@

     // The entity type has no bundles other than the default one.
     if (empty($bundles)) {
-      /** @var \Drupal\votingapi\VoteTypeInterface $vote_type */
+      /** @var VoteTypeInterface $vote_type */
       foreach ($vote_types as $vote_type) {
         $permissions["add or remove {$vote_type->id()} votes on $entity_type_id"] = [
           'title' => $this->t('%entity_type_name: add/remove %vote_type_name', [
@@ @@
     else {
       foreach ($bundles as $bundle) {
         $bundle_info = $this->bundleInfoService->getBundleInfo($entity_type_id)[$bundle];
-        /** @var \Drupal\votingapi\VoteTypeInterface $vote_type */
+        /** @var VoteTypeInterface $vote_type */
         foreach ($vote_types as $vote_type) {
           $permissions["add or remove {$vote_type->id()} votes on $bundle of $entity_type_id"] = [
             'title' => $this->t('%entity_type (%bundle): add/remove %vote_type', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/like_and_dislike/src/Form/SettingsForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfoService;

@@ @@
   /**
    * Constructs a \Drupal\like_and_dislike\Form\SettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager .
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info_service
+   * @param EntityTypeBundleInfoInterface $bundle_info_service
    *   The bundle info service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, EntityTypeBundleInfoInterface $bundle_info_service) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
   /**
    * Returns the bundle type label for a given entity type.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/like_and_dislike/src/Controller/VoteController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\like_and_dislike\Controller;

+use Drupal\votingapi\VoteStorageInterface;
+use Drupal\votingapi\VoteTypeInterface;
+use Drupal\votingapi\VoteInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Drupal\Core\Access\AccessResult;
@@ @@
    * @param string $entity_id
    *   The entity ID to vote for.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Returns JSON response.
    */
   public function vote($entity_type_id, $vote_type_id, $entity_id) {
@@ @@
     list($like, $dislike) = like_and_dislike_get_votes($entity);
     $operation = ['like' => FALSE, 'dislike' => FALSE];

-    /** @var \Drupal\votingapi\VoteStorageInterface $vote_storage */
+    /** @var VoteStorageInterface $vote_storage */
     $vote_storage = $this->entityTypeManager()->getStorage('vote');
     $user_votes = $vote_storage->getUserVotes(
       $this->currentUser()->id(), $vote_type_id, $entity_type_id, $entity_id
@@ @@
         $this->currentUser()->id(), $opposite_vote_type_id, $entity_type_id, $entity_id
       );

-      /** @var \Drupal\votingapi\VoteTypeInterface $vote_type */
+      /** @var VoteTypeInterface $vote_type */
       $vote_type = $this->entityTypeManager()->getStorage('vote_type')->load($vote_type_id);
-      /** @var \Drupal\votingapi\VoteInterface $vote */
+      /** @var VoteInterface $vote */
       $vote = $vote_storage->create(['type' => $vote_type_id]);
       $vote->setVotedEntityId($entity_id);
       $vote->setVotedEntityType($entity_type_id);
@@ @@
    * @param string $entity_id
    *   The entity ID.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function voteAccess($entity_type_id, $vote_type_id, $entity_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/like_and_dislike/like_and_dislike.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\votingapi\VoteResultStorageInterface;
 /**
  * @file
  * This module provides 2 voting widgets: Like and Dislike.
@@ @@
 /**
  * Returns a flag whether given entity is enabled for likes and dislikes.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity to check.
  *
  * @return bool
@@ @@
 /**
  * Gets the likes and dislikes for the given entity.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity to get votes for.
  *
  * @return array
@@ @@
  *   An array containing number of likes and dislikes.
  */
 function like_and_dislike_get_votes(EntityInterface $entity) {
-  /** @var \Drupal\votingapi\VoteResultStorageInterface $vote_result_storage */
+  /** @var VoteResultStorageInterface $vote_result_storage */
   $vote_result_storage = \Drupal::entityTypeManager()->getStorage('vote_result');

   // Get like votes.
@@ @@
 /**
  * A helper method to check if passed user has enough permission to vote.
  *
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The account.
  * @param string $vote_type_id
  *   The vote type ID.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  *
  * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 7 files have been changed by Rector                                       

