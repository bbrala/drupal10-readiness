diff --git a/entity_access_by_role_field.module b/entity_access_by_role_field.module
index acde42f..17975be 100644
--- a/entity_access_by_role_field.module
+++ b/entity_access_by_role_field.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultForbidden;
+use Drupal\Core\Access\AccessResultNeutral;
 /**
  * @file
  * Entity access by role field module file.
@@ -29,14 +32,14 @@ function entity_access_by_role_field_entity_access(EntityInterface $entity, $ope
  * Checks 'entity_access_by_role_field' field of an entity
  * and compares with user roles.
  *
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   The entity to check.
  * @param string $operation
  *   The operation that is to be performed on $entity.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The account to check.
  *
- * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden|\Drupal\Core\Access\AccessResultNeutral
+ * @return AccessResultAllowed|AccessResultForbidden|AccessResultNeutral
  *   The access result.
  */
 function _entity_access_by_role_field_role_has_access(FieldableEntityInterface $entity, $operation, AccountInterface $account) {
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index 2027903..0f41dfb 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -16,7 +16,7 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Alters existing routes for a specific collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function alterRoutes(RouteCollection $collection) {
diff --git a/tests/src/Functional/EntityAccessTestBase.php b/tests/src/Functional/EntityAccessTestBase.php
index ef6604d..8b577b5 100644
--- a/tests/src/Functional/EntityAccessTestBase.php
+++ b/tests/src/Functional/EntityAccessTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_access_by_role_field\Functional;
 
+use Drupal\user\Entity\User;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\Core\Session\AccountInterface;
@@ -34,35 +35,35 @@ abstract class EntityAccessTestBase extends BrowserTestBase {
   /**
    * An admin user with all permissions.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
   /**
    * A user with the permission to skip field check.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $globalPermissionUser;
 
   /**
    * An authenticated user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $authenticatedUser;
 
   /**
    * A simple authenticated user with a test_role.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $testRoleUser;
 
   /**
    * Creates an Access field on an entity bundle type.
    *
-   * @param Drupal\Core\Config\Entity\ConfigEntityInterface $entityTypeBundle
+   * @param ConfigEntityInterface $entityTypeBundle
    *   The entityTypeBundle to add the field on.
    * @param string $fieldName
    *   The field name of the field.
@@ -112,7 +113,7 @@ abstract class EntityAccessTestBase extends BrowserTestBase {
   /**
    * Adds an entity access by role field to a bundle instance.
    *
-   * @param Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity bundle instance to add the field on.
    * @param string $fieldName
    *   The field name.
@@ -136,11 +137,11 @@ abstract class EntityAccessTestBase extends BrowserTestBase {
   /**
    * Asserts that access is allowed to access the entity for the operation.
    *
-   * @param Drupal\Core\Access\AccessibleInterface $entity
+   * @param AccessibleInterface $entity
    *   The Entity to test the access on.
    * @param string|null $operation
    *   The allowed operation on the entity.
-   * @param Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user to check the access on, NULL is current user.
    */
   protected static function assertAccessAllowed(AccessibleInterface $entity, ?string $operation = 'view', AccountInterface $account = NULL) {
@@ -150,11 +151,11 @@ abstract class EntityAccessTestBase extends BrowserTestBase {
   /**
    * Asserts that access is forbidden to access the entity for the operation.
    *
-   * @param Drupal\Core\Access\AccessibleInterface $entity
+   * @param AccessibleInterface $entity
    *   The Entity to test the access on.
    * @param string|null $operation
    *   The allowed operation on the entity.
-   * @param Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user to check the access on, NULL is current user.
    */
   protected static function assertAccessForbidden(AccessibleInterface $entity, ?string $operation = 'view', AccountInterface $account = NULL) {
diff --git a/tests/src/Functional/NodeEntityAccessTests.php b/tests/src/Functional/NodeEntityAccessTests.php
index 9d01684..f036762 100644
--- a/tests/src/Functional/NodeEntityAccessTests.php
+++ b/tests/src/Functional/NodeEntityAccessTests.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entity_access_by_role_field\Functional;
 
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\entity_access_by_role_field\Helper\Constants;
 
@@ -401,7 +402,7 @@ class NodeEntityAccessTests extends EntityAccessTestBase {
     $entityNodeArticleBundle = $this->drupalCreateContentType(['type' => 'article']);
     $this->createAccessFieldTypeOnEntityBundle($entityNodeArticleBundle, $this->fieldName, [Constants::OPERATION_VIEW], Constants::FALLBACK_NEUTRAL, FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);
     \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+    /** @var EntityDisplayRepositoryInterface $display_repository */
     $display_repository = \Drupal::service('entity_display.repository');
     $display_repository->getFormDisplay('node', 'article')
       ->setComponent($this->fieldName, [
