modules/contrib/lionbridge_translation_provider/src/Plugin/tmgmt/Translator/LionbridgeTranslator.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Annotation/FormatPlugin.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/ContentApiTranslatorUI.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Format/FormatInterface.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Format/FormatManager.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Plugin/tmgmt/Translator/ContentApiTranslator.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Plugin/tmgmt_contentapi/Format/Xliff.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Plugin/views/field/JobLioxidField.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Plugin/views/field/JobProvideridField.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Plugin/views/field/JobStatusField.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Plugin/views/filter/LioxJobIdFilter.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Plugin/views/filter/LioxJobstatusFilter.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/RecursiveDOMIterator.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/FileApi.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/JobApi.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/ProviderApi.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/RequestApi.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/SourceFileApi.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/StatusUpdateApi.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/SupportAssetApi.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/TokenApi.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/TranslationContentApi.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/TranslationMemoryApi.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/ApiException.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Configuration.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/HeaderSelector.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/ArrayOfRequestIds.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/ArrayOfRequestIdsNote.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/Capabilities.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/CreateJob.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/CreateListener.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/CreateRequestFile.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/CreateRequestFileCtt.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/CreateRequestKeyValue.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/CreateRequestUpdateTM.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/CreateSupportAsset.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/CreateToken.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/Error.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/Job.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/JobCtt.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/JobStats.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/KeyValuePair.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/LanguagePairs.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/Listener.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/ListenerAuthEnum.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/ListenerRequest.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/ListenerTypeEnum.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/ModelInterface.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/Provider.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/ProviderId.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/Request.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/RequestCtt.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/SourceFile.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/SourceFileCtt.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/StatusCode.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/StatusCodeEnum.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/StatusUpdate.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/StatusUpdateCtt.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/SupportAsset.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/Token.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/TranslationContent.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/UpdateJob.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/UpdateRequestsFile.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/UpdateRequestsKeyValue.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/ObjectSerializer.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Util/ConentApiHelper.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Util/GeneralHelper.php
modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/tmgmt_contentapi.module

30 files with changes
=====================

1) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/tmgmt_contentapi.module:0

    ---------- begin diff ----------
@@ @@
-<?php /** @noinspection PhpUnusedParameterInspection */
+<?php use Drupal\Core\Render\Markup;
+use Drupal\tmgmt_contentapi\Swagger\Client\ApiException;
+use Drupal\views\ViewExecutable;
+use Drupal\Core\Link;
+use Drupal\Core\Url;
+use Drupal\tmgmt\TranslatorPluginInterface;
+use Drupal\Core\Entity\EntityInterface;
+/** @noinspection PhpUnusedParameterInspection */

 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Component\Utility\Xss;
@@ @@
           $labelname = $joblabel;
           $name = $labelname . "_" . $job->id() . "_all_"  . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
           $jobpath = $allfilespath . "/" . $name;
-          $file = file_save_data($exporter->export($job), $jobpath, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+          $file = \Drupal::service('file.repository')->writeData($exporter->export($job), $jobpath, FileSystemInterface::EXISTS_REPLACE);
           $filearraytodelte[] = $file;
           $filearrayexportedfiles['all'] = $file;
         }
@@ @@
             $labelname = GeneralHelper::getStringNoSpeChars($item->label());
             $name = $labelname . "_" . $job->id() . "_" . $item->id() . "_" . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
             $itempath = $allfilespath . "/" . $name;
-            $file = file_save_data($exporter->exportItem($item), $itempath, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+            $file = \Drupal::service('file.repository')->writeData($exporter->exportItem($item), $itempath, FileSystemInterface::EXISTS_REPLACE);
             $filearraytodelte[] = $file;
             $filearrayexportedfiles[$item->id()] = $file;
           }
@@ @@
         foreach ($filearraytodelte as $tempfile) {
           \Drupal::service('file_system')->delete($tempfile->getFileUri());
         }
-        $messageTopass .= '<a href="' . file_create_url($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
-        \Drupal::messenger()->addMessage(\Drupal\Core\Render\Markup::create($messageTopass));
+        $messageTopass .= '<a href="' . \Drupal::service('file_url_generator')->generateAbsoluteString($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
+        \Drupal::messenger()->addMessage(Markup::create($messageTopass));
       }
       else {
         throw new \Exception("Could not create directory for export: " . $allfilespath);
@@ @@
     $dirname = dirname($path);
     //\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY);
     if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY)) {
-      $file = file_save_data($filedatastring, $path, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
+      $file = \Drupal::service('file.repository')->writeData($filedatastring, $path, FileSystemInterface::EXISTS_REPLACE);
       $mimetype = $file->getMimeType();//\Drupal::service('file.mime_type.guesser')->guess($path);
       $filearray = null;
       if ($mimetype == 'application/zip') {
@@ @@
           if ($ziparchive->extractTo(\Drupal::service('file_system')->realpath($pathtoextract))) {
             $ziparchive->close();
             $file->delete();
-            $filearray = CpcreateFileObjectFromStdClass(file_scan_directory($pathtoextract, '/.*\.xlf$/'));
+            $filearray = CpcreateFileObjectFromStdClass(\Drupal::service('file_system')->scanDirectory($pathtoextract, '/.*\.xlf$/'));
           }

         }
@@ @@
       $capijobid = isset($requestobjs[0]) && count($requestobjs) > 0 ? $requestobjs[0]->getJobId() : NULL;
     }
     
-    if($capijobid != NULL && $job->getState() > \Drupal\tmgmt\Entity\Job::STATE_UNPROCESSED) {
+    if($capijobid != NULL && $job->getState() > Job::STATE_UNPROCESSED) {
      $jobapi = new JobApi();  
      $capiVersion = 1;
      $projectInfo = $jobapi->jobsJobIdGetCtt($cttToken, $capijobid, "fullWithStats");
      $provider = $projectInfo->getProviderId();
      $jobstatus = 'IMPORTED';//$projectInfo->getStatusCode()->getStatusCode();
-     \Drupal\tmgmt_contentapi\Util\ConentApiHelper::capiJobSetStoredData($job, ['jobId' => $capijobid ,'jobStatus' => $jobstatus, 'providerId' => $provider, 'jobType' => $capiVersion]);
+     ConentApiHelper::capiJobSetStoredData($job, ['jobId' => $capijobid ,'jobStatus' => $jobstatus, 'providerId' => $provider, 'jobType' => $capiVersion]);
     }
   }
 }
@@ @@
   }
   catch (Exception $exception){
     $respbody = $exception->getMessage();
-    if($exception instanceof \Drupal\tmgmt_contentapi\Swagger\Client\ApiException){
+    if($exception instanceof ApiException){
       $respbody = $exception->getResponseBody();
     }
     $respbody = 'An error occured while fetching and importing files: '.$respbody;
@@ @@
     ->condition('uri', $uri)
     ->execute();
   if ($fids) {
-    $files = \Drupal\file\Entity\File::loadMultiple($fids);
+    $files = File::loadMultiple($fids);
     foreach ($files as $item) {
       // Since some database servers sometimes use a case-insensitive comparison
       // by default, double check that the filename is an exact match.
@@ @@
 }


-function tmgmt_contentapi_views_pre_view(Drupal\views\ViewExecutable $view) {
+function tmgmt_contentapi_views_pre_view(ViewExecutable $view) {

   if ($view->id() == 'tmgmt_job_overview') {
     $deliveryhtml = '';
@@ @@
       global $base_url;
       // Using Id here, as job label returns @title@title and @more more.
       $joblable = GeneralHelper::getJobLabel($job);
-      $pass_link = \Drupal::l(t($joblable), \Drupal\Core\Url::fromUri($base_url . '/admin/tmgmt/jobs/' . $jobid['value']));
+      $pass_link = Link::fromTextAndUrl(t($joblable), Url::fromUri($base_url . '/admin/tmgmt/jobs/' . $jobid['value']));
       $currentlink = $pass_link->getGeneratedLink();

       $deliveryhtml .= '<li>'.$currentlink .'</li>';
@@ @@
 }


-function tmgmt_contentapi_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){
+function tmgmt_contentapi_form_alter(&$form, FormStateInterface $form_state, $form_id){
   /*
   $myForm = $form;
   if($form_id == 'views_exposed_form'){
@@ @@
   }
 }

-function canCustomTranslate(TranslatorInterface $translator, JobInterface $job, \Drupal\tmgmt\TranslatorPluginInterface $plugin) {
+function canCustomTranslate(TranslatorInterface $translator, JobInterface $job, TranslatorPluginInterface $plugin) {
   $job_state = $job->getState();
   $capisettings = $translator->getSetting('capi-settings');
   $capi = new TokenApi();
@@ @@
   }
 }

-function tmgmt_contentapi_entity_operation_alter(array &$operations,\Drupal\Core\Entity\EntityInterface  $entity) {
+function tmgmt_contentapi_entity_operation_alter(array &$operations,EntityInterface  $entity) {
   /*
   $newop = $operations['manage'];
   if(!isset($operations['updatestatus'])){
@@ @@
             $msg = substr($msg,0,200);
       }
       \Drupal::messenger()->addMessage($msg);
-		
+
       //\Drupal::messenger()->addMessage($e->getMessage());
     }
   }
    ----------- end diff -----------

Applied rules:
 * DrupalLRector
 * FileSaveDataRector
 * FileScanDirectoryRector
 * FileCreateUrlRector
 * ArgumentRemoverRector


2) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Util/GeneralHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_contentapi\Util;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\tmgmt\Entity\JobItem;
 use Drupal\file\FileInterface;
 use Drupal\tmgmt\Entity\Job;
 use Drupal\tmgmt\JobInterface;
@@ @@
    * @param \Drupal\tmgmt\TranslatorInterface $translator
    *   TranslatorInterface.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   A storage instance.
    */
   public static function getAllJobsByTranslator(TranslatorInterface $translator){
@@ @@
    *
    * @param \Drupal\tmgmt\JobInterface $job
    *   TranslatorInterface.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   TranslatorInterface.
    */
   public static function resetJobandItemsToActive(JobInterface &$job, FileInterface $file){
@@ @@
       $groups = $loadedxml->xpath("//xliff:group[@id='" . $tjiid ."']");
       if(count($groups) == 1){
         $item->setState(Job::STATE_ACTIVE);
-        $job->setState(\Drupal\tmgmt\Entity\JobItem::STATE_ACTIVE);
+        $job->setState(JobItem::STATE_ACTIVE);
       }
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Util/ConentApiHelper.php:71

    ---------- begin diff ----------
@@ @@
    * @param \Drupal\tmgmt\JobInterface $job
    *   Job.
    *
-   * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateJob
+   * @return CreateJob
    *   Job.
    */
   public static function genrateJobRequst(JobInterface $job) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/ObjectSerializer.php:28

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_contentapi\Swagger\Client;

+use Psr\Http\Message\StreamInterface;
 /**
  * ObjectSerializer Class Doc Comment
  *
@@ @@
             settype($data, $class);
             return $data;
         } elseif ($class === '\SplFileObject') {
-            /** @var \Psr\Http\Message\StreamInterface $data */
-
+            /** @var StreamInterface $data */
             // determine file name
             if (array_key_exists('Content-Disposition', $httpHeaders) &&
                 preg_match('/inline; filename=[\'"]?([^\'"\s]+)[\'"]?$/i', $httpHeaders['Content-Disposition'], $match)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/TranslationContent.php:363

    ---------- begin diff ----------
@@ @@
     /**
      * Gets structured_content
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\KeyValuePair[]
+     * @return KeyValuePair[]
      */
     public function getStructuredContent()
     {
@@ @@
     /**
      * Sets structured_content
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\KeyValuePair[] $structured_content structured_content
+     * @param KeyValuePair[] $structured_content structured_content
      *
      * @return $this
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/StatusUpdateCtt.php:345

    ---------- begin diff ----------
@@ @@
     /**
      * Gets status_code
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCode
+     * @return StatusCode
      */
     public function getStatusCode()
     {
@@ @@
     /**
      * Sets status_code
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCode $status_code status_code
+     * @param StatusCode $status_code status_code
      *
      * @return $this
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/StatusUpdate.php:345

    ---------- begin diff ----------
@@ @@
     /**
      * Gets status_code
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCode
+     * @return StatusCode
      */
     public function getStatusCode()
     {
@@ @@
     /**
      * Sets status_code
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCode $status_code status_code
+     * @param StatusCode $status_code status_code
      *
      * @return $this
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/StatusCode.php:208

    ---------- begin diff ----------
@@ @@
     /**
      * Gets status_code
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCodeEnum
+     * @return StatusCodeEnum
      */
     public function getStatusCode()
     {
@@ @@
     /**
      * Sets status_code
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCodeEnum $status_code status_code
+     * @param StatusCodeEnum $status_code status_code
      *
      * @return $this
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/RequestCtt.php:399

    ---------- begin diff ----------
@@ @@
     /**
      * Gets status_code
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCode
+     * @return StatusCode
      */
     public function getStatusCode()
     {
@@ @@
     /**
      * Sets status_code
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCode $status_code status_code
+     * @param StatusCode $status_code status_code
      *
      * @return $this
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/Request.php:413

    ---------- begin diff ----------
@@ @@
     /**
      * Gets status_code
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCode
+     * @return StatusCode
      */
     public function getStatusCode()
     {
@@ @@
     /**
      * Sets status_code
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCode $status_code status_code
+     * @param StatusCode $status_code status_code
      *
      * @return $this
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/Provider.php:266

    ---------- begin diff ----------
@@ @@
   /**
    * Gets capabilities
    *
-   * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Capabilities
+   * @return Capabilities
    */
   public function getCapabilities()
   {
@@ @@
   /**
    * Sets capabilities
    *
-   * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\Capabilities $capabilities capabilities
+   * @param Capabilities $capabilities capabilities
    *
    * @return $this
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/ListenerRequest.php:310

    ---------- begin diff ----------
@@ @@
     /**
      * Gets status_code
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCodeEnum
+     * @return StatusCodeEnum
      */
     public function getStatusCode()
     {
@@ @@
     /**
      * Sets status_code
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCodeEnum $status_code status_code
+     * @param StatusCodeEnum $status_code status_code
      *
      * @return $this
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/Listener.php:327

    ---------- begin diff ----------
@@ @@
     /**
      * Gets type
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\ListenerTypeEnum
+     * @return ListenerTypeEnum
      */
     public function getType()
     {
@@ @@
     /**
      * Sets type
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\ListenerTypeEnum $type type
+     * @param ListenerTypeEnum $type type
      *
      * @return $this
      */
@@ @@
     /**
      * Gets status_codes
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCodeEnum[]
+     * @return StatusCodeEnum[]
      */
     public function getStatusCodes()
     {
@@ @@
     /**
      * Sets status_codes
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCodeEnum[] $status_codes Status code types that you wish to monitor. If none specified, then all will be monitored.
+     * @param StatusCodeEnum[] $status_codes Status code types that you wish to monitor. If none specified, then all will be monitored.
      *
      * @return $this
      */
@@ @@
     /**
      * Gets auth_type
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\ListenerAuthEnum
+     * @return ListenerAuthEnum
      */
     public function getAuthType()
     {
@@ @@
     /**
      * Sets auth_type
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\ListenerAuthEnum $auth_type Authentication type for listener, if left empty then CTT_GENERATED_TOKEN will be used.
+     * @param ListenerAuthEnum $auth_type Authentication type for listener, if left empty then CTT_GENERATED_TOKEN will be used.
      *
      * @return $this
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/JobCtt.php:392

    ---------- begin diff ----------
@@ @@
     /**
      * Gets status_code
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCode
+     * @return StatusCode
      */
     public function getStatusCode()
     {
@@ @@
     /**
      * Sets status_code
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCode $status_code status_code
+     * @param StatusCode $status_code status_code
      *
      * @return $this
      */
@@ @@
     /**
      * Gets job_stats
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\JobStats
+     * @return JobStats
      */
     public function getJobStats()
     {
@@ @@
     /**
      * Sets job_stats
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\JobStats $job_stats job_stats
+     * @param JobStats $job_stats job_stats
      *
      * @return $this
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/Job.php:389

    ---------- begin diff ----------
@@ @@
     /**
      * Gets status_code
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCode
+     * @return StatusCode
      */
     public function getStatusCode()
     {
@@ @@
     /**
      * Sets status_code
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCode $status_code status_code
+     * @param StatusCode $status_code status_code
      *
      * @return $this
      */
@@ @@
     /**
      * Gets job_stats
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\JobStats
+     * @return JobStats
      */
     public function getJobStats()
     {
@@ @@
     /**
      * Sets job_stats
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\JobStats $job_stats job_stats
+     * @param JobStats $job_stats job_stats
      *
      * @return $this
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/CreateListener.php:291

    ---------- begin diff ----------
@@ @@
     /**
      * Gets type
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\ListenerTypeEnum
+     * @return ListenerTypeEnum
      */
     public function getType()
     {
@@ @@
     /**
      * Sets type
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\ListenerTypeEnum $type type
+     * @param ListenerTypeEnum $type type
      *
      * @return $this
      */
@@ @@
     /**
      * Gets status_codes
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCodeEnum[]
+     * @return StatusCodeEnum[]
      */
     public function getStatusCodes()
     {
@@ @@
     /**
      * Sets status_codes
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusCodeEnum[] $status_codes Status code types that you wish to monitor. If none specified, then all will be monitored.
+     * @param StatusCodeEnum[] $status_codes Status code types that you wish to monitor. If none specified, then all will be monitored.
      *
      * @return $this
      */
@@ @@
     /**
      * Gets auth_type
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\ListenerAuthEnum
+     * @return ListenerAuthEnum
      */
     public function getAuthType()
     {
@@ @@
     /**
      * Sets auth_type
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\ListenerAuthEnum $auth_type Authentication type for listener, if left empty then CTT_GENERATED_TOKEN will be used.
+     * @param ListenerAuthEnum $auth_type Authentication type for listener, if left empty then CTT_GENERATED_TOKEN will be used.
      *
      * @return $this
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Model/Capabilities.php:266

    ---------- begin diff ----------
@@ @@
     /**
      * Gets supported_languages
      *
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\LanguagePairs[]
+     * @return LanguagePairs[]
      */
     public function getSupportedLanguages()
     {
@@ @@
     /**
      * Sets supported_languages
      *
-     * @param \Drupal\tmgmt_contentapi\Swagger\Client\Model\LanguagePairs[] $supported_languages A list of supported source/target languages.
+     * @param LanguagePairs[] $supported_languages A list of supported source/target languages.
      *
      * @return $this
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/TranslationMemoryApi.php:27

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;

+use Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestUpdateTM;
+use GuzzleHttp\Promise\PromiseInterface;
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestUpdateTM $body Request UpdateTM object (required)
+     * @param CreateRequestUpdateTM $body Request UpdateTM object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return void
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestUpdateTM $body Request UpdateTM object (required)
+     * @param CreateRequestUpdateTM $body Request UpdateTM object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of null, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestUpdateTM $body Request UpdateTM object (required)
+     * @param CreateRequestUpdateTM $body Request UpdateTM object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdTmUpdatefilePutAsync($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestUpdateTM $body Request UpdateTM object (required)
+     * @param CreateRequestUpdateTM $body Request UpdateTM object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdTmUpdatefilePutAsyncWithHttpInfo($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestUpdateTM $body Request UpdateTM object (required)
+     * @param CreateRequestUpdateTM $body Request UpdateTM object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdTmUpdatefilePutRequest($authorization, $job_id, $body)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/TranslationContentApi.php:27

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;

+use Drupal\tmgmt_contentapi\Swagger\Client\Model\TranslationContent;
+use GuzzleHttp\Promise\PromiseInterface;
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ @@
      * @param  string $job_id The ID of the job. (required)
      * @param  string $request_id The ID of the translation request. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\TranslationContent[]
+     * @return TranslationContent[]
      */
     public function jobsJobIdRequestsRequestIdRetrieveGet($authorization, $job_id, $request_id)
     {
@@ @@
      * @param  string $job_id The ID of the job. (required)
      * @param  string $request_id The ID of the translation request. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\TranslationContent[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsRequestIdRetrieveGetAsync($authorization, $job_id, $request_id)
     {
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsRequestIdRetrieveGetAsyncWithHttpInfo($authorization, $job_id, $request_id)
     {
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdRequestsRequestIdRetrieveGetRequest($authorization, $job_id, $request_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


20) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/TokenApi.php:27

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;

+use Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateToken;
+use Drupal\tmgmt_contentapi\Swagger\Client\Model\Token;
+use GuzzleHttp\Promise\PromiseInterface;
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ @@
      *
      * Get a new token.
      *
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateToken $body Created token object (required)
+     * @param CreateToken $body Created token object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Token
+     * @return Token
      */
     public function oauth2TokenPost($body)
     {
@@ @@
      *
      * Get a new token.
      *
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateToken $body Created token object (required)
+     * @param CreateToken $body Created token object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Token, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * Get a new token.
      *
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateToken $body Created token object (required)
+     * @param CreateToken $body Created token object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function oauth2TokenPostAsync($body)
     {
@@ @@
      *
      * Get a new token.
      *
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateToken $body Created token object (required)
+     * @param CreateToken $body Created token object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function oauth2TokenPostAsyncWithHttpInfo($body)
     {
@@ @@
     /**
      * Create request for operation 'oauth2TokenPost'
      *
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateToken $body Created token object (required)
+     * @param CreateToken $body Created token object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function oauth2TokenPostRequest($body)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/SupportAssetApi.php:27

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;

+use Drupal\tmgmt_contentapi\Swagger\Client\Model\SupportAsset;
+use GuzzleHttp\Promise\PromiseInterface;
+use Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateSupportAsset;
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\SupportAsset[]
+     * @return SupportAsset[]
      */
     public function jobsJobIdSupportassetsGet($authorization, $job_id)
     {
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\SupportAsset[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdSupportassetsGetAsync($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdSupportassetsGetAsyncWithHttpInfo($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdSupportassetsGetRequest($authorization, $job_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateSupportAsset $body Created Support Asset object (required)
+     * @param CreateSupportAsset $body Created Support Asset object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\SupportAsset
+     * @return SupportAsset
      */
     public function jobsJobIdSupportassetsPost($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateSupportAsset $body Created Support Asset object (required)
+     * @param CreateSupportAsset $body Created Support Asset object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\SupportAsset, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateSupportAsset $body Created Support Asset object (required)
+     * @param CreateSupportAsset $body Created Support Asset object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdSupportassetsPostAsync($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateSupportAsset $body Created Support Asset object (required)
+     * @param CreateSupportAsset $body Created Support Asset object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdSupportassetsPostAsyncWithHttpInfo($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateSupportAsset $body Created Support Asset object (required)
+     * @param CreateSupportAsset $body Created Support Asset object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdSupportassetsPostRequest($authorization, $job_id, $body)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $job_id The ID of the job. (required)
      * @param  string $supportasset_id The ID of the support asset. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return void
      */
@@ @@
      * @param  string $job_id The ID of the job. (required)
      * @param  string $supportasset_id The ID of the support asset. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of null, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $supportasset_id The ID of the support asset. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdSupportassetsSupportassetIdDeleteAsync($authorization, $job_id, $supportasset_id)
     {
@@ @@
      * @param  string $supportasset_id The ID of the support asset. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdSupportassetsSupportassetIdDeleteAsyncWithHttpInfo($authorization, $job_id, $supportasset_id)
     {
@@ @@
      * @param  string $supportasset_id The ID of the support asset. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdSupportassetsSupportassetIdDeleteRequest($authorization, $job_id, $supportasset_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'DELETE',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $job_id The ID of the job. (required)
      * @param  string $supportasset_id The ID of the support asset. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\SupportAsset
+     * @return SupportAsset
      */
     public function jobsJobIdSupportassetsSupportassetIdGet($authorization, $job_id, $supportasset_id)
     {
@@ @@
      * @param  string $job_id The ID of the job. (required)
      * @param  string $supportasset_id The ID of the support asset. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\SupportAsset, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $supportasset_id The ID of the support asset. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdSupportassetsSupportassetIdGetAsync($authorization, $job_id, $supportasset_id)
     {
@@ @@
      * @param  string $supportasset_id The ID of the support asset. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdSupportassetsSupportassetIdGetAsyncWithHttpInfo($authorization, $job_id, $supportasset_id)
     {
@@ @@
      * @param  string $supportasset_id The ID of the support asset. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdSupportassetsSupportassetIdGetRequest($authorization, $job_id, $supportasset_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/StatusUpdateApi.php:27

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;

+use Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusUpdate;
+use GuzzleHttp\Promise\PromiseInterface;
+use Drupal\tmgmt_contentapi\Swagger\Client\Model\Listener;
+use Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateListener;
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusUpdate[]
+     * @return StatusUpdate[]
      */
     public function jobsJobIdStatusupdatesGet($authorization)
     {
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusUpdate[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdStatusupdatesGetAsync($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdStatusupdatesGetAsyncWithHttpInfo($authorization)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdStatusupdatesGetRequest($authorization)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusUpdate[]
+     * @return StatusUpdate[]
      */
     public function statusupdatesGet($authorization)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusUpdate[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $authorization Oauth2 token (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusupdatesGetAsync($authorization)
     {
@@ @@
      * @param  string $authorization Oauth2 token (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusupdatesGetAsyncWithHttpInfo($authorization)
     {
@@ @@
      * @param  string $authorization Oauth2 token (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function statusupdatesGetRequest($authorization)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Listener[]
+     * @return Listener[]
      */
     public function statusupdatesListenersGet($authorization)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Listener[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $authorization Oauth2 token (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusupdatesListenersGetAsync($authorization)
     {
@@ @@
      * @param  string $authorization Oauth2 token (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusupdatesListenersGetAsyncWithHttpInfo($authorization)
     {
@@ @@
      * @param  string $authorization Oauth2 token (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function statusupdatesListenersGetRequest($authorization)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $listener_id The ID of the specified Listener. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Listener
+     * @return Listener
      */
     public function statusupdatesListenersListenerIdDelete($authorization, $listener_id)
     {
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $listener_id The ID of the specified Listener. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Listener, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $listener_id The ID of the specified Listener. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusupdatesListenersListenerIdDeleteAsync($authorization, $listener_id)
     {
@@ @@
      * @param  string $listener_id The ID of the specified Listener. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusupdatesListenersListenerIdDeleteAsyncWithHttpInfo($authorization, $listener_id)
     {
@@ @@
      * @param  string $listener_id The ID of the specified Listener. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function statusupdatesListenersListenerIdDeleteRequest($authorization, $listener_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'DELETE',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $listener_id The ID of the Listener being queried. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Listener
+     * @return Listener
      */
     public function statusupdatesListenersListenerIdGet($authorization, $listener_id)
     {
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $listener_id The ID of the Listener being queried. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Listener, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $listener_id The ID of the Listener being queried. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusupdatesListenersListenerIdGetAsync($authorization, $listener_id)
     {
@@ @@
      * @param  string $listener_id The ID of the Listener being queried. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusupdatesListenersListenerIdGetAsyncWithHttpInfo($authorization, $listener_id)
     {
@@ @@
      * @param  string $listener_id The ID of the Listener being queried. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function statusupdatesListenersListenerIdGetRequest($authorization, $listener_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * Create a new Listener.
      *
      * @param  string $authorization Oauth2 token (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateListener $body Created Listener object (required)
+     * @param CreateListener $body Created Listener object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Listener
+     * @return Listener
      */
     public function statusupdatesListenersPost($authorization, $body)
     {
@@ @@
      * Create a new Listener.
      *
      * @param  string $authorization Oauth2 token (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateListener $body Created Listener object (required)
+     * @param CreateListener $body Created Listener object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Listener, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * Create a new Listener.
      *
      * @param  string $authorization Oauth2 token (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateListener $body Created Listener object (required)
+     * @param CreateListener $body Created Listener object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusupdatesListenersPostAsync($authorization, $body)
     {
@@ @@
      * Create a new Listener.
      *
      * @param  string $authorization Oauth2 token (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateListener $body Created Listener object (required)
+     * @param CreateListener $body Created Listener object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusupdatesListenersPostAsyncWithHttpInfo($authorization, $body)
     {
@@ @@
      * Create request for operation 'statusupdatesListenersPost'
      *
      * @param  string $authorization Oauth2 token (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateListener $body Created Listener object (required)
+     * @param CreateListener $body Created Listener object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function statusupdatesListenersPostRequest($authorization, $body)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $update_id The ID of the status update being acknowledged. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusUpdate
+     * @return StatusUpdate
      */
     public function statusupdatesUpdateIdAcknowledgePut($authorization, $update_id)
     {
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $update_id The ID of the status update being acknowledged. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusUpdate, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $update_id The ID of the status update being acknowledged. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusupdatesUpdateIdAcknowledgePutAsync($authorization, $update_id)
     {
@@ @@
      * @param  string $update_id The ID of the status update being acknowledged. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusupdatesUpdateIdAcknowledgePutAsyncWithHttpInfo($authorization, $update_id)
     {
@@ @@
      * @param  string $update_id The ID of the status update being acknowledged. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function statusupdatesUpdateIdAcknowledgePutRequest($authorization, $update_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $update_id The ID of the status update being acknowledged. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusUpdate
+     * @return StatusUpdate
      */
     public function statusupdatesUpdateIdAcknowledgePutCtt($authorization, $update_id)
     {
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $update_id The ID of the status update being acknowledged. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\StatusUpdate, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $update_id The ID of the status update being acknowledged. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusupdatesUpdateIdAcknowledgePutAsyncCtt($authorization, $update_id)
     {
@@ @@
      * @param  string $update_id The ID of the status update being acknowledged. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusupdatesUpdateIdAcknowledgePutAsyncWithHttpInfoCtt($authorization, $update_id)
     {
@@ @@
      * @param  string $update_id The ID of the status update being acknowledged. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function statusupdatesUpdateIdAcknowledgePutRequestCtt($authorization, $update_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/SourceFileApi.php:27

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;

+use Drupal\tmgmt_contentapi\Swagger\Client\Model\SourceFile;
+use GuzzleHttp\Promise\PromiseInterface;
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ @@
      * @param  string $file_type MIME type of the source file of the request. If empty, a default will be supplied based on the extension extracted from the name of the request, or &#39;application/octet-stream&#39; if no extension can be found from the name of the request. (required)
      * @param  \SplFileObject $source_file The file of the source content for the request(s). *Note*: \&quot;Try it out\&quot; for this method on developers.lionbridge.com is currently not functioning. To test this method, use the cURL sample on https://bitbucket.org/liox-ondemand/liox-content-api-client/src/master/curl/File%20Workflow (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\SourceFile
+     * @return SourceFile
      */
     public function jobsJobIdUploadPost($authorization, $job_id, $file_name, $file_type, $source_file)
     {
@@ @@
      * @param  string $file_type MIME type of the source file of the request. If empty, a default will be supplied based on the extension extracted from the name of the request, or &#39;application/octet-stream&#39; if no extension can be found from the name of the request. (required)
      * @param  \SplFileObject $source_file The file of the source content for the request(s). *Note*: \&quot;Try it out\&quot; for this method on developers.lionbridge.com is currently not functioning. To test this method, use the cURL sample on https://bitbucket.org/liox-ondemand/liox-content-api-client/src/master/curl/File%20Workflow (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\SourceFile, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  \SplFileObject $source_file The file of the source content for the request(s). *Note*: \&quot;Try it out\&quot; for this method on developers.lionbridge.com is currently not functioning. To test this method, use the cURL sample on https://bitbucket.org/liox-ondemand/liox-content-api-client/src/master/curl/File%20Workflow (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdUploadPostAsync($authorization, $job_id, $file_name, $file_type, $source_file)
     {
@@ @@
      * @param  \SplFileObject $source_file The file of the source content for the request(s). *Note*: \&quot;Try it out\&quot; for this method on developers.lionbridge.com is currently not functioning. To test this method, use the cURL sample on https://bitbucket.org/liox-ondemand/liox-content-api-client/src/master/curl/File%20Workflow (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdUploadPostAsyncWithHttpInfo($authorization, $job_id, $file_name, $file_type, $source_file)
     {
@@ @@
      * @param  \SplFileObject $source_file The file of the source content for the request(s). *Note*: \&quot;Try it out\&quot; for this method on developers.lionbridge.com is currently not functioning. To test this method, use the cURL sample on https://bitbucket.org/liox-ondemand/liox-content-api-client/src/master/curl/File%20Workflow (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdUploadPostRequest($authorization, $job_id, $file_name, $file_type, $source_file)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/RequestApi.php:27

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;

+use Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestKeyValue;
+use GuzzleHttp\Promise\PromiseInterface;
+use Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestFile;
+use Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds;
+use Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIdsNote;
+use Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateRequestsKeyValue;
+use Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateRequestsFile;
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestKeyValue $body Created Request object (required)
+     * @param CreateRequestKeyValue $body Created Request object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[]
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestKeyValue $body Created Request object (required)
+     * @param CreateRequestKeyValue $body Created Request object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestKeyValue $body Created Request object (required)
+     * @param CreateRequestKeyValue $body Created Request object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsAddPostAsync($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestKeyValue $body Created Request object (required)
+     * @param CreateRequestKeyValue $body Created Request object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsAddPostAsyncWithHttpInfo($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestKeyValue $body Created Request object (required)
+     * @param CreateRequestKeyValue $body Created Request object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdRequestsAddPostRequest($authorization, $job_id, $body)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestFile $body Created Request object (required)
+     * @param CreateRequestFile $body Created Request object (required)
      *
      * @param  string $requestType 1= source, 2 = reference. (optional) DEFAULT = source
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[]
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestFile $body Created Request object (required)
+     * @param CreateRequestFile $body Created Request object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestFile $body Created Request object (required)
+     * @param CreateRequestFile $body Created Request object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsAddfilePostAsync($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestFile $body Created Request object (required)
+     * @param CreateRequestFile $body Created Request object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsAddfilePostAsyncWithHttpInfo($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateRequestFile $body Created Request object (required)
+     * @param CreateRequestFile $body Created Request object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdAddSourceReferencePostRequest($authorization, $job_id, $body, $requestType)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[]
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsApprovePutAsync($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsApprovePutAsyncWithHttpInfo($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdRequestsApprovePutRequest($authorization, $job_id, $body)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[]
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsApprovePutAsyncCtt($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsApprovePutAsyncWithHttpInfoCtt($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdRequestsApprovePutRequestCtt($authorization, $job_id, $body)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[]
      */
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsGetAsync($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsGetAsyncWithHttpInfo($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdRequestsGetRequest($authorization, $job_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[]
      */
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsGetAsyncCtt($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsGetAsyncWithHttpInfoCtt($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdRequestsGetRequestCtt($authorization, $job_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[]
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsPutAsync($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsPutAsyncWithHttpInfo($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIds $body Array of RequestIds (required)
+     * @param ArrayOfRequestIds $body Array of RequestIds (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdRequestsPutRequest($authorization, $job_id, $body)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIdsNote $body Array of RequestIds (required)
+     * @param ArrayOfRequestIdsNote $body Array of RequestIds (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[]
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIdsNote $body Array of RequestIds (required)
+     * @param ArrayOfRequestIdsNote $body Array of RequestIds (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIdsNote $body Array of RequestIds (required)
+     * @param ArrayOfRequestIdsNote $body Array of RequestIds (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsRejectPutAsync($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIdsNote $body Array of RequestIds (required)
+     * @param ArrayOfRequestIdsNote $body Array of RequestIds (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsRejectPutAsyncWithHttpInfo($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ArrayOfRequestIdsNote $body Array of RequestIds (required)
+     * @param ArrayOfRequestIdsNote $body Array of RequestIds (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdRequestsRejectPutRequest($authorization, $job_id, $body)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $job_id The ID of the job. (required)
      * @param  string $request_id The ID of the translation request. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request
      */
@@ @@
      * @param  string $job_id The ID of the job. (required)
      * @param  string $request_id The ID of the translation request. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsRequestIdDeleteAsync($authorization, $job_id, $request_id)
     {
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsRequestIdDeleteAsyncWithHttpInfo($authorization, $job_id, $request_id)
     {
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdRequestsRequestIdDeleteRequest($authorization, $job_id, $request_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'DELETE',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $job_id The ID of the job. (required)
      * @param  string $request_id The ID of the translation request. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request
      */
@@ @@
      * @param  string $job_id The ID of the job. (required)
      * @param  string $request_id The ID of the translation request. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsRequestIdGetAsync($authorization, $job_id, $request_id)
     {
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsRequestIdGetAsyncWithHttpInfo($authorization, $job_id, $request_id)
     {
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdRequestsRequestIdGetRequest($authorization, $job_id, $request_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateRequestsKeyValue $body Updated Request object (required)
+     * @param UpdateRequestsKeyValue $body Updated Request object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[]
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateRequestsKeyValue $body Updated Request object (required)
+     * @param UpdateRequestsKeyValue $body Updated Request object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateRequestsKeyValue $body Updated Request object (required)
+     * @param UpdateRequestsKeyValue $body Updated Request object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsUpdatecontentPutAsync($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateRequestsKeyValue $body Updated Request object (required)
+     * @param UpdateRequestsKeyValue $body Updated Request object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsUpdatecontentPutAsyncWithHttpInfo($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateRequestsKeyValue $body Updated Request object (required)
+     * @param UpdateRequestsKeyValue $body Updated Request object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdRequestsUpdatecontentPutRequest($authorization, $job_id, $body)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateRequestsFile $body Updated Request object (required)
+     * @param UpdateRequestsFile $body Updated Request object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[]
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateRequestsFile $body Updated Request object (required)
+     * @param UpdateRequestsFile $body Updated Request object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Request[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateRequestsFile $body Updated Request object (required)
+     * @param UpdateRequestsFile $body Updated Request object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsUpdatefilecontentPutAsync($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateRequestsFile $body Updated Request object (required)
+     * @param UpdateRequestsFile $body Updated Request object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsUpdatefilecontentPutAsyncWithHttpInfo($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id Job ID. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateRequestsFile $body Updated Request object (required)
+     * @param UpdateRequestsFile $body Updated Request object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdRequestsUpdatefilecontentPutRequest($authorization, $job_id, $body)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsCompleteRequestsGetAsync($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsCompleteRequestsGetAsyncWithHttpInfo($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsCompletePutRequest($authorization, $job_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/ProviderApi.php:27

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;

+use Drupal\tmgmt_contentapi\Swagger\Client\Model\Provider;
+use GuzzleHttp\Promise\PromiseInterface;
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ @@
    *
    * @param  string $authorization Oauth2 token (required)
    *
-   * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+   * @throws ApiException on non-2xx response
    * @throws \InvalidArgumentException
-   * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Provider[]
+   * @return Provider[]
    */
   public function providersGet($authorization)
   {
@@ @@
    *
    * @param  string $authorization Oauth2 token (required)
    *
-   * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+   * @throws ApiException on non-2xx response
    * @throws \InvalidArgumentException
    * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Provider[], HTTP status code, HTTP response headers (array of strings)
    */
@@ @@
           $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
         );
       }
-      
+
       $statusCode = $response->getStatusCode();

       if ($statusCode < 200 || $statusCode > 299) {
@@ @@
    * @param  string $authorization Oauth2 token (required)
    *
    * @throws \InvalidArgumentException
-   * @return \GuzzleHttp\Promise\PromiseInterface
+   * @return PromiseInterface
    */
   public function providersGetAsync($authorization)
   {
@@ @@
    * @param  string $authorization Oauth2 token (required)
    *
    * @throws \InvalidArgumentException
-   * @return \GuzzleHttp\Promise\PromiseInterface
+   * @return PromiseInterface
    */
   public function providersGetAsyncWithHttpInfo($authorization)
   {
@@ @@
    * @param  string $authorization Oauth2 token (required)
    *
    * @throws \InvalidArgumentException
-   * @return \GuzzleHttp\Psr7\Request
+   * @return Request
    */
   protected function providersGetRequest($authorization)
   {
@@ @@
       $httpBody = $_tempBody;
       // \stdClass has no __toString(), so we should encode it manually
       if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-        $httpBody = \GuzzleHttp\json_encode($httpBody);
+        $httpBody = json_encode($httpBody);
       }
     } elseif (count($formParams) > 0) {
       if ($multipart) {
@@ @@
         $httpBody = new MultipartStream($multipartContents);

       } elseif ($headers['Content-Type'] === 'application/json') {
-        $httpBody = \GuzzleHttp\json_encode($formParams);
+        $httpBody = json_encode($formParams);

       } else {
         // for HTTP post (form)
-        $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+        $httpBody = build_query($formParams);
       }
     }

@@ @@
       $headers
     );

-    $query = \GuzzleHttp\Psr7\build_query($queryParams);
+    $query = build_query($queryParams);
     return new Request(
       'GET',
       $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
    * @param  string $authorization Oauth2 token (required)
    * @param  string $provider_id The ID of the translation provider. (required)
    *
-   * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+   * @throws ApiException on non-2xx response
    * @throws \InvalidArgumentException
-   * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Provider
+   * @return Provider
    */
   public function providersProviderIdGet($authorization, $provider_id)
   {
@@ @@
    * @param  string $authorization Oauth2 token (required)
    * @param  string $provider_id The ID of the translation provider. (required)
    *
-   * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+   * @throws ApiException on non-2xx response
    * @throws \InvalidArgumentException
    * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Provider, HTTP status code, HTTP response headers (array of strings)
    */
@@ @@
    * @param  string $provider_id The ID of the translation provider. (required)
    *
    * @throws \InvalidArgumentException
-   * @return \GuzzleHttp\Promise\PromiseInterface
+   * @return PromiseInterface
    */
   public function providersProviderIdGetAsync($authorization, $provider_id)
   {
@@ @@
    * @param  string $provider_id The ID of the translation provider. (required)
    *
    * @throws \InvalidArgumentException
-   * @return \GuzzleHttp\Promise\PromiseInterface
+   * @return PromiseInterface
    */
   public function providersProviderIdGetAsyncWithHttpInfo($authorization, $provider_id)
   {
@@ @@
    * @param  string $provider_id The ID of the translation provider. (required)
    *
    * @throws \InvalidArgumentException
-   * @return \GuzzleHttp\Psr7\Request
+   * @return Request
    */
   protected function providersProviderIdGetRequest($authorization, $provider_id)
   {
@@ @@
       $httpBody = $_tempBody;
       // \stdClass has no __toString(), so we should encode it manually
       if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-        $httpBody = \GuzzleHttp\json_encode($httpBody);
+        $httpBody = json_encode($httpBody);
       }
     } elseif (count($formParams) > 0) {
       if ($multipart) {
@@ @@
         $httpBody = new MultipartStream($multipartContents);

       } elseif ($headers['Content-Type'] === 'application/json') {
-        $httpBody = \GuzzleHttp\json_encode($formParams);
+        $httpBody = json_encode($formParams);

       } else {
         // for HTTP post (form)
-        $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+        $httpBody = build_query($formParams);
       }
     }

@@ @@
       $headers
     );

-    $query = \GuzzleHttp\Psr7\build_query($queryParams);
+    $query = build_query($queryParams);
     return new Request(
       'GET',
       $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
    * @param  string $authorization Oauth2 token (required)
    * @param  string $provider_id The ID of the translation provider. (required)
    *
-   * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+   * @throws ApiException on non-2xx response
    * @throws \InvalidArgumentException
-   * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Provider
+   * @return Provider
    */
   public function providersProviderIdGetCtt($authorization, $provider_id)
   {
@@ @@
    * @param  string $authorization Oauth2 token (required)
    * @param  string $provider_id The ID of the translation provider. (required)
    *
-   * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+   * @throws ApiException on non-2xx response
    * @throws \InvalidArgumentException
    * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Provider, HTTP status code, HTTP response headers (array of strings)
    */
@@ @@
    * @param  string $provider_id The ID of the translation provider. (required)
    *
    * @throws \InvalidArgumentException
-   * @return \GuzzleHttp\Promise\PromiseInterface
+   * @return PromiseInterface
    */
   public function providersProviderIdGetAsyncCtt($authorization, $provider_id)
   {
@@ @@
    * @param  string $provider_id The ID of the translation provider. (required)
    *
    * @throws \InvalidArgumentException
-   * @return \GuzzleHttp\Promise\PromiseInterface
+   * @return PromiseInterface
    */
   public function providersProviderIdGetAsyncWithHttpInfoCtt($authorization, $provider_id)
   {
@@ @@
    * @param  string $provider_id The ID of the translation provider. (required)
    *
    * @throws \InvalidArgumentException
-   * @return \GuzzleHttp\Psr7\Request
+   * @return Request
    */
   protected function providersProviderIdGetRequestCtt($authorization, $provider_id)
   {
@@ @@
       $httpBody = $_tempBody;
       // \stdClass has no __toString(), so we should encode it manually
       if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-        $httpBody = \GuzzleHttp\json_encode($httpBody);
+        $httpBody = json_encode($httpBody);
       }
     } elseif (count($formParams) > 0) {
       if ($multipart) {
@@ @@
         $httpBody = new MultipartStream($multipartContents);

       } elseif ($headers['Content-Type'] === 'application/json') {
-        $httpBody = \GuzzleHttp\json_encode($formParams);
+        $httpBody = json_encode($formParams);

       } else {
         // for HTTP post (form)
-        $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+        $httpBody = build_query($formParams);
       }
     }

@@ @@
       $headers
     );

-    $query = \GuzzleHttp\Psr7\build_query($queryParams);
+    $query = build_query($queryParams);
     return new Request(
       'GET',
       $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/JobApi.php:27

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;

+use Drupal\tmgmt_contentapi\Swagger\Client\Model\Job;
+use GuzzleHttp\Promise\PromiseInterface;
+use Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateJob;
+use Drupal\tmgmt_contentapi\Swagger\Client\Model\ProviderId;
+use Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateJob;
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ @@
      * @param  string $fetch_type Specifies what level of detail is returned for a job. (optional, default to full)
      * @param  bool $include_archived Include archived jobs in job listing. (optional, default to false)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job[]
+     * @return Job[]
      */
     public function jobsGet($authorization, $fetch_type = 'full', $include_archived = 'false')
     {
@@ @@
      * @param  string $fetch_type Specifies what level of detail is returned for a job. (optional, default to full)
      * @param  bool $include_archived Include archived jobs in job listing. (optional, default to false)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  bool $include_archived Include archived jobs in job listing. (optional, default to false)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsGetAsync($authorization, $fetch_type = 'full', $include_archived = 'false')
     {
@@ @@
      * @param  bool $include_archived Include archived jobs in job listing. (optional, default to false)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsGetAsyncWithHttpInfo($authorization, $fetch_type = 'full', $include_archived = 'false')
     {
@@ @@
      * @param  bool $include_archived Include archived jobs in job listing. (optional, default to false)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsGetRequest($authorization, $fetch_type = 'full', $include_archived = 'false')
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job
+     * @return Job
      */
     public function jobsJobIdArchivePut($authorization, $job_id)
     {
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdArchivePutAsync($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdArchivePutAsyncWithHttpInfo($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdArchivePutRequest($authorization, $job_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job
+     * @return Job
      */
     public function jobsJobIdArchivePutCtt($authorization, $job_id)
     {
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdArchivePutAsyncCtt($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdArchivePutAsyncWithHttpInfoCtt($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdArchivePutRequestCtt($authorization, $job_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job
+     * @return Job
      */
     public function jobsJobIdDelete($authorization, $job_id)
     {
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdDeleteAsync($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdDeleteAsyncWithHttpInfo($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdDeleteRequest($authorization, $job_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'DELETE',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $job_id The ID of the job being queried. (required)
      * @param  string $fetch_type Specifies what level of detail is returned for a job. (optional, default to full)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job
+     * @return Job
      */
     public function jobsJobIdGet($authorization, $job_id, $fetch_type = 'full')
     {
@@ @@
      * @param  string $job_id The ID of the job being queried. (required)
      * @param  string $fetch_type Specifies what level of detail is returned for a job. (optional, default to full)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $fetch_type Specifies what level of detail is returned for a job. (optional, default to full)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdGetAsync($authorization, $job_id, $fetch_type = 'full')
     {
@@ @@
      * @param  string $fetch_type Specifies what level of detail is returned for a job. (optional, default to full)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdGetAsyncWithHttpInfo($authorization, $job_id, $fetch_type = 'full')
     {
@@ @@
      * @param  string $fetch_type Specifies what level of detail is returned for a job. (optional, default to full)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdGetRequest($authorization, $job_id, $fetch_type = 'full')
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $job_id The ID of the job being queried. (required)
      * @param  string $fetch_type Specifies what level of detail is returned for a job. (optional, default to full)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job
+     * @return Job
      */
     public function jobsJobIdGetCtt($authorization, $job_id, $fetch_type = 'full')
     {
@@ @@
      * @param  string $job_id The ID of the job being queried. (required)
      * @param  string $fetch_type Specifies what level of detail is returned for a job. (optional, default to full)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $fetch_type Specifies what level of detail is returned for a job. (optional, default to full)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdGetCttAsync($authorization, $job_id, $fetch_type = 'full')
     {
@@ @@
      * @param  string $fetch_type Specifies what level of detail is returned for a job. (optional, default to full)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdGetCttAsyncWithHttpInfo($authorization, $job_id, $fetch_type = 'full')
     {
@@ @@
      * @param  string $fetch_type Specifies what level of detail is returned for a job. (optional, default to full)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
-
     protected function jobsJobIdGetRequestCtt($authorization, $job_id, $fetch_type = 'full')
     {
         // verify the required parameter 'authorization' is set
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the job being updated. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateJob $job The job being updated. (required)
+     * @param UpdateJob $job The job being updated. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job
+     * @return Job
      */
     public function jobsJobIdPut($authorization, $job_id, $job)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the job being updated. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateJob $job The job being updated. (required)
+     * @param UpdateJob $job The job being updated. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the job being updated. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateJob $job The job being updated. (required)
+     * @param UpdateJob $job The job being updated. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdPutAsync($authorization, $job_id, $job)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the job being updated. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateJob $job The job being updated. (required)
+     * @param UpdateJob $job The job being updated. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdPutAsyncWithHttpInfo($authorization, $job_id, $job)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the job being updated. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\UpdateJob $job The job being updated. (required)
+     * @param UpdateJob $job The job being updated. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdPutRequest($authorization, $job_id, $job)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ProviderId $body The ID of the provider the job will be sent to. This information can be omitted if the site has only one translation provider. (required)
+     * @param ProviderId $body The ID of the provider the job will be sent to. This information can be omitted if the site has only one translation provider. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job
+     * @return Job
      */
     public function jobsJobIdSubmitPut($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ProviderId $body The ID of the provider the job will be sent to. This information can be omitted if the site has only one translation provider. (required)
+     * @param ProviderId $body The ID of the provider the job will be sent to. This information can be omitted if the site has only one translation provider. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ProviderId $body The ID of the provider the job will be sent to. This information can be omitted if the site has only one translation provider. (required)
+     * @param ProviderId $body The ID of the provider the job will be sent to. This information can be omitted if the site has only one translation provider. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdSubmitPutAsync($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ProviderId $body The ID of the provider the job will be sent to. This information can be omitted if the site has only one translation provider. (required)
+     * @param ProviderId $body The ID of the provider the job will be sent to. This information can be omitted if the site has only one translation provider. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdSubmitPutAsyncWithHttpInfo($authorization, $job_id, $body)
     {
@@ @@
      *
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\ProviderId $body The ID of the provider the job will be sent to. This information can be omitted if the site has only one translation provider. (required)
+     * @param ProviderId $body The ID of the provider the job will be sent to. This information can be omitted if the site has only one translation provider. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdSubmitPutRequest($authorization, $job_id, $body)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job
+     * @return Job
      */
     public function jobsJobIdUnarchivePut($authorization, $job_id)
     {
@@ @@
      * @param  string $authorization Oauth2 token (required)
      * @param  string $job_id The ID of the specified job. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdUnarchivePutAsync($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdUnarchivePutAsyncWithHttpInfo($authorization, $job_id)
     {
@@ @@
      * @param  string $job_id The ID of the specified job. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdUnarchivePutRequest($authorization, $job_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'PUT',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * Create a new job.
      *
      * @param  string $authorization Oauth2 token (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateJob $body Created job object (required)
+     * @param CreateJob $body Created job object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job
+     * @return Job
      */
     public function jobsPost($authorization, $body)
     {
@@ @@
      * Create a new job.
      *
      * @param  string $authorization Oauth2 token (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateJob $body Created job object (required)
+     * @param CreateJob $body Created job object (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_contentapi\Swagger\Client\Model\Job, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * Create a new job.
      *
      * @param  string $authorization Oauth2 token (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateJob $body Created job object (required)
+     * @param CreateJob $body Created job object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsPostAsync($authorization, $body)
     {
@@ @@
      * Create a new job.
      *
      * @param  string $authorization Oauth2 token (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateJob $body Created job object (required)
+     * @param CreateJob $body Created job object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsPostAsyncWithHttpInfo($authorization, $body)
     {
@@ @@
      * Create request for operation 'jobsPost'
      *
      * @param  string $authorization Oauth2 token (required)
-     * @param  \Drupal\tmgmt_contentapi\Swagger\Client\Model\CreateJob $body Created job object (required)
+     * @param CreateJob $body Created job object (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsPostRequest($authorization, $body)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Swagger/Client/Api/FileApi.php:28

    ---------- begin diff ----------
@@ @@
 namespace Drupal\tmgmt_contentapi\Swagger\Client\Api;


+use GuzzleHttp\Promise\PromiseInterface;
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ @@
      * @param  string $job_id The ID of the job. (required)
      * @param  string $request_id The ID of the translation request. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return \SplFileObject
      */
@@ @@
      * @param  string $job_id The ID of the job. (required)
      * @param  string $request_id The ID of the translation request. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsRequestIdRetrievefileGetAsync($authorization, $job_id, $request_id)
     {
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsRequestIdRetrievefileGetAsyncWithHttpInfo($authorization, $job_id, $request_id)
     {
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdRequestsRequestIdRetrievefileGetRequest($authorization, $job_id, $request_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * @param  string $job_id The ID of the job. (required)
      * @param  string $request_id The ID of the translation request. (required)
      *
-     * @throws \Drupal\tmgmt_contentapi\Swagger\Client\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return \SplFileObject
      */
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsRequestIdRetrievefileGetAsyncCtt($authorization, $job_id, $request_id)
     {
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function jobsJobIdRequestsRequestIdRetrievefileGetAsyncWithHttpInfoCtt($authorization, $job_id, $request_id)
     {
@@ @@
      * @param  string $request_id The ID of the translation request. (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function jobsJobIdRequestsRequestIdRetrievefileGetRequestCtt($authorization, $job_id, $request_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost1() . $resourcePath . ($query ? "?{$query}" : ''),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


28) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Plugin/views/field/JobProvideridField.php:175

    ---------- begin diff ----------
@@ @@
       $capisettings = $translator->getSetting('capi-settings');
       $capi = new TokenApi();
       $token = $capi->getToken($capisettings['capi_username_ctt'],$capisettings['capi_password_ctt']);
-      
-  
+
+
         if(isset($token) && $token != '') {
             $providersarray = array();
             try {
               $providerapi = new ProviderApi();
               $providers = $providerapi->providersGet($token);
-              
+
               foreach ($providers as $provider) {
                 $prid = $provider->getProviderId();
                 $prname = $provider->getProviderName();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Format/FormatManager.php:31

    ---------- begin diff ----------
@@ @@
      * @param \Traversable $namespaces
      *   An object that implements \Traversable which contains the root paths
      *   keyed by the corresponding namespace to look for plugin implementations.
-     * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+     * @param CacheBackendInterface $cache_backend
      *   Cache backend instance to use.
-     * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+     * @param ModuleHandlerInterface $module_handler
      *   The module handler to invoke the alter hook with.
      */
     public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Annotation/FormatPlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_contentapi\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
    *
    * @ingroup plugin_translatable
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    */
   public $label;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [ERROR] Could not process                                                      
         "modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Plu
         gin/tmgmt/Translator/ContentApiTranslator.php" file, due to:           
         "Analyze error: "Class Drupal\tmgmt\TranslatorPluginBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/lionbridge_translation_provider/tmgmt_contentapi/src/Con
         tentApiTranslatorUI.php" file, due to:                                 
         "Analyze error: "Class Drupal\tmgmt\TranslatorPluginUiBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

