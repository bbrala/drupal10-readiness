diff --git a/demo_fb_messenger_bot/src/Workflow/DemoFBMessengerBotWorkflow.php b/demo_fb_messenger_bot/src/Workflow/DemoFBMessengerBotWorkflow.php
index 3c9eb76..74b242a 100755
--- a/demo_fb_messenger_bot/src/Workflow/DemoFBMessengerBotWorkflow.php
+++ b/demo_fb_messenger_bot/src/Workflow/DemoFBMessengerBotWorkflow.php
@@ -25,13 +25,13 @@ class DemoFBMessengerBotWorkflow extends FBMessengerBotWorkflow {
    *
    * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\fb_messenger_bot\Conversation\ConversationFactoryInterface $conversationFactory
+   * @param ConversationFactoryInterface $conversationFactory
    *   The conversation factory.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $stringTranslation
+   * @param TranslationInterface $stringTranslation
    *   The string translation service.
    * @param FacebookService $fbService
    *   The facebook service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(ConfigFactoryInterface $configFactory, ConversationFactoryInterface $conversationFactory, TranslationInterface $stringTranslation, FacebookService $fbService, LoggerInterface $logger) {
diff --git a/src/Bot/BotTrait.php b/src/Bot/BotTrait.php
index 757a2e0..45ee464 100755
--- a/src/Bot/BotTrait.php
+++ b/src/Bot/BotTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\fb_messenger_bot\Bot;
 
+use Drupal\fb_messenger_bot\Conversation\ConversationFactoryInterface;
+use Drupal\fb_messenger_bot\FacebookService;
 use Drupal\fb_messenger_bot\Workflow\BotWorkflowInterface;
 
 /**
@@ -14,21 +16,21 @@ trait BotTrait {
   /**
    * The conversation factory.
    *
-   * @var \Drupal\fb_messenger_bot\Conversation\ConversationFactoryInterface
+   * @var ConversationFactoryInterface
    */
   protected $conversationFactory;
 
   /**
    * The Workflow the bot will use.
    *
-   * @var \Drupal\fb_messenger_bot\Workflow\BotWorkflowInterface
+   * @var BotWorkflowInterface
    */
   protected $workflow;
 
   /**
    * The Facebook Service.
    *
-   * @var \Drupal\fb_messenger_bot\FacebookService
+   * @var FacebookService
    */
   protected $fbService;
 
diff --git a/src/Controller/ContactController.php b/src/Controller/ContactController.php
index 44cfd2e..b83a033 100755
--- a/src/Controller/ContactController.php
+++ b/src/Controller/ContactController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\fb_messenger_bot\Controller;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Queue\QueueFactory;
@@ -21,7 +23,7 @@ class ContactController extends ControllerBase {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request $request
+   * @var Request $request
    */
   public $request;
 
@@ -35,28 +37,28 @@ class ContactController extends ControllerBase {
   /**
    * Logging channel to use for writing log events.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * Facebook Service.
    *
-   * @var \Drupal\fb_messenger_bot\FacebookService
+   * @var FacebookService
    */
   protected $fbService;
 
   /**
    * Facebook Bot.
    *
-   * @var \Drupal\fb_messenger_bot\Bot\FBBot
+   * @var FBBot
    */
   protected $fbBot;
 
   /**
    * The incoming messages queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $incomingMessageQueue;
 
@@ -101,7 +103,7 @@ class ContactController extends ControllerBase {
   /**
    * Route responder for the webhook/contact path.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   An HTTP response object.
    */
   public function contact() {
@@ -146,7 +148,7 @@ class ContactController extends ControllerBase {
   /**
    * Process an incoming GET method request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   An HTTP response object.
    */
   public function parseGet() {
@@ -157,7 +159,7 @@ class ContactController extends ControllerBase {
   /**
    * Process an incoming POST method request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   An HTTP response object.
    */
   public function parsePost() {
diff --git a/src/Conversation/ConversationFactory.php b/src/Conversation/ConversationFactory.php
index 641f4f7..af31ebc 100755
--- a/src/Conversation/ConversationFactory.php
+++ b/src/Conversation/ConversationFactory.php
@@ -17,14 +17,14 @@ class ConversationFactory implements ConversationFactoryInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * ConversationFactory constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
diff --git a/src/FacebookService.php b/src/FacebookService.php
index faa166e..f5e2b14 100755
--- a/src/FacebookService.php
+++ b/src/FacebookService.php
@@ -9,6 +9,7 @@
 
 namespace Drupal\fb_messenger_bot;
 
+use Symfony\Component\HttpFoundation\Request;
 use GuzzleHttp\Exception\RequestException;
 use Drupal\Component\Serialization\Json;
 use GuzzleHttp\ClientInterface;
@@ -34,14 +35,14 @@ class FacebookService {
   /**
    * The HTTP client to make calls to Facebook with.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -53,20 +54,20 @@ class FacebookService {
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\Request $request
+   * @var Request $request
    */
   public $request;
 
   /**
    * Constructs a FacebookService.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \GuzzleHttp\ClientInterface $httpClient
+   * @param ClientInterface $httpClient
    *   A Guzzle client object.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The request stack.
    */
   function __construct(ConfigFactoryInterface $configFactory, ClientInterface $httpClient, LoggerInterface $logger, RequestStack $request) {
@@ -83,7 +84,7 @@ class FacebookService {
   /**
    * Respond to Facebook's challenge method.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   public function challenge() {
     $request_query = $this->request->query;
diff --git a/src/Workflow/BotWorkflowTrait.php b/src/Workflow/BotWorkflowTrait.php
index 9bfc76c..bd239f7 100755
--- a/src/Workflow/BotWorkflowTrait.php
+++ b/src/Workflow/BotWorkflowTrait.php
@@ -181,7 +181,7 @@ trait BotWorkflowTrait {
    *
    * @param array $receivedMessage
    *   Array of the incoming message from the user.
-   * @param \Drupal\fb_messenger_bot\Conversation\BotConversationInterface $conversation
+   * @param BotConversationInterface $conversation
    *   The conversation being processed.
    *
    * @return array
@@ -196,7 +196,7 @@ trait BotWorkflowTrait {
    *
    * @param array $receivedMessage
    *   Array of the incoming message from the user.
-   * @param \Drupal\fb_messenger_bot\Conversation\BotConversationInterface $conversation
+   * @param BotConversationInterface $conversation
    *   The conversation being processed.
    *
    * @return array
@@ -211,12 +211,11 @@ trait BotWorkflowTrait {
    *
    * @param array $receivedMessage
    *   Array of the incoming message from the user.
-   * @param \Drupal\fb_messenger_bot\Conversation\BotConversationInterface $conversation
+   * @param BotConversationInterface $conversation
    *   The conversation being processed.
    *
    * @return array
    *   Array of 0 or more MessageInterface objects to send to the user.
-   *
    */
   protected function checkDisallowedMessageType(array $receivedMessage, BotConversationInterface &$conversation) {
     return array();
diff --git a/src/Workflow/FBMessengerBotWorkflow.php b/src/Workflow/FBMessengerBotWorkflow.php
index c30d9e0..e3ca012 100755
--- a/src/Workflow/FBMessengerBotWorkflow.php
+++ b/src/Workflow/FBMessengerBotWorkflow.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\fb_messenger_bot\Workflow;
 
+use Drupal\fb_messenger_bot\Message\MessageInterface;
 use Drupal\fb_messenger_bot\Conversation\BotConversationInterface;
 use Drupal\fb_messenger_bot\Conversation\ConversationFactoryInterface;
 use Drupal\fb_messenger_bot\FacebookService;
@@ -24,17 +25,17 @@ class FBMessengerBotWorkflow implements BotWorkflowInterface {
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\fb_messenger_bot\Conversation\ConversationFactoryInterface;
+   * @var ConversationFactoryInterface ;
    */
   protected $conversationFactory;
 
   /**
-   * @var \Drupal\fb_messenger_bot\FacebookService
+   * @var FacebookService
    */
   protected $fbService;
 
   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -53,13 +54,13 @@ class FBMessengerBotWorkflow implements BotWorkflowInterface {
    *
    * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\fb_messenger_bot\Conversation\ConversationFactoryInterface $conversationFactory
+   * @param ConversationFactoryInterface $conversationFactory
    *   The conversation factory.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $stringTranslation
+   * @param TranslationInterface $stringTranslation
    *   The string translation service.
    * @param FacebookService $fbService
    *   The facebook service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct(ConfigFactoryInterface $configFactory, ConversationFactoryInterface $conversationFactory, TranslationInterface $stringTranslation, FacebookService $fbService, LoggerInterface $logger) {
@@ -221,9 +222,8 @@ class FBMessengerBotWorkflow implements BotWorkflowInterface {
   /**
    * Set up the message structure for the generic validation failure message.
    *
-   * @return \Drupal\fb_messenger_bot\Message\MessageInterface
+   * @return MessageInterface
    *   The message to send back to the user.
-   *
    */
   public static function getGenericValidationFailMessage() {
     $outgoingMessage = new TextMessage("Sorry, I couldn't process that. Can you please try that step again?");
@@ -267,7 +267,7 @@ class FBMessengerBotWorkflow implements BotWorkflowInterface {
   /**
    * Set up the message structure for the zip code validation failure message.
    *
-   * @return \Drupal\fb_messenger_bot\Message\MessageInterface
+   * @return MessageInterface
    *   The message to send back to the user.
    */
   public static function getZipCodeValidationFailMessage() {
@@ -301,7 +301,7 @@ class FBMessengerBotWorkflow implements BotWorkflowInterface {
   /**
    * Set up the message structure for postback message validation failures.
    *
-   * @return \Drupal\fb_messenger_bot\Message\MessageInterface
+   * @return MessageInterface
    *   The message to send back to the user.
    */
   public static function getPostbackValidationFailMessage() {
@@ -335,7 +335,7 @@ class FBMessengerBotWorkflow implements BotWorkflowInterface {
   /**
    * Set up the message structure for the phone validation failure message.
    *
-   * @return \Drupal\fb_messenger_bot\Message\MessageInterface
+   * @return MessageInterface
    *   The message to send back to the user.
    */
   public static function getPhoneValidationFailMessage() {
@@ -369,7 +369,7 @@ class FBMessengerBotWorkflow implements BotWorkflowInterface {
   /**
    * Set up the message structure for the email validation failure message.
    *
-   * @return \Drupal\fb_messenger_bot\Message\MessageInterface
+   * @return MessageInterface
    *   The message to send back to the user.
    */
   public static function getEmailValidationFailMessage() {
@@ -456,7 +456,7 @@ class FBMessengerBotWorkflow implements BotWorkflowInterface {
    * @param BotConversationInterface $conversation
    *   The Conversation to start over. Will be destroyed and rebuilt.
    *
-   * @return \Drupal\fb_messenger_bot\Message\MessageInterface
+   * @return MessageInterface
    *   Returns the start over message.
    */
   protected function startOver(BotConversationInterface &$conversation) {
diff --git a/tests/src/Kernel/BotKernelTest.php b/tests/src/Kernel/BotKernelTest.php
index 2483a18..9ae4333 100755
--- a/tests/src/Kernel/BotKernelTest.php
+++ b/tests/src/Kernel/BotKernelTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\fb_messenger_bot\Kernel;
 
+use Drupal\fb_messenger_bot\Bot\FBBot;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -21,14 +22,14 @@ class BotKernelTest extends KernelTestBase {
   /**
    * The bot instance.
    *
-   * @var \Drupal\fb_messenger_bot\Bot\FBBot
+   * @var FBBot
    */
   protected $bot;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('fb_messenger_bot_conversation');
     $this->installConfig(static::$modules);
diff --git a/tests/src/Kernel/ConversationFactoryTest.php b/tests/src/Kernel/ConversationFactoryTest.php
index 078e26f..811ebfe 100755
--- a/tests/src/Kernel/ConversationFactoryTest.php
+++ b/tests/src/Kernel/ConversationFactoryTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\fb_messenger_bot\Kernel;
 
+use Drupal\fb_messenger_bot\Bot\FBBot;
 use Drupal\fb_messenger_bot\Entity\BotConversation;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -22,7 +23,7 @@ class ConversationFactoryTest extends KernelTestBase {
   /**
    * The bot instance.
    *
-   * @var \Drupal\fb_messenger_bot\Bot\FBBot
+   * @var FBBot
    */
   protected $conversationFactory;
 
@@ -35,7 +36,7 @@ class ConversationFactoryTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('fb_messenger_bot_conversation');
 
diff --git a/tests/src/Kernel/FBMessengerBotWorkflowKernelTest.php b/tests/src/Kernel/FBMessengerBotWorkflowKernelTest.php
index b224fa3..5e2d12e 100755
--- a/tests/src/Kernel/FBMessengerBotWorkflowKernelTest.php
+++ b/tests/src/Kernel/FBMessengerBotWorkflowKernelTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\fb_messenger_bot\Kernel;
 
+use Drupal\fb_messenger_bot\Conversation\ConversationFactory;
+use Drupal\fb_messenger_bot\Conversation\BotConversationInterface;
+use Drupal\fb_messenger_bot\FacebookService;
+use Psr\Log\LoggerInterface;
 use Drupal\fb_messenger_bot\Entity\BotConversation;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\fb_messenger_bot\Workflow\FBMessengerBotWorkflow;
@@ -24,7 +28,7 @@ class FBMessengerBotWorkflowKernelTest extends KernelTestBase {
   /**
    * A conversation factory.
    *
-   * @var \Drupal\fb_messenger_bot\Conversation\ConversationFactory
+   * @var ConversationFactory
    */
   protected $conversationFactory;
 
@@ -37,31 +41,31 @@ class FBMessengerBotWorkflowKernelTest extends KernelTestBase {
   /**
    * An instantiated Conversation for later use.
    *
-   * @var \Drupal\fb_messenger_bot\Conversation\BotConversationInterface
+   * @var BotConversationInterface
    */
   protected $existingConversation;
 
   /**
-   * @var \Drupal\fb_messenger_bot\FacebookService
+   * @var FacebookService
    */
   protected $fbService;
 
   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * An instantiated Workflow for later use.
    *
-   * @var \Drupal\fb_messenger_bot\Workflow\FBMessengerBotWorkflow
+   * @var FBMessengerBotWorkflow
    */
   protected $myWorkflow;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('fb_messenger_bot_conversation');
     $this->installConfig(static::$modules);
diff --git a/tests/src/Kernel/FBMessengerBotWorkflowProcessConversationTest.php b/tests/src/Kernel/FBMessengerBotWorkflowProcessConversationTest.php
index 4f41246..d18cf4c 100755
--- a/tests/src/Kernel/FBMessengerBotWorkflowProcessConversationTest.php
+++ b/tests/src/Kernel/FBMessengerBotWorkflowProcessConversationTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\fb_messenger_bot\Kernel;
 
+use Drupal\fb_messenger_bot\Workflow\BotWorkflowInterface;
+use Drupal\fb_messenger_bot\Conversation\ConversationFactoryInterface;
+use Drupal\fb_messenger_bot\Conversation\BotConversationInterface;
+use Psr\Log\LoggerInterface;
+use Drupal\fb_messenger_bot\Bot\BotInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\fb_messenger_bot\FacebookService;
 
@@ -24,14 +29,14 @@ class FBMessengerBotWorkflowProcessConversationTest extends KernelTestBase {
   /**
    * The Bot Workflow.
    *
-   * @var \Drupal\fb_messenger_bot\Workflow\BotWorkflowInterface
+   * @var BotWorkflowInterface
    */
   protected $workflow;
 
   /**
    * The Conversation factory.
    *
-   * @var \Drupal\fb_messenger_bot\Conversation\ConversationFactoryInterface
+   * @var ConversationFactoryInterface
    */
   protected $conversationFactory;
 
@@ -45,33 +50,33 @@ class FBMessengerBotWorkflowProcessConversationTest extends KernelTestBase {
   /**
    * An instantiated Conversation, using the reusable uid.
    *
-   * @var \Drupal\fb_messenger_bot\Conversation\BotConversationInterface
+   * @var BotConversationInterface
    */
   protected $conversation;
 
   /**
    * An instantiated Conversation for later use.
    *
-   * @var \Drupal\fb_messenger_bot\Conversation\BotConversationInterface
+   * @var BotConversationInterface
    */
   protected $newConversation;
 
   /**
    * The Facebook Service.
    *
-   * @var \Drupal\fb_messenger_bot\FacebookService
+   * @var FacebookService
    */
   protected $fbService;
 
   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The Bot instance.
    *
-   * @var \Drupal\fb_messenger_bot\Bot\BotInterface
+   * @var BotInterface
    */
   protected $bot;
 
@@ -85,7 +90,7 @@ class FBMessengerBotWorkflowProcessConversationTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('fb_messenger_bot_conversation');
     $this->installConfig(static::$modules);
diff --git a/tests/src/Kernel/FacebookServiceTranslateRequestTest.php b/tests/src/Kernel/FacebookServiceTranslateRequestTest.php
index 706fc29..6f66f1e 100755
--- a/tests/src/Kernel/FacebookServiceTranslateRequestTest.php
+++ b/tests/src/Kernel/FacebookServiceTranslateRequestTest.php
@@ -22,16 +22,16 @@ class FacebookServiceTranslateRequestTest extends KernelTestBase {
   public static $modules = ['fb_messenger_bot'];
 
  /**
-  * Facebook service object.
-  *
-  * @var \Drupal\fb_messenger_bot\FacebookService
-  */
+   * Facebook service object.
+   *
+   * @var FacebookService
+   */
   public $service;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->service = $this->container->get('fb_messenger_bot.fb_service');
   }
diff --git a/tests/src/Unit/ContactControllerTest.php b/tests/src/Unit/ContactControllerTest.php
index 059afc1..854ddc4 100755
--- a/tests/src/Unit/ContactControllerTest.php
+++ b/tests/src/Unit/ContactControllerTest.php
@@ -25,7 +25,7 @@ class ContactControllerTest extends UnitTestCase {
    * Set up a controller so we dont have to build it each time.
    */
 
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // stolen from Drupal\Tests\Core\Datetime\DateTest::setUp()
@@ -39,33 +39,24 @@ class ContactControllerTest extends UnitTestCase {
     $container->set('config.factory', $configFactory);
     \Drupal::setContainer($container);
 
-    $mockRequest = $this->getMockBuilder('Symfony\Component\HttpFoundation\Request')
-      ->getMock();
+    $mockRequest = $this->createMock('Symfony\Component\HttpFoundation\Request');
     $mockRequest->method('getContent')
       ->willReturn($this->getJunkJSON());
 
-    $mockRequestStack = $this->getMockBuilder('Symfony\Component\HttpFoundation\RequestStack')
-      ->getMock();
+    $mockRequestStack = $this->createMock('Symfony\Component\HttpFoundation\RequestStack');
     $mockRequestStack->method('getCurrentRequest')
       ->willReturn($mockRequest);
 
-    $mockLogger = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannelInterface')
-      ->getMock();
+    $mockLogger = $this->createMock('Drupal\Core\Logger\LoggerChannelInterface');
     $mockLogger->method('debug')
       ->will($this->returnCallback(function($input) {
         print $input;
       }));
 
-    $mockFbService = $this->getMockBuilder('Drupal\fb_messenger_bot\FacebookService')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $mockQueueFactory = $this->getMockBuilder('Drupal\Core\Queue\QueueFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockFbService = $this->createMock('Drupal\fb_messenger_bot\FacebookService');
+    $mockQueueFactory = $this->createMock('Drupal\Core\Queue\QueueFactory');
 
-    $mockFBBot = $this->getMockBuilder('Drupal\fb_messenger_bot\Bot\FBBot')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockFBBot = $this->createMock('Drupal\fb_messenger_bot\Bot\FBBot');
 
     $this->controller = new ContactController($mockRequestStack, $mockLogger, $mockFbService, $mockQueueFactory, $mockFBBot);
 
diff --git a/tests/src/Unit/Message/ButtonMessageTest.php b/tests/src/Unit/Message/ButtonMessageTest.php
index 624660f..18cf9e3 100755
--- a/tests/src/Unit/Message/ButtonMessageTest.php
+++ b/tests/src/Unit/Message/ButtonMessageTest.php
@@ -28,7 +28,7 @@ class ButtonMessageTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->text = 'A sample string to accompany button test objects.';
     $this->postbackButton = new PostbackButton('Postback Button', 'POSTBACK_PAYLOAD');
@@ -62,10 +62,9 @@ class ButtonMessageTest extends UnitTestCase {
 
   /**
    * Test invalidArgumentException is thrown when the $buttons parameter contains anything other than \Drupal\fb_messenger_bot\Message\ButtonBase buttons.
-   *
-   * @expectedException InvalidArgumentException
    */
   public function testInvalidButtonObjectThrowsException() {
+    $this->expectException(\InvalidArgumentException::class);
     $button = ['foo' => 'bar'];
     new ButtonMessage($this->text, $button);
     $this->expectException(InvalidArgumentException::class);
diff --git a/tests/src/Unit/Message/FacebookGenericMessageTest.php b/tests/src/Unit/Message/FacebookGenericMessageTest.php
index 8d3e232..1629672 100755
--- a/tests/src/Unit/Message/FacebookGenericMessageTest.php
+++ b/tests/src/Unit/Message/FacebookGenericMessageTest.php
@@ -21,7 +21,7 @@ class FacebookGenericMessageTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->elements = array(
       array(
diff --git a/tests/src/Unit/Message/PostbackButtonTest.php b/tests/src/Unit/Message/PostbackButtonTest.php
index 5bdc69f..d4a42fb 100755
--- a/tests/src/Unit/Message/PostbackButtonTest.php
+++ b/tests/src/Unit/Message/PostbackButtonTest.php
@@ -20,7 +20,7 @@ class PostbackButtonTest extends UnitTestCase {
   public $payload;
   public $button;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->title = 'URL Button';
     $this->postback = 'http://www.example.com';
     $this->button = new PostbackButton($this->title, $this->payload);
diff --git a/tests/src/Unit/Message/TextMessageTest.php b/tests/src/Unit/Message/TextMessageTest.php
index 9d9378e..874b856 100755
--- a/tests/src/Unit/Message/TextMessageTest.php
+++ b/tests/src/Unit/Message/TextMessageTest.php
@@ -22,7 +22,7 @@ class TextMessageTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->text = 'A sample string for testing.';
     $this->textMessage = new TextMessage($this->text);
diff --git a/tests/src/Unit/Message/UrlButtonTest.php b/tests/src/Unit/Message/UrlButtonTest.php
index 9c43257..3f5062e 100755
--- a/tests/src/Unit/Message/UrlButtonTest.php
+++ b/tests/src/Unit/Message/UrlButtonTest.php
@@ -20,7 +20,7 @@ class UrlButtonTest extends UnitTestCase {
   public $url;
   public $button;
 
-  public function setUp() {
+  public function setUp(): void {
     $this->title = 'URL Button';
     $this->url = 'http://www.example.com';
     $this->button = new UrlButton($this->title, $this->url);
diff --git a/tests/src/Unit/Message/VideoMessageTest.php b/tests/src/Unit/Message/VideoMessageTest.php
index 6fba044..9ec8c3d 100755
--- a/tests/src/Unit/Message/VideoMessageTest.php
+++ b/tests/src/Unit/Message/VideoMessageTest.php
@@ -16,10 +16,9 @@ class VideoMessageTest extends UnitTestCase {
    * Tests that the constructor rejects non URL input.
    *
    * @dataProvider invalidUrlProvider
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testInvalidUrls($url) {
+    $this->expectException(\InvalidArgumentException::class);
     $videoMessage = new VideoMessage($url);
   }
 
diff --git a/tests/src/Unit/Step/BotWorkflowStepTest.php b/tests/src/Unit/Step/BotWorkflowStepTest.php
index b40a641..3e2404e 100755
--- a/tests/src/Unit/Step/BotWorkflowStepTest.php
+++ b/tests/src/Unit/Step/BotWorkflowStepTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\fb_messenger_bot\Unit\Step;
 
+use Drupal\fb_messenger_bot\Message\MessageInterface;
+use Drupal\fb_messenger_bot\Step\BotWorkflowStepInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\fb_messenger_bot\Message\TextMessage;
 use Drupal\fb_messenger_bot\Step\BotWorkflowStep;
@@ -16,7 +18,7 @@ class BotWorkflowStepTest extends UnitTestCase {
   /**
    * An instance of MessageInterface.
    *
-   * @var \Drupal\fb_messenger_bot\Message\MessageInterface
+   * @var MessageInterface
    */
   public $mockMessage;
 
@@ -30,23 +32,22 @@ class BotWorkflowStepTest extends UnitTestCase {
   /**
    * A step instantiated with a mock message and the default message callback.
    *
-   * @var \Drupal\fb_messenger_bot\Step\BotWorkflowStepInterface
+   * @var BotWorkflowStepInterface
    */
   public $questionMessageStep;
 
   /**
    * A step instantiated with a custom question message callback.
    *
-   * @var \Drupal\fb_messenger_bot\Step\BotWorkflowStepInterface
+   * @var BotWorkflowStepInterface
    */
   public $questionCallbackStep;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
-    $this->mockMessage = $this->getMockBuilder('\Drupal\fb_messenger_bot\Message\MessageInterface')
-      ->getMock();
+  public function setUp(): void {
+    $this->mockMessage = $this->createMock('\Drupal\fb_messenger_bot\Message\MessageInterface');
 
     $this->mockMessageCallback = function($arg) {
       return $arg;
@@ -104,10 +105,9 @@ class BotWorkflowStepTest extends UnitTestCase {
 
   /**
    * Verify setting the validation with non-callable fails.
-   *
-   * @expectedException PHPUnit_Framework_Error
    */
   public function testSetValidationCallbackWithNonCallable() {
+    $this->expectException('PHPUnit_Framework_Error');
     $callback = "string";
     $this->assertSame($this->questionMessageStep, $this->questionMessageStep->setValidationCallback($callback), 'Error: successfully set validationCallback to a non-callable.');
   }
@@ -116,8 +116,7 @@ class BotWorkflowStepTest extends UnitTestCase {
    * Verify we can set the invalid message.
    */
   public function testSetInvalidMessage() {
-    $mockMessage = $this->getMockBuilder('Drupal\fb_messenger_bot\Message\MessageInterface')
-      ->getMock();
+    $mockMessage = $this->createMock('Drupal\fb_messenger_bot\Message\MessageInterface');
     $this->assertSame($this->questionMessageStep, $this->questionMessageStep->setInvalidResponseMessage($mockMessage), 'Failed to set invalidMessage to an instance of the MessageInterface.');
   }
 
diff --git a/tests/src/Unit/Workflow/BotWorkflowTraitTest.php b/tests/src/Unit/Workflow/BotWorkflowTraitTest.php
index d60c616..743fd83 100755
--- a/tests/src/Unit/Workflow/BotWorkflowTraitTest.php
+++ b/tests/src/Unit/Workflow/BotWorkflowTraitTest.php
@@ -33,7 +33,7 @@ class BotWorkflowTraitTest extends UnitTestCase {
    * workflow's full implementation and is closer to the method defined in the
    * trait.
    */
-  public function setUp() {
+  public function setUp(): void {
     // Instantiate a mock ConfigFactory.
     $configFactory = $this->getConfigFactoryStub([
       'fb_messenger_bot.settings' => [
@@ -43,25 +43,18 @@ class BotWorkflowTraitTest extends UnitTestCase {
 
     // Instantiate mock immutableConfig for configFactory stub's get() method.
     // @see Drupal\fb_messenger_bot\Workflow\FBMessengerBotWorkflow::buildSteps().
-    $immutableConfig = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $immutableConfig = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
 
     $configFactory->method('get')
       ->willReturn($immutableConfig);
 
-    $conversationFactory = $this->getMockBuilder('\Drupal\fb_messenger_bot\Conversation\ConversationFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $conversationFactory = $this->createMock('\Drupal\fb_messenger_bot\Conversation\ConversationFactory');
 
     $stringTranslation = $this->getStringTranslationStub();
 
-    $mockFbService = $this->getMockBuilder('Drupal\fb_messenger_bot\FacebookService')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockFbService = $this->createMock('Drupal\fb_messenger_bot\FacebookService');
 
-    $mockLogger = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannelInterface')
-      ->getMock();
+    $mockLogger = $this->createMock('Drupal\Core\Logger\LoggerChannelInterface');
     $mockLogger->method('debug')
       ->will($this->returnCallback(function($input) {
         print $input;
@@ -89,8 +82,7 @@ class BotWorkflowTraitTest extends UnitTestCase {
    */
   public function testSetStepsAcceptsArray() {
 
-    $mockMessage = $this->getMockBuilder('Drupal\fb_messenger_bot\Message\MessageInterface')
-      ->getMock();
+    $mockMessage = $this->createMock('Drupal\fb_messenger_bot\Message\MessageInterface');
 
     $inputArray = array();
 
@@ -110,11 +102,10 @@ class BotWorkflowTraitTest extends UnitTestCase {
    * @dataProvider badDataProvider
    *
    * @parameter array $input array of bad data types
-   *
-   * @expectedException \InvalidArgumentException
    */
   public function testSetStepsRejectsBadTypes($input) {
 
+    $this->expectException(\InvalidArgumentException::class);
     $this->workflow->setSteps($input);
 
   }
@@ -162,9 +153,7 @@ class BotWorkflowTraitTest extends UnitTestCase {
       'message_content' => 'start over',
     );
 
-    $mockConversation = $this->getMockBuilder('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockConversation = $this->createMock('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface');
 
     $this->assertTrue($this->invokeMethod($this->workflow, 'preprocessSpecialMessages', array($incoming, &$mockConversation)));
 
@@ -203,9 +192,7 @@ class BotWorkflowTraitTest extends UnitTestCase {
     );
 
     // Set up a Conversation mock for the Workflow to process.
-    $mockConversation = $this->getMockBuilder('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockConversation = $this->createMock('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface');
 
     // Check that the return value is the array we set above when mocking the
     // checkDisallowedMessageType method.
@@ -224,9 +211,7 @@ class BotWorkflowTraitTest extends UnitTestCase {
    */
   public function testProcessConversationReturnValue() {
 
-    $mockConversation = $this->getMockBuilder('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mockConversation = $this->createMock('\Drupal\fb_messenger_bot\Conversation\BotConversationInterface');
     $mockConversation->method('getLastStep')->willReturn('welcome');
 
     $incomingMessage = array(
