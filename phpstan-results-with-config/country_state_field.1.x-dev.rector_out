modules/contrib/country_state_field/city.page.inc
modules/contrib/country_state_field/country.page.inc
modules/contrib/country_state_field/country_state_field.module
modules/contrib/country_state_field/src/CityAccessControlHandler.php
modules/contrib/country_state_field/src/CityHtmlRouteProvider.php
modules/contrib/country_state_field/src/CityListBuilder.php
modules/contrib/country_state_field/src/CityTranslationHandler.php
modules/contrib/country_state_field/src/Controller/AutoCompleteController.php
modules/contrib/country_state_field/src/CountryAccessControlHandler.php
modules/contrib/country_state_field/src/CountryHtmlRouteProvider.php
modules/contrib/country_state_field/src/CountryListBuilder.php
modules/contrib/country_state_field/src/CountryTranslationHandler.php
modules/contrib/country_state_field/src/Entity/City.php
modules/contrib/country_state_field/src/Entity/CityInterface.php
modules/contrib/country_state_field/src/Entity/CityViewsData.php
modules/contrib/country_state_field/src/Entity/Country.php
modules/contrib/country_state_field/src/Entity/CountryInterface.php
modules/contrib/country_state_field/src/Entity/CountryViewsData.php
modules/contrib/country_state_field/src/Entity/State.php
modules/contrib/country_state_field/src/Entity/StateInterface.php
modules/contrib/country_state_field/src/Entity/StateViewsData.php
modules/contrib/country_state_field/src/Form/CityDeleteForm.php
modules/contrib/country_state_field/src/Form/CityForm.php
modules/contrib/country_state_field/src/Form/CitySettingsForm.php
modules/contrib/country_state_field/src/Form/CountryDeleteForm.php
modules/contrib/country_state_field/src/Form/CountryForm.php
modules/contrib/country_state_field/src/Form/CountrySettingsForm.php
modules/contrib/country_state_field/src/Form/SettingsForm.php
modules/contrib/country_state_field/src/Form/StateDeleteForm.php
modules/contrib/country_state_field/src/Form/StateForm.php
modules/contrib/country_state_field/src/Form/StateSettingsForm.php
modules/contrib/country_state_field/src/Plugin/Field/FieldFormatter/ContryStateFormatter.php
modules/contrib/country_state_field/src/Plugin/Field/FieldType/CountryStateType.php
modules/contrib/country_state_field/src/Plugin/Field/FieldWidget/CountryStateAutocompleteWidget.php
modules/contrib/country_state_field/src/Plugin/Field/FieldWidget/CountryStateWidget.php
modules/contrib/country_state_field/src/StateAccessControlHandler.php
modules/contrib/country_state_field/src/StateHtmlRouteProvider.php
modules/contrib/country_state_field/src/StateListBuilder.php
modules/contrib/country_state_field/src/StateTranslationHandler.php
modules/contrib/country_state_field/state.page.inc

12 files with changes
=====================

1) modules/contrib/country_state_field/src/StateHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/country_state_field/src/StateAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\country_state_field;

+use Drupal\country_state_field\Entity\StateInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\country_state_field\Entity\StateInterface $entity */
+    /** @var StateInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/country_state_field/src/Plugin/Field/FieldWidget/CountryStateWidget.php:241

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   A form that be modified.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The values of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/country_state_field/src/Plugin/Field/FieldFormatter/ContryStateFormatter.php:73

    ---------- begin diff ----------
@@ @@
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/country_state_field/src/Form/StateSettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/country_state_field/src/Form/SettingsForm.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a MyClass object.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, MessengerInterface $messenger, TranslationInterface $string_translation) {
@@ @@
    */
   public static function importCountry(array &$context) {

-    $module_path = drupal_get_path('module', 'country_state_field');
+    $module_path = \Drupal::service('extension.list.module')->getPath('country_state_field');

     // Importando os dados dos paises.
     $countries = json_decode(file_get_contents($module_path . '/data/country_en.json'));
@@ @@
    */
   public static function importState(array &$context) {

-    $module_path = drupal_get_path('module', 'country_state_field');
+    $module_path = \Drupal::service('extension.list.module')->getPath('country_state_field');

     // Importando os dados dos estados.
     $states = json_decode(file_get_contents($module_path . '/data/state_en.json'));
@@ @@
    */
   public static function importCity(array &$context) {

-    $module_path = drupal_get_path('module', 'country_state_field');
+    $module_path = \Drupal::service('extension.list.module')->getPath('country_state_field');

     // Importando os dados das cidade.
     $cities = json_decode(file_get_contents($module_path . '/data/city_en.json'));
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/country_state_field/src/Form/CountrySettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/country_state_field/src/Form/CitySettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/country_state_field/src/CountryHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/country_state_field/src/CountryAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\country_state_field;

+use Drupal\country_state_field\Entity\CountryInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\country_state_field\Entity\CountryInterface $entity */
+    /** @var CountryInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/country_state_field/src/CityHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/country_state_field/src/CityAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\country_state_field;

+use Drupal\country_state_field\Entity\CityInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\country_state_field\Entity\CityInterface $entity */
+    /** @var CityInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 12 files have been changed by Rector                                      

