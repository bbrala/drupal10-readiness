modules/contrib/passwordless/passwordless.api.php
modules/contrib/passwordless/passwordless.install
modules/contrib/passwordless/passwordless.module
modules/contrib/passwordless/src/Controller/PasswordlessController.php
modules/contrib/passwordless/src/Controller/PasswordlessUserController.php
modules/contrib/passwordless/src/Form/PasswordlessLoginForm.php
modules/contrib/passwordless/src/Form/PasswordlessSettingsForm.php
modules/contrib/passwordless/src/Routing/RouteSubscriber.php

3 files with changes
====================

1) modules/contrib/passwordless/src/Controller/PasswordlessUserController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\passwordless\Controller;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\user\Controller\UserController;
 use Symfony\Component\HttpFoundation\Request;
@@ @@
       }
       // A different user is already logged in on the computer.
       else {
-        /** @var \Drupal\user\UserInterface $reset_link_user */
+        /** @var UserInterface $reset_link_user */
         if ($reset_link_user = $this->userStorage->load($uid)) {
           $this->messenger()
             ->addMessage($this->t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href=":logout">log out</a> and try using the link again.',
@@ @@
           ]);
           $this->messenger()
             ->addMessage($this->t('You have just used your one-time login link.'));
-          $user->pass = sha1(user_password());
+          $user->pass = sha1(\Drupal::service('password_generator')->generate());
           $user->save();
           $route_name = 'user.page';
           $route_parameters = [];
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/passwordless/src/Controller/PasswordlessController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\passwordless\Controller;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Url;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Access\AccessResult;
@@ @@
    * Checks access to the help page based on whether the current user
    * can access content, and whether the help page is enabled in settings.
    *
-   * @param Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function helpPageAccess(AccountInterface $account) {
@@ @@
    * Checks access based on whether the current user is anonymous,
    * or has permission to configure the module.
    *
-   * @param Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function sentPageAccess(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/passwordless/passwordless.module:58

    ---------- begin diff ----------
@@ @@
       }
       // Hides the password field, and populates it with a random password
       $form['account']['pass']['#type'] = 'value';
-      $form['account']['pass']['#value'] = sha1(user_password());
+      $form['account']['pass']['#value'] = sha1(\Drupal::service('password_generator')->generate());
     break;

     case 'user_form' :
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

