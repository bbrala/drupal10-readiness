modules/contrib/protected_download/protected_download.tokens.inc
modules/contrib/protected_download/src/AlignedTtlPolicy.php
modules/contrib/protected_download/src/Controller/DownloadController.php
modules/contrib/protected_download/src/ExactTtlPolicy.php
modules/contrib/protected_download/src/LinkGenerator.php
modules/contrib/protected_download/src/LinkGeneratorInterface.php
modules/contrib/protected_download/src/PathProcessor/ProtectedDownloadProcessor.php
modules/contrib/protected_download/src/PolicyInterface.php
modules/contrib/protected_download/src/PolicyRepository.php
modules/contrib/protected_download/src/PolicyRepositoryInterface.php
modules/contrib/protected_download/src/ProtectedDownloadServiceProvider.php
modules/contrib/protected_download/src/SecurityKey.php
modules/contrib/protected_download/src/SecurityKeyInterface.php
modules/contrib/protected_download/src/StreamWrapper/ProtectedStream.php
modules/contrib/protected_download/tests/src/Functional/TokenTest.php

8 files with changes
====================

1) modules/contrib/protected_download/tests/src/Functional/TokenTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\protected_download\Functional;

+use Drupal\file\FileInterface;
+use Drupal\file\FileRepositoryInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Url;
 use Drupal\file\Entity\File;
@@ @@
   /**
    * A file in the private directory.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $privateFile;

@@ @@
   public function setUp(): void{
     parent::setUp(array('protected_download'));

-    /** @var \Drupal\Core\File\FileSystemInterface */
+    /** @var FileSystemInterface */
     $fileSystem = \Drupal::service('file_system');

-    /** @var \Drupal\file\FileRepositoryInterface */
+    /** @var FileRepositoryInterface */
     $fileRepository = \Drupal::service('file.repository');

     // Prepare a private file.
@@ @@
     $tokenService = \Drupal::token();
     $now = \Drupal::time()->getRequestTime();

-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+    /** @var DateFormatterInterface $date_formatter */
     $dateFormatter = \Drupal::service('date.formatter');

     $text = 'Your file is accessible until [file:protected-download-expire] using the following link [file:protected-download-url]';
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/protected_download/src/StreamWrapper/ProtectedStream.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\protected_download\StreamWrapper;

+use Drupal\protected_download\LinkGeneratorInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\Core\StreamWrapper\LocalStream;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
@@ @@
    * {@inheritdoc}
    */
   public function getExternalUrl() {
-    /** @var \Drupal\protected_download\LinkGeneratorInterface */
+    /** @var LinkGeneratorInterface */
     $linkGenerator = \Drupal::service('protected_download.link_generator');
     return $linkGenerator->generate($this->uri)->setAbsolute()->toString();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/protected_download/src/SecurityKey.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\protected_download;

+use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Datetime\Time;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Site\Settings;
@@ @@
   /**
    * The request time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The filesystem service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
    *
    * @param \Drupal\Component\Datetime\TimeInterface
    *   The request time service.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
    */
   function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/protected_download/src/PolicyRepositoryInterface.php:6

    ---------- begin diff ----------
@@ @@
   /**
    * Returns configuration for given scheme.
    *
-   * @return \Drupal\protected_download\PolicyInterface
+   * @return PolicyInterface
    */
   function getPolicy($scheme);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/protected_download/src/LinkGeneratorInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\protected_download;

+use Drupal\Core\Url;
 interface LinkGeneratorInterface
 {

  /**
-  * Generates a HMAC protected URL for the given file.
-  *
-  * @param string $uri
-  *   The file uri, e.g., private://ticket-12345.pdf.
-  * @param int $expire
-  *   (Optional) The expiry date as a UNIX timestamp.
-  *
-  * @return \Drupal\Core\Url
-  */
+   * Generates a HMAC protected URL for the given file.
+   *
+   * @param string $uri
+   *   The file uri, e.g., private://ticket-12345.pdf.
+   * @param int $expire
+   *   (Optional) The expiry date as a UNIX timestamp.
+   *
+   * @return Url
+   */
   public function generate($uri, $expire = NULL);

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/protected_download/src/LinkGenerator.php:9

    ---------- begin diff ----------
@@ @@
 {

   /**
-   * @var \Drupal\protected_download\SecurityKeyInterface
+   * @var SecurityKeyInterface
    */
   protected $securityKey;

@@ @@
   /**
    * The protected download policy repository.
    *
-   * @var \Drupal\protected_download\PolicyRepositoryInterface
+   * @var PolicyRepositoryInterface
    */
   protected $policyRepository;

@@ @@
   /**
    * The request time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/protected_download/src/Controller/DownloadController.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The download security key service.
    *
-   * @var \Drupal\protected_download\SecurityKeyInterface
+   * @var SecurityKeyInterface
    */
   protected $securityKey;

@@ @@
   /**
    * The protected download policy repository.
    *
-   * @var \Drupal\protected_download\PolicyRepositoryInterface
+   * @var PolicyRepositoryInterface
    */
   protected $policyRepository;

@@ @@
   /**
    * The request time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The http kernel
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;

@@ @@
   /**
    * Verifies an incoming request and delivers a HMAC protected file.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $scheme
    *   The URI scheme.
@@ @@
     /**
      * Resulting response.
      *
-     * @var \Symfony\Component\HttpFoundation\Response
+     * @var Response
      */
     $response = null;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/protected_download/protected_download.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\FileInterface;
+use Drupal\protected_download\PolicyRepositoryInterface;
+use Drupal\protected_download\LinkGeneratorInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 /**
  * @file
  * Provides token support for protected downloads.
@@ @@
   if ($type === 'file' && !empty($data['file'])) {
     $now = \Drupal::time()->getRequestTime();

-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $data['file'];
     $scheme = StreamWrapperManager::getScheme($file->getFileUri());

-    /** @var \Drupal\protected_download\PolicyRepositoryInterface */
+    /** @var PolicyRepositoryInterface */
     $policy_repository = \Drupal::service('protected_download.policy_repository');

     $policy = $policy_repository->getPolicy($scheme);
@@ @@
     foreach ($tokens as $name => $original) {
       switch ($name) {
         case 'protected-download-url':
-          /** @var \Drupal\protected_download\LinkGeneratorInterface */
+          /** @var LinkGeneratorInterface */
           $link_generator = \Drupal::service('protected_download.link_generator');
           $url = $link_generator->generate($file->getFileUri())
             ->setOptions($url_options)
@@ @@
           break;

         case 'protected-download-expire':
-          /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+          /** @var DateFormatterInterface $date_formatter */
           $date_formatter = \Drupal::service('date.formatter');
           $replacements[$original] = $date_formatter->format($protected_download_expire, 'medium', '', NULL, $langcode);
           break;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

