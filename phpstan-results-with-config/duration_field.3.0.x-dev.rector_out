modules/contrib/duration_field/duration_field.api.php
modules/contrib/duration_field/duration_field.install
modules/contrib/duration_field/duration_field.module
modules/contrib/duration_field/src/Drush/DurationFieldCommand.php
modules/contrib/duration_field/src/Element/DurationElement.php
modules/contrib/duration_field/src/Element/GranularityElement.php
modules/contrib/duration_field/src/Element/ProcessStatesTrait.php
modules/contrib/duration_field/src/Exception/InvalidDurationException.php
modules/contrib/duration_field/src/Plugin/DataType/DateIntervalData.php
modules/contrib/duration_field/src/Plugin/DataType/DateIntervalInterface.php
modules/contrib/duration_field/src/Plugin/DataType/GranularityStringData.php
modules/contrib/duration_field/src/Plugin/DataType/GranularityStringInterface.php
modules/contrib/duration_field/src/Plugin/DataType/Iso8601StringData.php
modules/contrib/duration_field/src/Plugin/DataType/Iso8601StringInterface.php
modules/contrib/duration_field/src/Plugin/Field/FieldFormatter/DurationHumanDisplayFormatter.php
modules/contrib/duration_field/src/Plugin/Field/FieldFormatter/DurationStringFormatter.php
modules/contrib/duration_field/src/Plugin/Field/FieldFormatter/DurationTimeFormatter.php
modules/contrib/duration_field/src/Plugin/Field/FieldType/DurationField.php
modules/contrib/duration_field/src/Plugin/Field/FieldWidget/DurationWidget.php
modules/contrib/duration_field/src/Plugin/Validation/Constraint/GranularityStringConstraint.php
modules/contrib/duration_field/src/Plugin/Validation/Constraint/GranularityStringConstraintValidator.php
modules/contrib/duration_field/src/Plugin/Validation/Constraint/Iso8601StringConstraint.php
modules/contrib/duration_field/src/Plugin/Validation/Constraint/Iso8601StringConstraintValidator.php
modules/contrib/duration_field/src/Plugin/Validation/Constraint/Iso8601StringConstraintValidatorBase.php
modules/contrib/duration_field/src/Plugin/Validation/Constraint/PhpDateIntervalConstraint.php
modules/contrib/duration_field/src/Plugin/Validation/Constraint/PhpDateIntervalConstraintValidator.php
modules/contrib/duration_field/src/Service/DurationService.php
modules/contrib/duration_field/src/Service/DurationServiceInterface.php
modules/contrib/duration_field/src/Service/GranularityService.php
modules/contrib/duration_field/src/Service/GranularityServiceInterface.php
modules/contrib/duration_field/tests/modules/duration_field_form_test/src/Form/DurationElementStatesTestForm.php
modules/contrib/duration_field/tests/src/Functional/DurationFieldBrowserTestBase.php
modules/contrib/duration_field/tests/src/Functional/DurationFieldFunctionalTest.php
modules/contrib/duration_field/tests/src/FunctionalJavascript/DurationElementStatesTest.php
modules/contrib/duration_field/tests/src/Kernel/DurationFormElementTest.php
modules/contrib/duration_field/tests/src/Unit/Service/DurationServiceTest.php
modules/contrib/duration_field/tests/src/Unit/Service/GranularityService.php
modules/contrib/duration_field/tests/src/Unit/Service/GranularityServiceTest.php

10 files with changes
=====================

1) modules/contrib/duration_field/tests/src/Kernel/DurationFormElementTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\duration_field\Kernel;

+use Drupal\user\UserInterface;
 use Drupal\Core\Form\FormInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * User for testing.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;

@@ @@
   /**
    * Sets up the test.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('system', ['sequences', 'key_value_expire']);
     $this->installEntitySchema('user');
@@ @@
     ];
     $this->assertCount(count($expected_errors), $errors);
     foreach ($expected_errors as $field => $name) {
-      $this->assertEqual($errors[$field], t('%name is not a valid number.', ['%name' => $name]));
+      $this->assertEquals($errors[$field], t('%name is not a valid number.', ['%name' => $name]));
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/duration_field/tests/src/FunctionalJavascript/DurationElementStatesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\duration_field\FunctionalJavascript;

+use Drupal\user\UserInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;

 /**
@@ @@
   /**
    * Regular authenticated User for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->testUser = $this->createUser();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/duration_field/tests/src/Functional/DurationFieldFunctionalTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\duration_field\Functional;

+use Drupal\user\UserInterface;
 /**
  * Functional tests for the Duration Field module.
  *
@@ @@
   /**
    * Admin user for testing.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/duration_field/src/Service/DurationServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\duration_field\Service;

+use Drupal\duration_field\Exception\InvalidDurationException;
 use DateInterval;

 /**
@@ @@
    * @return \DateInterval
    *   A PHP DateInterval object for the given ISO 8601 duration string.
    *
-   * @throws Drupal\duration_field\Exception\InvalidDurationException
+   * @throws InvalidDurationException
    *   Thrown if $value is not a valid ISO 8601 Duration string.
    */
   public function getDateIntervalFromDurationString($durationString);
@@ @@
    * @return \DateInterval
    *   A PHP DateInterval object for the given ISO 8601 duration string.
    *
-   * @throws Drupal\duration_field\Exception\InvalidDurationException
+   * @throws InvalidDurationException
    *   Thrown if $value is not a valid ISO 8601 Duration string.
    */
   public function convertDateArrayToDateInterval(array $input);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/duration_field/src/Service/DurationService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\duration_field\Service;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use DateInterval;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\duration_field\Exception\InvalidDurationException;
@@ @@
    * @param string $textLength
    *   The length of text to use. Allowed values are 'full' and 'short'.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translated text value of the given type.
    */
   protected function getTimePeriod($type, $value, $textLength) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/duration_field/src/Plugin/Field/FieldWidget/DurationWidget.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The Duration service.
    *
-   * @var \Drupal\duration_field\Service\DurationServiceInterface
+   * @var DurationServiceInterface
    */
   protected $durationService;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $settings
    *   The field settings.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\duration_field\Service\DurationServiceInterface $duration_service
+   * @param DurationServiceInterface $duration_service
    *   The duration service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/duration_field/src/Plugin/Field/FieldFormatter/DurationTimeFormatter.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The granularity service.
    *
-   * @var \Drupal\duration_field\Service\GranularityServiceInterface
+   * @var GranularityServiceInterface
    */
   protected $granularityService;

@@ @@
    *   The current view mode.
    * @param array $third_party_settings
    *   The third party settings.
-   * @param \Drupal\duration_field\Service\GranularityServiceInterface $granularityService
+   * @param GranularityServiceInterface $granularityService
    *   The granularity service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/duration_field/src/Plugin/Field/FieldFormatter/DurationHumanDisplayFormatter.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The granularity service.
    *
-   * @var \Drupal\duration_field\Service\GranularityServiceInterface
+   * @var GranularityServiceInterface
    */
   protected $granularityService;

@@ @@
   /**
    * The Duration service.
    *
-   * @var \Drupal\duration_field\Service\DurationServiceInterface
+   * @var DurationServiceInterface
    */
   protected $durationService;

@@ @@
    *   The current view mode.
    * @param array $third_party_settings
    *   The third party settings.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler service.
-   * @param \Drupal\duration_field\Service\GranularityServiceInterface $granularityService
+   * @param GranularityServiceInterface $granularityService
    *   The granularity service.
-   * @param \Drupal\duration_field\Service\DurationServiceInterface $durationService
+   * @param DurationServiceInterface $durationService
    *   The duration service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/duration_field/src/Drush/DurationFieldCommand.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs a DurationFieldCommand object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/duration_field/duration_field.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
+use Drupal\Core\Entity\EntityFieldManager;
 /**
  * @file
  * Holds install hooks for the Duration Field module.
@@ @@
  *   - Removes the now unused 'duration' setting for duration field widget
  *     settings.
  *
- * @param \Drupal\Core\Field\FieldConfigInterface $field
+ * @param FieldConfigInterface $field
  *   The field to be updated.
  */
 function duration_field_update_config_v1_v2(FieldConfigInterface $field) {
@@ @@
 /**
  * Helper function to convert 8.x-1.x DB tables to 8.x-2.x DB tables.
  *
- * @param \Drupal\Core\Field\FieldConfigInterface $field
+ * @param FieldConfigInterface $field
  *   The field to be updated.
  */
 function duration_field_update_db_v1_v2(FieldConfigInterface $field) {
@@ @@
   $entity_manager = \Drupal::service('entity_type.manager');
   $entity_manager->useCaches(FALSE);

-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $schema_repository */
   $schema_repository = \Drupal::service('entity.last_installed_schema.repository');
-  /** @var \Drupal\Core\Entity\EntityFieldManager $entity_field_manager */
+  /** @var EntityFieldManager $entity_field_manager */
   $entity_field_manager = \Drupal::service('entity_field.manager');
   $field_storage_definitions = $schema_repository->getLastInstalledFieldStorageDefinitions($entity_type_id);
   $schema = $field_storage_definitions[$field_name]->getSchema();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

