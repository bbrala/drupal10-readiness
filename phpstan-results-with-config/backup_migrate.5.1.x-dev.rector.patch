diff --git a/backup_migrate.info.yml b/backup_migrate.info.yml
index cccac52..56ac3a3 100644
--- a/backup_migrate.info.yml
+++ b/backup_migrate.info.yml
@@ -2,5 +2,5 @@ name: 'Backup and Migrate'
 description: 'Backup the Drupal database and files or migrate them to another environment.'
 package: Other
 type: module
-core_version_requirement: ^9
+core_version_requirement: ^9.3 || ^10
 configure: backup_migrate.quick_backup
diff --git a/backup_migrate.install b/backup_migrate.install
index e05fd54..9d3b583 100644
--- a/backup_migrate.install
+++ b/backup_migrate.install
@@ -17,7 +17,7 @@ function backup_migrate_update_5001() {
   $kv = \Drupal::keyValue('backup_migrate_schedule:last_run');
 
   $schedules = Schedule::loadMultiple();
-  /** @var \Drupal\backup_migrate\Entity\Schedule $schedule */
+  /** @var Schedule $schedule */
   foreach ($schedules as $schedule) {
     $id = $schedule->id();
     $last = (int) $kv->get($id);
@@ -31,7 +31,7 @@ function backup_migrate_update_5001() {
  */
 function backup_migrate_uninstall($is_syncing) {
   $schedules = Schedule::loadMultiple();
-  /** @var \Drupal\backup_migrate\Entity\Schedule $schedule */
+  /** @var Schedule $schedule */
   foreach ($schedules as $schedule) {
     $schedule->setLastRun(0);
   }
diff --git a/backup_migrate.module b/backup_migrate.module
index 9cb309c..0dffcfa 100644
--- a/backup_migrate.module
+++ b/backup_migrate.module
@@ -82,7 +82,7 @@ function backup_migrate_perform_restore($source_id, $destination_id, $file_id =
  * @param array|null $options
  *   A keyed array of options.
  *
- * @return \Drupal\backup_migrate\Core\Main\BackupMigrate
+ * @return BackupMigrate
  */
 function backup_migrate_get_service_object($config = [], $options = []) {
   static $bam = NULL;
@@ -300,7 +300,7 @@ function backup_migrate_help($route_name, RouteMatchInterface $route_match) {
 
     $output = '';
     foreach ($help as $key => $value) {
-      $output .= render($value);
+      $output .= \Drupal::service('renderer')->render($value);
     }
 
     return $output;
diff --git a/src/Commands/BackupMigrateCommands.php b/src/Commands/BackupMigrateCommands.php
index e5ad5aa..9051dc1 100644
--- a/src/Commands/BackupMigrateCommands.php
+++ b/src/Commands/BackupMigrateCommands.php
@@ -24,7 +24,7 @@ class BackupMigrateCommands extends DrushCommands {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Controller/BackupController.php b/src/Controller/BackupController.php
index 340548f..b45597b 100644
--- a/src/Controller/BackupController.php
+++ b/src/Controller/BackupController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\backup_migrate\Controller;
 
+use Drupal\backup_migrate\Core\Destination\DestinationInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\backup_migrate\Core\Destination\ListableDestinationInterface;
 use Drupal\backup_migrate\Drupal\Destination\DrupalBrowserDownloadDestination;
 use Drupal\backup_migrate\Entity\Destination;
@@ -17,7 +19,7 @@ use Drupal\Core\Utility\TableSort;
 class BackupController extends ControllerBase {
 
   /**
-   * @var \Drupal\backup_migrate\Core\Destination\DestinationInterface
+   * @var DestinationInterface
    */
   public $destination;
 
@@ -54,9 +56,9 @@ class BackupController extends ControllerBase {
   /**
    * Get the title for the listing page of a destination entity.
    *
-   * @param \Drupal\backup_migrate\Entity\Destination $backup_migrate_destination
+   * @param Destination $backup_migrate_destination
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    */
   public function listDestinationEntityBackupsTitle(Destination $backup_migrate_destination) {
     return $this->t('Backups in @destination_name',
@@ -66,7 +68,7 @@ class BackupController extends ControllerBase {
   /**
    * List the backups in the given destination.
    *
-   * @param \Drupal\backup_migrate\Entity\Destination $backup_migrate_destination
+   * @param Destination $backup_migrate_destination
    *
    * @return mixed
    */
@@ -79,7 +81,7 @@ class BackupController extends ControllerBase {
   /**
    * List the backups in the given destination.
    *
-   * @param \Drupal\backup_migrate\Core\Destination\ListableDestinationInterface $destination
+   * @param ListableDestinationInterface $destination
    * @param $backup_migrate_destination_id
    * @param int $count
    *
@@ -180,7 +182,7 @@ class BackupController extends ControllerBase {
   /**
    * Download a backup via the browser.
    *
-   * @param \Drupal\backup_migrate\Entity\Destination $backup_migrate_destination
+   * @param Destination $backup_migrate_destination
    * @param $backup_id
    */
   public function download(Destination $backup_migrate_destination, $backup_id) {
diff --git a/src/Controller/DestinationListBuilder.php b/src/Controller/DestinationListBuilder.php
index dc4f469..fbee045 100644
--- a/src/Controller/DestinationListBuilder.php
+++ b/src/Controller/DestinationListBuilder.php
@@ -38,7 +38,7 @@ class DestinationListBuilder extends ConfigEntityListBuilder {
   /**
    * Gets this list's default operations.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the operations are for.
    *
    * @return array
diff --git a/src/Core/Config/ConfigurableInterface.php b/src/Core/Config/ConfigurableInterface.php
index ec1787a..9721b3f 100644
--- a/src/Core/Config/ConfigurableInterface.php
+++ b/src/Core/Config/ConfigurableInterface.php
@@ -12,7 +12,7 @@ interface ConfigurableInterface {
   /**
    * Set the configuration for all plugins.
    *
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface $config
+   * @param ConfigInterface $config
    *   A configuration object containing only configuration for all plugins.
    */
   public function setConfig(ConfigInterface $config);
@@ -20,7 +20,7 @@ interface ConfigurableInterface {
   /**
    * Get the configuration object for this item.
    *
-   * @return \Drupal\backup_migrate\Core\Config\ConfigInterface
+   * @return ConfigInterface
    */
   public function config();
 
diff --git a/src/Core/Config/ConfigurableTrait.php b/src/Core/Config/ConfigurableTrait.php
index e008e54..b732170 100644
--- a/src/Core/Config/ConfigurableTrait.php
+++ b/src/Core/Config/ConfigurableTrait.php
@@ -16,7 +16,7 @@ trait ConfigurableTrait {
   /**
    * The object's configuration object.
    *
-   * @var \Drupal\backup_migrate\Core\Config\ConfigInterface
+   * @var ConfigInterface
    */
   protected $config;
 
@@ -27,7 +27,7 @@ trait ConfigurableTrait {
    * not be overwritten. If the object is re-configured after construction any
    * missing configuration options will revert to these values.
    *
-   * @var \Drupal\backup_migrate\Core\Config\ConfigInterface
+   * @var ConfigInterface
    */
   protected $init;
 
@@ -77,7 +77,7 @@ trait ConfigurableTrait {
   /**
    * Get the configuration object for this item.
    *
-   * @return \Drupal\backup_migrate\Core\Config\ConfigInterface
+   * @return ConfigInterface
    */
   public function config() {
     return $this->config ? $this->config : new Config();
@@ -86,7 +86,7 @@ trait ConfigurableTrait {
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config();
diff --git a/src/Core/Destination/DebugDestination.php b/src/Core/Destination/DebugDestination.php
index 0783759..3d803c6 100644
--- a/src/Core/Destination/DebugDestination.php
+++ b/src/Core/Destination/DebugDestination.php
@@ -58,7 +58,7 @@ class DebugDestination extends StreamDestination implements WritableDestinationI
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
diff --git a/src/Core/Destination/DestinationBase.php b/src/Core/Destination/DestinationBase.php
index 9c7132f..30a00db 100644
--- a/src/Core/Destination/DestinationBase.php
+++ b/src/Core/Destination/DestinationBase.php
@@ -80,7 +80,7 @@ abstract class DestinationBase extends PluginBase implements ReadableDestination
    * Should take care of the actual creation of a file in the destination
    * without regard for metadata.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    */
   abstract protected function saveTheFile(BackupFileReadableInterface $file);
 
@@ -90,14 +90,14 @@ abstract class DestinationBase extends PluginBase implements ReadableDestination
    * This function is called to save the data file AND the metadata sidecar
    * file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    */
   abstract protected function saveTheFileMetadata(BackupFileInterface $file);
 
   /**
    * Load the actual metadata for the file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    */
   abstract protected function loadFileMetadataArray(BackupFileInterface $file);
 
diff --git a/src/Core/Destination/DirectoryDestination.php b/src/Core/Destination/DirectoryDestination.php
index 43693ec..c329db1 100644
--- a/src/Core/Destination/DirectoryDestination.php
+++ b/src/Core/Destination/DirectoryDestination.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\backup_migrate\Core\Destination;
 
+use Drupal\backup_migrate\Core\Exception\BackupMigrateException;
+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Drupal\backup_migrate\Core\Config\ConfigurableInterface;
 use Drupal\backup_migrate\Core\Exception\DestinationNotWritableException;
 use Drupal\backup_migrate\Core\Plugin\FileProcessorInterface;
@@ -60,9 +62,9 @@ class DirectoryDestination extends DestinationBase implements ListableDestinatio
    * This function is called to save the data file AND the metadata sidecar
    * file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public function saveTheFile(BackupFileReadableInterface $file) {
     // Check if the directory exists.
@@ -76,7 +78,7 @@ class DirectoryDestination extends DestinationBase implements ListableDestinatio
   /**
    * Check that the directory can be used for backup.
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   protected function checkDirectory() {
     $dir = $this->confGet('directory');
@@ -237,7 +239,7 @@ class DirectoryDestination extends DestinationBase implements ListableDestinatio
     // Read the list of files from the directory.
     $dir = $this->confGet('directory');
 
-    /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager */
+    /** @var StreamWrapperManagerInterface $stream_wrapper_manager */
     $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
     $scheme = $stream_wrapper_manager->getScheme($dir);
 
diff --git a/src/Core/Destination/ListableDestinationInterface.php b/src/Core/Destination/ListableDestinationInterface.php
index 0c5bd06..e70b61e 100644
--- a/src/Core/Destination/ListableDestinationInterface.php
+++ b/src/Core/Destination/ListableDestinationInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\backup_migrate\Core\Destination;
 
+use Drupal\backup_migrate\Core\File\BackupFileInterface;
 /**
  * An interface for managing listable(?) destinations.
  *
@@ -17,7 +18,7 @@ interface ListableDestinationInterface extends DestinationInterface {
    * @todo Decide if extended metadata should ALWAYS be loaded here. Is there
    * a use case for getting a list of files WITHOUT metadata?
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileInterface[]
+   * @return BackupFileInterface[]
    *   An array of BackupFileInterface objects representing the files with
    *   the file ids as keys. The file ids are usually file names but that
    *   is up to the implementing destination to decide. The returned files
diff --git a/src/Core/Destination/ReadableDestinationInterface.php b/src/Core/Destination/ReadableDestinationInterface.php
index d6a213b..cd28cc3 100644
--- a/src/Core/Destination/ReadableDestinationInterface.php
+++ b/src/Core/Destination/ReadableDestinationInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\backup_migrate\Core\Destination;
 
+use Drupal\backup_migrate\Core\File\BackupFileReadableInterface;
 use Drupal\backup_migrate\Core\File\BackupFileInterface;
 
 /**
@@ -22,7 +23,7 @@ interface ReadableDestinationInterface extends DestinationInterface {
    * @param string $id
    *   The unique identifier for the file. Usually the filename.
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileInterface
+   * @return BackupFileInterface
    *   The file if it exists or NULL if it doesn't
    */
   public function getFile($id);
@@ -30,18 +31,18 @@ interface ReadableDestinationInterface extends DestinationInterface {
   /**
    * Load the metadata for the given file however it may be stored.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileInterface
+   * @return BackupFileInterface
    */
   public function loadFileMetadata(BackupFileInterface $file);
 
   /**
    * Load the file with the given ID from the destination.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @return BackupFileReadableInterface
    *   The file if it exists or NULL if it doesn't.
    */
   public function loadFileForReading(BackupFileInterface $file);
diff --git a/src/Core/Destination/WritableDestinationInterface.php b/src/Core/Destination/WritableDestinationInterface.php
index 5cc6a65..a6cc67e 100644
--- a/src/Core/Destination/WritableDestinationInterface.php
+++ b/src/Core/Destination/WritableDestinationInterface.php
@@ -14,7 +14,7 @@ interface WritableDestinationInterface extends DestinationInterface {
   /**
    * Save a file to the destination.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *   The file to save.
    */
   public function saveFile(BackupFileReadableInterface $file);
diff --git a/src/Core/File/TempFileManager.php b/src/Core/File/TempFileManager.php
index 44fd476..21194c8 100644
--- a/src/Core/File/TempFileManager.php
+++ b/src/Core/File/TempFileManager.php
@@ -10,7 +10,7 @@ namespace Drupal\backup_migrate\Core\File;
 class TempFileManager implements TempFileManagerInterface {
 
   /**
-   * @var \Drupal\backup_migrate\Core\File\TempFileAdapterInterface
+   * @var TempFileAdapterInterface
    */
   protected $adapter;
 
@@ -19,7 +19,7 @@ class TempFileManager implements TempFileManagerInterface {
    *
    * This manager needs the adapter to create the actual temp files.
    *
-   * @param \Drupal\backup_migrate\Core\File\TempFileAdapterInterface $adapter
+   * @param TempFileAdapterInterface $adapter
    */
   public function __construct(TempFileAdapterInterface $adapter) {
     $this->adapter = $adapter;
@@ -49,12 +49,12 @@ class TempFileManager implements TempFileManagerInterface {
    *
    * For example: xxx.mysql would become xxx.mysql.gz.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *   The file to add the extension to.
    * @param $ext
    *   The new file extension.
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @return BackupFileWritableInterface
    *   A new writable backup file with the new extension and all of the metadata
    *   from the previous file.
    */
@@ -82,9 +82,9 @@ class TempFileManager implements TempFileManagerInterface {
    *
    * For example: xxx.mysql.gz would become xxx.mysql.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @return BackupFileWritableInterface
    *   A new writable backup file with the last extension removed and
    *   all of the metadata from the previous file.
    */
diff --git a/src/Core/File/TempFileManagerInterface.php b/src/Core/File/TempFileManagerInterface.php
index 7fd815c..d654d67 100644
--- a/src/Core/File/TempFileManagerInterface.php
+++ b/src/Core/File/TempFileManagerInterface.php
@@ -21,7 +21,7 @@ interface TempFileManagerInterface {
    * @param string $ext
    *   The file extension for this file (optional)
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @return BackupFileWritableInterface
    */
   public function create($ext = '');
 
@@ -33,12 +33,12 @@ interface TempFileManagerInterface {
    *
    * For example: xxx.mysql would become xxx.mysql.gz.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *   The file to add the extension to.
    * @param $ext
    *   The new file extension.
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @return BackupFileWritableInterface
    *   A new writable backup file with the new extension and all of the metadata
    *   from the previous file.
    */
@@ -51,9 +51,9 @@ interface TempFileManagerInterface {
    *
    * For example: xxx.mysql.gz would become xxx.mysql.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @return BackupFileWritableInterface
    *   A new writable backup file with the last extension removed and
    *   all of the metadata from the previous file.
    */
diff --git a/src/Core/Filter/CompressionFilter.php b/src/Core/Filter/CompressionFilter.php
index ae4c7cb..88e4b0e 100644
--- a/src/Core/Filter/CompressionFilter.php
+++ b/src/Core/Filter/CompressionFilter.php
@@ -102,7 +102,7 @@ class CompressionFilter extends PluginBase implements FileProcessorInterface {
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
@@ -113,9 +113,9 @@ class CompressionFilter extends PluginBase implements FileProcessorInterface {
   /**
    * Run on a backup.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @return BackupFileReadableInterface
    */
   public function afterBackup(BackupFileReadableInterface $file) {
     $out = $success = FALSE;
@@ -146,9 +146,9 @@ class CompressionFilter extends PluginBase implements FileProcessorInterface {
   /**
    * Run on a restore.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @return BackupFileReadableInterface
    */
   public function beforeRestore(BackupFileReadableInterface $file) {
     // If the file is not a supported compression type then simply return the
@@ -183,8 +183,8 @@ class CompressionFilter extends PluginBase implements FileProcessorInterface {
   /**
    * Gzip encode a file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $from
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $to
+   * @param BackupFileReadableInterface $from
+   * @param BackupFileWritableInterface $to
    *
    * @return bool
    */
@@ -212,8 +212,8 @@ class CompressionFilter extends PluginBase implements FileProcessorInterface {
   /**
    * Gzip decode a file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $from
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $to
+   * @param BackupFileReadableInterface $from
+   * @param BackupFileWritableInterface $to
    *
    * @return bool
    */
@@ -237,8 +237,8 @@ class CompressionFilter extends PluginBase implements FileProcessorInterface {
   /**
    * BZip encode a file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $from
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $to
+   * @param BackupFileReadableInterface $from
+   * @param BackupFileWritableInterface $to
    *
    * @return bool
    */
@@ -265,8 +265,8 @@ class CompressionFilter extends PluginBase implements FileProcessorInterface {
   /**
    * BZip decode a file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $from
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $to
+   * @param BackupFileReadableInterface $from
+   * @param BackupFileWritableInterface $to
    *
    * @return bool
    */
@@ -290,9 +290,9 @@ class CompressionFilter extends PluginBase implements FileProcessorInterface {
   /**
    * Zip encode a file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $from
+   * @param BackupFileReadableInterface $from
    *   The source file.
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $to
+   * @param BackupFileWritableInterface $to
    *   The destination file.
    *
    * @return bool
@@ -318,8 +318,8 @@ class CompressionFilter extends PluginBase implements FileProcessorInterface {
   /**
    * Gzip decode a file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $from
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $to
+   * @param BackupFileReadableInterface $from
+   * @param BackupFileWritableInterface $to
    *
    * @return bool
    */
diff --git a/src/Core/Filter/DBExcludeFilter.php b/src/Core/Filter/DBExcludeFilter.php
index cd758a5..c42203e 100644
--- a/src/Core/Filter/DBExcludeFilter.php
+++ b/src/Core/Filter/DBExcludeFilter.php
@@ -15,7 +15,7 @@ use Drupal\backup_migrate\Core\Source\DatabaseSourceInterface;
 class DBExcludeFilter extends PluginBase {
 
   /**
-   * @var \Drupal\backup_migrate\Core\Plugin\PluginManager
+   * @var PluginManager
    */
   protected $sourceManager;
 
@@ -42,7 +42,7 @@ class DBExcludeFilter extends PluginBase {
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
@@ -98,14 +98,14 @@ class DBExcludeFilter extends PluginBase {
   }
 
   /**
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginManager
+   * @return PluginManager
    */
   public function sources() {
     return $this->sourceManager ? $this->sourceManager : new PluginManager();
   }
 
   /**
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManager $sourceManager
+   * @param PluginManager $sourceManager
    */
   public function setSourceManager(PluginManager $sourceManager) {
     $this->sourceManager = $sourceManager;
diff --git a/src/Core/Filter/FileExcludeFilter.php b/src/Core/Filter/FileExcludeFilter.php
index ebd15db..bf1fe95 100644
--- a/src/Core/Filter/FileExcludeFilter.php
+++ b/src/Core/Filter/FileExcludeFilter.php
@@ -42,7 +42,7 @@ class FileExcludeFilter extends PluginBase {
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
diff --git a/src/Core/Filter/FileNamer.php b/src/Core/Filter/FileNamer.php
index 1a398a3..b38e91c 100644
--- a/src/Core/Filter/FileNamer.php
+++ b/src/Core/Filter/FileNamer.php
@@ -66,7 +66,7 @@ class FileNamer extends PluginBase implements FileProcessorInterface {
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
@@ -90,9 +90,9 @@ class FileNamer extends PluginBase implements FileProcessorInterface {
   /**
    * Run on a backup. Name the backup file according to the configuration.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @return BackupFileReadableInterface
    */
   public function afterBackup(BackupFileReadableInterface $file) {
     if (\Drupal::moduleHandler()->moduleExists('token')) {
diff --git a/src/Core/Filter/MetadataWriter.php b/src/Core/Filter/MetadataWriter.php
index c134484..704edc2 100644
--- a/src/Core/Filter/MetadataWriter.php
+++ b/src/Core/Filter/MetadataWriter.php
@@ -43,7 +43,7 @@ class MetadataWriter extends PluginBase implements FileProcessorInterface, Plugi
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
@@ -87,9 +87,9 @@ class MetadataWriter extends PluginBase implements FileProcessorInterface, Plugi
   /**
    * Run after a backup. Add metadata to the file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $file
+   * @param BackupFileWritableInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @return BackupFileWritableInterface
    */
   public function afterBackup(BackupFileWritableInterface $file) {
     // Add the various metadata.
diff --git a/src/Core/Filter/Notify.php b/src/Core/Filter/Notify.php
index 4956086..701fcb8 100644
--- a/src/Core/Filter/Notify.php
+++ b/src/Core/Filter/Notify.php
@@ -32,7 +32,7 @@ class Notify extends PluginBase implements PluginCallerInterface {
   }
 
   /**
-   * @var \Drupal\backup_migrate\Core\Service\StashLogger
+   * @var StashLogger
    */
   protected $logstash;
 
diff --git a/src/Core/Main/BackupMigrate.php b/src/Core/Main/BackupMigrate.php
index 1deb6d8..70b2ab7 100644
--- a/src/Core/Main/BackupMigrate.php
+++ b/src/Core/Main/BackupMigrate.php
@@ -16,12 +16,12 @@ class BackupMigrate implements BackupMigrateInterface {
   use PluginCallerTrait;
 
   /**
-   * @var \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $sources;
 
   /**
-   * @var \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $destinations;
 
@@ -180,7 +180,7 @@ class BackupMigrate implements BackupMigrateInterface {
    * is done by plugins. This can be called after the service is instantiated to
    * pass new configuration to the plugins.
    *
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface $config
+   * @param ConfigInterface $config
    */
   public function setConfig(ConfigInterface $config) {
     $this->plugins()->setConfig($config);
@@ -189,7 +189,7 @@ class BackupMigrate implements BackupMigrateInterface {
   /**
    * Get the list of available destinations.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   public function destinations() {
     return $this->destinations;
@@ -198,7 +198,7 @@ class BackupMigrate implements BackupMigrateInterface {
   /**
    * Set the destinations plugin manager.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $destinations
+   * @param PluginManagerInterface $destinations
    */
   public function setDestinationManager(PluginManagerInterface $destinations) {
     $this->destinations = $destinations;
@@ -207,7 +207,7 @@ class BackupMigrate implements BackupMigrateInterface {
   /**
    * Get the list of sources.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   public function sources() {
     return $this->sources;
@@ -216,7 +216,7 @@ class BackupMigrate implements BackupMigrateInterface {
   /**
    * Set the sources plugin manager.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $sources
+   * @param PluginManagerInterface $sources
    */
   public function setSourceManager(PluginManagerInterface $sources) {
     $this->sources = $sources;
@@ -225,7 +225,7 @@ class BackupMigrate implements BackupMigrateInterface {
   /**
    * Get the service locator.
    *
-   * @return \Drupal\backup_migrate\Core\Service\ServiceManager
+   * @return ServiceManager
    */
   public function services() {
     return $this->services;
@@ -234,7 +234,7 @@ class BackupMigrate implements BackupMigrateInterface {
   /**
    * Set the service locator.
    *
-   * @param \Drupal\backup_migrate\Core\Service\ServiceManager $services
+   * @param ServiceManager $services
    */
   public function setServiceManager(ServiceManager $services) {
     $this->services = $services;
diff --git a/src/Core/Main/BackupMigrateInterface.php b/src/Core/Main/BackupMigrateInterface.php
index 9f05116..36e3688 100644
--- a/src/Core/Main/BackupMigrateInterface.php
+++ b/src/Core/Main/BackupMigrateInterface.php
@@ -44,42 +44,42 @@ interface BackupMigrateInterface extends PluginCallerInterface {
   /**
    * Get the list of available destinations.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   public function destinations();
 
   /**
    * Set the destinations plugin manager.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $destinations
+   * @param PluginManagerInterface $destinations
    */
   public function setDestinationManager(PluginManagerInterface $destinations);
 
   /**
    * Get the list of sources.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   public function sources();
 
   /**
    * Set the sources plugin manager.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $sources
+   * @param PluginManagerInterface $sources
    */
   public function setSourceManager(PluginManagerInterface $sources);
 
   /**
    * Get the service locator.
    *
-   * @return \Drupal\backup_migrate\Core\Service\ServiceManager
+   * @return ServiceManager
    */
   public function services();
 
   /**
    * Set the service locator.
    *
-   * @param \Drupal\backup_migrate\Core\Service\ServiceManager $services
+   * @param ServiceManager $services
    */
   public function setServiceManager(ServiceManager $services);
 
diff --git a/src/Core/Plugin/FileProcessorInterface.php b/src/Core/Plugin/FileProcessorInterface.php
index 19ac326..6128cd3 100644
--- a/src/Core/Plugin/FileProcessorInterface.php
+++ b/src/Core/Plugin/FileProcessorInterface.php
@@ -14,7 +14,7 @@ interface FileProcessorInterface {
   /**
    * Inject the temp file manager.
    *
-   * @param \Drupal\backup_migrate\Core\File\TempFileManagerInterface $tempfilemanager
+   * @param TempFileManagerInterface $tempfilemanager
    *
    * @return mixed
    */
@@ -23,7 +23,7 @@ interface FileProcessorInterface {
   /**
    * Get the temp file manager.
    *
-   * @return \Drupal\backup_migrate\Core\File\TempFileManagerInterface
+   * @return TempFileManagerInterface
    */
   public function getTempFileManager();
 
diff --git a/src/Core/Plugin/FileProcessorTrait.php b/src/Core/Plugin/FileProcessorTrait.php
index b33e286..1fe023c 100644
--- a/src/Core/Plugin/FileProcessorTrait.php
+++ b/src/Core/Plugin/FileProcessorTrait.php
@@ -12,14 +12,14 @@ use Drupal\backup_migrate\Core\File\TempFileManagerInterface;
 trait FileProcessorTrait {
 
   /**
-   * @var \Drupal\backup_migrate\Core\File\TempFileManagerInterface
+   * @var TempFileManagerInterface
    */
   protected $tempfilemanager;
 
   /**
    * Inject the temp file manager.
    *
-   * @param \Drupal\backup_migrate\Core\File\TempFileManagerInterface $tempfilemanager
+   * @param TempFileManagerInterface $tempfilemanager
    *
    * @return mixed
    */
@@ -30,7 +30,7 @@ trait FileProcessorTrait {
   /**
    * Get the temp file manager.
    *
-   * @return \Drupal\backup_migrate\Core\File\TempFileManagerInterface
+   * @return TempFileManagerInterface
    */
   public function getTempFileManager() {
     return $this->tempfilemanager;
diff --git a/src/Core/Plugin/PluginCallerInterface.php b/src/Core/Plugin/PluginCallerInterface.php
index 84897ba..4354191 100644
--- a/src/Core/Plugin/PluginCallerInterface.php
+++ b/src/Core/Plugin/PluginCallerInterface.php
@@ -14,14 +14,14 @@ interface PluginCallerInterface {
   /**
    * Inject the plugin manager.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $plugins
+   * @param PluginManagerInterface $plugins
    */
   public function setPluginManager(PluginManagerInterface $plugins);
 
   /**
    * Get the plugin manager.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   public function plugins();
 
diff --git a/src/Core/Plugin/PluginCallerTrait.php b/src/Core/Plugin/PluginCallerTrait.php
index 934144c..6e1903f 100644
--- a/src/Core/Plugin/PluginCallerTrait.php
+++ b/src/Core/Plugin/PluginCallerTrait.php
@@ -10,14 +10,14 @@ namespace Drupal\backup_migrate\Core\Plugin;
 trait PluginCallerTrait {
 
   /**
-   * @var \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $plugins;
 
   /**
    * Inject the plugin manager.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $plugins
+   * @param PluginManagerInterface $plugins
    */
   public function setPluginManager(PluginManagerInterface $plugins) {
     $this->plugins = $plugins;
@@ -26,7 +26,7 @@ trait PluginCallerTrait {
   /**
    * Get the plugin manager.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   public function plugins() {
     // Return the list of plugins or a blank placeholder.
diff --git a/src/Core/Plugin/PluginManager.php b/src/Core/Plugin/PluginManager.php
index db9a48c..8ec2054 100644
--- a/src/Core/Plugin/PluginManager.php
+++ b/src/Core/Plugin/PluginManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\backup_migrate\Core\Plugin;
 
+use Drupal\backup_migrate\Core\File\TempFileManagerInterface;
 use Drupal\backup_migrate\Core\Config\Config;
 use Drupal\backup_migrate\Core\Config\ConfigInterface;
 use Drupal\backup_migrate\Core\Config\ConfigurableInterface;
@@ -18,23 +19,23 @@ class PluginManager implements PluginManagerInterface, ConfigurableInterface {
   use ConfigurableTrait;
 
   /**
-   * @var \Drupal\backup_migrate\Core\Plugin\PluginInterface[]
+   * @var PluginInterface[]
    */
   protected $items;
 
   /**
-   * @var \Drupal\backup_migrate\Core\Service\ServiceManagerInterface
+   * @var ServiceManagerInterface
    */
   protected $services;
 
   /**
-   * @var \Drupal\backup_migrate\Core\File\TempFileManagerInterface
+   * @var TempFileManagerInterface
    */
   protected $tempFileManager;
 
   /**
-   * @param \Drupal\backup_migrate\Core\Service\ServiceManagerInterface $services
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface $config
+   * @param ServiceManagerInterface $services
+   * @param ConfigInterface $config
    */
   public function __construct(ServiceManagerInterface $services = NULL, ConfigInterface $config = NULL) {
     // Add the injected service locator for dependency injection into plugins.
@@ -50,7 +51,7 @@ class PluginManager implements PluginManagerInterface, ConfigurableInterface {
   /**
    * Set the configuration. Reconfigure all of the installed plugins.
    *
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface $config
+   * @param ConfigInterface $config
    */
   public function setConfig(ConfigInterface $config) {
     // Set the configuration object to the one passed in.
@@ -90,7 +91,7 @@ class PluginManager implements PluginManagerInterface, ConfigurableInterface {
    * @param string $op
    *   The name of the operation.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginInterface[]
+   * @return PluginInterface[]
    */
   public function getAllByOp($op) {
     $out = [];
@@ -140,7 +141,7 @@ class PluginManager implements PluginManagerInterface, ConfigurableInterface {
    * plugin according to the config object injected into the manager. It also
    * injects other dependencies as needed.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginInterface $plugin
+   * @param PluginInterface $plugin
    *   The plugin to prepare for use.
    * @param string $id
    *   The id of the plugin (to extract the correct settings).
@@ -175,14 +176,14 @@ class PluginManager implements PluginManagerInterface, ConfigurableInterface {
   }
 
   /**
-   * @return \Drupal\backup_migrate\Core\Service\ServiceManagerInterface
+   * @return ServiceManagerInterface
    */
   public function services() {
     return $this->services;
   }
 
   /**
-   * @param \Drupal\backup_migrate\Core\Service\ServiceManagerInterface $services
+   * @param ServiceManagerInterface $services
    */
   public function setServiceManager(ServiceManagerInterface $services) {
     $this->services = $services;
diff --git a/src/Core/Plugin/PluginManagerInterface.php b/src/Core/Plugin/PluginManagerInterface.php
index a04f4b4..97bd025 100644
--- a/src/Core/Plugin/PluginManagerInterface.php
+++ b/src/Core/Plugin/PluginManagerInterface.php
@@ -13,7 +13,7 @@ interface PluginManagerInterface {
    * Add an item to the manager.
    *
    * @param $id
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginInterface|object $item
+   * @param PluginInterface|object $item
    *   The source to add.
    *
    * @return
@@ -25,7 +25,7 @@ interface PluginManagerInterface {
    *
    * @param $id
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginInterface
+   * @return PluginInterface
    *   The item specified by the id or NULL if it doesn't exist.
    */
   public function get($id);
@@ -33,7 +33,7 @@ interface PluginManagerInterface {
   /**
    * Get a list of all of the items.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginInterface[]
+   * @return PluginInterface[]
    *   An ordered list of the sources, keyed by their id.
    */
   public function getAll();
@@ -41,7 +41,7 @@ interface PluginManagerInterface {
   /**
    * Set the configuration for all plugins.
    *
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface $config
+   * @param ConfigInterface $config
    *   A configuration object containing only configuration for all plugins.
    */
   public function setConfig(ConfigInterface $config);
@@ -52,7 +52,7 @@ interface PluginManagerInterface {
    * @param string $op
    *   The name of the operation.
    *
-   * @return \Drupal\backup_migrate\Core\Plugin\PluginInterface[]
+   * @return PluginInterface[]
    */
   public function getAllByOp($op);
 
diff --git a/src/Core/Service/ArchiveReaderInterface.php b/src/Core/Service/ArchiveReaderInterface.php
index 6bbbbdd..9a7edd1 100644
--- a/src/Core/Service/ArchiveReaderInterface.php
+++ b/src/Core/Service/ArchiveReaderInterface.php
@@ -22,7 +22,7 @@ interface ArchiveReaderInterface {
   public function getFileExt();
 
   /**
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $out
+   * @param BackupFileReadableInterface $out
    */
   public function setArchive(BackupFileReadableInterface $out);
 
diff --git a/src/Core/Service/ArchiveWriterInterface.php b/src/Core/Service/ArchiveWriterInterface.php
index 876decd..82748ac 100644
--- a/src/Core/Service/ArchiveWriterInterface.php
+++ b/src/Core/Service/ArchiveWriterInterface.php
@@ -22,7 +22,7 @@ interface ArchiveWriterInterface {
   public function getFileExt();
 
   /**
-   * @param \Drupal\backup_migrate\Core\File\BackupFileWritableInterface $out
+   * @param BackupFileWritableInterface $out
    */
   public function setArchive(BackupFileWritableInterface $out);
 
diff --git a/src/Core/Service/ArchiverInterface.php b/src/Core/Service/ArchiverInterface.php
index 39e9076..4574a8c 100644
--- a/src/Core/Service/ArchiverInterface.php
+++ b/src/Core/Service/ArchiverInterface.php
@@ -22,7 +22,7 @@ interface ArchiverInterface {
   public function getFileExt();
 
   /**
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $out
+   * @param BackupFileReadableInterface $out
    */
   public function setArchive(BackupFileReadableInterface $out);
 
diff --git a/src/Core/Service/HttpClientInterface.php b/src/Core/Service/HttpClientInterface.php
index c9b38f1..bc949c5 100644
--- a/src/Core/Service/HttpClientInterface.php
+++ b/src/Core/Service/HttpClientInterface.php
@@ -34,7 +34,7 @@ interface HttpClientInterface {
    * Post a file along with other data (as an array).
    *
    * @param $url
-   * @param \Drupal\backup_migrate\Core\File\ReadableStreamBackupFile $file
+   * @param ReadableStreamBackupFile $file
    * @param $data
    *
    * @return mixed
diff --git a/src/Core/Service/PhpCurlHttpClient.php b/src/Core/Service/PhpCurlHttpClient.php
index e6cc11d..fe9e4b6 100644
--- a/src/Core/Service/PhpCurlHttpClient.php
+++ b/src/Core/Service/PhpCurlHttpClient.php
@@ -43,7 +43,7 @@ class PhpCurlHttpClient implements HttpClientInterface {
    * Post a file along with other data (as an array).
    *
    * @param $url
-   * @param \Drupal\backup_migrate\Core\File\ReadableStreamBackupFile $file
+   * @param ReadableStreamBackupFile $file
    * @param $data
    *
    * @return mixed
@@ -77,7 +77,7 @@ class PhpCurlHttpClient implements HttpClientInterface {
    *
    * @return mixed
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\HttpClientException
+   * @throws HttpClientException
    */
   protected function curlExec($ch) {
     $body = curl_exec($ch);
diff --git a/src/Core/Service/TarArchiveReader.php b/src/Core/Service/TarArchiveReader.php
index bf1b9d6..c796bd2 100644
--- a/src/Core/Service/TarArchiveReader.php
+++ b/src/Core/Service/TarArchiveReader.php
@@ -13,7 +13,7 @@ use Drupal\backup_migrate\Core\File\BackupFileReadableInterface;
 class TarArchiveReader implements ArchiveReaderInterface {
 
   /**
-   * @var \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @var BackupFileReadableInterface
    */
   protected $archive;
 
@@ -59,7 +59,7 @@ class TarArchiveReader implements ArchiveReaderInterface {
    *
    * @return bool
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   private function extractAllToDirectory($directory) {
     clearstatcache();
@@ -250,7 +250,7 @@ class TarArchiveReader implements ArchiveReaderInterface {
    *
    * @return array
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   private function readHeader($block, array $header = []) {
     if (strlen($block) == 0) {
@@ -344,7 +344,7 @@ class TarArchiveReader implements ArchiveReaderInterface {
    *
    * @return array
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   private function readLongHeader(array $header) {
     $filename = '';
diff --git a/src/Core/Service/TarArchiveWriter.php b/src/Core/Service/TarArchiveWriter.php
index c9c2539..c6d4ce6 100644
--- a/src/Core/Service/TarArchiveWriter.php
+++ b/src/Core/Service/TarArchiveWriter.php
@@ -12,7 +12,7 @@ use Drupal\backup_migrate\Core\File\BackupFileWritableInterface;
 class TarArchiveWriter implements ArchiveWriterInterface {
 
   /**
-   * @var \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @var BackupFileWritableInterface
    */
   protected $archive;
 
diff --git a/src/Core/Service/TeeLogger.php b/src/Core/Service/TeeLogger.php
index 9b68324..891f7f8 100644
--- a/src/Core/Service/TeeLogger.php
+++ b/src/Core/Service/TeeLogger.php
@@ -13,12 +13,12 @@ use Psr\Log\LoggerInterface;
 class TeeLogger extends AbstractLogger {
 
   /**
-   * @var \Psr\Log\LoggerInterface[]
+   * @var LoggerInterface[]
    */
   protected $loggers;
 
   /**
-   * @param \Psr\Log\LoggerInterface[] $loggers
+   * @param LoggerInterface[] $loggers
    */
   public function __construct(array $loggers) {
     $this->setLoggers($loggers);
@@ -38,21 +38,21 @@ class TeeLogger extends AbstractLogger {
   }
 
   /**
-   * @return \Psr\Log\LoggerInterface[]
+   * @return LoggerInterface[]
    */
   public function getLoggers() {
     return $this->loggers;
   }
 
   /**
-   * @param \Psr\Log\LoggerInterface[] $loggers
+   * @param LoggerInterface[] $loggers
    */
   public function setLoggers(array $loggers) {
     $this->loggers = $loggers;
   }
 
   /**
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    */
   public function addLogger(LoggerInterface $logger) {
     $this->loggers[] = $logger;
diff --git a/src/Core/Source/DatabaseSource.php b/src/Core/Source/DatabaseSource.php
index 97e1af8..b46f108 100644
--- a/src/Core/Source/DatabaseSource.php
+++ b/src/Core/Source/DatabaseSource.php
@@ -57,7 +57,7 @@ abstract class DatabaseSource extends PluginBase implements DatabaseSourceInterf
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
diff --git a/src/Core/Source/FileDirectorySource.php b/src/Core/Source/FileDirectorySource.php
index 3bd329d..a092b3f 100644
--- a/src/Core/Source/FileDirectorySource.php
+++ b/src/Core/Source/FileDirectorySource.php
@@ -24,12 +24,12 @@ class FileDirectorySource extends PluginBase implements SourceInterface, FilePro
   use PluginCallerTrait;
 
   /**
-   * @var \Drupal\backup_migrate\Core\Service\ArchiveWriterInterface
+   * @var ArchiveWriterInterface
    */
   private $archiveWriter;
 
   /**
-   * @var \Drupal\backup_migrate\Core\Service\ArchiveReaderInterface
+   * @var ArchiveReaderInterface
    */
   private $archiveReader;
 
@@ -120,8 +120,8 @@ class FileDirectorySource extends PluginBase implements SourceInterface, FilePro
    *
    * @return array
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
-   * @throws \Drupal\backup_migrate\Core\Exception\IgnorableException
+   * @throws BackupMigrateException
+   * @throws IgnorableException
    *
    * @internal param $directory
    */
@@ -230,28 +230,28 @@ class FileDirectorySource extends PluginBase implements SourceInterface, FilePro
   }
 
   /**
-   * @param \Drupal\backup_migrate\Core\Service\ArchiveWriterInterface $writer
+   * @param ArchiveWriterInterface $writer
    */
   public function setArchiveWriter(ArchiveWriterInterface $writer) {
     $this->archiveWriter = $writer;
   }
 
   /**
-   * @return \Drupal\backup_migrate\Core\Service\ArchiveWriterInterface
+   * @return ArchiveWriterInterface
    */
   public function getArchiveWriter() {
     return $this->archiveWriter;
   }
 
   /**
-   * @return \Drupal\backup_migrate\Core\Service\ArchiveReaderInterface
+   * @return ArchiveReaderInterface
    */
   public function getArchiveReader() {
     return $this->archiveReader;
   }
 
   /**
-   * @param \Drupal\backup_migrate\Core\Service\ArchiveReaderInterface $reader
+   * @param ArchiveReaderInterface $reader
    */
   public function setArchiveReader(ArchiveReaderInterface $reader) {
     $this->archiveReader = $reader;
@@ -281,7 +281,7 @@ class FileDirectorySource extends PluginBase implements SourceInterface, FilePro
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
diff --git a/src/Core/Source/MySQLiSource.php b/src/Core/Source/MySQLiSource.php
index b08c480..e0e8b57 100644
--- a/src/Core/Source/MySQLiSource.php
+++ b/src/Core/Source/MySQLiSource.php
@@ -40,7 +40,7 @@ class MySQLiSource extends DatabaseSource implements PluginCallerInterface {
    *
    * This should be the main back up function for this source.
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @return BackupFileReadableInterface
    *   A backup file with the contents of the source dumped to it.
    */
   public function exportToFile() {
@@ -90,7 +90,7 @@ class MySQLiSource extends DatabaseSource implements PluginCallerInterface {
    *
    * This is the main restore function for this source.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *   The file to read the backup from. It will not be opened for reading.
    *
    * @return bool|int
@@ -267,7 +267,7 @@ FOOTER;
    * Supports the formatting created by mysqldump, but won't handle multiline
    * comments.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *
    * @return string
    */
diff --git a/src/Core/Source/SourceInterface.php b/src/Core/Source/SourceInterface.php
index 1e38e6e..f3d5ae7 100644
--- a/src/Core/Source/SourceInterface.php
+++ b/src/Core/Source/SourceInterface.php
@@ -15,7 +15,7 @@ interface SourceInterface extends PluginInterface {
    *
    * This should be the main back up function for this source.
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @return BackupFileReadableInterface
    *   A backup file with the contents of the source dumped to it..
    */
   public function exportToFile();
@@ -25,7 +25,7 @@ interface SourceInterface extends PluginInterface {
    *
    * This is the main restore function for this source.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *   The file to read the backup from. It will not be opened for reading.
    */
   public function importFromFile(BackupFileReadableInterface $file);
diff --git a/src/Drupal/Config/DrupalConfigHelper.php b/src/Drupal/Config/DrupalConfigHelper.php
index 4b75934..93b8c16 100644
--- a/src/Drupal/Config/DrupalConfigHelper.php
+++ b/src/Drupal/Config/DrupalConfigHelper.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\backup_migrate\Drupal\Config;
 
+use Drupal\backup_migrate\Drupal\Destination\DrupalDirectoryDestination;
+use Drupal\backup_migrate\Core\Config\ConfigurableInterface;
 use Drupal\backup_migrate\Core\Config\ConfigInterface;
 use Drupal\backup_migrate\Core\Main\BackupMigrateInterface;
 use Drupal\backup_migrate\Core\Plugin\PluginManagerInterface;
@@ -18,7 +20,7 @@ class DrupalConfigHelper {
   /**
    * Build the configuration form for all plugins in a manager.
    *
-   * @param \Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $plugins
+   * @param PluginManagerInterface $plugins
    *   The PluginManager containing all of the plugins to be configured.
    * @param string $operation
    *   Either 'backup', 'restore', or 'initialize' depending on the operation.
@@ -42,7 +44,7 @@ class DrupalConfigHelper {
   /**
    * Build the configuration form for a single plugin, source or destination.
    *
-   * @param \Drupal\backup_migrate\Drupal\Destination\DrupalDirectoryDestination|FileDirectorySource|MySQLiSource $plugin
+   * @param DrupalDirectoryDestination|FileDirectorySource|MySQLiSource $plugin
    *   The plugin, source or destination to build the form for.
    * @param string $operation
    *   Either 'backup', 'restore', or 'initialize' depending on the operation.
@@ -60,7 +62,7 @@ class DrupalConfigHelper {
   /**
    * @param array $schema
    *   A configuration schema from one or more Backup and Migrate plugins.
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface $config
+   * @param ConfigInterface $config
    *   The configuration object containing the default values.
    * @param array $parents
    *   The form parents array.
@@ -81,7 +83,7 @@ class DrupalConfigHelper {
    *   The form structure being worked on.
    * @param array $schema
    *   A configuration schema from one or more Backup and Migrate plugins.
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface $config
+   * @param ConfigInterface $config
    *   The configuration object containing the default values.
    * @param array $parents
    *   The form parents array.
@@ -208,7 +210,7 @@ class DrupalConfigHelper {
    *
    * @param $element
    * @param $input
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public static function valueCallbackSecret(&$element, $input, FormStateInterface $form_state) {
     if (empty($input)) {
@@ -220,7 +222,7 @@ class DrupalConfigHelper {
   /**
    * Get a pulldown for the given list of plugins.
    *
-   * @param \Drupal\backup_migrate\Core\Config\ConfigurableInterface[]|\Drupal\backup_migrate\Core\Plugin\PluginManagerInterface $plugins
+   * @param ConfigurableInterface[]|PluginManagerInterface $plugins
    * @param $title
    * @param $default_value
    *
@@ -242,7 +244,7 @@ class DrupalConfigHelper {
   /**
    * Get a select form item for the given list of sources.
    *
-   * @param \Drupal\backup_migrate\Core\Main\BackupMigrateInterface $bam
+   * @param BackupMigrateInterface $bam
    * @param $title
    * @param $default_value
    *
@@ -255,7 +257,7 @@ class DrupalConfigHelper {
   /**
    * Get a select form item for the given list of sources.
    *
-   * @param \Drupal\backup_migrate\Core\Main\BackupMigrateInterface $bam
+   * @param BackupMigrateInterface $bam
    * @param string $title
    * @param mixed $default_value
    *
diff --git a/src/Drupal/Destination/DrupalBrowserUploadDestination.php b/src/Drupal/Destination/DrupalBrowserUploadDestination.php
index 158052c..2fb6434 100644
--- a/src/Drupal/Destination/DrupalBrowserUploadDestination.php
+++ b/src/Drupal/Destination/DrupalBrowserUploadDestination.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\backup_migrate\Drupal\Destination;
 
+use Drupal\backup_migrate\Core\File\BackupFileReadableInterface;
 use Drupal\backup_migrate\Core\Destination\ReadableDestinationInterface;
 use Drupal\backup_migrate\Core\File\BackupFileInterface;
 use Drupal\backup_migrate\Core\File\ReadableStreamBackupFile;
@@ -30,9 +31,9 @@ class DrupalBrowserUploadDestination extends PluginBase implements ReadableDesti
   /**
    * Load the metadata for the given file however it may be stored.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileInterface
+   * @return BackupFileInterface
    */
   public function loadFileMetadata(BackupFileInterface $file) {
     return $file;
@@ -41,9 +42,9 @@ class DrupalBrowserUploadDestination extends PluginBase implements ReadableDesti
   /**
    * Load the file with the given ID from the destination.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileInterface $file
+   * @param BackupFileInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface The file if it exists or NULL if it doesn't
+   * @return BackupFileReadableInterface The file if it exists or NULL if it doesn't
    */
   public function loadFileForReading(BackupFileInterface $file) {
     return $file;
diff --git a/src/Drupal/Destination/DrupalDirectoryDestination.php b/src/Drupal/Destination/DrupalDirectoryDestination.php
index 469e512..66631fa 100644
--- a/src/Drupal/Destination/DrupalDirectoryDestination.php
+++ b/src/Drupal/Destination/DrupalDirectoryDestination.php
@@ -22,9 +22,9 @@ class DrupalDirectoryDestination extends DirectoryDestination {
    * This function is called to save the data file AND the metadata sidecar
    * file.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public function saveTheFile(BackupFileReadableInterface $file) {
     // Check if the directory exists.
@@ -41,7 +41,7 @@ class DrupalDirectoryDestination extends DirectoryDestination {
   /**
    * Check that the directory can be used for backup.
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   protected function checkDirectory() {
     // @todo Figure out if the file is or might be accessible via the web.
diff --git a/src/Drupal/EntityPlugins/Annotation/BackupMigrateDestinationPlugin.php b/src/Drupal/EntityPlugins/Annotation/BackupMigrateDestinationPlugin.php
index 0e912f8..ba3365f 100644
--- a/src/Drupal/EntityPlugins/Annotation/BackupMigrateDestinationPlugin.php
+++ b/src/Drupal/EntityPlugins/Annotation/BackupMigrateDestinationPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\backup_migrate\Drupal\EntityPlugins\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class BackupMigrateDestinationPlugin extends Plugin {
   /**
    * The human-readable name of the source plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -32,7 +33,7 @@ class BackupMigrateDestinationPlugin extends Plugin {
   /**
    * The description of the source plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Drupal/EntityPlugins/Annotation/BackupMigrateSourcePlugin.php b/src/Drupal/EntityPlugins/Annotation/BackupMigrateSourcePlugin.php
index 41c1859..3710a48 100644
--- a/src/Drupal/EntityPlugins/Annotation/BackupMigrateSourcePlugin.php
+++ b/src/Drupal/EntityPlugins/Annotation/BackupMigrateSourcePlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\backup_migrate\Drupal\EntityPlugins\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class BackupMigrateSourcePlugin extends Plugin {
   /**
    * The human-readable name of the source plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -32,7 +33,7 @@ class BackupMigrateSourcePlugin extends Plugin {
   /**
    * The description of the source plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Drupal/EntityPlugins/DestinationPluginManager.php b/src/Drupal/EntityPlugins/DestinationPluginManager.php
index 9fc762a..67f907b 100644
--- a/src/Drupal/EntityPlugins/DestinationPluginManager.php
+++ b/src/Drupal/EntityPlugins/DestinationPluginManager.php
@@ -19,9 +19,9 @@ class DestinationPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Drupal/EntityPlugins/SourcePluginManager.php b/src/Drupal/EntityPlugins/SourcePluginManager.php
index 0723622..807651f 100644
--- a/src/Drupal/EntityPlugins/SourcePluginManager.php
+++ b/src/Drupal/EntityPlugins/SourcePluginManager.php
@@ -19,9 +19,9 @@ class SourcePluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Drupal/EntityPlugins/WrapperPluginBase.php b/src/Drupal/EntityPlugins/WrapperPluginBase.php
index 365bc4b..6c0b6a2 100644
--- a/src/Drupal/EntityPlugins/WrapperPluginBase.php
+++ b/src/Drupal/EntityPlugins/WrapperPluginBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\backup_migrate\Drupal\EntityPlugins;
 
+use Drupal\backup_migrate\Core\Plugin\PluginInterface;
 use Drupal\backup_migrate\Core\Config\Config;
 use Drupal\backup_migrate\Core\Main\BackupMigrateInterface;
 use Drupal\Component\Plugin\PluginBase;
@@ -24,7 +25,7 @@ abstract class WrapperPluginBase extends PluginBase implements WrapperPluginInte
   /**
    * Get the Backup and Migrate plugin object.
    *
-   * @return Drupal\backup_migrate\Core\Plugin\PluginInterface
+   * @return PluginInterface
    */
   public function getObject() {
     // If the class to wrap was specified in the annotation then add that class.
@@ -70,7 +71,7 @@ abstract class WrapperPluginBase extends PluginBase implements WrapperPluginInte
   /**
    * Return a Backup and Migrate Config object with the plugin configuration.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function getConfig() {
     return new Config($this->getConfiguration());
diff --git a/src/Drupal/EntityPlugins/WrapperPluginInterface.php b/src/Drupal/EntityPlugins/WrapperPluginInterface.php
index 3d73530..96d2f0d 100644
--- a/src/Drupal/EntityPlugins/WrapperPluginInterface.php
+++ b/src/Drupal/EntityPlugins/WrapperPluginInterface.php
@@ -16,7 +16,7 @@ interface WrapperPluginInterface extends ConfigurableInterface, DependentPluginI
   /**
    * Alter the backup_migrate object to add the source and required services.
    *
-   * @param \Drupal\backup_migrate\Core\Main\BackupMigrateInterface $bam
+   * @param BackupMigrateInterface $bam
    *   The BackupMigrate object to add plugins and services to.
    * @param string $key
    *   The id of the source to add.
diff --git a/src/Drupal/File/DrupalTempFileAdapter.php b/src/Drupal/File/DrupalTempFileAdapter.php
index 866ebef..bc83ff1 100644
--- a/src/Drupal/File/DrupalTempFileAdapter.php
+++ b/src/Drupal/File/DrupalTempFileAdapter.php
@@ -16,14 +16,14 @@ class DrupalTempFileAdapter extends TempFileAdapter implements TempFileAdapterIn
   /**
    * The Drupal file system for provisioning temp files.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $filesystem;
 
   /**
    * Construct a manager.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $filesystem
+   * @param FileSystemInterface $filesystem
    *   A file path or stream URL for the temp directory.
    * @param string $dir
    *   The directory to save to.
diff --git a/src/Drupal/Filter/DrupalEncrypt.php b/src/Drupal/Filter/DrupalEncrypt.php
index ec367f8..6a49295 100644
--- a/src/Drupal/Filter/DrupalEncrypt.php
+++ b/src/Drupal/Filter/DrupalEncrypt.php
@@ -59,7 +59,7 @@ class DrupalEncrypt extends PluginBase implements FileProcessorInterface {
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
diff --git a/src/Drupal/Filter/DrupalPublicFileExcludeFilter.php b/src/Drupal/Filter/DrupalPublicFileExcludeFilter.php
index 4714fba..a731490 100644
--- a/src/Drupal/Filter/DrupalPublicFileExcludeFilter.php
+++ b/src/Drupal/Filter/DrupalPublicFileExcludeFilter.php
@@ -15,7 +15,7 @@ class DrupalPublicFileExcludeFilter extends FileExcludeFilter {
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     $config = [
diff --git a/src/Drupal/Filter/DrupalUtils.php b/src/Drupal/Filter/DrupalUtils.php
index 3ffab24..36eef2c 100644
--- a/src/Drupal/Filter/DrupalUtils.php
+++ b/src/Drupal/Filter/DrupalUtils.php
@@ -44,7 +44,7 @@ class DrupalUtils extends PluginBase {
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     return new Config([
@@ -96,9 +96,9 @@ class DrupalUtils extends PluginBase {
    *
    * @todo Remove this.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileReadableInterface
+   * @return BackupFileReadableInterface
    */
   public function beforeRestore(BackupFileReadableInterface $file) {
     return $file;
diff --git a/src/Drupal/Source/DrupalPublicFilesSource.php b/src/Drupal/Source/DrupalPublicFilesSource.php
index 16d7bad..51e3b07 100644
--- a/src/Drupal/Source/DrupalPublicFilesSource.php
+++ b/src/Drupal/Source/DrupalPublicFilesSource.php
@@ -15,7 +15,7 @@ class DrupalPublicFilesSource extends FileDirectorySource {
   /**
    * Get the default values for the plugin.
    *
-   * @return \Drupal\backup_migrate\Core\Config\Config
+   * @return Config
    */
   public function configDefaults() {
     $config = [
diff --git a/src/Drupal/Source/DrupalSiteArchiveSource.php b/src/Drupal/Source/DrupalSiteArchiveSource.php
index 081470c..c64d7a2 100644
--- a/src/Drupal/Source/DrupalSiteArchiveSource.php
+++ b/src/Drupal/Source/DrupalSiteArchiveSource.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\backup_migrate\Drupal\Source;
 
+use Drupal\backup_migrate\Core\Config\ConfigInterface;
+use Drupal\backup_migrate\Core\Exception\BackupMigrateException;
+use Drupal\backup_migrate\Core\Exception\IgnorableException;
+use Drupal\backup_migrate\Core\File\BackupFileWritableInterface;
 use Drupal\backup_migrate\Core\Source\FileDirectorySource;
 use Drupal\backup_migrate\Core\Source\SourceInterface;
 use Drupal\backup_migrate\Core\File\BackupFileReadableInterface;
@@ -14,13 +18,13 @@ use Drupal\backup_migrate\Core\File\BackupFileReadableInterface;
 class DrupalSiteArchiveSource extends FileDirectorySource {
 
   /**
-   * @var \Drupal\backup_migrate\Core\Source\SourceInterface
+   * @var SourceInterface
    */
   protected $dbSource;
 
   /**
-   * @param \Drupal\backup_migrate\Core\Config\ConfigInterface|array $init
-   * @param \Drupal\backup_migrate\Core\Source\SourceInterface $db
+   * @param ConfigInterface|array $init
+   * @param SourceInterface $db
    */
   public function __construct($init, SourceInterface $db) {
     parent::__construct($init);
@@ -38,8 +42,8 @@ class DrupalSiteArchiveSource extends FileDirectorySource {
    *
    * @return array
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
-   * @throws \Drupal\backup_migrate\Core\Exception\IgnorableException
+   * @throws BackupMigrateException
+   * @throws IgnorableException
    *
    * @internal param $directory
    */
@@ -69,7 +73,7 @@ class DrupalSiteArchiveSource extends FileDirectorySource {
    *
    * This is the main restore function for this source.
    *
-   * @param \Drupal\backup_migrate\Core\File\BackupFileReadableInterface $file
+   * @param BackupFileReadableInterface $file
    *   The file to read the backup from. It will not be opened for reading.
    *
    * @return bool|void
@@ -81,7 +85,7 @@ class DrupalSiteArchiveSource extends FileDirectorySource {
   /**
    * Get a file which contains the file.
    *
-   * @return \Drupal\backup_migrate\Core\File\BackupFileWritableInterface
+   * @return BackupFileWritableInterface
    */
   protected function getManifestFile() {
     $out = $this->getTempFileManager()->create('ini');
@@ -133,7 +137,7 @@ class DrupalSiteArchiveSource extends FileDirectorySource {
   }
 
   /**
-   * @return \Drupal\backup_migrate\Core\Source\SourceInterface
+   * @return SourceInterface
    */
   public function getDbSource() {
     return $this->dbSource;
diff --git a/src/Entity/Schedule.php b/src/Entity/Schedule.php
index 4511c38..b296565 100644
--- a/src/Entity/Schedule.php
+++ b/src/Entity/Schedule.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\backup_migrate\Entity;
 
+use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
 use Drupal\backup_migrate\Core\Config\Config;
 use Drupal\backup_migrate\Core\Destination\ListableDestinationInterface;
 use Drupal\backup_migrate\Core\Exception\BackupMigrateException;
@@ -58,7 +59,7 @@ class Schedule extends ConfigEntityBase {
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected static $state;
 
@@ -79,7 +80,7 @@ class Schedule extends ConfigEntityBase {
   /**
    * Run the schedule.
    *
-   * @param \Drupal\backup_migrate\Core\Main\BackupMigrateInterface $bam
+   * @param BackupMigrateInterface $bam
    *   The Backup and Migrate service object used to execute the backups.
    * @param bool $force
    *   Run the schedule even if it is not due to be run.
@@ -193,7 +194,7 @@ class Schedule extends ConfigEntityBase {
    *
    * Easier to replace in unit tests than mocking the actual state service.
    *
-   * @return \Drupal\Core\State\StateInterface
+   * @return StateInterface
    *   The state service.
    */
   protected static function state(): StateInterface {
@@ -220,10 +221,10 @@ class Schedule extends ConfigEntityBase {
   /**
    * Return the schedule frequency formatted for display in human language.
    *
-   * @return \Drupal\Core\StringTranslation\PluralTranslatableMarkup
+   * @return PluralTranslatableMarkup
    *   The schedule frequency.
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public function getPeriodFormatted() {
     return Schedule::formatPeriod(Schedule::secondsToPeriod($this->get('period')));
@@ -239,7 +240,7 @@ class Schedule extends ConfigEntityBase {
    *   An array containing the period definition and the number of them.
    *   ['number' => 123, 'type' => [...]]
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public static function secondsToPeriod($seconds) {
     foreach (array_reverse(Schedule::getPeriodTypes()) as $type) {
@@ -260,7 +261,7 @@ class Schedule extends ConfigEntityBase {
    * @return mixed
    *   The number of seconds. Should be an integer value.
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public static function periodToSeconds(array $period) {
     return $period['number'] * $period['type']['seconds'];
@@ -272,7 +273,7 @@ class Schedule extends ConfigEntityBase {
    * @param int $period
    *   The array to convert.
    *
-   * @return \Drupal\Core\StringTranslation\PluralTranslatableMarkup
+   * @return PluralTranslatableMarkup
    *   The converted period.
    */
   public static function formatPeriod($period) {
diff --git a/src/Entity/WrapperEntityBase.php b/src/Entity/WrapperEntityBase.php
index bfbedaf..19ddb90 100644
--- a/src/Entity/WrapperEntityBase.php
+++ b/src/Entity/WrapperEntityBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\backup_migrate\Entity;
 
+use Drupal\block\BlockPluginCollection;
+use Drupal\backup_migrate\Core\Exception\BackupMigrateException;
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
 use Drupal\Core\Plugin\DefaultSingleLazyPluginCollection;
@@ -34,14 +38,14 @@ abstract class WrapperEntityBase extends ConfigEntityBase implements EntityWithP
   /**
    * The plugin collection that holds the block plugin for this entity.
    *
-   * @var \Drupal\block\BlockPluginCollection
+   * @var BlockPluginCollection
    */
   protected $pluginCollection;
 
   /**
    * @return SourcePluginInterface
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public function getObject() {
     if ($plugin = $this->getPlugin()) {
@@ -54,7 +58,7 @@ abstract class WrapperEntityBase extends ConfigEntityBase implements EntityWithP
    *
    * @return mixed
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public function getPlugin() {
     if ($this->get('type')) {
@@ -68,7 +72,7 @@ abstract class WrapperEntityBase extends ConfigEntityBase implements EntityWithP
    *
    * @return mixed
    *
-   * @throws \Drupal\backup_migrate\Core\Exception\BackupMigrateException
+   * @throws BackupMigrateException
    */
   public function getPluginDefinition() {
     if ($plugin = $this->getPlugin()) {
@@ -80,7 +84,7 @@ abstract class WrapperEntityBase extends ConfigEntityBase implements EntityWithP
   /**
    * Gets the plugin collections used by this entity.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection[]
+   * @return LazyPluginCollection[]
    *   An array of plugin collections, keyed by the property name they use to
    *   store their configuration.
    */
@@ -92,7 +96,7 @@ abstract class WrapperEntityBase extends ConfigEntityBase implements EntityWithP
   }
 
   /**
-   * @return \Drupal\block\BlockPluginCollection
+   * @return BlockPluginCollection
    */
   public function getPluginCollection() {
     if ($this->get('type')) {
@@ -123,7 +127,7 @@ abstract class WrapperEntityBase extends ConfigEntityBase implements EntityWithP
   /**
    * Return the plugin manager.
    *
-   * @return \Drupal\Component\Plugin\PluginManagerInterface
+   * @return PluginManagerInterface
    */
   abstract public function getPluginManager();
 
diff --git a/src/Form/BackupDeleteForm.php b/src/Form/BackupDeleteForm.php
index 7363ca7..b112698 100644
--- a/src/Form/BackupDeleteForm.php
+++ b/src/Form/BackupDeleteForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\backup_migrate\Form;
 
+use Drupal\backup_migrate\Entity\Destination;
+use Drupal\Core\Url;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -11,7 +13,7 @@ use Drupal\Core\Form\FormStateInterface;
 class BackupDeleteForm extends ConfirmFormBase {
 
   /**
-   * @var \Drupal\backup_migrate\Entity\Destination
+   * @var Destination
    */
   public $destination;
 
@@ -52,7 +54,7 @@ class BackupDeleteForm extends ConfirmFormBase {
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ -84,7 +86,7 @@ class BackupDeleteForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/BackupRestoreForm.php b/src/Form/BackupRestoreForm.php
index a0bccab..9e15614 100644
--- a/src/Form/BackupRestoreForm.php
+++ b/src/Form/BackupRestoreForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\backup_migrate\Form;
 
+use Drupal\backup_migrate\Entity\Destination;
+use Drupal\Core\Url;
 use Drupal\backup_migrate\Drupal\Config\DrupalConfigHelper;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -12,7 +14,7 @@ use Drupal\Core\Form\FormStateInterface;
 class BackupRestoreForm extends ConfirmFormBase {
 
   /**
-   * @var \Drupal\backup_migrate\Entity\Destination
+   * @var Destination
    */
   public $destination;
 
@@ -41,7 +43,7 @@ class BackupRestoreForm extends ConfirmFormBase {
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ -60,7 +62,7 @@ class BackupRestoreForm extends ConfirmFormBase {
 
   /**
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    * @param $backup_migrate_destination
    * @param $backupId
    *
@@ -85,7 +87,7 @@ class BackupRestoreForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/WrapperEntityForm.php b/src/Form/WrapperEntityForm.php
index aa5a495..29a99cb 100644
--- a/src/Form/WrapperEntityForm.php
+++ b/src/Form/WrapperEntityForm.php
@@ -105,11 +105,11 @@ class WrapperEntityForm extends EntityForm {
    *
    * Let it store the config which would otherwise be removed for some reason.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
diff --git a/src/Plugin/BackupMigrateSource/DefaultDBSourcePlugin.php b/src/Plugin/BackupMigrateSource/DefaultDBSourcePlugin.php
index 9db82d8..a2b3432 100644
--- a/src/Plugin/BackupMigrateSource/DefaultDBSourcePlugin.php
+++ b/src/Plugin/BackupMigrateSource/DefaultDBSourcePlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\backup_migrate\Plugin\BackupMigrateSource;
 
+use Drupal\backup_migrate\Core\Plugin\PluginInterface;
 use Drupal\Core\Database\Database;
 use Drupal\backup_migrate\Core\Config\Config;
 use Drupal\backup_migrate\Core\Filter\DBExcludeFilter;
@@ -24,7 +25,7 @@ class DefaultDBSourcePlugin extends SourcePluginBase {
   /**
    * Get the Backup and Migrate plugin object.
    *
-   * @return Drupal\backup_migrate\Core\Plugin\PluginInterface
+   * @return PluginInterface
    */
   public function getObject() {
     // Add the default database.
diff --git a/src/Plugin/BackupMigrateSource/EntireSiteSourcePlugin.php b/src/Plugin/BackupMigrateSource/EntireSiteSourcePlugin.php
index bbca793..657ecaf 100644
--- a/src/Plugin/BackupMigrateSource/EntireSiteSourcePlugin.php
+++ b/src/Plugin/BackupMigrateSource/EntireSiteSourcePlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\backup_migrate\Plugin\BackupMigrateSource;
 
+use Drupal\backup_migrate\Core\Plugin\PluginInterface;
 use Drupal\Core\Database\Database;
 use Drupal\backup_migrate\Core\Config\Config;
 use Drupal\backup_migrate\Drupal\Source\DrupalMySQLiSource;
@@ -26,7 +27,7 @@ class EntireSiteSourcePlugin extends SourcePluginBase {
   /**
    * Get the Backup and Migrate plugin object.
    *
-   * @return Drupal\backup_migrate\Core\Plugin\PluginInterface
+   * @return PluginInterface
    */
   public function getObject() {
     // Add the default database.
