modules/contrib/layout_library/layout_library.module
modules/contrib/layout_library/src/Entity/Layout.php
modules/contrib/layout_library/src/Entity/LayoutListBuilder.php
modules/contrib/layout_library/src/EventSubscriber/PrepareLayout.php
modules/contrib/layout_library/src/Form/LayoutAddForm.php
modules/contrib/layout_library/src/Form/LayoutBuilderForm.php
modules/contrib/layout_library/src/Form/LayoutDeleteForm.php
modules/contrib/layout_library/src/Form/LayoutForm.php
modules/contrib/layout_library/src/LayoutStorageHandler.php
modules/contrib/layout_library/src/Plugin/EntityReferenceSelection/LayoutLibrary.php
modules/contrib/layout_library/src/Plugin/SectionStorage/Library.php
modules/contrib/layout_library/tests/src/Functional/AddLayoutTest.php
modules/contrib/layout_library/tests/src/Functional/LayoutDisplayTest.php
modules/contrib/layout_library/tests/src/Functional/LayoutLibraryTest.php
modules/contrib/layout_library/tests/src/Functional/LayoutSelectionTest.php
modules/contrib/layout_library/tests/src/Functional/LibraryAccessTest.php
modules/contrib/layout_library/tests/src/Kernel/LayoutSelectionFieldTest.php

12 files with changes
=====================

1) modules/contrib/layout_library/tests/src/Kernel/LayoutSelectionFieldTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('node');
     $this->installSchema('system', ['key_value_expire']);
@@ @@
    * Tests that the layout_selection persists if multiple displays are using it.
    */
   public function testFieldPersistsForMultipleDisplays() {
-    /** @var \Drupal\layout_builder\Entity\LayoutEntityDisplayInterface $full_display */
+    /** @var LayoutEntityDisplayInterface $full_display */
     $full_display = \Drupal::service('entity_display.repository')->getViewDisplay('node', 'test', 'full');
     $this->assertInstanceOf(LayoutEntityDisplayInterface::class, $full_display);
     $full_display->enableLayoutBuilder()
@@ @@
       ->save();
     $this->assertFieldExists();

-    /** @var \Drupal\layout_builder\Entity\LayoutEntityDisplayInterface $teaser_display */
+    /** @var LayoutEntityDisplayInterface $teaser_display */
     $teaser_display = \Drupal::service('entity_display.repository')->getViewDisplay('node', 'test', 'teaser');
     $this->assertInstanceOf(LayoutEntityDisplayInterface::class, $teaser_display);
     $teaser_display->enableLayoutBuilder()
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/layout_library/tests/src/Functional/LibraryAccessTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->layoutAdmin = $this->drupalCreateUser(['configure any layout']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/layout_library/tests/src/Functional/LayoutSelectionTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'alpha']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/layout_library/tests/src/Functional/LayoutLibraryTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('local_actions_block');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/layout_library/tests/src/Functional/LayoutDisplayTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('local_actions_block');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/layout_library/tests/src/Functional/AddLayoutTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('local_actions_block');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/layout_library/src/Plugin/SectionStorage/Library.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layout_library\Plugin\SectionStorage;

+use Drupal\layout_builder\SectionListInterface;
+use Drupal\layout_library\Entity\Layout;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Plugin\Context\ContextInterface as ComponentContextInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Sample entity generation.
    *
-   * @var \Drupal\layout_builder\Entity\LayoutBuilderSampleEntityGenerator
+   * @var LayoutBuilderSampleEntityGenerator
    */
   protected $sampleEntityGenerator;

@@ @@
    *   ID.
    * @param mixed $plugin_definition
    *   Definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\layout_builder\Entity\LayoutBuilderSampleEntityGenerator $sampleEntityGenerator
+   * @param LayoutBuilderSampleEntityGenerator $sampleEntityGenerator
    *   Sample entity generator.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager, LayoutBuilderSampleEntityGenerator $sampleEntityGenerator) {
@@ @@
   /**
    * Gets the layout.
    *
-   * @return \Drupal\layout_builder\SectionListInterface|\Drupal\layout_library\Entity\Layout
+   * @return SectionListInterface|Layout
    *   Layout.
    */
   protected function getLayout() {
@@ @@
   /**
    * Returns an array of relevant entity types.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   An array of entity types.
    */
   protected function getEntityTypes() {
@@ @@
    * @param array $defaults
    *   The route defaults array.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity for the route, or NULL if none exist.
    */
   protected function extractEntityFromRoute($value, array $defaults) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/layout_library/src/Form/LayoutBuilderForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Layout tempstore repository.
    *
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;

@@ @@
   /**
    * The section storage.
    *
-   * @var \Drupal\layout_builder\SectionStorageInterface
+   * @var SectionStorageInterface
    */
   protected $sectionStorage;

@@ @@
   /**
    * Constructs a new DefaultsEntityForm.
    *
-   * @param \Drupal\layout_builder\LayoutTempstoreRepositoryInterface $layout_tempstore_repository
+   * @param LayoutTempstoreRepositoryInterface $layout_tempstore_repository
    *   The layout tempstore repository.
    */
   public function __construct(LayoutTempstoreRepositoryInterface $layout_tempstore_repository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/layout_library/src/Form/LayoutAddForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

@@ @@
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new LayoutAddForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfo
+   * @param EntityTypeBundleInfoInterface $bundleInfo
    *   Bundle info.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $bundleInfo, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/layout_library/src/EventSubscriber/PrepareLayout.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The layout tempstore repository.
    *
-   * @var \Drupal\layout_builder\LayoutTempstoreRepositoryInterface
+   * @var LayoutTempstoreRepositoryInterface
    */
   protected $layoutTempstoreRepository;

@@ @@
   /**
    * PrepareLayout constructor.
    *
-   * @param \Drupal\layout_builder\LayoutTempstoreRepositoryInterface $layout_tempstore_repository
+   * @param LayoutTempstoreRepositoryInterface $layout_tempstore_repository
    *   The tempstore repository.
    */
   public function __construct(LayoutTempstoreRepositoryInterface $layout_tempstore_repository) {
@@ @@
   /**
    * Prepares a layout for use in the UI.
    *
-   * @param \Drupal\layout_builder\Event\PrepareLayoutEvent $event
+   * @param PrepareLayoutEvent $event
    *   The prepare layout event.
    */
   public function onPrepareLayout(PrepareLayoutEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/layout_library/src/Entity/LayoutListBuilder.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a new LayoutListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   Entity type.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   Entity storage.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundleInfo
+   * @param EntityTypeBundleInfoInterface $bundleInfo
    *   Bundle info.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   Current user.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $bundleInfo, AccountInterface $currentUser) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\layout_library\Entity\Layout $entity */
+    /** @var Layout $entity */
     $targetEntityTypeId = $entity->getTargetEntityType();
     $bundle_info = $this->bundleInfo->getBundleInfo($targetEntityTypeId);
     $bundle_name = isset($bundle_info[$entity->getTargetBundle()]) ? $bundle_info[$entity->getTargetBundle()]['label'] : $entity->getTargetBundle();
@@ @@
    * {@inheritdoc}
    */
   protected function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\layout_library\Entity\Layout $entity */
+    /** @var Layout $entity */
     $operations = [];
     if ($this->currentUser->hasPermission('administer ' . $entity->getTargetEntityType() . ' display')) {
       $operations['edit'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/layout_library/src/Entity/Layout.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\layout_library\Entity;

+use Drupal\layout_builder\Section;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\field_ui\FieldUI;
 use Drupal\layout_builder\SectionListInterface;
@@ @@
    * Implementations of this method are expected to call array_values() to rekey
    * the list of sections.
    *
-   * @param \Drupal\layout_builder\Section[] $sections
+   * @param Section[] $sections
    *   An array of section objects.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 12 files have been changed by Rector                                      

