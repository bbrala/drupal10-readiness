modules/contrib/group_behavior/group_behavior.install
modules/contrib/group_behavior/group_behavior.module
modules/contrib/group_behavior/modules/field_sync/group_behavior_field_sync.module
modules/contrib/group_behavior/modules/field_sync/src/FieldSyncEntityHooks.php
modules/contrib/group_behavior/modules/field_sync/src/FieldSyncFormHooks.php
modules/contrib/group_behavior/modules/field_sync/src/FieldSyncHelpers.php
modules/contrib/group_behavior/src/GroupBehaviorEntityHooks.php
modules/contrib/group_behavior/src/GroupBehaviorFormHooks.php
modules/contrib/group_behavior/src/GroupBehaviorHelpers.php
modules/contrib/group_behavior/tests/src/Functional/AdminPageTest.php

8 files with changes
====================

1) modules/contrib/group_behavior/tests/src/Functional/AdminPageTest.php:32

    ---------- begin diff ----------
@@ @@
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/group_behavior/src/GroupBehaviorHelpers.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_behavior;

+use Drupal\group\Plugin\GroupContentEnablerInterface;
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
 class GroupBehaviorHelpers {

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return array
    */
@@ @@
     $groups = [];
     if ($entity instanceof ContentEntityInterface) {
       if ($groupContents = GroupContent::loadByEntity($entity)) {
-        /** @var \Drupal\group\Entity\GroupContentInterface[] $groupContents */
+        /** @var GroupContentInterface[] $groupContents */
         foreach ($groupContents as $groupContent) {
           $groupContentType = $groupContent->getGroupContentType();
           if (static::checkGroupContentTypeHasGroupBehavior($groupContentType)) {
@@ @@
   /**
    * Filter group content by type.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   * @param \Drupal\group\Entity\GroupContentTypeInterface $groupContentType
+   * @param EntityInterface $entity
+   * @param GroupContentTypeInterface $groupContentType
    *
-   * @return \Drupal\group\Entity\GroupContentInterface[]
+   * @return GroupContentInterface[]
    */
   public static function fetchEntityGroupContentOfType(EntityInterface $entity, GroupContentTypeInterface $groupContentType) {
     if ($entity instanceof ContentEntityInterface) {
@@ @@
   /**
    * Get applicable group content types.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    *
-   * @return \Drupal\group\Entity\GroupContentTypeInterface[]
+   * @return GroupContentTypeInterface[]
    *   Group content types.
    */
   public static function fetchGroupContentTypesWithGroupBehaviorByEntity(EntityInterface $entity) {
-    /** @var \Drupal\group\Entity\GroupContentTypeInterface[] $groupContentTypes */
+    /** @var GroupContentTypeInterface[] $groupContentTypes */
     $groupContentTypes = GroupContentType::loadByEntityTypeId($entity->getEntityTypeId());
     $groupContentTypes = self::filterGroupContentTypesWithGroupBehavior($groupContentTypes);
     $groupContentTypes = self::filterGroupContentTypesByBundle($groupContentTypes, $entity->bundle());
@@ @@
   /**
    * Filter group content types by setting.
    *
-   * @param \Drupal\group\Entity\GroupContentTypeInterface[] $groupContentTypes
+   * @param GroupContentTypeInterface[] $groupContentTypes
    *   Group content types.
    *
-   * @return \Drupal\group\Entity\GroupContentTypeInterface[]
+   * @return GroupContentTypeInterface[]
    *   Group content types.
    */
   protected static function filterGroupContentTypesWithGroupBehavior($groupContentTypes) {
@@ @@
   }

   /**
-   * @param \Drupal\group\Entity\GroupContentTypeInterface[] $groupContentTypes
+   * @param GroupContentTypeInterface[] $groupContentTypes
    *   Group content types.
    * @param string $bundle
    *   The bundle.
-   * @return \Drupal\group\Entity\GroupContentTypeInterface[]
+   * @return GroupContentTypeInterface[]
    *   Group content types.
    */
   protected static function filterGroupContentTypesByBundle($groupContentTypes, $bundle) {
@@ @@
   }

   /**
-   * @param \Drupal\group\Entity\GroupContentTypeInterface $groupContentType
+   * @param GroupContentTypeInterface $groupContentType
    *
    * @return bool
    */
@@ @@
   }

   /**
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *
    * @return mixed
    */
@@ @@
   }

   /**
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *
-   * @return \Drupal\group\Plugin\GroupContentEnablerInterface|null
+   * @return GroupContentEnablerInterface|null
    */
   public static function getGroupBehaviorContentPlugin(GroupTypeInterface $groupType) {
-    /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $pluginManager */
+    /** @var GroupContentEnablerManagerInterface $pluginManager */
     $pluginManager = \Drupal::service('plugin.manager.group_content_enabler');
     $contentPluginId = GroupBehaviorHelpers::getGroupBehaviorContentPluginId($groupType);
     try {
-      /** @var \Drupal\group\Plugin\GroupContentEnablerInterface $contentPlugin */
+      /** @var GroupContentEnablerInterface $contentPlugin */
       $contentPlugin = $pluginManager->createInstance($contentPluginId);
     }
     catch (PluginException $e) {
@@ @@
   }

   /**
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    * @param $id
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/group_behavior/src/GroupBehaviorFormHooks.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_behavior;

+use Drupal\Core\Entity\EntityFormInterface;
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\group\Entity\GroupTypeInterface;
@@ @@
 class GroupBehaviorFormHooks {

   public static function alterGroupTypeEditForm(&$form, FormStateInterface $form_state, $form_id) {
-    /** @var \Drupal\Core\Entity\EntityFormInterface $formObject */
+    /** @var EntityFormInterface $formObject */
     $formObject = $form_state->getFormObject();
-    /** @var \Drupal\group\Entity\GroupTypeInterface $groupType */
+    /** @var GroupTypeInterface $groupType */
     $groupType = $formObject->getEntity();

     $form['third_party_settings']['#tree'] = TRUE;
@@ @@
   }

   private static function contentPluginOptions(GroupTypeInterface $groupType) {
-    /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $pluginManager */
+    /** @var GroupContentEnablerManagerInterface $pluginManager */
     $pluginManager = \Drupal::service('plugin.manager.group_content_enabler');
     $options = [];
     foreach ($pluginManager->getInstalledIds($groupType) as $id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/group_behavior/src/GroupBehaviorEntityHooks.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_behavior;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\group\Entity\Group;
@@ @@
   /**
    * Post insert.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function insert(EntityInterface $entity) {
     self::createGroupsIfNecessary($entity);
@@ @@
   /**
    * Post update.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function update(EntityInterface $entity) {
     self::createGroupsIfNecessary($entity);
@@ @@
   /**
    * Post insert translation.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function insertTranslation(EntityInterface $entity) {
     self::createGroupsIfNecessary($entity);
@@ @@
   /**
    * Post delete translation.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function deleteTranslation(EntityInterface $entity) {
     self::updateGroupsAndContentConnectorIfNecessary($entity);
@@ @@
   /**
    * Post delete.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   public static function delete(EntityInterface $entity) {
     // Note that deleting content will delete the GroupContent relation via
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected static function createGroupsIfNecessary(EntityInterface $entity) {
     if ($entity instanceof ContentEntityInterface) {
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected static function updateGroupsAndContentConnectorIfNecessary(EntityInterface $entity) {
     if ($entity instanceof ContentEntityInterface) {
       $entityLangcode = $entity->language()->getId();
       if ($groupContents = GroupContent::loadByEntity($entity)) {
-        /** @var \Drupal\group\Entity\GroupContentInterface[] $groupContents */
+        /** @var GroupContentInterface[] $groupContents */
         foreach ($groupContents as $groupContent) {
           $groupContentType = $groupContent->getGroupContentType();
           if (GroupBehaviorHelpers::checkGroupContentTypeHasGroupBehavior($groupContentType)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/group_behavior/modules/field_sync/src/FieldSyncHelpers.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_behavior_field_sync;

+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\group\Entity\GroupTypeInterface;
 use Drupal\group_behavior\GroupBehaviorHelpers;

@@ @@
 class FieldSyncHelpers {

   /**
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *
    * @return mixed
    */
@@ @@
   }

   /**
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param GroupTypeInterface $groupType
    *
-   * @return array|\Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return array|FieldDefinitionInterface[]
    */
   public static function groupBehaviorBundleFieldDefinitions(GroupTypeInterface $groupType) {
     $contentPlugin = GroupBehaviorHelpers::getGroupBehaviorContentPlugin($groupType);
@@ @@
     if ($contentPlugin) {
       $entityTypeId = $contentPlugin->getEntityTypeId();
       $bundle = $contentPlugin->getEntityBundle();
-      /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
+      /** @var EntityFieldManagerInterface $entityFieldManager */
       $entityFieldManager = \Drupal::service('entity_field.manager');
       $fieldDefinitions = $entityFieldManager->getFieldDefinitions($entityTypeId, $bundle);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/group_behavior/modules/field_sync/src/FieldSyncFormHooks.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\group_behavior_field_sync;

+use Drupal\Core\Entity\EntityFormInterface;
+use Drupal\group\Entity\GroupTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * @see \Drupal\group_behavior\GroupBehaviorFormHooks::alterGroupTypeEditForm
    */
   public static function alterGroupTypeEditForm(&$form, FormStateInterface $form_state, $form_id) {
-    /** @var \Drupal\Core\Entity\EntityFormInterface $formObject */
+    /** @var EntityFormInterface $formObject */
     $formObject = $form_state->getFormObject();
-    /** @var \Drupal\group\Entity\GroupTypeInterface $groupType */
+    /** @var GroupTypeInterface $groupType */
     $groupType = $formObject->getEntity();

     $tpsForm =&$form['third_party_settings']['group_behavior'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/group_behavior/modules/field_sync/src/FieldSyncEntityHooks.php:40

    ---------- begin diff ----------
@@ @@
    * rely on the GroupContent relation when this is called. (And ignore the
    * missing relation on the first save.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   public static function postSave(EntityInterface $entity) {
     if (static::$doingDomainSync) {
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    */
   protected static function doPostSave(EntityInterface $entity) {
     if (
@@ @@
       && ($groupContents = GroupContent::loadByEntity($entity))
     ) {
       $syncedToThis = FALSE;
-      /** @var \Drupal\group\Entity\GroupContentInterface[] $groupContents */
+      /** @var GroupContentInterface[] $groupContents */
       foreach ($groupContents as $groupContent) {
         $groupContentType = $groupContent->getGroupContentType();
         $groupEnabler = $groupContentType->getContentPlugin();
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $thisEntity
-   * @param \Drupal\group\Entity\GroupTypeInterface $groupType
+   * @param FieldableEntityInterface $thisEntity
+   * @param GroupTypeInterface $groupType
    * @param array $groupContentIds
    */
   public static function copyFieldsToGroupContent(FieldableEntityInterface $thisEntity, GroupTypeInterface $groupType, array $groupContentIds) {
@@ @@
   /**
    * Copy fields. But not to users.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $sourceEntity
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $destinationEntity
+   * @param FieldableEntityInterface $sourceEntity
+   * @param FieldableEntityInterface $destinationEntity
    * @param array $fieldNames
    */
   protected static function copyFields(FieldableEntityInterface $sourceEntity, FieldableEntityInterface $destinationEntity, array $fieldNames) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/group_behavior/group_behavior.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\group\Entity\GroupContentTypeInterface;
 /**
  * Implements hook_update_N().
  *
@@ @@
  */
 function group_behavior_update_8001(&$sandbox) {
   $storage = \Drupal::entityTypeManager()->getStorage('group_content_type');
-  /** @var \Drupal\group\Entity\GroupContentTypeInterface $groupContentType */
+  /** @var GroupContentTypeInterface $groupContentType */
   foreach ($storage->loadMultiple() as $groupContentType) {
     $enabled = $groupContentType->getThirdPartySetting('group_behavior', 'autocreate');
     $groupContentType->setThirdPartySetting('group_behavior', 'enabled', $enabled);
@@ @@
  */
 function group_behavior_update_8002(&$sandbox) {
   $storage = \Drupal::entityTypeManager()->getStorage('group_content_type');
-  /** @var \Drupal\group\Entity\GroupContentTypeInterface $groupContentType */
+  /** @var GroupContentTypeInterface $groupContentType */
   foreach ($storage->loadMultiple() as $groupContentType) {
     $enabled = $groupContentType->getThirdPartySetting('group_behavior', 'enabled');
     if ($enabled) {
@@ @@
  */
 function group_behavior_update_8003(&$sandbox) {
   $storage = \Drupal::entityTypeManager()->getStorage('group_content_type');
-  /** @var \Drupal\group\Entity\GroupContentTypeInterface $groupContentType */
+  /** @var GroupContentTypeInterface $groupContentType */
   foreach ($storage->loadMultiple() as $groupContentType) {
     // This will also remove our sub-array.
     $groupContentType->unsetThirdPartySetting('group_behavior', 'domain_sync');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

