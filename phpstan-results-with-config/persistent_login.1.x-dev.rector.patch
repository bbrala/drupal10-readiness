diff --git a/Tests/src/Functional/PersistentLoginTest.php b/Tests/src/Functional/PersistentLoginTest.php
index 8d19787..48ff6d7 100644
--- a/Tests/src/Functional/PersistentLoginTest.php
+++ b/Tests/src/Functional/PersistentLoginTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\persistent_login\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Symfony\Component\BrowserKit\CookieJar;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -14,7 +16,7 @@ class PersistentLoginTest extends BrowserTestBase {
   /**
    * A test user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;
 
@@ -26,7 +28,7 @@ class PersistentLoginTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Mimic the required setup of the module by setting the session cookie
@@ -110,7 +112,7 @@ class PersistentLoginTest extends BrowserTestBase {
   /**
    * Returns the jar which contains the cookies for the current session.
    *
-   * @return \Symfony\Component\BrowserKit\CookieJar
+   * @return CookieJar
    *   The cookie jar.
    */
   protected function getCookieJar() {
diff --git a/composer.json b/composer.json
index 7e5c817..7dbfc84 100644
--- a/composer.json
+++ b/composer.json
@@ -11,6 +11,6 @@
     "source": "https://git.drupalcode.org/project/persistent_login"
   },
   "require": {
-    "drupal/core" : "^8.3 || ^9.0"
+    "drupal/core": "^8.3 || ^9.0 || ^10"
   }
 }
diff --git a/persistent_login.info.yml b/persistent_login.info.yml
index ccc4785..2167c1b 100644
--- a/persistent_login.info.yml
+++ b/persistent_login.info.yml
@@ -2,8 +2,7 @@ name: Persistent Login
 type: module
 description: Provides a "Remember Me" feature on the login form.
 configure: persistent_login.settings
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: Other
 
 dependencies:
diff --git a/src/Controller/UserController.php b/src/Controller/UserController.php
index 6d9eaa2..08fc72e 100644
--- a/src/Controller/UserController.php
+++ b/src/Controller/UserController.php
@@ -19,21 +19,21 @@ class UserController extends ControllerBase {
   /**
    * The token manager service.
    *
-   * @var \Drupal\persistent_login\TokenManager
+   * @var TokenManager
    */
   protected $tokenManager;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -64,7 +64,7 @@ class UserController extends ControllerBase {
   /**
    * List users's active tokens.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user account object.
    *
    * @return string Render array with list of user's active tokens.
diff --git a/src/CookieHelper.php b/src/CookieHelper.php
index 49ee7dd..7448c18 100644
--- a/src/CookieHelper.php
+++ b/src/CookieHelper.php
@@ -14,23 +14,23 @@ class CookieHelper implements CookieHelperInterface {
   /**
    * The session configuration.
    *
-   * @var \Drupal\Core\Session\SessionConfigurationInterface
+   * @var SessionConfigurationInterface
    */
   private $sessionConfiguration;
 
   /**
    * The Config Factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;
 
   /**
    * Instantiates a new CookieHelper instance.
    *
-   * @param \Drupal\Core\Session\SessionConfigurationInterface $session_configuration
+   * @param SessionConfigurationInterface $session_configuration
    *   The session configuration.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The Config Factory service.
    */
   public function __construct(SessionConfigurationInterface $session_configuration, ConfigFactoryInterface $configFactory) {
diff --git a/src/CookieHelperInterface.php b/src/CookieHelperInterface.php
index b279e49..5370cbe 100644
--- a/src/CookieHelperInterface.php
+++ b/src/CookieHelperInterface.php
@@ -12,7 +12,7 @@ interface CookieHelperInterface {
   /**
    * Returns the name of the persistent login cookie.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return string
@@ -23,7 +23,7 @@ interface CookieHelperInterface {
   /**
    * Returns the value of the persistent login cookie.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return string
@@ -34,7 +34,7 @@ interface CookieHelperInterface {
   /**
    * Checks if a request contains a persistent login cookie.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return bool
diff --git a/src/EventSubscriber/TokenHandler.php b/src/EventSubscriber/TokenHandler.php
index 711d5fe..fa1b519 100644
--- a/src/EventSubscriber/TokenHandler.php
+++ b/src/EventSubscriber/TokenHandler.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\persistent_login\EventSubscriber;
 
+use Drupal\persistent_login\CookieHelper;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Drupal\User\UserInterface;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\SessionConfigurationInterface;
@@ -12,8 +16,6 @@ use Drupal\persistent_login\TokenManager;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Cookie;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -26,48 +28,48 @@ class TokenHandler implements EventSubscriberInterface {
   /**
    * The token manager service.
    *
-   * @var \Drupal\persistent_login\TokenManager
+   * @var TokenManager
    */
   protected $tokenManager;
 
   /**
    * The cookie helper service.
    *
-   * @var \Drupal\persistent_login\CookieHelper
+   * @var CookieHelper
    */
   protected $cookieHelper;
 
   /**
    * The session configuration.
    *
-   * @var \Drupal\Core\Session\SessionConfigurationInterface
+   * @var SessionConfigurationInterface
    */
   protected $sessionConfiguration;
 
   /**
    * The Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The persistent token of the current request.
    *
-   * @var \Drupal\persistent_login\PersistentToken
+   * @var PersistentToken
    */
   protected $token;
 
   /**
    * Construct a token manager object.
    *
-   * @param \Drupal\persistent_login\TokenManager $token_manager
+   * @param TokenManager $token_manager
    *   The token manager service.
-   * @param \Drupal\persistent_login\CookieHelperInterface $cookie_helper
+   * @param CookieHelperInterface $cookie_helper
    *   The cookie helper service.
-   * @param \Drupal\Core\Session\SessionConfigurationInterface $session_configuration
+   * @param SessionConfigurationInterface $session_configuration
    *   The session configuration.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
    */
   public function __construct(
@@ -101,10 +103,10 @@ class TokenHandler implements EventSubscriberInterface {
   /**
    * Load a token on this request, if a persistent cookie is provided.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The request event.
    */
-  public function loadTokenOnRequestEvent(GetResponseEvent $event) {
+  public function loadTokenOnRequestEvent(RequestEvent $event) {
 
     if (!$event->isMasterRequest()) {
       return;
@@ -122,7 +124,7 @@ class TokenHandler implements EventSubscriberInterface {
         if ($this->token->getStatus() === PersistentToken::STATUS_VALID) {
           try {
             // TODO make sure we are starting the user session properly.
-            /** @var \Drupal\User\UserInterface $user */
+            /** @var UserInterface $user */
             $user = $this->entityTypeManager->getStorage('user')
               ->load($this->token->getUid());
             user_login_finalize($user);
@@ -137,10 +139,10 @@ class TokenHandler implements EventSubscriberInterface {
   /**
    * Set or clear a token cookie on this response, if required.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event.
    */
-  public function setTokenOnResponseEvent(FilterResponseEvent $event) {
+  public function setTokenOnResponseEvent(ResponseEvent $event) {
 
     if (!$event->isMasterRequest()) {
       return;
@@ -155,13 +157,14 @@ class TokenHandler implements EventSubscriberInterface {
         // New or updated token.
         $this->token = $this->tokenManager->updateToken($this->token);
         $response->headers->setCookie(
-          new Cookie(
-            $this->cookieHelper->getCookieName($request),
-            $this->token,
-            $this->token->getExpiry(),
-            '/',  // TODO Path should probably match the base path.
-            $sessionOptions['cookie_domain'],
-            $sessionOptions['cookie_secure']
+          Cookie::create(
+              $this->cookieHelper->getCookieName($request),
+              $this->token,
+              $this->token->getExpiry(),
+              '/',
+              // TODO Path should probably match the base path.
+              $sessionOptions['cookie_domain'],
+              $sessionOptions['cookie_secure']
           )
         );
         $response->setPrivate();
@@ -186,10 +189,10 @@ class TokenHandler implements EventSubscriberInterface {
   /**
    * Create a token object from the cookie provided in the request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request that contains a persistent login cookie.
    *
-   * @return \Drupal\persistent_login\PersistentToken
+   * @return PersistentToken
    *   A new PersistentToken object.
    */
   public function getTokenFromCookie(Request $request) {
diff --git a/src/PageCache/RequestPolicy/PendingPersistentLogin.php b/src/PageCache/RequestPolicy/PendingPersistentLogin.php
index 741cd9d..15561e2 100644
--- a/src/PageCache/RequestPolicy/PendingPersistentLogin.php
+++ b/src/PageCache/RequestPolicy/PendingPersistentLogin.php
@@ -15,23 +15,23 @@ class PendingPersistentLogin implements RequestPolicyInterface {
   /**
    * The session configuration.
    *
-   * @var \Drupal\Core\Session\SessionConfigurationInterface
+   * @var SessionConfigurationInterface
    */
   protected $sessionConfiguration;
 
   /**
    * The cookie helper service.
    *
-   * @var \Drupal\persistent_login\CookieHelperInterface
+   * @var CookieHelperInterface
    */
   protected $cookieHelper;
 
   /**
    * Instantiates a new PendingPersistentLogin object.
    *
-   * @param \Drupal\persistent_login\CookieHelperInterface $cookie_helper
+   * @param CookieHelperInterface $cookie_helper
    *   The cookie helper service.
-   * @param \Drupal\Core\Session\SessionConfigurationInterface $session_configuration
+   * @param SessionConfigurationInterface $session_configuration
    *   The session configuration.
    */
   public function __construct(CookieHelperInterface $cookie_helper, SessionConfigurationInterface $session_configuration) {
diff --git a/src/TokenManager.php b/src/TokenManager.php
index 848ac99..994df11 100644
--- a/src/TokenManager.php
+++ b/src/TokenManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\persistent_login;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
 use DateTime;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Utility\Crypt;
@@ -21,50 +22,50 @@ class TokenManager {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The token generator.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;
 
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The Time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Construct a token manager object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrfToken
+   * @param CsrfTokenGenerator $csrfToken
    *   The token generator.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger channel.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(
@@ -87,10 +88,10 @@ class TokenManager {
    * If valid, a new token is returned with the uid set to the associated user,
    * otherwise a new invalid token is returned.
    *
-   * @param \Drupal\persistent_login\PersistentToken $token
+   * @param PersistentToken $token
    *   The token to validate.
    *
-   * @return \Drupal\persistent_login\PersistentToken
+   * @return PersistentToken
    *   A validated token.
    */
   public function validateToken(PersistentToken $token) {
@@ -186,10 +187,10 @@ class TokenManager {
    *
    * The new instance value is also propagated the to the database.
    *
-   * @param \Drupal\persistent_login\PersistentToken $token
+   * @param PersistentToken $token
    *   The token.
    *
-   * @return \Drupal\persistent_login\PersistentToken
+   * @return PersistentToken
    *   An updated token.
    */
   public function updateToken(PersistentToken $token) {
@@ -216,10 +217,10 @@ class TokenManager {
   /**
    * Delete the specified token from the database, if it exists.
    *
-   * @param \Drupal\persistent_login\PersistentToken $token
+   * @param PersistentToken $token
    *   The token.
    *
-   * @return \Drupal\persistent_login\PersistentToken
+   * @return PersistentToken
    *   An invalidated token.
    */
   public function deleteToken(PersistentToken $token) {
@@ -252,7 +253,7 @@ class TokenManager {
   /**
    * Get all active tokens for a user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   A user to get active tokens for.
    *
    * @return PersistentToken[]
