diff --git a/src/Plugin/Field/FieldFormatter/CustomFieldBaseFormatter.php b/src/Plugin/Field/FieldFormatter/CustomFieldBaseFormatter.php
index ebb1a44..d400bf2 100644
--- a/src/Plugin/Field/FieldFormatter/CustomFieldBaseFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/CustomFieldBaseFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\custom_field_base\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Url;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ -24,7 +25,7 @@ abstract class CustomFieldBaseFormatter extends FormatterBase implements Contain
     /**
      * The entity type manager.
      *
-     * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+     * @var EntityTypeManagerInterface
      */
     protected $entityTypeManager;
 
@@ -35,7 +36,7 @@ abstract class CustomFieldBaseFormatter extends FormatterBase implements Contain
      *   The plugin_id for the formatter.
      * @param mixed                                          $plugin_definition
      *   The plugin implementation definition.
-     * @param \Drupal\Core\Field\FieldDefinitionInterface    $field_definition
+     * @param FieldDefinitionInterface $field_definition
      *   The definition of the field to which the formatter is associated.
      * @param array                                          $settings
      *   The formatter settings.
@@ -45,7 +46,7 @@ abstract class CustomFieldBaseFormatter extends FormatterBase implements Contain
      *   The view mode.
      * @param array                                          $third_party_settings
      *   Any third party settings settings.
-     * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+     * @param EntityTypeManagerInterface $entity_type_manager
      *   The entity type manager.
      */
     public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager)
@@ -298,13 +299,13 @@ abstract class CustomFieldBaseFormatter extends FormatterBase implements Contain
     /**
      * Generate the output appropriate for one field item.
      *
-     * @param \Drupal\Core\Field\FieldItemInterface $item
+     * @param FieldItemInterface $item
      *   One field item.
      * @param array|null                            $settings
      *   Formatter settings passed as argument.
      * @param array|null                            $field_settings
      *   Field settings passed as argument.
-     * @param \Drupal\Core\Url|null                 $url
+     * @param Url|null $url
      *   Entity url passed as argument.
      *
      * @return string
@@ -470,10 +471,10 @@ abstract class CustomFieldBaseFormatter extends FormatterBase implements Contain
     /**
      * Gets the URI elements of the entity.
      *
-     * @param \Drupal\Core\Entity\EntityInterface $entity
+     * @param EntityInterface $entity
      *   The entity object.
      *
-     * @return \Drupal\Core\Url
+     * @return Url
      *   The URI elements of the entity.
      */
     public function getEntityUrl(EntityInterface $entity)
diff --git a/tests/src/Kernel/CustomFieldBaseTestBase.php b/tests/src/Kernel/CustomFieldBaseTestBase.php
index 8251485..dfe354c 100644
--- a/tests/src/Kernel/CustomFieldBaseTestBase.php
+++ b/tests/src/Kernel/CustomFieldBaseTestBase.php
@@ -66,7 +66,7 @@ abstract class CustomFieldBaseTestBase extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Configure the theme system.
@@ -117,9 +117,9 @@ abstract class CustomFieldBaseTestBase extends KernelTestBase {
   /**
    * Renders fields of a given entity with a given display.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity object with attached fields to render.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The display to render the fields in.
    *
    * @return string
diff --git a/tests/src/Kernel/CustomFieldBaseTestFloat.php b/tests/src/Kernel/CustomFieldBaseTestFloat.php
index 0fd624d..cee29f9 100644
--- a/tests/src/Kernel/CustomFieldBaseTestFloat.php
+++ b/tests/src/Kernel/CustomFieldBaseTestFloat.php
@@ -14,7 +14,7 @@ class CustomFieldBaseTestFloat extends CustomFieldBaseTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->fieldType = "custom_field_base_test_fields_single_float";
     parent::setUp();
 
@@ -49,13 +49,13 @@ class CustomFieldBaseTestFloat extends CustomFieldBaseTestBase {
     // $entity->{$this->fieldName}->mykey = $value;
     $get_value = $entity->{$this->fieldName}->get(0)->getValue()["mykey"];
 
-    $this->assertEqual($get_value, $value);
+    $this->assertEquals($get_value, $value);
     // -----
     $entity = EntityTest::create([]);
     $entity->{$this->fieldName}->mykey = $value;
 
     $get_value = $entity->{$this->fieldName}->get(0)->getValue()["mykey"];
-    $this->assertEqual($get_value, $value);
+    $this->assertEquals($get_value, $value);
   }
 
 }
diff --git a/tests/src/Kernel/CustomFieldBaseTestInteger.php b/tests/src/Kernel/CustomFieldBaseTestInteger.php
index a7b100f..00a0947 100644
--- a/tests/src/Kernel/CustomFieldBaseTestInteger.php
+++ b/tests/src/Kernel/CustomFieldBaseTestInteger.php
@@ -14,7 +14,7 @@ class CustomFieldBaseTestInteger extends CustomFieldBaseTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->fieldType = "custom_field_base_test_fields_single_integer";
     parent::setUp();
 
@@ -48,13 +48,13 @@ class CustomFieldBaseTestInteger extends CustomFieldBaseTestBase {
     // $entity->{$this->fieldName}->mykey = $value;
     $get_value = $entity->{$this->fieldName}->get(0)->getValue()["mykey"];
 
-    $this->assertEqual($get_value, $value);
+    $this->assertEquals($get_value, $value);
     // -----
     $entity = EntityTest::create([]);
     $entity->{$this->fieldName}->mykey = $value;
 
     $get_value = $entity->{$this->fieldName}->get(0)->getValue()["mykey"];
-    $this->assertEqual($get_value, $value);
+    $this->assertEquals($get_value, $value);
   }
 
 }
diff --git a/tests/src/Kernel/CustomFieldBaseTestIntegerUnsigned.php b/tests/src/Kernel/CustomFieldBaseTestIntegerUnsigned.php
index 72ae6b3..76b5ec6 100644
--- a/tests/src/Kernel/CustomFieldBaseTestIntegerUnsigned.php
+++ b/tests/src/Kernel/CustomFieldBaseTestIntegerUnsigned.php
@@ -14,7 +14,7 @@ class CustomFieldBaseTestIntegerUnsigned extends CustomFieldBaseTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->fieldType = "custom_field_base_test_fields_single_integer_unsigned";
     parent::setUp();
 
@@ -38,6 +38,7 @@ class CustomFieldBaseTestIntegerUnsigned extends CustomFieldBaseTestBase {
    * Test reading and writing values into the field.
    *
    * @dataProvider valuesProvider
+   * @doesNotPerformAssertions
    */
   public function testReadWrite($value) {
 
@@ -49,7 +50,6 @@ class CustomFieldBaseTestIntegerUnsigned extends CustomFieldBaseTestBase {
       $this->fail("expected exception");
     }
     catch (\Exception $e) {
-      $this->pass("expected exception ok");
     }
   }
 
diff --git a/tests/src/Kernel/CustomFieldBaseTestMultiple.php b/tests/src/Kernel/CustomFieldBaseTestMultiple.php
index 8b22a14..046eba8 100644
--- a/tests/src/Kernel/CustomFieldBaseTestMultiple.php
+++ b/tests/src/Kernel/CustomFieldBaseTestMultiple.php
@@ -14,7 +14,7 @@ class CustomFieldBaseTestMultiple extends CustomFieldBaseTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->fieldType = "custom_field_base_test_fields_multiple";
     parent::setUp();
 
@@ -51,11 +51,11 @@ class CustomFieldBaseTestMultiple extends CustomFieldBaseTestBase {
     // $entity->{$this->fieldName}->mykey = $value;
     $get_value = $entity->{$this->fieldName}->get(0)->getValue();
 
-    $this->assert(is_array($get_value));
+    $this->assertTrue(is_array($get_value));
 
     foreach ($value as $kk => $vv) {
-      $this->assert(array_key_exists($kk, $get_value));
-      $this->assertEqual($get_value[$kk], $value[$kk]);
+      $this->assertTrue(array_key_exists($kk, $get_value));
+      $this->assertEquals($get_value[$kk], $value[$kk]);
     }
 
     // -----
@@ -63,11 +63,11 @@ class CustomFieldBaseTestMultiple extends CustomFieldBaseTestBase {
     $entity->{$this->fieldName} = $value;
 
     $get_value = $entity->{$this->fieldName}->get(0)->getValue();
-    $this->assert(is_array($get_value));
+    $this->assertTrue(is_array($get_value));
 
     foreach ($value as $kk => $vv) {
-      $this->assert(array_key_exists($kk, $get_value));
-      $this->assertEqual($get_value[$kk], $value[$kk]);
+      $this->assertTrue(array_key_exists($kk, $get_value));
+      $this->assertEquals($get_value[$kk], $value[$kk]);
     }
     // ----
     $entity = EntityTest::create([]);
@@ -79,11 +79,11 @@ class CustomFieldBaseTestMultiple extends CustomFieldBaseTestBase {
 
     $get_value = $entity->{$this->fieldName}->get(0)->getValue();
 
-    $this->assert(is_array($get_value));
+    $this->assertTrue(is_array($get_value));
 
     foreach ($value as $kk => $vv) {
-      $this->assert(array_key_exists($kk, $get_value));
-      $this->assertEqual($get_value[$kk], $value[$kk]);
+      $this->assertTrue(array_key_exists($kk, $get_value));
+      $this->assertEquals($get_value[$kk], $value[$kk]);
     }
 
     // --------
@@ -94,11 +94,11 @@ class CustomFieldBaseTestMultiple extends CustomFieldBaseTestBase {
 
     $get_value = $entity->{$this->fieldName}->get(0)->getValue();
 
-    $this->assert(is_array($get_value));
+    $this->assertTrue(is_array($get_value));
 
     foreach ($value as $kk => $vv) {
-      $this->assert(array_key_exists($kk, $get_value));
-      $this->assertEqual($get_value[$kk], $value[$kk]);
+      $this->assertTrue(array_key_exists($kk, $get_value));
+      $this->assertEquals($get_value[$kk], $value[$kk]);
     }
 
   }
diff --git a/tests/src/Kernel/CustomFieldBaseTestString.php b/tests/src/Kernel/CustomFieldBaseTestString.php
index 8ebe77c..8f47f48 100644
--- a/tests/src/Kernel/CustomFieldBaseTestString.php
+++ b/tests/src/Kernel/CustomFieldBaseTestString.php
@@ -14,7 +14,7 @@ class CustomFieldBaseTestString extends CustomFieldBaseTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->fieldType = "custom_field_base_test_fields_single_string";
     parent::setUp();
   }
@@ -34,7 +34,7 @@ class CustomFieldBaseTestString extends CustomFieldBaseTestBase {
     // $entity->{$this->fieldName}->mykey = $value;
     $get_value = $entity->{$this->fieldName}->get(0)->getValue()["mykey"];
 
-    $this->assertEqual($get_value, $value);
+    $this->assertEquals($get_value, $value);
 
     // -----
     $entity = EntityTest::create([]);
diff --git a/tests/src/Kernel/CustomFieldBaseTestStringMaxLength.php b/tests/src/Kernel/CustomFieldBaseTestStringMaxLength.php
index 43cfa91..56a8185 100644
--- a/tests/src/Kernel/CustomFieldBaseTestStringMaxLength.php
+++ b/tests/src/Kernel/CustomFieldBaseTestStringMaxLength.php
@@ -14,7 +14,7 @@ class CustomFieldBaseTestStringMaxLength extends CustomFieldBaseTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->fieldType = "custom_field_base_test_fields_single_string_max_length";
     parent::setUp();
   }
@@ -40,8 +40,8 @@ class CustomFieldBaseTestStringMaxLength extends CustomFieldBaseTestBase {
       // $entity->{$this->fieldName}->mykey = $value;
       $get_value = $entity->{$this->fieldName}->get(0)->getValue()["mykey"];
 
-      $this->assertNotEqual($get_value, $value);
-      $this->assertEqual($get_value, $cut_value);
+      $this->assertNotEquals($get_value, $value);
+      $this->assertEquals($get_value, $cut_value);
     } finally {
       if ($entity->id()) {
         $entity->delete();
