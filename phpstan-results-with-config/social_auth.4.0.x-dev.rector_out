modules/contrib/social_auth/social_auth.install
modules/contrib/social_auth/social_auth.module
modules/contrib/social_auth/social_auth.post_update.php
modules/contrib/social_auth/src/AuthManager/OAuth2Manager.php
modules/contrib/social_auth/src/AuthManager/OAuth2ManagerInterface.php
modules/contrib/social_auth/src/Controller/OAuth2ControllerBase.php
modules/contrib/social_auth/src/Entity/SocialAuth.php
modules/contrib/social_auth/src/Event/BeforeRedirectEvent.php
modules/contrib/social_auth/src/Event/FailedAuthenticationEvent.php
modules/contrib/social_auth/src/Event/SocialAuthEventBase.php
modules/contrib/social_auth/src/Event/SocialAuthEvents.php
modules/contrib/social_auth/src/Event/UserEvent.php
modules/contrib/social_auth/src/Event/UserFieldsEvent.php
modules/contrib/social_auth/src/Form/SocialAuthSettingsForm.php
modules/contrib/social_auth/src/ParamConverter/NetworkConverter.php
modules/contrib/social_auth/src/Plugin/Block/SocialAuthLoginBlock.php
modules/contrib/social_auth/src/Plugin/Network/NetworkBase.php
modules/contrib/social_auth/src/Plugin/Network/NetworkInterface.php
modules/contrib/social_auth/src/Settings/SettingsBase.php
modules/contrib/social_auth/src/Settings/SettingsInterface.php
modules/contrib/social_auth/src/SettingsTrait.php
modules/contrib/social_auth/src/SocialAuthDataHandler.php
modules/contrib/social_auth/src/User/SocialAuthUser.php
modules/contrib/social_auth/src/User/SocialAuthUserInterface.php
modules/contrib/social_auth/src/User/UserAuthenticator.php
modules/contrib/social_auth/src/User/UserManager.php
modules/contrib/social_auth/tests/src/Functional/SocialAuthLoginBlockTest.php
modules/contrib/social_auth/tests/src/Functional/SocialAuthTestBase.php
modules/contrib/social_auth/tests/src/Functional/UserTest.php
modules/contrib/social_auth/tests/src/Kernel/SocialAuthEntityTest.php

19 files with changes
=====================

1) modules/contrib/social_auth/tests/src/Kernel/SocialAuthEntityTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The social_auth entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   private EntityInterface $entity;

@@ @@
   /**
    * The entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   private EntityStorageInterface $entityStorage;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/social_auth/tests/src/Functional/UserTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The Drupal user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $user;

@@ @@
   /**
    * The Social Auth user authenticator.
    *
-   * @var \Drupal\social_auth\User\UserAuthenticator
+   * @var UserAuthenticator
    */
   protected UserAuthenticator $userAuthenticator;

@@ @@
   /**
    * The Drupal entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;

@@ @@
   /**
    * Social Auth data handler.
    *
-   * @var \Drupal\social_auth\SocialAuthDataHandler
+   * @var SocialAuthDataHandler
    */
   protected SocialAuthDataHandler $dataHandler;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/social_auth/tests/src/Functional/SocialAuthTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\social_auth\Functional;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\block\Entity\Block;
 use Drupal\Core\Url;
 use Drupal\Tests\social_api\Functional\SocialApiTestBase;
@@ @@
   /**
    * The block entity.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected Block $socialAuthLoginBlock;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/social_auth/tests/src/Functional/SocialAuthLoginBlockTest.php:13

    ---------- begin diff ----------
@@ @@
    *
    * No need to specify a provider since it is by default NULL and Social Auth
    * does not have any authentication route by itself.
+   * @doesNotPerformAssertions
    */
   public function testBlockExists() {
     parent::checkLinkToProviderExists();
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/social_auth/src/User/UserManager.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Used for access Drupal user field definitions.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected EntityFieldManagerInterface $entityFieldManager;

@@ @@
   /**
    * Used for user picture directory and file transliteration.
    *
-   * @var \Drupal\Core\Transliteration\PhpTransliteration
+   * @var PhpTransliteration
    */
   protected PhpTransliteration $transliteration;

@@ @@
   /**
    * Used to get the current UI language.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected LanguageManagerInterface $languageManager;

@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;

@@ @@
   /**
    * Used for token support in Drupal user picture directory.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected Token $token;

@@ @@
   /**
    * Used for saving the profile picture of the users.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected FileSystemInterface $fileSystem;

@@ @@
   /**
    * Password generator.
    *
-   * @var \Drupal\Core\Password\PasswordGeneratorInterface
+   * @var PasswordGeneratorInterface
    */
   protected PasswordGeneratorInterface $passwordGenerator;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Used for loading and creating Drupal user.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Used to display messages to user.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Used for logging errors.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Used for accessing Drupal configuration.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Used for access Drupal user field definitions.
-   * @param \Drupal\Core\Transliteration\PhpTransliteration $transliteration
+   * @param PhpTransliteration $transliteration
    *   Used for user picture directory and file transliteration.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Used to get current UI language.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Used for dispatching social auth events.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Used for token support in Drupal user picture directory.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   Used for saving the profile picture of the users.
-   * @param \Drupal\Core\Password\PasswordGeneratorInterface $password_generator
+   * @param PasswordGeneratorInterface $password_generator
    *   Used for generating a new usr password randomly.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager,
@@ @@
   /**
    * Creates a new user.
    *
-   * @param \Drupal\social_auth\User\SocialAuthUserInterface $user
+   * @param SocialAuthUserInterface $user
    *   The data of the user to be created.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The Drupal user if successful
    *   Null otherwise.
    */
@@ @@
   /**
    * Create a new user account.
    *
-   * @param \Drupal\social_auth\User\SocialAuthUserInterface $user
+   * @param SocialAuthUserInterface $user
    *   The data of the user to be created.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   Drupal user account if user was created
    *   False otherwise
    */
@@ @@
       // Initializes the user fields.
       $fields = $this->getUserFields($user, $langcode);

-      /** @var \Drupal\user\Entity\User $new_user */
+      /** @var User $new_user */
       $new_user = $this->entityTypeManager
         ->getStorage('user')
         ->create($fields);
@@ @@
    * @param string $value
    *   Value to search for.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   Drupal user account if found
    *   False otherwise
    */
@@ @@
   /**
    * Downloads and sets user profile picture.
    *
-   * @param \Drupal\social_auth\User\SocialAuthUserInterface $user
+   * @param SocialAuthUserInterface $user
    *   The Social Auth User object.
    *
    * @return bool
@@ @@
    * @param string $id
    *   Social network ID of the user.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   FileInterface object if file was successfully downloaded
    *   False otherwise
    */
@@ @@
   /**
    * Returns an array of fields to initialize the creation of the user.
    *
-   * @param \Drupal\social_auth\User\SocialAuthUserInterface $user
+   * @param SocialAuthUserInterface $user
    *   The data of the user to be created.
    * @param string $langcode
    *   The current UI language.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/social_auth/src/User/UserAuthenticator.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;

@@ @@
   /**
    * The Social Auth user manager.
    *
-   * @var \Drupal\social_api\User\UserManagerInterface
+   * @var UserManagerInterface
    */
   protected UserManagerInterface $userManager;

@@ @@
   /**
    * The redirection response to be returned.
    *
-   * @var \Symfony\Component\HttpFoundation\RedirectResponse
+   * @var RedirectResponse
    */
   protected RedirectResponse $response;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Used to get current active user.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Used to display messages to user.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Used for logging errors.
-   * @param \Drupal\social_auth\User\UserManager $user_manager
+   * @param UserManager $user_manager
    *   The Social API user manager.
-   * @param \Drupal\social_auth\SocialAuthDataHandler $data_handler
+   * @param SocialAuthDataHandler $data_handler
    *   Used to interact with session.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Used for accessing Drupal configuration.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   Used to check if route path exists.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Used for dispatching social auth events.
    */
   public function __construct(AccountProxyInterface $current_user,
@@ @@
   /**
    * Authenticates a user.
    *
-   * @param \Drupal\social_auth\User\SocialAuthUserInterface $user
+   * @param SocialAuthUserInterface $user
    *   Social Auth user instance.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    */
   public function authenticateUser(SocialAuthUserInterface $user): RedirectResponse {
     // Checks for record in Social Auth entity.
@@ @@
   /**
    * Authenticates and redirects existing users in authentication process.
    *
-   * @param \Drupal\user\UserInterface $drupal_user
+   * @param UserInterface $drupal_user
    *   User object to authenticate.
    */
   public function authenticateExistingUser(UserInterface $drupal_user): void {
@@ @@
   /**
    * Authenticates and redirects new users in authentication process.
    *
-   * @param \Drupal\user\UserInterface|null $drupal_user
+   * @param UserInterface|null $drupal_user
    *   User object to log in.
    */
   public function authenticateNewUser(?UserInterface $drupal_user = NULL): void {
@@ @@
   /**
    * Logs the user in.
    *
-   * @param \Drupal\user\UserInterface $drupal_user
+   * @param UserInterface $drupal_user
    *   User object.
    *
    * @return bool
@@ @@
   /**
    * Returns redirection to user login form.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirection response.
    */
   protected function getLoginFormRedirection(): RedirectResponse {
@@ @@
    * @param string|null $error
    *   The error string/code from provider.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   Return redirect response.
    */
   public function dispatchAuthenticationError(?string $error = NULL): ?RedirectResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/social_auth/src/SettingsTrait.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected ConfigFactoryInterface $configFactory;

@@ @@
   /**
    * Used to check if route path exists.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected RouteProviderInterface $routeProvider;

@@ @@
   /**
    * The Social Auth data handler.
    *
-   * @var \Drupal\social_api\SocialApiDataHandler
+   * @var SocialApiDataHandler
    */
   protected SocialApiDataHandler $dataHandler;

@@ @@
   /**
    * Checks if Admin (user 1) can log in.
    *
-   * @param \Drupal\user\UserInterface $drupal_user
+   * @param UserInterface $drupal_user
    *   User object to check if user is admin.
    *
    * @return bool
@@ @@
   /**
    * Checks if User with specific roles is allowed to log in.
    *
-   * @param \Drupal\user\UserInterface $drupal_user
+   * @param UserInterface $drupal_user
    *   User object to check if user has a specific role.
    *
    * @return string|false
@@ @@
   /**
    * Checks if User should be redirected to User Form after creation.
    *
-   * @param \Drupal\user\UserInterface $drupal_user
+   * @param UserInterface $drupal_user
    *   User object to get the id of user.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|false
+   * @return RedirectResponse|false
    *   A redirect response to user form, if option is enabled.
    *   False otherwise
    */
@@ @@
   /**
    * Returns the Post Login redirection.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Post Login Path to which the user would be redirected after login.
    */
   protected function getPostLoginRedirection(): RedirectResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/social_auth/src/Plugin/Network/NetworkInterface.php:15

    ---------- begin diff ----------
@@ @@
    * @param array $route_options
    *   Additional options for the route.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getRedirectUrl(array $route_options = []): Url;

@@ @@
    * @param array $route_options
    *   Additional options for the route.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getCallbackUrl(array $route_options = []): Url;

@@ @@
    * @param array $route_options
    *   Additional options for the route.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function getSettingsFormUrl(array $route_options = []): Url;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/social_auth/src/Plugin/Network/NetworkBase.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * Checks that module is configured.
    *
-   * @param \Drupal\social_auth\Settings\SettingsBase $settings
+   * @param SettingsBase $settings
    *   Social Auth implementor settings.
    *
    * @return bool
@@ @@
    * @param array $route_options
    *   Route options.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   URL object for the requested route type.
    */
   private function getUrlFromDefaultRoute(string $type, array $route_options = []): Url {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/social_auth/src/Plugin/Block/SocialAuthLoginBlock.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The network manager.
    *
-   * @var \Drupal\social_api\Plugin\NetworkManager
+   * @var NetworkManager
    */
   private NetworkManager $networkManager;

@@ @@
   /**
    * Immutable configuration for social_auth.settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private ImmutableConfig $socialAuthConfig;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ImmutableConfig $social_auth_config
+   * @param ImmutableConfig $social_auth_config
    *   The Immutable configuration for social_oauth.settings.
-   * @param \Drupal\social_api\Plugin\NetworkManager $network_manager
+   * @param NetworkManager $network_manager
    *   The Social API network manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/social_auth/src/ParamConverter/NetworkConverter.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Network manager.
    *
-   * @var \Drupal\social_api\Plugin\NetworkManager
+   * @var NetworkManager
    */
   protected NetworkManager $networkManager;

@@ @@
   /**
    * Constructs a NetworkConverter instance.
    *
-   * @param \Drupal\social_api\Plugin\NetworkManager $network_manager
+   * @param NetworkManager $network_manager
    */
   public function __construct(NetworkManager $network_manager) {
     $this->networkManager = $network_manager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/social_auth/src/Form/SocialAuthSettingsForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected RouteProviderInterface $routeProvider;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   Used to check if route exists.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RouteProviderInterface $route_provider) {
@@ @@
       ->set('disabled_roles', $values['disabled_roles'])
       ->save();

-    /** @var \Drupal\social_auth\Plugin\Network\NetworkInterface $network */
+    /** @var NetworkInterface $network */
     $network = $form_state->get('network');
     $this->configFactory->getEditable("{$network->getPluginId()}.settings")
       ->set('client_id', $values['client_id'])
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/social_auth/src/Event/UserFieldsEvent.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The data of the user to be created.
    *
-   * @var \Drupal\social_auth\User\SocialAuthUserInterface
+   * @var SocialAuthUserInterface
    */
   protected SocialAuthUserInterface $user;

@@ @@
    *   Initial user fields to populate the newly created user.
    * @param string $plugin_id
    *   The plugin ID dispatching this event.
-   * @param \Drupal\social_auth\User\SocialAuthUserInterface $user
+   * @param SocialAuthUserInterface $user
    *   The data of the user to be created.
    */
   public function __construct(array $user_fields, string $plugin_id, SocialAuthUserInterface $user) {
@@ @@
   /**
    * Gets the data of the user to be created.
    *
-   * @return \Drupal\social_auth\User\SocialAuthUserInterface
+   * @return SocialAuthUserInterface
    *   The user's data.
    */
   public function getSocialAuthUser(): SocialAuthUserInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/social_auth/src/Event/UserEvent.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $user;

@@ @@
   /**
    * The user's data passed by Social Auth.
    *
-   * @var \Drupal\social_auth\User\SocialAuthUserInterface|null
+   * @var SocialAuthUserInterface|null
    */
   protected ?SocialAuthUserInterface $socialAuthUser;

@@ @@
   /**
    * UserEvent constructor.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user.
    * @param string $plugin_id
    *   The plugin Id dispatching this event.
-   * @param \Drupal\social_auth\User\SocialAuthUserInterface|null $social_auth_user
+   * @param SocialAuthUserInterface|null $social_auth_user
    *   The user's data passed by Social Auth.
    */
   public function __construct(UserInterface $user, string $plugin_id, SocialAuthUserInterface $social_auth_user = NULL) {
@@ @@
   /**
    * Gets the user.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user.
    */
   public function getUser(): UserInterface {
@@ @@
   /**
    * Gets user's data passed by Social Auth.
    *
-   * @return \Drupal\social_auth\User\SocialAuthUserInterface
+   * @return SocialAuthUserInterface
    *   The user's data.
    */
   public function getSocialAuthUser(): SocialAuthUserInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/social_auth/src/Event/FailedAuthenticationEvent.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The Social Auth data handler.
    *
-   * @var \Drupal\social_auth\SocialAuthDataHandler
+   * @var SocialAuthDataHandler
    */
   protected SocialAuthDataHandler $dataHandler;

@@ @@
   /**
    * RedirectResponse object.
    *
-   * @var \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @var RedirectResponse|null
    */
   protected ?RedirectResponse $response;

@@ @@
   /**
    * FailedAuthenticationEvent constructor.
    *
-   * @param \Drupal\social_auth\SocialAuthDataHandler $data_handler
+   * @param SocialAuthDataHandler $data_handler
    *   The Social Auth data handler.
    * @param string $plugin_id
    *   The plugin ID dispatching this event.
@@ @@
   /**
    * Gets the Social Auth data handler object.
    *
-   * @return \Drupal\social_auth\SocialAuthDataHandler
+   * @return SocialAuthDataHandler
    *   The Social Auth data handler.
    */
   public function getDataHandler(): SocialAuthDataHandler {
@@ @@
   /**
    * Returns the current redirect response object.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The response from the provider.
    */
   public function getResponse(): RedirectResponse {
@@ @@
   /**
    * Sets a new redirect response object.
    *
-   * @param \Symfony\Component\HttpFoundation\RedirectResponse $response
+   * @param RedirectResponse $response
    *   The response from the provider.
    */
   public function setResponse(RedirectResponse $response): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/social_auth/src/Event/BeforeRedirectEvent.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The Social Auth data handler.
    *
-   * @var \Drupal\social_auth\SocialAuthDataHandler
+   * @var SocialAuthDataHandler
    */
   protected SocialAuthDataHandler $dataHandler;

@@ @@
   /**
    * BeforeRedirectEvent constructor.
    *
-   * @param \Drupal\social_auth\SocialAuthDataHandler $data_handler
+   * @param SocialAuthDataHandler $data_handler
    *   The Social Auth data handler.
    * @param string $plugin_id
    *   The plugin ID dispatching this event.
@@ @@
   /**
    * Gets the Social Auth data handler object.
    *
-   * @return \Drupal\social_auth\SocialAuthDataHandler
+   * @return SocialAuthDataHandler
    *   The Social Auth data handler.
    */
   public function getDataHandler(): SocialAuthDataHandler {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/social_auth/src/Controller/OAuth2ControllerBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\social_auth\Controller;

+use League\OAuth2\Client\Provider\AbstractProvider;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The network plugin manager.
    *
-   * @var \Drupal\social_api\Plugin\NetworkManager
+   * @var NetworkManager
    */
   protected NetworkManager $networkManager;

@@ @@
   /**
    * The Social Auth user authenticator..
    *
-   * @var \Drupal\social_auth\User\UserAuthenticator
+   * @var UserAuthenticator
    */
   protected UserAuthenticator $userAuthenticator;

@@ @@
   /**
    * The provider authentication manager.
    *
-   * @var \Drupal\social_auth\AuthManager\OAuth2ManagerInterface|null
+   * @var OAuth2ManagerInterface|null
    */
   protected ?OAuth2ManagerInterface $providerManager = NULL;

@@ @@
   /**
    * Used to access GET parameters.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected RequestStack $request;

@@ @@
   /**
    * The Social Auth data handler.
    *
-   * @var \Drupal\social_auth\SocialAuthDataHandler
+   * @var SocialAuthDataHandler
    */
   protected SocialAuthDataHandler $dataHandler;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected RendererInterface $renderer;

@@ @@
   /**
    * OAuth2ControllerBase constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\social_api\Plugin\NetworkManager $network_manager
+   * @param NetworkManager $network_manager
    *   Used to get an instance of the network plugin.
-   * @param \Drupal\social_auth\User\UserAuthenticator $user_authenticator
+   * @param UserAuthenticator $user_authenticator
    *   Used to manage user authentication/registration.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   Used to access GET parameters.
-   * @param \Drupal\social_auth\SocialAuthDataHandler $data_handler
+   * @param SocialAuthDataHandler $data_handler
    *   The Social Auth data handler.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Used to handle metadata for redirection to authentication URL.
    */
   public function __construct(ConfigFactoryInterface $config_factory,
@@ @@
   /**
    * Sets up the class for the provided network.
    *
-   * @param \Drupal\social_auth\Plugin\Network\NetworkInterface $network
+   * @param NetworkInterface $network
    *   Network.
    */
   private function setUp(NetworkInterface $network): void {
@@ @@
     $this->setUp($network);
     $context = new RenderContext();

-    /** @var \Drupal\Core\Routing\TrustedRedirectResponse|\Symfony\Component\HttpFoundation\RedirectResponse $response */
+    /** @var TrustedRedirectResponse|RedirectResponse $response */
     $response = $this->renderer->executeInRenderContext($context, function () {
       try {
-        /** @var \League\OAuth2\Client\Provider\AbstractProvider|false $client */
+        /** @var AbstractProvider|false $client */
         $client = $this->networkManager->createInstance($this->pluginId)->getSdk();

         // If provider client could not be obtained.
@@ @@
   /**
    * Process implementer callback path.
    *
-   * @return \Drupal\social_auth\User\SocialAuthUserInterface|null
+   * @return SocialAuthUserInterface|null
    *   The user info if successful. Null otherwise.
    */
   private function processCallback(): ?SocialAuthUserInterface {
@@ @@
    * @param string $key
    *   The query parameter key to check for authentication error.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   Redirect response object that may be returned by the controller or null.
    */
   protected function checkAuthError(string $key = 'error'): ?RedirectResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/social_auth/social_auth.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\social_auth\Entity\SocialAuth;
 /**
  * @file
  * Method hook_post_update_NAME.
  */
-
 /**
  * Encrypts all tokens currently stored by Social Auth.
  */
@@ @@
   }

   $ids = $storage->getQuery()->range($sandbox['progress'], 50)->execute();
-  /** @var \Drupal\social_auth\Entity\SocialAuth[] $social_auth_users */
+  /** @var SocialAuth[] $social_auth_users */
   $social_auth_users = $storage->loadMultiple($ids);
   foreach ($social_auth_users as $user) {
     $token = $user->get('token')->value;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


19) modules/contrib/social_auth/social_auth.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\social_auth\Entity\SocialAuth;
 /**
  * @file
  * Allows login using different social networking services.
@@ @@
     $storage = \Drupal::entityTypeManager()
       ->getStorage('social_auth');

-    /** @var \Drupal\social_auth\Entity\SocialAuth[] $socialAuthUser */
+    /** @var SocialAuth[] $socialAuthUser */
     $users = $storage->loadByProperties([
       'user_id' => $account->id(),
     ]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 19 files have been changed by Rector                                      

