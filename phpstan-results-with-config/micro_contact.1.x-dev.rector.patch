diff --git a/micro_contact.info.yml b/micro_contact.info.yml
index 50c17b6..5082c83 100644
--- a/micro_contact.info.yml
+++ b/micro_contact.info.yml
@@ -1,7 +1,7 @@
 name: Micro Contact
 type: module
 description: 'Integrate contact form with micro site.'
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^8.8 || ^9 || ^10
 package: 'Micro Site'
 dependencies:
   - drupal:contact
diff --git a/micro_contact.install b/micro_contact.install
index 1f488bb..d363e91 100644
--- a/micro_contact.install
+++ b/micro_contact.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 /**
  * @file
  * Contains micro_contact.install.
@@ -25,7 +26,7 @@ function micro_contact_install() {
  * Ensure fields are added.
  */
 function _micro_contact_ensure_fields() {
-  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
+  /** @var EntityFieldManagerInterface $field_manager */
   $field_manager = \Drupal::service('entity_field.manager');
 
   $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
diff --git a/micro_contact.module b/micro_contact.module
index b892dc2..7931a83 100644
--- a/micro_contact.module
+++ b/micro_contact.module
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\micro_contact\MicroContactManagerInterface;
+use Drupal\micro_site\Entity\SiteInterface;
+use Drupal\micro_site\Entity\SiteTypeInterface;
+use Drupal\node\NodeTypeInterface;
+use Drupal\micro_site\SiteNegotiatorInterface;
 use Drupal\contact\MessageInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -32,7 +37,7 @@ function micro_contact_entity_base_field_info(EntityTypeInterface $entity_type)
   $fields = [];
   if ($entity_type->id() === 'site') {
 
-    /** @var \Drupal\micro_contact\MicroContactManagerInterface $micro_contact_manager */
+    /** @var MicroContactManagerInterface $micro_contact_manager */
     $micro_contact_manager = \Drupal::service('micro_contact.manager');
     $contactForms = $micro_contact_manager->getContactFormAllowed('canonical', TRUE);
     $options = ['_none' => t('- None -')];
@@ -73,9 +78,9 @@ function micro_contact_entity_base_field_info(EntityTypeInterface $entity_type)
  * Implements hook_form_BASE_FORM_ID_alter().
  */
 function micro_contact_form_site_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   $site = $form_state->getFormObject()->getEntity();
-  /** @var \Drupal\micro_site\Entity\SiteTypeInterface $site_type */
+  /** @var SiteTypeInterface $site_type */
   $site_type = $site->type->entity;
 
   if (isset($form['contact_id'])) {
@@ -116,7 +121,7 @@ function micro_contact_form_contact_message_form_alter(&$form, FormStateInterfac
  * Implements hook_form_FORM_ID_alter().
  */
 function micro_contact_form_contact_form_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\node\NodeTypeInterface $type */
+  /** @var NodeTypeInterface $type */
   $type = $form_state->getFormObject()->getEntity();
 
   $form['micro_contact'] = [
@@ -167,14 +172,14 @@ function micro_contact_mail_alter(&$message) {
     }
     $active_site = NULL;
     if (!$contact_message->hasField('site_id')) {
-      /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+      /** @var SiteNegotiatorInterface $negotiator */
       $negotiator = \Drupal::service('micro_site.negotiator');
       $active_site = $negotiator->getActiveSite();
     }
     else {
       $sites = $contact_message->get('site_id')->referencedEntities();
       if ($sites) {
-        /** @var \Drupal\micro_site\Entity\SiteInterface $active_site */
+        /** @var SiteInterface $active_site */
         $active_site = reset($sites);
       }
     }
diff --git a/src/Access/ContactAccess.php b/src/Access/ContactAccess.php
index c77422a..bc124b5 100644
--- a/src/Access/ContactAccess.php
+++ b/src/Access/ContactAccess.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micro_contact\Access;
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\contact\ContactFormInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -30,34 +31,34 @@ class ContactAccess implements AccessInterface{
   /**
    * The site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;
 
   /**
    * The system theme config object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The micro contact manager service.
    *
-   * @var \Drupal\micro_contact\MicroContactManagerInterface
+   * @var MicroContactManagerInterface
    */
   protected $microContactManager;
 
   /**
    * Constructs a NodeAccess object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The site negotiator.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\micro_contact\MicroContactManagerInterface $micro_contact_manager
+   * @param MicroContactManagerInterface $micro_contact_manager
    *   The micro contact manager service.
    */
   function __construct(EntityTypeManagerInterface $entity_type_manager, SiteNegotiatorInterface $site_negotiator, ConfigFactoryInterface $config_factory, MicroContactManagerInterface $micro_contact_manager) {
@@ -70,16 +71,16 @@ class ContactAccess implements AccessInterface{
   /**
    * Checks access to the entity operation on the given route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\contact\ContactFormInterface $contact_form
+   * @param ContactFormInterface $contact_form
    *   The contact form on which check access.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account, ContactFormInterface $contact_form = NULL) {
diff --git a/src/MicroContactManager.php b/src/MicroContactManager.php
index f32f2f1..0ddba6d 100644
--- a/src/MicroContactManager.php
+++ b/src/MicroContactManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micro_contact;
 
+use Drupal\contact\ContactFormInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -29,21 +30,21 @@ class MicroContactManager implements MicroContactManagerInterface {
   /**
    * The site record returned by the lookup request.
    *
-   * @var \Drupal\micro_site\Entity\SiteInterface
+   * @var SiteInterface
    */
   protected $site;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The request stack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
@@ -51,36 +52,36 @@ class MicroContactManager implements MicroContactManagerInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;
 
   /**
    * Constructs a DomainNegotiator object.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack object.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The Domain loader object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The site negotiator.
    */
   public function __construct(RequestStack $requestStack, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, SiteNegotiatorInterface $site_negotiator) {
@@ -95,7 +96,7 @@ class MicroContactManager implements MicroContactManagerInterface {
    * {@inheritdoc}
    */
   public static function getCurrentSiteId() {
-    /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+    /** @var SiteInterface $site */
     $site = \Drupal::service('micro_site.negotiator')->getActiveSite();
 
     // We are not on a active site url. Try to load it from the Request.
@@ -119,7 +120,7 @@ class MicroContactManager implements MicroContactManagerInterface {
     if (is_null($list)) {
       $list = [];
       $contact_forms = $this->entityTypeManager->getStorage('contact_form')->loadMultiple();
-      /** @var \Drupal\contact\ContactFormInterface $contact_form */
+      /** @var ContactFormInterface $contact_form */
       foreach ($contact_forms as $id => $contact_form) {
         if ($contact_form->getThirdPartySetting('micro_contact', $type)) {
           $list[$id] = $return_entity ? $contact_form : $id;
diff --git a/src/MicroContactManagerInterface.php b/src/MicroContactManagerInterface.php
index 23a82a3..e87639d 100644
--- a/src/MicroContactManagerInterface.php
+++ b/src/MicroContactManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micro_contact;
 
+use Drupal\contact\ContactFormInterface;
 use Drupal\micro_site\Entity\SiteInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -33,7 +34,7 @@ interface MicroContactManagerInterface {
    * @param boolean $reset
    *   Reset the static cache.
    *
-   * @return array|\Drupal\contact\ContactFormInterface[]
+   * @return array|ContactFormInterface[]
    *   An array of contact form id (or entity) keyed by the contact form id.
    */
   public function getContactFormAllowed($type = 'canonical', $return_entity = FALSE, $reset = FALSE);
@@ -41,7 +42,7 @@ interface MicroContactManagerInterface {
   /**
    * Get the contact form id of a micro site.
    *
-   * @param \Drupal\micro_site\Entity\SiteInterface $site
+   * @param SiteInterface $site
    *   The site entity.
    *
    * @return string
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index ad4fe89..4020c99 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\micro_contact\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\micro_site\Functional\MicroSiteBase;
 
@@ -22,14 +23,14 @@ class LoadTest extends MicroSiteBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ -40,7 +41,7 @@ class LoadTest extends MicroSiteBase {
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }
 
 }
