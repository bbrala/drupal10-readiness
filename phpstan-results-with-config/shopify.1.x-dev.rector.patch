diff --git a/shopify.install b/shopify.install
index 188571c..3570a62 100644
--- a/shopify.install
+++ b/shopify.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
 /**
  * @file
  * Install / update hooks.
@@ -99,7 +100,7 @@ function shopify_update_8102() {
 function shopify_update_8103(&$sandbox) {
   $updateManager = \Drupal::entityDefinitionUpdateManager();
 
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
   $entity_type = $updateManager->getEntityType('taxonomy_term');
   $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions('taxonomy_term');
diff --git a/shopify.module b/shopify.module
index 1ac5106..6205440 100644
--- a/shopify.module
+++ b/shopify.module
@@ -380,7 +380,7 @@ function shopify_currency_format($amount) {
  * @param array $opts
  *   Array of options to pass the API call.
  *
- * @return \Drupal\shopify\Entity\ShopifyProduct[]
+ * @return ShopifyProduct[]
  *   Returns the products that were updated/created.
  */
 function shopify_sync_products(array $opts = []) {
@@ -512,7 +512,7 @@ function shopify_sync_deleted_products(array $opts = []) {
  * @param array $opts
  *   Array of options to pass the API call.
  *
- * @return \Drupal\taxonomy\Entity\Term[]
+ * @return Term[]
  *   Returns the collections that were updated/created.
  */
 function shopify_sync_collections(array $opts = []) {
@@ -652,7 +652,7 @@ function shopify_api_get_collections(array $opts = [], $type = 'both') {
  * @param int $collection_id
  *   Shopify collection ID.
  *
- * @return \Drupal\taxonomy\Entity\Term
+ * @return Term
  *   Shopify collection.
  */
 function shopify_collection_load($collection_id) {
@@ -674,7 +674,7 @@ function shopify_collection_load($collection_id) {
  * @param bool $sync_products
  *   Whether or not to sync product information during creation.
  *
- * @return \Drupal\taxonomy\Entity\Term
+ * @return Term
  *   Shopify collection.
  */
 function shopify_collection_create(\stdClass $collection, $sync_products = FALSE) {
@@ -703,13 +703,13 @@ function shopify_collection_create(\stdClass $collection, $sync_products = FALSE
 /**
  * Saves an image for a Shopify collection.
  *
- * @param \Drupal\taxonomy\Entity\Term $term
+ * @param Term $term
  *   Taxonomy term entity.
  * @param string $image_url
  *   Remote image URL for the collection image.
  */
 function shopify_collection_save_image(Term $term, $image_url) {
-  $directory = file_build_uri('shopify_images');
+  $directory = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . 'shopify_images'));
   if (!\Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY)) {
     // If our directory doesn't exist and can't be created, use the default.
     $directory = NULL;
@@ -762,7 +762,7 @@ function shopify_collection_sync_products(\stdClass $collection) {
  * @param bool $sync_products
  *   Whether or not to sync product information during update.
  *
- * @return \Drupal\taxonomy\Entity\Term
+ * @return Term
  *   Shopify collection.
  */
 function shopify_collection_update(\stdClass $collection, $sync_products = FALSE) {
diff --git a/src/Controller/ShopifyBuyButtonController.php b/src/Controller/ShopifyBuyButtonController.php
index 5bad77a..dba7175 100644
--- a/src/Controller/ShopifyBuyButtonController.php
+++ b/src/Controller/ShopifyBuyButtonController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\shopify\Controller;
 
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Controller\ControllerBase;
@@ -18,7 +19,7 @@ class ShopifyBuyButtonController extends ControllerBase {
   /**
    * Renderer object.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -41,7 +42,7 @@ class ShopifyBuyButtonController extends ControllerBase {
   /**
    * Builds buy button for a product.
    *
-   * @param \Drupal\shopify\Entity\ShopifyProduct $product
+   * @param ShopifyProduct $product
    *   The product to build the buy button for, if NULL only a cart element will
    *   be provided.
    *
diff --git a/src/Entity/Form/ShopifyProductSettingsForm.php b/src/Entity/Form/ShopifyProductSettingsForm.php
index 37366d6..66dbce7 100644
--- a/src/Entity/Form/ShopifyProductSettingsForm.php
+++ b/src/Entity/Form/ShopifyProductSettingsForm.php
@@ -29,7 +29,7 @@ class ShopifyProductSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class ShopifyProductSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Entity/Form/ShopifyProductVariantSettingsForm.php b/src/Entity/Form/ShopifyProductVariantSettingsForm.php
index 993334a..747ca77 100644
--- a/src/Entity/Form/ShopifyProductVariantSettingsForm.php
+++ b/src/Entity/Form/ShopifyProductVariantSettingsForm.php
@@ -29,7 +29,7 @@ class ShopifyProductVariantSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class ShopifyProductVariantSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Entity/ShopifyEntityTrait.php b/src/Entity/ShopifyEntityTrait.php
index e53ccb5..f828a3c 100644
--- a/src/Entity/ShopifyEntityTrait.php
+++ b/src/Entity/ShopifyEntityTrait.php
@@ -24,7 +24,7 @@ trait ShopifyEntityTrait {
    * Sets up product image.
    */
   public static function setupProductImage($image_url) {
-    $directory = file_build_uri('shopify_images');
+    $directory = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . 'shopify_images'));
     if (!\Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY)) {
       // If our directory doesn't exist and can't be created, use the default.
       $directory = NULL;
diff --git a/src/Entity/ShopifyProductVariant.php b/src/Entity/ShopifyProductVariant.php
index 0e96e98..832fc4e 100644
--- a/src/Entity/ShopifyProductVariant.php
+++ b/src/Entity/ShopifyProductVariant.php
@@ -174,7 +174,7 @@ class ShopifyProductVariant extends ContentEntityBase implements ShopifyProductV
   /**
    * Returns the associated parent product.
    *
-   * @return \Drupal\shopify\Entity\ShopifyProduct
+   * @return ShopifyProduct
    *   Product.
    */
   public function getProduct() {
diff --git a/src/Event/ShopifyTermRedirectSubscriber.php b/src/Event/ShopifyTermRedirectSubscriber.php
index 5a0f7c1..c244af2 100644
--- a/src/Event/ShopifyTermRedirectSubscriber.php
+++ b/src/Event/ShopifyTermRedirectSubscriber.php
@@ -2,11 +2,11 @@
 
 namespace Drupal\shopify\Event;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\shopify\Entity\ShopifyProduct;
 use Drupal\taxonomy\Entity\Term;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -21,7 +21,7 @@ class ShopifyTermRedirectSubscriber implements EventSubscriberInterface {
    *
    * @todo: Not sure this is the best way of doing things.
    */
-  public function checkForRedirection(GetResponseEvent $event) {
+  public function checkForRedirection(RequestEvent $event) {
     if (!($term = $event->getRequest()->get('taxonomy_term'))) {
       return;
     }
diff --git a/src/Event/ShopifyWebhookEvent.php b/src/Event/ShopifyWebhookEvent.php
index dec4631..b68d683 100644
--- a/src/Event/ShopifyWebhookEvent.php
+++ b/src/Event/ShopifyWebhookEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\shopify\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class ShopifyWebhookEvent.
diff --git a/src/Event/ShopifyWebhookSubscriber.php b/src/Event/ShopifyWebhookSubscriber.php
index ea1b51e..a2642f1 100644
--- a/src/Event/ShopifyWebhookSubscriber.php
+++ b/src/Event/ShopifyWebhookSubscriber.php
@@ -24,7 +24,7 @@ class ShopifyWebhookSubscriber implements EventSubscriberInterface {
   /**
    * Process an incoming webhook.
    *
-   * @param \Drupal\shopify\Event\ShopifyWebhookEvent $event
+   * @param ShopifyWebhookEvent $event
    *   Logs an incoming webhook of the setting is on.
    */
   public function onIncomingWebhook(ShopifyWebhookEvent $event) {
diff --git a/src/Form/ShopifyApiAdminForm.php b/src/Form/ShopifyApiAdminForm.php
index 6ff7bb1..e3da801 100644
--- a/src/Form/ShopifyApiAdminForm.php
+++ b/src/Form/ShopifyApiAdminForm.php
@@ -19,7 +19,7 @@ class ShopifyApiAdminForm extends ConfigFormBase {
   /**
    * HTTP request client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
diff --git a/src/Plugin/Block/ShopifyCartBlock.php b/src/Plugin/Block/ShopifyCartBlock.php
index 66e54f1..0eab3bd 100644
--- a/src/Plugin/Block/ShopifyCartBlock.php
+++ b/src/Plugin/Block/ShopifyCartBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\shopify\Plugin\Block;
 
+use Drupal\shopify\Controller\ShopifyBuyButtonController;
 use Drupal\Core\Block\BlockBase;
 
 /**
@@ -26,7 +27,7 @@ class ShopifyCartBlock extends BlockBase {
    * {@inheritdoc}
    */
   public function build() {
-    /** @var \Drupal\shopify\Controller\ShopifyBuyButtonController $buy_button_controller */
+    /** @var ShopifyBuyButtonController $buy_button_controller */
     $buy_button_controller = \Drupal::service('shopify.buy_button_controller');
     return $buy_button_controller->buildForProduct(NULL);
   }
diff --git a/src/ShopifyProductViewBuilder.php b/src/ShopifyProductViewBuilder.php
index bf34763..b9c5c8e 100644
--- a/src/ShopifyProductViewBuilder.php
+++ b/src/ShopifyProductViewBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\shopify;
 
+use Drupal\shopify\Controller\ShopifyBuyButtonController;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityViewBuilder;
@@ -64,7 +65,7 @@ class ShopifyProductViewBuilder extends EntityViewBuilder {
     $form = $display->getComponent('add_to_cart_form');
     if ($form) {
 
-      /** @var \Drupal\shopify\Controller\ShopifyBuyButtonController $buy_button_controller */
+      /** @var ShopifyBuyButtonController $buy_button_controller */
       $buy_button_controller = \Drupal::service('shopify.buy_button_controller');
       $build['add_to_cart_form']['add_to_cart'] = $buy_button_controller->buildForProduct($entity);
 
diff --git a/tests/src/Functional/SmokeTest.php b/tests/src/Functional/SmokeTest.php
index fb414b0..54e11b5 100644
--- a/tests/src/Functional/SmokeTest.php
+++ b/tests/src/Functional/SmokeTest.php
@@ -24,7 +24,7 @@ class SmokeTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Make sure to complete the normal setup steps first.
     parent::setUp();
 
@@ -46,7 +46,10 @@ class SmokeTest extends BrowserTestBase {
     $this->assertSession()->statusCodeEquals(200);
 
     // Confirm that the front page contains the standard text.
-    $this->assertText('Welcome to Drupal');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Welcome to Drupal');
   }
 
   /**
@@ -57,7 +60,10 @@ class SmokeTest extends BrowserTestBase {
 
     $this->drupalGet('/admin/config/system/shopify');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Shopify Store Settings');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Shopify Store Settings');
 
   }
 
@@ -69,7 +75,10 @@ class SmokeTest extends BrowserTestBase {
 
     $this->drupalGet('/admin/config/system/shopify_api');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Shopify API Settings');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Shopify API Settings');
 
   }
 
diff --git a/tests/src/Functional/SyncTest.php b/tests/src/Functional/SyncTest.php
index 65398cb..d605772 100644
--- a/tests/src/Functional/SyncTest.php
+++ b/tests/src/Functional/SyncTest.php
@@ -30,13 +30,16 @@ class SyncTest extends BrowserTestBase {
     $this->drupalGet('/admin/config/system/shopify/sync');
     $this->assertSession()->statusCodeEquals(200);
 
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'num_per_batch' => 10,
       'delete_products_first' => FALSE,
       'force_update' => TRUE,
     ], 'Start Products Sync');
 
-    $this->assertText('Synced 2 products');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Synced 2 products');
 
     $product = \Drupal::entityTypeManager()->getStorage('shopify_product')->load(1);
     $this->assertEquals(
diff --git a/tests/src/FunctionalJavascript/ShopifyBuyButtonTest.php b/tests/src/FunctionalJavascript/ShopifyBuyButtonTest.php
index b03ddac..62c2574 100644
--- a/tests/src/FunctionalJavascript/ShopifyBuyButtonTest.php
+++ b/tests/src/FunctionalJavascript/ShopifyBuyButtonTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\shopify\FunctionalJavascript;
 
+use Drupal\shopify\Entity\ShopifyProduct;
+use Drupal\FunctionalJavascriptTests\JSWebAssert;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 
 /**
@@ -24,7 +26,7 @@ class ShopifyBuyButtonTest extends WebDriverTestBase {
   /**
    * Dummy product that refers to a real product id.
    *
-   * @var \Drupal\shopify\Entity\ShopifyProduct
+   * @var ShopifyProduct
    */
   protected $product;
 
@@ -58,7 +60,7 @@ class ShopifyBuyButtonTest extends WebDriverTestBase {
    */
   public function testBuyButtonLoads() {
     $this->drupalGet($this->product->toUrl()->toString());
-    /** @var \Drupal\FunctionalJavascriptTests\JSWebAssert $assert_session */
+    /** @var JSWebAssert $assert_session */
     $assert_session = $this->assertSession();
     $button = $assert_session->waitForElementVisible('css', '.shopify-buy__btn');
     $this->assertEquals($button->getText(), 'Add to cart');
@@ -72,7 +74,7 @@ class ShopifyBuyButtonTest extends WebDriverTestBase {
    */
   public function testAddProductToCart() {
     $this->drupalGet($this->product->toUrl()->toString());
-    /** @var \Drupal\FunctionalJavascriptTests\JSWebAssert $assert_session */
+    /** @var JSWebAssert $assert_session */
     $assert_session = $this->assertSession();
     $button = $assert_session->waitForElementVisible('css', '.shopify-buy__btn');
     $button->click();
