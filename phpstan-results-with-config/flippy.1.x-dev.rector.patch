diff --git a/flippy.info.yml b/flippy.info.yml
index 0a631cd..d34fd7b 100644
--- a/flippy.info.yml
+++ b/flippy.info.yml
@@ -1,5 +1,4 @@
 name: Flippy
-core: 8.x
 description: Allows administrators to define custom pagers for navigation in lists of nodes.
 type: module
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
diff --git a/src/FlippyEvent.php b/src/FlippyEvent.php
index 1fd8b4a..96ae9e3 100644
--- a/src/FlippyEvent.php
+++ b/src/FlippyEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\flippy;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\node\NodeInterface;
 
 /**
@@ -18,7 +18,7 @@ class FlippyEvent extends Event {
    *
    * @param array $queries
    *   The queries for this event.
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node object.
    */
   public function __construct(array $queries, NodeInterface $node) {
@@ -49,7 +49,7 @@ class FlippyEvent extends Event {
   /**
    * Getter for node.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The node object for this event.
    */
   public function getNode() {
diff --git a/src/FlippyPager.php b/src/FlippyPager.php
index 609bf2a..4d6bad4 100644
--- a/src/FlippyPager.php
+++ b/src/FlippyPager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\flippy;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -22,35 +23,35 @@ class FlippyPager {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   public $entityFieldManager;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   public $entityTypeManager;
 
   /**
    * The database connection.
    *
-   * @var Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The flippy Settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $flippySettings;
 
@@ -64,26 +65,26 @@ class FlippyPager {
   /**
    * Drupal Language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event displatcher.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory to get flippy settings.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Drupal token service.
-   * @param \Drupal\Core\Language\LanguageManager $languageManager
+   * @param LanguageManager $languageManager
    *   Drupal Language manager service.
    */
   public function __construct(EntityFieldManagerInterface $entityFieldManager, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, Connection $connection, ConfigFactoryInterface $config_factory, Token $token, LanguageManager $languageManager) {
@@ -99,7 +100,7 @@ class FlippyPager {
   /**
    * Helper function: Query to get the list of flippy pagers.
    *
-   * @param Drupal\node\Entity\Node $node
+   * @param Node $node
    *   Current node object.
    *
    * @return array
@@ -304,7 +305,7 @@ class FlippyPager {
         'last' => $last,
       ];
       $event = new FlippyEvent($queries, $node);
-      $this->eventDispatcher->dispatch('buildFlippyQuery', $event);
+      $this->eventDispatcher->dispatch($event, 'buildFlippyQuery');
       $queries = $event->getQueries();
 
       // Execute the queries.
@@ -391,7 +392,7 @@ class FlippyPager {
   /**
    * Determine if the Flippy pager should be shown for the give node.
    *
-   * @param Drupal\node\Entity\Node $node
+   * @param Node $node
    *   Node to check for pager.
    *
    * @return bool
diff --git a/src/Plugin/Block/FlippyBlock.php b/src/Plugin/Block/FlippyBlock.php
index 14d7078..77fd1a0 100755
--- a/src/Plugin/Block/FlippyBlock.php
+++ b/src/Plugin/Block/FlippyBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\flippy\Plugin\Block;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -25,28 +27,28 @@ class FlippyBlock extends BlockBase implements ContainerFactoryPluginInterface {
   /**
    * The http request.
    *
-   * @var null|\Symfony\Component\HttpFoundation\Request
+   * @var null|Request
    */
   protected $request;
 
   /**
    * The flippy pager service.
    *
-   * @var \Drupal\flippy\FlippyPager
+   * @var FlippyPager
    */
   protected $flippyPager;
 
   /**
    * The flippy Settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $flippySettings;
 
   /**
    * The current route service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;
 
diff --git a/tests/src/Functional/FlippyTest.php b/tests/src/Functional/FlippyTest.php
index 1ce698b..973f894 100644
--- a/tests/src/Functional/FlippyTest.php
+++ b/tests/src/Functional/FlippyTest.php
@@ -26,7 +26,7 @@ class FlippyTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create an article content type that we will use for testing.
@@ -71,8 +71,14 @@ class FlippyTest extends BrowserTestBase {
     $this->assertSession()->statusCodeEquals(200);
 
     // Confirm that the front page contains the standard text.
-    $this->assertNoText('Previous');
-    $this->assertText('Next');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Previous');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Next');
 
     // Load the second page.
     $this->drupalGet('/node/2');
@@ -81,8 +87,14 @@ class FlippyTest extends BrowserTestBase {
     $this->assertSession()->statusCodeEquals(200);
 
     // Confirm that the front page contains the standard text.
-    $this->assertText('Previous');
-    $this->assertText('Next');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Previous');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Next');
 
     // Load the last page.
     $this->drupalGet('/node/3');
@@ -91,8 +103,14 @@ class FlippyTest extends BrowserTestBase {
     $this->assertSession()->statusCodeEquals(200);
 
     // Confirm that the front page contains the standard text.
-    $this->assertText('Previous');
-    $this->assertNoText('Next');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Previous');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Next');
   }
 
 }
