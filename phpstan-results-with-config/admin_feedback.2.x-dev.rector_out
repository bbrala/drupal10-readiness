modules/contrib/admin_feedback/admin_feedback.install
modules/contrib/admin_feedback/admin_feedback.module
modules/contrib/admin_feedback/admin_feedback.views.inc
modules/contrib/admin_feedback/src/Controller/AdminFeedbackController.php
modules/contrib/admin_feedback/src/Event/VoteEvent.php
modules/contrib/admin_feedback/src/Form/AdminFeedbackAjaxForm.php
modules/contrib/admin_feedback/src/Form/AdminFeedbackDeleteForm.php
modules/contrib/admin_feedback/src/Form/AdminFeedbackSettingsForm.php
modules/contrib/admin_feedback/src/Plugin/Block/AdminFeedbackBlock.php
modules/contrib/admin_feedback/src/Routing/RouteSubscriber.php
modules/contrib/admin_feedback/tests/src/Functional/LoadTest.php

6 files with changes
====================

1) modules/contrib/admin_feedback/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\admin_feedback\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/admin_feedback/src/Plugin/Block/AdminFeedbackBlock.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The CurrentRouteMatch object.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   private $routeMatch;

@@ @@
   /**
    * The FormBuilder object.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   private $builder;

@@ @@
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $routeMatch
-   * @param \Drupal\Core\Form\FormBuilder $builder
+   * @param ConfigFactoryInterface $configFactory
+   * @param CurrentRouteMatch $routeMatch
+   * @param FormBuilder $builder
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigFactoryInterface $configFactory, CurrentRouteMatch $routeMatch, FormBuilder $builder) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/admin_feedback/src/Form/AdminFeedbackAjaxForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\admin_feedback\Form;

+use Drupal\Core\Language\LanguageManager;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\HtmlCommand;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ @@
   /**
    * The Database Connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The RequestStack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The LanguageManager object.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager;

@@ @@
   /**
    * Event Dispatcher Service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/admin_feedback/src/Event/VoteEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\admin_feedback\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Wraps a vote event for event listeners.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/admin_feedback/src/Controller/AdminFeedbackController.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The Database Connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The RequestStack object.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Event Dispatcher Service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * AdminFeedbackController constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param Connection $database
+   * @param RequestStack $requestStack
+   * @param LanguageManagerInterface $languageManager
    */
   public function __construct(Connection $database, RequestStack $requestStack, LanguageManagerInterface $languageManager, EventDispatcherInterface $eventDispatcher) {
     $this->database = $database;
@@ @@
     $event = new VoteEvent();
     $event->setNid($node_id);
     $event->setVote($feedback);
-    $this->eventDispatcher->dispatch(VoteEvent::VOTE_EVENT, $event);
+    $this->eventDispatcher->dispatch($event, VoteEvent::VOTE_EVENT);

     switch ($feedback) {
       case 'yes':
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/admin_feedback/admin_feedback.install:202

    ---------- begin diff ----------
@@ @@
   $message = NULL;

   if (\Drupal::moduleHandler()->moduleExists('views')) {
-    $config_path = drupal_get_path('module', 'admin_feedback') . '/config/install/views.view.feedback.yml';
+    $config_path = \Drupal::service('extension.list.module')->getPath('admin_feedback') . '/config/install/views.view.feedback.yml';
     $data = Yaml::parseFile($config_path);
     \Drupal::configFactory()->getEditable('views.view.feedback')->setData($data)->save(TRUE);
     $message = 'The feedback views have been updated.';
@@ @@
   $message = NULL;

   if (\Drupal::moduleHandler()->moduleExists('views')) {
-    $config_path = drupal_get_path('module', 'admin_feedback') . '/config/install/views.view.feedback.yml';
+    $config_path = \Drupal::service('extension.list.module')->getPath('admin_feedback') . '/config/install/views.view.feedback.yml';
     $data = Yaml::parseFile($config_path);
     \Drupal::configFactory()->getEditable('views.view.feedback')->setData($data)->save(TRUE);
     $message = 'The feedback views have been updated.';
@@ @@
   $message = NULL;

   if (\Drupal::moduleHandler()->moduleExists('views')) {
-    $config_path = drupal_get_path('module', 'admin_feedback') . '/config/install/views.view.feedback.yml';
+    $config_path = \Drupal::service('extension.list.module')->getPath('admin_feedback') . '/config/install/views.view.feedback.yml';
     $data = Yaml::parseFile($config_path);
     \Drupal::configFactory()->getEditable('views.view.feedback')->setData($data)->save(TRUE);
     $message = 'The feedback views have been updated.';
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 6 files have been changed by Rector                                       

