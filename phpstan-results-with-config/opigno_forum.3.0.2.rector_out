modules/contrib/opigno_forum/opigno_forum.install
modules/contrib/opigno_forum/opigno_forum.module
modules/contrib/opigno_forum/src/Access/ForumAccessCheck.php
modules/contrib/opigno_forum/src/ForumTopicHandler.php
modules/contrib/opigno_forum/src/ForumTopicRender.php
modules/contrib/opigno_forum/src/Plugin/Block/LastTopicBlock.php
modules/contrib/opigno_forum/src/Routing/RouteSubscriber.php

4 files with changes
====================

1) modules/contrib/opigno_forum/src/Plugin/Block/LastTopicBlock.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Service forum_manager definition.
    *
-   * @var \Drupal\forum\ForumManagerInterface
+   * @var ForumManagerInterface
    */
   protected $forumManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/opigno_forum/src/ForumTopicRender.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_forum;

+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\node\Entity\Node;
 /**
  * Forum topic render helper class.
  */
@@ @@
   /**
    * Prepares variables for opigno_forum_last_topics_item template.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function preprocessForumLastTopicsItem(array &$variables): void {
-    /** @var \Drupal\node\Entity\Node $topic */
+    /** @var Node $topic */
     $topic = &$variables["topic"];
     $variables['name'] = $topic->label();
     $variables['link'] = $topic->toUrl()->toString();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/opigno_forum/src/ForumTopicHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_forum;

+use Drupal\group\Entity\GroupInterface;
+use Drupal\group\Entity\GroupTypeInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * ForumTopicHandler constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager) {
@@ @@
   /**
    * Performs node creation tasks.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   A newly created node.
    */
   public function onNodeInsert(NodeInterface $node) {
     $node_type_id = $node->bundle();
     if ($this->isForumTopicType($node_type_id) && $this->isLearningPathContent($node_type_id) && ($gid = $this->getForumTopicGroupId($node))) {
-      /** @var \Drupal\group\Entity\GroupInterface $group */
+      /** @var GroupInterface $group */
       $group = $this->entityTypeManager->getStorage('group')->load($gid);
       // The target entity will be saved again while being added to the group,
       // which would trigger recursive save and integrity constraint violation
@@ @@
    */
   public function isLearningPathContent($node_type_id) {
     try {
-      /** @var \Drupal\group\Entity\GroupTypeInterface $group_type */
+      /** @var GroupTypeInterface $group_type */
       $group_type = $this->entityTypeManager->getStorage('group_type')->load('learning_path');
       $group_type->getContentPlugin('group_node:' . $node_type_id);
       return TRUE;
@@ @@
   /**
    * Returns the group associated with the specified topic.
    *
-   * @param \Drupal\node\NodeInterface $topic
+   * @param NodeInterface $topic
    *   A forum topic node object.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/opigno_forum/opigno_forum.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\group\Entity\GroupInterface;
+use Drupal\group\GroupMembership;
 /**
  * @file
  * Contains opigno_forum.module.
@@ @@
 function opigno_forum_entity_presave(EntityInterface $entity) {
   if ($entity->getEntityTypeId() === 'group'
     && $entity->bundle() === 'learning_path') {
-    /** @var \Drupal\group\Entity\Group $entity */
+    /** @var Group $entity */
     // Create a forum for the training
     // if it is enabled and not already exists.
     $enable_forum = $entity->get('field_learning_path_enable_forum')
@@ @@
  *
  * @param int $tid
  *   Forum tid.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   User to check.
  *
  * @return bool
@@ @@
   // Get user groups.
   $membership_service = \Drupal::service('group.membership_loader');
   $memberships = $membership_service->loadByUser($account);
-  /** @var \Drupal\group\Entity\GroupInterface[] $groups */
+  /** @var GroupInterface[] $groups */
   $groups = array_map(function ($membership) {
-    /** @var \Drupal\group\GroupMembership $membership */
+    /** @var GroupMembership $membership */
     return $membership->getGroup();
   }, $memberships);

@@ @@
  * @param array $variables
  */
 function template_preprocess_opigno_forum_last_topics_block(array &$variables) {
-  /** @var \Drupal\opigno_forum\ForumTopicRender $forum_topic_render */
+  /** @var ForumTopicRender $forum_topic_render */
   $forum_topic_render = \Drupal::classResolver(ForumTopicRender::class);
   $forum_topic_render->preprocessForumLastTopicsBlock($variables);
 }
@@ @@
  * @param array $variables
  */
 function template_preprocess_opigno_forum_last_topics_item(array &$variables) {
-  /** @var \Drupal\opigno_forum\ForumTopicRender $forum_topic_render */
+  /** @var ForumTopicRender $forum_topic_render */
   $forum_topic_render = \Drupal::classResolver(ForumTopicRender::class);
   $forum_topic_render->preprocessForumLastTopicsItem($variables);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

