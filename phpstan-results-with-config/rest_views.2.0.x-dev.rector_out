modules/contrib/rest_views/modules/rest_views_geo/rest_views_geo.module
modules/contrib/rest_views/modules/rest_views_geo/src/Plugin/Field/FieldFormatter/GeolocationLatLngExportFormatter.php
modules/contrib/rest_views/modules/rest_views_revisions/src/Plugin/Field/FieldFormatter/EntityReferenceRevisionsExportFormatter.php
modules/contrib/rest_views/modules/rest_views_search_api/src/Plugin/views/field/SearchApiEntityFieldExport.php
modules/contrib/rest_views/rest_views.module
modules/contrib/rest_views/src/Normalizer/DataNormalizer.php
modules/contrib/rest_views/src/Normalizer/RenderNormalizer.php
modules/contrib/rest_views/src/Plugin/Field/FieldFormatter/BooleanExportFormatter.php
modules/contrib/rest_views/src/Plugin/Field/FieldFormatter/EntityReferenceExportFormatter.php
modules/contrib/rest_views/src/Plugin/Field/FieldFormatter/EntityReferenceIdExportFormatter.php
modules/contrib/rest_views/src/Plugin/Field/FieldFormatter/EntityReferencePathFormatter.php
modules/contrib/rest_views/src/Plugin/Field/FieldFormatter/FileExportFormatter.php
modules/contrib/rest_views/src/Plugin/Field/FieldFormatter/ImageExportFormatter.php
modules/contrib/rest_views/src/Plugin/Field/FieldFormatter/LinkExportFormatter.php
modules/contrib/rest_views/src/Plugin/Field/FieldFormatter/NumberExportFormatter.php
modules/contrib/rest_views/src/Plugin/views/field/EntityFieldExport.php
modules/contrib/rest_views/src/RenderableData.php
modules/contrib/rest_views/src/SerializedData.php
modules/contrib/rest_views/tests/src/Unit/EntityFieldExportTest.php

10 files with changes
=====================

1) modules/contrib/rest_views/tests/src/Unit/EntityFieldExportTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\rest_views\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
+use Symfony\Component\Serializer\SerializerInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The EntityFieldExport plugin.
    *
-   * @var \Drupal\rest_views\Plugin\views\field\EntityFieldExport|\PHPUnit_Framework_MockObject_MockObject
+   * @var EntityFieldExport|MockObject
    */
   private $handler;

@@ @@
   /**
    * The mocked serializer service.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   private $serializer;

@@ @@
     $entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $entityFieldManager = $this->createMock(EntityFieldManagerInterface::class);
     $entityRepository = $this->createMock(EntityRepositoryInterface::class);
-    $formatterPluginManager = $this
-      ->getMockBuilder(FormatterPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $formatterPluginManager = $this->createMock(FormatterPluginManager::class);
     $fieldTypePluginManager = $this->createMock(FieldTypePluginManagerInterface::class);
     $languageManager = $this->createMock(LanguageManagerInterface::class);
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->createMock(RendererInterface::class);
     // For the t() function to work, mock the translation service.
     $container = new ContainerBuilder();
@@ @@
       ->willReturn(['title' => $fieldDefinition]);

     // Initialize the handler, using a mocked view and display plugin.
-    /** @var \Drupal\views\ViewExecutable $view */
-    $view = $this->getMockBuilder(ViewExecutable::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-    $view->display_handler = $this->getMockBuilder(DisplayPluginBase::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    /** @var ViewExecutable $view */
+    $view = $this->createMock(ViewExecutable::class);
+    $view->display_handler = $this->createMock(DisplayPluginBase::class);
     $this->handler->init($view, $view->display_handler);

     $this->serializer = new Serializer([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/rest_views/src/Plugin/Field/FieldFormatter/LinkExportFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rest_views\Plugin\Field\FieldFormatter;

+use Drupal\Core\Url;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\link\Plugin\Field\FieldFormatter\LinkFormatter;
@@ @@
     $elements = parent::viewElements($items, $langcode);

     foreach ($elements as $delta => $element) {
-      /** @var \Drupal\Core\Url $url */
+      /** @var Url $url */
       $url = $element['#url'];
       $data = [
         'url' => $url->toString(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/rest_views/src/Plugin/Field/FieldFormatter/ImageExportFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rest_views\Plugin\Field\FieldFormatter;

+use Drupal\file\FileInterface;
+use Drupal\image\ImageStyleInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\image\Entity\ImageStyle;
@@ @@
     foreach ($elements as $delta => $element) {
       $item = $element['#item'];
       if (($entity = $item->entity) && empty($item->uri)) {
-        /** @var \Drupal\file\FileInterface $entity */
+        /** @var FileInterface $entity */
         $uri = $entity->getFileUri();
       }
       else {
@@ @@
       }

       if ($element['#image_style']) {
-        /** @var \Drupal\image\ImageStyleInterface $style */
+        /** @var ImageStyleInterface $style */
         $style = ImageStyle::load($element['#image_style']);

         // Determine the dimensions of the styled image.
@@ @@
         $uri = $style->buildUrl($uri);
       }
       else {
-        $uri = file_create_url($uri);
+        $uri = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
       }

       if ($alt || $title) {
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/rest_views/src/Plugin/Field/FieldFormatter/FileExportFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rest_views\Plugin\Field\FieldFormatter;

+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\file\Plugin\Field\FieldFormatter\FileFormatterBase;
 use Drupal\rest_views\SerializedData;
@@ @@

     $elements = [];

-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $items */
+    /** @var EntityReferenceFieldItemListInterface $items */
     foreach ($this->getEntitiesToView($items, $langcode) as $delta => $entity) {
-      /** @var \Drupal\file\FileInterface $entity */
-      $data = ['url' => file_create_url($entity->getFileUri())];
+      /** @var FileInterface $entity */
+      $data = ['url' => \Drupal::service('file_url_generator')->generateAbsoluteString($entity->getFileUri())];
       if ($description && !empty($entity->_referringItem)) {
         $data['description'] = $entity->_referringItem->description;
       }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/rest_views/src/Plugin/Field/FieldFormatter/EntityReferencePathFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rest_views\Plugin\Field\FieldFormatter;

+use Drupal\Core\Url;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\link\Plugin\Field\FieldFormatter\LinkFormatter;
 use Drupal\rest_views\SerializedData;
@@ @@
     $elements = [];

     foreach ($items as $delta => $item) {
-      /** @var \Drupal\Core\Url $url */
+      /** @var Url $url */
       $url = $item->entity->toUrl();
       $elements[$delta] = [
         '#type' => 'data',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/rest_views/src/Plugin/Field/FieldFormatter/EntityReferenceExportFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rest_views\Plugin\Field\FieldFormatter;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\Plugin\Field\FieldFormatter\EntityReferenceEntityFormatter;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
         }
       }

-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = $row[$entity_key];

       if (!empty($extra['id'])) {
@@ @@

         // If the field has no multiple cardinality, unpack the array.
         if (!empty($field['#items'])) {
-          /** @var \Drupal\Core\Field\FieldItemListInterface $field_items */
+          /** @var FieldItemListInterface $field_items */
           $field_items = $field['#items'];
           if (!$field_items
             ->getFieldDefinition()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/rest_views/src/Normalizer/RenderNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rest_views\Normalizer;

+use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\rest_views\RenderableData;
 use Drupal\serialization\Normalizer\NormalizerBase;
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * DataNormalizer constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(RendererInterface $renderer) {
@@ @@
    */
   public function normalize($object, $format = NULL, array $context = []) {
     /** @var \Drupal\rest_views\SerializedData $object */
-    /** @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface $normalizer */
+    /** @var NormalizerInterface $normalizer */
     $normalizer = $this->serializer;
     $data = $object->getData();
     return $normalizer->normalize($this->renderer->render($data));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/rest_views/src/Normalizer/DataNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rest_views\Normalizer;

+use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
 use Drupal\rest_views\SerializedData;
 use Drupal\serialization\Normalizer\NormalizerBase;

@@ @@
    */
   public function normalize($object, $format = NULL, array $context = []) {
     /** @var \Drupal\rest_views\SerializedData $object */
-    /** @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface $normalizer */
+    /** @var NormalizerInterface $normalizer */
     $normalizer = $this->serializer;
     return $normalizer->normalize($object->getData());
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/rest_views/rest_views.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleExtensionList;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Extension\ModuleInstallerInterface;
 /**
  * @file
  * Provides a new Views Field plugin for all entity fields.
@@ @@
  * Implements hook_modules_installed().
  */
 function rest_views_modules_installed($modules) {
-  /** @var \Drupal\Core\Extension\ModuleExtensionList $availableModules */
+  /** @var ModuleExtensionList $availableModules */
   $availableModules = Drupal::service('extension.list.module');
-  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $installedModules */
+  /** @var ModuleHandlerInterface $installedModules */
   $installedModules = Drupal::service('module_handler');
-  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $moduleInstaller */
+  /** @var ModuleInstallerInterface $moduleInstaller */
   $moduleInstaller = Drupal::service('module_installer');

   $to_install = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


10) modules/contrib/rest_views/modules/rest_views_revisions/src/Plugin/Field/FieldFormatter/EntityReferenceRevisionsExportFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\rest_views_revisions\Plugin\Field\FieldFormatter;

+use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
+use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    * @param \Drupal\entity_reference_revisions\Plugin\Field\FieldFormatter\EntityReferenceRevisionsEntityFormatter $entityFormatter
    *   The entity_reference_revisions formatter.
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException
+   * @throws ServiceCircularReferenceException
+   * @throws ServiceNotFoundException
    */
   public static function create(ContainerInterface $container,
                                 array $configuration,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/rest_views/modules/rest_views_search_api/src/Plugin/view
         s/field/SearchApiEntityFieldExport.php" file, due to:                  
         "Analyze error: "Class                                                 
         Drupal\search_api\Plugin\views\field\SearchApiEntityField not found.". 
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

