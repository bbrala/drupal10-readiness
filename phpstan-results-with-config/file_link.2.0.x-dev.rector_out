modules/contrib/file_link/file_link.module
modules/contrib/file_link/src/FileLinkFormatterTrait.php
modules/contrib/file_link/src/FileLinkInterface.php
modules/contrib/file_link/src/FileLinkQueueItem.php
modules/contrib/file_link/src/Plugin/Field/FieldFormatter/FileLinkFormatter.php
modules/contrib/file_link/src/Plugin/Field/FieldFormatter/FileLinkSeparateFormatter.php
modules/contrib/file_link/src/Plugin/Field/FieldType/FileLinkItem.php
modules/contrib/file_link/src/Plugin/Field/FieldWidget/FileLinkWidget.php
modules/contrib/file_link/src/Plugin/QueueWorker/FileLinkMetadataUpdate.php
modules/contrib/file_link/src/Plugin/Validation/Constraint/LinkToFileConstraint.php
modules/contrib/file_link/tests/modules/file_link_test/file_link_test.module
modules/contrib/file_link/tests/modules/file_link_test/src/Controller/RedirectController.php
modules/contrib/file_link/tests/modules/file_link_test/src/HttpMiddleware.php
modules/contrib/file_link/tests/src/Functional/FileLinkRedirectTest.php
modules/contrib/file_link/tests/src/Kernel/FileLinkDeferredTest.php
modules/contrib/file_link/tests/src/Kernel/FileLinkMultiValueTest.php
modules/contrib/file_link/tests/src/Kernel/FileLinkValidationTest.php
modules/contrib/file_link/tests/src/Kernel/FileLinkWidgetTest.php

12 files with changes
=====================

1) modules/contrib/file_link/tests/src/Kernel/FileLinkWidgetTest.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('entity_test');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/file_link/tests/src/Kernel/FileLinkValidationTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Test entity.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $entity;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['file_link_test']);
@@ @@
    *   An absolute URL.
    */
   protected static function getFullUrl($path) {
-    return Url::fromUri('base:/' . drupal_get_path('module', 'file_link_test') . $path, ['absolute' => TRUE, 'query' => ['foo' => 'bar']])->toString();
+    return Url::fromUri('base:/' . \Drupal::service('extension.list.module')->getPath('file_link_test') . $path, ['absolute' => TRUE, 'query' => ['foo' => 'bar']])->toString();
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/file_link/tests/src/Kernel/FileLinkMultiValueTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['file_link_test']);
@@ @@

     new Settings($settings);

-    /** @var \Drupal\entity_test\Entity\EntityTest $entity */
+    /** @var EntityTest $entity */
     $entity = EntityTest::create(['name' => 'Foo', 'type' => 'article']);

     $entity->get('multivalue_url')->set(0, ['uri' => 'http://file_link.drupal/fancy-file-1.txt']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/file_link/tests/src/Kernel/FileLinkDeferredTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installConfig(['file_link_test']);
@@ @@
     ];
     new Settings($settings);

-    /** @var \Drupal\entity_test\Entity\EntityTest $entity */
+    /** @var EntityTest $entity */
     $entity = EntityTest::create(['name' => 'Foo', 'type' => 'article']);

     $entity->get('deferred_url')->set(0, ['uri' => 'http://file_link.drupal/latentcy-test-file1.txt']);
@@ @@
     ];
     new Settings($settings);

-    /** @var \Drupal\entity_test\Entity\EntityTest $entity */
+    /** @var EntityTest $entity */
     $entity = EntityTest::create(['name' => 'Foo', 'type' => 'article']);

     $entity->get('deferred_url')->set(0, ['uri' => 'http://file_link.drupal/latentcy-test-file.txt']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/file_link/tests/src/Functional/FileLinkRedirectTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\file_link\Functional;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\file_link\Plugin\Field\FieldType\FileLinkItem;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Url;
 use Drupal\entity_test\Entity\EntityTest;
@@ @@
    * @param $format
    *    Expected file format.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws EntityStorageException
+   * @throws MissingDataException
    *
    * @dataProvider redirectDataProvider
    */
@@ @@
     ]);
     $entity->save();

-    /** @var \Drupal\file_link\Plugin\Field\FieldType\FileLinkItem $file_link */
+    /** @var FileLinkItem $file_link */
     $file_link = $entity->get('url_without_extension')->first();
     $this->assertEquals($size, $file_link->getSize());
     $this->assertEquals($format, $file_link->getFormat());
@@ @@
   /**
    * Test not valid redirect.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testNotValidRedirect() {
     $entity = EntityTest::create(['name' => 'Foo', 'type' => 'article']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/file_link/tests/modules/file_link_test/src/HttpMiddleware.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_link_test;

+use GuzzleHttp\Promise\PromiseInterface;
 use Drupal\Core\Site\Settings;
 use GuzzleHttp\Promise\FulfilledPromise;
 use GuzzleHttp\Psr7\Response;
@@ @@
    *
    * @param RequestInterface $request
    *
-   * @return \GuzzleHttp\Promise\PromiseInterface
+   * @return PromiseInterface
    */
   protected function createPromise(RequestInterface $request, $fixture) {
     // Create a response from the fixture.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/file_link/tests/modules/file_link_test/src/Controller/RedirectController.php:27

    ---------- begin diff ----------
@@ @@
    *   An absolute URL.
    */
   protected static function getFullUrl($path) {
-    return Url::fromUri('base:/' . drupal_get_path('module', 'file_link_test') . $path, ['absolute' => TRUE])->toString();
+    return Url::fromUri('base:/' . \Drupal::service('extension.list.module')->getPath('file_link_test') . $path, ['absolute' => TRUE])->toString();
   }

 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/file_link/tests/modules/file_link_test/file_link_test.module:4

    ---------- begin diff ----------
@@ @@
 /**
  * Get the count of how many times an entity was saved.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  *
  * @return int
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/file_link/src/Plugin/Validation/Constraint/LinkToFileConstraint.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Validation execution context.
    *
-   * @var \Symfony\Component\Validator\Context\ExecutionContextInterface
+   * @var ExecutionContextInterface
    */
   protected $context;

@@ @@
    * {@inheritdoc}
    */
   public function validate($link, Constraint $constraint) {
-    /** @var \Drupal\file_link\Plugin\Field\FieldType\FileLinkItem $link */
+    /** @var FileLinkItem $link */
     if ($link->isEmpty()) {
       return;
     }
@@ @@
   /**
    * Check whereas given link field needs an extension.
    *
-   * @param \Drupal\file_link\Plugin\Field\FieldType\FileLinkItem $link
+   * @param FileLinkItem $link
    *   Link item.
    *
    * @return bool
@@ @@
   /**
    * Check whereas given link field needs an extension.
    *
-   * @param \Drupal\file_link\Plugin\Field\FieldType\FileLinkItem $link
+   * @param FileLinkItem $link
    *   Link item.
    *
    * @return bool
@@ @@
    *
    * @param string $basename
    *   URL path basename.
-   * @param \Drupal\file_link\Plugin\Field\FieldType\FileLinkItem $link
+   * @param FileLinkItem $link
    *   Link item.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/file_link/src/Plugin/QueueWorker/FileLinkMetadataUpdate.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_link\Plugin\QueueWorker;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
     if ($data instanceof FileLinkQueueItem) {
       $storage = $this->entityTypeManager->getStorage($data->getType());

-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if ($data->getRevisionId() !== NULL) {
         $entity = $storage->loadRevision($data->getRevisionId());
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/file_link/src/Plugin/Field/FieldType/FileLinkItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_link\Plugin\Field\FieldType;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use GuzzleHttp\Client;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
   /**
    * The HTTP response of the last client request, if any.
    *
-   * @var \Psr\Http\Message\ResponseInterface
+   * @var ResponseInterface
    */
   protected $response = NULL;

@@ @@
   /**
    * The exception throw by the the last HTTP client request, if any.
    *
-   * @var \GuzzleHttp\Exception\RequestException
+   * @var RequestException
    */
   protected $exception = NULL;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The HTTP client service.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * The queue to use when deferring the request to get the metadata.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@

     $entity = $this->getEntity();
     $storage = $this->getEntityTypeManager()->getStorage($entity->getEntityTypeId());
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $original */
+    /** @var ContentEntityInterface $original */
     $original = $entity->isNew() ? NULL : $storage->loadUnchanged($entity->id());
     $field_name = $this->getFieldDefinition()->getName();

@@ @@
   /**
    * Returns the entity type manager service.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager service.
    */
   protected function getEntityTypeManager() {
@@ @@
   /**
    * Returns the HTTP client service.
    *
-   * @return \GuzzleHttp\Client
+   * @return Client
    *   The Guzzle client.
    */
   protected function getHttpClient() {
@@ @@
   /**
    * Returns the queue.
    *
-   * @return \Drupal\Core\Queue\QueueInterface
+   * @return QueueInterface
    *   The queue for deferred entity updates.
    */
   protected function getQueue(): QueueInterface {
@@ @@
   /**
    * Check whereas given response is supported by field type.
    *
-   * @param \Psr\Http\Message\ResponseInterface $response
+   * @param ResponseInterface $response
    *   Response object.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/file_link/src/FileLinkInterface.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the latest HTTP response.
    *
-   * @param \Psr\Http\Message\ResponseInterface $response
+   * @param ResponseInterface $response
    *   The last response to be stored.
    *
    * @return $this
@@ @@
   /**
    * Gets the latest stored HTTP response.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   A response object.
    */
   public function getResponse();
@@ @@
   /**
    * Sets the exception throw by the last HTTP client request.
    *
-   * @param \GuzzleHttp\Exception\RequestException $exception
+   * @param RequestException $exception
    *   The last Guzzle request exception.
    *
    * @return $this
@@ @@
   /**
    * Gets the last Guzzle client exception.
    *
-   * @return \GuzzleHttp\Exception\RequestException
+   * @return RequestException
    *   The last Guzzle client exception.
    */
   public function getException();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 12 files have been changed by Rector                                      

