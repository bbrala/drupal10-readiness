diff --git a/src/Access/MediaThronAccessCheck.php b/src/Access/MediaThronAccessCheck.php
index 4d8139d..39e9f21 100644
--- a/src/Access/MediaThronAccessCheck.php
+++ b/src/Access/MediaThronAccessCheck.php
@@ -3,6 +3,7 @@
 namespace Drupal\thron\Access;
 
 
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessCheck;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -26,11 +27,11 @@ class MediaThronAccessCheck extends EntityAccessCheck implements AccessInterface
   public static $requirementsKey = '_thron_media_access';
 
   /**
-   * @param \Symfony\Component\Routing\Route $route
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param Route $route
+   * @param RouteMatchInterface $route_match
+   * @param AccountInterface $account
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
     // Split the entity type and the operation.
diff --git a/src/Access/MediaThronAddAccessCheck.php b/src/Access/MediaThronAddAccessCheck.php
index fb5cd2c..9471101 100644
--- a/src/Access/MediaThronAddAccessCheck.php
+++ b/src/Access/MediaThronAddAccessCheck.php
@@ -3,6 +3,9 @@
 namespace Drupal\thron\Access;
 
 
+use Drupal\Core\Access\AccessResultForbidden;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\Core\Access\AccessResultNeutral;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityCreateAccessCheck;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ -25,11 +28,11 @@ class MediaThronAddAccessCheck extends EntityCreateAccessCheck implements Access
   public static $thronRequirementsKey = '_thron_media_add_access';
 
   /**
-   * @param \Symfony\Component\Routing\Route $route
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param Route $route
+   * @param RouteMatchInterface $route_match
+   * @param AccountInterface $account
    *
-   * @return bool|\Drupal\Core\Access\AccessResultForbidden|\Drupal\Core\Access\AccessResultInterface|\Drupal\Core\Access\AccessResultNeutral
+   * @return bool|AccessResultForbidden|AccessResultInterface|AccessResultNeutral
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account) {
     list($entity_type, $bundle) = explode(':', $route->getRequirement($this::$thronRequirementsKey));
diff --git a/src/Controller/ThronAutocompleteController.php b/src/Controller/ThronAutocompleteController.php
index ee92132..ceb115d 100644
--- a/src/Controller/ThronAutocompleteController.php
+++ b/src/Controller/ThronAutocompleteController.php
@@ -19,23 +19,23 @@ class ThronAutocompleteController extends ControllerBase {
   /**
    * The thron_api service.
    *
-   * @var \Drupal\thron\THRONApiInterface
+   * @var THRONApiInterface
    */
   protected $thronApi;
 
   /**
    * The key value factory.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactoryInterface
+   * @var KeyValueFactoryInterface
    */
   protected $keyValueFactory;
 
   /**
    * The controller constructor.
    *
-   * @param \Drupal\thron\THRONApiInterface $thron_api
+   * @param THRONApiInterface $thron_api
    *   The thron_api service.
-   * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value_factory
+   * @param KeyValueFactoryInterface $key_value_factory
    *   The key value factory.
    */
   public function __construct(THRONApiInterface $thron_api, KeyValueFactoryInterface $key_value_factory) {
@@ -76,10 +76,10 @@ class ThronAutocompleteController extends ControllerBase {
   }
 
   /**
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    * @param $categories
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function handleCategoriesAutocomplete(Request $request, $categories) {
     $results = [];
diff --git a/src/Element/ThronAutocomplete.php b/src/Element/ThronAutocomplete.php
index 2236dd1..83ab7d4 100644
--- a/src/Element/ThronAutocomplete.php
+++ b/src/Element/ThronAutocomplete.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\thron\Element;
 
+use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\BubbleableMetadata;
@@ -78,7 +79,7 @@ class ThronAutocomplete extends Textfield {
    *     autocomplete JavaScript library.
    *   - #autocomplete_route_parameters: The parameters to be used in
    *     conjunction with the route name.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -93,7 +94,7 @@ class ThronAutocomplete extends Textfield {
     if (!empty($element['#autocomplete_route_name'])) {
       $parameters = isset($element['#autocomplete_route_parameters']) ? $element['#autocomplete_route_parameters'] : [];
       $url = Url::fromRoute($element['#autocomplete_route_name'], $parameters)->toString(TRUE);
-      /** @var \Drupal\Core\Access\AccessManagerInterface $access_manager */
+      /** @var AccessManagerInterface $access_manager */
       $access_manager = \Drupal::service('access_manager');
       $access = $access_manager->checkNamedRoute($element['#autocomplete_route_name'], $parameters, \Drupal::currentUser(), TRUE);
     }
diff --git a/src/Events/EntitySelectionEvent.php b/src/Events/EntitySelectionEvent.php
index 46bb78a..a8dbd42 100644
--- a/src/Events/EntitySelectionEvent.php
+++ b/src/Events/EntitySelectionEvent.php
@@ -1,6 +1,7 @@
 <?php
 
 namespace Drupal\thron\Events;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\entity_browser\Events\EventBase;
 
 /**
@@ -11,7 +12,7 @@ class EntitySelectionEvent extends EventBase {
   /**
    * Entities being selected.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entities;
 
@@ -22,7 +23,7 @@ class EntitySelectionEvent extends EventBase {
    *   Entity browser ID.
    * @param string $instance_uuid
    *   Entity browser instance UUID.
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Array of selected entities.
    */
   public function __construct($entity_browser_id, $instance_uuid, array $entities) {
@@ -33,7 +34,7 @@ class EntitySelectionEvent extends EventBase {
   /**
    * Returns selected entities.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    */
   public function getEntities() {
     return $this->entities;
diff --git a/src/Form/EntityEmbedDialogOverride.php b/src/Form/EntityEmbedDialogOverride.php
index 88ccc70..bdf3967 100644
--- a/src/Form/EntityEmbedDialogOverride.php
+++ b/src/Form/EntityEmbedDialogOverride.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\thron\Form;
 
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
@@ -39,22 +40,22 @@ class EntityEmbedDialogOverride extends EntityEmbedDialog {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    *   The form structure.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function buildEmbedStep(array $form, FormStateInterface $form_state) {
     // Entity element is calculated on every AJAX request/submit.
     // See self::buildForm().
     $entity_element = $form_state->get('entity_element');
-    /** @var \Drupal\embed\EmbedButtonInterface $embed_button */
+    /** @var EmbedButtonInterface $embed_button */
     $embed_button = $form_state->get('embed_button');
-    /** @var \Drupal\editor\EditorInterface $editor */
+    /** @var EditorInterface $editor */
     $editor = $form_state->get('editor');
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $form_state->get('entity');
     $values = $form_state->getValues();
 
diff --git a/src/Form/THRONConfigurationForm.php b/src/Form/THRONConfigurationForm.php
index 9a96a3c..47ecdb2 100644
--- a/src/Form/THRONConfigurationForm.php
+++ b/src/Form/THRONConfigurationForm.php
@@ -23,7 +23,7 @@ class THRONConfigurationForm extends ConfigFormBase {
   /**
    * THRON api service.
    *
-   * @var \Drupal\thron\THRONApiInterface
+   * @var THRONApiInterface
    *   THRON api service.
    */
   protected $THRONApi;
@@ -31,7 +31,7 @@ class THRONConfigurationForm extends ConfigFormBase {
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -45,11 +45,11 @@ class THRONConfigurationForm extends ConfigFormBase {
   /**
    * Constructs a THRONConfigurationForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\thron\THRONApiInterface $thron_api
+   * @param THRONApiInterface $thron_api
    *   The THRON API service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RendererInterface $renderer, StateInterface $state, THRONApiInterface $thron_api) {
diff --git a/src/Form/ThronWidgetsConfig.php b/src/Form/ThronWidgetsConfig.php
index 94299c3..6b1d0e1 100644
--- a/src/Form/ThronWidgetsConfig.php
+++ b/src/Form/ThronWidgetsConfig.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\thron\Form;
 
+use Drupal\entity_browser\EntityBrowserInterface;
+use Drupal\entity_browser\WidgetInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\entity_browser\Form\WidgetsConfig;
 
@@ -18,10 +20,10 @@ class ThronWidgetsConfig extends WidgetsConfig {
     $form_state->set('widget_uuid', FALSE);
     $form = parent::buildForm($form, $form_state);
 
-    /** @var \Drupal\entity_browser\EntityBrowserInterface $entity_browser */
+    /** @var EntityBrowserInterface $entity_browser */
     $entity_browser = $this->getEntity();
 
-    /** @var \Drupal\entity_browser\WidgetInterface $widget */
+    /** @var WidgetInterface $widget */
     foreach ($entity_browser->getWidgets() as $uuid => $widget) {
       // Pass the widget UUID only to '‌thron_search' widgets and rebuild their config form.
       if (in_array($widget->getBaseId(), ['thron_search', 'thron_upload'])) {
diff --git a/src/Integration/Thronintegration_Api.php b/src/Integration/Thronintegration_Api.php
index 1553b75..f98af21 100644
--- a/src/Integration/Thronintegration_Api.php
+++ b/src/Integration/Thronintegration_Api.php
@@ -283,7 +283,7 @@ class Thronintegration_Api {
    * @param string $id
    *
    * @return mixed
-   * @throws \Drupal\thron\Exception\AppTokenExpiredException
+   * @throws AppTokenExpiredException
    */
   public static function contentSearch($clientId, $token, $categoryId, $nextPageToken = NULL, $contentType = FALSE, $divArea = FALSE, $tagSearch = FALSE, $textSearch = FALSE, $orderBy = FALSE, $cascade = FALSE, $locale = FALSE , $id = NULL) {
     try {
@@ -711,7 +711,7 @@ class Thronintegration_Api {
    * @param $tagId
    *
    * @return array
-   * @throws \Drupal\thron\Exception\AppTokenExpiredException
+   * @throws AppTokenExpiredException
    */
   public static function getITagDefinitionDetail($clientId, $token, $classificationId, $tagId, $show_linked = TRUE, $show_sub = FALSE) {
     $res = ["status" => "ERROR", "errorDescription" => ""];
@@ -1125,7 +1125,7 @@ class Thronintegration_Api {
    * @param string $lang
    *
    * @return array
-   * @throws \Drupal\thron\Exception\AppTokenExpiredException
+   * @throws AppTokenExpiredException
    */
   public static function tagDefinitionList($clientId, $token, $classificationId, $filterOnIds = FALSE, $returnNames = FALSE, $showSubNodeIds = FALSE, $depth = NULL, $search_text = NULL, $lang = 'EN')  {
     $res = ["status" => "ERROR", "errorDescription" => ""];
@@ -1282,7 +1282,7 @@ class Thronintegration_Api {
    * @param bool $onlyTheOnesTheUserCanManage
    *
    * @return array
-   * @throws \Drupal\thron\Exception\AppTokenExpiredException
+   * @throws AppTokenExpiredException
    */
   public static function classificationList($clientId, $token, $onlyActive = TRUE, $onlyTheOnesTheUserCanManage = FALSE) {
     $res = ["status" => "ERROR", "errorDescription" => ""];
@@ -1591,7 +1591,7 @@ class Thronintegration_Api {
    * @param $offset
    *
    * @return array|mixed
-   * @throws \Drupal\thron\Exception\AppTokenExpiredException
+   * @throws AppTokenExpiredException
    */
   public static function getPlayerCustomTemplates($clientId, $tokenId, $offset) {
     $res = ["status" => "ERROR", "errorDescription" => ""];
@@ -1637,7 +1637,7 @@ class Thronintegration_Api {
    * @param $templateId
    *
    * @return array|mixed
-   * @throws \Drupal\thron\Exception\AppTokenExpiredException
+   * @throws AppTokenExpiredException
    */
   public static function getPlayerCustomTemplateData($clientId, $tokenId, $templateId) {
     $res = ["status" => "ERROR", "errorDescription" => ""];
@@ -1824,7 +1824,7 @@ class Thronintegration_Api {
    * @param $skipPkeyCreation
    *
    * @return array|mixed
-   * @throws \Drupal\thron\Exception\AppTokenExpiredException
+   * @throws AppTokenExpiredException
    */
   public static function insertEmbedCode($clientId, $tokenId, $embedName, $source, $contextId, $templateId, $templateType, $values, $skipPkeyCreation) {
     $res = ["status" => "ERROR", "errorDescription" => ""];
@@ -2035,7 +2035,7 @@ class Thronintegration_Api {
    * @param $tokenId
    *
    * @return array|mixed
-   * @throws \Drupal\thron\Exception\AppTokenExpiredException
+   * @throws AppTokenExpiredException
    */
   public static function getMediaContentDetails($clientId, $tokenId, $contentId) {
     $res = ["status" => "ERROR", "errorDescription" => ""];
@@ -2078,7 +2078,7 @@ class Thronintegration_Api {
    * @param $search_param
    *
    * @return array|mixed
-   * @throws \Drupal\thron\Exception\AppTokenExpiredException
+   * @throws AppTokenExpiredException
    */
   public static function contentSearchLite($clientId, $tokenId, $search_param) {
     $res = ["resultCode" => "ERROR", "errorDescription" => ""];
diff --git a/src/Integration/Thronintegration_HTTP.php b/src/Integration/Thronintegration_HTTP.php
index 7fdc050..e80d612 100644
--- a/src/Integration/Thronintegration_HTTP.php
+++ b/src/Integration/Thronintegration_HTTP.php
@@ -36,7 +36,7 @@ class Thronintegration_HTTP {
    * @param bool $returnResponseHeaders
    *
    * @return array|bool|string
-   * @throws \Drupal\thron\Exception\AppTokenExpiredException
+   * @throws AppTokenExpiredException
    */
   private static function callCurl($method, $url, $data = FALSE, $headers = FALSE, $returnResponseHeaders = FALSE) {
     try {
@@ -226,7 +226,7 @@ class Thronintegration_HTTP {
    * @param bool $returnResponseHeaders
    *
    * @return array|bool|string
-   * @throws \Drupal\thron\Exception\AppTokenExpiredException
+   * @throws AppTokenExpiredException
    */
   public static function doHTTP($method, $url, $data = FALSE, $headers = FALSE, $returnResponseHeaders = FALSE) {
     return self::callCurl($method, $url, $data, $headers, $returnResponseHeaders);
diff --git a/src/LazyBuilders.php b/src/LazyBuilders.php
index 1e0abe7..de876ac 100644
--- a/src/LazyBuilders.php
+++ b/src/LazyBuilders.php
@@ -12,23 +12,23 @@ class LazyBuilders {
   /**
    * The renderer service
    *
-   * @var \Drupal\thron\THRONApiInterface
+   * @var THRONApiInterface
    */
   protected $api;
 
   /**
    * The renderer service
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Constructs a new CartLazyBuilders object.
    *
-   * @param \Drupal\thron\THRONApiInterface $thron_api
+   * @param THRONApiInterface $thron_api
    *   The renderer service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(THRONApiInterface $thron_api, RendererInterface $renderer) {
diff --git a/src/Plugin/EntityBrowser/Widget/THRONSearch.php b/src/Plugin/EntityBrowser/Widget/THRONSearch.php
index 2dc3be2..55759ed 100644
--- a/src/Plugin/EntityBrowser/Widget/THRONSearch.php
+++ b/src/Plugin/EntityBrowser/Widget/THRONSearch.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\thron\Plugin\EntityBrowser\Widget;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\media\MediaTypeInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -49,85 +53,85 @@ class THRONSearch extends THRONWidgetBase {
   const SUB_CATEGORY_INDENT = '&nbsp;&nbsp;';
 
   /**
-   * Account proxy.
-   *
-   * @var \Drupal\Core\Session\AccountProxyInterface
-   */
-  protected $accountProxy;
+		 * Account proxy.
+		 *
+		 * @var AccountProxyInterface
+		 */
+		protected $accountProxy;
 
   /**
-   * The url generator.
-   *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
-   */
-  protected $urlGenerator;
+		 * The url generator.
+		 *
+		 * @var UrlGeneratorInterface
+		 */
+		protected $urlGenerator;
 
   /**
-   * The media storage.
-   *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
-   */
-  protected $mediaStorage;
+		 * The media storage.
+		 *
+		 * @var EntityStorageInterface
+		 */
+		protected $mediaStorage;
 
   /**
-   * The cache service.
-   *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
-   */
-  protected $cache;
+		 * The cache service.
+		 *
+		 * @var CacheBackendInterface
+		 */
+		protected $cache;
 
   /**
-   * The time service.
-   *
-   * @var \Drupal\Component\Datetime\TimeInterface
-   */
-  protected $time;
+		 * The time service.
+		 *
+		 * @var TimeInterface
+		 */
+		protected $time;
 
   /**
-   * The module handler service.
-   *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
-   */
-  protected $moduleHandler;
+		 * The module handler service.
+		 *
+		 * @var ModuleHandlerInterface
+		 */
+		protected $moduleHandler;
 
   /**
-   * THRONSearch constructor.
-   *
-   * @param array $configuration
-   *   A configuration array containing information about the plugin instance.
-   * @param string $plugin_id
-   *   The plugin_id for the plugin instance.
-   * @param mixed $plugin_definition
-   *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
-   *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   *   The entity type manager service.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
-   *   The Widget Validation Manager service.
-   * @param \Drupal\thron\THRONApiInterface $thron_api
-   *   THRON API service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account_proxy
-   *   Account proxy.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
-   *   Url generator.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
-   *   Logger factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
-   *   The request stack.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   *   The factory for configuration objects.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
-   *   The cache service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
-   *   The time service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   *   The module handler service.
-   *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   */
-  public function __construct(
+		 * THRONSearch constructor.
+		 *
+		 * @param array $configuration
+		 *   A configuration array containing information about the plugin instance.
+		 * @param string $plugin_id
+		 *   The plugin_id for the plugin instance.
+		 * @param mixed $plugin_definition
+		 *   The plugin implementation definition.
+		 * @param EventDispatcherInterface $event_dispatcher
+		 *   Event dispatcher service.
+		 * @param EntityTypeManagerInterface $entity_type_manager
+		 *   The entity type manager service.
+		 * @param WidgetValidationManager $validation_manager
+		 *   The Widget Validation Manager service.
+		 * @param THRONApiInterface $thron_api
+		 *   THRON API service.
+		 * @param AccountProxyInterface $account_proxy
+		 *   Account proxy.
+		 * @param UrlGeneratorInterface $url_generator
+		 *   Url generator.
+		 * @param LoggerChannelFactoryInterface $logger_factory
+		 *   Logger factory.
+		 * @param RequestStack $request_stack
+		 *   The request stack.
+		 * @param ConfigFactoryInterface $config_factory
+		 *   The factory for configuration objects.
+		 * @param CacheBackendInterface $cache
+		 *   The cache service.
+		 * @param TimeInterface $time
+		 *   The time service.
+		 * @param ModuleHandlerInterface $module_handler
+		 *   The module handler service.
+		 *
+		 * @throws InvalidPluginDefinitionException
+		 * @throws PluginNotFoundException
+		 */
+		public function __construct(
     array $configuration,
     $plugin_id,
     $plugin_definition,
@@ -964,8 +968,8 @@ class THRONSearch extends THRONWidgetBase {
 
     $medias = [];
     $selected_ids = array_keys(array_filter($form_state->getValue('selection', [])));
-    /** @var \Drupal\media\MediaTypeInterface $type */
-    $type = $this->mediaTypeStorage->load($this->configuration['media_type']);
+    /** @var MediaTypeInterface $type */
+				$type = $this->mediaTypeStorage->load($this->configuration['media_type']);
     $plugin = $type->getSource();
     $source_field = $plugin->getConfiguration()['source_field'];
     foreach ($selected_ids as $thron_id) {
@@ -1005,21 +1009,21 @@ class THRONSearch extends THRONWidgetBase {
     $selected_entities = array_merge($selected_entities, $entities);
 
     $this->eventDispatcher->dispatch(
-      Events::SELECTED,
       new EntitySelectionEvent(
         $this->configuration['entity_browser_id'],
         $form_state->get(['entity_browser', 'instance_uuid']),
         $entities
-      ));
+      ),
+						Events::SELECTED);
   }
 
   /**
-   * Resets the form elements.
-   *
-   * @param $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   */
-  public function resetForm(&$form, FormStateInterface $form_state) {
+		 * Resets the form elements.
+		 *
+		 * @param $form
+		 * @param FormStateInterface $form_state
+		 */
+		public function resetForm(&$form, FormStateInterface $form_state) {
     $form_state->setValues([]);
     $form_state->setUserInput([]);
     $form_state->setRebuild();
diff --git a/src/Plugin/EntityBrowser/Widget/THRONWidgetBase.php b/src/Plugin/EntityBrowser/Widget/THRONWidgetBase.php
index 49cd0ef..e05f32c 100644
--- a/src/Plugin/EntityBrowser/Widget/THRONWidgetBase.php
+++ b/src/Plugin/EntityBrowser/Widget/THRONWidgetBase.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\thron\Plugin\EntityBrowser\Widget;
 
+use Drupal\Core\Logger\LoggerChannelFactory;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\media\MediaTypeInterface;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
 use Drupal\thron\THRONApiInterface;
@@ -28,35 +34,35 @@ abstract class THRONWidgetBase extends WidgetBase {
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $loggerFactory;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The configuration of Thron.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * THRON API service.
    *
-   * @var \Drupal\thron\THRONApiInterface
+   * @var THRONApiInterface
    */
   protected $THRONApi;
 
   /**
    * Media type storage
-   * 
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   *
+   * @var EntityStorageInterface
    */
   protected $mediaTypeStorage;
 
@@ -70,23 +76,23 @@ abstract class THRONWidgetBase extends WidgetBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\thron\THRONApiInterface $thron_api
+   * @param THRONApiInterface $thron_api
    *   The THRON Api interface.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(
     array $configuration,
@@ -161,7 +167,7 @@ abstract class THRONWidgetBase extends WidgetBase {
 
     $media_types = $this->mediaTypeStorage->loadMultiple();
     foreach ($media_types as $type) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       if ($type->getSource() instanceof ThronMediaSource) {
         $form['media_type']['#options'][$type->id()] = $type->label();
       }
@@ -243,7 +249,7 @@ abstract class THRONWidgetBase extends WidgetBase {
    *   Returns TRUE if media type is configured correctly.
    */
   protected function checkType() {
-    /** @var \Drupal\media\MediaTypeInterface $type */
+    /** @var MediaTypeInterface $type */
     $type = $this->mediaTypeStorage->load($this->configuration['media_type']);
 
     if (!$type) {
diff --git a/src/Plugin/Field/FieldFormatter/ThronEmbedFormatter.php b/src/Plugin/Field/FieldFormatter/ThronEmbedFormatter.php
index 0b98d5d..1ad9aab 100644
--- a/src/Plugin/Field/FieldFormatter/ThronEmbedFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/ThronEmbedFormatter.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\thron\Plugin\Field\FieldFormatter;
 
+use Drupal\media\Entity\Media;
+use Drupal\Core\Field\Plugin\Field\FieldType\StringItem;
+use Drupal\Core\Entity\Plugin\DataType\EntityReference;
+use Drupal\media\MediaSourceInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -47,7 +51,7 @@ class ThronEmbedFormatter extends ThronFormatterBase
   {
     $elements = parent::settingsForm($form, $form_state);
 
-    /** @var \Drupal\media\Entity\Media $entity */
+    /** @var Media $entity */
     $media = $form_state->get('entity');
     $source_plugin = $media->getSource();
     if ($source_plugin instanceof ThronMediaSource) {
@@ -412,16 +416,16 @@ class ThronEmbedFormatter extends ThronFormatterBase
     $field_type = $this->fieldDefinition->getType();
     $elements = [];
 
-    /** @var \Drupal\Core\Field\Plugin\Field\FieldType\StringItem $item */
+    /** @var StringItem $item */
     foreach ($items as $delta => $item) {
       if ($field_type == 'entity_reference') {
-        /** @var \Drupal\Core\Entity\Plugin\DataType\EntityReference $entity_reference */
+        /** @var EntityReference $entity_reference */
         $entity_reference = $item->get('entity');
-        /** @var \Drupal\media\Entity\Media $media */
+        /** @var Media $media */
         $media = $entity_reference->getValue();
 
         if (isset($media)) {
-          /** @var \Drupal\media\MediaSourceInterface $source_plugin */
+          /** @var MediaSourceInterface $source_plugin */
           $source_plugin = $media->getSource();
           if ($source_plugin instanceof ThronMediaSource) {
             $language = $this->THRON->getPreviewLanguage();
diff --git a/src/Plugin/Field/FieldFormatter/ThronFormatterBase.php b/src/Plugin/Field/FieldFormatter/ThronFormatterBase.php
index aeb5446..829584f 100644
--- a/src/Plugin/Field/FieldFormatter/ThronFormatterBase.php
+++ b/src/Plugin/Field/FieldFormatter/ThronFormatterBase.php
@@ -4,6 +4,9 @@
 namespace Drupal\thron\Plugin\Field\FieldFormatter;
 
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\media\MediaTypeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -21,49 +24,49 @@ abstract class ThronFormatterBase extends FormatterBase implements ContainerFact
   /**
    * The config for THRON
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The THRON API service.
    *
-   * @var \Drupal\thron\THRONApiInterface
+   * @var THRONApiInterface
    */
   protected $THRON;
 
   /**
    * Renderer object.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The private TempStore containing previously chosen settings.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $privateTempStore;
 
@@ -79,7 +82,7 @@ abstract class ThronFormatterBase extends FormatterBase implements ContainerFact
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -89,19 +92,19 @@ abstract class ThronFormatterBase extends FormatterBase implements ContainerFact
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Render\RendererInterface $renderer_object
+   * @param RendererInterface $renderer_object
    *   Renderer object.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\thron\THRONApiInterface $thron_api
+   * @param THRONApiInterface $thron_api
    *   The THRON API service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $private_tempStore_factory
+   * @param PrivateTempStoreFactory $private_tempStore_factory
    *   The Private TempStore Factory service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings,
@@ -158,7 +161,7 @@ abstract class ThronFormatterBase extends FormatterBase implements ContainerFact
           }
           elseif (is_array($handler_settings['target_bundles'])) {
             foreach ($handler_settings['target_bundles'] as $bundle) {
-              /** @var \Drupal\media\MediaTypeInterface $type */
+              /** @var MediaTypeInterface $type */
               $type = \Drupal::entityTypeManager()
                 ->getStorage('media_type')
                 ->load($bundle);
diff --git a/src/Plugin/Field/FieldFormatter/ThronHTML5Formatter.php b/src/Plugin/Field/FieldFormatter/ThronHTML5Formatter.php
index 2acd9d7..07207a8 100644
--- a/src/Plugin/Field/FieldFormatter/ThronHTML5Formatter.php
+++ b/src/Plugin/Field/FieldFormatter/ThronHTML5Formatter.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\thron\Plugin\Field\FieldFormatter;
 
+use Drupal\media\Entity\Media;
+use Drupal\media\MediaSourceInterface;
+use Drupal\Core\Field\Plugin\Field\FieldType\StringItem;
+use Drupal\Core\Entity\Plugin\DataType\EntityReference;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -48,9 +52,9 @@ class ThronHTML5Formatter extends ThronFormatterBase
   {
     $elements = parent::settingsForm($form, $form_state);
 
-    /** @var \Drupal\media\Entity\Media $entity */
+    /** @var Media $entity */
     $media = $form_state->get('entity');
-    /** @var \Drupal\media\MediaSourceInterface $source_plugin */
+    /** @var MediaSourceInterface $source_plugin */
     $source_plugin = $media->getSource();
     if ($source_plugin instanceof ThronMediaSource) {
       // Retrieve THRON content Metadata.
@@ -421,16 +425,16 @@ class ThronHTML5Formatter extends ThronFormatterBase
   {
     $field_type = $this->fieldDefinition->getType();
     $elements = [];
-    /** @var \Drupal\Core\Field\Plugin\Field\FieldType\StringItem $item */
+    /** @var StringItem $item */
     foreach ($items as $delta => $item) {
       if ($field_type == 'entity_reference') {
-        /** @var \Drupal\Core\Entity\Plugin\DataType\EntityReference $entity_reference */
+        /** @var EntityReference $entity_reference */
         $entity_reference = $item->get('entity');
-        /** @var \Drupal\media\Entity\Media $media */
+        /** @var Media $media */
         $media = $entity_reference->getValue();
 
         if (isset($media)) {
-          /** @var \Drupal\media\MediaSourceInterface $source_plugin */
+          /** @var MediaSourceInterface $source_plugin */
           $source_plugin = $media->getSource();
           if ($source_plugin instanceof ThronMediaSource) {
             $language = $this->THRON->getPreviewLanguage();
diff --git a/src/Plugin/media/Source/ThronMediaSource.php b/src/Plugin/media/Source/ThronMediaSource.php
index 3639784..9216077 100644
--- a/src/Plugin/media/Source/ThronMediaSource.php
+++ b/src/Plugin/media/Source/ThronMediaSource.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\thron\Plugin\media\Source;
 
+use Drupal\Core\Logger\LoggerChannel;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -33,18 +35,18 @@ use Drupal\thron\Integration\Thronintegration_Utils;
 class ThronMediaSource extends MediaSourceBase {
 
   /**
-   * Account proxy.
-   *
-   * @var \Drupal\Core\Session\AccountProxyInterface
-   */
-  protected $accountProxy;
+		 * Account proxy.
+		 *
+		 * @var AccountProxyInterface
+		 */
+		protected $accountProxy;
 
   /**
-   * The url generator.
-   *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
-   */
-  protected $urlGenerator;
+		 * The url generator.
+		 *
+		 * @var UrlGeneratorInterface
+		 */
+		protected $urlGenerator;
 
   /**
    * Statically cached API response for a given asset (for content/search invocations).
@@ -61,21 +63,21 @@ class ThronMediaSource extends MediaSourceBase {
   protected $apiResponseContentDetail;
 
   /**
-   * The logger channel.
-   *
-   * @var \Drupal\Core\Logger\LoggerChannel
-   */
-  protected $logger;
+		 * The logger channel.
+		 *
+		 * @var LoggerChannel
+		 */
+		protected $logger;
 
   /**
-   * @var \Drupal\thron\THRONApiInterface
-   */
-  protected $THRONApi;
+		 * @var THRONApiInterface
+		 */
+		protected $THRONApi;
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
-   */
-  protected $config;
+		 * @var ImmutableConfig
+		 */
+		protected $config;
 
   /**
    * Flag to say if this Source is to treat as image set.
@@ -85,31 +87,31 @@ class ThronMediaSource extends MediaSourceBase {
   protected $isImageSource;
 
   /**
-   * Constructs a new class instance.
-   *
-   * @param array $configuration
-   *   A configuration array containing information about the plugin instance.
-   * @param string $plugin_id
-   *   The plugin_id for the plugin instance.
-   * @param mixed $plugin_definition
-   *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   *   Entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
-   *   Entity field manager service.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
-   *   The field type plugin manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   *   The config factory service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account_proxy
-   *   Account proxy.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
-   *   The url generator service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
-   *   The logger factory service.
-   * @param \Drupal\thron\THRONApiInterface $thron_api
-   */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $config_factory, AccountProxyInterface $account_proxy, UrlGeneratorInterface $url_generator, LoggerChannelFactoryInterface $logger_factory, THRONApiInterface $thron_api) {
+		 * Constructs a new class instance.
+		 *
+		 * @param array $configuration
+		 *   A configuration array containing information about the plugin instance.
+		 * @param string $plugin_id
+		 *   The plugin_id for the plugin instance.
+		 * @param mixed $plugin_definition
+		 *   The plugin implementation definition.
+		 * @param EntityTypeManagerInterface $entity_type_manager
+		 *   Entity type manager service.
+		 * @param EntityFieldManagerInterface $entity_field_manager
+		 *   Entity field manager service.
+		 * @param FieldTypePluginManagerInterface $field_type_manager
+		 *   The field type plugin manager service.
+		 * @param ConfigFactoryInterface $config_factory
+		 *   The config factory service.
+		 * @param AccountProxyInterface $account_proxy
+		 *   Account proxy.
+		 * @param UrlGeneratorInterface $url_generator
+		 *   The url generator service.
+		 * @param LoggerChannelFactoryInterface $logger_factory
+		 *   The logger factory service.
+		 * @param THRONApiInterface $thron_api
+		 */
+		public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $config_factory, AccountProxyInterface $account_proxy, UrlGeneratorInterface $url_generator, LoggerChannelFactoryInterface $logger_factory, THRONApiInterface $thron_api) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_type_manager, $entity_field_manager, $field_type_manager, $config_factory);
 
     $this->accountProxy = $account_proxy;
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index db3eb28..5aa0f9d 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -15,7 +15,7 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * Alters existing routes for a specific collection.
    *
-   * @param \Symfony\Component\Routing\RouteCollection $collection
+   * @param RouteCollection $collection
    *   The route collection for adding routes.
    */
   protected function alterRoutes(RouteCollection $collection) {
diff --git a/src/THRONApi.php b/src/THRONApi.php
index 57dee25..0f2555e 100644
--- a/src/THRONApi.php
+++ b/src/THRONApi.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\thron;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -45,69 +49,69 @@ class THRONApi implements THRONApiInterface {
   const THRON_LAST_UPDATE_STATE_KEY = 'THRON_last_update';
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
-   */
-  protected $config;
+		 * @var ImmutableConfig
+		 */
+		protected $config;
 
   /**
-   * @var \Drupal\Core\Entity\EntityStorageInterface
-   */
-  protected $mediaStorage;
+		 * @var EntityStorageInterface
+		 */
+		protected $mediaStorage;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
-   */
-  protected $logger;
+		 * @var LoggerChannelInterface
+		 */
+		protected $logger;
 
   /**
-   * @var \Drupal\Core\State\StateInterface
-   */
-  protected $state;
+		 * @var StateInterface
+		 */
+		protected $state;
 
   /**
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
-   */
-  protected $dateFormatter;
+		 * @var DateFormatterInterface
+		 */
+		protected $dateFormatter;
 
   /**
-   * @var \Drupal\Core\Cache\CacheBackendInterface
-   */
-  protected $cache;
+		 * @var CacheBackendInterface
+		 */
+		protected $cache;
 
   /**
-   * @var \Drupal\Core\Language\LanguageManagerInterface
-   */
-  protected $languageManager;
+		 * @var LanguageManagerInterface
+		 */
+		protected $languageManager;
 
   /**
-   * @var \Drupal\Component\Datetime\TimeInterface
-   */
-  protected $time;
+		 * @var TimeInterface
+		 */
+		protected $time;
 
   /**
-   * The current session's user account Interface.
-   *
-   * @var \Drupal\Core\Session\AccountInterface
-   */
-  protected $currentUser;
+		 * The current session's user account Interface.
+		 *
+		 * @var AccountInterface
+		 */
+		protected $currentUser;
 
   /**
-   * THRONApi constructor.
-   *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
-   * @param \Drupal\Core\State\StateInterface $state
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
-   * @param \Drupal\Component\Datetime\TimeInterface $time
-   * @param \Drupal\Core\Session\AccountInterface
-   *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   */
-  public function __construct(ConfigFactoryInterface $config_factory,
+		 * THRONApi constructor.
+		 *
+		 * @param ConfigFactoryInterface $config_factory
+		 * @param EntityTypeManagerInterface $entity_type_manager
+		 * @param LoggerChannelInterface $logger
+		 * @param StateInterface $state
+		 * @param DateFormatterInterface $dateFormatter
+		 * @param LanguageManagerInterface $languageManager
+		 * @param CacheBackendInterface $cache
+		 * @param TimeInterface $time
+		 * @param \Drupal\Core\Session\AccountInterface
+		 *
+		 * @throws InvalidPluginDefinitionException
+		 * @throws PluginNotFoundException
+		 */
+		public function __construct(ConfigFactoryInterface $config_factory,
                               EntityTypeManagerInterface $entity_type_manager,
                               LoggerChannelInterface $logger,
                               StateInterface $state,
@@ -129,16 +133,16 @@ class THRONApi implements THRONApiInterface {
   }
 
   /**
-   * @param array $configArg
-   *
-   * @return array
-   *
-   * @throws \Drupal\thron\Exception\InvalidCredentialException
-   * @throws \Drupal\thron\Exception\NoCredentialException
-   * @throws \Drupal\thron\Exception\NoPkeyException
-   * @throws \Drupal\thron\Exception\UnableToConnectException
-   */
-  public function loginApp($configArg = NULL) {
+		 * @param array $configArg
+		 *
+		 * @return array
+		 *
+		 * @throws InvalidCredentialException
+		 * @throws NoCredentialException
+		 * @throws NoPkeyException
+		 * @throws UnableToConnectException
+		 */
+		public function loginApp($configArg = NULL) {
     if (!$configArg) {
       // Retrieve from config.
       if (!$this->config->get('client_id') || !$this->config->get('app_id') || !$this->config->get('app_key')) {
@@ -245,14 +249,14 @@ class THRONApi implements THRONApiInterface {
   }
 
   /**
-   * @param string $method_name
-   * @param mixed $default_return
-   * @param \Drupal\thron\Exception\THRONException $exception
-   * @param array $params
-   *
-   * @return mixed
-   */
-  private function refreshAndRecall($method_name, $default_return, $exception, $params = []) {
+		 * @param string $method_name
+		 * @param mixed $default_return
+		 * @param THRONException $exception
+		 * @param array $params
+		 *
+		 * @return mixed
+		 */
+		private function refreshAndRecall($method_name, $default_return, $exception, $params = []) {
     // Avoid recursion.
     $trace = $exception->getTrace();
     if ($trace[3]['function'] == 'refreshAndRecall') {
diff --git a/src/THRONApiInterface.php b/src/THRONApiInterface.php
index 9894f2e..071d14b 100644
--- a/src/THRONApiInterface.php
+++ b/src/THRONApiInterface.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\thron;
 
+use Drupal\thron\Exception\InvalidCredentialException;
+use Drupal\thron\Exception\NoCredentialException;
+use Drupal\thron\Exception\NoPkeyException;
+use Drupal\thron\Exception\UnableToConnectException;
 /**
  * Provides Drupal 8 THRON API.
  *
@@ -12,10 +16,10 @@ interface THRONApiInterface {
   /**
    * @param array $configArgs
    *
-   * @throws \Drupal\thron\Exception\InvalidCredentialException
-   * @throws \Drupal\thron\Exception\NoCredentialException
-   * @throws \Drupal\thron\Exception\NoPkeyException
-   * @throws \Drupal\thron\Exception\UnableToConnectException
+   * @throws InvalidCredentialException
+   * @throws NoCredentialException
+   * @throws NoPkeyException
+   * @throws UnableToConnectException
    */
   public function loginApp($configArgs = NULL);
 
diff --git a/thron.install b/thron.install
index eb11c6f..463bd05 100644
--- a/thron.install
+++ b/thron.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\file\Entity\File;
 use Drupal\thron\THRONApi;
 
@@ -24,7 +25,7 @@ function thron_uninstall() {
     $thron_medias = $media_storage->loadMultiple($thron_medias);
     try {
       $media_storage->delete($thron_medias);
-    } catch (\Drupal\Core\Entity\EntityStorageException $e) {
+    } catch (EntityStorageException $e) {
       \Drupal::logger('thron')->error($e->getMessage());
     }
   }
diff --git a/thron.module b/thron.module
index 384330e..56b1fe7 100644
--- a/thron.module
+++ b/thron.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\thron\THRONApiInterface;
 /**
  * @file
  * Provides THRON integration.
@@ -29,7 +30,7 @@ define('THRON_LOGIN_CACHE_MAX_AGE', 3600);
  * Implements hook_help().
  *
  * @param $route_name
- * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+ * @param RouteMatchInterface $route_match
  *
  * @return string
  */
@@ -106,9 +107,9 @@ function thron_cron() {
 /**
  * Implements hook_views_post_render().
  *
- * @param \Drupal\views\ViewExecutable $view
+ * @param ViewExecutable $view
  * @param $output
- * @param \Drupal\views\Plugin\views\cache\CachePluginBase $cache
+ * @param CachePluginBase $cache
  */
 function thron_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
   if (in_array($view->id(), ['thron_media_browser', 'media_library'])) {
@@ -137,7 +138,7 @@ function thron_preprocess_thron_select_sortable_widget(&$variables) {
  * Implements hook_form_alter().
  *
  * @param $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  * @param $form_id
  */
 function thron_form_alter(&$form, FormStateInterface $form_state, $form_id) {
@@ -159,8 +160,8 @@ function thron_form_alter(&$form, FormStateInterface $form_state, $form_id) {
       case 'entity_embed_dialog':
         if ($form_state->get('step') == 'embed') {
           // Modify the link to the entity.
-          /** @var \Drupal\thron\THRONApiInterface $thron_api */
-          $thron_api = \Drupal::service('thron_api');
+										/** @var THRONApiInterface $thron_api */
+										$thron_api = \Drupal::service('thron_api');
           $metadata = $form_state->get('metadata');
           $extStr = $metadata["contentType"];
 
