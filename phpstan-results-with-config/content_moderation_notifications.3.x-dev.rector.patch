diff --git a/content_moderation_notifications.api.php b/content_moderation_notifications.api.php
index 218f1a2..f4cc905 100644
--- a/content_moderation_notifications.api.php
+++ b/content_moderation_notifications.api.php
@@ -13,7 +13,7 @@ use Drupal\Core\Entity\EntityInterface;
  * Called by
  * Drupal\content_moderation_notifications\Notification::sendNotification().
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The moderated entity.
  * @param array $data
  *   The mail information.
diff --git a/content_moderation_notifications.module b/content_moderation_notifications.module
index c1f9369..ac9ee72 100644
--- a/content_moderation_notifications.module
+++ b/content_moderation_notifications.module
@@ -67,7 +67,7 @@ function content_moderation_notifications_mail($key, &$message, $params) {
 /**
  * Attach the last untouched revision to the entity.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity object.
  */
 function _content_moderation_notifications_ensure_revision(EntityInterface $entity) {
diff --git a/src/Controller/ContentModerationNotificationsListBuilder.php b/src/Controller/ContentModerationNotificationsListBuilder.php
index 2e1c653..efbbfbc 100644
--- a/src/Controller/ContentModerationNotificationsListBuilder.php
+++ b/src/Controller/ContentModerationNotificationsListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_moderation_notifications\Controller;
 
+use Drupal\workflows\WorkflowInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -50,7 +51,7 @@ class ContentModerationNotificationsListBuilder extends ConfigEntityListBuilder
   /**
    * Builds a row for an entity in the entity listing.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to build the row.
    *
    * @return array
@@ -61,7 +62,7 @@ class ContentModerationNotificationsListBuilder extends ConfigEntityListBuilder
   public function buildRow(EntityInterface $entity) {
 
     // Load the workflow @todo change to dependency injection.
-    /** @var \Drupal\workflows\WorkflowInterface $workflow */
+    /** @var WorkflowInterface $workflow */
     $workflow = \Drupal::entityTypeManager()->getStorage('workflow')->load($entity->workflow);
 
     // Load the transitions in this workflow.
diff --git a/src/Form/ContentModerationNotificationsAddForm.php b/src/Form/ContentModerationNotificationsAddForm.php
index 9fe7b87..584e1b3 100644
--- a/src/Form/ContentModerationNotificationsAddForm.php
+++ b/src/Form/ContentModerationNotificationsAddForm.php
@@ -22,7 +22,7 @@ class ContentModerationNotificationsAddForm extends ContentModerationNotificatio
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
diff --git a/src/Form/ContentModerationNotificationsDeleteForm.php b/src/Form/ContentModerationNotificationsDeleteForm.php
index b5d14f7..b2608ac 100644
--- a/src/Form/ContentModerationNotificationsDeleteForm.php
+++ b/src/Form/ContentModerationNotificationsDeleteForm.php
@@ -58,7 +58,7 @@ class ContentModerationNotificationsDeleteForm extends EntityConfirmFormBase {
    * delete forms, this is typically the route that points at the list
    * controller.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to go to if the user cancels the deletion.
    */
   public function getCancelUrl() {
@@ -73,7 +73,7 @@ class ContentModerationNotificationsDeleteForm extends EntityConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/ContentModerationNotificationsEditForm.php b/src/Form/ContentModerationNotificationsEditForm.php
index aa13ca2..3131d1e 100644
--- a/src/Form/ContentModerationNotificationsEditForm.php
+++ b/src/Form/ContentModerationNotificationsEditForm.php
@@ -22,7 +22,7 @@ class ContentModerationNotificationsEditForm extends ContentModerationNotificati
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
diff --git a/src/Form/ContentModerationNotificationsFormBase.php b/src/Form/ContentModerationNotificationsFormBase.php
index 47fb799..456e78b 100644
--- a/src/Form/ContentModerationNotificationsFormBase.php
+++ b/src/Form/ContentModerationNotificationsFormBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\content_moderation_notifications\Form;
 
+use Drupal\workflows\WorkflowInterface;
+use Drupal\content_moderation_notifications\ContentModerationNotificationInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -26,7 +28,7 @@ class ContentModerationNotificationsFormBase extends EntityForm {
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Formstate.
    *
    * @return mixed
@@ -43,7 +45,7 @@ class ContentModerationNotificationsFormBase extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
@@ -52,7 +54,7 @@ class ContentModerationNotificationsFormBase extends EntityForm {
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     // Retrieve a list of all possible workflows.
-    /** @var \Drupal\workflows\WorkflowInterface[] $workflows */
+    /** @var WorkflowInterface[] $workflows */
     $workflows = $this->entityTypeManager->getStorage('workflow')->loadMultiple();
 
     // Return early if there are no available workflows.
@@ -72,7 +74,7 @@ class ContentModerationNotificationsFormBase extends EntityForm {
     // variables. If this is a new entity, it will be a new object with the
     // class of our entity. Drupal knows which class to call from the
     // annotation on our ContentModerationNotification class.
-    /** @var \Drupal\content_moderation_notifications\ContentModerationNotificationInterface $content_moderation_notification */
+    /** @var ContentModerationNotificationInterface $content_moderation_notification */
     $content_moderation_notification = $this->entity;
 
     // Build the options array of workflows.
@@ -224,7 +226,7 @@ class ContentModerationNotificationsFormBase extends EntityForm {
    *   The entity ID.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
@@ -249,7 +251,7 @@ class ContentModerationNotificationsFormBase extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
@@ -275,7 +277,7 @@ class ContentModerationNotificationsFormBase extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function save(array $form, FormStateInterface $form_state) {
diff --git a/src/Form/DisableForm.php b/src/Form/DisableForm.php
index a29c1af..72512f4 100644
--- a/src/Form/DisableForm.php
+++ b/src/Form/DisableForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_moderation_notifications\Form;
 
+use Drupal\content_moderation_notifications\ContentModerationNotificationInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -13,7 +14,7 @@ class DisableForm extends EntityConfirmFormBase {
   /**
    * The content moderation notification entity to enable or disable.
    *
-   * @var \Drupal\content_moderation_notifications\ContentModerationNotificationInterface
+   * @var ContentModerationNotificationInterface
    */
   protected $notification;
 
diff --git a/src/Notification.php b/src/Notification.php
index 257f2a7..97d3990 100644
--- a/src/Notification.php
+++ b/src/Notification.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\content_moderation_notifications;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -19,35 +21,35 @@ class Notification implements NotificationInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The notification information service.
    *
-   * @var \Drupal\content_moderation_notifications\NotificationInformationInterface
+   * @var NotificationInformationInterface
    */
   protected $notificationInformation;
 
@@ -61,15 +63,15 @@ class Notification implements NotificationInterface {
   /**
    * Creates a new ModerationInformation instance.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\content_moderation_notifications\NotificationInformationInterface $notification_information
+   * @param NotificationInformationInterface $notification_information
    *   The notification information service.
    * @param \Drupal\token\TokenEntityMapperInterface $token_entity_mappper
    *   The token entity mapper service.
@@ -98,7 +100,7 @@ class Notification implements NotificationInterface {
    */
   public function sendNotification(EntityInterface $entity, array $notifications) {
 
-    /** @var \Drupal\content_moderation_notifications\ContentModerationNotificationInterface $notification */
+    /** @var ContentModerationNotificationInterface $notification */
     foreach ($notifications as $notification) {
       $data['langcode'] = $this->currentUser->getPreferredLangcode();
       $data['notification'] = $notification;
@@ -153,18 +155,18 @@ class Notification implements NotificationInterface {
 
       // Get Roles.
       foreach ($notification->getRoleIds() as $role) {
-        /** @var \Drupal\Core\Entity\EntityStorageInterface $user_storage */
+        /** @var EntityStorageInterface $user_storage */
         $user_storage = $this->entityTypeManager->getStorage('user');
         if ($role === RoleInterface::AUTHENTICATED_ID) {
           $uids = \Drupal::entityQuery('user')
             ->condition('status', 1)
             ->accessCheck(FALSE)
             ->execute();
-          /** @var \Drupal\user\UserInterface[] $role_users */
+          /** @var UserInterface[] $role_users */
           $role_users = $user_storage->loadMultiple(array_filter($uids));
         }
         else {
-          /** @var \Drupal\user\UserInterface[] $role_users */
+          /** @var UserInterface[] $role_users */
           $role_users = $user_storage->loadByProperties(['roles' => $role]);
         }
         foreach ($role_users as $role_user) {
diff --git a/src/NotificationInformation.php b/src/NotificationInformation.php
index 050a6e1..2d71abe 100644
--- a/src/NotificationInformation.php
+++ b/src/NotificationInformation.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_moderation_notifications;
 
+use Drupal\content_moderation\ModerationInformation;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -16,23 +17,23 @@ class NotificationInformation implements NotificationInformationInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * General service for moderation-related questions about Entity API.
    *
-   * @var \Drupal\content_moderation\ModerationInformation
+   * @var ModerationInformation
    */
   protected $moderationInformation;
 
   /**
    * Creates a new NotificationInformation instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderation_information
+   * @param ModerationInformationInterface $moderation_information
    *   The bundle information service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModerationInformationInterface $moderation_information) {
diff --git a/src/NotificationInformationInterface.php b/src/NotificationInformationInterface.php
index 67c3587..845f571 100644
--- a/src/NotificationInformationInterface.php
+++ b/src/NotificationInformationInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\content_moderation_notifications;
 
+use Drupal\workflows\WorkflowInterface;
+use Drupal\workflows\TransitionInterface;
+use Drupal\workflows\StateInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -13,7 +16,7 @@ interface NotificationInformationInterface {
   /**
    * Determines if an entity is moderated.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity we may be moderating.
    *
    * @return bool
@@ -24,10 +27,10 @@ interface NotificationInformationInterface {
   /**
    * Checks for the workflow object of the moderated entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity we may be moderating.
    *
-   * @return \Drupal\workflows\WorkflowInterface|bool
+   * @return WorkflowInterface|bool
    *   The workflow object if the entity is moderated, FALSE otherwise.
    */
   public function getWorkflow(ContentEntityInterface $entity);
@@ -35,10 +38,10 @@ interface NotificationInformationInterface {
   /**
    * Checks for the current transition of the moderated entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity we may be moderating.
    *
-   * @return \Drupal\workflows\TransitionInterface|bool
+   * @return TransitionInterface|bool
    *   The transition object if the entity is moderated FALSE otherwise.
    */
   public function getTransition(ContentEntityInterface $entity);
@@ -46,10 +49,10 @@ interface NotificationInformationInterface {
   /**
    * Gets the from/previous state of the entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The moderated entity.
    *
-   * @return \Drupal\workflows\StateInterface
+   * @return StateInterface
    *   The current state of the entity.
    */
   public function getPreviousState(ContentEntityInterface $entity);
@@ -57,10 +60,10 @@ interface NotificationInformationInterface {
   /**
    * Gets the list of notification based on the current transition.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity we may be moderating.
    *
-   * @return \Drupal\content_moderation_notifications\ContentModerationNotificationInterface[]
+   * @return ContentModerationNotificationInterface[]
    *   An array containing the notifications list.
    */
   public function getNotifications(EntityInterface $entity);
@@ -73,7 +76,7 @@ interface NotificationInformationInterface {
    * @param int $entity_id
    *   The entity ID.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   The latest entity revision or NULL, if the entity type / entity doesn't
    *   exist.
    */
diff --git a/src/NotificationInterface.php b/src/NotificationInterface.php
index 137892d..4c6a434 100644
--- a/src/NotificationInterface.php
+++ b/src/NotificationInterface.php
@@ -12,7 +12,7 @@ interface NotificationInterface {
   /**
    * Processes a given entity in transition.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being transitioned from one state to another.
    */
   public function processEntity(EntityInterface $entity);
@@ -20,9 +20,9 @@ interface NotificationInterface {
   /**
    * Send notifications for a given entity and set of notifications.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity we may be moderating.
-   * @param \Drupal\content_moderation_notifications\ContentModerationNotificationInterface[] $notifications
+   * @param ContentModerationNotificationInterface[] $notifications
    *   List of content moderation notification entities.
    *
    * @return bool
diff --git a/src/Tokens.php b/src/Tokens.php
index 68da52b..c5fc791 100644
--- a/src/Tokens.php
+++ b/src/Tokens.php
@@ -18,14 +18,14 @@ class Tokens implements ContainerInjectionInterface {
   /**
    * The notification information service.
    *
-   * @var \Drupal\content_moderation_notifications\NotificationInformationInterface
+   * @var NotificationInformationInterface
    */
   protected $notificationInformation;
 
   /**
    * Constructs the token generation object.
    *
-   * @param \Drupal\content_moderation_notifications\NotificationInformationInterface $notification_information
+   * @param NotificationInformationInterface $notification_information
    *   The notification information service.
    */
   public function __construct(NotificationInformationInterface $notification_information) {
@@ -92,7 +92,7 @@ class Tokens implements ContainerInjectionInterface {
    * @param array $options
    *   An associative array of options for token replacement; see
    *   \Drupal\Core\Utility\Token::replace() for possible values.
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   Bubbleable metadata.
    *
    * @return array
diff --git a/tests/src/Functional/Form/CrudFormTest.php b/tests/src/Functional/Form/CrudFormTest.php
index 69cb3f8..f663039 100644
--- a/tests/src/Functional/Form/CrudFormTest.php
+++ b/tests/src/Functional/Form/CrudFormTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\content_moderation_notifications\Functional\Form;
 
+use Drupal\user\UserInterface;
+use Drupal\content_moderation_notifications\ContentModerationNotificationInterface;
 use Drupal\content_moderation_notifications\Entity\ContentModerationNotification;
 use Drupal\Tests\content_moderation_notifications\Kernel\ContentModerationNotificationTestTrait;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
@@ -26,7 +28,7 @@ class CrudFormTest extends BrowserTestBase {
   /**
    * An admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
@@ -85,7 +87,7 @@ class CrudFormTest extends BrowserTestBase {
     ];
     $this->submitForm($edit, t('Create Notification'));
 
-    /** @var \Drupal\content_moderation_notifications\ContentModerationNotificationInterface $notification */
+    /** @var ContentModerationNotificationInterface $notification */
     $notification = ContentModerationNotification::load($edit['id']);
     $this->assertSession()
       ->responseContains(t('Notification <a href=":url">%label</a> has been added.',
@@ -129,7 +131,7 @@ class CrudFormTest extends BrowserTestBase {
           ':url' => $notification->toUrl('edit-form')->toString(),
         ]
       ));
-    /** @var \Drupal\content_moderation_notifications\ContentModerationNotificationInterface $notification */
+    /** @var ContentModerationNotificationInterface $notification */
     $notification = ContentModerationNotification::load($notification->id());
     $this->assertEquals($edit['subject'], $notification->getSubject());
     $this->assertEquals($edit['body[value]'], $notification->getMessage());
@@ -139,7 +141,7 @@ class CrudFormTest extends BrowserTestBase {
     // Test the disable form.
     $this->drupalGet($notification->toUrl('disable-form'));
     $this->submitForm([], t('Confirm'));
-    /** @var \Drupal\content_moderation_notifications\ContentModerationNotificationInterface $notification */
+    /** @var ContentModerationNotificationInterface $notification */
     $notification = ContentModerationNotification::load($notification->id());
     $this->assertFalse($notification->status());
 
@@ -150,7 +152,7 @@ class CrudFormTest extends BrowserTestBase {
     // Test the enable form.
     $this->drupalGet($notification->toUrl('enable-form'));
     $this->submitForm([], t('Confirm'));
-    /** @var \Drupal\content_moderation_notifications\ContentModerationNotificationInterface $notification */
+    /** @var ContentModerationNotificationInterface $notification */
     $notification = ContentModerationNotification::load($notification->id());
     $this->assertTrue($notification->status());
 
diff --git a/tests/src/Kernel/ContentModerationNotificationCreateTrait.php b/tests/src/Kernel/ContentModerationNotificationCreateTrait.php
index 86b3afe..0e95c38 100644
--- a/tests/src/Kernel/ContentModerationNotificationCreateTrait.php
+++ b/tests/src/Kernel/ContentModerationNotificationCreateTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\content_moderation_notifications\Kernel;
 
+use Drupal\content_moderation_notifications\ContentModerationNotificationInterface;
 use Drupal\content_moderation_notifications\Entity\ContentModerationNotification;
 
 /**
@@ -15,7 +16,7 @@ trait ContentModerationNotificationCreateTrait {
    * @param array $values
    *   An array of values. Defaults are provided for any items not passed in.
    *
-   * @return \Drupal\content_moderation_notifications\ContentModerationNotificationInterface
+   * @return ContentModerationNotificationInterface
    *   The saved entity.
    */
   protected function createNotification(array $values = []) {
diff --git a/tests/src/Kernel/ContentModerationNotificationTestTrait.php b/tests/src/Kernel/ContentModerationNotificationTestTrait.php
index de41e13..825f3dc 100644
--- a/tests/src/Kernel/ContentModerationNotificationTestTrait.php
+++ b/tests/src/Kernel/ContentModerationNotificationTestTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\content_moderation_notifications\Kernel;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Tests\content_moderation\Traits\ContentModerationTestTrait;
 use Drupal\workflows\Entity\Workflow;
 
@@ -20,7 +21,7 @@ trait ContentModerationNotificationTestTrait {
    * @param string $bundle
    *   The bundle ID.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Drupal\workflows\Entity\Workflow
+   * @return EntityInterface|Workflow
    *   The 'editorial' workflow.
    */
   protected function enableModeration($entity_type = 'entity_test_rev', $bundle = 'entity_test_rev') {
diff --git a/tests/src/Kernel/TokenNotificationsTest.php b/tests/src/Kernel/TokenNotificationsTest.php
index efe92de..b7c4a6b 100644
--- a/tests/src/Kernel/TokenNotificationsTest.php
+++ b/tests/src/Kernel/TokenNotificationsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\content_moderation_notifications\Kernel;
 
+use Drupal\workflows\WorkflowInterface;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -43,7 +44,7 @@ class TokenNotificationsTest extends NotificationsTest {
     $this->config('system.site')->set('mail', 'admin@example.com')->save();
 
     $this->enableModeration('node', 'article');
-    /** @var \Drupal\workflows\WorkflowInterface $workflow */
+    /** @var WorkflowInterface $workflow */
     $workflow = Workflow::load('editorial');
     $workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'article');
     $workflow->save();
diff --git a/tests/src/Unit/Entity/ContentModerationNotificationTest.php b/tests/src/Unit/Entity/ContentModerationNotificationTest.php
index 203ba14..f4393ed 100644
--- a/tests/src/Unit/Entity/ContentModerationNotificationTest.php
+++ b/tests/src/Unit/Entity/ContentModerationNotificationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\content_moderation_notifications\Unit\Entity;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\content_moderation_notifications\Entity\ContentModerationNotification;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -19,10 +20,11 @@ use Drupal\Tests\UnitTestCase;
  */
 class ContentModerationNotificationTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Test fixture.
    *
-   * @var \Drupal\content_moderation_notifications\Entity\ContentModerationNotification
+   * @var ContentModerationNotification
    */
   protected $notification;
 
