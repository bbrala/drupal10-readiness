modules/contrib/openlayers6/openlayers6.install
modules/contrib/openlayers6/openlayers6.module
modules/contrib/openlayers6/src/Controller/OpenlayerController.php
modules/contrib/openlayers6/src/Plugin/Block/OpenlayersBlock.php
modules/contrib/openlayers6/src/Plugin/Field/FieldFormatter/LatitudeFormatter.php
modules/contrib/openlayers6/src/Plugin/Field/FieldFormatter/LongitudeFormatter.php
modules/contrib/openlayers6/src/Plugin/Field/FieldFormatter/OpenlayerFormatter.php
modules/contrib/openlayers6/tests/src/Functional/FieldRenderTest.php
modules/contrib/openlayers6/tests/src/Functional/Openlayers6TestTrait.php
modules/contrib/openlayers6/tests/src/Functional/StoreLocatorTest.php

6 files with changes
====================

1) modules/contrib/openlayers6/tests/src/Functional/StoreLocatorTest.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupEnv();
     $this->createViewForStoreLocator();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/openlayers6/tests/src/Functional/Openlayers6TestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\openlayers6\Functional;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\user\Entity\User;
+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ResponseTextException;
+use Drupal\node\Entity\Node;
+use Drupal\Core\TypedData\Exception\ReadOnlyException;
+use Drupal\views\ViewExecutable;
 use Drupal\Core\Config\FileStorage;
 use Drupal\Core\Config\InstallStorage;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * A field storage with cardinality 1 to use in this test class.
    *
-   * @var \Drupal\field\Entity\FieldStorageConfig
+   * @var FieldStorageConfig
    */
   protected $fieldStorage;

@@ @@
   /**
    * A Field to use in this test class.
    *
-   * @var \Drupal\field\Entity\FieldConfig
+   * @var FieldConfig
    */
   protected $field;

@@ @@
   /**
    * Setups env.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function setupEnv() {
     $this->createEntityWithFieldLocation();
@@ @@
   /**
    * Creates admin user and login.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   The created user.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function createAdminUserAndLogin() {
     $user = $this->drupalCreateUser([
@@ @@
   /**
    * Setups render field location.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ElementNotFoundException
+   * @throws ResponseTextException
+   * @throws EntityStorageException
    */
   public function setUpRenderFieldLocation() {
     $this->createAdminUserAndLogin();
@@ @@
   /**
    * Creates located nodes.
    *
-   * @return \Drupal\node\Entity\Node[]
+   * @return Node[]
    *   Array of nodes created.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TypedData\Exception\ReadOnlyException
+   * @throws EntityStorageException
+   * @throws ReadOnlyException
    */
   public function createLocatedNodes($num = 10) {
     $geoService = \Drupal::service('geofield.wkt_generator');
@@ @@
   /**
    * Creates the entity with field location inside.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function createEntityWithFieldLocation() {
     $this->drupalCreateContentType([
@@ @@
   /**
    * Creates view.
    *
-   * @return \Drupal\views\ViewExecutable|null
+   * @return ViewExecutable|null
    *   The view.
    */
   public function createViewForStoreLocator() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/openlayers6/tests/src/Functional/FieldRenderTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupEnv();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/openlayers6/src/Plugin/Field/FieldFormatter/OpenlayerFormatter.php:88

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state.
    */
   public function settingsFormWmsValidate(array $element, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/openlayers6/src/Plugin/Block/OpenlayersBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\openlayers6\Plugin\Block;

+use Drupal\node\Entity\NodeType;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function blockForm($form, FormStateInterface $form_state) {
-    /** @var \Drupal\node\Entity\NodeType[] $nodetypes */
+    /** @var NodeType[] $nodetypes */
     $views = Views::getEnabledViews();
     $options = [];
     foreach ($views as $view) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The state.
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/openlayers6/src/Controller/OpenlayerController.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The controller constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   Renderer service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Renderer $renderer, AccountProxyInterface $currentUser) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

