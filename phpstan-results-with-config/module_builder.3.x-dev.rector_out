modules/contrib/module_builder/module_builder.api.php
modules/contrib/module_builder/module_builder.install
modules/contrib/module_builder/module_builder.module
modules/contrib/module_builder/module_builder_devel/src/DrupalCodeBuilderDevel.php
modules/contrib/module_builder/module_builder_devel/src/DrupalCodeBuilderTestSamples.php
modules/contrib/module_builder/module_builder_devel/src/Environment/ModuleBuilderDevel.php
modules/contrib/module_builder/module_builder_devel/src/Form/ProcessDevelForm.php
modules/contrib/module_builder/module_builder_devel/src/Form/ProcessFormExtra.php
modules/contrib/module_builder/module_builder_devel/src/Form/ProcessTestSamplesForm.php
modules/contrib/module_builder/module_builder_devel/src/Routing/RouteSubscriber.php
modules/contrib/module_builder/src/Controller/AutocompleteController.php
modules/contrib/module_builder/src/DrupalCodeBuilder.php
modules/contrib/module_builder/src/Element/GeneratedFiles.php
modules/contrib/module_builder/src/Entity/ComponentInterface.php
modules/contrib/module_builder/src/Entity/ModuleBuilderModule.php
modules/contrib/module_builder/src/EntityHandler/ComponentSectionFormHandler.php
modules/contrib/module_builder/src/ExceptionHandler.php
modules/contrib/module_builder/src/Form/ComponentFormBase.php
modules/contrib/module_builder/src/Form/ComponentGenerateForm.php
modules/contrib/module_builder/src/Form/ComponentSectionForm.php
modules/contrib/module_builder/src/Form/ModuleHooksForm.php
modules/contrib/module_builder/src/Form/ModuleMiscForm.php
modules/contrib/module_builder/src/Form/ModuleNameForm.php
modules/contrib/module_builder/src/Form/ProcessForm.php
modules/contrib/module_builder/src/Form/SettingsForm.php
modules/contrib/module_builder/src/LibraryWrapper.php
modules/contrib/module_builder/src/ModuleBuilderComponentListBuilder.php
modules/contrib/module_builder/src/ModuleFileWriter.php
modules/contrib/module_builder/src/Plugin/Derivative/ComponentSectionFormsLocalTasks.php
modules/contrib/module_builder/src/Routing/ComponentRouteProvider.php
modules/contrib/module_builder/tests/modules/module_builder_test_component_type/src/Entity/TestComponent.php
modules/contrib/module_builder/tests/modules/module_builder_test_component_type/src/Form/TestComponentMiscForm.php
modules/contrib/module_builder/tests/modules/module_builder_test_component_type/src/TestDrupalCodeBuilder.php
modules/contrib/module_builder/tests/modules/module_builder_test_component_type/src/TestEnvironment.php
modules/contrib/module_builder/tests/modules/module_builder_test_component_type/src/TestGenerateTask.php
modules/contrib/module_builder/tests/modules/test_dummy_module_write_location/src/DrupalCodeBuilderTestSampleData.php
modules/contrib/module_builder/tests/modules/test_dummy_module_write_location/src/ModuleFileWriterDummyLocation.php
modules/contrib/module_builder/tests/modules/test_dummy_module_write_location/src/TestSampleDataEnvironment.php
modules/contrib/module_builder/tests/sample_hook_definitions/7/hooks_processed.php
modules/contrib/module_builder/tests/src/Functional/ComponentFormTest.php
modules/contrib/module_builder/tests/src/Functional/GenerateFormTest.php
modules/contrib/module_builder/tests/src/Unit/ComponentSectionFormHandlerTest.php

23 files with changes
=====================

1) modules/contrib/module_builder/tests/src/Unit/ComponentSectionFormHandlerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\module_builder\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\module_builder\EntityHandler\ComponentSectionFormHandler;
 use Drupal\Tests\UnitTestCase;

 /**
@@ @@
  */
 class ComponentSectionFormHandlerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The modules to enable.
    *
@@ @@
       ],
     ];

-    $entity_type = $this->prophesize(\Drupal\Core\Entity\EntityTypeInterface::class);
+    $entity_type = $this->prophesize(EntityTypeInterface::class);
     $entity_type->id()->willReturn('test');
     $entity_type->get('code_builder')->willReturn($entity_code_builder_annotation_data);

     // Create the handler, with mock passed in.
-    $component_sections_handler = new \Drupal\module_builder\EntityHandler\ComponentSectionFormHandler(
+    $component_sections_handler = new ComponentSectionFormHandler(
       $entity_type->reveal()
     );
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/module_builder/tests/src/Functional/GenerateFormTest.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->container->get('module_installer')->install(['test_dummy_module_write_location']);
@@ @@
     $page->pressButton('Write selected files');

     $this->assertFileExists($site_path . '/my_module/my_module.module');
-    $this->assertFileNotExists($site_path . '/my_module/my_module.install');
+    $this->assertFileDoesNotExist($site_path . '/my_module/my_module.install');
     $this->assertSession()->pageTextMatches('@Written 1 files to folder sites/simpletest/\d+/my_module@');

     // Put some junk in the existing files, so we can check that 'Write new files'
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/module_builder/tests/src/Functional/ComponentFormTest.php:49

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Enable error output to the browser.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/module_builder/tests/modules/test_dummy_module_write_location/src/DrupalCodeBuilderTestSampleData.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\test_dummy_module_write_location;

+use DrupalCodeBuilder\Factory;
 use Drupal\module_builder\DrupalCodeBuilder;

 /**
@@ @@
   protected function doLoadLibrary() {
     $environment = new TestSampleDataEnvironment();

-    \DrupalCodeBuilder\Factory::setEnvironment($environment)
+    Factory::setEnvironment($environment)
       ->setCoreVersionNumber(\Drupal::VERSION);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/module_builder/tests/modules/module_builder_test_component_type/src/TestDrupalCodeBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\module_builder_test_component_type;

+use DrupalCodeBuilder\Factory;
 use Drupal\module_builder\DrupalCodeBuilder;

 /**
@@ @@
   protected function doLoadLibrary() {
     $environment = new TestEnvironment();

-    \DrupalCodeBuilder\Factory::setEnvironment($environment)
+    Factory::setEnvironment($environment)
       ->setCoreVersionNumber(\Drupal::VERSION);
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/module_builder/tests/modules/module_builder_test_component_type/src/Form/TestComponentMiscForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\module_builder_test_component_type\Form;

+use DrupalCodeBuilder\Factory;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\module_builder\Form\ModuleMiscForm;
 use Drupal\module_builder_test_component_type\TestGenerateTask;
@@ @@
    * {@inheritdoc}
    */
   public function setGenerateTask(Generate $generate_task) {
-    $dcb_container =  \DrupalCodeBuilder\Factory::getContainer();
+    $dcb_container =  Factory::getContainer();

     // Can't use the container directly, as it won't know about the class we
     // want to use instead.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/module_builder/src/Plugin/Derivative/ComponentSectionFormsLocalTasks.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates an ComponentSectionFormsLocalTasks object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/module_builder/src/ModuleFileWriter.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The Module extension list service.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleExtensionList;

@@ @@
   /**
    * The File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Creates a ModuleFileWriter instance.
    *
-   * @param \Drupal\Core\Extension\ModuleExtensionList $module_extension_list
+   * @param ModuleExtensionList $module_extension_list
    *   The Module extension list service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The File system service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/module_builder/src/LibraryWrapper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\module_builder;

+use DrupalCodeBuilder\Factory;
 /**
  * Quick and dirty wrapper class to load our library.
  *
@@ @@
    *  Throws an exception if the library can't be found.
    */
   public static function loadLibrary() {
-    if (!class_exists(\DrupalCodeBuilder\Factory::class)) {
+    if (!class_exists(Factory::class)) {
       throw new \Exception("Mising library.");
     }

     // TODO: add an environment class with a more appropriate name.
-    \DrupalCodeBuilder\Factory::setEnvironmentLocalClass('DrupalLibrary')
+    Factory::setEnvironmentLocalClass('DrupalLibrary')
       ->setCoreVersionNumber(\Drupal::VERSION);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/module_builder/src/Form/ProcessForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\module_builder\Form;

+use DrupalCodeBuilder\Factory;
+use DrupalCodeBuilder\Exception\StorageException;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Creates a ProcessForm instance.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Messenger service.
    */
   public function __construct(
@@ @@
     // The task handler returns sane values for these even if there's no hook
     // data.
     $last_update = $task_handler_report->lastUpdatedDate();
-    $directory = \DrupalCodeBuilder\Factory::getEnvironment()->getHooksDirectory();
+    $directory = Factory::getEnvironment()->getHooksDirectory();

     $form['intro'] = array(
       '#markup' => '<p>' . t("Module Builder analyses your site's code to find data about Drupal components such as hooks, plugins, tagged services, and more." . ' '
@@ @@
       try {
         $analysis_data = $task_report_summary->listStoredData();
       }
-      catch (\DrupalCodeBuilder\Exception\StorageException $e) {
+      catch (StorageException $e) {
         // Bail if the storage has a problem.
         $this->messenger()->addError($e->getMessage());
         return $form;
@@ @@
     $batch = array(
       'title' => t('Analysing site code'),
       'operations' => array(),
-      'file' => drupal_get_path('module', 'module_builder') . '/includes/module_builder.admin.inc',
+      'file' => \Drupal::service('extension.list.module')->getPath('module_builder') . '/includes/module_builder.admin.inc',
       'finished' => [get_class($this), 'batchFinished'],
     );
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/module_builder/src/Form/ModuleNameForm.php:92

    ---------- begin diff ----------
@@ @@
    * This should not change existing entity properties that are not being edited
    * by this form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/module_builder/src/Form/ModuleHooksForm.php:124

    ---------- begin diff ----------
@@ @@
    * This should not change existing entity properties that are not being edited
    * by this form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/module_builder/src/Form/ComponentSectionForm.php:153

    ---------- begin diff ----------
@@ @@
    *   The parent form element (or the entire form), passed by reference. The
    *   data item's element is placed with an array key that is its machine
    *   name.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \MutableTypedData\Data\DataItem $data
+   * @param DataItem $data
    *   The data item.
    */
   protected function buildFormElement(&$form, FormStateInterface $form_state, DataItem $data) {
@@ @@
    * This should not change existing entity properties that are not being edited
    * by this form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
@@ @@
    * @param array &$array
    *   An array of form values, passed by reference. This will be altered in
    *   place.
-   * @param \MutableTypedData\Data\DataItem $data
+   * @param DataItem $data
    *   The data item that corresponds to the form values array.
    */
   protected function cleanUpValues(&$array, DataItem $data) {
@@ @@
    *  element of this is name of the property and the form element.
    * @param $value
    *  The incoming form value from the form element for this property.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/module_builder/src/Form/ComponentFormBase.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The Drupal Code Builder wrapping service.
    *
-   * @var \Drupal\module_builder\DrupalCodeBuilder
+   * @var DrupalCodeBuilder
    */
   protected $codeBuilder;

@@ @@
   /**
    * The exception thrown by DCB when initialized, if any.
    *
-   * @var \DrupalCodeBuilder\Exception\SanityException
+   * @var SanityException
    */
   protected $sanityException;

@@ @@
   /**
    * Construct a new form object
    *
-   * @param \Drupal\module_builder\DrupalCodeBuilder $code_builder
+   * @param DrupalCodeBuilder $code_builder
    *   The Drupal Code Builder service.
    *   This needs to be injected so that submissions after an AJAX operation
    *   work (plus it's good for testing too).
@@ @@
   /**
    * Sets the generate task.
    *
-   * @param \DrupalCodeBuilder\Task\Generate $generate_task
+   * @param Generate $generate_task
    */
   public function setGenerateTask(Generate $generate_task) {
     $this->codeBuilderTaskHandlerGenerate = $generate_task;
@@ @@
   /**
    * Gets the data object for the entity in the form.
    *
-   * @return \MutableTypedData\Data\DataItem
+   * @return DataItem
    *   The data item object loaded with entity data.
    */
   protected function getComponentDataObject(): DataItem {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/module_builder/src/ExceptionHandler.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Handle a sanity exception from the library and output a message.
    *
-   * @param DrupalCodeBuilder\Exception\SanityException $e
+   * @param SanityException $e
    *  A sanity exception object.
    */
   public static function handleSanityException(SanityException $e) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/module_builder/src/EntityHandler/ComponentSectionFormHandler.php:49

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a new ComponentSectionFormHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    */
   public function __construct(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/module_builder/src/DrupalCodeBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\module_builder;

+use DrupalCodeBuilder\Factory;
 /**
  * Service class that wraps around the DCB library, to make it injectable.
  */
@@ @@
       $this->loadLibrary();
     }

-    return \DrupalCodeBuilder\Factory::getTask($task_name, $task_options);
+    return Factory::getTask($task_name, $task_options);
   }

   /**
@@ @@
    *  Throws an exception if the library can't be found.
    */
   public function loadLibrary() {
-    if (!class_exists(\DrupalCodeBuilder\Factory::class)) {
+    if (!class_exists(Factory::class)) {
       throw new \Exception("Mising library.");
     }

@@ @@
    */
   protected function doLoadLibrary() {
     // TODO: add an environment class with a more appropriate name.
-    \DrupalCodeBuilder\Factory::setEnvironmentLocalClass('DrupalLibrary')
+    Factory::setEnvironmentLocalClass('DrupalLibrary')
       ->setCoreVersionNumber(\Drupal::VERSION);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/module_builder/src/Controller/AutocompleteController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Handler for autocomplete request for properties with extra options.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    * @param string $property_address
    *   The address of the property this autocomplete request is for, as a string
    *   imploded with ':'.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matching options.
    */
   public function handleAutocomplete(Request $request, $property_address) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/module_builder/module_builder_devel/src/Routing/RouteSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\module_builder_devel\Routing;

+use Drupal\module_builder_devel\Form\ProcessFormExtra;
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Symfony\Component\Routing\RouteCollection;

@@ @@
   protected function alterRoutes(RouteCollection $collection) {
     // Change form class for the process form.
     if ($route = $collection->get('module_builder.analyse')) {
-      $route->setDefault('_form', \Drupal\module_builder_devel\Form\ProcessFormExtra::class);
+      $route->setDefault('_form', ProcessFormExtra::class);
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/module_builder/module_builder_devel/src/Form/ProcessDevelForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\module_builder_devel\Form;

+use DrupalCodeBuilder\Factory;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@

     foreach ($jobs_to_run as $job) {
       // Get the helper from the DCB container.
-      $collector_helper = \DrupalCodeBuilder\Factory::getContainer()->get($job['collector']);
+      $collector_helper = Factory::getContainer()->get($job['collector']);
       $job_data = $collector_helper->collect([$job]);

       dpm($job_data);
@@ @@
   /**
    * Gets the job list from the form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/module_builder/module_builder_devel/src/DrupalCodeBuilderTestSamples.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\module_builder_devel;

+use DrupalCodeBuilder\Factory;
 use Drupal\module_builder\DrupalCodeBuilder;

 /**
@@ @@
    * {@inheritdoc}
    */
   protected function doLoadLibrary() {
-    \DrupalCodeBuilder\Factory::setEnvironmentLocalClass('WriteTestsSampleLocation')
+    Factory::setEnvironmentLocalClass('WriteTestsSampleLocation')
       ->setCoreVersionNumber(\Drupal::VERSION);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


22) modules/contrib/module_builder/module_builder_devel/src/DrupalCodeBuilderDevel.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\module_builder_devel;

+use DrupalCodeBuilder\Factory;
 use Drupal\module_builder\DrupalCodeBuilder;
 use Drupal\module_builder_devel\Environment\ModuleBuilderDevel;

@@ @@
   protected function doLoadLibrary() {
     $environment = new ModuleBuilderDevel;

-    \DrupalCodeBuilder\Factory::setEnvironment($environment)
+    Factory::setEnvironment($environment)
       ->setCoreVersionNumber(\Drupal::VERSION);
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


23) modules/contrib/module_builder/module_builder.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\module_builder\Form\ModuleMiscForm;
+use Drupal\module_builder\Form\ComponentSectionForm;
 /**
  * @file
  * Builds scaffolding for custom modules.
@@ @@
 /**
  * Implements hook_help().
  */
-function module_builder_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
+function module_builder_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'help.page.module_builder':
       return t("Module builder allows you to generate code files for new custom modules.");
@@ @@

     // Set a generic form class for the 'misc' section if not specified.
     if (empty($entity_type->getFormClass('misc'))) {
-      $entity_type->setFormClass('misc', \Drupal\module_builder\Form\ModuleMiscForm::class);
+      $entity_type->setFormClass('misc', ModuleMiscForm::class);
     }

     $canonical_template = $entity_type->getLinkTemplate('canonical');
@@ @@
     foreach ($form_operations as $form_op) {
       // Allow the entity type to specify a form class.
       if (empty($entity_type->getFormClass($form_op))) {
-        $entity_type->setFormClass($form_op, \Drupal\module_builder\Form\ComponentSectionForm::class);
+        $entity_type->setFormClass($form_op, ComponentSectionForm::class);
       }

       // TODO: this is clobbering link templates in the entity if they are set
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 23 files have been changed by Rector                                      

