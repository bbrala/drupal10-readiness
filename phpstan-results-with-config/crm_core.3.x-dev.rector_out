modules/contrib/crm_core/crm_core.api.php
modules/contrib/crm_core/crm_core.module
modules/contrib/crm_core/modules/crm_core_activity/crm_core_activity.module
modules/contrib/crm_core/modules/crm_core_activity/legacy/CRMFeedsActivityProcessor.inc
modules/contrib/crm_core/modules/crm_core_activity/src/ActivityAccessControlHandler.php
modules/contrib/crm_core/modules/crm_core_activity/src/ActivityInterface.php
modules/contrib/crm_core/modules/crm_core_activity/src/ActivityListBuilder.php
modules/contrib/crm_core/modules/crm_core_activity/src/ActivityPermissions.php
modules/contrib/crm_core/modules/crm_core_activity/src/ActivityTypeAccessControlHandler.php
modules/contrib/crm_core/modules/crm_core_activity/src/ActivityTypeInterface.php
modules/contrib/crm_core/modules/crm_core_activity/src/ActivityTypeListBuilder.php
modules/contrib/crm_core/modules/crm_core_activity/src/ActivityTypePluginBase.php
modules/contrib/crm_core/modules/crm_core_activity/src/ActivityTypePluginInterface.php
modules/contrib/crm_core/modules/crm_core_activity/src/ActivityTypePluginManager.php
modules/contrib/crm_core/modules/crm_core_activity/src/ActivityViewsData.php
modules/contrib/crm_core/modules/crm_core_activity/src/Annotation/ActivityTypePlugin.php
modules/contrib/crm_core/modules/crm_core_activity/src/Entity/Activity.php
modules/contrib/crm_core/modules/crm_core_activity/src/Entity/ActivityType.php
modules/contrib/crm_core/modules/crm_core_activity/src/Form/ActivityDeleteForm.php
modules/contrib/crm_core/modules/crm_core_activity/src/Form/ActivityForm.php
modules/contrib/crm_core/modules/crm_core_activity/src/Form/ActivityTypeForm.php
modules/contrib/crm_core/modules/crm_core_activity/src/Plugin/crm_core_activity/ActivityType/Generic.php
modules/contrib/crm_core/modules/crm_core_activity/src/Plugin/views/field/ActivityPreview.php
modules/contrib/crm_core/modules/crm_core_activity/tests/modules/crm_core_activity_plugin_test/src/Plugin/crm_core_activity/ActivityType/ActivityTypeWithConfig.php
modules/contrib/crm_core/modules/crm_core_activity/tests/src/Functional/ActivityUiTest.php
modules/contrib/crm_core/modules/crm_core_activity/tests/src/Kernel/ActivityEntityPreDeleteTest.php
modules/contrib/crm_core/modules/crm_core_activity/tests/src/Kernel/ActivityTypePluginTest.php
modules/contrib/crm_core/modules/crm_core_contact/crm_core_contact.module
modules/contrib/crm_core/modules/crm_core_contact/legacy/CRMFeedsContactProcessor.inc
modules/contrib/crm_core/modules/crm_core_contact/src/ContactInterface.php
modules/contrib/crm_core/modules/crm_core_contact/src/ContactPermissions.php
modules/contrib/crm_core/modules/crm_core_contact/src/ContactTypeInterface.php
modules/contrib/crm_core/modules/crm_core_contact/src/ContactTypeListBuilder.php
modules/contrib/crm_core/modules/crm_core_contact/src/Entity/Individual.php
modules/contrib/crm_core/modules/crm_core_contact/src/Entity/IndividualType.php
modules/contrib/crm_core/modules/crm_core_contact/src/Entity/Organization.php
modules/contrib/crm_core/modules/crm_core_contact/src/Entity/OrganizationType.php
modules/contrib/crm_core/modules/crm_core_contact/src/Form/IndividualDeleteForm.php
modules/contrib/crm_core/modules/crm_core_contact/src/Form/IndividualForm.php
modules/contrib/crm_core/modules/crm_core_contact/src/Form/IndividualTypeForm.php
modules/contrib/crm_core/modules/crm_core_contact/src/Form/OrganizationForm.php
modules/contrib/crm_core/modules/crm_core_contact/src/Form/OrganizationTypeForm.php
modules/contrib/crm_core/modules/crm_core_contact/src/IndividualAccessControlHandler.php
modules/contrib/crm_core/modules/crm_core_contact/src/IndividualInterface.php
modules/contrib/crm_core/modules/crm_core_contact/src/IndividualListBuilder.php
modules/contrib/crm_core/modules/crm_core_contact/src/IndividualTypeAccessControlHandler.php
modules/contrib/crm_core/modules/crm_core_contact/src/Menu/ContactLocalTaskProvider.php
modules/contrib/crm_core/modules/crm_core_contact/src/OrganizationAccessControlHandler.php
modules/contrib/crm_core/modules/crm_core_contact/src/OrganizationInterface.php
modules/contrib/crm_core/modules/crm_core_contact/src/OrganizationListBuilder.php
modules/contrib/crm_core/modules/crm_core_contact/src/OrganizationTypeAccessControlHandler.php
modules/contrib/crm_core/modules/crm_core_contact/src/OrganizationTypeListBuilder.php
modules/contrib/crm_core/modules/crm_core_contact/src/Plugin/Action/JoinIntoHouseholdAction.php
modules/contrib/crm_core/modules/crm_core_contact/src/Plugin/Action/MergeContactsAction.php
modules/contrib/crm_core/modules/crm_core_contact/src/Plugin/Action/SendEmailAction.php
modules/contrib/crm_core/modules/crm_core_contact/tests/src/Functional/IndividualUiTest.php
modules/contrib/crm_core/modules/crm_core_contact/tests/src/Functional/OrganizationUiTest.php
modules/contrib/crm_core/modules/crm_core_contact/tests/src/Kernel/IndividualCRUDTest.php
modules/contrib/crm_core/modules/crm_core_contact/tests/src/Kernel/IndividualPrimaryFieldsTest.php
modules/contrib/crm_core/modules/crm_core_contact/tests/src/Kernel/LocalTaskTest.php
modules/contrib/crm_core/modules/crm_core_contact/tests/src/Kernel/OrganizationCRUDTest.php
modules/contrib/crm_core/modules/crm_core_contact/tests/src/Unit/ContactModuleTest.php
modules/contrib/crm_core/modules/crm_core_demo/tests/src/Functional/CrmCoreDemoTest.php
modules/contrib/crm_core/modules/crm_core_match/crm_core_match.module
modules/contrib/crm_core/modules/crm_core_match/src/Annotation/CrmCoreMatchEngine.php
modules/contrib/crm_core/modules/crm_core_match/src/Annotation/CrmCoreMatchFieldHandler.php
modules/contrib/crm_core/modules/crm_core_match/src/Controller/MatcherController.php
modules/contrib/crm_core/modules/crm_core_match/src/Entity/Matcher.php
modules/contrib/crm_core/modules/crm_core_match/src/Form/MatcherForm.php
modules/contrib/crm_core/modules/crm_core_match/src/Matcher/MatcherAccessControlHandler.php
modules/contrib/crm_core/modules/crm_core_match/src/Matcher/MatcherConfigInterface.php
modules/contrib/crm_core/modules/crm_core_match/src/Matcher/MatcherListBuilder.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/engine/DefaultMatchingEngine.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/engine/MatchEngineBase.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/engine/MatchEngineInterface.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/field/AddressFieldHandler.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/field/DateFieldHandler.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/field/EmailFieldHandler.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/field/FieldHandlerBase.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/field/FieldHandlerInterface.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/field/NameFieldHandler.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/field/NumberIntegerFieldHandler.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/field/PhoneNumberFieldHandler.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/field/SelectFieldHandler.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/field/StringFieldHandler.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/field/TelephoneFieldHandler.php
modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/field/TextFieldHandler.php
modules/contrib/crm_core/modules/crm_core_match/tests/src/Functional/DefaultMatchingEngineUITest.php
modules/contrib/crm_core/modules/crm_core_match/tests/src/Kernel/FieldMatcherTest.php
modules/contrib/crm_core/modules/crm_core_match/tests/src/Unit/DefaultEngineTest.php
modules/contrib/crm_core/modules/crm_core_relationship/crm_core_relationship.fields.inc
modules/contrib/crm_core/modules/crm_core_relationship/crm_core_relationship.install
modules/contrib/crm_core/modules/crm_core_relationship/crm_core_relationship.module
modules/contrib/crm_core/modules/crm_core_relationship/templates/relationship.tpl.php
modules/contrib/crm_core/modules/crm_core_relationship_ui/crm_core_relationship_ui.admin.inc
modules/contrib/crm_core/modules/crm_core_relationship_ui/crm_core_relationship_ui.install
modules/contrib/crm_core/modules/crm_core_relationship_ui/crm_core_relationship_ui.module
modules/contrib/crm_core/modules/crm_core_relationship_ui/crm_core_relationship_ui.pages.inc
modules/contrib/crm_core/modules/crm_core_relationship_ui/crm_core_relationship_ui.views_default.inc
modules/contrib/crm_core/modules/crm_core_user_sync/crm_core_user_sync.module
modules/contrib/crm_core/modules/crm_core_user_sync/src/Controller/RuleStatusController.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/CrmCoreUserSyncRelation.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/CrmCoreUserSyncRelationInterface.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/CrmCoreUserSyncRelationRules.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/Entity/Relation.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/EventSubscriber/RequestSubscriber.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/Form/RelationForm.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/Form/RuleDeleteConfirmForm.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/Form/RuleForm.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/Form/SettingsForm.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/Plugin/Block/EditOwnContactInformationBlock.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/Plugin/Validation/Constraint/UniqueReferenceConstraint.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/Plugin/Validation/Constraint/UniqueReferenceConstraintValidator.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/Plugin/migrate/process/RelationLookup.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/RelationInterface.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/RelationListBuilder.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/RelationViewBuilder.php
modules/contrib/crm_core/modules/crm_core_user_sync/src/UserSyncBatch.php
modules/contrib/crm_core/modules/crm_core_user_sync/tests/src/Kernel/CrmCoreUserSyncRelationTest.php
modules/contrib/crm_core/modules/crm_core_user_sync/tests/src/Kernel/RelationEntityTest.php
modules/contrib/crm_core/modules/crm_core_user_sync/tests/src/Kernel/SettingsFormTest.php
modules/contrib/crm_core/modules/crm_core_user_sync/tests/src/Unit/CrmCoreUserSyncRelationRulesTest.php
modules/contrib/crm_core/modules/crm_core_user_sync/tests/src/Unit/RequestSubscriberTest.php
modules/contrib/crm_core/src/Access/CRMCoreAccess.php
modules/contrib/crm_core/src/CRMCorePermissions.php
modules/contrib/crm_core/src/Form/SettingsForm.php
modules/contrib/crm_core/src/Theme/CrmCoreAdminNegotiator.php
modules/contrib/crm_core/tests/src/Kernel/SettingsFormTest.php

55 files with changes
=====================

1) modules/contrib/crm_core/tests/src/Kernel/SettingsFormTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->container->get('theme_installer')->install(['claro']);
     $this->form = SettingsForm::create($this->container);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/crm_core/src/Form/SettingsForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Theme Handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   Theme manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ThemeHandlerInterface $theme_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/crm_core/src/CRMCorePermissions.php:114

    ---------- begin diff ----------
@@ @@
   /**
    * Get labels for permissions.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_info
+   * @param EntityTypeInterface $entity_info
    *   Entity info.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/crm_core/src/Access/CRMCoreAccess.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The menu link tree manager.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuTree;

@@ @@
   /**
    * The access manager.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface
+   * @var AccessManagerInterface
    */
   protected $accessManager;

@@ @@
   /**
    * CRMCoreAccess constructor.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menu_tree
+   * @param MenuLinkTreeInterface $menu_tree
    *   The menu link tree manager.
-   * @param \Drupal\Core\Access\AccessManagerInterface $access_manager
+   * @param AccessManagerInterface $access_manager
    *   The access manager.
    */
   public function __construct(MenuLinkTreeInterface $menu_tree, AccessManagerInterface $access_manager) {
@@ @@
   /**
    * Checks access for CRM Core overview.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account being checked.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access(Route $route, AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/crm_core/modules/crm_core_user_sync/tests/src/Unit/RequestSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\crm_core_user_sync\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
 use Drupal\crm_core_user_sync\EventSubscriber\RequestSubscriber;
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;

 /**
@@ @@
  */
 class RequestSubscriberTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Tests nothing happens for Anonymous.
    */
@@ @@
     $request = Request::create('/', 'GET');

     $subscriber = new RequestSubscriber($current_user, $configFactory, $relationService, $entityTypeManager);
-    $event = new GetResponseEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
+    $event = new RequestEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
     $subscriber->onKernelRequest($event);
     // Nothing to assert as we should exit immediately. Current user expectation
     // will fail the test if something...
@@ @@
       ->method('id')
       ->willReturn('101');

-    $config = $this->getMockBuilder(ImmutableConfig::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock(ImmutableConfig::class);
     $config
       ->expects($this->once())
       ->method('get')
@@ @@
     $request = Request::create('/', 'GET');

     $subscriber = new RequestSubscriber($current_user, $configFactory, $relationService, $entityTypeManager);
-    $event = new GetResponseEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
+    $event = new RequestEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
     $subscriber->onKernelRequest($event);
     // Nothing to assert. Entity type manager expectations will the test.
   }
@@ @@
       ->method('setAccount')
       ->willReturnReference($account);

-    $config = $this->getMockBuilder(ImmutableConfig::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock(ImmutableConfig::class);
     $config
       ->expects($this->once())
       ->method('get')
@@ @@
     $request = Request::create('/', 'GET');

     $subscriber = new RequestSubscriber($current_user, $configFactory, $relationService, $entityTypeManager);
-    $event = new GetResponseEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
+    $event = new RequestEvent($kernel->reveal(), $request, HttpKernelInterface::MASTER_REQUEST);
     $subscriber->onKernelRequest($event);
     $this->assertEquals($individual, $account->crm_core['contact'], 'Related contact was loaded');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/crm_core/modules/crm_core_user_sync/tests/src/Unit/CrmCoreUserSyncRelationRulesTest.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $rules = [];
@@ @@
       'weight' => 10,
     ];

-    $config = $this->getMockBuilder(ImmutableConfig::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $config = $this->createMock(ImmutableConfig::class);
     $config
       ->expects($this->once())
       ->method('get')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/crm_core/modules/crm_core_user_sync/tests/src/Kernel/SettingsFormTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('crm_core_user_sync');
     $this->form = SettingsForm::create($this->container);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/crm_core/modules/crm_core_user_sync/tests/src/Kernel/RelationEntityTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('crm_core_user_sync_relation');
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/crm_core/modules/crm_core_user_sync/src/RelationListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new RelationListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/crm_core/modules/crm_core_user_sync/src/RelationInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the relation user entity.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The relation user entity.
    */
   public function getUser();
@@ @@
   /**
    * Sets the relation user entity.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The relation user entity.
    *
    * @return $this
@@ @@
   /**
    * Returns the relation individual entity.
    *
-   * @return \Drupal\crm_core_contact\IndividualInterface
+   * @return IndividualInterface
    *   The relation individual entity.
    */
   public function getIndividual();
@@ @@
   /**
    * Sets the relation individual entity.
    *
-   * @param \Drupal\crm_core_contact\IndividualInterface $individual
+   * @param IndividualInterface $individual
    *   The relation individual entity.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/crm_core/modules/crm_core_user_sync/src/Plugin/migrate/process/RelationLookup.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_user_sync\Plugin\migrate\process;

+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\crm_core_user_sync\CrmCoreUserSyncRelationInterface;
 use Drupal\migrate\Plugin\MigrationInterface;
@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The migration.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;

@@ @@
   /**
    * The selection plugin.
    *
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface
+   * @var SelectionPluginManagerInterface
    */
   protected $selectionPluginManager;

@@ @@
   /**
    * User Sync Relation.
    *
-   * @var \Drupal\crm_core_user_sync\CrmCoreUserSyncRelationInterface
+   * @var CrmCoreUserSyncRelationInterface
    */
   protected $crmCoreUserSyncRelation;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/crm_core/modules/crm_core_user_sync/src/Plugin/Validation/Constraint/UniqueReferenceConstraintValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_user_sync\Plugin\Validation\Constraint;

+use Drupal\Core\Entity\EntityInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;

@@ @@
       return;
     }
     $field_name = $items->getFieldDefinition()->getName();
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $items->getEntity();
     $entity_type_id = $entity->getEntityTypeId();
     $id_key = $entity->getEntityType()->getKey('id');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/crm_core/modules/crm_core_user_sync/src/EventSubscriber/RequestSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_user_sync\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\crm_core_user_sync\CrmCoreUserSyncRelationInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Current logged in user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Relation service.
    *
-   * @var \Drupal\crm_core_user_sync\CrmCoreUserSyncRelationInterface
+   * @var CrmCoreUserSyncRelationInterface
    */
   protected $relationService;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs event subscriber.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Current logged in user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\crm_core_user_sync\CrmCoreUserSyncRelationInterface $relation_service
+   * @param CrmCoreUserSyncRelationInterface $relation_service
    *   The relation service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
    */
   public function __construct(AccountProxyInterface $current_user, ConfigFactoryInterface $config_factory, CrmCoreUserSyncRelationInterface $relation_service, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
   /**
    * Kernel request event handler.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   Response event.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
     if ($this->currentUser->isAuthenticated()) {
       $config = $this->configFactory->get('crm_core_user_sync.settings');
       if ($config->get('contact_load')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/crm_core/modules/crm_core_user_sync/src/CrmCoreUserSyncRelationRules.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a CrmCoreUserSyncRelationRules object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    * @param string $configName
    *   Name of the configuration object that stores rules.
@@ @@
   /**
    * Checks if provided contact can be linked to this account.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   User  account to check.
-   * @param \Drupal\crm_core_contact\IndividualInterface $contact
+   * @param IndividualInterface $contact
    *   Contact record to check.
    *
    * @return bool
@@ @@
   /**
    * Get contact type resolved from configured synchronization rules.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   User account to check.
    *
    * @return string|false
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/crm_core/modules/crm_core_user_sync/src/CrmCoreUserSyncRelationInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_user_sync;

+use Drupal\crm_core_contact\ContactInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\crm_core_contact\IndividualInterface;
 use Drupal\user\UserInterface;

@@ @@
   /**
    * Synchronizes user and contact.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   Account to be synchronized. Programmatically created accounts can
    *   override default behavior by setting
    *   $account->crm_core_no_auto_sync = TRUE.
-   * @param \Drupal\crm_core_contact\IndividualInterface $individual
+   * @param IndividualInterface $individual
    *   Contact to be associated with $account.
    *
-   * @return \Drupal\crm_core_contact\ContactInterface
+   * @return ContactInterface
    *   A contact object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function relate(UserInterface $account, IndividualInterface $individual = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/crm_core/modules/crm_core_user_sync/src/Controller/RuleStatusController.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Constructs the controller object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current request.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
    */
   public function __construct(Request $request, ConfigFactoryInterface $configFactory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/crm_core/modules/crm_core_relationship_ui/crm_core_relationship_ui.pages.inc:68

    ---------- begin diff ----------
@@ @@
  */
 function crm_core_relationship_form($form, &$form_state, $relation) {
   // Ensure this include file is loaded when the form is rebuilt from the cache.
-  $form_state['build_info']['file'] = drupal_get_path('module', 'crm_core_ui') . '/pages/contact_activity.pages.inc';
+  $form_state['build_info']['file'] = \Drupal::service('extension.list.module')->getPath('crm_core_ui') . '/pages/contact_activity.pages.inc';
   $form_state['entity_type'] = 'relation';
   $form_state['relation'] = $form_state['crm_core_relationship'];
   unset($form_state['crm_core_relationship']);
@@ @@
   $query->addMetaData('match', $string)
     ->addTag(variable_get('crm_core_contact_search_query_tag', 'crm_core_contact_search'));
   $result = $query->execute();
-  $contacts = entity_load('crm_core_contact', array_keys($result['crm_core_contact']));
+  $contacts = \Drupal::service('entity_type.manager')->getStorage('crm_core_contact')->load(array_keys($result['crm_core_contact']));
   foreach ($contacts as $contact) {
     $crm_core_contact_title = $contact->label();
     $matches[$crm_core_contact_title . " [cid:$contact->contact_id]"] = $crm_core_contact_title;
@@ @@
   if (!array_key_exists(1, $matches) || !is_numeric($matches[1])) {
     return FALSE;
   }
-  $contacts = entity_load('crm_core_contact', [$matches[1]]);
+  $contacts = \Drupal::service('entity_type.manager')->getStorage('crm_core_contact')->load([$matches[1]]);
   if (empty($contacts)) {
     return FALSE;
   }
@@ @@
   $relation = Relation::load($relationship_id);
   $relation->crm_core_relationship_status[LANGUAGE_NONE][0]['value'] = $status ? 1 : 0;
   entity_save('relation', $relation);
-  drupal_set_message(t('Relationship status was successfully changed.'));
+  \Drupal::messenger()->addStatus(t('Relationship status was successfully changed.'));
   $path = drupal_get_destination();
   drupal_goto($path);
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * DrupalSetMessageRector
 * EntityLoadRector
 * ArgumentRemoverRector


18) modules/contrib/crm_core/modules/crm_core_relationship_ui/crm_core_relationship_ui.module:151

    ---------- begin diff ----------
@@ @@
 function crm_core_relationship_ui_menu_alter(&$items) {
   // We are simply hiding crm relationships from other types of relations.
   $items['admin/structure/relation']['page callback'] = 'crm_core_relationship_ui_types_overview';
-  $items['admin/structure/relation']['file path'] = drupal_get_path('module', 'crm_core_relationship_ui');
+  $items['admin/structure/relation']['file path'] = \Drupal::service('extension.list.module')->getPath('crm_core_relationship_ui');
   $items['admin/structure/relation']['file'] = 'crm_core_relationship_ui.admin.inc';
   $items['admin/structure/relation']['page arguments'] = [1];
 }
@@ @@
 function crm_core_relationship_ui_views_api() {
   return [
     'api' => 3,
-    'path' => drupal_get_path('module', 'crm_core_relationship_ui'),
+    'path' => \Drupal::service('extension.list.module')->getPath('crm_core_relationship_ui'),
   ];
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


19) modules/contrib/crm_core/modules/crm_core_relationship_ui/crm_core_relationship_ui.admin.inc:246

    ---------- begin diff ----------
@@ @@
   RelationType::create($record)->save();
   $form_state['redirect'] = 'admin/structure/crm-core/relationship-types';

-  drupal_set_message(t('The relationship type has been saved.'));
+  \Drupal::messenger()->addStatus(t('The relationship type has been saved.'));
 }

 /**
@@ @@
   RelationType::load($form_state['values']['relation_type'])->delete();

   $t_args = ['%label' => $form_state['values']['label']];
-  drupal_set_message(t('The %label relationship type has been deleted.', $t_args));
+  \Drupal::messenger()->addStatus(t('The %label relationship type has been deleted.', $t_args));
   watchdog('relation', 'Deleted the %label relationship type.', $t_args, WATCHDOG_NOTICE);

   // TODO: relation_types_rebuild() ?;.
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector


20) modules/contrib/crm_core/modules/crm_core_relationship/templates/relationship.tpl.php:17

    ---------- begin diff ----------
@@ @@
 <div class="<?php print $classes; ?> clearfix"<?php print $attributes; ?>>
   <div class="content"<?php print $content_attributes; ?>>
     <?php
-      print render($content);
+      print \Drupal::service('renderer')->render($content);
     ?>
   </div>
 </div>
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


21) modules/contrib/crm_core/modules/crm_core_relationship/crm_core_relationship.install:50

    ---------- begin diff ----------
@@ @@

   // Get all the relationship_types (bundles), find all fields
   // delete them.
-  $query = db_select('relation_bundles', 'rb')
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+  $query = \Drupal::database()->select('relation_bundles', 'rb')
     ->fields('rb', ['relation_type'])
     ->condition('rb.entity_type', 'crm_core_contact')
     ->distinct()
@@ @@

   foreach ($relationship_type as $type) {
     // Look into the database for each type.
-    $relationship_query = db_select('relation', 'r')
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+    $relationship_query = \Drupal::database()->select('relation', 'r')
       ->fields('r', ['relation_id'])
       ->condition('r.relation_type', $type)
       ->execute();
    ----------- end diff -----------

Applied rules:
 * DBSelectRector
 * ArgumentRemoverRector


22) modules/contrib/crm_core/modules/crm_core_match/tests/src/Functional/DefaultMatchingEngineUITest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     IndividualType::create([
@@ @@
     // Test Organization matcher form.
     $this->drupalGet('admin/config/crm-core/match/organization');

-    $this->assertText('Field Matching');
-    $this->assertText('Unsupported Fields');
-    $this->assertText('A given field is unsupported when there is no field match handler for the field type it belongs to. In order to make it supported a handler plugin should be created for it.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Field Matching');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Unsupported Fields');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('A given field is unsupported when there is no field match handler for the field type it belongs to. In order to make it supported a handler plugin should be created for it.');
     // There is checkbox for title property of the name field.
-    $this->assertNoFieldChecked('edit-configuration-rules-nametitle-status');
+    $this->assertSession()->checkboxNotChecked('edit-configuration-rules-nametitle-status');
     // There is title property operator for the name field.
-    $this->assertFieldByName('configuration[rules][name:title][operator]');
-    $this->assertText('ID');
+    $this->assertSession()->fieldExists('configuration[rules][name:title][operator]');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('ID');
     $this->assertSession()->fieldNotExists('edit-configuration-rules-idvalue-status');
     $this->assertSession()->fieldNotExists('edit-configuration-rules-idvalue-operator');

@@ @@
       'configuration[rules][name:family][options]' => 'Smith',
       'configuration[rules][name:family][score]' => 1,
     ];
-    $this->drupalPostForm(NULL, $configuration, 'Save');
+    $this->submitForm($configuration, 'Save');

     $this->drupalGet('admin/config/crm-core/match');
     $this->clickLink('Edit', 2);

-    $this->assertFieldChecked('edit-configuration-rules-namegiven-status');
+    $this->assertSession()->checkboxChecked('edit-configuration-rules-namegiven-status');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namegiven-operator', 'CONTAINS');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namegiven-options', 'John');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namegiven-score', 1);

-    $this->assertFieldChecked('edit-configuration-rules-namefamily-status');
+    $this->assertSession()->checkboxChecked('edit-configuration-rules-namefamily-status');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namefamily-operator', 'CONTAINS');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namefamily-options', 'Smith');
     $this->assertSession()->fieldValueEquals('edit-configuration-rules-namefamily-score', 1);
    ----------- end diff -----------

Applied rules:
 * AssertFieldByNameRector
 * AssertFieldCheckedRector
 * AssertNoFieldCheckedRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/field/FieldHandlerInterface.php:123

    ---------- begin diff ----------
@@ @@
   /**
    * Executes the match query.
    *
-   * @param \Drupal\crm_core_contact\ContactInterface $contact
+   * @param ContactInterface $contact
    *   The contact entity to find matches for.
    * @param string $property
    *   The name of the property.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/field/FieldHandlerBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_match\Plugin\crm_core_match\field;

+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The field.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   protected $field;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs an plugin instance.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field
+   * @param FieldDefinitionInterface $field
    *   Field definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type Manager.
    * @param array $configuration
    *   Configuration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/engine/MatchEngineInterface.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Finds matches for given contact.
    *
-   * @param \Drupal\crm_core_contact\ContactInterface $contact
+   * @param ContactInterface $contact
    *   A contact entity used to pass data for identifying a match.
    *
    * @return int[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/crm_core/modules/crm_core_match/src/Plugin/crm_core_match/engine/DefaultMatchingEngine.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_match\Plugin\crm_core_match\engine;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The match field plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;

@@ @@
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Builds a row for an rule in the rule listing.
    *
-   * @param \Drupal\crm_core_match\Plugin\crm_core_match\field\FieldHandlerInterface $field
+   * @param FieldHandlerInterface $field
    *   The match field of this rule.
    * @param string $name
    *   The property name of this rule.
@@ @@
         continue;
       }

-      /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+      /** @var FieldDefinitionInterface $field_definition */
       $field_definition = $field_definitions[$field_name];
       $rules[$field_name] = [
         'label' => $field_definition->getLabel(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/crm_core/modules/crm_core_match/src/Matcher/MatcherListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_match\Matcher;

+use Drupal\crm_core_match\Entity\Matcher;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\crm_core_match\Entity\Matcher $entity */
+    /** @var Matcher $entity */
     $row['label'] = $entity->label();
     $row['description'] = $entity->getDescription();
     $row['plugin'] = $entity->getPluginTitle();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/crm_core/modules/crm_core_match/src/Matcher/MatcherConfigInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_match\Matcher;

+use Drupal\crm_core_match\Plugin\crm_core_match\engine\MatchEngineInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\crm_core_contact\ContactInterface;

@@ @@
   /**
    * Gets the matcher plugin.
    *
-   * @return \Drupal\crm_core_match\Plugin\crm_core_match\engine\MatchEngineInterface
+   * @return MatchEngineInterface
    *   Instantiated plugin.
    */
   public function getPlugin();
@@ @@
   /**
    * Finds matches for given contact.
    *
-   * @param \Drupal\crm_core_contact\ContactInterface $contact
+   * @param ContactInterface $contact
    *   A contact entity used to pass data for identifying a match.
    *
    * @return int[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/crm_core/modules/crm_core_match/src/Matcher/MatcherAccessControlHandler.php:14

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\crm_core_match\Matcher\MatcherConfigInterface $entity */
+    /** @var MatcherConfigInterface $entity */
     return parent::checkAccess($entity, $operation, $account);
     // Deny delete access.
     // ->andIf(AccessResult::allowedIf($operation != 'delete'));.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/crm_core/modules/crm_core_match/src/Form/MatcherForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_match\Form;

+use Drupal\Core\Messenger\MessengerInterface;
+use Drupal\crm_core_match\Matcher\MatcherConfigInterface;
+use Drupal\crm_core_match\Plugin\crm_core_match\engine\MatchEngineInterface;
+use Drupal\crm_core_match\Entity\Matcher;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\crm_core_match\Matcher\MatcherConfigInterface
+   * @var MatcherConfigInterface
    */
   protected $entity;

@@ @@
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);

-    /** @var \Drupal\crm_core_match\Matcher\MatcherConfigInterface $matcher */
+    /** @var MatcherConfigInterface $matcher */
     $matcher = $this->entity;
-    /** @var \Drupal\crm_core_match\Plugin\crm_core_match\engine\MatchEngineInterface $plugin */
+    /** @var MatchEngineInterface $plugin */
     if ($matcher->isNew()) {
       $plugin_id = $form_state->getValue('plugin_id');
       $plugin = crm_core_match_matcher_manager()->createInstance($plugin_id, $matcher->getConfiguration());
@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);

-    /** @var \Drupal\crm_core_match\Entity\Matcher $matcher */
+    /** @var Matcher $matcher */
     $matcher = $this->entity;
     $plugin = $matcher->getPlugin();
     $plugin->submitConfigurationForm($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/crm_core/modules/crm_core_match/src/Entity/Matcher.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_match\Entity;

+use Drupal\crm_core_match\Plugin\crm_core_match\engine\MatchEngineInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\crm_core_contact\ContactInterface;
@@ @@
   /**
    * The plugin instance.
    *
-   * @var \Drupal\crm_core_match\Plugin\crm_core_match\engine\MatchEngineInterface
+   * @var MatchEngineInterface
    */
   protected $plugin;

@@ @@
   /**
    * Finds matches for given contact.
    *
-   * @param \Drupal\crm_core_contact\ContactInterface $contact
+   * @param ContactInterface $contact
    *   A contact entity used to pass data for identifying a match.
    *
    * @return int[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/crm_core/modules/crm_core_match/src/Controller/MatcherController.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the edit matcher title.
    *
-   * @param \Drupal\crm_core_match\Matcher\MatcherConfigInterface $crm_core_match
+   * @param MatcherConfigInterface $crm_core_match
    *   The edited matcher.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/crm_core/modules/crm_core_match/src/Annotation/CrmCoreMatchEngine.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_match\Annotation;

+use Drupal\Core\StringTranslation\TranslationWrapper;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The engines label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationWrapper
+   * @var TranslationWrapper
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The match engine summary.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationWrapper
+   * @var TranslationWrapper
    */
   protected $summary;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


34) modules/contrib/crm_core/modules/crm_core_contact/src/Plugin/Action/SendEmailAction.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Token $token, MailManagerInterface $mail_manager, LanguageManagerInterface $language_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/crm_core/modules/crm_core_contact/src/Plugin/Action/MergeContactsAction.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_contact\Plugin\Action;

+use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\Core\Action\ConfigurableActionBase;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Access\AccessResult;
@@ @@
   /**
    * The path alias storage.
    *
-   * @var \Drupal\path_alias\PathAliasStorage
+   * @var PathAliasStorage
    */
   protected $pathAliasStorage;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The translation manager.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationManager
+   * @var TranslationManager
    */
   protected $translationManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\path_alias\PathAliasStorage $path_alias_storage
+   * @param PathAliasStorage $path_alias_storage
    *   The path alias storage.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler.
-   * @param \Drupal\Core\StringTranslation\TranslationManager $translation_manager
+   * @param TranslationManager $translation_manager
    *   The translation manager.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
+   * @param EntityFieldManager $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The Messenger service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PathAliasStorage $path_alias_storage, ModuleHandler $module_handler, TranslationManager $translation_manager, EntityTypeManager $entity_type_manager, EntityFieldManager $entity_field_manager, Renderer $renderer, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/crm_core/modules/crm_core_contact/src/Plugin/Action/JoinIntoHouseholdAction.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;

@@ @@
   /**
    * The entity form bulder service.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilder
+   * @var EntityFormBuilder
    */
   protected $entityFormBuilder;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   The current user service.
-   * @param \Drupal\Core\Entity\EntityFormBuilder $entity_form_builder
+   * @param EntityFormBuilder $entity_form_builder
    *   The entity form builder service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountProxy $current_user, EntityFormBuilder $entity_form_builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/crm_core/modules/crm_core_contact/src/OrganizationTypeAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_contact;

+use Drupal\crm_core_contact\Entity\OrganizationType;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\crm_core_contact\Entity\OrganizationType $entity */
-
+    /** @var OrganizationType $entity */
     // First check permission.
     if (parent::checkAccess($entity, $operation, $account)->isForbidden()) {
       return AccessResult::forbidden();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/crm_core/modules/crm_core_contact/src/OrganizationListBuilder.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new NodeListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatter $date_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/crm_core/modules/crm_core_contact/src/IndividualTypeAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_contact;

+use Drupal\crm_core_contact\Entity\IndividualType;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\crm_core_contact\Entity\IndividualType $entity */
-
+    /** @var IndividualType $entity */
     // First check permission.
     if (parent::checkAccess($entity, $operation, $account)->isForbidden()) {
       return AccessResult::forbidden();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/crm_core/modules/crm_core_contact/src/IndividualListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new IndividualListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatter $date_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/crm_core/modules/crm_core_contact/src/Form/OrganizationTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_contact\Form;

+use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@

     $options = [];
     if ($type) {
-      /** @var \Drupal\Core\Entity\EntityFieldManager $field_manager */
+      /** @var EntityFieldManager $field_manager */
       $field_manager = \Drupal::service('entity_field.manager');
       $instances = $field_manager->getFieldDefinitions('crm_core_organization', $type->id());
       foreach ($instances as $instance) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/crm_core/modules/crm_core_contact/src/Form/OrganizationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_contact\Form;

+use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/crm_core/modules/crm_core_contact/src/Form/IndividualTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_contact\Form;

+use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@

     $options = [];
     if ($type) {
-      /** @var \Drupal\Core\Entity\EntityFieldManager $field_manager */
+      /** @var EntityFieldManager $field_manager */
       $field_manager = \Drupal::service('entity_field.manager');
       $instances = $field_manager->getFieldDefinitions('crm_core_individual', $type->id());
       foreach ($instances as $instance) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/crm_core/modules/crm_core_contact/src/Form/IndividualForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_contact\Form;

+use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/crm_core/modules/crm_core_contact/legacy/CRMFeedsContactProcessor.inc:39

    ---------- begin diff ----------
@@ @@
   protected function newEntity(FeedsSource $source) {
     $contact = new stdClass();
     $contact->type = $this->config['contact_type'];
-    $contact->changed = REQUEST_TIME;
-    $contact->created = REQUEST_TIME;
+    $contact->changed = \Drupal::time()->getRequestTime();
+    $contact->created = \Drupal::time()->getRequestTime();
     $contact->language = LANGUAGE_NONE;
     $contact->revision_log = t('Imported by feeds.');
     $contact->uid = $this->config['author'];
@@ @@
     }
     else {
       // We're replacing the existing contact. Only save the absolutely necessary.
-      $contact = db_query("SELECT created, contact_id, vid, type FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $contact_id])->fetchObject();
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $contact = \Drupal::database()->query("SELECT created, contact_id, vid, type FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $contact_id])->fetchObject();
       $contact->uid = $this->config['author'];
     }
     // Populate properties that are set by contact_object_prepare().
@@ @@
       return;
     }
     $count = $this->getLimit();
-    $contacts = db_query_range("SELECT c.contact_id FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => REQUEST_TIME - $time]);
+    $contacts = db_query_range("SELECT c.contact_id FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time]);
     $contact_ids = [];
     foreach ($contacts as $contact) {
       $contact_ids[$contact->contact_id] = $contact->contact_id;
     }
     $this->entityDeleteMultiple($contact_ids);
-    if (db_query_range("SELECT 1 FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, 1, [':id' => $this->id, ':created' => REQUEST_TIME - $time])->fetchField()) {
+    if (db_query_range("SELECT 1 FROM {crm_core_contact} c JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_contact' AND c.contact_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, 1, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time])->fetchField()) {
       return FEEDS_BATCH_ACTIVE;
     }
     return FEEDS_BATCH_COMPLETE;
@@ @@
       '#options' => $types,
       '#default_value' => $this->config['contact_type'],
     ];
-    $author = user_load($this->config['author']);
+    $author = \Drupal::service('entity_type.manager')->getStorage('user')->load($this->config['author']);
     $form['author'] = [
       '#type' => 'textfield',
       '#title' => t('Author'),
@@ @@
   public function setTargetElement(FeedsSource $source, $target_contact, $target_element, $value) {
     switch ($target_element) {
       case 'created':
-        $target_contact->created = feeds_to_unixtime($value, REQUEST_TIME);
+        $target_contact->created = feeds_to_unixtime($value, \Drupal::time()->getRequestTime());
         break;

       case 'feeds_source':
@@ @@
     foreach ($this->uniqueTargets($source, $result) as $target => $value) {
       switch ($target) {
         case 'contact_id':
-          $contact_id = db_query("SELECT contact_id FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $value])->fetchField();
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+          $contact_id = \Drupal::database()->query("SELECT contact_id FROM {crm_core_contact} WHERE contact_id = :contact_id", [':contact_id' => $value])->fetchField();
           break;

         case 'feeds_source':
           if ($id = feeds_get_importer_id($this->config['contact_type'])) {
-            $contact_id = db_query("SELECT fs.feed_contact_id FROM {crm_core_contact} c JOIN {feeds_source} fs ON c.contact_id = fs.feed_contact_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
+            // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+            // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+            $contact_id = \Drupal::database()->query("SELECT fs.feed_contact_id FROM {crm_core_contact} c JOIN {feeds_source} fs ON c.contact_id = fs.feed_contact_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
           }
           break;
       }
    ----------- end diff -----------

Applied rules:
 * DBQueryRector
 * RequestTimeConstRector
 * UserLoadRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


46) modules/contrib/crm_core/modules/crm_core_contact/crm_core_contact.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\crm_core_contact\IndividualInterface;
+use Drupal\crm_core_contact\OrganizationInterface;
 /**
  * @file
  * Provides default CRM Core Contact entities and the ability to create more.
@@ @@
  */
 function crm_core_contact_common_template_preprocess(string $entity_id, array &$variables) {
   $variables['view_mode'] = $variables['elements']['#view_mode'];
-  /** @var \Drupal\Core\Entity\EntityInterface $entity */
+  /** @var EntityInterface $entity */
   $entity = $variables['elements']['#' . $entity_id];
   $variables['crm_core_contact'] = $entity;

@@ @@
  *
  * @param string $entity_id
  *   Entity.
- * @param \Drupal\crm_core_contact\IndividualInterface|\Drupal\crm_core_contact\OrganizationInterface $entity
+ * @param IndividualInterface|OrganizationInterface $entity
  *   Entity.
  * @param string $view_mode
  *   View mode.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


47) modules/contrib/crm_core/modules/crm_core_activity/src/Form/ActivityTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_activity\Form;

+use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/crm_core/modules/crm_core_activity/src/Entity/ActivityType.php:96

    ---------- begin diff ----------
@@ @@
   /**
    * Type lazy plugin collection.
    *
-   * @var \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @var DefaultSingleLazyPluginCollection
    */
   protected $pluginCollection;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/crm_core/modules/crm_core_activity/src/Annotation/ActivityTypePlugin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_activity\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


50) modules/contrib/crm_core/modules/crm_core_activity/src/ActivityTypePluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/crm_core/modules/crm_core_activity/src/ActivityTypePluginInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Displays the contents of the label field on the activity entity.
    *
-   * @param \Drupal\crm_core_activity\ActivityInterface $entity
+   * @param ActivityInterface $entity
    *   The activity entity to build the label for.
    *
    * @return string
@@ @@
   /**
    * Returns visual representation of the activity in form of a render array.
    *
-   * @param \Drupal\crm_core_activity\ActivityInterface $entity
+   * @param ActivityInterface $entity
    *   The activity entity to build the label for.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


52) modules/contrib/crm_core/modules/crm_core_activity/src/ActivityTypeInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\crm_core_activity;

+use Drupal\Core\Plugin\DefaultSingleLazyPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;

@@ @@
   /**
    * Returns the plugin instance.
    *
-   * @return \Drupal\crm_core_activity\ActivityTypePluginInterface
+   * @return ActivityTypePluginInterface
    *   Instantiated plugin.
    */
   public function getPlugin();
@@ @@
   /**
    * Returns lazy plugin collection.
    *
-   * @return \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
+   * @return DefaultSingleLazyPluginCollection
    *   The plugin collection.
    */
   public function getPluginCollection();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


53) modules/contrib/crm_core/modules/crm_core_activity/src/ActivityInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Add a participant to the activity.
    *
-   * @param \Drupal\crm_core_contact\ContactInterface $contact
+   * @param ContactInterface $contact
    *   The contact to add as a participant.
    *
    * @return $this
@@ @@
   /**
    * Check if participant exists in the activity.
    *
-   * @param \Drupal\crm_core_contact\ContactInterface $contact
+   * @param ContactInterface $contact
    *   The contact to check in activity participant.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


54) modules/contrib/crm_core/modules/crm_core_activity/legacy/CRMFeedsActivityProcessor.inc:42

    ---------- begin diff ----------
@@ @@
       'uid' => $this->config['author'],
     ];

-    return entity_create('crm_core_activity', $values);
+    return \Drupal::service('entity_type.manager')->getStorage('crm_core_activity')->create($values);
   }

   /**
@@ @@
     }
     else {
       // We're replacing the existing activity. Only save the necessary.
-      $activity = db_query("SELECT created, activity_id, type FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $activity_id])->fetchObject();
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+      $activity = \Drupal::database()->query("SELECT created, activity_id, type FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $activity_id])->fetchObject();
       $activity->uid = $this->config['author'];
     }
     // Populate properties that are set by activity_object_prepare().
@@ @@
       return;
     }
     $count = $this->getLimit();
-    $activitys = db_query_range("SELECT a.activity_id FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => REQUEST_TIME - $time]);
+    $activitys = db_query_range("SELECT a.activity_id FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND c.created < :created", 0, $count, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time]);
     $activity_ids = [];
     foreach ($activitys as $activity) {
       $activity_ids[$activity->activity_id] = $activity->activity_id;
     }
     $this->entityDeleteMultiple($activity_ids);
-    if (db_query_range("SELECT 1 FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND a.created < :created", 0, 1, [':id' => $this->id, ':created' => REQUEST_TIME - $time])->fetchField()) {
+    if (db_query_range("SELECT 1 FROM {crm_core_activity} a JOIN {feeds_item} fi ON fi.entity_type = 'crm_core_activity' AND a.activity_id = fi.entity_id WHERE fi.id = :id AND a.created < :created", 0, 1, [':id' => $this->id, ':created' => \Drupal::time()->getRequestTime() - $time])->fetchField()) {
       return FEEDS_BATCH_ACTIVE;
     }
     return FEEDS_BATCH_COMPLETE;
@@ @@
       '#options' => $types,
       '#default_value' => $this->config['activity_type'],
     ];
-    $author = user_load($this->config['author']);
+    $author = \Drupal::service('entity_type.manager')->getStorage('user')->load($this->config['author']);
     $form['author'] = [
       '#type' => 'textfield',
       '#title' => t('Author'),
@@ @@
   public function setTargetElement(FeedsSource $source, $target_activity, $target_element, $value) {
     switch ($target_element) {
       case 'created':
-        $target_activity->created = feeds_to_unixtime($value, REQUEST_TIME);
+        $target_activity->created = feeds_to_unixtime($value, \Drupal::time()->getRequestTime());
         break;

       case 'feeds_source':
@@ @@
     foreach ($this->uniqueTargets($source, $result) as $target => $value) {
       switch ($target) {
         case 'activity_id':
-          $activity_id = db_query("SELECT activity_id FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $value])->fetchField();
+          // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+          // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+          $activity_id = \Drupal::database()->query("SELECT activity_id FROM {crm_core_activity} WHERE activity_id = :activity_id", [':activity_id' => $value])->fetchField();
           break;

         case 'feeds_source':
           if ($id = feeds_get_importer_id($this->config['activity_type'])) {
-            $activity_id = db_query("SELECT fs.feed_activity_id FROM {crm_core_activity} c JOIN {feeds_source} fs ON c.activity_id = fs.feed_activity_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
+            // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+            // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+            $activity_id = \Drupal::database()->query("SELECT fs.feed_activity_id FROM {crm_core_activity} c JOIN {feeds_source} fs ON c.activity_id = fs.feed_activity_id WHERE fs.id = :id AND fs.source = :source", [':id' => $id, ':source' => $value])->fetchField();
           }
           break;
       }
    ----------- end diff -----------

Applied rules:
 * DBQueryRector
 * EntityCreateRector
 * RequestTimeConstRector
 * UserLoadRector
 * ArgumentRemoverRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


55) modules/contrib/crm_core/modules/crm_core_activity/crm_core_activity.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\crm_core_activity\Entity\Activity;
 /**
  * @file
  * Provides an entity for recording a contact's activities.
@@ @@
  * If current entity to be deleted was only participant in Activity, that
  * activity will be removed.
  *
- * @param Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity ID to be looked for from participants.
  */
 function crm_core_activity_pre_delete_checker(EntityInterface $entity) {
@@ @@
   $crm_core_activities = $activity_storage->loadMultiple($activity_ids);

   foreach ($crm_core_activities as $crm_core_activity) {
-    /** @var \Drupal\crm_core_activity\Entity\Activity $crm_core_activity */
+    /** @var Activity $crm_core_activity */
     $participants = $crm_core_activity->get('activity_participants')->getValue();
     // Remove Individual from participants array.
     $participants = array_diff(array_column($participants, 'target_id'), [$entity_id]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_user_sync/tests/src/Kernel/Crm
         CoreUserSyncRelationTest.php" file, due to:                            
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_user_sync/src/Plugin/Block/Edi
         tOwnContactInformationBlock.php" file, due to:                         
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_user_sync/src/CrmCoreUserSyncR
         elation.php" file, due to:                                             
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_user_sync/crm_core_user_sync.m
         odule" file, due to:                                                   
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_match/tests/src/Unit/DefaultEn
         gineTest.php" file, due to:                                            
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_match/tests/src/Kernel/FieldMa
         tcherTest.php" file, due to:                                           
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_contact/tests/src/Unit/Contact
         ModuleTest.php" file, due to:                                          
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_contact/tests/src/Kernel/Organ
         izationCRUDTest.php" file, due to:                                     
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_contact/tests/src/Kernel/Local
         TaskTest.php" file, due to:                                            
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_contact/tests/src/Kernel/Indiv
         idualPrimaryFieldsTest.php" file, due to:                              
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_contact/tests/src/Kernel/Indiv
         idualCRUDTest.php" file, due to:                                       
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_contact/tests/src/Functional/O
         rganizationUiTest.php" file, due to:                                   
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_contact/tests/src/Functional/I
         ndividualUiTest.php" file, due to:                                     
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_contact/src/Menu/ContactLocalT
         askProvider.php" file, due to:                                         
         "Analyze error: "Class Drupal\entity\Menu\DefaultEntityLocalTaskProvider
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_contact/src/Entity/Organizatio
         n.php" file, due to:                                                   
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_contact/src/Entity/Individual.
         php" file, due to:                                                     
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_activity/tests/src/Kernel/Acti
         vityTypePluginTest.php" file, due to:                                  
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_activity/tests/src/Kernel/Acti
         vityEntityPreDeleteTest.php" file, due to:                             
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/crm_core/modules/crm_core_activity/tests/src/Functional/
         ActivityUiTest.php" file, due to:                                      
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/crm_core/crm_core.api.php" file, due
         to:                                                                    
         "Analyze error: "Class                                                 
         Drupal\entity\Revision\RevisionableContentEntityBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

