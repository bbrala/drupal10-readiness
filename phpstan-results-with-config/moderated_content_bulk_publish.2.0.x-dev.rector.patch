diff --git a/src/AdminModeration.php b/src/AdminModeration.php
index 8fb10b6..10d4d92 100644
--- a/src/AdminModeration.php
+++ b/src/AdminModeration.php
@@ -1,6 +1,7 @@
 <?php
 namespace Drupal\moderated_content_bulk_publish;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\moderated_content_bulk_publish\AdminHelper;
 
@@ -281,7 +282,7 @@ class AdminModeration
     /**
      * Returns config with module settings.
      *
-     * @return \Drupal\Core\Config\Config
+     * @return Config
      *   The config.
      */
     protected function getConfig() {
diff --git a/src/EventSubscriber/HandlerFor403AccessDenied.php b/src/EventSubscriber/HandlerFor403AccessDenied.php
index 0961ccc..704a617 100644
--- a/src/EventSubscriber/HandlerFor403AccessDenied.php
+++ b/src/EventSubscriber/HandlerFor403AccessDenied.php
@@ -2,8 +2,9 @@
 
 namespace Drupal\moderated_content_bulk_publish\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ExceptionEvent;
+use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\Core\EventSubscriber\HttpExceptionSubscriberBase;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
@@ -20,7 +21,7 @@ class HandlerFor403AccessDenied extends HttpExceptionSubscriberBase {
     return ['html'];
   }
 
-  public function on403(\Symfony\Component\HttpKernel\Event\ExceptionEvent $event) {
+  public function on403(ExceptionEvent $event) {
     $request = $event->getRequest();
     $is_anonymous = $this->currentUser->isAnonymous();
     $route_name = $request->attributes->get('_route');
@@ -35,7 +36,7 @@ class HandlerFor403AccessDenied extends HttpExceptionSubscriberBase {
       $new_path = str_replace('/latest', '', $current_path);
       \Drupal::logger('moderated_content_bulk_publish')->notice(utf8_encode('HandlerFor403AccessDenied: Redirecting from ' . $current_path . ' to ' . $new_path));
       $base_url = \Drupal::request()->getSchemeAndHttpHost();
-      $returnResponse = new \Drupal\Core\Routing\TrustedRedirectResponse($base_url . '/' . $langId . $new_path); // TODO: figure out how to do this the Drupal 8 way for internal path but didn't because of language afterthought in Drupal 8.
+      $returnResponse = new TrustedRedirectResponse($base_url . '/' . $langId . $new_path); // TODO: figure out how to do this the Drupal 8 way for internal path but didn't because of language afterthought in Drupal 8.
       $event->setResponse($returnResponse);
 
       return;
diff --git a/src/Plugin/Action/ArchiveCurrentRevisionAction.php b/src/Plugin/Action/ArchiveCurrentRevisionAction.php
index fc6f784..f6816e3 100644
--- a/src/Plugin/Action/ArchiveCurrentRevisionAction.php
+++ b/src/Plugin/Action/ArchiveCurrentRevisionAction.php
@@ -4,6 +4,7 @@ namespace Drupal\moderated_content_bulk_publish\Plugin\Action;
 
 //use Drupal\views_bulk_operations\Action\ViewsBulkOperationsActionBase;
 //use Drupal\views_bulk_operations\Action\ViewsBulkOperationsPreconfigurationInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -55,7 +56,7 @@ class ArchiveCurrentRevisionAction extends ActionBase/*extends ViewsBulkOperatio
     if ($user->hasPermission('moderated content bulk archive')) {
       \Drupal::logger('moderated_content_bulk_publish')->notice("Executing archive latest revision of ".$entity->label());
 
-      $adminModeration = new AdminModeration($entity, \Drupal\node\NodeInterface::NOT_PUBLISHED);
+      $adminModeration = new AdminModeration($entity, NodeInterface::NOT_PUBLISHED);
       $entity = $adminModeration->archive($error_message, $markup);
       if (!isset($entity) && !empty($error_message)) {
         \Drupal::Messenger()->addWarning(utf8_encode($error_message));
diff --git a/src/Plugin/Action/PublishLatestRevisionAction.php b/src/Plugin/Action/PublishLatestRevisionAction.php
index 1e6adf4..4c2850c 100644
--- a/src/Plugin/Action/PublishLatestRevisionAction.php
+++ b/src/Plugin/Action/PublishLatestRevisionAction.php
@@ -4,6 +4,7 @@ namespace Drupal\moderated_content_bulk_publish\Plugin\Action;
 
 //use Drupal\views_bulk_operations\Action\ViewsBulkOperationsActionBase;
 //use Drupal\views_bulk_operations\Action\ViewsBulkOperationsPreconfigurationInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -54,7 +55,7 @@ class PublishLatestRevisionAction extends ActionBase/*extends ViewsBulkOperation
     if ($user->hasPermission('moderated content bulk publish')) {
       \Drupal::logger('moderated_content_bulk_publish')->notice("Executing publish latest revision of ".$entity->label());
 
-      $adminModeration = new AdminModeration($entity, \Drupal\node\NodeInterface::PUBLISHED);
+      $adminModeration = new AdminModeration($entity, NodeInterface::PUBLISHED);
       $entity = $adminModeration->publish($error_message, $msgdetail_isToken, $msgdetail_isPublished, $msgdetail_isAbsoluteURL);
       if (!isset($entity) && !empty($error_message)) {
         // When publish () return NULL, we output messages and to stop the process.
diff --git a/src/Plugin/Action/UnpublishCurrentRevisionAction.php b/src/Plugin/Action/UnpublishCurrentRevisionAction.php
index 65db735..30b23e2 100644
--- a/src/Plugin/Action/UnpublishCurrentRevisionAction.php
+++ b/src/Plugin/Action/UnpublishCurrentRevisionAction.php
@@ -4,6 +4,7 @@ namespace Drupal\moderated_content_bulk_publish\Plugin\Action;
 
 //use Drupal\views_bulk_operations\Action\ViewsBulkOperationsActionBase;
 //use Drupal\views_bulk_operations\Action\ViewsBulkOperationsPreconfigurationInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -54,7 +55,7 @@ class UnpublishCurrentRevisionAction extends ActionBase/*extends ViewsBulkOperat
     if ($user->hasPermission('moderated content bulk unpublish')) {
       \Drupal::logger('moderated_content_bulk_publish')->notice("Executing unpublish latest revision of ".$entity->label());
 
-      $adminModeration = new AdminModeration($entity, \Drupal\node\NodeInterface::NOT_PUBLISHED);
+      $adminModeration = new AdminModeration($entity, NodeInterface::NOT_PUBLISHED);
       $entity = $adminModeration->unpublish();
 
       //check if published
