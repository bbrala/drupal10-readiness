diff --git a/content_editing_message.info.yml b/content_editing_message.info.yml
index 86c7dd3..65c4420 100644
--- a/content_editing_message.info.yml
+++ b/content_editing_message.info.yml
@@ -2,5 +2,4 @@ name: 'Content Editing Messages'
 type: module
 description: 'Show a message to content editors when editing a entity.'
 configure: entity.content_editing_message.collection
-core_version_requirement: ^8 || ^9
-core: '8.x'
+core_version_requirement: ^8 || ^9 || ^10
diff --git a/src/Controller/ContentEditingMessageListBuilder.php b/src/Controller/ContentEditingMessageListBuilder.php
index 2cae86d..3e8be02 100644
--- a/src/Controller/ContentEditingMessageListBuilder.php
+++ b/src/Controller/ContentEditingMessageListBuilder.php
@@ -48,7 +48,7 @@ public function buildHeader() {
   /**
    * Builds a row for an entity in the entity listing.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which to build the row.
    *
    * @return array
diff --git a/src/Form/ContentEditingMessageAddForm.php b/src/Form/ContentEditingMessageAddForm.php
index 57e5489..9ed7d5e 100644
--- a/src/Form/ContentEditingMessageAddForm.php
+++ b/src/Form/ContentEditingMessageAddForm.php
@@ -22,7 +22,7 @@ class ContentEditingMessageAddForm extends ContentEditingMessageFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
diff --git a/src/Form/ContentEditingMessageDeleteForm.php b/src/Form/ContentEditingMessageDeleteForm.php
index 2fdcce6..a1c20b0 100644
--- a/src/Form/ContentEditingMessageDeleteForm.php
+++ b/src/Form/ContentEditingMessageDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\content_editing_message\Form;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Url;
 use Drupal\Core\Form\FormStateInterface;
@@ -29,7 +30,7 @@ class ContentEditingMessageDeleteForm extends EntityConfirmFormBase {
    * forms, this typically takes the form of "Are you sure you want to
    * delete...", including the entity label.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Translatable markup.
    */
   public function getQuestion() {
@@ -44,7 +45,7 @@ public function getQuestion() {
    * The confirm text is used as the text in the button that confirms the
    * question posed by getQuestion().
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Translatable markup.
    */
   public function getConfirmText() {
@@ -58,7 +59,7 @@ public function getConfirmText() {
    * delete forms, this is typically the route that points at the list
    * controller.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL to go to if the user cancels the deletion.
    */
   public function getCancelUrl() {
@@ -73,7 +74,7 @@ public function getCancelUrl() {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/ContentEditingMessageEditForm.php b/src/Form/ContentEditingMessageEditForm.php
index 7df29be..09efa1a 100644
--- a/src/Form/ContentEditingMessageEditForm.php
+++ b/src/Form/ContentEditingMessageEditForm.php
@@ -22,7 +22,7 @@ class ContentEditingMessageEditForm extends ContentEditingMessageFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
diff --git a/src/Form/ContentEditingMessageFormBase.php b/src/Form/ContentEditingMessageFormBase.php
index 2076308..4236455 100644
--- a/src/Form/ContentEditingMessageFormBase.php
+++ b/src/Form/ContentEditingMessageFormBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\content_editing_message\Form;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\content_editing_message\ContentEditingMessageInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -24,14 +27,14 @@ class ContentEditingMessageFormBase extends EntityForm {
   /**
    * Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -63,7 +66,7 @@ public static function create(ContainerInterface $container) {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
@@ -79,7 +82,7 @@ public function buildForm(array $form, FormStateInterface $form_state) {
     // variables. If this is a new entity, it will be a new object with the
     // class of our entity. Drupal knows which class to call from the
     // annotation on our ContentEditingMessage class.
-    /** @var \Drupal\content_editing_message\ContentEditingMessageInterface $content_editing_message */
+    /** @var ContentEditingMessageInterface $content_editing_message */
     $content_editing_message = $this->entity;
 
     $form['id'] = [
@@ -214,7 +217,7 @@ private function getTypes($type) {
    *   The entity ID.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
@@ -239,7 +242,7 @@ public function exists($entity_id, array $element, FormStateInterface $form_stat
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
@@ -265,7 +268,7 @@ protected function actions(array $form, FormStateInterface $form_state) {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    */
   public function save(array $form, FormStateInterface $form_state) {
diff --git a/tests/src/Functional/CrudFormTest.php b/tests/src/Functional/CrudFormTest.php
index 5ccef07..99004b2 100644
--- a/tests/src/Functional/CrudFormTest.php
+++ b/tests/src/Functional/CrudFormTest.php
@@ -27,7 +27,7 @@ class CrudFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->createContentType(['type' => 'article']);
@@ -46,7 +46,10 @@ protected function setUp() {
    */
   public function testCanAccessContentMessages() {
     $this->drupalGet('/admin/config/content/messages');
-    $this->assertText('Content Editing Messages');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Content Editing Messages');
   }
 
 }
diff --git a/tests/src/Unit/ContentEditingMessageTest.php b/tests/src/Unit/ContentEditingMessageTest.php
index 610279a..19b27e2 100644
--- a/tests/src/Unit/ContentEditingMessageTest.php
+++ b/tests/src/Unit/ContentEditingMessageTest.php
@@ -17,7 +17,7 @@ class ContentEditingMessageTest extends UnitTestCase {
   /**
    * Test fixture.
    *
-   * @var \Drupal\content_editing_message\Entity\ContentEditingMessage
+   * @var ContentEditingMessage
    */
   protected $message;
 
@@ -45,7 +45,7 @@ class ContentEditingMessageTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->message = new ContentEditingMessage(static::$data, 'content_editing_message');
