diff --git a/advancedqueue.module b/advancedqueue.module
index ffb8f6f..95913e2 100644
--- a/advancedqueue.module
+++ b/advancedqueue.module
@@ -13,7 +13,7 @@ use Drupal\advancedqueue\Entity\QueueInterface;
 function advancedqueue_cron() {
   $queue_processor = \Drupal::service('advancedqueue.processor');
   $queue_storage = \Drupal::entityTypeManager()->getStorage('advancedqueue_queue');
-  /** @var \Drupal\advancedqueue\Entity\QueueInterface[] $queues */
+  /** @var QueueInterface[] $queues */
   $queues = $queue_storage->loadByProperties(['processor' => QueueInterface::PROCESSOR_CRON]);
   foreach ($queues as $queue) {
     $queue_processor->processQueue($queue);
diff --git a/advancedqueue.post_update.php b/advancedqueue.post_update.php
index f1e8166..3abe89e 100644
--- a/advancedqueue.post_update.php
+++ b/advancedqueue.post_update.php
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 /**
  * @file
  * Post update functions for Advanced Queue.
@@ -13,9 +15,9 @@ use Drupal\Core\Config\StorageInterface;
  * Replace the "advancedqueue_jobs" view with the updated version.
  */
 function advancedqueue_post_update_1() {
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $view_storage */
+  /** @var ConfigEntityStorageInterface $view_storage */
   $view_storage = \Drupal::entityTypeManager()->getStorage('view');
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $view */
+  /** @var ConfigEntityInterface $view */
   $view = $view_storage->load('advancedqueue_jobs');
   if (!$view) {
     return;
diff --git a/src/Annotation/AdvancedQueueBackend.php b/src/Annotation/AdvancedQueueBackend.php
index ca2a66d..b10c7d5 100644
--- a/src/Annotation/AdvancedQueueBackend.php
+++ b/src/Annotation/AdvancedQueueBackend.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\advancedqueue\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class AdvancedQueueBackend extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/AdvancedQueueJobType.php b/src/Annotation/AdvancedQueueJobType.php
index bd3b10c..7540da5 100644
--- a/src/Annotation/AdvancedQueueJobType.php
+++ b/src/Annotation/AdvancedQueueJobType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\advancedqueue\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class AdvancedQueueJobType extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/BackendManager.php b/src/BackendManager.php
index 9078db3..743d46d 100644
--- a/src/BackendManager.php
+++ b/src/BackendManager.php
@@ -30,9 +30,9 @@ class BackendManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/BackendPluginCollection.php b/src/BackendPluginCollection.php
index 9ebee0b..85e7d53 100644
--- a/src/BackendPluginCollection.php
+++ b/src/BackendPluginCollection.php
@@ -21,7 +21,7 @@ class BackendPluginCollection extends DefaultSingleLazyPluginCollection {
   /**
    * Constructs a new BackendPluginCollection object.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The manager to be used for instantiating plugins.
    * @param string $instance_id
    *   The ID of the plugin instance.
diff --git a/src/Commands/AdvancedQueueCommands.php b/src/Commands/AdvancedQueueCommands.php
index 93b2561..0d9f1fd 100644
--- a/src/Commands/AdvancedQueueCommands.php
+++ b/src/Commands/AdvancedQueueCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\advancedqueue\Commands;
 
+use Drupal\advancedqueue\Entity\QueueInterface;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\advancedqueue\Job;
 use Drupal\advancedqueue\ProcessorInterface;
@@ -17,23 +18,23 @@ class AdvancedQueueCommands extends DrushCommands {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The queue processor.
    *
-   * @var \Drupal\advancedqueue\ProcessorInterface
+   * @var ProcessorInterface
    */
   protected $processor;
 
   /**
    * Constructs a new AdvancedQueueCommands object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\advancedqueue\ProcessorInterface $processor
+   * @param ProcessorInterface $processor
    *   The queue processor.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ProcessorInterface $processor) {
@@ -55,7 +56,7 @@ class AdvancedQueueCommands extends DrushCommands {
    */
   public function process($queue_id) {
     $queue_storage = $this->entityTypeManager->getStorage('advancedqueue_queue');
-    /** @var \Drupal\advancedqueue\Entity\QueueInterface $queue */
+    /** @var QueueInterface $queue */
     $queue = $queue_storage->load($queue_id);
     if (!$queue) {
       throw new \Exception(dt('Could not find queue "@queue_id".', ['@queue_id' => $queue_id]));
@@ -92,7 +93,7 @@ class AdvancedQueueCommands extends DrushCommands {
    *   label: Label
    *   jobs: Jobs
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The output.
    *
    * @command advancedqueue:queue:list
@@ -108,7 +109,7 @@ class AdvancedQueueCommands extends DrushCommands {
     $queue_storage = $this->entityTypeManager->getStorage('advancedqueue_queue');
     $rows = [];
     foreach ($queue_storage->loadMultiple() as $queue) {
-      /** @var \Drupal\advancedqueue\Entity\QueueInterface $queue */
+      /** @var QueueInterface $queue */
       $jobs = [];
       foreach ($queue->getBackend()->countJobs() as $state => $count) {
         $jobs[] = sprintf('%s: %s', $count_labels[$state], $count);
diff --git a/src/Entity/Queue.php b/src/Entity/Queue.php
index 5dc60ed..a88009a 100644
--- a/src/Entity/Queue.php
+++ b/src/Entity/Queue.php
@@ -112,7 +112,7 @@ class Queue extends ConfigEntityBase implements QueueInterface {
   /**
    * The plugin collection that holds the backend plugin.
    *
-   * @var \Drupal\advancedqueue\BackendPluginCollection
+   * @var BackendPluginCollection
    */
   protected $pluginCollection;
 
@@ -237,7 +237,7 @@ class Queue extends ConfigEntityBase implements QueueInterface {
    *
    * Ensures the plugin collection is initialized before returning it.
    *
-   * @return \Drupal\advancedqueue\BackendPluginCollection
+   * @return BackendPluginCollection
    *   The backend plugin collection.
    */
   protected function getBackendCollection() {
diff --git a/src/Entity/QueueInterface.php b/src/Entity/QueueInterface.php
index 76bbc71..e70fba1 100644
--- a/src/Entity/QueueInterface.php
+++ b/src/Entity/QueueInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\advancedqueue\Entity;
 
+use Drupal\advancedqueue\Plugin\AdvancedQueue\Backend\BackendInterface;
 use Drupal\advancedqueue\Job;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
@@ -27,7 +28,7 @@ interface QueueInterface extends ConfigEntityInterface, EntityWithPluginCollecti
    * The job will be modified with the assigned queue ID, job ID, and
    * relevant timestamps.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    * @param int $delay
    *   The time, in seconds, after which the job will become available to
@@ -41,7 +42,7 @@ interface QueueInterface extends ConfigEntityInterface, EntityWithPluginCollecti
    * Each job will be modified with the assigned queue ID, job ID, and
    * relevant timestamps.
    *
-   * @param \Drupal\advancedqueue\Job[] $jobs
+   * @param Job[] $jobs
    *   The jobs.
    * @param int $delay
    *   The time, in seconds, after which the jobs will become available to
@@ -52,7 +53,7 @@ interface QueueInterface extends ConfigEntityInterface, EntityWithPluginCollecti
   /**
    * Gets the backend plugin.
    *
-   * @return \Drupal\advancedqueue\Plugin\AdvancedQueue\Backend\BackendInterface
+   * @return BackendInterface
    *   The backend plugin.
    */
   public function getBackend();
diff --git a/src/Event/JobEvent.php b/src/Event/JobEvent.php
index a8e418c..9bfdc66 100644
--- a/src/Event/JobEvent.php
+++ b/src/Event/JobEvent.php
@@ -15,14 +15,14 @@ class JobEvent extends Event {
   /**
    * The job.
    *
-   * @var \Drupal\advancedqueue\Job
+   * @var Job
    */
   protected $job;
 
   /**
    * Constructs a new JobEvent object.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    */
   public function __construct(Job $job) {
@@ -32,7 +32,7 @@ class JobEvent extends Event {
   /**
    * Gets the job.
    *
-   * @return \Drupal\advancedqueue\Job
+   * @return Job
    *   The job.
    */
   public function getJob() {
diff --git a/src/Form/DeleteJob.php b/src/Form/DeleteJob.php
index 2e7b8da..4be8a98 100644
--- a/src/Form/DeleteJob.php
+++ b/src/Form/DeleteJob.php
@@ -16,7 +16,7 @@ class DeleteJob extends ConfirmFormBase {
   /**
    * The queue.
    *
-   * @var \Drupal\advancedqueue\Entity\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
diff --git a/src/Form/QueueForm.php b/src/Form/QueueForm.php
index ff80007..a9932f2 100644
--- a/src/Form/QueueForm.php
+++ b/src/Form/QueueForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\advancedqueue\Form;
 
+use Drupal\advancedqueue\Plugin\AdvancedQueue\Backend\BackendInterface;
 use Drupal\advancedqueue\BackendManager;
 use Drupal\advancedqueue\Entity\QueueInterface;
 use Drupal\Component\Utility\Html;
@@ -17,14 +18,14 @@ class QueueForm extends EntityForm {
   /**
    * The backend plugin manager.
    *
-   * @var \Drupal\advancedqueue\BackendManager
+   * @var BackendManager
    */
   protected $backendManager;
 
   /**
    * Constructs a new QueueForm object.
    *
-   * @param \Drupal\advancedqueue\BackendManager $backend_manager
+   * @param BackendManager $backend_manager
    *   The backend plugin manager.
    */
   public function __construct(BackendManager $backend_manager) {
@@ -45,7 +46,7 @@ class QueueForm extends EntityForm {
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\advancedqueue\Entity\QueueInterface $queue */
+    /** @var QueueInterface $queue */
     $queue = $this->entity;
     $backends = array_column($this->backendManager->getDefinitions(), 'label', 'id');
     asort($backends);
@@ -157,10 +158,10 @@ class QueueForm extends EntityForm {
     parent::submitForm($form, $form_state);
 
     $values = $form_state->getValues();
-    /** @var \Drupal\advancedqueue\Plugin\AdvancedQueue\Backend\BackendInterface $backend */
+    /** @var BackendInterface $backend */
     $backend = $this->backendManager->createInstance($values['backend'], $form['configuration']['#default_configuration']);
     $backend->submitConfigurationForm($form['configuration'], $form_state);
-    /** @var \Drupal\advancedqueue\Entity\QueueInterface $queue */
+    /** @var QueueInterface $queue */
     $queue = $this->entity;
     $queue->setBackendConfiguration($backend->getConfiguration());
   }
diff --git a/src/Form/ReleaseJob.php b/src/Form/ReleaseJob.php
index 4e9c1c6..ce36859 100644
--- a/src/Form/ReleaseJob.php
+++ b/src/Form/ReleaseJob.php
@@ -16,7 +16,7 @@ class ReleaseJob extends ConfirmFormBase {
   /**
    * The queue.
    *
-   * @var \Drupal\advancedqueue\Entity\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
diff --git a/src/JobTypeManager.php b/src/JobTypeManager.php
index a675bcc..3042ad2 100644
--- a/src/JobTypeManager.php
+++ b/src/JobTypeManager.php
@@ -19,9 +19,9 @@ class JobTypeManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/AdvancedQueue/Backend/BackendBase.php b/src/Plugin/AdvancedQueue/Backend/BackendBase.php
index 9c8d69c..61caae7 100644
--- a/src/Plugin/AdvancedQueue/Backend/BackendBase.php
+++ b/src/Plugin/AdvancedQueue/Backend/BackendBase.php
@@ -17,7 +17,7 @@ abstract class BackendBase extends PluginBase implements BackendInterface, Conta
   /**
    * The time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
@@ -37,7 +37,7 @@ abstract class BackendBase extends PluginBase implements BackendInterface, Conta
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TimeInterface $time) {
diff --git a/src/Plugin/AdvancedQueue/Backend/BackendInterface.php b/src/Plugin/AdvancedQueue/Backend/BackendInterface.php
index ace42f3..279f29b 100644
--- a/src/Plugin/AdvancedQueue/Backend/BackendInterface.php
+++ b/src/Plugin/AdvancedQueue/Backend/BackendInterface.php
@@ -70,7 +70,7 @@ interface BackendInterface extends ConfigurableInterface, PluginFormInterface, P
    * The job will be modified with the assigned queue ID, job ID, and
    * relevant timestamps.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    * @param int $delay
    *   The time, in seconds, after which the job will become available to
@@ -84,7 +84,7 @@ interface BackendInterface extends ConfigurableInterface, PluginFormInterface, P
    * Each job will be modified with the assigned queue ID, job ID, and
    * relevant timestamps.
    *
-   * @param \Drupal\advancedqueue\Job[] $jobs
+   * @param Job[] $jobs
    *   The jobs.
    * @param int $delay
    *   The time, in seconds, after which the jobs will become available to
@@ -95,7 +95,7 @@ interface BackendInterface extends ConfigurableInterface, PluginFormInterface, P
   /**
    * Retries the given job.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    * @param int $delay
    *   The time, in seconds, after which the retried job will become available
@@ -109,7 +109,7 @@ interface BackendInterface extends ConfigurableInterface, PluginFormInterface, P
   /**
    * Claims the next available job for processing.
    *
-   * @return \Drupal\advancedqueue\Job|null
+   * @return Job|null
    *   The job, or NULL if none available.
    */
   public function claimJob();
@@ -117,7 +117,7 @@ interface BackendInterface extends ConfigurableInterface, PluginFormInterface, P
   /**
    * Called when a job has been successfully processed.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    */
   public function onSuccess(Job $job);
@@ -128,7 +128,7 @@ interface BackendInterface extends ConfigurableInterface, PluginFormInterface, P
    * Non-SQL backends that wish to preserve failed jobs can use this method
    * to populate a failure/dead-letter queue.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    */
   public function onFailure(Job $job);
diff --git a/src/Plugin/AdvancedQueue/Backend/Database.php b/src/Plugin/AdvancedQueue/Backend/Database.php
index ec37dd4..e3ab785 100644
--- a/src/Plugin/AdvancedQueue/Backend/Database.php
+++ b/src/Plugin/AdvancedQueue/Backend/Database.php
@@ -20,7 +20,7 @@ class Database extends BackendBase implements SupportsDeletingJobsInterface, Sup
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
@@ -33,9 +33,9 @@ class Database extends BackendBase implements SupportsDeletingJobsInterface, Sup
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection to use.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TimeInterface $time, Connection $connection) {
@@ -125,7 +125,7 @@ class Database extends BackendBase implements SupportsDeletingJobsInterface, Sup
       $this->connection->startTransaction();
     }
 
-    /** @var \Drupal\advancedqueue\Job $job */
+    /** @var Job $job */
     foreach ($jobs as $job) {
       $job->setQueueId($this->queueId);
       $job->setState(Job::STATE_QUEUED);
@@ -250,7 +250,7 @@ class Database extends BackendBase implements SupportsDeletingJobsInterface, Sup
   /**
    * Updates the given job.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    */
   protected function updateJob(Job $job) {
diff --git a/src/Plugin/AdvancedQueue/JobType/JobTypeInterface.php b/src/Plugin/AdvancedQueue/JobType/JobTypeInterface.php
index e0a7de5..828cb82 100644
--- a/src/Plugin/AdvancedQueue/JobType/JobTypeInterface.php
+++ b/src/Plugin/AdvancedQueue/JobType/JobTypeInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\advancedqueue\Plugin\AdvancedQueue\JobType;
 
+use Drupal\advancedqueue\JobResult;
 use Drupal\advancedqueue\Job;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 
@@ -47,10 +48,10 @@ interface JobTypeInterface extends PluginInspectionInterface {
   /**
    * Processes the given job.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    *
-   * @return \Drupal\advancedqueue\JobResult
+   * @return JobResult
    *   The job result.
    */
   public function process(Job $job);
diff --git a/src/Plugin/views/field/JobType.php b/src/Plugin/views/field/JobType.php
index b7c372c..0225799 100644
--- a/src/Plugin/views/field/JobType.php
+++ b/src/Plugin/views/field/JobType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\advancedqueue\Plugin\views\field;
 
+use Drupal\advancedqueue\JobTypeManager;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;
 
@@ -34,7 +35,7 @@ class JobType extends FieldPluginBase {
    *   The job type labels, keyed by ID.
    */
   public static function getOptions() {
-    /** @var \Drupal\advancedqueue\JobTypeManager $job_type_manager */
+    /** @var JobTypeManager $job_type_manager */
     $job_type_manager = \Drupal::service('plugin.manager.advancedqueue_job_type');
     return array_map(function ($definition) {
       return $definition['label'];
diff --git a/src/Processor.php b/src/Processor.php
index 903b231..0df37d8 100644
--- a/src/Processor.php
+++ b/src/Processor.php
@@ -20,28 +20,28 @@ class Processor implements ProcessorInterface {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The current time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The job type manager.
    *
-   * @var \Drupal\advancedqueue\JobTypeManager
+   * @var JobTypeManager
    */
   protected $jobTypeManager;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
@@ -55,11 +55,11 @@ class Processor implements ProcessorInterface {
   /**
    * Constructs a new Processor object.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The current time.
-   * @param \Drupal\advancedqueue\JobTypeManager $job_type_manager
+   * @param JobTypeManager $job_type_manager
    *   The queue job type manager.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher, TimeInterface $time, JobTypeManager $job_type_manager, LoggerInterface $logger = NULL) {
diff --git a/src/ProcessorInterface.php b/src/ProcessorInterface.php
index 866d6b2..3ab708f 100644
--- a/src/ProcessorInterface.php
+++ b/src/ProcessorInterface.php
@@ -15,7 +15,7 @@ interface ProcessorInterface {
    * Jobs will be claimed and processed one by one until the configured
    * processing time ($queue->getProcessingTime()) passes.
    *
-   * @param \Drupal\advancedqueue\Entity\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The queue.
    *
    * @return int
@@ -26,12 +26,12 @@ interface ProcessorInterface {
   /**
    * Processes the given job.
    *
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
-   * @param \Drupal\advancedqueue\Entity\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The parent queue.
    *
-   * @return \Drupal\advancedqueue\JobResult
+   * @return JobResult
    *   The job result.
    */
   public function processJob(Job $job, QueueInterface $queue);
diff --git a/src/QueueAccessControlHandler.php b/src/QueueAccessControlHandler.php
index d57afff..f779fa8 100644
--- a/src/QueueAccessControlHandler.php
+++ b/src/QueueAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\advancedqueue;
 
+use Drupal\advancedqueue\Entity\QueueInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -16,7 +17,7 @@ class QueueAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\advancedqueue\Entity\QueueInterface $entity */
+    /** @var QueueInterface $entity */
     $admin_permission = $entity->getEntityType()->getAdminPermission();
     if ($operation === 'delete') {
       if ($entity->isLocked()) {
diff --git a/src/QueueListBuilder.php b/src/QueueListBuilder.php
index a78c080..5de3040 100644
--- a/src/QueueListBuilder.php
+++ b/src/QueueListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\advancedqueue;
 
+use Drupal\advancedqueue\Entity\QueueInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
@@ -24,7 +25,7 @@ class QueueListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\advancedqueue\Entity\QueueInterface $entity */
+    /** @var QueueInterface $entity */
     $count_labels = [
       Job::STATE_QUEUED => $this->t('Queued'),
       Job::STATE_PROCESSING => $this->t('Processing'),
@@ -45,7 +46,7 @@ class QueueListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function getDefaultOperations(EntityInterface $entity) {
-    /** @var \Drupal\advancedqueue\Entity\QueueInterface $entity */
+    /** @var QueueInterface $entity */
     $operations = parent::getDefaultOperations($entity);
 
     if ($entity->getBackendId() === 'database') {
diff --git a/tests/src/Functional/QueueTest.php b/tests/src/Functional/QueueTest.php
index 22d814b..4f85e75 100644
--- a/tests/src/Functional/QueueTest.php
+++ b/tests/src/Functional/QueueTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\advancedqueue\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\advancedqueue\Entity\Queue;
 use Drupal\advancedqueue\Entity\QueueInterface;
 use Drupal\Tests\BrowserTestBase;
@@ -16,7 +17,7 @@ class QueueTest extends BrowserTestBase {
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
diff --git a/tests/src/Kernel/DatabaseBackendTest.php b/tests/src/Kernel/DatabaseBackendTest.php
index a9aa77e..3d0692e 100644
--- a/tests/src/Kernel/DatabaseBackendTest.php
+++ b/tests/src/Kernel/DatabaseBackendTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\advancedqueue\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\advancedqueue\Entity\QueueInterface;
 use Drupal\advancedqueue\Entity\Queue;
 use Drupal\advancedqueue\Job;
 use Drupal\Component\Datetime\TimeInterface;
@@ -13,17 +15,18 @@ use Drupal\KernelTests\KernelTestBase;
  */
 class DatabaseBackendTest extends KernelTestBase {
 
+  use ProphecyTrait;
   /**
    * The first tested queue.
    *
-   * @var \Drupal\advancedqueue\Entity\QueueInterface
+   * @var QueueInterface
    */
   protected $firstQueue;
 
   /**
    * The second tested queue.
    *
-   * @var \Drupal\advancedqueue\Entity\QueueInterface
+   * @var QueueInterface
    */
   protected $secondQueue;
 
@@ -249,7 +252,7 @@ class DatabaseBackendTest extends KernelTestBase {
    *   The expected queue ID.
    * @param int $expected_delay
    *   The expected delay.
-   * @param \Drupal\advancedqueue\Job $job
+   * @param Job $job
    *   The job.
    */
   protected function assertQueuedJob($expected_id, $expected_queue_id, $expected_delay, Job $job) {
diff --git a/tests/src/Kernel/ProcessorTest.php b/tests/src/Kernel/ProcessorTest.php
index f252b91..5a7be70 100644
--- a/tests/src/Kernel/ProcessorTest.php
+++ b/tests/src/Kernel/ProcessorTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\advancedqueue\Kernel;
 
+use Drupal\advancedqueue\Entity\QueueInterface;
+use Drupal\advancedqueue\ProcessorInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\advancedqueue\Entity\Queue;
 use Drupal\advancedqueue\Job;
 use Drupal\KernelTests\KernelTestBase;
@@ -15,14 +18,14 @@ class ProcessorTest extends KernelTestBase {
   /**
    * The test queue.
    *
-   * @var \Drupal\advancedqueue\Entity\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
   /**
    * The processor being tested.
    *
-   * @var \Drupal\advancedqueue\ProcessorInterface
+   * @var ProcessorInterface
    */
   protected $processor;
 
@@ -77,7 +80,7 @@ class ProcessorTest extends KernelTestBase {
     $num_processed = $this->processor->processQueue($this->queue);
     $this->assertEquals(4, $num_processed);
 
-    /** @var \Drupal\Core\Database\Connection $connection */
+    /** @var Connection $connection */
     $connection = $this->container->get('database');
     $raw_jobs = $connection->query('SELECT job_id, state, message FROM {advancedqueue}')->fetchAllAssoc('job_id', \PDO::FETCH_ASSOC);
     $this->assertEquals([
@@ -127,7 +130,7 @@ class ProcessorTest extends KernelTestBase {
     $counts = $this->queue->getBackend()->countJobs();
     $this->assertEquals([Job::STATE_FAILURE => 1], array_filter($counts));
 
-    /** @var \Drupal\Core\Database\Connection $connection */
+    /** @var Connection $connection */
     $connection = $this->container->get('database');
     $raw_jobs = $connection->query('SELECT job_id, state, num_retries FROM {advancedqueue}')->fetchAllAssoc('job_id', \PDO::FETCH_ASSOC);
     $this->assertEquals([
