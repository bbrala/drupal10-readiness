diff --git a/file_mdm_exif/src/ExifTagMapper.php b/file_mdm_exif/src/ExifTagMapper.php
index c7b39cc..66eb830 100644
--- a/file_mdm_exif/src/ExifTagMapper.php
+++ b/file_mdm_exif/src/ExifTagMapper.php
@@ -18,21 +18,21 @@ class ExifTagMapper implements ExifTagMapperInterface {
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The file_mdm logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -76,11 +76,11 @@ class ExifTagMapper implements ExifTagMapperInterface {
   /**
    * Constructs a ExifTagMapper object.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The file_mdm logger.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_service
+   * @param CacheBackendInterface $cache_service
    *   The cache service.
    */
   public function __construct(LoggerInterface $logger, ConfigFactoryInterface $config_factory, CacheBackendInterface $cache_service) {
@@ -219,7 +219,7 @@ class ExifTagMapper implements ExifTagMapperInterface {
    * @return array
    *   A simple array of with IFD and TAG, expressed as integers.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   When the IFD/TAG combination could not be found.
    */
   protected function stringToTag($value) {
@@ -272,7 +272,7 @@ class ExifTagMapper implements ExifTagMapperInterface {
    * @return int
    *   The IFD identifier.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   When the IFD could not be found.
    */
   protected function stringToIfd($value) {
diff --git a/file_mdm_exif/src/ExifTagMapperInterface.php b/file_mdm_exif/src/ExifTagMapperInterface.php
index 9b7d645..f6d903d 100644
--- a/file_mdm_exif/src/ExifTagMapperInterface.php
+++ b/file_mdm_exif/src/ExifTagMapperInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\file_mdm_exif;
 
+use Drupal\file_mdm\FileMetadataException;
 /**
  * Provides an interface for EXIF metadata ifds and tags mapper.
  */
@@ -23,7 +24,7 @@ interface ExifTagMapperInterface {
    *     'ifd' - the IFD EXIF integer identifier.
    *     'tag' - the TAG EXIF integer identifier.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   When wrong argument is passed, or if the IFD/TAG could not be found.
    */
   public function resolveKeyToIfdAndTag($key);
diff --git a/file_mdm_exif/src/Plugin/FileMetadata/Exif.php b/file_mdm_exif/src/Plugin/FileMetadata/Exif.php
index da000ed..a557198 100644
--- a/file_mdm_exif/src/Plugin/FileMetadata/Exif.php
+++ b/file_mdm_exif/src/Plugin/FileMetadata/Exif.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\file_mdm_exif\Plugin\FileMetadata;
 
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Drupal\file_mdm\Plugin\FileMetadata\FileMetadataPluginBase;
 use Drupal\file_mdm_exif\ExifTagMapperInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 use lsolesen\pel\PelEntry;
 use lsolesen\pel\PelExif;
 use lsolesen\pel\PelIfd;
@@ -29,21 +29,21 @@ class Exif extends FileMetadataPluginBase {
   /**
    * The MIME type guessing service.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;
 
   /**
    * The EXIF tag mapping service.
    *
-   * @var \Drupal\file_mdm_exif\ExifTagMapperInterface
+   * @var ExifTagMapperInterface
    */
   protected $tagMapper;
 
   /**
    * The PEL file object being processed.
    *
-   * @var \lsolesen\pel\PelJpeg|\lsolesen\pel\PelTiff
+   * @var PelJpeg|PelTiff
    */
   protected $pelFile;
 
@@ -56,18 +56,18 @@ class Exif extends FileMetadataPluginBase {
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_service
+   * @param CacheBackendInterface $cache_service
    *   The cache service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mime_type_guesser
+   * @param MimeTypesInterface $mime_type_guesser
    *   The MIME type mapping service.
-   * @param \Drupal\file_mdm_exif\ExifTagMapperInterface $tag_mapper
+   * @param ExifTagMapperInterface $tag_mapper
    *   The EXIF tag mapping service.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
    */
-  public function __construct(array $configuration, $plugin_id, array $plugin_definition, CacheBackendInterface $cache_service, ConfigFactoryInterface $config_factory, MimeTypeGuesserInterface $mime_type_guesser, ExifTagMapperInterface $tag_mapper, StreamWrapperManagerInterface $stream_wrapper_manager) {
+  public function __construct(array $configuration, $plugin_id, array $plugin_definition, CacheBackendInterface $cache_service, ConfigFactoryInterface $config_factory, MimeTypesInterface $mime_type_guesser, ExifTagMapperInterface $tag_mapper, StreamWrapperManagerInterface $stream_wrapper_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $cache_service, $config_factory, $stream_wrapper_manager);
     $this->mimeTypeGuesser = $mime_type_guesser;
     $this->tagMapper = $tag_mapper;
@@ -99,7 +99,7 @@ class Exif extends FileMetadataPluginBase {
   /**
    * Returns the PEL file object for the image file.
    *
-   * @return \lsolesen\pel\PelJpeg|\lsolesen\pel\PelTiff
+   * @return PelJpeg|PelTiff
    *   A PEL file object.
    */
   protected function getFile() {
@@ -163,14 +163,14 @@ class Exif extends FileMetadataPluginBase {
   /**
    * Returns a PelEntry.
    *
-   * @param \lsolesen\pel\PelTiff $tiff
+   * @param PelTiff $tiff
    *   A PelTiff object.
    * @param int $ifd_tag
    *   The IFD EXIF integer identifier.
    * @param int $key_tag
    *   The TAG EXIF integer identifier.
    *
-   * @return \lsolesen\pel\PelEntry
+   * @return PelEntry
    *   The PelEntry for the specified IFD and TAG.
    */
   protected function getEntry(PelTiff $tiff, $ifd_tag, $key_tag) {
@@ -317,9 +317,9 @@ class Exif extends FileMetadataPluginBase {
   /**
    * Adds or changes entries for an IFD.
    *
-   * @param lsolesen\pel\PelIfd $ifd
+   * @param PelIfd $ifd
    *   A PelIfd object.
-   * @param lsolesen\pel\PelEntry[] $entries
+   * @param PelEntry[] $entries
    *   An array of PelEntry objects.
    *
    * @return bool
diff --git a/file_mdm_exif/tests/src/Kernel/FileMetadataExifTest.php b/file_mdm_exif/tests/src/Kernel/FileMetadataExifTest.php
index 5bfb76f..c1a595d 100644
--- a/file_mdm_exif/tests/src/Kernel/FileMetadataExifTest.php
+++ b/file_mdm_exif/tests/src/Kernel/FileMetadataExifTest.php
@@ -45,13 +45,13 @@ class FileMetadataExifTest extends FileMetadataManagerTestBase {
     // Prepare a copy of test files.
     $this->fileSystem->copy('core/tests/fixtures/files/image-test.jpg', 'public://', FileSystemInterface::EXISTS_REPLACE);
     $this->fileSystem->copy('core/tests/fixtures/files/image-test.png', 'public://', FileSystemInterface::EXISTS_REPLACE);
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg', 'temporary://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg', 'temporary://', FileSystemInterface::EXISTS_REPLACE);
     // The image files that will be tested.
     $image_files = [
       [
         // Pass a path instead of the URI.
-        'uri' => drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg',
+        'uri' => \Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg',
         'count_keys' => 47,
         'test_keys' => [
           ['Orientation', 8],
@@ -86,7 +86,7 @@ class FileMetadataExifTest extends FileMetadataManagerTestBase {
       ],
       [
         // JPEG Image with GPS data.
-        'uri' => drupal_get_path('module', 'file_mdm') . '/tests/files/1024-2006_1011_093752.jpg',
+        'uri' => \Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/1024-2006_1011_093752.jpg',
         'count_keys' => 59,
         'test_keys' => [
           ['Orientation', 1],
@@ -105,7 +105,7 @@ class FileMetadataExifTest extends FileMetadataManagerTestBase {
       ],
       [
         // TIFF image.
-        'uri' => drupal_get_path('module', 'file_mdm') . '/tests/files/sample-1.tiff',
+        'uri' => \Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/sample-1.tiff',
         'count_keys' => 15,
         'test_keys' => [
           ['Orientation', 1],
@@ -171,7 +171,7 @@ class FileMetadataExifTest extends FileMetadataManagerTestBase {
     $fmdm = $this->container->get('file_metadata_manager');
 
     // Copy test file to public://.
-    $this->fileSystem->copy(drupal_get_path('module', 'image_effects') . '/tests/images/portrait-painting.jpg', 'public://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('image_effects') . '/tests/images/portrait-painting.jpg', 'public://', FileSystemInterface::EXISTS_REPLACE);
     $file_uri = 'public://portrait-painting.jpg';
     $file_metadata = $fmdm->uri($file_uri);
 
@@ -341,7 +341,7 @@ class FileMetadataExifTest extends FileMetadataManagerTestBase {
     $fmdm = $this->container->get('file_metadata_manager');
 
     // Copy test file to public://.
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/sample-1.tiff', 'public://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/sample-1.tiff', 'public://', FileSystemInterface::EXISTS_REPLACE);
     $file_uri = 'public://sample-1.tiff';
     $file_metadata = $fmdm->uri($file_uri);
 
diff --git a/file_mdm_font/src/Plugin/FileMetadata/Font.php b/file_mdm_font/src/Plugin/FileMetadata/Font.php
index 93f9ca5..1ca164f 100644
--- a/file_mdm_font/src/Plugin/FileMetadata/Font.php
+++ b/file_mdm_font/src/Plugin/FileMetadata/Font.php
@@ -66,7 +66,7 @@ class Font extends FileMetadataPluginBase {
    * @return bool
    *   TRUE if the key is valid.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   In case the key is invalid.
    */
   protected function validateKey($key, $method) {
diff --git a/src/Element/FileMetadataCaching.php b/src/Element/FileMetadataCaching.php
index 1bb958d..9091140 100644
--- a/src/Element/FileMetadataCaching.php
+++ b/src/Element/FileMetadataCaching.php
@@ -51,7 +51,7 @@ class FileMetadataCaching extends FormElement {
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/src/FileMetadata.php b/src/FileMetadata.php
index a5436fe..38114ca 100644
--- a/src/FileMetadata.php
+++ b/src/FileMetadata.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\file_mdm;
 
+use Drupal\file_mdm\Plugin\FileMetadataPluginInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\file_mdm\Plugin\FileMetadataPluginManager;
@@ -15,21 +16,21 @@ class FileMetadata implements FileMetadataInterface {
   /**
    * The FileMetadata plugin manager.
    *
-   * @var \Drupal\file_mdm\Plugin\FileMetadataPluginManager
+   * @var FileMetadataPluginManager
    */
   protected $pluginManager;
 
   /**
    * The file_mdm logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
@@ -61,18 +62,18 @@ class FileMetadata implements FileMetadataInterface {
   /**
    * The array of FileMetadata plugins for this URI.
    *
-   * @var \Drupal\file_mdm\Plugin\FileMetadataPluginInterface[]
+   * @var FileMetadataPluginInterface[]
    */
   protected $plugins = [];
 
   /**
    * Constructs a FileMetadata object.
    *
-   * @param \Drupal\file_mdm\Plugin\FileMetadataPluginManager $plugin_manager
+   * @param FileMetadataPluginManager $plugin_manager
    *   The file metadata plugin manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    * @param string $uri
    *   The URI of the file.
diff --git a/src/FileMetadataInterface.php b/src/FileMetadataInterface.php
index 28a2801..0f7aaa6 100644
--- a/src/FileMetadataInterface.php
+++ b/src/FileMetadataInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\file_mdm;
 
+use Drupal\file_mdm\Plugin\FileMetadataPluginInterface;
 /**
  * Provides an interface for file metadata objects.
  */
@@ -82,7 +83,7 @@ interface FileMetadataInterface {
    *   The id of the plugin whose instance is to be returned. If it is does
    *   not exist, an instance is created.
    *
-   * @return \Drupal\file_mdm\Plugin\FileMetadataPluginInterface|null
+   * @return FileMetadataPluginInterface|null
    *   The FileMetadata plugin instance. NULL if no plugin is found.
    */
   public function getFileMetadataPlugin($metadata_id);
diff --git a/src/FileMetadataManager.php b/src/FileMetadataManager.php
index dde309d..009be77 100644
--- a/src/FileMetadataManager.php
+++ b/src/FileMetadataManager.php
@@ -20,66 +20,66 @@ class FileMetadataManager implements FileMetadataManagerInterface {
   /**
    * The FileMetadata plugin manager.
    *
-   * @var \Drupal\file_mdm\Plugin\FileMetadataPluginManager
+   * @var FileMetadataPluginManager
    */
   protected $pluginManager;
 
   /**
    * The file_mdm logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * The array of FileMetadata objects currently in use.
    *
-   * @var \Drupal\file_mdm\FileMetadataInterface[]
+   * @var FileMetadataInterface[]
    */
   protected $files = [];
 
   /**
    * Constructs a FileMetadataManager object.
    *
-   * @param \Drupal\file_mdm\Plugin\FileMetadataPluginManager $plugin_manager
+   * @param FileMetadataPluginManager $plugin_manager
    *   The FileMetadata plugin manager.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The file_mdm logger.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_service
+   * @param CacheBackendInterface $cache_service
    *   The cache service.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
    */
   public function __construct(FileMetadataPluginManager $plugin_manager, LoggerInterface $logger, ConfigFactoryInterface $config_factory, FileSystemInterface $file_system, CacheBackendInterface $cache_service, StreamWrapperManagerInterface $stream_wrapper_manager) {
diff --git a/src/FileMetadataManagerInterface.php b/src/FileMetadataManagerInterface.php
index 62a0b51..2d8a7c0 100644
--- a/src/FileMetadataManagerInterface.php
+++ b/src/FileMetadataManagerInterface.php
@@ -24,7 +24,7 @@ interface FileMetadataManagerInterface {
    * @param string $uri
    *   The URI to a file.
    *
-   * @return \Drupal\file_mdm\FileMetadataInterface|null
+   * @return FileMetadataInterface|null
    *   The FileMetadata object for the specified URI.
    */
   public function uri($uri);
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index febcb81..a4d9efb 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\file_mdm\Form;
 
+use Drupal\file_mdm\Plugin\FileMetadataPluginInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -17,16 +18,16 @@ class SettingsForm extends ConfigFormBase {
   /**
    * An array containing the available metadata plugins.
    *
-   * @var \Drupal\file_mdm\Plugin\FileMetadataPluginInterface[]
+   * @var FileMetadataPluginInterface[]
    */
   protected $metadataPlugins = [];
 
   /**
    * Constructs a SettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\file_mdm\Plugin\FileMetadataPluginManager $manager
+   * @param FileMetadataPluginManager $manager
    *   The file metadata plugin manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, FileMetadataPluginManager $manager) {
diff --git a/src/Plugin/Annotation/FileMetadata.php b/src/Plugin/Annotation/FileMetadata.php
index 7632ce0..61077bc 100644
--- a/src/Plugin/Annotation/FileMetadata.php
+++ b/src/Plugin/Annotation/FileMetadata.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\file_mdm\Plugin\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class FileMetadata extends Plugin {
    *
    * The string should be wrapped in a @Translation().
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -34,7 +35,7 @@ class FileMetadata extends Plugin {
    *
    * The string should be wrapped in a @Translation().
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Plugin/FileMetadata/FileMetadataPluginBase.php b/src/Plugin/FileMetadata/FileMetadataPluginBase.php
index 78a4cf2..8d57162 100644
--- a/src/Plugin/FileMetadata/FileMetadataPluginBase.php
+++ b/src/Plugin/FileMetadata/FileMetadataPluginBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\file_mdm\Plugin\FileMetadata;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Config\Config;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -21,21 +23,21 @@ abstract class FileMetadataPluginBase extends PluginBase implements FileMetadata
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
@@ -101,11 +103,11 @@ abstract class FileMetadataPluginBase extends PluginBase implements FileMetadata
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_service
+   * @param CacheBackendInterface $cache_service
    *   The cache service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, CacheBackendInterface $cache_service, ConfigFactoryInterface $config_factory, StreamWrapperManagerInterface $stream_wrapper_manager) {
@@ -151,7 +153,7 @@ abstract class FileMetadataPluginBase extends PluginBase implements FileMetadata
    * @param bool $editable
    *   If TRUE returns the editable configuration object.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig|\Drupal\Core\Config\Config
+   * @return ImmutableConfig|Config
    *   The ImmutableConfig of the Config object for this plugin.
    */
   protected function getConfigObject($editable = FALSE) {
@@ -306,7 +308,7 @@ abstract class FileMetadataPluginBase extends PluginBase implements FileMetadata
    * @return mixed
    *   The metadata retrieved from the file.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   In case there were significant errors reading from file.
    */
   abstract protected function doGetMetadataFromFile();
diff --git a/src/Plugin/FileMetadata/GetImageSize.php b/src/Plugin/FileMetadata/GetImageSize.php
index 4922edf..faf87db 100644
--- a/src/Plugin/FileMetadata/GetImageSize.php
+++ b/src/Plugin/FileMetadata/GetImageSize.php
@@ -40,7 +40,7 @@ class GetImageSize extends FileMetadataPluginBase {
    * @return bool
    *   TRUE if the key is valid.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   In case the key is invalid.
    */
   protected function validateKey($key, $method) {
diff --git a/src/Plugin/FileMetadataPluginInterface.php b/src/Plugin/FileMetadataPluginInterface.php
index b44a952..933059f 100644
--- a/src/Plugin/FileMetadataPluginInterface.php
+++ b/src/Plugin/FileMetadataPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\file_mdm\Plugin;
 
+use Drupal\file_mdm\FileMetadataException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ -27,7 +28,7 @@ interface FileMetadataPluginInterface extends ContainerFactoryPluginInterface, P
    *
    * @return $this
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   If no URI is specified.
    */
   public function setUri($uri);
@@ -74,7 +75,7 @@ interface FileMetadataPluginInterface extends ContainerFactoryPluginInterface, P
    *
    * @return $this
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   If no hash is specified.
    */
   public function setHash($hash);
@@ -116,7 +117,7 @@ interface FileMetadataPluginInterface extends ContainerFactoryPluginInterface, P
    * @return bool
    *   TRUE if metadata was loaded successfully, FALSE otherwise.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   In case there were significant errors reading from file.
    */
   public function loadMetadataFromFile();
@@ -127,7 +128,7 @@ interface FileMetadataPluginInterface extends ContainerFactoryPluginInterface, P
    * @return bool
    *   TRUE if metadata was loaded successfully, FALSE otherwise.
    *
-   * @throws \Drupal\file_mdm\FileMetadataException
+   * @throws FileMetadataException
    *   In case of significant errors.
    */
   public function loadMetadataFromCache();
diff --git a/src/Plugin/FileMetadataPluginManager.php b/src/Plugin/FileMetadataPluginManager.php
index 3eedf97..3e6b6b9 100644
--- a/src/Plugin/FileMetadataPluginManager.php
+++ b/src/Plugin/FileMetadataPluginManager.php
@@ -16,7 +16,7 @@ class FileMetadataPluginManager extends DefaultPluginManager {
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
diff --git a/tests/src/Kernel/FileMetadataManagerTest.php b/tests/src/Kernel/FileMetadataManagerTest.php
index 00c8168..a65275e 100644
--- a/tests/src/Kernel/FileMetadataManagerTest.php
+++ b/tests/src/Kernel/FileMetadataManagerTest.php
@@ -25,12 +25,12 @@ class FileMetadataManagerTest extends FileMetadataManagerTestBase {
   public function testFileMetadata() {
     // Prepare a copy of test files.
     $this->fileSystem->copy('core/tests/fixtures/files/image-test.png', 'public://', FileSystemInterface::EXISTS_REPLACE);
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
     // The image files that will be tested.
     $image_files = [
       [
         // Pass a path instead of the URI.
-        'uri' => drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg',
+        'uri' => \Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg',
         'count_keys' => 7,
         'test_keys' => [
           [0, 100],
@@ -69,7 +69,7 @@ class FileMetadataManagerTest extends FileMetadataManagerTestBase {
       ],
       [
         // JPEG Image with GPS data.
-        'uri' => drupal_get_path('module', 'file_mdm') . '/tests/files/1024-2006_1011_093752.jpg',
+        'uri' => \Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/1024-2006_1011_093752.jpg',
         'count_keys' => 7,
         'test_keys' => [
           [0, 1024],
@@ -82,7 +82,7 @@ class FileMetadataManagerTest extends FileMetadataManagerTestBase {
       ],
       [
         // TIFF image.
-        'uri' => drupal_get_path('module', 'file_mdm') . '/tests/files/sample-1.tiff',
+        'uri' => \Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/sample-1.tiff',
         'count_keys' => 5,
         'test_keys' => [
           [0, 174],
@@ -171,7 +171,7 @@ class FileMetadataManagerTest extends FileMetadataManagerTestBase {
    */
   public function testFileMetadataCaching() {
     // Prepare a copy of test files.
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg', 'public://', FileSystemInterface::EXISTS_REPLACE);
     $this->fileSystem->copy('core/tests/fixtures/files/image-test.gif', 'public://', FileSystemInterface::EXISTS_REPLACE);
     $this->fileSystem->copy('core/tests/fixtures/files/image-test.png', 'public://', FileSystemInterface::EXISTS_REPLACE);
 
@@ -192,7 +192,7 @@ class FileMetadataManagerTest extends FileMetadataManagerTestBase {
       ],
       [
         // Pass a path instead of the URI.
-        'uri' => drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg',
+        'uri' => \Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg',
         'cache' => FALSE,
         'delete' => FALSE,
         'count_keys' => 7,
@@ -315,7 +315,7 @@ class FileMetadataManagerTest extends FileMetadataManagerTestBase {
     $fmdm = $this->container->get('file_metadata_manager');
 
     // Copy the test file to a temp location.
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg', 'temporary://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg', 'temporary://', FileSystemInterface::EXISTS_REPLACE);
 
     // Test setting local temp path explicitly. The files should be parsed
     // even if not available on the URI.
@@ -371,7 +371,7 @@ class FileMetadataManagerTest extends FileMetadataManagerTestBase {
     $file_system = $this->container->get('file_system');
 
     // Copy the test file to dummy-remote wrapper.
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg', 'dummy-remote://', FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg', 'dummy-remote://', FileSystemInterface::EXISTS_REPLACE);
 
     foreach ($image_files as $image_file) {
       $file_metadata = $fmdm->uri($image_file['uri']);
@@ -407,7 +407,7 @@ class FileMetadataManagerTest extends FileMetadataManagerTestBase {
     // Copy a test file to test directory.
     $test_directory = 'public://test-images/';
     $this->fileSystem->prepareDirectory($test_directory, FileSystemInterface::CREATE_DIRECTORY);
-    $this->fileSystem->copy(drupal_get_path('module', 'file_mdm') . '/tests/files/test-exif.jpeg', $test_directory, FileSystemInterface::EXISTS_REPLACE);
+    $this->fileSystem->copy(\Drupal::service('extension.list.module')->getPath('file_mdm') . '/tests/files/test-exif.jpeg', $test_directory, FileSystemInterface::EXISTS_REPLACE);
 
     // Get file metadata object.
     $file_metadata = $fmdm->uri('public://test-images/test-exif.jpeg');
diff --git a/tests/src/Kernel/FileMetadataManagerTestBase.php b/tests/src/Kernel/FileMetadataManagerTestBase.php
index 006478a..e8d4a7a 100644
--- a/tests/src/Kernel/FileMetadataManagerTestBase.php
+++ b/tests/src/Kernel/FileMetadataManagerTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\file_mdm\Kernel;
 
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\file_mdm\FileMetadataInterface;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -13,7 +14,7 @@ abstract class FileMetadataManagerTestBase extends KernelTestBase {
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
@@ -29,7 +30,7 @@ abstract class FileMetadataManagerTestBase extends KernelTestBase {
   /**
    * Returns the count of metadata keys found in the file.
    *
-   * @param \Drupal\file_mdm\FileMetadataInterface $file_md
+   * @param FileMetadataInterface $file_md
    *   The FileMetadata object.
    * @param string $metadata_id
    *   The file metadata plugin id.
