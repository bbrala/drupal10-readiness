modules/contrib/oai_pmh_harvester/oai_pmh_harvester.install
modules/contrib/oai_pmh_harvester/oai_pmh_harvester.module
modules/contrib/oai_pmh_harvester/src/Batch/DecodeBatch.php
modules/contrib/oai_pmh_harvester/src/Batch/HarvestRecordsInDateRangeBatch.php
modules/contrib/oai_pmh_harvester/src/Batch/HarvestSpecificRecordsBatch.php
modules/contrib/oai_pmh_harvester/src/Controller/StatusPageController.php
modules/contrib/oai_pmh_harvester/src/Event/HarvestPreMergeEvent.php
modules/contrib/oai_pmh_harvester/src/Exceptions/ConfigException.php
modules/contrib/oai_pmh_harvester/src/Exceptions/DatabaseException.php
modules/contrib/oai_pmh_harvester/src/Exceptions/EndpointException.php
modules/contrib/oai_pmh_harvester/src/Form/ActionsForm.php
modules/contrib/oai_pmh_harvester/src/Form/ConfigForm.php
modules/contrib/oai_pmh_harvester/src/Form/InspectForm.php
modules/contrib/oai_pmh_harvester/src/Harvester.php
modules/contrib/oai_pmh_harvester/src/Service/DecoderService.php
modules/contrib/oai_pmh_harvester/src/Service/HarvesterService.php
modules/contrib/oai_pmh_harvester/src/Util.php
modules/contrib/oai_pmh_harvester/tests/src/Functional/InstallTest.php
modules/contrib/oai_pmh_harvester/tests/src/Unit/UtilTest.php

13 files with changes
=====================

1) modules/contrib/oai_pmh_harvester/tests/src/Unit/UtilTest.php:80

    ---------- begin diff ----------
@@ @@
     // Mock the Drupal::time container.
     $container = new ContainerBuilder();
     Drupal::setContainer($container);
-    $mockTime = $this->getMockBuilder('Drupal\Component\Datetime\TimeInterface')
-        ->disableOriginalConstructor()
-        ->getMock();
+    $mockTime = $this->createMock('Drupal\Component\Datetime\TimeInterface');
     $mockTime->method('getRequestTime')->willReturn(12345);
     $container->set('datetime.time', $mockTime);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/oai_pmh_harvester/tests/src/Functional/InstallTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\oai_pmh_harvester\Functional;

+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * Make sure the site still works.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testLoadFront() {
     $this->drupalGet('<front>');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Log in');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Log in');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/oai_pmh_harvester/src/Util.php:75

    ---------- begin diff ----------
@@ @@
    *
    * Concatenates the title, container title and collection title.
    *
-   * @param \RudolfByker\PhpMarcCsl\MarcCslVariables $csl
+   * @param MarcCslVariables $csl
    *   The Marc-CSL variables object.
    *
    * @return string
@@ @@
    *
    * Concatenates all authors from the given CSL Variables.
    *
-   * @param \RudolfByker\PhpMarcCsl\MarcCslVariables $csl
+   * @param MarcCslVariables $csl
    *   The Marc-CSL variables object.
    *
    * @return string
@@ @@
   /**
    * Get the harvest interval from config.
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\ConfigException
+   * @throws ConfigException
    */
   public static function getHarvestInterval(): \DateInterval {
     $config_name = self::SETTINGS_KEY;
@@ @@
   /**
    * Get the URL for the OAI-PMH endpoint from config.
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\ConfigException
+   * @throws ConfigException
    */
   public static function getOaiPmhUrl(): string {
     $config_name = self::SETTINGS_KEY;
@@ @@
   /**
    * Get an OAI-PMH harvester, based on the current settings.
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\ConfigException
+   * @throws ConfigException
    */
   public static function getHarvester(): Harvester {
     return new Harvester(
@@ @@
    * @return \DateTimeImmutable
    *   The datestamp of the first record of the OAI-PMH provider.
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\EndpointException
+   * @throws EndpointException
    */
   public static function getEarliestDatestamp(Endpoint $endpoint): \DateTimeImmutable {
     $identify = $endpoint->identify();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/oai_pmh_harvester/src/Service/HarvesterService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oai_pmh_harvester\Service;

+use Scriptotek\Marc\Exceptions\RecordNotFound;
 use Drupal\Core\Database\Connection;
 use Drupal\oai_pmh_harvester\Exceptions\DatabaseException;
 use Drupal\oai_pmh_harvester\Util;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   public Connection $db;

@@ @@
   /**
    * The Marc to CSL decoder service.
    *
-   * @var \Drupal\oai_pmh_harvester\Service\DecoderService
+   * @var DecoderService
    */
   public DecoderService $decoder;

@@ @@
   /**
    * HarvesterService constructor.
    *
-   * @param \Drupal\Core\Database\Connection $db
+   * @param Connection $db
    *   The database connection to use.
-   * @param \Drupal\oai_pmh_harvester\Service\DecoderService $decoder
+   * @param DecoderService $decoder
    *   The Marc to CSL decoder service.
    */
   public function __construct(Connection $db, DecoderService $decoder) {
@@ @@
    *   Multiple values: [id, action]
    *   Action is one of "deleted" or "updated".
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\DatabaseException
+   * @throws DatabaseException
    *   When the provided XML element does not contain a MARC record.
-   * @throws \Scriptotek\Marc\Exceptions\RecordNotFound
+   * @throws RecordNotFound
    *   When the DB merge query fails.
    */
   public function harvestOne(SimpleXMLElement $xml): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/oai_pmh_harvester/src/Service/DecoderService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oai_pmh_harvester\Service;

+use Scriptotek\Marc\Exceptions\RecordNotFound;
 use Drupal\oai_pmh_harvester\Event\HarvestPreMergeEvent;
 use RudolfByker\PhpMarcCsl\MarcCslVariables;
 use Scriptotek\Marc\Record;
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   public $dispatcher;

@@ @@
   /**
    * DecoderService constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $dispatcher) {
@@ @@
    * @param \SimpleXMLElement $xml
    *   The Marc XML record to decode.
    *
-   * @return \RudolfByker\PhpMarcCsl\MarcCslVariables
+   * @return MarcCslVariables
    *   The decoded CSL data.
    *
-   * @throws \Scriptotek\Marc\Exceptions\RecordNotFound
+   * @throws RecordNotFound
    *   When the provided XML element is not a MARC record.
    */
   public function decodeOne(SimpleXMLElement $xml): MarcCslVariables {
@@ @@
     $csl = new MarcCslVariables(Record::fromSimpleXMLElement($xml));

     // Allow other modules to modify the $csl object before we return it.
-    $this->dispatcher->dispatch(HarvestPreMergeEvent::EVENT_NAME, new HarvestPreMergeEvent($xml, $csl));
+    $this->dispatcher->dispatch(new HarvestPreMergeEvent($xml, $csl), HarvestPreMergeEvent::EVENT_NAME);

     return $csl;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


6) modules/contrib/oai_pmh_harvester/src/Harvester.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oai_pmh_harvester;

+use Drupal\oai_pmh_harvester\Exceptions\DatabaseException;
+use Drupal\oai_pmh_harvester\Exceptions\EndpointException;
+use Scriptotek\Marc\Exceptions\RecordNotFound;
 use Drupal\oai_pmh_harvester\Service\HarvesterService;
 use Phpoaipmh\Endpoint;
 use Phpoaipmh\Exception\OaipmhException;
@@ @@
    * Maybe this is a misnomer. Anyway, it parses the harvested XML results and
    * writes them to the database.
    *
-   * @var \Drupal\oai_pmh_harvester\Service\HarvesterService
+   * @var HarvesterService
    */
   private HarvesterService $service;

@@ @@
   /**
    * The OAI-PMH endpoint.
    *
-   * @var \Phpoaipmh\Endpoint
+   * @var Endpoint
    */
   private Endpoint $endpoint;

@@ @@
    * @param \DateTimeImmutable|null $last
    *   The end ("until" value) of the last harvest run's range.
    *   Null if the harvester should start from the very beginning.
-   * @param \Drupal\oai_pmh_harvester\Service\HarvesterService $service
+   * @param HarvesterService $service
    *   The harvester service. Maybe this is a misnomer. Anyway, it parses the
    *   harvested XML results and writes them to the database.
    */
@@ @@
   /**
    * Perform one harvest run.
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\DatabaseException
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\EndpointException
-   * @throws \Phpoaipmh\Exception\OaipmhException
-   * @throws \Scriptotek\Marc\Exceptions\RecordNotFound
+   * @throws DatabaseException
+   * @throws EndpointException
+   * @throws OaipmhException
+   * @throws RecordNotFound
    */
   public function run() {
     [$harvest_from, $harvest_until] = $this->getHarvestRange();
@@ @@
    * @return \DateTimeImmutable[]
    *   An array of DateTimeImmutable objects: [$harvest_from, $harvest_until].
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\EndpointException
+   * @throws EndpointException
    */
   public function getHarvestRange(): array {
     // If harvest_from is NULL, get the earliestDatestamp from "Identify".
@@ @@
    * @return \DateTimeImmutable
    *   The datestamp of the first record of the OAI-PMH provider.
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\EndpointException
+   * @throws EndpointException
    */
   public function getEarliestDatestamp(): \DateTimeImmutable {
     return Util::getEarliestDatestamp($this->endpoint);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/oai_pmh_harvester/src/Form/InspectForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oai_pmh_harvester\Form;

+use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;

@@ @@
   /**
    * The state.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $db;

@@ @@
   /**
    * Inspect form constructor.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger.
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *   The state.
-   * @param \Drupal\Core\Database\Connection $db
+   * @param Connection $db
    *   The database connection.
    */
   public function __construct(
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException
+   * @throws ServiceCircularReferenceException
    */
   public static function create(ContainerInterface $container) {
     return new static(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/oai_pmh_harvester/src/Form/ActionsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oai_pmh_harvester\Form;

+use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\Messenger;
@@ @@
   /**
    * The state.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected State $state;

@@ @@
   /**
    * Actions form constructor.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger.
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *   The state.
    */
   public function __construct(
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException
+   * @throws ServiceCircularReferenceException
    */
   public static function create(ContainerInterface $container) {
     return new static(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/oai_pmh_harvester/src/Event/HarvestPreMergeEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oai_pmh_harvester\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use SimpleXMLElement;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * An event that should fire just before harvested data is merged into the DB.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/oai_pmh_harvester/src/Controller/StatusPageController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oai_pmh_harvester\Controller;

+use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\State\State;
@@ @@
   /**
    * The state.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected State $state;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected Connection $db;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException
+   * @throws ServiceCircularReferenceException
    */
   public static function create(ContainerInterface $container): StatusPageController {
     $instance = new static();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/oai_pmh_harvester/src/Batch/HarvestRecordsInDateRangeBatch.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oai_pmh_harvester\Batch;

+use Drupal\oai_pmh_harvester\Service\HarvesterService;
 use Drupal\oai_pmh_harvester\Util;
 use Phpoaipmh\Endpoint;

@@ @@
       $context['results']['ids']['deleted'] = [];
     }

-    /** @var \Drupal\oai_pmh_harvester\Service\HarvesterService $record_processor */
+    /** @var HarvesterService $record_processor */
     $record_processor = \Drupal::service('oai_pmh_harvester.harvester');
     $format = 'marcxml';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/oai_pmh_harvester/src/Batch/DecodeBatch.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oai_pmh_harvester\Batch;

+use Scriptotek\Marc\Exceptions\RecordNotFound;
+use Drupal\oai_pmh_harvester\Service\DecoderService;
 use Drupal\Core\Database\Database;
 use Drupal\oai_pmh_harvester\Util;

@@ @@
    * @param object $record
    *   The record to re-decode.
    *
-   * @throws \Scriptotek\Marc\Exceptions\RecordNotFound
+   * @throws RecordNotFound
    * @throws \Exception
    */
   private static function processOne(object $record): void {
     // Decode the data and extract the authors and titles.
     $xml = new \SimpleXMLElement($record->harvested_data);
-    /** @var \Drupal\oai_pmh_harvester\Service\DecoderService $decoder */
+    /** @var DecoderService $decoder */
     $decoder = \Drupal::service('oai_pmh_harvester.decoder');
     $csl = $decoder->decodeOne($xml->metadata->record);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/oai_pmh_harvester/oai_pmh_harvester.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\oai_pmh_harvester\Exceptions\ConfigException;
+use Drupal\oai_pmh_harvester\Exceptions\DatabaseException;
+use Drupal\oai_pmh_harvester\Exceptions\EndpointException;
+use Phpoaipmh\Exception\OaipmhException;
+use Scriptotek\Marc\Exceptions\RecordNotFound;
 /**
  * @file
  * Contains oai_pmh_harvester.module.
@@ @@
 /**
  * Implements hook_cron().
  *
- * @throws \Drupal\oai_pmh_harvester\Exceptions\ConfigException
- * @throws \Drupal\oai_pmh_harvester\Exceptions\DatabaseException
- * @throws \Drupal\oai_pmh_harvester\Exceptions\EndpointException
- * @throws \Phpoaipmh\Exception\OaipmhException
- * @throws \Scriptotek\Marc\Exceptions\RecordNotFound
+ * @throws ConfigException
+ * @throws DatabaseException
+ * @throws EndpointException
+ * @throws OaipmhException
+ * @throws RecordNotFound
  */
 function oai_pmh_harvester_cron(): void {
   $config = Drupal::config('oai_pmh_harvester.settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 13 files have been changed by Rector                                      

