modules/contrib/media_files_handler/media_files_handler.module
modules/contrib/media_files_handler/src/Service/HandlerService.php
modules/contrib/media_files_handler/tests/src/Kernel/HandlerServiceMultilanguageTest.php
modules/contrib/media_files_handler/tests/src/Kernel/HandlerServiceTest.php

3 files with changes
====================

1) modules/contrib/media_files_handler/tests/src/Kernel/HandlerServiceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_files_handler\Kernel;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\file\Entity\File;
 use Drupal\file\FileInterface;
@@ @@
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The media storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $mediaStorage;

@@ @@
    *
    * @param string $filename
    *   String filename with extension.
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type.
    * @param bool $status
    *   The status of created entity.
    *
-   * @return \Drupal\media\Entity\Media
+   * @return Media
    *   A media item.
    */
   protected function generateMedia($filename, MediaTypeInterface $media_type, $status = TRUE): Media {
@@ @@

     // File should have moved to private.
     $this->assertFileExists('private://text.txt');
-    $this->assertFileNotExists('public://text.txt');
+    $this->assertFileDoesNotExist('public://text.txt');
   }

   /**
@@ @@
     $media->save();

     $this->assertFileExists('private://' . $filename);
-    $this->assertFileNotExists('public://' . $filename);
+    $this->assertFileDoesNotExist('public://' . $filename);
   }

   /**
@@ @@

     // Make sure the file is initially stored as private.
     $this->assertFileExists('private://' . $filename);
-    $this->assertFileNotExists('public://' . $filename);
+    $this->assertFileDoesNotExist('public://' . $filename);

     // Set Media Entity status to published.
     $media->setPublished();
@@ @@

     // The file should no be public.
     $this->assertFileExists('public://' . $filename);
-    $this->assertFileNotExists('private://' . $filename);
+    $this->assertFileDoesNotExist('private://' . $filename);
   }

   /**
    * Get specific file of media entity.
    *
-   * @param \Drupal\media\MediaTypeInterface $mediaType
+   * @param MediaTypeInterface $mediaType
    *   The bundle.
-   * @param \Drupal\media\Entity\Media $media
+   * @param Media $media
    *   The Media entity.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file.
    */
   private function getFile(MediaTypeInterface $mediaType, Media $media): FileInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/media_files_handler/tests/src/Kernel/HandlerServiceMultilanguageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\media_files_handler\Kernel;

+use Drupal\Core\State\StateInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\file\Entity\File;
 use Drupal\file\FileInterface;
@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The auto created media type.
    *
-   * @var \Drupal\media\MediaTypeInterface
+   * @var MediaTypeInterface
    */
   private $mediaType;

@@ @@
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The media storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $mediaStorage;

@@ @@
    *
    * @param string $filename
    *   String filename with extension.
-   * @param \Drupal\media\MediaTypeInterface $media_type
+   * @param MediaTypeInterface $media_type
    *   The media type.
    * @param bool $status
    *   The status of the created entity.
    *
-   * @return \Drupal\media\Entity\Media
+   * @return Media
    *   A media item.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function generateMedia($filename, MediaTypeInterface $media_type, $status = TRUE): Media {
     file_put_contents('public://' . $filename, NULL);
@@ @@
   /**
    * Get specific file of media entity.
    *
-   * @param \Drupal\media\Entity\Media $media
+   * @param Media $media
    *   The Media entity.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file.
    */
   private function getFile(Media $media): FileInterface {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/media_files_handler/src/Service/HandlerService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_files_handler\Service;

+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\file\Entity\File;
@@ @@
   /**
    * The default delete action.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    *
    * @todo Expose as Configuration.
    */
@@ @@
   /**
    * Drupal file_system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The media storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $mediaStorage;

@@ @@
   /**
    * The file storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $fileStorage;

@@ @@
   /**
    * The Media Files Handler logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a new HandlerService object.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(FileSystemInterface $file_system, EntityTypeManagerInterface $entity_type_manager, LoggerInterface $logger) {
     $this->fileSystem = $file_system;
@@ @@
   /**
    * Loop through all fields to find those which reference a file entity.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    *
    * @return array
@@ @@
    * This can be many files depending on usage of
    * translations and revisions. The default revision is not included!
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current media entity.
    * @param array $excluded_languages
    *   Languages to skip deletion.
@@ @@
    * This can be many files depending on usage of
    * translations and revisions. The default revision is not included!
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current media entity.
    * @param array $excluded_languages
    *   Languages to skip deletion.
@@ @@
   /**
    * Delete or mark file as temporary.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   The file.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function deleteFile(File $file): void {
     $uri = $file->getFileUri();
@@ @@
   /**
    * Loop through all languages of the current entity to find all used files.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    * @param array $excluded_languages
    *   Languages to skip deletion.
@@ @@
    * E.g. if the media entity is unpublished, a user can only access
    * the file, if permission to view the unpublished media entity is granted.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   The file.
    */
   private function moveFileToPrivateStorage(File $file): void {
@@ @@
     }

     // Move file. This will also delete image styles.
-    $result = file_move($file, $new_uri);
+    $result = \Drupal::service('file.repository')->move($file, $new_uri);

     $this->logger->info(
       'Moved file ' . $file->id() . ' to private storage.'
@@ @@
    *
    * E.g. when a media entity is unpublished.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    */
   public function moveAllFilesToPrivate(MediaInterface $entity) :void {
     $files_to_move = $this->getAllFiles($entity);

-    /** @var \Drupal\file\Entity\File[] $files */
+    /** @var File[] $files */
     $files = $this->fileStorage->loadMultiple($files_to_move);
     foreach ($files as $file) {
       $this->moveFileToPrivateStorage($file);
@@ @@
    *
    * E.g. when a media entity is deleted.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function removeAllFilesOfEntity(MediaInterface $entity) :void {
     $files_to_delete = $this->getAllFiles($entity);

-    /** @var \Drupal\file\Entity\File[] $files */
+    /** @var File[] $files */
     $files = $this->fileStorage->loadMultiple($files_to_delete);
     foreach ($files as $file) {
       $this->deleteFile($file);
@@ @@
    *
    * E.g. when a media entity is published.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    */
   public function moveDefaultRevisionFilesToPublic(MediaInterface $entity): void {
@@ @@
         }

         // Move file.
-        file_move($file, $new_uri);
+        \Drupal::service('file.repository')->move($file, $new_uri);

         $this->logger->info(
           'Moved file ' . $file->id() . ' to public storage.'
@@ @@
   /**
    * Handle the replacement of files in an entity.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function handleNewFiles(MediaInterface $entity): void {
     // Check if the entity has a new file.
@@ @@
   /**
    * Remove files of specific revision.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function removeFilesOfEntityRevision(MediaInterface $entity) :void {
     $fields = $this->getAllFieldsWithFiles($entity);
@@ @@
   /**
    * Remove files of specific revision.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The current entity.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function removeAllFilesOfTranslation(MediaInterface $entity) :void {
     $current_translation_to_delete = $entity->language()->getId();
@@ @@
   /**
    * Get all files used by Media entity.
    *
-   * @param \Drupal\media\MediaInterface $entity
+   * @param MediaInterface $entity
    *   The Media Entity.
    * @param array $excluded_languages
    *   Languages to skip deletion.
    ----------- end diff -----------

Applied rules:
 * FileMoveRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 3 files have been changed by Rector                                       

