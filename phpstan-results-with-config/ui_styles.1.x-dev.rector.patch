diff --git a/modules/ui_styles_layout_builder/src/ConfigureSectionFormInterface.php b/modules/ui_styles_layout_builder/src/ConfigureSectionFormInterface.php
index c57578f..9d75ace 100644
--- a/modules/ui_styles_layout_builder/src/ConfigureSectionFormInterface.php
+++ b/modules/ui_styles_layout_builder/src/ConfigureSectionFormInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\ui_styles_layout_builder;
 
+use Drupal\layout_builder\Section;
 use Drupal\Core\Form\FormInterface;
 
 /**
@@ -14,7 +15,7 @@ interface ConfigureSectionFormInterface extends FormInterface {
   /**
    * Get the layout section being modified.
    *
-   * @return \Drupal\layout_builder\Section|null
+   * @return Section|null
    *   The layout section.
    */
   public function getCurrentSection();
diff --git a/modules/ui_styles_layout_builder/src/EventSubscriber/BlockComponentRenderArraySubscriber.php b/modules/ui_styles_layout_builder/src/EventSubscriber/BlockComponentRenderArraySubscriber.php
index 22fea12..8efe86f 100644
--- a/modules/ui_styles_layout_builder/src/EventSubscriber/BlockComponentRenderArraySubscriber.php
+++ b/modules/ui_styles_layout_builder/src/EventSubscriber/BlockComponentRenderArraySubscriber.php
@@ -17,14 +17,14 @@ class BlockComponentRenderArraySubscriber implements EventSubscriberInterface {
   /**
    * The style manager.
    *
-   * @var \Drupal\ui_styles\StylePluginManagerInterface
+   * @var StylePluginManagerInterface
    */
   protected $styleManager;
 
   /**
    * Dependency injection.
    *
-   * @param \Drupal\ui_styles\StylePluginManagerInterface $style_manager
+   * @param StylePluginManagerInterface $style_manager
    *   The style manager.
    */
   public function __construct(StylePluginManagerInterface $style_manager) {
@@ -48,7 +48,7 @@ class BlockComponentRenderArraySubscriber implements EventSubscriberInterface {
   /**
    * Add each component's block styles to the render array.
    *
-   * @param \Drupal\layout_builder\Event\SectionComponentBuildRenderArrayEvent $event
+   * @param SectionComponentBuildRenderArrayEvent $event
    *   The section component render event.
    */
   public function onBuildRender(SectionComponentBuildRenderArrayEvent $event): void {
diff --git a/modules/ui_styles_layout_builder/src/LayoutBuilderTrustedCallbacks.php b/modules/ui_styles_layout_builder/src/LayoutBuilderTrustedCallbacks.php
index dd1008e..0bb7001 100644
--- a/modules/ui_styles_layout_builder/src/LayoutBuilderTrustedCallbacks.php
+++ b/modules/ui_styles_layout_builder/src/LayoutBuilderTrustedCallbacks.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\ui_styles_layout_builder;
 
+use Drupal\layout_builder\SectionStorageInterface;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Security\TrustedCallbackInterface;
 
@@ -27,7 +28,7 @@ class LayoutBuilderTrustedCallbacks implements TrustedCallbackInterface {
   public static function preRender(array $element): array {
     $styles_manager = \Drupal::service('plugin.manager.ui_styles');
     $layout_builder = $element['layout_builder'];
-    /** @var \Drupal\layout_builder\SectionStorageInterface $section_storage */
+    /** @var SectionStorageInterface $section_storage */
     $section_storage = $element['#section_storage'];
     $delta = 0;
     $max = \count($section_storage->getSections());
diff --git a/modules/ui_styles_layout_builder/tests/src/Functional/UiStylesLayoutBuilderTest.php b/modules/ui_styles_layout_builder/tests/src/Functional/UiStylesLayoutBuilderTest.php
index 740ef23..116ff8c 100644
--- a/modules/ui_styles_layout_builder/tests/src/Functional/UiStylesLayoutBuilderTest.php
+++ b/modules/ui_styles_layout_builder/tests/src/Functional/UiStylesLayoutBuilderTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\ui_styles\Functional;
 
+use Drupal\node\NodeInterface;
 use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;
 use Drupal\Tests\BrowserTestBase;
 
@@ -32,11 +33,10 @@ class UiStylesLayoutBuilderTest extends BrowserTestBase {
    */
   protected $strictConfigSchema = FALSE;
   // phpcs:enable
-
   /**
    * A test node to which comments will be posted.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
diff --git a/modules/ui_styles_layout_builder/ui_styles_layout_builder.module b/modules/ui_styles_layout_builder/ui_styles_layout_builder.module
index eb54784..ea4a8b6 100644
--- a/modules/ui_styles_layout_builder/ui_styles_layout_builder.module
+++ b/modules/ui_styles_layout_builder/ui_styles_layout_builder.module
@@ -6,6 +6,11 @@
  */
 
 declare(strict_types = 1);
+use Drupal\layout_builder\Form\ConfigureBlockFormBase;
+use Drupal\ui_styles_layout_builder\ConfigureSectionFormInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\layout_builder\Plugin\Field\FieldType\LayoutSectionItem;
+use Drupal\layout_builder\Section;
 
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -27,7 +32,7 @@ use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;
 function ui_styles_layout_builder_form_alter(array &$form, FormStateInterface $formState): void {
   if ($form['#form_id'] === 'layout_builder_add_block' || $form['#form_id'] === 'layout_builder_update_block') {
     $styles_manager = \Drupal::service('plugin.manager.ui_styles');
-    /** @var \Drupal\layout_builder\Form\ConfigureBlockFormBase $formObject */
+    /** @var ConfigureBlockFormBase $formObject */
     $formObject = $formState->getFormObject();
     $component = $formObject->getCurrentComponent();
 
@@ -72,7 +77,7 @@ function ui_styles_layout_builder_form_alter(array &$form, FormStateInterface $f
  * which is later persisted to section storage by layout builder's base form.
  */
 function _ui_styles_layout_builder_submit_block_form(array $form, FormStateInterface $formState): void {
-  /** @var \Drupal\layout_builder\Form\ConfigureBlockFormBase $formObject */
+  /** @var ConfigureBlockFormBase $formObject */
   $formObject = $formState->getFormObject();
   $component = $formObject->getCurrentComponent();
 
@@ -141,7 +146,7 @@ function ui_styles_layout_builder_preprocess_block(array &$variables): void {
  * Modify the configuration form for layout builder sections (layouts).
  */
 function ui_styles_layout_builder_form_layout_builder_configure_section_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
-  /** @var \Drupal\ui_styles_layout_builder\ConfigureSectionFormInterface $formObject */
+  /** @var ConfigureSectionFormInterface $formObject */
   $formObject = $form_state->getFormObject();
   // Alter form only on section update, not on section creation, because of
   // the section delta shift.
@@ -190,7 +195,7 @@ function _ui_styles_layout_builder_submit_section_form(array $form, FormStateInt
       $selected[$id] = $value;
     }
   }
-  /** @var \Drupal\ui_styles_layout_builder\ConfigureSectionFormInterface $formObject */
+  /** @var ConfigureSectionFormInterface $formObject */
   $formObject = $formState->getFormObject();
   $section = $formObject->getCurrentSection();
   if ($section != NULL) {
@@ -228,7 +233,7 @@ function ui_styles_layout_builder_element_info_alter(array &$types): void {
  * - using hook_element_info_alter() while previewing.
  */
 function ui_styles_layout_builder_entity_view_alter(array &$build, EntityInterface $entity, LayoutEntityDisplayInterface $display): void {
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   if ($display->isLayoutBuilderEnabled()) {
     $styles_manager = \Drupal::service('plugin.manager.ui_styles');
     $layout_builder = &$build['_layout_builder'];
@@ -241,12 +246,12 @@ function ui_styles_layout_builder_entity_view_alter(array &$build, EntityInterfa
         return;
       }
       foreach ($entity->get($layout_field_name) as $delta => $section_item) {
-        /** @var Drupal\layout_builder\Plugin\Field\FieldType\LayoutSectionItem $section_item */
+        /** @var LayoutSectionItem $section_item */
         if (!$layout_builder[$delta]) {
           // We may encounter some issue when manipulating the last section.
           continue;
         }
-        /** @var \Drupal\layout_builder\Section $section */
+        /** @var Section $section */
         $section = $section_item->get('section')->getValue();
         $selected = $section->getThirdPartySetting('ui_styles', 'selected') ?: [];
         /** @var string $extra */
diff --git a/modules/ui_styles_library/src/Controller/StylesLibraryController.php b/modules/ui_styles_library/src/Controller/StylesLibraryController.php
index f6febd8..70c2258 100644
--- a/modules/ui_styles_library/src/Controller/StylesLibraryController.php
+++ b/modules/ui_styles_library/src/Controller/StylesLibraryController.php
@@ -16,7 +16,7 @@ class StylesLibraryController extends ControllerBase {
   /**
    * Styles manager service.
    *
-   * @var \Drupal\ui_styles\StylePluginManagerInterface
+   * @var StylePluginManagerInterface
    */
   protected $stylesManager;
 
diff --git a/src/StylePluginManager.php b/src/StylePluginManager.php
index 6b2c053..60950a4 100644
--- a/src/StylePluginManager.php
+++ b/src/StylePluginManager.php
@@ -25,14 +25,14 @@ class StylePluginManager extends DefaultPluginManager implements StylePluginMana
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
@@ -53,15 +53,15 @@ class StylePluginManager extends DefaultPluginManager implements StylePluginMana
   /**
    * Constructs a new StylePluginManager object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, TranslationInterface $translation, CacheBackendInterface $cache_backend, MessengerInterface $messenger) {
diff --git a/tests/src/Kernel/PluginTest.php b/tests/src/Kernel/PluginTest.php
index 0e8985f..b5efe30 100644
--- a/tests/src/Kernel/PluginTest.php
+++ b/tests/src/Kernel/PluginTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\ui_styles\Kernel;
 
+use Drupal\ui_styles\StylePluginManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -27,7 +28,7 @@ class PluginTest extends KernelTestBase {
    * Tests that examples can be provided by YAML files.
    */
   public function testDetectedExamples(): void {
-    /** @var \Drupal\ui_styles\StylePluginManagerInterface $styles_manager */
+    /** @var StylePluginManagerInterface $styles_manager */
     $styles_manager = $this->container->get('plugin.manager.ui_styles');
     /** @var array $definitions */
     $definitions = $styles_manager->getDefinitions();
@@ -58,14 +59,14 @@ class PluginTest extends KernelTestBase {
 
     // Test when the module overriding the definition is executed before.
     \module_set_weight('ui_styles_test_disabled', -1);
-    /** @var \Drupal\ui_styles\StylePluginManagerInterface $examples_manager */
+    /** @var StylePluginManagerInterface $examples_manager */
     $examples_manager = $this->container->get('plugin.manager.ui_styles');
     $this->assertArrayHasKey('test', $examples_manager->getDefinitions());
 
     // Test when the module overriding the definition is executed after.
     \module_set_weight('ui_styles_test_disabled', 1);
     \drupal_flush_all_caches();
-    /** @var \Drupal\ui_styles\StylePluginManagerInterface $examples_manager */
+    /** @var StylePluginManagerInterface $examples_manager */
     $examples_manager = $this->container->get('plugin.manager.ui_styles');
     $this->assertArrayNotHasKey('test', $examples_manager->getDefinitions());
   }
diff --git a/tests/src/Unit/UiStylesPluginManagerTest.php b/tests/src/Unit/UiStylesPluginManagerTest.php
index 8504eac..7d3a85b 100644
--- a/tests/src/Unit/UiStylesPluginManagerTest.php
+++ b/tests/src/Unit/UiStylesPluginManagerTest.php
@@ -4,6 +4,9 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\ui_styles\Unit;
 
+use Drupal\Component\Plugin\Discovery\DiscoveryInterface;
+use Symfony\Component\DependencyInjection\TaggedContainerInterface;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -27,28 +30,28 @@ class UiStylesPluginManagerTest extends UnitTestCase {
   /**
    * The Style plugin manager.
    *
-   * @var \Drupal\ui_styles\StylePluginManager
+   * @var StylePluginManager
    */
   protected $stylePluginManager;
 
   /**
    * The plugin discovery.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface
+   * @var DiscoveryInterface
    */
   protected $discovery;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The container.
    *
-   * @var \Symfony\Component\DependencyInjection\TaggedContainerInterface
+   * @var TaggedContainerInterface
    */
   protected $container;
 
@@ -94,13 +97,13 @@ class UiStylesPluginManagerTest extends UnitTestCase {
     \Drupal::setContainer($container);
 
     // Set up for this class.
-    /** @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject $moduleHandler */
+    /** @var ModuleHandlerInterface|MockObject $moduleHandler */
     $moduleHandler = $this->createMock(ModuleHandlerInterface::class);
     $moduleHandler->expects($this->any())
       ->method('getModuleDirectories')
       ->willReturn([]);
 
-    /** @var \Drupal\Core\Extension\ThemeHandlerInterface|\PHPUnit\Framework\MockObject\MockObject $themeHandler */
+    /** @var ThemeHandlerInterface|MockObject $themeHandler */
     $themeHandler = $this->createMock(ThemeHandlerInterface::class);
     $themeHandler->expects($this->any())
       ->method('getThemeDirectories')
diff --git a/tests/src/Unit/UiStylesRenderElementTest.php b/tests/src/Unit/UiStylesRenderElementTest.php
index 65f42b0..59045a9 100644
--- a/tests/src/Unit/UiStylesRenderElementTest.php
+++ b/tests/src/Unit/UiStylesRenderElementTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\ui_styles\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Render\ElementInfoManager;
 use Drupal\Core\Security\TrustedCallbackInterface;
 use Drupal\Core\Theme\Registry;
@@ -23,21 +24,21 @@ class UiStylesRenderElementTest extends UnitTestCase {
   /**
    * The theme registry.
    *
-   * @var \Drupal\Core\Theme\Registry|\PHPUnit\Framework\MockObject\MockObject
+   * @var Registry|MockObject
    */
   protected $themeRegistry;
 
   /**
    * The element info plugin manager.
    *
-   * @var \Drupal\Core\Render\ElementInfoManager|\PHPUnit\Framework\MockObject\MockObject
+   * @var ElementInfoManager|MockObject
    */
   protected $elementInfoManager;
 
   /**
    * The dependency injection container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;
 
