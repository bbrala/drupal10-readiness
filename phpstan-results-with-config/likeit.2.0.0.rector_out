modules/contrib/likeit/likeit.install
modules/contrib/likeit/likeit.module
modules/contrib/likeit/likeit.views.inc
modules/contrib/likeit/src/Access/LikeItCsrfTokenGenerator.php
modules/contrib/likeit/src/Controller/LikeItController.php
modules/contrib/likeit/src/Entity/LikeIt.php
modules/contrib/likeit/src/Entity/LikeItInterface.php
modules/contrib/likeit/src/Entity/LikeItViewsData.php
modules/contrib/likeit/src/Event/LikeItEvent.php
modules/contrib/likeit/src/Event/LikeItEvents.php
modules/contrib/likeit/src/Form/LikeItSettingsForm.php
modules/contrib/likeit/src/LikeItExtraRender.php
modules/contrib/likeit/src/Plugin/views/field/LikeItTargetEntityTitleViewsField.php
modules/contrib/likeit/src/Plugin/views/field/LikeItTargetEntityViewViewsField.php
modules/contrib/likeit/src/Plugin/views/relationship/LikeItViewsRelationship.php

9 files with changes
====================

1) modules/contrib/likeit/src/Plugin/views/relationship/LikeItViewsRelationship.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The kill switch service.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $killSwitch;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $kill_switch
+   * @param KillSwitch $kill_switch
    *   The kill switch service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, KillSwitch $kill_switch) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/likeit/src/Plugin/views/field/LikeItTargetEntityViewViewsField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\likeit\Plugin\views\field;

+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
       $view_mode = $this->options['view_mode'];
       $output = $view_builder->view($target_entity, $view_mode);

-      return render($output);
+      return \Drupal::service('renderer')->render($output);
     }

     return FALSE;
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/likeit/src/Plugin/views/field/LikeItTargetEntityTitleViewsField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\likeit\Plugin\views\field;

+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
 use Drupal\views\ResultRow;
@@ @@
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
       ->getStorage($entity_target_type)->load($entity_target_id);
     $link = $target_entity->toLink();

-    return render($link->toRenderable());
+    return \Drupal::service('renderer')->render($link->toRenderable());
   }

 }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/likeit/src/Form/LikeItSettingsForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfoService;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a LikeItSettings object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info_service
+   * @param EntityTypeBundleInfoInterface $bundle_info_service
    *   The bundle info service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/likeit/src/Event/LikeItEvent.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The target entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * Constructs an like/unlike event object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The target entity.
    */
   public function __construct(EntityInterface $entity) {
@@ @@
   /**
    * Get the target entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The liked/unliked target entity.
    */
   public function getEntity() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/likeit/src/Entity/LikeItInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\likeit\Entity;

+use Drupal\Core\Entity\EntityBase;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\user\EntityOwnerInterface;
@@ @@
   /**
    * Gets the Likeit target entity.
    *
-   * @return \Drupal\Core\Entity\EntityBase
+   * @return EntityBase
    *   Target entity.
    */
   public function getTargetEntity();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/likeit/src/Controller/LikeItController.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Custom token generator service.
    *
-   * @var \Drupal\likeit\Access\LikeItCsrfTokenGenerator
+   * @var LikeItCsrfTokenGenerator
    */
   protected $csrfGenerator;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * LikeItController constructor.
    *
-   * @param \Drupal\likeit\Access\LikeItCsrfTokenGenerator $token_generator
+   * @param LikeItCsrfTokenGenerator $token_generator
    *   The the custom token generator.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(LikeItCsrfTokenGenerator $token_generator, RequestStack $request_stack, EventDispatcherInterface $event_dispatcher) {
@@ @@
           $event = new LikeItEvent($object);

           // Use the event dispatcher service to notify any event subscribers.
-          $this->eventDispatcher->dispatch(LikeItEvents::LIKE, $event);
+          $this->eventDispatcher->dispatch($event, LikeItEvents::LIKE);
         }
       }
       catch (\LogicException $e) {
@@ @@
           $event = new LikeItEvent($object);

           // Use the event dispatcher service to notify any event subscribers.
-          $this->eventDispatcher->dispatch(LikeItEvents::UNLIKE, $event);
+          $this->eventDispatcher->dispatch($event, LikeItEvents::UNLIKE);
         }
       }
       catch (\LogicException $e) {
@@ @@
    * @param string $html_id
    *   Element DOM id.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Response to the user.
    */
   public function response($target, $id, $session_id, $html_id) {
@@ @@
     }

     // Update like/unlike link.
-    $replace = new ReplaceCommand($link_id, render($content));
+    $replace = new ReplaceCommand($link_id, \Drupal::service('renderer')->render($content));
     $response->addCommand($replace);

     return $response;
@@ @@
    *
    * @param string $action
    *   Action name.
-   * @param \Drupal\Core\Session\AccountInterface|null $account
+   * @param AccountInterface|null $account
    *   User account or null.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/likeit/src/Access/LikeItCsrfTokenGenerator.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The private key service.
    *
-   * @var \Drupal\Core\PrivateKey
+   * @var PrivateKey
    */
   protected $privateKey;

@@ @@
   /**
    * Read only site settings.
    *
-   * @var \Drupal\Core\Site\Settings
+   * @var Settings
    */
   protected $settings;

@@ @@
   /**
    * Constructs the token generator.
    *
-   * @param \Drupal\Core\PrivateKey $private_key
+   * @param PrivateKey $private_key
    *   The private key service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Site\Settings $settings
+   * @param Settings $settings
    *   Read only site settings.
    */
   public function __construct(PrivateKey $private_key, ConfigFactoryInterface $config_factory, Settings $settings) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/likeit/likeit.module:275

    ---------- begin diff ----------
@@ @@
       $title . '</span><span class="likeit-count"> ' . $count . '</span>',
     ];

-    $link['#title'] = render($markup);
+    $link['#title'] = \Drupal::service('renderer')->render($markup);
   }

   return [
@@ @@
 /**
  * Do like.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Target entity.
- * @param \Drupal\Core\Session\AccountInterface|null $account
+ * @param AccountInterface|null $account
  *   (optional) User account.
  *
  * @return string|null
@@ @@
 /**
  * Do unlike.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   Target entity.
- * @param \Drupal\Core\Session\AccountInterface|null $account
+ * @param AccountInterface|null $account
  *   (optional) User account.
  *
  * @return string|null
@@ @@
  *
  * @param object $entity
  *   Target entity.
- * @param \Drupal\Core\Session\AccountInterface|null $user
+ * @param AccountInterface|null $user
  *   (optional) User account.
  *
  * @return bool
@@ @@
 /**
  * Remove all Likeit entities from user account.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   User account.
  */
 function likeit_remove_from_user(UserInterface $account) {
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector


 [OK] 9 files have been changed by Rector                                       

