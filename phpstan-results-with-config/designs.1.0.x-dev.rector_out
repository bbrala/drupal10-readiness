modules/contrib/designs/designs.module
modules/contrib/designs/modules/designs_entity/designs_entity.module
modules/contrib/designs/modules/designs_entity/src/DesignsEntityDisplayHandler.php
modules/contrib/designs/modules/designs_entity/src/DesignsEntityFieldUi.php
modules/contrib/designs/modules/designs_entity/src/Plugin/designs/source/EntitySource.php
modules/contrib/designs/modules/designs_entity/tests/src/Functional/DisplayTest.php
modules/contrib/designs/modules/designs_field/designs_field.module
modules/contrib/designs/modules/designs_field/src/DesignsFieldWrapper.php
modules/contrib/designs/modules/designs_field/src/Plugin/designs/source/FieldItemWrapperSource.php
modules/contrib/designs/modules/designs_field/src/Plugin/designs/source/FieldWrapperSource.php
modules/contrib/designs/modules/designs_field/tests/src/Functional/WrapperTest.php
modules/contrib/designs/modules/designs_field_formatter/designs_field_formatter.module
modules/contrib/designs/modules/designs_field_formatter/src/Plugin/Field/FieldFormatter/DesignFormatter.php
modules/contrib/designs/modules/designs_field_formatter/src/Plugin/designs/source/FieldFormatterSource.php
modules/contrib/designs/modules/designs_field_formatter/tests/src/Functional/ManageDisplayTest.php
modules/contrib/designs/modules/designs_layout/src/Plugin/Derivative/DesignLayoutDeriver.php
modules/contrib/designs/modules/designs_layout/src/Plugin/Layout/DesignLayout.php
modules/contrib/designs/modules/designs_layout/src/Plugin/designs/source/LayoutSource.php
modules/contrib/designs/modules/designs_layout/tests/src/Functional/LayoutBuilderTest.php
modules/contrib/designs/modules/designs_preview/src/Controller/DisplayController.php
modules/contrib/designs/modules/designs_preview/src/Plugin/Derivative/ThemeLocalTask.php
modules/contrib/designs/modules/designs_preview/src/Theme/ThemeNegotiator.php
modules/contrib/designs/modules/designs_template/src/Template/DesignNode.php
modules/contrib/designs/modules/designs_template/src/Template/DesignTokenParser.php
modules/contrib/designs/modules/designs_template/src/Template/RegionNode.php
modules/contrib/designs/modules/designs_template/src/Template/RegionReferenceExpression.php
modules/contrib/designs/modules/designs_template/src/Template/RegionReferenceNode.php
modules/contrib/designs/modules/designs_template/src/Template/RegionTokenParser.php
modules/contrib/designs/modules/designs_template/src/Template/RegionUsingNode.php
modules/contrib/designs/modules/designs_template/src/Template/TwigExtension.php
modules/contrib/designs/modules/designs_view/designs_view.install
modules/contrib/designs/modules/designs_view/designs_view.module
modules/contrib/designs/modules/designs_view/src/EventSubscriber/RouteSubscriber.php
modules/contrib/designs/modules/designs_view/src/Form/Ajax/DesignHandler.php
modules/contrib/designs/modules/designs_view/src/Plugin/designs/source/ViewsAreaSource.php
modules/contrib/designs/modules/designs_view/src/Plugin/designs/source/ViewsPagerSource.php
modules/contrib/designs/modules/designs_view/src/Plugin/designs/source/ViewsRowSource.php
modules/contrib/designs/modules/designs_view/src/Plugin/designs/source/ViewsStyleSource.php
modules/contrib/designs/modules/designs_view/src/Plugin/views/display_extender/DesignDisplayExtender.php
modules/contrib/designs/modules/designs_view/src/Plugin/views/row/DesignsRow.php
modules/contrib/designs/modules/designs_view/src/Plugin/views/style/DesignsStyle.php
modules/contrib/designs/modules/designs_view/src/ViewsHandler.php
modules/contrib/designs/modules/designs_view/src/ViewsUiHandler.php
modules/contrib/designs/modules/designs_view/tests/src/Functional/AreaTest.php
modules/contrib/designs/modules/designs_view/tests/src/Functional/RowTest.php
modules/contrib/designs/modules/designs_view/tests/src/Functional/StyleTest.php
modules/contrib/designs/modules/designs_view/tests/src/Functional/UITestBase.php
modules/contrib/designs/src/Annotation/Design.php
modules/contrib/designs/src/Annotation/DesignContent.php
modules/contrib/designs/src/Annotation/DesignSetting.php
modules/contrib/designs/src/Annotation/DesignSource.php
modules/contrib/designs/src/DesignContentBase.php
modules/contrib/designs/src/DesignContentInterface.php
modules/contrib/designs/src/DesignContentManager.php
modules/contrib/designs/src/DesignContentManagerInterface.php
modules/contrib/designs/src/DesignDefault.php
modules/contrib/designs/src/DesignDefinition.php
modules/contrib/designs/src/DesignInterface.php
modules/contrib/designs/src/DesignManager.php
modules/contrib/designs/src/DesignManagerInterface.php
modules/contrib/designs/src/DesignProperties.php
modules/contrib/designs/src/DesignPropertiesInterface.php
modules/contrib/designs/src/DesignRegion.php
modules/contrib/designs/src/DesignSettingBase.php
modules/contrib/designs/src/DesignSettingInterface.php
modules/contrib/designs/src/DesignSettingManager.php
modules/contrib/designs/src/DesignSettingManagerInterface.php
modules/contrib/designs/src/DesignSourceBase.php
modules/contrib/designs/src/DesignSourceInterface.php
modules/contrib/designs/src/DesignSourceManager.php
modules/contrib/designs/src/DesignSourceManagerInterface.php
modules/contrib/designs/src/Discovery/YamlDirectoryDiscoveryDecorator.php
modules/contrib/designs/src/Element/RenderDesign.php
modules/contrib/designs/src/Form/ConfigurationForm.php
modules/contrib/designs/src/Form/ContentForm.php
modules/contrib/designs/src/Form/ContentsForm.php
modules/contrib/designs/src/Form/FormBase.php
modules/contrib/designs/src/Form/FormTrait.php
modules/contrib/designs/src/Form/PluginForm.php
modules/contrib/designs/src/Form/RegionForm.php
modules/contrib/designs/src/Form/RegionsForm.php
modules/contrib/designs/src/Form/SettingForm.php
modules/contrib/designs/src/Form/SettingsForm.php
modules/contrib/designs/src/Plugin/designs/content/BlockContent.php
modules/contrib/designs/src/Plugin/designs/content/ElementContent.php
modules/contrib/designs/src/Plugin/designs/content/TextContent.php
modules/contrib/designs/src/Plugin/designs/content/TokenContent.php
modules/contrib/designs/src/Plugin/designs/content/TwigContent.php
modules/contrib/designs/src/Plugin/designs/setting/AttributesSetting.php
modules/contrib/designs/src/Plugin/designs/setting/BooleanSetting.php
modules/contrib/designs/src/Plugin/designs/setting/NumberSetting.php
modules/contrib/designs/src/Plugin/designs/setting/SelectSetting.php
modules/contrib/designs/src/Plugin/designs/setting/TextfieldSetting.php
modules/contrib/designs/src/Plugin/designs/setting/UriSetting.php
modules/contrib/designs/tests/modules/designs_test/src/Controller/TestController.php
modules/contrib/designs/tests/modules/designs_test/src/Form/TestForm.php
modules/contrib/designs/tests/modules/designs_test/src/Plugin/designs/content/TestContent.php
modules/contrib/designs/tests/modules/designs_test/src/Plugin/designs/setting/TestSetting.php
modules/contrib/designs/tests/modules/designs_test/src/Plugin/designs/source/AllSource.php
modules/contrib/designs/tests/modules/designs_test/src/Plugin/designs/source/BaseSource.php
modules/contrib/designs/tests/modules/designs_test/src/Plugin/designs/source/CustomSource.php
modules/contrib/designs/tests/modules/designs_test/src/Plugin/designs/source/DefaultSource.php
modules/contrib/designs/tests/modules/designs_test/src/Plugin/designs/source/NoSource.php
modules/contrib/designs/tests/src/Functional/FormTest.php
modules/contrib/designs/tests/src/Kernel/DesignConfigSchemaTest.php
modules/contrib/designs/tests/src/Kernel/RenderDesignTest.php
modules/contrib/designs/tests/src/Traits/DesignsStandardTrait.php
modules/contrib/designs/tests/src/Traits/DesignsTestTrait.php
modules/contrib/designs/tests/src/Unit/DesignManagerTest.php

70 files with changes
=====================

1) modules/contrib/designs/tests/src/Unit/DesignManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\designs\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\designs\DesignManagerInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
  */
 class DesignManagerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The theme extension list.
    *
-   * @var \Drupal\Core\Extension\ThemeExtensionList
+   * @var ThemeExtensionList
    */
   protected $themeList;

@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * Cache backend instance.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The design plugin manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designPluginManager;

@@ @@
   /**
    * The design source manager.
    *
-   * @var \Drupal\designs\DesignSourceManagerInterface
+   * @var DesignSourceManagerInterface
    */
   protected $designSourceManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/designs/tests/src/Kernel/DesignConfigSchemaTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\designs\Kernel;

+use Drupal\Core\Config\TypedConfigManagerInterface;
+use Drupal\designs\DesignManagerInterface;
+use Drupal\designs\DesignSettingManagerInterface;
+use Drupal\designs\DesignContentManagerInterface;
 use Drupal\Tests\SchemaCheckTestTrait;
 use Drupal\KernelTests\KernelTestBase;

@@ @@
   /**
    * The typed config manager.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;

@@ @@
   /**
    * The designs manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designsManager;

@@ @@
   /**
    * The design settings manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingsManager;

@@ @@
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/designs/tests/src/Functional/FormTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The design source manager.
    *
-   * @var \Drupal\designs\DesignSourceManagerInterface
+   * @var DesignSourceManagerInterface
    */
   protected $sourceManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/designs/tests/modules/designs_test/src/Form/TestForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;

@@ @@
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;

@@ @@
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;

@@ @@
   public function validateForm(array &$form, FormStateInterface $form_state) {
     $element = NestedArray::getValue($form, $form['#test_array_parents']);

-    /** @var \Drupal\designs\Form\PluginForm $form */
+    /** @var PluginForm $form */
     $plugin_form = $element['#form_handler'];
     $plugin_form->validateForm($element, $form_state);
   }
@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $element = NestedArray::getValue($form, $form['#test_array_parents']);

-    /** @var \Drupal\designs\Form\PluginForm $form */
+    /** @var PluginForm $form */
     $plugin_form = $element['#form_handler'];
     $plugin_form->submitForm($element, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/designs/tests/modules/designs_test/src/Controller/TestController.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The design source manager.
    *
-   * @var \Drupal\designs\DesignSourceManagerInterface
+   * @var DesignSourceManagerInterface
    */
   protected $sourceManager;

@@ @@
   /**
    * TestController constructor.
    *
-   * @param \Drupal\designs\DesignSourceManagerInterface $sourceManager
+   * @param DesignSourceManagerInterface $sourceManager
    *   The source manager.
    */
   public function __construct(DesignSourceManagerInterface $sourceManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/designs/src/Plugin/designs/setting/SelectSetting.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Get the options available for the select.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   The labels.
    */
   protected function getOptions() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/designs/src/Plugin/designs/content/TwigContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs\Plugin\designs\content;

+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Render\Markup;
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin identifier.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, RendererInterface $renderer) {
@@ @@
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $contexts = [];
-    /** @var \Drupal\Core\Plugin\Context\ContextDefinitionInterface $context */
+    /** @var ContextDefinitionInterface $context */
     foreach ($form['#design_contexts'] as $id => $context) {
       $contexts[] = $this->t('@label: %id', [
         '@label' => $context->getLabel() ?: $id,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/designs/src/Plugin/designs/content/TokenContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs\Plugin\designs\content;

+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Render\Markup;
@@ @@
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
    *   The plugin identifier.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, Token $token) {
@@ @@
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $token_types = [];
-    /** @var \Drupal\Core\Plugin\Context\ContextDefinitionInterface $context */
+    /** @var ContextDefinitionInterface $context */
     foreach ($form['#design_contexts'] as $type => $context) {
       if ("entity:{$type}" === $context->getDataType()) {
         $token_types[] = $type;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/designs/src/Plugin/designs/content/BlockContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs\Plugin\designs\content;

+use Drupal\Core\Plugin\PluginFormInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Block\BlockPluginInterface;
@@ @@
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;

@@ @@
   /**
    * The plugin form factory.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;

@@ @@
    *   The plugin identifier.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Block\BlockManagerInterface $blockManager
+   * @param BlockManagerInterface $blockManager
    *   The block manager.
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $pluginFormFactory
+   * @param PluginFormFactoryInterface $pluginFormFactory
    *   The plugin form factory.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, BlockManagerInterface $blockManager, PluginFormFactoryInterface $pluginFormFactory) {
@@ @@
   /**
    * Retrieves the plugin form for a given block and operation.
    *
-   * @param \Drupal\Core\Block\BlockPluginInterface $block
+   * @param BlockPluginInterface $block
    *   The block plugin.
    *
-   * @return \Drupal\Core\Plugin\PluginFormInterface
+   * @return PluginFormInterface
    *   The plugin form for the block.
    */
   protected function getPluginForm(BlockPluginInterface $block) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/designs/src/Form/SettingForm.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The design setting.
    *
-   * @var \Drupal\designs\DesignSettingInterface
+   * @var DesignSettingInterface
    */
   protected $setting;

@@ @@
   /**
    * Get the design setting.
    *
-   * @return \Drupal\designs\DesignSettingInterface
+   * @return DesignSettingInterface
    *   The design setting.
    */
   public function getSetting(): DesignSettingInterface {
@@ @@
   /**
    * Set the design setting.
    *
-   * @param \Drupal\designs\DesignSettingInterface $setting
+   * @param DesignSettingInterface $setting
    *   The design setting.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/designs/src/Form/RegionsForm.php:35

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/designs/src/Form/RegionForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The design region.
    *
-   * @var \Drupal\designs\DesignRegion
+   * @var DesignRegion
    */
   protected $region;

@@ @@
   /**
    * Get the region.
    *
-   * @return \Drupal\designs\DesignRegion
+   * @return DesignRegion
    *   The region.
    */
   public function getRegion(): DesignRegion {
@@ @@
   /**
    * Set the region.
    *
-   * @param \Drupal\designs\DesignRegion $region
+   * @param DesignRegion $region
    *   The region.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/designs/src/Form/PluginForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * PluginForm constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $manager
+   * @param DesignManagerInterface $manager
    *   The design manager.
-   * @param \Drupal\designs\DesignSettingManagerInterface $settingManager
+   * @param DesignSettingManagerInterface $settingManager
    *   The design setting manager.
-   * @param \Drupal\designs\DesignContentManagerInterface $contentManager
+   * @param DesignContentManagerInterface $contentManager
    *   The design content manager.
    * @param string $plugin_id
    *   The plugin identifier.
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateForm(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitForm(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/designs/src/Form/FormTrait.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/designs/src/Form/FormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs\Form;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The design being configured.
    *
-   * @var \Drupal\designs\DesignInterface|null
+   * @var DesignInterface|null
    */
   protected $design = NULL;

@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * The design settings manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;

@@ @@
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;

@@ @@
   /**
    * FormBase constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $manager
+   * @param DesignManagerInterface $manager
    *   The design manager.
-   * @param \Drupal\designs\DesignSettingManagerInterface $settingManager
+   * @param DesignSettingManagerInterface $settingManager
    *   The design setting manager.
-   * @param \Drupal\designs\DesignContentManagerInterface $contentManager
+   * @param DesignContentManagerInterface $contentManager
    *   The design content manager.
    */
   public function __construct(
@@ @@
   /**
    * Get the design for the form.
    *
-   * @return \Drupal\designs\DesignInterface|null
+   * @return DesignInterface|null
    *   The design.
    */
   public function getDesign() {
@@ @@
   /**
    * Set the design for the form.
    *
-   * @param \Drupal\designs\DesignInterface|null $design
+   * @param DesignInterface|null $design
    *   The design.
    *
    * @return $this
@@ @@
   /**
    * Get the title used for the form.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The title.
    */
   protected function getTitle() {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateForm(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function massageFormValues(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $parents
    *   The form parents array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
@@ @@
    *   The plugin instance.
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/designs/src/Form/ContentsForm.php:48

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function massageFormValues(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateForm(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateCreationForm(array $form, FormStateInterface $form_state) {
@@ @@
    *   The value for the element.
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/designs/src/Form/ContentForm.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The design content.
    *
-   * @var \Drupal\designs\DesignContentInterface|null
+   * @var DesignContentInterface|null
    */
   protected $content = NULL;

@@ @@
   /**
    * Get the design content.
    *
-   * @return \Drupal\designs\DesignContentInterface|null
+   * @return DesignContentInterface|null
    *   The design content.
    */
   public function getContent(): ?DesignContentInterface {
@@ @@
   /**
    * Set the design content.
    *
-   * @param \Drupal\designs\DesignContentInterface|null $content
+   * @param DesignContentInterface|null $content
    *   The design content.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/designs/src/Form/ConfigurationForm.php:13

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *   The form class.
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/designs/src/Element/RenderDesign.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs\Element;

+use Drupal\designs\DesignManagerInterface;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Render\Element\RenderElement;
 use Drupal\designs\DesignSourceInterface;
@@ @@
    *   The render element.
    */
   public static function preRenderDesign(array $element) {
-    /** @var \Drupal\designs\DesignManagerInterface $manager */
+    /** @var DesignManagerInterface $manager */
     $manager = \Drupal::service('plugin.manager.design');

     // Design without available template prints no markup.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/designs/src/Discovery/YamlDirectoryDiscoveryDecorator.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The Discovery object being decorated.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface
+   * @var DiscoveryInterface
    */
   protected $decorated;

@@ @@
   /**
    * Constructs a YamlDiscoveryDecorator object.
    *
-   * @param \Drupal\Component\Plugin\Discovery\DiscoveryInterface $decorated
+   * @param DiscoveryInterface $decorated
    *   The discovery object that is being decorated.
    * @param string $name
    *   The file name suffix to use for discovery; for instance, 'test' will
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/designs/src/DesignSourceManagerInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignSourceInterface
+   * @return DesignSourceInterface
    *   The design source plugin.
    */
   public function createInstance($plugin_id, array $configuration = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/designs/src/DesignSourceManager.php:23

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/designs/src/DesignSourceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs;

+use Drupal\Core\Plugin\Context\ContextDefinitionInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
@@ @@
   /**
    * Get the contexts used by the source.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinitionInterface[]
+   * @return ContextDefinitionInterface[]
    *   The contexts.
    */
   public function getFormContexts();
@@ @@
   /**
    * The indexes from a source render array element.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   An associative array, indexed by the source render element index. This
    *   may include render element hash indexes.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/designs/src/DesignSettingManagerInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignSettingInterface
+   * @return DesignSettingInterface
    *   The design setting plugin.
    */
   public function createInstance($plugin_id, array $configuration = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/designs/src/DesignSettingManager.php:23

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/designs/src/DesignSettingInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
@@ @@
   /**
    * Get the label of the setting.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The label.
    */
   public function label();
@@ @@
   /**
    * Get the description of the setting.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The description.
    */
   public function getDescription();
@@ @@
   /**
    * The design content for the setting.
    *
-   * @return \Drupal\designs\DesignContentInterface|null
+   * @return DesignContentInterface|null
    *   The design content plugin.
    */
   public function getContent();
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateForm(array $form, FormStateInterface $form_state);
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/designs/src/DesignSettingBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
@@ @@
   /**
    * The source plugin.
    *
-   * @var \Drupal\designs\DesignSourceInterface
+   * @var DesignSourceInterface
    */
   protected $sourcePlugin;

@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;

@@ @@
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The content for the setting.
    *
-   * @var \Drupal\designs\DesignContentInterface|null
+   * @var DesignContentInterface|null
    */
   protected $content;

@@ @@
    *   The plugin identifier.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\designs\DesignManagerInterface $manager
+   * @param DesignManagerInterface $manager
    *   The design manager.
-   * @param \Drupal\designs\DesignContentManagerInterface $contentManager
+   * @param DesignContentManagerInterface $contentManager
    *   The design content manager.
-   * @param \Drupal\designs\DesignSettingManagerInterface $settingManager
+   * @param DesignSettingManagerInterface $settingManager
    *   The design setting manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(
@@ @@
   /**
    * Get the description.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The description.
    */
   public function getDescription() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/designs/src/DesignProperties.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * DesignProperties constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, RendererInterface $renderer) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/designs/src/DesignManagerInterface.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignInterface
+   * @return DesignInterface
    *   The design definition.
    */
   public function createInstance($plugin_id, array $configuration = []);
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition|null
+   * @return DesignDefinition|null
    *   The design definition.
    */
   public function getDefinition($plugin_id, $exception_on_invalid = TRUE);
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition[]
+   * @return DesignDefinition[]
    *   The design definitions.
    */
   public function getDefinitions();
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition[]
+   * @return DesignDefinition[]
    *   The sorted design definitions.
    */
   public function getSortedDefinitions(array $definitions = NULL);
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition[][]
+   * @return DesignDefinition[][]
    *   The grouped design definitions.
    */
   public function getGroupedDefinitions(array $definitions = NULL);
@@ @@
    * @param array $source_configuration
    *   The source configuration.
    *
-   * @return \Drupal\designs\DesignInterface|null
+   * @return DesignInterface|null
    *   The design.
    */
   public function createSourcedInstance($design_id, array $design_configuration, $source_id, array $source_configuration);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/designs/src/DesignManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs;

+use Drupal\Component\Plugin\Discovery\DiscoveryInterface;
 use Drupal\Component\Annotation\Plugin\Discovery\AnnotationBridgeDecorator;
 use Drupal\Component\Assertion\Inspector;
 use Drupal\Component\Plugin\Definition\PluginDefinitionInterface;
@@ @@
   /**
    * The module handler to invoke the alter hook.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The theme list.
    *
-   * @var \Drupal\Core\Extension\ThemeExtensionList
+   * @var ThemeExtensionList
    */
   protected $themeList;

@@ @@
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * The source manager.
    *
-   * @var \Drupal\designs\DesignSourceManagerInterface
+   * @var DesignSourceManagerInterface
    */
   protected $sourceManager;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

   /**
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface
+   * @var DiscoveryInterface
    */
   protected $themeDiscovery;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Core\Extension\ThemeExtensionList $theme_list
+   * @param ThemeExtensionList $theme_list
    *   The theme list.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager to select active theme.
-   * @param \Drupal\designs\DesignSourceManagerInterface $sourceManager
+   * @param DesignSourceManagerInterface $sourceManager
    *   The design source manager.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system.
    */
   public function __construct(string $appRoot, \Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ThemeExtensionList $theme_list, ThemeManagerInterface $theme_manager, DesignSourceManagerInterface $sourceManager, FileSystemInterface $fileSystem) {
@@ @@
    *
    * Plugin definitions are cached using the provided cache backend.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
    * @param string $cache_key
    *   Cache key prefix to use.
@@ @@
    * @param array $directories
    *   The list of directories.
    *
-   * @return \Drupal\Component\Plugin\Discovery\DiscoveryInterface
+   * @return DiscoveryInterface
    *   The discovery.
    */
   protected function getDiscoveryByDirectories(array $directories) {
@@ @@
    */
   public function getLibraryImplementations() {
     $libraries = [];
-    /** @var \Drupal\designs\DesignDefinition[] $definitions */
+    /** @var DesignDefinition[] $definitions */
     $definitions = $this->getDefinitions();
     foreach ($definitions as $definition) {
       $libraries += $definition->getLibraryInfo();
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition[]
+   * @return DesignDefinition[]
    *   The design definitions.
    */
   public function getSortedDefinitions(array $definitions = NULL, $label_key = 'label') {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition[][]
+   * @return DesignDefinition[][]
    *   The grouped design definitions.
    */
   public function getGroupedDefinitions(array $definitions = NULL, $label_key = 'label') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/designs/src/DesignInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition
+   * @return DesignDefinition
    *   The design definition.
    */
   public function getPluginDefinition();
@@ @@
   /**
    * Get the design source plugin.
    *
-   * @return \Drupal\designs\DesignSourceInterface
+   * @return DesignSourceInterface
    *   The design source.
    */
   public function getSourcePlugin();
@@ @@
   /**
    * Set the design source plugin.
    *
-   * @param \Drupal\designs\DesignSourceInterface $source
+   * @param DesignSourceInterface $source
    *   The design source plugin.
    *
    * @return $this
@@ @@
   /**
    * Get the settings for the design.
    *
-   * @return \Drupal\designs\DesignSettingInterface[]
+   * @return DesignSettingInterface[]
    *   The settings.
    */
   public function getSettings();
@@ @@
    * @param string $setting_id
    *   The setting identifier.
    *
-   * @return \Drupal\designs\DesignSettingInterface|null
+   * @return DesignSettingInterface|null
    *   The design setting.
    */
   public function getSetting(string $setting_id): ?DesignSettingInterface;
@@ @@
   /**
    * Get the extra content for the design.
    *
-   * @return \Drupal\designs\DesignContentInterface[]
+   * @return DesignContentInterface[]
    *   The content.
    */
   public function getContents();
@@ @@
    * @param string $content_id
    *   The content identifier.
    *
-   * @return \Drupal\designs\DesignContentInterface|null
+   * @return DesignContentInterface|null
    *   The design custom content.
    */
   public function getContent(string $content_id): ?DesignContentInterface;
@@ @@
   /**
    * Get the source labels from the source plugin and custom content.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   The source labels.
    */
   public function getSources();
@@ @@
   /**
    * Get the design regions.
    *
-   * @return \Drupal\designs\DesignRegion[]
+   * @return DesignRegion[]
    *   The regions.
    */
   public function getRegions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


32) modules/contrib/designs/src/DesignDefinition.php:184

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the human-readable name of the design definition.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   The human-readable name of the design definition.
    */
   public function getLabel() {
@@ @@
   /**
    * Sets the human-readable name of the design definition.
    *
-   * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $label
+   * @param string|TranslatableMarkup $label
    *   The human-readable name of the design definition.
    *
    * @return $this
@@ @@
   /**
    * Gets the description of the design definition.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   The description of the design definition.
    */
   public function getDescription() {
@@ @@
   /**
    * Sets the description of the design definition.
    *
-   * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $description
+   * @param string|TranslatableMarkup $description
    *   The description of the design definition.
    *
    * @return $this
@@ @@
   /**
    * Gets the human-readable category of the design definition.
    *
-   * @return string|\Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return string|TranslatableMarkup
    *   The human-readable category of the design definition.
    */
   public function getCategory() {
@@ @@
   /**
    * Sets the human-readable category of the design definition.
    *
-   * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $category
+   * @param string|TranslatableMarkup $category
    *   The human-readable category of the design definition.
    *
    * @return $this
@@ @@
   /**
    * Gets the human-readable setting labels.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   An array of human-readable setting labels.
    */
   public function getSettingLabels() {
@@ @@
   /**
    * Gets the human-readable region labels.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   An array of human-readable region labels.
    */
   public function getRegionLabels() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/designs/src/DesignDefault.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The design definition.
    *
-   * @var \Drupal\designs\DesignDefinition
+   * @var DesignDefinition
    */
   protected $pluginDefinition;

@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * The design settings manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;

@@ @@
   /**
    * The content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;

@@ @@
   /**
    * The design source plugin.
    *
-   * @var \Drupal\designs\DesignSourceInterface
+   * @var DesignSourceInterface
    */
   protected $sourcePlugin;

@@ @@
   /**
    * The design settings.
    *
-   * @var \Drupal\designs\DesignSettingInterface[]
+   * @var DesignSettingInterface[]
    */
   protected $settings = [];

@@ @@
   /**
    * The design custom content.
    *
-   * @var \Drupal\designs\DesignContentInterface[]
+   * @var DesignContentInterface[]
    */
   protected $content = [];

@@ @@
   /**
    * The design region.
    *
-   * @var \Drupal\designs\DesignRegion[]
+   * @var DesignRegion[]
    */
   protected $regions = [];

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignDefinition
+   * @return DesignDefinition
    *   The design definition.
    */
   public function getPluginDefinition() {
@@ @@
    * {@inheritdoc}
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\designs\Form\ConfigurationForm $config_form */
+    /** @var ConfigurationForm $config_form */
     $config_form = $form['#form_handler'];
     $config_form->validateForm($form, $form_state);
   }
@@ @@
    * {@inheritdoc}
    */
   public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\designs\Form\ConfigurationForm $config_form */
+    /** @var ConfigurationForm $config_form */
     $config_form = $form['#form_handler'];
     $result = $config_form->submitForm($form, $form_state);
     $this->setConfiguration($result);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/designs/src/DesignContentManagerInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\designs\DesignContentInterface
+   * @return DesignContentInterface
    *   The design content plugin.
    */
   public function createInstance($plugin_id, array $configuration = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


35) modules/contrib/designs/src/DesignContentManager.php:23

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/designs/src/DesignContentInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
@@ @@
   /**
    * Get the label of the setting.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The label.
    */
   public function label();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


37) modules/contrib/designs/src/Annotation/DesignSource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the design source.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


38) modules/contrib/designs/src/Annotation/DesignSetting.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the design setting.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * An optional description for design settings form input.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


39) modules/contrib/designs/src/Annotation/DesignContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the design content.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


40) modules/contrib/designs/modules/designs_view/tests/src/Functional/AreaTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\designs_view\Functional;

+use Drupal\views\Entity\View;
 use Drupal\block\Entity\Block;
 use Drupal\views\Views;

@@ @@
   /**
    * The block for testing the view.
    *
-   * @var \Drupal\block\Entity\Block
+   * @var Block
    */
   protected $block;

@@ @@
     $options['title_text'] = $this->randomMachineName();
     $options['attributes'] = "id=\"{$options['custom_id']}\"";

-    /** @var \Drupal\views\Entity\View $view */
+    /** @var View $view */
     $view = $this->randomView();
     $view_name = $view['id'];
     $options['view_name'] = $view['id'];
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/designs/modules/designs_view/src/ViewsUiHandler.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;

@@ @@
   /**
    * ViewsUiHandler constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
    */
   public function __construct(DesignManagerInterface $designManager) {
@@ @@
    *
    * @param array $build
    *   The render array for the display content.
-   * @param \Drupal\views_ui\ViewUI $view
+   * @param ViewUI $view
    *   The view.
    * @param string $display_id
    *   The display identifier.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


42) modules/contrib/designs/modules/designs_view/src/ViewsHandler.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;

@@ @@
   /**
    * ViewsHandler constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
    */
   public function __construct(DesignManagerInterface $designManager) {
@@ @@
   /**
    * Implements hook_views_post_render().
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view.
    * @param array|string $output
    *   The output of the view.
-   * @param \Drupal\views\Plugin\views\cache\CachePluginBase $cache
+   * @param CachePluginBase $cache
    *   The views cache.
    */
   public function postRender(ViewExecutable $view, &$output, CachePluginBase $cache) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


43) modules/contrib/designs/modules/designs_view/src/Plugin/views/style/DesignsStyle.php:57

    ---------- begin diff ----------
@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;

@@ @@
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;

@@ @@
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;

@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function multistepSubmit(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/designs/modules/designs_view/src/Plugin/views/row/DesignsRow.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs_view\Plugin\views\row;

+use Drupal\views\ViewExecutable;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;

@@ @@
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;

@@ @@
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;

@@ @@
       $form_state->setValue($parents, $input);
     }

-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     $view = $form_state->get('view')->getExecutable();

     $design_form = new PluginForm(
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function multistepSubmit(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/designs/modules/designs_view/src/Plugin/designs/source/ViewsPagerSource.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The pager manager.
    *
-   * @var \Drupal\Core\Pager\PagerManagerInterface
+   * @var PagerManagerInterface
    */
   protected $pagerManager;

@@ @@
    *   The plugin identifier.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Pager\PagerManagerInterface $pagerManager
+   * @param PagerManagerInterface $pagerManager
    *   The pager manager.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, PagerManagerInterface $pagerManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/designs/modules/designs_view/src/Form/Ajax/DesignHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs_view\Form\Ajax;

+use Drupal\views\Plugin\views\display\DisplayPluginBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
 use Drupal\designs\Form\PluginForm;
@@ @@
       $form['markup'] = ['#markup' => $this->t('Invalid display id @display', ['@display' => $display_id])];
       return $form;
     }
-    /** @var \Drupal\views\Plugin\views\display\DisplayPluginBase $display */
+    /** @var DisplayPluginBase $display */
     $display = &$executable->displayHandlers->get($display_id);

     $areas = [
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function multistepSubmit(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/designs/modules/designs_view/src/EventSubscriber/RouteSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;

@@ @@
   /**
    * RouteSubscriber constructor.
    *
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $routeMatch
+   * @param CurrentRouteMatch $routeMatch
    *   The current route.
    */
   public function __construct(CurrentRouteMatch $routeMatch) {
@@ @@
   /**
    * Allow the views ui to add additional forms.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ControllerEvent $event
+   * @param ControllerEvent $event
    *   The controller event.
    */
   public function onController(ControllerEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


48) modules/contrib/designs/modules/designs_template/src/Template/TwigExtension.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;

@@ @@
   /**
    * TwigExtension constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/designs/modules/designs_template/src/Template/RegionTokenParser.php:70

    ---------- begin diff ----------
@@ @@
   /**
    * Check end of region.
    *
-   * @param \Twig\Token $token
+   * @param Token $token
    *   The current token.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/designs/modules/designs_template/src/Template/RegionReferenceExpression.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * RegionReferenceExpression constructor.
    *
-   * @param \Twig\Node\Node $body
+   * @param Node $body
    *   The body of the region.
    */
   public function __construct(Node $body) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/designs/modules/designs_template/src/Template/RegionNode.php:16

    ---------- begin diff ----------
@@ @@
    *   The name of the region.
    * @param string $source
    *   The name of the source content.
-   * @param \Twig\Node\Node $body
+   * @param Node $body
    *   The body of the region.
    * @param int $lineno
    *   The line number.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/designs/modules/designs_template/src/Template/DesignTokenParser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs_template\Template;

+use Twig\Node\Expression\AbstractExpression;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\designs\DesignManagerInterface;
 use Twig\Error\SyntaxError;
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;

@@ @@
   /**
    * DesignTokenParser constructor.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
    */
   public function __construct(
@@ @@
   /**
    * Check end of design.
    *
-   * @param \Twig\Token $token
+   * @param Token $token
    *   The current token.
    *
    * @return bool
@@ @@
   /**
    * Get the settings used for the design.
    *
-   * @return \Twig\Node\Expression\AbstractExpression|null
+   * @return AbstractExpression|null
    *   The settings or nothing.
    */
   protected function parseSettings() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/designs/modules/designs_template/src/Template/DesignNode.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * DesignNode constructor.
    *
-   * @param \Twig\Node\Expression\AbstractExpression $design
+   * @param AbstractExpression $design
    *   The design name node.
-   * @param \Twig\Node\Expression\AbstractExpression|null $settings
+   * @param AbstractExpression|null $settings
    *   The design settings.
-   * @param \Twig\Node\Node|null $regions
+   * @param Node|null $regions
    *   The design regions.
    * @param int $lineno
    *   The template line number.
@@ @@
   /**
    * Adds the values for the target.
    *
-   * @param \Twig\Compiler $compiler
+   * @param Compiler $compiler
    *   The twig compiler.
    * @param string $varname
    *   The internal variable name.
@@ @@
   /**
    * Generate the output to convert settings and regions into design.
    *
-   * @param \Twig\Compiler $compiler
+   * @param Compiler $compiler
    *   The compiler.
    * @param string $template
    *   The template name.
@@ @@
   /**
    * Generates the output for settings and regions.
    *
-   * @param \Twig\Compiler $compiler
+   * @param Compiler $compiler
    *   The compiler.
    * @param string $template
    *   The template name.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/designs/modules/designs_preview/src/Plugin/Derivative/ThemeLocalTask.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Constructs a new ThemeLocalTask.
    *
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    */
   public function __construct(ThemeHandlerInterface $theme_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/designs/modules/designs_preview/src/Controller/DisplayController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs_preview\Controller;

+use Drupal\designs\DesignDefinition;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\Core\Link;
@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The pattern plugins.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;

@@ @@
   /**
    * Constructs a new DisplayController instance.
    *
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
    */
   public function __construct(ThemeHandlerInterface $theme_handler, DesignManagerInterface $designManager) {
@@ @@

     $output = [];

-    /** @var \Drupal\designs\DesignDefinition $definition */
+    /** @var DesignDefinition $definition */
     foreach ($this->designManager->getSortedDefinitions() as $definition) {
       $category = (string) $definition->getCategory();
       if (!isset($output[$category])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/designs/modules/designs_layout/src/Plugin/designs/source/LayoutSource.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;

@@ @@
    *   The plugin identifier.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, DesignManagerInterface $designManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/designs/modules/designs_layout/src/Plugin/Layout/DesignLayout.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs_layout\Plugin\Layout;

+use Drupal\designs\DesignInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ @@
   /**
    * The element info.
    *
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfo;

@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;

@@ @@
   /**
    * Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;

@@ @@
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;

@@ @@
    *   A configuration array containing information about the plugin instance.
    * @param string $plugin_id
    *   The plugin_id for the plugin instance.
-   * @param \Drupal\Core\Layout\LayoutDefinition $plugin_definition
+   * @param LayoutDefinition $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $element_info
+   * @param ElementInfoManagerInterface $element_info
    *   Element info object.
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
-   * @param \Drupal\designs\DesignSettingManagerInterface $settingManager
+   * @param DesignSettingManagerInterface $settingManager
    *   The design settings manager.
-   * @param \Drupal\designs\DesignContentManagerInterface $contentManager
+   * @param DesignContentManagerInterface $contentManager
    *   The design content manager.
    */
   public function __construct(
@@ @@
   /**
    * Get the design used for the layout.
    *
-   * @return \Drupal\designs\DesignInterface|null
+   * @return DesignInterface|null
    *   The design identifier.
    */
   protected function getDesign() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/designs/modules/designs_layout/src/Plugin/Derivative/DesignLayoutDeriver.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;

@@ @@
   /**
    * DesignLayoutDeriver constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
    */
   public function __construct(DesignManagerInterface $designManager) {
@@ @@
   public function getDerivativeDefinitions($base_plugin_definition) {
     $derivatives = [];

-    /** @var \Drupal\designs\DesignDefinition $definition */
+    /** @var DesignDefinition $definition */
     foreach ($this->designManager->getDefinitions() as $definition) {
       $layout_definition = $this->getDefinition($base_plugin_definition, $definition);
       $derivatives[$definition->getTemplateId()] = $layout_definition;
@@ @@
   /**
    * Get the derivative plugin definition.
    *
-   * @param \Drupal\Core\Layout\LayoutDefinition $base_plugin_definition
+   * @param LayoutDefinition $base_plugin_definition
    *   The original plugin definition.
-   * @param \Drupal\designs\DesignDefinition $definition
+   * @param DesignDefinition $definition
    *   The design definition.
    *
-   * @return \Drupal\Core\Layout\LayoutDefinition
+   * @return LayoutDefinition
    *   The design derivative definition.
    */
   protected function getDefinition(LayoutDefinition $base_plugin_definition, DesignDefinition $definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


59) modules/contrib/designs/modules/designs_field_formatter/tests/src/Functional/ManageDisplayTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\designs_field_formatter\Functional;

+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The random node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;

@@ @@

     // Check the wrapper has been saved with the field formatter third
     // party settings.
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+    /** @var EntityViewDisplayInterface $display */
     $display = \Drupal::service('entity_display.repository')
       ->getViewDisplay($this->field['entity_type'], $this->field['bundle']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/designs/modules/designs_field_formatter/src/Plugin/designs/source/FieldFormatterSource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs_field_formatter\Plugin\designs\source;

+use Drupal\Core\Entity\Display\EntityDisplayInterface;
+use Drupal\Core\TypedData\TypedDataInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The entity display.
    *
-   * @var \Drupal\Core\Entity\Display\EntityDisplayInterface
+   * @var EntityDisplayInterface
    */
   protected $owner;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The field type manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;

@@ @@
   /**
    * The design properties.
    *
-   * @var \Drupal\designs\DesignPropertiesInterface
+   * @var DesignPropertiesInterface
    */
   protected $designProperties;

@@ @@
   /**
    * Get the field type.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface
+   * @return TypedDataInterface
    *   The typed data definition.
    */
   protected function getType() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/designs/modules/designs_field_formatter/src/Plugin/Field/FieldFormatter/DesignFormatter.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;

@@ @@
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;

@@ @@
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;

@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $complete_form
    *   The complete form.
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state.
    */
   public function settingsValidate(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state.
    */
   public function settingsSubmit(array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/designs/modules/designs_field/tests/src/Functional/WrapperTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\designs_field\Functional;

+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The random node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;

@@ @@

     // Check the wrapper has been saved with the field formatter third
     // party settings.
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+    /** @var EntityViewDisplayInterface $display */
     $display = \Drupal::service('entity_display.repository')
       ->getViewDisplay($this->field['entity_type'], $this->field['bundle']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/designs/modules/designs_field/src/Plugin/designs/source/FieldWrapperSource.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/designs/modules/designs_field/src/Plugin/designs/source/FieldItemWrapperSource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs_field\Plugin\designs\source;

+use Drupal\Core\TypedData\TypedDataInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The field type manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;

@@ @@
   /**
    * The design properties.
    *
-   * @var \Drupal\designs\DesignPropertiesInterface
+   * @var DesignPropertiesInterface
    */
   protected $designProperties;

@@ @@
   /**
    * Get the field type.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface
+   * @return TypedDataInterface
    *   The typed data definition.
    */
   protected function getType() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/designs/modules/designs_field/src/DesignsFieldWrapper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs_field;

+use Drupal\Core\Field\WidgetInterface;
+use Drupal\Core\Field\FormatterInterface;
+use Drupal\designs\DesignInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\ContentEntityFormInterface;
@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $designManager;

@@ @@
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;

@@ @@
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;

@@ @@
   /**
    * DesignsFieldWrapper constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $designManager
+   * @param DesignManagerInterface $designManager
    *   The design manager.
-   * @param \Drupal\designs\DesignSettingManagerInterface $settingManager
+   * @param DesignSettingManagerInterface $settingManager
    *   The design settings manager.
-   * @param \Drupal\designs\DesignContentManagerInterface $contentManager
+   * @param DesignContentManagerInterface $contentManager
    *   The design content manager.
    */
   public function __construct(
@@ @@
   /**
    * Build the form for the field wrapper.
    *
-   * @param \Drupal\Core\Field\WidgetInterface|\Drupal\Core\Field\FormatterInterface $plugin
+   * @param WidgetInterface|FormatterInterface $plugin
    *   The field formatter/widget plugin.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateConfigurationForm(array $form, FormStateInterface $form_state) {
@@ @@
   /**
    * Build the summary for the field wrapper extras.
    *
-   * @param \Drupal\Core\Field\WidgetInterface|\Drupal\Core\Field\FormatterInterface $plugin
+   * @param WidgetInterface|FormatterInterface $plugin
    *   The field formatter/widget plugin.
    * @param array $summary
    *   The list of summary items.
@@ @@
    *
    * @param array $build
    *   The build render array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function entityViewAlter(array &$build, EntityInterface $entity) {
@@ @@
    *
    * @param array $form
    *   The build render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function entityFormAlter(array &$form, FormStateInterface $form_state) {
@@ @@
    */
   public static function preRenderWidget(array $element) {
     $settings = $element['#third_party_settings']['designs_field'];
-    /** @var \Drupal\designs\DesignInterface $design */
+    /** @var DesignInterface $design */
     $design = \Drupal::service('plugin.manager.design')->createSourcedInstance(
       $settings['field']['design'],
       $settings['field'],
@@ @@

     $settings = $element['#third_party_settings']['designs_field'];
     foreach (Element::children($element) as $delta) {
-      /** @var \Drupal\designs\DesignInterface $design */
+      /** @var DesignInterface $design */
       $design = \Drupal::service('plugin.manager.design')
         ->createSourcedInstance(
           $settings['item']['design'],
@@ @@
    */
   public static function preRenderFormatter(array $element) {
     $settings = $element['#third_party_settings']['designs_field'];
-    /** @var \Drupal\designs\DesignInterface $design */
+    /** @var DesignInterface $design */
     $design = \Drupal::service('plugin.manager.design')->createSourcedInstance(
       $settings['field']['design'],
       $settings['field'],
@@ @@

     $settings = $element['#third_party_settings']['designs_field'];
     foreach (Element::children($element) as $delta) {
-      /** @var \Drupal\designs\DesignInterface $design */
+      /** @var DesignInterface $design */
       $design = \Drupal::service('plugin.manager.design')
         ->createSourcedInstance(
           $settings['item']['design'],
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


66) modules/contrib/designs/modules/designs_entity/tests/src/Functional/DisplayTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\designs_entity\Functional;

+use Drupal\node\Entity\NodeType;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * The random node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;
    ----------- end diff -----------

Applied rules:
 * BuildXPathQueryRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/designs/modules/designs_entity/src/Plugin/designs/source/EntitySource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs_entity\Plugin\designs\source;

+use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The entity display.
    *
-   * @var \Drupal\Core\Entity\Display\EntityDisplayInterface
+   * @var EntityDisplayInterface
    */
   protected $owner;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


68) modules/contrib/designs/modules/designs_entity/src/DesignsEntityFieldUi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs_entity;

+use Drupal\designs\DesignSourceInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * The design setting manager.
    *
-   * @var \Drupal\designs\DesignSettingManagerInterface
+   * @var DesignSettingManagerInterface
    */
   protected $settingManager;

@@ @@
   /**
    * The design content manager.
    *
-   * @var \Drupal\designs\DesignContentManagerInterface
+   * @var DesignContentManagerInterface
    */
   protected $contentManager;

@@ @@
   /**
    * The design.
    *
-   * @var \Drupal\designs\DesignInterface
+   * @var DesignInterface
    */
   protected $design;

@@ @@
   /**
    * The design source.
    *
-   * @var \Drupal\designs\DesignSourceInterface
+   * @var DesignSourceInterface
    */
   protected $source;

@@ @@
   /**
    * DesignFieldUIHandler constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $manager
+   * @param DesignManagerInterface $manager
    *   The design plugin manager.
-   * @param \Drupal\designs\DesignSettingManagerInterface $settingManager
+   * @param DesignSettingManagerInterface $settingManager
    *   The design setting manager.
-   * @param \Drupal\designs\DesignContentManagerInterface $contentManager
+   * @param DesignContentManagerInterface $contentManager
    *   The design content manager.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function displayFormAlter(array &$form, FormStateInterface $form_state) {
@@ @@
     // Get the callback object.
     $entity_display_form = $form_state->getBuildInfo()['callback_object'];

-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $entity */
+    /** @var EntityViewDisplayInterface $entity */
     $entity = $entity_display_form->getEntity();
     $config = $entity->getThirdPartySettings('designs_entity');

@@ @@
     $form['design']['#open'] = TRUE;

     // Get the design from the design form.
-    /** @var \Drupal\designs\DesignInterface|null $design */
+    /** @var DesignInterface|null $design */
     $design = $form['design']['#design'] ?? NULL;

     // Get reference to the form fields.
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateForm(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function submitForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\designs\Form\PluginForm $design_form */
+    /** @var PluginForm $design_form */
     $design_form = $form['design']['#form_handler'];
     $design_form->submitForm($form['design'], $form_state);

@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function multistepSubmit(array $form, FormStateInterface $form_state) {
@@ @@
     switch ($op) {
       case 'remove_content':
         $entity_display_form = $form_state->getBuildInfo()['callback_object'];
-        /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $entity */
+        /** @var EntityViewDisplayInterface $entity */
         $entity = $entity_display_form->getEntity();
         $entity->removeComponent($trigger['#index']);
         $form_state->setRebuild();
@@ @@
    *
    * @param array $form
    *   The built form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
   /**
    * Get the regions as used by the field_ui_table.
    *
-   * @param \Drupal\designs\DesignInterface $design
+   * @param DesignInterface $design
    *   The design.
    */
   protected function getRegions(DesignInterface $design) {
@@ @@
   /**
    * Get the region labels.
    *
-   * @param \Drupal\designs\DesignInterface $design
+   * @param DesignInterface $design
    *   The design.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   The region labels.
    */
   protected function getRegionLabels(DesignInterface $design) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


69) modules/contrib/designs/modules/designs_entity/src/DesignsEntityDisplayHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\designs_entity;

+use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;
 use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ @@
   /**
    * The design manager.
    *
-   * @var \Drupal\designs\DesignManagerInterface
+   * @var DesignManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * DesignDisplayHandler constructor.
    *
-   * @param \Drupal\designs\DesignManagerInterface $manager
+   * @param DesignManagerInterface $manager
    *   The design manager.
    */
   public function __construct(DesignManagerInterface $manager) {
@@ @@
    *
    * @param array $build
    *   The build render array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The entity view display.
    */
   public function entityViewAlter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
@@ @@
   /**
    * Implements hook_entity_prepare_form().
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $operation
    *   The operation.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function entityPrepareForm(EntityInterface $entity, $operation, FormStateInterface $form_state) {
     $storage = $form_state->getStorage();
     if (!empty($storage['form_display']) && $storage['form_display'] instanceof ThirdPartySettingsInterface) {
-      /** @var \Drupal\layout_builder\Entity\LayoutEntityDisplayInterface $display */
+      /** @var LayoutEntityDisplayInterface $display */
       $display = $storage['form_display'];
       $configuration = $display->getThirdPartySettings('designs_entity');
       if (empty($configuration['design'])) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function formAlter(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $element
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


70) modules/contrib/designs/designs.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\designs\DesignInterface;
+use Drupal\Core\Render\RendererInterface;
 /**
  * @file
  * Provides the main code for the designs module.
@@ @@
 function designs_preprocess_design(&$variables, $hook) {
   $element = $variables['element'];

-  /** @var \Drupal\designs\DesignInterface $design */
+  /** @var DesignInterface $design */
   if (!($design = $element['#design'])) {
     return;
   }
@@ @@
     'libraries' => $plugin->getRenderAttached(),
   ];

-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');

   // Get the settings to compare against.
@@ @@
 function designs_theme_suggestions_design(array $variables) {
   $suggestions = [];
   $element = $variables['element'];
-  /** @var \Drupal\designs\DesignInterface|string|null $design */
+  /** @var DesignInterface|string|null $design */
   $design = $element['#design'] ?? NULL;
   if ($design) {
     if (is_string($design)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 70 files have been changed by Rector                                      

