diff --git a/modules/tupas_registration/src/Controller/RegistrationController.php b/modules/tupas_registration/src/Controller/RegistrationController.php
index 49ce5a0..10be85c 100644
--- a/modules/tupas_registration/src/Controller/RegistrationController.php
+++ b/modules/tupas_registration/src/Controller/RegistrationController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tupas_registration\Controller;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\externalauth\AuthmapInterface;
 use Drupal\externalauth\ExternalAuthInterface;
 use Drupal\tupas\Entity\TupasBank;
@@ -24,38 +25,38 @@ class RegistrationController extends SessionController {
   /**
    * The external auth service.
    *
-   * @var \Drupal\externalauth\ExternalAuthInterface
+   * @var ExternalAuthInterface
    */
   protected $auth;
 
   /**
    * The authmap service.
    *
-   * @var \Drupal\externalauth\AuthmapInterface
+   * @var AuthmapInterface
    */
   protected $authmap;
 
   /**
    * The unique username generator.
    *
-   * @var \Drupal\tupas_registration\UniqueUsernameInterface
+   * @var UniqueUsernameInterface
    */
   protected $usernameGenerator;
 
   /**
    * RegistrationController constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\tupas_session\TupasSessionManagerInterface $session_manager
+   * @param TupasSessionManagerInterface $session_manager
    *   The tupas session manager service.
-   * @param \Drupal\tupas_session\TupasTransactionManagerInterface $transaction_manager
+   * @param TupasTransactionManagerInterface $transaction_manager
    *   The transaction manager service.
-   * @param \Drupal\externalauth\ExternalAuthInterface $auth
+   * @param ExternalAuthInterface $auth
    *   The external auth service.
-   * @param \Drupal\externalauth\AuthmapInterface $authmap
+   * @param AuthmapInterface $authmap
    *   The authmap service.
-   * @param \Drupal\tupas_registration\UniqueUsernameInterface $username_generator
+   * @param UniqueUsernameInterface $username_generator
    *   The unique username generator.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher, TupasSessionManagerInterface $session_manager, TupasTransactionManagerInterface $transaction_manager, ExternalAuthInterface $auth, AuthmapInterface $authmap, UniqueUsernameInterface $username_generator) {
@@ -83,10 +84,10 @@ class RegistrationController extends SessionController {
   /**
    * Page callback for /user/tupas/register.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   Formbuilder form object or redirect response on error.
    */
   public function register(Request $request) {
@@ -156,7 +157,7 @@ class RegistrationController extends SessionController {
     if ($account = $this->sessionManager->loginRegister($this->auth)) {
       // Save user details.
       $account->setUsername($name)
-        ->setPassword(user_password(20));
+        ->setPassword(\Drupal::service('password_generator')->generate(20));
       $account->save();
     }
 
diff --git a/modules/tupas_registration/src/EventSubscriber/TupasRegistrationExternalAuthSubscriber.php b/modules/tupas_registration/src/EventSubscriber/TupasRegistrationExternalAuthSubscriber.php
index 228c50d..0b3f6eb 100644
--- a/modules/tupas_registration/src/EventSubscriber/TupasRegistrationExternalAuthSubscriber.php
+++ b/modules/tupas_registration/src/EventSubscriber/TupasRegistrationExternalAuthSubscriber.php
@@ -25,7 +25,7 @@ class TupasRegistrationExternalAuthSubscriber implements EventSubscriberInterfac
   /**
    * Alter authmap username.
    *
-   * @param \Drupal\externalauth\Event\ExternalAuthAuthmapAlterEvent $event
+   * @param ExternalAuthAuthmapAlterEvent $event
    *   Event to dispatch.
    */
   public function alterUsername(ExternalAuthAuthmapAlterEvent $event) {
diff --git a/modules/tupas_registration/src/EventSubscriber/TupasRegistrationRedirectSubscriber.php b/modules/tupas_registration/src/EventSubscriber/TupasRegistrationRedirectSubscriber.php
index 85d1a76..e5adf9c 100644
--- a/modules/tupas_registration/src/EventSubscriber/TupasRegistrationRedirectSubscriber.php
+++ b/modules/tupas_registration/src/EventSubscriber/TupasRegistrationRedirectSubscriber.php
@@ -24,7 +24,7 @@ class TupasRegistrationRedirectSubscriber implements EventSubscriberInterface {
   /**
    * Redirect to registration form on succesful TUPAS authentication.
    *
-   * @param \Drupal\tupas_session\Event\RedirectAlterEvent $event
+   * @param RedirectAlterEvent $event
    *   The redirect alter event.
    */
   public function redirectAlter(RedirectAlterEvent $event) {
diff --git a/modules/tupas_registration/src/Form/MapTupasConfirmForm.php b/modules/tupas_registration/src/Form/MapTupasConfirmForm.php
index 8f3b015..7ccf745 100644
--- a/modules/tupas_registration/src/Form/MapTupasConfirmForm.php
+++ b/modules/tupas_registration/src/Form/MapTupasConfirmForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tupas_registration\Form;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -20,23 +21,23 @@ class MapTupasConfirmForm extends ConfirmFormBase {
   /**
    * External auth service.
    *
-   * @var \Drupal\externalauth\ExternalAuthInterface
+   * @var ExternalAuthInterface
    */
   protected $externalAuth;
 
   /**
    * The tupas session manager.
    *
-   * @var \Drupal\tupas_session\TupasSessionManagerInterface
+   * @var TupasSessionManagerInterface
    */
   protected $sessionManager;
 
   /**
    * MapTupasConfirmForm constructor.
    *
-   * @param \Drupal\externalauth\ExternalAuthInterface $external_auth
+   * @param ExternalAuthInterface $external_auth
    *   The external auth service.
-   * @param \Drupal\tupas_session\TupasSessionManagerInterface $session_manager
+   * @param TupasSessionManagerInterface $session_manager
    *   The tupas session manager.
    */
   public function __construct(ExternalAuthInterface $external_auth, TupasSessionManagerInterface $session_manager) {
@@ -76,7 +77,7 @@ class MapTupasConfirmForm extends ConfirmFormBase {
   /**
    * Returns the route to go to if the user cancels the action.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object.
    */
   public function getCancelUrl() {
@@ -98,13 +99,13 @@ class MapTupasConfirmForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->messenger()->addMessage($this->t('Account connected succesfully.'));
     $session = $this->sessionManager->getSession();
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = User::load($this->currentUser()->id());
 
     $this->externalAuth->linkExistingAccount($session->getUniqueId(), 'tupas_registration', $account);
diff --git a/modules/tupas_registration/src/Form/RegisterForm.php b/modules/tupas_registration/src/Form/RegisterForm.php
index 31c8a6e..4e89d77 100644
--- a/modules/tupas_registration/src/Form/RegisterForm.php
+++ b/modules/tupas_registration/src/Form/RegisterForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tupas_registration\Form;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\externalauth\ExternalAuthInterface;
 use Drupal\tupas_session\TupasSessionManagerInterface;
@@ -18,14 +19,14 @@ class RegisterForm extends AccountForm {
   /**
    * The tupas session manager service.
    *
-   * @var \Drupal\tupas_session\TupasSessionManagerInterface
+   * @var TupasSessionManagerInterface
    */
   protected $sessionManager;
 
   /**
    * The external auth service.
    *
-   * @var \Drupal\externalauth\ExternalAuthInterface
+   * @var ExternalAuthInterface
    */
   protected $auth;
 
@@ -45,7 +46,7 @@ class RegisterForm extends AccountForm {
   /**
    * Sets the session manager.
    *
-   * @param \Drupal\tupas_session\TupasSessionManagerInterface $sessionManager
+   * @param TupasSessionManagerInterface $sessionManager
    *   The session manager.
    *
    * @return $this
@@ -59,7 +60,7 @@ class RegisterForm extends AccountForm {
   /**
    * Sets the external auth.
    *
-   * @param \Drupal\externalauth\ExternalAuthInterface $externalAuth
+   * @param ExternalAuthInterface $externalAuth
    *   The external auth.
    *
    * @return $this
@@ -107,7 +108,7 @@ class RegisterForm extends AccountForm {
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\user\UserInterface $entity */
+    /** @var UserInterface $entity */
     $entity = $this->entity;
     // Populate the form state with the correct username if one does
     // not exist already.
@@ -121,7 +122,7 @@ class RegisterForm extends AccountForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\user\UserInterface $entity */
+    /** @var UserInterface $entity */
     $entity = $this->entity;
     // Force account to be active.
     $entity->set('status', TRUE);
diff --git a/modules/tupas_registration/src/UniqueUsername.php b/modules/tupas_registration/src/UniqueUsername.php
index d30c142..dd1b894 100644
--- a/modules/tupas_registration/src/UniqueUsername.php
+++ b/modules/tupas_registration/src/UniqueUsername.php
@@ -15,14 +15,14 @@ class UniqueUsername implements UniqueUsernameInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;
 
   /**
    * UniqueUsername constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/tupas_registration/tests/src/Functional/TupasRegistrationFunctionalTest.php b/modules/tupas_registration/tests/src/Functional/TupasRegistrationFunctionalTest.php
index e9281a1..6b5d2c8 100644
--- a/modules/tupas_registration/tests/src/Functional/TupasRegistrationFunctionalTest.php
+++ b/modules/tupas_registration/tests/src/Functional/TupasRegistrationFunctionalTest.php
@@ -70,7 +70,7 @@ class TupasRegistrationFunctionalTest extends TupasSessionFunctionalBase {
     // Fill registration form.
     $this->getSession()->getPage()->fillField('name', 'Testaccount');
     $this->getSession()->getPage()->fillField('mail', 'test@example.com');
-    $this->drupalPostForm(NULL, [], 'Create new account');
+    $this->submitForm([], 'Create new account');
     $this->assertSession()->pageTextContains('Registration successful. You are now logged in.');
     $this->assertSession()->addressEquals('/user/3');
 
@@ -91,7 +91,7 @@ class TupasRegistrationFunctionalTest extends TupasSessionFunctionalBase {
     // Make sure username is hidden.
     $this->assertSession()->fieldNotExists('name');
     $this->getSession()->getPage()->fillField('mail', 'test123@example.com');
-    $this->drupalPostForm(NULL, [], 'Create new account');
+    $this->submitForm([], 'Create new account');
     $this->assertSession()->pageTextContains('Registration successful. You are now logged in.');
     $this->assertSession()->addressEquals('/user/4');
     // Make sure user has same username as the one provided by
@@ -114,7 +114,7 @@ class TupasRegistrationFunctionalTest extends TupasSessionFunctionalBase {
     $this->loginUsingTupas();
 
     $this->assertSession()->addressEquals('/user/tupas/register');
-    $this->drupalPostForm(NULL, [], 'Confirm');
+    $this->submitForm([], 'Confirm');
     $this->assertSession()->pageTextContains('Account connected succesfully.');
 
     // Log current user out and test that user can log with previously
diff --git a/modules/tupas_registration/tests/src/Kernel/TupasRegistrationTest.php b/modules/tupas_registration/tests/src/Kernel/TupasRegistrationTest.php
index 2be8589..06e602f 100644
--- a/modules/tupas_registration/tests/src/Kernel/TupasRegistrationTest.php
+++ b/modules/tupas_registration/tests/src/Kernel/TupasRegistrationTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\tupas_registration\Kernel;
 
+use Drupal\tupas_session\TupasSessionManager;
+use Drupal\tupas_registration\UniqueUsername;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\user\Entity\User;
 use Symfony\Component\HttpFoundation\Request;
@@ -18,21 +21,21 @@ class TupasRegistrationTest extends KernelTestBase {
   /**
    * The session manager.
    *
-   * @var \Drupal\tupas_session\TupasSessionManager
+   * @var TupasSessionManager
    */
   protected $sessionManager;
 
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The unique username generator.
    *
-   * @var \Drupal\tupas_registration\UniqueUsername
+   * @var UniqueUsername
    */
   protected $usernameGenerator;
 
@@ -79,7 +82,7 @@ class TupasRegistrationTest extends KernelTestBase {
    * @param string $name
    *   Account name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   New account.
    */
   protected function createUser($name) {
diff --git a/modules/tupas_registration/tests/src/Unit/UniqueUsernameTest.php b/modules/tupas_registration/tests/src/Unit/UniqueUsernameTest.php
index 5360726..9401c52 100644
--- a/modules/tupas_registration/tests/src/Unit/UniqueUsernameTest.php
+++ b/modules/tupas_registration/tests/src/Unit/UniqueUsernameTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\tupas_registration\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Tests\UnitTestCase;
 use Drupal\tupas_registration\UniqueUsername;
 
@@ -16,21 +17,21 @@ class UniqueUsernameTest extends UnitTestCase {
   /**
    * The mocked entity storage.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   protected $entityStorage;
 
   /**
    * The mocked entity manager.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   protected $entityManager;
 
   /**
    * The unique username generator.
    *
-   * @var \Drupal\tupas_registration\UniqueUsername
+   * @var UniqueUsername
    */
   protected $usernameGenerator;
 
@@ -40,11 +41,9 @@ class UniqueUsernameTest extends UnitTestCase {
   protected function setUp() : void {
     parent::setUp();
 
-    $this->entityManager = $this->getMockBuilder('\Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->getMock();
+    $this->entityManager = $this->createMock('\Drupal\Core\Entity\EntityTypeManagerInterface');
 
-    $this->entityStorage = $this->getMockBuilder('Drupal\Core\Entity\EntityStorageInterface')
-      ->getMock();
+    $this->entityStorage = $this->createMock('Drupal\Core\Entity\EntityStorageInterface');
     $this->entityManager->expects($this->any())
       ->method('getStorage')
       ->will($this->returnValue($this->entityStorage));
diff --git a/modules/tupas_session/src/Access/TupasSessionAccess.php b/modules/tupas_session/src/Access/TupasSessionAccess.php
index ca02171..5949e56 100644
--- a/modules/tupas_session/src/Access/TupasSessionAccess.php
+++ b/modules/tupas_session/src/Access/TupasSessionAccess.php
@@ -17,14 +17,14 @@ class TupasSessionAccess implements AccessInterface {
   /**
    * The tupas session manager.
    *
-   * @var \Drupal\tupas_session\TupasSessionManagerInterface
+   * @var TupasSessionManagerInterface
    */
   protected $sessionManager;
 
   /**
    * TupasSessionAccess constructor.
    *
-   * @param \Drupal\tupas_session\TupasSessionManagerInterface $session_manager
+   * @param TupasSessionManagerInterface $session_manager
    *   The tupas session manager.
    */
   public function __construct(TupasSessionManagerInterface $session_manager) {
@@ -42,10 +42,10 @@ class TupasSessionAccess implements AccessInterface {
    *     _require_tupas_session: 'TRUE'
    * @endcode
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   TRUE user has an active tupas sesssion, FALSE if not.
    */
   public function access(AccountInterface $account) {
diff --git a/modules/tupas_session/src/Controller/SessionController.php b/modules/tupas_session/src/Controller/SessionController.php
index 27377b0..8c3d4de 100644
--- a/modules/tupas_session/src/Controller/SessionController.php
+++ b/modules/tupas_session/src/Controller/SessionController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tupas_session\Controller;
 
+use Drupal\tupas\TupasBankStorage;
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Url;
@@ -28,39 +30,39 @@ class SessionController extends ControllerBase {
   /**
    * Event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Tupas session manager service.
    *
-   * @var \Drupal\tupas_session\TupasSessionManagerInterface
+   * @var TupasSessionManagerInterface
    */
   protected $sessionManager;
 
   /**
    * The transaction manager.
    *
-   * @var \Drupal\tupas_session\TupasTransactionManagerInterface
+   * @var TupasTransactionManagerInterface
    */
   protected $transactionManager;
 
   /**
    * The storage.
    *
-   * @var \Drupal\tupas\TupasBankStorage
+   * @var TupasBankStorage
    */
   protected $storage;
 
   /**
    * SessionController constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\tupas_session\TupasSessionManagerInterface $session_manager
+   * @param TupasSessionManagerInterface $session_manager
    *   Tupas session manager service.
-   * @param \Drupal\tupas_session\TupasTransactionManagerInterface $transaction_manager
+   * @param TupasTransactionManagerInterface $transaction_manager
    *   The transaction manager.
    */
   public function __construct(EventDispatcherInterface $event_dispatcher, TupasSessionManagerInterface $session_manager, TupasTransactionManagerInterface $transaction_manager) {
@@ -115,7 +117,7 @@ class SessionController extends ControllerBase {
     // Regenerate transaction id every page refresh.
     $transaction_id = $this->transactionManager->regenerate();
 
-    /** @var \Drupal\tupas\Entity\TupasBank $bank */
+    /** @var TupasBank $bank */
     foreach ($banks as $bank) {
       if ($this->moduleHandler()->moduleExists('tupas_registration')) {
         // Show only banks that allows registration (correct id type) when using
@@ -141,10 +143,10 @@ class SessionController extends ControllerBase {
   /**
    * Callback for /user/tupas/authenticated path.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect response.
    */
   public function returnTo(Request $request) {
@@ -183,11 +185,12 @@ class SessionController extends ControllerBase {
       $hashed_id = $bank->hashResponseId($request->query->get('B02K_CUSTID'));
 
       // Allow customer id to be altered.
-      /** @var \Drupal\tupas_session\Event\CustomerIdAlterEvent $dispatched_data */
+      /** @var CustomerIdAlterEvent $dispatched_data */
       $dispatched_data = $this->eventDispatcher
-        ->dispatch(SessionEvents::CUSTOMER_ID_ALTER, new CustomerIdAlterEvent($hashed_id, [
+        ->dispatch(new CustomerIdAlterEvent($hashed_id, [
           'raw' => $request->query->all(),
-        ]));
+        ]),
+        SessionEvents::CUSTOMER_ID_ALTER);
       // Name will be sent Latin1 encoded and urlencoded.
       $name = Unicode::convertToUtf8(urldecode($request->query->get('B02K_CUSTNAME')), 'ISO-8859-1');
       // Start tupas session.
@@ -197,8 +200,8 @@ class SessionController extends ControllerBase {
       ]);
       // Allow redirect path to be customized.
       $redirect_data = new RedirectAlterEvent('<front>', $request->query->all(), $this->t('TUPAS authentication succesful.'));
-      /** @var \Drupal\tupas_session\Event\RedirectAlterEvent $redirect */
-      $redirect = $this->eventDispatcher->dispatch(SessionEvents::REDIRECT_ALTER, $redirect_data);
+      /** @var RedirectAlterEvent $redirect */
+      $redirect = $this->eventDispatcher->dispatch($redirect_data, SessionEvents::REDIRECT_ALTER);
 
       // Show message only if message is set.
       if ($message = $redirect->getMessage()) {
diff --git a/modules/tupas_session/src/Event/CustomerIdAlterEvent.php b/modules/tupas_session/src/Event/CustomerIdAlterEvent.php
index ca0ea20..3bb056e 100644
--- a/modules/tupas_session/src/Event/CustomerIdAlterEvent.php
+++ b/modules/tupas_session/src/Event/CustomerIdAlterEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tupas_session\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class CustomerIdAlterEvent.
diff --git a/modules/tupas_session/src/Event/RedirectAlterEvent.php b/modules/tupas_session/src/Event/RedirectAlterEvent.php
index 95f41bb..ea61cd9 100644
--- a/modules/tupas_session/src/Event/RedirectAlterEvent.php
+++ b/modules/tupas_session/src/Event/RedirectAlterEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tupas_session\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class RedirectAlterEvent.
diff --git a/modules/tupas_session/src/Event/SessionAuthenticationEvent.php b/modules/tupas_session/src/Event/SessionAuthenticationEvent.php
index cec8eb1..77c5ef4 100644
--- a/modules/tupas_session/src/Event/SessionAuthenticationEvent.php
+++ b/modules/tupas_session/src/Event/SessionAuthenticationEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\tupas_session\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Session\AccountInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class SessionAuthenticationEvent.
@@ -13,23 +13,23 @@ final class SessionAuthenticationEvent extends Event {
   /**
    * The current account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * The current tupas session.
    *
-   * @var \Drupal\tupas_session\Event\SessionData
+   * @var SessionData
    */
   protected $session;
 
   /**
    * SessionAuthenticationEvent constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
-   * @param \Drupal\tupas_session\Event\SessionData $session_data
+   * @param SessionData $session_data
    *   The current tupas session.
    */
   public function __construct(AccountInterface $account, SessionData $session_data) {
@@ -40,7 +40,7 @@ final class SessionAuthenticationEvent extends Event {
   /**
    * Gets current account.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The account.
    */
   public function getAccount() {
@@ -50,7 +50,7 @@ final class SessionAuthenticationEvent extends Event {
   /**
    * Gets current session.
    *
-   * @return \Drupal\tupas_session\Event\SessionData
+   * @return SessionData
    *   The tupas session.
    */
   public function getSession() {
diff --git a/modules/tupas_session/src/Event/SessionData.php b/modules/tupas_session/src/Event/SessionData.php
index 432160b..6ac2093 100644
--- a/modules/tupas_session/src/Event/SessionData.php
+++ b/modules/tupas_session/src/Event/SessionData.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\tupas_session\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Class SessionData.
diff --git a/modules/tupas_session/src/EventSubscriber/TupasSessionEventSubscriber.php b/modules/tupas_session/src/EventSubscriber/TupasSessionEventSubscriber.php
index 89ecf0a..366ac38 100644
--- a/modules/tupas_session/src/EventSubscriber/TupasSessionEventSubscriber.php
+++ b/modules/tupas_session/src/EventSubscriber/TupasSessionEventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tupas_session\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Session\AccountProxyInterface;
@@ -10,7 +11,6 @@ use Drupal\Core\Url;
 use Drupal\tupas_session\TupasSessionManagerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -23,41 +23,41 @@ class TupasSessionEventSubscriber implements EventSubscriberInterface {
   /**
    * Current user object.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Tupas session manager service.
    *
-   * @var \Drupal\tupas_session\TupasSessionManagerInterface
+   * @var TupasSessionManagerInterface
    */
   protected $sessionManager;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\tupas_session\TupasSessionManagerInterface $session_manager
+   * @param TupasSessionManagerInterface $session_manager
    *   The tupas session manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The currenct user service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(
@@ -87,10 +87,10 @@ class TupasSessionEventSubscriber implements EventSubscriberInterface {
   /**
    * This method is called whenever the kernel.request event is dispatched.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   Event to dispatch.
    */
-  public function handleTupasSession(GetResponseEvent $event) {
+  public function handleTupasSession(RequestEvent $event) {
     // User has access to bypass session expiration. Do nothing.
     if ($this->currentUser->hasPermission('bypass tupas session expiration')) {
       return;
diff --git a/modules/tupas_session/src/TupasSessionManager.php b/modules/tupas_session/src/TupasSessionManager.php
index 2ed6c9d..396dd8e 100644
--- a/modules/tupas_session/src/TupasSessionManager.php
+++ b/modules/tupas_session/src/TupasSessionManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tupas_session;
 
+use Drupal\Core\Config\ConfigFactory;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Session\SessionManagerInterface;
@@ -20,50 +21,50 @@ class TupasSessionManager implements TupasSessionManagerInterface {
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * The session manager service.
    *
-   * @var \Drupal\Core\Session\SessionManagerInterface
+   * @var SessionManagerInterface
    */
   protected $sessionManager;
 
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The session storage controller.
    *
-   * @var \Drupal\tupas_session\TupasSessionStorage
+   * @var TupasSessionStorage
    */
   protected $storage;
 
   /**
    * The time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\tupas_session\TupasSessionStorageInterface $session_storage
+   * @param TupasSessionStorageInterface $session_storage
    *   The session storage controller.
-   * @param \Drupal\Core\Session\SessionManagerInterface $session_manager
+   * @param SessionManagerInterface $session_manager
    *   Session manager service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(
@@ -142,8 +143,8 @@ class TupasSessionManager implements TupasSessionManagerInterface {
 
     // Allow session data to be altered.
     $session_data = new SessionData($transaction_id, $unique_id, $this->getTime(), $data);
-    /** @var \Drupal\tupas_session\Event\SessionData $session */
-    $session = $this->eventDispatcher->dispatch(SessionEvents::SESSION_ALTER, $session_data);
+    /** @var SessionData $session */
+    $session = $this->eventDispatcher->dispatch($session_data, SessionEvents::SESSION_ALTER);
 
     return $this->storage->save($session);
   }
@@ -170,7 +171,7 @@ class TupasSessionManager implements TupasSessionManagerInterface {
     }
     $this->recreate($session);
 
-    $this->eventDispatcher->dispatch(SessionEvents::SESSION_LOGIN, new SessionAuthenticationEvent($account, $session));
+    $this->eventDispatcher->dispatch(new SessionAuthenticationEvent($account, $session), SessionEvents::SESSION_LOGIN);
 
     return $account;
   }
@@ -185,7 +186,7 @@ class TupasSessionManager implements TupasSessionManagerInterface {
     $auth->linkExistingAccount($session->getUniqueId(), 'tupas_registration', $account);
     $this->recreate($session);
 
-    $this->eventDispatcher->dispatch(SessionEvents::SESSION_REGISTER, new SessionAuthenticationEvent($account, $session));
+    $this->eventDispatcher->dispatch(new SessionAuthenticationEvent($account, $session), SessionEvents::SESSION_REGISTER);
 
     return $account;
   }
@@ -203,7 +204,7 @@ class TupasSessionManager implements TupasSessionManagerInterface {
     }
     $this->recreate($session);
 
-    $this->eventDispatcher->dispatch(SessionEvents::SESSION_REGISTER, new SessionAuthenticationEvent($account, $session));
+    $this->eventDispatcher->dispatch(new SessionAuthenticationEvent($account, $session), SessionEvents::SESSION_REGISTER);
 
     return $account;
   }
@@ -213,7 +214,7 @@ class TupasSessionManager implements TupasSessionManagerInterface {
    */
   public function destroy() {
     if ($session_data = $this->getSession()) {
-      $this->eventDispatcher->dispatch(SessionEvents::SESSION_LOGOUT, $session_data);
+      $this->eventDispatcher->dispatch($session_data, SessionEvents::SESSION_LOGOUT);
     }
     return $this->storage->delete();
   }
diff --git a/modules/tupas_session/src/TupasSessionManagerInterface.php b/modules/tupas_session/src/TupasSessionManagerInterface.php
index fc87e86..09562a1 100644
--- a/modules/tupas_session/src/TupasSessionManagerInterface.php
+++ b/modules/tupas_session/src/TupasSessionManagerInterface.php
@@ -43,12 +43,12 @@ interface TupasSessionManagerInterface {
    * because we don't want to create a hard dependency to Tupas registration
    * module.
    *
-   * @param \Drupal\externalauth\ExternalAuthInterface $auth
+   * @param ExternalAuthInterface $auth
    *   The external auth service.
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account entity.
    *
-   * @return \Drupal\user\UserInterface|bool
+   * @return UserInterface|bool
    *   The logged in Drupal user.
    */
   public function linkExisting(ExternalAuthInterface $auth, UserInterface $account);
@@ -60,10 +60,10 @@ interface TupasSessionManagerInterface {
    * because we don't want to create a hard dependency to Tupas registration
    * module.
    *
-   * @param \Drupal\externalauth\ExternalAuthInterface $auth
+   * @param ExternalAuthInterface $auth
    *   The external auth service.
    *
-   * @return \Drupal\user\UserInterface|bool
+   * @return UserInterface|bool
    *   The logged in Drupal user.
    */
   public function login(ExternalAuthInterface $auth);
@@ -75,12 +75,12 @@ interface TupasSessionManagerInterface {
    * because we don't want to create a hard dependency to Tupas registration
    * module.
    *
-   * @param \Drupal\externalauth\ExternalAuthInterface $auth
+   * @param ExternalAuthInterface $auth
    *   The external auth service.
    * @param array $data
    *   An additional account data.
    *
-   * @return bool|\Drupal\user\UserInterface
+   * @return bool|UserInterface
    *   The logged in Drupal user.
    */
   public function loginRegister(ExternalAuthInterface $auth, array $data = []);
@@ -88,7 +88,7 @@ interface TupasSessionManagerInterface {
   /**
    * Recreate session with previous session object.
    *
-   * @param \Drupal\tupas_session\Event\SessionData $session
+   * @param SessionData $session
    *   The session.
    *
    * @return mixed
diff --git a/modules/tupas_session/src/TupasSessionStorage.php b/modules/tupas_session/src/TupasSessionStorage.php
index b3ffb02..56fd808 100644
--- a/modules/tupas_session/src/TupasSessionStorage.php
+++ b/modules/tupas_session/src/TupasSessionStorage.php
@@ -17,32 +17,32 @@ class TupasSessionStorage implements TupasSessionStorageInterface {
   /**
    * The database connection service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack service.
    */
   public function __construct(Connection $connection, AccountProxyInterface $current_user, RequestStack $request_stack) {
diff --git a/modules/tupas_session/src/TupasSessionStorageInterface.php b/modules/tupas_session/src/TupasSessionStorageInterface.php
index cca5378..c1cab97 100644
--- a/modules/tupas_session/src/TupasSessionStorageInterface.php
+++ b/modules/tupas_session/src/TupasSessionStorageInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\tupas_session;
 
+use Drupal\Core\Database\StatementInterface;
 use Drupal\tupas_session\Event\SessionData;
 
 /**
@@ -22,10 +23,10 @@ interface TupasSessionStorageInterface {
   /**
    * Save values to database.
    *
-   * @param \Drupal\tupas_session\Event\SessionData $session
+   * @param SessionData $session
    *   The session.
    *
-   * @return \Drupal\Core\Database\StatementInterface|int|null
+   * @return StatementInterface|int|null
    *   Status of crud operation.
    */
   public function save(SessionData $session);
diff --git a/modules/tupas_session/src/TupasTransactionManager.php b/modules/tupas_session/src/TupasTransactionManager.php
index 098af89..6405a36 100644
--- a/modules/tupas_session/src/TupasTransactionManager.php
+++ b/modules/tupas_session/src/TupasTransactionManager.php
@@ -15,7 +15,7 @@ class TupasTransactionManager implements TupasTransactionManagerInterface {
   /**
    * The session manager.
    *
-   * @var \Drupal\Core\Session\SessionManagerInterface
+   * @var SessionManagerInterface
    */
   protected $sessionManager;
 
@@ -29,9 +29,9 @@ class TupasTransactionManager implements TupasTransactionManagerInterface {
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Session\SessionManagerInterface $session_manager
+   * @param SessionManagerInterface $session_manager
    *   The session manager.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $storage
+   * @param PrivateTempStoreFactory $storage
    *   The private tempstore factory.
    */
   public function __construct(SessionManagerInterface $session_manager, PrivateTempStoreFactory $storage) {
diff --git a/modules/tupas_session/tests/src/Functional/TupasSessionFunctionalBase.php b/modules/tupas_session/tests/src/Functional/TupasSessionFunctionalBase.php
index bef6d3c..8d64a4d 100644
--- a/modules/tupas_session/tests/src/Functional/TupasSessionFunctionalBase.php
+++ b/modules/tupas_session/tests/src/Functional/TupasSessionFunctionalBase.php
@@ -31,7 +31,7 @@ abstract class TupasSessionFunctionalBase extends BrowserTestBase {
   /**
    * Generates bank mac.
    *
-   * @param \Drupal\tupas\Entity\TupasBankInterface $bank
+   * @param TupasBankInterface $bank
    *   Tupas bank.
    * @param int $transaction_id
    *   Transaction id.
@@ -75,7 +75,7 @@ abstract class TupasSessionFunctionalBase extends BrowserTestBase {
   /**
    * Load tupas session for given user.
    *
-   * @param \Drupal\user\UserInterface $owner
+   * @param UserInterface $owner
    *   The account to load session for.
    *
    * @return bool|array
@@ -128,7 +128,7 @@ abstract class TupasSessionFunctionalBase extends BrowserTestBase {
   /**
    * Remove permissions from a user role.
    *
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    *   The ID of a user role to alter.
    * @param array $permissions
    *   (optional) A list of permission names to remove.
diff --git a/modules/tupas_session/tests/src/Kernel/TupasSessionTest.php b/modules/tupas_session/tests/src/Kernel/TupasSessionTest.php
index 543608f..6c357ec 100644
--- a/modules/tupas_session/tests/src/Kernel/TupasSessionTest.php
+++ b/modules/tupas_session/tests/src/Kernel/TupasSessionTest.php
@@ -20,14 +20,14 @@ class TupasSessionTest extends KernelTestBase {
   /**
    * The session manager.
    *
-   * @var \Drupal\tupas_session\TupasSessionManager
+   * @var TupasSessionManager
    */
   protected $sessionManager;
 
   /**
    * Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
@@ -70,8 +70,7 @@ class TupasSessionTest extends KernelTestBase {
   public function testExpirableSessionStart() {
     $timestamp = time();
 
-    $time = $this->getMockBuilder(TimeInterface::class)
-      ->getMock();
+    $time = $this->createMock(TimeInterface::class);
     $time
       ->expects($this->at(0))
       ->method('getRequestTime')
@@ -129,8 +128,7 @@ class TupasSessionTest extends KernelTestBase {
   public function testGarbageCollection() {
     $timestamp = time();
 
-    $time = $this->getMockBuilder(TimeInterface::class)
-      ->getMock();
+    $time = $this->createMock(TimeInterface::class);
     $time
       ->expects($this->at(0))
       ->method('getRequestTime')
diff --git a/modules/tupas_session/tests/src/Unit/TupasSessionManagerTest.php b/modules/tupas_session/tests/src/Unit/TupasSessionManagerTest.php
index 1bfe0ac..ba3762e 100644
--- a/modules/tupas_session/tests/src/Unit/TupasSessionManagerTest.php
+++ b/modules/tupas_session/tests/src/Unit/TupasSessionManagerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\tupas_session\Unit;
 
+use PHPUnit\Framework\MockObject\MockBuilder;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Session\SessionManagerInterface;
 use Drupal\Tests\UnitTestCase;
@@ -21,49 +23,49 @@ class TupasSessionManagerTest extends UnitTestCase {
   /**
    * The stubbed config factory object.
    *
-   * @var \PHPUnit_Framework_MockObject_MockBuilder
+   * @var MockBuilder
    */
   protected $configFactory;
 
   /**
    * The mocked tupas session storage.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   protected $storage;
 
   /**
    * Tupas session manager.
    *
-   * @var \Drupal\tupas_session\TupasSessionManager
+   * @var TupasSessionManager
    */
   protected $tupasSessionManager;
 
   /**
    * The mocked session manager.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   protected $sessionManager;
 
   /**
    * The mocked event dispatcher.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   protected $eventDispatcher;
 
   /**
    * Session object.
    *
-   * @var \Drupal\tupas_session\Event\SessionData
+   * @var SessionData
    */
   protected $session;
 
   /**
    * The time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
@@ -78,25 +80,17 @@ class TupasSessionManagerTest extends UnitTestCase {
         'tupas_session_length' => 30,
       ],
     ]);
-    $this->storage = $this->getMockBuilder(TupasSessionStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->storage = $this->createMock(TupasSessionStorageInterface::class);
 
-    $this->sessionManager = $this->getMockBuilder(SessionManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->sessionManager = $this->createMock(SessionManagerInterface::class);
 
-    $this->eventDispatcher = $this->getMockBuilder(EventDispatcherInterface::class)
-      ->getMock();
+    $this->eventDispatcher = $this->createMock(EventDispatcherInterface::class);
 
     $this->session = new SessionData(123456, $this->randomMachineName(), time(), []);
 
-    $dispatched_event = $this->getMockBuilder(SessionData::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $dispatched_event = $this->createMock(SessionData::class);
 
-    $this->time = $this->getMockBuilder(TimeInterface::class)
-      ->getMock();
+    $this->time = $this->createMock(TimeInterface::class);
 
     $this->eventDispatcher->expects($this->any())
       ->method('dispatch')
