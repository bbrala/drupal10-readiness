diff --git a/block_placeholder.module b/block_placeholder.module
index 86aed5f..c228688 100644
--- a/block_placeholder.module
+++ b/block_placeholder.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\block_content\Entity\BlockContent;
 use Drupal\block_placeholder\Entity\BlockPlaceholderReference;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ -37,7 +38,7 @@ function block_placeholder_theme_suggestions_block_placeholder(array $variables)
   /** @var BlockPlaceholderReference $placeholder */
   $placeholder = $element['#placeholder'];
 
-  /** @var \Drupal\block_content\Entity\BlockContent $block_content */
+  /** @var BlockContent $block_content */
   $block_content = isset($element['content']['#block_content'])
     ? $element['content']['#block_content']
     : NULL;
diff --git a/src/BlockPlaceholderManagerInterface.php b/src/BlockPlaceholderManagerInterface.php
index 1498e41..dd3a372 100644
--- a/src/BlockPlaceholderManagerInterface.php
+++ b/src/BlockPlaceholderManagerInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\block_placeholder;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 /**
  * Define block placeholder manager interface.
  */
@@ -12,8 +14,8 @@ interface BlockPlaceholderManagerInterface {
    *
    * @param $id
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return EntityInterface|null
+   * @throws InvalidPluginDefinitionException
    */
   public function load($id);
 
@@ -22,8 +24,8 @@ interface BlockPlaceholderManagerInterface {
    *
    * @param array $ids
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return EntityInterface[]
+   * @throws InvalidPluginDefinitionException
    */
   public function loadMultiple(array $ids = []);
 }
diff --git a/src/Controller/BlockPlaceholderListBuilder.php b/src/Controller/BlockPlaceholderListBuilder.php
index 47c1613..6e5c457 100644
--- a/src/Controller/BlockPlaceholderListBuilder.php
+++ b/src/Controller/BlockPlaceholderListBuilder.php
@@ -39,7 +39,7 @@ class BlockPlaceholderListBuilder extends ConfigEntityListBuilder {
         '#items' => $block_types,
       ];
     }
-    $row['block_types'] = render($element_type);
+    $row['block_types'] = \Drupal::service('renderer')->render($element_type);
 
     return $row + parent::buildRow($entity);
   }
diff --git a/src/Entity/BlockPlaceholderInterface.php b/src/Entity/BlockPlaceholderInterface.php
index 257e92a..426ccb3 100644
--- a/src/Entity/BlockPlaceholderInterface.php
+++ b/src/Entity/BlockPlaceholderInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\block_placeholder\Entity;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 /**
  * Define block placeholder interface.
  */
@@ -31,8 +33,8 @@ interface BlockPlaceholderInterface {
   /**
    * Load block content that's related to this placeholder.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return EntityInterface
+   * @throws InvalidPluginDefinitionException
    */
   public function loadReferences(array $exclude_ids);
 
@@ -74,7 +76,7 @@ interface BlockPlaceholderInterface {
    *   An entity identifier.
    *
    * @return bool
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function entityExist($id);
 
diff --git a/src/Entity/BlockPlaceholderReference.php b/src/Entity/BlockPlaceholderReference.php
index 4db7da3..9a3a15b 100644
--- a/src/Entity/BlockPlaceholderReference.php
+++ b/src/Entity/BlockPlaceholderReference.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\block_placeholder\Entity;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\Annotation\ConfigEntityType;
 use Drupal\Core\Entity\EntityInterface;
@@ -197,7 +200,7 @@ class BlockPlaceholderReference extends ConfigEntityBase implements BlockPlaceho
    * Load block placeholder blocks.
    *
    * @return EntityInterface[]
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function loadBlockPlaceholderBlocks() {
     return $this->entityTypeManager()
@@ -208,8 +211,8 @@ class BlockPlaceholderReference extends ConfigEntityBase implements BlockPlaceho
   /**
    * Get entity query.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return QueryInterface
+   * @throws InvalidPluginDefinitionException
    */
   protected function getQuery() {
     return $this->getStorage()->getQuery();
@@ -218,8 +221,8 @@ class BlockPlaceholderReference extends ConfigEntityBase implements BlockPlaceho
   /**
    * Get entity storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return EntityStorageInterface
+   * @throws InvalidPluginDefinitionException
    */
   protected function getStorage() {
     return $this
diff --git a/src/Form/BlockPlaceholderDeleteForm.php b/src/Form/BlockPlaceholderDeleteForm.php
index 5770428..5941a08 100644
--- a/src/Form/BlockPlaceholderDeleteForm.php
+++ b/src/Form/BlockPlaceholderDeleteForm.php
@@ -47,7 +47,7 @@ class BlockPlaceholderDeleteForm extends EntityConfirmFormBase {
         $this->t('Unable to delete block placeholder @label, due to the 
         following block configurations existing: @list_blocks', [
           '@label' => $entity->label(),
-          '@list_blocks' => render($list_blocks)
+          '@list_blocks' => \Drupal::service('renderer')->render($list_blocks)
         ])
       );
     }
diff --git a/src/Form/BlockPlaceholderForm.php b/src/Form/BlockPlaceholderForm.php
index f31433a..21e3014 100644
--- a/src/Form/BlockPlaceholderForm.php
+++ b/src/Form/BlockPlaceholderForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\block_placeholder\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\block_content\Entity\BlockContentType;
 use Drupal\block_placeholder\Entity\BlockPlaceholderReference;
 use Drupal\Core\Entity\EntityForm;
@@ -132,7 +133,7 @@ class BlockPlaceholderForm extends EntityForm {
    * Get block bundle type options.
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getBlockBundleTypeOptions() {
     $options = [];
@@ -151,7 +152,7 @@ class BlockPlaceholderForm extends EntityForm {
    * Get content block bundle types.
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getBlockBundleTypes() {
     return $this->entityTypeManager
diff --git a/src/Form/BlockPlaceholderOrderForm.php b/src/Form/BlockPlaceholderOrderForm.php
index 4cdc881..4c813b0 100644
--- a/src/Form/BlockPlaceholderOrderForm.php
+++ b/src/Form/BlockPlaceholderOrderForm.php
@@ -80,7 +80,7 @@ class BlockPlaceholderOrderForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Plugin/Block/BlockPlaceholder.php b/src/Plugin/Block/BlockPlaceholder.php
index 444269a..bc72d8d 100644
--- a/src/Plugin/Block/BlockPlaceholder.php
+++ b/src/Plugin/Block/BlockPlaceholder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\block_placeholder\Plugin\Block;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\block_content\BlockContentInterface;
 use Drupal\block_placeholder\BlockPlaceholderManagerInterface;
 use Drupal\block_placeholder\Entity\BlockPlaceholderInterface;
@@ -190,7 +192,7 @@ class BlockPlaceholder extends BlockBase implements ContainerFactoryPluginInterf
   /**
    * Get block placeholder content classes.
    *
-   * @param \Drupal\block_content\BlockContentInterface $block
+   * @param BlockContentInterface $block
    *   The block entity instance.
    *
    * @return array
@@ -256,8 +258,8 @@ class BlockPlaceholder extends BlockBase implements ContainerFactoryPluginInterf
   /**
    * Get block placeholder entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return EntityInterface|null
+   * @throws InvalidPluginDefinitionException
    */
   protected function getBlockPlaceholderEntity() {
     if (!$this->hasBlockPlaceholder()) {
@@ -274,7 +276,7 @@ class BlockPlaceholder extends BlockBase implements ContainerFactoryPluginInterf
    * Get block placeholder options.
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getBlockPlaceholderOptions() {
     $options = [];
diff --git a/templates/block_placeholder.theme b/templates/block_placeholder.theme
index 23d3759..e421763 100644
--- a/templates/block_placeholder.theme
+++ b/templates/block_placeholder.theme
@@ -13,7 +13,7 @@ use Drupal\Core\Template\Attribute;
 function template_preprocess_block_placeholder(&$variables) {
   $element = $variables['element'];
 
-  /** @var \Drupal\Core\Template\Attribute $content_attributes */
+  /** @var Attribute $content_attributes */
   $content_attributes = isset($variables['content_attributes'])
     && !empty($variables['content_attributes'])
       ? $variables['content_attributes']
