diff --git a/modules/simple_cron_examples/src/Plugin/SimpleCron/ConfigurableCron.php b/modules/simple_cron_examples/src/Plugin/SimpleCron/ConfigurableCron.php
index c37981b..fabd647 100644
--- a/modules/simple_cron_examples/src/Plugin/SimpleCron/ConfigurableCron.php
+++ b/modules/simple_cron_examples/src/Plugin/SimpleCron/ConfigurableCron.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_cron_examples\Plugin\SimpleCron;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Logger\LoggerChannelTrait;
 use Drupal\simple_cron\Plugin\SimpleCronPluginBase;
@@ -22,7 +23,7 @@ class ConfigurableCron extends SimpleCronPluginBase {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
diff --git a/simple_cron.install b/simple_cron.install
index ecda471..cca2c33 100644
--- a/simple_cron.install
+++ b/simple_cron.install
@@ -1,10 +1,10 @@
 <?php
 
+use Drupal\simple_cron\Entity\CronJobInterface;
 /**
  * @file
  * Simple cron install file.
  */
-
 /**
  * Implements hook_requirements().
  */
@@ -33,7 +33,7 @@ function simple_cron_requirements($phase) {
     $requirements['cron_jobs']['title'] = 'Simple Cron';
     $requirements['cron_jobs']['severity'] = REQUIREMENT_OK;
 
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface[] $jobs */
+    /** @var CronJobInterface[] $jobs */
     $jobs = \Drupal::entityTypeManager()
       ->getStorage('simple_cron_job')
       ->loadByProperties(['status' => TRUE]);
diff --git a/simple_cron.module b/simple_cron.module
index 2bd493f..536928b 100644
--- a/simple_cron.module
+++ b/simple_cron.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\simple_cron\CronJobManagerInterface;
 /**
  * @file
  * Simple cron module file.
@@ -26,7 +27,7 @@ function simple_cron_help($route_name, RouteMatchInterface $route_match) {
  * Implements hook_modules_installed().
  */
 function simple_cron_modules_installed() {
-  /** @var \Drupal\simple_cron\CronJobManagerInterface $cron_job_manager */
+  /** @var CronJobManagerInterface $cron_job_manager */
   $cron_job_manager = \Drupal::service('simple_cron.cron_job_manager');
   $cron_job_manager->updateList();
 }
@@ -35,7 +36,7 @@ function simple_cron_modules_installed() {
  * Implements hook_modules_uninstalled().
  */
 function simple_cron_modules_uninstalled() {
-  /** @var \Drupal\simple_cron\CronJobManagerInterface $cron_job_manager */
+  /** @var CronJobManagerInterface $cron_job_manager */
   $cron_job_manager = \Drupal::service('simple_cron.cron_job_manager');
   $cron_job_manager->updateList();
 }
@@ -44,7 +45,7 @@ function simple_cron_modules_uninstalled() {
  * Implements hook_rebuild().
  */
 function simple_cron_rebuild() {
-  /** @var \Drupal\simple_cron\CronJobManagerInterface $cron_job_manager */
+  /** @var CronJobManagerInterface $cron_job_manager */
   $cron_job_manager = \Drupal::service('simple_cron.cron_job_manager');
   $cron_job_manager->updateList();
 }
diff --git a/src/Annotation/SimpleCron.php b/src/Annotation/SimpleCron.php
index 9bc0cbf..5c0b0ea 100644
--- a/src/Annotation/SimpleCron.php
+++ b/src/Annotation/SimpleCron.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_cron\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class SimpleCron extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Commands/SimpleCronCommands.php b/src/Commands/SimpleCronCommands.php
index 466b251..430ec30 100644
--- a/src/Commands/SimpleCronCommands.php
+++ b/src/Commands/SimpleCronCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_cron\Commands;
 
+use Drupal\simple_cron\Entity\CronJobInterface;
 use Consolidation\OutputFormatters\StructuredData\RowsOfFields;
 use Drupal\Component\Utility\Environment;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -22,23 +23,23 @@ class SimpleCronCommands extends DrushCommands {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;
 
   /**
    * SimpleCronCommands constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
@@ -77,7 +78,7 @@ class SimpleCronCommands extends DrushCommands {
     }
 
     // Run a specific job.
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface $job */
+    /** @var CronJobInterface $job */
     $job = $this->entityTypeManager->getStorage('simple_cron_job')->load($id);
     if (!$job) {
       throw new \Exception(dt('@name not found', ['@name' => $id]));
@@ -124,7 +125,7 @@ class SimpleCronCommands extends DrushCommands {
    *
    * @aliases scron:list,simple-cron:list
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields|null
+   * @return RowsOfFields|null
    *   The table of cron jobs.
    *
    * @throws \Exception
@@ -133,7 +134,7 @@ class SimpleCronCommands extends DrushCommands {
     'status' => NULL,
     'format' => 'table',
   ]): ?RowsOfFields {
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface[] $jobs */
+    /** @var CronJobInterface[] $jobs */
     $jobs = $this->entityTypeManager->getStorage('simple_cron_job')->loadMultiple();
 
     // Get the --status option.
diff --git a/src/Controller/JobController.php b/src/Controller/JobController.php
index b8ddb16..98db283 100644
--- a/src/Controller/JobController.php
+++ b/src/Controller/JobController.php
@@ -18,14 +18,14 @@ class JobController extends ControllerBase {
   /**
    * The cron.
    *
-   * @var \Drupal\Core\CronInterface
+   * @var CronInterface
    */
   protected $cron;
 
   /**
    * JobController constructor.
    *
-   * @param \Drupal\Core\CronInterface $cron
+   * @param CronInterface $cron
    *   The cron.
    */
   public function __construct(CronInterface $cron) {
@@ -44,10 +44,10 @@ class JobController extends ControllerBase {
   /**
    * Runs a single cron job.
    *
-   * @param \Drupal\simple_cron\Entity\CronJobInterface $simple_cron_job
+   * @param CronJobInterface $simple_cron_job
    *   The cron job.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirects to the job listing after running a job.
    */
   public function run(CronJobInterface $simple_cron_job): RedirectResponse {
diff --git a/src/CronJobAccessControlHandler.php b/src/CronJobAccessControlHandler.php
index e8cf8b1..34ef4e2 100644
--- a/src/CronJobAccessControlHandler.php
+++ b/src/CronJobAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_cron;
 
+use Drupal\simple_cron\Entity\CronJobInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -22,7 +23,7 @@ class CronJobAccessControlHandler extends EntityAccessControlHandler {
       return AccessResult::forbidden()->addCacheableDependency($entity);
     }
 
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface $entity */
+    /** @var CronJobInterface $entity */
     switch ($operation) {
       case 'disable':
         return AccessResult::allowedIf($entity->status())
diff --git a/src/CronJobListBuilder.php b/src/CronJobListBuilder.php
index 323af03..0e2fd30 100644
--- a/src/CronJobListBuilder.php
+++ b/src/CronJobListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_cron;
 
+use Drupal\simple_cron\Entity\CronJobInterface;
 use Drupal\Core\Config\Entity\DraggableListBuilder;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -17,18 +18,18 @@ class CronJobListBuilder extends DraggableListBuilder {
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new FilterFormatListBuilder.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter.
    */
   public function __construct(
@@ -78,7 +79,7 @@ class CronJobListBuilder extends DraggableListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface $entity */
+    /** @var CronJobInterface $entity */
     $row['title']['#markup'] = $entity->label();
     $row['provider']['#markup'] = $entity->getProviderName();
     $row['crontab']['#markup'] = $entity->getCrontab();
diff --git a/src/CronJobManager.php b/src/CronJobManager.php
index 540697a..a2ee3c7 100644
--- a/src/CronJobManager.php
+++ b/src/CronJobManager.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\simple_cron;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\simple_cron\Entity\CronJob;
 use Drupal\simple_cron\Entity\CronJobInterface;
@@ -18,27 +22,27 @@ class CronJobManager implements CronJobManagerInterface {
   /**
    * The cron job storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $cronJobStorage;
 
   /**
    * The simple cron plugin manager.
    *
-   * @var \Drupal\simple_cron\Plugin\SimpleCronPluginManagerInterface
+   * @var SimpleCronPluginManagerInterface
    */
   protected $simpleCronPluginManager;
 
   /**
    * CronJobManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\simple_cron\Plugin\SimpleCronPluginManagerInterface $simple_cron_plugin_manager
+   * @param SimpleCronPluginManagerInterface $simple_cron_plugin_manager
    *   The simple cron plugin manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
@@ -51,7 +55,7 @@ class CronJobManager implements CronJobManagerInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function updateList(): void {
     $updated_jobs = [];
@@ -102,7 +106,7 @@ class CronJobManager implements CronJobManagerInterface {
    * @param string $operator
    *   The condition operator.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function deleteCronJobs(array $jobs_ids, string $operator): void {
     // Delete old cron jobs entities.
@@ -125,10 +129,10 @@ class CronJobManager implements CronJobManagerInterface {
    *   The type.
    * @param array $definition
    *   The definition.
-   * @param \Drupal\simple_cron\Plugin\SimpleCronPluginInterface $plugin
+   * @param SimpleCronPluginInterface $plugin
    *   The simple cron plugin.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createCronJob(string $id, string $type, array $definition, SimpleCronPluginInterface $plugin): void {
     if (!$this->cronJobStorage->load($id)) {
diff --git a/src/CronJobManagerInterface.php b/src/CronJobManagerInterface.php
index e3b2f25..ce4c138 100644
--- a/src/CronJobManagerInterface.php
+++ b/src/CronJobManagerInterface.php
@@ -22,7 +22,7 @@ interface CronJobManagerInterface {
    * @param string $job_id
    *   The job id.
    *
-   * @return \Drupal\simple_cron\Entity\CronJobInterface|null
+   * @return CronJobInterface|null
    *   Cron job.
    */
   public function getEnabledJob(string $job_id): ?CronJobInterface;
@@ -30,7 +30,7 @@ interface CronJobManagerInterface {
   /**
    * Get enabled cron jobs for default cron run.
    *
-   * @return \Drupal\simple_cron\Entity\CronJobInterface[]
+   * @return CronJobInterface[]
    *   Cron jobs.
    */
   public function getEnabledDefaultRunJobs(): array;
diff --git a/src/Entity/CronJob.php b/src/Entity/CronJob.php
index ae721db..8e0d1a0 100644
--- a/src/Entity/CronJob.php
+++ b/src/Entity/CronJob.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\simple_cron\Entity;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Lock\LockBackendInterface;
+use Drupal\Core\Database\Connection;
+use Drupal\Core\State\StateInterface;
+use Drupal\simple_cron\Plugin\SimpleCronPluginManagerInterface;
 use Cron\CronExpression;
 use Drupal\Component\Utility\Timer;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ -147,21 +152,21 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The lock service.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -175,14 +180,14 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
   /**
    * Stores the state storage service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The simple cron plugin manager.
    *
-   * @var \Drupal\simple_cron\Plugin\SimpleCronPluginManagerInterface
+   * @var SimpleCronPluginManagerInterface
    */
   protected $simpleCronPluginManager;
 
@@ -294,7 +299,7 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
 
     // Delete cron job state values.
     $state_ids = [];
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface $entity */
+    /** @var CronJobInterface $entity */
     foreach ($entities as $entity) {
       $state_ids[] = 'simple_cron.state.' . $entity->id();
     }
@@ -432,7 +437,7 @@ class CronJob extends ConfigEntityBase implements CronJobInterface {
    */
   public static function sort(ConfigEntityInterface $a, ConfigEntityInterface $b): int {
     /** @var \Drupal\simple_cron\Entity\CronJobInterface $a */
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface $b */
+    /** @var CronJobInterface $b */
     $a_weight = $a->getWeight();
     $b_weight = $b->getWeight();
 
diff --git a/src/Entity/CronJobInterface.php b/src/Entity/CronJobInterface.php
index 940bb5a..7631505 100644
--- a/src/Entity/CronJobInterface.php
+++ b/src/Entity/CronJobInterface.php
@@ -23,7 +23,7 @@ interface CronJobInterface extends ConfigEntityInterface {
   /**
    * Get plugin.
    *
-   * @return \Drupal\simple_cron\Plugin\SimpleCronPluginInterface|null
+   * @return SimpleCronPluginInterface|null
    *   Simple cron plugin.
    */
   public function getPlugin(): ?SimpleCronPluginInterface;
@@ -100,7 +100,7 @@ interface CronJobInterface extends ConfigEntityInterface {
   /**
    * Get next run time.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime|null
+   * @return DrupalDateTime|null
    *   Last run date.
    */
   public function getLastRunTime(): ?DrupalDateTime;
@@ -108,7 +108,7 @@ interface CronJobInterface extends ConfigEntityInterface {
   /**
    * Get next run timestamp.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   Next run date.
    */
   public function getNextRunTime(): DrupalDateTime;
@@ -140,7 +140,7 @@ interface CronJobInterface extends ConfigEntityInterface {
   /**
    * Get single cron job run url.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The single run url.
    */
   public function getSingleRunUrl(): Url;
diff --git a/src/Form/CronJobDisableForm.php b/src/Form/CronJobDisableForm.php
index 7448492..666085c 100644
--- a/src/Form/CronJobDisableForm.php
+++ b/src/Form/CronJobDisableForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_cron\Form;
 
+use Drupal\simple_cron\Entity\CronJobInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -16,7 +17,7 @@ class CronJobDisableForm extends EntityConfirmFormBase {
   /**
    * The cron job.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $entity;
 
diff --git a/src/Form/CronJobEnableForm.php b/src/Form/CronJobEnableForm.php
index eed6c0d..9c0812c 100644
--- a/src/Form/CronJobEnableForm.php
+++ b/src/Form/CronJobEnableForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_cron\Form;
 
+use Drupal\simple_cron\Entity\CronJobInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -16,7 +17,7 @@ class CronJobEnableForm extends EntityConfirmFormBase {
   /**
    * The cron job.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $entity;
 
diff --git a/src/Form/CronJobForm.php b/src/Form/CronJobForm.php
index ec52d56..8be4d29 100644
--- a/src/Form/CronJobForm.php
+++ b/src/Form/CronJobForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_cron\Form;
 
+use Drupal\simple_cron\Entity\CronJobInterface;
 use Cron\CronExpression;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -16,7 +17,7 @@ class CronJobForm extends EntityForm {
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $entity;
 
diff --git a/src/Form/CronJobUnlockForm.php b/src/Form/CronJobUnlockForm.php
index aea535d..764d3da 100644
--- a/src/Form/CronJobUnlockForm.php
+++ b/src/Form/CronJobUnlockForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_cron\Form;
 
+use Drupal\simple_cron\Entity\CronJobInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -16,7 +17,7 @@ class CronJobUnlockForm extends EntityConfirmFormBase {
   /**
    * The cron job.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $entity;
 
diff --git a/src/Form/SimpleCronSettingsForm.php b/src/Form/SimpleCronSettingsForm.php
index f67739d..212df42 100644
--- a/src/Form/SimpleCronSettingsForm.php
+++ b/src/Form/SimpleCronSettingsForm.php
@@ -20,16 +20,16 @@ class SimpleCronSettingsForm extends ConfigFormBase {
   /**
    * The cron job manager.
    *
-   * @var \Drupal\simple_cron\CronJobManagerInterface
+   * @var CronJobManagerInterface
    */
   protected $cronJobManager;
 
   /**
    * SimpleCronSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\simple_cron\CronJobManagerInterface $cron_job_manager
+   * @param CronJobManagerInterface $cron_job_manager
    *   The cron job manager.
    */
   public function __construct(
diff --git a/src/Plugin/SimpleCron/Cron.php b/src/Plugin/SimpleCron/Cron.php
index 5d56c67..cb54bd3 100644
--- a/src/Plugin/SimpleCron/Cron.php
+++ b/src/Plugin/SimpleCron/Cron.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_cron\Plugin\SimpleCron;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\simple_cron\Form\SimpleCronSettingsForm;
 use Drupal\simple_cron\Plugin\SimpleCronPluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -19,7 +20,7 @@ class Cron extends SimpleCronPluginBase {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
diff --git a/src/Plugin/SimpleCron/Queue.php b/src/Plugin/SimpleCron/Queue.php
index 5fb799f..4bfb2f9 100644
--- a/src/Plugin/SimpleCron/Queue.php
+++ b/src/Plugin/SimpleCron/Queue.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simple_cron\Plugin\SimpleCron;
 
+use Drupal\Core\Queue\QueueWorkerManagerInterface;
+use Drupal\Core\Queue\QueueFactory;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Logger\LoggerChannelTrait;
 use Drupal\Core\Queue\DelayableQueueInterface;
@@ -29,14 +31,14 @@ class Queue extends SimpleCronPluginBase {
   /**
    * The queue worker manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueManager;
 
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
diff --git a/src/Plugin/SimpleCronPluginBase.php b/src/Plugin/SimpleCronPluginBase.php
index 63f312b..5524193 100644
--- a/src/Plugin/SimpleCronPluginBase.php
+++ b/src/Plugin/SimpleCronPluginBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_cron\Plugin;
 
+use Drupal\Core\Config\ConfigFactory;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -19,14 +20,14 @@ abstract class SimpleCronPluginBase extends PluginBase implements SimpleCronPlug
   /**
    * The cron job.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $cronJob;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory|object|null
+   * @var ConfigFactory|object|null
    */
   protected $configFactory;
 
diff --git a/src/Plugin/SimpleCronPluginInterface.php b/src/Plugin/SimpleCronPluginInterface.php
index bd29920..3254dcf 100644
--- a/src/Plugin/SimpleCronPluginInterface.php
+++ b/src/Plugin/SimpleCronPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_cron\Plugin;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ -23,7 +24,7 @@ interface SimpleCronPluginInterface extends PluginInspectionInterface, Configura
   /**
    * Get plugin label.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The plugin label.
    */
   public function label();
@@ -52,7 +53,7 @@ interface SimpleCronPluginInterface extends PluginInspectionInterface, Configura
   /**
    * Get cron job.
    *
-   * @return \Drupal\simple_cron\Entity\CronJobInterface
+   * @return CronJobInterface
    *   Cron job.
    */
   public function getCronJob(): CronJobInterface;
@@ -60,7 +61,7 @@ interface SimpleCronPluginInterface extends PluginInspectionInterface, Configura
   /**
    * Set cron job.
    *
-   * @param \Drupal\simple_cron\Entity\CronJobInterface $cron_job
+   * @param CronJobInterface $cron_job
    *   The cron job.
    *
    * @return \Drupal\simple_cron\Plugin\SimpleCronPluginInterface
diff --git a/src/Plugin/SimpleCronPluginManager.php b/src/Plugin/SimpleCronPluginManager.php
index 2892514..908e6a9 100644
--- a/src/Plugin/SimpleCronPluginManager.php
+++ b/src/Plugin/SimpleCronPluginManager.php
@@ -22,9 +22,9 @@ class SimpleCronPluginManager extends DefaultPluginManager implements SimpleCron
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(
diff --git a/src/Plugin/SimpleCronPluginManagerInterface.php b/src/Plugin/SimpleCronPluginManagerInterface.php
index e564ec6..844471b 100644
--- a/src/Plugin/SimpleCronPluginManagerInterface.php
+++ b/src/Plugin/SimpleCronPluginManagerInterface.php
@@ -13,7 +13,7 @@ interface SimpleCronPluginManagerInterface extends PluginManagerInterface, Cache
   /**
    * Get plugins.
    *
-   * @return \Drupal\simple_cron\Plugin\SimpleCronPluginInterface[]
+   * @return SimpleCronPluginInterface[]
    *   An array of plugins. Keys are plugin IDs.
    */
   public function getPlugins(): array;
@@ -26,7 +26,7 @@ interface SimpleCronPluginManagerInterface extends PluginManagerInterface, Cache
    * @param array $configuration
    *   (Optional) The plugin configuration. Defaults to [].
    *
-   * @return \Drupal\simple_cron\Plugin\SimpleCronPluginInterface|null
+   * @return SimpleCronPluginInterface|null
    *   The simple cron plugin.
    */
   public function getPlugin(string $plugin_id, array $configuration = []): ?SimpleCronPluginInterface;
diff --git a/src/ProxyClass/SimpleCron.php b/src/ProxyClass/SimpleCron.php
index df87dde..75629d0 100644
--- a/src/ProxyClass/SimpleCron.php
+++ b/src/ProxyClass/SimpleCron.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_cron\ProxyClass {
 
+  use Drupal\Core\Cron;
   use Drupal\Core\CronInterface;
   use Drupal\Core\DependencyInjection\DependencySerializationTrait;
   use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -25,21 +26,21 @@ namespace Drupal\simple_cron\ProxyClass {
     /**
      * The real proxied service, after it was lazy loaded.
      *
-     * @var \Drupal\Core\Cron
+     * @var Cron
      */
     protected $service;
 
     /**
      * The service container.
      *
-     * @var \Symfony\Component\DependencyInjection\ContainerInterface
+     * @var ContainerInterface
      */
     protected $container;
 
     /**
      * Constructs a ProxyClass Drupal proxy object.
      *
-     * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+     * @param ContainerInterface $container
      *   The container.
      * @param string $drupal_proxy_original_service_id
      *   The service ID of the original service.
diff --git a/src/Routing/CronJobRouteProvider.php b/src/Routing/CronJobRouteProvider.php
index bf67ed7..65376b7 100644
--- a/src/Routing/CronJobRouteProvider.php
+++ b/src/Routing/CronJobRouteProvider.php
@@ -48,10 +48,10 @@ class CronJobRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the enable form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getEnableFormRoute(EntityTypeInterface $entity_type): ?Route {
@@ -73,10 +73,10 @@ class CronJobRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the disable form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getDisableFormRoute(EntityTypeInterface $entity_type): ?Route {
@@ -98,10 +98,10 @@ class CronJobRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the unlock form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getUnlockPageRoute(EntityTypeInterface $entity_type): ?Route {
@@ -123,10 +123,10 @@ class CronJobRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the run page route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRunPageRoute(EntityTypeInterface $entity_type): ?Route {
diff --git a/src/SimpleCron.php b/src/SimpleCron.php
index afb3a35..ff72e23 100644
--- a/src/SimpleCron.php
+++ b/src/SimpleCron.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_cron;
 
+use Drupal\simple_cron\Entity\CronJobInterface;
 use Drupal\Component\Utility\Environment;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Cron;
@@ -19,28 +20,28 @@ class SimpleCron extends Cron {
   /**
    * The cron job manager.
    *
-   * @var \Drupal\simple_cron\CronJobManagerInterface
+   * @var CronJobManagerInterface
    */
   protected $cronJobManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Set cron job manager.
    *
-   * @param \Drupal\simple_cron\CronJobManagerInterface $cron_job_manager
+   * @param CronJobManagerInterface $cron_job_manager
    *   The cron job manager.
    */
   public function setCronJobManager(CronJobManagerInterface $cron_job_manager): void {
@@ -50,7 +51,7 @@ class SimpleCron extends Cron {
   /**
    * Set config factory.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function setConfigFactory(ConfigFactoryInterface $config_factory): void {
@@ -60,7 +61,7 @@ class SimpleCron extends Cron {
   /**
    * Set request stack.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function setRequestStack(RequestStack $request_stack): void {
@@ -89,7 +90,7 @@ class SimpleCron extends Cron {
 
     // Manual cron job run.
     if ($current_request && $current_request->attributes->get('_route') === 'entity.simple_cron_job.run') {
-      /** @var \Drupal\simple_cron\Entity\CronJobInterface $job */
+      /** @var CronJobInterface $job */
       $job = $current_request->get('simple_cron_job');
       $return = $job->run($this->time->getRequestTime(), TRUE);
     }
diff --git a/tests/src/Functional/CronJobTest.php b/tests/src/Functional/CronJobTest.php
index b016b48..20b0d91 100644
--- a/tests/src/Functional/CronJobTest.php
+++ b/tests/src/Functional/CronJobTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\simple_cron\Functional;
 
+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\simple_cron\Entity\CronJob;
 use Drupal\Tests\Traits\Core\CronRunTrait;
 
@@ -172,8 +174,8 @@ class CronJobTest extends SimpleCronBrowserTestBase {
    * @param int $row
    *   The row.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
    */
   protected function assertCronNotRun(int $row = 1): void {
     $this->drupalGet('admin/config/system/cron/jobs');
@@ -186,8 +188,8 @@ class CronJobTest extends SimpleCronBrowserTestBase {
    * @param int $row
    *   The row.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
    */
   protected function assertCronRun(int $row = 1): void {
     $this->drupalGet('admin/config/system/cron/jobs');
diff --git a/tests/src/Functional/SettingsFormTest.php b/tests/src/Functional/SettingsFormTest.php
index a31ea26..1f18eef 100644
--- a/tests/src/Functional/SettingsFormTest.php
+++ b/tests/src/Functional/SettingsFormTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\simple_cron\Functional;
 
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -41,8 +43,8 @@ class SettingsFormTest extends BrowserTestBase {
    *
    * @dataProvider providerTestSettingsFormRoute
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws EntityStorageException
    */
   public function testSettingsFormRoute(string $permission, int $status_code): void {
     $user = $this->drupalCreateUser([$permission]);
diff --git a/tests/src/Functional/SimpleCronBrowserTestBase.php b/tests/src/Functional/SimpleCronBrowserTestBase.php
index bb38260..977f1b6 100644
--- a/tests/src/Functional/SimpleCronBrowserTestBase.php
+++ b/tests/src/Functional/SimpleCronBrowserTestBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\simple_cron\Functional;
 
+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -23,18 +25,15 @@ abstract class SimpleCronBrowserTestBase extends BrowserTestBase {
    * @param bool $exists
    *   (optional) Is xpath exists. Default to TRUE.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
    */
   protected function assertTableElementExists(int $row, int $column, string $value, bool $exists = TRUE): void {
-    $xpath = $this->assertSession()->buildXPathQuery(
-      '//form[@class="simple-cron-list"]/table/tbody/tr[:row]/td[:column and text() = :label]',
-      [
-        ':row' => $row,
-        ':column' => $column,
-        ':label' => $value,
-      ]
-    );
+    $xpath = $this->assertSession()->buildXPathQuery('//form[@class="simple-cron-list"]/table/tbody/tr[:row]/td[:column and text() = :label]', [
+      ':row' => $row,
+      ':column' => $column,
+      ':label' => $value,
+    ]);
 
     if ($exists) {
       $this->assertSession()->elementExists('xpath', $xpath);
diff --git a/tests/src/Kernel/CronJobAccessTest.php b/tests/src/Kernel/CronJobAccessTest.php
index 744b4f5..86b7e35 100644
--- a/tests/src/Kernel/CronJobAccessTest.php
+++ b/tests/src/Kernel/CronJobAccessTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\simple_cron\Kernel;
 
+use Drupal\simple_cron\Entity\CronJobInterface;
 use Drupal\Core\Lock\DatabaseLockBackend;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\simple_cron\Entity\CronJob;
@@ -24,21 +25,21 @@ class CronJobAccessTest extends KernelTestBase {
   /**
    * The cron job enabled.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $jobEnabled;
 
   /**
    * The cron job disabled.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $jobDisabled;
 
   /**
    * The cron job locked.
    *
-   * @var \Drupal\simple_cron\Entity\CronJobInterface
+   * @var CronJobInterface
    */
   protected $jobLocked;
 
diff --git a/tests/src/Kernel/CronJobConfigSchemaTest.php b/tests/src/Kernel/CronJobConfigSchemaTest.php
index 31e8733..b0f9646 100644
--- a/tests/src/Kernel/CronJobConfigSchemaTest.php
+++ b/tests/src/Kernel/CronJobConfigSchemaTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\simple_cron\Kernel;
 
+use Drupal\Core\Config\TypedConfigManagerInterface;
 use Drupal\simple_cron\Entity\CronJob;
 use Drupal\Tests\SchemaCheckTestTrait;
 use Drupal\KernelTests\KernelTestBase;
@@ -25,7 +26,7 @@ class CronJobConfigSchemaTest extends KernelTestBase {
   /**
    * The typed config manager.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfig;
 
diff --git a/tests/src/Kernel/CronJobManagerTest.php b/tests/src/Kernel/CronJobManagerTest.php
index 494a3ac..781bf8f 100644
--- a/tests/src/Kernel/CronJobManagerTest.php
+++ b/tests/src/Kernel/CronJobManagerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\simple_cron\Kernel;
 
+use Drupal\simple_cron\CronJobManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\simple_cron\Entity\CronJob;
 use Drupal\simple_cron\Form\SimpleCronSettingsForm;
@@ -23,7 +24,7 @@ class CronJobManagerTest extends KernelTestBase {
   /**
    * The cron job manager.
    *
-   * @var \Drupal\simple_cron\CronJobManagerInterface
+   * @var CronJobManagerInterface
    */
   protected $cronJobManager;
 
diff --git a/tests/src/Kernel/CronJobStorageTest.php b/tests/src/Kernel/CronJobStorageTest.php
index 2cbfc84..388f512 100644
--- a/tests/src/Kernel/CronJobStorageTest.php
+++ b/tests/src/Kernel/CronJobStorageTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\simple_cron\Kernel;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\simple_cron\Entity\CronJobInterface;
@@ -24,7 +25,7 @@ class CronJobStorageTest extends KernelTestBase {
   /**
    * The cron job storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $storage;
 
@@ -55,7 +56,7 @@ class CronJobStorageTest extends KernelTestBase {
    */
   protected function createTests(): void {
     // Attempt to create a cron job without a plugin.
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface $entity */
+    /** @var CronJobInterface $entity */
     $entity = $this->storage->create();
     $plugin = $entity->getPlugin();
     $this->assertEquals(NULL, $plugin, 'The plugin is null when a cron job was created without a plugin.');
@@ -101,7 +102,7 @@ class CronJobStorageTest extends KernelTestBase {
    * Tests the loading of cron job.
    */
   protected function loadTests(): void {
-    /** @var \Drupal\simple_cron\Entity\CronJobInterface $entity */
+    /** @var CronJobInterface $entity */
     $entity = $this->storage->load('simple_cron_test');
 
     $this->assertInstanceOf(CronJobInterface::class, $entity);
diff --git a/tests/src/Kernel/SimpleCronPluginTest.php b/tests/src/Kernel/SimpleCronPluginTest.php
index 30cd6bb..998dfc5 100644
--- a/tests/src/Kernel/SimpleCronPluginTest.php
+++ b/tests/src/Kernel/SimpleCronPluginTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\simple_cron\Kernel;
 
+use Drupal\simple_cron\Plugin\SimpleCronPluginManagerInterface;
 use Drupal\simple_cron\Form\SimpleCronSettingsForm;
 use Drupal\simple_cron\Plugin\SimpleCron\Cron;
 use Drupal\simple_cron\Plugin\SimpleCron\Queue;
@@ -30,7 +31,7 @@ class SimpleCronPluginTest extends KernelTestBase {
   /**
    * The simple cron plugin manager.
    *
-   * @var \Drupal\simple_cron\Plugin\SimpleCronPluginManagerInterface
+   * @var SimpleCronPluginManagerInterface
    */
   protected $simpleCronPluginManager;
 
diff --git a/tests/src/Unit/Entity/CronJobTest.php b/tests/src/Unit/Entity/CronJobTest.php
index 55999f4..c6639b7 100644
--- a/tests/src/Unit/Entity/CronJobTest.php
+++ b/tests/src/Unit/Entity/CronJobTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\simple_cron\Unit\Entity;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Database\Connection;
@@ -34,25 +36,26 @@ class CronJobTest extends UnitTestCase {
   protected const JOB_LABEL = 'Simple Cron Test';
 
   protected const REQUEST_TIME = 1615109176;
+  use ProphecyTrait;
 
   /**
    * The current state of the test in memory.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;
 
   /**
    * The container builder.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;
 
   /**
    * The cron job mock.
    *
-   * @var \Drupal\simple_cron\Entity\CronJob|\PHPUnit\Framework\MockObject\MockObject
+   * @var CronJob|MockObject
    */
   protected $job;
 
@@ -312,7 +315,7 @@ class CronJobTest extends UnitTestCase {
   /**
    * Get config override mock.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config override mock.
    */
   protected function getConfigFactoryMock(): ConfigFactoryInterface {
@@ -335,7 +338,7 @@ class CronJobTest extends UnitTestCase {
    * @param bool|null $locked
    *   Is lock enabled.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   The logger mock.
    */
   protected function getLoggerMock(?bool $locked): LoggerChannelInterface {
@@ -374,7 +377,7 @@ class CronJobTest extends UnitTestCase {
    * @param int $timestamp
    *   The timestamp.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   The date time mock.
    */
   protected function getDrupalDateTimeMock(int $timestamp): DrupalDateTime {
diff --git a/tests/src/Unit/Plugin/SimpleCron/CronTest.php b/tests/src/Unit/Plugin/SimpleCron/CronTest.php
index fc116ec..d8e3e1b 100644
--- a/tests/src/Unit/Plugin/SimpleCron/CronTest.php
+++ b/tests/src/Unit/Plugin/SimpleCron/CronTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\simple_cron\Unit\Plugin\SimpleCron;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -21,17 +22,18 @@ use Symfony\Component\DependencyInjection\ContainerBuilder;
  */
 class CronTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The current state of the test in memory.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;
 
   /**
    * The container builder.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;
 
@@ -211,7 +213,7 @@ class CronTest extends UnitTestCase {
    * @param bool $override_enabled
    *   TRUE when override enabled.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config factory mock.
    */
   protected function getConfigFactoryMock(bool $override_enabled): ConfigFactoryInterface {
@@ -227,7 +229,7 @@ class CronTest extends UnitTestCase {
   /**
    * Get module handler mock.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module handler mock.
    */
   protected function getModuleHandlerMock(): ModuleHandlerInterface {
diff --git a/tests/src/Unit/Plugin/SimpleCron/QueueTest.php b/tests/src/Unit/Plugin/SimpleCron/QueueTest.php
index a13839a..dcadd38 100644
--- a/tests/src/Unit/Plugin/SimpleCron/QueueTest.php
+++ b/tests/src/Unit/Plugin/SimpleCron/QueueTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\simple_cron\Unit\Plugin\SimpleCron;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
@@ -37,25 +39,26 @@ class QueueTest extends UnitTestCase {
   protected const REQUEUE_COUNT = 3;
 
   protected const CLAIM_TIME = 300;
+  use ProphecyTrait;
 
   /**
    * The queue used to store test work items.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;
 
   /**
    * The current state of the test in memory.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;
 
   /**
    * The container builder.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;
 
@@ -238,7 +241,7 @@ class QueueTest extends UnitTestCase {
   /**
    * Get logger mock.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   The logger mock.
    */
   protected function getLoggerMock(): LoggerChannelInterface {
@@ -262,7 +265,7 @@ class QueueTest extends UnitTestCase {
    * @param bool $override_enabled
    *   TRUE when override enabled.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config factory mock.
    */
   protected function getConfigFactoryMock(bool $override_enabled): ConfigFactoryInterface {
@@ -278,10 +281,10 @@ class QueueTest extends UnitTestCase {
   /**
    * Get queue worker mock.
    *
-   * @param \Prophecy\Prophecy\ObjectProphecy $queue_factory
+   * @param ObjectProphecy $queue_factory
    *   The queue factory mock.
    *
-   * @return \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @return QueueWorkerManagerInterface
    *   The queue worker manager mock.
    */
   protected function getQueueWorkerMock(ObjectProphecy $queue_factory): QueueWorkerManagerInterface {
diff --git a/tests/src/Unit/SimpleCronTest.php b/tests/src/Unit/SimpleCronTest.php
index 3e749b5..6d3a412 100644
--- a/tests/src/Unit/SimpleCronTest.php
+++ b/tests/src/Unit/SimpleCronTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\simple_cron\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\KeyValueStore\KeyValueMemoryFactory;
@@ -34,25 +35,26 @@ use Symfony\Component\HttpFoundation\RequestStack;
 class SimpleCronTest extends UnitTestCase {
 
   protected const REQUEST_TIME = 1615109176;
+  use ProphecyTrait;
 
   /**
    * An instance of the Cron class for testing.
    *
-   * @var \Drupal\simple_cron\SimpleCron
+   * @var SimpleCron
    */
   protected $cron;
 
   /**
    * The current state of the test in memory.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;
 
   /**
    * The container builder.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $container;
 
@@ -305,7 +307,7 @@ class SimpleCronTest extends UnitTestCase {
    * @param bool $queue_override
    *   Is queue override enabled.
    *
-   * @return \Drupal\Core\Config\ConfigFactoryInterface
+   * @return ConfigFactoryInterface
    *   The config override mock.
    */
   protected function getConfigFactoryMock(bool $cron_override, bool $queue_override): ConfigFactoryInterface {
@@ -331,7 +333,7 @@ class SimpleCronTest extends UnitTestCase {
    * @param bool $locked
    *   Is lock enabled.
    *
-   * @return \Drupal\Core\Logger\LoggerChannelInterface
+   * @return LoggerChannelInterface
    *   The logger mock.
    */
   protected function getLoggerMock(bool $locked): LoggerChannelInterface {
@@ -370,7 +372,7 @@ class SimpleCronTest extends UnitTestCase {
    * @param bool $queue_override
    *   Is queue override enabled.
    *
-   * @return \Drupal\simple_cron\CronJobManagerInterface
+   * @return CronJobManagerInterface
    *   The cron job manager mock.
    */
   protected function getCronJobManagerMock(bool $cron_override, bool $queue_override): CronJobManagerInterface {
@@ -430,7 +432,7 @@ class SimpleCronTest extends UnitTestCase {
    * @param bool $is_single_forced
    *   (optional) Is single cron is forced. Defaults to FALSE.
    *
-   * @return \Symfony\Component\HttpFoundation\RequestStack
+   * @return RequestStack
    *   The request stack mock.
    */
   protected function getRequestStackMock(bool $is_manual, bool $is_single, bool $is_single_forced = FALSE): RequestStack {
