diff --git a/ds.api.php b/ds.api.php
index 0f08bb35..6ee35d9f 100644
--- a/ds.api.php
+++ b/ds.api.php
@@ -66,7 +66,7 @@ function hook_ds_field_format_summary(array $field) {
  *
  * @param array $record
  *   The record just before it gets saved into the database.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form_state values.
  */
 function hook_ds_layout_settings_alter(array $record, FormStateInterface $form_state) {
@@ -148,7 +148,7 @@ function hook_ds_views_view_mode_alter(&$view_mode, array $context) {
  *
  * The function is coming from the views entity plugin.
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  * @param string $view_mode
  *   The name of the view mode.
diff --git a/ds.install b/ds.install
index e19d2858..7ad5fef5 100644
--- a/ds.install
+++ b/ds.install
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Entity\Display\EntityDisplayInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 /**
  * @file
  * Display Suite install file.
@@ -19,7 +21,7 @@ function ds_install() {
  */
 function ds_update_8001() {
 
-  /** @var \Drupal\Core\Entity\Display\EntityDisplayInterface $display */
+  /** @var EntityDisplayInterface $display */
   foreach (EntityViewDisplay::loadMultiple() as $display) {
     $ds = $display->getThirdPartySetting('ds', 'layout');
     if (!empty($ds)) {
@@ -75,7 +77,7 @@ function ds_update_8004() {
 function ds_update_8005() {
   // Fix scrambled fields
   $entity_storage = \Drupal::service('entity_type.manager')->getStorage('entity_view_display');
-  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $entity_display */
+  /** @var EntityViewDisplayInterface $entity_display */
   foreach($entity_storage->loadMultiple() as $entity_display) {
     if ($ds_config = $entity_display->getThirdPartySettings('ds')) {
       $components = $entity_display->getComponents();
diff --git a/ds.module b/ds.module
index 821a72f2..2721a3b3 100644
--- a/ds.module
+++ b/ds.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Layout\LayoutDefinition;
 /**
  * @file
  * Display Suite core functions.
@@ -58,7 +59,7 @@ function ds_theme() {
           'render element' => 'elements',
           'template' => strtr($plugin['theme'], '_', '-'),
           'base hook' => 'field',
-          'path' => drupal_get_path('module', $plugin['provider']) . '/templates',
+          'path' => \Drupal::service('extension.list.module')->getPath($plugin['provider']) . '/templates',
         ];
 
         if (!empty($plugin['path'])) {
@@ -77,7 +78,7 @@ function ds_theme() {
 function ds_theme_registry_alter(&$theme_registry) {
   $layouts = Ds::getLayouts();
   $layout_theme_hooks = [];
-  /** @var \Drupal\Core\Layout\LayoutDefinition $info */
+  /** @var LayoutDefinition $info */
   foreach ($layouts as $info) {
     if (is_a($info->getClass(), DsLayout::class, TRUE)) {
       $layout_theme_hooks[$info->getThemeHook()] = 'layout';
diff --git a/includes/field_ui.inc b/includes/field_ui.inc
index 91402ce3..b6047788 100644
--- a/includes/field_ui.inc
+++ b/includes/field_ui.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Layout\LayoutDefinition;
 /**
  * @file
  * Field UI functions for Display Suite.
@@ -125,7 +126,7 @@ function ds_field_ui_create_vertical_tabs(&$form) {
  *
  * @param array $form
  *   The form to add layout fieldset and extra Display Suite fields.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current form state.
  *
  * @return array
@@ -415,7 +416,7 @@ function ds_field_ui_layouts_save($form, FormStateInterface $form_state) {
     // Move current visible fields into a default region, so
     // we keep their current settings.
     $layouts = Ds::getLayouts();
-    /** @var \Drupal\Core\Layout\LayoutDefinition $sl */
+    /** @var LayoutDefinition $sl */
     $sl = $layouts[$layout];
     // TODO use default region method?
     $first_region = key($sl->getRegions());
@@ -649,11 +650,11 @@ function ds_field_ui_layout_clone($form, FormStateInterface $form_state) {
 /**
  * Creates a summary for the field format configuration summary.
  *
- * @param \Drupal\ds\Plugin\DsField\DsFieldInterface $plugin_instance
+ * @param DsFieldInterface $plugin_instance
  *   An instance of the plugin.
  * @param array $settings
  *   The passed settings.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state of the summary.
  *
  * @return array
@@ -681,9 +682,9 @@ function ds_field_settings_summary(DsFieldInterface $plugin_instance, array $set
 /**
  * Creates a form for Display Suite fields.
  *
- * @param \Drupal\ds\Plugin\DsField\DsFieldInterface $plugin_instance
+ * @param DsFieldInterface $plugin_instance
  *   An instance of the plugin.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state of the form.
  *
  * @return mixed
@@ -715,7 +716,7 @@ function ds_field_settings_form(DsFieldInterface $plugin_instance, FormStateInte
  *
  * @param array $form
  *   The actual form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state of the form.
  */
 function _ds_field_group_field_ui_fix_notices(array $form, FormStateInterface $form_state) {
@@ -739,7 +740,7 @@ function _ds_field_group_field_ui_fix_notices(array $form, FormStateInterface $f
  *   The name of the view_mode.
  * @param array $form
  *   A collection of form properties.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form_state.
  */
 function _ds_field_ui_table_layouts($entity_type, $bundle, $view_mode, array &$form, FormStateInterface $form_state) {
@@ -748,7 +749,7 @@ function _ds_field_ui_table_layouts($entity_type, $bundle, $view_mode, array &$f
 
   unset($ds_layouts['layout_builder_blank']);
 
-  /** @var \Drupal\Core\Layout\LayoutDefinition $layout_definition */
+  /** @var LayoutDefinition $layout_definition */
   foreach ($ds_layouts as $key => $layout_definition) {
     // Create new layout option group.
     $optgroup = $layout_definition->getCategory() ?: t('Other');
@@ -922,13 +923,13 @@ function _ds_field_ui_table_layouts($entity_type, $bundle, $view_mode, array &$f
  *
  * @param array $form
  *   A collection of form properties.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The state of the form.
  * @param array $ds_layouts
  *   Collection of all the layouts.
  * @param array $layout
  *   Current selected layout.
- * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+ * @param EntityViewDisplayInterface $display
  *   The entity display object.
  */
 function _ds_field_ui_table_layouts_preview(array &$form, FormStateInterface $form_state, array $ds_layouts, array $layout, EntityViewDisplayInterface $display) {
@@ -965,7 +966,7 @@ function _ds_field_ui_table_layouts_preview(array &$form, FormStateInterface $fo
   $suggestions_array = [];
   if (!empty($layout_string)) {
     if (isset($ds_layouts[$layout_string])) {
-      /** @var \Drupal\Core\Layout\LayoutDefinition $chosen_layout */
+      /** @var LayoutDefinition $chosen_layout */
       $chosen_layout = $ds_layouts[$layout_string];
       $selected = '<strong>' . $chosen_layout->getLabel() . '</strong>';
       $selected .= '<br/>' . t('The default template can be found in %path', ['%path' => $chosen_layout->getPath() . '/' . $chosen_layout->getTemplate()]);
@@ -987,7 +988,7 @@ function _ds_field_ui_table_layouts_preview(array &$form, FormStateInterface $fo
     }
 
     if ($form_state->hasValue('ds_layout') || (!empty($layout) && isset($layout['regions'])) && (!empty($chosen_layout))) {
-      $fallback_image = drupal_get_path('module', 'ds') . '/images/preview.png';
+      $fallback_image = \Drupal::service('extension.list.module')->getPath('ds') . '/images/preview.png';
       $current_layout = $form_state->hasValue('ds_layout') && (!isset($layout->layout) || $form_state->getValue('ds_layout') != $layout->layout) ? t('Current layout (after save)') : t('Current layout');
       $image = $chosen_layout->getIconPath();
       if (empty($image)) {
@@ -1136,7 +1137,7 @@ function ds_field_ui_change_layout_submit($form, FormStateInterface $form_state)
  *   The name of the view_mode.
  * @param array $form
  *   A collection of form properties.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   A collection of form_state properties.
  */
 function _ds_field_ui_fields($entity_type, $bundle, $view_mode, array &$form, FormStateInterface $form_state) {
@@ -1398,7 +1399,7 @@ function _ds_field_ui_fields($entity_type, $bundle, $view_mode, array &$form, Fo
  *
  * @param array $form
  *   A collection of form properties.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   A collection of form_state properties.
  */
 function _ds_field_ui_core_fields(array &$form, FormStateInterface $form_state) {
diff --git a/modules/ds_devel/src/Controller/DsDevelController.php b/modules/ds_devel/src/Controller/DsDevelController.php
index ce71964c..a3af95a9 100644
--- a/modules/ds_devel/src/Controller/DsDevelController.php
+++ b/modules/ds_devel/src/Controller/DsDevelController.php
@@ -19,23 +19,23 @@ class DsDevelController extends ControllerBase {
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * DsDevelController constructor.
    *
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $displayRepository
+   * @param EntityDisplayRepositoryInterface $displayRepository
    *   The display repository.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(EntityDisplayRepositoryInterface $displayRepository, RendererInterface $renderer) {
@@ -56,9 +56,9 @@ class DsDevelController extends ControllerBase {
   /**
    * Lists all instances of fields on any views.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   A RouteMatch object.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return array
diff --git a/modules/ds_devel/src/Plugin/Derivative/DsDevelLocalTask.php b/modules/ds_devel/src/Plugin/Derivative/DsDevelLocalTask.php
index 2368370b..cb48c66b 100644
--- a/modules/ds_devel/src/Plugin/Derivative/DsDevelLocalTask.php
+++ b/modules/ds_devel/src/Plugin/Derivative/DsDevelLocalTask.php
@@ -19,16 +19,16 @@ class DsDevelLocalTask extends DeriverBase implements ContainerDeriverInterface
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an DevelLocalTask object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/modules/ds_devel/src/Routing/RouteSubscriber.php b/modules/ds_devel/src/Routing/RouteSubscriber.php
index 4c12525e..3ed334e9 100644
--- a/modules/ds_devel/src/Routing/RouteSubscriber.php
+++ b/modules/ds_devel/src/Routing/RouteSubscriber.php
@@ -16,14 +16,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/ds_extras/ds_extras.module b/modules/ds_extras/ds_extras.module
index ddd8ed5b..bea6754b 100644
--- a/modules/ds_extras/ds_extras.module
+++ b/modules/ds_extras/ds_extras.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Layout\LayoutDefinition;
 /**
  * @file
  * Display Suite extras main functions.
@@ -19,7 +20,7 @@ use Drupal\Core\Link;
  */
 function ds_extras_layout_alter(&$definitions) {
   if (\Drupal::config('ds_extras.settings')->get('hidden_region')) {
-    /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
+    /** @var LayoutDefinition $layout */
     foreach ($definitions as $key => $layout) {
       $regions = $layout->getRegions();
       $regions['ds_hidden'] = ['label' => t('Hidden')];
diff --git a/modules/ds_extras/src/Controller/DsExtrasController.php b/modules/ds_extras/src/Controller/DsExtrasController.php
index e5fd2804..e48a4efc 100644
--- a/modules/ds_extras/src/Controller/DsExtrasController.php
+++ b/modules/ds_extras/src/Controller/DsExtrasController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ds_extras\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ -16,7 +18,7 @@ class DsExtrasController extends ControllerBase {
   /**
    * Returns an node through JSON.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The global request object.
    * @param string $entityType
    *   The type of the requested entity.
@@ -25,11 +27,11 @@ class DsExtrasController extends ControllerBase {
    * @param string $viewMode
    *   The view mode you wish to render for the requested entity.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An ajax response with the new view mode.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function switchViewMode(Request $request, $entityType, $entityId, $viewMode) {
     $response = new AjaxResponse();
@@ -58,8 +60,8 @@ class DsExtrasController extends ControllerBase {
    * @return array
    *   An array suitable for drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($node_revision) {
     /* @var \Drupal\node\NodeInterface $node */
diff --git a/modules/ds_extras/src/EventSubscriber/RouteSubscriber.php b/modules/ds_extras/src/EventSubscriber/RouteSubscriber.php
index 0ade3b5e..836f1139 100644
--- a/modules/ds_extras/src/EventSubscriber/RouteSubscriber.php
+++ b/modules/ds_extras/src/EventSubscriber/RouteSubscriber.php
@@ -22,7 +22,7 @@ class RouteSubscriber implements EventSubscriberInterface {
   /**
    * Alters the routes.
    *
-   * @param \Drupal\Core\Routing\RouteBuildEvent $event
+   * @param RouteBuildEvent $event
    *   The event to process.
    */
   public function alterRoutes(RouteBuildEvent $event) {
diff --git a/modules/ds_extras/src/ExtrasPermissions.php b/modules/ds_extras/src/ExtrasPermissions.php
index 6f3dd2fb..ed5e799e 100644
--- a/modules/ds_extras/src/ExtrasPermissions.php
+++ b/modules/ds_extras/src/ExtrasPermissions.php
@@ -18,14 +18,14 @@ class ExtrasPermissions implements ContainerInjectionInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new FieldUiPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/ds_extras/src/Plugin/DsField/SwitchField.php b/modules/ds_extras/src/Plugin/DsField/SwitchField.php
index 98eff1d7..e73bf834 100644
--- a/modules/ds_extras/src/Plugin/DsField/SwitchField.php
+++ b/modules/ds_extras/src/Plugin/DsField/SwitchField.php
@@ -24,14 +24,14 @@ class SwitchField extends DsFieldBase {
   /**
    * The EntityDisplayRepository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/modules/ds_switch_view_mode/ds_switch_view_mode.module b/modules/ds_switch_view_mode/ds_switch_view_mode.module
index be8cafc6..7600fe0d 100644
--- a/modules/ds_switch_view_mode/ds_switch_view_mode.module
+++ b/modules/ds_switch_view_mode/ds_switch_view_mode.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Layout\LayoutDefinition;
 /**
  * @file
  * Display Suite Switch View mode.
@@ -121,10 +122,10 @@ function ds_switch_view_mode_form_node_form_alter(&$form, FormStateInterface $fo
       $layout_settings = $chosen_layout->getThirdPartySettings('ds');
 
       $ds_layouts = Ds::getLayouts();
-      $fallback_image = drupal_get_path('module', 'ds') . '/images/preview.png';
+      $fallback_image = \Drupal::service('extension.list.module')->getPath('ds') . '/images/preview.png';
 
       if (isset($layout_settings['layout'])) {
-        /** @var \Drupal\Core\Layout\LayoutDefinition $chosen_layout */
+        /** @var LayoutDefinition $chosen_layout */
         $chosen_layout = $ds_layouts[$layout_settings['layout']['id']];
         $image = $chosen_layout->getIconPath();
         if (empty($image)) {
diff --git a/src/Annotation/DsField.php b/src/Annotation/DsField.php
index 29ff0205..ef7576e5 100644
--- a/src/Annotation/DsField.php
+++ b/src/Annotation/DsField.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ds\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class DsField extends Plugin {
   /**
    * The human-readable name of the DS plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/DsFieldTemplate.php b/src/Annotation/DsFieldTemplate.php
index 6c658588..ab3d5200 100644
--- a/src/Annotation/DsFieldTemplate.php
+++ b/src/Annotation/DsFieldTemplate.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ds\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class DsFieldTemplate extends Plugin {
   /**
    * The human-readable name of the DS field layout plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/DsController.php b/src/Controller/DsController.php
index 86a0e0db..f669289d 100644
--- a/src/Controller/DsController.php
+++ b/src/Controller/DsController.php
@@ -21,14 +21,14 @@ class DsController extends ControllerBase implements ContainerInjectionInterface
   /**
    * The entity type bundle info class.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * Construct method.
    *
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The EntityTypeBundleInfo object.
    */
   public function __construct(EntityTypeBundleInfoInterface $entityTypeBundleInfo) {
@@ -145,10 +145,10 @@ class DsController extends ControllerBase implements ContainerInjectionInterface
   /**
    * Adds a contextual tab to entities.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route information.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response pointing to the corresponding display.
    */
   public function contextualTab(RouteMatchInterface $route_match) {
diff --git a/src/Controller/FieldController.php b/src/Controller/FieldController.php
index b42a8811..3512f6e0 100644
--- a/src/Controller/FieldController.php
+++ b/src/Controller/FieldController.php
@@ -18,23 +18,23 @@ class FieldController extends ControllerBase implements ContainerInjectionInterf
   /**
    * The config storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $storage;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a \Drupal\ds\Controller\FieldController object.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The configuration storage.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(StorageInterface $storage, ModuleHandlerInterface $module_handler) {
diff --git a/src/Ds.php b/src/Ds.php
index 9d528de8..9cab26fa 100644
--- a/src/Ds.php
+++ b/src/Ds.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ds;
 
+use Drupal\ds\Plugin\DsField\DsFieldInterface;
+use Drupal\Core\Layout\LayoutDefinition;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -48,16 +50,16 @@ class Ds {
    *   The key of the field.
    * @param array $field
    *   The configuration of a DS field.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The current entity.
    * @param string $view_mode
    *   The name of the view mode.
-   * @param \Drupal\Core\Entity\Display\EntityDisplayInterface $display
+   * @param EntityDisplayInterface $display
    *   The entity display object.
    * @param array $build
    *   The current built of the entity.
    *
-   * @return \Drupal\ds\Plugin\DsField\DsFieldInterface
+   * @return DsFieldInterface
    *   Field instance.
    */
   public static function getFieldInstance($key, array $field, EntityInterface $entity, $view_mode, EntityDisplayInterface $display, array $build = []) {
@@ -90,7 +92,7 @@ class Ds {
   /**
    * Gets Display Suite layouts.
    *
-   * @return \Drupal\Core\Layout\LayoutDefinition[]
+   * @return LayoutDefinition[]
    *   A list of layouts.
    */
   public static function getLayouts() {
diff --git a/src/Form/BlockFieldConfigForm.php b/src/Form/BlockFieldConfigForm.php
index 5bd3d34d..22271bca 100644
--- a/src/Form/BlockFieldConfigForm.php
+++ b/src/Form/BlockFieldConfigForm.php
@@ -23,7 +23,7 @@ class BlockFieldConfigForm extends FieldFormBase implements ContainerInjectionIn
   /**
    * The context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
diff --git a/src/Form/ChangeLayoutForm.php b/src/Form/ChangeLayoutForm.php
index 25341803..b9f885e6 100644
--- a/src/Form/ChangeLayoutForm.php
+++ b/src/Form/ChangeLayoutForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ds\Form;
 
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
@@ -17,23 +18,23 @@ class ChangeLayoutForm extends FormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * ChangeLayoutForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityFieldManagerInterface $entityFieldManager) {
@@ -67,7 +68,7 @@ class ChangeLayoutForm extends FormBase {
     $all_layouts = Ds::getLayouts();
 
     if (!empty($entity_type) && !empty($bundle) && !empty($display_mode)) {
-      /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+      /** @var EntityViewDisplayInterface $display */
       $display = $this->entityTypeManager->getStorage('entity_view_display')->load($entity_type . '.' . $bundle . '.' . $display_mode);
       $old_layout = $display->getThirdPartySettings('ds');
     }
@@ -162,10 +163,10 @@ class ChangeLayoutForm extends FormBase {
         '#suffix' => '</div>',
       ];
 
-      $fallback_image = drupal_get_path('module', 'ds') . '/images/preview.png';
+      $fallback_image = \Drupal::service('extension.list.module')->getPath('ds') . '/images/preview.png';
       $old_image = $old_layout_info->getIconPath() ?: $fallback_image;
       $new_image = $new_layout->getIconPath() ?: $fallback_image;
-      $arrow = drupal_get_path('module', 'ds') . '/images/arrow.png';
+      $arrow = \Drupal::service('extension.list.module')->getPath('ds') . '/images/arrow.png';
 
       $form['preview']['old_layout'] = [
         '#markup' => '<div class="ds-layout-preview-image"><img src="' . base_path() . $old_image . '"/></div>',
diff --git a/src/Form/EmergencyForm.php b/src/Form/EmergencyForm.php
index be723adc..229800fd 100644
--- a/src/Form/EmergencyForm.php
+++ b/src/Form/EmergencyForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ds\Form;
 
+use Drupal\Core\State\State;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -17,25 +18,25 @@ class EmergencyForm extends ConfigFormBase {
   /**
    * State object.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a \Drupal\ds\Form\EmergencyForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value store.
    */
   public function __construct(ConfigFactory $config_factory, ModuleHandlerInterface $module_handler, StateInterface $state) {
diff --git a/src/Form/FieldDeleteForm.php b/src/Form/FieldDeleteForm.php
index 9ed332b6..d9285a89 100644
--- a/src/Form/FieldDeleteForm.php
+++ b/src/Form/FieldDeleteForm.php
@@ -22,7 +22,7 @@ class FieldDeleteForm extends ConfirmFormBase implements ContainerInjectionInter
   /**
    * Holds the cache invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheInvalidator;
 
@@ -36,7 +36,7 @@ class FieldDeleteForm extends ConfirmFormBase implements ContainerInjectionInter
   /**
    * Constructs a FieldDeleteForm object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_invalidator
    *   The cache invalidator.
    */
   public function __construct(CacheTagsInvalidatorInterface $cache_invalidator) {
diff --git a/src/Form/FieldFormBase.php b/src/Form/FieldFormBase.php
index 367350de..0fb0a4ac 100644
--- a/src/Form/FieldFormBase.php
+++ b/src/Form/FieldFormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ds\Form;
 
+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Config\ConfigFactory;
@@ -21,21 +22,21 @@ class FieldFormBase extends ConfigFormBase implements ContainerInjectionInterfac
   /**
    * Holds the entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
   /**
    * Holds the cache invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheInvalidator;
 
   /**
    * Drupal module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
@@ -49,13 +50,13 @@ class FieldFormBase extends ConfigFormBase implements ContainerInjectionInterfac
   /**
    * Constructs a \Drupal\system\CustomFieldFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_invalidator
    *   The cache invalidator.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler.
    */
   public function __construct(ConfigFactory $config_factory, EntityTypeManagerInterface $entity_type_manager, CacheTagsInvalidatorInterface $cache_invalidator, ModuleHandler $module_handler) {
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 99edd106..efb13f38 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -21,43 +21,43 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The theme registry used.
    *
-   * @var \Drupal\Core\Theme\Registry
+   * @var Registry
    */
   protected $themeRegistry;
 
   /**
    * The route builder.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Constructs a \Drupal\ds\Form\SettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Theme\Registry $theme_registry
+   * @param Registry $theme_registry
    *   The theme registry used.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route builder.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(ConfigFactory $config_factory, ModuleHandlerInterface $module_handler, Registry $theme_registry, RouteBuilderInterface $route_builder, EntityFieldManagerInterface $entity_field_manager) {
diff --git a/src/Plugin/Derivative/BundleField.php b/src/Plugin/Derivative/BundleField.php
index 895d93ab..81f0bb83 100644
--- a/src/Plugin/Derivative/BundleField.php
+++ b/src/Plugin/Derivative/BundleField.php
@@ -29,7 +29,7 @@ class BundleField extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -38,7 +38,7 @@ class BundleField extends DeriverBase implements ContainerDeriverInterface {
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/Derivative/DsEntityRow.php b/src/Plugin/Derivative/DsEntityRow.php
index 2da1b74b..68a51d83 100644
--- a/src/Plugin/Derivative/DsEntityRow.php
+++ b/src/Plugin/Derivative/DsEntityRow.php
@@ -33,14 +33,14 @@ class DsEntityRow implements ContainerDeriverInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The views data service.
    *
-   * @var \Drupal\views\ViewsData
+   * @var ViewsData
    */
   protected $viewsData;
 
@@ -49,9 +49,9 @@ class DsEntityRow implements ContainerDeriverInterface {
    *
    * @param string $base_plugin_id
    *   The base plugin ID.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\views\ViewsData $views_data
+   * @param ViewsData $views_data
    *   The views data service.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager, ViewsData $views_data) {
diff --git a/src/Plugin/Derivative/DsLocalTask.php b/src/Plugin/Derivative/DsLocalTask.php
index 189e2ca8..6c866ec9 100644
--- a/src/Plugin/Derivative/DsLocalTask.php
+++ b/src/Plugin/Derivative/DsLocalTask.php
@@ -19,16 +19,16 @@ class DsLocalTask extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Creates an DevelLocalTask object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The translation manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
diff --git a/src/Plugin/DsField/BlockBase.php b/src/Plugin/DsField/BlockBase.php
index 06b14a34..2bd4d879 100644
--- a/src/Plugin/DsField/BlockBase.php
+++ b/src/Plugin/DsField/BlockBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ds\Plugin\DsField;
 
+use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Plugin\Context\ContextHandlerInterface;
 use Drupal\Core\Plugin\Context\ContextRepositoryInterface;
@@ -18,28 +19,28 @@ abstract class BlockBase extends DsFieldBase implements ContainerFactoryPluginIn
   /**
    * The block.
    *
-   * @var \Drupal\Core\Block\BlockPluginInterface
+   * @var BlockPluginInterface
    */
   protected $block;
 
   /**
    * The BlockManager service.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * The context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
    * The context repository interface.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
diff --git a/src/Plugin/DsField/BundleField.php b/src/Plugin/DsField/BundleField.php
index e12d7098..a517b9ca 100644
--- a/src/Plugin/DsField/BundleField.php
+++ b/src/Plugin/DsField/BundleField.php
@@ -18,7 +18,7 @@ class BundleField extends DsFieldBase {
   /**
    * The EntityDisplayRepository service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -28,7 +28,7 @@ class BundleField extends DsFieldBase {
    * @param $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    */
   public function __construct($configuration, $plugin_id, $plugin_definition, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
     $this->entityTypeBundleInfo = $entity_type_bundle_info;
diff --git a/src/Plugin/DsField/Comment/CommentUser.php b/src/Plugin/DsField/Comment/CommentUser.php
index 135c1814..62407473 100644
--- a/src/Plugin/DsField/Comment/CommentUser.php
+++ b/src/Plugin/DsField/Comment/CommentUser.php
@@ -22,7 +22,7 @@ class CommentUser extends Entity {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Plugin/DsField/Date.php b/src/Plugin/DsField/Date.php
index 77a37272..645030a4 100644
--- a/src/Plugin/DsField/Date.php
+++ b/src/Plugin/DsField/Date.php
@@ -15,21 +15,21 @@ abstract class Date extends DsFieldBase {
   /**
    * The EntityDisplayRepository service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $timeService;
 
diff --git a/src/Plugin/DsField/DsFieldInterface.php b/src/Plugin/DsField/DsFieldInterface.php
index c3d3e07b..f5cf51db 100644
--- a/src/Plugin/DsField/DsFieldInterface.php
+++ b/src/Plugin/DsField/DsFieldInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ds\Plugin\DsField;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -34,7 +35,7 @@ interface DsFieldInterface extends ContainerFactoryPluginInterface {
    *
    * @param array $form
    *   The form definition array for the field configuration form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -61,7 +62,7 @@ interface DsFieldInterface extends ContainerFactoryPluginInterface {
   /**
    * Gets the current entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The current entity.
    */
   public function entity();
diff --git a/src/Plugin/DsField/DynamicCopyField.php b/src/Plugin/DsField/DynamicCopyField.php
index 3a0263b7..ef29ba64 100644
--- a/src/Plugin/DsField/DynamicCopyField.php
+++ b/src/Plugin/DsField/DynamicCopyField.php
@@ -19,7 +19,7 @@ class DynamicCopyField extends DsFieldBase {
   /**
    * The loaded instance.
    *
-   * @var \Drupal\ds\Plugin\DsField\DsFieldInterface
+   * @var DsFieldInterface
    */
   private $fieldInstance;
 
diff --git a/src/Plugin/DsField/Entity.php b/src/Plugin/DsField/Entity.php
index 5965bef6..773a5db1 100644
--- a/src/Plugin/DsField/Entity.php
+++ b/src/Plugin/DsField/Entity.php
@@ -14,7 +14,7 @@ abstract class Entity extends DsFieldBase {
   /**
    * The EntityDisplayRepository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
diff --git a/src/Plugin/DsField/Node/NodeSubmittedBy.php b/src/Plugin/DsField/Node/NodeSubmittedBy.php
index 964afd31..7722f7e9 100644
--- a/src/Plugin/DsField/Node/NodeSubmittedBy.php
+++ b/src/Plugin/DsField/Node/NodeSubmittedBy.php
@@ -24,7 +24,7 @@ class NodeSubmittedBy extends Date {
   /**
    * Drupal core Render service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
diff --git a/src/Plugin/DsField/TokenBase.php b/src/Plugin/DsField/TokenBase.php
index da2c8ed2..dbd3e6cd 100644
--- a/src/Plugin/DsField/TokenBase.php
+++ b/src/Plugin/DsField/TokenBase.php
@@ -14,14 +14,14 @@ abstract class TokenBase extends DsFieldBase {
   /**
    * The Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The LanguageManager service.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager;
 
diff --git a/src/Plugin/DsField/User/User.php b/src/Plugin/DsField/User/User.php
index 2e4b9bc8..75b3ef2d 100644
--- a/src/Plugin/DsField/User/User.php
+++ b/src/Plugin/DsField/User/User.php
@@ -22,7 +22,7 @@ class User extends Entity {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Plugin/DsFieldTemplate/DsFieldTemplateBase.php b/src/Plugin/DsFieldTemplate/DsFieldTemplateBase.php
index 84e4c0a4..17fcf19f 100644
--- a/src/Plugin/DsFieldTemplate/DsFieldTemplateBase.php
+++ b/src/Plugin/DsFieldTemplate/DsFieldTemplateBase.php
@@ -14,7 +14,7 @@ abstract class DsFieldTemplateBase extends PluginBase implements DsFieldTemplate
   /**
    * The entity used for token replacement.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity = NULL;
 
diff --git a/src/Plugin/DsFieldTemplate/DsFieldTemplateInterface.php b/src/Plugin/DsFieldTemplate/DsFieldTemplateInterface.php
index 7adaf3e9..e8fec1bd 100644
--- a/src/Plugin/DsFieldTemplate/DsFieldTemplateInterface.php
+++ b/src/Plugin/DsFieldTemplate/DsFieldTemplateInterface.php
@@ -20,7 +20,7 @@ interface DsFieldTemplateInterface {
   /**
    * Gets the entity this layout belongs too.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   public function getEntity();
@@ -28,7 +28,7 @@ interface DsFieldTemplateInterface {
   /**
    * Sets the entity this layout belong too.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function setEntity(EntityInterface $entity);
diff --git a/src/Plugin/DsFieldTemplatePluginManager.php b/src/Plugin/DsFieldTemplatePluginManager.php
index afd6daeb..89aeebba 100644
--- a/src/Plugin/DsFieldTemplatePluginManager.php
+++ b/src/Plugin/DsFieldTemplatePluginManager.php
@@ -17,9 +17,9 @@ class DsFieldTemplatePluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/DsPluginManager.php b/src/Plugin/DsPluginManager.php
index 3f27b02f..e8902f0c 100644
--- a/src/Plugin/DsPluginManager.php
+++ b/src/Plugin/DsPluginManager.php
@@ -17,9 +17,9 @@ class DsPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/views/Entity/Render/ConfigurableLanguageRenderer.php b/src/Plugin/views/Entity/Render/ConfigurableLanguageRenderer.php
index 9ab85adf..727d47b6 100644
--- a/src/Plugin/views/Entity/Render/ConfigurableLanguageRenderer.php
+++ b/src/Plugin/views/Entity/Render/ConfigurableLanguageRenderer.php
@@ -22,11 +22,11 @@ class ConfigurableLanguageRenderer extends RendererBase {
   /**
    * Constructs a renderer object.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The entity row being rendered.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    * @param string|null $langcode
    *   A specific language code to set, if available.
diff --git a/src/Plugin/views/Entity/Render/CurrentLanguageRenderer.php b/src/Plugin/views/Entity/Render/CurrentLanguageRenderer.php
index 9f31c716..57cbc53f 100644
--- a/src/Plugin/views/Entity/Render/CurrentLanguageRenderer.php
+++ b/src/Plugin/views/Entity/Render/CurrentLanguageRenderer.php
@@ -12,7 +12,7 @@ class CurrentLanguageRenderer extends RendererBase {
   /**
    * Returns NULL so that the current language is used.
    *
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   The result row.
    */
   public function getLangcode(ResultRow $row) {
diff --git a/src/Plugin/views/Entity/Render/DefaultLanguageRenderer.php b/src/Plugin/views/Entity/Render/DefaultLanguageRenderer.php
index d15b491a..46d7502f 100644
--- a/src/Plugin/views/Entity/Render/DefaultLanguageRenderer.php
+++ b/src/Plugin/views/Entity/Render/DefaultLanguageRenderer.php
@@ -12,7 +12,7 @@ class DefaultLanguageRenderer extends RendererBase {
   /**
    * Returns the language code associated to the given row.
    *
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   The result row.
    *
    * @return string
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index 78b5d2a0..5fdce08f 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -16,14 +16,14 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/tests/modules/ds_test/src/Plugin/Block/DsCacheTestBlock.php b/tests/modules/ds_test/src/Plugin/Block/DsCacheTestBlock.php
index 915e7a20..2222069c 100644
--- a/tests/modules/ds_test/src/Plugin/Block/DsCacheTestBlock.php
+++ b/tests/modules/ds_test/src/Plugin/Block/DsCacheTestBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ds_test\Plugin\Block;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Block\BlockBase;
 
 /**
@@ -19,7 +20,7 @@ class DsCacheTestBlock extends BlockBase {
    * {@inheritdoc}
    */
   public function build() {
-    /** @var \Symfony\Component\HttpFoundation\Request $request */
+    /** @var Request $request */
     $request = \Drupal::service('request_stack')->getCurrentRequest();
 
     return [
diff --git a/tests/src/Functional/BlockFieldPluginTest.php b/tests/src/Functional/BlockFieldPluginTest.php
index 131d64e9..23398656 100644
--- a/tests/src/Functional/BlockFieldPluginTest.php
+++ b/tests/src/Functional/BlockFieldPluginTest.php
@@ -37,7 +37,7 @@ class BlockFieldPluginTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Ensure that the plugin definitions are cleared.
diff --git a/tests/src/Functional/BlockTest.php b/tests/src/Functional/BlockTest.php
index 214ba65f..fa9f28b0 100644
--- a/tests/src/Functional/BlockTest.php
+++ b/tests/src/Functional/BlockTest.php
@@ -39,7 +39,7 @@ class BlockTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a test user.
diff --git a/tests/src/Functional/CommentTest.php b/tests/src/Functional/CommentTest.php
index 715a4729..1b11b3ab 100644
--- a/tests/src/Functional/CommentTest.php
+++ b/tests/src/Functional/CommentTest.php
@@ -40,7 +40,7 @@ class CommentTest extends CommentTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a test user.
diff --git a/tests/src/Functional/DsFieldCacheTest.php b/tests/src/Functional/DsFieldCacheTest.php
index 7f1fdbef..79447189 100644
--- a/tests/src/Functional/DsFieldCacheTest.php
+++ b/tests/src/Functional/DsFieldCacheTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\ds\Functional;
 
+use Drupal\Core\Entity\EntityMalformedException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Tests\node\Traits\NodeCreationTrait;
 
@@ -20,7 +22,7 @@ class DsFieldCacheTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->adminUser);
   }
@@ -28,8 +30,8 @@ class DsFieldCacheTest extends TestBase {
   /**
    * Test a DS field that returns cache data.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws EntityMalformedException
+   * @throws ResponseTextException
    */
   public function testCachedDsField() {
     $fields = [
diff --git a/tests/src/Functional/EntitiesTest.php b/tests/src/Functional/EntitiesTest.php
index a53331ac..aa7038dc 100644
--- a/tests/src/Functional/EntitiesTest.php
+++ b/tests/src/Functional/EntitiesTest.php
@@ -27,7 +27,7 @@ class EntitiesTest extends TestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setup() {
+  protected function setup(): void {
     parent::setup();
 
     // Enable field templates.
