diff --git a/az_blob_fs.module b/az_blob_fs.module
index 3f1de46..4901a65 100644
--- a/az_blob_fs.module
+++ b/az_blob_fs.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\az_blob_fs\AzBlobImageStylesWarmer;
 /**
  * @file
  * Contains az_blob_fs.module.
@@ -35,7 +36,7 @@ function az_blob_fs_help($route_name, RouteMatchInterface $route_match) {
  * Implements hook_ENTITY_insert() for file entity.
  */
 function az_blob_fs_file_insert(FileInterface $file) {
-  /** @var \Drupal\az_blob_fs\AzBlobImageStylesWarmer $imageStylesWarmer */
+  /** @var AzBlobImageStylesWarmer $imageStylesWarmer */
   $imageStylesWarmer = \Drupal::service('az_blob_fs.image_styles_warmer');
   $imageStylesWarmer->warmUp($file);
 }
@@ -44,7 +45,7 @@ function az_blob_fs_file_insert(FileInterface $file) {
  * Implements hook_ENTITY_update() for file entity.
  */
 function az_blob_fs_file_update(FileInterface $file) {
-  /** @var \Drupal\az_blob_fs\AzBlobImageStylesWarmer $imageStylesWarmer */
+  /** @var AzBlobImageStylesWarmer $imageStylesWarmer */
   $imageStylesWarmer = \Drupal::service('az_blob_fs.image_styles_warmer');
   $imageStylesWarmer->warmUp($file);
 }
@@ -55,7 +56,7 @@ function az_blob_fs_file_update(FileInterface $file) {
 function az_blob_fs_crop_insert(EntityInterface $entity) {
   if ($entity->get('entity_type')->value == 'file') {
     if ($file = File::load($entity->get('entity_id')->value)) {
-      /** @var \Drupal\az_blob_fs\AzBlobImageStylesWarmer $imageStylesWarmer */
+      /** @var AzBlobImageStylesWarmer $imageStylesWarmer */
       $imageStylesWarmer = \Drupal::service('az_blob_fs.image_styles_warmer');
       $imageStylesWarmer->warmUp($file);
     }
@@ -68,7 +69,7 @@ function az_blob_fs_crop_insert(EntityInterface $entity) {
 function az_blob_fs_crop_update(EntityInterface $entity) {
   if ($entity->get('entity_type')->value == 'file') {
     if ($file = File::load($entity->get('entity_id')->value)) {
-      /** @var \Drupal\az_blob_fs\AzBlobImageStylesWarmer $imageStylesWarmer */
+      /** @var AzBlobImageStylesWarmer $imageStylesWarmer */
       $imageStylesWarmer = \Drupal::service('az_blob_fs.image_styles_warmer');
       $imageStylesWarmer->warmUp($file);
     }
diff --git a/src/AzBlobFsService.php b/src/AzBlobFsService.php
index c960660..99f6526 100644
--- a/src/AzBlobFsService.php
+++ b/src/AzBlobFsService.php
@@ -14,32 +14,32 @@ class AzBlobFsService {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The config factory object.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * The key repository object.
    *
-   * @var \Drupal\key\KeyRepository
+   * @var KeyRepository
    */
   protected $keyRepository;
 
   /**
    * Constructs an AzBlobFsService object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The new database connection object.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory object.
-   * @param \Drupal\key\KeyRepository $keyRepository
+   * @param KeyRepository $keyRepository
    *   Key repository object.
    */
   public function __construct(Connection $connection, ConfigFactory $config_factory, KeyRepository $keyRepository) {
@@ -84,7 +84,7 @@ class AzBlobFsService {
    * @param array $data
    *   Array of connection & settings data for client.
    *
-   * @return \Drupal\az_blob_fs\AzBlobRestProxyAlter|null
+   * @return AzBlobRestProxyAlter|null
    *   Returns proxy/client or null if failed.
    */
   public function getAzBlobProxyClient(array $data = []): ?AzBlobRestProxyAlter {
diff --git a/src/AzBlobImageStylesWarmer.php b/src/AzBlobImageStylesWarmer.php
index 63ba9ad..079b917 100644
--- a/src/AzBlobImageStylesWarmer.php
+++ b/src/AzBlobImageStylesWarmer.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\az_blob_fs;
 
+use Drupal\file\FileStorageInterface;
+use Drupal\image\ImageStyleStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\image\Entity\ImageStyle;
 use Drupal\az_blob_fs\Constants\AzBlobFsConstants;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -17,54 +22,54 @@ class AzBlobImageStylesWarmer implements AzBlobImageStylesWarmerInterface {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
   /**
    * The file entity storage.
    *
-   * @var \Drupal\file\FileStorageInterface
+   * @var FileStorageInterface
    */
   protected $file;
 
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $image;
 
   /**
    * The image style entity storage.
    *
-   * @var \Drupal\image\ImageStyleStorageInterface
+   * @var ImageStyleStorageInterface
    */
   protected $imageStyles;
 
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * Constructs a AzBlobImageStylesWarmer object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $file_storage
+   * @param EntityTypeManagerInterface $file_storage
    *   The file storage.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $image_style_storage
+   * @param EntityTypeManagerInterface $image_style_storage
    *   The image style storage.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $file_storage, ImageFactory $image_factory, EntityTypeManagerInterface $image_style_storage, QueueFactory $queue_factory) {
     $this->config = $config_factory->get('az_blob_fs.settings');
@@ -97,8 +102,7 @@ class AzBlobImageStylesWarmer implements AzBlobImageStylesWarmerInterface {
     }
 
     /** @var \Drupal\Core\Image\Image $image */
-    /** @var \Drupal\image\Entity\ImageStyle $style */
-
+    /** @var ImageStyle $style */
     // Create image derivatives if they not already exists.
     $styles = $this->imageStyles->loadMultiple($image_styles);
     $image_uri = $file->getFileUri();
diff --git a/src/AzBlobImageStylesWarmerInterface.php b/src/AzBlobImageStylesWarmerInterface.php
index 262ee95..51c1510 100644
--- a/src/AzBlobImageStylesWarmerInterface.php
+++ b/src/AzBlobImageStylesWarmerInterface.php
@@ -12,7 +12,7 @@ interface AzBlobImageStylesWarmerInterface {
   /**
    * Init warm up with configured image styles for an image file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file for which image styles should be created.
    */
   public function warmUp(FileInterface $file);
@@ -20,7 +20,7 @@ interface AzBlobImageStylesWarmerInterface {
   /**
    * Do warm up of image styles for an image file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file for which image styles should be created.
    * @param array $image_styles
    *   List of image styles machine names.
@@ -30,7 +30,7 @@ interface AzBlobImageStylesWarmerInterface {
   /**
    * Add file and image styles to ImageStylesPregenerator queue.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file for which image styles should be created.
    * @param array $image_styles
    *   List of image styles machine names.
@@ -40,7 +40,7 @@ interface AzBlobImageStylesWarmerInterface {
   /**
    * Validate file as an image file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file for which image styles should be created.
    */
   public function validateImage(FileInterface $file);
diff --git a/src/AzBlobRestProxyAlter.php b/src/AzBlobRestProxyAlter.php
index 7deb26c..f187063 100644
--- a/src/AzBlobRestProxyAlter.php
+++ b/src/AzBlobRestProxyAlter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\az_blob_fs;
 
+use MicrosoftAzure\Storage\Blob\Models\GetBlobResult;
 use MicrosoftAzure\Storage\Blob\BlobRestProxy;
 use MicrosoftAzure\Storage\Common\Exceptions\ServiceException;
 use MicrosoftAzure\Storage\Common\Internal\Authentication\SharedAccessSignatureAuthScheme;
@@ -179,7 +180,7 @@ class AzBlobRestProxyAlter extends BlobRestProxy {
    * @param mixed $uri
    *   The container.
    *
-   * @return false|\MicrosoftAzure\Storage\Blob\Models\GetBlobResult
+   * @return false|GetBlobResult
    *   Returns the blob results.
    */
   public function getPrefixedBlob($container, $uri) {
diff --git a/src/Controller/AzBlobFsImageStyleDownloadController.php b/src/Controller/AzBlobFsImageStyleDownloadController.php
index 6c51d13..b025dab 100644
--- a/src/Controller/AzBlobFsImageStyleDownloadController.php
+++ b/src/Controller/AzBlobFsImageStyleDownloadController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\az_blob_fs\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\file\FileInterface;
 use Drupal\az_blob_fs\AzBlobFsService;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Cache\Cache;
@@ -26,22 +29,22 @@ class AzBlobFsImageStyleDownloadController extends ImageStyleDownloadController
   /**
    * Azure Blob file system information.
    *
-   * @var \Drupal\az_blob_fs\AzBlobFsService
+   * @var AzBlobFsService
    */
   protected $azBlobFs;
 
   /**
    * Constructs an AzBlobFsImageStyleDownloadController object.
    *
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock backend.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
-   * @param \Drupal\Core\File\FileSystemInterface|null $file_system
+   * @param FileSystemInterface|null $file_system
    *   The system service.
-   * @param \Drupal\az_blob_fs\AzBlobFsService $azBlobFs
+   * @param AzBlobFsService $azBlobFs
    *   The azBlobFsService class.
    */
   public function __construct(LockBackendInterface $lock, ImageFactory $image_factory, StreamWrapperManagerInterface $stream_wrapper_manager, FileSystemInterface $file_system = NULL, AzBlobFsService $azBlobFs) {
@@ -69,19 +72,19 @@ class AzBlobFsImageStyleDownloadController extends ImageStyleDownloadController
    * for azblob schemes. Private scheme use the normal workflow:
    * \Drupal\image\Controller\ImageStyleDownloadController::deliver().
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param string $scheme
    *   The file scheme.
-   * @param \Drupal\image\ImageStyleInterface $image_style
+   * @param ImageStyleInterface $image_style
    *   The image style to deliver.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse|\Symfony\Component\HttpFoundation\Response
+   * @return BinaryFileResponse|Response
    *   The redirect response or some error response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Invalid plugin exception.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Plugin not found exception.
    *
    * @see \Drupal\image\Controller\ImageStyleDownloadController::deliver()
@@ -166,7 +169,7 @@ class AzBlobFsImageStyleDownloadController extends ImageStyleDownloadController
     // On Success.
     if ($success) {
       // Try to find and invalidate the file entity cache.
-      /** @var \Drupal\file\FileInterface[] $files */
+      /** @var FileInterface[] $files */
       $files = $this->entityTypeManager()
         ->getStorage('file')
         ->loadByProperties([
diff --git a/src/Form/AzBlobFsSettingsForm.php b/src/Form/AzBlobFsSettingsForm.php
index c1b1720..939931a 100644
--- a/src/Form/AzBlobFsSettingsForm.php
+++ b/src/Form/AzBlobFsSettingsForm.php
@@ -196,7 +196,7 @@ class AzBlobFsSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form values.
    *
    * @return array
diff --git a/src/Routing/AzBlobFsImageStyleRoutes.php b/src/Routing/AzBlobFsImageStyleRoutes.php
index 0b4c40c..6b5cc49 100644
--- a/src/Routing/AzBlobFsImageStyleRoutes.php
+++ b/src/Routing/AzBlobFsImageStyleRoutes.php
@@ -16,14 +16,14 @@ class AzBlobFsImageStyleRoutes implements ContainerInjectionInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new AzBlobFsImageStyleRoutes object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
@@ -42,7 +42,7 @@ class AzBlobFsImageStyleRoutes implements ContainerInjectionInterface {
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes(): array {
diff --git a/src/StreamWrapper/AzBlobFsStream.php b/src/StreamWrapper/AzBlobFsStream.php
index 03b8eae..3e9cb81 100644
--- a/src/StreamWrapper/AzBlobFsStream.php
+++ b/src/StreamWrapper/AzBlobFsStream.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\az_blob_fs\StreamWrapper;
 
+use Drupal\az_blob_fs\AzBlobFsException;
 use Drupal\az_blob_fs\Constants\AzBlobFsConstants;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
@@ -35,7 +36,7 @@ class AzBlobFsStream extends AzBlobFsStreamWrapper implements StreamWrapperInter
    * order to use standard dependency injection as is typically done
    * in Drupal.
    *
-   * @throws \Drupal\az_blob_fs\AzBlobFsException
+   * @throws AzBlobFsException
    */
   public function __construct() {
     parent::__construct();
diff --git a/src/StreamWrapper/AzBlobFsStreamWrapper.php b/src/StreamWrapper/AzBlobFsStreamWrapper.php
index c7bc1a5..82266c5 100644
--- a/src/StreamWrapper/AzBlobFsStreamWrapper.php
+++ b/src/StreamWrapper/AzBlobFsStreamWrapper.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\az_blob_fs\StreamWrapper;
 
+use MicrosoftAzure\Storage\Blob\BlobRestProxy;
+use Drupal\az_blob_fs\AzBlobFsService;
+use Drupal\Core\StreamWrapper\StreamWrapperManager;
+use Psr\Log\LoggerInterface;
+use Drupal\Core\File\FileSystem;
 use Drupal\az_blob_fs\AzBlobFsException;
 use Drupal\az_blob_fs\AzBlobRestProxyAlter;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -28,14 +33,14 @@ class AzBlobFsStreamWrapper {
   /**
    * Microsoft Blob client.
    *
-   * @var \MicrosoftAzure\Storage\Blob\BlobRestProxy
+   * @var BlobRestProxy
    */
   protected $client = NULL;
 
   /**
    * The Azure Blob Drupal Service.
    *
-   * @var \Drupal\az_blob_fs\AzBlobFsService
+   * @var AzBlobFsService
    */
   protected $azBlob = NULL;
 
@@ -84,21 +89,21 @@ class AzBlobFsStreamWrapper {
   /**
    * Stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManager
+   * @var StreamWrapperManager
    */
   protected $streamWrapperManager;
 
   /**
    * Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * File system.
    *
-   * @var \Drupal\Core\File\FileSystem
+   * @var FileSystem
    */
   protected $fileSystem;
 
@@ -135,7 +140,7 @@ class AzBlobFsStreamWrapper {
   /**
    * Get Azure Blob client.
    *
-   * @return \Drupal\az_blob_fs\AzBlobRestProxyAlter|null
+   * @return AzBlobRestProxyAlter|null
    *   Returns Azure Blob Rest Proxy.
    */
   public function getClient(): ?AzBlobRestProxyAlter {
@@ -162,7 +167,7 @@ class AzBlobFsStreamWrapper {
    * @param string $path
    *   The path, or "name" of the blob.
    *
-   * @return \MicrosoftAzure\Storage\Blob\Models\GetBlobResult|null
+   * @return GetBlobResult|null
    *   Returns a blob if it was found, or NULL otherwise.
    */
   protected function getBlob(string $path): ?GetBlobResult {
@@ -268,7 +273,7 @@ class AzBlobFsStreamWrapper {
     if ($pathInfo[1] === 'folder') {
       $items = $pathInfo[2];
       if (!empty($items) && $options['recursive']) {
-        /** @var \MicrosoftAzure\Storage\Blob\Models\Blob $blob */
+        /** @var Blob $blob */
         foreach ($items as $item) {
           if ($item instanceof Blob) {
             $blobName = $blob->getName();
@@ -328,7 +333,7 @@ class AzBlobFsStreamWrapper {
    * @param array $options
    *   Custom options to affect the returned output.
    *
-   * @return array|\MicrosoftAzure\Storage\Blob\Models\Blob[]|null
+   * @return array|Blob[]|null
    *   Return an array of Blobs/BlobPrefixes, or NULL if nothing was found.
    */
   protected function getVirtualFolder(string $path, array $options = ['exclude_dirs' => FALSE]): ?array {
