modules/contrib/epub_reader_framework/epub_reader_framework.api.php
modules/contrib/epub_reader_framework/epub_reader_framework.install
modules/contrib/epub_reader_framework/epub_reader_framework.module
modules/contrib/epub_reader_framework/src/Ajax/ChapterChangedCommand.php
modules/contrib/epub_reader_framework/src/Ajax/ChapterHistoryPushStateCommand.php
modules/contrib/epub_reader_framework/src/Batch/ReaderChapterExtractorBatchProcessor.php
modules/contrib/epub_reader_framework/src/Controller/ReaderNodeAjaxController.php
modules/contrib/epub_reader_framework/src/Entity/ReaderChapterHeading.php
modules/contrib/epub_reader_framework/src/Entity/ReaderEntityChapterHeadingsSave.php
modules/contrib/epub_reader_framework/src/Entity/ReaderEntityCrossReference.php
modules/contrib/epub_reader_framework/src/Entity/ReaderEntityPostsave.php
modules/contrib/epub_reader_framework/src/Entity/ReaderEntityPresave.php
modules/contrib/epub_reader_framework/src/Epub/ReaderEpubCompletedCleanup.php
modules/contrib/epub_reader_framework/src/Epub/ReaderEpubXhtmlConverter.php
modules/contrib/epub_reader_framework/src/Epub/ReaderEpubZipExtractor.php
modules/contrib/epub_reader_framework/src/EpubReaderFrameworkHelpers.php
modules/contrib/epub_reader_framework/src/Event/ReaderEpubXhmlConverterEvent.php
modules/contrib/epub_reader_framework/src/Event/ReaderNodeAjaxControllerResponseEvent.php
modules/contrib/epub_reader_framework/src/Form/ReaderChapterFormAlter.php
modules/contrib/epub_reader_framework/src/Form/ReaderPublicationFormAlter.php
modules/contrib/epub_reader_framework/src/Plugin/Block/ReaderNavigationBlock.php
modules/contrib/epub_reader_framework/src/Plugin/Block/ReaderPreviousNextBlock.php
modules/contrib/epub_reader_framework/tests/modules/epub_reader_framework_implementation_test/epub_reader_framework_implementation_test.module
modules/contrib/epub_reader_framework/tests/src/Functional/ReaderChapterNavigationTest.php
modules/contrib/epub_reader_framework/tests/src/Functional/ReaderPreviousNextTest.php
modules/contrib/epub_reader_framework/tests/src/Functional/ReaderSubchapterHeadingsTest.php
modules/contrib/epub_reader_framework/tests/src/FunctionalJavascript/ReaderUploadEpubTest.php

23 files with changes
=====================

1) modules/contrib/epub_reader_framework/tests/src/FunctionalJavascript/ReaderUploadEpubTest.php:44

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $admin_user = $this->drupalCreateUser([], NULL, TRUE);
     $this->drupalLogin($admin_user);
@@ @@
     $this->drupalGet('media/add/epub');

     // Add an EPUB file.
-    $filepath = drupal_get_path('module', 'epub_reader_framework');
+    $filepath = \Drupal::service('extension.list.module')->getPath('epub_reader_framework');
     $filepath .= '/tests/fixtures/epubs/trees.epub';
     $this->getSession()->getPage()->attachFileToField('files[field_media_file_0]', $filepath);
-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));

     // Create the reader publication.
     $this->drupalGet('node/add/reader_publication');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title[0][value]' => 'Test EPUB',
       'field_reader_file[0][target_id]' => 'trees.epub (1)',
     ], t('Save'));
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/epub_reader_framework/tests/src/Functional/ReaderSubchapterHeadingsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\epub_reader_framework\Functional;

+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\node\Entity\NodeType;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $admin_user = $this->drupalCreateUser([], NULL, TRUE);
     $this->drupalLogin($admin_user);
@@ @@
   /**
    * Tests the add widget button with modal form.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testChapterSubheadings() {

@@ @@

     // Create the reader publication.
     $this->drupalGet('node/add/reader_publication');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title[0][value]' => 'Test EPUB',
     ], t('Save'));

@@ @@
     $this->clickLink(t('Add Chapter'));

     // Create a chapter.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title[0][value]' => 'Chapter One',
       'body[0][value]' => '
         <h2>Chapter One Subheading One</h2>
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/epub_reader_framework/tests/src/Functional/ReaderPreviousNextTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\epub_reader_framework\Functional;

+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $admin_user = $this->drupalCreateUser([], NULL, TRUE);
     $this->drupalLogin($admin_user);
@@ @@
   /**
    * Tests the add widget button with modal form.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testChapterNavigation() {

     // Create the reader publication.
     $this->drupalGet('node/add/reader_publication');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title[0][value]' => 'Test EPUB',
     ], t('Save'));

@@ @@
     $this->assertSession()->pageTextContains('Create Reader chapter');

     // Create a chapter.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title[0][value]' => 'Chapter One',
     ], t('Save'));

@@ @@
     $this->clickLink(t('Add Chapter'));

     // Create a chapter.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title[0][value]' => 'Chapter Two',
     ], t('Save'));
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/epub_reader_framework/tests/src/Functional/ReaderChapterNavigationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\epub_reader_framework\Functional;

+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $admin_user = $this->drupalCreateUser([], NULL, TRUE);
     $this->drupalLogin($admin_user);
@@ @@
   /**
    * Tests the add widget button with modal form.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testChapterNavigation() {

     // Create the reader publication.
     $this->drupalGet('node/add/reader_publication');
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title[0][value]' => 'Test EPUB',
     ], t('Save'));

@@ @@
     $this->assertSession()->pageTextContains('Create Reader chapter');

     // Create a chapter.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title[0][value]' => 'Chapter One',
     ], t('Save'));

@@ @@
     $this->clickLink(t('Add Chapter'));

     // Create a chapter.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'title[0][value]' => 'Chapter Two',
     ], t('Save'));
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/epub_reader_framework/src/Plugin/Block/ReaderPreviousNextBlock.php:33

    ---------- begin diff ----------
@@ @@
       elseif ($node->bundle() == 'reader_chapter') {
         $current_id = $node->id();

-        /** @var \Drupal\node\NodeInterface $reader_publication */
+        /** @var NodeInterface $reader_publication */
         $reader_publication = $node->field_reader_publication->entity;
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/epub_reader_framework/src/Plugin/Block/ReaderNavigationBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epub_reader_framework\Plugin\Block;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Link;
@@ @@
         $reader_publication = $node;
       }
       elseif ($node->bundle() == 'reader_chapter') {
-        /** @var \Drupal\node\NodeInterface $reader_publication */
+        /** @var NodeInterface $reader_publication */
         $reader_publication = $node->field_reader_publication->entity;
       }

@@ @@
   }

   /**
-   * @param \Drupal\node\NodeInterface $publication
+   * @param NodeInterface $publication
    *
    * @return array
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function buildChaptersList(NodeInterface $publication) {

@@ @@
   /**
    * Build the chapter menu item.
    *
-   * @param \Drupal\node\NodeInterface $chapter
+   * @param NodeInterface $chapter
    *   The reader chapter.
    * @param array $chapter_children
    *   The chapter children render array.
@@ @@
    * @return array
    *   An array to store children keyed by chapter ID.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function loadChapterChildren(NodeInterface $publication) {
     $chapter_children = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/epub_reader_framework/src/Form/ReaderPublicationFormAlter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epub_reader_framework\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityFormInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The access manager service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $routeMatch;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The node access service.
    *
-   * @var \Drupal\node\Access\NodeAddAccessCheck
+   * @var NodeAddAccessCheck
    */
   protected $nodeAddAccessCheck;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new ReaderPublicationFormAlter object.
    *
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $route_match
+   * @param CurrentRouteMatch $route_match
    *   The route match service.
-   * @param \Drupal\node\Access\NodeAddAccessCheck $node_access
+   * @param NodeAddAccessCheck $node_access
    *   The node access check.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param string $form_id
    *   The form ID.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function formAlter(array &$form, FormStateInterface $form_state, $form_id) {

@@ @@
             unset($form['field_reader_chapters']['widget'][$key]);
           }
           elseif ($item['target_id']['#default_value'] instanceof NodeInterface) {
-            /** @var \Drupal\node\NodeInterface $target_node */
+            /** @var NodeInterface $target_node */
             $target_node = $item['target_id']['#default_value'];
             $item['target_id']['#access'] = FALSE;

@@ @@
       }

       // Add an "Add new chapter" button.
-      /** @var \Drupal\Core\Session\AccountProxyInterface $user */
+      /** @var AccountProxyInterface $user */
       $user = $this->currentUser;
-      /** @var \Drupal\node\Access\NodeAddAccessCheck $access_check */
+      /** @var NodeAddAccessCheck $access_check */
       $access_check = $this->nodeAddAccessCheck;
       $reader_chapter_type = $this->entityTypeManager
         ->getStorage('node_type')
@@ @@
         if ($url->access($user)) {

           // If we have a node ID (ie, editing existing), append the ID.
-          /** @var \Drupal\Core\Entity\EntityForm $form_object */
+          /** @var EntityForm $form_object */
           $form_object = $form_state->getFormObject();
           if ($form_object instanceof EntityFormInterface && $entity = $form_object->getEntity()) {
             if (!$entity->isNew()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/epub_reader_framework/src/Form/ReaderChapterFormAlter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epub_reader_framework\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param string $form_id
    *   The form ID.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function formAlter(array &$form, FormStateInterface $form_state, $form_id) {
     if (isset($form['field_reader_components'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/epub_reader_framework/src/Event/ReaderNodeAjaxControllerResponseEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epub_reader_framework\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\node\NodeInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event that is fired before the ajax response is returned.
@@ @@
   /**
    * The reader publication or chapter.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   public $node;

@@ @@
   /**
    * The ajax response.
    *
-   * @var \Drupal\Core\Ajax\AjaxResponse
+   * @var AjaxResponse
    */
   public $response;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The publication or chapter.
-   * @param \Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The ajax response.
    */
   public function __construct(NodeInterface $node, AjaxResponse $response) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/epub_reader_framework/src/Event/ReaderEpubXhmlConverterEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epub_reader_framework\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\node\NodeInterface;
 use Wa72\HtmlPageDom\HtmlPageCrawler;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Event that is fired when the batch is processing a particular chapter.
@@ @@
   /**
    * The symfony domcrawler.
    *
-   * @var \Wa72\HtmlPageDom\HtmlPageCrawler
+   * @var HtmlPageCrawler
    */
   public $crawler;

@@ @@
   /**
    * The reader publication.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   public $readerPublication;

@@ @@
   /**
    * The reader chapter.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   public $readerChapter;

@@ @@
   /**
    * Constructs the object.
    *
-   * @param \Wa72\HtmlPageDom\HtmlPageCrawler $crawler
+   * @param HtmlPageCrawler $crawler
    *   The symfony domcrawler.
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The publication.
-   * @param \Drupal\node\NodeInterface $reader_chapter
+   * @param NodeInterface $reader_chapter
    *   The chapter.
    */
   public function __construct(HtmlPageCrawler $crawler, NodeInterface $reader_publication, NodeInterface $reader_chapter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/epub_reader_framework/src/EpubReaderFrameworkHelpers.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epub_reader_framework;

+use Drupal\media\MediaInterface;
+use Drupal\Core\StreamWrapper\StreamWrapperManager;
 use Drupal\file\FileInterface;
 use Drupal\node\NodeInterface;

@@ @@
   /**
    * Get the EPUB file for a publication.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The reader publication.
    *
-   * @return bool|\Drupal\file\FileInterface
+   * @return bool|FileInterface
    *   The EPUB file or false.
    */
   public static function getEpubFile(NodeInterface $reader_publication) {
     if ($reader_publication->hasField('field_reader_file') && $media_file = $reader_publication->field_reader_file->entity) {
-      /** @var \Drupal\media\MediaInterface $media_file */
+      /** @var MediaInterface $media_file */
       if ($media_file->hasField('field_media_file') && $file = $media_file->field_media_file->entity) {
-        /** @var \Drupal\file\FileInterface $file */
+        /** @var FileInterface $file */
         return $file;
       }
     }
@@ @@
   /**
    * Get the EPUB file path for a publication.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The reader publication.
-   * @param bool|\Drupal\file\FileInterface $file
+   * @param bool|FileInterface $file
    *   The EPUB file or FALSE to attempt to automatically determine it.
    *
    * @return bool|string
@@ @@
     if ($file && $file instanceof FileInterface) {

       // Determine storage location.
-      /** @var \Drupal\Core\StreamWrapper\StreamWrapperManager $stream_wrapper_manager */
+      /** @var StreamWrapperManager $stream_wrapper_manager */
       $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
       $stream_wrappers = $stream_wrapper_manager->getWrappers();
       if (isset($stream_wrappers['private']) && $stream_wrappers['private']) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/epub_reader_framework/src/Epub/ReaderEpubZipExtractor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epub_reader_framework\Epub;

+use Drupal\Core\Archiver\ArchiverException;
+use Drupal\media\MediaInterface;
 use Drupal\Core\Archiver\Zip;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\epub_reader_framework\EpubReaderFrameworkHelpers;
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The stream wrapper.
    *
-   * @var Drupal\Core\StreamWrapper\StreamWrapperManager
+   * @var StreamWrapperManager
    */
   protected $streamWrapper;

@@ @@
   /**
    * The serializer.
    *
-   * @var Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file handler.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManager $stream_wrapper
+   * @param StreamWrapperManager $stream_wrapper
    *   The stream wrapper.
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   The serializer.
    */
   public function __construct(
@@ @@
   /**
    * Callback implementation of hook_form_FORM_ID_alter().
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The reader publication node.
    *
-   * @throws \Drupal\Core\Archiver\ArchiverException
+   * @throws ArchiverException
    */
   public function extractEpubFiles(NodeInterface $reader_publication) {
     if ($reader_publication->hasField('field_reader_file') && $media_file = $reader_publication->field_reader_file->entity) {
-      /** @var \Drupal\media\MediaInterface $media_file */
+      /** @var MediaInterface $media_file */
       if ($media_file->hasField('field_media_file') && $file = $media_file->field_media_file->entity) {
-        /** @var \Drupal\file\FileInterface $file */
+        /** @var FileInterface $file */
         $real_path = $this->fileSystem->realpath($file->getFileUri());
         $zip = new Zip($real_path);

@@ @@
   /**
    * Get extracted files.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The reader publication node.
-   * @param bool|\Drupal\file\FileInterface $file
+   * @param bool|FileInterface $file
    *   The epub file or false.
    *
    * @return array|bool
@@ @@

     if (!$file) {
       if ($reader_publication->hasField('field_reader_file') && $media_file = $reader_publication->field_reader_file->entity) {
-        /** @var \Drupal\media\MediaInterface $media_file */
+        /** @var MediaInterface $media_file */
         if ($media_file->hasField('field_media_file')) {

-          /** @var \Drupal\file\FileInterface $file */
+          /** @var FileInterface $file */
           $file = $media_file->field_media_file->entity;
         }
       }
@@ @@
   /**
    * Get extracted files by type.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The publication reader.
-   * @param bool|\Drupal\file\FileInterface $file
+   * @param bool|FileInterface $file
    *   The epub file or false.
    * @param array $types
    *   An array of extensions.
@@ @@
   /**
    * Get extracted files by type.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The publication reader.
-   * @param bool|\Drupal\file\FileInterface $file
+   * @param bool|FileInterface $file
    *   The epub file or false.
    *
    * @return array
@@ @@
       $opf = reset($files);
       $data = file_get_contents($opf->uri);

-      /** @var \Symfony\Component\Serializer\SerializerInterface $xml_encoder */
+      /** @var SerializerInterface $xml_encoder */
       $xml_encoder = $this->serializer;
       $opf_data = $xml_encoder->decode($data, 'xml');
       if ($opf_data && isset($opf_data['spine']['itemref'])) {
@@ @@
   /**
    * Get the file details by filename.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The publication reader.
    * @param string $filename
    *   The filename.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/epub_reader_framework/src/Epub/ReaderEpubXhtmlConverter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epub_reader_framework\Epub;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\node\Entity\Node;
 use Drupal\node\NodeInterface;
 use Drupal\epub_reader_framework\Event\ReaderEpubXhmlConverterEvent;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher definition.
    *
-   * @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher
+   * @var ContainerAwareEventDispatcher
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $eventDispatcher
+   * @param ContainerAwareEventDispatcher $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(
@@ @@
   /**
    * Convert the XML into chapters.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The reader publication node.
    * @param string $chapter_xhtml_uri
    *   The path to the xhtml file.
@@ @@
    * @param string $chapter_id
    *   The chapter ID from the EPUB spine.
    *
-   * @return bool|\Drupal\node\NodeInterface
+   * @return bool|NodeInterface
    *   The chapter node.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function convertXhtmlToChapter(
     NodeInterface $reader_publication,
@@ @@
         // Get the event_dispatcher service and dispatch the event.
         $event_name = ReaderEpubXhmlConverterEvent::EVENT_NAME;
         $event_dispatcher = $this->eventDispatcher;
-        $event_dispatcher->dispatch($event_name, $event);
+        $event_dispatcher->dispatch($event, $event_name);
       }
     }

@@ @@
   /**
    * Create a new node.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The publication.
    * @param string $chapter_id
    *   The chapter ID from the EPUB.
    *
-   * @return \Drupal\node\NodeInterface|bool
+   * @return NodeInterface|bool
    *   The existing node or false.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getExistingNodeByPublicationAndChapterId(
     NodeInterface $reader_publication,
@@ @@
     if ($existing_chapter_ids) {
       $existing_chapter_id = reset($existing_chapter_ids);

-      /** @var \Drupal\node\NodeInterface $node */
+      /** @var NodeInterface $node */
       $node = $this->entityTypeManager->getStorage('node')
         ->load($existing_chapter_id);
       return $node;
@@ @@
   /**
    * Create a new node.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The publication.
    * @param string $chapter_id
    *   The chapter ID from the EPUB.
@@ @@
    * @param string $title
    *   The title of the chapter.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The new node.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createNewNode(
     NodeInterface $reader_publication,
@@ @@
     $chapter_id,
     $title
   ) {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = Node::create([
       'type' => 'reader_chapter',
       'title' => $title,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


14) modules/contrib/epub_reader_framework/src/Epub/ReaderEpubCompletedCleanup.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epub_reader_framework\Epub;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\node\NodeInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Clean up automated chapters that no longer exist.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The reader publication node.
    * @param array $chapter_ids
    *   An array of chapter IDs from the EPUB spine.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function cleanupChapters(
     NodeInterface $reader_publication,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/epub_reader_framework/src/Entity/ReaderEntityPresave.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Callback implementation of hook_entity_presave() for reader publication.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being saved.
    */
   public function entityPresave(EntityInterface $entity) {
@@ @@
   /**
    * Check if we need to trigger a reimport of the publication EPUB.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being saved.
    */
   protected function batchTriggerCheck(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/epub_reader_framework/src/Entity/ReaderEntityPostsave.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epub_reader_framework\Entity;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Batch\BatchBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The render entity cross reference service.
    *
-   * @var \Drupal\epub_reader_framework\Entity\ReaderEntityCrossReference
+   * @var ReaderEntityCrossReference
    */
   protected $readerEntityCrossReference;

@@ @@
   /**
    * The render entity cross reference service.
    *
-   * @var \Drupal\epub_reader_framework\Entity\ReaderEntityChapterHeadingsSave
+   * @var ReaderEntityChapterHeadingsSave
    */
   protected $readerEntityChapterHeadingsSave;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\epub_reader_framework\Entity\ReaderEntityCrossReference $reader_entity_cross_reference
+   * @param ReaderEntityCrossReference $reader_entity_cross_reference
    *   The reader entity cross reference service.
-   * @param \Drupal\epub_reader_framework\Entity\ReaderEntityChapterHeadingsSave $reader_entity_chapter_headings_save
+   * @param ReaderEntityChapterHeadingsSave $reader_entity_chapter_headings_save
    *   The reader entity chapter headings save service.
    */
   public function __construct(
@@ @@
   /**
    * Callback implementation of insert and update entity hooks.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being inserted or updated.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function entityPostsave(EntityInterface $entity) {

@@ @@
   /**
    * Maybe trigger the batch.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being inserted or updated.
    */
   protected function batchTrigger(EntityInterface $entity) {
@@ @@
   /**
    * Maybe add a chapter cross-reference.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being inserted or updated.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function chapterCrossReference(EntityInterface $entity) {
     /** @var \Drupal\node\NodeInterface $entity */
-    /** @var \Drupal\node\NodeInterface $reader_publication */
+    /** @var NodeInterface $reader_publication */
     $reader_publication = $entity->field_reader_publication->entity;

-    /** @var \Drupal\epub_reader_framework\Entity\ReaderEntityCrossReference $reader_entity_cross_reference */
+    /** @var ReaderEntityCrossReference $reader_entity_cross_reference */
     $reader_entity_cross_reference = $this->readerEntityCrossReference;
     $reader_entity_cross_reference->ensureChapterIsCrossReferencedInPublication(
       $reader_publication,
@@ @@
   /**
    * Save chapter headings.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being inserted or updated.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function chapterHeadingsSave(EntityInterface $entity) {
     /** @var \Drupal\node\NodeInterface $entity */
-    /** @var \Drupal\node\NodeInterface $reader_publication */
+    /** @var NodeInterface $reader_publication */
     $reader_publication = $entity->field_reader_publication->entity;

-    /** @var \Drupal\epub_reader_framework\Entity\ReaderEntityChapterHeadingsSave $reader_entity_chapter_headings_save */
+    /** @var ReaderEntityChapterHeadingsSave $reader_entity_chapter_headings_save */
     $reader_entity_chapter_headings_save = $this->readerEntityChapterHeadingsSave;
     $reader_entity_chapter_headings_save->saveHeadings(
       $reader_publication,
@@ @@
   /**
    * Redirect to the publication.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being inserted or updated.
    */
   protected function redirectToPublication(EntityInterface $entity) {
     /** @var \Drupal\node\NodeInterface $entity */
-    /** @var \Drupal\node\NodeInterface $reader_publication */
+    /** @var NodeInterface $reader_publication */
     $reader_publication_id = $entity->field_reader_publication->target_id;

     // Redirect to adding a publication.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


17) modules/contrib/epub_reader_framework/src/Entity/ReaderEntityCrossReference.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epub_reader_framework\Entity;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\node\NodeInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Cross reference the chapters from the publication.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The reader publication node.
-   * @param \Drupal\node\NodeInterface $reader_chapter
+   * @param NodeInterface $reader_chapter
    *   The reader chapter node.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function ensureChapterIsCrossReferencedInPublication(
     NodeInterface $reader_publication,
@@ @@
   /**
    * Cross reference the chapters from the publication.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The reader publication node.
    * @param array $imported_chapter_nids
    *   An array of chapter nids that below to the publication.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function crossReferenceChaptersFromPublicationExtraction(
     NodeInterface $reader_publication,
@@ @@
   /**
    * Get existing cross references.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The reader publication node.
    *
    * @return array
@@ @@
     if ($chapter_references->count()) {
       foreach ($chapter_references as $chapter_reference) {
         if ($entity = $chapter_reference->entity) {
-          /** @var \Drupal\Core\Entity\EntityInterface $entity */
+          /** @var EntityInterface $entity */
           $node_ids[] = $entity->id();
         }
       }
@@ @@
   /**
    * Save cross references to the node entity.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The reader publication node.
    * @param array $chapter_node_ids
    *   An array of chapter node ids.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function saveCrossReferences(
     NodeInterface $reader_publication,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


18) modules/contrib/epub_reader_framework/src/Entity/ReaderEntityChapterHeadingsSave.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epub_reader_framework\Entity;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Theme\MissingThemeDependencyException;
+use Drupal\Core\Render\Renderer;
+use Drupal\Core\Theme\ThemeInitialization;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\node\NodeInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Save all h2s into the reader chapter heading storage.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The reader publication node.
-   * @param \Drupal\node\NodeInterface $reader_chapter
+   * @param NodeInterface $reader_chapter
    *   The reader chapter node.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\Theme\MissingThemeDependencyException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws MissingThemeDependencyException
    */
   public function saveHeadings(
     NodeInterface $reader_publication,
@@ @@
   /**
    * Get the rendered markup for the chapter.
    *
-   * @param \Drupal\node\NodeInterface $reader_chapter
+   * @param NodeInterface $reader_chapter
    *   The reader chapter node.
    *
    * @return string
    *   The markup of the rendered node.
    *
-   * @throws \Drupal\Core\Theme\MissingThemeDependencyException
+   * @throws MissingThemeDependencyException
    */
   protected function getRenderedNodeOutput(NodeInterface $reader_chapter) {
     $render = \Drupal::entityTypeManager()->getViewBuilder('node')->view($reader_chapter, 'full');
-    /** @var \Drupal\Core\Render\Renderer $renderer */
+    /** @var Renderer $renderer */
     $renderer = \Drupal::service('renderer');

     // Set the active theme to the default theme.
-    /** @var \Drupal\Core\Theme\ThemeInitialization $theme_initialization */
+    /** @var ThemeInitialization $theme_initialization */
     $theme_initialization = \Drupal::service('theme.initialization');
     $default_theme = \Drupal::config('system.theme')->get('default');
     $original_active_theme = \Drupal::theme()->getActiveTheme();
@@ @@
    *
    * @param string $output
    *   The rendered markup of the chapter.
-   * @param \Drupal\node\NodeInterface $reader_chapter
+   * @param NodeInterface $reader_chapter
    *   The reader chapter node.
    */
   public function determineHeadings($output, NodeInterface $reader_chapter) {
@@ @@
   /**
    * Delete existing reader chapter headings for this chapter.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The reader publication node.
-   * @param \Drupal\node\NodeInterface $reader_chapter
+   * @param NodeInterface $reader_chapter
    *   The reader chapter node.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function deleteExistingHeadings(
     NodeInterface $reader_publication,
@@ @@
   /**
    * Save the new h2s into the reader chapter heading storage.
    *
-   * @param \Drupal\node\NodeInterface $reader_publication
+   * @param NodeInterface $reader_publication
    *   The reader publication node.
-   * @param \Drupal\node\NodeInterface $reader_chapter
+   * @param NodeInterface $reader_chapter
    *   The reader chapter node.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function saveNewHeadings(
     NodeInterface $reader_publication,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


19) modules/contrib/epub_reader_framework/src/Controller/ReaderNodeAjaxController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epub_reader_framework\Controller;

+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Cache\CacheableAjaxResponse;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
 class ReaderNodeAjaxController extends ControllerBase {

   /**
-   * Ajax callback to render the reader chapter.
-   *
-   * Takes different logic paths based on whether Javascript was enabled.
-   * If $type == 'ajax', it tells this function that ajax.js has rewritten
-   * the URL and thus we are doing an AJAX and can return an array of commands.
-   *
-   * @param \Drupal\node\NodeInterface $node
-   *   The node to render.
-   * @param string $nojs
-   *   Either 'ajax' or 'nojs`.
-   * @param string|int $back
-   *   Either '' or '1`. If 1, indicates, the ajax call is via the back button
-   *   and adding to the history again should be avoided.
-   *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse;
-   *   Ajax response if ajax, otherwise redirect.
-   *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   */
+  * Ajax callback to render the reader chapter.
+  *
+  * Takes different logic paths based on whether Javascript was enabled.
+  * If $type == 'ajax', it tells this function that ajax.js has rewritten
+  * the URL and thus we are doing an AJAX and can return an array of commands.
+  *
+   * @param NodeInterface $node
+  *   The node to render.
+  * @param string $nojs
+  *   Either 'ajax' or 'nojs`.
+  * @param string|int $back
+  *   Either '' or '1`. If 1, indicates, the ajax call is via the back button
+  *   and adding to the history again should be avoided.
+  *
+   * @return AjaxResponse|RedirectResponse ;
+    Ajax response if ajax, otherwise redirect.
+  *
+   * @throws EntityMalformedException
+  */
   public function nodeAjaxView(NodeInterface $node, $nojs = 'nojs', $back = '') {

     // Determine whether the request is coming from AJAX or not.
@@ @@
         if (class_exists('\Drupal\Core\Cache\CacheableAjaxResponse')) {
           // Cannot use 'Use' statement as we are unsure if this will exist.
           // @see https://www.drupal.org/project/drupal/issues/2701085.
-          $response = new \Drupal\Core\Cache\CacheableAjaxResponse();
+          $response = new CacheableAjaxResponse();
         }
         else {
           $response = new AjaxResponse();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/epub_reader_framework/src/Batch/ReaderChapterExtractorBatchProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\epub_reader_framework\Batch;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Archiver\ArchiverException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\epub_reader_framework\Epub\ReaderEpubXhtmlConverter;
+use Drupal\epub_reader_framework\Epub\ReaderEpubCompletedCleanup;
+use Drupal\epub_reader_framework\Entity\ReaderEntityCrossReference;
+use Drupal\epub_reader_framework\Epub\ReaderEpubZipExtractor;
 use Drupal\Core\Url;
 use Drupal\node\Entity\Node;
 use Symfony\Component\HttpFoundation\RedirectResponse;
@@ @@
    * @param array $context
    *   Batch context.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Archiver\ArchiverException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws ArchiverException
+   * @throws EntityStorageException
    */
   public static function operationCallback($reader_publication_id, array &$context) {
     if (empty($context['sandbox'])) {
@@ @@
         if (isset($chapter['uri'])) {
           if ($reader_publication = Node::load($context['sandbox']['reader_publication_id'])) {
             /** @var \Drupal\node\NodeInterface $reader_publication */
-            /** @var \Drupal\epub_reader_framework\Epub\ReaderEpubXhtmlConverter $epub_xhtml_converter */
+            /** @var ReaderEpubXhtmlConverter $epub_xhtml_converter */
             $epub_xhtml_converter = \Drupal::service('epub_reader_framework.reader_epub_xhtml_converter');

             try {
@@ @@
     if ($context['sandbox']['progress'] == $context['sandbox']['max']) {
       if ($context['results']['chapters'] && $reader_publication = Node::load($context['sandbox']['reader_publication_id'])) {
         /** @var \Drupal\node\NodeInterface $reader_publication */
-        /** @var \Drupal\epub_reader_framework\Epub\ReaderEpubCompletedCleanup $epub_xhtml_converter */
+        /** @var ReaderEpubCompletedCleanup $epub_xhtml_converter */
         $epub_xhtml_converter = \Drupal::service('epub_reader_framework.reader_epub_completed_cleanup');
         $epub_xhtml_converter->cleanupChapters($reader_publication,
           $context['results']['chapters']);
@@ @@

         if ($context['sandbox']['chapter_nids']) {

-          /** @var \Drupal\epub_reader_framework\Entity\ReaderEntityCrossReference $reader_entity_cross_reference */
+          /** @var ReaderEntityCrossReference $reader_entity_cross_reference */
           $reader_entity_cross_reference = \Drupal::service('epub_reader_framework.reader_entity_cross_reference');
           $reader_entity_cross_reference->crossReferenceChaptersFromPublicationExtraction(
             $reader_publication,
@@ @@
    * @param array $context
    *   Batch context.
    *
-   * @throws \Drupal\Core\Archiver\ArchiverException
+   * @throws ArchiverException
    */
   protected static function initialiseSandbox(
     $reader_publication_id,
@@ @@
    * @param array $context
    *   The batch processing context.
    *
-   * @throws \Drupal\Core\Archiver\ArchiverException
+   * @throws ArchiverException
    */
   protected static function extractEpub(array &$context) {
     if (isset($context['sandbox']['reader_publication_id']) && $context['sandbox']['reader_publication_id']) {
       if ($reader_publication = Node::load($context['sandbox']['reader_publication_id'])) {
         /** @var \Drupal\node\NodeInterface $reader_publication */
-        /** @var \Drupal\epub_reader_framework\Epub\ReaderEpubZipExtractor $epub_zip_extractor */
+        /** @var ReaderEpubZipExtractor $epub_zip_extractor */
         $epub_zip_extractor = \Drupal::service('epub_reader_framework.reader_epub_zip_extractor');
         $epub_zip_extractor->extractEpubFiles($reader_publication);
         $context['sandbox']['extracted_files'] = $epub_zip_extractor->getExtractedFiles($reader_publication);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/epub_reader_framework/epub_reader_framework.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Block\BlockManagerInterface;
+use Drupal\Core\Access\AccessResultInterface;
 /**
  * @file
  * Contains epub_reader_framework.module.
@@ @@
     \Drupal::moduleHandler()->alter('epub_reader_framework_previous_next_block_id', $previous_next_block_id);

     if ($navigation_block_id || $previous_next_block_id) {
-      /** @var \Drupal\Core\Block\BlockManagerInterface $block_manager */
+      /** @var BlockManagerInterface $block_manager */
       $block_manager = \Drupal::service('plugin.manager.block');

       // Add the reader navigation block.
       if ($navigation_block_id) {
         $plugin_block = $block_manager->createInstance($navigation_block_id, []);
-        /** @var \Drupal\Core\Access\AccessResultInterface $access_result */
+        /** @var AccessResultInterface $access_result */
         $access_result = $plugin_block->access(\Drupal::currentUser());
         if (!is_object($access_result) || !$access_result->isAllowed()) {
           $variables['reader_navigation'] = $plugin_block->build();
@@ @@
       // Add the reader previous next block.
       if ($previous_next_block_id) {
         $plugin_block = $block_manager->createInstance($previous_next_block_id, []);
-        /** @var \Drupal\Core\Access\AccessResultInterface $access_result */
+        /** @var AccessResultInterface $access_result */
         $access_result = $plugin_block->access(\Drupal::currentUser());
         if (!is_object($access_result) || !$access_result->isAllowed()) {
           $variables['reader_previous_next'] = $plugin_block->build();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


22) modules/contrib/epub_reader_framework/epub_reader_framework.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\StreamWrapper\StreamWrapperManager;
 /**
  * @file
  * EPUB Reader Framework install file.
  */
-
 /**
  * Implements hook_requirements().
  */
 function epub_reader_framework_requirements($phase) {
   if ($phase == 'runtime') {
-    /** @var \Drupal\Core\StreamWrapper\StreamWrapperManager $stream_wrapper_manager */
+    /** @var StreamWrapperManager $stream_wrapper_manager */
     $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
     $stream_wrappers = $stream_wrapper_manager->getWrappers();
     if (isset($stream_wrappers['private'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


23) modules/contrib/epub_reader_framework/epub_reader_framework.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\TypedData\Exception\MissingDataException;
 /**
  * @file
  * EPUB Reader Framework API documentation.
@@ @@
 /**
  * Perform alterations on the current node used to determine previous and next.
  *
- * @param \Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  *   The current node used to determine previous and next elements.
  *
- * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+ * @throws MissingDataException
  */
 function hook_epub_reader_framework_current_node_alter(NodeInterface &$node) {
   if ($node->bundle() == 'reader_publication') {
@@ @@
  *
  * @param string $chapter_label
  *   The reader chapter label.
- * @param \Drupal\node\NodeInterface $chapter
+ * @param NodeInterface $chapter
  *   The reader chapter node id.
  */
 function hook_epub_reader_framework_navigation_chapter_label_alter($chapter_label, NodeInterface $chapter) {
@@ @@
  *
  * This can result in any render array.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $reader_chapter_heading
+ * @param ContentEntityInterface $reader_chapter_heading
  *   The reader chapter heading entity.
  * @param int $reader_chapter_id
  *   The reader chapter node id.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 23 files have been changed by Rector                                      

