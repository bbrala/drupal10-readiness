modules/contrib/responsive_image_preload/responsive_image_preload.module
modules/contrib/responsive_image_preload/src/FieldPreprocessor.php
modules/contrib/responsive_image_preload/src/PreloadGenerator.php
modules/contrib/responsive_image_preload/src/PreloadGeneratorInterface.php
modules/contrib/responsive_image_preload/src/ThirdPartySettings.php
modules/contrib/responsive_image_preload/tests/src/Functional/ResponsiveImagePreloadBrowserTestBase.php
modules/contrib/responsive_image_preload/tests/src/Functional/ResponsiveImagePreloadTest.php
modules/contrib/responsive_image_preload/tests/src/Functional/ResponsiveImagePreloadWebpTest.php
modules/contrib/responsive_image_preload/tests/src/Unit/FieldPreprocessorTest.php
modules/contrib/responsive_image_preload/tests/src/Unit/ThirdPartySettingsTest.php

10 files with changes
=====================

1) modules/contrib/responsive_image_preload/tests/src/Unit/ThirdPartySettingsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\responsive_image_preload\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Field\FormatterInterface;
 use Drupal\responsive_image_preload\ThirdPartySettings;
 use Drupal\Tests\UnitTestCase;
@@ @@
   /**
    * The subject under test.
    *
-   * @var \Drupal\responsive_image_preload\ThirdPartySettings
+   * @var ThirdPartySettings
    */
   protected $instance;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->instance = new ThirdPartySettings();
     $this->instance->setStringTranslation($this->getStringTranslationStub());
@@ @@
    * @param bool $generate_preloads
    *   Should preloads be enabled?
    *
-   * @return \Drupal\Core\Field\FormatterInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @return FormatterInterface|MockObject
    *   A mocked plugin instance.
    */
   protected function getMockPlugin($id, $generate_preloads = FALSE) {
-    $plugin = $this->getMockBuilder(FormatterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $plugin = $this->createMock(FormatterInterface::class);

     $plugin
       ->method('getPluginId')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/responsive_image_preload/tests/src/Unit/FieldPreprocessorTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\responsive_image_preload\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The subject under test.
    *
-   * @var \Drupal\responsive_image_preload\FieldPreprocessor
+   * @var FieldPreprocessor
    */
   protected $instance;

@@ @@
   /**
    * The mocked display settings.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var EntityViewDisplayInterface|MockObject
    */
   protected $display;

@@ @@
   /**
    * The mocked display storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var EntityStorageInterface|MockObject
    */
   protected $storage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

-    $preload_generator = $this->getMockBuilder(PreloadGeneratorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $preload_generator = $this->createMock(PreloadGeneratorInterface::class);

     $preload_generator
       ->method('generatePreloads')
@@ @@
         'test-preload-key' => ['test-preload-data'],
       ]);

-    $this->display = $this->getMockBuilder(EntityViewDisplayInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->display = $this->createMock(EntityViewDisplayInterface::class);

-    $this->storage = $this->getMockBuilder(EntityStorageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->storage = $this->createMock(EntityStorageInterface::class);

     $this->storage->method('loadByProperties')
       ->willReturnCallback(function ($properties) {
@@ @@
         return $name === 'entity_test.test.test' ? NULL : $this->display;
       });

-    $entity_type_manager = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity_type_manager = $this->createMock(EntityTypeManagerInterface::class);

     $entity_type_manager->method('getStorage')
       ->willReturn($this->storage);
@@ @@
    * @param string $bundle
    *   The bundle of the entity.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @return FieldableEntityInterface|MockObject
    *   A mocked entity instance.
    */
   protected function getMockEntity($bundle = 'test') {
-    $entity = $this->getMockBuilder(FieldableEntityInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity = $this->createMock(FieldableEntityInterface::class);

     $entity->method('getEntityTypeId')
       ->willReturn('test');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/responsive_image_preload/tests/src/Functional/ResponsiveImagePreloadWebpTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\responsive_image_preload\Functional;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityMalformedException;
 /**
  * Contains test cases for complex responsive image style configurations.
  *
@@ @@
   /**
    * Tests that correct preloads are generated in a variety of configurations.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   This should never happen under normal circumstances.
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    *   This should never happen under normal circumstances.
    */
   public function testResponsiveImageWebpPreload() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/responsive_image_preload/tests/src/Functional/ResponsiveImagePreloadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\responsive_image_preload\Functional;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityMalformedException;
 /**
  * Contains test cases for complex responsive image style configurations.
  *
@@ @@
   /**
    * Tests that correct preloads are generated in a variety of configurations.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   This should never happen under normal circumstances.
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    *   This should never happen under normal circumstances.
    */
   public function testResponsiveImagePreload() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/responsive_image_preload/tests/src/Functional/ResponsiveImagePreloadBrowserTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\responsive_image_preload\Functional;

+use Drupal\field\FieldStorageConfigInterface;
+use Drupal\field\FieldConfigInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * The storage configuration for the test field.
    *
-   * @var \Drupal\field\FieldStorageConfigInterface
+   * @var FieldStorageConfigInterface
    */
   protected $fieldStorage;

@@ @@
   /**
    * The configuration for the test field.
    *
-   * @var \Drupal\field\FieldConfigInterface
+   * @var FieldConfigInterface
    */
   protected $field;

@@ @@
   /**
    * The view display configuration for the test entity.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @var EntityViewDisplayInterface
    */
   protected $entityViewDisplay;

@@ @@
   /**
    * A test entity instance.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   This should never happen under normal circumstances.
    *
    * @noinspection PhpHierarchyChecksInspection
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->fieldStorage = FieldStorageConfig::create([
@@ @@
     $this->entityViewDisplay->save();

     $fixture_path = implode(DIRECTORY_SEPARATOR, [
-      drupal_get_path('module', 'responsive_image_preload_test'),
+      \Drupal::service('extension.list.module')->getPath('responsive_image_preload_test'),
       'fixtures',
       'test.jpg',
     ]);
-    $file = file_save_data(
-      file_get_contents($fixture_path),
-      'public://test.jpg'
-    );
+    $file = \Drupal::service('file.repository')->writeData(file_get_contents($fixture_path), 'public://test.jpg');

     $this->entity = EntityTest::create([
       'image' => [
@@ @@
    * @param bool $generate_preload
    *   TRUE if preloading should be enabled, otherwise FALSE.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *   This should never happen under normal circumstances.
    */
   protected function setFormatterSettings($responsive_image_style, $generate_preload) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileSaveDataRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/responsive_image_preload/src/ThirdPartySettings.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Generates the third party settings form elements.
    *
-   * @param \Drupal\Core\Field\FormatterInterface $plugin
+   * @param FormatterInterface $plugin
    *   The formatter to generate a form for.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/responsive_image_preload/src/PreloadGeneratorInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\responsive_image_preload;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 /**
  * A service that is capable of generating a set of responsive image preloads.
  */
@@ @@
    * @return array
    *   A set of preloads.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   This should never happen under normal circumstances.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   This should never happen under normal circumstances.
    */
   public function generatePreloads(array $elements);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/responsive_image_preload/src/PreloadGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\responsive_image_preload;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\image\ImageStyleInterface;
 use Drupal\breakpoint\BreakpointManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * The breakpoint manager service.
    *
-   * @var \Drupal\breakpoint\BreakpointManagerInterface
+   * @var BreakpointManagerInterface
    */
   protected $breakpointManager;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The image factory service.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Creates a preload generator service instance.
    *
-   * @param \Drupal\breakpoint\BreakpointManagerInterface $breakpoint_manager
+   * @param BreakpointManagerInterface $breakpoint_manager
    *   The breakpoint manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(BreakpointManagerInterface $breakpoint_manager, EntityTypeManagerInterface $entity_type_manager, ImageFactory $image_factory, ModuleHandlerInterface $module_handler) {
@@ @@
     $preloads = [];
     foreach (Element::children($elements) as $delta) {

-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = $elements[$delta]['#item']->entity;

-      /** @var \Drupal\responsive_image\ResponsiveImageStyleInterface $responsive_image_style */
+      /** @var ResponsiveImageStyleInterface $responsive_image_style */
       $responsive_image_style = $responsive_image_style_storage->load($elements[$delta]['#responsive_image_style_id']);

       $preloads[] = $this->generatePreloadsForDelta($file, $responsive_image_style);
@@ @@
   /**
    * Generates preloads for the provided image file and responsive image style.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The image file to generate preloads for.
-   * @param \Drupal\responsive_image\ResponsiveImageStyleInterface $responsive_image_style
+   * @param ResponsiveImageStyleInterface $responsive_image_style
    *   The responsive image style to generate preloads for.
    *
    * @return array
    *   An array of preloads built from the image derivatives.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   This should never happen under normal circumstances.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   This should never happen under normal circumstances.
    */
   protected function generatePreloadsForDelta(FileInterface $file, ResponsiveImageStyleInterface $responsive_image_style) {
@@ @@
                 );
                 $imagesizes[] = explode(',', $image_style_mapping['image_mapping']['sizes']);

-                /** @var \Drupal\image\ImageStyleInterface $image_style */
+                /** @var ImageStyleInterface $image_style */
                 $image_style = $image_style_storage->load($image_style_name);
-                $image_url = file_url_transform_relative(file_create_url($image_style->buildUrl($file->getFileUri())));
+                $image_url = \Drupal::service('file_url_generator')->generateString($image_style->buildUrl($file->getFileUri()));

                 if ($this->moduleHandler->moduleExists('webp')) {
                   $image_url = preg_replace('/\.(png|jpg|jpeg)(\\?.*?)?(,| |$)/i', '.webp\\2\\3', $image_url);
@@ @@

             case 'image_style':
               $image_style_name = $image_style_mapping['image_mapping'];
-              /** @var \Drupal\image\ImageStyleInterface $image_style */
+              /** @var ImageStyleInterface $image_style */
               $image_style = $image_style_storage->load($image_style_name);
-              $image_url = file_url_transform_relative(file_create_url($image_style->buildUrl($file->getFileUri())));
+              $image_url = \Drupal::service('file_url_generator')->generateString($image_style->buildUrl($file->getFileUri()));

               if ($this->moduleHandler->moduleExists('webp')) {
                 $image_url = preg_replace('/\.(png|jpg|jpeg)(\\?.*?)?(,| |$)/i', '.webp\\2\\3', $image_url);
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/responsive_image_preload/src/FieldPreprocessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\responsive_image_preload;

+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;

 /**
@@ @@
   /**
    * The preload generator service.
    *
-   * @var \Drupal\responsive_image_preload\PreloadGeneratorInterface
+   * @var PreloadGeneratorInterface
    */
   protected $preloadGenerator;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Creates a field preprocessor service instance.
    *
-   * @param \Drupal\responsive_image_preload\PreloadGeneratorInterface $preload_generator
+   * @param PreloadGeneratorInterface $preload_generator
    *   The preload generator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(PreloadGeneratorInterface $preload_generator, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    */
   public function preprocessField(array &$variables) {
     if ($variables['element']['#formatter'] === 'responsive_image') {
-      /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+      /** @var FieldableEntityInterface $entity */
       $entity = $variables['element']['#object'];
       $view_mode = $variables['element']['#view_mode'];
       $field_name = $variables['element']['#field_name'];

-      /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+      /** @var EntityViewDisplayInterface $display */
       $display = current($this->entityTypeManager->getStorage('entity_view_display')
         ->loadByProperties([
           'id' => $entity->getEntityTypeId() . '.' . $entity->bundle() . '.' . $view_mode,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/responsive_image_preload/responsive_image_preload.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\responsive_image_preload\ThirdPartySettings;
+use Drupal\responsive_image_preload\FieldPreprocessor;
 /**
  * @file
  * Allows content editors to configure preloaded responsive images.
@@ @@
  */
 function responsive_image_preload_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, array $form, FormStateInterface $form_state) {

-  /** @var \Drupal\responsive_image_preload\ThirdPartySettings $third_party_settings */
+  /** @var ThirdPartySettings $third_party_settings */
   $third_party_settings = \Drupal::service('responsive_image_preload.third_party_settings');

   return $third_party_settings->settingsForm($plugin);
@@ @@
  */
 function responsive_image_preload_field_formatter_settings_summary_alter(array &$summary, array $context) {

-  /** @var \Drupal\responsive_image_preload\ThirdPartySettings $third_party_settings */
+  /** @var ThirdPartySettings $third_party_settings */
   $third_party_settings = \Drupal::service('responsive_image_preload.third_party_settings');

   $third_party_settings->settingsSummaryAlter($summary, $context);
@@ @@
  */
 function responsive_image_preload_preprocess_field(array &$variables) {

-  /** @var \Drupal\responsive_image_preload\FieldPreprocessor $field_preprocessor */
+  /** @var FieldPreprocessor $field_preprocessor */
   $field_preprocessor = \Drupal::service('responsive_image_preload.field_preprocessor');

   $field_preprocessor->preprocessField($variables);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 10 files have been changed by Rector                                      

