modules/contrib/simple_sitemap/modules/simple_sitemap_engines/simple_sitemap_engines.install
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/simple_sitemap_engines.module
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Controller/IndexNowController.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Entity/SimpleSitemapEngine.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Entity/SimpleSitemapEngineStorage.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Form/FormHelper.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Form/Handler/BundleEntityFormHandler.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Form/Handler/EntityFormHandler.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Form/Handler/EntityFormHandlerBase.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Form/SimplesitemapEnginesForm.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/PathProcessor/IndexNowPathProcessor.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Plugin/QueueWorker/SitemapSubmittingWorker.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/SearchEngineListBuilder.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Submitter/IndexNowSubmitter.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Submitter/SitemapSubmitter.php
modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Submitter/SubmitterBase.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/simple_sitemap_views.install
modules/contrib/simple_sitemap/modules/simple_sitemap_views/simple_sitemap_views.module
modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Controller/SimpleSitemapViewsController.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/EventSubscriber/ArgumentCollector.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Plugin/QueueWorker/GarbageCollector.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Plugin/simple_sitemap/UrlGenerator/ViewsUrlGenerator.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Plugin/views/display_extender/SimpleSitemapDisplayExtender.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/SimpleSitemapViews.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/tests/src/Functional/SimpleSitemapViewsTest.php
modules/contrib/simple_sitemap/modules/simple_sitemap_views/tests/src/Functional/SimpleSitemapViewsTestBase.php
modules/contrib/simple_sitemap/simple_sitemap.api.php
modules/contrib/simple_sitemap/simple_sitemap.drush.inc
modules/contrib/simple_sitemap/simple_sitemap.install
modules/contrib/simple_sitemap/simple_sitemap.module
modules/contrib/simple_sitemap/src/Annotation/SitemapGenerator.php
modules/contrib/simple_sitemap/src/Annotation/UrlGenerator.php
modules/contrib/simple_sitemap/src/Commands/SimpleSitemapCommands.php
modules/contrib/simple_sitemap/src/Controller/SimpleSitemapController.php
modules/contrib/simple_sitemap/src/Entity/EntityHelper.php
modules/contrib/simple_sitemap/src/Entity/SimpleSitemap.php
modules/contrib/simple_sitemap/src/Entity/SimpleSitemapInterface.php
modules/contrib/simple_sitemap/src/Entity/SimpleSitemapStorage.php
modules/contrib/simple_sitemap/src/Entity/SimpleSitemapType.php
modules/contrib/simple_sitemap/src/Entity/SimpleSitemapTypeInterface.php
modules/contrib/simple_sitemap/src/Entity/SimpleSitemapTypeStorage.php
modules/contrib/simple_sitemap/src/Exception/SitemapNotExistsException.php
modules/contrib/simple_sitemap/src/Exception/SkipElementException.php
modules/contrib/simple_sitemap/src/Form/CustomLinksForm.php
modules/contrib/simple_sitemap/src/Form/EntitiesForm.php
modules/contrib/simple_sitemap/src/Form/EntityBundlesForm.php
modules/contrib/simple_sitemap/src/Form/FormHelper.php
modules/contrib/simple_sitemap/src/Form/Handler/BundleEntityFormHandler.php
modules/contrib/simple_sitemap/src/Form/Handler/BundleEntityFormHandlerTrait.php
modules/contrib/simple_sitemap/src/Form/Handler/EntityFormHandler.php
modules/contrib/simple_sitemap/src/Form/Handler/EntityFormHandlerBase.php
modules/contrib/simple_sitemap/src/Form/Handler/EntityFormHandlerInterface.php
modules/contrib/simple_sitemap/src/Form/Handler/EntityFormHandlerTrait.php
modules/contrib/simple_sitemap/src/Form/SettingsForm.php
modules/contrib/simple_sitemap/src/Form/SimpleSitemapEntityForm.php
modules/contrib/simple_sitemap/src/Form/SimpleSitemapFormBase.php
modules/contrib/simple_sitemap/src/Form/SimpleSitemapTypeEntityForm.php
modules/contrib/simple_sitemap/src/Form/StatusForm.php
modules/contrib/simple_sitemap/src/Logger.php
modules/contrib/simple_sitemap/src/Manager/CustomLinkManager.php
modules/contrib/simple_sitemap/src/Manager/EntityManager.php
modules/contrib/simple_sitemap/src/Manager/Generator.php
modules/contrib/simple_sitemap/src/Manager/LinkSettingsTrait.php
modules/contrib/simple_sitemap/src/Manager/VariantSetterTrait.php
modules/contrib/simple_sitemap/src/PathProcessor/SitemapPathProcessor.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SimpleSitemapPluginBase.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SimpleSitemapPluginInterface.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/DefaultSitemapGenerator.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorBase.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorInterface.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorManager.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapIndexGenerator.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapWriter.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/ArbitraryUrlGenerator.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/CustomUrlGenerator.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/EntityMenuLinkContentUrlGenerator.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGenerator.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGeneratorBase.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/SitemapIndexUrlGenerator.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorBase.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorInterface.php
modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorManager.php
modules/contrib/simple_sitemap/src/Queue/BatchTrait.php
modules/contrib/simple_sitemap/src/Queue/QueueWorker.php
modules/contrib/simple_sitemap/src/Queue/SimpleSitemapQueue.php
modules/contrib/simple_sitemap/src/Settings.php
modules/contrib/simple_sitemap/src/SimpleSitemapListBuilder.php
modules/contrib/simple_sitemap/src/SimpleSitemapTypeListBuilder.php
modules/contrib/simple_sitemap/tests/scripts/performance_test.php
modules/contrib/simple_sitemap/tests/src/Functional/SimplesitemapTest.php
modules/contrib/simple_sitemap/tests/src/Functional/SimplesitemapTestBase.php

70 files with changes
=====================

1) modules/contrib/simple_sitemap/tests/src/Functional/SimplesitemapTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_sitemap\Functional;

+use Drupal\simple_sitemap\Manager\Generator;
+use Drupal\Core\Database\Connection;
+use Drupal\user\Entity\User;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ @@
   /**
    * Simple sitemap generator.
    *
-   * @var \Drupal\simple_sitemap\Manager\Generator
+   * @var Generator
    */
   protected $generator;

@@ @@
   /**
    * Database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * A user with all the permissions.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $privilegedUser;

@@ @@
   /**
    * A node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;

@@ @@
   /**
    * A node.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node2;

@@ @@
    * @param array|string $langcodes
    *   An array of language codes or the single language code.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function addLanguages($langcodes = 'de') {
     foreach ((array) $langcodes as $langcode) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/simple_sitemap/tests/src/Functional/SimplesitemapTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_sitemap\Functional;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Url;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * Verify sitemap.xml has the link to the front page after first generation.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testInitialGeneration() {
     $this->generator->generate(QueueWorker::GENERATE_TYPE_BACKEND);
@@ @@
   /**
    * Tests if a disabled sitemap returns a 404 and has no chunks.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws PluginException
+   * @throws EntityStorageException
    */
   public function testDisableSitemap() {
     $this->generator->generate(QueueWorker::GENERATE_TYPE_BACKEND);
@@ @@
   /**
    * Tests if a deleted sitemap returns a 404.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws PluginException
+   * @throws EntityStorageException
    */
   public function testDeleteSitemap() {
     $this->generator->generate(QueueWorker::GENERATE_TYPE_BACKEND);
@@ @@
   /**
    * Tests if a sitemap with no links returns a 404 and has no chunks.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws ExpectationException
+   * @throws PluginException
    */
   public function testEmptySitemap() {
     $this->generator->generate(QueueWorker::GENERATE_TYPE_BACKEND);
@@ @@
   /**
    * Test custom link.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testAddCustomLink() {
     $this->generator->customLinkManager()->add(
@@ @@
   /**
    * Test default settings of custom links.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testAddCustomLinkDefaults() {
     $this->generator->customLinkManager()
@@ @@
   /**
    * Test removing custom paths from the sitemap settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testRemoveCustomLinks() {

@@ @@
   /**
    * Tests setting bundle settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    *
    * @todo Add form tests
    */
@@ @@
   /**
    * Test default settings of bundles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testSetBundleSettingsDefaults() {
     $this->generator->entityManager()->setBundleSettings('node', 'page');
@@ @@
   /**
    * Test link count.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testLinkCount() {
     $this->generator->entityManager()->setBundleSettings('node', 'page');
@@ @@
   /**
    * Test the lastmod parameter in different scenarios.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testLastmod() {
     // Entity links should have 'lastmod'.
@@ @@
   /**
    * Tests the duplicate setting.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function testRemoveDuplicatesSetting() {
     $this->generator->entityManager()->setBundleSettings('node', 'page');
@@ @@
   /**
    * Test max links setting and the sitemap index.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testMaxLinksSetting() {
     $this->generator->entityManager()->setBundleSettings('node', 'page');
@@ @@
   }

   // @todo testGenerateDurationSetting
-
   /**
    * Test setting the base URL.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testBaseUrlSetting() {
     $this->generator->entityManager()->setBundleSettings('node', 'page');
@@ @@
   /**
    * Test overriding of bundle settings for a single entity.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    *
    * @todo Use form testing instead of responseContains().
    */
@@ @@

   /**
    * Tests that a page does not break if an entity has its id set.
+   * @doesNotPerformAssertions
    */
   public function testNewEntityWithIdSet() {
     $new_node = Node::create([
@@ @@

   // @todo Test indexing menu.
   // @todo Test deleting a bundle.
-
   /**
    * Test disabling sitemap support for an entity type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    */
   public function testDisableEntityType() {
     $this->generator->entityManager()
@@ @@
   /**
    * Test enabling sitemap support for an entity type.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws PluginException
+   * @throws ExpectationException
    *
    * @todo Test admin/config/search/simplesitemap/entities form.
    */
@@ @@
   }

   // @todo testSitemapLanguages.
-
   /**
    * Test adding and removing sitemap variants.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws ExpectationException
+   * @throws PluginException
    */
   public function testSitemapVariants() {

@@ @@
   /**
    * Test resuming sitemap generation.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws PluginException
+   * @throws EntityStorageException
    *
    * @dataProvider generationResumeProvider
    */
@@ @@

     $this->generator->rebuildQueue();
     $generate_count = 0;
-    /** @var \Drupal\simple_sitemap\Queue\QueueWorker $queue_worker */
+    /** @var QueueWorker $queue_worker */
     $queue_worker = \Drupal::service('simple_sitemap.queue_worker');
     while ($queue_worker->generationInProgress()) {
       $generate_count++;
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/simple_sitemap/tests/scripts/performance_test.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\simple_sitemap\Manager\Generator;
+use Drupal\Component\Plugin\Exception\PluginException;
 // @codingStandardsIgnoreFile

 use Drupal\Component\Utility\Timer;
@@ @@
 include_once 'core/tests/Drupal/Tests/RandomGeneratorTrait.php';

 $module_handler = \Drupal::moduleHandler();
-/** @var \Psr\Log\LoggerInterface $logger */
+/** @var LoggerInterface $logger */
 $logger = Drush::service('logger');
 if (!(\Drupal::moduleHandler()->moduleExists('simple_sitemap'))) {
   $logger->error("In order to use this script, simple_sitemap must be installed.");
@@ @@
   private $timerKey = 0;

   /**
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   private $logger;

@@ @@
     $node_type->save();
     node_add_body_field($node_type);

-    /** @var \Drupal\simple_sitemap\Manager\Generator $generator */
+    /** @var Generator $generator */
     $generator = \Drupal::service('simple_sitemap.generator');
     $generator->entityManager()->setBundleSettings('node', 'simple_sitemap_performance_test', [
         'index' => TRUE,
@@ @@
   /**
    * @param bool $count_queries
    * @param $context
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function doBatchGenerate($count_queries = FALSE, &$context) {
     if ($count_queries) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * WrapReturnRector


4) modules/contrib/simple_sitemap/src/SimpleSitemapListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap;

+use Drupal\simple_sitemap\Entity\SimpleSitemapInterface;
 use Drupal\Core\Config\Entity\DraggableListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
     if ($entity->isEnabled()) {
       $row['status']['#markup'] = $this->t('pending');

-      /** @var \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $entity */
+      /** @var SimpleSitemapInterface $entity */
       if ($entity->fromPublishedAndUnpublished()->getChunkCount()) {
         switch ($entity->contentStatus()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/simple_sitemap/src/Settings.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Settings constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/simple_sitemap/src/Queue/SimpleSitemapQueue.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
    *
    * @param string $name
    *   The name of the queue.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The Connection object containing the key-value tables.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct($name, Connection $connection, TimeInterface $time) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/simple_sitemap/src/Queue/QueueWorker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Queue;

+use Drupal\simple_sitemap\Entity\SimpleSitemapInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Timer;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * The simple_sitemap.settings service.
    *
-   * @var \Drupal\simple_sitemap\Settings
+   * @var Settings
    */
   protected $settings;

@@ @@
   /**
    * The state key/value store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Simple XML Sitemap queue handler.
    *
-   * @var \Drupal\simple_sitemap\Queue\SimpleSitemapQueue
+   * @var SimpleSitemapQueue
    */
   protected $queue;

@@ @@
   /**
    * Simple XML Sitemap logger.
    *
-   * @var \Drupal\simple_sitemap\Logger
+   * @var Logger
    */
   protected $logger;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The lock backend that should be used.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * The sitemap entity.
    *
-   * @var \Drupal\simple_sitemap\Entity\SimpleSitemapInterface
+   * @var SimpleSitemapInterface
    */
   protected $sitemapProcessedNow;

@@ @@
   /**
    * QueueWorker constructor.
    *
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key/value store.
-   * @param \Drupal\simple_sitemap\Queue\SimpleSitemapQueue $element_queue
+   * @param SimpleSitemapQueue $element_queue
    *   Simple XML Sitemap queue handler.
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Logger $logger
    *   Simple XML Sitemap logger.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock backend that should be used.
    */
   public function __construct(Settings $settings,
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function queue($variants = NULL): QueueWorker {
     $variants = $variants !== NULL ? (array) $variants : NULL;

-    /** @var \Drupal\simple_sitemap\Entity\SimpleSitemap[] $sitemaps */
+    /** @var SimpleSitemap[] $sitemaps */
     $sitemaps = $this->entityTypeManager->getStorage('simple_sitemap')->loadMultiple($variants);

     $empty_variants = array_fill_keys(array_keys($sitemaps), TRUE);
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function rebuildQueue($variants = NULL): QueueWorker {
     if (!$this->lock->acquire(static::LOCK_ID)) {
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @todo Use exception handling when skipping queue items.
    */
@@ @@
   /**
    * Unstashes results.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function unstashResults(): void {
     if (NULL !== $results = $this->state->get('simple_sitemap.queue_stashed_results')) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/simple_sitemap/src/Queue/BatchTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Queue;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\simple_sitemap\Logger;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

 /**
@@ @@
    * @param mixed $context
    *   The batch context.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @todo Variants into generate().
    */
   public static function doBatchGenerate(&$context): void {

-    /** @var \Drupal\simple_sitemap\Queue\QueueWorker $queue_worker */
+    /** @var QueueWorker $queue_worker */
     $queue_worker = \Drupal::service('simple_sitemap.queue_worker');

     $queue_worker->generate();
@@ @@
    * @see https://api.drupal.org/api/drupal/core!includes!form.inc/group/batch/8
    */
   public static function finishGeneration(bool $success, array $results, array $operations): bool {
-    /** @var \Drupal\simple_sitemap\Logger $logger */
+    /** @var Logger $logger */
     $logger = \Drupal::service('simple_sitemap.logger');
     if ($success) {
       $logger
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the sitemap.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap
+   * @param SimpleSitemapInterface $sitemap
    *   The sitemap entity to set.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/UrlGeneratorBase.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Simple XML Sitemap logger.
    *
-   * @var \Drupal\simple_sitemap\Logger
+   * @var Logger
    */
   protected $logger;

@@ @@
   /**
    * The simple_sitemap.settings service.
    *
-   * @var \Drupal\simple_sitemap\Settings
+   * @var Settings
    */
   protected $settings;

@@ @@
   /**
    * The sitemap entity.
    *
-   * @var \Drupal\simple_sitemap\Entity\SimpleSitemapInterface
+   * @var SimpleSitemapInterface
    */
   protected $sitemap;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Logger $logger
    *   Simple XML Sitemap logger.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGeneratorBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator;

+use Drupal\Core\Session\AccountInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\simple_sitemap\Entity\EntityHelper;
 use Drupal\simple_sitemap\Exception\SkipElementException;
@@ @@
   /**
    * Local cache for the available language objects.
    *
-   * @var \Drupal\Core\Language\LanguageInterface[]
+   * @var LanguageInterface[]
    */
   protected $languages;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * An account implementation representing an anonymous user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $anonUser;

@@ @@
   /**
    * Helper class for working with entities.
    *
-   * @var \Drupal\simple_sitemap\Entity\EntityHelper
+   * @var EntityHelper
    */
   protected $entityHelper;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Logger $logger
    *   Simple XML Sitemap logger.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\simple_sitemap\Entity\EntityHelper $entity_helper
+   * @param EntityHelper $entity_helper
    *   Helper class for working with entities.
    */
   public function __construct(
@@ @@
    *
    * @param array $path_data
    *   The path data.
-   * @param \Drupal\Core\Url $url_object
+   * @param Url $url_object
    *   The URL object.
    *
    * @return array
    *   The URL variants.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getUrlVariants(array $path_data, Url $url_object): array {
     $url_variants = [];
@@ @@
     elseif ($this->settings->get('skip_untranslated')
       && ($entity = $this->entityHelper->getEntityFromUrlObject($url_object)) instanceof ContentEntityInterface) {

-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $translation_languages = $entity->getTranslationLanguages();
       if (isset($translation_languages[LanguageInterface::LANGCODE_NOT_SPECIFIED])
         || isset($translation_languages[LanguageInterface::LANGCODE_NOT_APPLICABLE])) {
@@ @@
   /**
    * Gets the alternate URLs for default language.
    *
-   * @param \Drupal\Core\Url $url_object
+   * @param Url $url_object
    *   The URL object.
    *
    * @return array
@@ @@
   /**
    * Gets the alternate URLs for translated languages.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to process.
-   * @param \Drupal\Core\Url $url_object
+   * @param Url $url_object
    *   The URL object.
    *
    * @return array
@@ @@
   /**
    * Gets the alternate URLs for all languages.
    *
-   * @param \Drupal\Core\Url $url_object
+   * @param Url $url_object
    *   The URL object.
    *
    * @return array
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function generate($data_set): array {
     try {
@@ @@
   /**
    * Gets the image data for specified entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to process.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/EntityUrlGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
@@ @@
   /**
    * The UrlGenerator plugins manager.
    *
-   * @var \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorManager
+   * @var UrlGeneratorManager
    */
   protected $urlGeneratorManager;

@@ @@
   /**
    * The memory cache.
    *
-   * @var \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface
+   * @var MemoryCacheInterface
    */
   protected $entityMemoryCache;

@@ @@
   /**
    * The simple_sitemap.entity_manager service.
    *
-   * @var \Drupal\simple_sitemap\Manager\EntityManager
+   * @var EntityManager
    */
   protected $entitiesManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Logger $logger
    *   Simple XML Sitemap logger.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\simple_sitemap\Entity\EntityHelper $entity_helper
+   * @param EntityHelper $entity_helper
    *   Helper class for working with entities.
-   * @param \Drupal\simple_sitemap\Manager\EntityManager $entities_manager
+   * @param EntityManager $entities_manager
    *   The simple_sitemap.entity_manager service.
-   * @param \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorManager $url_generator_manager
+   * @param UrlGeneratorManager $url_generator_manager
    *   The UrlGenerator plugins manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
    */
   public function __construct(
@@ @@
   /**
    * Processes the given entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to process.
    *
    * @return array
    *   Processing result.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityMalformedException
    */
   protected function processEntity(ContentEntityInterface $entity): array {
     $entity_settings = $this->entitiesManager
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/EntityMenuLinkContentUrlGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator;

+use Drupal\Core\Menu\MenuLinkInterface;
 use Drupal\simple_sitemap\Entity\EntityHelper;
 use Drupal\simple_sitemap\Exception\SkipElementException;
 use Drupal\simple_sitemap\Logger;
@@ @@
   /**
    * The menu tree service.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuLinkTree;

@@ @@
   /**
    * The simple_sitemap.entity_manager service.
    *
-   * @var \Drupal\simple_sitemap\Manager\EntityManager
+   * @var EntityManager
    */
   protected $entitiesManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Logger $logger
    *   Simple XML Sitemap logger.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\simple_sitemap\Entity\EntityHelper $entity_helper
+   * @param EntityHelper $entity_helper
    *   Helper class for working with entities.
-   * @param \Drupal\simple_sitemap\Manager\EntityManager $entities_manager
+   * @param EntityManager $entities_manager
    *   The simple_sitemap.entity_manager service.
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menu_link_tree
+   * @param MenuLinkTreeInterface $menu_link_tree
    *   The menu tree service.
    */
   public function __construct(
@@ @@
    */
   protected function processDataSet($data_set): array {

-    /** @var \Drupal\Core\Menu\MenuLinkInterface $data_set */
+    /** @var MenuLinkInterface $data_set */
     if (!$data_set->isEnabled()) {
       throw new SkipElementException();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/CustomUrlGenerator.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * The simple_sitemap.custom_link_manager service.
    *
-   * @var \Drupal\simple_sitemap\Manager\CustomLinkManager
+   * @var CustomLinkManager
    */
   protected $customLinks;

@@ @@
   /**
    * The path validator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Logger $logger
    *   Simple XML Sitemap logger.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\simple_sitemap\Entity\EntityHelper $entity_helper
+   * @param EntityHelper $entity_helper
    *   Helper class for working with entities.
-   * @param \Drupal\simple_sitemap\Manager\CustomLinkManager $custom_links
+   * @param CustomLinkManager $custom_links
    *   The simple_sitemap.custom_link_manager service.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/UrlGenerator/ArbitraryUrlGenerator.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Logger $logger
    *   Simple XML Sitemap logger.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapWriter.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
   /**
    * SitemapWriter constructor.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
    */
   public function __construct(RouteProviderInterface $route_provider) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the sitemap.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap
+   * @param SimpleSitemapInterface $sitemap
    *   The sitemap entity to set.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/simple_sitemap/src/Plugin/simple_sitemap/SitemapGenerator/SitemapGeneratorBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator;

+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Extension\ModuleExtensionList;
 use Drupal\simple_sitemap\Plugin\simple_sitemap\SimpleSitemapPluginBase;
 use Drupal\simple_sitemap\Entity\SimpleSitemapInterface;
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The simple_sitemap.settings service.
    *
-   * @var \Drupal\simple_sitemap\Settings
+   * @var Settings
    */
   protected $settings;

@@ @@
   /**
    * Sitemap XML writer.
    *
-   * @var \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapWriter
+   * @var SitemapWriter
    */
   protected $writer;

@@ @@
   /**
    * The sitemap entity.
    *
-   * @var \Drupal\simple_sitemap\Entity\SimpleSitemapInterface
+   * @var SimpleSitemapInterface
    */
   protected $sitemap;

@@ @@
   /**
    * The extension.list.module service.
    *
-   * @var \Drupal\Core\Extension\ModuleExtensionList
+   * @var ModuleExtensionList
    */
   protected $moduleList;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapWriter $sitemap_writer
+   * @param SitemapWriter $sitemap_writer
    *   Sitemap XML writer.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\Core\Extension\ModuleExtensionList $module_list
+   * @param ModuleExtensionList $module_list
    *   The extension.list.module service.
    */
   public function __construct(
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function getIndexContent(): string {
     $this->writer->openMemory();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/simple_sitemap/src/Manager/Generator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Manager;

+use Drupal\simple_sitemap\Entity\SimpleSitemapInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Lock\LockBackendInterface;
 use Drupal\simple_sitemap\Entity\SimpleSitemap;
 use Drupal\simple_sitemap\Logger;
@@ @@
   /**
    * The simple_sitemap.settings service.
    *
-   * @var \Drupal\simple_sitemap\Settings
+   * @var Settings
    */
   protected $settings;

@@ @@
   /**
    * The simple_sitemap.queue_worker service.
    *
-   * @var \Drupal\simple_sitemap\Queue\QueueWorker
+   * @var QueueWorker
    */
   protected $queueWorker;

@@ @@
   /**
    * The lock backend that should be used.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * Simple XML Sitemap logger.
    *
-   * @var \Drupal\simple_sitemap\Logger
+   * @var Logger
    */
   protected $logger;

@@ @@
   /**
    * Simplesitemap constructor.
    *
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\simple_sitemap\Queue\QueueWorker $queue_worker
+   * @param QueueWorker $queue_worker
    *   The simple_sitemap.queue_worker service.
-   * @param \Drupal\Core\Lock\LockBackendInterface|null $lock
+   * @param LockBackendInterface|null $lock
    *   The lock backend that should be used.
-   * @param \Drupal\simple_sitemap\Logger|null $logger
+   * @param Logger|null $logger
    *   Simple XML Sitemap logger.
    */
   public function __construct(
@@ @@
    *   Returns null if the content is not retrievable from the database.
    */
   public function getContent(?int $delta = NULL): ?string {
-    /** @var \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap */
+    /** @var SimpleSitemapInterface $sitemap */
     if (empty($variants = $this->getVariants())) {
       return NULL;
     }
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function generate(string $from = QueueWorker::GENERATE_TYPE_FORM): Generator {
     if (!$this->lock->lockMayBeAvailable(QueueWorker::LOCK_ID)) {
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function queue(): Generator {
     $this->queueWorker->queue($this->getVariants());
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function rebuildQueue(): Generator {
     if (!$this->lock->lockMayBeAvailable(QueueWorker::LOCK_ID)) {
@@ @@
   /**
    * Gets the simple_sitemap.entity_manager service.
    *
-   * @return \Drupal\simple_sitemap\Manager\EntityManager
+   * @return EntityManager
    *   The simple_sitemap.entity_manager service.
    */
   public function entityManager(): EntityManager {
-    /** @var \Drupal\simple_sitemap\Manager\EntityManager $entities */
+    /** @var EntityManager $entities */
     $entities = \Drupal::service('simple_sitemap.entity_manager');

     return $entities->setVariants($this->getVariants());
@@ @@
   /**
    * Gets the simple_sitemap.custom_link_manager service.
    *
-   * @return \Drupal\simple_sitemap\Manager\CustomLinkManager
+   * @return CustomLinkManager
    *   The simple_sitemap.custom_link_manager service.
    */
   public function customLinkManager(): CustomLinkManager {
-    /** @var \Drupal\simple_sitemap\Manager\CustomLinkManager $custom_links */
+    /** @var CustomLinkManager $custom_links */
     $custom_links = \Drupal::service('simple_sitemap.custom_link_manager');

     return $custom_links->setVariants($this->getVariants());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/simple_sitemap/src/Manager/EntityManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Manager;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Helper class for working with entities.
    *
-   * @var \Drupal\simple_sitemap\Entity\EntityHelper
+   * @var EntityHelper
    */
   protected $entityHelper;

@@ @@
   /**
    * The simple_sitemap.settings service.
    *
-   * @var \Drupal\simple_sitemap\Settings
+   * @var Settings
    */
   protected $settings;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Simplesitemap constructor.
    *
-   * @param \Drupal\simple_sitemap\Entity\EntityHelper $entity_helper
+   * @param EntityHelper $entity_helper
    *   Helper class for working with entities.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @todo Make work for multiple variants.
    * @todo Throw exception on non-existing entity type/bundle.
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function removeBundleSettings(?string $entity_type_id = NULL, ?string $bundle_name = NULL): EntityManager {
     if (empty($variants = $this->getVariants())) {
@@ @@
    *
    * @return $this
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @todo Pass entity object instead of id and entity type?
    */
@@ @@
    *   Array of entity instance settings or the settings of its bundle. False if
    *   entity or variant does not exist.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @todo Make work for multiple variants.
    * @todo Pass entity object instead of id and entity type?
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


23) modules/contrib/simple_sitemap/src/Manager/CustomLinkManager.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The path validator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;

@@ @@
   /**
    * CustomLinkManager constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/simple_sitemap/src/Logger.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Logger constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/simple_sitemap/src/Form/StatusForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Form;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Render\RendererInterface;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $db;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The simple_sitemap.queue_worker service.
    *
-   * @var \Drupal\simple_sitemap\Queue\QueueWorker
+   * @var QueueWorker
    */
   protected $queueWorker;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * StatusForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    * @param \Drupal\simple_sitemap\Manager\Generator $generator
    *   The sitemap generator service.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
+   * @param FormHelper $form_helper
    *   Helper class for working with forms.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\simple_sitemap\Queue\QueueWorker $queue_worker
+   * @param QueueWorker $queue_worker
    *   The simple_sitemap.queue_worker service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function generate(array &$form, FormStateInterface $form_state): void {
     /** @var \Drupal\simple_sitemap\Manager\Generator $generator */
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function rebuildQueue(array &$form, FormStateInterface $form_state): void {
     /** @var \Drupal\simple_sitemap\Manager\Generator $generator */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/simple_sitemap/src/Form/SimpleSitemapTypeEntityForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * SimpleSitemapTypeEntityForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   Entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/simple_sitemap/src/Form/SimpleSitemapFormBase.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The sitemap generator service.
    *
-   * @var \Drupal\simple_sitemap\Manager\Generator
+   * @var Generator
    */
   protected $generator;

@@ @@
   /**
    * The simple_sitemap.settings service.
    *
-   * @var \Drupal\simple_sitemap\Settings
+   * @var Settings
    */
   protected $settings;

@@ @@
   /**
    * Helper class for working with forms.
    *
-   * @var \Drupal\simple_sitemap\Form\FormHelper
+   * @var FormHelper
    */
   protected $formHelper;

@@ @@
   /**
    * SimpleSitemapFormBase constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\simple_sitemap\Manager\Generator $generator
+   * @param Generator $generator
    *   The sitemap generator service.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
+   * @param FormHelper $form_helper
    *   Helper class for working with forms.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/simple_sitemap/src/Form/SimpleSitemapEntityForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * SimpleSitemapEntityForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   Entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/simple_sitemap/src/Form/SettingsForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * SettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\simple_sitemap\Manager\Generator $generator
+   * @param Generator $generator
    *   The sitemap generator service.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
+   * @param FormHelper $form_helper
    *   Helper class for working with forms.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/simple_sitemap/src/Form/Handler/EntityFormHandlerInterface.php:15

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see simple_sitemap_form_alter()
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state);
@@ @@
   /**
    * Sets the form entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/simple_sitemap/src/Form/Handler/EntityFormHandlerBase.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The sitemap generator service.
    *
-   * @var \Drupal\simple_sitemap\Manager\Generator
+   * @var Generator
    */
   protected $generator;

@@ @@
   /**
    * Helper class for working with entities.
    *
-   * @var \Drupal\simple_sitemap\Entity\EntityHelper
+   * @var EntityHelper
    */
   protected $entityHelper;

@@ @@
   /**
    * Helper class for working with forms.
    *
-   * @var \Drupal\simple_sitemap\Form\FormHelper
+   * @var FormHelper
    */
   protected $formHelper;

@@ @@
   /**
    * The entity being used by this form handler.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * EntityFormHandlerBase constructor.
    *
-   * @param \Drupal\simple_sitemap\Manager\Generator $generator
+   * @param Generator $generator
    *   The sitemap generator service.
-   * @param \Drupal\simple_sitemap\Entity\EntityHelper $entity_helper
+   * @param EntityHelper $entity_helper
    *   Helper class for working with entities.
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
+   * @param FormHelper $form_helper
    *   Helper class for working with forms.
    */
   public function __construct(Generator $generator, EntityHelper $entity_helper, FormHelper $form_helper) {
@@ @@
   /**
    * Retrieves data from form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @throws \InvalidArgumentException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


32) modules/contrib/simple_sitemap/src/Form/FormHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Form;

+use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\DependencyInjection\ClassResolverInterface;
 use Drupal\Core\Entity\EntityFormInterface;
@@ @@
   /**
    * The sitemap generator service.
    *
-   * @var \Drupal\simple_sitemap\Manager\Generator
+   * @var Generator
    */
   protected $generator;

@@ @@
   /**
    * Helper class for working with entities.
    *
-   * @var \Drupal\simple_sitemap\Entity\EntityHelper
+   * @var EntityHelper
    */
   protected $entityHelper;

@@ @@
   /**
    * Proxy for the current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The simple_sitemap.settings service.
    *
-   * @var \Drupal\simple_sitemap\Settings
+   * @var Settings
    */
   protected $settings;

@@ @@
   /**
    * The class resolver.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;

@@ @@
   /**
    * FormHelper constructor.
    *
-   * @param \Drupal\simple_sitemap\Manager\Generator $generator
+   * @param Generator $generator
    *   The sitemap generator service.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\simple_sitemap\Entity\EntityHelper $entity_helper
+   * @param EntityHelper $entity_helper
    *   Helper class for working with entities.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Proxy for the current user account.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see simple_sitemap_form_alter()
@@ @@
   /**
    * Resolves the entity form handler for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which the form handler should be resolved.
    *
-   * @return \Drupal\simple_sitemap\Form\Handler\EntityFormHandlerInterface|null
+   * @return EntityFormHandlerInterface|null
    *   The instance of the entity form handler or NULL if there is no handler
    *   for the given entity.
    */
@@ @@
   /**
    * Resolves the definition of the entity form handler for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which the definition should be resolved.
    *
    * @return string|null
@@ @@
    *   The form elements for the bundle settings.
    */
   public function bundleSettingsForm(array $form, $entity_type_id, $bundle_name): array {
-    /** @var \Drupal\simple_sitemap\Form\Handler\BundleEntityFormHandler $form_handler */
+    /** @var BundleEntityFormHandler $form_handler */
     $form_handler = $this->classResolver->getInstanceFromDefinition(static::BUNDLE_ENTITY_FORM_HANDLER);

     return $form_handler->setEntityTypeId($entity_type_id)
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function regenerateNowFormSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
    *   Cron intervals.
    */
   public static function getCronIntervalOptions(): array {
-    /** @var \Drupal\Core\Datetime\DateFormatter $formatter */
+    /** @var DateFormatter $formatter */
     $formatter = \Drupal::service('date.formatter');
     $intervals = array_flip(static::$cronIntervals);
     foreach ($intervals as $interval => &$label) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


33) modules/contrib/simple_sitemap/src/Form/EntityBundlesForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Helper class for working with entities.
    *
-   * @var \Drupal\simple_sitemap\Entity\EntityHelper
+   * @var EntityHelper
    */
   protected $entityHelper;

@@ @@
   /**
    * The simple_sitemap.entity_manager service.
    *
-   * @var \Drupal\simple_sitemap\Manager\EntityManager
+   * @var EntityManager
    */
   protected $entityManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EntityBundlesForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\simple_sitemap\Manager\Generator $generator
+   * @param Generator $generator
    *   The sitemap generator service.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
+   * @param FormHelper $form_helper
    *   Helper class for working with forms.
-   * @param \Drupal\simple_sitemap\Entity\EntityHelper $entity_helper
+   * @param EntityHelper $entity_helper
    *   Helper class for working with entities.
-   * @param \Drupal\simple_sitemap\Manager\EntityManager $entity_manager
+   * @param EntityManager $entity_manager
    *   The simple_sitemap.entity_manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/simple_sitemap/src/Form/EntitiesForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Form;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Helper class for working with entities.
    *
-   * @var \Drupal\simple_sitemap\Entity\EntityHelper
+   * @var EntityHelper
    */
   protected $entityHelper;

@@ @@
   /**
    * The simple_sitemap.entity_manager service.
    *
-   * @var \Drupal\simple_sitemap\Manager\EntityManager
+   * @var EntityManager
    */
   protected $entityManager;

@@ @@
   /**
    * EntitiesForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\simple_sitemap\Manager\Generator $generator
+   * @param Generator $generator
    *   The sitemap generator service.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
+   * @param FormHelper $form_helper
    *   Helper class for working with forms.
-   * @param \Drupal\simple_sitemap\Entity\EntityHelper $entity_helper
+   * @param EntityHelper $entity_helper
    *   Helper class for working with entities.
-   * @param \Drupal\simple_sitemap\Manager\EntityManager $entity_manager
+   * @param EntityManager $entity_manager
    *   The simple_sitemap.entity_manager service.
    */
   public function __construct(
@@ @@
    * @param string $entity_type_id
    *   The entity type ID.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   A string representation of indexed bundles for the given entity type.
    */
   protected function getIndexedBundlesString(string $entity_type_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/simple_sitemap/src/Form/CustomLinksForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The path validator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;

@@ @@
   /**
    * CustomLinksForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\simple_sitemap\Manager\Generator $generator
+   * @param Generator $generator
    *   The sitemap generator service.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
+   * @param FormHelper $form_helper
    *   Helper class for working with forms.
-   * @param \Drupal\Core\Path\PathValidatorInterface $path_validator
+   * @param PathValidatorInterface $path_validator
    *   The path validator service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/simple_sitemap/src/Entity/SimpleSitemapTypeStorage.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * SimpleSitemapTypeStorage constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_service
+   * @param UuidInterface $uuid_service
    *   The UUID service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache backend.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, ConfigFactoryInterface $config_factory, UuidInterface $uuid_service, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/simple_sitemap/src/Entity/SimpleSitemapTypeInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Entity;

+use Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorInterface;

@@ @@
   /**
    * Gets the sitemap generator.
    *
-   * @return \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorInterface
+   * @return SitemapGeneratorInterface
    *   The sitemap generator.
    */
   public function getSitemapGenerator(): SitemapGeneratorInterface;
@@ @@
   /**
    * Gets the URL generators.
    *
-   * @return \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorInterface[]
+   * @return UrlGeneratorInterface[]
    *   Array of URL generators.
    */
   public function getUrlGenerators(): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


38) modules/contrib/simple_sitemap/src/Entity/SimpleSitemapType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Entity;

+use Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorInterface;
+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorInterface;

@@ @@
   /**
    * The sitemap generator.
    *
-   * @var \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorInterface
+   * @var SitemapGeneratorInterface
    */
   protected $sitemapGenerator;

@@ @@
   /**
    * The URL generators.
    *
-   * @var \Drupal\simple_sitemap\Plugin\simple_sitemap\UrlGenerator\UrlGeneratorInterface[]
+   * @var UrlGeneratorInterface[]
    */
   protected $urlGenerators;

@@ @@
    */
   public function getSitemapGenerator(): SitemapGeneratorInterface {
     if ($this->sitemapGenerator === NULL) {
-      /** @var \Drupal\Component\Plugin\PluginManagerInterface $manager */
+      /** @var PluginManagerInterface $manager */
       $manager = \Drupal::service('plugin.manager.simple_sitemap.sitemap_generator');
       $this->sitemapGenerator = $manager
         ->createInstance($this->get('sitemap_generator'));
@@ @@
   public function getUrlGenerators(): array {
     if ($this->urlGenerators === NULL) {
       $this->urlGenerators = [];
-      /** @var \Drupal\Component\Plugin\PluginManagerInterface $manager */
+      /** @var PluginManagerInterface $manager */
       $manager = \Drupal::service('plugin.manager.simple_sitemap.url_generator');
       foreach ($this->get('url_generators') as $generator_id) {
         $this->urlGenerators[$generator_id] = $manager->createInstance($generator_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/simple_sitemap/src/Entity/SimpleSitemapStorage.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection to be used.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The simple_sitemap.settings service.
    *
-   * @var \Drupal\simple_sitemap\Settings
+   * @var Settings
    */
   protected $settings;

@@ @@
   /**
    * SimpleSitemapStorage constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_service
+   * @param UuidInterface $uuid_service
    *   The UUID service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache backend.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection to be used.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
    */
   public function __construct(EntityTypeInterface $entity_type, ConfigFactoryInterface $config_factory, UuidInterface $uuid_service, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache, Connection $database, TimeInterface $time, EntityTypeManagerInterface $entity_type_manager, Settings $settings) {
@@ @@
   protected function doDelete($entities) {
     $default_variant = $this->settings->get('default_variant');

-    /** @var \Drupal\simple_sitemap\Entity\SimpleSitemapInterface[] $entities */
+    /** @var SimpleSitemapInterface[] $entities */
     foreach ($entities as $entity) {

       // Remove sitemap content.
@@ @@
   /**
    * Retrieves the chunk data for the specified sitemap.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $entity
+   * @param SimpleSitemapInterface $entity
    *   The sitemap entity.
    *
    * @return array
@@ @@
   /**
    * Publishes the specified sitemap.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemap $entity
+   * @param SimpleSitemap $entity
    *   The sitemap entity to publish.
    */
   public function publish(SimpleSitemap $entity): void {
@@ @@
    * A sitemap entity can exist without the sitemap (XML) content which lives
    * in the DB. This purges the sitemap content.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemap $entity
+   * @param SimpleSitemap $entity
    *   The sitemap entity to process.
    */
   public function deleteContent(SimpleSitemap $entity): void {
@@ @@
   /**
    * Adds a new content chunk to the specified sitemap.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $entity
+   * @param SimpleSitemapInterface $entity
    *   The sitemap entity to process.
    * @param string $content
    *   The sitemap chunk content.
@@ @@
   /**
    * Generates the chunk index of the specified sitemap's content chunks.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $entity
+   * @param SimpleSitemapInterface $entity
    *   The sitemap entity to process.
    * @param string $content
    *   The sitemap index content.
@@ @@
   /**
    * Returns the number of all content chunks of the specified sitemap.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemap $entity
+   * @param SimpleSitemap $entity
    *   The sitemap entity.
    * @param int|null $status
    *   Fetch by sitemap status.
@@ @@
   /**
    * Retrieves the content of a specified sitemap's chunk.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemap $entity
+   * @param SimpleSitemap $entity
    *   The sitemap entity.
    * @param bool|null $status
    *   Fetch by sitemap status.
@@ @@
   /**
    * Determines whether the specified sitemap has a chunk index.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemap $entity
+   * @param SimpleSitemap $entity
    *   The sitemap entity to check.
    * @param bool $status
    *   Fetch by sitemap status.
@@ @@
   /**
    * Gets the sitemap chunk index content.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemap $entity
+   * @param SimpleSitemap $entity
    *   The sitemap entity.
    * @param bool|null $status
    *   Fetch by sitemap status.
@@ @@
   /**
    * Returns the sitemap chunk ID by delta.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemap $entity
+   * @param SimpleSitemap $entity
    *   The sitemap entity.
    * @param int $delta
    *   Delta of the chunk.
@@ @@
   /**
    * Retrieves the sitemap chunk content.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemap $entity
+   * @param SimpleSitemap $entity
    *   The sitemap entity.
    * @param int $id
    *   The sitemap chunk ID.
@@ @@
    * The sitemap can be unpublished (0), published (1), or published and in
    * regeneration (2).
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemap $entity
+   * @param SimpleSitemap $entity
    *   The sitemap entity.
    *
    * @return int
@@ @@
   /**
    * Returns the timestamp of the specified sitemap's chunk generation.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemap $entity
+   * @param SimpleSitemap $entity
    *   The sitemap entity.
    * @param int|null $status
    *   Fetch by sitemap status.
@@ @@
   /**
    * Returns the number of links indexed in the specified sitemap's content.
    *
-   * @param \Drupal\simple_sitemap\Entity\SimpleSitemap $entity
+   * @param SimpleSitemap $entity
    *   The sitemap entity.
    * @param int|null $status
    *   Fetch by sitemap status.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/simple_sitemap/src/Entity/SimpleSitemapInterface.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the sitemap type.
    *
-   * @return \Drupal\simple_sitemap\Entity\SimpleSitemapTypeInterface
+   * @return SimpleSitemapTypeInterface
    *   The sitemap type entity.
    */
   public function getType(): SimpleSitemapTypeInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


41) modules/contrib/simple_sitemap/src/Entity/SimpleSitemap.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Entity;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\simple_sitemap\Settings;
+use Drupal\language\LanguageNegotiatorInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The sitemap type entity.
    *
-   * @var \Drupal\simple_sitemap\Entity\SimpleSitemapTypeInterface
+   * @var SimpleSitemapTypeInterface
    */
   protected $sitemapType;

@@ @@
    * @return bool
    *   TRUE if the sitemap is indexable and FALSE otherwise.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function isIndexable(): bool {
     try {
@@ @@
     unset($options['delta']);

     if (empty($options['base_url'])) {
-      /** @var \Drupal\simple_sitemap\Settings $settings */
+      /** @var Settings $settings */
       $settings = \Drupal::service('simple_sitemap.settings');
       $options['base_url'] = $settings->get('base_url') ?: $GLOBALS['base_url'];
     }
@@ @@
    * {@inheritdoc}
    */
   public function isDefault(): bool {
-    /** @var \Drupal\simple_sitemap\Settings $settings */
+    /** @var Settings $settings */
     $settings = \Drupal::service('simple_sitemap.settings');
     return $this->id() === $settings->get('default_variant');
   }
@@ @@
     }

     $url_negotiation_method_enabled = FALSE;
-    /** @var \Drupal\language\LanguageNegotiatorInterface $language_negotiator */
+    /** @var LanguageNegotiatorInterface $language_negotiator */
     $language_negotiator = \Drupal::service('language_negotiator');
     foreach ($language_negotiator->getNegotiationMethods(LanguageInterface::TYPE_URL) as $method) {
       if ($language_negotiator->isNegotiationMethodEnabled($method['id'])) {
@@ @@
       }
     }

-    /** @var \Drupal\simple_sitemap\Settings $settings */
+    /** @var Settings $settings */
     $settings = \Drupal::service('simple_sitemap.settings');
     $has_multiple_indexable_languages = count(
         array_diff_key($this->languageManager()->getLanguages(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/simple_sitemap/src/Entity/EntityHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Entity;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * EntityHelper constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The bundle info service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, ConfigFactoryInterface $configFactory) {
@@ @@
    *
    * Special handling of 'menu_link_content' entities.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get the bundle for.
    *
    * @return string
@@ @@
    *
    * Special handling of 'menu' entities.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to get the "bundle of" for.
    *
    * @return null|string
@@ @@
   /**
    * Returns objects of entity types that can be indexed.
    *
-   * @return \Drupal\Core\Entity\ContentEntityTypeInterface[]
+   * @return ContentEntityTypeInterface[]
    *   Objects of entity types that can be indexed by the sitemap.
    */
   public function getSupportedEntityTypes(): array {
@@ @@
   /**
    * Determines if an entity type is supported or not.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
    *
    * @return bool
@@ @@
   /**
    * Gets the entity from URL object.
    *
-   * @param \Drupal\Core\Url $url_object
+   * @param Url $url_object
    *   The URL object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   An entity object. NULL if no matching entity is found.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getEntityFromUrlObject(Url $url_object): ?EntityInterface {
     if ($url_object->isRouted()) {
@@ @@
    * @return array
    *   An array of entity IDs
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getEntityInstanceIds(string $entity_type_id, ?string $bundle_name = NULL): array {
     $sitemap_entity_types = $this->getSupportedEntityTypes();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


43) modules/contrib/simple_sitemap/src/Controller/SimpleSitemapController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Controller;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\PluginManagerInterface;
+use Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The simple_sitemap.generator service.
    *
-   * @var \Drupal\simple_sitemap\Manager\Generator
+   * @var Generator
    */
   protected $generator;

@@ @@
   /**
    * SimpleSitemapController constructor.
    *
-   * @param \Drupal\simple_sitemap\Manager\Generator $generator
+   * @param Generator $generator
    *   The simple_sitemap.generator service.
    */
   public function __construct(Generator $generator) {
@@ @@
   /**
    * Returns a specific sitemap, its chunk, or its index.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param string|null $variant
    *   Optional name of sitemap variant.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Returns an XML response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    */
   public function getSitemap(Request $request, ?string $variant = NULL): Response {
     $output = $this->generator->setVariants($variant)->getContent($request->query->get('page'));
@@ @@
   /**
    * Returns the XML stylesheet for a sitemap.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Returns an XSL response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function getSitemapXsl(string $sitemap_generator): Response {
-    /** @var \Drupal\Component\Plugin\PluginManagerInterface $manager */
+    /** @var PluginManagerInterface $manager */
     $manager = \Drupal::service('plugin.manager.simple_sitemap.sitemap_generator');
     try {
-      /** @var \Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorInterface $sitemap_generator */
+      /** @var SitemapGeneratorInterface $sitemap_generator */
       $sitemap_generator = $manager->createInstance($sitemap_generator);
     }
     catch (PluginNotFoundException $ex) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/simple_sitemap/src/Commands/SimpleSitemapCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Commands;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\simple_sitemap\Entity\SimpleSitemap;
 use Drupal\simple_sitemap\Queue\QueueWorker;
 use Drupal\simple_sitemap\Manager\Generator;
@@ @@
   /**
    * The simple_sitemap.generator service.
    *
-   * @var \Drupal\simple_sitemap\Manager\Generator
+   * @var Generator
    */
   protected $generator;

@@ @@
   /**
    * SimplesitemapCommands constructor.
    *
-   * @param \Drupal\simple_sitemap\Manager\Generator $generator
+   * @param Generator $generator
    *   The simple_sitemap.generator service.
    */
   public function __construct(Generator $generator) {
@@ @@
    *
    * @aliases ssr, simple-sitemap-rebuild-queue
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function rebuildQueue(array $options = ['variants' => '']): void {
     // @todo No need to load all sitemaps here.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/simple_sitemap/src/Annotation/UrlGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the generator.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A short description of the generator.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


46) modules/contrib/simple_sitemap/src/Annotation/SitemapGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the generator.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A short description of the generator.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


47) modules/contrib/simple_sitemap/simple_sitemap.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\simple_sitemap\Form\FormHelper;
+use Drupal\simple_sitemap\Settings;
+use Drupal\simple_sitemap\Manager\Generator;
+use Drupal\simple_sitemap\Entity\EntityHelper;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\simple_sitemap\Manager\EntityManager;
 /**
  * @file
  * Main module file containing hooks.
@@ @@
  * Adds sitemap settings to entity types that are supported via plugins.
  */
 function simple_sitemap_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\simple_sitemap\Form\FormHelper $form_helper */
+  /** @var FormHelper $form_helper */
   $form_helper = \Drupal::service('simple_sitemap.form_helper');
   $form_helper->formAlter($form, $form_state);
 }
@@ @@
  * Implements hook_cron().
  */
 function simple_sitemap_cron() {
-  /** @var \Drupal\simple_sitemap\Settings $settings */
+  /** @var Settings $settings */
   $settings = \Drupal::service(('simple_sitemap.settings'));

   if ($settings->get('cron_generate')) {
@@ @@
     $request_time = \Drupal::service('datetime.time')->getRequestTime();
     $state = \Drupal::state();

-    /** @var \Drupal\simple_sitemap\Queue\QueueWorker $queue_worker */
+    /** @var QueueWorker $queue_worker */
     $queue_worker = \Drupal::service('simple_sitemap.queue_worker');
     $generation_in_progress = $queue_worker->generationInProgress();

@@ @@
         $state->set('simple_sitemap.last_cron_generate', $request_time);
       }

-      /** @var \Drupal\simple_sitemap\Manager\Generator $generator */
+      /** @var Generator $generator */
       $generator = \Drupal::service('simple_sitemap.generator');
       $generator->generate(QueueWorker::GENERATE_TYPE_CRON);
     }
@@ @@
  */
 function simple_sitemap_configurable_language_delete(ConfigurableLanguageInterface $language) {

-  /** @var \Drupal\simple_sitemap\Settings $settings */
+  /** @var Settings $settings */
   $settings = \Drupal::service('simple_sitemap.settings');

   $excluded_languages = $settings->get('excluded_languages', []);
@@ @@
  */
 function simple_sitemap_entity_delete(EntityInterface $entity) {

-  /** @var \Drupal\simple_sitemap\Entity\EntityHelper $entity_helper */
+  /** @var EntityHelper $entity_helper */
   $entity_helper = \Drupal::service('simple_sitemap.entity_helper');
   if ($entity_helper->supports($entity->getEntityType())) {

-    /** @var \Drupal\simple_sitemap\Manager\Generator $generator */
+    /** @var Generator $generator */
     $generator = \Drupal::service('simple_sitemap.generator');
     $generator->setVariants()->entityManager()->removeEntityInstanceSettings(
       $entity->getEntityTypeId(), $entity->id()
@@ @@
  *
  * Removes settings of the removed bundle.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function simple_sitemap_entity_bundle_delete($entity_type_id, $bundle) {

-  /** @var \Drupal\simple_sitemap\Manager\Generator $generator */
+  /** @var Generator $generator */
   $generator = \Drupal::service('simple_sitemap.generator');
   $generator->setVariants()->entityManager()->removeBundleSettings($entity_type_id, $bundle);
 }
@@ @@
  *
  * Removes settings for the removed menu.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function simple_sitemap_menu_delete(MenuInterface $menu) {

-  /** @var \Drupal\simple_sitemap\Manager\Generator $generator */
+  /** @var Generator $generator */
   $generator = \Drupal::service('simple_sitemap.generator');
   $generator->setVariants()->entityManager()->removeBundleSettings('menu_link_content', $menu->id());
 }
@@ @@
 function simple_sitemap_page_attachments_alter(array &$attachments) {
   if (!empty($attachments['#attached']['html_head_link'])) {

-    /** @var \Drupal\simple_sitemap\Settings $settings */
+    /** @var Settings $settings */
     $settings = \Drupal::service('simple_sitemap.settings');

     if ($settings->get('disable_language_hreflang')) {
@@ @@
 function simple_sitemap_entity_extra_field_info() {
   $extra = [];

-  /** @var \Drupal\simple_sitemap\Entity\EntityHelper $entity_helper */
+  /** @var EntityHelper $entity_helper */
   $entity_helper = \Drupal::service('simple_sitemap.entity_helper');

-  /** @var \Drupal\simple_sitemap\Manager\EntityManager $entity_manager */
+  /** @var EntityManager $entity_manager */
   $entity_manager = \Drupal::service('simple_sitemap.entity_manager');

   foreach ($entity_helper->getSupportedEntityTypes() as $entity_type_id => $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


48) modules/contrib/simple_sitemap/simple_sitemap.drush.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\simple_sitemap\Manager\Generator;
 /**
  * @file
  * Drush (< 9) integration.
@@ @@
  * Regenerate the XML sitemaps according to the module settings.
  */
 function drush_simple_sitemap_generate() {
-  /** @var \Drupal\simple_sitemap\Manager\Generator $generator */
+  /** @var Generator $generator */
   $generator = \Drupal::service('simple_sitemap.generator');
   $generator->generate(QueueWorker::GENERATE_TYPE_DRUSH);
 }
@@ @@
  * Rebuild the sitemap queue for all sitemaps.
  */
 function drush_simple_sitemap_rebuild_queue() {
-  /** @var \Drupal\simple_sitemap\Manager\Generator $generator */
+  /** @var Generator $generator */
   $generator = \Drupal::service('simple_sitemap.generator');
   $generator->rebuildQueue();
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


49) modules/contrib/simple_sitemap/simple_sitemap.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\simple_sitemap\Entity\SimpleSitemapInterface;
 /**
  * @file
  * Hooks provided by the Simple XML Sitemap module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alter the generated link data before the sitemap is saved.
  *
@@ @@
  *
  * @param array &$links
  *   Array containing multilingual links generated for each path to be indexed.
- * @param \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap
+ * @param SimpleSitemapInterface $sitemap
  *   Sitemap entity.
  */
-function hook_simple_sitemap_links_alter(array &$links, \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap) {
+function hook_simple_sitemap_links_alter(array &$links, SimpleSitemapInterface $sitemap) {

   // Remove German URL for a certain path in the hreflang sitemap.
   foreach ($links as $key => $link) {
@@ @@
  *
  * @param array &$arbitrary_links
  *   An array of arbitrary links.
- * @param \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap
+ * @param SimpleSitemapInterface $sitemap
  *   Sitemap entity.
  */
-function hook_simple_sitemap_arbitrary_links_alter(array &$arbitrary_links, \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap) {
+function hook_simple_sitemap_arbitrary_links_alter(array &$arbitrary_links, SimpleSitemapInterface $sitemap) {

   // Add an arbitrary link to all sitemaps.
   $arbitrary_links[] = [
@@ @@
  *
  * @param array &$attributes
  *   An array of attributes.
- * @param \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap
+ * @param SimpleSitemapInterface $sitemap
  *   Sitemap entity.
  */
-function hook_simple_sitemap_attributes_alter(array &$attributes, \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap) {
+function hook_simple_sitemap_attributes_alter(array &$attributes, SimpleSitemapInterface $sitemap) {

   // Remove the xhtml attribute e.g. if no xhtml sitemap elements are present.
   unset($attributes['xmlns:xhtml']);
@@ @@
  *
  * @param array &$index_attributes
  *   An array of attributes.
- * @param \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap
+ * @param SimpleSitemapInterface $sitemap
  *   Sitemap entity.
  */
-function hook_simple_sitemap_index_attributes_alter(array &$index_attributes, \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap) {
+function hook_simple_sitemap_index_attributes_alter(array &$index_attributes, SimpleSitemapInterface $sitemap) {

   // Add some attribute to the sitemap index.
   $index_attributes['name'] = 'value';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


50) modules/contrib/simple_sitemap/modules/simple_sitemap_views/tests/src/Functional/SimpleSitemapViewsTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_sitemap_views\Functional;

+use Drupal\Core\CronInterface;
+use Drupal\views\ViewExecutable;
 use Drupal\simple_sitemap\Entity\SimpleSitemapType;
 use Drupal\Tests\simple_sitemap\Functional\SimplesitemapTestBase;
 use Drupal\simple_sitemap_views\SimpleSitemapViews;
@@ @@
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;

@@ @@
   /**
    * The cron service.
    *
-   * @var \Drupal\Core\CronInterface
+   * @var CronInterface
    */
   protected $cron;

@@ @@
   /**
    * Test view.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $testView;

@@ @@
   /**
    * Test view 2.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $testView2;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/SimpleSitemapViews.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_views;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\simple_sitemap\Entity\SimpleSitemapInterface;
 use Drupal\simple_sitemap\Entity\SimpleSitemap;
 use Drupal\simple_sitemap_views\Plugin\views\display_extender\SimpleSitemapDisplayExtender;
 use Drupal\Core\Database\Query\ConditionInterface;
@@ @@
   /**
    * View entities storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $viewStorage;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The current active database's master connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * SimpleSitemapViews constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The current active database's master connection.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
@@ @@
   /**
    * Gets the display extender.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string|null $display_id
    *   The display id. If empty uses the current display.
    *
-   * @return \Drupal\simple_sitemap_views\Plugin\views\display_extender\SimpleSitemapDisplayExtender|null
+   * @return SimpleSitemapDisplayExtender|null
    *   The display extender.
    */
   public function getDisplayExtender(ViewExecutable $view, ?string $display_id = NULL): ?SimpleSitemapDisplayExtender {
@@ @@
   /**
    * Gets the sitemap settings for view display.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string $variant
    *   The ID of the sitemap.
@@ @@
   /**
    * Gets the indexable arguments for view display.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string $variant
    *   The ID of the sitemap.
@@ @@
   /**
    * Adds view arguments to the index.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param array $args
    *   Array of arguments to add to the index.
@@ @@
   /**
    * Adds view arguments to the index by the sitemap variant.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string $variant
    *   The ID of the sitemap.
@@ @@
   /**
    * Get arguments from index.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface|null $condition
+   * @param ConditionInterface|null $condition
    *   The query conditions.
    * @param int|null $limit
    *   The number of records to return from the result set. If NULL, returns
@@ @@
   /**
    * Get the number of rows in the index.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface|null $condition
+   * @param ConditionInterface|null $condition
    *   The query conditions.
    *
    * @return int
@@ @@
    *
    * @param int $position
    *   Position of the record.
-   * @param \Drupal\Core\Database\Query\ConditionInterface|null $condition
+   * @param ConditionInterface|null $condition
    *   The query conditions.
    *
    * @return int|bool
@@ @@
   /**
    * Remove arguments from index.
    *
-   * @param \Drupal\Core\Database\Query\ConditionInterface|null $condition
+   * @param ConditionInterface|null $condition
    *   The query conditions.
    */
   public function removeArgumentsFromIndex(?ConditionInterface $condition = NULL): void {
@@ @@
   /**
    * Returns an array of view displays that use the route.
    *
-   * @param \Drupal\views\ViewEntityInterface $view_entity
+   * @param ViewEntityInterface $view_entity
    *   The config entity in which the view is stored.
    *
    * @return array
@@ @@
   /**
    * Returns an array of executable views whose current display is indexable.
    *
-   * @return \Drupal\views\ViewExecutable[]
+   * @return ViewExecutable[]
    *   An array of ViewExecutable instances.
    */
   public function getIndexableViews(): array {
@@ @@
     }

     $indexable_views = [];
-    /** @var \Drupal\views\ViewEntityInterface $view_entity */
+    /** @var ViewEntityInterface $view_entity */
     foreach ($this->viewStorage->loadMultiple($view_ids) as $view_entity) {
       foreach ($this->getRouterDisplayIds($view_entity) as $display_id) {
         $view = Views::executableFactory()->get($view_entity);
@@ @@
   /**
    * Returns an array of indexable sitemaps for view display.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   A view executable instance.
    * @param string|null $display_id
    *   The display id. If empty uses the current display.
    *
-   * @return \Drupal\simple_sitemap\Entity\SimpleSitemapInterface[]
+   * @return SimpleSitemapInterface[]
    *   An array of sitemap entities.
    */
   public function getIndexableSitemaps(ViewExecutable $view, ?string $display_id = NULL): array {
@@ @@
   /**
    * Returns an array of correctly configured sitemaps.
    *
-   * @return \Drupal\simple_sitemap\Entity\SimpleSitemapInterface[]
+   * @return SimpleSitemapInterface[]
    *   An array of sitemap entities.
    */
   public function getSitemaps(): array {
     $sitemaps = SimpleSitemap::loadMultiple();

-    /** @var \Drupal\simple_sitemap\Entity\SimpleSitemapInterface $sitemap */
+    /** @var SimpleSitemapInterface $sitemap */
     foreach ($sitemaps as $variant => $sitemap) {
       if (!$sitemap->getType()->hasUrlGenerator('views')) {
         unset($sitemaps[$variant]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


52) modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Plugin/views/display_extender/SimpleSitemapDisplayExtender.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_views\Plugin\views\display_extender;

+use Drupal\simple_sitemap\Entity\SimpleSitemapInterface;
+use Drupal\views\Plugin\views\argument\ArgumentPluginBase;
 use Drupal\views\Plugin\views\display_extender\DisplayExtenderPluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\views\Plugin\views\display\DisplayRouterInterface;
@@ @@
   /**
    * Helper class for working with forms.
    *
-   * @var \Drupal\simple_sitemap\Form\FormHelper
+   * @var FormHelper
    */
   protected $formHelper;

@@ @@
   /**
    * The sitemaps.
    *
-   * @var \Drupal\simple_sitemap\Entity\SimpleSitemapInterface[]
+   * @var SimpleSitemapInterface[]
    */
   protected $sitemaps = [];

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
+   * @param FormHelper $form_helper
    *   Helper class for working with forms.
-   * @param \Drupal\simple_sitemap_views\SimpleSitemapViews $sitemap_views
+   * @param SimpleSitemapViews $sitemap_views
    *   Views sitemap data.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FormHelper $form_helper, SimpleSitemapViews $sitemap_views) {
@@ @@
     $arguments = $this->displayHandler->getHandlers('argument');
     $arguments_options = [];

-    /** @var \Drupal\views\Plugin\views\argument\ArgumentPluginBase $argument */
+    /** @var ArgumentPluginBase $argument */
     foreach ($arguments as $id => $argument) {
       $arguments_options[$id] = $argument->adminLabel();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Plugin/simple_sitemap/UrlGenerator/ViewsUrlGenerator.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;

@@ @@
   /**
    * The route provider.
    *
-   * @var \Drupal\Core\Routing\RouteProviderInterface
+   * @var RouteProviderInterface
    */
   protected $routeProvider;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Logger $logger
    *   The simple_sitemap.logger service.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\simple_sitemap\Entity\EntityHelper $entity_helper
+   * @param EntityHelper $entity_helper
    *   The simple_sitemap.entity_helper service.
-   * @param \Drupal\simple_sitemap_views\SimpleSitemapViews $sitemap_views
+   * @param SimpleSitemapViews $sitemap_views
    *   Views sitemap data.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
    */
   public function __construct(
@@ @@
   /**
    * Clears the URL from parameters that are not present in the arguments.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL object.
    * @param array $args
    *   Array of arguments.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Plugin/QueueWorker/GarbageCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_views\Plugin\QueueWorker;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\views\ViewEntityInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\simple_sitemap_views\SimpleSitemapViews;
@@ @@
   /**
    * View entities storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $viewStorage;

@@ @@
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\simple_sitemap_views\SimpleSitemapViews $sitemap_views
+   * @param SimpleSitemapViews $sitemap_views
    *   Views sitemap data.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, SimpleSitemapViews $sitemap_views) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
    */
   public function processItem($data) {
     $view_id = $data['view_id'];
-    /** @var \Drupal\views\ViewEntityInterface $view_entity */
+    /** @var ViewEntityInterface $view_entity */
     $view_entity = $this->viewStorage->load($view_id);
     $display_ids = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/EventSubscriber/ArgumentCollector.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_views\EventSubscriber;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
+use Drupal\views\ViewEntityInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;
 use Drupal\simple_sitemap_views\SimpleSitemapViews;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
@@ @@
   /**
    * View entities storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $viewStorage;

@@ @@
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;

@@ @@
   /**
    * The currently active route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * ArgumentCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\simple_sitemap_views\SimpleSitemapViews $sitemap_views
+   * @param SimpleSitemapViews $sitemap_views
    *   Views sitemap data.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The currently active route match object.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, SimpleSitemapViews $sitemap_views, RouteMatchInterface $route_match) {
@@ @@
   /**
    * Collect information about views arguments.
    *
-   * @param \Symfony\Component\HttpKernel\Event\PostResponseEvent $event
+   * @param TerminateEvent $event
    *   Object of event after a response was sent.
    */
-  public function onTerminate(PostResponseEvent $event) {
+  public function onTerminate(TerminateEvent $event) {
     // Only successful requests are interesting.
     // Collect information about arguments only if views support is enabled.
     if (!$event->getResponse()->isSuccessful() || !$this->sitemapViews->isEnabled()) {
@@ @@
     }

     $view_id = $this->routeMatch->getParameter('view_id');
-    /** @var \Drupal\views\ViewEntityInterface $view_entity */
+    /** @var ViewEntityInterface $view_entity */
     if ($view_id && $view_entity = $this->viewStorage->load($view_id)) {
       $display_id = $this->routeMatch->getParameter('display_id');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


56) modules/contrib/simple_sitemap/modules/simple_sitemap_views/src/Controller/SimpleSitemapViewsController.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Views sitemap data.
    *
-   * @var \Drupal\simple_sitemap_views\SimpleSitemapViews
+   * @var SimpleSitemapViews
    */
   protected $sitemapViews;

@@ @@
   /**
    * SimpleSitemapViewsController constructor.
    *
-   * @param \Drupal\simple_sitemap_views\SimpleSitemapViews $sitemap_views
+   * @param SimpleSitemapViews $sitemap_views
    *   Views sitemap data.
    */
   public function __construct(SimpleSitemapViews $sitemap_views) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/simple_sitemap/modules/simple_sitemap_views/simple_sitemap_views.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\simple_sitemap_views\SimpleSitemapViews;
 /**
  * @file
  * Contains simple_sitemap_views.module.
  */
-
 /**
  * Implements hook_cron().
  */
 function simple_sitemap_views_cron() {
   // Create tasks in the garbage collection queue.
-  /** @var \Drupal\simple_sitemap_views\SimpleSitemapViews $simple_sitemap_views */
+  /** @var SimpleSitemapViews $simple_sitemap_views */
   $simple_sitemap_views = \Drupal::service('simple_sitemap.views');
   $simple_sitemap_views->executeGarbageCollection();
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


58) modules/contrib/simple_sitemap/modules/simple_sitemap_views/simple_sitemap_views.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\simple_sitemap_views\SimpleSitemapViews;
 /**
  * @file
  * Install and uninstall hooks for the simple_sitemap_views module.
@@ @@
  */
 function simple_sitemap_views_install() {
   // Enable views display extender plugin.
-  /** @var \Drupal\simple_sitemap_views\SimpleSitemapViews $simple_sitemap_views */
+  /** @var SimpleSitemapViews $simple_sitemap_views */
   $simple_sitemap_views = \Drupal::service('simple_sitemap.views');
   $simple_sitemap_views->enable();
   \Drupal::messenger()->addWarning(t('In order to use the Simple XML Sitemap Views module, the Views URL generator must be <a href="@url">added</a> to a sitemap type.', ['@url' => $GLOBALS['base_url'] . '/admin/config/search/simplesitemap/types']));
@@ @@
  */
 function simple_sitemap_views_uninstall() {
   // Disable views display extender plugin.
-  /** @var \Drupal\simple_sitemap_views\SimpleSitemapViews $simple_sitemap_views */
+  /** @var SimpleSitemapViews $simple_sitemap_views */
   $simple_sitemap_views = \Drupal::service('simple_sitemap.views');
   $simple_sitemap_views->disable();
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


59) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Submitter/SubmitterBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_engines\Submitter;

+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\State\StateInterface;
@@ @@
   /**
    * The HTTP Client service.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * Simple XML Sitemap logger.
    *
-   * @var \Drupal\simple_sitemap\Logger
+   * @var Logger
    */
   protected $logger;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * SitemapSubmitter constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The client used to submit to engines.
-   * @param \Drupal\simple_sitemap\Logger $logger
+   * @param Logger $logger
    *   Sitemap logger.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   Drupal state service for last submitted.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ClientInterface $http_client,
@@ @@
    * @return bool
    *   TRUE on success and FALSE on failure.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   protected function request(string $url): bool {
     $this->url = $url;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


60) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Submitter/SitemapSubmitter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_engines\Submitter;

+use Drupal\Core\Entity\EntityMalformedException;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\simple_sitemap\Entity\SimpleSitemap;
 use Drupal\simple_sitemap_engines\Entity\SimpleSitemapEngine;

@@ @@
    * @param string $engine_id
    *   ID of search engine to be submitted to.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws EntityMalformedException
+   * @throws GuzzleException
    */
   public function process(string $engine_id) {
     $this->engineId = $engine_id;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Submitter/IndexNowSubmitter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_engines\Submitter;

+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Entity\EntityMalformedException;
+use GuzzleHttp\Exception\GuzzleException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\SynchronizableInterface;
 use Drupal\Core\Site\Settings;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * The entity.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $entity;

@@ @@
   /**
    * The search IndexNow capable search engine entity.
    *
-   * @var \Drupal\simple_sitemap_engines\Entity\SimpleSitemapEngine|false
+   * @var SimpleSitemapEngine|false
    */
   protected $engine;

@@ @@
   /**
    * Gets search engine entity.
    *
-   * @return \Drupal\simple_sitemap_engines\Entity\SimpleSitemapEngine|false
+   * @return SimpleSitemapEngine|false
    *   The search engine entity.
    */
   protected function getEngine() {
@@ @@
   /**
    * Submit entity URL if it is set to be submitted.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to submit.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws EntityMalformedException
+   * @throws GuzzleException
    */
   public function submitIfSubmittable(EntityInterface $entity) {
     if ($this->config->get('simple_sitemap_engines.settings')->get('index_now_enabled')) {
@@ @@
   /**
    * Submit entity URL.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to submit.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws EntityMalformedException
+   * @throws GuzzleException
    */
   public function submit(EntityInterface $entity): void {
     $this->entity = $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/SearchEngineListBuilder.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The state key/value store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * SearchEngineListBuilder constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct(EntityTypeInterface $entity_type,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Plugin/QueueWorker/SitemapSubmittingWorker.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The sitemap_submitter service.
    *
-   * @var \Drupal\simple_sitemap_engines\Submitter\SitemapSubmitter
+   * @var SitemapSubmitter
    */
   protected $sitemapSubmitter;

@@ @@
    *   The plugin id.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\simple_sitemap_engines\Submitter\SitemapSubmitter $sitemap_submitter
+   * @param SitemapSubmitter $sitemap_submitter
    *   Sitemap submitter service.
    */
   public function __construct(array $configuration,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/PathProcessor/IndexNowPathProcessor.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Sitemap submitting service.
    *
-   * @var \Drupal\simple_sitemap_engines\Submitter\IndexNowSubmitter
+   * @var IndexNowSubmitter
    */
   protected $submitter;

@@ @@
   /**
    * IndexNowPathProcessor constructor.
    *
-   * @param \Drupal\simple_sitemap_engines\Submitter\IndexNowSubmitter $submitter
+   * @param IndexNowSubmitter $submitter
    *   Sitemap submitting service.
    */
   public function __construct(IndexNowSubmitter $submitter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


65) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Form/SimplesitemapEnginesForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_sitemap_engines\Form;

+use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * SimplesitemapEnginesForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(ConfigFactoryInterface $config_factory,
@@ @@
    * @param string $type
    *   The message's type.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The status message.
    */
   public static function getKeyStatusMessage(string $type): TranslatableMarkup {
@@ @@
   public static function generateKey(): void {
     \Drupal::messenger()->deleteByType(MessengerInterface::TYPE_WARNING);

-    /** @var \Drupal\Component\Uuid\UuidInterface $uuid */
+    /** @var UuidInterface $uuid */
     $uuid = \Drupal::service('uuid');
     \Drupal::state()->set('simple_sitemap_engines.index_now.key', $uuid->generate());
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Form/Handler/EntityFormHandlerBase.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * EntityFormHandlerBase constructor.
    *
-   * @param \Drupal\simple_sitemap\Manager\Generator $generator
+   * @param Generator $generator
    *   The sitemap generator service.
-   * @param \Drupal\simple_sitemap\Entity\EntityHelper $entity_helper
+   * @param EntityHelper $entity_helper
    *   Helper class for working with entities.
-   * @param \Drupal\simple_sitemap\Form\FormHelper $form_helper
+   * @param FormHelper $form_helper
    *   Helper class for working with forms.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(Generator $generator, EntityHelper $entity_helper, FormHelper $form_helper, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Form/FormHelper.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * FormHelper constructor.
    *
-   * @param \Drupal\simple_sitemap\Manager\Generator $generator
+   * @param Generator $generator
    *   The sitemap generator service.
-   * @param \Drupal\simple_sitemap\Settings $settings
+   * @param Settings $settings
    *   The simple_sitemap.settings service.
-   * @param \Drupal\simple_sitemap\Entity\EntityHelper $entity_helper
+   * @param EntityHelper $entity_helper
    *   Helper class for working with entities.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Proxy for the current user account.
-   * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
+   * @param ClassResolverInterface $class_resolver
    *   The class resolver.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see \Drupal\simple_sitemap\Form\EntityBundlesForm
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


68) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/src/Controller/IndexNowController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Sitemap submitting service.
    *
-   * @var \Drupal\simple_sitemap_engines\Submitter\IndexNowSubmitter
+   * @var IndexNowSubmitter
    */
   protected $submitter;

@@ @@
   /**
    * IndexNowController constructor.
    *
-   * @param \Drupal\simple_sitemap_engines\Submitter\IndexNowSubmitter $submitter
+   * @param IndexNowSubmitter $submitter
    *   Sitemap submitting service.
    */
   public function __construct(IndexNowSubmitter $submitter) {
@@ @@
   /**
    * Return dynamically created text file content.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The incoming request object.
    * @param string|null $key
    *   The IndexNow key from the request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   A response object.
    */
   public function getKeyFile(Request $request, ?string $key): Response {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


69) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/simple_sitemap_engines.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\simple_sitemap_engines\Form\FormHelper;
+use Drupal\simple_sitemap_engines\Submitter\IndexNowSubmitter;
 /**
  * @file
  * Main module file containing hooks.
@@ @@
  * Implements hook_form_alter().
  */
 function simple_sitemap_engines_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\simple_sitemap_engines\Form\FormHelper $form_helper */
+  /** @var FormHelper $form_helper */
   $form_helper = \Drupal::service('simple_sitemap.engines.form_helper');
   $form_helper->formAlter($form, $form_state);
 }
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function simple_sitemap_engines_form_simple_sitemap_entity_bundles_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\simple_sitemap_engines\Form\FormHelper $form_helper */
+  /** @var FormHelper $form_helper */
   $form_helper = \Drupal::service('simple_sitemap.engines.form_helper');
   $form_helper->entityBundlesFormAlter($form);
 }
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function simple_sitemap_engines_form_simple_sitemap_entities_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\simple_sitemap_engines\Form\FormHelper $form_helper */
+  /** @var FormHelper $form_helper */
   $form_helper = \Drupal::service('simple_sitemap.engines.form_helper');
   $form_helper->entitiesFormAlter($form);
 }
@@ @@
  * Implements hook_entity_delete().
  */
 function simple_sitemap_engines_entity_delete(EntityInterface $entity) {
-  /** @var \Drupal\simple_sitemap_engines\Submitter\IndexNowSubmitter $submitter */
+  /** @var IndexNowSubmitter $submitter */
   $submitter = \Drupal::service('simple_sitemap.engines.index_now_submitter');
   $submitter->submitIfSubmittable($entity);
 }
@@ @@
  * Implements hook_entity_insert().
  */
 function simple_sitemap_engines_entity_insert(EntityInterface $entity) {
-  /** @var \Drupal\simple_sitemap_engines\Submitter\IndexNowSubmitter $submitter */
+  /** @var IndexNowSubmitter $submitter */
   $submitter = \Drupal::service('simple_sitemap.engines.index_now_submitter');
   $submitter->submitIfSubmittable($entity);
 }
@@ @@
  * Implements hook_entity_update().
  */
 function simple_sitemap_engines_entity_update(EntityInterface $entity) {
-  /** @var \Drupal\simple_sitemap_engines\Submitter\IndexNowSubmitter $submitter */
+  /** @var IndexNowSubmitter $submitter */
   $submitter = \Drupal::service('simple_sitemap.engines.index_now_submitter');
   $submitter->submitIfSubmittable($entity);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


70) modules/contrib/simple_sitemap/modules/simple_sitemap_engines/simple_sitemap_engines.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\simple_sitemap\Settings;
+use Drupal\simple_sitemap\Manager\EntityManager;
 /**
  * @file
  * Module install and update procedures.
@@ @@
     $bing->url = NULL;
     $bing->save();

-    /** @var \Drupal\simple_sitemap\Settings $settings */
+    /** @var Settings $settings */
     $settings = \Drupal::service('simple_sitemap.settings');

     if (!empty($default_variant = $settings->get('default_variant'))) {
       $config_factory = \Drupal::configFactory();

-      /** @var \Drupal\simple_sitemap\Manager\EntityManager $entity_manager */
+      /** @var EntityManager $entity_manager */
       $entity_manager = \Drupal::service('simple_sitemap.entity_manager');

       $all_bundle_settings = $entity_manager
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 70 files have been changed by Rector                                      

