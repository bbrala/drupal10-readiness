modules/contrib/taxonomy_menu/src/Controller/TaxonomyMenu.php
modules/contrib/taxonomy_menu/src/Controller/TaxonomyMenuListBuilder.php
modules/contrib/taxonomy_menu/src/Entity/TaxonomyMenu.php
modules/contrib/taxonomy_menu/src/Form/TaxonomyMenuForm.php
modules/contrib/taxonomy_menu/src/Plugin/Derivative/TaxonomyMenuMenuLink.php
modules/contrib/taxonomy_menu/src/Plugin/Menu/TaxonomyMenuMenuLink.php
modules/contrib/taxonomy_menu/src/TaxonomyMenuHelper.php
modules/contrib/taxonomy_menu/src/TaxonomyMenuInterface.php
modules/contrib/taxonomy_menu/taxonomy_menu.module
modules/contrib/taxonomy_menu/tests/src/Functional/TaxonomyMenuOperationsTest.php
modules/contrib/taxonomy_menu/tests/src/Unit/TaxonomyMenuTest.php

7 files with changes
====================

1) modules/contrib/taxonomy_menu/tests/src/Functional/TaxonomyMenuOperationsTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Set up for all tests.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create user with permission to create policy.
@@ @@
       'vid' => 'test_tax_vocab',
       'name' => 'Test',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Create logged in user.
     $perms = [
@@ @@
     $edit = [
       'name[0][value]' => 'test term 1',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->drupalGet('admin/structure/taxonomy/manage/test_tax_vocab/add');
     $edit = [
@@ @@
       'name[0][value]' => 'test term 1-A',
       'parent[]' => '1',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->drupalGet('admin/structure/taxonomy/manage/test_tax_vocab/add');
     $edit = [
       'name[0][value]' => 'test term 2',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Create a testing menu.
     $this->drupalGet('admin/structure/menu/add');
@@ @@
       'id' => 'test-menu',
       'label' => 'Test',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Create new taxonomy menu.
     $this->drupalGet('admin/structure/taxonomy_menu/add');
@@ @@
       'depth' => '1',
       'menu_parent' => 'test-menu:',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
   }

   /**
@@ @@
     $edit = [
       'name[0][value]' => 'test term 3',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->drupalGet('admin/structure/menu/manage/test-menu');
     // Check for it within the menu.
@@ @@
     // Delete a term.
     $this->drupalGet('taxonomy/term/3/delete');
     $edit = [];
-    $this->drupalPostForm(NULL, $edit, t('Delete'));
+    $this->submitForm($edit, t('Delete'));

     // Check for it within the menu.
     // We should not expect to see enabled field for taxonomy term 3
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/taxonomy_menu/src/TaxonomyMenuInterface.php:66

    ---------- begin diff ----------
@@ @@
   /**
    * Generates a menu link id for the taxonomy term.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   Term to build menu item for.
    * @param bool $include_base_plugin_id
    *   Include base plugin id in menu item id.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/taxonomy_menu/src/TaxonomyMenuHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\taxonomy_menu;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Menu\MenuLinkManagerInterface;
 use Drupal\taxonomy\TermInterface;
@@ @@
   /**
    * Taxonomy Menu storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $menuStorage;

@@ @@
   /**
    * Menu Link Manager.
    *
-   * @var \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @var MenuLinkManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Menu\MenuLinkManagerInterface $manager
+   * @param MenuLinkManagerInterface $manager
    *   The menu link manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, MenuLinkManagerInterface $manager) {
@@ @@
    * @param string $vid
    *   The vocabulary id.
    *
-   * @return \Drupal\taxonomy_menu\TaxonomyMenuInterface[]
+   * @return TaxonomyMenuInterface[]
    *   The Taxonomy Menu
    */
   public function getTermMenusByVocabulary($vid) {
@@ @@
   /**
    * Create menu entries associate with the vocabulary of this term.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   Term.
    * @param bool $rebuild_all
    *   Rebuild all.
@@ @@
   /**
    * Update menu entries associate with the vocabulary of this term.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   Term.
    * @param bool $rebuild_all
    *   Rebuild all.
@@ @@
   /**
    * Remove menu entries associate with the vocabulary of this term.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   Term.
    * @param bool $rebuild_all
    *   Whether to rebuild all links or not.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/taxonomy_menu/src/Plugin/Menu/TaxonomyMenuMenuLink.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\taxonomy_menu\Plugin\Menu;

+use Drupal\taxonomy\Entity\Term;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Menu\MenuLinkBase;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The static menu link service used to store updates to weight/parent etc.
    *
-   * @var \Drupal\Core\Menu\StaticMenuLinkOverridesInterface
+   * @var StaticMenuLinkOverridesInterface
    */
   protected $staticOverride;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Menu\StaticMenuLinkOverridesInterface $static_override
+   * @param StaticMenuLinkOverridesInterface $static_override
    *   The static menu override.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(
@@ @@
    * {@inheritdoc}
    */
   public function getTitle() {
-    /** @var \Drupal\taxonomy\Entity\Term. $link */
+    /** @var Term . $link */
     $link = $this->entityTypeManager->getStorage('taxonomy_term')
       ->load($this->pluginDefinition['metadata']['taxonomy_term_id']);

@@ @@
    * {@inheritdoc}
    */
   public function getDescription() {
-    /** @var \Drupal\taxonomy\Entity\Term. $link */
+    /** @var Term . $link */
     $link = $this->entityTypeManager->getStorage('taxonomy_term')
       ->load($this->pluginDefinition['metadata']['taxonomy_term_id']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/taxonomy_menu/src/Plugin/Derivative/TaxonomyMenuMenuLink.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The taxonomy menu storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $taxonomyMenuStorage;

@@ @@
   /**
    * Sets up the storage handler.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $taxonomy_menu_storage
+   * @param EntityStorageInterface $taxonomy_menu_storage
    *   The taxonomy menu storage.
    */
   public function __construct(EntityStorageInterface $taxonomy_menu_storage) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/taxonomy_menu/src/Form/TaxonomyMenuForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\taxonomy_menu\Form;

+use Drupal\taxonomy_menu\Entity\TaxonomyMenu;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\system\Entity\Menu;
@@ @@
   /**
    * The menu parent form selector.
    *
-   * @var \Drupal\Core\Menu\MenuParentFormSelector
+   * @var MenuParentFormSelector
    */
   protected $menuParentSelector;

@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs a new TaxonomyMenuMenuLink.
    *
-   * @param \Drupal\Core\Menu\MenuParentFormSelector $menu_parent_selector
+   * @param MenuParentFormSelector $menu_parent_selector
    *   The menu parent selector.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
+   * @param EntityFieldManager $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(MenuParentFormSelector $menu_parent_selector, EntityFieldManager $entity_field_manager) {
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\taxonomy_menu\Entity\TaxonomyMenu $taxonomy_menu */
+    /** @var TaxonomyMenu $taxonomy_menu */
     $taxonomy_menu = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/taxonomy_menu/src/Entity/TaxonomyMenu.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\taxonomy_menu\Entity;

+use Drupal\Core\Menu\MenuLinkManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\taxonomy\Entity\Term;
@@ @@
   /**
    * Get the Menu Link Manager.
    *
-   * @return \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @return MenuLinkManagerInterface
    *   The Menu Link Manager Service
    */
   protected function getMenuLinkManager() {
@@ @@
   /**
    * Generate a menu link plugin definition for a taxonomy term.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   The taxonomy term for which to build a menu link render array.
    * @param array $base_plugin_definition
    *   The base plugin definition to merge the link with.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

