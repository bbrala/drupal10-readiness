modules/contrib/one_time_password/one_time_password.install
modules/contrib/one_time_password/one_time_password.module
modules/contrib/one_time_password/src/Exception/MissingProvisioningUriException.php
modules/contrib/one_time_password/src/Form/PasswordSetupForm.php
modules/contrib/one_time_password/src/Plugin/Field/FieldType/ProvisioningUriItem.php
modules/contrib/one_time_password/src/Plugin/Field/FieldType/ProvisioningUriItemList.php
modules/contrib/one_time_password/src/UserFieldAttach.php
modules/contrib/one_time_password/src/UserLoginEnforce.php
modules/contrib/one_time_password/tests/src/Functional/InstallationTest.php
modules/contrib/one_time_password/tests/src/Functional/PasswordSetupFormTest.php
modules/contrib/one_time_password/tests/src/Functional/UserLoginEnforceTest.php
modules/contrib/one_time_password/tests/src/Kernel/ProvisioningUriItemTest.php
modules/contrib/one_time_password/tests/src/Kernel/UserFieldAttachTest.php

7 files with changes
====================

1) modules/contrib/one_time_password/tests/src/Kernel/UserFieldAttachTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * A test user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installSchema('system', 'sequences');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/one_time_password/tests/src/Kernel/ProvisioningUriItemTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * A test entity.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $entity;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/one_time_password/tests/src/Functional/UserLoginEnforceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\one_time_password\Functional;

+use OTPHP\TOTP;
 use Drupal\Tests\user\Traits\UserCreationTrait;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   public function testLoginWindow() {
     $test_user_with_tfa = $this->createUser();
     $test_user_with_tfa->one_time_password->regenerateOneTimePassword();
-    /** @var \OTPHP\TOTP $otp_object */
+    /** @var TOTP $otp_object */
     $otp_object = $test_user_with_tfa->one_time_password->getOneTimePassword();
     $test_user_with_tfa->save();

@@ @@
     // Login 6 times incorrectly to trigger a flood warning from core as well
     // as the OTP threshold.
     foreach (range(0, 5) as $i) {
-      $this->drupalPostForm('user/login', [
+      $this->drupalGet('user/login');
+      $this->submitForm([
         'name' => $tfa_user->getAccountName(),
         'pass' => 'incorrect password',
       ], 'Log in');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/one_time_password/src/UserLoginEnforce.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\one_time_password;

+use Drupal\Core\Flood\FloodInterface;
+use OTPHP\TOTP;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\user\Entity\User;
@@ @@
       return;
     }

-    /** @var \Drupal\Core\Flood\FloodInterface $flood */
+    /** @var FloodInterface $flood */
     $flood = \Drupal::service('flood');
     $ip_address = \Drupal::requestStack()->getCurrentRequest()->getClientIp();

@@ @@
     // before this validation, so this is not a bruteforce vector. We only see
     // this message if the user has successfully validated their password and
     // have not tripped a flood threshold.
-    /** @var \OTPHP\TOTP $one_time_pass */
+    /** @var TOTP $one_time_pass */
     $one_time_pass = $user->one_time_password->getOneTimePassword();
     $user_provided_code = $form_state->getValue('one_time_password');
     if (empty($user_provided_code) || !$one_time_pass->verify($user_provided_code, NULL, 10)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/one_time_password/src/UserFieldAttach.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The entity definition update manager.
    *
-   * @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface
+   * @var EntityDefinitionUpdateManagerInterface
    */
   protected $entityDefinitionUpdateManager;

@@ @@
   /**
    * Get the base field definition for the one time password field.
    *
-   * @return \Drupal\Core\Field\BaseFieldDefinition
+   * @return BaseFieldDefinition
    *   A base field definition for the one time password field.
    */
   protected function getBaseFieldDefinition() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/one_time_password/src/Plugin/Field/FieldType/ProvisioningUriItemList.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\one_time_password\Plugin\Field\FieldType;

+use OTPHP\OTPInterface;
 use Drupal\Core\Field\FieldItemList;
 use Drupal\one_time_password\Exception\MissingProvisioningUriException;
 use OTPHP\TOTP;
@@ @@
   /**
    * Numerically indexed array of field items.
    *
-   * @var \Drupal\one_time_password\Plugin\Field\FieldType\ProvisioningUriItem[]
+   * @var ProvisioningUriItem[]
    */
   protected $list = [];

@@ @@
   /**
    * Get the one time password object for the field item list.
    *
-   * @return \OTPHP\OTPInterface
+   * @return OTPInterface
    *   The one time password object.
    *
-   * @throws \Drupal\one_time_password\Exception\MissingProvisioningUriException
+   * @throws MissingProvisioningUriException
    *   Throws an exception if there is no items to build the password object.
    */
   public function getOneTimePassword() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/one_time_password/src/Plugin/Field/FieldType/ProvisioningUriItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\one_time_password\Plugin\Field\FieldType;

+use OTPHP\TOTPInterface;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\TypedData\DataDefinition;
@@ @@
   /**
    * Get the one time password object.
    *
-   * @return \OTPHP\TOTPInterface
+   * @return TOTPInterface
    *   The one time password object.
    *
-   * @throws \Drupal\one_time_password\Exception\MissingProvisioningUriException
+   * @throws MissingProvisioningUriException
    *   If the field URI property is empty, an exception is thrown.
    */
   public function getOneTimePassword() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

