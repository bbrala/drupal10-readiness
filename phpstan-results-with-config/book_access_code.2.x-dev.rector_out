modules/contrib/book_access_code/book_access_code.module
modules/contrib/book_access_code/src/AccessCodeAccessControlHandler.php
modules/contrib/book_access_code/src/AccessCodeListBuilder.php
modules/contrib/book_access_code/src/BookAccessCodeManager.php
modules/contrib/book_access_code/src/BookAccessCodeManagerInterface.php
modules/contrib/book_access_code/src/BookAccessSession.php
modules/contrib/book_access_code/src/BookAccessSessionInterface.php
modules/contrib/book_access_code/src/Entity/AccessCode.php
modules/contrib/book_access_code/src/Entity/AccessCodeInterface.php
modules/contrib/book_access_code/src/Entity/AccessCodeViewsData.php
modules/contrib/book_access_code/src/EventSubscriber/KernelEventsSubscriber.php
modules/contrib/book_access_code/src/Form/AccessCodeDeleteForm.php
modules/contrib/book_access_code/src/Form/AccessCodeForm.php
modules/contrib/book_access_code/src/Form/BookAccessCodeForm.php
modules/contrib/book_access_code/src/Form/BookAccessCodeSettingsForm.php
modules/contrib/book_access_code/tests/src/Functional/LoadTest.php

10 files with changes
=====================

1) modules/contrib/book_access_code/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\book_access_code\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/book_access_code/src/Form/BookAccessCodeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\book_access_code\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\book_access_code\BookAccessCodeManagerInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * Drupal\book_access_code\BookAccessCodeManagerInterface definition.
    *
-   * @var \Drupal\book_access_code\BookAccessCodeManagerInterface
+   * @var BookAccessCodeManagerInterface
    */
   protected $bookAccessCodeManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * BookAccessCodeForm constructor.
    *
-   * @param \Drupal\book_access_code\BookAccessCodeManagerInterface $bookAccessCodeManager
+   * @param BookAccessCodeManagerInterface $bookAccessCodeManager
    *   The book access code manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(BookAccessCodeManagerInterface $bookAccessCodeManager, EntityTypeManagerInterface $entityTypeManager) {
@@ @@
    * @return string
    *   The book access code title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @see book_access_code.routing.yml
    */
@@ @@
    * @return string
    *   The book title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function bookTitle(): string {
     if (!isset($this->bookTitle)) {
@@ @@
   /**
    * Determines if we can access this form by checking for valid query params.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/book_access_code/src/Form/AccessCodeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\book_access_code\Form;

+use Drupal\book_access_code\Entity\AccessCodeInterface;
 use Drupal\book\BookManagerInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
@@ @@
   /**
    * BookManager service.
    *
-   * @var \Drupal\book\BookManagerInterface
+   * @var BookManagerInterface
    */
   protected $bookManager;

@@ @@
   /**
    * Constructs a BookOutlineForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\book\BookManagerInterface $book_manager
+   * @param BookManagerInterface $book_manager
    *   The BookManager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, BookManagerInterface $book_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time) {
@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {

-    /** @var \Drupal\book_access_code\Entity\AccessCodeInterface $entity */
+    /** @var AccessCodeInterface $entity */
     $entity = $this->entity;
     $form = parent::buildForm($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/book_access_code/src/EventSubscriber/KernelEventsSubscriber.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $account;

@@ @@
   /**
    * The route match interface.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;

@@ @@
   /**
    * The book access code manager.
    *
-   * @var \Drupal\book_access_code\BookAccessCodeManagerInterface
+   * @var BookAccessCodeManagerInterface
    */
   private $bookAccessCodeManager;

@@ @@
   /**
    * KernelEventsSubscriber constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The route match.
-   * @param \Drupal\book_access_code\BookAccessCodeManagerInterface $bookAccessCodeManager
+   * @param BookAccessCodeManagerInterface $bookAccessCodeManager
    *   The book access code manager.
    */
   public function __construct(AccountInterface $account, RouteMatchInterface $routeMatch, BookAccessCodeManagerInterface $bookAccessCodeManager) {
@@ @@
   /**
    * Determines access if viewing node that is part of a book.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
   public function onRespond(ResponseEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/book_access_code/src/Entity/AccessCodeInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\book_access_code\Entity;

+use Drupal\Core\Link;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ @@
   /**
    * Gets links to books this access code grants access to.
    *
-   * @return \Drupal\Core\Link[]
+   * @return Link[]
    *   Array of book Links.
    */
   public function getBookLinks(): array;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/book_access_code/src/BookAccessSession.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   private $session;

@@ @@
   /**
    * Constructs a BookAccessSession.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session.
    */
   public function __construct(SessionInterface $session) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/book_access_code/src/BookAccessCodeManagerInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Check if a node is part of a book.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node to check if it is part of a book.
    *
    * @return bool
@@ @@
   /**
    * Check if a node is part of an access restricted book.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node to check if it is part of an access restricted book.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/book_access_code/src/BookAccessCodeManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\book_access_code;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\book_access_code\Entity\AccessCodeInterface;
 use Drupal\book\BookManagerInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ @@
   /**
    * The page cache kill switch.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   private $pageCacheKillSwitch;

@@ @@
   /**
    * The redirect destination.
    *
-   * @var \Drupal\Core\Routing\RedirectDestination
+   * @var RedirectDestination
    */
   private $redirectDestination;

@@ @@
   /**
    * The book access session manager.
    *
-   * @var \Drupal\book_access_code\BookAccessSessionInterface
+   * @var BookAccessSessionInterface
    */
   private $bookAccessSession;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The book manager.
    *
-   * @var \Drupal\book\BookManagerInterface
+   * @var BookManagerInterface
    */
   private $bookManager;

@@ @@
   /**
    * BookAccessCodeManager constructor.
    *
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $pageCacheKillSwitch
+   * @param KillSwitch $pageCacheKillSwitch
    *   The page cache kill switch.
-   * @param \Drupal\Core\Routing\RedirectDestination $redirectDestination
+   * @param RedirectDestination $redirectDestination
    *   The redirect destination helper.
-   * @param \Drupal\book_access_code\BookAccessSessionInterface $bookAccessSession
+   * @param BookAccessSessionInterface $bookAccessSession
    *   The book access session handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\book\BookManagerInterface $bookManager
+   * @param BookManagerInterface $bookManager
    *   The book manager.
    */
   public function __construct(KillSwitch $pageCacheKillSwitch, RedirectDestination $redirectDestination, BookAccessSessionInterface $bookAccessSession, EntityTypeManagerInterface $entityTypeManager, BookManagerInterface $bookManager) {
@@ @@
     $codes = [];

     try {
-      /** @var \Drupal\Core\Entity\EntityStorageInterface $accessCodeStorage */
+      /** @var EntityStorageInterface $accessCodeStorage */
       $accessCodeStorage = $this->entityTypeManager->getStorage('access_code');
     }
     catch (InvalidPluginDefinitionException|PluginNotFoundException $e) {
@@ @@
       return [];
     }

-    /** @var \Drupal\Core\Entity\Query\QueryInterface $entityQuery */
+    /** @var QueryInterface $entityQuery */
     $entityQuery = $accessCodeStorage->getQuery();
     $accessCodeIds = $entityQuery
       ->condition('status', TRUE)
@@ @@
       return [];
     }

-    /** @var \Drupal\book_access_code\Entity\AccessCodeInterface[] $accessCodes */
+    /** @var AccessCodeInterface[] $accessCodes */
     $accessCodes = $accessCodeStorage->loadMultiple($accessCodeIds);

     foreach ($accessCodes as $accessCode) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/book_access_code/src/AccessCodeListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\book_access_code;

+use Drupal\book_access_code\Entity\AccessCodeInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The book access code manager.
    *
-   * @var \Drupal\book_access_code\BookAccessCodeManager
+   * @var BookAccessCodeManager
    */
   private $bookAccessCodeManager;

@@ @@
   /**
    * Constructs a new ViewListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\book_access_code\BookAccessCodeManagerInterface $bookAccessCodeManager
+   * @param BookAccessCodeManagerInterface $bookAccessCodeManager
    *   The book access code manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, BookAccessCodeManagerInterface $bookAccessCodeManager) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\book_access_code\Entity\AccessCodeInterface $entity */
-
+    /** @var AccessCodeInterface $entity */
     $row['name'] = Link::createFromRoute(
       $entity->label(),
       'entity.access_code.edit_form',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/book_access_code/src/AccessCodeAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\book_access_code;

+use Drupal\book_access_code\Entity\AccessCodeInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\book_access_code\Entity\AccessCodeInterface $entity */
-
+    /** @var AccessCodeInterface $entity */
     switch ($operation) {

       case 'edit':
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 10 files have been changed by Rector                                      

