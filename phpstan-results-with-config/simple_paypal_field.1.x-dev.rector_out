modules/contrib/simple_paypal_field/modules/paypal_field_example/paypal_field_example.module
modules/contrib/simple_paypal_field/modules/paypal_field_example/src/Entity/Builder/PaymentListBuilder.php
modules/contrib/simple_paypal_field/modules/paypal_field_example/src/Entity/Payment.php
modules/contrib/simple_paypal_field/modules/paypal_field_example/src/EventSubscriber/PayPalFieldExampleSubscriber.php
modules/contrib/simple_paypal_field/simple_paypal_field.module
modules/contrib/simple_paypal_field/src/Controller/PayPalSmartButtonsController.php
modules/contrib/simple_paypal_field/src/Event/PayPalSmartButtonsEvents.php
modules/contrib/simple_paypal_field/src/Event/PaypalSmartButtonsEvent.php
modules/contrib/simple_paypal_field/src/EventSubscriber/SimplePayPalFieldEventSubscriber.php
modules/contrib/simple_paypal_field/src/Form/PayPalSettingsForm.php
modules/contrib/simple_paypal_field/src/PayPalFieldInterface.php
modules/contrib/simple_paypal_field/src/Plugin/Field/FieldFormatter/PayPalSmartButtonsFormatter.php
modules/contrib/simple_paypal_field/src/Plugin/Field/FieldType/OneTimePaymentField.php
modules/contrib/simple_paypal_field/src/Plugin/Field/FieldType/SimplePayPalField.php
modules/contrib/simple_paypal_field/src/Plugin/Field/FieldWidget/PayPalSmartButtonsWidget.php
modules/contrib/simple_paypal_field/tests/src/Functional/SimplePayPalFieldTest.php

9 files with changes
====================

1) modules/contrib/simple_paypal_field/tests/src/Functional/SimplePayPalFieldTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_paypal_field\Functional;

+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->webUser = $this->drupalCreateUser(
       [
@@ @@
    * @return string
    *   Field name.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createField(string $field_type, string $widget_type, string $formatter) {
     // Create a field.
@@ @@
     )
       ->save();
     // Widgets.
-    entity_get_form_display('entity_test', 'entity_test', 'default')
+    \Drupal::service('entity_display.repository')->getFormDisplay('entity_test', 'entity_test', 'default')
       ->setComponent($field_name, ['type' => $widget_type])
       ->save();

-    entity_get_display('entity_test', 'entity_test', 'full')
+    \Drupal::service('entity_display.repository')->getViewDisplay('entity_test', 'entity_test', 'full')
       ->setComponent($field_name, ['type' => $formatter])
       ->save();
     return $field_name;
@@ @@
     $this->drupalGet('entity_test/add');
     $this->assertSession()->elementExists('css', '.paypal-button');

-    $this->drupalPostForm(NULL, [], t('Save'));
+    $this->submitForm([], t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
     $this->assertSession()->pageTextContains(
@@ @@

     // Display the entity.
     $entity = EntityTest::load($id);
-    $display = entity_get_display(
-      $entity->getEntityTypeId(),
-      $entity->bundle(),
-      'full'
-    );
+    $display = \Drupal::service('entity_display.repository')->getViewDisplay($entity->getEntityTypeId(), $entity->bundle(), 'full');
     $content = $display->build($entity);
     $rendered_entity = $this->container->get('renderer')->renderRoot($content);
-    $this->assertContains('paypal-button', (string) $rendered_entity);
+    $this->assertStringContainsString('paypal-button', (string) $rendered_entity);
   }

   /**
    * Checks that the field can be disabled.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws ResponseTextException
+   * @throws EntityStorageException
    */
   public function testFieldCanBeDisabled() {
     $field_name = $this->createField(
@@ @@
     $field_item = "{$field_name}[value]";
     $this->drupalGet('entity_test/add');
     $this->assertSession()->checkboxChecked($field_item);
-    $this->drupalPostForm(NULL, [$field_item => 0], t('Save'));
+    $this->submitForm([$field_item => 0], t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
     $this->assertSession()->pageTextContains(
    ----------- end diff -----------

Applied rules:
 * EntityGetDisplayRector
 * EntityGetFormDisplayRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * SpecificAssertContainsRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/simple_paypal_field/src/Plugin/Field/FieldWidget/PayPalSmartButtonsWidget.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/simple_paypal_field/src/Plugin/Field/FieldType/SimplePayPalField.php:89

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   Element to validate.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   FormState instance.
    * @param array $form
    *   Form array.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/simple_paypal_field/src/EventSubscriber/SimplePayPalFieldEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_paypal_field\EventSubscriber;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\TypedData\Exception\MissingDataException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Logger\LoggerChannelInterface;
@@ @@
   /**
    * Drupal Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $log;

@@ @@
   /**
    * Update PayPal field value with data from PayPal.
    *
-   * @param \Drupal\simple_paypal_field\Event\PaypalSmartButtonsEvent $event
+   * @param PaypalSmartButtonsEvent $event
    *   Event object.
    */
   public function updateField(PaypalSmartButtonsEvent $event) {
@@ @@
    * @return array
    *   Entity and the field as list.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws MissingDataException
    */
   protected function collectInstances(array $fieldInfo): array {
     $entity = $this->entityTypeManager
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/simple_paypal_field/src/Event/PaypalSmartButtonsEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_paypal_field\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * PayPal smart buttons event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/simple_paypal_field/src/Controller/PayPalSmartButtonsController.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * PayPalSmartButtonsController constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   Drupal event dispatcher.
    */
   public function __construct(EventDispatcherInterface $eventDispatcher) {
@@ @@
    *
    * Dispatches the 'approve' event to Drupal.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Response for buttons.
    */
   public function approve(Request $request) {
@@ @@

       $event = new PaypalSmartButtonsEvent($data['details'], $element);
       $this->eventDispatcher->dispatch(
-        PayPalSmartButtonsEvents::APPROVE_ORDER,
-        $event
+        $event,
+        PayPalSmartButtonsEvents::APPROVE_ORDER
       );
       return new JsonResponse('ok');
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/simple_paypal_field/simple_paypal_field.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\simple_paypal_field\Plugin\Field\FieldType\SimplePayPalField;
 /**
  * @file
  * Module hooks and functions.
@@ @@
  * Implements template_preprocess_HOOK().
  */
 function template_preprocess_paypal_smart_buttons_formatter(&$variables) {
-  /** @var \Drupal\simple_paypal_field\Plugin\Field\FieldType\SimplePayPalField $field */
+  /** @var SimplePayPalField $field */
   $field = $variables['field'];
   $definition = $field->getFieldDefinition();
   $id = implode(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


8) modules/contrib/simple_paypal_field/modules/paypal_field_example/src/EventSubscriber/PayPalFieldExampleSubscriber.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * Constructs event subscriber.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $manager
+   * @param EntityTypeManagerInterface $manager
    *   Entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $manager) {
@@ @@
   /**
    * Creates an payment entity.
    *
-   * @param \Drupal\simple_paypal_field\Event\PaypalSmartButtonsEvent $event
+   * @param PaypalSmartButtonsEvent $event
    *   The event.
    */
   public function createPaymentEntity(PaypalSmartButtonsEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/simple_paypal_field/modules/paypal_field_example/src/Entity/Builder/PaymentListBuilder.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 9 files have been changed by Rector                                       

