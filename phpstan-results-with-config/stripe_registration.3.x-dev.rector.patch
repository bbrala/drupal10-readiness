diff --git a/src/Controller/UserSubscriptionsController.php b/src/Controller/UserSubscriptionsController.php
index 8e47401..dc024f2 100644
--- a/src/Controller/UserSubscriptionsController.php
+++ b/src/Controller/UserSubscriptionsController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\stripe_registration\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\stripe_api\StripeApiService;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Logger\LoggerChannelInterface;
@@ -29,21 +32,21 @@ class UserSubscriptionsController extends ControllerBase {
   /**
    * Drupal\stripe_registration\StripeRegistrationService definition.
    *
-   * @var \Drupal\stripe_registration\StripeRegistrationService
+   * @var StripeRegistrationService
    */
   protected $stripeRegistration;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   private $logger;
 
   /**
    * UserSubscriptionsController constructor.
    *
-   * @param \Drupal\stripe_registration\StripeRegistrationService $stripe_registration
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param StripeRegistrationService $stripe_registration
+   * @param LoggerChannelInterface $logger
+   * @param AccountProxyInterface $current_user
    */
   public function __construct(StripeRegistrationService $stripe_registration, LoggerChannelInterface $logger, AccountProxyInterface $current_user) {
     $this->stripeRegistration = $stripe_registration;
@@ -74,8 +77,8 @@ class UserSubscriptionsController extends ControllerBase {
 
   /**
    * @return string
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @see \Drupal\stripe_registration\Plugin\Menu\SubscribeMenuLink::getTitle()
    */
@@ -89,8 +92,8 @@ class UserSubscriptionsController extends ControllerBase {
   /**
    * @return array
    *   Return
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function subscribe(): array {
@@ -130,14 +133,14 @@ class UserSubscriptionsController extends ControllerBase {
   }
 
   /**
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    * @throws \Exception
    */
   public function createSubscribeSession(Request $request): Response {
     // Simply instantiating the service will configure Stripe with the correct API key.
-    /** @var \Drupal\stripe_api\StripeApiService $stripe_api */
+    /** @var StripeApiService $stripe_api */
     $stripe_api =  \Drupal::service('stripe_api.stripe_api');
     if ($request->get('return_url')) {
       $success_url = Url::fromUri(
@@ -213,10 +216,10 @@ class UserSubscriptionsController extends ControllerBase {
   }
 
   /**
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Return
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function manageSubscriptionsAccess($user) {
     return AccessResult::allowedIf(
@@ -227,7 +230,7 @@ class UserSubscriptionsController extends ControllerBase {
   /**
    * @param $user
    *
-   * @return array|\Drupal\Core\Routing\TrustedRedirectResponse
+   * @return array|TrustedRedirectResponse
    */
   public function manageSubscriptions($user) {
     try {
@@ -255,11 +258,11 @@ class UserSubscriptionsController extends ControllerBase {
 
   /**
    * @param UserInterface $user
-   * @param \Stripe\Plan $plan
+   * @param Plan $plan
    *
    * @return bool
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function userIsSubscribedToPlan($user, Plan $plan): bool {
     if ($this->stripeRegistration->userHasStripeSubscription($user)) {
diff --git a/src/Entity/StripePlanEntity.php b/src/Entity/StripePlanEntity.php
index 57f1f28..edd44f6 100644
--- a/src/Entity/StripePlanEntity.php
+++ b/src/Entity/StripePlanEntity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\stripe_registration\Entity;
 
+use Drupal\user\RoleInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
@@ -235,7 +236,7 @@ class StripePlanEntity extends ContentEntityBase implements StripePlanEntityInte
       ->setLabel(t('Plan data'))
       ->setDescription(t('Array of raw plan data from Stripe.'));
 
-    /** @var \Drupal\user\RoleInterface[] $roles */
+    /** @var RoleInterface[] $roles */
     $roles = user_roles(TRUE);
     $role_options = [];
     foreach ($roles as $rid => $role) {
diff --git a/src/Entity/StripePlanEntityInterface.php b/src/Entity/StripePlanEntityInterface.php
index e0ed1ee..bcbd0cf 100644
--- a/src/Entity/StripePlanEntityInterface.php
+++ b/src/Entity/StripePlanEntityInterface.php
@@ -48,7 +48,7 @@ interface StripePlanEntityInterface extends ContentEntityInterface, EntityChange
    * @param int $timestamp
    *   The Stripe subscription creation timestamp.
    *
-   * @return \Drupal\stripe_registration\Entity\StripeSubscriptionEntityInterface
+   * @return StripeSubscriptionEntityInterface
    *   The called Stripe subscription entity.
    */
   public function setCreatedTime($timestamp);
diff --git a/src/Entity/StripeSubscriptionEntity.php b/src/Entity/StripeSubscriptionEntity.php
index ba30560..d4aab39 100644
--- a/src/Entity/StripeSubscriptionEntity.php
+++ b/src/Entity/StripeSubscriptionEntity.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\stripe_registration\Entity;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
@@ -142,9 +145,9 @@ class StripeSubscriptionEntity extends ContentEntityBase implements StripeSubscr
   }
 
   /**
-   * @return \Drupal\stripe_registration\Entity\StripePlanEntity|null
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return StripePlanEntity|null
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getPlan() {
     $plans = $this->entityTypeManager()
@@ -439,13 +442,13 @@ class StripeSubscriptionEntity extends ContentEntityBase implements StripeSubscr
   /**
    * Update local subscription from upstream subscription.
    *
-   * @param \Stripe\Subscription $remote_subscription
+   * @param Subscription $remote_subscription
    *   The remote Strip subscription.
    *
    * @return int
    *   SAVED_NEW or SAVED_UPDATED is returned depending on the operation
    *   performed.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function updateFromUpstream(Subscription $remote_subscription = NULL) {
diff --git a/src/Event/StripeCreateSubscribeSessionEvent.php b/src/Event/StripeCreateSubscribeSessionEvent.php
index 6ea644c..aa0ea81 100644
--- a/src/Event/StripeCreateSubscribeSessionEvent.php
+++ b/src/Event/StripeCreateSubscribeSessionEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\stripe_registration\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Session\AccountInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 class StripeCreateSubscribeSessionEvent extends Event {
 
@@ -26,7 +26,7 @@ class StripeCreateSubscribeSessionEvent extends Event {
   /**
    * Constructs the object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account of the user logged in.
    * @param array $params
    */
diff --git a/src/EventSubscriber/WebHookSubscriber.php b/src/EventSubscriber/WebHookSubscriber.php
index 669c551..77560fb 100644
--- a/src/EventSubscriber/WebHookSubscriber.php
+++ b/src/EventSubscriber/WebHookSubscriber.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\stripe_registration\EventSubscriber;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Stripe\Event;
 use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Messenger\Messenger;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -18,24 +22,24 @@ use Drupal\stripe_registration\StripeRegistrationService;
 class WebHookSubscriber implements EventSubscriberInterface {
 
   /**
-   * @var \Drupal\stripe_registration\StripeRegistrationService*/
+   * @var StripeRegistrationService*/
   protected $stripeRegApi;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface*/
+   * @var LoggerChannelInterface*/
   protected $logger;
 
   /**
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * WebHookSubscriber constructor.
    *
-   * @param \Drupal\stripe_registration\StripeRegistrationService $stripe_registration_stripe_api
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param StripeRegistrationService $stripe_registration_stripe_api
+   * @param LoggerChannelInterface $logger
+   * @param MessengerInterface $messenger
    */
   public function __construct(StripeRegistrationService $stripe_registration_stripe_api, LoggerChannelInterface $logger, MessengerInterface $messenger) {
     $this->stripeRegApi = $stripe_registration_stripe_api;
@@ -54,12 +58,12 @@ class WebHookSubscriber implements EventSubscriberInterface {
   /**
    * Process an incoming webhook.
    *
-   * @param \Drupal\stripe_api\Event\StripeApiWebhookEvent $event
+   * @param StripeApiWebhookEvent $event
    *   Logs an incoming webhook of the setting is on.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Stripe\Exception\ApiErrorException
    * @throws \Throwable
    */
@@ -128,10 +132,10 @@ class WebHookSubscriber implements EventSubscriberInterface {
   }
 
   /**
-   * @param \Drupal\stripe_api\Event\StripeApiWebhookEvent $event
-   * @param \Stripe\Event $stripe_event
+   * @param StripeApiWebhookEvent $event
+   * @param Event $stripe_event
    */
-  protected function logEvent(StripeApiWebhookEvent $event, \Stripe\Event $stripe_event): void {
+  protected function logEvent(StripeApiWebhookEvent $event, Event $stripe_event): void {
     if (\Drupal::config('stripe_api.settings')->get('log_webhooks')) {
       $this->logger->info("Event Subscriber reacting to @type event:\n @event",
         ['@type' => $event->type, '@event' => json_encode($stripe_event, JSON_PRETTY_PRINT)]);
@@ -141,9 +145,9 @@ class WebHookSubscriber implements EventSubscriberInterface {
   /**
    * @param $remote_subscription
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Stripe\Exception\ApiErrorException
    * @throws \Throwable
    */
diff --git a/src/Form/StripePlanEntitySettingsForm.php b/src/Form/StripePlanEntitySettingsForm.php
index 39fd38b..f95e0bc 100644
--- a/src/Form/StripePlanEntitySettingsForm.php
+++ b/src/Form/StripePlanEntitySettingsForm.php
@@ -29,7 +29,7 @@ class StripePlanEntitySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class StripePlanEntitySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/StripeSubscriptionEntitySettingsForm.php b/src/Form/StripeSubscriptionEntitySettingsForm.php
index 8afa7d5..25fc710 100644
--- a/src/Form/StripeSubscriptionEntitySettingsForm.php
+++ b/src/Form/StripeSubscriptionEntitySettingsForm.php
@@ -29,7 +29,7 @@ class StripeSubscriptionEntitySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class StripeSubscriptionEntitySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/StripePlanEntityAccessControlHandler.php b/src/StripePlanEntityAccessControlHandler.php
index 59776b4..d4c18c0 100644
--- a/src/StripePlanEntityAccessControlHandler.php
+++ b/src/StripePlanEntityAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\stripe_registration;
 
+use Drupal\stripe_registration\Entity\StripePlanEntityInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class StripePlanEntityAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\stripe_registration\Entity\StripePlanEntityInterface $entity */
+    /** @var StripePlanEntityInterface $entity */
     switch ($operation) {
       case 'view':
       case 'delete':
diff --git a/src/StripePlanEntityHtmlRouteProvider.php b/src/StripePlanEntityHtmlRouteProvider.php
index 87b40dc..819334c 100644
--- a/src/StripePlanEntityHtmlRouteProvider.php
+++ b/src/StripePlanEntityHtmlRouteProvider.php
@@ -36,10 +36,10 @@ class StripePlanEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -61,10 +61,10 @@ class StripePlanEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/StripeRegistrationService.php b/src/StripeRegistrationService.php
index dad549e..a9d96b9 100644
--- a/src/StripeRegistrationService.php
+++ b/src/StripeRegistrationService.php
@@ -2,6 +2,17 @@
 
 namespace Drupal\stripe_registration;
 
+use Drupal\Core\Config\ConfigFactory;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\user\UserInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Stripe\Collection;
+use Stripe\Error\Api;
+use Drupal\stripe_registration\Entity\StripeSubscriptionEntity;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -28,37 +39,37 @@ class StripeRegistrationService {
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
-   * @var \Drupal\stripe_api\StripeApiService
+   * @var StripeApiService
    */
   protected $stripeApi;
 
   /**
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
-   * @param \Drupal\stripe_api\StripeApiService $stripe_api
+   * @param ConfigFactoryInterface $config_factory
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param LoggerChannelInterface $logger
+   * @param StripeApiService $stripe_api
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, LoggerChannelInterface $logger, StripeApiService $stripe_api) {
     $this->config = $config_factory->get('stripe_registration.settings');
@@ -70,13 +81,13 @@ class StripeRegistrationService {
   /**
    * Check if a given user has a stripe subscription.
    *
-   * @param \Drupal\user\UserInterface|\Drupal\Core\Session\AccountInterface $user
+   * @param UserInterface|AccountInterface $user
    *   The user.
    *
    * @return bool
    *  TRUE if the user has a subscription.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function userHasStripeSubscription($user): bool {
     $subscription = $this->loadLocalSubscription([
@@ -89,12 +100,12 @@ class StripeRegistrationService {
   /**
    * Loads a user's remote subscription.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user.
    *
-   * @return bool|\Stripe\Collection
+   * @return bool|Collection
    *   A collection of subscriptions.
-   * @throws \Stripe\Error\Api
+   * @throws Api
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function loadRemoteSubscriptionsByUser($user) {
@@ -107,9 +118,9 @@ class StripeRegistrationService {
    * @param array $args
    *   Arguments by which to filter the subscriptions.
    *
-   * @return bool|\Stripe\Collection
+   * @return bool|Collection
    *   A collection of subscriptions.
-   * @throws \Stripe\Error\Api
+   * @throws Api
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function loadRemoteSubscriptionMultiple($args = []) {
@@ -129,10 +140,10 @@ class StripeRegistrationService {
    * @param array $properties
    *   Local properties by which to filter the subscriptions.
    *
-   * @return \Drupal\stripe_registration\Entity\StripeSubscriptionEntity|bool
+   * @return StripeSubscriptionEntity|bool
    *   A Stripe subscription entity, or else FALSE.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadLocalSubscription($properties = []) {
     $stripe_subscription_entities = $this->loadLocalSubscriptionMultiple($properties);
@@ -151,10 +162,10 @@ class StripeRegistrationService {
    * @param array $properties
    *   Local properties by which to filter the subscriptions.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of Stripe subscription entity.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadLocalSubscriptionMultiple($properties = []) {
     $stripe_subscription_entities = $this->entityTypeManager
@@ -167,11 +178,11 @@ class StripeRegistrationService {
   /**
    * Load multiple local plans.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of entity objects indexed by their IDs. Returns an empty array
    *   if no matching entities are found.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadLocalPlanMultiple() {
     $stripe_plan_entities = $this->entityTypeManager
@@ -184,9 +195,9 @@ class StripeRegistrationService {
   /**
    * @param array $properties
    *
-   * @return bool|\Drupal\Core\Entity\EntityInterface|mixed
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return bool|EntityInterface|mixed
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadLocalPlan($properties = []) {
     $stripe_plan_entities = $this->entityTypeManager
@@ -208,8 +219,8 @@ class StripeRegistrationService {
    * @param array $args
    *   An array of arguments by which to filter the remote plans.
    *
-   * @return \Stripe\Plan[]
-   * @throws \Stripe\Error\Api
+   * @return Plan[]
+   * @throws Api
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function loadRemotePlanMultiple($args = []): array {
@@ -243,9 +254,9 @@ class StripeRegistrationService {
    * @param bool $delete
    *   If true, local plans without matching remote plans will be deleted from Drupal.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function syncPlans($delete = FALSE): void {
@@ -253,7 +264,7 @@ class StripeRegistrationService {
     $remote_plans = $this->loadRemotePlanMultiple();
     $local_plans = $this->entityTypeManager->getStorage('stripe_plan')->loadMultiple();
 
-    /** @var \Drupal\Core\Entity\EntityInterface[] $local_plans_keyed */
+    /** @var EntityInterface[] $local_plans_keyed */
     $local_plans_keyed = [];
     foreach ($local_plans as $local_plan) {
       $local_plans_keyed[$local_plan->plan_id->value] = $local_plan;
@@ -289,9 +300,9 @@ class StripeRegistrationService {
     }
     // Update existing plans.
     foreach ($plans_to_update as $plan_id) {
-      /** @var \Drupal\Core\Entity\EntityInterface $plan */
+      /** @var EntityInterface $plan */
       $plan = $local_plans_keyed[$plan_id];
-      /** @var \Stripe\Plan $remote_plan */
+      /** @var Plan $remote_plan */
       $remote_plan = $remote_plans[$plan_id];
       $plan->set('name', $remote_plan->name);
       $plan->set('plan_price_id', $remote_plan->id);
@@ -308,9 +319,9 @@ class StripeRegistrationService {
   /**
    * @param $remote_id
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function syncRemoteSubscriptionToLocal($remote_id): void {
@@ -324,12 +335,12 @@ class StripeRegistrationService {
   }
 
   /**
-   * @param \Stripe\Subscription $remote_subscription
+   * @param Subscription $remote_subscription
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Stripe\Subscription
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return EntityInterface|Subscription
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function createLocalSubscription($remote_subscription) {
@@ -369,12 +380,12 @@ class StripeRegistrationService {
    * @param $uid
    * @param string $customer_id
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Stripe\Exception\ApiErrorException
    */
   public function setLocalUserCustomerId($uid, $customer_id): void {
-    /** @var \Stripe\Customer $user */
+    /** @var Customer $user */
     $user = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
     $user->set('stripe_customer_id', $customer_id);
     $user->save();
@@ -384,11 +395,11 @@ class StripeRegistrationService {
    * @param string|int $uid
    *
    * @return
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getLocalUserCustomerId($uid) {
-    /** @var \Stripe\Customer $user */
+    /** @var Customer $user */
     $user = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
     return $user->get('stripe_customer_id')->value;
   }
@@ -396,9 +407,9 @@ class StripeRegistrationService {
   /**
    * @param $customer_id
    *
-   * @return bool|\Drupal\user\Entity\User
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return bool|User
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadUserByStripeCustomerId($customer_id) {
     $users = \Drupal::entityTypeManager()
diff --git a/src/StripeSubscriptionEntityAccessControlHandler.php b/src/StripeSubscriptionEntityAccessControlHandler.php
index 2c9daae..b0618d6 100644
--- a/src/StripeSubscriptionEntityAccessControlHandler.php
+++ b/src/StripeSubscriptionEntityAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\stripe_registration;
 
+use Drupal\stripe_registration\Entity\StripeSubscriptionEntityInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class StripeSubscriptionEntityAccessControlHandler extends EntityAccessControlHa
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\stripe_registration\Entity\StripeSubscriptionEntityInterface $entity */
+    /** @var StripeSubscriptionEntityInterface $entity */
     switch ($operation) {
       case 'view':
       case 'delete':
diff --git a/src/StripeSubscriptionEntityHtmlRouteProvider.php b/src/StripeSubscriptionEntityHtmlRouteProvider.php
index 1fa61dd..ac2037c 100644
--- a/src/StripeSubscriptionEntityHtmlRouteProvider.php
+++ b/src/StripeSubscriptionEntityHtmlRouteProvider.php
@@ -36,10 +36,10 @@ class StripeSubscriptionEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -61,10 +61,10 @@ class StripeSubscriptionEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/stripe_registration.info.yml b/stripe_registration.info.yml
index b0bcfca..f892799 100644
--- a/stripe_registration.info.yml
+++ b/stripe_registration.info.yml
@@ -1,8 +1,7 @@
 name: Stripe Registration
 type: module
 description: Facilitates paid site registration via a Stripe subscription plan.
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: E-commerce
 dependencies:
   - stripe_api:stripe_api
diff --git a/stripe_registration.install b/stripe_registration.install
index 072aea0..b42a6ef 100644
--- a/stripe_registration.install
+++ b/stripe_registration.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Field\BaseFieldDefinition;
 /**
  * Implements hook_install().
  */
@@ -42,7 +43,7 @@ function stripe_registration_create_stripe_customer_id_field() {
  * Add 'data' field to Stripe Plan entities.
  */
 function stripe_registration_update_8001() {
-  $storage_definition = \Drupal\Core\Field\BaseFieldDefinition::create('map')
+  $storage_definition = BaseFieldDefinition::create('map')
     ->setLabel(t('Plan data'))
     ->setDescription(t('Array of raw plan data from Stripe.'));
 
@@ -54,7 +55,7 @@ function stripe_registration_update_8001() {
  * Add 'price_id' field to Stripe Plan and Stripe Subscription entities.
  */
 function stripe_registration_update_8003() {
-  $storage_definition = \Drupal\Core\Field\BaseFieldDefinition::create('string')
+  $storage_definition = BaseFieldDefinition::create('string')
     ->setLabel(t('Plan Price ID'))
     ->setDescription(t('The Stripe Price ID for this plan.'));
 
diff --git a/stripe_registration.module b/stripe_registration.module
index 9bf8551..4901c8f 100644
--- a/stripe_registration.module
+++ b/stripe_registration.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\stripe_api\StripeApiService;
 /**
  * @file
  * Contains stripe_registration.module..
@@ -72,7 +73,7 @@ function stripe_registration_form_alter(&$form, FormStateInterface $form_state,
 
 function stripe_registration_admin_form(array &$form, FormStateInterface $form_state, $form_id) {
   $config = \Drupal::config('stripe_registration.settings');
-  /** @var \Drupal\stripe_api\StripeApiService $stripe_api */
+  /** @var StripeApiService $stripe_api */
   $stripe_api = \Drupal::service('stripe_api.stripe_api');
 
   $form['redirect'] = [
