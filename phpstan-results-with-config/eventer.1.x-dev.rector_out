modules/contrib/eventer/eventer.module
modules/contrib/eventer/src/Controller/DetectedHooksController.php
modules/contrib/eventer/src/Decorator/ModuleHandlerDecorator.php
modules/contrib/eventer/src/Decorator/ThemeManagerDecorator.php
modules/contrib/eventer/src/Event/AlterEvent.php
modules/contrib/eventer/src/Event/HookEvent.php
modules/contrib/eventer/src/EventSubscriber/LegacyHookSubscriber.php
modules/contrib/eventer/src/EventerEvents.php
modules/contrib/eventer/src/Plugin/Block/ListEventsBlock.php

8 files with changes
====================

1) modules/contrib/eventer/src/Plugin/Block/ListEventsBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eventer\Plugin\Block;

+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\PageCache\ResponsePolicy\KillSwitch;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * Symfony\Component\EventDispatcher\EventDispatcherInterface definition.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The kill switch.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $killSwitch;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/eventer/src/EventSubscriber/LegacyHookSubscriber.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Hook request event handler.
    *
-   * @param \Drupal\eventer\Event\HookEvent $event
+   * @param HookEvent $event
    *   Hook event.
    */
   public function execute(HookEvent $event) {
@@ @@
   /**
    * Alter request event handler.
    *
-   * @param \Drupal\eventer\Event\AlterEvent $event
+   * @param AlterEvent $event
    *   Alter event.
    */
   public function alter(AlterEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/eventer/src/Event/HookEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eventer\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Defines an hook call replacement event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/eventer/src/Event/AlterEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eventer\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Defines an alter call replacement event.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/eventer/src/Decorator/ThemeManagerDecorator.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
    *
    * @param string $root
    *   The app root.
-   * @param \Drupal\Core\Theme\ThemeNegotiatorInterface $theme_negotiator
+   * @param ThemeNegotiatorInterface $theme_negotiator
    *   The theme negotiator.
-   * @param \Drupal\Core\Theme\ThemeInitializationInterface $theme_initialization
+   * @param ThemeInitializationInterface $theme_initialization
    *   The theme initialization.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   Event dispatcher.
    */
   public function __construct(
@@ @@
       $eventParam = new AlterEvent($eventAlter['hook'], $eventAlter['module'], $eventAlter['function'], $data, $context1, $context2);
       // This allow an easiest debugging.
       $eventParam->setKey($eventName);
-      /** @var \Drupal\eventer\Event\AlterEvent $event */
-      $event = $this->eventDispatcher->dispatch($eventName, $eventParam);
+      /** @var AlterEvent $event */
+      $event = $this->eventDispatcher->dispatch($eventParam, $eventName);
       $data = $event->getData();
       $context1 = $event->getContext1();
       $context2 = $event->getContext2();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/eventer/src/Decorator/ModuleHandlerDecorator.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
    *   An associative array whose keys are the names of installed modules and
    *   whose values are Extension class parameters. This is normally the
    *   %container.modules% parameter being set up by DrupalKernel.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend for storing module hook implementation information.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   Event dispatcher.
    *
    * @see \Drupal\Core\DrupalKernel
@@ @@
     $eventParam = new HookEvent($hook, $module, $function, $args);
     // This allow an easiest debugging.
     $eventParam->setKey(EventerEvents::MODULE_HOOK . $module . '.' . $hook);
-    /** @var \Drupal\eventer\Event\HookEvent $event */
-    $event = $this->eventDispatcher->dispatch($eventParam->getKey(), $eventParam);
+    /** @var HookEvent $event */
+    $event = $this->eventDispatcher->dispatch($eventParam, $eventParam->getKey());
     return $event->getResult();
   }

@@ @@
       $eventParam = new HookEvent($hook, $module, $function, $args);
       // This allow an easiest debugging.
       $eventParam->setKey(EventerEvents::MODULE_HOOK . $module . '.' . $hook);
-      /** @var \Drupal\eventer\Event\HookEvent $event */
-      $event = $this->eventDispatcher->dispatch($eventParam->getKey(), $eventParam);
+      /** @var HookEvent $event */
+      $event = $this->eventDispatcher->dispatch($eventParam, $eventParam->getKey());
       $result = $event->getResult();
       if (isset($result) && is_array($result)) {
         $return = NestedArray::mergeDeep($return, $result);
@@ @@
     $eventParam = new HookEvent($hook, NULL, NULL, $args);
     // This allow an easiest debugging.
     $eventParam->setKey(EventerEvents::MODULE_HOOK . $hook);
-    /** @var \Drupal\eventer\Event\HookEvent $event */
-    $event = $this->eventDispatcher->dispatch($eventParam->getKey(), $eventParam);
+    /** @var HookEvent $event */
+    $event = $this->eventDispatcher->dispatch($eventParam, $eventParam->getKey());
     $result = $event->getResult();
     if (isset($result) && is_array($result)) {
       $return = NestedArray::mergeDeep($return, $result);
@@ @@
       $eventParam = new AlterEvent($eventAlter['hook'], $eventAlter['module'], $eventAlter['function'], $data, $context1, $context2);
       // This allow an easiest debugging.
       $eventParam->setKey($eventName);
-      /** @var \Drupal\eventer\Event\AlterEvent $event */
+      /** @var AlterEvent $event */
       $event = $this->eventDispatcher->dispatch($eventName, $eventParam);
       $data = $event->getData();
       $context1 = $event->getContext1();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/eventer/src/Controller/DetectedHooksController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\eventer\Controller;

+use Drupal\Core\Cache\ChainedFastBackend;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * Drupal\Core\Cache\ChainedFastBackend definition.
    *
-   * @var \Drupal\Core\Cache\ChainedFastBackend
+   * @var ChainedFastBackend
    */
   protected $cacheBootstrap;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/eventer/eventer.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Cache\CacheBackendInterface;
 /**
  * @file
  * Contains eventer.module.
@@ @@
 function eventer_module_implements_alter(&$implementations, $hook) {
   // @todo: Add settings to allow this detection.
   if (FALSE) {
-    /** @var \Drupal\Core\Cache\CacheBackendInterface $cacheBackend */
+    /** @var CacheBackendInterface $cacheBackend */
     $cacheBackend = \Drupal::service('cache.bootstrap');
     // Load cached data.
     $detected = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 8 files have been changed by Rector                                       

