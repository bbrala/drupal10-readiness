diff --git a/src/AccessCodeAccessControlHandler.php b/src/AccessCodeAccessControlHandler.php
index 2d33765..7945fd9 100644
--- a/src/AccessCodeAccessControlHandler.php
+++ b/src/AccessCodeAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\book_access_code;
 
+use Drupal\book_access_code\Entity\AccessCodeInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,8 +19,7 @@ class AccessCodeAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\book_access_code\Entity\AccessCodeInterface $entity */
-
+    /** @var AccessCodeInterface $entity */
     switch ($operation) {
 
       case 'edit':
diff --git a/src/AccessCodeListBuilder.php b/src/AccessCodeListBuilder.php
index 803098f..ea089ae 100644
--- a/src/AccessCodeListBuilder.php
+++ b/src/AccessCodeListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\book_access_code;
 
+use Drupal\book_access_code\Entity\AccessCodeInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -19,7 +20,7 @@ class AccessCodeListBuilder extends EntityListBuilder {
   /**
    * The book access code manager.
    *
-   * @var \Drupal\book_access_code\BookAccessCodeManager
+   * @var BookAccessCodeManager
    */
   private $bookAccessCodeManager;
 
@@ -37,11 +38,11 @@ class AccessCodeListBuilder extends EntityListBuilder {
   /**
    * Constructs a new ViewListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\book_access_code\BookAccessCodeManagerInterface $bookAccessCodeManager
+   * @param BookAccessCodeManagerInterface $bookAccessCodeManager
    *   The book access code manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, BookAccessCodeManagerInterface $bookAccessCodeManager) {
@@ -64,8 +65,7 @@ class AccessCodeListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\book_access_code\Entity\AccessCodeInterface $entity */
-
+    /** @var AccessCodeInterface $entity */
     $row['name'] = Link::createFromRoute(
       $entity->label(),
       'entity.access_code.edit_form',
diff --git a/src/BookAccessCodeManager.php b/src/BookAccessCodeManager.php
index fbf7b33..39214ea 100644
--- a/src/BookAccessCodeManager.php
+++ b/src/BookAccessCodeManager.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\book_access_code;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\book_access_code\Entity\AccessCodeInterface;
 use Drupal\book\BookManagerInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
@@ -20,50 +23,50 @@ class BookAccessCodeManager implements BookAccessCodeManagerInterface {
   /**
    * The page cache kill switch.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   private $pageCacheKillSwitch;
 
   /**
    * The redirect destination.
    *
-   * @var \Drupal\Core\Routing\RedirectDestination
+   * @var RedirectDestination
    */
   private $redirectDestination;
 
   /**
    * The book access session manager.
    *
-   * @var \Drupal\book_access_code\BookAccessSessionInterface
+   * @var BookAccessSessionInterface
    */
   private $bookAccessSession;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * The book manager.
    *
-   * @var \Drupal\book\BookManagerInterface
+   * @var BookManagerInterface
    */
   private $bookManager;
 
   /**
    * BookAccessCodeManager constructor.
    *
-   * @param \Drupal\Core\PageCache\ResponsePolicy\KillSwitch $pageCacheKillSwitch
+   * @param KillSwitch $pageCacheKillSwitch
    *   The page cache kill switch.
-   * @param \Drupal\Core\Routing\RedirectDestination $redirectDestination
+   * @param RedirectDestination $redirectDestination
    *   The redirect destination helper.
-   * @param \Drupal\book_access_code\BookAccessSessionInterface $bookAccessSession
+   * @param BookAccessSessionInterface $bookAccessSession
    *   The book access session handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\book\BookManagerInterface $bookManager
+   * @param BookManagerInterface $bookManager
    *   The book manager.
    */
   public function __construct(KillSwitch $pageCacheKillSwitch, RedirectDestination $redirectDestination, BookAccessSessionInterface $bookAccessSession, EntityTypeManagerInterface $entityTypeManager, BookManagerInterface $bookManager) {
@@ -144,14 +147,14 @@ class BookAccessCodeManager implements BookAccessCodeManagerInterface {
     $codes = [];
 
     try {
-      /** @var \Drupal\Core\Entity\EntityStorageInterface $accessCodeStorage */
+      /** @var EntityStorageInterface $accessCodeStorage */
       $accessCodeStorage = $this->entityTypeManager->getStorage('access_code');
     }
     catch (InvalidPluginDefinitionException|PluginNotFoundException $e) {
       return [];
     }
 
-    /** @var \Drupal\Core\Entity\Query\QueryInterface $entityQuery */
+    /** @var QueryInterface $entityQuery */
     $entityQuery = $accessCodeStorage->getQuery();
     $accessCodeIds = $entityQuery
       ->condition('status', TRUE)
@@ -162,7 +165,7 @@ class BookAccessCodeManager implements BookAccessCodeManagerInterface {
       return [];
     }
 
-    /** @var \Drupal\book_access_code\Entity\AccessCodeInterface[] $accessCodes */
+    /** @var AccessCodeInterface[] $accessCodes */
     $accessCodes = $accessCodeStorage->loadMultiple($accessCodeIds);
 
     foreach ($accessCodes as $accessCode) {
diff --git a/src/BookAccessCodeManagerInterface.php b/src/BookAccessCodeManagerInterface.php
index d719532..df20fcf 100644
--- a/src/BookAccessCodeManagerInterface.php
+++ b/src/BookAccessCodeManagerInterface.php
@@ -12,7 +12,7 @@ interface BookAccessCodeManagerInterface {
   /**
    * Check if a node is part of a book.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node to check if it is part of a book.
    *
    * @return bool
@@ -23,7 +23,7 @@ interface BookAccessCodeManagerInterface {
   /**
    * Check if a node is part of an access restricted book.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node to check if it is part of an access restricted book.
    *
    * @return bool
diff --git a/src/BookAccessSession.php b/src/BookAccessSession.php
index 0d1eff1..c9d9e84 100644
--- a/src/BookAccessSession.php
+++ b/src/BookAccessSession.php
@@ -12,14 +12,14 @@ class BookAccessSession implements BookAccessSessionInterface {
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   private $session;
 
   /**
    * Constructs a BookAccessSession.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session.
    */
   public function __construct(SessionInterface $session) {
diff --git a/src/Entity/AccessCodeInterface.php b/src/Entity/AccessCodeInterface.php
index a5549a6..21a2e31 100644
--- a/src/Entity/AccessCodeInterface.php
+++ b/src/Entity/AccessCodeInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\book_access_code\Entity;
 
+use Drupal\Core\Link;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ -74,7 +75,7 @@ interface AccessCodeInterface extends ContentEntityInterface, EntityChangedInter
   /**
    * Gets links to books this access code grants access to.
    *
-   * @return \Drupal\Core\Link[]
+   * @return Link[]
    *   Array of book Links.
    */
   public function getBookLinks(): array;
diff --git a/src/EventSubscriber/KernelEventsSubscriber.php b/src/EventSubscriber/KernelEventsSubscriber.php
index a3fdc88..ede41b1 100644
--- a/src/EventSubscriber/KernelEventsSubscriber.php
+++ b/src/EventSubscriber/KernelEventsSubscriber.php
@@ -18,32 +18,32 @@ class KernelEventsSubscriber implements EventSubscriberInterface {
   /**
    * The account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $account;
 
   /**
    * The route match interface.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   private $routeMatch;
 
   /**
    * The book access code manager.
    *
-   * @var \Drupal\book_access_code\BookAccessCodeManagerInterface
+   * @var BookAccessCodeManagerInterface
    */
   private $bookAccessCodeManager;
 
   /**
    * KernelEventsSubscriber constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The route match.
-   * @param \Drupal\book_access_code\BookAccessCodeManagerInterface $bookAccessCodeManager
+   * @param BookAccessCodeManagerInterface $bookAccessCodeManager
    *   The book access code manager.
    */
   public function __construct(AccountInterface $account, RouteMatchInterface $routeMatch, BookAccessCodeManagerInterface $bookAccessCodeManager) {
@@ -66,7 +66,7 @@ class KernelEventsSubscriber implements EventSubscriberInterface {
   /**
    * Determines access if viewing node that is part of a book.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
   public function onRespond(ResponseEvent $event): void {
diff --git a/src/Form/AccessCodeForm.php b/src/Form/AccessCodeForm.php
index 491ed5b..65f9ae0 100644
--- a/src/Form/AccessCodeForm.php
+++ b/src/Form/AccessCodeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\book_access_code\Form;
 
+use Drupal\book_access_code\Entity\AccessCodeInterface;
 use Drupal\book\BookManagerInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
@@ -18,20 +19,20 @@ class AccessCodeForm extends ContentEntityForm {
   /**
    * BookManager service.
    *
-   * @var \Drupal\book\BookManagerInterface
+   * @var BookManagerInterface
    */
   protected $bookManager;
 
   /**
    * Constructs a BookOutlineForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\book\BookManagerInterface $book_manager
+   * @param BookManagerInterface $book_manager
    *   The BookManager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, BookManagerInterface $book_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time) {
@@ -56,7 +57,7 @@ class AccessCodeForm extends ContentEntityForm {
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
 
-    /** @var \Drupal\book_access_code\Entity\AccessCodeInterface $entity */
+    /** @var AccessCodeInterface $entity */
     $entity = $this->entity;
     $form = parent::buildForm($form, $form_state);
 
diff --git a/src/Form/BookAccessCodeForm.php b/src/Form/BookAccessCodeForm.php
index f0167e7..f265613 100644
--- a/src/Form/BookAccessCodeForm.php
+++ b/src/Form/BookAccessCodeForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\book_access_code\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\book_access_code\BookAccessCodeManagerInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -17,14 +19,14 @@ class BookAccessCodeForm extends FormBase {
   /**
    * Drupal\book_access_code\BookAccessCodeManagerInterface definition.
    *
-   * @var \Drupal\book_access_code\BookAccessCodeManagerInterface
+   * @var BookAccessCodeManagerInterface
    */
   protected $bookAccessCodeManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -45,9 +47,9 @@ class BookAccessCodeForm extends FormBase {
   /**
    * BookAccessCodeForm constructor.
    *
-   * @param \Drupal\book_access_code\BookAccessCodeManagerInterface $bookAccessCodeManager
+   * @param BookAccessCodeManagerInterface $bookAccessCodeManager
    *   The book access code manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(BookAccessCodeManagerInterface $bookAccessCodeManager, EntityTypeManagerInterface $entityTypeManager) {
@@ -78,8 +80,8 @@ class BookAccessCodeForm extends FormBase {
    * @return string
    *   The book access code title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    *
    * @see book_access_code.routing.yml
    */
@@ -93,8 +95,8 @@ class BookAccessCodeForm extends FormBase {
    * @return string
    *   The book title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function bookTitle(): string {
     if (!isset($this->bookTitle)) {
@@ -185,7 +187,7 @@ class BookAccessCodeForm extends FormBase {
   /**
    * Determines if we can access this form by checking for valid query params.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   public function access() {
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 928b2a4..d714365 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\book_access_code\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -27,7 +28,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
