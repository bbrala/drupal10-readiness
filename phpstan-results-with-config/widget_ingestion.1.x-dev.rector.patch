diff --git a/src/Commands/WidgetIngestionCommands.php b/src/Commands/WidgetIngestionCommands.php
index 68b39b1..211658a 100644
--- a/src/Commands/WidgetIngestionCommands.php
+++ b/src/Commands/WidgetIngestionCommands.php
@@ -19,14 +19,14 @@ class WidgetIngestionCommands extends DrushCommands {
   /**
    * The repository of widgets.
    *
-   * @var \Drupal\widget_ingestion\WidgetRemoteRepository
+   * @var WidgetRemoteRepository
    */
   private $widgetsRepository;
 
   /**
    * WidgetIngestionCommands constructor.
    *
-   * @param \Drupal\widget_ingestion\WidgetRemoteRepository $widgets_repository
+   * @param WidgetRemoteRepository $widgets_repository
    *   The repository.
    */
   public function __construct(WidgetRemoteRepository $widgets_repository) {
@@ -71,7 +71,7 @@ class WidgetIngestionCommands extends DrushCommands {
    *
    * @command widget_ingestion:ingest
    *
-   * @return \Consolidation\OutputFormatters\StructuredData\RowsOfFields
+   * @return RowsOfFields
    *   The ingested widget types.
    */
   public function ingest(array $options = ['force-ingestion' => FALSE]) {
diff --git a/src/Form/ManualIngestionForm.php b/src/Form/ManualIngestionForm.php
index ab29553..e0aae7e 100644
--- a/src/Form/ManualIngestionForm.php
+++ b/src/Form/ManualIngestionForm.php
@@ -19,28 +19,29 @@ final class ManualIngestionForm extends ConfirmFormBase {
   /**
    * The repository of widgets.
    *
-   * @var \Drupal\widget_ingestion\WidgetRemoteRepository
+   * @var WidgetRemoteRepository
    */
   private $widgetsRepository;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * WidgetIngestionCommands constructor.
    *
-   * @param \Drupal\widget_ingestion\WidgetRemoteRepository $widgets_repository
+   * @param WidgetRemoteRepository $widgets_repository
    *   The repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
-  public function __construct(WidgetRemoteRepository $widgets_repository, EntityTypeManagerInterface $entity_type_manager) {
+  public function __construct(WidgetRemoteRepository $widgets_repository, EntityTypeManagerInterface $entity_type_manager, WidgetRemoteRepository $widgetsRepository) {
     $this->widgetsRepository = $widgets_repository;
     $this->entityTypeManager = $entity_type_manager;
+    $this->widgetsRepository = $widgetsRepository;
   }
 
   /**
@@ -48,7 +49,7 @@ final class ManualIngestionForm extends ConfirmFormBase {
    */
   public static function create(ContainerInterface $container) {
     return new static(
-      $container->get(WidgetRemoteRepository::class),
+      $this->widgetsRepository,
       $container->get('entity_type.manager')
     );
   }
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index cd32913..af75263 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\widget_ingestion\Form;
 
+use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Url;
@@ -45,7 +46,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Builds the endpoints element for the form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -107,10 +108,10 @@ class SettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|array
+   * @return AjaxResponse|array
    *   The form render array or an AJAX response object.
    */
   public function updateFormCallback(array &$form, FormStateInterface $form_state) {
@@ -123,7 +124,7 @@ class SettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    */
   public function validateUrl(array &$form, FormStateInterface $form_state) {
diff --git a/src/Plugin/QueueWorker/WidgetQueueWorker.php b/src/Plugin/QueueWorker/WidgetQueueWorker.php
index e23b192..f0d5753 100644
--- a/src/Plugin/QueueWorker/WidgetQueueWorker.php
+++ b/src/Plugin/QueueWorker/WidgetQueueWorker.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\widget_ingestion\Plugin\QueueWorker;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Composer\Semver\Comparator;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\UrlHelper;
@@ -32,14 +36,14 @@ final class WidgetQueueWorker extends QueueWorkerBase implements ContainerFactor
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The cache tags invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
@@ -52,9 +56,9 @@ final class WidgetQueueWorker extends QueueWorkerBase implements ContainerFactor
    *   The plugin id.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator service.
    *
    * @SuppressWarnings(PHPMD.LongVariable)
@@ -91,11 +95,11 @@ final class WidgetQueueWorker extends QueueWorkerBase implements ContainerFactor
    * @param array $data
    *   Widget data received from the widget registry.
    *
-   * @return \Drupal\widget_type\WidgetTypeInterface
+   * @return WidgetTypeInterface
    *   New widget if it does not already exist, or the existing widget.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws PluginException
+   * @throws EntityStorageException
    *
    * @SuppressWarnings(PHPMD.StaticAccess)
    */
@@ -157,11 +161,11 @@ final class WidgetQueueWorker extends QueueWorkerBase implements ContainerFactor
    * @param array $data
    *   The data object being ingested.
    *
-   * @return \Drupal\widget_type\Entity\WidgetType|null
+   * @return WidgetType|null
    *   The widget type if it can be found.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   private function deduceWidgetType(array $ids, array $data): ?WidgetType {
     $widget_exists = (bool) $ids;
@@ -187,12 +191,12 @@ final class WidgetQueueWorker extends QueueWorkerBase implements ContainerFactor
   /**
    * Imports the JS widget.
    *
-   * @param \Drupal\widget_type\WidgetTypeInterface $widget_type
+   * @param WidgetTypeInterface $widget_type
    *   The entity being saved.
    * @param array $data
    *   Structured array with widget data.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function importWidget(WidgetTypeInterface $widget_type, array $data): void {
     // Set values from $data, except for the short code which remains invariant.
diff --git a/src/WidgetRemoteRepository.php b/src/WidgetRemoteRepository.php
index c02dbe0..891d76b 100644
--- a/src/WidgetRemoteRepository.php
+++ b/src/WidgetRemoteRepository.php
@@ -2,6 +2,14 @@
 
 namespace Drupal\widget_ingestion;
 
+use GuzzleHttp\Client;
+use Drupal\Core\Queue\QueueWorkerInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use GuzzleHttp\Promise\PromiseInterface;
+use GuzzleHttp\Promise\Utils;
+use function GuzzleHttp\Promise\all;
 use Drupal\Component\Assertion\Inspector;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -26,7 +34,7 @@ final class WidgetRemoteRepository {
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   private $client;
 
@@ -40,7 +48,7 @@ final class WidgetRemoteRepository {
   /**
    * The queue worker.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerInterface
+   * @var QueueWorkerInterface
    */
   private $queueWorker;
 
@@ -54,27 +62,27 @@ final class WidgetRemoteRepository {
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   private $fileSystem;
 
   /**
    * WidgetRemoteRepository constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    *   The guzzle client to make HTTP requests.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Drupal\Core\Queue\QueueWorkerManagerInterface $queue_worker_manager
+   * @param QueueWorkerManagerInterface $queue_worker_manager
    *   The queue worker manager.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function __construct(ClientInterface $client, ConfigFactoryInterface $config_factory, QueueWorkerManagerInterface $queue_worker_manager, FileSystemInterface $file_system, EntityTypeManagerInterface $entity_type_manager) {
     $this->client = $client;
@@ -198,7 +206,7 @@ final class WidgetRemoteRepository {
    * @param string $version
    *   The version of the widget.
    *
-   * @return \Drupal\widget_ingestion\LocalAssetDescriptor
+   * @return LocalAssetDescriptor
    *   The asset descriptor to build the Drupal library definition.
    */
   public function ingestAssets(string $remote_directory, array $files, string $remote_id, string $version): LocalAssetDescriptor {
@@ -261,7 +269,7 @@ final class WidgetRemoteRepository {
     }
     $path = preg_replace('/' . preg_quote($base_dir, '/') . '/', '', $path);
     $path = ltrim($path, DIRECTORY_SEPARATOR);
-    $levels = count(explode(DIRECTORY_SEPARATOR, drupal_get_path('module', 'widget_type')));
+    $levels = count(explode(DIRECTORY_SEPARATOR, \Drupal::service('extension.list.module')->getPath('widget_type')));
     for ($level = 0; $level < $levels; $level++) {
       $path = '..' . DIRECTORY_SEPARATOR . $path;
     }
@@ -296,7 +304,7 @@ final class WidgetRemoteRepository {
    *
    * Guzzle has changed from D8 to D9. We need to do some BC dance.
    *
-   * @param \GuzzleHttp\Promise\PromiseInterface[] $promises
+   * @param PromiseInterface[] $promises
    *   The promises.
    *
    * @return mixed
@@ -307,10 +315,10 @@ final class WidgetRemoteRepository {
   private function waitAllPromises(array $promises) {
     // phpcs:disable
     if (class_exists('\GuzzleHttp\Promise\Utils')) {
-      return \GuzzleHttp\Promise\Utils::all($promises)->wait();
+      return Utils::all($promises)->wait();
     }
     else {
-      return \GuzzleHttp\Promise\all($promises)->wait();
+      return all($promises)->wait();
     }
     // phpcs:enable
   }
diff --git a/tests/src/Kernel/WidgetQueueWorkerTest.php b/tests/src/Kernel/WidgetQueueWorkerTest.php
index 2aa9aec..c00b20d 100644
--- a/tests/src/Kernel/WidgetQueueWorkerTest.php
+++ b/tests/src/Kernel/WidgetQueueWorkerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\widget_ingestion\Kernel;
 
+use Drupal\widget_ingestion\Plugin\QueueWorker\WidgetQueueWorker;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\widget_type\Entity\WidgetRegistrySource;
 use Drupal\widget_type\Entity\WidgetType;
@@ -19,7 +20,7 @@ final class WidgetQueueWorkerTest extends KernelTestBase {
   /**
    * The system under test.
    *
-   * @var \Drupal\widget_ingestion\Plugin\QueueWorker\WidgetQueueWorker
+   * @var WidgetQueueWorker
    */
   private $theSut;
 
diff --git a/tests/src/Unit/WidgetRemoteRepositoryTest.php b/tests/src/Unit/WidgetRemoteRepositoryTest.php
index 1359552..b80895c 100644
--- a/tests/src/Unit/WidgetRemoteRepositoryTest.php
+++ b/tests/src/Unit/WidgetRemoteRepositoryTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\widget_ingestion\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -27,17 +28,18 @@ use Prophecy\Argument;
  */
 final class WidgetRemoteRepositoryTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The system under test.
    *
-   * @var \Drupal\widget_ingestion\WidgetRemoteRepository
+   * @var WidgetRemoteRepository
    */
   private $theSut;
 
   /**
    * The queue worker.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerInterface
+   * @var QueueWorkerInterface
    */
   private $queueWorker;
 
diff --git a/widget_ingestion.install b/widget_ingestion.install
index ce4777d..6fc52d5 100644
--- a/widget_ingestion.install
+++ b/widget_ingestion.install
@@ -29,7 +29,7 @@ function widget_ingestion_update_8101(&$sandbox) {
 /**
  * Converts the endpoint configuration into a multivalue.
  *
- * @throws \Drupal\Core\Utility\UpdateException
+ * @throws UpdateException
  *
  * @deprecated the configuration object will be deleted in 2.0.0 in favor of
  *   the configuration entities.
