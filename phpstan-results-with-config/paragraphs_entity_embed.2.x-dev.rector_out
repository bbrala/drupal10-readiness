modules/contrib/paragraphs_entity_embed/paragraphs_entity_embed.module
modules/contrib/paragraphs_entity_embed/src/Controller/ParagraphsEntityEmbedController.php
modules/contrib/paragraphs_entity_embed/src/EmbeddedParagraphsAccessControlHandler.php
modules/contrib/paragraphs_entity_embed/src/EmbeddedParagraphsForm.php
modules/contrib/paragraphs_entity_embed/src/Entity/EmbeddedParagraphs.php
modules/contrib/paragraphs_entity_embed/src/Form/ParagraphEmbedDialog.php
modules/contrib/paragraphs_entity_embed/src/Plugin/CKEditorPlugin/DrupalParagraph.php
modules/contrib/paragraphs_entity_embed/src/Plugin/EmbedType/Paragraph.php
modules/contrib/paragraphs_entity_embed/src/Plugin/Field/FieldWidget/EmbedParagraphsWidget.php
modules/contrib/paragraphs_entity_embed/src/Plugin/Filter/ParagraphEmbedFilter.php

6 files with changes
====================

1) modules/contrib/paragraphs_entity_embed/src/Plugin/Filter/ParagraphEmbedFilter.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity embed builder service.
    *
-   * @var \Drupal\entity_embed\EntityEmbedBuilderInterface
+   * @var EntityEmbedBuilderInterface
    */
   protected $builder;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   Drupal renderer.
-   * @param \Drupal\entity_embed\EntityEmbedBuilderInterface $builder
+   * @param EntityEmbedBuilderInterface $builder
    *   Embed builder interface.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer, EntityEmbedBuilderInterface $builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/paragraphs_entity_embed/src/Plugin/Field/FieldWidget/EmbedParagraphsWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_entity_embed\Plugin\Field\FieldWidget;

+use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * Returns the sorted allowed types for a entity reference field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   (optional) The field definition for which the allowed types should be
    *   returned, defaults to the current field.
    *
@@ @@
    */
   public function getAllowedTypes(FieldDefinitionInterface $field_definition = NULL) {
     $return_bundles = [];
-    /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface $selection_manager */
+    /** @var SelectionPluginManagerInterface $selection_manager */
     $selection_manager = \Drupal::service('plugin.manager.entity_reference_selection');
     $handler = $selection_manager->getSelectionHandler($this->fieldDefinition);
     $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo($this->getFieldSetting('target_type'));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/paragraphs_entity_embed/src/Plugin/EmbedType/Paragraph.php:39

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getDefaultIconUrl() {
-    return file_create_url(drupal_get_path('module', 'paragraphs_entity_embed') . '/js/plugins/drupalparagraph/paragraph.png');
+    return \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('paragraphs_entity_embed') . '/js/plugins/drupalparagraph/paragraph.png');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/paragraphs_entity_embed/src/Plugin/CKEditorPlugin/DrupalParagraph.php:19

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getFile() {
-    return drupal_get_path('module', 'paragraphs_entity_embed') . '/js/plugins/drupalparagraph/plugin.js';
+    return \Drupal::service('extension.list.module')->getPath('paragraphs_entity_embed') . '/js/plugins/drupalparagraph/plugin.js';
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/paragraphs_entity_embed/src/Form/ParagraphEmbedDialog.php:250

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|array
+   * @return AjaxResponse|array
    *   Ajax response with command for inserting the existing paragraph into the
    *   html or the form renderable on error.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/paragraphs_entity_embed/src/Controller/ParagraphsEntityEmbedController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\paragraphs_entity_embed\Controller;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
@@ @@
   /**
    * The embedded paragraphs storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $embeddedParagraphsStorage;

@@ @@
   /**
    * The database connection used.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a EmbeddedParagraphs object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $embedded_paragraphs_storage
+   * @param EntityStorageInterface $embedded_paragraphs_storage
    *   The custom embedded paragraphs storage.
    */
   public function __construct(EntityStorageInterface $embedded_paragraphs_storage, Connection $connection) {
@@ @@
   /**
    * Presents the embedded paragraphs creation form.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
-   * @param \Drupal\editor\EditorInterface|null $editor
+   * @param EditorInterface|null $editor
    *   The WYSIWYG editor.
-   * @param \Drupal\embed\EmbedButtonInterface|null $embed_button
+   * @param EmbedButtonInterface|null $embed_button
    *   The embed button.
    *
    * @return array
@@ @@
    *
    * @param string $embedded_paragraphs_uuid
    *   The UUID of Embedded paragraphs we are going to edit via CKE modal form.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
-   * @param \Drupal\editor\EditorInterface|null $editor
+   * @param EditorInterface|null $editor
    *   The WYSIWYG editor.
-   * @param \Drupal\embed\EmbedButtonInterface|null $embed_button
+   * @param EmbedButtonInterface|null $embed_button
    *   The embed button.
    *
    * @return array
@@ @@
    * If its inside iframe nothing is returned, otherwise we return html markup
    * for showing iframe.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
    * @return array|null
@@ @@
   /**
    * Returns a page title.
    *
-   * @param \Drupal\embed\EmbedButtonInterface|null $embed_button
+   * @param EmbedButtonInterface|null $embed_button
    *   The embed button.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Page title.
    */
   public function getEditTitle(EmbedButtonInterface $embed_button = NULL) {
@@ @@
   /**
    * Returns a page title.
    *
-   * @param \Drupal\embed\EmbedButtonInterface|null $embed_button
+   * @param EmbedButtonInterface|null $embed_button
    *   The embed button.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Page title.
    */
   public function getAddTitle(EmbedButtonInterface $embed_button = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

