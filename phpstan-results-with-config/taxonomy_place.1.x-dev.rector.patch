diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 5150444..daa5ff6 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -20,14 +20,14 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Entity File Manager.
    *
-   * @var Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $fieldManager;
 
   /**
    * Entity Type Bundle Info.
    *
-   * @var Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $bundleInfo;
 
diff --git a/src/TaxonomyPlaceCreator.php b/src/TaxonomyPlaceCreator.php
index 396ecbf..1a76a8e 100644
--- a/src/TaxonomyPlaceCreator.php
+++ b/src/TaxonomyPlaceCreator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\taxonomy_place;
 
+use Drupal\taxonomy\TermInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -20,50 +21,50 @@ class TaxonomyPlaceCreator {
   /**
    * Config factory.
    *
-   * @var Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Entity Type Manager.
    *
-   * @var Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The country repository.
    *
-   * @var \CommerceGuys\Addressing\Country\CountryRepositoryInterface
+   * @var CountryRepositoryInterface
    */
   protected $countryRepository;
 
   /**
    * The subdivision repository.
    *
-   * @var \CommerceGuys\Addressing\Subdivision\SubdivisionRepositoryInterface
+   * @var SubdivisionRepositoryInterface
    */
   protected $subdivisionRepository;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new TaxonomyPlaceCreator.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The Config Factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The Entity Type Manager.
-   * @param \CommerceGuys\Addressing\Country\CountryRepositoryInterface $country_repository
+   * @param CountryRepositoryInterface $country_repository
    *   The Country Repository.
-   * @param \CommerceGuys\Addressing\Subdivision\SubdivisionRepositoryInterface $subdivision_repository
+   * @param SubdivisionRepositoryInterface $subdivision_repository
    *   The Subdivision Repository.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The Module Handler.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, CountryRepositoryInterface $country_repository, SubdivisionRepositoryInterface $subdivision_repository, ModuleHandlerInterface $module_handler) {
@@ -103,7 +104,7 @@ class TaxonomyPlaceCreator {
   /**
    * A storage object.
    *
-   * @return Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The storage.
    */
   public function getStorage() {
@@ -117,7 +118,7 @@ class TaxonomyPlaceCreator {
    * for each part of the place (country, province, locality), with provinces
    * nested under the country, and localities nested under the province.
    *
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity that contains a field with place information.
    * @param string $field_name
    *   The address field on the entity that contains the place information.
@@ -185,7 +186,7 @@ class TaxonomyPlaceCreator {
    *   which will be used to find a match:
    *   [$country_code, $province_code, $locality].
    *
-   * @return Drupal\taxonomy\TermInterface
+   * @return TermInterface
    *   Returns term or FALSE if not found.
    */
   public function getPlaceTerm(array $place) {
@@ -246,7 +247,7 @@ class TaxonomyPlaceCreator {
    * @param string $format
    *   The format to use for any long text values.
    *
-   * @return Drupal\taxonomy\TermInterface
+   * @return TermInterface
    *   Returns a term.
    */
   protected function createTermFromValues(array $place, $format = 'basic_html') {
@@ -319,7 +320,7 @@ class TaxonomyPlaceCreator {
    * @param array $values
    *   A key/value array of values for the term.
    *
-   * @return Drupal\taxonomy\TermInterface
+   * @return TermInterface
    *   A Term.
    */
   public function createTerm(array $values) {
