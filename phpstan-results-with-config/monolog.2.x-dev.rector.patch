diff --git a/src/Logger/Handler/DrupalHandler.php b/src/Logger/Handler/DrupalHandler.php
index d6f6d95..08b01dc 100644
--- a/src/Logger/Handler/DrupalHandler.php
+++ b/src/Logger/Handler/DrupalHandler.php
@@ -17,7 +17,7 @@ class DrupalHandler extends AbstractProcessingHandler {
   /**
    * The wrapped Drupal logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected LoggerInterface $logger;
 
@@ -40,7 +40,7 @@ class DrupalHandler extends AbstractProcessingHandler {
   /**
    * Constructs a Default object.
    *
-   * @param \Psr\Log\LoggerInterface $wrapped
+   * @param LoggerInterface $wrapped
    *   The wrapped Drupal logger.
    * @param int|string $level
    *   The minimum logging level at which this handler will be triggered.
diff --git a/src/Logger/MonologLoggerChannelFactory.php b/src/Logger/MonologLoggerChannelFactory.php
index 150083c..3d7f9c7 100644
--- a/src/Logger/MonologLoggerChannelFactory.php
+++ b/src/Logger/MonologLoggerChannelFactory.php
@@ -4,6 +4,7 @@ declare(strict_types=1);
 
 namespace Drupal\monolog\Logger;
 
+use Drupal\Core\Logger\LoggerChannelInterface;
 use Psr\Log\NullLogger;
 use Psr\Log\LoggerInterface;
 use Monolog\Formatter\FormatterInterface;
@@ -34,7 +35,7 @@ class MonologLoggerChannelFactory implements LoggerChannelFactoryInterface, Cont
   /**
    * Array of all instantiated logger channels keyed by channel name.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface[]
+   * @var LoggerChannelInterface[]
    */
   protected array $channels = [];
 
@@ -80,7 +81,7 @@ class MonologLoggerChannelFactory implements LoggerChannelFactoryInterface, Cont
    * @param string $channel_name
    *   The name the logging channel.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   Describes a logger instance.
    *
    * @throws \RuntimeException
@@ -101,7 +102,7 @@ class MonologLoggerChannelFactory implements LoggerChannelFactoryInterface, Cont
   /**
    * Get the service container or null.
    *
-   * @return \Drupal\monolog\Logger\OptionalLogger
+   * @return OptionalLogger
    *   The service container or null.
    */
   private function getContainer(): OptionalLogger {
@@ -113,10 +114,10 @@ class MonologLoggerChannelFactory implements LoggerChannelFactoryInterface, Cont
   /**
    * Get the `monolog.channel_handlers` parameter or null.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The service container.
    *
-   * @return \Drupal\monolog\Logger\OptionalLogger
+   * @return OptionalLogger
    *   The `monolog.channel_handlers` parameter or null.
    */
   private function getParameters(ContainerInterface $container): OptionalLogger {
@@ -139,7 +140,7 @@ class MonologLoggerChannelFactory implements LoggerChannelFactoryInterface, Cont
    * @param string $channel_name
    *   The channel's name.
    *
-   * @return \Drupal\monolog\Logger\OptionalLogger
+   * @return OptionalLogger
    *   The configured handlers for the channel or null.
    */
   private function getHandlers(
@@ -209,7 +210,7 @@ class MonologLoggerChannelFactory implements LoggerChannelFactoryInterface, Cont
    * @param string $channel_name
    *   The channel's name.
    *
-   * @return \Drupal\monolog\Logger\OptionalLogger
+   * @return OptionalLogger
    *   A Logger instance or null.
    */
   private function getLogger(array $handlers, string $channel_name): OptionalLogger {
diff --git a/src/Logger/OptionalLogger.php b/src/Logger/OptionalLogger.php
index 14d3648..134d80d 100644
--- a/src/Logger/OptionalLogger.php
+++ b/src/Logger/OptionalLogger.php
@@ -73,7 +73,7 @@ class OptionalLogger {
   /**
    * Return the wrapped value or a NullLogger if value is NULL.
    *
-   * @return \Psr\Log\LoggerInterface
+   * @return LoggerInterface
    *   The wrapped value or a NullLogger if value is NULL.
    */
   public function get(): LoggerInterface {
diff --git a/src/Logger/Processor/AbstractRequestProcessor.php b/src/Logger/Processor/AbstractRequestProcessor.php
index b275996..025c0a6 100644
--- a/src/Logger/Processor/AbstractRequestProcessor.php
+++ b/src/Logger/Processor/AbstractRequestProcessor.php
@@ -15,14 +15,14 @@ abstract class AbstractRequestProcessor {
   /**
    * The Request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   private RequestStack $requestStack;
 
   /**
    * RequestProcessor constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The Request stack.
    */
   public function __construct(RequestStack $requestStack) {
@@ -32,7 +32,7 @@ abstract class AbstractRequestProcessor {
   /**
    * Return the current request.
    *
-   * @return null|\Symfony\Component\HttpFoundation\Request
+   * @return null|Request
    *   The current request.
    */
   public function getRequest(): ?Request {
diff --git a/src/Logger/Processor/CurrentUserProcessor.php b/src/Logger/Processor/CurrentUserProcessor.php
index cc39b06..4922434 100644
--- a/src/Logger/Processor/CurrentUserProcessor.php
+++ b/src/Logger/Processor/CurrentUserProcessor.php
@@ -15,14 +15,14 @@ class CurrentUserProcessor implements ProcessorInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected AccountProxyInterface $accountProxy;
 
   /**
    * Constructs a Default object.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account_proxy
+   * @param AccountProxyInterface $account_proxy
    *   The current user.
    */
   public function __construct(AccountProxyInterface $account_proxy) {
diff --git a/src/Logger/Processor/MessagePlaceholderProcessor.php b/src/Logger/Processor/MessagePlaceholderProcessor.php
index 48320a3..5445b03 100644
--- a/src/Logger/Processor/MessagePlaceholderProcessor.php
+++ b/src/Logger/Processor/MessagePlaceholderProcessor.php
@@ -15,14 +15,14 @@ class MessagePlaceholderProcessor implements ProcessorInterface {
   /**
    * The message's placeholders parser.
    *
-   * @var \Drupal\Core\Logger\LogMessageParserInterface
+   * @var LogMessageParserInterface
    */
   protected LogMessageParserInterface $parser;
 
   /**
    * Construct default object.
    *
-   * @param \Drupal\Core\Logger\LogMessageParserInterface $parser
+   * @param LogMessageParserInterface $parser
    *   The parser to use when extracting message variables.
    */
   public function __construct(LogMessageParserInterface $parser) {
diff --git a/tests/src/Unit/Logger/ChannelFactoryTest.php b/tests/src/Unit/Logger/ChannelFactoryTest.php
index 2523512..a8cc2f4 100644
--- a/tests/src/Unit/Logger/ChannelFactoryTest.php
+++ b/tests/src/Unit/Logger/ChannelFactoryTest.php
@@ -57,7 +57,7 @@ class ChannelFactoryTest extends UnitTestCase {
   /**
    * Get a mocked service container.
    *
-   * @return \Drupal\Core\DependencyInjection\Container
+   * @return Container
    *   A mocked service container.
    */
   protected function getMockContainer(
@@ -68,9 +68,7 @@ class ChannelFactoryTest extends UnitTestCase {
     $rotating_file_push_processor,
     $drupal_push_processor
   ): Container {
-    $container = $this->getMockBuilder('Drupal\Core\DependencyInjection\Container')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $container = $this->createMock('Drupal\Core\DependencyInjection\Container');
 
     $container->expects($this->any())
       ->method('hasParameter')
@@ -101,31 +99,23 @@ class ChannelFactoryTest extends UnitTestCase {
       ->method('has')
       ->willReturn(TRUE);
 
-    $rotatingFileHandler = $this->getMockBuilder(RotatingFileHandler::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $rotatingFileHandler = $this->createMock(RotatingFileHandler::class);
 
     $rotatingFileHandler->expects($this->exactly($rotating_file_set_formatter))
       ->method('setFormatter');
     $rotatingFileHandler->expects($this->exactly($rotating_file_push_processor))
       ->method('pushProcessor');
 
-    $drupalHandler = $this->getMockBuilder(DrupalHandler::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $drupalHandler = $this->createMock(DrupalHandler::class);
 
     $drupalHandler->expects($this->exactly($drupal_set_formatter))
       ->method('setFormatter');
     $drupalHandler->expects($this->exactly($drupal_push_processor))
       ->method('pushProcessor');
 
-    $lineFormatter = $this->getMockBuilder(LineFormatter::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $lineFormatter = $this->createMock(LineFormatter::class);
 
-    $jsonFormatter = $this->getMockBuilder(JsonFormatter::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $jsonFormatter = $this->createMock(JsonFormatter::class);
 
     $container->expects($this->exactly($container_get))
       ->method('get')
