diff --git a/modules/simplenews_demo/simplenews_demo.install b/modules/simplenews_demo/simplenews_demo.install
index eb3bc5e..6501944 100644
--- a/modules/simplenews_demo/simplenews_demo.install
+++ b/modules/simplenews_demo/simplenews_demo.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\simplenews\Subscription\SubscriptionManagerInterface;
 /**
  * @file
  * Simplenews_demo base install file.
@@ -62,7 +63,7 @@ function simplenews_demo_install() {
     ])
     ->save();
 
-  /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+  /** @var SubscriptionManagerInterface $subscription_manager */
   $subscription_manager = \Drupal::service('simplenews.subscription_manager');
 
   // Create some subscribers.
diff --git a/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php b/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php
index e75afc2..2603be0 100644
--- a/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php
+++ b/modules/simplenews_demo/tests/src/Functional/SimplenewsDemoTest.php
@@ -26,7 +26,7 @@ class SimplenewsDemoTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Install bartik theme.
     \Drupal::service('theme_installer')->install(['bartik']);
@@ -45,10 +45,22 @@ class SimplenewsDemoTest extends BrowserTestBase {
    */
   public function testInstalled() {
     // Check for the two subscription blocks.
-    $this->assertText('Simplenews multiple subscriptions');
-    $this->assertText('Stay informed - subscribe to our newsletters.');
-    $this->assertText('Simplenews subscription');
-    $this->assertText('Stay informed - subscribe to our newsletter.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Simplenews multiple subscriptions');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Stay informed - subscribe to our newsletters.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Simplenews subscription');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Stay informed - subscribe to our newsletter.');
 
     $this->drupalGet('admin/config/services/simplenews');
     $this->clickLink(t('Edit'));
@@ -60,29 +72,59 @@ class SimplenewsDemoTest extends BrowserTestBase {
     $this->assertEquals('simpletest@example.com', (string) $from_address->getValue());
     // Assert demo newsletters.
     $this->drupalGet('admin/config/services/simplenews');
-    $this->assertText(t('Press releases'));
-    $this->assertText(t('Special offers'));
-    $this->assertText(t('Weekly content update'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Press releases'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Special offers'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Weekly content update'));
     // Assert demo newsletters sent.
     $this->drupalGet('admin/content/simplenews');
     // @codingStandardsIgnoreLine
     //$this->assertText('Scheduled weekly content newsletter issue');
-    $this->assertText('Sent press releases');
-    $this->assertText('Unpublished press releases');
-    $this->assertText('Pending special offers');
-    $this->assertText('Stopped special offers');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Sent press releases');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Unpublished press releases');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Pending special offers');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Stopped special offers');
     // @codingStandardsIgnoreLine
     //$this->assertText('Scheduled weekly content newsletter issue - Week ');
-    $this->assertRaw(t('Newsletter issue sent to 2 subscribers, 0 errors.'));
-    $this->assertRaw(t('Newsletter issue is pending, 0 mails sent out of 3, 0 errors.'));
+    $this->assertSession()->responseContains(t('Newsletter issue sent to 2 subscribers, 0 errors.'));
+    $this->assertSession()->responseContains(t('Newsletter issue is pending, 0 mails sent out of 3, 0 errors.'));
     // Weekly newsletter.
     // @codingStandardsIgnoreLine
     //$this->assertRaw(t('Newsletter issue sent to 1 subscribers, 0 errors.'));
     // Assert demo subscribers.
     $this->drupalGet('admin/people/simplenews');
-    $this->assertText('a@example.com');
-    $this->assertText('b@example.com');
-    $this->assertText('demouser1@example.com');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('a@example.com');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('b@example.com');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('demouser1@example.com');
   }
 
 }
diff --git a/simplenews.api.php b/simplenews.api.php
index ac825e8..cb47506 100644
--- a/simplenews.api.php
+++ b/simplenews.api.php
@@ -108,7 +108,7 @@ function hook_simplenews_subscription_operations() {
 /**
  * Act after a newsletter category has been saved.
  *
- * @param \Drupal\simplenews\Entity\Newsletter $newsletter
+ * @param Newsletter $newsletter
  *   The newsletter object.
  *
  * @ingroup newsletter
@@ -120,7 +120,7 @@ function hook_simplenews_newsletter_update(Newsletter $newsletter) {
 /**
  * Act after a newsletter category has been deleted.
  *
- * @param \Drupal\simplenews\Entity\Newsletter $newsletter
+ * @param Newsletter $newsletter
  *   The newsletter object.
  *
  * @ingroup newsletter
@@ -132,7 +132,7 @@ function hook_simplenews_newsletter_delete(Newsletter $newsletter) {
 /**
  * Act after a newsletter category has been inserted.
  *
- * @param \Drupal\simplenews\Entity\Newsletter $newsletter
+ * @param Newsletter $newsletter
  *   The newsletter object.
  *
  * @ingroup newsletter
@@ -144,7 +144,7 @@ function hook_simplenews_newsletter_insert(Newsletter $newsletter) {
 /**
  * Act after a subscriber is updated.
  *
- * @param \Drupal\simplenews\Entity\Subscriber $subscriber
+ * @param Subscriber $subscriber
  *   The subscriber object including all subscriptions of this user.
  *
  * @ingroup subscriber
@@ -156,7 +156,7 @@ function hook_simplenews_subscriber_update(Subscriber $subscriber) {
 /**
  * Act after a new subscriber has been created.
  *
- * @param \Drupal\simplenews\Entity\Subscriber $subscriber
+ * @param Subscriber $subscriber
  *   The subscriber object including all subscriptions of this user.
  *
  * @ingroup subscriber
@@ -168,7 +168,7 @@ function hook_simplenews_subscriber_insert(Subscriber $subscriber) {
 /**
  * Act after a subscriber has been deleted.
  *
- * @param \Drupal\simplenews\Entity\Subscriber $subscriber
+ * @param Subscriber $subscriber
  *   The subscriber object including all subscriptions of this user.
  *
  * @ingroup subscriber
@@ -180,7 +180,7 @@ function hook_simplenews_subscriber_delete(Subscriber $subscriber) {
 /**
  * Invoked if a subscriber is subscribed to a newsletter.
  *
- * @param \Drupal\simplenews\Entity\Subscriber $subscriber
+ * @param Subscriber $subscriber
  *   The subscriber object including all subscriptions of this user.
  * @param string $subscription
  *   The subscription object for this specific subscribe action.
@@ -194,7 +194,7 @@ function hook_simplenews_subscribe_user(Subscriber $subscriber, $subscription) {
 /**
  * Invoked if a subscriber is unsubscribed from a newsletter.
  *
- * @param \Drupal\simplenews\Entity\Subscriber $subscriber
+ * @param Subscriber $subscriber
  *   The subscriber object including all subscriptions of this user.
  * @param string $subscription
  *   The subscription object for this specific unsubscribe action.
diff --git a/simplenews.module b/simplenews.module
index c07c3ca..829acf0 100644
--- a/simplenews.module
+++ b/simplenews.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\simplenews\Subscription\SubscriptionManagerInterface;
+use Drupal\simplenews\Mail\MailBuilder;
+use Drupal\Core\Entity\FieldableEntityInterface;
 /**
  * @file
  * Simplenews node handling, sent email, newsletter block and general hooks.
@@ -395,7 +398,7 @@ function simplenews_form_user_register_form_alter(&$form, FormStateInterface $fo
 function simplenews_user_profile_form_submit($form, FormStateInterface $form_state) {
   $account = $form_state->getFormObject()->getEntity();
   // Process subscription check boxes.
-  /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+  /** @var SubscriptionManagerInterface $subscription_manager */
   $subscription_manager = \Drupal::service('simplenews.subscription_manager');
   // Invalid input (non-array) could result in a NULL return value, ensure to
   // only load and subscribe if valid input is provided.
@@ -476,7 +479,7 @@ function simplenews_user_login(UserInterface $account) {
  * @see simplenews_user_insert()
  */
 function simplenews_user_presave(UserInterface $account) {
-  /** @var \Drupal\simplenews\Entity\Subscriber $subscriber */
+  /** @var Subscriber $subscriber */
   if ($subscriber = Subscriber::loadByUid($account->id())) {
     $subscriber->fillFromAccount($account)->save();
   }
@@ -549,7 +552,7 @@ function simplenews_user_view(array &$build, UserInterface $account, EntityViewD
  * Implements hook_mail().
  */
 function simplenews_mail($key, &$message, $params) {
-  /** @var \Drupal\simplenews\Mail\MailBuilder $builder */
+  /** @var MailBuilder $builder */
   $builder = \Drupal::service('simplenews.mail_builder');
 
   switch ($key) {
@@ -718,7 +721,7 @@ function simplenews_help($route_name, RouteMatchInterface $route_match) {
 /**
  * Generates the hash key used for subscribe/unsubscribe link.
  */
-function simplenews_generate_hash($mail, $action = '', $timestamp = REQUEST_TIME) {
+function simplenews_generate_hash($mail, $action = '', $timestamp = \Drupal::time()->getRequestTime()) {
   $data = $mail . \Drupal::service('private_key')->get() . $action . $timestamp;
   return Crypt::hashBase64($data);
 }
@@ -806,7 +809,7 @@ function template_preprocess_simplenews_newsletter_body(&$variables) {
 
   $entity_type = $elements['#entity_type'];
 
-  /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
+  /** @var FieldableEntityInterface $entity */
   $entity = !empty($elements['#' . $entity_type]) ? $elements['#' . $entity_type] : $elements['#entity'];
   if ($elements['#language'] && $entity->hasTranslation($elements['#language'])) {
     $entity = $entity->getTranslation($elements['#language']);
diff --git a/simplenews.tokens.inc b/simplenews.tokens.inc
index 8cc135e..eeed84e 100644
--- a/simplenews.tokens.inc
+++ b/simplenews.tokens.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\simplenews\Entity\Subscriber;
 /**
  * @file
  * Token related hook implementations.
@@ -84,7 +85,7 @@ function simplenews_tokens($type, $tokens, $data, $options, BubbleableMetadata $
       if (!isset($data['simplenews_subscriber'])) {
         return;
       }
-      /** @var \Drupal\simplenews\Entity\Subscriber $subscriber */
+      /** @var Subscriber $subscriber */
       $subscriber = $data['simplenews_subscriber'];
       $newsletter = isset($data['newsletter']) ? $data['newsletter'] : NULL;
       $language = $subscriber->getLangcode();
@@ -92,7 +93,7 @@ function simplenews_tokens($type, $tokens, $data, $options, BubbleableMetadata $
       $url_arguments = ['absolute' => TRUE, 'langcode' => $language];
 
       foreach ($tokens as $name => $original) {
-        $route_parameters = ['snid' => $subscriber->id(), 'timestamp' => REQUEST_TIME];
+        $route_parameters = ['snid' => $subscriber->id(), 'timestamp' => \Drupal::time()->getRequestTime()];
         switch ($name) {
           case 'subscribe-url':
             $hash = simplenews_generate_hash($subscriber->getMail(), 'add');
diff --git a/src/Commands/SimplenewsCommands.php b/src/Commands/SimplenewsCommands.php
index f1b894e..600f6d8 100644
--- a/src/Commands/SimplenewsCommands.php
+++ b/src/Commands/SimplenewsCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Commands;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\simplenews\Mail\MailerInterface;
 use Drupal\simplenews\Spool\SpoolStorageInterface;
@@ -24,32 +25,32 @@ class SimplenewsCommands extends DrushCommands {
   /**
    * The simplenews config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $simplenewsConfig;
 
   /**
    * The spool storage.
    *
-   * @var \Drupal\simplenews\Spool\SpoolStorageInterface
+   * @var SpoolStorageInterface
    */
   protected $spoolStorage;
 
   /**
    * The mailer service.
    *
-   * @var \Drupal\simplenews\Mail\MailerInterface
+   * @var MailerInterface
    */
   protected $mailer;
 
   /**
    * SimplenewsCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\simplenews\Spool\SpoolStorageInterface $spool_storage
+   * @param SpoolStorageInterface $spool_storage
    *   The spool storage.
-   * @param \Drupal\simplenews\Mail\MailerInterface $mailer
+   * @param MailerInterface $mailer
    *   The mailer service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, SpoolStorageInterface $spool_storage, MailerInterface $mailer) {
diff --git a/src/Controller/ConfirmationController.php b/src/Controller/ConfirmationController.php
index 39b766e..ab0eff3 100644
--- a/src/Controller/ConfirmationController.php
+++ b/src/Controller/ConfirmationController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Controller;
 
+use Drupal\simplenews\Subscription\SubscriptionManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Url;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ -57,7 +58,7 @@ class ConfirmationController extends ControllerBase {
     if ($subscriber && $hash == simplenews_generate_hash($subscriber->getMail(), 'combined' . serialize($subscriber->getChanges()), $timestamp)) {
       // If the hash is valid but timestamp is too old, display form to request
       // a new hash.
-      if ($timestamp < REQUEST_TIME - $config->get('hash_expiration')) {
+      if ($timestamp < \Drupal::time()->getRequestTime() - $config->get('hash_expiration')) {
         $context = [
           'simplenews_subscriber' => $subscriber,
         ];
@@ -74,7 +75,7 @@ class ConfirmationController extends ControllerBase {
       }
       else {
 
-        /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+        /** @var SubscriptionManagerInterface $subscription_manager */
         $subscription_manager = \Drupal::service('simplenews.subscription_manager');
 
         // Redirect and display message if no changes are available.
@@ -159,7 +160,7 @@ class ConfirmationController extends ControllerBase {
 
       // If the hash is valid but timestamp is too old, display form to request
       // a new hash.
-      if ($timestamp < REQUEST_TIME - $config->get('hash_expiration')) {
+      if ($timestamp < \Drupal::time()->getRequestTime() - $config->get('hash_expiration')) {
         $context = [
           'simplenews_subscriber' => $subscriber,
           'newsletter' => $newsletter,
@@ -186,7 +187,7 @@ class ConfirmationController extends ControllerBase {
       }
       else {
 
-        /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+        /** @var SubscriptionManagerInterface $subscription_manager */
         $subscription_manager = \Drupal::service('simplenews.subscription_manager');
 
         if ($action == 'remove') {
diff --git a/src/Entity/Newsletter.php b/src/Entity/Newsletter.php
index 0ac994b..0b38e95 100644
--- a/src/Entity/Newsletter.php
+++ b/src/Entity/Newsletter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Entity;
 
+use Drupal\simplenews\Subscription\SubscriptionStorageInterface;
 use Drupal\block\Entity\Block;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -172,7 +173,7 @@ class Newsletter extends ConfigEntityBase implements NewsletterInterface {
   public static function postDelete(EntityStorageInterface $storage, array $entities) {
     parent::postDelete($storage, $entities);
 
-    /** @var \Drupal\simplenews\Subscription\SubscriptionStorageInterface $subscription_storage */
+    /** @var SubscriptionStorageInterface $subscription_storage */
     $subscription_storage = \Drupal::entityTypeManager()
       ->getStorage('simplenews_subscriber');
 
diff --git a/src/Entity/Subscriber.php b/src/Entity/Subscriber.php
index 2587d94..0d211e4 100644
--- a/src/Entity/Subscriber.php
+++ b/src/Entity/Subscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Entity;
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -241,7 +242,7 @@ class Subscriber extends ContentEntityBase implements SubscriberInterface {
   /**
    * {@inheritdoc}
    */
-  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = REQUEST_TIME) {
+  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime()) {
     if ($subscription = $this->getSubscription($newsletter_id)) {
       $subscription->status = $status;
     }
@@ -262,7 +263,7 @@ class Subscriber extends ContentEntityBase implements SubscriberInterface {
   /**
    * {@inheritdoc}
    */
-  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = REQUEST_TIME) {
+  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime()) {
     if ($subscription = $this->getSubscription($newsletter_id)) {
       $subscription->status = SIMPLENEWS_SUBSCRIPTION_STATUS_UNSUBSCRIBED;
     }
@@ -308,7 +309,7 @@ class Subscriber extends ContentEntityBase implements SubscriberInterface {
   /**
    * Identifies configurable fields shared with a user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user to match fields against.
    *
    * @return string[]
@@ -321,7 +322,7 @@ class Subscriber extends ContentEntityBase implements SubscriberInterface {
     if (\Drupal::config('simplenews.settings')->get('subscriber.sync_fields')) {
       // Find any fields sharing name and type.
       foreach ($this->getFieldDefinitions() as $field_definition) {
-        /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+        /** @var FieldDefinitionInterface $field_definition */
         $field_name = $field_definition->getName();
         $user_field = $user->getFieldDefinition($field_name);
         if ($field_definition->getTargetBundle() && isset($user_field) && $user_field->getType() == $field_definition->getType()) {
diff --git a/src/EventSubscriber/MigrationSubscriber.php b/src/EventSubscriber/MigrationSubscriber.php
index ecac596..f0f2288 100644
--- a/src/EventSubscriber/MigrationSubscriber.php
+++ b/src/EventSubscriber/MigrationSubscriber.php
@@ -25,23 +25,23 @@ class MigrationSubscriber implements EventSubscriberInterface {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * Constructs a new migration subscriber.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(EntityFieldManagerInterface $entityFieldManager, EntityDisplayRepositoryInterface $entity_display_repository) {
@@ -52,7 +52,7 @@ class MigrationSubscriber implements EventSubscriberInterface {
   /**
    * Create simplenews field if applicable.
    *
-   * @param \Drupal\migrate\Event\MigratePostRowSaveEvent $event
+   * @param MigratePostRowSaveEvent $event
    *   The event object.
    */
   public function onMigrationPostRowSave(MigratePostRowSaveEvent $event) {
diff --git a/src/Form/ConfirmMultiForm.php b/src/Form/ConfirmMultiForm.php
index 0db2ebf..fca1c2c 100644
--- a/src/Form/ConfirmMultiForm.php
+++ b/src/Form/ConfirmMultiForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Form;
 
+use Drupal\simplenews\Subscription\SubscriptionManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -49,7 +50,7 @@ class ConfirmMultiForm extends ConfirmFormBase {
       '#markup' => '<p>' . $this->t('Are you sure you want to confirm the following subscription changes for %user?', ['%user' => simplenews_mask_mail($subscriber->getMail())]) . "<p>\n",
     ];
 
-    /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+    /** @var SubscriptionManagerInterface $subscription_manager */
     $subscription_manager = \Drupal::service('simplenews.subscription_manager');
 
     $form['changes'] = [
diff --git a/src/Form/NodeTabForm.php b/src/Form/NodeTabForm.php
index 752747e..32a594d 100644
--- a/src/Form/NodeTabForm.php
+++ b/src/Form/NodeTabForm.php
@@ -20,41 +20,41 @@ class NodeTabForm extends FormBase {
   /**
    * The spool storage.
    *
-   * @var \Drupal\simplenews\Spool\SpoolStorageInterface
+   * @var SpoolStorageInterface
    */
   protected $spoolStorage;
 
   /**
    * The currently authenticated user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The simplenews mailer.
    *
-   * @var \Drupal\simplenews\Mail\MailerInterface
+   * @var MailerInterface
    */
   protected $mailer;
 
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;
 
   /**
    * Constructs a new NodeTabForm.
    *
-   * @param \Drupal\simplenews\Spool\SpoolStorageInterface $spool_storage
+   * @param SpoolStorageInterface $spool_storage
    *   The spool storage.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The currently authenticated user.
-   * @param \Drupal\simplenews\Mail\MailerInterface $simplenews_mailer
+   * @param MailerInterface $simplenews_mailer
    *   The simplenews mailer service.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator.
    */
   public function __construct(SpoolStorageInterface $spool_storage, AccountInterface $current_user, MailerInterface $simplenews_mailer, EmailValidatorInterface $email_validator) {
@@ -178,7 +178,7 @@ class NodeTabForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function validateTestAddress(array $form, FormStateInterface $form_state) {
@@ -204,7 +204,7 @@ class NodeTabForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function submitTestMail(array &$form, FormStateInterface $form_state) {
@@ -223,7 +223,7 @@ class NodeTabForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function submitStop(array &$form, FormStateInterface $form_state) {
@@ -233,10 +233,10 @@ class NodeTabForm extends FormBase {
   /**
    * Checks access for the simplenews node tab.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   The node where the tab should be added.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   An access result object.
    */
   public function checkAccess(NodeInterface $node) {
diff --git a/src/Form/RequestHashForm.php b/src/Form/RequestHashForm.php
index b58f678..3891dfb 100644
--- a/src/Form/RequestHashForm.php
+++ b/src/Form/RequestHashForm.php
@@ -51,7 +51,7 @@ class RequestHashForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $key
    *   The mail key to be sent.
diff --git a/src/Form/SubscriberMassSubscribeForm.php b/src/Form/SubscriberMassSubscribeForm.php
index 2628b94..4621d86 100644
--- a/src/Form/SubscriberMassSubscribeForm.php
+++ b/src/Form/SubscriberMassSubscribeForm.php
@@ -20,32 +20,32 @@ class SubscriberMassSubscribeForm extends FormBase {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The subscription manager.
    *
-   * @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface
+   * @var SubscriptionManagerInterface
    */
   protected $subscriptionManager;
 
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;
 
   /**
    * Constructs a new SubscriberMassSubscribeForm.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager
+   * @param SubscriptionManagerInterface $subscription_manager
    *   The subscription manager.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator.
    */
   public function __construct(LanguageManagerInterface $language_manager, SubscriptionManagerInterface $subscription_manager, EmailValidatorInterface $email_validator) {
@@ -152,7 +152,7 @@ class SubscriberMassSubscribeForm extends FormBase {
       if ($this->emailValidator->isValid($email)) {
         $subscriber = Subscriber::loadByMail($email);
 
-        /** @var \Drupal\simplenews\Entity\Newsletter $newsletter */
+        /** @var Newsletter $newsletter */
         foreach (Newsletter::loadMultiple($checked_newsletters) as $newsletter) {
           // If there is a valid subscriber, check if there is a subscription
           // for the current newsletter and if this subscription has the status
diff --git a/src/Form/SubscriberMassUnsubscribeForm.php b/src/Form/SubscriberMassUnsubscribeForm.php
index b7d644c..be38dd5 100644
--- a/src/Form/SubscriberMassUnsubscribeForm.php
+++ b/src/Form/SubscriberMassUnsubscribeForm.php
@@ -17,23 +17,23 @@ class SubscriberMassUnsubscribeForm extends FormBase {
   /**
    * The subscription manager.
    *
-   * @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface
+   * @var SubscriptionManagerInterface
    */
   protected $subscriptionManager;
 
   /**
    * The email validator.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;
 
   /**
    * Constructs a new SubscriberMassUnsubscribeForm.
    *
-   * @param \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager
+   * @param SubscriptionManagerInterface $subscription_manager
    *   The subscription manager.
-   * @param \Drupal\Component\Utility\EmailValidatorInterface $email_validator
+   * @param EmailValidatorInterface $email_validator
    *   The email validator.
    */
   public function __construct(SubscriptionManagerInterface $subscription_manager, EmailValidatorInterface $email_validator) {
diff --git a/src/Form/SubscriptionsAccountForm.php b/src/Form/SubscriptionsAccountForm.php
index 824589b..dd569fd 100644
--- a/src/Form/SubscriptionsAccountForm.php
+++ b/src/Form/SubscriptionsAccountForm.php
@@ -47,10 +47,10 @@ class SubscriptionsAccountForm extends SubscriptionsFormBase {
   /**
    * Checks access for the simplenews account form.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The account to use in the form.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   An access result object.
    */
   public function checkAccess(UserInterface $user) {
diff --git a/src/Form/SubscriptionsFormBase.php b/src/Form/SubscriptionsFormBase.php
index 5147482..e65e28e 100644
--- a/src/Form/SubscriptionsFormBase.php
+++ b/src/Form/SubscriptionsFormBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simplenews\Form;
 
+use Drupal\simplenews\SubscriptionWidgetInterface;
+use Drupal\simplenews\Subscription\SubscriptionManagerInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -37,7 +39,7 @@ abstract class SubscriptionsFormBase extends ContentEntityForm {
   /**
    * The newsletters available to select from.
    *
-   * @var \Drupal\simplenews\Entity\Newsletter[]
+   * @var Newsletter[]
    */
   protected $newsletters;
 
@@ -63,7 +65,7 @@ abstract class SubscriptionsFormBase extends ContentEntityForm {
   /**
    * Returns the newsletters available to select from.
    *
-   * @return \Drupal\simplenews\Entity\Newsletter[]
+   * @return Newsletter[]
    *   The newsletters available to select from, indexed by ID.
    */
   public function getNewsletters() {
@@ -103,7 +105,7 @@ abstract class SubscriptionsFormBase extends ContentEntityForm {
   /**
    * Returns a message to display to the user upon successful form submission.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    * @param string $op
    *   A string equal to either ::SUBMIT_UPDATE, ::SUBMIT_SUBSCRIBE or
@@ -119,10 +121,10 @@ abstract class SubscriptionsFormBase extends ContentEntityForm {
   /**
    * Returns the renderer for the 'subscriptions' field.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\simplenews\SubscriptionWidgetInterface
+   * @return SubscriptionWidgetInterface
    *   The widget.
    */
   protected function getSubscriptionWidget(FormStateInterface $form_state) {
@@ -264,11 +266,11 @@ abstract class SubscriptionsFormBase extends ContentEntityForm {
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitSubscribe(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+    /** @var SubscriptionManagerInterface $subscription_manager */
     $subscription_manager = \Drupal::service('simplenews.subscription_manager');
     foreach ($this->extractNewsletterIds($form_state, TRUE) as $newsletter_id) {
       $subscription_manager->subscribe($this->entity->getMail(), $newsletter_id, NULL, 'website');
@@ -282,11 +284,11 @@ abstract class SubscriptionsFormBase extends ContentEntityForm {
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitUnsubscribe(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+    /** @var SubscriptionManagerInterface $subscription_manager */
     $subscription_manager = \Drupal::service('simplenews.subscription_manager');
     foreach ($this->extractNewsletterIds($form_state, TRUE) as $newsletter_id) {
       $subscription_manager->unsubscribe($this->entity->getMail(), $newsletter_id, NULL, 'website');
@@ -300,13 +302,13 @@ abstract class SubscriptionsFormBase extends ContentEntityForm {
    *
    * @param array $form
    *   The form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function submitUpdate(array $form, FormStateInterface $form_state) {
     // We first subscribe, then unsubscribe. This prevents deletion of
     // subscriptions when unsubscribed from the newsletter.
-    /** @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager */
+    /** @var SubscriptionManagerInterface $subscription_manager */
     $subscription_manager = \Drupal::service('simplenews.subscription_manager');
     foreach ($this->extractNewsletterIds($form_state, TRUE) as $newsletter_id) {
       $subscription_manager->subscribe($this->entity->getMail(), $newsletter_id, FALSE, 'website');
@@ -323,7 +325,7 @@ abstract class SubscriptionsFormBase extends ContentEntityForm {
   /**
    * Extracts selected/deselected newsletters IDs from the subscriptions widget.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    * @param bool $selected
    *   Whether to extract selected (TRUE) or deselected (FALSE) newsletter IDs.
diff --git a/src/Mail/MailBuilder.php b/src/Mail/MailBuilder.php
index d5a1649..033a543 100644
--- a/src/Mail/MailBuilder.php
+++ b/src/Mail/MailBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Mail;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Utility\Token;
 use Drupal\simplenews\Subscription\SubscriptionManagerInterface;
@@ -14,32 +15,32 @@ class MailBuilder implements MailBuilderInterface {
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The subscription manager.
    *
-   * @var \Drupal\simplenews\Subscription\SubscriptionManagerInterface
+   * @var SubscriptionManagerInterface
    */
   protected $subscriptionManager;
 
   /**
    * Constructs a MailBuilder.
    *
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\simplenews\Subscription\SubscriptionManagerInterface $subscription_manager
+   * @param SubscriptionManagerInterface $subscription_manager
    *   The subscription manager.
    */
   public function __construct(Token $token, ConfigFactoryInterface $config_factory, SubscriptionManagerInterface $subscription_manager) {
diff --git a/src/Mail/MailBuilderInterface.php b/src/Mail/MailBuilderInterface.php
index 3998a13..6663cbb 100644
--- a/src/Mail/MailBuilderInterface.php
+++ b/src/Mail/MailBuilderInterface.php
@@ -12,7 +12,7 @@ interface MailBuilderInterface {
    *
    * @param array $message
    *   Message array as used by hook_mail().
-   * @param \Drupal\simplenews\Mail\MailInterface $mail
+   * @param MailInterface $mail
    *   The mail object.
    */
   public function buildNewsletterMail(array &$message, MailInterface $mail);
diff --git a/src/Mail/MailCacheInterface.php b/src/Mail/MailCacheInterface.php
index 1075421..e52a862 100644
--- a/src/Mail/MailCacheInterface.php
+++ b/src/Mail/MailCacheInterface.php
@@ -16,7 +16,7 @@ interface MailCacheInterface {
    * implementations are responsible to create a unique cache key themself using
    * the $mail. For example based on the node id and the language.
    *
-   * @param \Drupal\simplenews\Mail\MailInterface $mail
+   * @param MailInterface $mail
    *   The mail object.
    * @param string $group
    *   Group of the cache key, which allows cache implementations to decide what
@@ -40,7 +40,7 @@ interface MailCacheInterface {
    * implementations are responsible to create a unique cache key themself using
    * the $mail. For example based on the entity id and the language.
    *
-   * @param \Drupal\simplenews\Mail\MailInterface $mail
+   * @param MailInterface $mail
    *   The mail object.
    * @param string $group
    *   Group of the cache key, which allows cache implementations to decide what
diff --git a/src/Mail/MailCacheStatic.php b/src/Mail/MailCacheStatic.php
index ea8edaa..05ecc93 100644
--- a/src/Mail/MailCacheStatic.php
+++ b/src/Mail/MailCacheStatic.php
@@ -22,7 +22,7 @@ abstract class MailCacheStatic implements MailCacheInterface {
   /**
    * Returns the cache identifier for the mail.
    *
-   * @param \Drupal\simplenews\Mail\MailInterface $mail
+   * @param MailInterface $mail
    *   The mail object.
    *
    * @return string
@@ -60,7 +60,7 @@ abstract class MailCacheStatic implements MailCacheInterface {
   /**
    * Return if the requested element should be cached.
    *
-   * @param \Drupal\simplenews\Mail\MailInterface $mail
+   * @param MailInterface $mail
    *   The mail object.
    * @param string $group
    *   Group of the cache key, which allows cache implementations to decide what
diff --git a/src/Mail/MailEntity.php b/src/Mail/MailEntity.php
index 733f417..523dba7 100644
--- a/src/Mail/MailEntity.php
+++ b/src/Mail/MailEntity.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Mail;
 
+use Drupal\simplenews\NewsletterInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -19,7 +20,7 @@ class MailEntity implements MailInterface {
   /**
    * The newsletter issue.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $issue;
 
@@ -33,14 +34,14 @@ class MailEntity implements MailInterface {
   /**
    * The newsletter.
    *
-   * @var \Drupal\simplenews\NewsletterInterface
+   * @var NewsletterInterface
    */
   protected $newsletter;
 
   /**
    * The subscriber and therefore recipient of this mail.
    *
-   * @var \Drupal\simplenews\SubscriberInterface
+   * @var SubscriberInterface
    */
   protected $subscriber;
 
@@ -74,7 +75,7 @@ class MailEntity implements MailInterface {
   /**
    * Returns the corresponding newsletter.
    *
-   * @return \Drupal\simplenews\NewsletterInterface
+   * @return NewsletterInterface
    *   The newsletter.
    */
   public function getNewsletter() {
diff --git a/src/Mail/MailInterface.php b/src/Mail/MailInterface.php
index 3917610..6293aa0 100644
--- a/src/Mail/MailInterface.php
+++ b/src/Mail/MailInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simplenews\Mail;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\simplenews\SubscriberInterface;
 /**
  * A newsletter mail.
  *
@@ -12,7 +14,7 @@ interface MailInterface {
   /**
    * Returns the newsletter issue entity.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   Newsletter issue entity.
    */
   public function getIssue();
@@ -20,7 +22,7 @@ interface MailInterface {
   /**
    * Returns the subscriber object.
    *
-   * @return \Drupal\simplenews\SubscriberInterface
+   * @return SubscriberInterface
    *   Subscriber object.
    */
   public function getSubscriber();
diff --git a/src/Mail/Mailer.php b/src/Mail/Mailer.php
index 44b850b..36da490 100644
--- a/src/Mail/Mailer.php
+++ b/src/Mail/Mailer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Mail;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -55,49 +56,49 @@ class Mailer implements MailerInterface {
   /**
    * The simplenews spool storage.
    *
-   * @var \Drupal\simplenews\Spool\SpoolStorageInterface
+   * @var SpoolStorageInterface
    */
   protected $spoolStorage;
 
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * Account switcher.
    *
-   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   * @var AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
   /**
    * Lock service.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
@@ -111,55 +112,55 @@ class Mailer implements MailerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The simplenews mail cache.
    *
-   * @var \Drupal\simplenews\Mail\MailCacheInterface
+   * @var MailCacheInterface
    */
   protected $mailCache;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a Mailer.
    *
-   * @param \Drupal\simplenews\Spool\SpoolStorageInterface $spool_storage
+   * @param SpoolStorageInterface $spool_storage
    *   The simplenews spool storage.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mail_manager
+   * @param MailManagerInterface $mail_manager
    *   The mail manager.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountSwitcherInterface $account_switcher
+   * @param AccountSwitcherInterface $account_switcher
    *   Account switcher.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   Lock service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\simplenews\Mail\MailCacheInterface $mail_cache
+   * @param MailCacheInterface $mail_cache
    *   The simplenews mail cache.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(SpoolStorageInterface $spool_storage, MailManagerInterface $mail_manager, StateInterface $state, LoggerInterface $logger, AccountSwitcherInterface $account_switcher, LockBackendInterface $lock, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, MailCacheInterface $mail_cache, ModuleHandlerInterface $module_handler) {
@@ -309,7 +310,7 @@ class Mailer implements MailerInterface {
         $this->logger->notice('%success emails sent, %skipped skipped, %fail failed permanently, %retry failed retrying.', $log_array);
       }
 
-      $this->state->set('simplenews.last_cron', REQUEST_TIME);
+      $this->state->set('simplenews.last_cron', \Drupal::time()->getRequestTime());
       $this->state->set('simplenews.last_sent', $freq[SpoolStorageInterface::STATUS_DONE]);
 
       $this->accountSwitcher->switchBack();
diff --git a/src/Mail/MailerInterface.php b/src/Mail/MailerInterface.php
index 750daed..c09251a 100644
--- a/src/Mail/MailerInterface.php
+++ b/src/Mail/MailerInterface.php
@@ -48,7 +48,7 @@ interface MailerInterface {
   /**
    * Send a node to an email address.
    *
-   * @param \Drupal\simplenews\Mail\MailInterface $mail
+   * @param MailInterface $mail
    *   The mail object.
    *
    * @return int
@@ -59,7 +59,7 @@ interface MailerInterface {
   /**
    * Send test version of newsletter.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $issue
+   * @param ContentEntityInterface $issue
    *   The newsletter issue to be sent.
    * @param array $test_addresses
    *   List of addresses to send the newsletter to.
diff --git a/src/Plugin/Block/SimplenewsSubscriptionBlock.php b/src/Plugin/Block/SimplenewsSubscriptionBlock.php
index 1f8a53f..1cc4d3a 100644
--- a/src/Plugin/Block/SimplenewsSubscriptionBlock.php
+++ b/src/Plugin/Block/SimplenewsSubscriptionBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Plugin\Block;
 
+use Drupal\simplenews\Form\SubscriptionsBlockForm;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -26,14 +27,14 @@ class SimplenewsSubscriptionBlock extends BlockBase implements ContainerFactoryP
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
@@ -46,9 +47,9 @@ class SimplenewsSubscriptionBlock extends BlockBase implements ContainerFactoryP
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   The form builder object.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, FormBuilderInterface $formBuilder) {
@@ -160,7 +161,7 @@ class SimplenewsSubscriptionBlock extends BlockBase implements ContainerFactoryP
    * {@inheritdoc}
    */
   public function build() {
-    /** @var \Drupal\simplenews\Form\SubscriptionsBlockForm $form_object */
+    /** @var SubscriptionsBlockForm $form_object */
     $form_object = $this->entityTypeManager->getFormObject('simplenews_subscriber', 'block');
     $form_object->setUniqueId($this->configuration['unique_id']);
     $form_object->setNewsletterIds($this->configuration['newsletters']);
diff --git a/src/Plugin/Field/FieldWidget/IssueWidget.php b/src/Plugin/Field/FieldWidget/IssueWidget.php
index 288c3e4..1cfff06 100644
--- a/src/Plugin/Field/FieldWidget/IssueWidget.php
+++ b/src/Plugin/Field/FieldWidget/IssueWidget.php
@@ -29,7 +29,7 @@ class IssueWidget extends OptionsSelectWidget implements ContainerFactoryPluginI
   /**
    * The spool storage.
    *
-   * @var \Drupal\simplenews\Spool\SpoolStorageInterface
+   * @var SpoolStorageInterface
    */
   protected $spoolStorage;
 
@@ -47,15 +47,15 @@ class IssueWidget extends OptionsSelectWidget implements ContainerFactoryPluginI
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\simplenews\Spool\SpoolStorageInterface $spool_storage
+   * @param SpoolStorageInterface $spool_storage
    *   The spool storage.
-   * @param \Drupal\simplenews\recipientHandler\RecipientHandlerManager $recipient_handler_manager
+   * @param RecipientHandlerManager $recipient_handler_manager
    *   The recipient handler manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, SpoolStorageInterface $spool_storage, RecipientHandlerManager $recipient_handler_manager) {
diff --git a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php
index 66c64e4..49a9fb0 100644
--- a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php
+++ b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simplenews\Plugin\simplenews\RecipientHandler;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\simplenews\RecipientHandler\RecipientHandlerInterface;
 use Drupal\simplenews\Spool\SpoolStorageInterface;
@@ -14,14 +16,14 @@ abstract class RecipientHandlerBase extends PluginBase implements RecipientHandl
   /**
    * The newsletter issue.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $issue;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
@@ -135,7 +137,7 @@ abstract class RecipientHandlerBase extends PluginBase implements RecipientHandl
       'entity_type' => $this->issue->getEntityTypeId(),
       'entity_id' => $this->issue->id(),
       'status' => SpoolStorageInterface::STATUS_PENDING,
-      'timestamp' => REQUEST_TIME,
+      'timestamp' => \Drupal::time()->getRequestTime(),
       'newsletter_id' => $this->getNewsletterId(),
     ];
 
diff --git a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerEntityBase.php b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerEntityBase.php
index 6f3a565..6bcbbc9 100644
--- a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerEntityBase.php
+++ b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerEntityBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Plugin\simplenews\RecipientHandler;
 
+use Drupal\Core\Entity\Query\QueryInterface;
 /**
  * Base for Recipient Handler classes based on EntityQuery.
  */
@@ -28,7 +29,7 @@ abstract class RecipientHandlerEntityBase extends RecipientHandlerBase {
   /**
    * Build the query that gets the list of subscribers.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   Entity query on 'simplenews_subscriber' or 'user'.
    */
   abstract protected function buildEntityQuery();
diff --git a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php
index 7f34c4a..b6ed804 100644
--- a/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php
+++ b/src/Plugin/simplenews/RecipientHandler/RecipientHandlerSelectBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Plugin\simplenews\RecipientHandler;
 
+use Drupal\Core\Database\Query\SelectInterface;
 /**
  * Base for Recipient Handlers that access the database directly using Select.
  *
@@ -20,7 +21,7 @@ abstract class RecipientHandlerSelectBase extends RecipientHandlerBase {
     $query->addExpression("'$entity_type'", 'entity_type');
     $query->addExpression($this->issue->id(), 'entity_id');
     $query->addExpression(SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, 'status');
-    $query->addExpression(REQUEST_TIME, 'timestamp');
+    $query->addExpression(\Drupal::time()->getRequestTime(), 'timestamp');
     $this->connection->insert('simplenews_mail_spool')->from($query)->execute();
 
     return $query->countQuery()->execute()->fetchField();
@@ -36,7 +37,7 @@ abstract class RecipientHandlerSelectBase extends RecipientHandlerBase {
   /**
    * Build the query that gets the list of recipients.
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface
+   * @return SelectInterface
    *   Query with the columns 'snid' and 'newsletter_id' for each recipient.
    */
   abstract protected function buildRecipientQuery();
diff --git a/src/Plugin/views/field/SendStatus.php b/src/Plugin/views/field/SendStatus.php
index 9c2d383..2ba5cf3 100644
--- a/src/Plugin/views/field/SendStatus.php
+++ b/src/Plugin/views/field/SendStatus.php
@@ -46,7 +46,7 @@ class SendStatus extends FieldPluginBase {
   /**
    * Return a compiled message to display.
    *
-   * @param \Drupal\node\Entity\Node $node
+   * @param Node $node
    *   The node object.
    *
    * @return array
@@ -61,7 +61,7 @@ class SendStatus extends FieldPluginBase {
       SIMPLENEWS_STATUS_SEND_READY => 'images/sn-sent.png',
     ];
     if (isset($images[$status])) {
-      $message['uri'] = drupal_get_path('module', 'simplenews') . '/' . $images[$status];
+      $message['uri'] = \Drupal::service('extension.list.module')->getPath('simplenews') . '/' . $images[$status];
     }
     else {
       $message['uri'] = NULL;
diff --git a/src/RecipientHandler/Annotation/RecipientHandler.php b/src/RecipientHandler/Annotation/RecipientHandler.php
index 367d9b1..d4d94e1 100644
--- a/src/RecipientHandler/Annotation/RecipientHandler.php
+++ b/src/RecipientHandler/Annotation/RecipientHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\RecipientHandler\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -30,7 +31,7 @@ class RecipientHandler extends Plugin {
   /**
    * The human-readable name of the recipient handler plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -39,7 +40,7 @@ class RecipientHandler extends Plugin {
   /**
    * The description of the recipient handler plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/RecipientHandler/RecipientHandlerManager.php b/src/RecipientHandler/RecipientHandlerManager.php
index c929ec9..c3608e0 100644
--- a/src/RecipientHandler/RecipientHandlerManager.php
+++ b/src/RecipientHandler/RecipientHandlerManager.php
@@ -23,9 +23,9 @@ class RecipientHandlerManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Spool/SpoolList.php b/src/Spool/SpoolList.php
index d68afd4..605cce2 100644
--- a/src/Spool/SpoolList.php
+++ b/src/Spool/SpoolList.php
@@ -19,7 +19,7 @@ class SpoolList implements SpoolListInterface {
   /**
    * The simplenews spool storage.
    *
-   * @var \Drupal\simplenews\Spool\SpoolStorageInterface
+   * @var SpoolStorageInterface
    */
   protected $spoolStorage;
 
@@ -60,7 +60,7 @@ class SpoolList implements SpoolListInterface {
    *
    * @param array $spool_rows
    *   List of mail spool rows.
-   * @param \Drupal\simplenews\Spool\SpoolStorageInterface $spool_storage
+   * @param SpoolStorageInterface $spool_storage
    *   The spool storage.
    */
   public function __construct(array $spool_rows, SpoolStorageInterface $spool_storage) {
diff --git a/src/Spool/SpoolListInterface.php b/src/Spool/SpoolListInterface.php
index 51fc2a4..61fe2be 100644
--- a/src/Spool/SpoolListInterface.php
+++ b/src/Spool/SpoolListInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Spool;
 
+use Drupal\simplenews\Mail\MailInterface;
 /**
  * A list of spooled mails.
  */
@@ -10,7 +11,7 @@ interface SpoolListInterface extends \Countable {
   /**
    * Returns a Simplenews mail to be sent.
    *
-   * @return \Drupal\simplenews\Mail\MailInterface
+   * @return MailInterface
    *   Next mail to be sent.
    */
   public function nextMail();
diff --git a/src/Spool/SpoolStorage.php b/src/Spool/SpoolStorage.php
index 093c594..89e72c6 100644
--- a/src/Spool/SpoolStorage.php
+++ b/src/Spool/SpoolStorage.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simplenews\Spool;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\simplenews\recipientHandler\recipientHandlerManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\Condition;
@@ -22,50 +24,50 @@ class SpoolStorage implements SpoolStorageInterface {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The lock.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The recipient handler manager.
    *
-   * @var \Drupal\simplenews\recipientHandler\recipientHandlerManager
+   * @var recipientHandlerManager
    */
   protected $recipientHandlerManager;
 
   /**
    * Creates a SpoolStorage object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock
+   * @param LockBackendInterface $lock
    *   The lock.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\simplenews\recipientHandler\RecipientHandlerManager $recipient_handler_manager
+   * @param RecipientHandlerManager $recipient_handler_manager
    *   The recipient handler manager.
    */
   public function __construct(Connection $connection, LockBackendInterface $lock, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler, RecipientHandlerManager $recipient_handler_manager) {
@@ -154,7 +156,7 @@ class SpoolStorage implements SpoolStorageInterface {
       ->condition('msid', (array) $msids, 'IN')
       ->fields([
         'status' => $status,
-        'timestamp' => REQUEST_TIME,
+        'timestamp' => \Drupal::time()->getRequestTime(),
       ])
       ->execute();
   }
@@ -206,7 +208,7 @@ class SpoolStorage implements SpoolStorageInterface {
    */
   public function clear() {
 
-    $expiration_time = REQUEST_TIME - $this->config->get('mail.spool_expire') * 86400;
+    $expiration_time = \Drupal::time()->getRequestTime() - $this->config->get('mail.spool_expire') * 86400;
     return $this->connection->delete('simplenews_mail_spool')
       ->condition('status', [SpoolStorageInterface::STATUS_DONE, SpoolStorageInterface::STATUS_SKIPPED], 'IN')
       ->condition('timestamp', $expiration_time, '<=')
@@ -289,7 +291,7 @@ class SpoolStorage implements SpoolStorageInterface {
       $spool['status'] = SpoolStorageInterface::STATUS_PENDING;
     }
     if (!isset($spool['timestamp'])) {
-      $spool['timestamp'] = REQUEST_TIME;
+      $spool['timestamp'] = \Drupal::time()->getRequestTime();
     }
     if (isset($spool['data'])) {
       $spool['data'] = serialize($spool['data']);
@@ -371,7 +373,7 @@ class SpoolStorage implements SpoolStorageInterface {
    */
   protected function getExpirationTime() {
     $timeout = $this->config->get('mail.spool_progress_expiration');
-    $expiration_time = REQUEST_TIME - $timeout;
+    $expiration_time = \Drupal::time()->getRequestTime() - $timeout;
     return $expiration_time;
   }
 
diff --git a/src/Spool/SpoolStorageInterface.php b/src/Spool/SpoolStorageInterface.php
index 6e48947..5c71b93 100644
--- a/src/Spool/SpoolStorageInterface.php
+++ b/src/Spool/SpoolStorageInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simplenews\Spool;
 
+use Drupal\simplenews\RecipientHandler\RecipientHandlerInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 
 /**
@@ -59,7 +60,7 @@ interface SpoolStorageInterface {
    *   set, status defaults to SpoolStorageInterface::STATUS_PENDING,
    *   SpoolStorageInterface::STATUS_IN_PROGRESS.
    *
-   * @return \Drupal\simplenews\Spool\SpoolListInterface
+   * @return SpoolListInterface
    *   A mail spool list.
    */
   public function getMails($limit = self::UNLIMITED, array $conditions = []);
@@ -111,7 +112,7 @@ interface SpoolStorageInterface {
   /**
    * Adds a newsletter issue to the mail spool.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $issue
+   * @param ContentEntityInterface $issue
    *   The newsletter issue to be sent.
    */
   public function addIssue(ContentEntityInterface $issue);
@@ -119,7 +120,7 @@ interface SpoolStorageInterface {
   /**
    * Deletes a newsletter issue from the mail spool.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $issue
+   * @param ContentEntityInterface $issue
    *   The newsletter issue to be deleted.
    */
   public function deleteIssue(ContentEntityInterface $issue);
@@ -142,7 +143,7 @@ interface SpoolStorageInterface {
   /**
    * Builds a recipient handler class for a given newsletter issue.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $issue
+   * @param ContentEntityInterface $issue
    *   The newsletter issue to be sent.
    * @param array $edited_values
    *   (optional) Modified values, if called from an edit form.
@@ -150,7 +151,7 @@ interface SpoolStorageInterface {
    *   (optional, defaults to FALSE) If set, also return the set of valid
    *   options for choice of recipient handler.
    *
-   * @return \Drupal\simplenews\RecipientHandler\RecipientHandlerInterface|array
+   * @return RecipientHandlerInterface|array
    *   A constructed recipient handler plugin.  If $return_options is set then
    *   the return is an array of two items: the recipient handler plugin and
    *   the result of RecipientHandlerManager::getOptions().
@@ -163,7 +164,7 @@ interface SpoolStorageInterface {
   /**
    * Returns a summary of key newsletter issue parameters.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $issue
+   * @param ContentEntityInterface $issue
    *   The newsletter issue entity.
    *
    * @return array
@@ -178,7 +179,7 @@ interface SpoolStorageInterface {
   /**
    * Returns a count of the recipients for a newsletter issue.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $issue
+   * @param ContentEntityInterface $issue
    *   The newsletter issue entity.
    *
    * @return int
diff --git a/src/SubscriberInterface.php b/src/SubscriberInterface.php
index c2b7fbd..f07449a 100644
--- a/src/SubscriberInterface.php
+++ b/src/SubscriberInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simplenews;
 
+use Drupal\user\UserInterface;
+use Drupal\simplenews\Plugin\Field\FieldType\SubscriptionItem;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
 
@@ -63,7 +65,7 @@ interface SubscriberInterface extends ContentEntityInterface {
   /**
    * Returns corresponding User object, if any.
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    *   The corresponding User object, or NULL if the subscriber is not synced
    *   with a user.
    */
@@ -88,7 +90,7 @@ interface SubscriberInterface extends ContentEntityInterface {
   /**
    * Fill values from a user account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to fill from.
    *
    * @return $this
@@ -98,7 +100,7 @@ interface SubscriberInterface extends ContentEntityInterface {
   /**
    * Copy values to a user account.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account to copy to.
    */
   public function copyToAccount(AccountInterface $account);
@@ -147,7 +149,7 @@ interface SubscriberInterface extends ContentEntityInterface {
    * @param string $newsletter_id
    *   The ID of a newsletter.
    *
-   * @return \Drupal\simplenews\Plugin\Field\FieldType\SubscriptionItem
+   * @return SubscriptionItem
    *   The subscription item if the subscriber is subscribed, otherwise FALSE.
    */
   public function getSubscription($newsletter_id);
@@ -172,7 +174,7 @@ interface SubscriberInterface extends ContentEntityInterface {
    * @param int $timestamp
    *   The timestamp of when the subscription was added.
    */
-  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = REQUEST_TIME);
+  public function subscribe($newsletter_id, $status = SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime());
 
   /**
    * Delete a subscription to a certain newsletter of the subscriber.
@@ -184,7 +186,7 @@ interface SubscriberInterface extends ContentEntityInterface {
    * @param int $timestamp
    *   The timestamp of when the subscription was added.
    */
-  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = REQUEST_TIME);
+  public function unsubscribe($newsletter_id, $source = 'unknown', $timestamp = \Drupal::time()->getRequestTime());
 
   /**
    * Load a simplenews newsletter subscriber object by mail.
diff --git a/src/Subscription/SubscriptionManager.php b/src/Subscription/SubscriptionManager.php
index b19bd03..0e6e238 100644
--- a/src/Subscription/SubscriptionManager.php
+++ b/src/Subscription/SubscriptionManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simplenews\Subscription;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DestructableInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -43,66 +45,66 @@ class SubscriptionManager implements SubscriptionManagerInterface, DestructableI
   /**
    * The mailer.
    *
-   * @var \Drupal\simplenews\Mail\MailerInterface
+   * @var MailerInterface
    */
   protected $mailer;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The token.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The logger interface.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The subscriber storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $subscriberStorage;
 
   /**
    * Constructs a SubscriptionManager.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\simplenews\Mail\MailerInterface $mailer
+   * @param MailerInterface $mailer
    *   The simplenews manager.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The simplenews logger channel.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(LanguageManagerInterface $language_manager, ConfigFactoryInterface $config_factory, MailerInterface $mailer, Token $token, LoggerInterface $logger, AccountInterface $current_user) {
@@ -296,9 +298,9 @@ class SubscriptionManager implements SubscriptionManagerInterface, DestructableI
    *
    * @param string $action
    *   The confirmation type, either subscribe or unsubscribe.
-   * @param \Drupal\simplenews\SubscriberInterface $subscriber
+   * @param SubscriberInterface $subscriber
    *   The subscriber object.
-   * @param \Drupal\simplenews\NewsletterInterface $newsletter
+   * @param NewsletterInterface $newsletter
    *   The newsletter object.
    */
   protected function addConfirmation($action, SubscriberInterface $subscriber, NewsletterInterface $newsletter) {
@@ -308,7 +310,7 @@ class SubscriptionManager implements SubscriptionManagerInterface, DestructableI
   /**
    * Checks whether confirmation is required for this newsletter and user.
    *
-   * @param \Drupal\simplenews\NewsletterInterface $newsletter
+   * @param NewsletterInterface $newsletter
    *   The newsletter entity.
    * @param int $uid
    *   The user ID that belongs to the email.
diff --git a/src/Subscription/SubscriptionManagerInterface.php b/src/Subscription/SubscriptionManagerInterface.php
index 13cb387..f2a91a9 100644
--- a/src/Subscription/SubscriptionManagerInterface.php
+++ b/src/Subscription/SubscriptionManagerInterface.php
@@ -86,7 +86,7 @@ interface SubscriptionManagerInterface {
   /**
    * Converts an array of subscription changes into descriptions.
    *
-   * @param \Drupal\simplenews\SubscriberInterface $subscriber
+   * @param SubscriberInterface $subscriber
    *   Simplenews subscriber object.
    * @param array $changes
    *   (Optional) Array of changes, each is an array with the keys action and
diff --git a/tests/modules/simplenews_test/simplenews_test.module b/tests/modules/simplenews_test/simplenews_test.module
index 850e24f..fff49da 100644
--- a/tests/modules/simplenews_test/simplenews_test.module
+++ b/tests/modules/simplenews_test/simplenews_test.module
@@ -14,7 +14,7 @@ use Drupal\simplenews\SkipMailException;
  */
 function simplenews_test_mail_alter(&$message) {
   if ($message['id'] == 'simplenews_node') {
-    /** @var \Drupal\simplenews\Mail\MailInterface $mail */
+    /** @var MailInterface $mail */
     $mail = $message['params']['simplenews_mail'];
     $issue = $mail->getIssue();
     if (!empty($issue->body->value)) {
