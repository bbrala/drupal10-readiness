modules/contrib/league_oauth_login/league_oauth_login.install
modules/contrib/league_oauth_login/league_oauth_login.module
modules/contrib/league_oauth_login/modules/league_oauth_login_github/src/Plugin/LeagueOauthLogin/Github.php
modules/contrib/league_oauth_login/modules/league_oauth_login_github/tests/src/Kernel/LoginTest.php
modules/contrib/league_oauth_login/modules/league_oauth_login_gitlab/src/Plugin/LeagueOauthLogin/GitLab.php
modules/contrib/league_oauth_login/modules/league_oauth_login_gitlab/tests/src/Kernel/IdentityProviderExceptionTest.php
modules/contrib/league_oauth_login/modules/league_oauth_login_gitlab/tests/src/Kernel/LoginTest.php
modules/contrib/league_oauth_login/modules/league_oauth_login_gitlab/tests/src/Kernel/TestGitlabProvider.php
modules/contrib/league_oauth_login/modules/league_oauth_login_gitlab/tests/src/Kernel/TestProviderManager.php
modules/contrib/league_oauth_login/src/Annotation/LeagueOauthLogin.php
modules/contrib/league_oauth_login/src/Controller/LoginController.php
modules/contrib/league_oauth_login/src/Event/AccessTokenEvent.php
modules/contrib/league_oauth_login/src/Event/AccessTokenEventTrait.php
modules/contrib/league_oauth_login/src/Event/LoginEventTrait.php
modules/contrib/league_oauth_login/src/Event/LoginWhileLoggedInEvent.php
modules/contrib/league_oauth_login/src/Event/LoginWithCodeEvent.php
modules/contrib/league_oauth_login/src/Event/LoginWithCodeEventTrait.php
modules/contrib/league_oauth_login/src/LeagueOauthLoginEvents.php
modules/contrib/league_oauth_login/src/LeagueOauthLoginInterface.php
modules/contrib/league_oauth_login/src/LeagueOauthLoginPluginBase.php
modules/contrib/league_oauth_login/src/LeagueOauthLoginPluginManager.php
modules/contrib/league_oauth_login/tests/modules/league_oauth_login_test/src/DummyProvider.php
modules/contrib/league_oauth_login/tests/modules/league_oauth_login_test/src/Plugin/LeagueOauthLogin/Dummy.php
modules/contrib/league_oauth_login/tests/src/Kernel/LoginDummyTest.php
modules/contrib/league_oauth_login/tests/src/Kernel/LoginTestBase.php
modules/contrib/league_oauth_login/tests/src/Unit/LoginControllerTest.php

15 files with changes
=====================

1) modules/contrib/league_oauth_login/tests/src/Unit/LoginControllerTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Mock login manager.
    *
-   * @var \Drupal\league_oauth_login\LeagueOauthLoginPluginManager
+   * @var LeagueOauthLoginPluginManager
    */
   private $loginManager;

@@ @@
   /**
    * Get it.
    *
-   * @return \Drupal\league_oauth_login\LeagueOauthLoginPluginManager
+   * @return LeagueOauthLoginPluginManager
    *   The manager.
    */
   public function getLoginManager() {
@@ @@
   /**
    * Set it.
    *
-   * @param \Drupal\league_oauth_login\LeagueOauthLoginPluginManager $loginManager
+   * @param LeagueOauthLoginPluginManager $loginManager
    *   The manager.
    */
   public function setLoginManager(LeagueOauthLoginPluginManager $loginManager) : void {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/league_oauth_login/tests/src/Kernel/LoginTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\league_oauth_login\Kernel;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Session\AccountProxyInterface;
+use Symfony\Component\HttpFoundation\Session\SessionInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\Core\Url;
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installSchema('system', 'sequences');
@@ @@
    * Create config for the provider.
    */
   protected function createConfigForProvider() {
-    /** @var \Drupal\Core\Config\Config $config */
+    /** @var Config $config */
     $config = $this->container->get('config.factory')->getEditable('league_oauth_login_' . $this->providerId . '.settings');
     $config->setData([
       'clientId' => rand(),
@@ @@
    */
   public function testLoginWhileLoggedIn() {
     $request = Request::createFromGlobals();
-    /** @var \Drupal\Core\Session\AccountProxyInterface $current_user */
+    /** @var AccountProxyInterface $current_user */
     $current_user = $this->container->get('current_user');
     $account = User::create([
       'name' => 'testuser@example.com',
@@ @@
     $state = $uuid->generate();
     $request->request->set('code', $code);
     $request->request->set('state', $state);
-    /** @var \Symfony\Component\HttpFoundation\Session\SessionInterface $session */
+    /** @var SessionInterface $session */
     $session = $this->container->get('session');
     $session->set('oauth2state', "totally not $state");
     $controller = LoginController::create($this->container);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/league_oauth_login/tests/src/Kernel/LoginDummyTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\league_oauth_login\Kernel;

+use Symfony\Component\HttpFoundation\Session\SessionInterface;
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\Core\State\StateInterface;
 use Drupal\league_oauth_login\Controller\LoginController;
 use Drupal\league_oauth_login_test\DummyProvider;
 use Drupal\league_oauth_login_test\Plugin\LeagueOauthLogin\Dummy;
@@ @@
     $state = $uuid->generate();
     $request->request->set('code', $code);
     $request->request->set('state', $state);
-    /** @var \Symfony\Component\HttpFoundation\Session\SessionInterface $session */
+    /** @var SessionInterface $session */
     $session = $this->container->get('session');
     $session->set('is_linking', TRUE);
     $session->set('oauth2state', $state);
-    /** @var \Drupal\Core\Session\AccountProxyInterface $current_user */
+    /** @var AccountProxyInterface $current_user */
     $current_user = $this->container->get('current_user');
     $account = User::create([
       'name' => 'testuser@example.com',
@@ @@
     ]);
     $account->save();
     $current_user->setAccount($account);
-    /** @var \Drupal\Core\State\StateInterface $state */
+    /** @var StateInterface $state */
     $state = $this->container->get('state');
     $uuid = $this->container->get('uuid')->generate();
     $state->set(DummyProvider::STATE_KEY, $uuid);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/league_oauth_login/src/LeagueOauthLoginPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/league_oauth_login/src/LeagueOauthLoginPluginBase.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/league_oauth_login/src/LeagueOauthLoginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\league_oauth_login;

+use League\OAuth2\Client\Provider\AbstractProvider;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use League\OAuth2\Client\Provider\ResourceOwnerInterface;

@@ @@
   /**
    * Gets a provider.
    *
-   * @return \League\OAuth2\Client\Provider\AbstractProvider
+   * @return AbstractProvider
    *   The provider.
    */
   public function getProvider();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/league_oauth_login/src/Event/LoginWithCodeEventTrait.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Get the request.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   The current request.
    */
   public function getRequest() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/league_oauth_login/src/Event/LoginWithCodeEvent.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Class used for the login while logged in event.
    */
-  class LoginWithCodeEvent extends SymfonyEvent {
+  class LoginWithCodeEvent extends \Symfony\Contracts\EventDispatcher\Event {
     use LoginWithCodeEventTrait;

   }
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector


9) modules/contrib/league_oauth_login/src/Event/LoginWhileLoggedInEvent.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Class used for the login while logged in event.
    */
-  class LoginWhileLoggedInEvent extends SymfonyEvent {
+  class LoginWhileLoggedInEvent extends \Symfony\Contracts\EventDispatcher\Event {
     use LoginEventTrait;

   }
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector


10) modules/contrib/league_oauth_login/src/Event/LoginEventTrait.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Redirect URL, if any.
    *
-   * @var \Drupal\Core\Url
+   * @var Url
    */
   protected $redirectUrl;

@@ @@
   /**
    * Getter.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   URL.
    */
   public function getRedirectUrl() {
@@ @@
   /**
    * Setter.
    *
-   * @param \Drupal\Core\Url $redirectUrl
+   * @param Url $redirectUrl
    *   URL.
    */
   public function setRedirectUrl(Url $redirectUrl) {
@@ @@
   /**
    * Get the request.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   The current request.
    */
   public function getRequest() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/league_oauth_login/src/Event/AccessTokenEventTrait.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Access token.
    *
-   * @var \League\OAuth2\Client\Token\AccessTokenInterface
+   * @var AccessTokenInterface
    */
   protected $accessToken;

@@ @@
   /**
    * Get the request.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   The current request.
    */
   public function getRequest() {
@@ @@
   /**
    * Get access token.
    *
-   * @return \League\OAuth2\Client\Token\AccessTokenInterface
+   * @return AccessTokenInterface
    *   Access token.
    */
   public function getAccessToken() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/league_oauth_login/src/Event/AccessTokenEvent.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Class used for the login while logged in event.
    */
-  class AccessTokenEvent extends SymfonyEvent {
+  class AccessTokenEvent extends \Symfony\Contracts\EventDispatcher\Event {
     use LoginEventTrait;

   }
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector


13) modules/contrib/league_oauth_login/src/Controller/LoginController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\league_oauth_login\Controller;

+use League\OAuth2\Client\Provider\ResourceOwnerInterface;
+use Drupal\user\UserInterface;
 use Composer\Semver\Semver;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Xss;
@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * Login manager.
    *
-   * @var \Drupal\league_oauth_login\LeagueOauthLoginPluginManager
+   * @var LeagueOauthLoginPluginManager
    */
   protected $loginManager;

@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Session service.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;

@@ @@
   /**
    * Kill switch.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $killSwitch;

@@ @@
   /**
    * External auth.
    *
-   * @var \Drupal\externalauth\ExternalAuthInterface
+   * @var ExternalAuthInterface
    */
   protected $externalAuth;

@@ @@
   /**
    * Current route match.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRoute;

@@ @@
       $this->session->set('is_linking', TRUE);
     }
     try {
-      /** @var \Drupal\league_oauth_login\LeagueOauthLoginInterface $plugin */
+      /** @var LeagueOauthLoginInterface $plugin */
       $plugin = $this->loginManager->createInstance($provider_id);
       $config = $plugin->getPluginDefinition();
     }
@@ @@
         $this->eventDispatcher->dispatch($event, LeagueOauthLoginEvents::LOGIN_WHILE_LOGGED_IN);
       }
       else {
-        $this->eventDispatcher->dispatch(LeagueOauthLoginEvents::LOGIN_WHILE_LOGGED_IN, $event);
+        $this->eventDispatcher->dispatch($event, LeagueOauthLoginEvents::LOGIN_WHILE_LOGGED_IN);
       }
       $url = Url::fromRoute('user.page')->toString(TRUE)->getGeneratedUrl();
       if ($event->getRedirectUrl()) {
@@ @@
           $this->eventDispatcher->dispatch($event, LeagueOauthLoginEvents::LOGIN_WITH_CODE);
         }
         else {
-          $this->eventDispatcher->dispatch(LeagueOauthLoginEvents::LOGIN_WITH_CODE, $event);
+          $this->eventDispatcher->dispatch($event, LeagueOauthLoginEvents::LOGIN_WITH_CODE);
         }
         // Using the access token, we may look up details about the resource
         // owner.
@@ @@
           $this->eventDispatcher->dispatch($event, LeagueOauthLoginEvents::ACCESS_TOKEN_EVENT);
         }
         else {
-          $this->eventDispatcher->dispatch(LeagueOauthLoginEvents::ACCESS_TOKEN_EVENT, $event);
+          $this->eventDispatcher->dispatch($event, LeagueOauthLoginEvents::ACCESS_TOKEN_EVENT);
         }
-        /** @var \League\OAuth2\Client\Provider\ResourceOwnerInterface $resource_owner */
+        /** @var ResourceOwnerInterface $resource_owner */
         $resource_owner = $provider->getResourceOwner($access_token);
         $mail = $plugin->getEmail($resource_owner, $access_token);
         $name = $plugin->getUserName($resource_owner);
@@ @@
         }
         $provider_key = self::createUserDataKey($plugin);
         if (!$link) {
-          /** @var \Drupal\user\UserInterface $drupal_user */
+          /** @var UserInterface $drupal_user */
           $drupal_user = $this->externalAuth->loginRegister($authname, $provider_key, [
             'mail' => $mail,
             'name' => $name,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/league_oauth_login/src/Annotation/LeagueOauthLogin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\league_oauth_login\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


15) modules/contrib/league_oauth_login/league_oauth_login.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Extension\ModuleInstaller;
+use Drupal\user\UserStorageInterface;
+use Drupal\externalauth\ExternalAuth;
+use Drupal\league_oauth_login\LeagueOauthLoginPluginManager;
+use Drupal\user\UserDataInterface;
+use Drupal\user\Entity\User;
+use Drupal\league_oauth_login\LeagueOauthLoginInterface;
 /**
  * @file
  * Install things for this module.
@@ @@
  */
 function league_oauth_login_update_8001() {
   // First make sure externalauth is enabled.
-  /** @var \Drupal\Core\Extension\ModuleInstaller $installer */
+  /** @var ModuleInstaller $installer */
   $installer = \Drupal::service('module_installer');
   $installer->install(['externalauth']);
-  /** @var \Drupal\user\UserStorageInterface $user_storage */
+  /** @var UserStorageInterface $user_storage */
   $user_storage = \Drupal::entityTypeManager()->getStorage('user');
-  /** @var \Drupal\externalauth\ExternalAuth $externalauth */
+  /** @var ExternalAuth $externalauth */
   $externalauth = \Drupal::service('externalauth.externalauth');
   $uids = $user_storage->getQuery()
     ->execute();
-  /** @var \Drupal\league_oauth_login\LeagueOauthLoginPluginManager $login_manager */
+  /** @var LeagueOauthLoginPluginManager $login_manager */
   $login_manager = \Drupal::service('plugin.manager.league_oauth_login');
   $providers = $login_manager->getDefinitions();
-  /** @var \Drupal\user\UserDataInterface $user_data */
+  /** @var UserDataInterface $user_data */
   $user_data = \Drupal::service('user.data');
   foreach ($uids as $uid) {
     // See if they have something stored for any provider.
@@ @@
       $plugin = $login_manager->createInstance($id);
       $key = LoginController::createUserDataKey($plugin);
       if ($data = $user_data->get('league_oauth_login', $uid, $key)) {
-        /** @var \Drupal\user\Entity\User $user */
+        /** @var User $user */
         $user = $user_storage->load($uid);
         $externalauth->linkExistingAccount($user->getEmail(), $key, $user);
       }
@@ @@
  * Migrate all users to use resource ids instead of email as authname.
  */
 function league_oauth_login_update_8002() {
-  /** @var \Drupal\user\UserStorageInterface $user_storage */
+  /** @var UserStorageInterface $user_storage */
   $user_storage = \Drupal::entityTypeManager()->getStorage('user');
   $uids = $user_storage->getQuery()
     ->sort('uid', 'ASC')
     ->execute();
-  /** @var \Drupal\league_oauth_login\LeagueOauthLoginPluginManager $login_manager */
+  /** @var LeagueOauthLoginPluginManager $login_manager */
   $login_manager = \Drupal::service('plugin.manager.league_oauth_login');
   $providers = $login_manager->getDefinitions();
-  /** @var \Drupal\user\UserDataInterface $user_data */
+  /** @var UserDataInterface $user_data */
   $user_data = \Drupal::service('user.data');
-  /** @var \Drupal\externalauth\ExternalAuth $externalauth */
+  /** @var ExternalAuth $externalauth */
   $externalauth = \Drupal::service('externalauth.externalauth');
   $database = \Drupal::database();
   foreach ($uids as $uid) {
@@ @@
     foreach ($providers as $id => $provider) {
       $plugin = NULL;
       try {
-        /** @var \Drupal\league_oauth_login\LeagueOauthLoginInterface $plugin */
+        /** @var LeagueOauthLoginInterface $plugin */
         $plugin = $login_manager->createInstance($id);
         $key = LoginController::createUserDataKey($plugin);
         if ($data = $user_data->get('league_oauth_login', $uid, $key)) {
-          /** @var \Drupal\user\Entity\User $user */
+          /** @var User $user */
           if (!$user = $user_storage->load($uid)) {
             continue;
           }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 15 files have been changed by Rector                                      

