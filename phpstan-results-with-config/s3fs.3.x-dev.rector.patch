diff --git a/src/Asset/S3fsCssOptimizer.php b/src/Asset/S3fsCssOptimizer.php
index cdae2d1..8bffb05 100644
--- a/src/Asset/S3fsCssOptimizer.php
+++ b/src/Asset/S3fsCssOptimizer.php
@@ -14,16 +14,16 @@ class S3fsCssOptimizer extends CssOptimizer {
   /**
    * Drupal ConfigFactory Service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructor for S3fs CSS rewriter.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Drupal service config.factory.
-   * @param \Drupal\Core\File\FileUrlGeneratorInterface $file_url_generator
+   * @param FileUrlGeneratorInterface $file_url_generator
    *   The file URL generator service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, FileUrlGeneratorInterface $file_url_generator = NULL) {
@@ -63,7 +63,7 @@ class S3fsCssOptimizer extends CssOptimizer {
       $url = $this->fileUrlGenerator->generateAbsoluteString($path);
     }
     else {
-      $url = file_create_url($path);
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($path);
     }
 
     if ($useCssjsHost && !empty($cssjsHost)) {
diff --git a/src/Batch/S3fsFileMigrationBatch.php b/src/Batch/S3fsFileMigrationBatch.php
index 6dc4b09..de5d74a 100644
--- a/src/Batch/S3fsFileMigrationBatch.php
+++ b/src/Batch/S3fsFileMigrationBatch.php
@@ -238,7 +238,7 @@ class S3fsFileMigrationBatch implements S3fsFileMigrationBatchInterface {
    * @param array|\DrushBatchContext $context
    *   Batch context.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Markup containing progress message.
    */
   private static function getCopyOperationMessage($context) {
diff --git a/src/Batch/S3fsRefreshCacheBatchInterface.php b/src/Batch/S3fsRefreshCacheBatchInterface.php
index fd94218..895e82b 100644
--- a/src/Batch/S3fsRefreshCacheBatchInterface.php
+++ b/src/Batch/S3fsRefreshCacheBatchInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\s3fs\Batch;
 
+use Drupal\Core\Batch\BatchBuilder;
 /**
  * Performs a refresh of the s3fs_file table with data from S3 bucket.
  *
@@ -20,7 +21,7 @@ interface S3fsRefreshCacheBatchInterface {
   /**
    * Initialise a batch builder object.
    *
-   * @return \Drupal\Core\Batch\BatchBuilder
+   * @return BatchBuilder
    *   The instantiated batch builder.
    */
   public function getBatch();
diff --git a/src/Commands/S3fsCommands.php b/src/Commands/S3fsCommands.php
index 509b5c1..d976010 100644
--- a/src/Commands/S3fsCommands.php
+++ b/src/Commands/S3fsCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\s3fs\Commands;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
@@ -21,41 +22,41 @@ class S3fsCommands extends DrushCommands {
   /**
    * S3fs service.
    *
-   * @var \Drupal\s3fs\S3fsServiceInterface
+   * @var S3fsServiceInterface
    */
   private $s3fs;
 
   /**
    * S3fs file migration service.
    *
-   * @var \Drupal\s3fs\Batch\S3fsFileMigrationBatchInterface
+   * @var S3fsFileMigrationBatchInterface
    */
   private $s3fsFileMigrationBatch;
 
   /**
    * S3fs Config data.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   private $s3fsConfig;
 
   /**
    * S3fs RefreshCacheBatch service.
    *
-   * @var \Drupal\s3fs\Batch\S3fsRefreshCacheBatchInterface
+   * @var S3fsRefreshCacheBatchInterface
    */
   private $s3fsRefreshCacheBatch;
 
   /**
    * S3fsCommands constructor.
    *
-   * @param \Drupal\s3fs\S3fsServiceInterface $s3fs
+   * @param S3fsServiceInterface $s3fs
    *   S3fs service.
-   * @param \Drupal\s3fs\Batch\S3fsFileMigrationBatchInterface $s3fs_file_migration_batch
+   * @param S3fsFileMigrationBatchInterface $s3fs_file_migration_batch
    *   S3fs file migration service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Drupal config.factory service.
-   * @param \Drupal\s3fs\Batch\S3fsRefreshCacheBatchInterface $s3fs_refresh_cache_batch
+   * @param S3fsRefreshCacheBatchInterface $s3fs_refresh_cache_batch
    *   S3fs RefreshCacheBatch service.
    */
   public function __construct(
diff --git a/src/Controller/S3fsImageStyleDownloadController.php b/src/Controller/S3fsImageStyleDownloadController.php
index f05747f..0b499ec 100644
--- a/src/Controller/S3fsImageStyleDownloadController.php
+++ b/src/Controller/S3fsImageStyleDownloadController.php
@@ -25,19 +25,19 @@ class S3fsImageStyleDownloadController extends ImageStyleDownloadController {
    * for public or s3 schemes. Private scheme use the normal workflow:
    * \Drupal\image\Controller\ImageStyleDownloadController::deliver().
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param string $scheme
    *   The file scheme.
-   * @param \Drupal\image\ImageStyleInterface $image_style
+   * @param ImageStyleInterface $image_style
    *   The image style to deliver.
    *
-   * @return \Drupal\Core\Routing\TrustedRedirectResponse|\Symfony\Component\HttpFoundation\Response
+   * @return TrustedRedirectResponse|Response
    *   The redirect response or some error response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown when the user does not have access to the file.
-   * @throws \Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException
+   * @throws ServiceUnavailableHttpException
    *   Thrown when the file is still being generated.
    *
    * @see \Drupal\image\Controller\ImageStyleDownloadController::deliver()
diff --git a/src/EventSubscriber/S3fsAdvAggSubscriber.php b/src/EventSubscriber/S3fsAdvAggSubscriber.php
index 584e4c1..14d50e0 100644
--- a/src/EventSubscriber/S3fsAdvAggSubscriber.php
+++ b/src/EventSubscriber/S3fsAdvAggSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\s3fs\EventSubscriber;
 
+use Drupal\Core\Config\ConfigFactory;
 use Drupal\advagg\Asset\AssetOptimizationEvent;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\FileUrlGeneratorInterface;
@@ -16,7 +17,7 @@ class S3fsAdvAggSubscriber implements EventSubscriberInterface {
   /**
    * Drupal ConfigFactory Service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
@@ -30,16 +31,16 @@ class S3fsAdvAggSubscriber implements EventSubscriberInterface {
   /**
    * The file_url_generator service.
    *
-   * @var \Drupal\Core\File\FileUrlGeneratorInterface|null
+   * @var FileUrlGeneratorInterface|null
    */
   protected $fileUrlGenerator = NULL;
 
   /**
    * Construct the optimizer instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The optimizer.
-   * @param \Drupal\Core\File\FileUrlGeneratorInterface $file_url_generator
+   * @param FileUrlGeneratorInterface $file_url_generator
    *   The file URL generator service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, FileUrlGeneratorInterface $file_url_generator = NULL) {
diff --git a/src/Form/ActionsForm.php b/src/Form/ActionsForm.php
index ae1e817..54916ab 100644
--- a/src/Form/ActionsForm.php
+++ b/src/Form/ActionsForm.php
@@ -186,7 +186,7 @@ class ActionsForm extends FormBase {
    *
    * @param array $form
    *   Array that contains the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateConfigValidateForm(array &$form, FormStateInterface $form_state) {
@@ -208,7 +208,7 @@ class ActionsForm extends FormBase {
    *
    * @param array $form
    *   Array that contains the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateConfigSubmitForm(array &$form, FormStateInterface $form_state) {
@@ -220,7 +220,7 @@ class ActionsForm extends FormBase {
    *
    * @param array $form
    *   Array that contains the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function refreshCacheValidateForm(array &$form, FormStateInterface $form_state) {
@@ -236,7 +236,7 @@ class ActionsForm extends FormBase {
    *
    * @param array $form
    *   Array that contains the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function refreshCacheSubmitForm(array &$form, FormStateInterface $form_state) {
@@ -250,7 +250,7 @@ class ActionsForm extends FormBase {
    *
    * @param array $form
    *   Array that contains the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function copyLocalValidateForm(array &$form, FormStateInterface $form_state) {
@@ -313,7 +313,7 @@ class ActionsForm extends FormBase {
    *
    * @param array $form
    *   Array that contains the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function copyLocalSubmitForm(array &$form, FormStateInterface $form_state) {
@@ -333,7 +333,7 @@ class ActionsForm extends FormBase {
    *
    * @param array $form
    *   Array that contains the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function credentialsCacheValidateForm(array &$form, FormStateInterface $form_state) {
@@ -367,7 +367,7 @@ class ActionsForm extends FormBase {
    *
    * @param array $form
    *   Array that contains the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function credentialsCacheSubmitForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 6ecbb3b..c1a8a34 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -23,25 +23,25 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The S3fs Service.
    *
-   * @var \Drupal\s3fs\S3fsServiceInterface
+   * @var S3fsServiceInterface
    */
   protected $s3fs = NULL;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructor for s3fs settings form.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The factory for configuration objects.
-   * @param \Drupal\s3fs\S3fsServiceInterface $s3fs
+   * @param S3fsServiceInterface $s3fs
    *   The s3fs service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_Handler
+   * @param ModuleHandlerInterface $module_Handler
    *   Module Handler Service.
    */
   public function __construct(ConfigFactoryInterface $configFactory, S3fsServiceInterface $s3fs, ModuleHandlerInterface $module_Handler) {
diff --git a/src/Routing/S3fsImageStyleRoutes.php b/src/Routing/S3fsImageStyleRoutes.php
index 83fb32f..14244c1 100644
--- a/src/Routing/S3fsImageStyleRoutes.php
+++ b/src/Routing/S3fsImageStyleRoutes.php
@@ -15,14 +15,14 @@ class S3fsImageStyleRoutes implements ContainerInjectionInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new S3fsImageStyleRoutes object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
@@ -41,7 +41,7 @@ class S3fsImageStyleRoutes implements ContainerInjectionInterface {
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes() {
diff --git a/src/S3fsFileService.php b/src/S3fsFileService.php
index b0d4e15..360b5db 100644
--- a/src/S3fsFileService.php
+++ b/src/S3fsFileService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\s3fs;
 
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\File\Exception\DirectoryNotReadyException;
@@ -32,21 +33,21 @@ class S3fsFileService implements FileSystemInterface {
   /**
    * The inner service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $decorated;
 
   /**
    * The file logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
@@ -54,21 +55,21 @@ class S3fsFileService implements FileSystemInterface {
   /**
    * S3fs service.
    *
-   * @var \Drupal\s3fs\S3fsServiceInterface
+   * @var S3fsServiceInterface
    */
   protected $s3fs;
 
   /**
    * The module_handler service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The module_handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -76,24 +77,24 @@ class S3fsFileService implements FileSystemInterface {
   /**
    * Mime Type Guessing Service.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeGuesser;
 
   /**
    * S3fsFileService constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $decorated
+   * @param FileSystemInterface $decorated
    *   FileSystem Service being decorated.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   StreamWrapper manager service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   Logging service.
-   * @param \Drupal\s3fs\S3fsServiceInterface $s3fs
+   * @param S3fsServiceInterface $s3fs
    *   S3fs Service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config Factory service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   Module Handler service.
    * @param object $mimeGuesser
    *   Mime type guesser service.
diff --git a/src/S3fsServiceInterface.php b/src/S3fsServiceInterface.php
index 2ac5dc2..4438de0 100644
--- a/src/S3fsServiceInterface.php
+++ b/src/S3fsServiceInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\s3fs;
 
+use Aws\S3\S3Client;
 /**
  * S3fs service interface.
  */
@@ -34,10 +35,10 @@ interface S3fsServiceInterface {
    * @param array $config
    *   Array of configuration settings from which to configure the client.
    *
-   * @return \Aws\S3\S3Client
+   * @return S3Client
    *   The fully-configured S3Client object.
    *
-   * @throws \Drupal\s3fs\S3fsException
+   * @throws S3fsException
    *   Exception when a known error occurs.
    */
   public function getAmazonS3Client(array $config);
diff --git a/src/S3fsServiceProvider.php b/src/S3fsServiceProvider.php
index 3da4da7..7703e7f 100644
--- a/src/S3fsServiceProvider.php
+++ b/src/S3fsServiceProvider.php
@@ -19,7 +19,7 @@ class S3fsServiceProvider extends ServiceProviderBase {
   /**
    * Modifies existing service definitions.
    *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The ContainerBuilder whose service definitions can be altered.
    */
   public function alter(ContainerBuilder $container) {
@@ -53,7 +53,7 @@ class S3fsServiceProvider extends ServiceProviderBase {
   /**
    * Register dynamic service definitions.
    *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
+   * @param ContainerBuilder $container
    *   The ContainerBuilder whose service definitions can be checked.
    */
   public function register(ContainerBuilder $container) {
diff --git a/src/StreamWrapper/S3fsStream.php b/src/StreamWrapper/S3fsStream.php
index 3bdb6f9..ca6ce61 100644
--- a/src/StreamWrapper/S3fsStream.php
+++ b/src/StreamWrapper/S3fsStream.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\s3fs\StreamWrapper;
 
+use Aws\S3\S3Client;
+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Aws\Middleware;
 use Aws\S3\Exception\S3Exception;
 use Aws\S3\StreamWrapper;
@@ -59,14 +61,14 @@ class S3fsStream extends StreamWrapper implements StreamWrapperInterface {
   /**
    * The AWS SDK for PHP S3Client object.
    *
-   * @var \Aws\S3\S3Client
+   * @var S3Client
    */
   protected $s3 = NULL;
 
   /**
    * The S3fs Service.
    *
-   * @var \Drupal\s3fs\S3fsServiceInterface
+   * @var S3fsServiceInterface
    */
   protected $s3fs = NULL;
 
@@ -136,7 +138,7 @@ class S3fsStream extends StreamWrapper implements StreamWrapperInterface {
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
@@ -146,7 +148,7 @@ class S3fsStream extends StreamWrapper implements StreamWrapperInterface {
    * Creates the \Aws\S3\S3Client client object and activates the options
    * specified on the S3 File System Settings page.
    *
-   * @throws \Drupal\s3fs\S3fsException
+   * @throws S3fsException
    *   Any exception raised.
    */
   public function __construct() {
@@ -1374,7 +1376,7 @@ class S3fsStream extends StreamWrapper implements StreamWrapperInterface {
    *     'timestamp' => The file's create/update timestamp.
    *     'dir' => A boolean indicating whether the object is a directory.
    *
-   * @throws \Drupal\s3fs\S3fsException
+   * @throws S3fsException
    *   Exceptions which occur in the database call will percolate.
    */
   protected function writeCache(array $metadata) {
@@ -1417,7 +1419,7 @@ class S3fsStream extends StreamWrapper implements StreamWrapperInterface {
    *   A string (or array of strings) containing the URI(s) of the object(s)
    *   to be deleted.
    *
-   * @throws \Drupal\s3fs\S3fsException
+   * @throws S3fsException
    *   Exceptions which occur in the database call will percolate.
    */
   protected function deleteCache($uri) {
diff --git a/tests/src/Functional/S3fsConfigFormTest.php b/tests/src/Functional/S3fsConfigFormTest.php
index f3541d6..2be8791 100644
--- a/tests/src/Functional/S3fsConfigFormTest.php
+++ b/tests/src/Functional/S3fsConfigFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\s3fs\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 
 /**
@@ -16,7 +17,7 @@ class S3fsConfigFormTest extends S3fsTestBase {
   /**
    * A user with administration access.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
diff --git a/tests/src/Functional/S3fsFileServiceTest.php b/tests/src/Functional/S3fsFileServiceTest.php
index 1b540b8..8d3c26d 100644
--- a/tests/src/Functional/S3fsFileServiceTest.php
+++ b/tests/src/Functional/S3fsFileServiceTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\s3fs\Functional;
 
+use Drupal\s3fs\S3fsFileService;
 use Drupal\Core\File\Exception\FileNotExistsException;
 
 /**
@@ -54,7 +55,7 @@ class S3fsFileServiceTest extends S3fsTestBase {
    */
   public function testCacheHeaders() {
     $this->config('s3fs.settings')->set('cache_control_header', 'public, max-age=300')->save();
-    /** @var \Drupal\s3fs\S3fsFileService $fileSystem */
+    /** @var S3fsFileService $fileSystem */
     $fileSystem = \Drupal::service('file_system');
     $file_contents = file_get_contents(__DIR__ . '/../../fixtures/test.txt');
 
diff --git a/tests/src/Functional/S3fsTest.php b/tests/src/Functional/S3fsTest.php
index 173fb91..1ace487 100644
--- a/tests/src/Functional/S3fsTest.php
+++ b/tests/src/Functional/S3fsTest.php
@@ -378,7 +378,7 @@ class S3fsTest extends S3fsTestBase {
   /**
    * File delete wrapper that returns result.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   A file object to delete.
    *
    * @return bool
@@ -423,7 +423,7 @@ class S3fsTest extends S3fsTestBase {
     else {
       // @todo remove when D9.3 is minimal supported version.
       // @phpstan-ignore-next-line
-      $base_path = drupal_get_path('module', 's3fs');
+      $base_path = \Drupal::service('extension.list.module')->getPath('s3fs');
     }
     $batch['file'] = $base_path . 'src/Batch/S3fsRefreshCacheBatch.php';
 
diff --git a/tests/src/Functional/S3fsTestBase.php b/tests/src/Functional/S3fsTestBase.php
index 45b7fdd..7cf72b7 100644
--- a/tests/src/Functional/S3fsTestBase.php
+++ b/tests/src/Functional/S3fsTestBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\s3fs\Functional;
 
+use Drupal\Core\Database\Connection;
+use Aws\S3\S3Client;
+use Drupal\S3fs\S3fsService;
 use Aws\Exception\AwsException;
 use Aws\S3\Exception\S3Exception;
 use Drupal\Core\Config\Config;
@@ -45,7 +48,7 @@ abstract class S3fsTestBase extends BrowserTestBase {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
@@ -59,14 +62,14 @@ abstract class S3fsTestBase extends BrowserTestBase {
   /**
    * The AWS SDK for PHP S3Client object.
    *
-   * @var \Aws\S3\S3Client
+   * @var S3Client
    */
   protected $s3;
 
   /**
    * The AWS SDK for PHP S3Client object.
    *
-   * @var \Drupal\S3fs\S3fsService
+   * @var S3fsService
    */
   protected $s3fs;
 
@@ -169,7 +172,7 @@ abstract class S3fsTestBase extends BrowserTestBase {
   /**
    * Converts s3fs config to an array.
    *
-   * @param \Drupal\Core\Config\Config $config
+   * @param Config $config
    *   A s3fs.settings config object.
    */
   protected function prepareConfig(Config $config) {
@@ -258,19 +261,19 @@ abstract class S3fsTestBase extends BrowserTestBase {
    *     will be updated. If no database entry is found, then a new one will be
    *     created.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   File interface if successful else false.
    */
   protected function saveData(string $data, string $destination, int $replace = FileSystemInterface::EXISTS_RENAME) {
     if (interface_exists(FileRepositoryInterface::class)) {
-      /** @var \Drupal\file\FileRepositoryInterface $fileRepository */
+      /** @var FileRepositoryInterface $fileRepository */
       $fileRepository = \Drupal::service('file.repository');
       return $fileRepository->writeData($data, $destination, $replace);
     }
     else {
       // @todo remove when D9.3 is minimal supported version.
       // @phpstan-ignore-next-line
-      return file_save_data($data, $destination, $replace);
+      return \Drupal::service('file.repository')->writeData($data, $destination, $replace);
     }
   }
 
@@ -280,7 +283,7 @@ abstract class S3fsTestBase extends BrowserTestBase {
    *  Use file_save_data on <D9.3.
    *  Use FileRepositoryInterface::writeData() >= D9.3.
    *
-   * @param \Drupal\file\FileInterface $source
+   * @param FileInterface $source
    *   File to copy from.
    * @param string $destination
    *   Path to destination.
@@ -294,19 +297,19 @@ abstract class S3fsTestBase extends BrowserTestBase {
    *     will be updated. If no database entry is found, then a new one will be
    *     created.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   File interface if successful else false.
    */
   protected function copyFile(FileInterface $source, string $destination, int $replace = FileSystemInterface::EXISTS_RENAME) {
     if (interface_exists(FileRepositoryInterface::class)) {
-      /** @var \Drupal\file\FileRepositoryInterface $fileRepository */
+      /** @var FileRepositoryInterface $fileRepository */
       $fileRepository = \Drupal::service('file.repository');
       return $fileRepository->copy($source, $destination, $replace);
     }
     else {
       // @todo remove when D9.3 is minimal supported version.
       // @phpstan-ignore-next-line
-      return file_copy($source, $destination, $replace);
+      return \Drupal::service('file.repository')->copy($source, $destination, $replace);
     }
   }
 
@@ -324,14 +327,14 @@ abstract class S3fsTestBase extends BrowserTestBase {
    */
   protected function createUrl(string $uri) {
     if (interface_exists(FileUrlGeneratorInterface::class)) {
-      /** @var \Drupal\Core\File\FileUrlGeneratorInterface $fileUrlGenerator */
+      /** @var FileUrlGeneratorInterface $fileUrlGenerator */
       $fileUrlGenerator = \Drupal::service('file_url_generator');
       return $fileUrlGenerator->generateAbsoluteString($uri);
     }
     else {
       // @todo remove when D9.3 is minimal supported version.
       // @phpstan-ignore-next-line
-      return file_create_url($uri);
+      return \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
     }
   }
 
