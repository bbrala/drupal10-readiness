modules/contrib/block_usage_report/src/Controller/BlockUsageReportController.php

1 file with changes
===================

1) modules/contrib/block_usage_report/src/Controller/BlockUsageReportController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\block_usage_report\Controller;

+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\block\Entity\Block;
+use Drupal\block_content\BlockContentInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityListBuilderInterface;
@@ @@
   /**
    * The block storage provider.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected EntityStorageInterface $blockStorage;

@@ @@
   /**
    * The block content storage provider.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected EntityStorageInterface $blockContentStorage;

@@ @@
   /**
    * The block list builder.
    *
-   * @var \Drupal\Core\Entity\EntityListBuilderInterface
+   * @var EntityListBuilderInterface
    */
   protected EntityListBuilderInterface $blockListBuilder;

@@ @@
   /**
    * The block content list builder.
    *
-   * @var \Drupal\Core\Entity\EntityListBuilderInterface
+   * @var EntityListBuilderInterface
    */
   protected EntityListBuilderInterface $blockContentListBuilder;

@@ @@
   /**
    * The fixed block content storage provider, if the associated module exists.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected ?EntityStorageInterface $fixedBlockContentStorage;

@@ @@
   /**
    * Constructor for this controller.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $block_storage
+   * @param EntityStorageInterface $block_storage
    *   The block storage provider.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $block_content_storage
+   * @param EntityStorageInterface $block_content_storage
    *   The block content storage provider.
-   * @param \Drupal\Core\Entity\EntityListBuilderInterface $block_list_builder
+   * @param EntityListBuilderInterface $block_list_builder
    *   The block list builder.
-   * @param \Drupal\Core\Entity\EntityListBuilderInterface $block_content_list_builder
+   * @param EntityListBuilderInterface $block_content_list_builder
    *   The block content list builder.
-   * @param \Drupal\Core\Entity\EntityStorageInterface|null $fixed_block_content_storage
+   * @param EntityStorageInterface|null $fixed_block_content_storage
    *   The fixed block content storage provider, or NULL if the associated
    *   module does not exist.
    */
@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
+    /** @var ModuleHandlerInterface $module_handler */
     $module_handler = $container->get('module_handler');
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_mgr */
+    /** @var EntityTypeManagerInterface $entity_type_mgr */
     $entity_type_mgr = $container->get('entity_type.manager');

     $fixed_block_storage = NULL;
@@ @@
    *
    * @param string $uuid
    *   The UUID to search for.
-   * @param \Drupal\Core\Entity\ContentEntityInterface[] $entities
+   * @param ContentEntityInterface[] $entities
    *   The collection of entities to search for.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    *   THe matching entity, or NULL if not found.
    */
   protected function getEntityByUuid(string $uuid, array $entities): ?ContentEntityInterface {
@@ @@
    *   The render-array for the report.
    */
   public function build(): array {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface[] $bc_blocks */
+    /** @var ContentEntityInterface[] $bc_blocks */
     $bc_blocks = $this->blockContentStorage->loadMultiple();
     $bc_uuids_found = [];

-    /** @var \Drupal\block\Entity\Block[] $blocks */
+    /** @var Block[] $blocks */
     $blocks = $this->blockStorage->loadMultiple();
     $public_theme_name = $this->config('system.theme')->get('default');

@@ @@
       ) {
         // Register the fixed block's associated custom block as in-use.
         /** @var \Drupal\fixed_block_content\Entity\FixedBlockContent $fixed_block */
-        /** @var \Drupal\block_content\BlockContentInterface $block_content */
+        /** @var BlockContentInterface $block_content */
         $block_content = $fixed_block->getBlockContent();
         // Show the user the bundle and ID of the associated custom block.
         $type .= '-' . $block_content->bundle() . '-' . $block_content->id();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 1 file has been changed by Rector                                         

