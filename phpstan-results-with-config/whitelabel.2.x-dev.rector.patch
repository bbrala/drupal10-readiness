diff --git a/src/Cache/Context/WhiteLabelCacheContext.php b/src/Cache/Context/WhiteLabelCacheContext.php
index 0927a7c..29f8e75 100644
--- a/src/Cache/Context/WhiteLabelCacheContext.php
+++ b/src/Cache/Context/WhiteLabelCacheContext.php
@@ -14,14 +14,14 @@ class WhiteLabelCacheContext implements CacheContextInterface {
   /**
    * Holds the white label.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;
 
   /**
    * WhiteLabelCacheContext constructor.
    *
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
    */
   public function __construct(WhiteLabelProviderInterface $white_label_provider) {
diff --git a/src/ContextProvider/CurrentWhiteLabelContext.php b/src/ContextProvider/CurrentWhiteLabelContext.php
index 1eb7b4a..b3d6adf 100644
--- a/src/ContextProvider/CurrentWhiteLabelContext.php
+++ b/src/ContextProvider/CurrentWhiteLabelContext.php
@@ -19,14 +19,14 @@ class CurrentWhiteLabelContext implements ContextProviderInterface {
   /**
    * The current white label.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;
 
   /**
    * CurrentWhiteLabelContext constructor.
    *
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
    */
   public function __construct(WhiteLabelProviderInterface $white_label_provider) {
diff --git a/src/Entity/WhiteLabel.php b/src/Entity/WhiteLabel.php
index bd76310..f47efe7 100644
--- a/src/Entity/WhiteLabel.php
+++ b/src/Entity/WhiteLabel.php
@@ -407,7 +407,7 @@ class WhiteLabel extends ContentEntityBase implements WhiteLabelInterface {
         }
         $paths['target'] = $paths['target'] . '/';
         $paths['id'] = $id;
-        $paths['source'] = drupal_get_path('theme', $theme) . '/';
+        $paths['source'] = \Drupal::service('extension.list.theme')->getPath($theme) . '/';
         $paths['files'] = $paths['map'] = [];
 
         // Rewrite theme stylesheets.
diff --git a/src/Entity/WhiteLabelInterface.php b/src/Entity/WhiteLabelInterface.php
index ce7a1b6..19bb33a 100644
--- a/src/Entity/WhiteLabelInterface.php
+++ b/src/Entity/WhiteLabelInterface.php
@@ -88,7 +88,7 @@ interface WhiteLabelInterface extends ContentEntityInterface, EntityOwnerInterfa
   /**
    * Gets a white label logo.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The image file entity.
    */
   public function getLogo();
@@ -96,7 +96,7 @@ interface WhiteLabelInterface extends ContentEntityInterface, EntityOwnerInterfa
   /**
    * Sets a white label logo.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The image file entity.
    *
    * @return $this
diff --git a/src/EventSubscriber/WhiteLabelCacheConfigInvalidator.php b/src/EventSubscriber/WhiteLabelCacheConfigInvalidator.php
index 8e647d3..259a97b 100644
--- a/src/EventSubscriber/WhiteLabelCacheConfigInvalidator.php
+++ b/src/EventSubscriber/WhiteLabelCacheConfigInvalidator.php
@@ -15,14 +15,14 @@ class WhiteLabelCacheConfigInvalidator implements EventSubscriberInterface {
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * Constructs a WhiteLabelCacheConfigInvalidator object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
    */
   public function __construct(CacheTagsInvalidatorInterface $cache_tags_invalidator) {
@@ -40,7 +40,7 @@ class WhiteLabelCacheConfigInvalidator implements EventSubscriberInterface {
   /**
    * Invalidate cache tags when a white label config object changes.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The Event to process.
    */
   public function onChange(ConfigCrudEvent $event) {
diff --git a/src/PathProcessor/WhiteLabelPathProcessor.php b/src/PathProcessor/WhiteLabelPathProcessor.php
index a3f5e46..504e0e4 100644
--- a/src/PathProcessor/WhiteLabelPathProcessor.php
+++ b/src/PathProcessor/WhiteLabelPathProcessor.php
@@ -36,14 +36,14 @@ class WhiteLabelPathProcessor implements InboundPathProcessorInterface, Outbound
   /**
    * Holds the white label provider.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -75,9 +75,9 @@ class WhiteLabelPathProcessor implements InboundPathProcessorInterface, Outbound
   /**
    * WhiteLabelPathProcessor constructor.
    *
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(WhiteLabelProviderInterface $white_label_provider, ConfigFactoryInterface $config_factory) {
diff --git a/src/Plugin/Action/ClearWhiteLabel.php b/src/Plugin/Action/ClearWhiteLabel.php
index 3397737..83fef34 100644
--- a/src/Plugin/Action/ClearWhiteLabel.php
+++ b/src/Plugin/Action/ClearWhiteLabel.php
@@ -23,7 +23,7 @@ class ClearWhiteLabel extends ActionBase implements ContainerFactoryPluginInterf
   /**
    * The current white label.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;
 
@@ -36,7 +36,7 @@ class ClearWhiteLabel extends ActionBase implements ContainerFactoryPluginInterf
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, WhiteLabelProviderInterface $white_label_provider) {
diff --git a/src/Plugin/Action/SetWhiteLabel.php b/src/Plugin/Action/SetWhiteLabel.php
index f680127..409d474 100644
--- a/src/Plugin/Action/SetWhiteLabel.php
+++ b/src/Plugin/Action/SetWhiteLabel.php
@@ -25,7 +25,7 @@ class SetWhiteLabel extends ConfigurableActionBase implements ContainerFactoryPl
   /**
    * The current white label.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;
 
@@ -38,7 +38,7 @@ class SetWhiteLabel extends ConfigurableActionBase implements ContainerFactoryPl
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, WhiteLabelProviderInterface $white_label_provider) {
diff --git a/src/Plugin/Field/FieldFormatter/WhiteLabelPreviewFormatter.php b/src/Plugin/Field/FieldFormatter/WhiteLabelPreviewFormatter.php
index d260e85..62e35d8 100644
--- a/src/Plugin/Field/FieldFormatter/WhiteLabelPreviewFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/WhiteLabelPreviewFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\whitelabel\Plugin\Field\FieldFormatter;
 
+use Drupal\whitelabel\Entity\WhiteLabelInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -26,7 +27,7 @@ class WhiteLabelPreviewFormatter extends EntityReferenceFormatterBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -37,7 +38,7 @@ class WhiteLabelPreviewFormatter extends EntityReferenceFormatterBase {
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -47,7 +48,7 @@ class WhiteLabelPreviewFormatter extends EntityReferenceFormatterBase {
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EntityTypeManagerInterface $entity_type_manager) {
@@ -77,7 +78,7 @@ class WhiteLabelPreviewFormatter extends EntityReferenceFormatterBase {
   public function viewElements(FieldItemListInterface $items, $langcode) {
     $elements = [];
 
-    /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $entity */
+    /** @var WhiteLabelInterface $entity */
     foreach ($this->getEntitiesToView($items, $langcode) as $delta => $entity) {
 
       $preview['container'] = [
diff --git a/src/Plugin/Field/FieldWidget/InlineWhiteLabelWidget.php b/src/Plugin/Field/FieldWidget/InlineWhiteLabelWidget.php
index b083a01..d0cfff3 100644
--- a/src/Plugin/Field/FieldWidget/InlineWhiteLabelWidget.php
+++ b/src/Plugin/Field/FieldWidget/InlineWhiteLabelWidget.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\whitelabel\Plugin\Field\FieldWidget;
 
+use Drupal\file\FileInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ -97,7 +99,7 @@ class InlineWhiteLabelWidget extends WidgetBase {
    * {@inheritdoc}
    */
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel_entity */
+    /** @var WhiteLabelInterface $whitelabel_entity */
     if (!$whitelabel_entity = $items[$delta]->entity) {
       $whitelabel_entity = WhiteLabel::create();
     }
@@ -139,7 +141,7 @@ class InlineWhiteLabelWidget extends WidgetBase {
       ];
 
       $logo_value = $form_state->getValue([$field_name, $delta, 'logo', 0, 'fids', 0]);
-      /** @var \Drupal\file\FileInterface $logo */
+      /** @var FileInterface $logo */
       $logo = !empty($logo_value) ? File::load($logo_value) : $whitelabel_entity->getLogo();
       if ($logo) {
         $logo_path = $logo->createFileUrl();
@@ -231,10 +233,10 @@ class InlineWhiteLabelWidget extends WidgetBase {
 
     foreach ($values as $delta => &$item) {
       if (isset($widget_state['whitelabel'][$item['_original_delta']]['entity'])) {
-        /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel_entity */
+        /** @var WhiteLabelInterface $whitelabel_entity */
         $whitelabel_entity = $widget_state['whitelabel'][$item['_original_delta']]['entity'];
 
-        /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+        /** @var EntityFormDisplayInterface $form_display */
         $form_display = $widget_state['whitelabel'][$item['_original_delta']]['display'];
         $form_display->extractFormValues($whitelabel_entity, $element[$item['_original_delta']], $form_state);
 
@@ -277,10 +279,10 @@ class InlineWhiteLabelWidget extends WidgetBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AJAX response.
    */
   public function ajaxCallback(array $form, FormStateInterface &$form_state) {
diff --git a/src/Plugin/views/argument_default/CurrentWhiteLabel.php b/src/Plugin/views/argument_default/CurrentWhiteLabel.php
index 7c133ec..5589a92 100644
--- a/src/Plugin/views/argument_default/CurrentWhiteLabel.php
+++ b/src/Plugin/views/argument_default/CurrentWhiteLabel.php
@@ -23,7 +23,7 @@ class CurrentWhiteLabel extends ArgumentDefaultPluginBase implements CacheableDe
   /**
    * Holds the white label provider.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;
 
@@ -36,7 +36,7 @@ class CurrentWhiteLabel extends ArgumentDefaultPluginBase implements CacheableDe
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, WhiteLabelProviderInterface $white_label_provider) {
diff --git a/src/Plugin/views/argument_default/CurrentWhiteLabelUid.php b/src/Plugin/views/argument_default/CurrentWhiteLabelUid.php
index f3ec5bf..f028e30 100644
--- a/src/Plugin/views/argument_default/CurrentWhiteLabelUid.php
+++ b/src/Plugin/views/argument_default/CurrentWhiteLabelUid.php
@@ -23,7 +23,7 @@ class CurrentWhiteLabelUid extends ArgumentDefaultPluginBase implements Cacheabl
   /**
    * Holds the white label provider.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;
 
@@ -36,7 +36,7 @@ class CurrentWhiteLabelUid extends ArgumentDefaultPluginBase implements Cacheabl
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, WhiteLabelProviderInterface $white_label_provider) {
diff --git a/src/Theme/WhiteLabelNegotiator.php b/src/Theme/WhiteLabelNegotiator.php
index f753ae6..3c2695c 100644
--- a/src/Theme/WhiteLabelNegotiator.php
+++ b/src/Theme/WhiteLabelNegotiator.php
@@ -19,23 +19,23 @@ class WhiteLabelNegotiator implements ThemeNegotiatorInterface {
   /**
    * Holds the white label.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * WhiteLabelNegotiator constructor.
    *
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(WhiteLabelProviderInterface $white_label_provider, ConfigFactoryInterface $config_factory) {
diff --git a/src/WhiteLabelAccessControlHandler.php b/src/WhiteLabelAccessControlHandler.php
index 7094240..c9a662b 100644
--- a/src/WhiteLabelAccessControlHandler.php
+++ b/src/WhiteLabelAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\whitelabel;
 
+use Drupal\whitelabel\Entity\WhiteLabelInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -22,12 +23,12 @@ class WhiteLabelAccessControlHandler extends EntityAccessControlHandler {
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account = NULL) {
     $account = $this->prepareUser($account);
 
-    /** @var \Drupal\Core\Access\AccessResult $result */
+    /** @var AccessResult $result */
     $result = parent::checkAccess($entity, $operation, $account);
 
     if ($result->isNeutral()) {
       // Owner can view and update with the right permissions.
-      /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $entity */
+      /** @var WhiteLabelInterface $entity */
       if (($operation == 'view' || $operation == 'update' || $operation == 'serve') && !empty($account) && $account->id() == $entity->getOwnerId()) {
         return AccessResult::allowedIfHasPermission($account, 'serve white label pages')->cachePerPermissions()->cachePerUser()->addCacheableDependency($entity);
       }
@@ -45,7 +46,7 @@ class WhiteLabelAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkCreateAccess(AccountInterface $account = NULL, array $context = [], $entity_bundle = NULL) {
-    /** @var \Drupal\Core\Access\AccessResult $result */
+    /** @var AccessResult $result */
     // Have the admin permission checked by parent.
     $result = parent::checkCreateAccess($account, $context, $entity_bundle);
     if ($result->isNeutral()) {
diff --git a/src/WhiteLabelConfigOverride.php b/src/WhiteLabelConfigOverride.php
index 97fe6c2..07c7a2e 100644
--- a/src/WhiteLabelConfigOverride.php
+++ b/src/WhiteLabelConfigOverride.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\whitelabel;
 
+use Drupal\whitelabel\Entity\WhiteLabelInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\ConfigFactoryOverrideInterface;
 use Drupal\Core\Config\StorageInterface;
@@ -25,13 +27,13 @@ class WhiteLabelConfigOverride implements ConfigFactoryOverrideInterface {
   public function loadOverrides($names) {
     $overrides = [];
 
-    /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel */
+    /** @var WhiteLabelInterface $whitelabel */
     if (
       (in_array('system.site', $names) || in_array('system.theme.global', $names)) &&
       ($whitelabel = \Drupal::service('whitelabel.whitelabel_provider')->getWhiteLabel())
     ) {
 
-      /** @var \Drupal\Core\Field\FieldItemListInterface $fields */
+      /** @var FieldItemListInterface $fields */
       $fields = $whitelabel->getFields(FALSE);
 
       if (in_array('system.site', $names)) {
@@ -75,7 +77,7 @@ class WhiteLabelConfigOverride implements ConfigFactoryOverrideInterface {
       // Include a no-white label page variant.
       $metadata->addCacheContexts(['whitelabel']);
 
-      /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel */
+      /** @var WhiteLabelInterface $whitelabel */
       if ($whitelabel = \Drupal::service('whitelabel.whitelabel_provider')->getWhiteLabel()) {
         // Here we add the cache tags, so we are aware when the entity updates.
         $metadata->addCacheableDependency($whitelabel);
diff --git a/src/WhiteLabelProvider.php b/src/WhiteLabelProvider.php
index bef0aaf..34fd6d0 100644
--- a/src/WhiteLabelProvider.php
+++ b/src/WhiteLabelProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\whitelabel;
 
+use Drupal\whitelabel\Entity\WhiteLabel;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\whitelabel\Entity\WhiteLabelInterface;
 
@@ -13,30 +14,30 @@ class WhiteLabelProvider implements WhiteLabelProviderInterface {
   /**
    * The order storage.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The session.
    *
-   * @var \Drupal\whitelabel\WhiteLabelSessionInterface
+   * @var WhiteLabelSessionInterface
    */
   protected $whiteLabelSession;
 
   /**
    * The stored white label entity, for fast serve.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabel
+   * @var WhiteLabel
    */
   protected $whiteLabel = NULL;
 
   /**
    * Constructs a new WhiteLabelProvider object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\whitelabel\WhiteLabelSessionInterface $whitelabel_session
+   * @param WhiteLabelSessionInterface $whitelabel_session
    *   The white label session.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, WhiteLabelSessionInterface $whitelabel_session) {
@@ -53,7 +54,7 @@ class WhiteLabelProvider implements WhiteLabelProviderInterface {
     }
 
     if ($whitelabels = $this->entityTypeManager->getStorage('whitelabel')->loadByProperties(['token' => $token])) {
-      /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel */
+      /** @var WhiteLabelInterface $whitelabel */
       $this->whiteLabel = reset($whitelabels);
       return $this->getWhiteLabel();
     }
diff --git a/src/WhiteLabelProviderInterface.php b/src/WhiteLabelProviderInterface.php
index baee5f7..7c0a663 100644
--- a/src/WhiteLabelProviderInterface.php
+++ b/src/WhiteLabelProviderInterface.php
@@ -17,7 +17,7 @@ interface WhiteLabelProviderInterface {
    * @param string $token
    *   The token to fetch the white label for.
    *
-   * @return \Drupal\whitelabel\Entity\WhiteLabelInterface|null
+   * @return WhiteLabelInterface|null
    *   The loaded white label entity or NULL if it could not be presented.
    */
   public function getWhiteLabelByToken($token);
@@ -25,7 +25,7 @@ interface WhiteLabelProviderInterface {
   /**
    * Returns the white label associated with this session.
    *
-   * @return \Drupal\whitelabel\Entity\WhiteLabelInterface|null
+   * @return WhiteLabelInterface|null
    *   The loaded white label entity or NULL if it could not be presented.
    */
   public function getWhiteLabel();
@@ -41,7 +41,7 @@ interface WhiteLabelProviderInterface {
   /**
    * Sets a new white label entity for this session.
    *
-   * @param \Drupal\whitelabel\Entity\WhiteLabelInterface $white_label
+   * @param WhiteLabelInterface $white_label
    *   The white label object to set.
    */
   public function setWhiteLabel(WhiteLabelInterface $white_label);
diff --git a/src/WhiteLabelSession.php b/src/WhiteLabelSession.php
index 6b24b73..e964b88 100644
--- a/src/WhiteLabelSession.php
+++ b/src/WhiteLabelSession.php
@@ -12,14 +12,14 @@ class WhiteLabelSession implements WhiteLabelSessionInterface {
   /**
    * The session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;
 
   /**
    * Constructs a new WhiteLabelSession object.
    *
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session.
    */
   public function __construct(SessionInterface $session) {
diff --git a/src/WhiteLabelSystemBrandingBlockAlter.php b/src/WhiteLabelSystemBrandingBlockAlter.php
index 6e8f094..5b2e56f 100644
--- a/src/WhiteLabelSystemBrandingBlockAlter.php
+++ b/src/WhiteLabelSystemBrandingBlockAlter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\whitelabel;
 
+use Drupal\whitelabel\Entity\WhiteLabelInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Render\Element\RenderCallbackInterface;
 
 /**
@@ -17,9 +19,9 @@ class WhiteLabelSystemBrandingBlockAlter implements RenderCallbackInterface {
    * Sets the site name visibility based on white label specific configuration.
    */
   public static function preRender(array $build) {
-    /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel */
+    /** @var WhiteLabelInterface $whitelabel */
     if ($whitelabel = \Drupal::service('whitelabel.whitelabel_provider')->getWhiteLabel()) {
-      /** @var \Drupal\Core\Field\FieldItemListInterface $fields */
+      /** @var FieldItemListInterface $fields */
       $fields = $whitelabel->getFields(FALSE);
 
       if ($fields['name_display']->access()) {
diff --git a/tests/modules/whitelabel_test/src/Controller/WhiteLabelTestController.php b/tests/modules/whitelabel_test/src/Controller/WhiteLabelTestController.php
index fbbd8e8..3aa4fad 100644
--- a/tests/modules/whitelabel_test/src/Controller/WhiteLabelTestController.php
+++ b/tests/modules/whitelabel_test/src/Controller/WhiteLabelTestController.php
@@ -17,23 +17,23 @@ class WhiteLabelTestController extends ControllerBase {
   /**
    * Holds the white label provider.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * WhiteLabelPathProcessor constructor.
    *
-   * @param \Drupal\whitelabel\WhiteLabelProviderInterface $white_label_provider
+   * @param WhiteLabelProviderInterface $white_label_provider
    *   The white label provider.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(WhiteLabelProviderInterface $white_label_provider, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/tests/src/Functional/WhiteLabelCacheTest.php b/tests/src/Functional/WhiteLabelCacheTest.php
index 07b1ff3..4a093d7 100644
--- a/tests/src/Functional/WhiteLabelCacheTest.php
+++ b/tests/src/Functional/WhiteLabelCacheTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\whitelabel\Functional;
 
+use Drupal\whitelabel\Entity\WhiteLabelInterface;
 use Drupal\file\Entity\File;
 
 /**
@@ -14,7 +15,7 @@ class WhiteLabelCacheTest extends WhiteLabelTestBase {
   /**
    * Holds the second generated white label throughout the different tests.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @var WhiteLabelInterface
    */
   private $whiteLabel2;
 
@@ -36,7 +37,7 @@ class WhiteLabelCacheTest extends WhiteLabelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $image_files = $this->drupalGetTestFiles('image');
@@ -119,10 +120,10 @@ class WhiteLabelCacheTest extends WhiteLabelTestBase {
     // Should not contain.
     $this->notInBrandingBlock($this->whiteLabel->getName());
     $this->notInBrandingBlock($this->whiteLabel->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri()));
     $this->notInBrandingBlock($this->whiteLabel2->getName());
     $this->notInBrandingBlock($this->whiteLabel2->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel2->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel2->getLogo()->getFileUri()));
 
     // White label 1.
     $this->setCurrentWhiteLabel($this->whiteLabel);
@@ -131,12 +132,12 @@ class WhiteLabelCacheTest extends WhiteLabelTestBase {
     // Should contain.
     $this->inBrandingBlock($this->whiteLabel->getName());
     $this->inBrandingBlock($this->whiteLabel->getSlogan());
-    $this->inImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri())));
+    $this->inImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri()));
     // Should not contain.
     $this->notInBrandingBlock($this->defaultName);
     $this->notInBrandingBlock($this->whiteLabel2->getName());
     $this->notInBrandingBlock($this->whiteLabel2->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel2->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel2->getLogo()->getFileUri()));
 
     // White label 2.
     $this->setCurrentWhiteLabel($this->whiteLabel2);
@@ -145,12 +146,12 @@ class WhiteLabelCacheTest extends WhiteLabelTestBase {
     // Should contain.
     $this->inBrandingBlock($this->whiteLabel2->getName());
     $this->inBrandingBlock($this->whiteLabel2->getSlogan());
-    $this->inImagePath(file_url_transform_relative(file_create_url($this->whiteLabel2->getLogo()->getFileUri())));
+    $this->inImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel2->getLogo()->getFileUri()));
     // Should not contain.
     $this->notInBrandingBlock($this->defaultName);
     $this->notInBrandingBlock($this->whiteLabel->getName());
     $this->notInBrandingBlock($this->whiteLabel->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri()));
 
     // White label 2 (updated).
     $this->whiteLabel2
@@ -162,12 +163,12 @@ class WhiteLabelCacheTest extends WhiteLabelTestBase {
     // Should contain.
     $this->inBrandingBlock($this->whiteLabel2->getName());
     $this->inBrandingBlock($this->whiteLabel2->getSlogan());
-    $this->inImagePath(file_url_transform_relative(file_create_url($this->whiteLabel2->getLogo()->getFileUri())));
+    $this->inImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel2->getLogo()->getFileUri()));
     // Should not contain.
     $this->notInBrandingBlock($this->defaultName);
     $this->notInBrandingBlock($this->whiteLabel->getName());
     $this->notInBrandingBlock($this->whiteLabel->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri()));
 
     // White label 1 (again).
     $this->setCurrentWhiteLabel($this->whiteLabel);
@@ -176,12 +177,12 @@ class WhiteLabelCacheTest extends WhiteLabelTestBase {
     // Should contain.
     $this->inBrandingBlock($this->whiteLabel->getName());
     $this->inBrandingBlock($this->whiteLabel->getSlogan());
-    $this->inImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri())));
+    $this->inImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri()));
     // Should not contain.
     $this->notInBrandingBlock($this->defaultName);
     $this->notInBrandingBlock($this->whiteLabel2->getName());
     $this->notInBrandingBlock($this->whiteLabel2->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel2->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel2->getLogo()->getFileUri()));
 
     // No white label (again).
     $this->resetWhiteLabel();
@@ -192,10 +193,10 @@ class WhiteLabelCacheTest extends WhiteLabelTestBase {
     // Should not contain.
     $this->notInBrandingBlock($this->whiteLabel->getName());
     $this->notInBrandingBlock($this->whiteLabel->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri()));
     $this->notInBrandingBlock($this->whiteLabel2->getName());
     $this->notInBrandingBlock($this->whiteLabel2->getSlogan());
-    $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel2->getLogo()->getFileUri())));
+    $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel2->getLogo()->getFileUri()));
   }
 
 }
diff --git a/tests/src/Functional/WhiteLabelFeatureToggleTest.php b/tests/src/Functional/WhiteLabelFeatureToggleTest.php
index a02594b..f53ed7e 100644
--- a/tests/src/Functional/WhiteLabelFeatureToggleTest.php
+++ b/tests/src/Functional/WhiteLabelFeatureToggleTest.php
@@ -38,7 +38,7 @@ class WhiteLabelFeatureToggleTest extends WhiteLabelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Make sure everything is disabled by default.
@@ -110,6 +110,7 @@ class WhiteLabelFeatureToggleTest extends WhiteLabelTestBase {
    *
    * @see \Drupal\Tests\whitelabel\Functional\WhiteLabelStyleSheetTest
    * @see \Drupal\Tests\whitelabel\Functional\WhiteLabelThemeNegotiatorTest
+   * @doesNotPerformAssertions
    */
   public function testPage() {
     // Place branding block with site name and slogan into header region.
@@ -140,8 +141,8 @@ class WhiteLabelFeatureToggleTest extends WhiteLabelTestBase {
         $this->notInBrandingBlock($this->whiteLabel->getSlogan());
 
       $config_key == 'site_logo' ?
-        $this->inImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri()))) :
-        $this->notInImagePath(file_url_transform_relative(file_create_url($this->whiteLabel->getLogo()->getFileUri())));
+        $this->inImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri())) :
+        $this->notInImagePath(\Drupal::service('file_url_generator')->generateString($this->whiteLabel->getLogo()->getFileUri()));
     }
 
     // Finally test the site name display option.
diff --git a/tests/src/Functional/WhiteLabelPermissionRevokeTest.php b/tests/src/Functional/WhiteLabelPermissionRevokeTest.php
index bde288e..2f9b305 100644
--- a/tests/src/Functional/WhiteLabelPermissionRevokeTest.php
+++ b/tests/src/Functional/WhiteLabelPermissionRevokeTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\whitelabel\Functional;
 
+use Drupal\user\RoleInterface;
 use Drupal\user\Entity\Role;
 
 /**
@@ -31,7 +32,7 @@ class WhiteLabelPermissionRevokeTest extends WhiteLabelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->defaultName = $this->config('system.site')->get('name');
@@ -83,7 +84,7 @@ class WhiteLabelPermissionRevokeTest extends WhiteLabelTestBase {
     $this->setCurrentWhiteLabel($this->whiteLabel);
 
     // Assert that the view white label permission was provided during install.
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::load(Role::AUTHENTICATED_ID);
     $this->assertTrue($role->hasPermission('view white label pages'), 'The Authenticated role has the "view white label pages" permission.');
 
diff --git a/tests/src/Functional/WhiteLabelTestBase.php b/tests/src/Functional/WhiteLabelTestBase.php
index cec56b8..09a504e 100644
--- a/tests/src/Functional/WhiteLabelTestBase.php
+++ b/tests/src/Functional/WhiteLabelTestBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\whitelabel\Functional;
 
+use Drupal\user\Entity\User;
+use Drupal\whitelabel\Entity\WhiteLabelInterface;
+use Behat\Mink\Exception\ElementTextException;
+use Behat\Mink\Exception\ElementHtmlException;
 use Drupal\file\Entity\File;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\TestFileCreationTrait;
@@ -41,21 +45,21 @@ abstract class WhiteLabelTestBase extends BrowserTestBase {
   /**
    * Holds the white label owner.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   public $whiteLabelOwner;
 
   /**
    * Holds the white label.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @var WhiteLabelInterface
    */
   public $whiteLabel;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->whiteLabelOwner = $this->drupalCreateUser(['serve white label pages']);
@@ -79,7 +83,7 @@ abstract class WhiteLabelTestBase extends BrowserTestBase {
    * @param string $text
    *   The text to look for.
    *
-   * @throws \Behat\Mink\Exception\ElementTextException
+   * @throws ElementTextException
    */
   public function inBrandingBlock($text) {
     $this->assertSession()->elementTextContains('css', '.block-system-branding-block', $text);
@@ -91,7 +95,7 @@ abstract class WhiteLabelTestBase extends BrowserTestBase {
    * @param string $text
    *   The text to look for.
    *
-   * @throws \Behat\Mink\Exception\ElementTextException
+   * @throws ElementTextException
    */
   public function notInBrandingBlock($text) {
     $this->assertSession()->elementTextNotContains('css', '.block-system-branding-block', $text);
@@ -103,7 +107,7 @@ abstract class WhiteLabelTestBase extends BrowserTestBase {
    * @param string $src
    *   The value that should be present in the src attribute.
    *
-   * @throws \Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    */
   public function inImagePath($src) {
     $this->assertSession()->elementAttributeContains('css', '.block-system-branding-block img', 'src', $src);
@@ -115,7 +119,7 @@ abstract class WhiteLabelTestBase extends BrowserTestBase {
    * @param string $src
    *   The value that should not be present in the src attribute.
    *
-   * @throws \Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    */
   public function notInImagePath($src) {
     $this->assertSession()->elementAttributeNotContains('css', '.block-system-branding-block img', 'src', $src);
diff --git a/tests/src/Functional/WhiteLabelThemeNegotiatorTest.php b/tests/src/Functional/WhiteLabelThemeNegotiatorTest.php
index 063b302..f87aaad 100644
--- a/tests/src/Functional/WhiteLabelThemeNegotiatorTest.php
+++ b/tests/src/Functional/WhiteLabelThemeNegotiatorTest.php
@@ -19,7 +19,7 @@ class WhiteLabelThemeNegotiatorTest extends WhiteLabelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->container->get('theme_installer')->install(['seven']);
diff --git a/tests/src/FunctionalJavascript/WhiteLabelFieldTest.php b/tests/src/FunctionalJavascript/WhiteLabelFieldTest.php
index 06fdb5d..48b010c 100644
--- a/tests/src/FunctionalJavascript/WhiteLabelFieldTest.php
+++ b/tests/src/FunctionalJavascript/WhiteLabelFieldTest.php
@@ -26,7 +26,7 @@ class WhiteLabelFieldTest extends WhiteLabelJavascriptTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Make sure everything is disabled by default.
diff --git a/tests/src/FunctionalJavascript/WhiteLabelJavascriptTestBase.php b/tests/src/FunctionalJavascript/WhiteLabelJavascriptTestBase.php
index e5be6a0..c9bf854 100644
--- a/tests/src/FunctionalJavascript/WhiteLabelJavascriptTestBase.php
+++ b/tests/src/FunctionalJavascript/WhiteLabelJavascriptTestBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\whitelabel\FunctionalJavascript;
 
+use Drupal\user\Entity\User;
+use Drupal\whitelabel\Entity\WhiteLabelInterface;
+use Behat\Mink\Exception\ElementTextException;
+use Behat\Mink\Exception\ElementHtmlException;
 use Drupal\file\Entity\File;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\TestFileCreationTrait;
@@ -42,21 +46,21 @@ abstract class WhiteLabelJavascriptTestBase extends WebDriverTestBase {
   /**
    * Holds the white label owner.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   public $whiteLabelOwner;
 
   /**
    * Holds the white label.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @var WhiteLabelInterface
    */
   public $whiteLabel;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->whiteLabelOwner = $this->drupalCreateUser(['serve white label pages']);
@@ -80,7 +84,7 @@ abstract class WhiteLabelJavascriptTestBase extends WebDriverTestBase {
    * @param string $text
    *   The text to look for.
    *
-   * @throws \Behat\Mink\Exception\ElementTextException
+   * @throws ElementTextException
    */
   public function inBrandingBlock($text) {
     $this->assertSession()->elementTextContains('css', '.block-system-branding-block', $text);
@@ -92,7 +96,7 @@ abstract class WhiteLabelJavascriptTestBase extends WebDriverTestBase {
    * @param string $text
    *   The text to look for.
    *
-   * @throws \Behat\Mink\Exception\ElementTextException
+   * @throws ElementTextException
    */
   public function notInBrandingBlock($text) {
     $this->assertSession()->elementTextNotContains('css', '.block-system-branding-block', $text);
@@ -104,7 +108,7 @@ abstract class WhiteLabelJavascriptTestBase extends WebDriverTestBase {
    * @param string $src
    *   The value that should be present in the src attribute.
    *
-   * @throws \Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    */
   public function inImagePath($src) {
     $this->assertSession()->elementAttributeContains('css', '.block-system-branding-block img', 'src', $src);
@@ -116,7 +120,7 @@ abstract class WhiteLabelJavascriptTestBase extends WebDriverTestBase {
    * @param string $src
    *   The value that should not be present in the src attribute.
    *
-   * @throws \Behat\Mink\Exception\ElementHtmlException
+   * @throws ElementHtmlException
    */
   public function notInImagePath($src) {
     $this->assertSession()->elementAttributeNotContains('css', '.block-system-branding-block img', 'src', $src);
diff --git a/tests/src/FunctionalJavascript/WhiteLabelStyleSheetTest.php b/tests/src/FunctionalJavascript/WhiteLabelStyleSheetTest.php
index 9646b54..5123889 100644
--- a/tests/src/FunctionalJavascript/WhiteLabelStyleSheetTest.php
+++ b/tests/src/FunctionalJavascript/WhiteLabelStyleSheetTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\whitelabel\FunctionalJavascript;
 
+use Drupal\whitelabel\Entity\WhiteLabelInterface;
 /**
  * Tests added style sheets on white labeled pages.
  *
@@ -12,7 +13,7 @@ class WhiteLabelStyleSheetTest extends WhiteLabelJavascriptTestBase {
   /**
    * Holds the second generated white label throughout the different tests.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @var WhiteLabelInterface
    */
   private $whiteLabel2;
 
@@ -27,7 +28,7 @@ class WhiteLabelStyleSheetTest extends WhiteLabelJavascriptTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a secondary white label.
@@ -129,8 +130,8 @@ class WhiteLabelStyleSheetTest extends WhiteLabelJavascriptTestBase {
 
     // Get path.
     $file_path = 'public://whitelabel/' . $this->whiteLabel->getToken() . '/colors.css';
-    $url = file_create_url($file_path);
-    $html_path = file_url_transform_relative($url);
+    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file_path);
+    $html_path = \Drupal::service('file_url_generator')->transformRelative($url);
 
     // Assert stylesheet is not on the page.
     $this->drupalGet('<front>');
diff --git a/tests/src/Kernel/WhiteLabelAccessTest.php b/tests/src/Kernel/WhiteLabelAccessTest.php
index 9b04161..e46b176 100644
--- a/tests/src/Kernel/WhiteLabelAccessTest.php
+++ b/tests/src/Kernel/WhiteLabelAccessTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\whitelabel\Kernel;
 
+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\KernelTests\KernelTestBase;
@@ -42,14 +43,14 @@ class WhiteLabelAccessTest extends KernelTestBase {
   /**
    * Access handler.
    *
-   * @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface
+   * @var EntityAccessControlHandlerInterface
    */
   protected $accessHandler;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('system', ['sequences']);
     $this->installEntitySchema('user');
@@ -137,9 +138,9 @@ class WhiteLabelAccessTest extends KernelTestBase {
    *   and account, with each key as the name of an operation (e.g. 'view',
    *   'delete') and each value a Boolean indicating whether access to that
    *   operation should be granted.
-   * @param \Drupal\whitelabel\Entity\WhiteLabelInterface $white_label
+   * @param WhiteLabelInterface $white_label
    *   The white label object to check.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account for which to check access.
    */
   public function assertWhiteLabelAccess(array $ops, WhiteLabelInterface $white_label, AccountInterface $account) {
@@ -154,7 +155,7 @@ class WhiteLabelAccessTest extends KernelTestBase {
    *
    * @param bool $result
    *   Whether access should be granted or not.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account for which to check access.
    * @param string|null $langcode
    *   (optional) The language code indicating which translation of the node
diff --git a/tests/src/Kernel/WhiteLabelConditionTest.php b/tests/src/Kernel/WhiteLabelConditionTest.php
index bac97ff..ae265cd 100644
--- a/tests/src/Kernel/WhiteLabelConditionTest.php
+++ b/tests/src/Kernel/WhiteLabelConditionTest.php
@@ -20,7 +20,7 @@ class WhiteLabelConditionTest extends EntityKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('whitelabel');
diff --git a/tests/src/Kernel/WhiteLabelConfigOverrideTest.php b/tests/src/Kernel/WhiteLabelConfigOverrideTest.php
index c1bbb64..cfa557b 100644
--- a/tests/src/Kernel/WhiteLabelConfigOverrideTest.php
+++ b/tests/src/Kernel/WhiteLabelConfigOverrideTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\whitelabel\Kernel;
 
+use Drupal\whitelabel\Entity\WhiteLabelInterface;
 use Drupal\file\Entity\File;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
@@ -41,7 +42,7 @@ class WhiteLabelConfigOverrideTest extends KernelTestBase {
   /**
    * Holds the generated white label throughout the different tests.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @var WhiteLabelInterface
    */
   private $whiteLabel;
 
@@ -55,7 +56,7 @@ class WhiteLabelConfigOverrideTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('system', ['sequences']);
diff --git a/tests/src/Kernel/WhiteLabelInboundPathProcessingTest.php b/tests/src/Kernel/WhiteLabelInboundPathProcessingTest.php
index bc23a86..88f8d9c 100644
--- a/tests/src/Kernel/WhiteLabelInboundPathProcessingTest.php
+++ b/tests/src/Kernel/WhiteLabelInboundPathProcessingTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\whitelabel\Kernel;
 
+use Drupal\whitelabel\Entity\WhiteLabelInterface;
+use Drupal\Core\PathProcessor\PathProcessorManager;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
 use Drupal\Tests\whitelabel\Traits\WhiteLabelCreationTrait;
@@ -42,7 +44,7 @@ class WhiteLabelInboundPathProcessingTest extends KernelTestBase {
   /**
    * Holds the generated white label throughout the different tests.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @var WhiteLabelInterface
    */
   private $whiteLabel;
 
@@ -63,7 +65,7 @@ class WhiteLabelInboundPathProcessingTest extends KernelTestBase {
   /**
    * The PathProcessorManager.
    *
-   * @var \Drupal\Core\PathProcessor\PathProcessorManager
+   * @var PathProcessorManager
    */
   private $pathProcessorManager;
 
@@ -75,7 +77,7 @@ class WhiteLabelInboundPathProcessingTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('system', ['sequences']);
diff --git a/tests/src/Kernel/WhiteLabelOutboundPathProcessingTest.php b/tests/src/Kernel/WhiteLabelOutboundPathProcessingTest.php
index cf4ad45..5a99f1e 100644
--- a/tests/src/Kernel/WhiteLabelOutboundPathProcessingTest.php
+++ b/tests/src/Kernel/WhiteLabelOutboundPathProcessingTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\whitelabel\Kernel;
 
+use Drupal\whitelabel\Entity\WhiteLabelInterface;
 use Drupal\Core\Url;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ -42,7 +43,7 @@ class WhiteLabelOutboundPathProcessingTest extends KernelTestBase {
   /**
    * Holds the generated white label throughout the different tests.
    *
-   * @var \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @var WhiteLabelInterface
    */
   private $whiteLabel;
 
@@ -63,7 +64,7 @@ class WhiteLabelOutboundPathProcessingTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('system', ['sequences']);
diff --git a/tests/src/Kernel/WhiteLabelValidatorTest.php b/tests/src/Kernel/WhiteLabelValidatorTest.php
index f82ad5f..4a76fad 100644
--- a/tests/src/Kernel/WhiteLabelValidatorTest.php
+++ b/tests/src/Kernel/WhiteLabelValidatorTest.php
@@ -29,7 +29,7 @@ class WhiteLabelValidatorTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('system', ['sequences']);
diff --git a/tests/src/Traits/WhiteLabelCreationTrait.php b/tests/src/Traits/WhiteLabelCreationTrait.php
index 813f85b..1e4cd9c 100644
--- a/tests/src/Traits/WhiteLabelCreationTrait.php
+++ b/tests/src/Traits/WhiteLabelCreationTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\whitelabel\Traits;
 
+use Drupal\whitelabel\WhiteLabelProviderInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Tests\BrowserTestBase;
@@ -19,14 +20,14 @@ trait WhiteLabelCreationTrait {
   /**
    * Holds the white label provider.
    *
-   * @var \Drupal\whitelabel\WhiteLabelProviderInterface
+   * @var WhiteLabelProviderInterface
    */
   protected $whiteLabelProvider;
 
   /**
    * Sets the provided white label.
    *
-   * @param \Drupal\whitelabel\Entity\WhiteLabelInterface $white_label
+   * @param WhiteLabelInterface $white_label
    *   The white label entity.
    */
   protected function setCurrentWhiteLabel(WhiteLabelInterface $white_label) {
@@ -77,7 +78,7 @@ trait WhiteLabelCreationTrait {
    *     @endcode
    *   - uid: The currently logged in user, or anonymous.
    *
-   * @return \Drupal\whitelabel\Entity\WhiteLabelInterface
+   * @return WhiteLabelInterface
    *   The created white label entity.
    */
   protected function createWhiteLabel(array $settings = []) {
diff --git a/whitelabel.module b/whitelabel.module
index 563a796..3cb1902 100644
--- a/whitelabel.module
+++ b/whitelabel.module
@@ -19,14 +19,14 @@ use Drupal\whitelabel\WhiteLabelSystemBrandingBlockAlter;
  * Implements hook_css_alter().
  */
 function whitelabel_css_alter(&$css, AttachedAssetsInterface $assets) {
-  /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel */
+  /** @var WhiteLabelInterface $whitelabel */
   if ($whitelabel = \Drupal::service('whitelabel.whitelabel_provider')->getWhiteLabel()) {
     // If a white label library is requested, inject the associated stylesheets.
     if (in_array('whitelabel/whitelabel.' . $whitelabel->getToken(), $assets->getLibraries())) {
       $stylesheets = $whitelabel->getStylesheets();
       foreach ($stylesheets as $i => $stylesheet) {
-        $url = file_create_url($stylesheet);
-        $path = file_url_transform_relative($url);
+        $url = \Drupal::service('file_url_generator')->generateAbsoluteString($stylesheet);
+        $path = \Drupal::service('file_url_generator')->transformRelative($url);
 
         // Insert a new stylesheet and hash with the palette to be able to
         // update the cached version once the file is regenerated.
@@ -58,7 +58,7 @@ function whitelabel_page_attachments(array &$attachments) {
   // Add the white label cache context.
   $attachments['#cache']['contexts'][] = 'whitelabel';
 
-  /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel */
+  /** @var WhiteLabelInterface $whitelabel */
   if ($whitelabel = \Drupal::service('whitelabel.whitelabel_provider')->getWhiteLabel()) {
     // Fetch from build array.
     $cacheable_metadata = CacheableMetadata::createFromRenderArray($attachments);
@@ -185,7 +185,7 @@ function whitelabel_entity_extra_field_info() {
  *
  * @param string $theme
  *   The machine name of the theme whose color settings are being configured.
- * @param \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel
+ * @param WhiteLabelInterface $whitelabel
  *   An white label entity (used to extract current color scheme).
  *
  * @return array
@@ -303,7 +303,7 @@ function whitelabel_theme() {
  *   - whitelabel: A white label entity.
  */
 function template_preprocess_whitelabel_preview(array &$variables) {
-  /** @var \Drupal\whitelabel\Entity\WhiteLabelInterface $whitelabel */
+  /** @var WhiteLabelInterface $whitelabel */
   $whitelabel = &$variables['whitelabel'];
 
   // Get the default theme.
@@ -325,7 +325,7 @@ function template_preprocess_whitelabel_preview(array &$variables) {
   }
 
   // Attempt to load preview HTML if the theme provides it.
-  $preview_html_path = \Drupal::root() . '/' . (isset($info['preview_html']) ? drupal_get_path('theme', $theme) . '/' . $info['preview_html'] : drupal_get_path('module', 'color') . '/preview.html');
+  $preview_html_path = \Drupal::root() . '/' . (isset($info['preview_html']) ? \Drupal::service('extension.list.theme')->getPath($theme) . '/' . $info['preview_html'] : \Drupal::service('extension.list.module')->getPath('color') . '/preview.html');
   $variables['html_preview']['#markup'] = file_get_contents($preview_html_path);
 
   // Add hidden form elements mimicing the color form so the preview library can
