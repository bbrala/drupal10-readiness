modules/contrib/pdb/modules/pdb_ember/src/Plugin/Block/EmberBlock.php
modules/contrib/pdb/modules/pdb_ng2/pdb_ng2.module
modules/contrib/pdb/modules/pdb_ng2/src/Form/PdbNg2Form.php
modules/contrib/pdb/modules/pdb_ng2/src/Plugin/Block/Ng2Block.php
modules/contrib/pdb/modules/pdb_ng2/src/Plugin/Derivative/Ng2BlockDeriver.php
modules/contrib/pdb/modules/pdb_react/pdb_react.module
modules/contrib/pdb/modules/pdb_react/src/Plugin/Block/ReactBlock.php
modules/contrib/pdb/modules/pdb_react/src/Plugin/Derivative/ReactBlockDeriver.php
modules/contrib/pdb/pdb.module
modules/contrib/pdb/src/ComponentDiscovery.php
modules/contrib/pdb/src/ComponentDiscoveryInterface.php
modules/contrib/pdb/src/Discovery/PdbRecursiveExtensionFilterIterator.php
modules/contrib/pdb/src/Event/PdbDiscoveryEvent.php
modules/contrib/pdb/src/FrameworkAwareBlockInterface.php
modules/contrib/pdb/src/Plugin/Block/PdbBlock.php
modules/contrib/pdb/src/Plugin/Derivative/PdbBlockDeriver.php
modules/contrib/pdb/tests/src/Unit/Plugin/Block/PdbBlockTest.php
modules/contrib/pdb/tests/src/Unit/Plugin/Derivative/PdbBlockDeriverTest.php

8 files with changes
====================

1) modules/contrib/pdb/tests/src/Unit/Plugin/Derivative/PdbBlockDeriverTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pdb\Unit\Plugin\Derivative;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\pdb\Plugin\Derivative\PdbBlockDeriver;
@@ @@
  */
 class PdbBlockDeriverTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Mocked Component Discovery.
    *
-   * @var \Drupal\pdb\ComponentDiscoveryInterface
+   * @var ComponentDiscoveryInterface
    */
   protected $componentDiscovery;

@@ @@
   /**
    * Instance of the Block Deriver.
    *
-   * @var \Drupal\pdb\Plugin\Derivative\PdbBlockDeriver
+   * @var PdbBlockDeriver
    */
   protected $deriver;

@@ @@
   /**
    * Create the setup for constants.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Mock the UUID service.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/pdb/tests/src/Unit/Plugin/Block/PdbBlockTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\pdb\Unit\Plugin\Block;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContextAwarePluginInterface;
 use Drupal\Tests\UnitTestCase;
@@ @@
  */
 class PdbBlockTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Instance of the Plugin.
    *
-   * @var \Drupal\pdb\Plugin\Block\PdbBlock
+   * @var PdbBlock
    */
   protected $plugin;

@@ @@
   /**
    * Create the setup for constants and plugin instance.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Mock the UUID service.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/pdb/src/Plugin/Derivative/PdbBlockDeriver.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The component discovery service.
    *
-   * @var \Drupal\pdb\ComponentDiscoveryInterface
+   * @var ComponentDiscoveryInterface
    */
   protected $componentDiscovery;

@@ @@
   /**
    * PdbBlockDeriver constructor.
    *
-   * @param \Drupal\pdb\ComponentDiscoveryInterface $component_discovery
+   * @param ComponentDiscoveryInterface $component_discovery
    *   The component discovery service.
    */
   public function __construct(ComponentDiscoveryInterface $component_discovery) {
@@ @@
    * @param array $contexts
    *   Contexts as defined in component label.
    *
-   * @return \Drupal\Core\Plugin\Context\ContextDefinition[]
+   * @return ContextDefinition[]
    *   Array of context to be used by block module.
    */
   protected function createContexts(array $contexts) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/pdb/src/Plugin/Block/PdbBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pdb\Plugin\Block;

+use Drupal\Component\Plugin\Context\ContextInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\Plugin\DataType\EntityAdapter;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Get the value of contexts.
    *
-   * @param \Drupal\Component\Plugin\Context\ContextInterface[] $contexts
+   * @param ContextInterface[] $contexts
    *   The contexts to get value.
    *
    * @return array
@@ @@
    *
    * @param string $key
    *   The context key.
-   * @param \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $data
+   * @param EntityAdapter $data
    *   The context data.
    * @param array $context_values
    *   Array with contexts values.
@@ @@
   /**
    * Add serialized entity to the JS Contexts.
    *
-   * @param \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $data
+   * @param EntityAdapter $data
    *   The entity to serialize.
    * @param array $js_contexts
    *   The full array of JS contexts.
@@ @@
   /**
    * Build settings component settings form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state array.
    */
   protected function buildComponentSettingsForm(FormStateInterface $form_state) {
@@ @@
    *
    * @param array $configuration
    *   The configuration array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state array.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/pdb/src/Event/PdbDiscoveryEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pdb\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Provides an event to handle user custom search dirs.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/pdb/src/ComponentDiscoveryInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\pdb;

+use Drupal\Core\Extension\Extension;
 /**
  * Defines the interface for services which discover front-end components.
  */
@@ @@
   /**
    * Find all available front-end components.
    *
-   * @return \Drupal\Core\Extension\Extension[]
+   * @return Extension[]
    *   The discovered components.
    */
   public function getComponents();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/pdb/src/ComponentDiscovery.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The info parser.
    *
-   * @var \Drupal\Core\Extension\InfoParserInterface
+   * @var InfoParserInterface
    */
   protected $infoParser;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *
    * @param string $root
    *   The root directory of the Drupal installation.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Extension\InfoParserInterface $info_parser
+   * @param InfoParserInterface $info_parser
    *   The info parser.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct($root, EventDispatcherInterface $event_dispatcher, InfoParserInterface $info_parser, ModuleHandlerInterface $module_handler) {
@@ @@

     // Try to get search dirs from subscribers.
     $event = new PdbDiscoveryEvent($search_dirs);
-    $this->eventDispatcher->dispatch(PdbDiscoveryEvent::SEARCH_DIRS, $event);
+    $this->eventDispatcher->dispatch($event, PdbDiscoveryEvent::SEARCH_DIRS);

     // Get the updated dicovery path from subscribers.
     $search_dirs = $event->getDirs();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/pdb/modules/pdb_ng2/src/Plugin/Block/Ng2Block.php:58

    ---------- begin diff ----------
@@ @@
         'ngClassName' => $component['ng_class_name'],
       ];
     }
-    $attached['drupalSettings']['pdb']['ng2']['module_path'] = drupal_get_path('module', 'pdb_ng2');
+    $attached['drupalSettings']['pdb']['ng2']['module_path'] = \Drupal::service('extension.list.module')->getPath('pdb_ng2');

     $config_settings = \Drupal::config('pdb_ng2.settings');
     if (isset($config_settings)) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 8 files have been changed by Rector                                       

