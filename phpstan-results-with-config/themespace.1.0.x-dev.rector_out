modules/contrib/themespace/src/Annotation/ProviderTypedPlugin.php
modules/contrib/themespace/src/Annotation/ProviderTypedPluginInterface.php
modules/contrib/themespace/src/DependencyInjection/Compiler/ThemeNamespacesPass.php
modules/contrib/themespace/src/Plugin/Definition/MergeablePluginDefinitionInterface.php
modules/contrib/themespace/src/Plugin/Definition/ProviderTypedPluginDefinition.php
modules/contrib/themespace/src/Plugin/Definition/ProviderTypedPluginDefinitionInterface.php
modules/contrib/themespace/src/Plugin/Discovery/ProviderTypedAnnotatedClassDiscovery.php
modules/contrib/themespace/src/Plugin/Discovery/ProviderTypedDeriverDiscoveryDecorator.php
modules/contrib/themespace/src/Plugin/Discovery/ProviderTypedDiscoveryInterface.php
modules/contrib/themespace/src/Plugin/Discovery/ProviderTypedYamlDiscovery.php
modules/contrib/themespace/src/Plugin/Discovery/ProviderTypedYamlDiscoveryDecorator.php
modules/contrib/themespace/src/Plugin/ProviderTypedPluginManager.php
modules/contrib/themespace/src/Plugin/ProviderTypedPluginManagerInterface.php
modules/contrib/themespace/src/Plugin/ProviderTypedPluginManagerTrait.php
modules/contrib/themespace/src/ThemespaceServiceProvider.php
modules/contrib/themespace/tests/modules/themespace_test/src/Annotation/ThemespaceTest.php
modules/contrib/themespace/tests/modules/themespace_test/src/Plugin/Derivative/ModuleYamlDeriver.php
modules/contrib/themespace/tests/modules/themespace_test/src/Plugin/TestPluginDefinition.php
modules/contrib/themespace/tests/modules/themespace_test/src/Plugin/Themespace/ModuleAnnoPlugin.php
modules/contrib/themespace/tests/modules/themespace_test/src/Plugin/Themespace/ModuleYamlPlugin.php
modules/contrib/themespace/tests/modules/themespace_test/src/Plugin/ThemespaceEmptyPluginManager.php
modules/contrib/themespace/tests/modules/themespace_test/src/Plugin/ThemespaceTestPluginManager.php
modules/contrib/themespace/tests/src/DerivableTestPluginDefinition.php
modules/contrib/themespace/tests/src/Kernel/PluginDiscoveryTest.php
modules/contrib/themespace/tests/src/Kernel/PluginManagerTest.php
modules/contrib/themespace/tests/src/Kernel/ThemeInstallTrait.php
modules/contrib/themespace/tests/src/Kernel/ThemeNamespaceTest.php
modules/contrib/themespace/tests/src/TestPluginDefinition.php
modules/contrib/themespace/tests/src/Unit/PluginDefinitionTest.php
modules/contrib/themespace/tests/themes/themespace_test_subtheme/src/Plugin/Themespace/SubthemeAnnoPlugin.php
modules/contrib/themespace/tests/themes/themespace_test_theme/src/Plugin/Themespace/ThemeAnnoPlugin.php
modules/contrib/themespace/tests/themes/themespace_test_theme/src/Plugin/Themespace/ThemeYamlPlugin.php
modules/contrib/themespace/themespace.module

9 files with changes
====================

1) modules/contrib/themespace/tests/src/TestPluginDefinition.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\themespace;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\themespace\Plugin\Definition\ProviderTypedPluginDefinition;

 /**
@@ @@
   /**
    * Standard and common property to assignment.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @var TranslatableMarkup|string
    */
   public $label;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


2) modules/contrib/themespace/tests/src/Kernel/ThemeInstallTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\themespace\Kernel;

+use Drupal\Core\Extension\Extension;
 use Drupal\Core\Extension\ModuleExtensionList;

 /**
@@ @@
     // "core_version_requirement" that might be purposefully there for
     // deprecation testing (ex: simpletest_deprecation_test.info.yml).
     foreach ($moduleList as $extension) {
-      /** @var \Drupal\Core\Extension\Extension|object $extension */
+      /** @var Extension|object $extension */
       $extension->info = $infoParser->parse($extension->getPathname());
     }

     // Create a mock "extension.list.module" service so as not to trigger any
     // the InfoParserException mentioned above, while installing themes.
-    $extensionList = $this->getMockBuilder(ModuleExtensionList::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $extensionList = $this->createMock(ModuleExtensionList::class);

     $extensionList->expects($this->any())
       ->method('getList')
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/themespace/tests/src/Kernel/PluginDiscoveryTest.php:73

    ---------- begin diff ----------
@@ @@
   /**
    * Asserts that the discovery found plugin and verifies definitions.
    *
-   * @param \Drupal\themespace\Plugin\Discovery\ProviderTypedDiscoveryInterface $discovery
+   * @param ProviderTypedDiscoveryInterface $discovery
    *   The discovery to use for finding plugin definitions.
    * @param array $types
    *   An array of the discovery types expected from this discovery being used
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/themespace/tests/modules/themespace_test/src/Plugin/Derivative/ModuleYamlDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\themespace_test\Plugin\Derivative;

+use Drupal\themespace_test\Plugin\TestPluginDefinition;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * @param string $base_plugin_id
    *   The plugin ID of the deriver definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct($base_plugin_id, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
-    /** @var \Drupal\themespace_test\Plugin\TestPluginDefinition */
+    /** @var TestPluginDefinition */
     $base = $base_plugin_definition;

     $this->derivatives = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/themespace/src/Plugin/ProviderTypedPluginManagerTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\themespace\Plugin;

+use Drupal\Component\Plugin\Discovery\DiscoveryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\themespace\Plugin\Definition\ProviderTypedPluginDefinitionInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * Get the theme handler.
    *
-   * @return \Drupal\Core\Extension\ThemeHandlerInterface
+   * @return ThemeHandlerInterface
    *   The theme handler object.
    */
   protected function getThemeHandler(): ThemeHandlerInterface {
@@ @@
   /**
    * Get the module handler.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module handler object.
    */
   protected function getModuleHandler(): ModuleHandlerInterface {
@@ @@
    * Should be implemented by the plugin manager to get a provider typed
    * plugin discovery object.
    *
-   * @return \Drupal\Component\Plugin\Discovery\DiscoveryInterface
+   * @return DiscoveryInterface
    *   The plugin discovery object.
    *
    * @see \Drupal\Core\Plugin\PluginManagerBase::getDiscovery()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/themespace/src/Plugin/ProviderTypedPluginManager.php:32

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    * @param string|null $plugin_interface
    *   The interface each plugin should implement.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/themespace/src/Plugin/Discovery/ProviderTypedYamlDiscoveryDecorator.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The discovery object that is being decorated.
    *
-   * @var \Drupal\Component\Plugin\Discovery\DiscoveryInterface
+   * @var DiscoveryInterface
    */
   protected $decorated;

@@ @@
   /**
    * Constructs a new ProviderTypedYamlDiscoveryDecorator object.
    *
-   * @param \Drupal\Component\Plugin\Discovery\DiscoveryInterface $decorated
+   * @param DiscoveryInterface $decorated
    *   The discovery object that is being decorated.
    * @param string $name
    *   The file name suffix to use for discovery; for example, 'test' will
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/themespace/src/Plugin/Discovery/ProviderTypedYamlDiscovery.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\themespace\Plugin\Discovery;

+use Drupal\Component\Plugin\Definition\PluginDefinition;
 use Drupal\Component\Discovery\DiscoverableInterface;
 use Drupal\Component\Plugin\Discovery\DiscoveryTrait;
 use Drupal\Core\Discovery\YamlDiscovery;
@@ @@
    * instances are keyed by "theme" or "module" and are only created if the
    * relevant directories were provided to the constructor.
    *
-   * @var \Drupal\Component\Discovery\DiscoverableInterface[]
+   * @var DiscoverableInterface[]
    */
   protected $discovery = [];

@@ @@
    * @param array $definition
    *   Plugin definition from the YAML file.
    *
-   * @return \Drupal\Component\Plugin\Definition\PluginDefinition|array
+   * @return PluginDefinition|array
    *   The plugin definition as of the appropriate class, or the original
    *   definition array if no class is set for the plugin definition.
    */
@@ @@
   /**
    * Find all plugin definition using the providered discovery object.
    *
-   * @param \Drupal\Component\Discovery\DiscoverableInterface $discovery
+   * @param DiscoverableInterface $discovery
    *   The discovery object to use to find definitions.
    * @param string $provider_type
    *   The provider type to apply to each of the plugin definitions. Should be
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/themespace/src/Plugin/Definition/MergeablePluginDefinitionInterface.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Merge information from another plugin definition into this one.
    *
-   * @param \Drupal\Component\Plugin\Definition\PluginDefinitionInterface|array $definition
+   * @param PluginDefinitionInterface|array $definition
    *   Other plugin definition to merge into this one. Commonly this is a base
    *   plugin definition being applied to a derived definition.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 9 files have been changed by Rector                                       

