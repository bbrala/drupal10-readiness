diff --git a/js_component.api.php b/js_component.api.php
index 0c65cda..311df10 100644
--- a/js_component.api.php
+++ b/js_component.api.php
@@ -1,15 +1,15 @@
 <?php
 
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * @file
  * Define the JS component API documentation.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Perform altercations on the JS component form.
  *
@@ -17,15 +17,15 @@
  *   An array of JS component form elements.
  * @param array $configuration
  *   An array of JS component configurations.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state instance.
  */
-function hook_js_component_form_alter(array &$form, array $configuration, Drupal\Core\Form\FormStateInterface $form_state) {
+function hook_js_component_form_alter(array &$form, array $configuration, FormStateInterface $form_state) {
   $form['resource'] = [
     '#type' => 'select',
-    '#title' => new Drupal\Core\StringTranslation\TranslatableMarkup('Resource'),
+    '#title' => new TranslatableMarkup('Resource'),
     '#options' => [],
-    '#empty_option' => new Drupal\Core\StringTranslation\TranslatableMarkup('- None -'),
+    '#empty_option' => new TranslatableMarkup('- None -'),
     '#default_value' => $configuration['resource'] ?? NULL,
   ];
 }
@@ -35,12 +35,12 @@ function hook_js_component_form_alter(array &$form, array $configuration, Drupal
  *
  * @param array $values
  *   The JS component values.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state instance.
  */
 function hook_js_component_form_submit(
   array &$values,
-  Drupal\Core\Form\FormStateInterface $form_state
+  FormStateInterface $form_state
 ) {
   if ($resource = $form_state->getValue('resource')) {
     $values['resource'] = $resource;
diff --git a/js_component.info.yml b/js_component.info.yml
index 7a6f1b6..ce9667f 100644
--- a/js_component.info.yml
+++ b/js_component.info.yml
@@ -1,5 +1,5 @@
 type: module
 name: JS Component
 description: Define JS components as custom blocks from a theme or module.
-core_version_requirement: ^8.7.7 || ^9
+core_version_requirement: ^9.3 || ^10
 package: Other
diff --git a/js_component.module b/js_component.module
index 4965ebe..d5180c4 100644
--- a/js_component.module
+++ b/js_component.module
@@ -59,7 +59,7 @@ function js_component_theme($existing, $type, $theme, $path) {
 function template_preprocess_js_component(&$variables) {
   $element = $variables['element'];
 
-  /** @var \Drupal\js_component\Plugin\Block\JSComponentBlockType $block */
+  /** @var JSComponentBlockType $block */
   $block = $element['#block'];
 
   if ($block instanceof JSComponentBlockType) {
diff --git a/src/Event/BuildComponentDataEvent.php b/src/Event/BuildComponentDataEvent.php
index 4c0b5e6..a6627b4 100644
--- a/src/Event/BuildComponentDataEvent.php
+++ b/src/Event/BuildComponentDataEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\js_component\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\js_component\Plugin\JSComponent;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Build component data event object.
@@ -11,7 +11,7 @@ use Symfony\Component\EventDispatcher\Event;
 class BuildComponentDataEvent extends Event {
 
   /**
-   * @var \Drupal\js_component\Plugin\JSComponent
+   * @var JSComponent
    */
   protected $component;
 
@@ -30,7 +30,7 @@ class BuildComponentDataEvent extends Event {
    *
    * @param array $configuration
    *   An array of the JS component block configuration.
-   * @param \Drupal\js_component\Plugin\JSComponent $component
+   * @param JSComponent $component
    */
   public function __construct(
     array $configuration,
@@ -43,7 +43,7 @@ class BuildComponentDataEvent extends Event {
   /**
    * Get the JS component instance.
    *
-   * @return \Drupal\js_component\Plugin\JSComponent
+   * @return JSComponent
    */
   public function getComponent() {
     return $this->component;
diff --git a/src/EventSubscriber/JSComponentBuildEventSubscribe.php b/src/EventSubscriber/JSComponentBuildEventSubscribe.php
index 3b5a8d4..820c0e5 100644
--- a/src/EventSubscriber/JSComponentBuildEventSubscribe.php
+++ b/src/EventSubscriber/JSComponentBuildEventSubscribe.php
@@ -26,7 +26,7 @@ class JSComponentBuildEventSubscribe implements EventSubscriberInterface {
   /**
    * Build the JS component data.
    *
-   * @param \Drupal\js_component\Event\BuildComponentDataEvent $event
+   * @param BuildComponentDataEvent $event
    *   The build component event instance.
    */
   public function buildJSComponentData(
@@ -40,7 +40,7 @@ class JSComponentBuildEventSubscribe implements EventSubscriberInterface {
   /**
    * Build the JS provider data.
    *
-   * @param \Drupal\js_component\Event\BuildComponentDataEvent $event
+   * @param BuildComponentDataEvent $event
    *   The build component event instance.
    */
   public function buildJSProviderData(
diff --git a/src/JSComponentBaseForm.php b/src/JSComponentBaseForm.php
index 32ef1f6..23684a6 100644
--- a/src/JSComponentBaseForm.php
+++ b/src/JSComponentBaseForm.php
@@ -87,7 +87,7 @@ abstract class JSComponentBaseForm implements JSComponentFormInterface, JsCompon
    *
    * @param array $form
    *   An array of form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    *
    * @return array
@@ -126,7 +126,7 @@ abstract class JSComponentBaseForm implements JSComponentFormInterface, JsCompon
    *
    * @param $name
    *   The form element name.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    * @param null $default_value
    *   The default value to use if no value is retrieved.
diff --git a/src/JSComponentFormInterface.php b/src/JSComponentFormInterface.php
index 245f69e..09c07e1 100644
--- a/src/JSComponentFormInterface.php
+++ b/src/JSComponentFormInterface.php
@@ -22,7 +22,7 @@ interface JSComponentFormInterface {
    *
    * @param array $form
    *   An array of form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    */
   public function validateComponentForm(array $form, FormStateInterface $form_state);
@@ -32,7 +32,7 @@ interface JSComponentFormInterface {
    *
    * @param array $form
    *   An array of form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    */
   public function buildComponentForm(array $form, FormStateInterface $form_state);
@@ -42,7 +42,7 @@ interface JSComponentFormInterface {
    *
    * @param array $form
    *   An array of form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    */
   public function submitComponentForm(array $form, FormStateInterface $form_state);
diff --git a/src/JsComponentInjectContainerInterface.php b/src/JsComponentInjectContainerInterface.php
index dca4715..6bf6e90 100644
--- a/src/JsComponentInjectContainerInterface.php
+++ b/src/JsComponentInjectContainerInterface.php
@@ -14,7 +14,7 @@ interface JsComponentInjectContainerInterface {
    *
    * @param array $configuration
    *   An array of component configurations.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The dependency service container.
    *
    * @return mixed
diff --git a/src/Plugin/Block/JSComponentBlockType.php b/src/Plugin/Block/JSComponentBlockType.php
index 8dbd3f5..6ad7145 100644
--- a/src/Plugin/Block/JSComponentBlockType.php
+++ b/src/Plugin/Block/JSComponentBlockType.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\js_component\Plugin\Block;
 
+use Drupal\js_component\JSComponentManager;
+use Drupal\js_component\JSComponentFormInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\js_component\JsComponentDataProviderInterface;
 use Drupal\Core\Utility\Token;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Template\Attribute;
@@ -43,12 +47,12 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -58,32 +62,32 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
   protected $componentRootId;
 
   /**
-   * @var \Drupal\js_component\Plugin\JSComponent
+   * @var JSComponent
    */
   protected $componentInstance;
 
   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Render\ElementInfoManagerInterface
+   * @var ElementInfoManagerInterface
    */
   protected $elementInfoManager;
 
   /**
-   * @var \Drupal\js_component\JSComponentManager
+   * @var JSComponentManager
    */
   protected $jsComponentManager;
 
@@ -107,18 +111,18 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
    *   The plugin identifier.
    * @param $plugin_definition
    *   The plugin metadata definition.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The Drupal token utility service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
+   * @param EventDispatcherInterface $event_dispatcher
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The library discovery service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    * @param ElementInfoManagerInterface $element_info_manager
    *   The element information manager service.
-   * @param \Drupal\js_component\JSComponentManagerInterface $js_component_manager
+   * @param JSComponentManagerInterface $js_component_manager
    *   The JS component manager service.
    */
   public function __construct(
@@ -181,7 +185,7 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
 
     $component = $this->getComponentInstance();
 
-    /** @var \Drupal\js_component\JSComponentFormInterface $handler */
+    /** @var JSComponentFormInterface $handler */
     if ($handler = $component->settingsClassHandler($this->getComponentSettings())) {
       $subform = $form['js_component'];
       $handler->validateComponentForm(
@@ -242,13 +246,13 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
    *
    * @param array $form
    *   An array of the form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    *
    * @return array
    *   An array of the processed form elements.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function processBuildComponent(array $form, FormStateInterface $form_state) {
     $component = $this->getComponentInstance();
@@ -271,7 +275,7 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
       ];
     }
 
-    /** @var \Drupal\js_component\JSComponentFormInterface $handler */
+    /** @var JSComponentFormInterface $handler */
     if ($handler = $component->settingsClassHandler($this->getComponentSettings())) {
       $subform = ['#parents' => $component_parents];
 
@@ -314,7 +318,7 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
    *
    * @param array $form
    *   The form elements to assess.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    *
    * @return array
@@ -348,7 +352,7 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
    *
    * @param array $form
    *   An array of the form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state instance.
    *
    * @return array
@@ -481,7 +485,7 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
    * @return string
    *   The component root identifier.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getComponentRootId() {
     if (!isset($this->componentRootId)) {
@@ -508,8 +512,8 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
   /**
    * Get JS component instance.
    *
-   * @return \Drupal\js_component\Plugin\JSComponent
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @return JSComponent
+   * @throws PluginException
    */
   protected function getComponentInstance() {
     if (!isset($this->componentInstance)) {
@@ -525,10 +529,10 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
   /**
    * Get JS component template attachment.
    *
-   * @return \Drupal\js_component\JSComponentAttachment
+   * @return JSComponentAttachment
    *   The JS component attachment instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getComponentTemplateAttachment() {
     $attachment = new JSComponentAttachment();
@@ -549,7 +553,7 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
    *
    * @return array
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getComponentDataAttachment() {
     $attachment = [];
@@ -569,7 +573,7 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
    *
    * @return array
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getComponentSettingsAttachment() {
     $attachment = [];
@@ -601,7 +605,7 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
    * @return array
    *   An array of the component data.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function buildComponentData() {
     $component_data_event = new BuildComponentDataEvent(
@@ -611,18 +615,18 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
     );
 
     return ($this->eventDispatcher->dispatch(
-      Events::BUILD_COMPONENT_DATA,
-      $component_data_event
+      $component_data_event,
+      Events::BUILD_COMPONENT_DATA
     ))->build();
   }
 
   /**
    * Get the component data provider instance.
    *
-   * @return bool|\Drupal\js_component\JsComponentDataProviderInterface
+   * @return bool|JsComponentDataProviderInterface
    *   Return the component data provider; otherwise FALSE if it doesn't exist.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getComponentDataProvider() {
     $component = $this->getComponentInstance();
@@ -671,7 +675,7 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
    * @return array
    *   The component form elements.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function buildComponentFormElements() {
     $elements = [];
@@ -774,7 +778,7 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
    * @return array
    *   An array of processed settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getComponentProcessedSettings() {
     $settings = $this->getComponentSettings();
@@ -792,7 +796,7 @@ class JSComponentBlockType extends BlockBase implements ContainerFactoryPluginIn
    * @param array $values
    *   An array of values that could contain tokens.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function processTokenReplacements(array &$values) {
     $data = [];
diff --git a/src/Plugin/JSComponent.php b/src/Plugin/JSComponent.php
index 5bc803e..8fcf510 100644
--- a/src/Plugin/JSComponent.php
+++ b/src/Plugin/JSComponent.php
@@ -46,9 +46,9 @@ class JSComponent extends PluginBase implements JSComponentInterface, ContainerF
    *   The plugin identifier.
    * @param mixed $plugin_definition
    *   The plugin metadata definition.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(
@@ -316,7 +316,9 @@ class JSComponent extends PluginBase implements JSComponentInterface, ContainerF
    * @throws \Exception
    */
   public function getProviderPath() {
-    return drupal_get_path($this->getProviderType(), $this->provider());
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+    return \Drupal::service('extension.path.resolver')->getPath($this->getProviderType(), $this->provider());
   }
 
   /**
