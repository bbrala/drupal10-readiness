diff --git a/src/ContextProvider/LogRouteContext.php b/src/ContextProvider/LogRouteContext.php
index eaeb283..dad91bc 100644
--- a/src/ContextProvider/LogRouteContext.php
+++ b/src/ContextProvider/LogRouteContext.php
@@ -21,14 +21,14 @@ class LogRouteContext implements ContextProviderInterface {
   /**
    * The route match object.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Constructs a new LogRouteContext.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match object.
    */
   public function __construct(RouteMatchInterface $route_match) {
diff --git a/src/Controller/LogAutocompleteController.php b/src/Controller/LogAutocompleteController.php
index a0fe3d9..9625ef5 100644
--- a/src/Controller/LogAutocompleteController.php
+++ b/src/Controller/LogAutocompleteController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\log\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,14 +18,14 @@ class LogAutocompleteController extends ControllerBase {
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Constructs a LogAutocompleteController object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   A database connection.
    */
   public function __construct(Connection $database) {
@@ -44,14 +46,14 @@ class LogAutocompleteController extends ControllerBase {
    *
    * @param string $log_bundle
    *   The log bundle name.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing autocomplete suggestions.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function autocomplete(string $log_bundle, Request $request) {
     $matches = [];
diff --git a/src/Entity/Log.php b/src/Entity/Log.php
index b4a10e4..237635d 100644
--- a/src/Entity/Log.php
+++ b/src/Entity/Log.php
@@ -132,7 +132,7 @@ class Log extends RevisionableContentEntityBase implements LogInterface {
    * {@inheritdoc}
    */
   public function getTypeNamePattern() {
-    /** @var \Drupal\log\Entity\LogTypeInterface $type */
+    /** @var LogTypeInterface $type */
     $type = \Drupal::entityTypeManager()
       ->getStorage('log_type')
       ->load($this->bundle());
@@ -144,7 +144,7 @@ class Log extends RevisionableContentEntityBase implements LogInterface {
    * {@inheritdoc}
    */
   public function getBundleLabel() {
-    /** @var \Drupal\log\Entity\LogTypeInterface $type */
+    /** @var LogTypeInterface $type */
     $type = \Drupal::entityTypeManager()
       ->getStorage('log_type')
       ->load($this->bundle());
@@ -275,7 +275,7 @@ class Log extends RevisionableContentEntityBase implements LogInterface {
   /**
    * Gets the workflow ID for the state field.
    *
-   * @param \Drupal\log\Entity\LogInterface $log
+   * @param LogInterface $log
    *   The log entity.
    *
    * @return string
diff --git a/src/Event/LogEvent.php b/src/Event/LogEvent.php
index 2f9b316..c47b875 100644
--- a/src/Event/LogEvent.php
+++ b/src/Event/LogEvent.php
@@ -19,14 +19,14 @@ class LogEvent extends Event {
   /**
    * The Log entity.
    *
-   * @var \Drupal\log\Entity\LogInterface
+   * @var LogInterface
    */
   public LogInterface $log;
 
   /**
    * Constructs the object.
    *
-   * @param \Drupal\log\Entity\LogInterface $log
+   * @param LogInterface $log
    *   The Log entity.
    */
   public function __construct(LogInterface $log) {
diff --git a/src/Form/LogActionFormBase.php b/src/Form/LogActionFormBase.php
index 77c2b1a..04637b9 100644
--- a/src/Form/LogActionFormBase.php
+++ b/src/Form/LogActionFormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\log\Form;
 
+use Drupal\log\Entity\LogInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -19,39 +20,39 @@ abstract class LogActionFormBase extends ConfirmFormBase {
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;
 
   /**
    * The logs to clone.
    *
-   * @var \Drupal\log\Entity\LogInterface[]
+   * @var LogInterface[]
    */
   protected $logs;
 
   /**
    * Constructs a LogActionFormBase form object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The current user.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, EntityTypeManagerInterface $entity_type_manager, AccountInterface $user) {
diff --git a/src/Form/LogCloneActionForm.php b/src/Form/LogCloneActionForm.php
index f260804..35e65f3 100644
--- a/src/Form/LogCloneActionForm.php
+++ b/src/Form/LogCloneActionForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\log\Form;
 
+use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -25,18 +26,18 @@ class LogCloneActionForm extends LogActionFormBase {
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs a LogCloneActionForm form object.
    *
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The current user.
    */
   public function __construct(PrivateTempStoreFactory $temp_store_factory, EntityTypeManagerInterface $entity_type_manager, AccountInterface $user, EventDispatcherInterface $event_dispatcher) {
@@ -94,7 +95,7 @@ class LogCloneActionForm extends LogActionFormBase {
       $accessible_logs[] = $log;
     }
 
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $new_date */
+    /** @var DrupalDateTime $new_date */
     if ($form_state->getValue('confirm') && !empty($accessible_logs)) {
       $new_date = $form_state->getValue('date');
       $count = count($this->logs);
diff --git a/src/Form/LogForm.php b/src/Form/LogForm.php
index f647bcb..2351ea4 100644
--- a/src/Form/LogForm.php
+++ b/src/Form/LogForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\log\Form;
 
+use Drupal\log\Entity\LogInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\ContentEntityForm;
@@ -22,29 +23,29 @@ class LogForm extends ContentEntityForm {
   /**
    * The Current User object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a LogForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, AccountInterface $current_user, DateFormatterInterface $date_formatter) {
@@ -70,7 +71,7 @@ class LogForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\log\Entity\LogInterface $log */
+    /** @var LogInterface $log */
     $log = $this->entity;
     // Changed must be sent to the client, for later overwrite error checking.
     $form['changed'] = [
diff --git a/src/Form/LogRescheduleActionForm.php b/src/Form/LogRescheduleActionForm.php
index 32f8c5a..5a8b2c2 100644
--- a/src/Form/LogRescheduleActionForm.php
+++ b/src/Form/LogRescheduleActionForm.php
@@ -155,7 +155,7 @@ class LogRescheduleActionForm extends LogActionFormBase {
         }
       }
       else {
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $new_date */
+        /** @var DrupalDateTime $new_date */
         $new_date = $form_state->getValue('date');
         foreach ($accessible_logs as $log) {
           if ($log->get('status')->first()->isTransitionAllowed('to_pending')) {
diff --git a/src/Form/LogTypeForm.php b/src/Form/LogTypeForm.php
index 1bc1c5a..8eccaab 100644
--- a/src/Form/LogTypeForm.php
+++ b/src/Form/LogTypeForm.php
@@ -18,23 +18,23 @@ class LogTypeForm extends EntityForm {
   /**
    * The workflow manager.
    *
-   * @var \Drupal\state_machine\WorkflowManagerInterface
+   * @var WorkflowManagerInterface
    */
   protected $workflowManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a new LogTypeForm object.
    *
-   * @param \Drupal\state_machine\WorkflowManagerInterface $workflow_manager
+   * @param WorkflowManagerInterface $workflow_manager
    *   The workflow manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(WorkflowManagerInterface $workflow_manager, ModuleHandlerInterface $module_handler) {
diff --git a/src/LogListBuilder.php b/src/LogListBuilder.php
index 2c71ca0..c5a3349 100644
--- a/src/LogListBuilder.php
+++ b/src/LogListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\log;
 
+use Drupal\log\Entity\LogInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\entity\BulkFormEntityListBuilder;
 
@@ -26,7 +27,7 @@ class LogListBuilder extends BulkFormEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\log\Entity\LogInterface $entity */
+    /** @var LogInterface $entity */
     $row['id'] = ['#markup' => $entity->id()];
     $row['name'] = $entity->toLink($entity->label(), 'canonical')->toRenderable();
     $row['type'] = ['#markup' => $entity->getBundleLabel()];
diff --git a/src/LogStorage.php b/src/LogStorage.php
index aa821ee..5172806 100644
--- a/src/LogStorage.php
+++ b/src/LogStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\log;
 
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 use Drupal\Core\Render\BubbleableMetadata;
@@ -18,8 +19,7 @@ class LogStorage extends SqlContentEntityStorage {
    * {@inheritdoc}
    */
   protected function doPostSave(EntityInterface $entity, $update) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
-
+    /** @var ContentEntityInterface $entity */
     if ($update && $this->entityType->isTranslatable()) {
       $this->invokeTranslationHooks($entity);
     }
@@ -70,7 +70,7 @@ class LogStorage extends SqlContentEntityStorage {
   /**
    * Helper method for generating a log name.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The log entity.
    *
    * @return string
diff --git a/src/Plugin/Action/LogActionBase.php b/src/Plugin/Action/LogActionBase.php
index 7936cd3..5c1c2f2 100644
--- a/src/Plugin/Action/LogActionBase.php
+++ b/src/Plugin/Action/LogActionBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\log\Plugin\Action;
 
+use Drupal\log\Entity\LogInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -17,14 +18,14 @@ abstract class LogActionBase extends ActionBase implements DependentPluginInterf
   /**
    * The tempstore object.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;
 
@@ -37,9 +38,9 @@ abstract class LogActionBase extends ActionBase implements DependentPluginInterf
    *   The plugin ID for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\TempStore\PrivateTempStore $temp_store
+   * @param PrivateTempStore $temp_store
    *   The tempstore factory.
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, PrivateTempStore $temp_store, AccountInterface $user) {
@@ -81,7 +82,7 @@ abstract class LogActionBase extends ActionBase implements DependentPluginInterf
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\log\Entity\LogInterface $object */
+    /** @var LogInterface $object */
     return $object->access('update', $account, $return_as_object);
   }
 
diff --git a/src/Plugin/Action/LogClone.php b/src/Plugin/Action/LogClone.php
index 364f6bc..6df9c31 100644
--- a/src/Plugin/Action/LogClone.php
+++ b/src/Plugin/Action/LogClone.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\log\Plugin\Action;
 
+use Drupal\log\Entity\LogInterface;
 use Drupal\Core\Session\AccountInterface;
 
 /**
@@ -20,7 +21,7 @@ class LogClone extends LogActionBase {
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\log\Entity\LogInterface $object */
+    /** @var LogInterface $object */
     $result = $object->access('view', $account, TRUE)
       ->andIf($object->access('create', $account, TRUE));
 
diff --git a/src/Plugin/Action/LogReschedule.php b/src/Plugin/Action/LogReschedule.php
index d65688e..9c72bf0 100644
--- a/src/Plugin/Action/LogReschedule.php
+++ b/src/Plugin/Action/LogReschedule.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\log\Plugin\Action;
 
+use Drupal\log\Entity\LogInterface;
 use Drupal\Core\Session\AccountInterface;
 
 /**
@@ -20,7 +21,7 @@ class LogReschedule extends LogActionBase {
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\log\Entity\LogInterface $object */
+    /** @var LogInterface $object */
     $result = $object->get('timestamp')->access('edit', $account, TRUE)
       ->andIf($object->access('update', $account, TRUE));
 
diff --git a/src/Plugin/Action/LogStateChangeBase.php b/src/Plugin/Action/LogStateChangeBase.php
index 7812eb1..5f3ea12 100644
--- a/src/Plugin/Action/LogStateChangeBase.php
+++ b/src/Plugin/Action/LogStateChangeBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\log\Plugin\Action;
 
+use Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Action\Plugin\Action\EntityActionBase;
 use Drupal\Core\Session\AccountInterface;
@@ -30,7 +31,7 @@ abstract class LogStateChangeBase extends EntityActionBase {
     }
 
     // Apply the transition to target state if not already the current state.
-    /** @var \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface $state_item */
+    /** @var StateItemInterface $state_item */
     $state_item = $log->get('status')->first();
     if ($state_item->getOriginalId() !== $this->targetState && $transition = $state_item->getWorkflow()->findTransition($state_item->getOriginalId(), $this->targetState)) {
       $state_item->applyTransition($transition);
@@ -58,13 +59,13 @@ abstract class LogStateChangeBase extends EntityActionBase {
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\log\Entity\LogInterface $object */
+    /** @var LogInterface $object */
     // First check entity and state field access.
     $result = $object->get('status')->access('edit', $account, TRUE)
       ->andIf($object->access('update', $account, TRUE));
 
     // Save the state field.
-    /** @var \Drupal\state_machine\Plugin\Field\FieldType\StateItemInterface $state_item */
+    /** @var StateItemInterface $state_item */
     $state_item = $object->get('status')->first();
 
     // If the state field is already in the target state, return early.
diff --git a/tests/src/Functional/LogActionsTest.php b/tests/src/Functional/LogActionsTest.php
index 993793d..0f5b051 100644
--- a/tests/src/Functional/LogActionsTest.php
+++ b/tests/src/Functional/LogActionsTest.php
@@ -24,15 +24,22 @@ class LogActionsTest extends LogTestBase {
     $log->save();
 
     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');
 
     $edit = [];
     $edit['action'] = 'log_clone_action';
     $edit['log_bulk_form[0]'] = TRUE;
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to clone this log?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to clone this log?'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('New date'));
 
     $new_timestamp = strtotime(date('Y-n-j', strtotime('+1 day', $timestamp)));
 
@@ -40,17 +47,20 @@ class LogActionsTest extends LogTestBase {
     $edit_clone['date[month]'] = date('n', $new_timestamp);
     $edit_clone['date[year]'] = date('Y', $new_timestamp);
     $edit_clone['date[day]'] = date('j', $new_timestamp);
-    $this->drupalPostForm(NULL, $edit_clone, $this->t('Clone'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Cloned 1 log'));
+    $this->submitForm($edit_clone, $this->t('Clone'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Cloned 1 log'));
     $logs = $this->storage->loadMultiple();
-    $this->assertEqual(count($logs), 2, 'There are two logs in the system.');
+    $this->assertEquals(count($logs), 2, 'There are two logs in the system.');
     $timestamps = [];
     foreach ($logs as $log) {
       $timestamps[] = $log->get('timestamp')->value;
     }
-    $this->assertEqual($timestamps, [$timestamp, $new_timestamp], 'Timestamp on the new log has been updated.');
+    $this->assertEquals($timestamps, [$timestamp, $new_timestamp], 'Timestamp on the new log has been updated.');
   }
 
   /**
@@ -74,17 +84,24 @@ class LogActionsTest extends LogTestBase {
     }
 
     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 3, 'There are three logs in the system.');
+    $this->assertEquals($num_of_logs, 3, 'There are three logs in the system.');
 
     $edit = [];
     $edit['action'] = 'log_clone_action';
     for ($i = 0; $i < 3; $i++) {
       $edit['log_bulk_form[' . $i . ']'] = TRUE;
     }
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to clone these logs?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to clone these logs?'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('New date'));
 
     $new_timestamp = strtotime(date('Y-n-j', strtotime('+1 day', $timestamp)));
 
@@ -92,13 +109,16 @@ class LogActionsTest extends LogTestBase {
     $edit_clone['date[month]'] = date('n', $new_timestamp);
     $edit_clone['date[year]'] = date('Y', $new_timestamp);
     $edit_clone['date[day]'] = date('j', $new_timestamp);
-    $this->drupalPostForm(NULL, $edit_clone, $this->t('Clone'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Cloned 3 logs'));
+    $this->submitForm($edit_clone, $this->t('Clone'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Cloned 3 logs'));
 
     $logs = $this->storage->loadMultiple();
-    $this->assertEqual(count($logs), 6, 'There are six logs in the system.');
+    $this->assertEquals(count($logs), 6, 'There are six logs in the system.');
     for ($i = 1; $i <= 3; $i++) {
       $expected_timestamps[] = $new_timestamp;
     }
@@ -106,7 +126,7 @@ class LogActionsTest extends LogTestBase {
     foreach ($logs as $log) {
       $log_timestamps[] = $log->get('timestamp')->value;
     }
-    $this->assertEqual($log_timestamps, $expected_timestamps, 'Timestamp on the new logs has been updated.');
+    $this->assertEquals($log_timestamps, $expected_timestamps, 'Timestamp on the new logs has been updated.');
   }
 
   /**
@@ -124,15 +144,22 @@ class LogActionsTest extends LogTestBase {
     $log->save();
 
     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');
 
     $edit = [];
     $edit['action'] = 'log_reschedule_action';
     $edit['log_bulk_form[0]'] = TRUE;
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to reschedule this log?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reschedule this log?'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('New date'));
 
     $new_timestamp = strtotime(date('Y-n-j', strtotime('+1 day', $timestamp)));
 
@@ -140,16 +167,19 @@ class LogActionsTest extends LogTestBase {
     $edit_reschedule['date[month]'] = date('n', $new_timestamp);
     $edit_reschedule['date[year]'] = date('Y', $new_timestamp);
     $edit_reschedule['date[day]'] = date('j', $new_timestamp);
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Rescheduled 1 log'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Rescheduled 1 log'));
 
     $logs = $this->storage->loadMultiple();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');
     $log = reset($logs);
-    $this->assertEqual($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
-    $this->assertEqual($log->get('status')->value, 'pending', 'Log has been set to pending.');
+    $this->assertEquals($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
+    $this->assertEquals($log->get('status')->value, 'pending', 'Log has been set to pending.');
   }
 
   /**
@@ -173,17 +203,24 @@ class LogActionsTest extends LogTestBase {
     }
 
     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 3, 'There are three logs in the system.');
+    $this->assertEquals($num_of_logs, 3, 'There are three logs in the system.');
 
     $edit = [];
     $edit['action'] = 'log_reschedule_action';
     for ($i = 0; $i < 3; $i++) {
       $edit['log_bulk_form[' . $i . ']'] = TRUE;
     }
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to reschedule these logs?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reschedule these logs?'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('New date'));
 
     $new_timestamp = strtotime('+1 day', $timestamp);
 
@@ -191,16 +228,19 @@ class LogActionsTest extends LogTestBase {
     $edit_reschedule['date[month]'] = date('n', $new_timestamp);
     $edit_reschedule['date[year]'] = date('Y', $new_timestamp);
     $edit_reschedule['date[day]'] = date('j', $new_timestamp);
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Rescheduled 3 logs'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Rescheduled 3 logs'));
 
     $logs = $this->storage->loadMultiple();
-    $this->assertEqual(count($logs), 3, 'There are three logs in the system.');
+    $this->assertEquals(count($logs), 3, 'There are three logs in the system.');
     foreach ($logs as $log) {
-      $this->assertEqual($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
-      $this->assertEqual($log->get('status')->value, 'pending', 'Log has been set to pending.');
+      $this->assertEquals($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
+      $this->assertEquals($log->get('status')->value, 'pending', 'Log has been set to pending.');
     }
   }
 
@@ -219,22 +259,32 @@ class LogActionsTest extends LogTestBase {
     $log->save();
 
     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');
 
     $edit = [];
     $edit['action'] = 'log_reschedule_action';
     $edit['log_bulk_form[0]'] = TRUE;
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to reschedule this log?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reschedule this log?'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('New date'));
 
     $edit_reschedule = [];
     $edit_reschedule['type_of_date'] = 1;
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log/reschedule');
-    $this->assertText($this->t('Please enter the amount of time for rescheduling.'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log/reschedule');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Please enter the amount of time for rescheduling.'));
 
     $new_timestamp = strtotime('+1 day', $timestamp);
 
@@ -242,16 +292,19 @@ class LogActionsTest extends LogTestBase {
     $edit_reschedule['type_of_date'] = 1;
     $edit_reschedule['amount'] = 1;
     $edit_reschedule['time'] = 'day';
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Rescheduled 1 log'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Rescheduled 1 log'));
 
     $logs = $this->storage->loadMultiple();
-    $this->assertEqual($num_of_logs, 1, 'There is one log in the system.');
+    $this->assertEquals($num_of_logs, 1, 'There is one log in the system.');
     $log = reset($logs);
-    $this->assertEqual($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
-    $this->assertEqual($log->get('status')->value, 'pending', 'Log has been set to pending.');
+    $this->assertEquals($log->get('timestamp')->value, $new_timestamp, 'Timestamp on the log has changed.');
+    $this->assertEquals($log->get('status')->value, 'pending', 'Log has been set to pending.');
   }
 
   /**
@@ -276,34 +329,44 @@ class LogActionsTest extends LogTestBase {
     }
 
     $num_of_logs = $this->storage->getQuery()->count()->execute();
-    $this->assertEqual($num_of_logs, 3, 'There are three logs in the system.');
+    $this->assertEquals($num_of_logs, 3, 'There are three logs in the system.');
 
     $edit = [];
     $edit['action'] = 'log_reschedule_action';
     for ($i = 0; $i < 3; $i++) {
       $edit['log_bulk_form[' . $i . ']'] = TRUE;
     }
-    $this->drupalPostForm('admin/content/log', $edit, $this->t('Apply to selected items'));
-    $this->assertResponse(200);
-    $this->assertText($this->t('Are you sure you want to reschedule these logs?'));
-    $this->assertText($this->t('New date'));
+    $this->drupalGet('admin/content/log');
+    $this->submitForm($edit, $this->t('Apply to selected items'));
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Are you sure you want to reschedule these logs?'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('New date'));
 
     $edit_reschedule = [];
     $edit_reschedule['type_of_date'] = 1;
     $edit_reschedule['amount'] = -1;
     $edit_reschedule['time'] = 'month';
-    $this->drupalPostForm(NULL, $edit_reschedule, $this->t('Reschedule'));
-    $this->assertResponse(200);
-    $this->assertUrl('admin/content/log');
-    $this->assertText($this->t('Rescheduled 3 logs'));
+    $this->submitForm($edit_reschedule, $this->t('Reschedule'));
+    $this->assertSession()->statusCodeEquals(200);
+    $this->assertSession()->addressEquals('admin/content/log');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains($this->t('Rescheduled 3 logs'));
 
     $logs = $this->storage->loadMultiple();
-    $this->assertEqual(count($logs), 3, 'There are three logs in the system.');
+    $this->assertEquals(count($logs), 3, 'There are three logs in the system.');
     $log_timestamps = [];
     foreach ($logs as $log) {
       $log_timestamps[] = $log->get('timestamp')->value;
     }
-    $this->assertEqual($log_timestamps, $expected_timestamps, 'Logs have been rescheduled');
+    $this->assertEquals($log_timestamps, $expected_timestamps, 'Logs have been rescheduled');
   }
 
 }
