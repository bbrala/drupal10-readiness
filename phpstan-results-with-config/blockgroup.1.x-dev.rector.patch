diff --git a/blockgroup.install b/blockgroup.install
index 8066a2c..a2305dc 100644
--- a/blockgroup.install
+++ b/blockgroup.install
@@ -1,15 +1,15 @@
 <?php
 
+use Drupal\Core\Entity\EntityRepositoryInterface;
 /**
  * @file
  *   Blockgroup install file.
  */
-
 /**
  * Updated blockgroup plugin IDs in block placements.
  */
 function blockgroup_update_8100() {
-  /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository */
+  /** @var EntityRepositoryInterface $entity_repository */
   $entity_repository = \Drupal::service('entity.repository');
   $config_factory = \Drupal::configFactory();
   $update_count = 0;
diff --git a/blockgroup.module b/blockgroup.module
index 5d3c79b..810551c 100644
--- a/blockgroup.module
+++ b/blockgroup.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\blockgroup\BlockGroupContentInterface;
 /**
  * @file
  * Block Group module hooks.
@@ -40,7 +41,7 @@ function blockgroup_system_info_alter(&$info, $file, $type) {
  */
 function blockgroup_region_list() {
   $regions = [];
-  /** @var \Drupal\blockgroup\BlockGroupContentInterface[] $blockgroups */
+  /** @var BlockGroupContentInterface[] $blockgroups */
   $blockgroups = BlockGroupContent::loadMultiple();
   foreach ($blockgroups as $blockgroup) {
     $regions[$blockgroup->id()] = (string) t('Block group: @label', [
diff --git a/src/Entity/BlockGroupContent.php b/src/Entity/BlockGroupContent.php
index cf31a08..59b8fd8 100755
--- a/src/Entity/BlockGroupContent.php
+++ b/src/Entity/BlockGroupContent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\blockgroup\Entity;
 
+use Drupal\Core\Extension\ThemeHandlerInterface;
 use Drupal\blockgroup\BlockGroupContentInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -88,7 +89,7 @@ class BlockGroupContent extends ConfigEntityBase implements BlockGroupContentInt
 
     // Refresh theme region list.
     // @see blockgroup_system_info_alter()
-    /** @var \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler */
+    /** @var ThemeHandlerInterface $theme_handler */
     $theme_handler = \Drupal::service('theme_handler');
     $theme_handler->refreshInfo();
 
diff --git a/src/Plugin/Block/BlockGroup.php b/src/Plugin/Block/BlockGroup.php
index 33d8c90..d169486 100755
--- a/src/Plugin/Block/BlockGroup.php
+++ b/src/Plugin/Block/BlockGroup.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\blockgroup\Plugin\Block;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\blockgroup\BlockGroupContentInterface;
+use Drupal\block\BlockInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Component\Plugin\ContextAwarePluginInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Block\MainContentBlockPluginInterface;
@@ -31,56 +36,56 @@ class BlockGroup extends BlockBase implements ContainerFactoryPluginInterface, M
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * The entity renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The context repository.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
    * The title resolver.
    *
-   * @var \Drupal\Core\Controller\TitleResolverInterface
+   * @var TitleResolverInterface
    */
   protected $titleResolver;
 
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The current Request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
@@ -107,21 +112,21 @@ class BlockGroup extends BlockBase implements ContainerFactoryPluginInterface, M
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
+   * @param ThemeManagerInterface $theme_manager
    *   The theme manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The context repository.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The context handler.
-   * @param \Drupal\Core\Controller\TitleResolverInterface $title_resolver
+   * @param TitleResolverInterface $title_resolver
    *   The title resolver.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ThemeManagerInterface $theme_manager, RendererInterface $renderer, ContextRepositoryInterface $context_repository, ContextHandlerInterface $context_handler, TitleResolverInterface $title_resolver, RouteMatchInterface $route_match, Request $request) {
@@ -158,17 +163,17 @@ class BlockGroup extends BlockBase implements ContainerFactoryPluginInterface, M
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
    */
   public function build() {
     $blockGroupStorage = $this->entityTypeManager->getStorage('block_group_content');
 
     $renderedBlocks = [];
     $derivativeId = $this->getDerivativeId();
-    /** @var \Drupal\blockgroup\BlockGroupContentInterface $blockGroup */
+    /** @var BlockGroupContentInterface $blockGroup */
     $blockGroup = $blockGroupStorage->load($derivativeId);
-    /** @var \Drupal\block\BlockInterface[] $blocks */
+    /** @var BlockInterface[] $blocks */
     $blocks = $this->entityTypeManager
       ->getStorage('block')
       ->loadByProperties([
@@ -192,7 +197,7 @@ class BlockGroup extends BlockBase implements ContainerFactoryPluginInterface, M
       }
       // Any other block.
       else {
-        /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+        /** @var AccessResultInterface $accessResult */
         $accessResult = $block->access('view', NULL, TRUE);
         if ($accessResult->isAllowed()) {
           // Inject runtime contexts.
diff --git a/src/Plugin/Derivative/BlockGroups.php b/src/Plugin/Derivative/BlockGroups.php
index aa0438e..f789b67 100755
--- a/src/Plugin/Derivative/BlockGroups.php
+++ b/src/Plugin/Derivative/BlockGroups.php
@@ -17,14 +17,14 @@ class BlockGroups extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The custom block storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $blockGroupStorage;
 
   /**
    * Constructs a BlockContent object.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $block_groups_storage
+   * @param EntityStorageInterface $block_groups_storage
    *   The custom block storage.
    */
   public function __construct(EntityStorageInterface $block_groups_storage) {
