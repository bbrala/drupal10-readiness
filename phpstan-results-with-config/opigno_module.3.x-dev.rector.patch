diff --git a/ActivityTypes/opigno_file_upload/opigno_file_upload.module b/ActivityTypes/opigno_file_upload/opigno_file_upload.module
index 43fd0d9..3ff8ba6 100644
--- a/ActivityTypes/opigno_file_upload/opigno_file_upload.module
+++ b/ActivityTypes/opigno_file_upload/opigno_file_upload.module
@@ -12,7 +12,7 @@ use Drupal\Core\Link;
 /**
  * Implements hook_form_BASE_FORM_ID_alter().
  */
-function opigno_file_upload_form_opigno_answer_opigno_file_upload_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function opigno_file_upload_form_opigno_answer_opigno_file_upload_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $form['#validate'][]  = 'opigno_file_upload_opigno_answer_opigno_file_upload_validate_handler';
   $form['#attached']['library'][] = 'opigno_file_upload/opigno_answer_upload_form';
 }
@@ -20,7 +20,7 @@ function opigno_file_upload_form_opigno_answer_opigno_file_upload_form_alter(&$f
 /**
  * Implements hook_form_BASE_FORM_ID_alter().
  */
-function opigno_file_upload_form_opigno_module_result_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
+function opigno_file_upload_form_opigno_module_result_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   $answers_id = array_filter(array_keys($form['answers']), 'is_int');
   foreach ($answers_id as $id) {
     $answer = OpignoAnswer::load($id);
diff --git a/ActivityTypes/opigno_file_upload/src/Plugin/ActivityAnswer/FileUploadActivityAnswer.php b/ActivityTypes/opigno_file_upload/src/Plugin/ActivityAnswer/FileUploadActivityAnswer.php
index 59d5c6c..b34e65f 100644
--- a/ActivityTypes/opigno_file_upload/src/Plugin/ActivityAnswer/FileUploadActivityAnswer.php
+++ b/ActivityTypes/opigno_file_upload/src/Plugin/ActivityAnswer/FileUploadActivityAnswer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_file_upload\Plugin\ActivityAnswer;
 
+use Drupal\file\Entity\File;
 use Drupal\opigno_module\ActivityAnswerPluginBase;
 use Drupal\opigno_module\Entity\OpignoActivityInterface;
 use Drupal\opigno_module\Entity\OpignoAnswerInterface;
@@ -74,7 +75,7 @@ class FileUploadActivityAnswer extends ActivityAnswerPluginBase {
    */
   public function getAnswerResultItemData(OpignoAnswerInterface $answer) {
     $data = [];
-    /** @var \Drupal\file\Entity\File $uploaded_file */
+    /** @var File $uploaded_file */
     $uploaded_file = $answer->get('opigno_file')->entity;
 
     if ($uploaded_file !== NULL) {
diff --git a/ActivityTypes/opigno_file_upload/src/Plugin/Field/FieldFormatter/OpignoEvaluationMethodFormatter.php b/ActivityTypes/opigno_file_upload/src/Plugin/Field/FieldFormatter/OpignoEvaluationMethodFormatter.php
index fb6c4e1..3e19008 100644
--- a/ActivityTypes/opigno_file_upload/src/Plugin/Field/FieldFormatter/OpignoEvaluationMethodFormatter.php
+++ b/ActivityTypes/opigno_file_upload/src/Plugin/Field/FieldFormatter/OpignoEvaluationMethodFormatter.php
@@ -36,7 +36,7 @@ class OpignoEvaluationMethodFormatter extends FormatterBase {
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
diff --git a/ActivityTypes/opigno_h5p/opigno_h5p.module b/ActivityTypes/opigno_h5p/opigno_h5p.module
index e50d148..bde4a9f 100644
--- a/ActivityTypes/opigno_h5p/opigno_h5p.module
+++ b/ActivityTypes/opigno_h5p/opigno_h5p.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\opigno_module\Form\OpignoAnswerForm;
+use Drupal\opigno_module\Entity\OpignoAnswer;
+use Drupal\opigno_module\Entity\OpignoModule;
+use Drupal\opigno_module\Entity\OpignoActivity;
 /**
  * @file
  * Module main functionality.
@@ -48,9 +52,9 @@ function _opigno_h5_form_submit($form, FormStateInterface $form_state) {
   $response = $form_state->getValue('response');
   $xapi_data = $form_state->getValue('xapi_data');
 
-  /** @var \Drupal\opigno_module\Form\OpignoAnswerForm $form_obj */
+  /** @var OpignoAnswerForm $form_obj */
   $form_obj = $form_state->getFormObject();
-  /** @var \Drupal\opigno_module\Entity\OpignoAnswer $entity */
+  /** @var OpignoAnswer $entity */
   $answer = $form_obj->getEntity();
 
   $answer->set('field_correct_response', $correct_response);
@@ -78,13 +82,13 @@ function opigno_h5p_theme_suggestions_opigno_user_result_item(array $variables)
  */
 function template_preprocess_opigno_user_result_item__opigno_h5p(&$variables) {
   $route = \Drupal::routeMatch();
-  /** @var \Drupal\opigno_module\Entity\OpignoModule $opigno_module */
+  /** @var OpignoModule $opigno_module */
   $opigno_module = $route->getParameter('opigno_module');
-  /** @var \Drupal\opigno_module\Entity\OpignoAnswer $answer */
+  /** @var OpignoAnswer $answer */
   $answer = $variables['opigno_answer'];
   // Check if module allow display answer content for users.
   $hide_results = $opigno_module->getHideResults($answer);
-  /** @var Drupal\opigno_module\Entity\OpignoActivity $answer_activity */
+  /** @var OpignoActivity $answer_activity */
   $answer_activity = $answer->getActivity();
   if (!$hide_results) {
     // Get xApiData.
diff --git a/ActivityTypes/opigno_scorm_activity/opigno_scorm_activity.theme.inc b/ActivityTypes/opigno_scorm_activity/opigno_scorm_activity.theme.inc
index 449d8c5..4fba67b 100644
--- a/ActivityTypes/opigno_scorm_activity/opigno_scorm_activity.theme.inc
+++ b/ActivityTypes/opigno_scorm_activity/opigno_scorm_activity.theme.inc
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\opigno_module\Entity\OpignoModule;
+use Drupal\opigno_module\Entity\OpignoAnswer;
+use Drupal\opigno_module\Entity\OpignoActivity;
 /**
  * @file
  * Contains opigno_scorm_activity.theme.inc.
@@ -20,13 +23,13 @@ use Drupal\opigno_scorm_activity\ScormReport;
  */
 function template_preprocess_opigno_user_result_item__opigno_scorm(&$variables) {
   $route = \Drupal::routeMatch();
-  /** @var \Drupal\opigno_module\Entity\OpignoModule $opigno_module */
+  /** @var OpignoModule $opigno_module */
   $opigno_module = $route->getParameter('opigno_module');
-  /** @var \Drupal\opigno_module\Entity\OpignoAnswer $answer */
+  /** @var OpignoAnswer $answer */
   $answer = $variables['opigno_answer'];
   // Check if module allow display answer content for users.
   $hide_results = $opigno_module->getHideResults($answer);
-  /** @var Drupal\opigno_module\Entity\OpignoActivity $answer_activity */
+  /** @var OpignoActivity $answer_activity */
   $answer_activity = $variables['opigno_answer_activity'];
   /* @var $answer_service \Drupal\opigno_module\ActivityAnswerManager */
   $answer_service = \Drupal::service('plugin.manager.activity_answer');
diff --git a/ActivityTypes/opigno_tincan_activity/src/Plugin/Field/FieldFormatter/OpignoTincanFieldFormatter.php b/ActivityTypes/opigno_tincan_activity/src/Plugin/Field/FieldFormatter/OpignoTincanFieldFormatter.php
index c3c93b4..07e5ddb 100644
--- a/ActivityTypes/opigno_tincan_activity/src/Plugin/Field/FieldFormatter/OpignoTincanFieldFormatter.php
+++ b/ActivityTypes/opigno_tincan_activity/src/Plugin/Field/FieldFormatter/OpignoTincanFieldFormatter.php
@@ -26,7 +26,7 @@ class OpignoTincanFieldFormatter extends EntityReferenceFormatterBase {
     foreach ($this->getEntitiesToView($items, $langcode) as $delta => $file) {
       $tincan_content_service = \Drupal::service('opigno_tincan_activity.tincan');
       $uri = $tincan_content_service->getExtractPath($file);
-      $url = file_create_url($uri);
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
       $package_properties = $tincan_content_service->tincanLoadByFileEntity($file);
       $launch_file = $package_properties->launch_filename;
 
diff --git a/ActivityTypes/opigno_tincan_activity/src/TincanContentAnswerAssistant.php b/ActivityTypes/opigno_tincan_activity/src/TincanContentAnswerAssistant.php
index b1db5c7..1f6436a 100644
--- a/ActivityTypes/opigno_tincan_activity/src/TincanContentAnswerAssistant.php
+++ b/ActivityTypes/opigno_tincan_activity/src/TincanContentAnswerAssistant.php
@@ -24,7 +24,7 @@ class TincanContentAnswerAssistant {
   /**
    * Constructs a new TincanContentAnswerAssistant object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   Database connection.
    */
   public function __construct(Connection $connection) {
@@ -38,9 +38,9 @@ class TincanContentAnswerAssistant {
    * If it is from the PHPSESSION, the method will save this registration to the
    *   database.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoActivityInterface $activity
+   * @param OpignoActivityInterface $activity
    *   Activity.
-   * @param \Drupal\Core\Session\AccountProxyInterface $user
+   * @param AccountProxyInterface $user
    *   Account proxy interface.
    *
    * @return bool|string
@@ -78,9 +78,9 @@ class TincanContentAnswerAssistant {
    *
    * @param string $registration
    *   The UUID to save.
-   * @param \Drupal\opigno_module\Entity\OpignoActivityInterface $activity
+   * @param OpignoActivityInterface $activity
    *   Activity object.
-   * @param \Drupal\Core\Session\AccountProxyInterface $user
+   * @param AccountProxyInterface $user
    *   User object.
    *
    * @return null|mixed
diff --git a/ActivityTypes/opigno_tincan_activity/src/TincanServiceInterface.php b/ActivityTypes/opigno_tincan_activity/src/TincanServiceInterface.php
index 3429f71..ba010ae 100644
--- a/ActivityTypes/opigno_tincan_activity/src/TincanServiceInterface.php
+++ b/ActivityTypes/opigno_tincan_activity/src/TincanServiceInterface.php
@@ -12,7 +12,7 @@ interface TincanServiceInterface {
   /**
    * Save tincan package.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   File object.
    *
    * @return int
diff --git a/ActivityTypes/opigno_video/src/Plugin/Field/FieldFormatter/OpignoTftFormatter.php b/ActivityTypes/opigno_video/src/Plugin/Field/FieldFormatter/OpignoTftFormatter.php
index df42d6c..dfa849b 100644
--- a/ActivityTypes/opigno_video/src/Plugin/Field/FieldFormatter/OpignoTftFormatter.php
+++ b/ActivityTypes/opigno_video/src/Plugin/Field/FieldFormatter/OpignoTftFormatter.php
@@ -99,7 +99,7 @@ class OpignoTftFormatter extends FormatterBase {
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
@@ -126,7 +126,7 @@ class OpignoTftFormatter extends FormatterBase {
       case 'video':
         $source_attributes = new Attribute();
         $source_attributes
-          ->setAttribute('src', file_url_transform_relative(file_create_url($file->getFileUri())))
+          ->setAttribute('src', \Drupal::service('file_url_generator')->generateString($file->getFileUri()))
           ->setAttribute('type', $file->getMimeType());
         $source_file = [
           'file' => $file,
diff --git a/modules/opigno_skills_system/opigno_skills_system.install b/modules/opigno_skills_system/opigno_skills_system.install
index 1c5d579..6572f9c 100644
--- a/modules/opigno_skills_system/opigno_skills_system.install
+++ b/modules/opigno_skills_system/opigno_skills_system.install
@@ -40,7 +40,7 @@ function opigno_skills_system_install($is_syncing) {
  * Implements hook_uninstall().
  */
 function opigno_skills_system_uninstall() {
-  $config_path = drupal_get_path('module', 'opigno_module') . '/config/optional';
+  $config_path = \Drupal::service('extension.list.module')->getPath('opigno_module') . '/config/optional';
 
   $storage = new FileStorage($config_path);
   $config_storage = \Drupal::service('config.storage');
diff --git a/modules/opigno_skills_system/opigno_skills_system.module b/modules/opigno_skills_system/opigno_skills_system.module
index 5509d5b..a2833fe 100644
--- a/modules/opigno_skills_system/opigno_skills_system.module
+++ b/modules/opigno_skills_system/opigno_skills_system.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  * Contains opigno_skills_system.module.
@@ -10,7 +11,7 @@ use Drupal\Core\Form\FormStateInterface;
 /**
  * Implements hook_ENTITY_TYPE_update().
  */
-function opigno_skills_system_taxonomy_term_update(Drupal\Core\Entity\EntityInterface $entity) {
+function opigno_skills_system_taxonomy_term_update(EntityInterface $entity) {
   if ($entity->bundle() == 'skills') {
     $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
     $field_storage_definition = $entity_definition_update_manager->getFieldStorageDefinition('skills_active', 'opigno_module');
@@ -21,7 +22,7 @@ function opigno_skills_system_taxonomy_term_update(Drupal\Core\Entity\EntityInte
 /**
  * Implements hook_ENTITY_TYPE_insert().
  */
-function opigno_skills_system_taxonomy_term_insert(Drupal\Core\Entity\EntityInterface $entity) {
+function opigno_skills_system_taxonomy_term_insert(EntityInterface $entity) {
   if ($entity->bundle() == 'skills') {
     $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
     $field_storage_definition = $entity_definition_update_manager->getFieldStorageDefinition('skills_active', 'opigno_module');
diff --git a/opigno_module.install b/opigno_module.install
index f58e1a7..d821e35 100644
--- a/opigno_module.install
+++ b/opigno_module.install
@@ -339,7 +339,9 @@ function opigno_module_update_9001() {
  * Configs update helper function.
  */
 function _opigno_module_apply_update($type, $name, $path, $ymls) {
-  $theme_path = sprintf("%s/%s/", drupal_get_path($type, $name), $path);
+  // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+  // Unsupported extension type encountered, using extension.path.resolver instead of extension.list
+  $theme_path = sprintf("%s/%s/", \Drupal::service('extension.path.resolver')->getPath($type, $name), $path);
   $config_factory = \Drupal::configFactory();
   $config_storage = \Drupal::service('config.storage');
   $configs = [];
diff --git a/opigno_module.module b/opigno_module.module
index d9c81a2..663a557 100644
--- a/opigno_module.module
+++ b/opigno_module.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\opigno_module\Entity\OpignoAnswer;
 /**
  * @file
  * Contains opigno_module.module.
@@ -109,13 +110,13 @@ function opigno_module_theme() {
  */
 function template_preprocess_opigno_user_result_item(&$variables) {
   $route = \Drupal::routeMatch();
-  /** @var \Drupal\opigno_module\Entity\OpignoModule $opigno_module */
+  /** @var OpignoModule $opigno_module */
   $opigno_module = $route->getParameter('opigno_module');
-  /** @var \Drupal\opigno_module\Entity\OpignoAnswer $answer */
+  /** @var OpignoAnswer $answer */
   $answer = $variables['opigno_answer'];
   // Check if module allow display answer content for users.
   $hide_results = $opigno_module->getHideResults($answer);
-  /** @var Drupal\opigno_module\Entity\OpignoActivity $answer_activity */
+  /** @var OpignoActivity $answer_activity */
   $answer_activity = $variables['opigno_answer_activity'];
   /* @var $answer_service \Drupal\opigno_module\ActivityAnswerManager */
   $answer_service = \Drupal::service('plugin.manager.activity_answer');
@@ -466,7 +467,7 @@ function opigno_module_form_alter(&$form, FormStateInterface &$form_state, $form
   if ($route_name == 'opigno_module.manager.get_item_form'
     && method_exists($build_info['callback_object'], 'getEntity')) {
     // Get the entity.
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $build_info['callback_object']->getEntity();
     $entity_type = $entity->getEntityTypeId();
     $bundle = $entity->bundle();
@@ -584,7 +585,7 @@ function opigno_module_form_alter(&$form, FormStateInterface &$form_state, $form
  * Custom submit for view activities bank lp form.
  *
  * @param mixed $form
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  */
 function opigno_module_activities_bank_lp_form_validate(&$form, FormStateInterface $form_state) {
   $form_state->setValidationComplete();
@@ -788,7 +789,7 @@ function opigno_module_preprocess_page(&$variables) {
     if ($gid = OpignoGroupContext::getCurrentGroupId()) {
       if ($group = \Drupal::entityTypeManager()->getStorage('group')->load($gid)) {
         $home_link = Link::createFromRoute(t('home'), 'entity.group.canonical', ['group' => $group->id()], ['attributes' => ['class' => ['w-100']]])->toRenderable();
-        $variables['home_link'] = render($home_link);
+        $variables['home_link'] = \Drupal::service('renderer')->render($home_link);
       }
     }
 
@@ -854,8 +855,8 @@ function opigno_module_page_top(array &$page_top) {
     $temporary_file_path = 'public://' . $h5p_default_path . '/temp/' . uniqid('h5p-');
     \Drupal::service('file_system')->prepareDirectory($temporary_file_path, FileSystemInterface::MODIFY_PERMISSIONS | FileSystemInterface::CREATE_DIRECTORY);
     // Load libraries.h5p.
-    $file_content = file_get_contents(drupal_get_path("module", "opigno_module") . "/h5plib/libraries.h5p");
-    $file = file_save_data($file_content, $temporary_file_path . '.h5p', FileSystemInterface::EXISTS_REPLACE);
+    $file_content = file_get_contents(\Drupal::service('extension.list.module')->getPath("opigno_module") . "/h5plib/libraries.h5p");
+    $file = \Drupal::service('file.repository')->writeData($file_content, $temporary_file_path . '.h5p', FileSystemInterface::EXISTS_REPLACE);
     if ($file) {
       $uri = $file->getFileUri();
       $interface->getUploadedH5pPath(\Drupal::service('file_system')->realpath($uri));
@@ -1105,9 +1106,9 @@ function opigno_module_form_system_file_system_settings_submit($form, FormStateI
 /**
  * Implements opigno_module_get_user_module_score().
  *
- * @param \Drupal\opigno_module\Entity\OpignoModule $opigno_module
+ * @param OpignoModule $opigno_module
  *   Module object.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   User account object.
  *
  * @return int
@@ -1156,7 +1157,7 @@ function opigno_module_preprocess_views_view_field(&$variables) {
 /**
  * Implements hook_entity_operation().
  */
-function opigno_module_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
+function opigno_module_entity_operation(EntityInterface $entity) {
   if (!(\Drupal::currentUser()->hasPermission('access content'))) {
     return [];
   }
@@ -1202,7 +1203,7 @@ function opigno_module_entity_operation(\Drupal\Core\Entity\EntityInterface $ent
 /**
  * Implements hook_ENTITY_TYPE_update().
  */
-function opigno_module_opigno_activity_update(Drupal\Core\Entity\EntityInterface $entity) {
+function opigno_module_opigno_activity_update(EntityInterface $entity) {
   /* @var \Drupal\opigno_module\Entity\OpignoActivity $entity */
   $database = \Drupal::database();
 
@@ -1255,7 +1256,7 @@ function opigno_module_entity_delete(EntityInterface $entity) {
 /**
  * Implements hook_views_pre_render().
  *
- * @param \Drupal\views\ViewExecutable $view
+ * @param ViewExecutable $view
  */
 function opigno_module_views_pre_render(ViewExecutable $view) {
   if (isset($view) && ($view->id() == 'opigno_module_results')) {
diff --git a/opigno_module.post_update.php b/opigno_module.post_update.php
index cf34b17..18e0bda 100644
--- a/opigno_module.post_update.php
+++ b/opigno_module.post_update.php
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
 /**
  * @file
  * Contains opigno module post update functions.
@@ -12,7 +13,7 @@ use Drupal\Core\Entity\Sql\SqlContentEntityStorageSchemaConverter;
  */
 function opigno_module_post_update_make_opigno_answer_revisionable(&$sandbox) {
   $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
 
   $entity_type = $definition_update_manager->getEntityType('opigno_answer');
diff --git a/src/Controller/ActivitiesBrowserController.php b/src/Controller/ActivitiesBrowserController.php
index 930a631..9bd74bc 100644
--- a/src/Controller/ActivitiesBrowserController.php
+++ b/src/Controller/ActivitiesBrowserController.php
@@ -19,7 +19,7 @@ class ActivitiesBrowserController extends ControllerBase {
   /**
    * Page title callback.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoModuleInterface $opigno_module
+   * @param OpignoModuleInterface $opigno_module
    *   Opigno module entity object.
    *
    * @return string
diff --git a/src/Controller/ActivityRevisionsController.php b/src/Controller/ActivityRevisionsController.php
index 1cb45a2..a6b09bc 100644
--- a/src/Controller/ActivityRevisionsController.php
+++ b/src/Controller/ActivityRevisionsController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\opigno_module\Controller;
 
+use Drupal\opigno_module\Entity\OpignoActivity;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\opigno_module\Entity\OpignoAnswer;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -39,14 +43,14 @@ class ActivityRevisionsController extends ControllerBase implements ContainerInj
   /**
    * Generates an overview table of older revisions of a Answer .
    *
-   * @param \Drupal\opigno_module\Entity\OpignoActivity $opigno_activity
+   * @param OpignoActivity $opigno_activity
    *   A Answer  object.
    *
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionOverview(OpignoActivityInterface $opigno_activity) {
     $account = $this->currentUser();
@@ -71,7 +75,7 @@ class ActivityRevisionsController extends ControllerBase implements ContainerInj
     $vids = $opigno_activity->revisionIds();
 
     foreach ($vids as $vid) {
-      /** @var \Drupal\opigno_module\Entity\OpignoAnswer $revision */
+      /** @var OpignoAnswer $revision */
       $revision = $opigno_activity_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
diff --git a/src/Controller/ExternalPackageController.php b/src/Controller/ExternalPackageController.php
index 11e567d..c9ca22e 100644
--- a/src/Controller/ExternalPackageController.php
+++ b/src/Controller/ExternalPackageController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_module\Controller;
 
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Ajax\ReplaceCommand;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Form\FormState;
@@ -156,7 +157,7 @@ class ExternalPackageController extends ControllerBase {
 
         // Assign activity to module if entity is new.
         if (!isset($item_id)) {
-          /** @var \Drupal\opigno_module\Controller\OpignoModuleController $opigno_module_controller */
+          /** @var OpignoModuleController $opigno_module_controller */
           $opigno_module_controller = \Drupal::service('opigno_module.opigno_module');
           $opigno_module_controller->activitiesToModule([$entity], $module);
         }
@@ -305,7 +306,7 @@ class ExternalPackageController extends ControllerBase {
   /**
    * Function for creating h5p content for Interactive content activity.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   File object.
    * @param string $mode
    *   Kind of creating functionality.
@@ -405,7 +406,7 @@ class ExternalPackageController extends ControllerBase {
         // Background helper image.
         exec($imagemagick_bin_path . ' -size 1920x960 xc:white white.png');
 
-        /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+        /** @var FileSystemInterface $file_system */
         $file_system = \Drupal::service('file_system');
         $files = $file_system->scanDirectory($ppt_dir_real_path, '/.*\.(jpg)$/');
         // Format images with background.
@@ -552,7 +553,7 @@ class ExternalPackageController extends ControllerBase {
 
     // Latest H5P lib core deletes H5P uploaded content directory.
     // Delete files in a directory if not deleted.
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     if (is_dir($ppt_dir_real_path)) {
       $files = $file_system->scanDirectory($ppt_dir_real_path, '/.*\.*$/');
diff --git a/src/Controller/OpignoAnswerController.php b/src/Controller/OpignoAnswerController.php
index 294bd49..d3fbecc 100644
--- a/src/Controller/OpignoAnswerController.php
+++ b/src/Controller/OpignoAnswerController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\opigno_module\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\opigno_module\Entity\OpignoAnswer;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -27,8 +30,8 @@ class OpignoAnswerController extends ControllerBase implements ContainerInjectio
    * @return array
    *   An array suitable for drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionShow($opigno_answer_revision) {
     $opigno_answer = $this->entityTypeManager()->getStorage('opigno_answer')->loadRevision($opigno_answer_revision);
@@ -46,8 +49,8 @@ class OpignoAnswerController extends ControllerBase implements ContainerInjectio
    * @return string
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionPageTitle($opigno_answer_revision) {
     $date_formatter = \Drupal::service('date.formatter');
@@ -58,14 +61,14 @@ class OpignoAnswerController extends ControllerBase implements ContainerInjectio
   /**
    * Generates an overview table of older revisions of a Answer .
    *
-   * @param \Drupal\opigno_module\Entity\OpignoAnswerInterface $opigno_answer
+   * @param OpignoAnswerInterface $opigno_answer
    *   A Answer  object.
    *
    * @return array
    *   An array as expected by drupal_render().
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function revisionOverview(OpignoAnswerInterface $opigno_answer) {
     $account = $this->currentUser();
@@ -88,7 +91,7 @@ class OpignoAnswerController extends ControllerBase implements ContainerInjectio
     $latest_revision = TRUE;
 
     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\opigno_module\Entity\OpignoAnswer $revision */
+      /** @var OpignoAnswer $revision */
       $revision = $opigno_answer_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
diff --git a/src/Controller/OpignoModuleController.php b/src/Controller/OpignoModuleController.php
index 960ab5c..20c5233 100644
--- a/src/Controller/OpignoModuleController.php
+++ b/src/Controller/OpignoModuleController.php
@@ -30,7 +30,7 @@ class OpignoModuleController extends ControllerBase {
   /**
    * Get activities related to specific module.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoModuleInterface $opigno_module
+   * @param OpignoModuleInterface $opigno_module
    *   Opigno module entity object.
    *
    * @return array
@@ -74,7 +74,7 @@ class OpignoModuleController extends ControllerBase {
    *
    * @param array $activities
    *   Array of activities that will be added.
-   * @param \Drupal\opigno_module\Entity\OpignoModuleInterface $module
+   * @param OpignoModuleInterface $module
    *   Opigno module entity object.
    * @param null|Group $group
    *   Training ID.
diff --git a/src/Controller/OpignoModuleManagerController.php b/src/Controller/OpignoModuleManagerController.php
index bf5249d..e7b9a54 100644
--- a/src/Controller/OpignoModuleManagerController.php
+++ b/src/Controller/OpignoModuleManagerController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\opigno_module\Controller;
 
+use Drupal\Core\Entity\EntityFormBuilder;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\file\Entity\File;
 use Drupal\opigno_learning_path\LearningPathAccess;
 use Drupal\opigno_module\Entity\OpignoActivityType;
@@ -83,7 +87,7 @@ class OpignoModuleManagerController extends ControllerBase {
       ]);
     }
 
-    /** @var \Drupal\Core\Entity\EntityFormBuilder $form_builder */
+    /** @var EntityFormBuilder $form_builder */
     $form_builder = \Drupal::service('entity.form_builder');
     $form_build = $form_builder->getForm($entity, 'default');
 
@@ -122,7 +126,7 @@ class OpignoModuleManagerController extends ControllerBase {
     if (!empty($_POST['data'])) {
       $data = self::jsonDecodeValidated($_POST['data']);
       $schema = json_decode(file_get_contents(
-        drupal_get_path('module', 'opigno_module') . '/json-schema/schema.json'
+        \Drupal::service('extension.list.module')->getPath('opigno_module') . '/json-schema/schema.json'
       ));
 
       if (empty($data)) {
@@ -227,7 +231,7 @@ class OpignoModuleManagerController extends ControllerBase {
     }
 
     // Get the newly or edited entity.
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $build_info['callback_object']->getEntity();
 
     // Clear user input.
@@ -253,7 +257,7 @@ class OpignoModuleManagerController extends ControllerBase {
 
     // Assign activity to module if entity is new.
     if (!isset($item_id)) {
-      /** @var \Drupal\opigno_module\Controller\OpignoModuleController $opigno_module_controller */
+      /** @var OpignoModuleController $opigno_module_controller */
       $opigno_module_controller = \Drupal::service('opigno_module.opigno_module');
       $opigno_module_controller->activitiesToModule([$entity], $module);
     }
@@ -262,10 +266,10 @@ class OpignoModuleManagerController extends ControllerBase {
   /**
    * Checks access for the activities overview.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Current user.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Access result.
    */
   public function accessActivitiesOverview(AccountInterface $account) {
@@ -295,12 +299,12 @@ class OpignoModuleManagerController extends ControllerBase {
     // Get activity types.
     $types = \Drupal::entityTypeManager()->getStorage('opigno_activity_type')->loadMultiple();
     $types = array_filter($types, function ($type) {
-      /** @var \Drupal\opigno_module\Entity\OpignoActivityType $type */
+      /** @var OpignoActivityType $type */
       return $type->id() !== 'opigno_h5p';
     });
 
     $types = array_map(function ($type) {
-      /** @var \Drupal\opigno_module\Entity\OpignoActivityType $type */
+      /** @var OpignoActivityType $type */
       return [
         'bundle' => $type->id(),
         'name' => $type->label(),
@@ -310,7 +314,7 @@ class OpignoModuleManagerController extends ControllerBase {
     }, $types);
 
     // Get H5P libraries.
-    /** @var \Drupal\h5p\H5PDrupal\H5PDrupal $interface */
+    /** @var H5PDrupal $interface */
     $interface = H5PDrupal::getInstance();
     $libraries = $interface->loadLibraries();
 
@@ -394,7 +398,7 @@ class OpignoModuleManagerController extends ControllerBase {
   /**
    * Returns non H5P description.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoActivityType $activity
+   * @param OpignoActivityType $activity
    *   Activity.
    *
    * @return null|string
@@ -492,11 +496,11 @@ class OpignoModuleManagerController extends ControllerBase {
   /**
    * Get the list of the existing activities.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getActivitiesList(OpignoModule $opigno_module) {
     $activities_storage = \Drupal::entityTypeManager()->getStorage('opigno_activity');
@@ -539,7 +543,7 @@ class OpignoModuleManagerController extends ControllerBase {
       $activities = $activities_storage->loadMultiple($activities_ids);
 
       $list = array_map(function ($activity) {
-        /** @var \Drupal\opigno_module\Entity\OpignoActivity $activity */
+        /** @var OpignoActivity $activity */
         $data = [];
         $data['name'] = $activity->label();
         $data['activity_id'] = $activity->id();
@@ -585,10 +589,10 @@ class OpignoModuleManagerController extends ControllerBase {
   /**
    * Checks access for the activity update weight.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Current user.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   Access result.
    */
   public function accessActivityUpdateWeight(AccountInterface $account) {
@@ -609,7 +613,7 @@ class OpignoModuleManagerController extends ControllerBase {
       ->fetchCol();
     $modules = OpignoModule::loadMultiple($module_ids);
     foreach ($modules as $module) {
-      /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+      /** @var OpignoModule $module */
       if (!$module->access('update')) {
         return AccessResult::forbidden();
       }
diff --git a/src/Entity/OpignoActivity.php b/src/Entity/OpignoActivity.php
index e91c7ac..3aa8217 100644
--- a/src/Entity/OpignoActivity.php
+++ b/src/Entity/OpignoActivity.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\opigno_module\Entity;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\RevisionableContentEntityBase;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ -229,11 +231,11 @@ class OpignoActivity extends RevisionableContentEntityBase implements OpignoActi
   /**
    * Returns user answer.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoModuleInterface $opigno_module
+   * @param OpignoModuleInterface $opigno_module
    *   Opigno module object.
-   * @param \Drupal\opigno_module\Entity\UserModuleStatusInterface $attempt
+   * @param UserModuleStatusInterface $attempt
    *   Attempt object.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User object.
    * @param null|int $latest_cert_date
    *   Latest certification date.
@@ -241,8 +243,8 @@ class OpignoActivity extends RevisionableContentEntityBase implements OpignoActi
    * @return mixed
    *   Opigno answer object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getUserAnswer(OpignoModuleInterface $opigno_module, UserModuleStatusInterface $attempt, AccountInterface $account, $latest_cert_date = NULL) {
     $cid = $opigno_module->id() . '-' . $attempt->id() . '-' . $account->id();
diff --git a/src/Entity/OpignoActivityTypeInterface.php b/src/Entity/OpignoActivityTypeInterface.php
index 38f8d1d..d99844a 100644
--- a/src/Entity/OpignoActivityTypeInterface.php
+++ b/src/Entity/OpignoActivityTypeInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_module\Entity;
 
+use Drupal\file\Entity\File;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -23,7 +24,7 @@ interface OpignoActivityTypeInterface extends ConfigEntityInterface {
    * @param string $description
    *   The Activity type description.
    *
-   * @return \Drupal\opigno_module\Entity\OpignoActivityType
+   * @return OpignoActivityType
    *   The called Activity type entity.
    */
   public function setDescription($description);
@@ -42,7 +43,7 @@ interface OpignoActivityTypeInterface extends ConfigEntityInterface {
    * @param string $summary
    *   The Activity type summary.
    *
-   * @return \Drupal\opigno_module\Entity\OpignoActivityType
+   * @return OpignoActivityType
    *   The called Activity type entity.
    */
   public function setSummary($summary);
@@ -58,7 +59,7 @@ interface OpignoActivityTypeInterface extends ConfigEntityInterface {
   /**
    * Gets the Activity type image entity.
    *
-   * @return \Drupal\file\Entity\File
+   * @return File
    *   Activity type image object.
    */
   public function getImage();
diff --git a/src/Entity/OpignoModule.php b/src/Entity/OpignoModule.php
index e4aeb16..fb18c58 100644
--- a/src/Entity/OpignoModule.php
+++ b/src/Entity/OpignoModule.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\opigno_module\Entity;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\RevisionableContentEntityBase;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ -493,14 +496,14 @@ class OpignoModule extends RevisionableContentEntityBase implements OpignoModule
   /**
    * Get entity if user didn't finish module.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   User entity object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   Entity interface.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \Exception
    */
   public function getModuleActiveAttempt(AccountInterface $user, $activity_link_type = NULL, $group_id = NULL) {
@@ -547,7 +550,7 @@ class OpignoModule extends RevisionableContentEntityBase implements OpignoModule
   /**
    * Get module attempt if user didn't finish training.
    *
-   * @param \Drupal\user\Entity\User $user
+   * @param User $user
    *   User entity.
    * @return numeric
    *   Best score result.
@@ -573,7 +576,7 @@ class OpignoModule extends RevisionableContentEntityBase implements OpignoModule
   /**
    * Implements opigno_module_get_user_module_score().
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User account object.
    * @param int $latest_cert_date
    *   The last date when was attempt.
@@ -588,7 +591,7 @@ class OpignoModule extends RevisionableContentEntityBase implements OpignoModule
       return 0;
     }
 
-    /** @var \Drupal\opigno_module\Entity\UserModuleStatus $last_attempt */
+    /** @var UserModuleStatus $last_attempt */
     $score = 0;
     $last_attempt = end($attempts);
     $which_score_keep = $this->getKeepResultsOption();
@@ -633,16 +636,16 @@ class OpignoModule extends RevisionableContentEntityBase implements OpignoModule
   /**
    * Get training attempt if user didn't finish training.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   User entity object.
    * @param \Drupal\group\Entity\Group $group
    *   Group object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   Entity interface.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getTrainingActiveAttempt(AccountInterface $user, Group $group) {
     $key = $group->id() . '_' . $user->id();
@@ -760,16 +763,16 @@ class OpignoModule extends RevisionableContentEntityBase implements OpignoModule
   /**
    * Get answers of the specific user within specified attempt.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   User account.
-   * @param \Drupal\opigno_module\Entity\UserModuleStatusInterface $attempt
+   * @param UserModuleStatusInterface $attempt
    *   User module attempt object.
    *
-   * @return array|\Drupal\Core\Entity\EntityInterface|null
+   * @return array|EntityInterface|null
    *   User answers objects.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function userAnswers(AccountInterface $user, UserModuleStatusInterface $attempt) {
     $answers_storage = static::entityTypeManager()->getStorage('opigno_answer');
diff --git a/src/Entity/UserModuleStatus.php b/src/Entity/UserModuleStatus.php
index 07f2e36..f569b31 100644
--- a/src/Entity/UserModuleStatus.php
+++ b/src/Entity/UserModuleStatus.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_module\Entity;
 
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\ContentEntityBase;
@@ -267,7 +268,7 @@ class UserModuleStatus extends ContentEntityBase implements UserModuleStatusInte
     $score = 0;
     $answers = $this->getAnswers();
     foreach ($answers as $answer) {
-      /** @var \Drupal\opigno_module\Entity\OpignoAnswer $answer */
+      /** @var OpignoAnswer $answer */
       $score += $answer->getScore();
     }
 
@@ -298,9 +299,9 @@ class UserModuleStatus extends ContentEntityBase implements UserModuleStatusInte
    */
   public function calculateMaxScore() {
     $max_score = 0;
-    /** @var \Drupal\Core\Database\Connection $db_connection */
+    /** @var Connection $db_connection */
     $db_connection = \Drupal::service('database');
-    /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+    /** @var OpignoModule $module */
     $module = $this->getModule();
     $score_query = $db_connection->select('opigno_module_relationship', 'omr')
       ->fields('omr', ['max_score', 'activity_status'])
@@ -353,7 +354,7 @@ class UserModuleStatus extends ContentEntityBase implements UserModuleStatusInte
    * {@inheritdoc}
    */
   public function calculateBestScore($latest_cert_date = NULL, $group_id = NULL) {
-    /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+    /** @var OpignoModule $module */
     $module = $this->getModule();
     $user = $this->getOwner();
     // For each attempt, check the score and get the best one.
@@ -382,7 +383,7 @@ class UserModuleStatus extends ContentEntityBase implements UserModuleStatusInte
    * Finish user attempt.
    */
   public function finishAttempt() {
-    /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+    /** @var OpignoModule $module */
     $module = $this->getModule();
     $which_score_keep = $module->getKeepResultsOption();
     $this->setFinished(time());
@@ -430,9 +431,9 @@ class UserModuleStatus extends ContentEntityBase implements UserModuleStatusInte
    */
   public function getRandomActivitiesMaxScore() {
     $max_score = 0;
-    /** @var \Drupal\Core\Database\Connection $db_connection */
+    /** @var Connection $db_connection */
     $db_connection = \Drupal::service('database');
-    /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+    /** @var OpignoModule $module */
     $module = $this->getModule();
     $random_activities_count = $module->getRandomActivitiesCount();
     // Get activities from answers.
diff --git a/src/EventSubscriber/QueryPathEventSubscriber.php b/src/EventSubscriber/QueryPathEventSubscriber.php
index 4ffd374..24966dd 100644
--- a/src/EventSubscriber/QueryPathEventSubscriber.php
+++ b/src/EventSubscriber/QueryPathEventSubscriber.php
@@ -2,16 +2,16 @@
 
 namespace Drupal\opigno_module\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\Url;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 class QueryPathEventSubscriber implements EventSubscriberInterface {
 
   // Remember query string (with table sort) as session variable and reload page with it
-  public function checkRedirection(FilterResponseEvent $event) {
+  public function checkRedirection(ResponseEvent $event) {
     // Add new routes for enable logic
     $available_routes = [
       'entity.opigno_activity.collection',
diff --git a/src/Form/ImportActivityForm.php b/src/Form/ImportActivityForm.php
index db1b3ba..057e2ed 100644
--- a/src/Form/ImportActivityForm.php
+++ b/src/Form/ImportActivityForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_module\Form;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
@@ -29,52 +30,52 @@ class ImportActivityForm extends FormBase {
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The DB connection service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The serializer service.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;
 
   /**
    * The H5P config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * ImportActivityForm constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The DB connection service.
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   The serializer service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(
diff --git a/src/Form/ImportTrainingForm.php b/src/Form/ImportTrainingForm.php
index ed39070..7b4e949 100644
--- a/src/Form/ImportTrainingForm.php
+++ b/src/Form/ImportTrainingForm.php
@@ -41,14 +41,14 @@ class ImportTrainingForm extends FormBase {
   /**
    * File System service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -463,7 +463,7 @@ class ImportTrainingForm extends FormBase {
    * @param array $training_content
    *   List of settings from imported file.
    *
-   * @return Drupal\media\Entity\Media|Bool
+   * @return Media|Bool
    *
    * @throws \Exception
    */
diff --git a/src/Form/OpignoActivityForm.php b/src/Form/OpignoActivityForm.php
index 196da26..ba0a92e 100644
--- a/src/Form/OpignoActivityForm.php
+++ b/src/Form/OpignoActivityForm.php
@@ -315,7 +315,7 @@ class OpignoActivityForm extends ContentEntityForm {
       $filename_new = preg_replace('/[^a-zA-Z0-9-_\.]/', '-', $filename);
       $file->setFilename($filename_new);
       $file->save();
-      file_move($file, $stream_wrapper . '://' . $filename_new);
+      \Drupal::service('file.repository')->move($file, $stream_wrapper . '://' . $filename_new);
     }
   }
 }
diff --git a/src/Form/OpignoActivityRevisionDeleteForm.php b/src/Form/OpignoActivityRevisionDeleteForm.php
index 3ffafbe..13db5ca 100644
--- a/src/Form/OpignoActivityRevisionDeleteForm.php
+++ b/src/Form/OpignoActivityRevisionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_module\Form;
 
+use Drupal\opigno_module\Entity\OpignoAnswerInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -19,35 +20,35 @@ class OpignoActivityRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Answer revision.
    *
-   * @var \Drupal\opigno_module\Entity\OpignoAnswerInterface
+   * @var OpignoAnswerInterface
    */
   protected $revision;
 
   /**
    * The Answer revision.
    *
-   * @var \Drupal\opigno_module\Entity\OpignoAnswerInterface
+   * @var OpignoAnswerInterface
    */
   protected $entity;
 
   /**
    * The Answer storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $opignoActivityStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a new OpignoActivityRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
    */
   public function __construct(EntityStorageInterface $entity_storage) {
diff --git a/src/Form/OpignoActivityRevisionRevertForm.php b/src/Form/OpignoActivityRevisionRevertForm.php
index 906e00f..f7115af 100644
--- a/src/Form/OpignoActivityRevisionRevertForm.php
+++ b/src/Form/OpignoActivityRevisionRevertForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_module\Form;
 
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -21,35 +22,35 @@ class OpignoActivityRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Answer revision.
    *
-   * @var \Drupal\opigno_module\Entity\OpignoAnswerInterface
+   * @var OpignoAnswerInterface
    */
   protected $revision;
 
   /**
    * The Answer revision.
    *
-   * @var \Drupal\opigno_module\Entity\OpignoAnswerInterface
+   * @var OpignoAnswerInterface
    */
   protected $entity;
 
   /**
    * The Answer storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $opignoActivityStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a new OpignoActivityRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
    */
   public function __construct(EntityStorageInterface $entity_storage) {
@@ -119,10 +120,10 @@ class OpignoActivityRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoActivityInterface $revision
+   * @param OpignoActivityInterface $revision
    *   The revision to be reverted.
    *
-   * @return \Drupal\opigno_module\Entity\OpignoActivityInterface
+   * @return OpignoActivityInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(OpignoActivityInterface $revision): OpignoActivityInterface {
diff --git a/src/Form/OpignoActivitySettingsForm.php b/src/Form/OpignoActivitySettingsForm.php
index 9ff4ca0..a4cde9f 100644
--- a/src/Form/OpignoActivitySettingsForm.php
+++ b/src/Form/OpignoActivitySettingsForm.php
@@ -29,7 +29,7 @@ class OpignoActivitySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class OpignoActivitySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/OpignoAnswerForm.php b/src/Form/OpignoAnswerForm.php
index 9be3249..c5e7c32 100644
--- a/src/Form/OpignoAnswerForm.php
+++ b/src/Form/OpignoAnswerForm.php
@@ -31,7 +31,7 @@ class OpignoAnswerForm extends ContentEntityForm {
     unset($form['revision_log_message']);
     $entity = $this->entity;
     $activity = $entity->getActivity();
-    /** @var \Drupal\opigno_module\Entity\OpignoModule $module */
+    /** @var OpignoModule $module */
     $module = $entity->getModule();
     $form['activity'] = [
       '#type' => 'label',
diff --git a/src/Form/OpignoAnswerRevisionDeleteForm.php b/src/Form/OpignoAnswerRevisionDeleteForm.php
index 1e87463..78f71b5 100644
--- a/src/Form/OpignoAnswerRevisionDeleteForm.php
+++ b/src/Form/OpignoAnswerRevisionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_module\Form;
 
+use Drupal\opigno_module\Entity\OpignoAnswerInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -20,30 +21,30 @@ class OpignoAnswerRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Answer revision.
    *
-   * @var \Drupal\opigno_module\Entity\OpignoAnswerInterface
+   * @var OpignoAnswerInterface
    */
   protected $revision;
 
   /**
    * The Answer storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $OpignoAnswerStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a new OpignoAnswerRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
diff --git a/src/Form/OpignoAnswerRevisionRevertForm.php b/src/Form/OpignoAnswerRevisionRevertForm.php
index 877e4e2..fa3b88a 100644
--- a/src/Form/OpignoAnswerRevisionRevertForm.php
+++ b/src/Form/OpignoAnswerRevisionRevertForm.php
@@ -21,30 +21,30 @@ class OpignoAnswerRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Answer revision.
    *
-   * @var \Drupal\opigno_module\Entity\OpignoAnswerInterface
+   * @var OpignoAnswerInterface
    */
   protected $revision;
 
   /**
    * The Answer storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $OpignoAnswerStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new OpignoAnswerRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Answer storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ -130,12 +130,12 @@ class OpignoAnswerRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoAnswerInterface $revision
+   * @param OpignoAnswerInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\opigno_module\Entity\OpignoAnswerInterface
+   * @return OpignoAnswerInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(OpignoAnswerInterface $revision, FormStateInterface $form_state) {
diff --git a/src/Form/OpignoAnswerRevisionRevertTranslationForm.php b/src/Form/OpignoAnswerRevisionRevertTranslationForm.php
index 12091d9..b26cfae 100644
--- a/src/Form/OpignoAnswerRevisionRevertTranslationForm.php
+++ b/src/Form/OpignoAnswerRevisionRevertTranslationForm.php
@@ -27,18 +27,18 @@ class OpignoAnswerRevisionRevertTranslationForm extends OpignoAnswerRevisionReve
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new OpignoAnswerRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Answer storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ -93,7 +93,7 @@ class OpignoAnswerRevisionRevertTranslationForm extends OpignoAnswerRevisionReve
   protected function prepareRevertedRevision(OpignoAnswerInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\opigno_module\Entity\OpignoAnswerInterface $default_revision */
+    /** @var OpignoAnswerInterface $default_revision */
     $latest_revision = $this->OpignoAnswerStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
diff --git a/src/Form/OpignoAnswerSettingsForm.php b/src/Form/OpignoAnswerSettingsForm.php
index 2a431f2..96ea062 100644
--- a/src/Form/OpignoAnswerSettingsForm.php
+++ b/src/Form/OpignoAnswerSettingsForm.php
@@ -29,7 +29,7 @@ class OpignoAnswerSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class OpignoAnswerSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/OpignoModuleDeleteForm.php b/src/Form/OpignoModuleDeleteForm.php
index c8412a5..091a8d8 100644
--- a/src/Form/OpignoModuleDeleteForm.php
+++ b/src/Form/OpignoModuleDeleteForm.php
@@ -22,7 +22,7 @@ class OpignoModuleDeleteForm extends ContentEntityDeleteForm {
   /**
    * Group content entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|null
+   * @var EntityStorageInterface|null
    */
   protected $groupContentStorage = NULL;
 
diff --git a/src/Form/OpignoModuleSettingsForm.php b/src/Form/OpignoModuleSettingsForm.php
index 903ffd7..de47b84 100644
--- a/src/Form/OpignoModuleSettingsForm.php
+++ b/src/Form/OpignoModuleSettingsForm.php
@@ -38,7 +38,7 @@ class OpignoModuleSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -56,7 +56,7 @@ class OpignoModuleSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/UserModuleStatusSettingsForm.php b/src/Form/UserModuleStatusSettingsForm.php
index e9a2d26..5330a4f 100644
--- a/src/Form/UserModuleStatusSettingsForm.php
+++ b/src/Form/UserModuleStatusSettingsForm.php
@@ -29,7 +29,7 @@ class UserModuleStatusSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -41,7 +41,7 @@ class UserModuleStatusSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/OpignoActivityAccessControlHandler.php b/src/OpignoActivityAccessControlHandler.php
index 8e76cd6..6b9cc07 100644
--- a/src/OpignoActivityAccessControlHandler.php
+++ b/src/OpignoActivityAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_module;
 
+use Drupal\opigno_module\Entity\OpignoActivityInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class OpignoActivityAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\opigno_module\Entity\OpignoActivityInterface $entity */
+    /** @var OpignoActivityInterface $entity */
     switch ($operation) {
       case 'view':
         if ($account->hasPermission('manage group content in any group')) {
diff --git a/src/OpignoActivityHtmlRouteProvider.php b/src/OpignoActivityHtmlRouteProvider.php
index 6dc1128..19bf098 100644
--- a/src/OpignoActivityHtmlRouteProvider.php
+++ b/src/OpignoActivityHtmlRouteProvider.php
@@ -52,10 +52,10 @@ class OpignoActivityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -80,10 +80,10 @@ class OpignoActivityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -108,10 +108,10 @@ class OpignoActivityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -133,10 +133,10 @@ class OpignoActivityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision preview route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionViewRoute(EntityTypeInterface $entity_type) {
@@ -162,10 +162,10 @@ class OpignoActivityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -187,10 +187,10 @@ class OpignoActivityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/OpignoActivityTypeHtmlRouteProvider.php b/src/OpignoActivityTypeHtmlRouteProvider.php
index 687d007..2e69955 100644
--- a/src/OpignoActivityTypeHtmlRouteProvider.php
+++ b/src/OpignoActivityTypeHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class OpignoActivityTypeHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
diff --git a/src/OpignoAnswerAccessControlHandler.php b/src/OpignoAnswerAccessControlHandler.php
index b1f400b..fff371e 100644
--- a/src/OpignoAnswerAccessControlHandler.php
+++ b/src/OpignoAnswerAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_module;
 
+use Drupal\opigno_module\Entity\OpignoAnswerInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class OpignoAnswerAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\opigno_module\Entity\OpignoAnswerInterface $entity */
+    /** @var OpignoAnswerInterface $entity */
     switch ($operation) {
       case 'view':
         // Allow author access the entity.
diff --git a/src/OpignoAnswerHtmlRouteProvider.php b/src/OpignoAnswerHtmlRouteProvider.php
index 653b849..eaa72a3 100644
--- a/src/OpignoAnswerHtmlRouteProvider.php
+++ b/src/OpignoAnswerHtmlRouteProvider.php
@@ -56,10 +56,10 @@ class OpignoAnswerHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -81,10 +81,10 @@ class OpignoAnswerHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -105,10 +105,10 @@ class OpignoAnswerHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -129,10 +129,10 @@ class OpignoAnswerHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -153,10 +153,10 @@ class OpignoAnswerHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -177,10 +177,10 @@ class OpignoAnswerHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ -201,10 +201,10 @@ class OpignoAnswerHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/OpignoAnswerStorageInterface.php b/src/OpignoAnswerStorageInterface.php
index da78460..b766410 100644
--- a/src/OpignoAnswerStorageInterface.php
+++ b/src/OpignoAnswerStorageInterface.php
@@ -20,7 +20,7 @@ interface OpignoAnswerStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Answer revision IDs for a specific Answer.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoAnswerInterface $entity
+   * @param OpignoAnswerInterface $entity
    *   The Answer entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface OpignoAnswerStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as Answer author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface OpignoAnswerStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\opigno_module\Entity\OpignoAnswerInterface $entity
+   * @param OpignoAnswerInterface $entity
    *   The Answer entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface OpignoAnswerStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all Answer with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/OpignoAnswerTypeHtmlRouteProvider.php b/src/OpignoAnswerTypeHtmlRouteProvider.php
index df62847..db68850 100644
--- a/src/OpignoAnswerTypeHtmlRouteProvider.php
+++ b/src/OpignoAnswerTypeHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class OpignoAnswerTypeHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
diff --git a/src/OpignoModuleAccessControlHandler.php b/src/OpignoModuleAccessControlHandler.php
index 3a89cc9..8e43b2a 100644
--- a/src/OpignoModuleAccessControlHandler.php
+++ b/src/OpignoModuleAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_module;
 
+use Drupal\opigno_module\Entity\OpignoModuleInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -22,7 +23,7 @@ class OpignoModuleAccessControlHandler extends EntityAccessControlHandler {
       return AccessResult::allowed();
     }
 
-    /** @var \Drupal\opigno_module\Entity\OpignoModuleInterface $entity */
+    /** @var OpignoModuleInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
diff --git a/src/OpignoModuleHtmlRouteProvider.php b/src/OpignoModuleHtmlRouteProvider.php
index 4303190..411d4c3 100644
--- a/src/OpignoModuleHtmlRouteProvider.php
+++ b/src/OpignoModuleHtmlRouteProvider.php
@@ -36,10 +36,10 @@ class OpignoModuleHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -61,10 +61,10 @@ class OpignoModuleHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/Plugin/ActivityAnswer/TrueFalseActivityAnswer.php b/src/Plugin/ActivityAnswer/TrueFalseActivityAnswer.php
index 49c1c35..2acb27c 100644
--- a/src/Plugin/ActivityAnswer/TrueFalseActivityAnswer.php
+++ b/src/Plugin/ActivityAnswer/TrueFalseActivityAnswer.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\opigno_module\Plugin\ActivityAnswer;
 
+use Drupal\opigno_module\Entity\OpignoAnswer;
+use Drupal\opigno_module\Entity\OpignoModuleInterface;
 use Drupal\opigno_module\ActivityAnswerPluginBase;
 use Drupal\opigno_module\Entity\OpignoActivityInterface;
 use Drupal\opigno_module\Entity\OpignoAnswerInterface;
@@ -30,12 +32,12 @@ class TrueFalseActivityAnswer extends ActivityAnswerPluginBase {
     $db_connection = \Drupal::service('database');
     $score = 0;
     /** @var \Drupal\opigno_module\Entity\OpignoActivityInterface $activity */
-    /** @var \Drupal\opigno_module\Entity\OpignoAnswer $answer */
+    /** @var OpignoAnswer $answer */
     $activity = $answer->getActivity();
     if ($answer->hasField('field_true_false')
       && $activity->hasField('field_true_false')
       && $answer->get('field_true_false')->value == $activity->get('field_true_false')->value) {
-      /** @var \Drupal\opigno_module\Entity\OpignoModuleInterface $module */
+      /** @var OpignoModuleInterface $module */
       $module = $answer->getModule();
       $score_query = $db_connection->select('opigno_module_relationship', 'omr')
         ->fields('omr', ['max_score'])
@@ -67,11 +69,11 @@ class TrueFalseActivityAnswer extends ActivityAnswerPluginBase {
    */
   public function getAnswerResultItemData(OpignoAnswerInterface $answer) {
     $data = [];
-    /** @var \Drupal\opigno_module\Entity\OpignoAnswer $answer */
+    /** @var OpignoAnswer $answer */
     $user_answer = $answer->hasField('field_true_false')
       ? $answer->get('field_true_false')->value
       : NULL;
-    /** @var \Drupal\opigno_module\Entity\OpignoActivityInterface $activity */
+    /** @var OpignoActivityInterface $activity */
     $activity = $answer->getActivity();
     $correct_answer = $activity->hasField('field_true_false')
       ? $activity->get('field_true_false')->value
diff --git a/src/Plugin/Block/LearningPathProgressBlock.php b/src/Plugin/Block/LearningPathProgressBlock.php
index 2c6bff7..389f9ca 100644
--- a/src/Plugin/Block/LearningPathProgressBlock.php
+++ b/src/Plugin/Block/LearningPathProgressBlock.php
@@ -36,14 +36,14 @@ class LearningPathProgressBlock extends BlockBase {
     if ($gid = OpignoGroupContext::getCurrentGroupId()) {
       if ($group = \Drupal::entityTypeManager()->getStorage('group')->load($gid)) {
         $home_link = Link::createFromRoute(t('home'), 'entity.group.canonical', ['group' => $group->id()], ['attributes' => ['class' => ['w-100']]])->toRenderable();
-        $home_link = render($home_link);
+        $home_link = \Drupal::service('renderer')->render($home_link);
       }
     }
 
     if ($user && isset($group)) {
       $progress_service = \Drupal::service('opigno_learning_path.progress');
       $progress = $progress_service->getProgressAjaxContainer($gid, $user->id(), '', 'module-page');
-      $progress = render($progress);
+      $progress = \Drupal::service('renderer')->render($progress);
     }
 
     $build = [
diff --git a/src/Plugin/Field/FieldFormatter/OpignoTrueFalseFormatterType.php b/src/Plugin/Field/FieldFormatter/OpignoTrueFalseFormatterType.php
index 02de5ca..46e944f 100644
--- a/src/Plugin/Field/FieldFormatter/OpignoTrueFalseFormatterType.php
+++ b/src/Plugin/Field/FieldFormatter/OpignoTrueFalseFormatterType.php
@@ -60,7 +60,7 @@ class OpignoTrueFalseFormatterType extends FormatterBase {
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
diff --git a/src/Plugin/views/field/OpignoModuleResultActions.php b/src/Plugin/views/field/OpignoModuleResultActions.php
index 05847dc..5cfeaf2 100644
--- a/src/Plugin/views/field/OpignoModuleResultActions.php
+++ b/src/Plugin/views/field/OpignoModuleResultActions.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\opigno_module\Plugin\views\field;
 
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\opigno_module\Entity\OpignoActivity;
 use Drupal\Core\DependencyInjection\DeprecatedServicePropertyTrait;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -34,28 +36,28 @@ class OpignoModuleResultActions extends FieldPluginBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -68,11 +70,11 @@ class OpignoModuleResultActions extends FieldPluginBase {
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeManagerInterface $entity_type_manager, LanguageManagerInterface $language_manager, EntityRepositoryInterface $entity_repository = NULL) {
@@ -130,7 +132,7 @@ class OpignoModuleResultActions extends FieldPluginBase {
     $operations = $this->entityTypeManager->getListBuilder($entity->getEntityTypeId())->getOperations($entity);
     unset($operations["edit"], $operations["devel"]);
 
-    /** @var \Drupal\opigno_module\Entity\OpignoActivity $activities */
+    /** @var OpignoActivity $activities */
     $activities = $values->_relationship_entities["module"]->getModuleActivities();
     $activities = array_column((array) $activities, 'type');
     $manually_scored_activities = [
diff --git a/src/Plugin/views/field/OpignoModuleScoreLink.php b/src/Plugin/views/field/OpignoModuleScoreLink.php
index 61b36f2..6332030 100644
--- a/src/Plugin/views/field/OpignoModuleScoreLink.php
+++ b/src/Plugin/views/field/OpignoModuleScoreLink.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_module\Plugin\views\field;
 
+use Drupal\opigno_module\Entity\OpignoActivity;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
 use Drupal\views\Plugin\views\field\FieldPluginBase;
@@ -34,7 +35,7 @@ class OpignoModuleScoreLink extends FieldPluginBase {
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    /** @var \Drupal\opigno_module\Entity\OpignoActivity $activities */
+    /** @var OpignoActivity $activities */
     $activities = $values->_relationship_entities["module"]->getModuleActivities();
     $activities = array_column((array) $activities, 'type');
     $manually_scored_activities = [
diff --git a/src/UserModuleStatusAccessControlHandler.php b/src/UserModuleStatusAccessControlHandler.php
index 8a869db..a6ffe55 100755
--- a/src/UserModuleStatusAccessControlHandler.php
+++ b/src/UserModuleStatusAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\opigno_module;
 
+use Drupal\opigno_module\Entity\UserModuleStatusInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,8 +19,7 @@ class UserModuleStatusAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\opigno_module\Entity\UserModuleStatusInterface $entity */
-
+    /** @var UserModuleStatusInterface $entity */
     // Check if user view own results
     if ($entity->getOwnerId() === $account->id() && $account->hasPermission('view own module results')
           && $operation == 'view' && $entity->isFinished()) {
diff --git a/src/UserModuleStatusHtmlRouteProvider.php b/src/UserModuleStatusHtmlRouteProvider.php
index 182a6a7..5b34bf1 100644
--- a/src/UserModuleStatusHtmlRouteProvider.php
+++ b/src/UserModuleStatusHtmlRouteProvider.php
@@ -36,10 +36,10 @@ class UserModuleStatusHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -61,10 +61,10 @@ class UserModuleStatusHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
