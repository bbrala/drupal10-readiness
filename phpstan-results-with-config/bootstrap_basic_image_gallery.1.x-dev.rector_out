modules/contrib/bootstrap_basic_image_gallery/bootstrap_basic_image_gallery.module
modules/contrib/bootstrap_basic_image_gallery/src/Form/SettingsForm.php
modules/contrib/bootstrap_basic_image_gallery/src/Plugin/Field/FieldFormatter/BootstrapBasicImageGalleryFormatter.php
modules/contrib/bootstrap_basic_image_gallery/src/Plugin/Field/FieldFormatter/BootstrapBasicMediaGalleryFormatter.php
modules/contrib/bootstrap_basic_image_gallery/src/Plugin/Field/FieldFormatter/BootstrapBasicMediaThumbnailGalleryFormatter.php

4 files with changes
====================

1) modules/contrib/bootstrap_basic_image_gallery/src/Plugin/Field/FieldFormatter/BootstrapBasicMediaThumbnailGalleryFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bootstrap_basic_image_gallery\Plugin\Field\FieldFormatter;

+use Drupal\file\FileStorage;
+use Drupal\image\ImageStyleInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\image\Plugin\Field\FieldFormatter\ImageFormatterBase;
@@ @@
   /**
    * Image style storage.
    *
-   * @var Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $imageStyleStorage;

@@ @@
   /**
    * Theme manager.
    *
-   * @var Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * Configuration.
    *
-   * @var Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The storage handler class for files.
    *
-   * @var \Drupal\file\FileStorage
+   * @var FileStorage
    */
   protected $fileStorage;

@@ @@
       $source = $media->getSource()->getSourceFieldValue($media);
       if ($source) {
         $image_uri = $this->fileStorage->load($source)->getFileUri();
-        $url = Url::fromUri(file_create_url($image_uri));
+        $url = \Drupal::service('file_url_generator')->generate($image_uri);
       }
       else {
         return [];
@@ @@
         $item_attributes['data-mainsrc'] = $main_image_style->buildUrl($image_uri);
       }
       else {
-        $item_attributes['data-mainsrc'] = file_create_url($image_uri);
+        $item_attributes['data-mainsrc'] = \Drupal::service('file_url_generator')->generateAbsoluteString($image_uri);
       }

       // Generate the thumbnail.
@@ @@
     $dependencies = parent::calculateDependencies();
     foreach (['image_style', 'thumbnail_image_style', 'modal_image_style'] as $setting_name) {
       $style_id = $this->getSetting($setting_name);
-      /** @var \Drupal\image\ImageStyleInterface $style */
+      /** @var ImageStyleInterface $style */
       if ($style_id && $style = $this->imageStyleStorage->load($style_id)) {
         // If this formatter uses a valid image style to display the image, add
         // the image style configuration entity as dependency of this formatter.
@@ @@
     $changed = parent::onDependencyRemoval($dependencies);
     foreach (['image_style', 'thumbnail_image_style', 'modal_image_style'] as $setting_name) {
       $style_id = $this->getSetting($setting_name);
-      /** @var \Drupal\image\ImageStyleInterface $style */
+      /** @var ImageStyleInterface $style */
       if ($style_id && $style = $this->imageStyleStorage->load($style_id)) {
         if (!empty($dependencies[$style->getConfigDependencyKey()][$style->getConfigDependencyName()])) {
           $replacement_id = $this->imageStyleStorage->getReplacementId($style_id);
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/bootstrap_basic_image_gallery/src/Plugin/Field/FieldFormatter/BootstrapBasicMediaGalleryFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bootstrap_basic_image_gallery\Plugin\Field\FieldFormatter;

+use Drupal\file\FileStorage;
+use Drupal\image\ImageStyleInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Image style storage.
    *
-   * @var Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $imageStyleStorage;

@@ @@
   /**
    * Theme manager.
    *
-   * @var Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * Configuration.
    *
-   * @var Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The storage handler class for files.
    *
-   * @var \Drupal\file\FileStorage
+   * @var FileStorage
    */
   protected $fileStorage;

@@ @@
   /**
    * The media view builder.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @var EntityViewBuilderInterface
    */
   protected $mediaViewBuilder;

@@ @@
       $source = $media->getSource()->getSourceFieldValue($media);
       if ($source) {
         $image_uri = $this->fileStorage->load($source)->getFileUri();
-        $url = Url::fromUri(file_create_url($image_uri));
+        $url = \Drupal::service('file_url_generator')->generate($image_uri);
       }
       else {
         return [];
@@ @@
     $dependencies = parent::calculateDependencies();
     foreach (['thumbnail_image_style', 'modal_image_style'] as $setting_name) {
       $style_id = $this->getSetting($setting_name);
-      /** @var \Drupal\image\ImageStyleInterface $style */
+      /** @var ImageStyleInterface $style */
       if ($style_id && $style = $this->imageStyleStorage->load($style_id)) {
         // If this formatter uses a valid image style to display the image, add
         // the image style configuration entity as dependency of this formatter.
@@ @@
     $changed = parent::onDependencyRemoval($dependencies);
     foreach (['thumbnail_image_style', 'modal_image_style'] as $setting_name) {
       $style_id = $this->getSetting($setting_name);
-      /** @var \Drupal\image\ImageStyleInterface $style */
+      /** @var ImageStyleInterface $style */
       if ($style_id && $style = $this->imageStyleStorage->load($style_id)) {
         if (!empty($dependencies[$style->getConfigDependencyKey()][$style->getConfigDependencyName()])) {
           $replacement_id = $this->imageStyleStorage->getReplacementId($style_id);
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/bootstrap_basic_image_gallery/src/Plugin/Field/FieldFormatter/BootstrapBasicImageGalleryFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bootstrap_basic_image_gallery\Plugin\Field\FieldFormatter;

+use Drupal\image\ImageStyleInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\image\Plugin\Field\FieldFormatter\ImageFormatterBase;
@@ @@
   /**
    * Image style storage.
    *
-   * @var Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $imageStyleStorage;

@@ @@
   /**
    * Theme manager.
    *
-   * @var Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;

@@ @@
   /**
    * Configuration.
    *
-   * @var Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
     foreach ($files as $delta => $file) {

       $image_uri = $file->getFileUri();
-      $url = Url::fromUri(file_create_url($image_uri));
+      $url = \Drupal::service('file_url_generator')->generate($image_uri);

       // Extract field item attributes for the theme function, and unset them
       // from the $item so that the field template does not re-render them.
@@ @@
         $item_attributes['data-mainsrc'] = $main_image_style->buildUrl($image_uri);
       }
       else {
-        $item_attributes['data-mainsrc'] = file_create_url($image_uri);
+        $item_attributes['data-mainsrc'] = \Drupal::service('file_url_generator')->generateAbsoluteString($image_uri);
       }

       // Generate the thumbnail.
@@ @@
     $dependencies = parent::calculateDependencies();
     foreach (['image_style', 'thumbnail_image_style', 'modal_image_style'] as $setting_name) {
       $style_id = $this->getSetting($setting_name);
-      /** @var \Drupal\image\ImageStyleInterface $style */
+      /** @var ImageStyleInterface $style */
       if ($style_id && $style = $this->imageStyleStorage->load($style_id)) {
         // If this formatter uses a valid image style to display the image, add
         // the image style configuration entity as dependency of this formatter.
@@ @@
     $changed = parent::onDependencyRemoval($dependencies);
     foreach (['image_style', 'thumbnail_image_style', 'modal_image_style'] as $setting_name) {
       $style_id = $this->getSetting($setting_name);
-      /** @var \Drupal\image\ImageStyleInterface $style */
+      /** @var ImageStyleInterface $style */
       if ($style_id && $style = $this->imageStyleStorage->load($style_id)) {
         if (!empty($dependencies[$style->getConfigDependencyKey()][$style->getConfigDependencyName()])) {
           $replacement_id = $this->imageStyleStorage->getReplacementId($style_id);
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/bootstrap_basic_image_gallery/src/Form/SettingsForm.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

