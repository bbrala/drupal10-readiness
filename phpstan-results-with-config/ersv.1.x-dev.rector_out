modules/contrib/ersv/src/Plugin/EntityReferenceSelection/SeparateSelectionAndValidation.php
modules/contrib/ersv/tests/src/Functional/AdminPageTest.php

2 files with changes
====================

1) modules/contrib/ersv/tests/src/Functional/AdminPageTest.php:32

    ---------- begin diff ----------
@@ @@
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ersv/src/Plugin/EntityReferenceSelection/SeparateSelectionAndValidation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ersv\Plugin\EntityReferenceSelection;

+use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;
+use Drupal\Component\Plugin\DependentPluginInterface;
+use Drupal\Component\Plugin\ConfigurableInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\ajax_dependency\AjaxDependency;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Database\Query\SelectInterface;
@@ @@
   /**
    * Selection plugin.
    *
-   * @var null | \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface | \Drupal\Component\Plugin\DependentPluginInterface | \Drupal\Component\Plugin\ConfigurableInterface
+   * @var null|SelectionInterface|DependentPluginInterface|ConfigurableInterface
    */
   protected $selectionPlugin;

@@ @@
   /**
    * Validation plugin.
    *
-   * @var null | \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface | \Drupal\Component\Plugin\DependentPluginInterface | \Drupal\Component\Plugin\ConfigurableInterface
+   * @var null|SelectionInterface|DependentPluginInterface|ConfigurableInterface
    */
   protected $validationPlugin;

   /**
-   * @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface
+   * @var SelectionPluginManagerInterface
    */
   protected $selectionPluginManager;

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     return new static(
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, SelectionPluginManagerInterface $selectionPluginManager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ @@
    * @param $configuration
    *
    * @return object
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *
    * @see \Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManager::getSelectionHandler
    * @see \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem::fieldSettingsForm
@@ @@

   /**
    * {@inheritdoc}
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $formState) {
     parent::validateConfigurationForm($form, $formState);
@@ @@
     $ourForm =& $form['handler']['handler_settings'];
     foreach (['selection', 'validation'] as $what) {
       if ($selectionPluginId = $formState->getValue(['settings', 'handler_settings', $what, 'settings', 'handler'])) {
-        /** @var \Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface $plugin */
+        /** @var SelectionInterface $plugin */
         $subformState = SubformState::createForSubform($ourForm[$what]['settings']['handler_settings'], $formState->getCompleteForm(), $formState);
         $plugin = $this->createInstance($selectionPluginId);
         $plugin->validateConfigurationForm($ourForm[$what]['settings']['handler_settings'], $subformState);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 2 files have been changed by Rector                                       

