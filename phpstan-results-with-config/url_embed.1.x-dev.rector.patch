diff --git a/src/Form/UrlEmbedDialog.php b/src/Form/UrlEmbedDialog.php
index 15aa5f3..94ba52a 100644
--- a/src/Form/UrlEmbedDialog.php
+++ b/src/Form/UrlEmbedDialog.php
@@ -29,16 +29,16 @@ class UrlEmbedDialog extends FormBase {
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * Constructs a UrlEmbedDialog object.
    *
-   * @param \Drupal\url_embed\UrlEmbedInterface $url_embed
+   * @param UrlEmbedInterface $url_embed
    *   The URL embed service.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The Form Builder.
    */
   public function __construct(UrlEmbedInterface $url_embed, FormBuilderInterface $form_builder) {
@@ -66,9 +66,9 @@ class UrlEmbedDialog extends FormBase {
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\editor\EditorInterface $editor
+   * @param EditorInterface $editor
    *   The editor to which this dialog corresponds.
-   * @param \Drupal\embed\EmbedButtonInterface $embed_button
+   * @param EmbedButtonInterface $embed_button
    *   The URL button to which this dialog corresponds.
    */
   public function buildForm(array $form, FormStateInterface $form_state, EditorInterface $editor = NULL, EmbedButtonInterface $embed_button = NULL) {
diff --git a/src/Plugin/CKEditorPlugin/DrupalUrl.php b/src/Plugin/CKEditorPlugin/DrupalUrl.php
index 634f555..84821c7 100644
--- a/src/Plugin/CKEditorPlugin/DrupalUrl.php
+++ b/src/Plugin/CKEditorPlugin/DrupalUrl.php
@@ -25,7 +25,7 @@ class DrupalUrl extends EmbedCKEditorPluginBase {
    * {@inheritdoc}
    */
   public function getFile() {
-    return drupal_get_path('module', 'url_embed') . '/js/plugins/drupalurl/plugin.js';
+    return \Drupal::service('extension.list.module')->getPath('url_embed') . '/js/plugins/drupalurl/plugin.js';
   }
 
   /**
diff --git a/src/Plugin/EmbedType/Url.php b/src/Plugin/EmbedType/Url.php
index 07f848b..9524438 100644
--- a/src/Plugin/EmbedType/Url.php
+++ b/src/Plugin/EmbedType/Url.php
@@ -23,6 +23,6 @@ class Url extends EmbedTypeBase {
    * {@inheritdoc}
    */
   public function getDefaultIconUrl() {
-    return file_create_url(drupal_get_path('module', 'url_embed') . '/js/plugins/drupalurl/urlembed.png');
+    return \Drupal::service('file_url_generator')->generateAbsoluteString(\Drupal::service('extension.list.module')->getPath('url_embed') . '/js/plugins/drupalurl/urlembed.png');
   }
 }
diff --git a/src/Plugin/Filter/UrlEmbedFilter.php b/src/Plugin/Filter/UrlEmbedFilter.php
index 3875810..7113f7a 100644
--- a/src/Plugin/Filter/UrlEmbedFilter.php
+++ b/src/Plugin/Filter/UrlEmbedFilter.php
@@ -39,7 +39,7 @@ class UrlEmbedFilter extends FilterBase implements ContainerFactoryPluginInterfa
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\url_embed\UrlEmbedInterface $url_embed
+   * @param UrlEmbedInterface $url_embed
    *   The URL embed service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, UrlEmbedInterface $url_embed) {
diff --git a/src/UrlEmbedHelperTrait.php b/src/UrlEmbedHelperTrait.php
index 21ba8ba..aa0b813 100644
--- a/src/UrlEmbedHelperTrait.php
+++ b/src/UrlEmbedHelperTrait.php
@@ -22,7 +22,7 @@ trait UrlEmbedHelperTrait {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface.
+   * @var ModuleHandlerInterface .
    */
   protected $moduleHandler;
 
@@ -36,7 +36,7 @@ trait UrlEmbedHelperTrait {
   /**
    * Returns the module handler.
    *
-   * @return \Drupal\Core\Extension\ModuleHandlerInterface
+   * @return ModuleHandlerInterface
    *   The module handler.
    */
   protected function moduleHandler() {
@@ -49,7 +49,7 @@ trait UrlEmbedHelperTrait {
   /**
    * Sets the module handler service.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    *
    * @return self
@@ -62,7 +62,7 @@ trait UrlEmbedHelperTrait {
   /**
    * Returns the URL embed service.
    *
-   * @return \Drupal\url_embed\UrlEmbedInterface
+   * @return UrlEmbedInterface
    *   The URL embed service..
    */
   protected function urlEmbed() {
@@ -75,7 +75,7 @@ trait UrlEmbedHelperTrait {
   /**
    * Sets the URL embed service.
    *
-   * @param \Drupal\url_embed\UrlEmbedInterface $url_embed
+   * @param UrlEmbedInterface $url_embed
    *   The URL embed service.
    *
    * @return self
diff --git a/src/UrlEmbedInterface.php b/src/UrlEmbedInterface.php
index c1f52bb..5a6e164 100644
--- a/src/UrlEmbedInterface.php
+++ b/src/UrlEmbedInterface.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\url_embed;
 
+use Embed\Exceptions\InvalidUrlException;
 /**
  * A service class for handling URL embeds.
  *
@@ -27,7 +28,7 @@ interface UrlEmbedInterface {
    *   (optional) Options passed to the adapter. If not provided the default
    *   options on the service will be used.
    *
-   * @throws \Embed\Exceptions\InvalidUrlException
+   * @throws InvalidUrlException
    *   If the urls is not valid
    * @throws \InvalidArgumentException
    *   If any config argument is not valid
diff --git a/tests/src/Functional/ConvertUrlToEmbedFilterTest.php b/tests/src/Functional/ConvertUrlToEmbedFilterTest.php
index b9ee970..2ab113a 100644
--- a/tests/src/Functional/ConvertUrlToEmbedFilterTest.php
+++ b/tests/src/Functional/ConvertUrlToEmbedFilterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\url_embed\Functional;
 
+use Drupal\filter\FilterFormatInterface;
 use Drupal\editor\Entity\Editor;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\Tests\BrowserTestBase;
@@ -28,7 +29,7 @@ class ConvertUrlToEmbedFilterTest extends BrowserTestBase {
   /**
    * Set the configuration up.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // Create a page content type.
     $this->drupalCreateContentType(['type' => 'page', 'name' => 'Basic page']);
@@ -87,7 +88,10 @@ class ConvertUrlToEmbedFilterTest extends BrowserTestBase {
     $node = $this->drupalCreateNode($settings);
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->responseContains('<drupal-url data-embed-url="https://twitter.com/drupal/status/735873777683320832"></drupal-url>');
-    $this->assertNoText(strip_tags($content), 'URL does not appear in the output when embed is successful.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(strip_tags($content));
 
     $content = 'before /not-valid/url after';
     $settings = [];
@@ -98,7 +102,7 @@ class ConvertUrlToEmbedFilterTest extends BrowserTestBase {
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->responseContains($content);
 
-    /** @var \Drupal\filter\FilterFormatInterface $format */
+    /** @var FilterFormatInterface $format */
     $format = FilterFormat::load('custom_format');
     $configuration = $format->filters('url_embed_convert_links')->getConfiguration();
     $configuration['settings']['url_prefix'] = 'EMBED ';
@@ -123,7 +127,10 @@ class ConvertUrlToEmbedFilterTest extends BrowserTestBase {
     $node = $this->drupalCreateNode($settings);
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->responseContains('<drupal-url data-embed-url="https://twitter.com/drupal/status/735873777683320832"></drupal-url>');
-    $this->assertNoText(strip_tags($content), 'URL does not appear in the output when embed is successful.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(strip_tags($content));
 
     $content = 'before Embed https://twitter.com/drupal/status/735873777683320832 after';
     $settings = [];
diff --git a/tests/src/Functional/LinkEmbedFormatterTest.php b/tests/src/Functional/LinkEmbedFormatterTest.php
index 3e0f3dd..578f420 100644
--- a/tests/src/Functional/LinkEmbedFormatterTest.php
+++ b/tests/src/Functional/LinkEmbedFormatterTest.php
@@ -29,7 +29,7 @@ class LinkEmbedFormatterTest extends BrowserTestBase {
   /**
    * A field to use in this test class.
    *
-   * @var \Drupal\field\Entity\FieldStorageConfig
+   * @var FieldStorageConfig
    */
   protected $fieldStorage;
 
diff --git a/tests/src/Functional/UrlEmbedDialogTest.php b/tests/src/Functional/UrlEmbedDialogTest.php
index 8867d26..0bc4027 100644
--- a/tests/src/Functional/UrlEmbedDialogTest.php
+++ b/tests/src/Functional/UrlEmbedDialogTest.php
@@ -18,18 +18,18 @@ class UrlEmbedDialogTest extends UrlEmbedTestBase {
     // Ensure that the route is not accessible without specifying all the
     // parameters.
     $this->getEmbedDialog();
-    $this->assertResponse(404, 'Embed dialog is not accessible without specifying filter format and embed button.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible without specifying filter format and embed button.');
     $this->getEmbedDialog('custom_format');
-    $this->assertResponse(404, 'Embed dialog is not accessible without specifying embed button.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible without specifying embed button.');
 
     // Ensure that the route is not accessible with an invalid embed button.
     $this->getEmbedDialog('custom_format', 'invalid_button');
-    $this->assertResponse(404, 'Embed dialog is not accessible without specifying filter format and embed button.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible without specifying filter format and embed button.');
 
     // Ensure that the route is not accessible with text format without the
     // button configured.
     $this->getEmbedDialog('plain_text', 'url');
-    $this->assertResponse(404, 'Embed dialog is not accessible with a filter that does not have an editor configuration.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible with a filter that does not have an editor configuration.');
 
     // Add an empty configuration for the plain_text editor configuration.
     $editor = Editor::create([
@@ -38,13 +38,13 @@ class UrlEmbedDialogTest extends UrlEmbedTestBase {
     ]);
     $editor->save();
     $this->getEmbedDialog('plain_text', 'url');
-    $this->assertResponse(403, 'Embed dialog is not accessible with a filter that does not have the embed button assigned to it.');
+    $this->assertSession()->statusCodeEquals(403, 'Embed dialog is not accessible with a filter that does not have the embed button assigned to it.');
 
     // Ensure that the route is accessible with a valid embed button.
     // 'URL' embed button is provided by default by the module and hence the
     // request must be successful.
     $this->getEmbedDialog('custom_format', 'url');
-    $this->assertResponse(200, 'Embed dialog is accessible with correct filter format and embed button.');
+    $this->assertSession()->statusCodeEquals(200, 'Embed dialog is accessible with correct filter format and embed button.');
   }
 
   /**
@@ -54,7 +54,7 @@ class UrlEmbedDialogTest extends UrlEmbedTestBase {
     // Ensure that the route is not accessible with text format without the
     // button configured.
     $this->getEmbedDialog('plain_text', 'url');
-    $this->assertResponse(404, 'Embed dialog is not accessible with a filter that does not have an editor configuration.');
+    $this->assertSession()->statusCodeEquals(404, 'Embed dialog is not accessible with a filter that does not have an editor configuration.');
     // Add an empty configuration for the plain_text editor configuration.
     $editor = Editor::create([
       'format' => 'plain_text',
@@ -62,18 +62,18 @@ class UrlEmbedDialogTest extends UrlEmbedTestBase {
     ]);
     $editor->save();
     $this->getEmbedDialog('plain_text', 'url');
-    $this->assertResponse(403, 'Embed dialog is not accessible with a filter that does not have the embed button assigned to it.');
+    $this->assertSession()->statusCodeEquals(403, 'Embed dialog is not accessible with a filter that does not have the embed button assigned to it.');
     // Ensure that the route is accessible with a valid embed button.
     // 'URL' embed button is provided by default by the module and hence the
     // request must be successful.
     $this->getEmbedDialog('custom_format', 'url');
-    $this->assertResponse(200, 'Embed dialog is accessible with correct filter format and embed button.');
+    $this->assertSession()->statusCodeEquals(200, 'Embed dialog is accessible with correct filter format and embed button.');
     // Ensure form structure of the url_embed_dialog form.
-    $this->assertFieldByName('attributes[data-embed-url]', '', 'URL field is present.');
+    $this->assertSession()->fieldValueEquals('attributes[data-embed-url]', '');
     // Check that 'Embed' is a primary button.
     $this->assertFieldByXPath('//input[contains(@class, "button--primary")]', 'Embed', 'Embed is a primary button');
     $edit = ['attributes[data-embed-url]' => static::FLICKR_URL];
-    $this->drupalPostForm(NULL, $edit, 'Embed');
+    $this->submitForm($edit, 'Embed');
   }
 
   /**
diff --git a/tests/src/Functional/UrlEmbedFilterTest.php b/tests/src/Functional/UrlEmbedFilterTest.php
index d79fb92..5883697 100644
--- a/tests/src/Functional/UrlEmbedFilterTest.php
+++ b/tests/src/Functional/UrlEmbedFilterTest.php
@@ -30,7 +30,10 @@ class UrlEmbedFilterTest extends UrlEmbedTestBase {
     $node = $this->drupalCreateNode($settings);
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->responseContains(static::FLICKR_OUTPUT_WYSIWYG);
-    $this->assertNoText(strip_tags($content), 'Placeholder does not appear in the output when embed is successful.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(strip_tags($content));
 
     // Ensure that placeholder is not replaced when embed is unsuccessful.
     $content = '<drupal-url data-embed-url="">This placeholder should be rendered since specified URL does not exists.</drupal-url>';
@@ -40,7 +43,10 @@ class UrlEmbedFilterTest extends UrlEmbedTestBase {
     $settings['body'] = array(array('value' => $content, 'format' => 'custom_format'));
     $node = $this->drupalCreateNode($settings);
     $this->drupalGet('node/' . $node->id());
-    $this->assertNoText(strip_tags($content), 'Placeholder does not appear in the output when embed is unsuccessful.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains(strip_tags($content));
 
     // Test that tag of container element is not replaced when it's not
     // <drupal-url>.
diff --git a/tests/src/Functional/UrlEmbedTestBase.php b/tests/src/Functional/UrlEmbedTestBase.php
index e1eb981..b8db990 100644
--- a/tests/src/Functional/UrlEmbedTestBase.php
+++ b/tests/src/Functional/UrlEmbedTestBase.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\Tests\url_embed\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\editor\Entity\Editor;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\Tests\BrowserTestBase;
@@ -31,7 +32,7 @@ abstract class UrlEmbedTestBase extends BrowserTestBase {
   /**
    * The test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;
 
@@ -58,7 +59,7 @@ abstract class UrlEmbedTestBase extends BrowserTestBase {
   /**
    * A set up for all tests.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a page content type.
