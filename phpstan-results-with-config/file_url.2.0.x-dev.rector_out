modules/contrib/file_url/src/Controller/FileUrlRedirect.php
modules/contrib/file_url/src/Entity/RemoteFile.php
modules/contrib/file_url/src/FileUrlHandler.php
modules/contrib/file_url/src/Plugin/EntityReferenceSelection/FileUrlSelection.php
modules/contrib/file_url/src/Plugin/Field/FieldFormatter/FileUrlFormatter.php
modules/contrib/file_url/src/Plugin/Field/FieldType/FileUrlFieldItemList.php
modules/contrib/file_url/src/Plugin/Field/FieldType/FileUrlItem.php
modules/contrib/file_url/src/Plugin/Field/FieldWidget/FileUrlWidget.php
modules/contrib/file_url/tests/src/FunctionalJavascript/FileUrlWidgetTest.php
modules/contrib/file_url/tests/src/Kernel/FileUrlFieldItemListTest.php
modules/contrib/file_url/tests/src/Kernel/FileUrlFieldItemTest.php

7 files with changes
====================

1) modules/contrib/file_url/tests/src/Kernel/FileUrlFieldItemListTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\file_url\Kernel;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\entity_test\Entity\EntityTest;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * A local test file entity.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $localFile;

@@ @@
   /**
    * A remote test file entity.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $remoteFile;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->entityTypeManager = $this->container->get('entity_type.manager');
@@ @@
   /**
    * Reloads the given entity from the storage and returns it.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to be reloaded.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The reloaded entity.
    */
   protected function reloadEntity(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/file_url/src/Plugin/Field/FieldWidget/FileUrlWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_url\Plugin\Field\FieldWidget;

+use Drupal\file\FileInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
    *
    * @param array $element
    *   The element render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param array $complete_form
    *   The full form render array.
@@ @@
     // Convert file IDs to URLs.
     foreach ($values as &$value) {
       if ($value['file_url_type'] === static::TYPE_UPLOAD) {
-        /** @var \Drupal\file\FileInterface $file */
+        /** @var FileInterface $file */
         $file = File::load((int) $value['target_id']);
         $value['target_id'] = FileUrlHandler::fileToUrl($file);
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/file_url/src/Plugin/Field/FieldType/FileUrlFieldItemList.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_url\Plugin\Field\FieldType;

+use Drupal\file\FileInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemList;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    * {@inheritdoc}
    */
   public function postSave($update) {
-    /** @var \Drupal\file_url\FileUrlHandler $file_handler */
+    /** @var FileUrlHandler $file_handler */
     $file_handler = \Drupal::service('file_url.handler');
     $entity = $this->getEntity();

@@ @@
       $files = $this->referencedEntities();
       $ids = [];

-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       foreach ($files as $file) {
         $ids[] = $file->id();
       }
@@ @@
    * {@inheritdoc}
    */
   public function referencedEntities() {
-    /** @var \Drupal\file_url\FileUrlHandler $file_handler */
+    /** @var FileUrlHandler $file_handler */
     $file_handler = \Drupal::service('file_url.handler');
     if (empty($this->list)) {
       return [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/file_url/src/Plugin/Field/FieldFormatter/FileUrlFormatter.php:76

    ---------- begin diff ----------
@@ @@
       if ($this->getSetting('mode') === 'plain') {
         $elements['delta'] = [
           $elements[$delta] = [
-            '#markup' => file_url_transform_relative(file_create_url($file->getFileUri())),
+            '#markup' => \Drupal::service('file_url_generator')->generateString($file->getFileUri()),
             '#cache' => [
               'tags' => $file->getCacheTags(),
             ],
@@ @@
       // Allow showing the full URI as tip.
       // @todo Probably the UX/UI team should decide if the full URL should be
       //   permanently displayed when showing distributions.
-      $elements[$delta]['#attributes']['title'] = file_create_url($file->getFileUri());
+      $elements[$delta]['#attributes']['title'] = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
     }

     return $elements;
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/file_url/src/Plugin/EntityReferenceSelection/FileUrlSelection.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_url\Plugin\EntityReferenceSelection;

+use Drupal\file_url\FileUrlHandler;
 use Drupal\Core\Entity\Plugin\EntityReferenceSelection\DefaultSelection;

 /**
@@ @@
    * {@inheritdoc}
    */
   public function validateReferenceableEntities(array $ids) {
-    /** @var \Drupal\file_url\FileUrlHandler $file_handler */
+    /** @var FileUrlHandler $file_handler */
     $file_handler = \Drupal::service('file_url.handler');
     $found = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/file_url/src/FileUrlHandler.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Get public dereferenceable URL from file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File.
    *
    * @return string
@@ @@
    * @param string $url
    *   URL.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file object.
    */
   public static function urlToFile($url) {
@@ @@
   /**
    * Checks if a file entity is s remote file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file being checked.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/file_url/src/Controller/FileUrlRedirect.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Redirect to the actual file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file object.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect object.
    */
   public function redirectToFile(FileInterface $file) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [ERROR] Could not process                                                      
         "modules/contrib/file_url/tests/src/FunctionalJavascript/FileUrlWidgetTes
         t.php" file, due to:                                                   
         "Analyze error: "Class                                                 
         Drupal\FunctionalJavascriptTests\JavascriptTestBase not found.". Include
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

