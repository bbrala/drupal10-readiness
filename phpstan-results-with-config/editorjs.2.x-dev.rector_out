modules/contrib/editorjs/editorjs.module
modules/contrib/editorjs/editorjs.theme.inc
modules/contrib/editorjs/modules/media/editorjs_media.module
modules/contrib/editorjs/modules/media/src/Ajax/EditorJsDialogSave.php
modules/contrib/editorjs/modules/media/src/MediaLibraryEditorJsOpener.php
modules/contrib/editorjs/modules/media/src/Plugin/EditorJsTools/MediaImageTool.php
modules/contrib/editorjs/modules/media/tests/src/Functional/MediaToolTest.php
modules/contrib/editorjs/modules/prism/editorjs_prism.module
modules/contrib/editorjs/modules/prism/src/Plugin/EditorJsTools/PrismJsCodeTool.php
modules/contrib/editorjs/modules/prism/tests/src/Functional/PrismJsToolTest.php
modules/contrib/editorjs/src/Annotation/EditorJsTools.php
modules/contrib/editorjs/src/Controller/ImageController.php
modules/contrib/editorjs/src/Controller/LinkController.php
modules/contrib/editorjs/src/EditorJsToolsInterface.php
modules/contrib/editorjs/src/EditorJsToolsPluginBase.php
modules/contrib/editorjs/src/EditorJsToolsPluginManager.php
modules/contrib/editorjs/src/Event/EditorJsEvents.php
modules/contrib/editorjs/src/Event/LinkFetchEvent.php
modules/contrib/editorjs/src/Event/MassageValuesEvent.php
modules/contrib/editorjs/src/EventSubscriber/EditorjsSubscriber.php
modules/contrib/editorjs/src/Plugin/EditorJsTools/ChecklistTool.php
modules/contrib/editorjs/src/Plugin/EditorJsTools/CodeTool.php
modules/contrib/editorjs/src/Plugin/EditorJsTools/DelimiterTool.php
modules/contrib/editorjs/src/Plugin/EditorJsTools/Header.php
modules/contrib/editorjs/src/Plugin/EditorJsTools/ImageTool.php
modules/contrib/editorjs/src/Plugin/EditorJsTools/InlineCode.php
modules/contrib/editorjs/src/Plugin/EditorJsTools/LinkTool.php
modules/contrib/editorjs/src/Plugin/EditorJsTools/ListTool.php
modules/contrib/editorjs/src/Plugin/EditorJsTools/TableTool.php
modules/contrib/editorjs/src/Plugin/Field/FieldFormatter/EditerJsFormatter.php
modules/contrib/editorjs/src/Plugin/Field/FieldType/EditorjsItem.php
modules/contrib/editorjs/src/Plugin/Field/FieldWidget/EditorjsWidget.php
modules/contrib/editorjs/tests/src/Functional/EditorJsFieldTest.php
modules/contrib/editorjs/tests/src/Functional/EditorJsFieldTestBase.php
modules/contrib/editorjs/tests/src/Kernel/EditorJsFieldItemTest.php

20 files with changes
=====================

1) modules/contrib/editorjs/tests/src/Functional/EditorJsFieldTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\editorjs\Functional;

+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Component\Serialization\Json;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
    * @param string $result_contain
    *   The HTML value for check result field formatter.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ElementNotFoundException
+   * @throws ExpectationException
    */
   public function toolTest(array $value, $result_contain) {
     $this->drupalGet('node/add/article');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/editorjs/tests/src/Functional/EditorJsFieldTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\editorjs\Functional;

+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\file\Entity\File;
 use Drupal\Tests\TestFileCreationTrait;

@@ @@
   /**
    * A user with permission to create articles.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+    /** @var EntityDisplayRepositoryInterface $display_repository */
     $display_repository = \Drupal::service('entity_display.repository');
     $display_repository->getFormDisplay('node', 'article')
       ->setComponent('field_editorjs', [
@@ @@

   /**
    * Tests "editorjs" field "image" tool.
+   * @doesNotPerformAssertions
    */
   public function testImageTool() {
     $image = current($this->drupalGetTestFiles('image'));
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = File::create((array) $image);
     $file->save();
     $this->toolTest([
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/editorjs/src/Plugin/Field/FieldWidget/EditorjsWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editorjs\Plugin\Field\FieldWidget;

+use Drupal\editorjs\EditorJsToolsPluginManager;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\editorjs\EditorJsToolsInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The editorJs tools manager.
    *
-   * @var \Drupal\editorjs\EditorJsToolsPluginManager
+   * @var EditorJsToolsPluginManager
    */
   protected $toolsManager;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
   /**
    * The tools instances collection.
    *
-   * @var \Drupal\editorjs\EditorJsToolsInterface[]
+   * @var EditorJsToolsInterface[]
    */
   protected $instanceTools = [];

@@ @@
     $settings = $this->getSettings();
     foreach (array_keys($this->toolsManager->getDefinitions()) as $plugin_id) {
       $tool_settings = $settings['tools'][$plugin_id] ?? [];
-      /** @var \Drupal\editorjs\EditorJsToolsInterface $instance */
+      /** @var EditorJsToolsInterface $instance */
       $instance = $this->toolsManager->createInstance($plugin_id);
       $description = $instance->description();
       if (!empty($instance->getPluginDefinition()['permission'])) {
@@ @@
    * @return array
    *   The settings for tools.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function prepareSettings(): array {
     $tools = $this->getSetting('tools') ?? [];
@@ @@
     $event = new MassageValuesEvent($values, $form, $form_state, $this->fieldDefinition->getName());
     $this
       ->dispatcher
-      ->dispatch(EditorJsEvents::MASSAGE_FORM_VALUES, $event);
+      ->dispatch($event, EditorJsEvents::MASSAGE_FORM_VALUES);
     return parent::massageFormValues($event->getNewValues(), $form, $form_state);
   }

@@ @@
   /**
    * Returns tools instances.
    *
-   * @return \Drupal\editorjs\EditorJsToolsInterface[]
+   * @return EditorJsToolsInterface[]
    *   The instances collection.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function getInstanceTools() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/editorjs/src/Plugin/Field/FieldType/EditorjsItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editorjs\Plugin\Field\FieldType;

+use Drupal\editorjs\EditorJsToolsPluginManager;
+use Drupal\editorjs\EditorJsToolsInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemBase;
@@ @@
    * {@inheritdoc}
    */
   public function postSave($update) {
-    /** @var \Drupal\editorjs\EditorJsToolsPluginManager $manager */
+    /** @var EditorJsToolsPluginManager $manager */
     $manager = \Drupal::service('plugin.manager.editorjs_tools');
     $value = Json::decode($this->values['value']) ?? [];
     foreach ($value as $item) {
       if ($manager->hasDefinition($item['type'])) {
-        /** @var \Drupal\editorjs\EditorJsToolsInterface $instance */
+        /** @var EditorJsToolsInterface $instance */
         $instance = $manager->createInstance($item['type']);
         $instance->postSave($item, $this->getEntity(), $update);
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/editorjs/src/Plugin/Field/FieldFormatter/EditerJsFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editorjs\Plugin\Field\FieldFormatter;

+use Drupal\editorjs\EditorJsToolsPluginManager;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
@@ @@
   /**
    * The editorJs tools manager.
    *
-   * @var \Drupal\editorjs\EditorJsToolsPluginManager
+   * @var EditorJsToolsPluginManager
    */
   protected $toolsManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/editorjs/src/Plugin/EditorJsTools/ImageTool.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editorjs\Plugin\EditorjsTools;

+use Drupal\Core\Entity\EntityRepository;
+use Drupal\file\FileUsage\DatabaseFileUsageBackend;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Access\CsrfTokenGenerator;
+use Drupal\file\Entity\File;
 use Drupal\Core\Access\CsrfRequestHeaderAccessCheck;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityRepository|object|null
+   * @var EntityRepository|object|null
    */
   protected $entityRepository;

@@ @@
   /**
    * The file usage backend.
    *
-   * @var \Drupal\file\FileUsage\DatabaseFileUsageBackend|object|null
+   * @var DatabaseFileUsageBackend|object|null
    */
   protected $fileUsage;

@@ @@
   /**
    * The module manager.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The CSRF token generator.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $tokenGenerator;

@@ @@
       return;
     }

-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = $this->entityRepository->loadEntityByUuid('file', $uuid);
     // Setting status to permanent and add to file usage.
     if ($file) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/editorjs/src/EventSubscriber/EditorjsSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editorjs\EventSubscriber;

+use Drupal\file\Entity\File;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\DiffArray;
 use Drupal\Component\Utility\Html;
@@ @@
   /**
    * The http client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $client;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The file usage service.
    *
-   * @var \Drupal\file\FileUsage\FileUsageInterface
+   * @var FileUsageInterface
    */
   protected $fileUsage;

@@ @@
   /**
    * EditorjsSubscriber constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    *   The http client.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository.
-   * @param \Drupal\file\FileUsage\FileUsageInterface $fileUsage
+   * @param FileUsageInterface $fileUsage
    *   The file usage service.
    */
   public function __construct(ClientInterface $client, EntityRepositoryInterface $entityRepository, FileUsageInterface $fileUsage) {
@@ @@
   /**
    * Processing difference values.
    *
-   * @param \Drupal\editorjs\Event\MassageValuesEvent $event
+   * @param MassageValuesEvent $event
    *   The event instance.
    */
   public function processDifferenceValues(MassageValuesEvent $event) {
@@ @@
             return;
           }
           // Change status to temporary.
-          /** @var \Drupal\file\Entity\File $file */
+          /** @var File $file */
           $file = $this->entityRepository->loadEntityByUuid('file', $uuid);
           if ($file && $file->isPermanent()) {
             $this->fileUsage->delete($file, 'editorjs');
@@ @@
   /**
    * Set meta data.
    *
-   * @param \Drupal\editorjs\Event\LinkFetchEvent $event
+   * @param LinkFetchEvent $event
    *   The link fetch event.
    */
   public function linkFetch(LinkFetchEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/editorjs/src/Event/MassageValuesEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editorjs\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines event post form submit.
@@ @@
   /**
    * The form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;

@@ @@
    *   The new value.
    * @param array $form
    *   The form srtucture.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param string $origin_key
    *   The origin value key in storage.
@@ @@
   /**
    * Returns form state.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   The origin value.
    */
   public function getFormState(): FormStateInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/editorjs/src/Event/LinkFetchEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editorjs\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Defines event fetch metadata for linkTool.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/editorjs/src/EditorJsToolsPluginManager.php:16

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/editorjs/src/EditorJsToolsPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editorjs;

+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ @@
   /**
    * The current account proxy.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $accountProxy;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/editorjs/src/EditorJsToolsInterface.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * Returns form elements for EditorJs toll settings.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *   The field definition.
    * @param array $settings
    *   The saved settings.
@@ @@
    *
    * @param array $value
    *   The new value.
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity that field belongs to.
    * @param bool $update
    *   Specifies whether the entity is being updated or created.
@@ @@
   /**
    * Checking permission to use tool.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The status permission.
    */
   public function allowed(): AccessResult;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/editorjs/src/Controller/LinkController.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * The request client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $client;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
   /**
    * EditorjsController constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    *   The request client.
    */
   public function __construct(ClientInterface $client, EventDispatcherInterface $dispatcher) {
@@ @@
   /**
    * Returns meta data for editorJs Link plugin.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The meta data.
    */
   public function fetch(Request $request): JsonResponse {
@@ @@
     }

     $event = new LinkFetchEvent($url);
-    $this->dispatcher->dispatch(EditorJsEvents::LINK_FETCH, $event);
+    $this->dispatcher->dispatch($event, EditorJsEvents::LINK_FETCH);

     $result = [
       'success' => \count($event->meta()),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/editorjs/src/Controller/ImageController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editorjs\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Symfony\Component\HttpFoundation\File\UploadedFile;
+use Drupal\image\Entity\ImageStyle;
+use Drupal\file\FileInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\Environment;
@@ @@
   /**
    * The file system manager.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The account proxy.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $accountProxy;

@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerChannelFactory;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The token system.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * ImageController constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $accountProxy
+   * @param AccountProxyInterface $accountProxy
    *   The account proxy.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $streamWrapperManager
+   * @param StreamWrapperManagerInterface $streamWrapperManager
    *   The stream wrapper manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   The logger factory.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token system.
    */
   public function __construct(
@@ @@
   /**
    * Response for image upload.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function upload(Request $request): JsonResponse {
-    /** @var \Symfony\Component\HttpFoundation\File\UploadedFile $uploadFile */
+    /** @var UploadedFile $uploadFile */
     $uploadFile = $request->files->get('image');
     if (!$uploadFile) {
       throw new BadRequestHttpException();
@@ @@
   /**
    * Response for image upload by url.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function uploadUrl(Request $request): JsonResponse {
     $data = Json::decode($request->getContent());
@@ @@
   /**
    * Response for generate image style url.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    */
   public function styleUrl(Request $request): JsonResponse {
     $data = Json::decode($request->getContent());

-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = $this->entityRepository
       ->loadEntityByUuid('file', $data['uuid']);
     if (!$file) {
@@ @@
     if (empty($data['image_style_id'])) {
       return new JsonResponse(['url' => $file->createFileUrl()]);
     }
-    /** @var \Drupal\image\Entity\ImageStyle $image_style */
+    /** @var ImageStyle $image_style */
     $image_style = $this
       ->entityTypeManager
       ->getStorage('image_style')
@@ @@
    * @param int $replace
    *   The replace behavior when the destination file already exists.
    *
-   * @return \Drupal\file\FileInterface|false
+   * @return FileInterface|false
    *   The file entity elsa false.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function saveData($data, $destination, array $validators = [], $replace = FileSystemInterface::EXISTS_REPLACE) {
     if (empty($destination)) {
@@ @@
       $dir = $this->fileSystem->dirname($destination);
       $this->fileSystem->prepareDirectory($dir, FileSystemInterface::CREATE_DIRECTORY);
       $uri = $this->fileSystem->saveData($data, $destination, $replace);
-      /** @var \Drupal\file\Entity\File $file */
+      /** @var File $file */
       $file = File::create([
         'uri' => $uri,
         'uid' => $this->accountProxy->id(),
@@ @@
   /**
    * Returns allow extension from request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/editorjs/src/Annotation/EditorJsTools.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editorjs\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The description of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


16) modules/contrib/editorjs/modules/prism/tests/src/Functional/PrismJsToolTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\editorjs_prism\Functional;

+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Tests\editorjs\Functional\EditorJsFieldTestBase;

 /**
@@ @@
   /**
    * A user with permission to create articles.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+    /** @var EntityDisplayRepositoryInterface $display_repository */
     $display_repository = \Drupal::service('entity_display.repository');
     $display_repository->getFormDisplay('node', 'article')
       ->setComponent('field_editorjs', [
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/editorjs/modules/media/tests/src/Functional/MediaToolTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\editorjs_media\Functional;

+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\file\Entity\File;
 use Drupal\media\Entity\Media;
 use Drupal\Tests\editorjs\Functional\EditorJsFieldTestBase;
@@ @@
   /**
    * A user with permission to create articles.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;

@@ @@
   protected function setUp(): void {
     parent::setUp();

-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+    /** @var EntityDisplayRepositoryInterface $display_repository */
     $display_repository = \Drupal::service('entity_display.repository');
     $display_repository->getFormDisplay('node', 'article')
       ->setComponent('field_editorjs', [
@@ @@
   public function testMediaTool() {
     $this->createMediaType('image', ['id' => 'image', 'label' => 'Image']);
     $image = current($this->drupalGetTestFiles('image'));
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = File::create((array) $image);
     $file->save();
     $media = Media::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/editorjs/modules/media/src/Plugin/EditorJsTools/MediaImageTool.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editorjs_media\Plugin\EditorjsTools;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Access\CsrfRequestHeaderAccessCheck;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The module manager.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/editorjs/modules/media/src/MediaLibraryEditorJsOpener.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\editorjs_media;

+use Drupal\media\Entity\Media;
+use Drupal\file\Entity\File;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The MediaLibraryEditorOpener constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function getSelectionResponse(MediaLibraryState $state, array $selected_ids) {
-    /** @var \Drupal\media\Entity\Media $selected_media */
+    /** @var Media $selected_media */
     $selected_media = $this
       ->entityTypeManager
       ->getStorage('media')
@@ @@

     $fid = $selected_media->getSource()->getSourceFieldValue($selected_media);
     if ($fid) {
-      /** @var \Drupal\file\Entity\File $file */
+      /** @var File $file */
       $file = $this
         ->entityTypeManager
         ->getStorage('file')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/editorjs/editorjs.theme.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\Entity\File;
 /**
  * @file
  * EditorJs theme preprocess functions.
@@ @@
     return;
   }

-  /** @var \Drupal\file\Entity\File $file */
+  /** @var File $file */
   $file = \Drupal::service('entity.repository')
     ->loadEntityByUuid('file', $variables['data']['file']['uuid']);
   if (empty($file)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 20 files have been changed by Rector                                      

