modules/contrib/field_bundle/field_bundle.api.php
modules/contrib/field_bundle/field_bundle.install
modules/contrib/field_bundle/field_bundle.module
modules/contrib/field_bundle/field_bundle.tokens.inc
modules/contrib/field_bundle/modules/canonical/field_bundle_canonical.module
modules/contrib/field_bundle/modules/group/group_field_bundle.module
modules/contrib/field_bundle/modules/group/src/Controller/GroupFieldBundleController.php
modules/contrib/field_bundle/modules/group/src/Plugin/GroupContentEnabler/GroupFieldBundle.php
modules/contrib/field_bundle/modules/group/src/Plugin/GroupContentEnabler/GroupFieldBundleDeriver.php
modules/contrib/field_bundle/modules/group/src/Routing/GroupFieldBundleRouteProvider.php
modules/contrib/field_bundle/src/Access/FieldBundleRevisionAccessCheck.php
modules/contrib/field_bundle/src/Controller/FieldBundleRevisionController.php
modules/contrib/field_bundle/src/Controller/FieldBundleTranslationController.php
modules/contrib/field_bundle/src/Entity/FieldBundle.php
modules/contrib/field_bundle/src/Entity/FieldBundleConfig.php
modules/contrib/field_bundle/src/FieldBundleAccessControlHandler.php
modules/contrib/field_bundle/src/FieldBundleConfigInterface.php
modules/contrib/field_bundle/src/FieldBundleConfigListBuilder.php
modules/contrib/field_bundle/src/FieldBundleInterface.php
modules/contrib/field_bundle/src/FieldBundleListBuilder.php
modules/contrib/field_bundle/src/FieldBundlePermissions.php
modules/contrib/field_bundle/src/Form/FieldBundleConfigForm.php
modules/contrib/field_bundle/src/Form/FieldBundleDeleteForm.php
modules/contrib/field_bundle/src/Form/FieldBundleForm.php
modules/contrib/field_bundle/src/Form/FieldBundleRevisionDeleteForm.php
modules/contrib/field_bundle/src/Form/FieldBundleRevisionRevertForm.php
modules/contrib/field_bundle/src/Form/FieldBundleRevisionRevertTranslationForm.php
modules/contrib/field_bundle/src/QueryAccess/FieldBundleQueryAccessHandler.php
modules/contrib/field_bundle/src/Routing/FieldBundleTranslationRouteSubscriber.php

18 files with changes
=====================

1) modules/contrib/field_bundle/src/Form/FieldBundleRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new FieldBundleRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $field_bundle_storage
+   * @param EntityStorageInterface $field_bundle_storage
    *   The field bundle storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $field_bundle_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager, TimeInterface $time) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/field_bundle/src/Form/FieldBundleRevisionRevertForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_bundle\Form;

+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The field bundle revision.
    *
-   * @var \Drupal\field_bundle\FieldBundleInterface
+   * @var FieldBundleInterface
    */
   protected $revision;

@@ @@
   /**
    * The field bundle storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $fieldBundleStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a new FieldBundleRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $field_bundle_storage
+   * @param EntityStorageInterface $field_bundle_storage
    *   The field bundle storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $field_bundle_storage, DateFormatterInterface $date_formatter, TimeInterface $time) {
@@ @@
    *
    * @param \Drupal\field_bundle\FieldBundleInterfaces $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\field_bundle\FieldBundleInterface
+   * @return FieldBundleInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(FieldBundleInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/field_bundle/src/Form/FieldBundleRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_bundle\Form;

+use Drupal\field_bundle\FieldBundleInterface;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
   /**
    * The field bundle revision.
    *
-   * @var \Drupal\field_bundle\FieldBundleInterface
+   * @var FieldBundleInterface
    */
   protected $revision;

@@ @@
   /**
    * The field bundle storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $fieldBundleStorage;

@@ @@
   /**
    * The field bundle config storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $fieldBundleConfigStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new FieldBundleRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $field_bundle_storage
+   * @param EntityStorageInterface $field_bundle_storage
    *   The field bundle storage.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $field_bundle_config_storage
+   * @param EntityStorageInterface $field_bundle_config_storage
    *   The field bundle config storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $field_bundle_storage, EntityStorageInterface $field_bundle_config_storage, Connection $connection, DateFormatterInterface $date_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/field_bundle/src/Form/FieldBundleForm.php:51

    ---------- begin diff ----------
@@ @@
    *
    * @param string $entity_type_id
    *   The entity type identifier.
-   * @param \Drupal\field_bundle\FieldBundleInterface $entity
+   * @param FieldBundleInterface $entity
    *   The entity updated with the submitted values.
    * @param array $form
    *   The complete form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function applyLabelPattern($entity_type_id, FieldBundleInterface $entity, array $form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/field_bundle/src/Form/FieldBundleDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_bundle\Form;

+use Drupal\field_bundle\FieldBundleInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Entity\EntityDeleteFormTrait;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);

-    /** @var \Drupal\field_bundle\FieldBundleInterface $entity */
+    /** @var FieldBundleInterface $entity */
     $entity = $this->getEntity();
     if ($entity->isDefaultTranslation()) {
       if (count($entity->getTranslationLanguages()) > 1) {
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     $message = $this->getDeletionMessage();

@@ @@
    * {@inheritdoc}
    */
   public function getCancelUrl() {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();
     if ($entity->isDefaultTranslation()) {
       if ($entity->hasLinkTemplate('collection')) {
@@ @@
    * {@inheritdoc}
    */
   protected function getDeletionMessage() {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();

     if (!$entity->isDefaultTranslation()) {
@@ @@
    * {@inheritdoc}
    */
   public function getQuestion() {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $this->getEntity();

     if (!$entity->isDefaultTranslation()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/field_bundle/src/Form/FieldBundleConfigForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_bundle\Form;

+use Drupal\field_bundle\FieldBundleConfigInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Constructs the FieldBundleConfigForm object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\field_bundle\FieldBundleConfigInterface $bundle_config */
+    /** @var FieldBundleConfigInterface $bundle_config */
     $bundle_config = $this->entity;
     if ($this->operation == 'add') {
       $form['#title'] = $this->t('Add field bundle config');
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\field_bundle\FieldBundleConfigInterface $bundle_config */
+    /** @var FieldBundleConfigInterface $bundle_config */
     $bundle_config = $this->entity;

     $bundle_config->set('id', trim($bundle_config->id()));
@@ @@
    *   Array of options ready to be used in #options.
    */
   protected function getWorkflowOptions() {
-    /** @var \Drupal\field_bundle\FieldBundleConfigInterface $field_bundle_config */
+    /** @var FieldBundleConfigInterface $field_bundle_config */
     $field_bundle_config = $this->entity;
     $workflow_options = [
       'status' => $field_bundle_config->getStatus(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/field_bundle/src/FieldBundlePermissions.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * FieldBundlePermissions constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Returns a list of permissions for a given field bundle config.
    *
-   * @param \Drupal\field_bundle\FieldBundleConfigInterface $config
+   * @param FieldBundleConfigInterface $config
    *   The field bundle config.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/field_bundle/src/FieldBundleListBuilder.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new FieldBundleListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, RedirectDestinationInterface $redirect_destination) {
@@ @@
     $label = $entity->label();
     $rel = $entity->hasLinkTemplate('canonical') ? 'canonical' : 'edit-form';
     $op = $rel === 'canonical' ? 'view' : 'update';
-    /** @var \Drupal\field_bundle\FieldBundleInterface $entity */
+    /** @var FieldBundleInterface $entity */
     $row['id'] = $entity->access($op) ? $entity->toLink($entity->id(), $rel) : $entity->id();
     $row['label'] = $label !== '' && $entity->access($op) ? $entity->toLink($label, $rel) : $label;
     $row['uid']['data'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/field_bundle/src/FieldBundleAccessControlHandler.php:22

    ---------- begin diff ----------
@@ @@
       return AccessResult::allowed()->cachePerPermissions();
     }

-    /** @var \Drupal\field_bundle\FieldBundleInterface $field_bundle */
+    /** @var FieldBundleInterface $field_bundle */
     $field_bundle = $entity;
     $config_id = $field_bundle->bundle();
     $is_owner = ($account->id() && $account->id() === $field_bundle->getOwnerId());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/field_bundle/src/Entity/FieldBundle.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_bundle\Entity;

+use Drupal\field_bundle\FieldBundleConfigInterface;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Entity\EditorialContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
       'uid' => static::getDefaultEntityOwner(),
     ];
     if (!isset($values['status'])) {
-      /** @var \Drupal\field_bundle\FieldBundleConfigInterface $field_bundle_config */
+      /** @var FieldBundleConfigInterface $field_bundle_config */
       if (isset($values['config']) && ($field_bundle_config = \Drupal::entityTypeManager()->getStorage('field_bundle_config')->load($values['config']))) {
         $values['status'] = $field_bundle_config->getStatus();
       }
@@ @@
       $label_pattern = $this->hasField('label_pattern') ? $this->get('label_pattern')->getString() : $this->label_pattern;
     }
     elseif ($config_id = $this->bundle()) {
-      /** @var \Drupal\field_bundle\FieldBundleConfigInterface $config */
+      /** @var FieldBundleConfigInterface $config */
       if ($config = \Drupal::entityTypeManager()->getStorage('field_bundle_config')->load($config_id)) {
         $label_pattern = $config->getLabelPattern();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/field_bundle/src/Controller/FieldBundleTranslationController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_bundle\Controller;

+use Drupal\field_bundle\FieldBundleInterface;
 use Drupal\content_translation\Controller\ContentTranslationController;
 use Drupal\Core\Routing\RouteMatchInterface;

@@ @@
    */
   public function overview(RouteMatchInterface $route_match, $entity_type_id = NULL) {
     $build = parent::overview($route_match, $entity_type_id);
-    /** @var \Drupal\field_bundle\FieldBundleInterface $entity */
+    /** @var FieldBundleInterface $entity */
     $entity = $build['#entity'];
     $build['#title'] = $this->t('Translations of field bundle %label with ID %id', [
       '%label' => $entity->label(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/field_bundle/src/Controller/FieldBundleRevisionController.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * Constructs a FieldBundleRevisionController object.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer, EntityRepositoryInterface $entity_repository) {
@@ @@
   /**
    * Generates an overview table of older revisions of a field bundle.
    *
-   * @param \Drupal\field_bundle\FieldBundleInterface $field_bundle
+   * @param FieldBundleInterface $field_bundle
    *   A field bundle item.
    *
    * @return array
@@ @@
     $current_revision_displayed = FALSE;

     foreach ($this->getRevisionIds($field_bundle, $field_bundle_storage) as $vid) {
-      /** @var \Drupal\field_bundle\FieldBundleInterface $revision */
+      /** @var FieldBundleInterface $revision */
       $revision = $field_bundle_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
@@ @@
   /**
    * Gets a list of field bundle revision IDs for a specific item.
    *
-   * @param \Drupal\field_bundle\FieldBundleInterface $field_bundle
+   * @param FieldBundleInterface $field_bundle
    *   The field bundle item.
-   * @param \Drupal\Core\Entity\ContentEntityStorageInterface $field_bundle_storage
+   * @param ContentEntityStorageInterface $field_bundle_storage
    *   The field bundle storage handler.
    *
    * @return int[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/field_bundle/src/Access/FieldBundleRevisionAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_bundle\Access;

+use Drupal\Core\Entity\ContentEntityStorageInterface;
+use Drupal\Core\Entity\EntityAccessControlHandlerInterface;
+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\field_bundle\FieldBundleConfigInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
@@ @@
   /**
    * The field bundle storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $fieldBundleStorage;

@@ @@
   /**
    * The field bundle access control handler.
    *
-   * @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface
+   * @var EntityAccessControlHandlerInterface
    */
   protected $fieldBundleAccess;

@@ @@
   /**
    * Constructs a new FieldBundleRevisionAccessCheck.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Checks routing access for the field bundle item revision.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    * @param int $field_bundle_revision
    *   (Optional) The item revision ID. If not specified, but $field_bundle is,
    *   access is checked for that object's revision.
-   * @param \Drupal\field_bundle\FieldBundleInterface $field_bundle
+   * @param FieldBundleInterface $field_bundle
    *   (Optional) A field bundle item. Used for checking access to an item's
    *   default revision when $field_bundle_revision is unspecified. Ignored when
    *   $field_bundle_revision is specified. If neither $field_bundle_revision
    *   nor $field_bundle are specified, then access is denied.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, AccountInterface $account, $field_bundle_revision = NULL, FieldBundleInterface $field_bundle = NULL) {
@@ @@
   /**
    * Checks field bundle item revision access.
    *
-   * @param \Drupal\field_bundle\FieldBundleInterface $field_bundle
+   * @param FieldBundleInterface $field_bundle
    *   The field bundle item to check.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   A user object representing the user for whom the operation is to be
    *   performed.
    * @param string $op
@@ @@
       }
       // If the revisions checkbox is selected for the field bundle config,
       // display the revisions tab.
-      /** @var \Drupal\field_bundle\FieldBundleConfigInterface $field_bundle_config */
+      /** @var FieldBundleConfigInterface $field_bundle_config */
       $field_bundle_config = \Drupal::entityTypeManager()->getStorage('field_bundle_config')->load($config_id);
       if ($field_bundle_config->shouldCreateNewRevision() && $op === 'view') {
         $this->access[$cid] = TRUE;
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\field_bundle\FieldBundleInterface $field_bundle
+   * @param FieldBundleInterface $field_bundle
    *   The field bundle item for which to count the revisions.
    *
    * @return int
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/field_bundle/modules/group/group_field_bundle.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Symfony\Component\Routing\RouterInterface;
 /**
  * @file
  * Enables Group functionality for the Field bundles.
@@ @@
   if ($entity->getEntityTypeId() == 'group' && \Drupal::moduleHandler()->moduleExists('views')) {
     /** @var \Drupal\group\Entity\GroupInterface $entity */
     if ($entity->hasPermission('access group_field_bundle overview', \Drupal::currentUser())) {
-      /** @var \Symfony\Component\Routing\RouterInterface $router */
+      /** @var RouterInterface $router */
       $router = \Drupal::service('router.no_access_checks');
       if ($router->getRouteCollection()->get('view.group_field_bundle.page_1') !== NULL) {
         $operations['field_bundles'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


15) modules/contrib/field_bundle/modules/canonical/field_bundle_canonical.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * The field_bundle_canonial module file.
  */
-
-
 /**
  * Implements hook_entity_type_build().
  */
@@ @@
   if (!isset($entity_types['field_bundle'])) {
     return;
   }
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+  /** @var EntityTypeInterface $entity_type */
   $entity_type = $entity_types['field_bundle'];
   $entity_type->setLinkTemplate('canonical', '/field-bundle/{field_bundle}');
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


16) modules/contrib/field_bundle/field_bundle.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field_bundle\FieldBundleInterface;
 /**
  * @file
  * Builds placeholder replacement tokens for "field bundle"-related data.
@@ @@
   }
   $replacements = [];

-  /** @var \Drupal\field_bundle\FieldBundleInterface $field_bundle */
+  /** @var FieldBundleInterface $field_bundle */
   $field_bundle = NULL;
   $allowed_keys = ['bundle', 'field_bundle', 'field-bundle'];
   foreach ($allowed_keys as $key) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


17) modules/contrib/field_bundle/field_bundle.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field_bundle\FieldBundleInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Provides a field bundle entity type.
@@ @@
  */
 function field_bundle_theme_suggestions_field_bundle(array $variables) {
   $suggestions = [];
-  /** @var \Drupal\field_bundle\FieldBundleInterface $field_bundle */
+  /** @var FieldBundleInterface $field_bundle */
   $field_bundle = $variables['elements']['#field_bundle'];
   $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

@@ @@
  */
 function field_bundle_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
   if (isset($entity_form['#entity_type']) && $entity_form['#entity_type'] === 'field_bundle') {
-    /** @var \Drupal\field_bundle\FieldBundleInterface $field_bundle */
+    /** @var FieldBundleInterface $field_bundle */
     $field_bundle = $entity_form['#entity'];
     $form_class = $field_bundle->getEntityType()->getFormClass('default');
     $entity_form['#entity_builders']['apply_label_pattern'] = [
@@ @@
   if (!isset($entity_types['field_bundle'])) {
     return;
   }
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+  /** @var EntityTypeInterface $entity_type */
   $entity_type = $entity_types['field_bundle'];
   $module_handler = \Drupal::moduleHandler();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


18) modules/contrib/field_bundle/field_bundle.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field_bundle\FieldBundleInterface;
 /**
  * @file
  * Hooks specific to the Field Bundle module.
  */
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Define a string representation for the given field bundle.
  *
@@ @@
  * In case the hook implementation returns an empty string, a fallback value
  * will be generated, or another module might generate the value.
  *
- * @param \Drupal\field_bundle\FieldBundleInterface $field_bundle
+ * @param FieldBundleInterface $field_bundle
  *   The field bundle.
  * @param string $string
  *   The current value of the string representation.
@@ @@
  *
  * @see \Drupal\field_bundle\FieldBundleInterface::getStringRepresentation()
  */
-function hook_field_bundle_get_string_representation(\Drupal\field_bundle\FieldBundleInterface $field_bundle, $string) {
+function hook_field_bundle_get_string_representation(FieldBundleInterface $field_bundle, $string) {
   if ($field_bundle->isNew()) {
     return 'NEW - ' . $field_bundle->get('my_custom_field')->value;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/field_bundle/src/QueryAccess/FieldBundleQueryAccessHandl
         er.php" file, due to:                                                  
         "Analyze error: "Class Drupal\entity\QueryAccess\QueryAccessHandlerBase
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/field_bundle/modules/group/src/Plugin/GroupContentEnable
         r/GroupFieldBundle.php" file, due to:                                  
         "Analyze error: "Class Drupal\group\Plugin\GroupContentEnablerBase not 
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/field_bundle/modules/group/src/Controller/GroupFieldBund
         leController.php" file, due to:                                        
         "Analyze error: "Class                                                 
         Drupal\group\Entity\Controller\GroupContentController not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

