diff --git a/extraconfigfield.module b/extraconfigfield.module
index 680afdc..e794ab3 100644
--- a/extraconfigfield.module
+++ b/extraconfigfield.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * @file
  * Extra Config Field module file.
@@ -21,7 +22,7 @@ function extraconfigfield_entity_extra_field_info() {
  * Implements hook_entity_view().
  */
 function extraconfigfield_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   \Drupal::service('extraconfigfield.service')->entityView($build, $entity, $display, $view_mode);
 }
 
@@ -32,7 +33,7 @@ function extraconfigfield_form_alter(&$form, FormStateInterface $form_state, $fo
   $formObject = $form_state->getFormObject();
   if ($formObject instanceof ContentEntityFormInterface) {
     $entity = $formObject->getEntity();
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     \Drupal::service('extraconfigfield.service')->entityFormAlter($form, $form_state, $entity);
   }
 }
diff --git a/src/ExtraConfigFieldListBuilder.php b/src/ExtraConfigFieldListBuilder.php
index 9b580e1..7e07345 100644
--- a/src/ExtraConfigFieldListBuilder.php
+++ b/src/ExtraConfigFieldListBuilder.php
@@ -24,7 +24,7 @@ class ExtraConfigFieldListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\extraconfigfield\ExtraConfigFieldInterface $entity */
+    /** @var ExtraConfigFieldInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['status'] = $entity->status() ? $this->t('Enabled') : $this->t('Disabled');
diff --git a/src/ExtraConfigFieldService.php b/src/ExtraConfigFieldService.php
index 28758be..637d420 100644
--- a/src/ExtraConfigFieldService.php
+++ b/src/ExtraConfigFieldService.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\extraconfigfield;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\TypedConfigManagerInterface;
@@ -21,53 +23,53 @@ class ExtraConfigFieldService {
   /**
    * Provides entity_type.manager service.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $storage;
 
   /**
    * Provides config.typed service.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;
 
   /**
    * Provides config.factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Provides configelement.editable_config_item_factory service.
    *
-   * @var \Drupal\configelement\EditableConfig\EditableConfigItemFactory
+   * @var EditableConfigItemFactory
    */
   protected $editableConfigItemFactory;
 
   /**
    * Provides renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
    * ExtraconfigfieldService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Provides an interface for entity type managers.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typedConfigManager
+   * @param TypedConfigManagerInterface $typedConfigManager
    *   Defines an interface for managing config schema type plugins.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Defines the interface for a configuration object factory.
-   * @param \Drupal\configelement\EditableConfig\EditableConfigItemFactory $editableConfigItemFactory
+   * @param EditableConfigItemFactory $editableConfigItemFactory
    *   EditableConfigItemFactory item.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   Turns a render array into a HTML string.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, TypedConfigManagerInterface $typedConfigManager, ConfigFactoryInterface $configFactory, EditableConfigItemFactory $editableConfigItemFactory, Renderer $renderer) {
     $this->storage = $entityTypeManager->getStorage('extraconfigfield');
@@ -83,7 +85,7 @@ class ExtraConfigFieldService {
   public function fieldInfo() {
     $info = [];
     foreach ($this->storage->getQuery()->condition('status', TRUE)->execute() as $id) {
-      /** @var \Drupal\extraconfigfield\ExtraConfigFieldInterface $extraConfigField */
+      /** @var ExtraConfigFieldInterface $extraConfigField */
       $extraConfigField = $this->storage->load($id);
 
       $entityType = $extraConfigField->get('entity_type');
@@ -117,7 +119,7 @@ class ExtraConfigFieldService {
       ->execute();
     foreach ($items as $id) {
       // @todo Show overrides once core supports this better.
-      /** @var \Drupal\extraconfigfield\ExtraConfigFieldInterface $extraConfigField */
+      /** @var ExtraConfigFieldInterface $extraConfigField */
       $extraConfigField = $this->storage->load($id);
 
       // @see \Drupal\Core\Field\FormatterBase::view
@@ -160,7 +162,7 @@ class ExtraConfigFieldService {
       ->condition('status', TRUE)
       ->execute();
     foreach ($items as $id) {
-      /** @var \Drupal\extraconfigfield\ExtraConfigFieldInterface $extraConfigField */
+      /** @var ExtraConfigFieldInterface $extraConfigField */
       $extraConfigField = $this->storage->load($id);
       $fieldName = $extraConfigField->get('field_name');
       $form[$fieldName] = [
@@ -175,7 +177,7 @@ class ExtraConfigFieldService {
   /**
    * Get the langcode of an entity, with special config_pages handling.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return null|string
diff --git a/src/Form/ExtraConfigFieldForm.php b/src/Form/ExtraConfigFieldForm.php
index fb86cb4..e7d51b0 100644
--- a/src/Form/ExtraConfigFieldForm.php
+++ b/src/Form/ExtraConfigFieldForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\extraconfigfield\Form;
 
+use Drupal\extraconfigfield\ExtraConfigFieldInterface;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Config\TypedConfigManagerInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityForm;
@@ -15,57 +17,57 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 /**
  * ExtraConfigField form.
  *
- * @property \Drupal\extraconfigfield\ExtraConfigFieldInterface $entity
+ * @property ExtraConfigFieldInterface $entity
  */
 class ExtraConfigFieldForm extends EntityForm {
 
   /**
    * Provides entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Provides entity_type.bundle.info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * Provides entity_field.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Provides config.typed service.
    *
-   * @var \Drupal\Core\Config\TypedConfigManagerInterface
+   * @var TypedConfigManagerInterface
    */
   protected $typedConfigManager;
 
   /**
    * Provides configelement.editable_config_item_factory service.
    *
-   * @var \Drupal\configelement\EditableConfig\EditableConfigItemFactory
+   * @var EditableConfigItemFactory
    */
   protected $editableConfigItemFactory;
 
   /**
    * ExtraConfigFieldForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Provides an interface for entity type managers.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   Provides an interface for an entity type bundle info.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Provides an interface for an entity field manager.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typedConfigManager
+   * @param TypedConfigManagerInterface $typedConfigManager
    *   Defines an interface for managing config schema type plugins.
-   * @param \Drupal\configelement\EditableConfig\EditableConfigItemFactory $editableConfigItemFactory
+   * @param EditableConfigItemFactory $editableConfigItemFactory
    *   EditableConfigItemFactory item.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $entityTypeBundleInfo, EntityFieldManagerInterface $entityFieldManager, TypedConfigManagerInterface $typedConfigManager, EditableConfigItemFactory $editableConfigItemFactory) {
@@ -191,7 +193,7 @@ class ExtraConfigFieldForm extends EntityForm {
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
     list($entityType, $bundle) = explode('.', $form_state->getValue('entity_type_bundle'));
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity->set('entity_type', $entityType);
     $entity->set('bundle', $bundle);
     parent::copyFormValuesToEntity($entity, $form, $form_state);
diff --git a/tests/src/Functional/AdminPageTest.php b/tests/src/Functional/AdminPageTest.php
index 0f21840..f81e099 100644
--- a/tests/src/Functional/AdminPageTest.php
+++ b/tests/src/Functional/AdminPageTest.php
@@ -33,7 +33,7 @@ class AdminPageTest extends BrowserTestBase {
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
