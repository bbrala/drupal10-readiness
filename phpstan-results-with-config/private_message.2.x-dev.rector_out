modules/contrib/private_message/private_message.api.php
modules/contrib/private_message/private_message.install
modules/contrib/private_message/private_message.module
modules/contrib/private_message/private_message.theme.inc
modules/contrib/private_message/private_message.tokens.inc
modules/contrib/private_message/src/Ajax/PrivateMessageInboxInsertThreadsCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageInboxTriggerUpdateCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageInboxUpdateCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageInsertMessagesCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageInsertNewMessagesCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageInsertPreviousMessagesCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageInsertThreadCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageLoadNewMessagesCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageMemberUsernameValidatedCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageMembersAutocompleteResponseCommand.php
modules/contrib/private_message/src/Ajax/PrivateMessageUpdateUnreadThreadCountCommand.php
modules/contrib/private_message/src/Annotation/PrivateMessageConfigForm.php
modules/contrib/private_message/src/Cache/Context/PrivateMessageThreadCacheContext.php
modules/contrib/private_message/src/Commands/PrivateMessageCommands.php
modules/contrib/private_message/src/Controller/AjaxController.php
modules/contrib/private_message/src/Controller/AjaxControllerInterface.php
modules/contrib/private_message/src/Controller/PrivateMessageController.php
modules/contrib/private_message/src/Controller/PrivateMessageControllerInterface.php
modules/contrib/private_message/src/Entity/Access/PrivateMessageAccessControlHandler.php
modules/contrib/private_message/src/Entity/Access/PrivateMessageThreadAccessControlHandler.php
modules/contrib/private_message/src/Entity/Builder/PrivateMessageThreadViewBuilder.php
modules/contrib/private_message/src/Entity/Builder/PrivateMessageViewBuilder.php
modules/contrib/private_message/src/Entity/PrivateMessage.php
modules/contrib/private_message/src/Entity/PrivateMessageInterface.php
modules/contrib/private_message/src/Entity/PrivateMessageThread.php
modules/contrib/private_message/src/Entity/PrivateMessageThreadInterface.php
modules/contrib/private_message/src/Form/AdminUninstallForm.php
modules/contrib/private_message/src/Form/ConfigForm.php
modules/contrib/private_message/src/Form/PrivateMessageForm.php
modules/contrib/private_message/src/Form/PrivateMessageThreadDeleteForm.php
modules/contrib/private_message/src/Mapper/PrivateMessageMapper.php
modules/contrib/private_message/src/Mapper/PrivateMessageMapperInterface.php
modules/contrib/private_message/src/Plugin/Block/PrivateMessageActionsBlock.php
modules/contrib/private_message/src/Plugin/Block/PrivateMessageInboxBlock.php
modules/contrib/private_message/src/Plugin/Block/PrivateMessageNotificationBlock.php
modules/contrib/private_message/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMemberFormatter.php
modules/contrib/private_message/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMessageFormatter.php
modules/contrib/private_message/src/Plugin/Field/FieldWidget/PrivateMessageThreadMemberWidget.php
modules/contrib/private_message/src/Plugin/PrivateMessageConfigForm/PrivateMessageConfigFormBase.php
modules/contrib/private_message/src/Plugin/PrivateMessageConfigForm/PrivateMessageConfigFormPluginInterface.php
modules/contrib/private_message/src/Plugin/RulesAction/SendPrivateMessage.php
modules/contrib/private_message/src/Plugin/Validation/Constraint/PrivateMessageThreadMemberConstraint.php
modules/contrib/private_message/src/Plugin/Validation/Constraint/PrivateMessageThreadMemberConstraintValidator.php
modules/contrib/private_message/src/PluginManager/PrivateMessageConfigFormManager.php
modules/contrib/private_message/src/PluginManager/PrivateMessageConfigFormManagerInterface.php
modules/contrib/private_message/src/Service/PrivateMessageNotifier.php
modules/contrib/private_message/src/Service/PrivateMessageNotifierInterface.php
modules/contrib/private_message/src/Service/PrivateMessageService.php
modules/contrib/private_message/src/Service/PrivateMessageServiceInterface.php
modules/contrib/private_message/src/Service/PrivateMessageThreadManager.php
modules/contrib/private_message/src/Service/PrivateMessageThreadManagerInterface.php
modules/contrib/private_message/tests/src/Functional/PrivateMessageNotificationTest.php
modules/contrib/private_message/tests/src/Functional/PrivateMessageSettingsFormTest.php
modules/contrib/private_message/tests/src/Functional/PrivateMessageThreadMembersTest.php
modules/contrib/private_message/tests/src/Functional/PrivateMessageUnreadCountTest.php

38 files with changes
=====================

1) modules/contrib/private_message/tests/src/Functional/PrivateMessageUnreadCountTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\private_message\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The first User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $userA;

@@ @@
   /**
    * The second User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $userB;

@@ @@
   /**
    * SetUp the test class.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->userA = $this->drupalCreateUser([
       'use private messaging system',
@@ @@
     $this->drupalLogin($this->userA);

     $this->drupalGet('/private-message/create');
-    $this->assertResponse(200);
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->statusCodeEquals(200);
+    $this->submitForm([
       'members[0][target_id]' => $this->userB->getDisplayName(),
       'message[0][value]' => $this->getRandomGenerator()->sentences(5),
     ], 'Send');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // I should not see a notification for my own message.
     $this->assertSession()->elementTextContains('css', 'a.private-message-page-link', 0);
     // When going to a different page, I should still not see a notification for
@@ @@

     // We visit the thread directly.
     $this->drupalGet('private-messages/1');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->elementTextContains('css', 'a.private-message-page-link', 0);

     // We are not already looking at the thread.
-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'message[0][value]' => $this->getRandomGenerator()->sentences(5),
     ], 'Send');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // I should not see a notification for my own message.
     $this->assertSession()->elementTextContains('css', 'a.private-message-page-link', 0);
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/private_message/tests/src/Functional/PrivateMessageThreadMembersTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\private_message\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * The first User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $userA;

@@ @@
   /**
    * The second User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $userB;

@@ @@
   /**
    * The third User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $userC;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->userA = $this->drupalCreateUser([
       'use private messaging system',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/private_message/tests/src/Functional/PrivateMessageSettingsFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\private_message\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $adminUser;

@@ @@
   /**
    * The User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $user;

@@ @@
   /**
    * SetUp the test class.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->user = $this->DrupalCreateUser();
     $this->adminUser = $this->DrupalCreateUser([
@@ @@
   public function testSettingsPageExists() {
     $this->drupalLogin($this->user);
     $this->drupalGet('admin/config/private-message/config');
-    $this->assertResponse(403);
+    $this->assertSession()->statusCodeEquals(403);

     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/private-message/config');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

   /**
@@ @@
   public function testConfigForm() {
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/config/private-message/config');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Test form submission.
-    $this->drupalPostForm(NULL, [], t('Save configuration'));
-    $this->assertText(
-      'The configuration options have been saved.'
-    );
+    $this->submitForm([], t('Save configuration'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The configuration options have been saved.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/private_message/tests/src/Functional/PrivateMessageNotificationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\private_message\Functional;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The first User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $userA;

@@ @@
   /**
    * The second User used for the test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $userB;

@@ @@
   /**
    * SetUp the test class.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->userA = $this->drupalCreateUser([
       'use private messaging system',
@@ @@
     $this->drupalLogin($this->userA);

     $this->drupalGet('/private-message/create');
-    $this->assertResponse(200);
-    $this->drupalPostForm(NULL, [
+    $this->assertSession()->statusCodeEquals(200);
+    $this->submitForm([
       'members[0][target_id]' => $this->userB->getDisplayName(),
       'message[0][value]' => $this->getRandomGenerator()->sentences(5),
     ], 'Send');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     $this->drupalLogin($this->userB);
     $this->drupalGet('private-message/create');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->elementTextContains('css', 'a.private-message-page-link', 1);
   }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/private_message/src/Service/PrivateMessageThreadManagerInterface.php:16

    ---------- begin diff ----------
@@ @@
    *
    * A new thread will be created if one does not already exist.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessageInterface $message
+   * @param PrivateMessageInterface $message
    *   The new message object.
    * @param array $recipients
    *   (optional) An array of message recipients. Defaults to an empty array.
@@ @@
    * @param array $excludeFromMail
    *   (optional) An array of members to exclude from notification emails.
    *   Defaults to an empty array.
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface|null $thread
+   * @param PrivateMessageThreadInterface|null $thread
    *   (optional) The private message thread. If NULL, one will be loaded
    *   using the recipients array.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/private_message/src/Service/PrivateMessageThreadManager.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   private $privateMessageService;

@@ @@
   /**
    * The private message notifier service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageNotifierInterface
+   * @var PrivateMessageNotifierInterface
    */
   private $privateMessageNotifier;

@@ @@
   /**
    * The private message.
    *
-   * @var \Drupal\private_message\Entity\PrivateMessageInterface
+   * @var PrivateMessageInterface
    */
   private $message;

@@ @@
   /**
    * The message recipients.
    *
-   * @var \Drupal\Core\Session\AccountInterface[]
+   * @var AccountInterface[]
    */
   private $recipients = [];

@@ @@
   /**
    * An array of members to exclude from notifications.
    *
-   * @var \Drupal\Core\Session\AccountInterface[]
+   * @var AccountInterface[]
    */
   private $excludeFromNotification = [];

@@ @@
   /**
    * The private message thread.
    *
-   * @var \Drupal\private_message\Entity\PrivateMessageThreadInterface|null
+   * @var PrivateMessageThreadInterface|null
    */
   private $thread;

@@ @@
   /**
    * PrivateMessageThreadManager constructor.
    *
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
-   * @param \Drupal\private_message\Service\PrivateMessageNotifierInterface $privateMessageNotifier
+   * @param PrivateMessageNotifierInterface $privateMessageNotifier
    *   The private message notifier service.
    */
   public function __construct(
@@ @@
   /**
    * The users to receive notifications.
    *
-   * @return \Drupal\Core\Session\AccountInterface[]
+   * @return AccountInterface[]
    *   An array of Account objects of the thread members who are to receive
    *   the notification.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/private_message/src/Service/PrivateMessageServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message\Service;

+use Drupal\private_message\Entity\PrivateMessageThread;
+use Drupal\user\Entity\User;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\private_message\Entity\PrivateMessageInterface;
@@ @@
    *
    * If no thread exists, one will be created.
    *
-   * @param \Drupal\user\UserInterface[] $members
+   * @param UserInterface[] $members
    *   An array of User objects for whom the private message
    *   thread should be retrieved.
    *
-   * @return \Drupal\private_message\Entity\PrivateMessageThread
+   * @return PrivateMessageThread
    *   A private message thread that contains all members in the thread.
    */
   public function getThreadForMembers(array $members);
@@ @@
    * @param int $count
    *   The maximum number of results to return.
    *
-   * @return \Drupal\user\Entity\User[]
+   * @return User[]
    *   An array of User accounts whose account names begin with the given
    *   string.
    */
@@ @@
   /**
    * Updates the last access time for the current user on the given thread.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface $thread
+   * @param PrivateMessageThreadInterface $thread
    *   The thread whose access time should be updated.
    */
   public function updateThreadAccessTime(PrivateMessageThreadInterface $thread);
@@ @@
   /**
    * Load the thread that a private message belongs to.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessageInterface $privateMessage
+   * @param PrivateMessageInterface $privateMessage
    *   The private message for which the thread it belongs to should be
    *   returned.
    *
-   * @return \Drupal\private_message\Entity\PrivateMessageThread
+   * @return PrivateMessageThread
    *   The private message thread to which the private message belongs
    */
   public function getThreadFromMessage(PrivateMessageInterface $privateMessage);
@@ @@
    * @param array $build
    *   A render array representing the given entity. Chances should be made to
    *   this render array.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity being rendered.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   The display being used to render the entity.
    * @param string $view_mode
    *   The view mode being used to render the entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/private_message/src/Service/PrivateMessageService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message\Service;

+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
+use Drupal\user\UserStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\user\Entity\User;
+use Drupal\private_message\Entity\PrivateMessageThread;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The private message mapper service.
    *
-   * @var \Drupal\private_message\Mapper\PrivateMessageMapperInterface
+   * @var PrivateMessageMapperInterface
    */
   protected $mapper;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * Cache Tags Invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * The private message thread manager.
    *
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage
+   * @var SqlContentEntityStorage
    */
   protected $pmThreadManager;

@@ @@
   /**
    * The user entity manager.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userManager;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a PrivateMessageService object.
    *
-   * @param \Drupal\private_message\Mapper\PrivateMessageMapperInterface $mapper
+   * @param PrivateMessageMapperInterface $mapper
    *   The private message mapper service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\user\UserDataInterface $userData
+   * @param UserDataInterface $userData
    *   The user data service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cacheTagsInvalidator
+   * @param CacheTagsInvalidatorInterface $cacheTagsInvalidator
    *   The cache tags invalidator interface.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager interface.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(
     PrivateMessageMapperInterface $mapper,
@@ @@
   /**
    * Create a new private message thread for the given users.
    *
-   * @param \Drupal\user\Entity\User[] $members
+   * @param User[] $members
    *   An array of users who will be members of the given thread.
    *
-   * @return \Drupal\private_message\Entity\PrivateMessageThread
+   * @return PrivateMessageThread
    *   The new private message thread.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createPrivateMessageThread(array $members) {
     $thread = $this->pmThreadManager->create();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/private_message/src/Service/PrivateMessageNotifierInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message\Service;

+use Drupal\user\UserInterface;
 use Drupal\private_message\Entity\PrivateMessageInterface;
 use Drupal\private_message\Entity\PrivateMessageThreadInterface;

@@ @@
   /**
    * Send a private message notification email.
    *
-   * @param \Drupal\private_message\Entity\PrivateMessageInterface $message
+   * @param PrivateMessageInterface $message
    *   The message.
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface $thread
+   * @param PrivateMessageThreadInterface $thread
    *   The message thread.
-   * @param \Drupal\user\UserInterface[] $members
+   * @param UserInterface[] $members
    *   The message members.
    */
   public function notify(PrivateMessageInterface $message, PrivateMessageThreadInterface $thread, array $members = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/private_message/src/Service/PrivateMessageNotifier.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message\Service;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * The configuration factory service.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The message manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $messageManager;

@@ @@
   /**
    * The message notification service.
    *
-   * @var \Drupal\message_notify\MessageNotifier
+   * @var MessageNotifier
    */
   protected $messageNotifier;

@@ @@
   /**
    * Constructs a new PrivateMessageNotifier object.
    *
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\user\UserDataInterface $userData
+   * @param UserDataInterface $userData
    *   The user data service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\message_notify\MessageNotifier $messageNotifier
+   * @param MessageNotifier $messageNotifier
    *   The message notification service.
    */
   public function __construct(
@@ @@
    *
    * Checks individual user preferences as well as system defaults.
    *
-   * @param \Drupal\Core\Session\AccountInterface $recipient
+   * @param AccountInterface $recipient
    *   The potential recipient.
-   * @param \Drupal\private_message\Entity\PrivateMessageInterface $message
+   * @param PrivateMessageInterface $message
    *   The private message for which a notification is being sent.
-   * @param \Drupal\private_message\Entity\PrivateMessageThreadInterface $thread
+   * @param PrivateMessageThreadInterface $thread
    *   The private message thread.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/private_message/src/PluginManager/PrivateMessageConfigFormManager.php:16

    ---------- begin diff ----------
@@ @@
    *
    * @param \Traversable $namespaces
    *   Namespaces to be searched for the plugin.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler service.
    */
   public function __construct(Traversable $namespaces, CacheBackendInterface $cacheBackend, ModuleHandlerInterface $moduleHandler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/private_message/src/Plugin/PrivateMessageConfigForm/PrivateMessageConfigFormPluginInterface.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Build the section of the form as it will appear on the settings page.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The Drupal form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The Drupal form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/private_message/src/Plugin/PrivateMessageConfigForm/PrivateMessageConfigFormBase.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The private message config form plugin manager.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definitions.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/private_message/src/Plugin/Field/FieldWidget/PrivateMessageThreadMemberWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message\Plugin\Field\FieldWidget;

+use Drupal\user\UserStorageInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\CsrfTokenGenerator;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The CSRF token generator service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfTokenGenerator;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The user manager service.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userManager;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrfTokenGenerator
+   * @param CsrfTokenGenerator $csrfTokenGenerator
    *   The CSRF token generator service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/private_message/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMessageFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message\Plugin\Field\FieldFormatter;

+use Drupal\user\UserStorageInterface;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Access\CsrfTokenGenerator;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The CSRF token generator.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfTokenGenerator;

@@ @@
   /**
    * The user manager service.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userManager;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
    *   The ID of the plugin.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $settings
    *   The field settings.
@@ @@
    *   The current view mode.
    * @param array $third_party_settings
    *   The third party settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
    * @param |Drupal\Core\Session\AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrfTokenGenerator
+   * @param CsrfTokenGenerator $csrfTokenGenerator
    *   The CSRF token generator.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/private_message/src/Plugin/Field/FieldFormatter/PrivateMessageThreadMemberFormatter.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
    *   The ID of the plugin.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $settings
    *   The field settings.
@@ @@
    *   The current view mode.
    * @param array $third_party_settings
    *   The third party settings.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
    * @param |Drupal\Core\Session\AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(
@@ @@
           }
           elseif ($this->getSetting('display_type') == 'entity') {
             $renderable = $view_builder->view($user, $this->getSetting('entity_display_mode'));
-            $users[$user->id()] = render($renderable);
+            $users[$user->id()] = \Drupal::service('renderer')->render($renderable);
           }
         }
       }
    ----------- end diff -----------

Applied rules:
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/private_message/src/Plugin/Block/PrivateMessageNotificationBlock.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The CSRF token generator service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;

@@ @@
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;

@@ @@
   /**
    * The private message configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $privateMessageConfig;

@@ @@
    *   The ID of the plugin.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrfToken
+   * @param CsrfTokenGenerator $csrfToken
    *   The CSRF token generator service.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountProxyInterface $currentUser, CsrfTokenGenerator $csrfToken, PrivateMessageServiceInterface $privateMessageService, ConfigFactoryInterface $config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/private_message/src/Plugin/Block/PrivateMessageInboxBlock.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The CSRF token generator service.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;

@@ @@
   /**
    * The private message configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $privateMessageConfig;

@@ @@
    *   The ID of the plugin.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrfToken
+   * @param CsrfTokenGenerator $csrfToken
    *   The CSRF token generator service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountProxyInterface $currentUser, PrivateMessageServiceInterface $privateMessageService, EntityTypeManagerInterface $entityTypeManager, CsrfTokenGenerator $csrfToken, ConfigFactoryInterface $config) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/private_message/src/Plugin/Block/PrivateMessageActionsBlock.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Configuration Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
    *   The ID of the plugin.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The config factory service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/private_message/src/Mapper/PrivateMessageMapperInterface.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Retrieve the ID of the most recently updated thread for the given user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user whose most recently updated thread should be retrieved.
    *
    * @return int|bool
@@ @@
   /**
    * Retrieve a list of thread IDs for threads the user belongs to.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user whose most recently thread IDs should be retrieved.
    * @param mixed $count
    *   The number of thread IDs to retrieve or FALSE to retrieve them all.
@@ @@
   /**
    * Check if a thread exists after with an ID greater than the given thread ID.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user for whom to check.
    * @param int $timestamp
    *   The timestamp to check against.
@@ @@
   /**
    * Load the thread id of the thread that a private message belongs to.
    *
-   * @param Drupal\private_message\Entity\PrivateMessageInterface $privateMessage
+   * @param PrivateMessageInterface $privateMessage
    *   The private message for which the thread ID of the thread it belongs to
    *   should be returned.
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/private_message/src/Mapper/PrivateMessageMapper.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Constructs a PrivateMessageMapper object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    * @param \Drupal\Session\AccountProxyInterface $currentUser
    *   The current user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/private_message/src/Form/PrivateMessageForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message\Form;

+use Drupal\user\UserStorageInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The typed data manager service.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;

@@ @@
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * The private message configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;

@@ @@
   /**
    * The private message thread manager service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageThreadManagerInterface
+   * @var PrivateMessageThreadManagerInterface
    */
   protected $privateMessageThreadManager;

@@ @@
   /**
    * The user manager service.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userManager;

@@ @@
   /**
    * Constructs a PrivateMessageForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   The typed data manager service.
-   * @param \Drupal\user\UserDataInterface $userData
+   * @param UserDataInterface $userData
    *   The user data service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory service.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
-   * @param \Drupal\private_message\Service\PrivateMessageThreadManagerInterface $privateMessageThreadManager
+   * @param PrivateMessageThreadManagerInterface $privateMessageThreadManager
    *   The private message thread manager service.
    */
   public function __construct(EntityRepositoryInterface $entityRepository, EntityTypeBundleInfoInterface $entity_type_bundle_info, TimeInterface $time, EntityTypeManagerInterface $entityTypeManager, AccountProxyInterface $currentUser, TypedDataManagerInterface $typedDataManager, UserDataInterface $userData, ConfigFactoryInterface $configFactory, PrivateMessageServiceInterface $privateMessageService, PrivateMessageThreadManagerInterface $privateMessageThreadManager) {
@@ @@
   public function save(array $form, FormStateInterface $formState) {
     $status = parent::save($form, $formState);

-    /** @var \Drupal\private_message\Entity\PrivateMessageThreadInterface $private_message_thread */
+    /** @var PrivateMessageThreadInterface $private_message_thread */
     $private_message_thread = $formState->get('thread');
     if (!$private_message_thread) {
       // Generate an array containing the members of the thread.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/private_message/src/Form/ConfigForm.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a PrivateMessageForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
    * @param \Drupal\private_message\PluginManager\PrivateMessageConfigFormManager $privateMessageConfigFormManager
    *   The private message config form plugin manager.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/private_message/src/Form/AdminUninstallForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructs a new AdminUninstallForm object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/private_message/src/Entity/PrivateMessageThreadInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message\Entity;

+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;

@@ @@
    * @param \Drupal\user\AccountInterface $account
    *   The account to be set as a member of the private message thread.
    *
-   * @return \Drupal\private_message\Entity\PrivateMessageInterface
+   * @return PrivateMessageInterface
    *   Returns the class itself to allow for chaining.
    */
   public function addMember(AccountInterface $account);
@@ @@
    *   The ID of the account to be set as a member of the private message
    *   thread.
    *
-   * @return \Drupal\private_message\Entity\PrivateMessageInterface
+   * @return PrivateMessageInterface
    *   Returns the class itself to allow for chaining.
    */
   public function addMemberById($id);
@@ @@
   /**
    * Add a private message to the list of messages in this thread.
    *
-   * @param Drupal\private_message\Entity\PrivateMessageInterface $privateMessage
+   * @param PrivateMessageInterface $privateMessage
    *   The private message to be added to the thread.
    *
-   * @return Drupal\private_message\Entity\PrivateMessageThread
+   * @return PrivateMessageThread
    *   The private message thread.
    */
   public function addMessage(PrivateMessageInterface $privateMessage);
@@ @@
   /**
    * Retrieve all private messages attached to this thread.
    *
-   * @return \Drupal\Core\Field\EntityReferenceFieldItemListInterface
+   * @return EntityReferenceFieldItemListInterface
    *   A list of private messages attached to this thread
    */
   public function getMessages();
@@ @@
   /**
    * Add a history record to the current thread for the given user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user whose access time should be updated.
    */
   public function addHistoryRecord(AccountInterface $account);
@@ @@
   /**
    * Get the last access timestamp for the given user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user whose last access time should be retrieved.
    *
    * @return int
@@ @@
   /**
    * Update the last access time for the given user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user whose last access time should be updated.
    */
   public function updateLastAccessTime(AccountInterface $account);
@@ @@
   /**
    * Get the last delete timestamp for the given user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user whose last delete time should be retrieved.
    *
    * @return int
@@ @@
   /**
    * Update the last delete time for the given user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user whose last delete time should be updated.
    */
   public function updateLastDeleteTime(AccountInterface $account);
@@ @@
    * Only messages created after the last time the user deleted the thread will
    * be shown. If they have never deleted the thread, all messages are returned.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for whom private messages should be returned.
    *
-   * @return Drupal\private_message\Entity\PrivateMessage[]
+   * @return PrivateMessage[]
    *   An array of private messages
    */
   public function filterUserDeletedMessages(AccountInterface $account);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/private_message/src/Entity/Builder/PrivateMessageViewBuilder.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a PrivateMessageViewBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Theme\Registry $themeRegistry
+   * @param Registry $themeRegistry
    *   The theme registry.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/private_message/src/Entity/Builder/PrivateMessageThreadViewBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message\Entity\Builder;

+use Drupal\Core\Config\Config;
+use Drupal\Core\DependencyInjection\ClassResolverInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * The class resolver service.
    *
-   * @var \Drupal\Core\DependencyInjection\ClassResolverInterface
+   * @var ClassResolverInterface
    */
   protected $classResolver;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * Constructs a PrivateMessageThreadViewBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entityType
+   * @param EntityTypeInterface $entityType
    *   The entity type.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
-   * @param \Drupal\Core\Theme\Registry $themeRegistry
+   * @param Registry $themeRegistry
    *   The theme register.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/private_message/src/Entity/Access/PrivateMessageAccessControlHandler.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;

@@ @@
   /**
    * Costructs a PrivateMessageThreadAccessControlHandler entity.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The context handler service.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The context repository service.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
    */
   public function __construct(EntityTypeInterface $entity_type, ContextHandlerInterface $context_handler, ContextRepositoryInterface $context_repository, PrivateMessageServiceInterface $privateMessageService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/private_message/src/Controller/PrivateMessageController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message\Controller;

+use Drupal\user\UserStorageInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBuilderInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The form builder interface.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
   /**
    * The user data service.
    *
-   * @var \Drupal\user\UserDataInterface
+   * @var UserDataInterface
    */
   protected $userData;

@@ @@
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;

@@ @@
   /**
    * The user manager service.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userManager;

@@ @@
   /**
    * Constructs a PrivateMessageForm object.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   The form builder service.
-   * @param \Drupal\user\UserDataInterface $userData
+   * @param UserDataInterface $userData
    *   The user data service.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
    */
   public function __construct(AccountProxyInterface $currentUser, EntityTypeManagerInterface $entityTypeManager, FormBuilderInterface $formBuilder, UserDataInterface $userData, PrivateMessageServiceInterface $privateMessageService) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/private_message/src/Controller/AjaxControllerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message\Controller;

+use Drupal\Core\Ajax\AjaxResponse;
 /**
  * Interface for the Private Message module's AjaxController.
  */
@@ @@
    * @param string $op
    *   The type of data to build for the response.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response
    */
   public function ajaxCallback($op);
@@ @@
   /**
    * Create AJAX response containing usernames for an autocomplete callback.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response
    */
   public function privateMessageMembersAutocomplete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


31) modules/contrib/private_message/src/Controller/AjaxController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message\Controller;

+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The private message thread manager.
    *
-   * @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage
+   * @var SqlContentEntityStorage
    */
   protected $threadManager;

@@ @@
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageServiceInterface
+   * @var PrivateMessageServiceInterface
    */
   protected $privateMessageService;

@@ @@
   /**
    * Constructs a AjaxController object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current user.
-   * @param \Drupal\private_message\Service\PrivateMessageServiceInterface $privateMessageService
+   * @param PrivateMessageServiceInterface $privateMessageService
    *   The private message service.
    */
   public function __construct(
@@ @@
   /**
    * Creates an Ajax Command containing new private message.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getNewPrivateMessages(AjaxResponse $response) {
@@ @@
   /**
    * Create an Ajax Command containing old private messages.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getOldPrivateMessages(AjaxResponse $response) {
@@ @@
   /**
    * Creates and Ajax Command containing old threads for the inbox.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getOldInboxThreads(AjaxResponse $response) {
@@ @@
   /**
    * Creates an Ajax Command with new threads for the private message inbox.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getNewInboxThreads(AjaxResponse $response) {
@@ @@
   /**
    * Create Ajax Command determining whether a given username is valid.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function validatePrivateMessageMemberUsername(AjaxResponse $response) {
@@ @@
    * Only messages created since the current user last visited the private
    * message page are shown.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function getNewUnreadThreadCount(AjaxResponse $response) {
@@ @@
   /**
    * Load a private message thread to be dynamically inserted into the page.
    *
-   * @param Drupal\Core\Ajax\AjaxResponse $response
+   * @param AjaxResponse $response
    *   The response to which any commands should be attached.
    */
   protected function loadThread(AjaxResponse $response) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/private_message/src/Commands/PrivateMessageCommands.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The private message service.
    *
-   * @var \Drupal\private_message\Service\PrivateMessageService
+   * @var PrivateMessageService
    */
   protected $privateMessageService;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a  object.
    *
-   * @param \Drupal\private_message\Service\PrivateMessageService $privateMessageService
+   * @param PrivateMessageService $privateMessageService
    *   The private message service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/private_message/src/Cache/Context/PrivateMessageThreadCacheContext.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The current route matcher.
    *
-   * @var \Drupal\Core\Routing\ResettableStackedRouteMatchInterface
+   * @var ResettableStackedRouteMatchInterface
    */
   protected $currentRouteMatcher;

@@ @@
   /**
    * Constructs a new UserCacheContextBase class.
    *
-   * @param \Drupal\Core\Routing\ResettableStackedRouteMatchInterface $currentRouteMatcher
+   * @param ResettableStackedRouteMatchInterface $currentRouteMatcher
    *   The current route matcher.
    */
   public function __construct(ResettableStackedRouteMatchInterface $currentRouteMatcher) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


34) modules/contrib/private_message/src/Annotation/PrivateMessageConfigForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_message\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The name of the form plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


35) modules/contrib/private_message/private_message.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\private_message\Entity\PrivateMessageInterface;
 /**
  * @file
  * Provides tokens for the Private Message module.
@@ @@
   if ($type == 'private_message' && !empty($data['private_message'])) {


-    /** @var \Drupal\private_message\Entity\PrivateMessageInterface $private_message */
+    /** @var PrivateMessageInterface $private_message */
     $private_message = $data['private_message'];

     foreach ($tokens as $name => $original) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


36) modules/contrib/private_message/private_message.theme.inc:11

    ---------- begin diff ----------
@@ @@
  * Implements hook_preprocess_private_message_notification_block().
  */
 function template_preprocess_private_message_notification_block(&$vars) {
-  $vars['notification_image_path'] = base_path() . drupal_get_path('module', 'private_message') . '/images/private-message-notification-icon.png';
+  $vars['notification_image_path'] = base_path() . \Drupal::service('extension.list.module')->getPath('private_message') . '/images/private-message-notification-icon.png';
   $link_title = $vars['new_message_count'] ? \Drupal::service('string_translation')->formatPlural($vars['new_message_count'], 'You have 1 unread private message', 'You have @count unread private messages') : t('You have no unread private messages');
   $url = Url::fromRoute('private_message.private_message_page', [], ['attributes' => ['title' => $link_title, 'class' => ['private-message-page-link']]]);
   $count = $vars['new_message_count'] > 99 ? '99+' : $vars['new_message_count'];
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


37) modules/contrib/private_message/private_message.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\private_message\Entity\PrivateMessageThreadInterface;
+use Drupal\private_message\Entity\PrivateMessageInterface;
 /**
  * @file
  * Contains hooks for the private message module.
@@ @@
   $variables['view_mode'] = $variables['elements']['#view_mode'];
   // Provide a distinct $teaser boolean.
   $variables['private_message_thread'] = $variables['elements']['#private_message_thread'];
-  /** @var \Drupal\private_message\Entity\PrivateMessageThreadInterface $private_message_thread */
+  /** @var PrivateMessageThreadInterface $private_message_thread */
   $private_message_thread = $variables['private_message_thread'];
   $variables['last_update'] = \Drupal::service('renderer')->render($variables['elements']['updated']);

@@ @@
   $variables['view_mode'] = $variables['elements']['#view_mode'];
   // Provide a distinct $teaser boolean.
   $variables['private_message'] = $variables['elements']['#private_message'];
-  /** @var \Drupal\private_message\Entity\PrivateMessageInterface $private_message */
+  /** @var PrivateMessageInterface $private_message */
   $private_message = $variables['private_message'];

   $variables['url'] = $private_message->toUrl('canonical', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


38) modules/contrib/private_message/private_message.api.php:11

    ---------- begin diff ----------
@@ @@
  *
  * @param array $build
  *   The render array representing the private message.
- * @param \Drupal\Core\Entity\EntityInterface $privateMessage
+ * @param EntityInterface $privateMessage
  *   The private message entity being rendered.
  * @param string $viewMode
  *   The view mode being rendered on the private message.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/private_message/src/Plugin/RulesAction/SendPrivateMessag
         e.php" file, due to:                                                   
         "Analyze error: "Class Drupal\rules\Core\RulesActionBase not found.".  
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

