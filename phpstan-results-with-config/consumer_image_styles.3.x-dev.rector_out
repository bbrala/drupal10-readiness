modules/contrib/consumer_image_styles/consumer_image_styles.module
modules/contrib/consumer_image_styles/src/ConsumerImageStylesServiceProvider.php
modules/contrib/consumer_image_styles/src/ImageStylesProvider.php
modules/contrib/consumer_image_styles/src/Normalizer/LinkCollectionNormalizer.php
modules/contrib/consumer_image_styles/src/Plugin/jsonapi/FieldEnhancer/ImageStyles.php
modules/contrib/consumer_image_styles/tests/src/Functional/ConsumerImageSylesFunctionalTest.php

4 files with changes
====================

1) modules/contrib/consumer_image_styles/tests/src/Functional/ConsumerImageSylesFunctionalTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\consumer_image_styles\Functional;

+use Drupal\user\Entity\User;
+use Drupal\node\Entity\NodeType;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Serialization\Json;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\consumer_image_styles\ImageStylesProvider;
@@ @@
   ];

   /**
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
   /**
    * The content type to attach the fields to test.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $contentType;

   /**
-   * @var \Drupal\node\Entity\Node[]
+   * @var Node[]
    */
   protected $nodes = [];

   /**
-   * @var \Drupal\file\Entity\File[]
+   * @var File[]
    */
   protected $files = [];

   /**
-   * @var \Drupal\consumers\Entity\Consumer
+   * @var Consumer
    */
   protected $consumer;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->contentType = $this->createContentType();
     $this->imageFieldName = $this->getRandomGenerator()->word(8);
@@ @@
    * @param int $num_nodes
    *   Number of articles to create.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createDefaultContent($num_nodes) {
     $random = $this->getRandomGenerator();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/consumer_image_styles/src/Plugin/jsonapi/FieldEnhancer/ImageStyles.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\consumer_image_styles\Plugin\jsonapi\FieldEnhancer;

+use Drupal\file\Entity\File;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\consumer_image_styles\ImageStylesProvider;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 class ImageStyles extends ResourceFieldEnhancerBase implements ContainerFactoryPluginInterface {

   /**
-   * @var \Drupal\consumer_image_styles\ImageStylesProvider
+   * @var ImageStylesProvider
    */
   protected $imageStylesProvider;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
     if (!$entity || !$this->imageStylesProvider->entityIsImage($entity)) {
       return $data;
     }
-    /** @var \Drupal\file\Entity\File $entity */
+    /** @var File $entity */
     // If the entity is not viewable.
     $access = $entity->access('view', NULL, TRUE);
     if (!$access->isAllowed()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/consumer_image_styles/src/Normalizer/LinkCollectionNormalizer.php:22

    ---------- begin diff ----------
@@ @@
 class LinkCollectionNormalizer implements NormalizerInterface {

   /**
-   * @var \Drupal\consumers\Negotiator
+   * @var Negotiator
    */
   protected $consumerNegotiator;

   /**
-   * @var \Drupal\consumer_image_styles\ImageStylesProvider
+   * @var ImageStylesProvider
    */
   protected $imageStylesProvider;

   /**
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

   /**
-   * @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface
+   * @var NormalizerInterface
    */
   protected $inner;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Constructs a LinkCollectionNormalizer object.
    *
-   * @param \Symfony\Component\Serializer\Normalizer\NormalizerInterface $inner
+   * @param NormalizerInterface $inner
    *   The decorated service.
-   * @param \Drupal\consumers\Negotiator $consumer_negotiator
+   * @param Negotiator $consumer_negotiator
    *   The consumer negotiator.
    * @param \Drupal\consumer_image_styles\ImageStylesProvider
    *   Image styles utility.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(NormalizerInterface $inner, Negotiator $consumer_negotiator, ImageStylesProvider $imageStylesProvider, ImageFactory $image_factory, RequestStack $request_stack) {
@@ @@
   }

   /**
-   * @param \Drupal\jsonapi\JsonApiResource\ResourceObject $resource_object
+   * @param ResourceObject $resource_object
    * @param \Drupal\consumers\Entity\Consumer
    *
-   * @return \Drupal\jsonapi\JsonApiResource\LinkCollection
+   * @return LinkCollection
    *   The variant links.
    */
   protected function buildVariantLinks(ResourceObject $resource_object, Consumer $consumer) {
@@ @@
     // Generate derivatives only for the found ones.
     $image_styles = $this->imageStylesProvider->loadStyles($consumer);
     return array_reduce($image_styles, function (LinkCollection $decorated, ImageStyleInterface $image_style) use ($uri) {
-      $variant_link = new Link(CacheableMetadata::createFromObject($image_style), Url::fromUri(file_create_url($image_style->buildUrl($uri))), [ImageStylesProvider::DERIVATIVE_LINK_REL]);
+      $variant_link = new Link(CacheableMetadata::createFromObject($image_style), \Drupal::service('file_url_generator')->generate($image_style->buildUrl($uri)), [ImageStylesProvider::DERIVATIVE_LINK_REL]);
       return $decorated->withLink($image_style->id(), $variant_link);
     }, (new LinkCollection([]))->withContext($resource_object));
   }
@@ @@
   /**
    * Whether this decorator applies to the current data.
    *
-   * @param \Drupal\jsonapi\JsonApiResource\LinkCollection $link_collection
+   * @param LinkCollection $link_collection
    *   The link collection to be normalized.
    *
    * @return bool
@@ @@
   /**
    * Gets the current consumer.
    *
-   * @return \Drupal\consumers\Entity\Consumer
+   * @return Consumer
    *   The current consumer or NULL if one cannot be negotiated.
    */
   protected function getConsumer() {
@@ @@
   /**
    * Adds the derivative link relation type to the normalized link collection.
    *
-   * @param \Drupal\jsonapi\Normalizer\Value\CacheableNormalization $cacheable_normalization
+   * @param CacheableNormalization $cacheable_normalization
    *   The cacheable normalization to which link relations need to be added.
-   * @param \Drupal\jsonapi\JsonApiResource\LinkCollection $link_collection
+   * @param LinkCollection $link_collection
    *   The un-normalized link collection.
    *
-   * @return \Drupal\jsonapi\Normalizer\Value\CacheableNormalization
+   * @return CacheableNormalization
    *   The links normalization with meta.rel added.
    */
   protected static function addLinkRels(CacheableNormalization $cacheable_normalization, LinkCollection $link_collection) {
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/consumer_image_styles/src/ImageStylesProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\consumer_image_styles;

+use Drupal\image\Entity\ImageStyle;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\consumers\Entity\Consumer;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   private $imageFactory;

@@ @@
   /**
    * Load the image styles for a given consumer.
    *
-   * @param \Drupal\consumers\Entity\Consumer $consumer
+   * @param Consumer $consumer
    *   Consumer entity to load image styles for.
    *
-   * @return \Drupal\image\Entity\ImageStyle[]
+   * @return ImageStyle[]
    *   List of image styles keyed by image style id.
    */
   public function loadStyles(Consumer $consumer) {
@@ @@
    *
    * @param string $uri
    *   The file URI.
-   * @param \Drupal\image\ImageStyleInterface $image_style
+   * @param ImageStyleInterface $image_style
    *   The image style to apply.
    *
    * @return array
@@ @@
    */
   public function buildDerivativeLink($uri, ImageStyleInterface $image_style) {
     return [
-      'href' => file_create_url($image_style->buildUrl($uri)),
+      'href' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_style->buildUrl($uri)),
       'meta' => [
         'rel' => [static::DERIVATIVE_LINK_REL],
       ],
@@ @@
   /**
    * Checks if an entity is an image.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 4 files have been changed by Rector                                       

