diff --git a/composer.json b/composer.json
index 19a5501..0b05c9c 100644
--- a/composer.json
+++ b/composer.json
@@ -6,7 +6,7 @@
     "homepage": "https://www.drupal.org/project/purge_ajax_processor",
     "require": {
         "php": ">=7.2",
-        "drupal/core": "^8.8.6 || ^9",
-        "drupal/purge": "^3.0.0"
+        "drupal/purge": "^3.0.0",
+        "drupal/core": "^9.3 || ^10"
     }
 }
diff --git a/purge_ajax_processor.info.yml b/purge_ajax_processor.info.yml
index 32cd112..e9078fd 100644
--- a/purge_ajax_processor.info.yml
+++ b/purge_ajax_processor.info.yml
@@ -2,7 +2,7 @@ name: 'Purge Ajax processor'
 type: module
 description: 'Sends an Ajax request on every page load to process the purge queue.'
 package: "Purge - processors"
-core_version_requirement: '^8.8.6 || ^9.0.0'
+core_version_requirement: ^9.3 || ^10
 dependencies:
   - purge:purge
   - purge:purge_ui
diff --git a/purge_ajax_processor.module b/purge_ajax_processor.module
index d336416..683a8ab 100644
--- a/purge_ajax_processor.module
+++ b/purge_ajax_processor.module
@@ -25,7 +25,7 @@ function purge_ajax_processor_help($route_name, RouteMatchInterface $route_match
   switch ($route_name) {
     // Main module help for the purge_ajax_processor module.
     case 'help.page.purge_ajax_processor':
-      $output = '<pre>' . file_get_contents(drupal_get_path('module', 'purge_ajax_processor') . '/README.md') . '</pre>';
+      $output = '<pre>' . file_get_contents(\Drupal::service('extension.list.module')->getPath('purge_ajax_processor') . '/README.md') . '</pre>';
       return $output;
 
     default:
diff --git a/src/Controller/AjaxProcessor.php b/src/Controller/AjaxProcessor.php
index f3faf5a..0b2a2f0 100644
--- a/src/Controller/AjaxProcessor.php
+++ b/src/Controller/AjaxProcessor.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\purge_ajax_processor\Controller;
 
+use Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface;
+use Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface;
+use Drupal\Core\Config\Config;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Cache\CacheableJsonResponse;
@@ -21,7 +24,7 @@ class AjaxProcessor extends ControllerBase {
   /**
    * The container object.
    *
-   * @var Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
@@ -35,21 +38,21 @@ class AjaxProcessor extends ControllerBase {
   /**
    * The purge executive service, which wipes content from external caches.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;
 
   /**
    * The queue in which to store, claim and release invalidation objects from.
    *
-   * @var \Drupal\purge\Plugin\Purge\Queue\QueueServiceInterface
+   * @var QueueServiceInterface
    */
   protected $purgeQueue;
 
   /**
    * Processor config.
    *
-   * @var \Drupal\Core\Config\Config|null
+   * @var Config|null
    */
   protected $processorConfig = NULL;
 
diff --git a/src/EventSubscriber/CacheSubscriber.php b/src/EventSubscriber/CacheSubscriber.php
index 794a747..ae5809c 100644
--- a/src/EventSubscriber/CacheSubscriber.php
+++ b/src/EventSubscriber/CacheSubscriber.php
@@ -2,8 +2,9 @@
 
 namespace Drupal\purge_ajax_processor\EventSubscriber;
 
+use Drupal\Core\Config\Config;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\purge_ajax_processor\Form\ConfigurationForm;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ -16,14 +17,14 @@ class CacheSubscriber implements EventSubscriberInterface {
   /**
    * A config object for the purge_ajax_processor config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $processorConfig;
 
   /**
    * Constructor for CacheSubscriber.
    *
-   * @param Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory object.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ -33,10 +34,10 @@ class CacheSubscriber implements EventSubscriberInterface {
   /**
    * Setup the cache control.
    *
-   * @param Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   Event object.
    */
-  public function cacheControl(FilterResponseEvent $event) {
+  public function cacheControl(ResponseEvent $event) {
     $request = $event->getRequest();
 
     // If route has proxy object then change the response.
