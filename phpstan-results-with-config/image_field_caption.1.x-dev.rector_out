modules/contrib/image_field_caption/image_field_caption.install
modules/contrib/image_field_caption/image_field_caption.module
modules/contrib/image_field_caption/src/ImageCaptionItem.php
modules/contrib/image_field_caption/src/ImageCaptionStorage.php
modules/contrib/image_field_caption/src/Plugin/Field/FieldFormatter/ImageCaptionFormatter.php

2 files with changes
====================

1) modules/contrib/image_field_caption/src/ImageCaptionStorage.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * AbstractService constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The Cache Backend.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The Database.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/image_field_caption/image_field_caption.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field\Entity\FieldConfig;
+use Drupal\Core\Field\FieldItemList;
 /**
  * @file
  * Provides a caption textarea for image fields.
@@ @@
  * Implements hook_field_widget_form_alter().
  */
 function image_field_caption_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
-  /** @var \Drupal\field\Entity\FieldConfig $field */
+  /** @var FieldConfig $field */
   $field = $context['items']->getFieldDefinition();
   // If the current field is an image field.
   if ($field->getType() == 'image') {
@@ @@
       if (in_array($entity->bundle(), $imageCaption->list('bundle'))) {
         $needToSave = FALSE;

-        /** @var \Drupal\Core\Field\FieldItemList $field */
+        /** @var FieldItemList $field */
         foreach ($entity->getFields() as $fieldName => $field) {
           $values = $entity->get($fieldName)->getValue();
           foreach ($values as $delta => $value) {
@@ @@
 /**
  * Determines the image fields on an entity.
  *
- * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+ * @param FieldableEntityInterface $entity
  *   An entity whose fields to analyze.
  *
  * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 2 files have been changed by Rector                                       

