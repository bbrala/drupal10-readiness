modules/contrib/permanent_entities/permanent_entities.drush.inc
modules/contrib/permanent_entities/permanent_entities.module
modules/contrib/permanent_entities/permanent_entities.page.inc
modules/contrib/permanent_entities/src/Commands/PermanentEntitiesCommands.php
modules/contrib/permanent_entities/src/Controller/PermanentEntityController.php
modules/contrib/permanent_entities/src/Entity/PermanentEntity.php
modules/contrib/permanent_entities/src/Entity/PermanentEntityInterface.php
modules/contrib/permanent_entities/src/Entity/PermanentEntityType.php
modules/contrib/permanent_entities/src/Entity/PermanentEntityTypeInterface.php
modules/contrib/permanent_entities/src/Entity/PermanentEntityViewsData.php
modules/contrib/permanent_entities/src/EventSubscriber/TypeViewerSubscriber.php
modules/contrib/permanent_entities/src/Form/PermanentEntityForm.php
modules/contrib/permanent_entities/src/Form/PermanentEntityRevisionDeleteForm.php
modules/contrib/permanent_entities/src/Form/PermanentEntityRevisionRevertForm.php
modules/contrib/permanent_entities/src/Form/PermanentEntityRevisionRevertTranslationForm.php
modules/contrib/permanent_entities/src/Form/PermanentEntitySettingsForm.php
modules/contrib/permanent_entities/src/Form/PermanentEntityTypeDeleteForm.php
modules/contrib/permanent_entities/src/Form/PermanentEntityTypeForm.php
modules/contrib/permanent_entities/src/PermanentEntityAccessControlHandler.php
modules/contrib/permanent_entities/src/PermanentEntityHtmlRouteProvider.php
modules/contrib/permanent_entities/src/PermanentEntityListBuilder.php
modules/contrib/permanent_entities/src/PermanentEntityPermissions.php
modules/contrib/permanent_entities/src/PermanentEntityStorage.php
modules/contrib/permanent_entities/src/PermanentEntityStorageInterface.php
modules/contrib/permanent_entities/src/PermanentEntityTranslationHandler.php
modules/contrib/permanent_entities/src/PermanentEntityTypeAccessControlHandler.php
modules/contrib/permanent_entities/src/PermanentEntityTypeHtmlRouteProvider.php
modules/contrib/permanent_entities/src/PermanentEntityTypeListBuilder.php
modules/contrib/permanent_entities/src/Plugin/views/argument_default/PermanentEntity.php
modules/contrib/permanent_entities/tests/src/Functional/CrudTest.php
modules/contrib/permanent_entities/tests/src/Kernel/CrudTest.php

15 files with changes
=====================

1) modules/contrib/permanent_entities/tests/src/Kernel/CrudTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
     $this->installEntitySchema('permanent_entity');
@@ @@

   /**
    * Test limits of labels.
+   * @doesNotPerformAssertions
    */
   public function testLongName() {
     PermanentEntity::create([
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/permanent_entities/tests/src/Functional/CrudTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\permanent_entities\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\permanent_entities\Entity\PermanentEntity;
@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->admin = $this->drupalCreateUser([], 'superadmin', TRUE);
     $this->drupalLogin($this->admin);
@@ @@
   public function testNoAddOrDelete() {
     $this->drupalGet(Url::fromRoute('entity.permanent_entity.collection'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertRaw('Permanent Entities');
+    $this->assertSession()->responseContains('Permanent Entities');
     $assert_session = $this->assertSession();
     $assert_session->elementNotExists('css', '.button--primary');
     // Nothing for edit or delete yet.
@@ @@
     // Since full view mode is enabled, this should return code 200.
     $this->drupalGet('/permanent_entity/jupiter');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertRaw('Jupiter');
-    $this->assertRaw('permanent-entity');
-    $this->assertRaw('permanent-entity--view-mode-full');
-    $this->assertRaw('permanent-entity--type-planet');
-    $this->assertRaw('permanent-entity--id-jupiter');
+    $this->assertSession()->responseContains('Jupiter');
+    $this->assertSession()->responseContains('permanent-entity');
+    $this->assertSession()->responseContains('permanent-entity--view-mode-full');
+    $this->assertSession()->responseContains('permanent-entity--type-planet');
+    $this->assertSession()->responseContains('permanent-entity--id-jupiter');

     // Now disable the full view mode from the bundle settings.
     $entity_type = PermanentEntityType::load('planet');
@@ @@

     $this->drupalGet(Url::fromRoute('entity.permanent_entity.collection'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertRaw('Jupiter');
+    $this->assertSession()->responseContains('Jupiter');
     $assert_session = $this->assertSession();
     $assert_session->elementNotExists('css', '.button--primary');
     $assert_session->elementNotExists('css', '.dropbutton .delete');
@@ @@
     );

     $this->assertSession()->statusCodeEquals(200);
-    $this->assertRaw('Jupiter');
+    $this->assertSession()->responseContains('Jupiter');
     $save_button = $this->xpath('//input[@value="Save"]');
     $this->assertCount(1, $save_button, 'The Save button exists.');
-    $this->assertNoRaw('delete');
+    $this->assertSession()->responseNotContains('delete');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertNoRawRector
 * AssertRawRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/permanent_entities/src/Plugin/views/argument_default/PermanentEntity.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/permanent_entities/src/PermanentEntityTypeAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\permanent_entities;

+use Drupal\permanent_entities\Entity\PermanentEntityTypeInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\permanent_entities\Entity\PermanentEntityTypeInterface $entity */
+    /** @var PermanentEntityTypeInterface $entity */
     if ($operation === 'delete') {
       $query = \Drupal::entityQuery('permanent_entity');
       $ids = $query->condition('type', $entity->id())->execute();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/permanent_entities/src/PermanentEntityStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Permanent Entity revision IDs for a specific Permanent Entity.
    *
-   * @param \Drupal\permanent_entities\Entity\PermanentEntityInterface $entity
+   * @param PermanentEntityInterface $entity
    *   The Permanent Entity entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Permanent Entity author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\permanent_entities\Entity\PermanentEntityInterface $entity
+   * @param PermanentEntityInterface $entity
    *   The Permanent Entity entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Permanent Entity with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/permanent_entities/src/PermanentEntityPermissions.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a TaxonomyPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * Builds a standard list of permanent_entity permissions for a given type.
    *
-   * @param \Drupal\permanent_entities\Entity\PermanentEntityType $permanent_entity_type
+   * @param PermanentEntityType $permanent_entity_type
    *   The permanent_entity_type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/permanent_entities/src/PermanentEntityHtmlRouteProvider.php:51

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/permanent_entities/src/PermanentEntityAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\permanent_entities;

+use Drupal\permanent_entities\Entity\PermanentEntityInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\permanent_entities\Entity\PermanentEntityInterface $entity */
+    /** @var PermanentEntityInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/permanent_entities/src/Form/PermanentEntitySettingsForm.php:26

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/permanent_entities/src/Form/PermanentEntityRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new PermanentEntityRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Permanent Entity storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(PermanentEntityInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\permanent_entities\Entity\PermanentEntityInterface $default_revision */
+    /** @var PermanentEntityInterface $default_revision */
     $latest_revision = $this->PermanentEntityStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/permanent_entities/src/Form/PermanentEntityRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Permanent Entity revision.
    *
-   * @var \Drupal\permanent_entities\Entity\PermanentEntityInterface
+   * @var PermanentEntityInterface
    */
   protected $revision;

@@ @@
   /**
    * The Permanent Entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $permanentEntityStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new PermanentEntityRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Permanent Entity storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\permanent_entities\Entity\PermanentEntityInterface $revision
+   * @param PermanentEntityInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\permanent_entities\Entity\PermanentEntityInterface
+   * @return PermanentEntityInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(PermanentEntityInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/permanent_entities/src/Form/PermanentEntityRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\permanent_entities\Form;

+use Drupal\permanent_entities\Entity\PermanentEntityInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The Permanent Entity revision.
    *
-   * @var \Drupal\permanent_entities\Entity\PermanentEntityInterface
+   * @var PermanentEntityInterface
    */
   protected $revision;

@@ @@
   /**
    * The Permanent Entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $permanentEntityStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new PermanentEntityRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/permanent_entities/src/EventSubscriber/TypeViewerSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\permanent_entities\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Routing\CurrentRouteMatch;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\permanent_entities\Entity\PermanentEntityType;
@@ @@
   /**
    * Drupal\Core\Routing\CurrentRouteMatch definition.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;

@@ @@
   /**
    * This method is called when the KernelEvents::REQUEST is dispatched.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The dispatched event.
    */
   public function onRequest(Event $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/permanent_entities/src/Entity/PermanentEntityInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\permanent_entities\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the Permanent Entity revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/permanent_entities/src/Controller/PermanentEntityController.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * Generates an overview table of older revisions of a Permanent Entity .
    *
-   * @param \Drupal\permanent_entities\Entity\PermanentEntityInterface $permanent_entity
+   * @param PermanentEntityInterface $permanent_entity
    *   A Permanent Entity  object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 15 files have been changed by Rector                                      

