diff --git a/src/Plugin/Field/FieldWidget/EntityGroupFieldSelectWidget.php b/src/Plugin/Field/FieldWidget/EntityGroupFieldSelectWidget.php
index 8c55595..d020094 100644
--- a/src/Plugin/Field/FieldWidget/EntityGroupFieldSelectWidget.php
+++ b/src/Plugin/Field/FieldWidget/EntityGroupFieldSelectWidget.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\entitygroupfield\Plugin\Field\FieldWidget;
 
+use Drupal\group\Entity\GroupInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\group\Entity\Group;
 /**
  * Plugin implementation of the 'entitygroupfield_select_widget' widget.
  *
@@ -43,7 +46,7 @@ class EntityGroupFieldSelectWidget extends EntityGroupFieldWidgetBase {
    * @param string $plugin_id
    *   The plugin ID to filter the groups.
    *
-   * @return \Drupal\group\Entity\GroupInterface[]
+   * @return GroupInterface[]
    *   The list of group entities.
    */
   protected function getPluginGroups($plugin_id) {
@@ -72,7 +75,7 @@ class EntityGroupFieldSelectWidget extends EntityGroupFieldWidgetBase {
 
     $allowed_groups = [];
     $all_restricted = TRUE;
-    /** @var \Drupal\Core\Session\AccountInterface $account */
+    /** @var AccountInterface $account */
     $account = $this->currentUser->getAccount();
 
     $excluded_groups = [];
@@ -88,7 +91,7 @@ class EntityGroupFieldSelectWidget extends EntityGroupFieldWidgetBase {
       }
     }
 
-    /** @var \Drupal\group\Entity\Group $group */
+    /** @var Group $group */
     foreach ($groups as $group) {
       if (in_array($group->id(), $excluded_groups)) {
         continue;
diff --git a/src/Plugin/Field/FieldWidget/EntityGroupFieldWidgetBase.php b/src/Plugin/Field/FieldWidget/EntityGroupFieldWidgetBase.php
index efac04d..98d83d9 100644
--- a/src/Plugin/Field/FieldWidget/EntityGroupFieldWidgetBase.php
+++ b/src/Plugin/Field/FieldWidget/EntityGroupFieldWidgetBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\entitygroupfield\Plugin\Field\FieldWidget;
 
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
@@ -25,28 +26,28 @@ abstract class EntityGroupFieldWidgetBase extends WidgetBase implements Containe
   /**
    * The Group Content Plugin Manager.
    *
-   * @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface
+   * @var GroupContentEnablerManagerInterface
    */
   protected $groupContentPluginManager;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepository
+   * @var EntityRepository
    */
   protected $entityRepository;
 
@@ -721,7 +722,7 @@ abstract class EntityGroupFieldWidgetBase extends WidgetBase implements Containe
     if (isset($widget_state['gcontent'][$delta]['entity'])) {
       $entity = $widget_state['gcontent'][$delta]['entity'];
 
-      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $display */
+      /** @var EntityFormDisplayInterface $display */
       $display = $widget_state['gcontent'][$delta]['display'];
 
       if ($widget_state['gcontent'][$delta]['mode'] == 'edit') {
@@ -740,7 +741,7 @@ abstract class EntityGroupFieldWidgetBase extends WidgetBase implements Containe
    * @param array $elements
    *   An associative array containing the substructure of the form to be
    *   validated in this call.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $form
    *   The complete form array.
@@ -944,7 +945,7 @@ abstract class EntityGroupFieldWidgetBase extends WidgetBase implements Containe
         && $widget_state['gcontent'][$item['_original_delta']]['mode'] != 'remove') {
         $gcontent_entity = $widget_state['gcontent'][$item['_original_delta']]['entity'];
 
-        /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $display */
+        /** @var EntityFormDisplayInterface $display */
         $display = $widget_state['gcontent'][$item['_original_delta']]['display'];
         if ($widget_state['gcontent'][$item['_original_delta']]['mode'] == 'edit') {
           $display->extractFormValues($gcontent_entity, $element[$item['_original_delta']]['subform'], $form_state);
diff --git a/tests/src/Functional/EntityGroupFieldFormatterTest.php b/tests/src/Functional/EntityGroupFieldFormatterTest.php
index 91a0182..69f5e95 100644
--- a/tests/src/Functional/EntityGroupFieldFormatterTest.php
+++ b/tests/src/Functional/EntityGroupFieldFormatterTest.php
@@ -38,7 +38,7 @@ class EntityGroupFieldFormatterTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->drupalCreateUser([
       'administer content types',
@@ -77,7 +77,10 @@ class EntityGroupFieldFormatterTest extends BrowserTestBase {
     $this->drupalGet("node/" . $node->id());
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->linkNotExists('group-A1');
-    $this->assertNoText('group-A1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('group-A1');
 
     // Now configure the formatter to show the group (as a link) and try again.
     $this->configureViewDisplay([
@@ -106,7 +109,10 @@ class EntityGroupFieldFormatterTest extends BrowserTestBase {
     $this->assertSession()->statusCodeEquals(200);
     // Make sure there's no link, but the label should still be there.
     $this->assertSession()->linkNotExists('group-A1');
-    $this->assertText('group-A1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('group-A1');
 
     // Now try the ID formatter.
     $this->configureViewDisplay([
diff --git a/tests/src/FunctionalJavascript/EntityGroupFieldWidgetTest.php b/tests/src/FunctionalJavascript/EntityGroupFieldWidgetTest.php
index edbd9f8..388fe3e 100644
--- a/tests/src/FunctionalJavascript/EntityGroupFieldWidgetTest.php
+++ b/tests/src/FunctionalJavascript/EntityGroupFieldWidgetTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entitygroupfield\FunctionalJavascript;
 
+use Drupal\user\UserInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\Tests\entitygroupfield\Traits\GroupCreationTrait;
 use Drupal\Tests\entitygroupfield\Traits\TestGroupsTrait;
@@ -37,21 +38,21 @@ class EntityGroupFieldWidgetTest extends WebDriverTestBase {
   /**
    * Regular authenticated User for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * Regular authenticated User for tests.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create node types.
diff --git a/tests/src/Kernel/EntityGroupFieldKernelTestBase.php b/tests/src/Kernel/EntityGroupFieldKernelTestBase.php
index 2bf85dd..7525322 100644
--- a/tests/src/Kernel/EntityGroupFieldKernelTestBase.php
+++ b/tests/src/Kernel/EntityGroupFieldKernelTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\entitygroupfield\Kernel;
 
+use Drupal\group\Plugin\GroupContentEnablerManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\user\Traits\UserCreationTrait;
 use Drupal\Tests\entitygroupfield\Traits\GroupCreationTrait;
@@ -31,14 +32,14 @@ abstract class EntityGroupFieldKernelTestBase extends KernelTestBase {
   /**
    * The content enabler plugin manager.
    *
-   * @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface
+   * @var GroupContentEnablerManagerInterface
    */
   protected $groupContentPluginManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installSchema('system', ['sequences', 'key_value_expire']);
diff --git a/tests/src/Kernel/GroupAutocompleteFormElementTest.php b/tests/src/Kernel/GroupAutocompleteFormElementTest.php
index 8e4d7cc..0355a5a 100644
--- a/tests/src/Kernel/GroupAutocompleteFormElementTest.php
+++ b/tests/src/Kernel/GroupAutocompleteFormElementTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entitygroupfield\Kernel;
 
+use Drupal\group\Entity\GroupInterface;
+use Drupal\Core\Form\FormBuilder;
 use Drupal\Core\Form\FormInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Form\FormStateInterface;
@@ -16,21 +18,21 @@ class GroupAutocompleteFormElementTest extends EntityGroupFieldKernelTestBase im
   /**
    * Test groups.
    *
-   * @var \Drupal\group\Entity\GroupInterface[]
+   * @var GroupInterface[]
    */
   protected $testGroups;
 
   /**
    * Form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->formBuilder = $this->container->get('form_builder');
   }
diff --git a/tests/src/Traits/GroupCreationTrait.php b/tests/src/Traits/GroupCreationTrait.php
index ee3c708..e8377e7 100644
--- a/tests/src/Traits/GroupCreationTrait.php
+++ b/tests/src/Traits/GroupCreationTrait.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\entitygroupfield\Traits;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\group\Entity\Group;
+use Drupal\group\Entity\GroupType;
 /**
  * Provides methods to create groups and group types.
  *
@@ -12,7 +15,7 @@ trait GroupCreationTrait {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -22,7 +25,7 @@ trait GroupCreationTrait {
    * @param array $values
    *   (optional) The values used to create the entity.
    *
-   * @return \Drupal\group\Entity\Group
+   * @return Group
    *   The created group entity.
    */
   protected function createGroup(array $values = []) {
@@ -42,7 +45,7 @@ trait GroupCreationTrait {
    * @param array $values
    *   (optional) The values used to create the entity.
    *
-   * @return \Drupal\group\Entity\GroupType
+   * @return GroupType
    *   The created group type entity.
    */
   protected function createGroupType(array $values = []) {
@@ -58,7 +61,7 @@ trait GroupCreationTrait {
   /**
    * Returns the entity type manager service to use.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity type manager service.
    */
   protected function getEntityTypeManager() {
diff --git a/tests/src/Traits/TestGroupsTrait.php b/tests/src/Traits/TestGroupsTrait.php
index 9d1a937..faf9ebc 100644
--- a/tests/src/Traits/TestGroupsTrait.php
+++ b/tests/src/Traits/TestGroupsTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entitygroupfield\Traits;
 
+use Drupal\group\Entity\GroupTypeInterface;
+use Drupal\group\Entity\GroupInterface;
 /**
  * Provides group types and group entities for use in test classes.
  *
@@ -14,56 +16,56 @@ trait TestGroupsTrait {
   /**
    * A dummy group type with ID 'a'.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeA;
 
   /**
    * A dummy group type with ID 'b'.
    *
-   * @var \Drupal\group\Entity\GroupTypeInterface
+   * @var GroupTypeInterface
    */
   protected $groupTypeB;
 
   /**
    * Test group A1, of type 'a'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupA1;
 
   /**
    * Test group A2, of type 'a'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupA2;
 
   /**
    * Test group A3, of type 'a'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupA3;
 
   /**
    * Test group B1, of type 'b'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupB1;
 
   /**
    * Test group B2, of type 'b'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupB2;
 
   /**
    * Test group B3, of type 'b'.
    *
-   * @var \Drupal\group\Entity\GroupInterface
+   * @var GroupInterface
    */
   protected $groupB3;
 
