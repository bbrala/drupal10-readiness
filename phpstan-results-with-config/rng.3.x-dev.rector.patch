diff --git a/rng.field.defaults.inc b/rng.field.defaults.inc
index 2756982..3c03127 100644
--- a/rng.field.defaults.inc
+++ b/rng.field.defaults.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\field\FieldStorageConfigInterface;
+use Drupal\Core\Field\FieldConfigInterface;
 /**
  * @file
  * Creates field config if they do not exist.
@@ -21,7 +23,7 @@ use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
  * @param string $entity_type
  *   The entity type for which to add the field storage.
  *
- * @return \Drupal\field\FieldStorageConfigInterface|null
+ * @return FieldStorageConfigInterface|null
  *   The created field storage, if a definition was found for the given field.
  *   Null otherwise.
  */
@@ -192,7 +194,7 @@ function rng_event_field_config_definition($field_name) {
  * @param string $bundle
  *   (optional) The entity type's bundle to add the field to.
  *
- * @return \Drupal\Core\Field\FieldConfigInterface
+ * @return FieldConfigInterface
  *   The created field.
  */
 function rng_add_event_field_config($field_name, $entity_type, $bundle = NULL) {
@@ -218,12 +220,12 @@ function rng_add_event_field_config($field_name, $entity_type, $bundle = NULL) {
 /**
  * Adds field form defaults to a display entity.
  *
- * @param \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display
+ * @param EntityFormDisplayInterface $form_display
  *   A form display.
  * @param string $field_name
  *   The field name.
  *
- * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+ * @return EntityFormDisplayInterface
  *   The modified form display.
  */
 function rng_add_event_form_display_defaults(EntityFormDisplayInterface $form_display, $field_name = '') {
diff --git a/rng.install b/rng.install
index 7cf3304..63fd2f9 100644
--- a/rng.install
+++ b/rng.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 /**
  * @file
  * Contains install and update functions for RNG.
@@ -142,7 +143,7 @@ function rng_update_8002() {
  * Update event types with new registrant and people type configuration.
  */
 function rng_update_8003() {
-  /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info */
+  /** @var EntityTypeBundleInfoInterface $bundle_info */
   $bundle_info = \Drupal::service('entity_type.bundle.info');
   $config_factory = \Drupal::configFactory();
   $default_registrant_type_id = 'registrant';
diff --git a/rng_debug/src/Controller/DebugController.php b/rng_debug/src/Controller/DebugController.php
index fa3f166..e7a70d6 100644
--- a/rng_debug/src/Controller/DebugController.php
+++ b/rng_debug/src/Controller/DebugController.php
@@ -14,7 +14,7 @@ class DebugController extends ControllerBase implements ContainerInjectionInterf
   /**
    * Provides a list of rng rules for an event.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $rng_event
+   * @param EntityInterface $rng_event
    *   The RNG event.
    *
    * @return array
diff --git a/rng_debug/src/Plugin/Derivative/LocalTasks.php b/rng_debug/src/Plugin/Derivative/LocalTasks.php
index 8cf7d45..f9beb18 100644
--- a/rng_debug/src/Plugin/Derivative/LocalTasks.php
+++ b/rng_debug/src/Plugin/Derivative/LocalTasks.php
@@ -16,16 +16,16 @@ class LocalTasks extends DeriverBase implements ContainerDeriverInterface {
   /**
    * The RNG event manager.
    *
-   * @var \Drupal\rng\EventManagerInterface
+   * @var EventManagerInterface
    */
   protected $eventManager;
 
   /**
    * Constructs a LocalTasks object.
    *
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\rng\EventManagerInterface $event_manager
+   * @param EventManagerInterface $event_manager
    *   The RNG event manager.
    */
   public function __construct(RouteProviderInterface $route_provider, EventManagerInterface $event_manager) {
diff --git a/rng_debug/src/Routing/RouteSubscriber.php b/rng_debug/src/Routing/RouteSubscriber.php
index a738c36..a4dfebb 100644
--- a/rng_debug/src/Routing/RouteSubscriber.php
+++ b/rng_debug/src/Routing/RouteSubscriber.php
@@ -16,23 +16,23 @@ class RouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The RNG event manager.
    *
-   * @var \Drupal\rng\EventManagerInterface
+   * @var EventManagerInterface
    */
   protected $eventManager;
 
   /**
    * Constructs a RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\rng\EventManagerInterface $event_manager
+   * @param EventManagerInterface $event_manager
    *   The RNG event manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EventManagerInterface $event_manager) {
diff --git a/rng_easy_email/src/EventSubscriber/RegistrationSubscriber.php b/rng_easy_email/src/EventSubscriber/RegistrationSubscriber.php
index b094675..40c741e 100644
--- a/rng_easy_email/src/EventSubscriber/RegistrationSubscriber.php
+++ b/rng_easy_email/src/EventSubscriber/RegistrationSubscriber.php
@@ -16,21 +16,21 @@ class RegistrationSubscriber implements EventSubscriberInterface {
   /**
    * Drupal\rng\EventManagerInterface definition.
    *
-   * @var \Drupal\rng\EventManagerInterface
+   * @var EventManagerInterface
    */
   protected $rngEventManager;
 
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Dispatch Service.
    *
-   * @var \Drupal\rng_easy_email\DispatchService
+   * @var DispatchService
    */
   protected $dispatchService;
 
@@ -60,7 +60,7 @@ class RegistrationSubscriber implements EventSubscriberInterface {
    * - rng.registration.insert;
    * - rng.registration.registration.
    *
-   * @param \Drupal\rng\Event\RegistrationEvent $event
+   * @param RegistrationEvent $event
    *   The dispatched event.
    */
   public function registrationSend(RegistrationEvent $event) {
diff --git a/rng_views/rng_views.module b/rng_views/rng_views.module
index 7d74bc3..66fde98 100644
--- a/rng_views/rng_views.module
+++ b/rng_views/rng_views.module
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\Core\Entity\EntityFormInterface;
+use Drupal\rng\Entity\RngEventType;
+use Drupal\rng\EventManager;
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Entity\EntityInterface;
 /**
  * @file
  */
@@ -17,7 +22,7 @@ use Drupal\views\ViewExecutable;
  * Rng_event_type_edit_form.
  */
 function rng_views_form_rng_event_type_form_alter(&$form, FormStateInterface &$form_state) {
-  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
+  /** @var EntityFormInterface $form_object */
   $form_object = $form_state->getFormObject();
   // This hook users BASE_ID, so this hook will be called for
   // EventTypeAccessDefaultsForm.
@@ -27,7 +32,7 @@ function rng_views_form_rng_event_type_form_alter(&$form, FormStateInterface &$f
 
   $form['actions']['submit']['#submit'][] = 'rng_views_form_rng_event_type_form_alter_submit';
 
-  /** @var \Drupal\rng\Entity\RngEventType $event_type */
+  /** @var RngEventType $event_type */
   $event_type = $form_object->getEntity();
   $entity_type = NULL;
   if (!empty($event_type->getEventEntityTypeId())) {
@@ -44,7 +49,7 @@ function rng_views_form_rng_event_type_form_alter(&$form, FormStateInterface &$f
 
   $title = t('Create registration list');
   if ($entity_type && $view = View::load('rng_registrations_' . $entity_type->id())) {
-    /** @var \Drupal\views\Entity\View $view */
+    /** @var View $view */
     if ($view->hasLinkTemplate('edit-form')) {
       $title = t('Create registration list (<a href="@view_link">view already exists</a>)', [
         '@view_link' => $view->toUrl()->toString(),
@@ -91,7 +96,7 @@ function rng_views_form_rng_event_type_form_alter_submit($form, FormStateInterfa
  * YAML file contains a premade registration view with relationship to nodes.
  * This function will overwrite node relationship with the passed entity.
  *
- * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+ * @param EntityTypeInterface $entity_type
  *   The event entity type.
  */
 function rng_views_event_registrations(EntityTypeInterface $entity_type) {
@@ -103,7 +108,7 @@ function rng_views_event_registrations(EntityTypeInterface $entity_type) {
   $base_path = \Drupal::moduleHandler()->getModule('rng_views')->getPath();
   $yaml = Yaml::decode(file_get_contents($base_path . '/extra/event.registrations.yml'));
 
-  /** @var \Drupal\views\Entity\View $view */
+  /** @var View $view */
   $view = \Drupal::entityTypeManager()
     ->getStorage('view')
     ->createFromStorageRecord($yaml);
@@ -189,14 +194,14 @@ function rng_views_event_registrations(EntityTypeInterface $entity_type) {
  * Implements hook_views_query_alter().
  */
 function rng_views_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
-  /** @var \Drupal\rng\EventManager $event_manager */
+  /** @var EventManager $event_manager */
   $event_manager = \Drupal::service('rng.event_manager');
   $event_types = $event_manager->getEventTypes();
   foreach (array_keys($event_types) as $entity_type) {
     if ($view->id() == "rng_registrations_$entity_type") {
-      /** @var \Drupal\Core\Routing\RouteMatchInterface $route_match */
+      /** @var RouteMatchInterface $route_match */
       $route_match = \Drupal::service('current_route_match');
-      /** @var \Drupal\Core\Entity\EntityInterface $event */
+      /** @var EntityInterface $event */
       if ($event = $route_match->getParameter($entity_type)) {
         if ($meta = $event_manager->getMeta($event)) {
           // If we waitlist and have a registration limit, set some defaults.
diff --git a/src/Access/EntityIsEventCheck.php b/src/Access/EntityIsEventCheck.php
index 7537332..3c16dcf 100644
--- a/src/Access/EntityIsEventCheck.php
+++ b/src/Access/EntityIsEventCheck.php
@@ -18,14 +18,14 @@ class EntityIsEventCheck implements AccessInterface {
   /**
    * The RNG event manager.
    *
-   * @var \Drupal\rng\EventManagerInterface
+   * @var EventManagerInterface
    */
   protected $eventManager;
 
   /**
    * Constructs a new EntityIsEventCheck object.
    *
-   * @param \Drupal\rng\EventManagerInterface $event_manager
+   * @param EventManagerInterface $event_manager
    *   The RNG event manager.
    */
   public function __construct(EventManagerInterface $event_manager) {
diff --git a/src/Access/EventRuleResetCheck.php b/src/Access/EventRuleResetCheck.php
index bffc299..696c87b 100644
--- a/src/Access/EventRuleResetCheck.php
+++ b/src/Access/EventRuleResetCheck.php
@@ -18,14 +18,14 @@ class EventRuleResetCheck implements AccessInterface {
   /**
    * The RNG event manager.
    *
-   * @var \Drupal\rng\EventManagerInterface
+   * @var EventManagerInterface
    */
   protected $eventManager;
 
   /**
    * Constructs a new EventRuleResetCheck object.
    *
-   * @param \Drupal\rng\EventManagerInterface $event_manager
+   * @param EventManagerInterface $event_manager
    *   The RNG event manager.
    */
   public function __construct(EventManagerInterface $event_manager) {
diff --git a/src/Access/RegistrationAddAccessCheck.php b/src/Access/RegistrationAddAccessCheck.php
index c6cd8fc..7d1ab3b 100644
--- a/src/Access/RegistrationAddAccessCheck.php
+++ b/src/Access/RegistrationAddAccessCheck.php
@@ -18,14 +18,14 @@ class RegistrationAddAccessCheck implements AccessInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a EventRegistrationAllowedCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/AccessControl/EventAccessControlHandler.php b/src/AccessControl/EventAccessControlHandler.php
index 933d350..a417eb4 100644
--- a/src/AccessControl/EventAccessControlHandler.php
+++ b/src/AccessControl/EventAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\rng\AccessControl;
 
+use Drupal\rng\Entity\RuleComponentInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -20,7 +21,7 @@ class EventAccessControlHandler extends EntityAccessControlHandler {
     $account = $this->prepareUser($account);
     $child = $entity instanceof RuleInterface ? $entity : $entity->getRule();
     if ($child instanceof EntityInterface) {
-      /** @var \Drupal\rng\Entity\RuleInterface|\Drupal\rng\Entity\RuleComponentInterface $child */
+      /** @var RuleInterface|RuleComponentInterface $child */
       return $child
         ->getEvent()
         ->access('manage event', $account, TRUE);
