modules/contrib/one_time_login_link_admin/one_time_login_link_admin.module
modules/contrib/one_time_login_link_admin/src/Controller/OneTimeLoginLinkController.php
modules/contrib/one_time_login_link_admin/tests/src/Unit/TestOnetimetimeloginlinkFunctional.php

3 files with changes
====================

1) modules/contrib/one_time_login_link_admin/tests/src/Unit/TestOnetimetimeloginlinkFunctional.php:6

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\one_time_login_link_admin\Unit;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 use Drupal\Core\Url;
@@ @@
   /**
    * A user for testing.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $webUser;

@@ @@
   /**
    * A user for testing.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser([
       'access administration pages',
@@ @@
     $this->drupalGet(Url::fromRoute('one_time_login_link_admin.generate_login_link',
       ['user' => 310]));
     // Check path.
-    $this->assertResponse(404);
+    $this->assertSession()->statusCodeEquals(404);
     $assert->pageTextContains('The requested page could not be found');
   }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/one_time_login_link_admin/src/Controller/OneTimeLoginLinkController.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Date time formatter service.
    *
-   * @var Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * Generates a one-time login (password reset) link for the given user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *   The user for which to generate the login link.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return RedirectResponse|null
    *   A redirect to the destination, if one was provided.
    */
   public function generateLoginLink(AccountInterface $user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/one_time_login_link_admin/one_time_login_link_admin.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\User\UserInterface;
 /**
  * @file
  * Contains one_time_login_link_admin.module.
@@ @@
  */
 function one_time_login_link_admin_entity_operation_alter(array &$operations, EntityInterface $entity) {
   $current_user = \Drupal::currentUser();
-  /** @var \Drupal\User\UserInterface $entity */
+  /** @var UserInterface $entity */
   // Add operation for generating one-time user login links for administrator.
   if ($entity->getEntityTypeId() === 'user' && $current_user->hasPermission('administer users') && !$entity->hasRole('administrator') && $entity->isActive()) {
     $operations['one_time_login_link_admin_generate_login_link'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

