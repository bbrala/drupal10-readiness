diff --git a/modules/examples/src/Controller/FrontPage.php b/modules/examples/src/Controller/FrontPage.php
index 89dac2f..de0ad30 100644
--- a/modules/examples/src/Controller/FrontPage.php
+++ b/modules/examples/src/Controller/FrontPage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\form_mode_manager_examples\Controller;
 
+use Drupal\form_mode_manager\FormModeManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Url;
@@ -24,21 +25,21 @@ class FrontPage extends ControllerBase {
   /**
    * The entity display repository.
    *
-   * @var \Drupal\form_mode_manager\FormModeManagerInterface
+   * @var FormModeManagerInterface
    */
   protected $formModeManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a Form mode manager FrontPage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/examples/tests/src/Functional/FormModeManagerExamplesTest.php b/modules/examples/tests/src/Functional/FormModeManagerExamplesTest.php
index a957953..f810eaf 100644
--- a/modules/examples/tests/src/Functional/FormModeManagerExamplesTest.php
+++ b/modules/examples/tests/src/Functional/FormModeManagerExamplesTest.php
@@ -37,7 +37,7 @@ class FormModeManagerExamplesTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     // Theme needs to be set before enabling form_mode_manager_examples because,
     // of dependency.
diff --git a/modules/form_mode_theme_switcher/src/Form/FormModeThemeSwitcherForm.php b/modules/form_mode_theme_switcher/src/Form/FormModeThemeSwitcherForm.php
index 49808c2..af11c9c 100644
--- a/modules/form_mode_theme_switcher/src/Form/FormModeThemeSwitcherForm.php
+++ b/modules/form_mode_theme_switcher/src/Form/FormModeThemeSwitcherForm.php
@@ -19,15 +19,15 @@ class FormModeThemeSwitcherForm extends FormModeManagerFormBase {
   /**
    * Constructs a CropWidgetForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\form_mode_manager\FormModeManagerInterface $form_mode_manager
+   * @param FormModeManagerInterface $form_mode_manager
    *   The form_mode_manager service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityDisplayRepositoryInterface $entity_display_repository, FormModeManagerInterface $form_mode_manager, CacheTagsInvalidatorInterface $cache_tags_invalidator, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/form_mode_theme_switcher/src/Theme/FormModeThemeNegociator.php b/modules/form_mode_theme_switcher/src/Theme/FormModeThemeNegociator.php
index 26863e6..70fb0a5 100644
--- a/modules/form_mode_theme_switcher/src/Theme/FormModeThemeNegociator.php
+++ b/modules/form_mode_theme_switcher/src/Theme/FormModeThemeNegociator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\form_mode_manager_theme_switcher\Theme;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -23,30 +24,30 @@ class FormModeThemeNegociator implements ThemeNegotiatorInterface {
   /**
    * The Form mode Theme Switcher configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $formModeThemeSwitcherConfig;
 
   /**
    * The drupal system theme configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $systemThemeConfig;
 
   /**
    * Drupal\Core\Session\AccountProxy definition.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * Creates a new RoleThemeSwitcherNegotiator instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(ConfigFactoryInterface $config_factory, AccountInterface $current_user) {
@@ -58,7 +59,7 @@ class FormModeThemeNegociator implements ThemeNegotiatorInterface {
   /**
    * Whether this theme negotiator should be used to set the theme.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match object.
    *
    * @return bool
@@ -77,7 +78,7 @@ class FormModeThemeNegociator implements ThemeNegotiatorInterface {
   /**
    * Determine if current route has correct options or use joker parameter.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route object of entity.
    *
    * @return bool
@@ -98,7 +99,7 @@ class FormModeThemeNegociator implements ThemeNegotiatorInterface {
   /**
    * Determine the active theme from the route or configuration.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match object.
    *
    * @return string
@@ -136,7 +137,7 @@ class FormModeThemeNegociator implements ThemeNegotiatorInterface {
   /**
    * Evaluate if given theme is admin and user has access to view admin theme.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match object.
    * @param string $theme_type
    *   The kind of theme needed by route or configuration 'admin' or 'default'.
diff --git a/modules/form_mode_user_roles_assign/src/FormAlter.php b/modules/form_mode_user_roles_assign/src/FormAlter.php
index 949cdc0..1cce3af 100644
--- a/modules/form_mode_user_roles_assign/src/FormAlter.php
+++ b/modules/form_mode_user_roles_assign/src/FormAlter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\form_mode_user_roles_assign;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Symfony\Component\Routing\Route;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -26,39 +28,39 @@ class FormAlter implements ContainerInjectionInterface {
   /**
    * The entity display repository.
    *
-   * @var \Drupal\form_mode_manager\FormModeManagerInterface
+   * @var FormModeManagerInterface
    */
   protected $formModeManager;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * FormAlter constructor.
    *
-   * @param \Drupal\form_mode_manager\FormModeManagerInterface $form_mode_manager
+   * @param FormModeManagerInterface $form_mode_manager
    *   The form mode manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory object.
    */
   public function __construct(FormModeManagerInterface $form_mode_manager, RouteMatchInterface $route_match, ConfigFactoryInterface $config_factory) {
@@ -85,7 +87,7 @@ class FormAlter implements ContainerInjectionInterface {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The current state of the form.
    * @param string $formId
    *   The Form ID.
@@ -97,7 +99,7 @@ class FormAlter implements ContainerInjectionInterface {
       return;
     }
 
-    /** @var \Symfony\Component\Routing\Route $routeObject */
+    /** @var Route $routeObject */
     $routeObject = $this->routeMatch->getRouteObject();
     $operationName = $routeObject->getDefault('_entity_form');
     $dynamicFormId = str_replace('.', '_', $operationName) . '_form';
@@ -144,7 +146,7 @@ class FormAlter implements ContainerInjectionInterface {
    *   True if route match with register pattern or False if not.
    */
   private function isUserRegistrationRoute() {
-    /** @var \Symfony\Component\Routing\Route $routeObject */
+    /** @var Route $routeObject */
     $routeObject = $this->routeMatch->getRouteObject();
 
     return preg_match(self::REGISTER_PATH_CONTEXT_REGEX, $routeObject->getPath()) === 1;
diff --git a/src/AbstractEntityFormModesFactory.php b/src/AbstractEntityFormModesFactory.php
index 659a99c..624c265 100644
--- a/src/AbstractEntityFormModesFactory.php
+++ b/src/AbstractEntityFormModesFactory.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\form_mode_manager;
 
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Form\FormAjaxException;
+use Drupal\Core\Form\EnforcedResponseException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -34,75 +39,75 @@ abstract class AbstractEntityFormModesFactory implements EntityFormModeManagerIn
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\form_mode_manager\FormModeManagerInterface
+   * @var FormModeManagerInterface
    */
   protected $formModeManager;
 
   /**
    * The entity form builder service.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;
 
   /**
    * The Routes Manager Plugin.
    *
-   * @var \Drupal\form_mode_manager\EntityRoutingMapManager
+   * @var EntityRoutingMapManager
    */
   protected $entityRoutingMap;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a EntityFormModeController object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\form_mode_manager\FormModeManagerInterface $form_mode_manager
+   * @param FormModeManagerInterface $form_mode_manager
    *   The form mode manager.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder service.
-   * @param \Drupal\form_mode_manager\EntityRoutingMapManager $plugin_routes_manager
+   * @param EntityRoutingMapManager $plugin_routes_manager
    *   Plugin EntityRoutingMap to retrieve entity form operation routes.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
    */
   public function __construct(RendererInterface $renderer, AccountInterface $account, FormModeManagerInterface $form_mode_manager, EntityFormBuilderInterface $entity_form_builder, EntityRoutingMapManager $plugin_routes_manager, FormBuilderInterface $form_builder, EntityTypeManagerInterface $entity_manager) {
@@ -123,7 +128,7 @@ abstract class AbstractEntityFormModesFactory implements EntityFormModeManagerIn
   /**
    * Retrieves entity from route match.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   abstract public function getEntityTypeFromRouteMatch(RouteMatchInterface $route_match);
@@ -131,7 +136,7 @@ abstract class AbstractEntityFormModesFactory implements EntityFormModeManagerIn
   /**
    * Provides the entity submission form.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   abstract public function getEntity(RouteMatchInterface $route_match);
@@ -139,7 +144,7 @@ abstract class AbstractEntityFormModesFactory implements EntityFormModeManagerIn
   /**
    * Retrieves entity from route match.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   abstract public function getEntityFromRouteMatch(RouteMatchInterface $route_match);
@@ -147,13 +152,13 @@ abstract class AbstractEntityFormModesFactory implements EntityFormModeManagerIn
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   If form mode is active, isAllowed() will be TRUE, otherwise isForbidden()
    *   will be TRUE.
    */
   public function checkAccess(RouteMatchInterface $route_match) {
     $route_object = $route_match->getRouteObject();
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->getEntityFromRouteMatch($route_match);
     $bundle_id = $this->getBundleEntityTypeId($entity, $route_match);
     $form_mode_id = $route_object->getDefault('_entity_form');
@@ -242,7 +247,7 @@ abstract class AbstractEntityFormModesFactory implements EntityFormModeManagerIn
   /**
    * The _title_callback for the entity.add routes.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    * @param string $operation
    *   Name of current context operation to display title (create/edit).
@@ -250,14 +255,14 @@ abstract class AbstractEntityFormModesFactory implements EntityFormModeManagerIn
    * @return string
    *   The page title.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function pageTitle(RouteMatchInterface $route_match, $operation) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity_properties = $this->getEntityTypeFromRouteMatch($route_match);
     $form_mode_label = $route_match->getRouteObject()
       ->getOption('parameters')['form_mode']['label'];
-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     $entity_type = $this->entityTypeManager->getStorage($entity_properties['entity_type_id'])->getEntityType();
     $name = strtolower($entity_type->getLabel());
 
@@ -298,7 +303,7 @@ abstract class AbstractEntityFormModesFactory implements EntityFormModeManagerIn
    * possible to change that annotation and use form mode specifically,
    * for one form mode.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    * @param string $entity_type_id
    *   The type of $entity; e.g. 'node' or 'user'.
@@ -313,7 +318,7 @@ abstract class AbstractEntityFormModesFactory implements EntityFormModeManagerIn
    */
   public function getOperation(RouteMatchInterface $route_match, $entity_type_id, $op = '') {
     $form_mode_id = $this->formModeManager->getFormModeMachineName($route_match->getRouteObject()->getOption('parameters')['form_mode']['id']);
-    /** @var \Drupal\form_mode_manager\EntityRoutingMapBase $entity_routes_infos */
+    /** @var EntityRoutingMapBase $entity_routes_infos */
     $entity_routes_infos = $this->entityRoutingMap->createInstance($entity_type_id, ['entityTypeId' => $entity_type_id])->getPluginDefinition();
 
     if ($op === 'edit') {
@@ -340,7 +345,7 @@ abstract class AbstractEntityFormModesFactory implements EntityFormModeManagerIn
    * set the correct Operation form with only the form mode name,
    * with ->setOperation() method onto FormObject.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to be created or edited.
    * @param string $operation
    *   (optional) The operation identifying the form variation to be returned.
@@ -353,10 +358,10 @@ abstract class AbstractEntityFormModesFactory implements EntityFormModeManagerIn
    * @return array
    *   The entity Form.
    *
-   * @throws \Drupal\Core\Form\FormAjaxException
+   * @throws FormAjaxException
    *   Thrown when a form is triggered via an AJAX submission. It will be
    *   handled by \Drupal\Core\Form\EventSubscriber\FormAjaxSubscriber.
-   * @throws \Drupal\Core\Form\EnforcedResponseException
+   * @throws EnforcedResponseException
    *   Thrown when a form builder returns a response directly, usually a
    *   \Symfony\Component\HttpFoundation\RedirectResponse. It will be handled by
    *   \Drupal\Core\EventSubscriber\EnforcedFormResponseSubscriber.
diff --git a/src/Annotation/EntityRoutingMap.php b/src/Annotation/EntityRoutingMap.php
index 603993a..274bd79 100644
--- a/src/Annotation/EntityRoutingMap.php
+++ b/src/Annotation/EntityRoutingMap.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\form_mode_manager\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -23,7 +24,7 @@ class EntityRoutingMap extends Plugin {
   /**
    * The human-readable name of the display.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/ComplexEntityFormModes.php b/src/ComplexEntityFormModes.php
index dfd6e07..25a3fe2 100644
--- a/src/ComplexEntityFormModes.php
+++ b/src/ComplexEntityFormModes.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\form_mode_manager;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Link;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -22,7 +23,7 @@ class ComplexEntityFormModes extends AbstractEntityFormModesFactory {
   /**
    * {@inheritdoc}
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   A render array for a list of the entity types that can be added; however,
    *   if there is only one entity type defined for the site, the function
    *   will return a RedirectResponse to the entity add page for that one entity
@@ -104,21 +105,21 @@ class ComplexEntityFormModes extends AbstractEntityFormModesFactory {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity loaded form route_match.
    *
    * @throws \Exception
    *   If an invalid entity is retrieving from the route object.
    */
   public function getEntity(RouteMatchInterface $route_match) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->getEntityFromRouteMatch($route_match);
 
     // If we can't retrieve the entity from the route match get load,
     // it by their storage with correct route bundle key.
     if (empty($entity)) {
       $route_entity_type_info = $this->getEntityTypeFromRouteMatch($route_match);
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = $this->entityTypeManager->getStorage($route_entity_type_info['entity_type_id'])->create([
         $route_entity_type_info['entity_key'] => $route_entity_type_info['bundle'],
       ]);
@@ -130,7 +131,7 @@ class ComplexEntityFormModes extends AbstractEntityFormModesFactory {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   A new entity object build with given route_match.
    */
   public function getEntityFromRouteMatch(RouteMatchInterface $route_match) {
diff --git a/src/Controller/FormModeManagerEntityController.php b/src/Controller/FormModeManagerEntityController.php
index 851aaee..b06f8ff 100644
--- a/src/Controller/FormModeManagerEntityController.php
+++ b/src/Controller/FormModeManagerEntityController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\form_mode_manager\Controller;
 
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFormBuilderInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -32,75 +33,75 @@ class FormModeManagerEntityController implements EntityFormModeManagerInterface,
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $account;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\form_mode_manager\FormModeManagerInterface
+   * @var FormModeManagerInterface
    */
   protected $formModeManager;
 
   /**
    * The entity form builder service.
    *
-   * @var \Drupal\Core\Entity\EntityFormBuilderInterface
+   * @var EntityFormBuilderInterface
    */
   protected $entityFormBuilder;
 
   /**
    * The Routes Manager Plugin.
    *
-   * @var \Drupal\form_mode_manager\EntityRoutingMapManager
+   * @var EntityRoutingMapManager
    */
   protected $entityRoutingMap;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a EntityFormModeController object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user.
-   * @param \Drupal\form_mode_manager\FormModeManagerInterface $form_mode_manager
+   * @param FormModeManagerInterface $form_mode_manager
    *   The form mode manager.
-   * @param \Drupal\Core\Entity\EntityFormBuilderInterface $entity_form_builder
+   * @param EntityFormBuilderInterface $entity_form_builder
    *   The entity form builder service.
-   * @param \Drupal\form_mode_manager\EntityRoutingMapManager $plugin_routes_manager
+   * @param EntityRoutingMapManager $plugin_routes_manager
    *   Plugin EntityRoutingMap to retrieve entity form operation routes.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(RendererInterface $renderer, AccountInterface $account, FormModeManagerInterface $form_mode_manager, EntityFormBuilderInterface $entity_form_builder, EntityRoutingMapManager $plugin_routes_manager, FormBuilderInterface $form_builder, EntityTypeManagerInterface $entity_type_manager) {
@@ -182,10 +183,10 @@ class FormModeManagerEntityController implements EntityFormModeManagerInterface,
    *
    * @param string $method
    *   Name of the method we need to build.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    *
-   * @return \Drupal\form_mode_manager\EntityFormModeManagerInterface
+   * @return EntityFormModeManagerInterface
    *   An instance of correct controller object.
    *
    * @throws \Exception
@@ -212,7 +213,7 @@ class FormModeManagerEntityController implements EntityFormModeManagerInterface,
    * @param string $entity_type_id
    *   The name of entity type.
    *
-   * @return \Drupal\form_mode_manager\EntityFormModeManagerInterface
+   * @return EntityFormModeManagerInterface
    *   An instance of correct controller object.
    */
   public function getEntityControllerObject($entity_type_id) {
@@ -275,7 +276,7 @@ class FormModeManagerEntityController implements EntityFormModeManagerInterface,
   /**
    * Evaluate if current entity have bundles or not.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
    *
    * @return string
diff --git a/src/EntityFormModeManagerInterface.php b/src/EntityFormModeManagerInterface.php
index e9b42bf..06d587a 100644
--- a/src/EntityFormModeManagerInterface.php
+++ b/src/EntityFormModeManagerInterface.php
@@ -19,7 +19,7 @@ interface EntityFormModeManagerInterface {
   /**
    * The _title_callback for the entity.add routes.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function addPageTitle(RouteMatchInterface $route_match);
@@ -27,7 +27,7 @@ interface EntityFormModeManagerInterface {
   /**
    * Checks access for the Form Mode Manager routes.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function checkAccess(RouteMatchInterface $route_match);
@@ -35,7 +35,7 @@ interface EntityFormModeManagerInterface {
   /**
    * The _title_callback for the entity.add routes.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function editPageTitle(RouteMatchInterface $route_match);
@@ -43,7 +43,7 @@ interface EntityFormModeManagerInterface {
   /**
    * Provides the entity add submission form.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function entityAdd(RouteMatchInterface $route_match);
@@ -51,7 +51,7 @@ interface EntityFormModeManagerInterface {
   /**
    * Provides the entity 'edit' form.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function entityEdit(RouteMatchInterface $route_match);
diff --git a/src/EntityRoutingMapBase.php b/src/EntityRoutingMapBase.php
index 77dbc8a..9abcfda 100644
--- a/src/EntityRoutingMapBase.php
+++ b/src/EntityRoutingMapBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\form_mode_manager;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -53,7 +54,7 @@ abstract class EntityRoutingMapBase extends PluginBase implements EntityRoutingM
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/EntityRoutingMapManager.php b/src/EntityRoutingMapManager.php
index 5c15a68..d6d789b 100644
--- a/src/EntityRoutingMapManager.php
+++ b/src/EntityRoutingMapManager.php
@@ -18,9 +18,9 @@ class EntityRoutingMapManager extends DefaultPluginManager implements FallbackPl
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/EntityTypeInfo.php b/src/EntityTypeInfo.php
index 071ec51..742c6af 100644
--- a/src/EntityTypeInfo.php
+++ b/src/EntityTypeInfo.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\form_mode_manager;
 
+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -26,23 +27,23 @@ class EntityTypeInfo implements ContainerInjectionInterface {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\form_mode_manager\FormModeManagerInterface
+   * @var FormModeManagerInterface
    */
   protected $formModeManager;
 
   /**
    * EntityTypeInfo constructor.
    *
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   Current user.
-   * @param \Drupal\form_mode_manager\FormModeManagerInterface $form_mode_manager
+   * @param FormModeManagerInterface $form_mode_manager
    *   The form mode manager.
    */
   public function __construct(AccountInterface $current_user, FormModeManagerInterface $form_mode_manager) {
@@ -65,7 +66,7 @@ class EntityTypeInfo implements ContainerInjectionInterface {
    *
    * This is an alter hook bridge.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+   * @param EntityTypeInterface[] $entity_types
    *   The master entity type list to alter.
    *
    * @see hook_entity_type_alter()
@@ -84,7 +85,7 @@ class EntityTypeInfo implements ContainerInjectionInterface {
    *
    * This is an alter hook bridge.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+   * @param EntityTypeInterface[] $entity_types
    *   The master entity type list to alter.
    *
    * @see hook_entity_type_build()
@@ -98,7 +99,7 @@ class EntityTypeInfo implements ContainerInjectionInterface {
   /**
    * Adds Form Mode Manager operations on entity that supports it.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity on which to define an operation.
    *
    * @return array
@@ -130,7 +131,7 @@ class EntityTypeInfo implements ContainerInjectionInterface {
    *
    * @param array $operations
    *   Operations array as returned by getOperations().
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity on which to define an operation.
    *
    * @return array
@@ -155,7 +156,7 @@ class EntityTypeInfo implements ContainerInjectionInterface {
    *
    * @param array $operations
    *   Operations array as returned by getOperations().
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity on which to define an operation.
    *
    * @return bool
@@ -172,7 +173,7 @@ class EntityTypeInfo implements ContainerInjectionInterface {
    *
    * @param array $form_mode
    *   Current form mode definition.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity on which to define an operation.
    *
    * @return bool
diff --git a/src/Form/FormModeManagerDisplayEditForm.php b/src/Form/FormModeManagerDisplayEditForm.php
index a6483fe..a557548 100644
--- a/src/Form/FormModeManagerDisplayEditForm.php
+++ b/src/Form/FormModeManagerDisplayEditForm.php
@@ -27,31 +27,31 @@ class FormModeManagerDisplayEditForm extends EntityFormDisplayEditForm {
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
   /**
    * The route builder service.
    *
-   * @var \Drupal\Core\Routing\RouteBuilderInterface
+   * @var RouteBuilderInterface
    */
   protected $routeBuilder;
 
   /**
    * Constructs a new FormModeManagerDisplayEditForm.
    *
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type manager.
-   * @param \Drupal\Component\Plugin\PluginManagerBase $plugin_manager
+   * @param PluginManagerBase $plugin_manager
    *   The widget or formatter plugin manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface|null $entity_display_repository
+   * @param EntityDisplayRepositoryInterface|null $entity_display_repository
    *   (optional) The entity display_repository.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface|null $entity_field_manager
+   * @param EntityFieldManagerInterface|null $entity_field_manager
    *   (optional) The entity field manager.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
-   * @param \Drupal\Core\Routing\RouteBuilderInterface $route_builder
+   * @param RouteBuilderInterface $route_builder
    *   The route builder service.
    */
   public function __construct(FieldTypePluginManagerInterface $field_type_manager, PluginManagerBase $plugin_manager, EntityDisplayRepositoryInterface $entity_display_repository, EntityFieldManagerInterface $entity_field_manager, CacheTagsInvalidatorInterface $cache_tags_invalidator, RouteBuilderInterface $route_builder) {
@@ -109,7 +109,7 @@ class FormModeManagerDisplayEditForm extends EntityFormDisplayEditForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
@@ -136,7 +136,7 @@ class FormModeManagerDisplayEditForm extends EntityFormDisplayEditForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
@@ -167,7 +167,7 @@ class FormModeManagerDisplayEditForm extends EntityFormDisplayEditForm {
   /**
    * Retrieve all form-modes submitted form-modes.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -185,7 +185,7 @@ class FormModeManagerDisplayEditForm extends EntityFormDisplayEditForm {
   /**
    * Get value of 'display_modes_custom' element.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array|null
diff --git a/src/Form/FormModeManagerFormBase.php b/src/Form/FormModeManagerFormBase.php
index 9d2502f..a904645 100644
--- a/src/Form/FormModeManagerFormBase.php
+++ b/src/Form/FormModeManagerFormBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\form_mode_manager\Form;
 
+use Drupal\Core\Site\Settings;
+use Drupal\form_mode_manager\FormModeManager;
+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
@@ -23,35 +27,35 @@ abstract class FormModeManagerFormBase extends ConfigFormBase {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The settings object.
    *
-   * @var \Drupal\Core\Site\Settings
+   * @var Settings
    */
   protected $settings;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The form_mode_manager service.
    *
-   * @var \Drupal\form_mode_manager\FormModeManager
+   * @var FormModeManager
    */
   protected $formModeManager;
 
   /**
    * The cache tags invalidator.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;
 
@@ -72,15 +76,15 @@ abstract class FormModeManagerFormBase extends ConfigFormBase {
   /**
    * Constructs a CropWidgetForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\form_mode_manager\FormModeManagerInterface $form_mode_manager
+   * @param FormModeManagerInterface $form_mode_manager
    *   The form_mode_manager service.
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache tags invalidator.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityDisplayRepositoryInterface $entity_display_repository, FormModeManagerInterface $form_mode_manager, CacheTagsInvalidatorInterface $cache_tags_invalidator, EntityTypeManagerInterface $entity_type_manager) {
@@ -110,7 +114,7 @@ abstract class FormModeManagerFormBase extends ConfigFormBase {
   /**
    * Retrieve the current class editable config name.
    *
-   * @return \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @return Config|ImmutableConfig
    *   The setting object.
    */
   protected function getConfig() {
@@ -158,7 +162,7 @@ abstract class FormModeManagerFormBase extends ConfigFormBase {
    * buildSettingsPerFormMode to take control of element you need,
    * to save for all compatible entities and/or form modes.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function setFormModeFormSettings(FormStateInterface $form_state) {
@@ -209,7 +213,7 @@ abstract class FormModeManagerFormBase extends ConfigFormBase {
   /**
    * Set settings per compatible entities.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $form_modes
    *   The form modes collection for given entity type.
@@ -224,7 +228,7 @@ abstract class FormModeManagerFormBase extends ConfigFormBase {
   /**
    * Set settings per form modes for a given entity type.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $form_mode
    *   The form mode definition.
diff --git a/src/FormAlter.php b/src/FormAlter.php
index 645d46d..d2c399e 100644
--- a/src/FormAlter.php
+++ b/src/FormAlter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\form_mode_manager;
 
+use Symfony\Component\Routing\Route;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -19,32 +20,32 @@ class FormAlter implements ContainerInjectionInterface {
   /**
    * The entity display repository.
    *
-   * @var \Drupal\form_mode_manager\FormModeManagerInterface
+   * @var FormModeManagerInterface
    */
   protected $formModeManager;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * FormAlter constructor.
    *
-   * @param \Drupal\form_mode_manager\FormModeManagerInterface $form_mode_manager
+   * @param FormModeManagerInterface $form_mode_manager
    *   The form mode manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(FormModeManagerInterface $form_mode_manager, RouteMatchInterface $route_match, ModuleHandlerInterface $module_handler) {
@@ -71,7 +72,7 @@ class FormAlter implements ContainerInjectionInterface {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The current state of the form.
    * @param string $formId
    *   The Form ID.
@@ -91,13 +92,13 @@ class FormAlter implements ContainerInjectionInterface {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $formState
+   * @param FormStateInterface $formState
    *   The current state of the form.
    * @param string $formId
    *   The Form ID.
    */
   public function userRegistrationPasswordFormAlter(array &$form, FormStateInterface $formState, $formId) {
-    /** @var \Symfony\Component\Routing\Route $routeObject */
+    /** @var Route $routeObject */
     $routeObject = $this->routeMatch->getRouteObject();
     $dynamicFormId = str_replace('.', '_', $routeObject->getDefault('_entity_form')) . '_form';
 
diff --git a/src/FormModeManager.php b/src/FormModeManager.php
index 049ea79..ecc69aa 100644
--- a/src/FormModeManager.php
+++ b/src/FormModeManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\form_mode_manager;
 
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ -18,28 +19,28 @@ class FormModeManager implements FormModeManagerInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -53,22 +54,22 @@ class FormModeManager implements FormModeManagerInterface {
   /**
    * The Routes Manager Plugin.
    *
-   * @var \Drupal\form_mode_manager\EntityRoutingMapManager
+   * @var EntityRoutingMapManager
    */
   protected $entityRoutingMap;
 
   /**
    * Constructs a FormDisplayManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory object.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\form_mode_manager\EntityRoutingMapManager $plugin_routes_manager
+   * @param EntityRoutingMapManager $plugin_routes_manager
    *   Plugin EntityRoutingMap to retrieve entity form operation routes.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, EntityDisplayRepositoryInterface $entity_display_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityRoutingMapManager $plugin_routes_manager) {
@@ -86,7 +87,7 @@ class FormModeManager implements FormModeManagerInterface {
   public function getActiveDisplays($entity_type_id) {
     $form_mode_ids = [];
     $ids = $this->configFactory->listAll(self::ENTITY_FORM_DISPLAY_CONFIG_PREFIX . '.' . $entity_type_id . '.');
-    /** @var \Drupal\Core\Entity\Entity\EntityFormDisplay[] $entity_storage */
+    /** @var EntityFormDisplay[] $entity_storage */
     $entity_storage = $this->entityTypeManager->getStorage('entity_form_display')
       ->loadMultiple($this->getEntityFormDisplayIds($ids));
 
@@ -332,7 +333,7 @@ class FormModeManager implements FormModeManagerInterface {
    */
   public function setFormClassPerFormModes(EntityTypeInterface $entity_definition, $form_mode_name) {
     $entity_type_id = $entity_definition->id();
-    /** @var \Drupal\form_mode_manager\EntityRoutingMapBase $route_mapper_plugin */
+    /** @var EntityRoutingMapBase $route_mapper_plugin */
     $route_mapper_plugin = $this->entityRoutingMap->createInstance($entity_type_id, ['entityTypeId' => $entity_type_id]);
 
     if ($default_form = $entity_definition->getFormClass($route_mapper_plugin->getDefaultFormClass())) {
diff --git a/src/FormModeManagerInterface.php b/src/FormModeManagerInterface.php
index c539ec5..ca995a8 100644
--- a/src/FormModeManagerInterface.php
+++ b/src/FormModeManagerInterface.php
@@ -33,7 +33,7 @@ interface FormModeManagerInterface {
   /**
    * Gets the path of specified entity type for a form mode.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    * @param string $form_mode_id
    *   The form mode machine name.
@@ -229,7 +229,7 @@ interface FormModeManagerInterface {
   /**
    * Set all entity handlers needed by form mode manager on entity type basis.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_definition
+   * @param EntityTypeInterface $entity_definition
    *   The entity type to alter.
    */
   public function setEntityHandlersPerFormModes(EntityTypeInterface $entity_definition);
@@ -240,7 +240,7 @@ interface FormModeManagerInterface {
    * This setter are the best way to alter the basic FormClass,
    * for specific operation (form mode) @see http://bit.ly/2sL5L7W .
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_definition
+   * @param EntityTypeInterface $entity_definition
    *   The entity type to alter.
    * @param string $form_mode_name
    *   The form mode human name used by current entity definition.
@@ -250,7 +250,7 @@ interface FormModeManagerInterface {
   /**
    * Set new LinkTemplate handler on entity definition basis.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_definition
+   * @param EntityTypeInterface $entity_definition
    *   The entity type to alter.
    * @param string $form_mode_name
    *   The form mode human name used by current entity definition.
diff --git a/src/FormModeManagerPermissions.php b/src/FormModeManagerPermissions.php
index 027406f..b42e30d 100644
--- a/src/FormModeManagerPermissions.php
+++ b/src/FormModeManagerPermissions.php
@@ -18,23 +18,23 @@ class FormModeManagerPermissions implements ContainerInjectionInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Form Mode Manager service.
    *
-   * @var \Drupal\form_mode_manager\FormModeManagerInterface
+   * @var FormModeManagerInterface
    */
   protected $formModeManager;
 
   /**
    * Constructs a new FormModeManagerPermissions instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
-   * @param \Drupal\form_mode_manager\FormModeManagerInterface $form_mode_manager
+   * @param FormModeManagerInterface $form_mode_manager
    *   The form mode manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, FormModeManagerInterface $form_mode_manager) {
diff --git a/src/MenuLinksInfo.php b/src/MenuLinksInfo.php
index e1945bd..8add403 100644
--- a/src/MenuLinksInfo.php
+++ b/src/MenuLinksInfo.php
@@ -16,23 +16,23 @@ class MenuLinksInfo implements ContainerInjectionInterface {
   /**
    * The entity display repository.
    *
-   * @var \Drupal\form_mode_manager\FormModeManagerInterface
+   * @var FormModeManagerInterface
    */
   protected $formModeManager;
 
   /**
    * The Routes Manager Plugin.
    *
-   * @var \Drupal\form_mode_manager\EntityRoutingMapManager
+   * @var EntityRoutingMapManager
    */
   protected $entityRoutingMap;
 
   /**
    * EntityTypeInfo constructor.
    *
-   * @param \Drupal\form_mode_manager\FormModeManagerInterface $form_mode_manager
+   * @param FormModeManagerInterface $form_mode_manager
    *   The form mode manager.
-   * @param \Drupal\form_mode_manager\EntityRoutingMapManager $plugin_routes_manager
+   * @param EntityRoutingMapManager $plugin_routes_manager
    *   Plugin EntityRoutingMap to retrieve entity form operation routes.
    */
   public function __construct(FormModeManagerInterface $form_mode_manager, EntityRoutingMapManager $plugin_routes_manager) {
@@ -78,7 +78,7 @@ class MenuLinksInfo implements ContainerInjectionInterface {
   public function contextualLinksAlter(array &$links, $group, array $route_parameters) {
     $available_entity_types = array_keys($this->formModeManager->getAllFormModesDefinitions());
     foreach ($available_entity_types as $entity_type_id) {
-      /** @var \Drupal\form_mode_manager\EntityRoutingMapBase $entity_handler_mapping */
+      /** @var EntityRoutingMapBase $entity_handler_mapping */
       $entity_handler_mapping = $this->entityRoutingMap->createInstance($entity_type_id, ['entityTypeId' => $entity_type_id]);
       $contextual_links_edit_id = $entity_handler_mapping->getContextualLink('edit');
       if ($contextual_links_edit_id && isset($links[$contextual_links_edit_id])) {
diff --git a/src/Plugin/Derivative/FormModeManagerContextualLinks.php b/src/Plugin/Derivative/FormModeManagerContextualLinks.php
index a5fcc1b..0a561b5 100644
--- a/src/Plugin/Derivative/FormModeManagerContextualLinks.php
+++ b/src/Plugin/Derivative/FormModeManagerContextualLinks.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\form_mode_manager\Plugin\Derivative;
 
+use Drupal\form_mode_manager\EntityRoutingMapBase;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -20,7 +21,7 @@ class FormModeManagerContextualLinks extends DeriverBase implements ContainerDer
   /**
    * The entity display repository.
    *
-   * @var \Drupal\form_mode_manager\FormModeManagerInterface
+   * @var FormModeManagerInterface
    */
   protected $formModeManager;
 
@@ -41,16 +42,16 @@ class FormModeManagerContextualLinks extends DeriverBase implements ContainerDer
   /**
    * The Routes Manager Plugin.
    *
-   * @var \Drupal\form_mode_manager\EntityRoutingMapManager
+   * @var EntityRoutingMapManager
    */
   protected $entityRoutingMap;
 
   /**
    * Constructs a new FormModeManagerContextualLinks object.
    *
-   * @param \Drupal\form_mode_manager\FormModeManagerInterface $form_mode_manager
+   * @param FormModeManagerInterface $form_mode_manager
    *   The form mode manager.
-   * @param \Drupal\form_mode_manager\EntityRoutingMapManager $plugin_routes_manager
+   * @param EntityRoutingMapManager $plugin_routes_manager
    *   Plugin EntityRoutingMap to retrieve entity form operation routes.
    */
   public function __construct(FormModeManagerInterface $form_mode_manager, EntityRoutingMapManager $plugin_routes_manager) {
@@ -76,7 +77,7 @@ class FormModeManagerContextualLinks extends DeriverBase implements ContainerDer
   public function getDerivativeDefinitions($base_plugin_definition) {
     $this->derivatives = [];
     foreach ($this->formModesDefinitionsList as $entity_type_id => $form_modes) {
-      /** @var \Drupal\form_mode_manager\EntityRoutingMapBase $entity_operation_mapping */
+      /** @var EntityRoutingMapBase $entity_operation_mapping */
       $entity_operation_mapping = $this->entityRoutingMap->createInstance($entity_type_id, ['entityTypeId' => $entity_type_id]);
       $edit_route_name = $entity_operation_mapping->getOperation("edit_form");
       $this->setDefaultTasks($entity_type_id, $edit_route_name);
diff --git a/src/Plugin/Derivative/FormModeManagerLocalAction.php b/src/Plugin/Derivative/FormModeManagerLocalAction.php
index edf55e3..89500c3 100644
--- a/src/Plugin/Derivative/FormModeManagerLocalAction.php
+++ b/src/Plugin/Derivative/FormModeManagerLocalAction.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\form_mode_manager\Plugin\Derivative;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -20,32 +21,32 @@ class FormModeManagerLocalAction extends DeriverBase implements ContainerDeriver
   /**
    * The entity display repository.
    *
-   * @var \Drupal\form_mode_manager\FormModeManagerInterface
+   * @var FormModeManagerInterface
    */
   protected $formModeManager;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Routes Manager Plugin.
    *
-   * @var \Drupal\form_mode_manager\EntityRoutingMapManager
+   * @var EntityRoutingMapManager
    */
   protected $entityRoutingMap;
 
   /**
    * Constructs a FormModeManagerLocalAction object.
    *
-   * @param \Drupal\form_mode_manager\FormModeManagerInterface $form_mode_manager
+   * @param FormModeManagerInterface $form_mode_manager
    *   The form mode manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
-   * @param \Drupal\form_mode_manager\EntityRoutingMapManager $plugin_routes_manager
+   * @param EntityRoutingMapManager $plugin_routes_manager
    *   Plugin EntityRoutingMap to retrieve entity form operation routes.
    */
   public function __construct(FormModeManagerInterface $form_mode_manager, EntityTypeManagerInterface $entity_manager, EntityRoutingMapManager $plugin_routes_manager) {
@@ -107,7 +108,7 @@ class FormModeManagerLocalAction extends DeriverBase implements ContainerDeriver
    * @param string $form_mode_name
    *   A form mode name.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function setDefaultLocalTask(array $form_mode, $entity_type_id, $form_mode_name) {
     $entity_storage = $this->entityTypeManager->getStorage($entity_type_id);
diff --git a/src/Plugin/Derivative/FormModeManagerLocalTasks.php b/src/Plugin/Derivative/FormModeManagerLocalTasks.php
index e4bcb0e..c2697aa 100644
--- a/src/Plugin/Derivative/FormModeManagerLocalTasks.php
+++ b/src/Plugin/Derivative/FormModeManagerLocalTasks.php
@@ -23,7 +23,7 @@ class FormModeManagerLocalTasks extends DeriverBase implements ContainerDeriverI
   /**
    * The Form Mode Manager service.
    *
-   * @var \Drupal\form_mode_manager\FormModeManagerInterface
+   * @var FormModeManagerInterface
    */
   protected $formModeManager;
 
@@ -44,7 +44,7 @@ class FormModeManagerLocalTasks extends DeriverBase implements ContainerDeriverI
   /**
    * Constructs a new Form Mode ManagerLocalTasks.
    *
-   * @param \Drupal\form_mode_manager\FormModeManagerInterface $form_mode_manager
+   * @param FormModeManagerInterface $form_mode_manager
    *   The form mode manager.
    */
   public function __construct(FormModeManagerInterface $form_mode_manager) {
diff --git a/src/Routing/EventSubscriber/EnhanceEntityRouteSubscriber.php b/src/Routing/EventSubscriber/EnhanceEntityRouteSubscriber.php
index 403ff6b..3bcf4ae 100644
--- a/src/Routing/EventSubscriber/EnhanceEntityRouteSubscriber.php
+++ b/src/Routing/EventSubscriber/EnhanceEntityRouteSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\form_mode_manager\Routing\EventSubscriber;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\form_mode_manager\EntityRoutingMapBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Drupal\form_mode_manager\FormModeManagerInterface;
@@ -21,53 +23,53 @@ class EnhanceEntityRouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type definitions.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityDefinition;
 
   /**
    * The Routes Manager Plugin.
    *
-   * @var \Drupal\form_mode_manager\EntityRoutingMapBase
+   * @var EntityRoutingMapBase
    */
   protected $entityRoutingDefinition;
 
   /**
    * The Routes Manager Plugin.
    *
-   * @var \Drupal\form_mode_manager\EntityRoutingMapManager
+   * @var EntityRoutingMapManager
    */
   protected $entityRoutingMap;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\form_mode_manager\FormModeManagerInterface
+   * @var FormModeManagerInterface
    */
   protected $formModeManager;
 
   /**
    * The route collection to add routes.
    *
-   * @var \Symfony\Component\Routing\RouteCollection
+   * @var RouteCollection
    */
   protected $routeCollection;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity type manager.
-   * @param \Drupal\form_mode_manager\FormModeManagerInterface $form_mode_manager
+   * @param FormModeManagerInterface $form_mode_manager
    *   The form mode manager.
-   * @param \Drupal\form_mode_manager\EntityRoutingMapManager $plugin_routes_manager
+   * @param EntityRoutingMapManager $plugin_routes_manager
    *   Plugin EntityRoutingMap to retrieve entity form operation routes.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, FormModeManagerInterface $form_mode_manager, EntityRoutingMapManager $plugin_routes_manager) {
diff --git a/src/Routing/EventSubscriber/FormModesSubscriber.php b/src/Routing/EventSubscriber/FormModesSubscriber.php
index 3a0c4c2..747afb8 100644
--- a/src/Routing/EventSubscriber/FormModesSubscriber.php
+++ b/src/Routing/EventSubscriber/FormModesSubscriber.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\form_mode_manager\Routing\EventSubscriber;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\form_mode_manager\EntityRoutingMapBase;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -36,62 +38,62 @@ class FormModesSubscriber extends RouteSubscriberBase {
   /**
    * The entity type plugin definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface
+   * @var EntityTypeInterface
    */
   protected $entityDefinition;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The current instance of Routing Map plugin for a specific entity type.
    *
-   * @var \Drupal\form_mode_manager\EntityRoutingMapBase
+   * @var EntityRoutingMapBase
    */
   protected $entityRoutingDefinition;
 
   /**
    * The Routing Map Plugin service.
    *
-   * @var \Drupal\form_mode_manager\EntityRoutingMapManager
+   * @var EntityRoutingMapManager
    */
   protected $entityRoutingMap;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity Form Mode manager service.
    *
-   * @var \Drupal\form_mode_manager\FormModeManagerInterface
+   * @var FormModeManagerInterface
    */
   protected $formModeManager;
 
   /**
    * The route collection for adding routes.
    *
-   * @var \Symfony\Component\Routing\RouteCollection
+   * @var RouteCollection
    */
   protected $routeCollection;
 
   /**
    * Constructs a new RouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
-   * @param \Drupal\form_mode_manager\FormModeManagerInterface $form_mode_manager
+   * @param FormModeManagerInterface $form_mode_manager
    *   The form mode manager.
-   * @param \Drupal\form_mode_manager\EntityRoutingMapManager $plugin_routes_manager
+   * @param EntityRoutingMapManager $plugin_routes_manager
    *   Plugin EntityRoutingMap to retrieve entity form operation routes.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository, FormModeManagerInterface $form_mode_manager, EntityRoutingMapManager $plugin_routes_manager) {
@@ -183,7 +185,7 @@ class FormModesSubscriber extends RouteSubscriberBase {
    * @param string $operation_name
    *   The entity operation name.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   public function getFormModeRoute(array $form_mode_infos, $operation_name) {
@@ -201,12 +203,12 @@ class FormModesSubscriber extends RouteSubscriberBase {
   /**
    * Generate a routes based on top of given parent routes.
    *
-   * @param \Symfony\Component\Routing\Route $parent_route
+   * @param Route $parent_route
    *   The route object of entity.
    * @param array $form_mode_infos
    *   The form mode info.
    *
-   * @return \Symfony\Component\Routing\Route
+   * @return Route
    *   Form Mode Manager route to be added on entity collection.
    */
   protected function setRoutes(Route $parent_route, array $form_mode_infos) {
@@ -224,7 +226,7 @@ class FormModesSubscriber extends RouteSubscriberBase {
   /**
    * Get defaults parameters needed to build Form Mode Manager routes.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route object of entity.
    * @param array $form_mode_infos
    *   The form mode info.
@@ -250,7 +252,7 @@ class FormModesSubscriber extends RouteSubscriberBase {
   /**
    * Evaluate if current context is edit.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route object of entity.
    *
    * @return bool
@@ -336,7 +338,7 @@ class FormModesSubscriber extends RouteSubscriberBase {
    * @param array $form_mode_infos
    *   An associative array represent a DisplayForm entity.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   public function getFormModeListPageRoute(array $form_mode_infos) {
diff --git a/src/SimpleEntityFormModes.php b/src/SimpleEntityFormModes.php
index c29be5f..34c5e0c 100644
--- a/src/SimpleEntityFormModes.php
+++ b/src/SimpleEntityFormModes.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\form_mode_manager;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\RouteMatchInterface;
 
@@ -24,7 +25,7 @@ class SimpleEntityFormModes extends AbstractEntityFormModesFactory {
    * {@inheritdoc}
    */
   public function checkAccess(RouteMatchInterface $route_match) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->getEntityFromRouteMatch($route_match);
     $route = $route_match->getRouteObject();
     $form_mode_id = $route->getDefault('_entity_form');
@@ -66,18 +67,18 @@ class SimpleEntityFormModes extends AbstractEntityFormModesFactory {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity loaded form route_match.
    *
    * @throws \Exception
    *   If an invalid entity is retrieving from the route object.
    */
   public function getEntity(RouteMatchInterface $route_match) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = $this->getEntityFromRouteMatch($route_match);
     if (empty($entity)) {
       $route_entity_type_info = $this->getEntityTypeFromRouteMatch($route_match);
-      /** @var \Drupal\Core\Entity\EntityInterface $entity */
+      /** @var EntityInterface $entity */
       $entity = $this->entityTypeManager->getStorage($route_entity_type_info['entity_type_id'])->create();
     }
 
@@ -87,7 +88,7 @@ class SimpleEntityFormModes extends AbstractEntityFormModesFactory {
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   A new entity object build with given route_match.
    */
   public function getEntityFromRouteMatch(RouteMatchInterface $route_match) {
diff --git a/tests/src/Functional/DisplayFormModeTestTrait.php b/tests/src/Functional/DisplayFormModeTestTrait.php
index eae0bef..be3e281 100644
--- a/tests/src/Functional/DisplayFormModeTestTrait.php
+++ b/tests/src/Functional/DisplayFormModeTestTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\form_mode_manager\Functional;
 
+use Drupal\Core\Entity\EntityDisplayModeInterface;
 use Drupal\Core\Entity\Entity\EntityFormMode;
 
 /**
@@ -30,7 +31,7 @@ trait DisplayFormModeTestTrait {
    *   - label: Random string.
    *   - targetEntityType: 'page'.
    *
-   * @return \Drupal\Core\Entity\EntityDisplayModeInterface
+   * @return EntityDisplayModeInterface
    *   The created form mode entity.
    */
   public function drupalCreateFormMode($entity_type_id, array $settings = []) {
diff --git a/tests/src/Functional/FormModeManagerBase.php b/tests/src/Functional/FormModeManagerBase.php
index 89f143c..07e9883 100644
--- a/tests/src/Functional/FormModeManagerBase.php
+++ b/tests/src/Functional/FormModeManagerBase.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\Tests\form_mode_manager\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\node\Entity\NodeType;
+use Drupal\Core\Entity\EntityDisplayModeInterface;
+use Drupal\form_mode_manager\FormModeManagerInterface;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\block_content\BlockContentInterface;
 use Drupal\block_content\Entity\BlockContent;
 use Drupal\block_content\Entity\BlockContentType;
 use Drupal\Tests\BrowserTestBase;
@@ -51,49 +57,49 @@ abstract class FormModeManagerBase extends BrowserTestBase {
   /**
    * An user with Anonymous permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $anonymousUser;
 
   /**
    * An user with administrative permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * An test user with random permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;
 
   /**
    * Node entity type to test.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeTypeFmm1;
 
   /**
    * Basic node form mode to test.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayModeInterface
+   * @var EntityDisplayModeInterface
    */
   protected $nodeFormMode;
 
   /**
    * Basic user form mode to test.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayModeInterface
+   * @var EntityDisplayModeInterface
    */
   protected $userFormMode;
 
   /**
    * Basic form mode to test.
    *
-   * @var \Drupal\form_mode_manager\FormModeManagerInterface
+   * @var FormModeManagerInterface
    */
   protected $formModeManager;
 
@@ -109,7 +115,7 @@ abstract class FormModeManagerBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Setup correct blocks in regions.
@@ -183,7 +189,7 @@ abstract class FormModeManagerBase extends BrowserTestBase {
   /**
    * Tests the EntityFormMode user interface.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function assertLocalTasks($tabs_expected) {
     foreach ($tabs_expected as $link) {
@@ -197,7 +203,7 @@ abstract class FormModeManagerBase extends BrowserTestBase {
    * @param bool $create_body
    *   Whether or not to create the body field.
    *
-   * @return \Drupal\block_content\Entity\BlockContentType
+   * @return BlockContentType
    *   Created custom block type.
    */
   protected function createBlockContentType($create_body = FALSE) {
@@ -221,7 +227,7 @@ abstract class FormModeManagerBase extends BrowserTestBase {
    *   entity_create(). Override the defaults by specifying the key and value
    *   in the array, for example:.
    *
-   * @return \Drupal\block_content\BlockContentInterface
+   * @return BlockContentInterface
    *   The created block_content entity.
    */
   protected function createBlockContent(array $settings = []) {
