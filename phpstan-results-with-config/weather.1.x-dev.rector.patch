diff --git a/src/Commands/WeatherCommands.php b/src/Commands/WeatherCommands.php
index df8a661..5b7824b 100644
--- a/src/Commands/WeatherCommands.php
+++ b/src/Commands/WeatherCommands.php
@@ -62,7 +62,7 @@ class WeatherCommands extends DrushCommands {
    * Open file.
    */
   private function csv() {
-    return fopen(drupal_get_path('module', 'weather') . '/files/weather_data.csv', 'r');
+    return fopen(\Drupal::service('extension.list.module')->getPath('weather') . '/files/weather_data.csv', 'r');
   }
 
   /**
diff --git a/src/Controller/WeatherDetailedForecastController.php b/src/Controller/WeatherDetailedForecastController.php
index 494f896..51cf09a 100644
--- a/src/Controller/WeatherDetailedForecastController.php
+++ b/src/Controller/WeatherDetailedForecastController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\weather\Controller;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\weather\Entity\WeatherPlaceInterface;
@@ -16,28 +17,28 @@ class WeatherDetailedForecastController extends ControllerBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Display Place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $displayPlaceStorage;
 
   /**
    * Weather Place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherPlaceStorage;
 
   /**
    * The controller constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Controller/WeatherUserConfiguredDisplayController.php b/src/Controller/WeatherUserConfiguredDisplayController.php
index 203d40c..7b269e3 100644
--- a/src/Controller/WeatherUserConfiguredDisplayController.php
+++ b/src/Controller/WeatherUserConfiguredDisplayController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\weather\Controller;
 
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -24,32 +26,32 @@ class WeatherUserConfiguredDisplayController extends ControllerBase {
   /**
    * The weather.helper service.
    *
-   * @var \Drupal\weather\Service\HelperService
+   * @var HelperService
    */
   protected $weatherHelper;
 
   /**
    * The entity.type_manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The controller constructor.
    *
-   * @param \Drupal\weather\Service\HelperService $weather_helper
+   * @param HelperService $weather_helper
    *   The weather.helper service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity.type_manager service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
    */
   public function __construct(HelperService $weather_helper, EntityTypeManagerInterface $entity_type_manager, Renderer $renderer) {
@@ -134,10 +136,10 @@ class WeatherUserConfiguredDisplayController extends ControllerBase {
   /**
    * Checks access for a specific request.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, UserInterface $user) {
diff --git a/src/Form/AddCustomPlaceForm.php b/src/Form/AddCustomPlaceForm.php
index b92c440..66b0c91 100644
--- a/src/Form/AddCustomPlaceForm.php
+++ b/src/Form/AddCustomPlaceForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\weather\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -21,61 +24,61 @@ class AddCustomPlaceForm extends FormBase {
   /**
    * Entity Type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Weather displays storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayStorage;
 
   /**
    * Weather display places storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayPlaceStorage;
 
   /**
    * Weather Data service.
    *
-   * @var \Drupal\weather\Service\DataService
+   * @var DataService
    */
   protected $weatherDataService;
 
   /**
    * Weather helper service.
    *
-   * @var \Drupal\weather\Service\HelperService
+   * @var HelperService
    */
   protected $weatherHelper;
 
   /**
    * Parser service.
    *
-   * @var \Drupal\weather\Service\ParserService
+   * @var ParserService
    */
   protected $weatherParser;
 
   /**
    * Constructs a \Drupal\weather\Form\SettingsForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager storage.
-   * @param \Drupal\weather\Service\DataService $weatherDataService
+   * @param DataService $weatherDataService
    *   Weather data service.
-   * @param \Drupal\weather\Service\HelperService $helperService
+   * @param HelperService $helperService
    *   Weather helper service.
-   * @param \Drupal\weather\Service\ParserService $parserService
+   * @param ParserService $parserService
    *   Weather parser service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Drupal messenegr service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, DataService $weatherDataService, HelperService $helperService, ParserService $parserService, MessengerInterface $messenger) {
     $this->entityTypeManager = $entityTypeManager;
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index 0647a2b..efaf2ad 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\weather\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -20,43 +23,43 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Entity Type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Weather displays storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayStorage;
 
   /**
    * Weather display places storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayPlaceStorage;
 
   /**
    * Weather Data service.
    *
-   * @var \Drupal\weather\Service\DataService
+   * @var DataService
    */
   protected $weatherDataService;
 
   /**
    * Constructs a \Drupal\weather\Form\SettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager storage.
-   * @param \Drupal\weather\Service\DataService $weatherDataService
+   * @param DataService $weatherDataService
    *   Weather data service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entityTypeManager, DataService $weatherDataService) {
     parent::__construct($config_factory);
@@ -117,7 +120,7 @@ class SettingsForm extends ConfigFormBase {
 
     // Additional weather settings.
     $theme = $this->config('system.theme')->get('default');
-    $theme_path = drupal_get_path('theme', $theme);
+    $theme_path = \Drupal::service('extension.list.theme')->getPath($theme);
     $config = $this->config('weather.settings');
 
     $form['weather_image_directory'] = [
diff --git a/src/Form/WeatherDisplayDeleteForm.php b/src/Form/WeatherDisplayDeleteForm.php
index 911d629..4329168 100644
--- a/src/Form/WeatherDisplayDeleteForm.php
+++ b/src/Form/WeatherDisplayDeleteForm.php
@@ -22,20 +22,20 @@ class WeatherDisplayDeleteForm extends ContentEntityConfirmFormBase {
   /**
    * $block_manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $block_manager;
 
   /**
    * WeatherDisplayDeleteForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface|null $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface|null $time
+   * @param TimeInterface|null $time
    *   The time service.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, BlockManagerInterface $block_manager) {
diff --git a/src/Form/WeatherDisplayForm.php b/src/Form/WeatherDisplayForm.php
index 7ddfa07..77b885f 100644
--- a/src/Form/WeatherDisplayForm.php
+++ b/src/Form/WeatherDisplayForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\weather\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Database\Database;
@@ -25,42 +28,42 @@ class WeatherDisplayForm extends ContentEntityForm {
   /**
    * Weather helper service.
    *
-   * @var \Drupal\weather\Service\HelperService
+   * @var HelperService
    */
   protected $weatherHelperService;
 
   /**
    * Weather display storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayStorage;
 
   /**
    * $block_manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $block_manager;
 
   /**
    * WeatherDisplayForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\weather\Service\HelperService $weatherHelperService
+   * @param HelperService $weatherHelperService
    *   Weather helper service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface|null $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface|null $time
+   * @param TimeInterface|null $time
    *   The time service.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityRepositoryInterface $entity_repository, HelperService $weatherHelperService, EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, BlockManagerInterface $block_manager) {
     parent::__construct($entity_repository, $entity_type_bundle_info, $time);
diff --git a/src/Form/WeatherDisplayPlaceForm.php b/src/Form/WeatherDisplayPlaceForm.php
index 9d635af..da683c5 100644
--- a/src/Form/WeatherDisplayPlaceForm.php
+++ b/src/Form/WeatherDisplayPlaceForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\weather\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\ContentEntityForm;
@@ -25,24 +28,24 @@ class WeatherDisplayPlaceForm extends ContentEntityForm {
   /**
    * Weather place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherPlaceStorage;
 
   /**
    * WeatherDisplayForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface|null $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface|null $time
+   * @param TimeInterface|null $time
    *   The time service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeManagerInterface $entityTypeManager, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
     parent::__construct($entity_repository, $entity_type_bundle_info, $time);
@@ -215,14 +218,14 @@ class WeatherDisplayPlaceForm extends ContentEntityForm {
   /**
    * Finds location settings for display Place form.
    *
-   * @param \Drupal\weather\Entity\WeatherDisplayPlaceInterface|null $weather_display_place
+   * @param WeatherDisplayPlaceInterface|null $weather_display_place
    *   Weather display place entity.
    *
    * @return array
    *   Settings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getLocationSettings(WeatherDisplayPlaceInterface $weather_display_place = NULL) {
     // Set defaults.
diff --git a/src/Plugin/Block/WeatherDisplayBlockTrait.php b/src/Plugin/Block/WeatherDisplayBlockTrait.php
index 0bd72eb..1eff790 100644
--- a/src/Plugin/Block/WeatherDisplayBlockTrait.php
+++ b/src/Plugin/Block/WeatherDisplayBlockTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\weather\Plugin\Block;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
@@ -20,21 +21,21 @@ trait WeatherDisplayBlockTrait {
   /**
    * Weather display to show in this block.
    *
-   * @var \Drupal\weather\Entity\WeatherDisplayInterface
+   * @var WeatherDisplayInterface
    */
   protected $weatherDisplay;
 
   /**
    * Weather display Place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayPlaceStorage;
 
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
diff --git a/src/Plugin/Block/WeatherSystemDisplayBlock.php b/src/Plugin/Block/WeatherSystemDisplayBlock.php
index 8ba098e..2552e1c 100644
--- a/src/Plugin/Block/WeatherSystemDisplayBlock.php
+++ b/src/Plugin/Block/WeatherSystemDisplayBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\weather\Plugin\Block;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
@@ -34,13 +36,13 @@ class WeatherSystemDisplayBlock extends BlockBase implements ContainerFactoryPlu
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type Manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   Current user.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager, AccountProxyInterface $currentUser) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/Plugin/Block/WeatherUserDisplayBlock.php b/src/Plugin/Block/WeatherUserDisplayBlock.php
index e50a46e..c339f1d 100644
--- a/src/Plugin/Block/WeatherUserDisplayBlock.php
+++ b/src/Plugin/Block/WeatherUserDisplayBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\weather\Plugin\Block;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
@@ -33,13 +35,13 @@ class WeatherUserDisplayBlock extends BlockBase implements ContainerFactoryPlugi
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type Manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   Current user.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager, AccountProxyInterface $currentUser) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/Plugin/Derivative/WeatherSystemDisplayBlock.php b/src/Plugin/Derivative/WeatherSystemDisplayBlock.php
index 280da39..c9eba12 100644
--- a/src/Plugin/Derivative/WeatherSystemDisplayBlock.php
+++ b/src/Plugin/Derivative/WeatherSystemDisplayBlock.php
@@ -21,14 +21,14 @@ class WeatherSystemDisplayBlock extends DeriverBase implements ContainerDeriverI
   /**
    * The node storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayStorage;
 
   /**
    * Constructs new WeatherSystemDisplayBlock.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $weatherDisplayStorage
+   * @param EntityStorageInterface $weatherDisplayStorage
    *   The weather displays storage.
    */
   public function __construct(EntityStorageInterface $weatherDisplayStorage) {
diff --git a/src/Plugin/Validation/Constraint/WeatherDisplayConstraintValidator.php b/src/Plugin/Validation/Constraint/WeatherDisplayConstraintValidator.php
index f50d426..1fe4fd3 100644
--- a/src/Plugin/Validation/Constraint/WeatherDisplayConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/WeatherDisplayConstraintValidator.php
@@ -17,14 +17,14 @@ class WeatherDisplayConstraintValidator extends ConstraintValidator implements C
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * Creates a new PathAliasConstraintValidator instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Service/DataService.php b/src/Service/DataService.php
index 8e0e7a6..62d9d50 100644
--- a/src/Service/DataService.php
+++ b/src/Service/DataService.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\weather\Service;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Batch\BatchBuilder;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -16,32 +19,32 @@ class DataService {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $placeStorage;
 
   /**
    * Batch Builder.
    *
-   * @var \Drupal\Core\Batch\BatchBuilder
+   * @var BatchBuilder
    */
   protected $batchBuilder;
 
   /**
    * DataService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ -97,7 +100,7 @@ class DataService {
       ->execute();
 
     // Read the data file and create Places in system.
-    $file = fopen(drupal_get_path('module', 'weather') . '/files/weather_data.csv', 'r');
+    $file = fopen(\Drupal::service('extension.list.module')->getPath('weather') . '/files/weather_data.csv', 'r');
     $items = [];
     while (($line = fgetcsv($file, 0, '	')) !== FALSE) {
       // Check if the geoid has been modified, if so, skip it.
diff --git a/src/Service/HelperService.php b/src/Service/HelperService.php
index 6ec833c..5bcfeab 100644
--- a/src/Service/HelperService.php
+++ b/src/Service/HelperService.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\weather\Service;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\weather\Entity\WeatherDisplayInterface;
 
@@ -13,39 +16,39 @@ class HelperService {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Weather display storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayStorage;
 
   /**
    * Weather display place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherDisplayPlaceStorage;
 
   /**
    * Weather place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherPlaceStorage;
 
   /**
    * HelperService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity Type manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
diff --git a/src/Service/ParserService.php b/src/Service/ParserService.php
index 4dc9a03..f63b910 100644
--- a/src/Service/ParserService.php
+++ b/src/Service/ParserService.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\weather\Service;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -21,84 +25,84 @@ class ParserService {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Weather helper service.
    *
-   * @var \Drupal\weather\Service\HelperService
+   * @var HelperService
    */
   protected $weatherHelper;
 
   /**
    * Http client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
 
   /**
    * Logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;
 
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * Drupal messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Weather forecast storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherForecastInfoStorage;
 
   /**
    * Weather forecast storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherForecastStorage;
 
   /**
    * Weather Places storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherPlaceStorage;
 
   /**
    * ParserService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\weather\Service\HelperService $weatherHelper
+   * @param HelperService $weatherHelper
    *   Weather helper service.
-   * @param \GuzzleHttp\Client $httpClient
+   * @param Client $httpClient
    *   Http client.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
+   * @param LoggerChannelFactoryInterface $loggerFactory
    *   Logger service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   Current user object.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Drupal messenegr service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, HelperService $weatherHelper, Client $httpClient, LoggerChannelFactoryInterface $loggerFactory, AccountProxyInterface $current_user, MessengerInterface $messenger) {
     $this->entityTypeManager = $entity_type_manager;
@@ -123,7 +127,7 @@ class ParserService {
    * @return bool
    *   TRUE on success, FALSE on failure.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function downloadForecast(string $geoid = '', string $url = '') {
     // Specify timeout in seconds.
@@ -162,7 +166,7 @@ class ParserService {
    * @return bool
    *   TRUE on success, FALSE on failure.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function parseForecast($xml, $geoid = '') {
     // In case the parsing fails, do not output all error messages.
@@ -490,7 +494,7 @@ class ParserService {
   /**
    * Sets time for next download attempt.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setNextAttempt($meta, $time) {
     // The download did not succeed. Set next download attempt accordingly.
diff --git a/src/Service/ThemeService.php b/src/Service/ThemeService.php
index 0ffdda5..1df1bf1 100644
--- a/src/Service/ThemeService.php
+++ b/src/Service/ThemeService.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\weather\Service;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -20,79 +24,79 @@ class ThemeService {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The weather.helper service.
    *
-   * @var \Drupal\weather\Service\HelperService
+   * @var HelperService
    */
   protected $weatherHelper;
 
   /**
    * Parser service.
    *
-   * @var \Drupal\weather\Service\ParserService
+   * @var ParserService
    */
   protected $weatherParser;
 
   /**
    * The weather.data_service service.
    *
-   * @var \Drupal\weather\Service\DataService
+   * @var DataService
    */
   protected $weatherDataService;
 
   /**
    * Weather module configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $weatherConfig;
 
   /**
    * Theme manager service.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * Date format service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Weather place storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $weatherPlaceStorage;
 
   /**
    * ThemeService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager.
-   * @param \Drupal\weather\Service\HelperService $weather_helper
+   * @param HelperService $weather_helper
    *   Weather helper service.
-   * @param \Drupal\weather\Service\ParserService $parserService
+   * @param ParserService $parserService
    *   Weather parser service.
-   * @param \Drupal\weather\Service\DataService $weather_data_service
+   * @param DataService $weather_data_service
    *   Weather data service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Configuration factory.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   * @param ThemeManagerInterface $themeManager
    *   Theme manager service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   Date formatter service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, HelperService $weather_helper, ParserService $parserService, DataService $weather_data_service, ConfigFactoryInterface $configFactory, ThemeManagerInterface $themeManager, DateFormatterInterface $dateFormatter) {
     $this->entityTypeManager = $entity_type_manager;
@@ -259,7 +263,7 @@ class ThemeService {
     // Construct the filename.
     $image = $custom_path . $symbol . '.png';
     if (!is_readable($image)) {
-      $default_path = drupal_get_path('module', 'weather') . '/images/';
+      $default_path = \Drupal::service('extension.list.module')->getPath('weather') . '/images/';
       $image = $default_path . $symbol . '.png';
     }
     $size = getimagesize($image);
diff --git a/src/WeatherAccessControlHandler.php b/src/WeatherAccessControlHandler.php
index 42de8da..70783cd 100644
--- a/src/WeatherAccessControlHandler.php
+++ b/src/WeatherAccessControlHandler.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\weather;
 
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultNeutral;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -31,10 +33,10 @@ class WeatherAccessControlHandler extends EntityAccessControlHandler {
   /**
    * For all weather entities we do the same access check.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user for which to check access.
    *
-   * @return \Drupal\Core\Access\AccessResult|\Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultNeutral
+   * @return AccessResult|AccessResultAllowed|AccessResultNeutral
    *   Access result,
    */
   protected function commonAccessCheck(AccountInterface $account, EntityInterface $entity = NULL) {
diff --git a/tests/src/Functional/ConfigurationTest.php b/tests/src/Functional/ConfigurationTest.php
index f128884..d682708 100644
--- a/tests/src/Functional/ConfigurationTest.php
+++ b/tests/src/Functional/ConfigurationTest.php
@@ -52,7 +52,10 @@ class ConfigurationTest extends BrowserTestBase {
     $this->drupalGet('admin/config/user-interface/weather/system-wide/add');
     $this->submitForm([], 'Save');
     $this->drupalGet('admin/config/user-interface/weather/system-wide/1/add');
-    $this->assertText('You do not have any weather places in system.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You do not have any weather places in system.');
 
     // Third case.
     // Configure the default place.
@@ -69,16 +72,25 @@ class ConfigurationTest extends BrowserTestBase {
 
     // Check block existing in blocks list.
     $this->drupalGet('admin/structure/block/list/stark');
-    $this->assertText('Weather: system-wide display (#1)');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Weather: system-wide display (#1)');
 
     // Make sure that the weather block is displayed
     // with correct forecast data.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertRaw('<div class="weather">');
-    $this->assertText('00:00-06:00');
-    $this->assertRaw('&thinsp;°C');
-    $this->assertText('18:00-00:00');
-    $this->assertRaw('&thinsp;°C');
+    $this->assertSession()->responseContains('<div class="weather">');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('00:00-06:00');
+    $this->assertSession()->responseContains('&thinsp;°C');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('18:00-00:00');
+    $this->assertSession()->responseContains('&thinsp;°C');
 
     // Change temperature units to Fahrenheit.
     $edit = ['config[temperature]' => 'fahrenheit'];
@@ -89,8 +101,8 @@ class ConfigurationTest extends BrowserTestBase {
     \Drupal::cache()->invalidateAll();
     // Make sure that the weather block now shows different temperatures.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertRaw('&thinsp;°F');
-    $this->assertRaw('&thinsp;°F');
+    $this->assertSession()->responseContains('&thinsp;°F');
+    $this->assertSession()->responseContains('&thinsp;°F');
     // Logout current user.
     $this->drupalLogout();
   }
diff --git a/tests/src/Functional/FunctionsTest.php b/tests/src/Functional/FunctionsTest.php
index 08932b2..6f36c95 100644
--- a/tests/src/Functional/FunctionsTest.php
+++ b/tests/src/Functional/FunctionsTest.php
@@ -37,18 +37,18 @@ class FunctionsTest extends BrowserTestBase {
     $this->weatherFillWeatherSchema();
     // Test different numbers for system-wide displays.
     $link = $this->weatherGetInformationAboutGeoid('geonames_2911298')['link'];
-    $this->assertEqual($link, 'Hamburg/Hamburg');
+    $this->assertEquals($link, 'Hamburg/Hamburg');
     // Test different numbers for yr.no links.
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'yr.no');
-    $this->assertEqual($link, 'http://www.yr.no/place/Germany/Hamburg/Hamburg/');
+    $this->assertEquals($link, 'http://www.yr.no/place/Germany/Hamburg/Hamburg/');
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'system-wide');
-    $this->assertEqual($link, 'weather/Germany/Hamburg/Hamburg/1');
+    $this->assertEquals($link, 'weather/Germany/Hamburg/Hamburg/1');
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'default');
-    $this->assertEqual($link, 'weather/Germany/Hamburg/Hamburg');
+    $this->assertEquals($link, 'weather/Germany/Hamburg/Hamburg');
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'user');
-    $this->assertEqual($link, 'weather/Germany/Hamburg/Hamburg/u');
+    $this->assertEquals($link, 'weather/Germany/Hamburg/Hamburg/u');
     $link = $this->weatherGetLinkForGeoId('geonames_2911298', 'yr');
-    $this->assertEqual($link, 'http://www.yr.no/place/Germany/Hamburg/Hamburg/forecast.xml');
+    $this->assertEquals($link, 'http://www.yr.no/place/Germany/Hamburg/Hamburg/forecast.xml');
   }
 
 }
diff --git a/tests/src/Functional/ParserTest.php b/tests/src/Functional/ParserTest.php
index 2a8be64..7968010 100644
--- a/tests/src/Functional/ParserTest.php
+++ b/tests/src/Functional/ParserTest.php
@@ -519,11 +519,11 @@ class ParserTest extends BrowserTestBase {
     $info = $this->getInfoAboutForecast(1381176000);
     // Check that the information has been parsed correctly.
     $info = reset($info);
-    $this->assertEqual($info->geoid, 'geonames_2911298');
-    $this->assertEqual($info->last_update, '2013-10-07 15:30:00');
-    $this->assertEqual($info->next_update, '2013-10-08 04:00:00');
-    $this->assertEqual($info->next_download_attempt, '2013-10-08 04:00:00');
-    $this->assertEqual($info->utc_offset, 120);
+    $this->assertEquals($info->geoid, 'geonames_2911298');
+    $this->assertEquals($info->last_update, '2013-10-07 15:30:00');
+    $this->assertEquals($info->next_update, '2013-10-08 04:00:00');
+    $this->assertEquals($info->next_download_attempt, '2013-10-08 04:00:00');
+    $this->assertEquals($info->utc_offset, 120);
   }
 
   /**
@@ -553,7 +553,7 @@ class ParserTest extends BrowserTestBase {
     // Fetch all weather forecasts for Hamburg
     // and check the correct days of forecasts.
     $weather = $this->weatherGetWeather('geonames_2911298', 0, TRUE);
-    $this->assertIdentical(array_keys($weather['forecasts']), $days);
+    $this->assertSame(array_keys($weather['forecasts']), $days);
 
     // Go a few days forward ...
     // Set a fixed time for testing to 2013-10-12 10:00:00 UTC.
@@ -563,6 +563,6 @@ class ParserTest extends BrowserTestBase {
     // Fetch all weather forecasts for Hamburg
     // and check the correct days of forecasts.
     $weather = $this->weatherGetWeather('geonames_2911298', 0, TRUE);
-    $this->assertIdentical(array_keys($weather['forecasts']), array_slice($days, 5));
+    $this->assertSame(array_keys($weather['forecasts']), array_slice($days, 5));
   }
 }
diff --git a/tests/src/Functional/PermissionsTest.php b/tests/src/Functional/PermissionsTest.php
index f365f5b..c33e9a0 100644
--- a/tests/src/Functional/PermissionsTest.php
+++ b/tests/src/Functional/PermissionsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\weather\Functional;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -35,7 +36,7 @@ class PermissionsTest extends BrowserTestBase {
    *
    * This test requires that at least one system wide block is enabled.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \ReflectionException
    */
   public function testPermissions() {
@@ -74,7 +75,10 @@ class PermissionsTest extends BrowserTestBase {
     // Get different pages.
     $this->drupalGet('node');
     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertText('Directory for custom images');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Directory for custom images');
 
     // Enable a system-wide weather block.
     $this->drupalGet('admin/config/user-interface/weather/system-wide/add');
@@ -83,9 +87,9 @@ class PermissionsTest extends BrowserTestBase {
     // Make sure that the weather block is not
     // displayed without a configured place.
     $this->drupalGet('node');
-    $this->assertNoRaw('<div class="weather">');
-    $this->assertNoLink('Kyiv');
-    $this->assertNoLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    $this->assertSession()->responseNotContains('<div class="weather">');
+    $this->assertSession()->linkNotExists('Kyiv');
+    $this->assertSession()->linkByHrefNotExists('weather/Ukraine/Kiev/Kyiv/1');
     // Configure the default place.
     $this->drupalGet('admin/config/user-interface/weather/system-wide/1/add');
     $this->submitForm([], 'Save');
@@ -94,14 +98,23 @@ class PermissionsTest extends BrowserTestBase {
     $this->submitForm(['region' => 'sidebar_first'], 'Save block');
 
     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertText('Directory for custom images');
-    $this->assertText('Kyiv');
-    $this->assertText('Add location to this display');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Directory for custom images');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Kyiv');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Add location to this display');
     // Make sure that the weather block is displayed now.
     $this->drupalGet('node');
-    $this->assertRaw('<div class="weather">');
-    $this->assertLink('Kyiv');
-    $this->assertLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    $this->assertSession()->responseContains('<div class="weather">');
+    $this->assertSession()->linkExists('Kyiv');
+    $this->assertSession()->linkByHrefExists('weather/Ukraine/Kiev/Kyiv/1');
     // Logout current user.
     $this->drupalLogout();
 
@@ -109,25 +122,40 @@ class PermissionsTest extends BrowserTestBase {
     $this->drupalLogin($normal_user);
     // Get front page.
     $this->drupalGet('node');
-    $this->assertText('Weather');
-    $this->assertRaw('<div class="weather">');
-    $this->assertLink('Kyiv');
-    $this->assertLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Weather');
+    $this->assertSession()->responseContains('<div class="weather">');
+    $this->assertSession()->linkExists('Kyiv');
+    $this->assertSession()->linkByHrefExists('weather/Ukraine/Kiev/Kyiv/1');
 
     // Administration of weather module should be forbidden.
     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertResponse(403);
-    $this->assertText('You are not authorized to access this page');
+    $this->assertSession()->statusCodeEquals(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You are not authorized to access this page');
     // Search page should be forbidden.
     $this->drupalGet('weather');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // The user may view the page with the detailed forecast of the
     // system-wide display.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertResponse(200);
-    $this->assertText('Weather forecast');
-    $this->assertText('Kyiv');
+    $this->assertSession()->statusCodeEquals(200);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Weather forecast');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Kyiv');
     // Logout current user.
     $this->drupalLogout();
 
@@ -135,32 +163,47 @@ class PermissionsTest extends BrowserTestBase {
     $this->drupalLogin($weather_user_1);
     // Get front page.
     $this->drupalGet('node');
-    $this->assertText('Weather');
-    $this->assertRaw('<div class="weather">');
-    $this->assertLink('Kyiv');
-    $this->assertLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Weather');
+    $this->assertSession()->responseContains('<div class="weather">');
+    $this->assertSession()->linkExists('Kyiv');
+    $this->assertSession()->linkByHrefExists('weather/Ukraine/Kiev/Kyiv/1');
 
     // Administration of weather module should be forbidden.
     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertResponse(403);
-    $this->assertText('You are not authorized to access this page');
+    $this->assertSession()->statusCodeEquals(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You are not authorized to access this page');
     // Search page should be forbidden.
     $this->drupalGet('weather');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // Using the direct search URL should be forbidden.
     $this->drupalGet('weather/zollenspieker');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // The user may view the page with the detailed forecast of the
     // system-wide display.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // But the user may not view any other detailed forecasts.
     // This needs the permission to access the search page.
     $this->drupalGet('weather/Germany/Hamburg/Zollenspieker');
-    $this->assertResponse(404);
-    $this->assertNoText('Zollenspieker');
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Zollenspieker');
     // Logout current user.
     $this->drupalLogout();
 
@@ -168,31 +211,46 @@ class PermissionsTest extends BrowserTestBase {
     $this->drupalLogin($weather_user_2);
     // Get front page.
     $this->drupalGet('node');
-    $this->assertText('Weather');
-    $this->assertRaw('<div class="weather">');
-    $this->assertLink('Kyiv');
-    $this->assertLinkByHref('weather/Ukraine/Kiev/Kyiv/1');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Weather');
+    $this->assertSession()->responseContains('<div class="weather">');
+    $this->assertSession()->linkExists('Kyiv');
+    $this->assertSession()->linkByHrefExists('weather/Ukraine/Kiev/Kyiv/1');
 
     // Administration of weather module should be forbidden.
     $this->drupalGet('admin/config/user-interface/weather');
-    $this->assertResponse(403);
-    $this->assertText('You are not authorized to access this page');
+    $this->assertSession()->statusCodeEquals(403);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('You are not authorized to access this page');
     // Search page should be forbidden.
     $this->drupalGet('weather');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // Using the direct search URL should be forbidden.
     $this->drupalGet('weather/zollenspieker');
-    $this->assertResponse(404);
-    $this->assertText('The requested page could not be found');
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('The requested page could not be found');
     // The user may view the page with the detailed forecast of the
     // system-wide display.
     $this->drupalGet('weather/Ukraine/Kiev/Kyiv/1');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
     // But the user may not view any other detailed forecasts.
     $this->drupalGet('weather/Germany/Hamburg/Zollenspieker');
-    $this->assertResponse(404);
-    $this->assertNoText('Zollenspieker');
+    $this->assertSession()->statusCodeEquals(404);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Zollenspieker');
 
     // Logout current user.
     $this->drupalLogout();
diff --git a/weather.info.yml b/weather.info.yml
index f1d0ce7..b5f13cb 100644
--- a/weather.info.yml
+++ b/weather.info.yml
@@ -3,7 +3,6 @@ type: module
 description: Displays current weather and forecasts
 configure: weather.settings
 package: Other
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 dependencies:
   - block:block
