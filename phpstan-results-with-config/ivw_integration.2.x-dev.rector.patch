diff --git a/ivw_integration.install b/ivw_integration.install
index e995103..9f7bf87 100644
--- a/ivw_integration.install
+++ b/ivw_integration.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\user\RoleInterface;
 /**
  * @file
  * Contains installation hooks for module.
@@ -137,7 +138,7 @@ function ivw_integration_update_8102() {
 function ivw_integration_update_8103() {
   // Update hook 8102 did not include the save operation, thus retry it here.
   $roles = Role::loadMultiple();
-  /** @var \Drupal\user\RoleInterface $role */
+  /** @var RoleInterface $role */
   foreach ($roles as $role) {
     if ($role->hasPermission("administer site configuration") && !$role->hasPermission("administer ivw integration configuration")) {
       $role->grantPermission("administer ivw integration configuration");
diff --git a/ivw_integration.tokens.inc b/ivw_integration.tokens.inc
index 6b15eb7..80f7a2f 100644
--- a/ivw_integration.tokens.inc
+++ b/ivw_integration.tokens.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\ivw_integration\IvwLookupServiceInterface;
 /**
  * @file
  * Builds placeholder replacement tokens for ivw-related data.
@@ -102,7 +103,7 @@ function ivw_integration_tokens($type, $tokens, array $data, array $options, Bub
     elseif (isset($data['term']) && $data['term'] instanceof TermInterface) {
       $lookupFrom = 'term';
     }
-    /** @var \Drupal\ivw_integration\IvwLookupServiceInterface $lookup */
+    /** @var IvwLookupServiceInterface $lookup */
     $lookup = \Drupal::service('ivw_integration.lookup');
     foreach ($tokens as $name => $original) {
 
diff --git a/src/Form/SettingsForm.php b/src/Form/SettingsForm.php
index cb3db52..20d2e14 100644
--- a/src/Form/SettingsForm.php
+++ b/src/Form/SettingsForm.php
@@ -17,7 +17,7 @@ class SettingsForm extends ConfigFormBase {
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    *   Language manager.
    */
   protected $languageManager;
@@ -25,18 +25,18 @@ class SettingsForm extends ConfigFormBase {
   /**
    * The token object.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token = [];
 
   /**
    * Constructs a \Drupal\ivw_integration\SettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token object.
-   * @param \Drupal\Core\Language\LanguageManager $language_manager
+   * @param LanguageManager $language_manager
    *   The Language manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Token $token, LanguageManager $language_manager) {
diff --git a/src/IvwLookupService.php b/src/IvwLookupService.php
index 957a6b7..b957d08 100644
--- a/src/IvwLookupService.php
+++ b/src/IvwLookupService.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ivw_integration;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\taxonomy\TermStorageInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ -20,30 +22,30 @@ class IvwLookupService implements IvwLookupServiceInterface {
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRouteMatch;
   /**
    * IVW integration configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * IvwLookupService constructor.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $currentRouteMatch
+   * @param RouteMatchInterface $currentRouteMatch
    *   The route match.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(RouteMatchInterface $currentRouteMatch, ConfigFactoryInterface $configFactory, EntityTypeManagerInterface $entityTypeManager) {
@@ -74,7 +76,7 @@ class IvwLookupService implements IvwLookupServiceInterface {
    */
   public function byRoute($name, RouteMatchInterface $route, $parentOnly = FALSE) {
     foreach (self::getSupportedEntityParameters() as $parameter) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if ($entity = $route->getParameter($parameter)) {
 
         if (is_numeric($entity)) {
@@ -114,7 +116,7 @@ class IvwLookupService implements IvwLookupServiceInterface {
     $cache_tags = [];
 
     foreach (self::getSupportedEntityParameters() as $parameter) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if ($entity = $route->getParameter($parameter)) {
 
         if (is_numeric($entity)) {
@@ -146,14 +148,14 @@ class IvwLookupService implements IvwLookupServiceInterface {
   /**
    * Gets cache tags of a term and its parents.
    *
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   The term, from which cache tags should be gathered.
    *
    * @return array
    *   The gathered cache tags.
    */
   private function getCacheTagsByTerm(TermInterface $term) {
-    /** @var \Drupal\taxonomy\TermStorageInterface $termStorage  */
+    /** @var TermStorageInterface $termStorage  */
     $termStorage = $this->entityTypeManager->getStorage('taxonomy_term');
 
     $cache_tags = $term->getCacheTags();
@@ -169,10 +171,10 @@ class IvwLookupService implements IvwLookupServiceInterface {
   /**
    * Gets the term associated with an entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity, in which the term should be found.
    *
-   * @return bool|\Drupal\taxonomy\TermInterface
+   * @return bool|TermInterface
    *   The Term or false.
    */
   private function getTermOfNode(ContentEntityInterface $entity) {
@@ -182,7 +184,7 @@ class IvwLookupService implements IvwLookupServiceInterface {
 
         $fieldName = $fieldDefinition->getName();
         if ($tid = $entity->$fieldName->target_id) {
-          /** @var \Drupal\taxonomy\TermInterface $term */
+          /** @var TermInterface $term */
           $term = $this->entityTypeManager->getStorage('taxonomy_term')
             ->load($tid);
           if ($term) {
@@ -218,7 +220,7 @@ class IvwLookupService implements IvwLookupServiceInterface {
    *
    * @param string $name
    *   The name of the IVW property to look up.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity (usually node) to look up the property on.
    * @param bool $parentOnly
    *   If set to TRUE, skips lookup on first level ivw_settings field.
@@ -250,7 +252,7 @@ class IvwLookupService implements IvwLookupServiceInterface {
       if (!isset($termOverride) && $fieldType === 'entity_reference' && $fieldDefinition->getSetting('target_type') === 'taxonomy_term') {
         $fieldName = $fieldDefinition->getName();
         if ($tid = $entity->$fieldName->target_id) {
-          /** @var \Drupal\taxonomy\TermInterface $term */
+          /** @var TermInterface $term */
           $term = $this->entityTypeManager->getStorage('taxonomy_term')
             ->load($tid);
 
@@ -270,7 +272,7 @@ class IvwLookupService implements IvwLookupServiceInterface {
    *
    * @param string $name
    *   The name of the IVW property to look up.
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   The term to look up the property on.
    * @param bool $parentOnly
    *   If set to TRUE, skips lookup on first level ivw_settings field.
@@ -291,7 +293,7 @@ class IvwLookupService implements IvwLookupServiceInterface {
       }
     }
 
-    /** @var \Drupal\taxonomy\TermStorageInterface $termStorage  */
+    /** @var TermStorageInterface $termStorage  */
     $termStorage = $this->entityTypeManager->getStorage('taxonomy_term');
 
     foreach ($termStorage->loadParents($term->id()) as $parent) {
@@ -309,9 +311,9 @@ class IvwLookupService implements IvwLookupServiceInterface {
    *
    * @param string $name
    *   The name of the IVW property to look up.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $fieldDefinition
+   * @param FieldDefinitionInterface $fieldDefinition
    *   The field definition interface.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity interface.
    *
    * @return string|null
diff --git a/src/IvwLookupServiceInterface.php b/src/IvwLookupServiceInterface.php
index c671e98..a311289 100644
--- a/src/IvwLookupServiceInterface.php
+++ b/src/IvwLookupServiceInterface.php
@@ -29,7 +29,7 @@ interface IvwLookupServiceInterface {
    *
    * @param string $name
    *   The name of the IVW property to look up.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The route matching the entity (node, term) on which to look up
    *   properties.
    * @param bool $parentOnly
@@ -48,7 +48,7 @@ interface IvwLookupServiceInterface {
    *
    * @param string $name
    *   The name of the IVW property to look up.
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The content entity (usually node) to look up the property on.
    * @param bool $parentOnly
    *   If set to TRUE, skips lookup on first level ivw_settings field.
@@ -66,7 +66,7 @@ interface IvwLookupServiceInterface {
    *
    * @param string $name
    *   The name of the IVW property to look up.
-   * @param \Drupal\taxonomy\TermInterface $term
+   * @param TermInterface $term
    *   The term to look up the property on.
    * @param bool $parentOnly
    *   If set to TRUE, skips lookup on first level ivw_settings field.
@@ -90,7 +90,7 @@ interface IvwLookupServiceInterface {
   /**
    * Look up cache tags for the provided route.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route
+   * @param RouteMatchInterface $route
    *   The route, for which cache tags should be found.
    *
    * @return array|\string[]
diff --git a/src/IvwTracker.php b/src/IvwTracker.php
index 53d8864..b083089 100644
--- a/src/IvwTracker.php
+++ b/src/IvwTracker.php
@@ -18,7 +18,7 @@ class IvwTracker implements IvwTrackerInterface, CacheableDependencyInterface {
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManager
+   * @var LanguageManager
    */
   protected $languageManager;
 
@@ -32,34 +32,34 @@ class IvwTracker implements IvwTrackerInterface, CacheableDependencyInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The token object.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The IVW lookup service.
    *
-   * @var \Drupal\ivw_integration\IvwLookupServiceInterface
+   * @var IvwLookupServiceInterface
    */
   protected $lookupService;
 
   /**
    * Generates IVW tracking information.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token service.
-   * @param \Drupal\ivw_integration\IvwLookupServiceInterface $lookupService
+   * @param IvwLookupServiceInterface $lookupService
    *   The IVW lookup service.
-   * @param \Drupal\Core\Language\LanguageManager $language_manager
+   * @param LanguageManager $language_manager
    *   The Drupal language manager.
    */
   public function __construct(
diff --git a/src/Plugin/Block/IvwCallBlock.php b/src/Plugin/Block/IvwCallBlock.php
index 86aabf9..c292a56 100644
--- a/src/Plugin/Block/IvwCallBlock.php
+++ b/src/Plugin/Block/IvwCallBlock.php
@@ -23,14 +23,14 @@ class IvwCallBlock extends BlockBase implements ContainerFactoryPluginInterface
   /**
    * The main menu object.
    *
-   * @var \Drupal\ivw_integration\IvwTracker
+   * @var IvwTracker
    */
   protected $ivwTracker;
 
   /**
    * The config factory object.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -43,9 +43,9 @@ class IvwCallBlock extends BlockBase implements ContainerFactoryPluginInterface
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\ivw_integration\IvwTracker $ivw_tracker
+   * @param IvwTracker $ivw_tracker
    *   The ivw tracker object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory object.
    */
   public function __construct(
diff --git a/src/Plugin/Field/FieldWidget/IvwSettingsWidget.php b/src/Plugin/Field/FieldWidget/IvwSettingsWidget.php
index c050a22..4ac3fa2 100644
--- a/src/Plugin/Field/FieldWidget/IvwSettingsWidget.php
+++ b/src/Plugin/Field/FieldWidget/IvwSettingsWidget.php
@@ -27,14 +27,14 @@ class IvwSettingsWidget extends WidgetBase implements ContainerFactoryPluginInte
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The IVW lookup service.
    *
-   * @var \Drupal\ivw_integration\IvwLookupServiceInterface
+   * @var IvwLookupServiceInterface
    */
   protected $lookupService;
 
diff --git a/tests/src/Functional/IvwIntegrationOverrideTest.php b/tests/src/Functional/IvwIntegrationOverrideTest.php
index 406a248..55b5fc6 100644
--- a/tests/src/Functional/IvwIntegrationOverrideTest.php
+++ b/tests/src/Functional/IvwIntegrationOverrideTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\ivw_integration\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -32,14 +33,14 @@ class IvwIntegrationOverrideTest extends BrowserTestBase {
   /**
    * A test user with permission to access the administrative toolbar.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create and log in an administrative user.
@@ -123,7 +124,7 @@ class IvwIntegrationOverrideTest extends BrowserTestBase {
         $termEdit["field_ivw_settings[0][$termOverrideName]"] = $termOverrideValue;
       }
 
-      $this->drupalPostForm(NULL, $termEdit, 'Save');
+      $this->submitForm($termEdit, 'Save');
 
       $terms = taxonomy_term_load_multiple_by_name($termName);
       $term = reset($terms);
@@ -134,7 +135,7 @@ class IvwIntegrationOverrideTest extends BrowserTestBase {
     $this->drupalGet('node/add/ivw_test');
     $this->assertSession()->statusCodeEquals(200);
 
-    $this->drupalPostForm(NULL, $nodeEdit, 'Save');
+    $this->submitForm($nodeEdit, 'Save');
     $this->assertSession()->pageTextContains($expectedOutput);
   }
 
diff --git a/tests/src/Unit/IvwLookupServiceTest.php b/tests/src/Unit/IvwLookupServiceTest.php
index 1b6eac6..876d3a5 100644
--- a/tests/src/Unit/IvwLookupServiceTest.php
+++ b/tests/src/Unit/IvwLookupServiceTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\ivw_integration\Unit;
 
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Core\Config\Config;
 use Drupal\ivw_integration\IvwLookupService;
@@ -16,21 +19,21 @@ class IvwLookupServiceTest extends UnitTestCase {
   /**
    * The route match mock.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatchMock;
 
   /**
    * The entity type manager mock.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManagerMock;
 
   /**
    * Config Factory Mock -> provides base configuration required for Testing.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactoryMock;
 
@@ -47,7 +50,7 @@ class IvwLookupServiceTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->routeMatchMock = $this->createMock('\Drupal\Core\Routing\RouteMatchInterface');
