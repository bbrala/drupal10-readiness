modules/contrib/entity_reference_integrity/entity_reference_integrity.module
modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/entity_reference_integrity_enforce.module
modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/src/EntityPredelete.php
modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/src/Exception/ProtectedEntityException.php
modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/src/Form/SettingsForm.php
modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/src/FormAlter.php
modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/src/Plugin/Action/DeleteAction.php
modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/tests/src/Functional/EnforcedIntegrityTest.php
modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/tests/src/Functional/JsonApiTest.php
modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/tests/src/Kernel/DeleteActionTest.php
modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/tests/src/Kernel/EntityPredeleteHookTest.php
modules/contrib/entity_reference_integrity/src/DependencyFieldMapGenerator.php
modules/contrib/entity_reference_integrity/src/DependencyFieldMapGeneratorInterface.php
modules/contrib/entity_reference_integrity/src/EntityReferenceDependencyManager.php
modules/contrib/entity_reference_integrity/src/EntityReferenceDependencyManagerInterface.php
modules/contrib/entity_reference_integrity/src/EntityReferenceIntegrityEntityHandler.php
modules/contrib/entity_reference_integrity/tests/src/Kernel/EntityReferenceDependencyManagerTest.php
modules/contrib/entity_reference_integrity/tests/src/Unit/DependencyFieldMapGeneratorTest.php

13 files with changes
=====================

1) modules/contrib/entity_reference_integrity/tests/src/Kernel/EntityReferenceDependencyManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_reference_integrity\Kernel;

+use Drupal\entity_reference_integrity\EntityReferenceDependencyManagerInterface;
+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\user\Entity\User;
@@ @@
   /**
    * The entity dependency manager.
    *
-   * @var \Drupal\entity_reference_integrity\EntityReferenceDependencyManagerInterface
+   * @var EntityReferenceDependencyManagerInterface
    */
   protected $dependencyManager;

@@ @@
   /**
    * A test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;

@@ @@
   /**
    * A test node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $testNode;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
     $this->installEntitySchema('user');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_reference_integrity/src/EntityReferenceIntegrityEntityHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_reference_integrity;

+use Drupal\Core\Entity\Query\QueryInterface;
 use Drupal\Core\Entity\EntityHandlerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * A referential field map.
    *
-   * @var \Drupal\entity_reference_integrity\DependencyFieldMapGeneratorInterface
+   * @var DependencyFieldMapGeneratorInterface
    */
   protected $fieldMap;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * @param string|int $target_id
    *   The target ID to search for.
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   A query object.
    */
   protected function referentialEntityQuery($entity_type, array $source_fields, $target_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/entity_reference_integrity/src/EntityReferenceDependencyManagerInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Check if an entity has dependent entties.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
    *
    * @return bool
@@ @@
   /**
    * List the entities that reference the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
@@ @@
   /**
    * List the entity IDs that reference the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
@@ @@
   /**
    * Build an access denied reason string.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity that has dependents.
    * @param bool $translate
    *   Optional boolean to translate the string. Defaults to TRUE.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/entity_reference_integrity/src/EntityReferenceDependencyManager.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/entity_reference_integrity/src/DependencyFieldMapGenerator.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/tests/src/Kernel/DeleteActionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_reference_integrity_enforce\Kernel;

+use Drupal\Core\Action\ActionManager;
+use Drupal\entity_reference_integrity\EntityReferenceDependencyManagerInterface;
+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
 use Drupal\entity_reference_integrity_enforce\Plugin\Action\DeleteAction;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * The action plugin manager.
    *
-   * @var \Drupal\Core\Action\ActionManager
+   * @var ActionManager
    */
   protected $actionManager;

@@ @@
   /**
    * The entity dependency manager.
    *
-   * @var \Drupal\entity_reference_integrity\EntityReferenceDependencyManagerInterface
+   * @var EntityReferenceDependencyManagerInterface
    */
   protected $dependencyManager;

@@ @@
   /**
    * A test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;

@@ @@
   /**
    * A test node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $testNode;

@@ @@
   /**
    * A test node that is referenced.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $referencedNode;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/tests/src/Functional/JsonApiTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_reference_integrity_enforce\Functional;

+use Drupal\node\NodeTypeInterface;
+use Drupal\user\UserInterface;
+use Drupal\node\NodeInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Url;
@@ @@
   /**
    * The entity reference integrity entity handler.
    *
-   * @var \Drupal\entity_reference_integrity\EntityReferenceIntegrityEntityHandler
+   * @var EntityReferenceIntegrityEntityHandler
    */
   protected $referenceIntegrityHandler;

@@ @@
   /**
    * Test node type.
    *
-   * @var \Drupal\node\NodeTypeInterface
+   * @var NodeTypeInterface
    */
   protected $nodeType;

@@ @@
   /**
    * A test user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;

@@ @@
   /**
    * A test node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $testNode;

@@ @@
   /**
    * A test node that is referenced.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $referencedNode;

@@ @@
     $entity_type_manager = $this->container->get('entity_type.manager');
     $node_storage = $entity_type_manager->getStorage('node');

-    /** @var \Drupal\entity_reference_integrity\EntityReferenceIntegrityEntityHandler $entity_reference_integrity_handler */
+    /** @var EntityReferenceIntegrityEntityHandler $entity_reference_integrity_handler */
     $this->referenceIntegrityHandler = $entity_type_manager->getHandler('node', 'entity_reference_integrity');

     // Create a new node-type.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/tests/src/Functional/EnforcedIntegrityTest.php:36

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->rootUser);
   }
@@ @@
     // Initially, deleting an entity should be fine if it's not enabled.
     $this->assertSession()->elementsCount('css', '.form-submit', 1);
     $this->assertSession()->elementNotExists('css', '.form-submit[disabled]');
+    $this->drupalGet('admin/config/content/entity-reference-integrity');

     // Enable protection of the entity type.
-    $this->drupalPostForm('admin/config/content/entity-reference-integrity', [
+    $this->submitForm([
       sprintf('enabled_entity_type_ids[%s]', $entity->getEntityTypeId()) => TRUE,
     ], 'Save configuration');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/src/FormAlter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_reference_integrity_enforce;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFormInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The dependency manager.
    *
-   * @var \Drupal\entity_reference_integrity\EntityReferenceDependencyManagerInterface
+   * @var EntityReferenceDependencyManagerInterface
    */
   protected $dependencyManager;

@@ @@
    * Implements hook_form_alter().
    */
   public function formAlter(&$form, FormStateInterface $form_state, $form_id) {
-    /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
+    /** @var EntityFormInterface $form_object */
     $form_object = $form_state->getFormObject();
     if (!$this->isDeleteForm($form_object)) {
       return;
@@ @@
    */
   protected function buildReferencingEntitiesList(array $referencing_entities) {
     $build = [];
-    /** @var \Drupal\Core\Entity\EntityInterface[] $entities */
+    /** @var EntityInterface[] $entities */
     foreach ($referencing_entities as $entity_type_id => $entities) {
       $build[$entity_type_id]['label'] = [
         '#type' => 'html_tag',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_reference_integrity_enforce\Form;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * An array of entity type definitions.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface[]
+   * @var EntityTypeInterface[]
    */
   protected $entityTypeDefinitions;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/src/EntityPredelete.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The dependency manager.
    *
-   * @var \Drupal\entity_reference_integrity\EntityReferenceDependencyManagerInterface
+   * @var EntityReferenceDependencyManagerInterface
    */
   protected $dependencyManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/entity_reference_integrity/modules/entity_reference_integrity_enforce/entity_reference_integrity_enforce.module:57

    ---------- begin diff ----------
@@ @@
     return AccessResult::neutral();
   }

-  /** @var \Drupal\entity_reference_integrity\EntityReferenceIntegrityEntityHandler $entity_reference_integrity_handler */
+  /** @var EntityReferenceIntegrityEntityHandler $entity_reference_integrity_handler */
   $entity_reference_integrity_handler = \Drupal::entityTypeManager()->getHandler($entity->getEntityTypeId(), 'entity_reference_integrity');
   $enabled_entity_type_ids = \Drupal::configFactory()->get('entity_reference_integrity_enforce.settings')->get('enabled_entity_type_ids');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


13) modules/contrib/entity_reference_integrity/entity_reference_integrity.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Module file.
@@ @@
  * Implements hook_entity_type_alter().
  */
 function entity_reference_integrity_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+  /** @var EntityTypeInterface $entity_type */
   foreach ($entity_types as $entity_type) {
     if (!$entity_type->hasHandlerClass('entity_reference_integrity')) {
       $entity_type->setHandlerClass('entity_reference_integrity', EntityReferenceIntegrityEntityHandler::class);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 13 files have been changed by Rector                                      

