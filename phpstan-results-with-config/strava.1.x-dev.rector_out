modules/contrib/strava/modules/strava_activities/src/ActivityAccessControlHandler.php
modules/contrib/strava/modules/strava_activities/src/ActivityHtmlRouteProvider.php
modules/contrib/strava/modules/strava_activities/src/ActivityListBuilder.php
modules/contrib/strava/modules/strava_activities/src/Entity/Activity.php
modules/contrib/strava/modules/strava_activities/src/Entity/ActivityInterface.php
modules/contrib/strava/modules/strava_activities/src/Entity/ActivityViewsData.php
modules/contrib/strava/modules/strava_activities/src/Form/ActivityDeleteForm.php
modules/contrib/strava/modules/strava_activities/src/Form/ActivityForm.php
modules/contrib/strava/modules/strava_activities/src/Form/ActivityRefreshForm.php
modules/contrib/strava/modules/strava_activities/src/Form/ActivitySettingsForm.php
modules/contrib/strava/modules/strava_activities/src/Form/StravaActivitiesConfigurationForm.php
modules/contrib/strava/modules/strava_activities/src/Manager/ActivityManager.php
modules/contrib/strava/modules/strava_activities/src/Plugin/Field/FieldFormatter/DistanceFormatter.php
modules/contrib/strava/modules/strava_activities/src/Plugin/Field/FieldFormatter/ElevationFormatter.php
modules/contrib/strava/modules/strava_activities/src/Plugin/Field/FieldFormatter/SpeedFormatter.php
modules/contrib/strava/modules/strava_activities/src/Plugin/Field/FieldFormatter/StravaMapPolylineFormatter.php
modules/contrib/strava/modules/strava_activities/src/Plugin/Field/FieldType/StravaMapPolylineItem.php
modules/contrib/strava/modules/strava_activities/src/Plugin/QueueWorker/StravaActivitiesQueue.php
modules/contrib/strava/modules/strava_activities/strava_activities.module
modules/contrib/strava/modules/strava_activities/strava_activity.page.inc
modules/contrib/strava/modules/strava_athletes/src/AthleteAccessControlHandler.php
modules/contrib/strava/modules/strava_athletes/src/AthleteHtmlRouteProvider.php
modules/contrib/strava/modules/strava_athletes/src/AthleteListBuilder.php
modules/contrib/strava/modules/strava_athletes/src/AthleteUserHandler.php
modules/contrib/strava/modules/strava_athletes/src/Entity/Athlete.php
modules/contrib/strava/modules/strava_athletes/src/Entity/AthleteInterface.php
modules/contrib/strava/modules/strava_athletes/src/Entity/AthleteViewsData.php
modules/contrib/strava/modules/strava_athletes/src/Form/AthleteDeleteForm.php
modules/contrib/strava/modules/strava_athletes/src/Form/AthleteForm.php
modules/contrib/strava/modules/strava_athletes/src/Form/AthleteRefreshForm.php
modules/contrib/strava/modules/strava_athletes/src/Form/AthleteSettingsForm.php
modules/contrib/strava/modules/strava_athletes/src/Manager/AthleteManager.php
modules/contrib/strava/modules/strava_athletes/src/Plugin/Field/FieldFormatter/UriImageFormatter.php
modules/contrib/strava/modules/strava_athletes/src/Plugin/Field/FieldFormatter/WeightFormatter.php
modules/contrib/strava/modules/strava_athletes/strava_athlete.page.inc
modules/contrib/strava/modules/strava_athletes/strava_athletes.install
modules/contrib/strava/modules/strava_athletes/strava_athletes.module
modules/contrib/strava/modules/strava_clubs/src/ClubAccessControlHandler.php
modules/contrib/strava/modules/strava_clubs/src/ClubHtmlRouteProvider.php
modules/contrib/strava/modules/strava_clubs/src/ClubListBuilder.php
modules/contrib/strava/modules/strava_clubs/src/Entity/Club.php
modules/contrib/strava/modules/strava_clubs/src/Entity/ClubInterface.php
modules/contrib/strava/modules/strava_clubs/src/Entity/ClubViewsData.php
modules/contrib/strava/modules/strava_clubs/src/Form/ClubDeleteForm.php
modules/contrib/strava/modules/strava_clubs/src/Form/ClubForm.php
modules/contrib/strava/modules/strava_clubs/src/Form/ClubRefreshForm.php
modules/contrib/strava/modules/strava_clubs/src/Form/ClubSettingsForm.php
modules/contrib/strava/modules/strava_clubs/src/Manager/ClubManager.php
modules/contrib/strava/modules/strava_clubs/strava_club.page.inc
modules/contrib/strava/modules/strava_clubs/strava_clubs.module
modules/contrib/strava/src/Api/OAuth.php
modules/contrib/strava/src/Api/Strava.php
modules/contrib/strava/src/Api/StravaInterface.php
modules/contrib/strava/src/Controller/StravaController.php
modules/contrib/strava/src/Form/StravaConfigurationForm.php
modules/contrib/strava/src/Manager/UserManager.php
modules/contrib/strava/src/Plugin/Block/StravaLoginBlock.php
modules/contrib/strava/src/StravaException.php
modules/contrib/strava/strava.module

24 files with changes
=====================

1) modules/contrib/strava/strava.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\Entity\User;
 use Drupal\strava\Api\Strava;
 use Drupal\strava_athletes\Entity\Athlete;

@@ @@
 /**
  * Implements hook_user_login().
  *
- * @param \Drupal\user\Entity\User $account
+ * @param User $account
  */
 function strava_user_login($account) {
   // Check if there's an active Strava session and if it matches the Drupal user
@@ @@
   if ($strava->checkAccessToken()) {
     $athlete = $strava->getApiClient()->getAthlete();
     $athlete = Athlete::load($athlete['id']);
-    /** @var \Drupal\user\Entity\User $account */
+    /** @var User $account */
     if ($account->id() !== $athlete->getUid()) {
       // If the user id does not match the athlete uid, destroy the stored
       // Strava access token for the current Drupal user.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/strava/src/Plugin/Block/StravaLoginBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava\Plugin\Block;

+use Drupal\strava_athletes\Manager\AthleteManager;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Messenger\MessengerTrait;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@

         // Try to get Strava athlete details from the database.
         if (\Drupal::moduleHandler()->moduleExists('strava_athletes')) {
-          /** @var \Drupal\strava_athletes\Manager\AthleteManager $athlete_manager */
+          /** @var AthleteManager $athlete_manager */
           $athlete_manager = \Drupal::service('strava.athlete_manager');
           $athlete = $athlete_manager->loadAthleteByProperty('uid', \Drupal::currentUser()
             ->id());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/strava/src/Manager/UserManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava\Manager;

+use Drupal\user\Entity\User;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
       'name' => $this->generateUniqueUsername($username),
       'mail' => $email,
       'init' => $email,
-      'pass' => user_password(48),
+      'pass' => \Drupal::service('password_generator')->generate(48),
       'status' => $this->getNewUserStatus(),
       'user_picture' => $this->getImageForUser($picture),
     ];
@@ @@
    * @param string $value
    *   Value to search for.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   Drupal user account if found
    *   False otherwise
    */
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/strava/src/Controller/StravaController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava\Controller;

+use Drupal\Core\Logger\LoggerChannelFactory;
+use Drupal\strava_athletes\AthleteUserHandler;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Link;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
 class StravaController extends ControllerBase {

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $loggerFactory;

   /**
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * Strava
    *
-   * @var \Drupal\strava\Api\Strava
+   * @var Strava
    */
   private $strava;

@@ @@
   /**
    * Constructs the StravaController.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param RequestStack $request_stack
+   * @param LoggerChannelFactoryInterface $logger_factory
    */
   public function __construct(RequestStack $request_stack, LoggerChannelFactoryInterface $logger_factory) {
     $this->requestStack = $request_stack;
@@ @@
   /**
    * The Strava login callback.
    *
-   * @param \Drupal\Core\Url|null $url
+   * @param Url|null $url
    *   Optional: Url where app should redirect after access token is
    *   successfully fetched.
    *
@@ @@

           // Also try to create an athlete entity if the submodule is enabled.
           if (\Drupal::moduleHandler()->moduleExists('strava_athletes')) {
-            /** @var \Drupal\strava_athletes\AthleteUserHandler $athlete_user_handler */
+            /** @var AthleteUserHandler $athlete_user_handler */
             $athlete_user_handler = \Drupal::service('strava.athlete_user_handler');
             $athlete_user_handler->setStravaDetails($athlete);
             $athlete_user_handler->connect();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/strava/src/Api/StravaInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava\Api;

+use League\OAuth2\Client\Token\AccessToken;
 interface StravaInterface {

   /**
@@ @@
    *
    * @param $code
    *
-   * @return \League\OAuth2\Client\Token\AccessToken
+   * @return AccessToken
    */
   public function getAccessToken($code);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/strava/src/Api/Strava.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava\Api;

+use Drupal\Core\Config\ImmutableConfig;
+use Strava\API\OAuth;
+use Strava\API\Client;
+use Drupal\core\TempStore\PrivateTempStore;
 use Drupal\Core\Messenger\MessengerTrait;
 use Drupal\Core\Url;
 use Drupal\Core\TempStore\TempStoreException;
@@ @@
   /**
    * Strava module configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Oauth2 client.
    *
-   * @var \Strava\API\OAuth
+   * @var OAuth
    */
   protected $provider;

@@ @@
   protected $accessToken;

   /**
-   * @var \Strava\API\Factory
+   * @var Factory
    */
   protected $factory;

   /**
-   * @var \Strava\API\Client
+   * @var Client
    */
   protected $apiClient;

@@ @@
   /**
    * @param $athlete
    *
-   * @return \Drupal\strava\Api\OAuth|\Strava\API\Client
+   * @return \Drupal\strava\Api\OAuth|Client
    */
   public function getApiClientforAthlete($athlete) {
     if (is_numeric($athlete)) {
@@ @@
   /**
    * @param int $uid
    *
-   * @return \Drupal\strava\Api\OAuth|\Strava\API\Client
+   * @return \Drupal\strava\Api\OAuth|Client
    */
   public function getApiClientForUser($uid) {
     if ($token = $this->getUserAccessToken($uid)) {
@@ @@
    * @return bool
    */
   public function checkAccessToken() {
-    /** @var \Drupal\core\TempStore\PrivateTempStore $session_data */
+    /** @var PrivateTempStore $session_data */
     $session_data = \Drupal::service('tempstore.private')->get('strava');
     $this->accessToken = $session_data->get('strava_access_token');

@@ @@
       if ($token instanceof AccessToken) {
         $token = $token->getToken();
       }
-      /** @var \Drupal\core\TempStore\PrivateTempStore $session_data */
+      /** @var PrivateTempStore $session_data */
       $session_data = \Drupal::service('tempstore.private')->get('strava');
       $session_data->set('strava_access_token', $token);
     }
@@ @@
    */
   public function deleteAccessToken() {
     try {
-      /** @var \Drupal\core\TempStore\PrivateTempStore $session_data */
+      /** @var PrivateTempStore $session_data */
       $session_data = \Drupal::service('tempstore.private')->get('strava');
       $session_data->delete('strava_access_token');
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/strava/modules/strava_clubs/src/Manager/ClubManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava_clubs\Manager;

+use Drupal\user\Entity\User;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Driver\mysql\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
 class ClubManager {

   /**
-   * @var \Drupal\Core\Database\Driver\mysql\Connection
+   * @var Connection
    */
   protected $connection;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * AthleteManager constructor.
    *
-   * @param \Drupal\Core\Database\Driver\mysql\Connection $connection
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param Connection $connection
+   * @param LoggerChannelFactoryInterface $logger_factory
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(Connection $connection, LoggerChannelFactoryInterface $logger_factory, EntityTypeManagerInterface $entity_type_manager) {
     $this->connection = $connection;
@@ @@
    * @param string $value
    *   Value to search for.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   Drupal user account if found
    *   False otherwise
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadClubByProperty($field, $value) {
     $clubs = $this->entityTypeManager
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/strava/modules/strava_clubs/src/Form/ClubSettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/strava/modules/strava_clubs/src/Form/ClubRefreshForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava_clubs\Form;

+use Drupal\strava_clubs\Entity\Club;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * Refresh entity info from Strava API.
    *
-   * @throws \Strava\API\Exception
+   * @throws Exception
    */
   public function refreshEntity() {
-    /** @var \Drupal\strava_clubs\Entity\Club $entity */
+    /** @var Club $entity */
     $entity = $this->getEntity();

     // Get the first club member we can get an API client for.
@@ @@
       foreach ($club_members as $member) {
         // Load the complete athlete object for the member.
         $athlete = Athlete::load($member);
-        /** @var \Strava\API\Client $client */
+        /** @var Client $client */
         $client = $strava->getApiClientForAthlete($athlete);
         if ($client instanceof Client) {
           // If we have a working client. Try to refresh the club details.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/strava/modules/strava_clubs/src/ClubHtmlRouteProvider.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/strava/modules/strava_clubs/src/ClubAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava_clubs;

+use Drupal\strava_clubs\Entity\ClubInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\strava_clubs\Entity\ClubInterface $entity */
+    /** @var ClubInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/strava/modules/strava_athletes/src/Manager/AthleteManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava_athletes\Manager;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Driver\mysql\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   }

   /**
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    * @param array $athlete
    *
-   * @return \Drupal\Core\Entity\EntityInterface|static
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return EntityInterface|static
+   * @throws EntityStorageException
    */
   public function createAthlete(UserInterface $user, $athlete) {
     $new_athlete = Athlete::create(
@@ @@
   /**
    * @param $athlete
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null|static
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @return EntityInterface|null|static
+   * @throws EntityStorageException
    */
   public function updateAthlete($athlete) {
     $updated_athlete = Athlete::load($athlete['id']);
@@ @@
    * @param string $value
    *   Value to search for.
    *
-   * @return \Drupal\strava_athletes\Entity\Athlete|false
+   * @return Athlete|false
    *   Stored Strava athlete object if found
    *   False otherwise
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadAthleteByProperty($field, $value) {
     $athletes = $this->entityTypeManager
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/strava/modules/strava_athletes/src/Form/AthleteSettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/strava/modules/strava_athletes/src/Form/AthleteRefreshForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava_athletes\Form;

+use Drupal\strava_athletes\Entity\Athlete;
+use Strava\API\Client;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * Refresh entity info from Strava API.
    *
-   * @throws \Strava\API\Exception
+   * @throws Exception
    */
   public function refreshEntity() {
-    /** @var \Drupal\strava_athletes\Entity\Athlete $entity */
+    /** @var Athlete $entity */
     $entity = $this->getEntity();

     $strava = new Strava();
-    /** @var \Strava\API\Client $client */
+    /** @var Client $client */
     $client = $strava->getApiClientForAthlete($entity);
     if ($client) {
       $athlete_details = $client->getAthlete($entity->id());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/strava/modules/strava_athletes/src/AthleteUserHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava_athletes;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Messenger\MessengerTrait;
 use Drupal\strava\Api\Strava;
@@ @@
   /**
    * Strava client.
    *
-   * @var \Drupal\strava\Api\Strava
+   * @var Strava
    */
   protected $strava;

@@ @@
   /**
    * The user manager service.
    *
-   * @var \Drupal\strava\Manager\UserManager
+   * @var UserManager
    */
   protected $userManager;

@@ @@
   /**
    * The user entity.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   public $user;

@@ @@
   /**
    * The athlete manager service.
    *
-   * @var \Drupal\strava_athletes\Manager\AthleteManager
+   * @var AthleteManager
    */
   protected $athleteManager;

@@ @@
   /**
    * The athlete entity.
    *
-   * @var \Drupal\strava_athletes\Entity\Athlete
+   * @var Athlete
    */
   public $athlete;

@@ @@
   /**
    * AthleteUserHandler constructor.
    *
-   * @param \Drupal\strava\Manager\UserManager $user_manager
-   * @param \Drupal\strava_athletes\Manager\AthleteManager $athlete_manager
+   * @param UserManager $user_manager
+   * @param AthleteManager $athlete_manager
    */
   public function __construct(UserManager $user_manager, AthleteManager $athlete_manager) {
     $this->userManager = $user_manager;
@@ @@
   }

   /**
-   * @return \Drupal\user\Entity\User
+   * @return User
    */
   public function getUser() {
     return $this->user;
@@ @@
   }

   /**
-   * @param \Drupal\user\Entity\User $user
+   * @param User $user
    */
   public function setUser(User $user = NULL) {
     if (is_null($user)) {
@@ @@
   }

   /**
-   * @return \Drupal\Core\Entity\EntityInterface|\Drupal\user\Entity\User|FALSE
+   * @return EntityInterface|User|FALSE
    */
   public function userCreate() {
     // If the user doesn't exist yet create a new user.
@@ @@
   }

   /**
-   * @return \Drupal\strava_athletes\Entity\Athlete
+   * @return Athlete
    */
   public function getAthlete() {
     return $this->athlete;
@@ @@
   }

   /**
-   * @param \Drupal\strava_athletes\Entity\Athlete $athlete
+   * @param Athlete $athlete
    */
   public function setAthlete(Athlete $athlete) {
     $this->athlete = $athlete;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/strava/modules/strava_athletes/src/AthleteHtmlRouteProvider.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/strava/modules/strava_athletes/src/AthleteAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava_athletes;

+use Drupal\strava_athletes\Entity\AthleteInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\strava_athletes\Entity\AthleteInterface $entity */
+    /** @var AthleteInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/strava/modules/strava_activities/src/Plugin/QueueWorker/StravaActivitiesQueue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava_activities\Plugin\QueueWorker;

+use Drupal\strava_activities\Entity\Activity;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
@@ @@
   /**
    * The queue object.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Queue\QueueInterface $queue
+   * @param QueueInterface $queue
    *   The queue object.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, QueueInterface $queue) {
@@ @@
    */
   public function processItem($data) {
     $activity_manager = \Drupal::service('strava.activity_manager');
-    /** @var \Drupal\strava_activities\Entity\Activity $activity */
+    /** @var Activity $activity */
     $activity = $activity_manager->loadActivityByProperty('id', $data['id']);

     // Update the activity details after given time.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/strava/modules/strava_activities/src/Plugin/Field/FieldFormatter/StravaMapPolylineFormatter.php:48

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * Entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The Link generator Service.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface
+   * @var LinkGeneratorInterface
    */
   protected $link;

@@ @@
   /**
    * The EntityField Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The geoPhpWrapper service.
    *
-   * @var \Drupal\geofield\GeoPHP\GeoPHPInterface
+   * @var GeoPHPInterface
    */
   protected $geoPhpWrapper;

@@ @@
   /**
    * The Renderer service property.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $renderer;

@@ @@
   /**
    * The Icon Managed File Service.
    *
-   * @var \Drupal\geofield_map\Services\MarkerIconService
+   * @var MarkerIconService
    */
   protected $markerIcon;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory for retrieving required config objects.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The Translation service.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The Link Generator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   Entity display repository service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The Entity Field Manager.
-   * @param \Drupal\geofield\GeoPHP\GeoPHPInterface $geophp_wrapper
+   * @param GeoPHPInterface $geophp_wrapper
    *   The The geoPhpWrapper.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The Renderer service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    * @param \Drupal\core\Utility\Token $token
    *   The token service.
-   * @param \Drupal\geofield_map\Services\GoogleMapsService $google_maps_service
+   * @param GoogleMapsService $google_maps_service
    *   The Google Maps service.
-   * @param \Drupal\geofield_map\Services\MarkerIconService $marker_icon_service
+   * @param MarkerIconService $marker_icon_service
    *   The Marker Icon Service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/strava/modules/strava_activities/src/Manager/ActivityManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava_activities\Manager;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Driver\mysql\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
 class ActivityManager {

   /**
-   * @var \Drupal\Core\Database\Driver\mysql\Connection
+   * @var Connection
    */
   protected $connection;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * ActivityManager constructor.
    *
-   * @param \Drupal\Core\Database\Driver\mysql\Connection $connection
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param Connection $connection
+   * @param LoggerChannelFactoryInterface $logger_factory
+   * @param EntityTypeManagerInterface $entity_type_manager
    */
   public function __construct(Connection $connection, LoggerChannelFactoryInterface $logger_factory, EntityTypeManagerInterface $entity_type_manager) {
     $this->connection = $connection;
@@ @@
   /**
    * @param array $activity
    *
-   * @return \Drupal\Core\Entity\EntityInterface|static
+   * @return EntityInterface|static
    */
   public function createActivity($activity) {

@@ @@
   /**
    * @param $activity
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null|static
+   * @return EntityInterface|null|static
    */
   public function updateActivity($activity) {

@@ @@
    * @param $id
    *
    * @return mixed
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function deleteActivity($id) {
     $activity = Activity::load($id);
@@ @@
    * @param string $value
    *   Value to search for.
    *
-   * @return \Drupal\strava_activities\Entity\Activity|false
+   * @return Activity|false
    *   Stored Strava activity object if found
    *   False otherwise
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadActivityByProperty($field, $value) {
     $activities = $this->entityTypeManager
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


21) modules/contrib/strava/modules/strava_activities/src/Form/ActivitySettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/strava/modules/strava_activities/src/Form/ActivityRefreshForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava_activities\Form;

+use Drupal\strava_activities\Entity\Activity;
+use Strava\API\Client;
+use Drupal\strava_activities\Manager\ActivityManager;
 use Drupal\Core\Entity\ContentEntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    * Refresh entity info from Strava API.
    */
   public function refreshEntity() {
-    /** @var \Drupal\strava_activities\Entity\Activity $entity */
+    /** @var Activity $entity */
     $entity = $this->getEntity();

     $strava = new Strava();
@@ @@
     $athlete = $entity->get('strava_athlete')->getValue();
     if ($athlete) {
       $athlete = $athlete[0]['target_id'];
-      /** @var \Strava\API\Client $client */
+      /** @var Client $client */
       $client = $strava->getApiClientForAthlete($athlete);
       if ($client) {
         try {
           $activity_details = $client->getActivity($entity->id());
-          /** @var \Drupal\strava_activities\Manager\ActivityManager */
+          /** @var ActivityManager */
           \Drupal::service('strava.activity_manager')
             ->updateActivity($activity_details);
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/strava/modules/strava_activities/src/ActivityHtmlRouteProvider.php:35

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/strava/modules/strava_activities/src/ActivityAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\strava_activities;

+use Drupal\strava_activities\Entity\ActivityInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\strava_activities\Entity\ActivityInterface $entity */
+    /** @var ActivityInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 24 files have been changed by Rector                                      

