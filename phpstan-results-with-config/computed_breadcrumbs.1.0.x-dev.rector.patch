diff --git a/composer.json b/composer.json
index 9c47a65..df6f136 100644
--- a/composer.json
+++ b/composer.json
@@ -4,6 +4,6 @@
   "type": "drupal-module",
   "license": "GPL-2.0-or-later",
   "require": {
-    "drupal/core": "^8.8.0 || ^9.0"
+    "drupal/core": "^8.8.0 || ^9.0 || ^10"
   }
 }
diff --git a/computed_breadcrumbs.info.yml b/computed_breadcrumbs.info.yml
index 2eea647..fe589d7 100644
--- a/computed_breadcrumbs.info.yml
+++ b/computed_breadcrumbs.info.yml
@@ -1,6 +1,6 @@
 name: Computed Breadcrumbs
 description: Provides breadcrumbs as computed fields in nodes.
 type: module
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^8.8 || ^9 || ^10
 dependencies:
   - drupal:link
diff --git a/src/Controller/BreadcrumbsExtractor.php b/src/Controller/BreadcrumbsExtractor.php
index d7bd0f2..96488b3 100644
--- a/src/Controller/BreadcrumbsExtractor.php
+++ b/src/Controller/BreadcrumbsExtractor.php
@@ -16,14 +16,14 @@ class BreadcrumbsExtractor extends ControllerBase {
   /**
    * The breadcrumb manager.
    *
-   * @var \Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface
+   * @var BreadcrumbBuilderInterface
    */
   protected $breadcrumbManager;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
@@ -48,7 +48,7 @@ class BreadcrumbsExtractor extends ControllerBase {
   /**
    * Extract the breadcrumbs and return them.
    *
-   * @return \Drupal\computed_breadcrumbs\Routing\BreadcrumbsResponse
+   * @return BreadcrumbsResponse
    *   A metatag response instance.
    */
   public function extract() {
diff --git a/src/EventListener.php b/src/EventListener.php
index 9347292..43654f6 100644
--- a/src/EventListener.php
+++ b/src/EventListener.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\computed_breadcrumbs;
 
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
@@ -17,10 +17,10 @@ class EventListener implements EventSubscriberInterface {
    * If there is a `computed_breadcrumbs` attribute on the current request,
    * pass the request to the breadcrumbs extractor.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The kernel event object.
    */
-  public function onKernelRequest(GetResponseEvent $event) {
+  public function onKernelRequest(RequestEvent $event) {
     $request = $event->getRequest();
     if ($request->attributes->has('computed_breadcrumbs')) {
       $request->attributes->set('_controller', '\Drupal\computed_breadcrumbs\Controller\BreadcrumbsExtractor:extract');
diff --git a/src/Field/ComputedBreadcrumbsItemList.php b/src/Field/ComputedBreadcrumbsItemList.php
index 8761505..abcc117 100644
--- a/src/Field/ComputedBreadcrumbsItemList.php
+++ b/src/Field/ComputedBreadcrumbsItemList.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\computed_breadcrumbs\Field;
 
+use Symfony\Component\HttpKernel\HttpKernel;
+use Symfony\Component\HttpFoundation\RequestStack;
+use Drupal\Core\Menu\MenuActiveTrail;
 use Drupal\computed_breadcrumbs\Routing\BreadcrumbsResponse;
 use Drupal\Core\Field\FieldItemList;
 use Drupal\Core\Render\RenderContext;
@@ -17,9 +20,9 @@ class ComputedBreadcrumbsItemList extends FieldItemList {
    * @inheritDoc
    */
   protected function computeValue() {
-    /** @var \Symfony\Component\HttpKernel\HttpKernel $httpKernel */
+    /** @var HttpKernel $httpKernel */
     $httpKernel = \Drupal::service('http_kernel');
-    /** @var \Symfony\Component\HttpFoundation\RequestStack $requestStack */
+    /** @var RequestStack $requestStack */
     $requestStack = \Drupal::service('request_stack');
 
     $parent = $this->getEntity();
@@ -53,7 +56,7 @@ class ComputedBreadcrumbsItemList extends FieldItemList {
     }
 
     if ($response instanceof BreadcrumbsResponse) {
-      /** @var \Drupal\Core\Menu\MenuActiveTrail $activeTrail */
+      /** @var MenuActiveTrail $activeTrail */
       $activeTrail = \Drupal::service('menu.active_trail');
       $activeTrail->clear();
       $links = $response->getBreadcrumbs();
diff --git a/src/Routing/BreadcrumbsResponse.php b/src/Routing/BreadcrumbsResponse.php
index 2d237ed..f89cf1b 100644
--- a/src/Routing/BreadcrumbsResponse.php
+++ b/src/Routing/BreadcrumbsResponse.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\computed_breadcrumbs\Routing;
 
+use Drupal\Core\Link;
 use Symfony\Component\HttpFoundation\Response;
 
 /**
@@ -12,14 +13,14 @@ class BreadcrumbsResponse extends Response {
   /**
    * The retrieved breadcrumbs.
    *
-   * @var \Drupal\Core\Link[]
+   * @var Link[]
    */
   protected $breadcrumbs;
 
   /**
    * Set the breadcrumbs value.
    *
-   * @param \Drupal\Core\Link[] $breadcrumbs
+   * @param Link[] $breadcrumbs
    *   The list of breadcrumbs.
    */
   public function setBreadcrumbs(array $breadcrumbs) {
@@ -29,7 +30,7 @@ class BreadcrumbsResponse extends Response {
   /**
    * Retrieve the list of breadcrumb links.
    *
-   * @return \Drupal\Core\Link[]
+   * @return Link[]
    *   The contained breadcrumbs list.
    */
   public function getBreadcrumbs() {
diff --git a/tests/src/Kernel/ComputedBreadcrumbsKernelTest.php b/tests/src/Kernel/ComputedBreadcrumbsKernelTest.php
index b72fdc1..8fe1e05 100644
--- a/tests/src/Kernel/ComputedBreadcrumbsKernelTest.php
+++ b/tests/src/Kernel/ComputedBreadcrumbsKernelTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\KernelTests\computed_breadcrumbs\Kernel;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Breadcrumb\Breadcrumb;
 use Drupal\Core\Link;
 use Drupal\Core\Routing\RouteMatch;
@@ -18,6 +19,7 @@ use Prophecy\Argument;
  */
 class ComputedBreadcrumbsKernelTest extends EntityKernelTestBase {
 
+  use ProphecyTrait;
   /**
    * Modules to enable.
    *
@@ -28,7 +30,7 @@ class ComputedBreadcrumbsKernelTest extends EntityKernelTestBase {
   /**
    * Set the default field storage backend for fields created during tests.
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $account = $this->createUser();
