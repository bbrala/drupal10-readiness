diff --git a/composer.json b/composer.json
index 47b00aa..d7f388d 100644
--- a/composer.json
+++ b/composer.json
@@ -4,6 +4,6 @@
     "type": "drupal-module",
     "license": "GPL-2.0-or-later",
     "require": {
-        "drupal/core": "^8.8 || ^9"
+        "drupal/core": "^9.3 || ^10"
     }
 }
diff --git a/google_tag.api.php b/google_tag.api.php
index 930b840..51628d2 100644
--- a/google_tag.api.php
+++ b/google_tag.api.php
@@ -13,7 +13,6 @@ use Drupal\google_tag\Entity\Container;
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alter the state of snippet insertion on the current page response.
  *
@@ -23,7 +22,7 @@ use Drupal\google_tag\Entity\Container;
  *
  * @param bool $satisfied
  *   The snippet insertion state.
- * @param \Drupal\google_tag\Entity\Container $container
+ * @param Container $container
  *   The associated container object.
  */
 function hook_google_tag_insert_alter(&$satisfied, Container $container) {
@@ -40,7 +39,7 @@ function hook_google_tag_insert_alter(&$satisfied, Container $container) {
  * @param array $snippets
  *   Associative array of snippets keyed by type: script, noscript and
  *   data_layer.
- * @param \Drupal\google_tag\Entity\Container $container
+ * @param Container $container
  *   The associated container object.
  */
 function hook_google_tag_snippets_alter(array &$snippets, Container $container) {
diff --git a/google_tag.info.yml b/google_tag.info.yml
index 933503b..30321fb 100644
--- a/google_tag.info.yml
+++ b/google_tag.info.yml
@@ -2,5 +2,5 @@ name: 'Google Tag Manager'
 type: module
 description: 'Allows your website analytics to be managed using Google Tag Manager.'
 package: 'Statistics'
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.3 || ^10
 configure: google_tag.settings_form
diff --git a/src/ConditionBase.php b/src/ConditionBase.php
index 22c6ed6..d4174a7 100644
--- a/src/ConditionBase.php
+++ b/src/ConditionBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\google_tag;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\Core\Executable\ExecutablePluginBase;
@@ -25,7 +26,7 @@ abstract class ConditionBase extends ExecutablePluginBase implements ConditionIn
   /**
    * The condition manager to proxy execute calls through.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected $executableManager;
 
@@ -221,7 +222,7 @@ abstract class ConditionBase extends ExecutablePluginBase implements ConditionIn
    * @param string $string
    *   The string to manipulate.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The markup object.
    */
   public function specialT($string) {
diff --git a/src/ContainerAccessControlHandler.php b/src/ContainerAccessControlHandler.php
index db5c2db..8e29fc2 100644
--- a/src/ContainerAccessControlHandler.php
+++ b/src/ContainerAccessControlHandler.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\google_tag;
 
+use Drupal\google_tag\Entity\Container;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Component\Plugin\Exception\MissingValueContextException;
 use Drupal\Core\Access\AccessResult;
@@ -27,36 +29,35 @@ class ContainerAccessControlHandler extends EntityAccessControlHandler implement
 
   // Comment next to declare resolveConditions() here.
   // use ConditionAccessResolverTrait;
-
   /**
    * The plugin context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;
 
   /**
    * The context manager service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
   /**
    * The container entity for which to check access.
    *
-   * @var \Drupal\google_tag\Entity\Container
+   * @var Container
    */
   protected $entity;
 
   /**
    * Constructs a container access control handler.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The ContextHandler for applying contexts to conditions properly.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
    */
   public function __construct(EntityTypeInterface $entity_type, ContextHandlerInterface $context_handler, ContextRepositoryInterface $context_repository) {
@@ -90,9 +91,8 @@ class ContainerAccessControlHandler extends EntityAccessControlHandler implement
 
     // @todo Why is this not default code for an entity that uses the condition
     // plugin interface? Most of it applies generally.
-
     // Store entity to have access in resolveConditions().
-    /** @var \Drupal\google_tag\Entity\Container $entity */
+    /** @var Container $entity */
     $this->entity = $entity;
 
     $conditions = [];
@@ -148,9 +148,9 @@ class ContainerAccessControlHandler extends EntityAccessControlHandler implement
   /**
    * Merges cacheable metadata from conditions onto the access result object.
    *
-   * @param \Drupal\Core\Access\AccessResult $access
+   * @param AccessResult $access
    *   The access result object.
-   * @param \Drupal\Core\Condition\ConditionInterface[] $conditions
+   * @param ConditionInterface[] $conditions
    *   List of insertion conditions.
    */
   protected function mergeCacheabilityFromConditions(AccessResult $access, array $conditions) {
diff --git a/src/ContainerController.php b/src/ContainerController.php
index 7a24644..c3c61ef 100644
--- a/src/ContainerController.php
+++ b/src/ContainerController.php
@@ -31,9 +31,9 @@ class ContainerController extends EntityController {
   /**
    * Route title callback.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
@@ -48,10 +48,10 @@ class ContainerController extends EntityController {
   /**
    * Enables a Container object.
    *
-   * @param \Drupal\google_tag\Entity\Container $google_tag_container
+   * @param Container $google_tag_container
    *   The Container object to enable.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response to the google_tag_container listing page.
    *
    * @todo The parameter name must match that used in routing.yml although the
@@ -65,10 +65,10 @@ class ContainerController extends EntityController {
   /**
    * Disables a Container object.
    *
-   * @param \Drupal\google_tag\Entity\Container $google_tag_container
+   * @param Container $google_tag_container
    *   The Container object to disable.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response to the google_tag_container listing page.
    */
   public function disable(Container $google_tag_container) {
diff --git a/src/Entity/Container.php b/src/Entity/Container.php
index 5ccc616..601b2c7 100644
--- a/src/Entity/Container.php
+++ b/src/Entity/Container.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\google_tag\Entity;
 
+use Drupal\Core\Executable\ExecutableManagerInterface;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ -203,14 +205,14 @@ class Container extends ConfigEntityBase implements ConfigEntityInterface, Entit
   /**
    * The insertion condition collection.
    *
-   * @var \Drupal\Core\Condition\ConditionPluginCollection
+   * @var ConditionPluginCollection
    */
   protected $conditionCollection;
 
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected $conditionPluginManager;
 
@@ -561,7 +563,7 @@ EOS;
       $url = $generator->transformRelative($generator->generateAbsoluteString($uri));
     }
     else {
-      $url = file_url_transform_relative(file_create_url($uri));
+      $url = \Drupal::service('file_url_generator')->generateString($uri);
     }
     $query_string = \Drupal::state()->get('system.css_js_query_string') ?: '0';
     $attachment = [
@@ -674,7 +676,7 @@ EOS;
    * @param string $instance_id
    *   The condition plugin instance ID.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface
+   * @return ConditionInterface
    *   A condition plugin.
    */
   public function getInsertionCondition($instance_id) {
@@ -708,7 +710,7 @@ EOS;
   /**
    * Returns the set of insertion conditions for this container.
    *
-   * @return \Drupal\Core\Condition\ConditionPluginCollection
+   * @return ConditionPluginCollection
    *   A collection of configured condition plugins.
    */
   public function getInsertionConditions() {
@@ -721,7 +723,7 @@ EOS;
   /**
    * Gets the condition plugin manager.
    *
-   * @return \Drupal\Core\Executable\ExecutableManagerInterface
+   * @return ExecutableManagerInterface
    *   The condition plugin manager.
    */
   protected function conditionPluginManager() {
diff --git a/src/Entity/ContainerManager.php b/src/Entity/ContainerManager.php
index 80fe83e..0147d53 100644
--- a/src/Entity/ContainerManager.php
+++ b/src/Entity/ContainerManager.php
@@ -3,6 +3,7 @@
 namespace Drupal\google_tag\Entity;
 
 // use Drupal\google_tag\Entity\ContainerManagerInterface;
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
@@ -22,42 +23,42 @@ class ContainerManager implements ContainerManagerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
diff --git a/src/Entity/ContainerManagerInterface.php b/src/Entity/ContainerManagerInterface.php
index 6068cb9..9a7981b 100644
--- a/src/Entity/ContainerManagerInterface.php
+++ b/src/Entity/ContainerManagerInterface.php
@@ -18,17 +18,17 @@ interface ContainerManagerInterface {
   /**
    * Constructs a ContainerManager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, FileSystemInterface $file_system, CacheBackendInterface $cache, MessengerInterface $messenger, LoggerChannelFactoryInterface $logger_factory);
@@ -38,7 +38,7 @@ interface ContainerManagerInterface {
    *
    * @todo Which class-interface to use on @param?
    *
-   * @param Drupal\Core\Config\Entity\ConfigEntityInterface $container
+   * @param ConfigEntityInterface $container
    *   The container configuration entity.
    *
    * @return bool
@@ -49,7 +49,7 @@ interface ContainerManagerInterface {
   /**
    * Saves JS snippet files based on current settings.
    *
-   * @param Drupal\Core\Config\Entity\ConfigEntityInterface $container
+   * @param ConfigEntityInterface $container
    *   The container configuration entity.
    *
    * @return bool
@@ -92,7 +92,7 @@ interface ContainerManagerInterface {
   /**
    * Deletes snippet files for a container.
    *
-   * @param Drupal\Core\Config\Entity\ConfigEntityInterface $container
+   * @param ConfigEntityInterface $container
    *   The container configuration entity.
    *
    * @return bool
@@ -103,7 +103,7 @@ interface ContainerManagerInterface {
   /**
    * Finds snippet files for a container.
    *
-   * @param Drupal\Core\Config\Entity\ConfigEntityInterface $container
+   * @param ConfigEntityInterface $container
    *   The container configuration entity.
    *
    * @return bool
diff --git a/src/Form/ContainerForm.php b/src/Form/ContainerForm.php
index 446a42c..6203f43 100644
--- a/src/Form/ContainerForm.php
+++ b/src/Form/ContainerForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\google_tag\Form;
 
+use Drupal\Core\Condition\ConditionManager;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Executable\ExecutableManagerInterface;
@@ -20,14 +22,14 @@ class ContainerForm extends EntityForm {
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;
 
@@ -41,9 +43,9 @@ class ContainerForm extends EntityForm {
   /**
    * Constructs a ContainerForm object.
    *
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $condition_manager
+   * @param ExecutableManagerInterface $condition_manager
    *   The ConditionManager for building the insertion conditions.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
    */
   public function __construct(ExecutableManagerInterface $condition_manager, ContextRepositoryInterface $context_repository) {
@@ -172,7 +174,7 @@ class ContainerForm extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -191,7 +193,7 @@ class ContainerForm extends EntityForm {
         $condition = $conditions->get($condition_id);
       }
       else {
-        /** @var \Drupal\Core\Condition\ConditionInterface $condition */
+        /** @var ConditionInterface $condition */
         $condition = $this->conditionManager->createInstance($condition_id, []);
       }
       $form_state->set(['conditions', $condition_id], $condition);
@@ -211,9 +213,9 @@ class ContainerForm extends EntityForm {
   /**
    * Returns the form elements from the condition plugin object.
    *
-   * @param \Drupal\Core\Condition\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   The condition plugin.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -245,7 +247,7 @@ class ContainerForm extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function validateConditionsForm(array $form, FormStateInterface $form_state) {
@@ -271,7 +273,7 @@ class ContainerForm extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function submitConditionsForm(array $form, FormStateInterface $form_state) {
@@ -319,14 +321,14 @@ class ContainerForm extends EntityForm {
    *   The machine name.
    * @param array $element
    *   An array containing the structure of the 'id' element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
    *   Whether or not the container machine name is taken.
    */
   public function containerExists($value, array $element, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $container */
+    /** @var ConfigEntityInterface $container */
     $container = $form_state->getFormObject()->getEntity();
     return (bool) $this->entityTypeManager->getStorage($container->getEntityTypeId())
       ->getQuery()
diff --git a/src/Form/ContainerTrait.php b/src/Form/ContainerTrait.php
index ea21ffa..71dbf4c 100644
--- a/src/Form/ContainerTrait.php
+++ b/src/Form/ContainerTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\google_tag\Form;
 
+use Drupal\google_tag\Entity\Container;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
@@ -12,7 +13,7 @@ trait ContainerTrait {
   /**
    * The container entity.
    *
-   * @var \Drupal\google_tag\Entity\Container
+   * @var Container
    */
   protected $container;
 
diff --git a/src/Plugin/Condition/Domain.php b/src/Plugin/Condition/Domain.php
index d82bc49..9201c83 100644
--- a/src/Plugin/Condition/Domain.php
+++ b/src/Plugin/Condition/Domain.php
@@ -34,7 +34,7 @@ class Domain extends ConditionBase implements ContainerFactoryPluginInterface {
    *
    * @param \Drupal\domain\DomainNegotiator $domain_negotiator
    *   The domain negotiator service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage_manager
+   * @param EntityStorageInterface $storage_manager
    *   The entity storage manager.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
diff --git a/src/Plugin/Condition/Language.php b/src/Plugin/Condition/Language.php
index ef99d1b..5098924 100644
--- a/src/Plugin/Condition/Language.php
+++ b/src/Plugin/Condition/Language.php
@@ -25,14 +25,14 @@ class Language extends ConditionBase implements ContainerFactoryPluginInterface
   /**
    * The Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a language condition plugin.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    * @param array $configuration
    *   The plugin configuration, i.e. an array with configuration values keyed
diff --git a/tests/src/Functional/GTMMultipleTest.php b/tests/src/Functional/GTMMultipleTest.php
index 6acd621..99f07e8 100644
--- a/tests/src/Functional/GTMMultipleTest.php
+++ b/tests/src/Functional/GTMMultipleTest.php
@@ -88,7 +88,7 @@ class GTMMultipleTest extends GTMTestBase {
           $url = $generator->transformRelative($generator->generateAbsoluteString($uri));
         }
         else {
-          $url = file_url_transform_relative(file_create_url($uri));
+          $url = \Drupal::service('file_url_generator')->generateString($uri);
         }
         $function = "verify{$type}Tag";
         $this->$function($url, $this->variables[$key]);
diff --git a/tests/src/Functional/GTMTestBase.php b/tests/src/Functional/GTMTestBase.php
index 22e5a13..3a6cd04 100644
--- a/tests/src/Functional/GTMTestBase.php
+++ b/tests/src/Functional/GTMTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\google_tag\Functional;
 
+use Drupal\user\Entity\User;
 use Drupal\google_tag\Entity\Container;
 use Drupal\Tests\BrowserTestBase;
 
@@ -41,14 +42,14 @@ abstract class GTMTestBase extends BrowserTestBase {
   /**
    * The admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
   /**
    * The non-admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $nonAdminUser;
 
@@ -62,7 +63,7 @@ abstract class GTMTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->defaultTheme = 'stark';
     parent::setUp();
     $this->basePath = $this->config('google_tag.settings')->get('uri');
