modules/contrib/cl_inject/src/Service/ComponentRenderer.php
modules/contrib/cl_inject/src/Twig/ComponentNodeVisitor.php
modules/contrib/cl_inject/src/Twig/TwigExtension.php
modules/contrib/cl_inject/src/Twig/tag/ComponentNode.php
modules/contrib/cl_inject/src/Twig/tag/ComponentTokenParser.php

4 files with changes
====================

1) modules/contrib/cl_inject/src/Twig/tag/ComponentTokenParser.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * Parses the Component token.
    *
-   * @param \Twig\Token $token
+   * @param Token $token
    *   The token.
    *
    * @return ComponentNode
    *   The node.
    *
-   * @throws \Twig\Error\SyntaxError
+   * @throws SyntaxError
    */
   public function parse(Token $token): ComponentNode {
     $lineno = $token->getLine();
@@ @@
   /**
    * Parse the endinject name.
    *
-   * @param \Twig\Token $token
+   * @param Token $token
    *   The token.
    *
-   * @return \Twig\Node\Expression\ConstantExpression
+   * @return ConstantExpression
    *   The name of the closing tag.
    *
-   * @throws \Twig\Error\SyntaxError
+   * @throws SyntaxError
    */
   protected function parseEndComponentName(Token $token): ConstantExpression {
     $stream = $this->parser->getStream();
@@ @@
    * @return array
    *   The parsed arguments.
    *
-   * @throws \Twig\Error\SyntaxError
+   * @throws SyntaxError
    */
   protected function parseArguments(): array {
     $stream = $this->parser->getStream();
@@ @@
    *
    * Must return true when the expected end tag is reached.
    *
-   * @param \Twig\Token $token
+   * @param Token $token
    *   The token.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/cl_inject/src/Twig/tag/ComponentNode.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * ComponentNode constructor.
    *
-   * @param \Twig\Node\Expression\AbstractExpression $expr
+   * @param AbstractExpression $expr
    *   The expression.
-   * @param \Twig\Node\Expression\ConstantExpression $variant
+   * @param ConstantExpression $variant
    *   The variant.
-   * @param \Twig\Node\Expression\AbstractExpression|null $variables
+   * @param AbstractExpression|null $variables
    *   The variables.
    * @param int $lineno
    *   The line number.
@@ @@
   /**
    * Compiles.
    *
-   * @param \Twig\Compiler $compiler
+   * @param Compiler $compiler
    *   The compiler.
    *
    * @throws \Drupal\cl_inject\Exception\ComponentSyntaxException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/cl_inject/src/Twig/TwigExtension.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\cl_inject\Service\ComponentRenderer
+   * @var ComponentRenderer
    */
   private ComponentRenderer $renderer;

@@ @@
   /**
    * TwigComponentExtension constructor.
    *
-   * @param \Drupal\cl_inject\Service\ComponentRenderer $component_renderer
+   * @param ComponentRenderer $component_renderer
    *   The component renderer.
    */
   public function __construct(ComponentRenderer $component_renderer) {
@@ @@
   /**
    * Creates a Twig compiler.
    *
-   * @return \Twig\Compiler
+   * @return Compiler
    *   The compiler.
    */
   public function createCompiler(): Compiler {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/cl_inject/src/Service/ComponentRenderer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\cl_inject\Service;

+use Drupal\cl_components\Exception\ComponentNotFoundException;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\cl_components\Component\Component;
 use Drupal\cl_components\Component\ComponentDiscovery;
 use Drupal\cl_components\Exception\InvalidComponentException;
@@ @@
   /**
    * The twig environment.
    *
-   * @var \Twig\Environment
+   * @var Environment
    */
   private Environment $environment;

@@ @@
   /**
    * The component discovery.
    *
-   * @var \Drupal\cl_components\Component\ComponentDiscovery
+   * @var ComponentDiscovery
    */
   private ComponentDiscovery $componentDiscovery;

@@ @@
   /**
    * The Drupal renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   private RendererInterface $drupalRenderer;

@@ @@
   /**
    * Creates a new ComponentRenderer.
    *
-   * @param \Drupal\Core\Render\RendererInterface $drupal_renderer
+   * @param RendererInterface $drupal_renderer
    *   The drupal renderer.
-   * @param \Drupal\cl_components\Component\ComponentDiscovery $component_discovery
+   * @param ComponentDiscovery $component_discovery
    *   The discovery.
    */
   public function __construct(RendererInterface $drupal_renderer, ComponentDiscovery $component_discovery) {
@@ @@
    * @return string
    *   The rendered markup.
    *
-   * @throws \Drupal\cl_components\Exception\ComponentNotFoundException
-   * @throws \Drupal\cl_components\Exception\TemplateNotFoundException
+   * @throws ComponentNotFoundException
+   * @throws TemplateNotFoundException
    */
   public function renderTemplate(string $name, array $context = [], string $variant = ''): string {
     $component = $this->componentDiscovery->find($name);
@@ @@
    *
    * @param array $props
    *   The props from the render array or template.
-   * @param \Drupal\cl_components\Component\Component $component
+   * @param Component $component
    *   The component object.
    *
-   * @throws \Drupal\cl_components\Exception\InvalidComponentException
+   * @throws InvalidComponentException
    */
   private function validateProps(array $props, Component $component): void {
     $validator = new Validator();
@@ @@
    * @return array
    *   The rendered markup.
    *
-   * @throws \Drupal\cl_components\Exception\ComponentNotFoundException
-   * @throws \Drupal\cl_components\Exception\InvalidComponentException
-   * @throws \Drupal\cl_components\Exception\TemplateNotFoundException
-   * @throws \Twig\Error\LoaderError
-   * @throws \Twig\Error\SyntaxError
+   * @throws ComponentNotFoundException
+   * @throws InvalidComponentException
+   * @throws TemplateNotFoundException
+   * @throws LoaderError
+   * @throws SyntaxError
    */
   public function createRenderArray(string $name, array $props = [], string $variant = '', string $children = '', array $context = []): array {
     $component = $this->componentDiscovery->find($name);
@@ @@
    * @param array $context
    *   Additional context for the template.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string|mixed
+   * @return MarkupInterface|string|mixed
    *   The rendered markup.
    *
    * @throws \Exception
@@ @@
   /**
    * Sets the Twig environment.
    *
-   * @param \Twig\Environment $environment
+   * @param Environment $environment
    *   The environment.
    */
   public function setTwigEnvironment(Environment $environment): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 4 files have been changed by Rector                                       

