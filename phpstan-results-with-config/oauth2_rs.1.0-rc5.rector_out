modules/contrib/oauth2_rs/oauth2_rs.install
modules/contrib/oauth2_rs/oauth2_rs.module
modules/contrib/oauth2_rs/src/Annotation/AuthorizationValidator.php
modules/contrib/oauth2_rs/src/Authentication/Provider/JWTAuthenticationProvider.php
modules/contrib/oauth2_rs/src/Authentication/TokenAuthUser.php
modules/contrib/oauth2_rs/src/Authentication/TokenAuthUserInterface.php
modules/contrib/oauth2_rs/src/Form/Oauth2TokenSettingsForm.php
modules/contrib/oauth2_rs/src/PageCache/DisallowOauthRequests.php
modules/contrib/oauth2_rs/src/PageCache/OauthRequestPolicyInterface.php
modules/contrib/oauth2_rs/src/Plugin/AuthorizationValidatorPluginBase.php
modules/contrib/oauth2_rs/src/Plugin/AuthorizationValidatorPluginInterface.php
modules/contrib/oauth2_rs/src/Plugin/AuthorizationValidatorPluginManager.php
modules/contrib/oauth2_rs/src/Plugin/AuthorizationValidators/BearerTokenValidator.php
modules/contrib/oauth2_rs/src/Plugin/AuthorizationValidators/CognitoBearerValidator.php
modules/contrib/oauth2_rs/src/Server/ResourceServer.php
modules/contrib/oauth2_rs/src/Server/ResourceServerInterface.php
modules/contrib/oauth2_rs/src/Service/FileSystemChecker.php
modules/contrib/oauth2_rs/src/Service/UserAuthManager.php
modules/contrib/oauth2_rs/src/Service/UserAuthManagerInterface.php
modules/contrib/oauth2_rs/tests/src/Functional/OauthRsTestTrait.php
modules/contrib/oauth2_rs/tests/src/Unit/Authentication/Provider/JWTAuthenticationProviderTest.php

16 files with changes
=====================

1) modules/contrib/oauth2_rs/tests/src/Unit/Authentication/Provider/JWTAuthenticationProviderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\oauth2_rs\Unit\Authentication\Provider;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ @@
  */
 class JWTAuthenticationProviderTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The authentication provider.
    *
-   * @var \Drupal\oauth2_rs\Authentication\Provider\JWTAuthenticationProvider
+   * @var JWTAuthenticationProvider
    */
   protected $provider;

@@ @@
   /**
    * The OAuth page cache request policy.
    *
-   * @var \Drupal\oauth2_rs\PageCache\OauthRequestPolicyInterface
+   * @var OauthRequestPolicyInterface
    */
   protected $oauthPageCacheRequestPolicy;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/oauth2_rs/tests/src/Functional/OauthRsTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\oauth2_rs\Functional;

+use Drupal\Core\File\FileSystemInterface;
 /**
  * Trait with methods needed by tests.
  */
@@ @@

     chmod($public_key_path, 0660);

-    /** @var \Drupal\Core\File\FileSystemInterface $filesystem */
+    /** @var FileSystemInterface $filesystem */
     $filesystem = \Drupal::service('file_system');

     $settings = $this->config('oauth2_rs.settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/oauth2_rs/src/Service/UserAuthManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oauth2_rs\Service;

+use Drupal\consumers\Entity\Consumer;
+use Drupal\Core\Session\AccountProxyInterface;
 /**
  * Interface UserAuth.
  */
@@ @@
    * @param string $role
    *   User role.
    *
-   * @return \Drupal\consumers\Entity\Consumer
+   * @return Consumer
    *   Consumer entity related with a given role.
    */
   public function getUserConsumerByRole(string $role);
@@ @@
    * @param string $language
    *   Language.
    *
-   * @return \Drupal\Core\Session\AccountProxyInterface
+   * @return AccountProxyInterface
    *   Account object.
    */
   public function createAccount(string $email, string $username, string $role, string $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/oauth2_rs/src/Service/UserAuthManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oauth2_rs\Service;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Password\PasswordGeneratorInterface;
@@ @@
   /**
    * Drupal\Core\Entity\EntityManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Password Generator Interface.
    *
-   * @var \Drupal\Core\Password\PasswordGeneratorInterface
+   * @var PasswordGeneratorInterface
    */
   protected $passwordGenerator;

@@ @@
   /**
    * Constructs a new UserAuthService object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory.
-   * @param \Drupal\Core\Password\PasswordGeneratorInterface $passwordGenerator
+   * @param PasswordGeneratorInterface $passwordGenerator
    *   Password Generator Interface.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, ConfigFactoryInterface $configFactory) {
@@ @@
   public function createAccount($email, $username, $role, $language = 'en') {
     $user = $this->entityTypeManager->getStorage('user')->create([]);
     // Using password generator.
-    $user->setPassword(user_password(10));
+    $user->setPassword(\Drupal::service('password_generator')->generate(10));
     $user->enforceIsNew();
     $user->setEmail($email);
     $user->setUsername($username);
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/oauth2_rs/src/Server/ResourceServerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oauth2_rs\Server;

+use League\OAuth2\Server\Exception\OAuthServerException;
 use Symfony\Component\HttpFoundation\Request;

 /**
@@ @@
   /**
    * Determine the access token validity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @throws \League\OAuth2\Server\Exception\OAuthServerException
+   * @throws OAuthServerException
    *   OAuth server exception.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   The request object augmented with the token information.
    */
   public function validateAuthenticatedRequest(Request $request);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/oauth2_rs/src/Server/ResourceServer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oauth2_rs\Server;

+use Drupal\oauth2_rs\Plugin\AuthorizationValidatorPluginManager;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\oauth2_rs\AuthorizationValidators\BearerTokenValidator;
@@ @@
   /**
    * Http Message factory.
    *
-   * @var \Symfony\Bridge\PsrHttpMessage\HttpMessageFactoryInterface
+   * @var HttpMessageFactoryInterface
    */
   protected $messageFactory;

@@ @@
   /**
    * Authorization Validator manager.
    *
-   * @var \Drupal\oauth2_rs\Plugin\AuthorizationValidatorPluginManager
+   * @var AuthorizationValidatorPluginManager
    */
   protected $authValidatorManager;

@@ @@
   /**
    * New server instance.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Symfony\Bridge\PsrHttpMessage\HttpMessageFactoryInterface $message_factory
+   * @param HttpMessageFactoryInterface $message_factory
    *   Message factory.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $authValidatorManager
+   * @param PluginManagerInterface $authValidatorManager
    *   Authorization Validator manager.
-   * @param \League\OAuth2\Server\AuthorizationValidators\AuthorizationValidatorInterface|null $authorization_validator
+   * @param AuthorizationValidatorInterface|null $authorization_validator
    *   Authorization bearer token validator.
    */
   public function __construct(
@@ @@
   /**
    * Get authorization validator.
    *
-   * @return \League\OAuth2\Server\AuthorizationValidators\AuthorizationValidatorInterface
+   * @return AuthorizationValidatorInterface
    *   Authorization validator.
    */
   protected function getAuthorizationValidator() {
@@ @@
     if ($this->authorizationValidator instanceof AuthorizationValidatorInterface === FALSE) {
       $validator_id = $this->config->get('validator');
       $config = $this->configFactory->get('oauth2_rs.settings.' . $validator_id);
-      /** @var \Drupal\oauth2_rs\Plugin\AuthorizationValidatorPluginManager $plugin_manager */
+      /** @var AuthorizationValidatorPluginManager $plugin_manager */
       $this->authorizationValidator = $this->authValidatorManager->createInstance($validator_id, $config->getRawData());
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/oauth2_rs/src/Plugin/AuthorizationValidators/CognitoBearerValidator.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oauth2_rs\Plugin\AuthorizationValidators;

+use CoderCat\JWKToPEM\Exception\Base64DecodeException;
+use CoderCat\JWKToPEM\Exception\JWKConverterException;
 use CoderCat\JWKToPEM\JWKConverter;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(
@@ @@
   /**
    * Get Public keys from cognito jwks and convert to PEMs.
    *
-   * @throws \CoderCat\JWKToPEM\Exception\Base64DecodeException
-   * @throws \CoderCat\JWKToPEM\Exception\JWKConverterException
+   * @throws Base64DecodeException
+   * @throws JWKConverterException
    */
   public function setPublicKeys() {
     // Public keys cache id.
@@ @@
   /**
    * Enrich request by the data from Token using mappings.
    *
-   * @param \Psr\Http\Message\ServerRequestInterface $request
-   * @param \Lcobucci\JWT\Token $token
+   * @param ServerRequestInterface $request
+   * @param Token $token
    *
-   * @return \Psr\Http\Message\ServerRequestInterface
+   * @return ServerRequestInterface
    */
   public function enrichRequest(ServerRequestInterface $request, Token $token): ServerRequestInterface {
     $claims = $token->claims();
@@ @@
    * Get Id Token from request. This is required for Cognito on the first
    * request.
    *
-   * @param \Psr\Http\Message\ServerRequestInterface $request
+   * @param ServerRequestInterface $request
    *
-   * @return bool|\Lcobucci\JWT\Token
-   * @throws \League\OAuth2\Server\Exception\OAuthServerException
+   * @return bool|Token
+   * @throws OAuthServerException
    */
   protected function getIdToken(ServerRequestInterface $request) {
     // If there are no IdToken in request - softly proceed with the process.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/oauth2_rs/src/Plugin/AuthorizationValidators/BearerTokenValidator.php:40

    ---------- begin diff ----------
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(
@@ @@
   /**
    * Set the public key.
    *
-   * @param \League\OAuth2\Server\CryptKey $key
+   * @param CryptKey $key
    *   Public key.
    */
   public function setPublicKey(CryptKey $key) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/oauth2_rs/src/Plugin/AuthorizationValidatorPluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/oauth2_rs/src/Plugin/AuthorizationValidatorPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oauth2_rs\Plugin;

+use League\OAuth2\Server\CryptKey;
 use BadMethodCallException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * Public key.
    *
-   * @var \League\OAuth2\Server\CryptKey
+   * @var CryptKey
    */
   protected $publicKey;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(
@@ @@
   /**
    * Get Token.
    *
-   * @param \Psr\Http\Message\ServerRequestInterface $request
+   * @param ServerRequestInterface $request
    *
-   * @return \Lcobucci\JWT\Token
-   * @throws \League\OAuth2\Server\Exception\OAuthServerException
+   * @return Token
+   * @throws OAuthServerException
    */
   public function getToken(ServerRequestInterface $request): Token {
     if ($request->hasHeader('authorization') === FALSE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/oauth2_rs/src/PageCache/OauthRequestPolicyInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a state whether the request has an OAuth2 access token.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The incoming request object.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/oauth2_rs/src/Form/Oauth2TokenSettingsForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The file system checker.
    *
-   * @var \Drupal\oauth2_rs\Service\FileSystemChecker
+   * @var FileSystemChecker
    */
   protected $fileSystemChecker;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Authorization validator plugin manager.
    *
-   * @var \Drupal\oauth2_rs\Plugin\AuthorizationValidatorPluginManager
+   * @var AuthorizationValidatorPluginManager
    */
   protected $validatorTypeManager;

@@ @@
   /**
    * Oauth2TokenSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The factory for configuration objects.
-   * @param \Drupal\oauth2_rs\Service\FileSystemChecker $file_system_checker
+   * @param FileSystemChecker $file_system_checker
    *   The oauth2_rs.filesystem service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(
@@ @@
   /**
    * Creates the form.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    *
    * @return \Drupal\oauth2_rs\Entity\Form\Oauth2TokenSettingsForm
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $element
    *   The element being processed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/oauth2_rs/src/Authentication/TokenAuthUserInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oauth2_rs\Authentication;

+use Lcobucci\JWT\Token;
+use Drupal\consumers\Entity\Consumer;
 use Drupal\user\UserInterface;

 /**
@@ @@
   /**
    * Get the token.
    *
-   * @return \Lcobucci\JWT\Token
+   * @return Token
    *   The provided OAuth2 token.
    */
   public function getToken();
@@ @@
   /**
    * Get the activated consumer.
    *
-   * @return \Drupal\consumers\Entity\Consumer
+   * @return Consumer
    *   The activated consumer after authentication.
    */
   public function getConsumer();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/oauth2_rs/src/Authentication/TokenAuthUser.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oauth2_rs\Authentication;

+use Drupal\user\RoleStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\consumers\Entity\Consumer;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The decorator subject.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * The bearer token.
    *
-   * @var \Lcobucci\JWT\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The activated consumer instance.
    *
-   * @var \Drupal\consumers\Entity\Consumer
+   * @var Consumer
    */
   protected $consumer;

@@ @@
   /**
    * Constructs a TokenAuthUser object.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User Account.
-   * @param \Lcobucci\JWT\Token $token
+   * @param Token $token
    *   The underlying token.
-   * @param \Drupal\consumers\Entity\Consumer $consumer
+   * @param Consumer $consumer
    *   Consumer object related with given User role.
    *
-   * @throws \League\OAuth2\Server\Exception\OAuthServerException
+   * @throws OAuthServerException
    *   When there is no user.
    */
   public function __construct(AccountInterface $account, Token $token, Consumer $consumer) {
@@ @@
   /**
    * Returns the role storage object.
    *
-   * @return \Drupal\user\RoleStorageInterface
+   * @return RoleStorageInterface
    *   The role storage object.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getRoleStorage() {
-    /** @var \Drupal\user\RoleStorageInterface $storage */
+    /** @var RoleStorageInterface $storage */
     $storage = \Drupal::entityTypeManager()->getStorage('user_role');
     return $storage;
   }
@@ @@
    * {@inheritdoc}
    */
   public function urlInfo($rel = 'canonical', array $options = []) {
-    return $this->user->urlInfo($rel, $options);
+    return $this->user->toUrl($rel, $options);
   }

   /**
@@ @@
    * {@inheritdoc}
    */
   public function link($text = NULL, $rel = 'canonical', array $options = []) {
-    return $this->user->link($text, $rel, $options);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Please confirm that `$user` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+    return $this->user->toLink($text, $rel, $options)->toString();
   }

   /**
    ----------- end diff -----------

Applied rules:
 * EntityInterfaceLinkRector
 * EntityInterfaceUrlInfoRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


15) modules/contrib/oauth2_rs/src/Authentication/Provider/JWTAuthenticationProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oauth2_rs\Authentication\Provider;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\oauth2_rs\Service\UserAuthManager;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\consumers\Entity\Consumer;
 use Drupal\Core\Authentication\AuthenticationProviderInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * Resource server.
    *
-   * @var \Drupal\oauth2_rs\Server\ResourceServerInterface
+   * @var ResourceServerInterface
    */
   protected $resourceServer;

@@ @@
   /**
    * User Auth manager.
    *
-   * @var \Drupal\oauth2_rs\Service\UserAuthManager
+   * @var UserAuthManager
    */
   protected $userAuthManager;

@@ @@
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request|null
+   * @var Request|null
    */
   protected $currentRequest;

@@ @@
   /**
    * Constructs a HTTP basic authentication provider object.
    *
-   * @param \Drupal\oauth2_rs\Server\ResourceServerInterface $resource_server
+   * @param ResourceServerInterface $resource_server
    *   The resource server object.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\oauth2_rs\PageCache\OauthRequestPolicyInterface $page_cache_request_policy
+   * @param OauthRequestPolicyInterface $page_cache_request_policy
    *   The page cache request policy.
-   * @param \Drupal\oauth2_rs\Service\UserAuthManagerInterface $user_auth_manager
+   * @param UserAuthManagerInterface $user_auth_manager
    *   User Auth manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language Manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   Request Stack.
    */
   public function __construct(
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \League\OAuth2\Server\Exception\OAuthServerException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
+   * @throws OAuthServerException
    */
   public function authenticate(Request $request) {
     // Update the request with the OAuth information.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/oauth2_rs/src/Annotation/AuthorizationValidator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\oauth2_rs\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 16 files have been changed by Rector                                      

