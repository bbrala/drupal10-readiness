diff --git a/login_destination.module b/login_destination.module
index f767704..c01e20f 100644
--- a/login_destination.module
+++ b/login_destination.module
@@ -165,7 +165,7 @@ function login_destination_entity_presave(EntityInterface $entity) {
  *
  * @param string $trigger
  *   Action of login destination rule.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   User Account.
  */
 function login_destination_perform_redirect($trigger, AccountInterface $account) {
diff --git a/src/Controller/LoginDestinationListBuilder.php b/src/Controller/LoginDestinationListBuilder.php
index ba165bb..e81d945 100644
--- a/src/Controller/LoginDestinationListBuilder.php
+++ b/src/Controller/LoginDestinationListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\login_destination\Controller;
 
+use Drupal\login_destination\Entity\LoginDestination;
 use Drupal\Core\Config\Entity\DraggableListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -46,7 +47,7 @@ class LoginDestinationListBuilder extends DraggableListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\login_destination\Entity\LoginDestination $entity */
+    /** @var LoginDestination $entity */
     $row['label'] = $entity->getLabel();
 
     if ($entity->isDestinationCurrent()) {
diff --git a/src/Entity/LoginDestination.php b/src/Entity/LoginDestination.php
index 24eb8c7..33aae95 100644
--- a/src/Entity/LoginDestination.php
+++ b/src/Entity/LoginDestination.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\login_destination\Entity;
 
+use Drupal\Core\Render\Markup;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -330,7 +331,7 @@ class LoginDestination extends ConfigEntityBase implements LoginDestinationInter
    * @param string $empty_message
    *   Default empty message.
    *
-   * @return string|\Drupal\Core\Render\Markup
+   * @return string|Markup
    *   List of items or empty message.
    */
   protected function renderItemList(array $array, $empty_message) {
diff --git a/src/Form/LoginDestinationDeleteRuleForm.php b/src/Form/LoginDestinationDeleteRuleForm.php
index f272309..291ff7a 100644
--- a/src/Form/LoginDestinationDeleteRuleForm.php
+++ b/src/Form/LoginDestinationDeleteRuleForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\login_destination\Form;
 
+use Drupal\login_destination\Entity\LoginDestination;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -15,7 +16,7 @@ class LoginDestinationDeleteRuleForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function getQuestion() {
-    /** @var \Drupal\login_destination\Entity\LoginDestination $login_destination */
+    /** @var LoginDestination $login_destination */
     $login_destination = $this->entity;
     return $this->t('Are you sure you want to delete the login destination "@destination"?', [
       '@destination' => $login_destination->getLabel(),
@@ -40,7 +41,7 @@ class LoginDestinationDeleteRuleForm extends EntityConfirmFormBase {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\login_destination\Entity\LoginDestination $login_destination */
+    /** @var LoginDestination $login_destination */
     $login_destination = $this->entity;
     $login_destination->delete();
     $this->messenger()->addMessage($this->t('The login destination %destination has been deleted.', [
diff --git a/src/Form/LoginDestinationRuleForm.php b/src/Form/LoginDestinationRuleForm.php
index 834210e..ae62cf2 100644
--- a/src/Form/LoginDestinationRuleForm.php
+++ b/src/Form/LoginDestinationRuleForm.php
@@ -21,23 +21,23 @@ class LoginDestinationRuleForm extends EntityForm {
   /**
    * The login destination entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $loginDestinationStorage;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a base class for login destination add and edit forms.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $login_destination_storage
+   * @param EntityStorageInterface $login_destination_storage
    *   The login destination entity storage.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $login_destination_storage, LanguageManagerInterface $language_manager) {
@@ -59,7 +59,7 @@ class LoginDestinationRuleForm extends EntityForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\login_destination\Entity\LoginDestination $login_destination */
+    /** @var LoginDestination $login_destination */
     $login_destination = $this->entity;
 
     $form['label'] = [
@@ -197,7 +197,7 @@ class LoginDestinationRuleForm extends EntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var  \Drupal\login_destination\Entity\LoginDestination $login_destination */
+    /** @var LoginDestination $login_destination */
     $login_destination = $this->entity;
 
     if ($login_destination->save()) {
diff --git a/src/LoginDestinationManager.php b/src/LoginDestinationManager.php
index e53e855..30f9d2e 100644
--- a/src/LoginDestinationManager.php
+++ b/src/LoginDestinationManager.php
@@ -23,77 +23,77 @@ class LoginDestinationManager implements LoginDestinationManagerInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The alias manager that caches alias lookups based on the request.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;
 
   /**
    * The path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
 
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The alias manager.
-   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   * @param PathMatcherInterface $path_matcher
    *   The path matcher.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, AliasManagerInterface $alias_manager, PathMatcherInterface $path_matcher, CurrentPathStack $current_path, ConfigFactoryInterface $config_factory, RequestStack $request_stack, LanguageManagerInterface $language_manager, Token $token) {
@@ -127,7 +127,7 @@ class LoginDestinationManager implements LoginDestinationManagerInterface {
     // Get user roles.
     $user_roles = $account->getRoles();
 
-    /** @var \Drupal\login_destination\Entity\LoginDestination $destination */
+    /** @var LoginDestination $destination */
     foreach ($destinations as $destination) {
 
       if (!$destination->isEnabled()) {
diff --git a/src/LoginDestinationManagerInterface.php b/src/LoginDestinationManagerInterface.php
index 946b122..b36bc8d 100644
--- a/src/LoginDestinationManagerInterface.php
+++ b/src/LoginDestinationManagerInterface.php
@@ -15,10 +15,10 @@ interface LoginDestinationManagerInterface {
    *
    * @param string $trigger
    *   Trigger.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User account.
    *
-   * @return bool|\Drupal\login_destination\Entity\LoginDestination
+   * @return bool|LoginDestination
    *   Returns either FALSE or a LoginDestination object.
    */
   public function findDestination($trigger, AccountInterface $account);
@@ -26,7 +26,7 @@ interface LoginDestinationManagerInterface {
   /**
    * Prepare request destination provided by login destination rule.
    *
-   * @param \Drupal\login_destination\Entity\LoginDestination $destination
+   * @param LoginDestination $destination
    *   Login destination rule.
    */
   public function prepareDestination(LoginDestination $destination);
diff --git a/src/LoginDestinationToolbarLinkBuilder.php b/src/LoginDestinationToolbarLinkBuilder.php
index 1ac9238..8e4618a 100644
--- a/src/LoginDestinationToolbarLinkBuilder.php
+++ b/src/LoginDestinationToolbarLinkBuilder.php
@@ -14,25 +14,25 @@ class LoginDestinationToolbarLinkBuilder extends ToolbarLinkBuilder {
   /**
    * The decorated service.
    *
-   * @var \Drupal\user\ToolbarLinkBuilder
+   * @var ToolbarLinkBuilder
    */
   protected $innerService;
 
   /**
    * The current path service.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
   /**
    * ToolbarHandler constructor.
    *
-   * @param \Drupal\user\ToolbarLinkBuilder $inner_service
+   * @param ToolbarLinkBuilder $inner_service
    *   The decorated service.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The current user.
    */
   public function __construct(ToolbarLinkBuilder $inner_service, CurrentPathStack $current_path, AccountProxyInterface $account) {
diff --git a/tests/src/Functional/InstallTest.php b/tests/src/Functional/InstallTest.php
index 4c3594d..2b7edd7 100644
--- a/tests/src/Functional/InstallTest.php
+++ b/tests/src/Functional/InstallTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\login_destination\Functional;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Extension\ModuleInstallerInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -19,21 +21,21 @@ class InstallTest extends BrowserTestBase {
   /**
    * Module handler to ensure installed modules.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   public $moduleHandler;
 
   /**
    * Module installer.
    *
-   * @var \Drupal\Core\Extension\ModuleInstallerInterface
+   * @var ModuleInstallerInterface
    */
   public $moduleInstaller;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->moduleHandler = $this->container->get('module_handler');
     $this->moduleInstaller = $this->container->get('module_installer');
@@ -79,7 +81,7 @@ class InstallTest extends BrowserTestBase {
     $this->drupalLogin($admin);
 
     // Assert that expanded links are present in the HTML.
-    $this->assertRaw('class="toolbar-icon toolbar-icon-user-admin-index"');
+    $this->assertSession()->responseContains('class="toolbar-icon toolbar-icon-user-admin-index"');
   }
 
 }
