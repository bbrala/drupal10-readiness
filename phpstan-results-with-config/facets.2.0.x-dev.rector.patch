diff --git a/facets.install b/facets.install
index 457a2f6..a8c73b8 100644
--- a/facets.install
+++ b/facets.install
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\facets\FacetInterface;
+use Drupal\facets\FacetSourceInterface;
 /**
  * @file
  * Update hooks for the facets module.
@@ -45,7 +47,7 @@ function facets_update_8001() {
   // replaced from views_page:foo to search_api:views_page__foo.
   $old_ids = ['views_page', 'views_block', 'views_rest'];
 
-  /** @var \Drupal\facets\FacetInterface[] $entities */
+  /** @var FacetInterface[] $entities */
   $entities = Facet::loadMultiple();
   foreach ($entities as $entity) {
     $facetSourceId = $entity->getFacetSourceId();
@@ -58,7 +60,7 @@ function facets_update_8001() {
     }
   }
 
-  /** @var \Drupal\facets\FacetSourceInterface[] $facetsources */
+  /** @var FacetSourceInterface[] $facetsources */
   $facetsources = FacetSource::loadMultiple();
   foreach ($facetsources as $facetsource) {
     $as_array = $facetsource->toArray();
@@ -224,7 +226,7 @@ function facets_update_8009() {
 function facets_update_8010() {
   $facet_storage = \Drupal::entityTypeManager()->getStorage('facets_facet');
   $processed_views = [];
-  /** @var \Drupal\facets\FacetInterface $facet */
+  /** @var FacetInterface $facet */
   foreach ($facet_storage->loadMultiple() as $facet) {
     if (
       ($source = $facet->getFacetSource())
diff --git a/facets.module b/facets.module
index 7c9ae08..c0f1aea 100644
--- a/facets.module
+++ b/facets.module
@@ -1,5 +1,15 @@
 <?php
 
+use Drupal\facets\FacetSource\FacetSourcePluginManager;
+use Drupal\facets\FacetManager\DefaultFacetManager;
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\facets\FacetSource\FacetSourcePluginBase;
+use Drupal\facets\FacetSourceInterface;
+use Drupal\facets\UrlProcessor\UrlProcessorPluginManager;
+use Drupal\facets\UrlProcessor\UrlProcessorInterface;
+use Drupal\facets\Result\ResultInterface;
+use Drupal\facets\LanguageSwitcherLinksAlterer;
 /**
  * @file
  * Contains facets.module.
@@ -82,7 +92,7 @@ function facets_entity_presave(EntityInterface $entity) {
   if ($entity instanceof View && !empty($entity->original)) {
     if ($entity->original->get('display') != $entity->get('display')) {
 
-      /** @var \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_plugin_manager */
+      /** @var FacetSourcePluginManager $facet_source_plugin_manager */
       $facet_source_plugin_manager = \Drupal::getContainer()
         ->get('plugin.manager.facets.facet_source');
       $definitions = $facet_source_plugin_manager->getDefinitions();
@@ -107,7 +117,7 @@ function facets_entity_presave(EntityInterface $entity) {
       // Loop over all deleted sources and delete the facets that were linked to
       // that source.
       if (count($sources) > 0) {
-        /** @var \Drupal\facets\FacetManager\DefaultFacetManager $fm */
+        /** @var DefaultFacetManager $fm */
         $fm = \Drupal::getContainer()->get('facets.manager');
         foreach ($sources as $source) {
           $facets = $fm->getFacetsByFacetSourceId($source);
@@ -224,16 +234,16 @@ function facets_preprocess_facets_item_list(array &$variables) {
  * Implements hook_system_breadcrumb_alter().
  */
 function facets_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInterface $route_match, array $context) {
-  /** @var \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_manager */
+  /** @var FacetSourcePluginManager $facet_source_manager */
   $facet_source_manager = \Drupal::service('plugin.manager.facets.facet_source');
 
-  /** @var \Drupal\facets\FacetManager\DefaultFacetManager $facet_manager */
+  /** @var DefaultFacetManager $facet_manager */
   $facet_manager = \Drupal::service('facets.manager');
 
-  /** @var \Drupal\Core\Entity\EntityTypeManager $entity_type_manager */
+  /** @var EntityTypeManager $entity_type_manager */
   $entity_type_manager = \Drupal::service('entity_type.manager');
 
-  /** @var \Drupal\Core\Entity\EntityStorageInterface $facet_source_storage */
+  /** @var EntityStorageInterface $facet_source_storage */
   $facet_source_storage = $entity_type_manager->getStorage('facets_facet_source');
 
   $facet_sources_definitions = $facet_source_manager->getDefinitions();
@@ -246,7 +256,7 @@ function facets_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInter
   }
 
   foreach ($facet_sources_definitions as $definition) {
-    /** @var \Drupal\facets\FacetSource\FacetSourcePluginBase $facet_source_plugin */
+    /** @var FacetSourcePluginBase $facet_source_plugin */
     $facetsource_id = $definition['id'];
     $facet_source_plugin = $facet_source_manager->createInstance($facetsource_id);
 
@@ -257,7 +267,7 @@ function facets_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInter
     }
 
     $source_id = str_replace(':', '__', $facetsource_id);
-    /** @var \Drupal\facets\FacetSourceInterface $facet_source */
+    /** @var FacetSourceInterface $facet_source */
     $facet_source = $facet_source_storage->load($source_id);
 
     // If the facet source is not loaded, or the facet source doesn't have
@@ -279,7 +289,7 @@ function facets_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInter
       return (int) $a->getWeight() - $b->getWeight();
     });
 
-    /** @var \Drupal\facets\UrlProcessor\UrlProcessorPluginManager $url_processor_manager */
+    /** @var UrlProcessorPluginManager $url_processor_manager */
     $url_processor_manager = \Drupal::service('plugin.manager.facets.url_processor');
 
     // Get active facets and results to use them at building the crumbs.
@@ -289,7 +299,7 @@ function facets_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInter
       if (count($facet->getActiveItems()) > 0) {
         // Add the facet as a cacheable dependency.
         $breadcrumb->addCacheableDependency($facet);
-        /** @var \Drupal\facets\UrlProcessor\UrlProcessorInterface $url_processor */
+        /** @var UrlProcessorInterface $url_processor */
         $url_processor = $url_processor_manager->createInstance($facet_source->getUrlProcessorName(), ['facet' => $facet]);
         $facet_manager->build($facet);
 
@@ -314,7 +324,7 @@ function facets_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInter
     // without all the other request parameters; with this we could implement:
     // @see https://www.drupal.org/node/2861586
     // @todo handle not grouped facets.
-    /** @var \Drupal\facets\Result\ResultInterface[] $facet_results */
+    /** @var ResultInterface[] $facet_results */
     foreach ($active_results as $facet_id => $facet_results) {
       $facet_used_result[$facet_id] = [];
       $facet_crumb_items = [];
@@ -346,7 +356,7 @@ function facets_system_breadcrumb_alter(Breadcrumb &$breadcrumb, RouteMatchInter
  * Implements hook_language_switch_links_alter().
  */
 function facets_language_switch_links_alter(array &$links, $type, Url $url) {
-  /** @var \Drupal\facets\LanguageSwitcherLinksAlterer $alterer */
+  /** @var LanguageSwitcherLinksAlterer $alterer */
   $alterer = \Drupal::service('facets.language_switcher_links_alterer');
   $alterer->alter($links, $type, $url);
 }
diff --git a/modules/facets_range_widget/src/Plugin/facets/processor/RangeSliderProcessor.php b/modules/facets_range_widget/src/Plugin/facets/processor/RangeSliderProcessor.php
index 62cf04a..28932c6 100644
--- a/modules/facets_range_widget/src/Plugin/facets/processor/RangeSliderProcessor.php
+++ b/modules/facets_range_widget/src/Plugin/facets/processor/RangeSliderProcessor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets_range_widget\Plugin\facets\processor;
 
+use Drupal\facets\Plugin\facets\processor\UrlProcessorHandler;
+use Drupal\facets\Result\ResultInterface;
 use Drupal\facets\FacetInterface;
 use Drupal\facets\Processor\BuildProcessorInterface;
 use Drupal\facets\Processor\PreQueryProcessorInterface;
@@ -43,7 +45,7 @@ class RangeSliderProcessor extends SliderProcessor implements PreQueryProcessorI
    * {@inheritdoc}
    */
   public function build(FacetInterface $facet, array $results) {
-    /** @var \Drupal\facets\Plugin\facets\processor\UrlProcessorHandler $url_processor_handler */
+    /** @var UrlProcessorHandler $url_processor_handler */
     $url_processor_handler = $facet->getProcessors()['url_processor_handler'];
     $url_processor = $url_processor_handler->getProcessor();
     $active_filters = $url_processor->getActiveFilters();
@@ -52,7 +54,7 @@ class RangeSliderProcessor extends SliderProcessor implements PreQueryProcessorI
       unset($active_filters['']);
     }
 
-    /** @var \Drupal\facets\Result\ResultInterface[] $results */
+    /** @var ResultInterface[] $results */
     foreach ($results as &$result) {
       $new_active_filters = $active_filters;
       unset($new_active_filters[$facet->id()]);
diff --git a/modules/facets_range_widget/tests/src/Unit/Plugin/processor/RangeSliderProcessorTest.php b/modules/facets_range_widget/tests/src/Unit/Plugin/processor/RangeSliderProcessorTest.php
index 92b9248..5768344 100644
--- a/modules/facets_range_widget/tests/src/Unit/Plugin/processor/RangeSliderProcessorTest.php
+++ b/modules/facets_range_widget/tests/src/Unit/Plugin/processor/RangeSliderProcessorTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\facets_range_widget\Unit\Plugin\processor;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\facets\Result\ResultInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Routing\UrlGeneratorInterface;
@@ -23,10 +25,11 @@ use Prophecy\Argument;
  */
 class RangeSliderProcessorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The processor we're testing.
    *
-   * @var \Drupal\facets_range_widget\Plugin\facets\processor\RangeSliderProcessor
+   * @var RangeSliderProcessor
    */
   protected $processor;
 
@@ -81,7 +84,7 @@ class RangeSliderProcessorTest extends UnitTestCase {
     $facet->getUrlAlias()->willReturn('animals');
     $facet->id()->willReturn('animals');
 
-    /** @var \Drupal\facets\Result\ResultInterface[] $results */
+    /** @var ResultInterface[] $results */
     $results = [
       new Result($facet->reveal(), 1, 1, 1),
       new Result($facet->reveal(), 5, 5, 5),
diff --git a/modules/facets_range_widget/tests/src/Unit/Plugin/processor/SliderProcessorTest.php b/modules/facets_range_widget/tests/src/Unit/Plugin/processor/SliderProcessorTest.php
index 8ab01f0..aa8198c 100644
--- a/modules/facets_range_widget/tests/src/Unit/Plugin/processor/SliderProcessorTest.php
+++ b/modules/facets_range_widget/tests/src/Unit/Plugin/processor/SliderProcessorTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\facets_range_widget\Unit\Plugin\processor;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\facets\Processor\ProcessorInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\facets\Entity\Facet;
 use Drupal\facets\Plugin\facets\widget\ArrayWidget;
@@ -18,10 +20,11 @@ use Drupal\Tests\UnitTestCase;
  */
 class SliderProcessorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The processor we're testing.
    *
-   * @var \Drupal\facets\Processor\ProcessorInterface
+   * @var ProcessorInterface
    */
   protected $processor;
 
diff --git a/modules/facets_range_widget/tests/src/Unit/Plugin/widget/SliderWidgetTest.php b/modules/facets_range_widget/tests/src/Unit/Plugin/widget/SliderWidgetTest.php
index a7eb42d..e5e80a8 100644
--- a/modules/facets_range_widget/tests/src/Unit/Plugin/widget/SliderWidgetTest.php
+++ b/modules/facets_range_widget/tests/src/Unit/Plugin/widget/SliderWidgetTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets_range_widget\Unit\Plugin\widget;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Routing\UrlGeneratorInterface;
 use Drupal\Core\Url;
 use Drupal\facets\Entity\Facet;
@@ -18,6 +19,7 @@ use Symfony\Component\DependencyInjection\ContainerBuilder;
  */
 class SliderWidgetTest extends WidgetTestBase {
 
+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
diff --git a/modules/facets_rest/src/Plugin/views/style/FacetsSerializer.php b/modules/facets_rest/src/Plugin/views/style/FacetsSerializer.php
index a8a7a81..ff88137 100644
--- a/modules/facets_rest/src/Plugin/views/style/FacetsSerializer.php
+++ b/modules/facets_rest/src/Plugin/views/style/FacetsSerializer.php
@@ -25,7 +25,7 @@ class FacetsSerializer extends Serializer {
   /**
    * Tha facet manager.
    *
-   * @var \Drupal\facets\FacetManager\DefaultFacetManager
+   * @var DefaultFacetManager
    */
   protected $facetsManager;
 
diff --git a/modules/facets_searchbox_widget/tests/src/Unit/Plugin/widget/SearchboxLinksWidgetTest.php b/modules/facets_searchbox_widget/tests/src/Unit/Plugin/widget/SearchboxLinksWidgetTest.php
index 357b224..032ad17 100644
--- a/modules/facets_searchbox_widget/tests/src/Unit/Plugin/widget/SearchboxLinksWidgetTest.php
+++ b/modules/facets_searchbox_widget/tests/src/Unit/Plugin/widget/SearchboxLinksWidgetTest.php
@@ -245,9 +245,7 @@ class SearchboxLinksWidgetTest extends LinksWidgetTest {
    * Sets up a container.
    */
   protected function createContainer() {
-    $router = $this->getMockBuilder(TestRouterInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $router = $this->createMock(TestRouterInterface::class);
     $router->expects($this->any())
       ->method('matchRequest')
       ->willReturn([
@@ -255,21 +253,15 @@ class SearchboxLinksWidgetTest extends LinksWidgetTest {
         '_route' => 'test',
       ]);
 
-    $url_processor = $this->getMockBuilder(UrlProcessorInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url_processor = $this->createMock(UrlProcessorInterface::class);
 
-    $manager = $this->getMockBuilder(FacetSourcePluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $manager = $this->createMock(FacetSourcePluginManager::class);
     $manager->expects($this->exactly(1))
       ->method('createInstance')
       ->willReturn($url_processor);
 
     $storage = $this->createMock(EntityStorageInterface::class);
-    $em = $this->getMockBuilder(EntityTypeManagerInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $em = $this->createMock(EntityTypeManagerInterface::class);
     $em->expects($this->exactly(1))
       ->method('getStorage')
       ->willReturn($storage);
diff --git a/modules/facets_summary/facets_summary.install b/modules/facets_summary/facets_summary.install
index acb30e5..56a093a 100644
--- a/modules/facets_summary/facets_summary.install
+++ b/modules/facets_summary/facets_summary.install
@@ -14,7 +14,7 @@ use Drupal\facets_summary\Plugin\facets_summary\processor\ResetFacetsProcessor;
  * Convert summaries on Search Api facet sources to use the display plugin.
  */
 function facets_summary_update_8001() {
-  /** @var \Drupal\facets_summary\FacetsSummaryInterface[] $entities */
+  /** @var FacetsSummaryInterface[] $entities */
   $entities = FacetsSummary::loadMultiple();
   foreach ($entities as $entity) {
     $facetSourceId = $entity->getFacetSourceId();
diff --git a/modules/facets_summary/src/Annotation/SummaryProcessor.php b/modules/facets_summary/src/Annotation/SummaryProcessor.php
index 9e36a35..bfc487a 100644
--- a/modules/facets_summary/src/Annotation/SummaryProcessor.php
+++ b/modules/facets_summary/src/Annotation/SummaryProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets_summary\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class SummaryProcessor extends Plugin {
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -35,7 +36,7 @@ class SummaryProcessor extends Plugin {
   /**
    * The plugin description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/modules/facets_summary/src/Entity/FacetsSummary.php b/modules/facets_summary/src/Entity/FacetsSummary.php
index 86c5360..93e47f6 100644
--- a/modules/facets_summary/src/Entity/FacetsSummary.php
+++ b/modules/facets_summary/src/Entity/FacetsSummary.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\facets_summary\Entity;
 
+use Drupal\facets\FacetSource\FacetSourcePluginInterface;
+use Drupal\facets_summary\Processor\ProcessorInterface;
+use Drupal\facets\FacetSource\FacetSourcePluginManager;
+use Drupal\facets\Processor\ProcessorPluginManager;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\facets_summary\FacetsSummaryInterface;
 
@@ -70,7 +74,7 @@ class FacetsSummary extends ConfigEntityBase implements FacetsSummaryInterface {
   /**
    * The facet source belonging to this facet summary.
    *
-   * @var \Drupal\facets\FacetSource\FacetSourcePluginInterface
+   * @var FacetSourcePluginInterface
    *
    * @see getFacetSource()
    */
@@ -86,7 +90,7 @@ class FacetsSummary extends ConfigEntityBase implements FacetsSummaryInterface {
   /**
    * Cached information about the processors available for this facet.
    *
-   * @var \Drupal\facets_summary\Processor\ProcessorInterface[]|null
+   * @var ProcessorInterface[]|null
    *
    * @see loadProcessors()
    */
@@ -137,7 +141,7 @@ class FacetsSummary extends ConfigEntityBase implements FacetsSummaryInterface {
    */
   public function getFacetSource() {
     if (!$this->facet_source_instance && $this->facet_source_id) {
-      /** @var \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_plugin_manager */
+      /** @var FacetSourcePluginManager $facet_source_plugin_manager */
       $facet_source_plugin_manager = \Drupal::service('plugin.manager.facets.facet_source');
       $this->facet_source_instance = $facet_source_plugin_manager->createInstance($this->facet_source_id, ['facets_summary' => $this]);
     }
@@ -170,7 +174,7 @@ class FacetsSummary extends ConfigEntityBase implements FacetsSummaryInterface {
   /**
    * Retrieves all processors supported by this facets summary.
    *
-   * @return \Drupal\facets_summary\Processor\ProcessorInterface[]
+   * @return ProcessorInterface[]
    *   The loaded processors, keyed by processor ID.
    */
   protected function loadProcessors() {
@@ -178,7 +182,7 @@ class FacetsSummary extends ConfigEntityBase implements FacetsSummaryInterface {
       return $this->processors;
     }
 
-    /** @var \Drupal\facets\Processor\ProcessorPluginManager $processor_plugin_manager */
+    /** @var ProcessorPluginManager $processor_plugin_manager */
     $processor_plugin_manager = \Drupal::service('plugin.manager.facets_summary.processor');
     $processor_settings = $this->getProcessorConfigs();
 
@@ -188,7 +192,7 @@ class FacetsSummary extends ConfigEntityBase implements FacetsSummaryInterface {
         $settings = empty($processor_settings[$name]['settings']) ? [] : $processor_settings[$name]['settings'];
         $settings['facets_summary'] = $this;
 
-        /** @var \Drupal\facets_summary\Processor\ProcessorInterface $processor */
+        /** @var ProcessorInterface $processor */
         $processor = $processor_plugin_manager->createInstance($name, $settings);
         $this->processors[$name] = $processor;
       }
diff --git a/modules/facets_summary/src/EventSubscriber/SearchApiSubscriber.php b/modules/facets_summary/src/EventSubscriber/SearchApiSubscriber.php
index 26b3036..e02ea06 100644
--- a/modules/facets_summary/src/EventSubscriber/SearchApiSubscriber.php
+++ b/modules/facets_summary/src/EventSubscriber/SearchApiSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets_summary\EventSubscriber;
 
+use Drupal\facets_summary\FacetsSummaryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\search_api\Event\QueryPreExecuteEvent;
 use Drupal\search_api\Event\SearchApiEvents;
@@ -17,14 +18,14 @@ class SearchApiSubscriber implements EventSubscriberInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ -44,7 +45,7 @@ class SearchApiSubscriber implements EventSubscriberInterface {
     $storage = $this->entityTypeManager->getStorage('facets_summary');
     // Get all the facet summaries for the facet source.
     $facet_summaries = $storage->loadByProperties(['facet_source_id' => $facet_source_id]);
-    /** @var \Drupal\facets_summary\FacetsSummaryInterface $facet_summary */
+    /** @var FacetsSummaryInterface $facet_summary */
     foreach ($facet_summaries as $facet_summary) {
       $processors = $facet_summary->getProcessors();
       // If the count processor is enabled, results count must not be skipped.
diff --git a/modules/facets_summary/src/FacetsSummaryBlockInterface.php b/modules/facets_summary/src/FacetsSummaryBlockInterface.php
index 37ba325..79196e9 100644
--- a/modules/facets_summary/src/FacetsSummaryBlockInterface.php
+++ b/modules/facets_summary/src/FacetsSummaryBlockInterface.php
@@ -10,7 +10,7 @@ interface FacetsSummaryBlockInterface {
   /**
    * Returns the facets_summary entity associated with this derivative.
    *
-   * @return \Drupal\facets_summary\FacetsSummaryInterface
+   * @return FacetsSummaryInterface
    *   The facets_summary entity.
    */
   public function getEntity();
diff --git a/modules/facets_summary/src/FacetsSummaryInterface.php b/modules/facets_summary/src/FacetsSummaryInterface.php
index 7ee8241..75dfce7 100644
--- a/modules/facets_summary/src/FacetsSummaryInterface.php
+++ b/modules/facets_summary/src/FacetsSummaryInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets_summary;
 
+use Drupal\facets\FacetSource\FacetSourcePluginInterface;
+use Drupal\facets_summary\Processor\ProcessorInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -41,7 +43,7 @@ interface FacetsSummaryInterface extends ConfigEntityInterface {
   /**
    * Returns the plugin instance of a facet source.
    *
-   * @return \Drupal\facets\FacetSource\FacetSourcePluginInterface
+   * @return FacetSourcePluginInterface
    *   The plugin instance for the facet source.
    */
   public function getFacetSource();
@@ -90,7 +92,7 @@ interface FacetsSummaryInterface extends ConfigEntityInterface {
    * @param bool $only_enabled
    *   Only return enabled processors.
    *
-   * @return \Drupal\facets_summary\Processor\ProcessorInterface[]
+   * @return ProcessorInterface[]
    *   An array of processors.
    */
   public function getProcessors($only_enabled = TRUE);
@@ -105,7 +107,7 @@ interface FacetsSummaryInterface extends ConfigEntityInterface {
    *   (optional) If FALSE, also include disabled processors. Otherwise, only
    *   load enabled ones.
    *
-   * @return \Drupal\facets_summary\Processor\ProcessorInterface[]
+   * @return ProcessorInterface[]
    *   An array of all enabled (or available, if if $only_enabled is FALSE)
    *   processors that support the given stage, ordered by the weight for that
    *   stage.
diff --git a/modules/facets_summary/src/FacetsSummaryManager/DefaultFacetsSummaryManager.php b/modules/facets_summary/src/FacetsSummaryManager/DefaultFacetsSummaryManager.php
index 105c438..1f145f3 100644
--- a/modules/facets_summary/src/FacetsSummaryManager/DefaultFacetsSummaryManager.php
+++ b/modules/facets_summary/src/FacetsSummaryManager/DefaultFacetsSummaryManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets_summary\FacetsSummaryManager;
 
+use Drupal\facets\Entity\Facet;
+use Drupal\facets\Result\ResultInterface;
 use Drupal\Core\Link;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\facets\Exception\InvalidProcessorException;
@@ -27,32 +29,32 @@ class DefaultFacetsSummaryManager {
   /**
    * The facet source plugin manager.
    *
-   * @var \Drupal\facets\FacetSource\FacetSourcePluginManager
+   * @var FacetSourcePluginManager
    */
   protected $facetSourcePluginManager;
 
   /**
    * The processor plugin manager.
    *
-   * @var \Drupal\facets_summary\Processor\ProcessorPluginManager
+   * @var ProcessorPluginManager
    */
   protected $processorPluginManager;
 
   /**
    * The Facet Manager.
    *
-   * @var \Drupal\facets\FacetManager\DefaultFacetManager
+   * @var DefaultFacetManager
    */
   protected $facetManager;
 
   /**
    * Constructs a new instance of the DefaultFacetManager.
    *
-   * @param \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_manager
+   * @param FacetSourcePluginManager $facet_source_manager
    *   The facet source plugin manager.
-   * @param \Drupal\facets_summary\Processor\ProcessorPluginManager $processor_plugin_manager
+   * @param ProcessorPluginManager $processor_plugin_manager
    *   The facets summary processor plugin manager.
-   * @param \Drupal\facets\FacetManager\DefaultFacetManager $facet_manager
+   * @param DefaultFacetManager $facet_manager
    *   The facet manager service.
    */
   public function __construct(FacetSourcePluginManager $facet_source_manager, ProcessorPluginManager $processor_plugin_manager, DefaultFacetManager $facet_manager) {
@@ -72,20 +74,20 @@ class DefaultFacetsSummaryManager {
    * Before doing any rendering, the processors that implement the
    * BuildProcessorInterface enabled on this facet will run.
    *
-   * @param \Drupal\facets_summary\FacetsSummaryInterface $facets_summary
+   * @param FacetsSummaryInterface $facets_summary
    *   The facet we should build.
    *
    * @return array
    *   Facet render arrays.
    *
-   * @throws \Drupal\facets\Exception\InvalidProcessorException
+   * @throws InvalidProcessorException
    *   Throws an exception when an invalid processor is linked to the facet.
    */
   public function build(FacetsSummaryInterface $facets_summary) {
     // Let the facet_manager build the facets.
     $facetsource_id = $facets_summary->getFacetSourceId();
 
-    /** @var \Drupal\facets\Entity\Facet[] $facets */
+    /** @var Facet[] $facets */
     $facets = $this->facetManager->getFacetsByFacetSourceId($facetsource_id);
     // Get the current results from the facets and let all processors that
     // trigger on the build step do their build processing.
@@ -145,7 +147,7 @@ class DefaultFacetsSummaryManager {
    *
    * @param bool $show_count
    *   Show the count next to the facet.
-   * @param \Drupal\facets\Result\ResultInterface[] $results
+   * @param ResultInterface[] $results
    *   Facet results array.
    *
    * @return array
diff --git a/modules/facets_summary/src/Form/FacetsSummaryForm.php b/modules/facets_summary/src/Form/FacetsSummaryForm.php
index 0c2e7b4..d2bef60 100644
--- a/modules/facets_summary/src/Form/FacetsSummaryForm.php
+++ b/modules/facets_summary/src/Form/FacetsSummaryForm.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\facets_summary\Form;
 
+use Drupal\facets\FacetInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\facets_summary\FacetsSummaryInterface;
+use Drupal\facets\Processor\ProcessorInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -20,48 +25,48 @@ class FacetsSummaryForm extends EntityForm {
   /**
    * The facet being configured.
    *
-   * @var \Drupal\facets\FacetInterface
+   * @var FacetInterface
    */
   protected $facet;
 
   /**
    * The facet storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $facetSummaryStorage;
 
   /**
    * The plugin manager for facet sources.
    *
-   * @var \Drupal\facets\FacetSource\FacetSourcePluginManager
+   * @var FacetSourcePluginManager
    */
   protected $facetSourcePluginManager;
 
   /**
    * The facet manager service.
    *
-   * @var \Drupal\facets\FacetManager\DefaultFacetManager
+   * @var DefaultFacetManager
    */
   protected $facetManager;
 
   /**
    * The facets_summary processor plugin manager service.
    *
-   * @var \Drupal\facets_summary\Processor\ProcessorPluginManager
+   * @var ProcessorPluginManager
    */
   protected $processorPluginManager;
 
   /**
    * Constructs an FacetDisplayForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_plugin_manager
+   * @param FacetSourcePluginManager $facet_source_plugin_manager
    *   The plugin manager for facet sources.
-   * @param \Drupal\facets\FacetManager\DefaultFacetManager $facet_manager
+   * @param DefaultFacetManager $facet_manager
    *   The Default Facet Manager.
-   * @param \Drupal\facets_summary\Processor\ProcessorPluginManager $processor_plugin_manager
+   * @param ProcessorPluginManager $processor_plugin_manager
    *   The Facets Summary Processor Plugin Manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FacetSourcePluginManager $facet_source_plugin_manager, DefaultFacetManager $facet_manager, ProcessorPluginManager $processor_plugin_manager) {
@@ -77,16 +82,16 @@ class FacetsSummaryForm extends EntityForm {
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManager $entity_type_manager */
+    /** @var EntityTypeManager $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');
 
-    /** @var \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_plugin_manager */
+    /** @var FacetSourcePluginManager $facet_source_plugin_manager */
     $facet_source_plugin_manager = $container->get('plugin.manager.facets.facet_source');
 
-    /** @var \Drupal\facets\FacetManager\DefaultFacetManager $facet_manager */
+    /** @var DefaultFacetManager $facet_manager */
     $facet_manager = $container->get('facets.manager');
 
-    /** @var \Drupal\facets_summary\Processor\ProcessorPluginManager $processor_plugin_manager */
+    /** @var ProcessorPluginManager $processor_plugin_manager */
     $processor_plugin_manager = $container->get('plugin.manager.facets_summary.processor');
 
     return new static($entity_type_manager, $facet_source_plugin_manager, $facet_manager, $processor_plugin_manager);
@@ -105,7 +110,7 @@ class FacetsSummaryForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form['#attached']['library'][] = 'facets/drupal.facets.admin_css';
 
-    /** @var \Drupal\facets_summary\FacetsSummaryInterface $facets_summary */
+    /** @var FacetsSummaryInterface $facets_summary */
     $facets_summary = $this->entity;
 
     $form['#tree'] = TRUE;
@@ -290,7 +295,7 @@ class FacetsSummaryForm extends EntityForm {
     // Fill in the containers previously created with the processors that are
     // enabled on the facet.
     foreach ($processors_by_stage as $stage => $processors) {
-      /** @var \Drupal\facets\Processor\ProcessorInterface $processor */
+      /** @var ProcessorInterface $processor */
       foreach ($processors as $processor_id => $processor) {
         $weight = $processor_settings[$processor_id]['weights'][$stage] ?? $processor->getDefaultWeight($stage);
         if ($processor->isHidden()) {
@@ -336,7 +341,7 @@ class FacetsSummaryForm extends EntityForm {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
 
-    /** @var \Drupal\facets_summary\FacetsSummaryInterface $facets_summary */
+    /** @var FacetsSummaryInterface $facets_summary */
     $facets_summary = $this->entity;
 
     $values = $form_state->getValues();
@@ -360,7 +365,7 @@ class FacetsSummaryForm extends EntityForm {
     $values = $form_state->getValues();
 
     // Store processor settings.
-    /** @var \Drupal\facets_summary\FacetsSummaryInterface $facets_summary */
+    /** @var FacetsSummaryInterface $facets_summary */
     $facets_summary = $this->entity;
 
     /** @var \Drupal\facets_summary\Processor\ProcessorInterface $processor */
diff --git a/modules/facets_summary/src/Form/FacetsSummarySettingsForm.php b/modules/facets_summary/src/Form/FacetsSummarySettingsForm.php
index 6d71ae4..be192d0 100644
--- a/modules/facets_summary/src/Form/FacetsSummarySettingsForm.php
+++ b/modules/facets_summary/src/Form/FacetsSummarySettingsForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\facets_summary\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Block\BlockManager;
+use Drupal\facets_summary\FacetsSummaryInterface;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -21,52 +25,52 @@ class FacetsSummarySettingsForm extends EntityForm {
   /**
    * The facet storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $facetSummaryStorage;
 
   /**
    * The plugin manager for facet sources.
    *
-   * @var \Drupal\facets\FacetSource\FacetSourcePluginManager
+   * @var FacetSourcePluginManager
    */
   protected $facetSourcePluginManager;
 
   /**
    * The facet manager service.
    *
-   * @var \Drupal\facets\FacetManager\DefaultFacetManager
+   * @var DefaultFacetManager
    */
   protected $facetManager;
 
   /**
    * The facets_summary processor plugin manager service.
    *
-   * @var \Drupal\facets_summary\Processor\ProcessorPluginManager
+   * @var ProcessorPluginManager
    */
   protected $processorPluginManager;
 
   /**
    * The block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * Constructs an FacetDisplayForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_plugin_manager
+   * @param FacetSourcePluginManager $facet_source_plugin_manager
    *   The plugin manager for facet sources.
-   * @param \Drupal\facets\FacetManager\DefaultFacetManager $facet_manager
+   * @param DefaultFacetManager $facet_manager
    *   The Default Facet Manager.
-   * @param \Drupal\facets_summary\Processor\ProcessorPluginManager $processor_plugin_manager
+   * @param ProcessorPluginManager $processor_plugin_manager
    *   The Facets Summary Processor Plugin Manager.
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   The block manager.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, FacetSourcePluginManager $facet_source_plugin_manager, DefaultFacetManager $facet_manager, ProcessorPluginManager $processor_plugin_manager, BlockManagerInterface $block_manager, UrlGeneratorInterface $url_generator) {
@@ -83,22 +87,22 @@ class FacetsSummarySettingsForm extends EntityForm {
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container) {
-    /** @var \Drupal\Core\Entity\EntityTypeManager $entity_type_manager */
+    /** @var EntityTypeManager $entity_type_manager */
     $entity_type_manager = $container->get('entity_type.manager');
 
-    /** @var \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_plugin_manager */
+    /** @var FacetSourcePluginManager $facet_source_plugin_manager */
     $facet_source_plugin_manager = $container->get('plugin.manager.facets.facet_source');
 
-    /** @var \Drupal\facets\FacetManager\DefaultFacetManager $facet_manager */
+    /** @var DefaultFacetManager $facet_manager */
     $facet_manager = $container->get('facets.manager');
 
-    /** @var \Drupal\facets_summary\Processor\ProcessorPluginManager $processor_plugin_manager */
+    /** @var ProcessorPluginManager $processor_plugin_manager */
     $processor_plugin_manager = $container->get('plugin.manager.facets_summary.processor');
 
-    /** @var \Drupal\Core\Block\BlockManager $block_manager */
+    /** @var BlockManager $block_manager */
     $block_manager = $container->get('plugin.manager.block');
 
-    /** @var \Drupal\Core\Routing\UrlGeneratorInterface $url_generator */
+    /** @var UrlGeneratorInterface $url_generator */
     $url_generator = $container->get('url_generator');
 
     return new static($entity_type_manager, $facet_source_plugin_manager, $facet_manager, $processor_plugin_manager, $block_manager, $url_generator);
@@ -115,7 +119,7 @@ class FacetsSummarySettingsForm extends EntityForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\facets_summary\FacetsSummaryInterface $facets_summary */
+    /** @var FacetsSummaryInterface $facets_summary */
     $facets_summary = $this->entity;
 
     $facet_sources = [];
@@ -186,7 +190,7 @@ class FacetsSummarySettingsForm extends EntityForm {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
 
-    /** @var \Drupal\facets_summary\FacetsSummaryInterface $facets_summary */
+    /** @var FacetsSummaryInterface $facets_summary */
     $facets_summary = $this->getEntity();
     $is_new = $facets_summary->isNew();
     $facets_summary->save();
diff --git a/modules/facets_summary/src/Plugin/Block/FacetsSummaryBlock.php b/modules/facets_summary/src/Plugin/Block/FacetsSummaryBlock.php
index e805c5e..646a27f 100644
--- a/modules/facets_summary/src/Plugin/Block/FacetsSummaryBlock.php
+++ b/modules/facets_summary/src/Plugin/Block/FacetsSummaryBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets_summary\Plugin\Block;
 
+use Drupal\facets_summary\FacetsSummaryInterface;
+use Drupal\views\ViewExecutable;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\UncacheableDependencyTrait;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -26,14 +28,14 @@ class FacetsSummaryBlock extends BlockBase implements FacetsSummaryBlockInterfac
   /**
    * The facet manager service.
    *
-   * @var \Drupal\facets_summary\FacetsSummaryManager\DefaultFacetsSummaryManager
+   * @var DefaultFacetsSummaryManager
    */
   protected $facetsSummaryManager;
 
   /**
    * The associated facets_source_summary entity.
    *
-   * @var \Drupal\facets_summary\FacetsSummaryInterface
+   * @var FacetsSummaryInterface
    */
   protected $facetsSummary;
 
@@ -46,7 +48,7 @@ class FacetsSummaryBlock extends BlockBase implements FacetsSummaryBlockInterfac
    *   The block plugin block identifier.
    * @param array $plugin_definition
    *   The block plugin block definition.
-   * @param \Drupal\facets_summary\FacetsSummaryManager\DefaultFacetsSummaryManager $facets_summary_manager
+   * @param DefaultFacetsSummaryManager $facets_summary_manager
    *   The facet manager service.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, DefaultFacetsSummaryManager $facets_summary_manager) {
@@ -89,7 +91,7 @@ class FacetsSummaryBlock extends BlockBase implements FacetsSummaryBlockInterfac
       return [];
     }
 
-    /** @var \Drupal\facets_summary\FacetsSummaryInterface $summary */
+    /** @var FacetsSummaryInterface $summary */
     $facets_summary = $this->getEntity();
 
     // Let the facet_manager build the facets.
@@ -102,7 +104,7 @@ class FacetsSummaryBlock extends BlockBase implements FacetsSummaryBlockInterfac
       ];
     }
 
-    /** @var \Drupal\views\ViewExecutable $view */
+    /** @var ViewExecutable $view */
     if ($view = $facets_summary->getFacetSource()->getViewsDisplay()) {
       $build['#attached']['drupalSettings']['facets_views_ajax'] = [
         'facets_summary_ajax' => [
diff --git a/modules/facets_summary/src/Plugin/Block/FacetsSummaryBlockDeriver.php b/modules/facets_summary/src/Plugin/Block/FacetsSummaryBlockDeriver.php
index 8b0db30..9fa7408 100644
--- a/modules/facets_summary/src/Plugin/Block/FacetsSummaryBlockDeriver.php
+++ b/modules/facets_summary/src/Plugin/Block/FacetsSummaryBlockDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets_summary\Plugin\Block;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\facets_summary\FacetsSummaryInterface;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -25,7 +27,7 @@ class FacetsSummaryBlockDeriver implements ContainerDeriverInterface {
   /**
    * The entity storage used for facets summaries.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $facetsSummaryStorage;
 
@@ -54,7 +56,7 @@ class FacetsSummaryBlockDeriver implements ContainerDeriverInterface {
     $base_plugin_id = $base_plugin_definition['id'];
     if (!isset($this->derivatives[$base_plugin_id])) {
       $plugin_derivatives = [];
-      /** @var \Drupal\facets_summary\FacetsSummaryInterface[] $all_facets_summaries */
+      /** @var FacetsSummaryInterface[] $all_facets_summaries */
       $all_facets_summaries = $this->facetsSummaryStorage->loadMultiple();
       foreach ($all_facets_summaries as $facets_summary) {
         $machine_name = $facets_summary->id();
diff --git a/modules/facets_summary/src/Plugin/facets_summary/processor/ResetFacetsProcessor.php b/modules/facets_summary/src/Plugin/facets_summary/processor/ResetFacetsProcessor.php
index 636abec..cfa308c 100644
--- a/modules/facets_summary/src/Plugin/facets_summary/processor/ResetFacetsProcessor.php
+++ b/modules/facets_summary/src/Plugin/facets_summary/processor/ResetFacetsProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets_summary\Plugin\facets_summary\processor;
 
+use Drupal\path_alias\AliasManager;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
@@ -84,7 +85,7 @@ class ResetFacetsProcessor extends ProcessorPluginBase implements BuildProcessor
     }
 
     $path = \Drupal::service('path.current')->getPath();
-    /** @var \Drupal\path_alias\AliasManager $pathAliasManager */
+    /** @var AliasManager $pathAliasManager */
     $pathAliasManager = \Drupal::service('path_alias.manager');
     $path = $pathAliasManager->getAliasByPath($path);
     try {
diff --git a/modules/facets_summary/src/Plugin/facets_summary/processor/ShowSummaryProcessor.php b/modules/facets_summary/src/Plugin/facets_summary/processor/ShowSummaryProcessor.php
index 83313a5..901d3a7 100644
--- a/modules/facets_summary/src/Plugin/facets_summary/processor/ShowSummaryProcessor.php
+++ b/modules/facets_summary/src/Plugin/facets_summary/processor/ShowSummaryProcessor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets_summary\Plugin\facets_summary\processor;
 
+use Drupal\facets\Entity\Facet;
+use Drupal\facets\Result\ResultInterface;
 use Drupal\facets_summary\FacetsSummaryInterface;
 use Drupal\facets_summary\Processor\BuildProcessorInterface;
 use Drupal\facets_summary\Processor\ProcessorPluginBase;
@@ -30,7 +32,7 @@ class ShowSummaryProcessor extends ProcessorPluginBase implements BuildProcessor
       return $build;
     }
 
-    /** @var \Drupal\facets\Entity\Facet $facet */
+    /** @var Facet $facet */
     foreach ($facets as $facet) {
       if (empty($facet->getActiveItems())) {
         continue;
@@ -52,10 +54,10 @@ class ShowSummaryProcessor extends ProcessorPluginBase implements BuildProcessor
   /**
    * Get all active results' display values from hierarchy.
    *
-   * @param \Drupal\facets\Result\ResultInterface[] $results
+   * @param ResultInterface[] $results
    *   The results to check for active children.
    *
-   * @return \Drupal\facets\Result\ResultInterface[]
+   * @return ResultInterface[]
    *   The active results found.
    */
   protected function getActiveDisplayValues(array $results) {
diff --git a/modules/facets_summary/src/Plugin/facets_summary/processor/ShowTextWhenEmptyProcessor.php b/modules/facets_summary/src/Plugin/facets_summary/processor/ShowTextWhenEmptyProcessor.php
index 0c4f1f7..b525ae3 100644
--- a/modules/facets_summary/src/Plugin/facets_summary/processor/ShowTextWhenEmptyProcessor.php
+++ b/modules/facets_summary/src/Plugin/facets_summary/processor/ShowTextWhenEmptyProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets_summary\Plugin\facets_summary\processor;
 
+use Drupal\facets\FacetInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\facets_summary\FacetsSummaryInterface;
 use Drupal\facets_summary\Processor\BuildProcessorInterface;
@@ -29,7 +30,7 @@ class ShowTextWhenEmptyProcessor extends ProcessorPluginBase implements BuildPro
     $config = $this->getConfiguration();
 
     $results_count = array_sum(array_map(function ($it) {
-      /** @var \Drupal\facets\FacetInterface $it */
+      /** @var FacetInterface $it */
       return count($it->getResults());
     }, $facets));
 
diff --git a/modules/facets_summary/src/Processor/BuildProcessorInterface.php b/modules/facets_summary/src/Processor/BuildProcessorInterface.php
index ba81ad6..0ad966b 100644
--- a/modules/facets_summary/src/Processor/BuildProcessorInterface.php
+++ b/modules/facets_summary/src/Processor/BuildProcessorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets_summary\Processor;
 
+use Drupal\facets\FacetInterface;
 use Drupal\facets_summary\FacetsSummaryInterface;
 
 /**
@@ -12,11 +13,11 @@ interface BuildProcessorInterface extends ProcessorInterface {
   /**
    * Alter the items in the summary before creating the renderable array.
    *
-   * @param \Drupal\facets_summary\FacetsSummaryInterface $facet
+   * @param FacetsSummaryInterface $facet
    *   The facet being changed.
    * @param array $build
    *   The render array.
-   * @param \Drupal\facets\FacetInterface[] $facets
+   * @param FacetInterface[] $facets
    *   The facets that are available.
    *
    * @return array
diff --git a/modules/facets_summary/src/Processor/ProcessorInterface.php b/modules/facets_summary/src/Processor/ProcessorInterface.php
index 823617d..d7758d2 100644
--- a/modules/facets_summary/src/Processor/ProcessorInterface.php
+++ b/modules/facets_summary/src/Processor/ProcessorInterface.php
@@ -23,9 +23,9 @@ interface ProcessorInterface extends ConfigurableInterface, DependentPluginInter
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
-   * @param \Drupal\facets_summary\FacetsSummaryInterface $facets_summary
+   * @param FacetsSummaryInterface $facets_summary
    *   The facet summary this processor is being added to.
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state, FacetsSummaryInterface $facets_summary);
@@ -35,9 +35,9 @@ interface ProcessorInterface extends ConfigurableInterface, DependentPluginInter
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
-   * @param \Drupal\facets_summary\FacetsSummaryInterface $facets_summary
+   * @param FacetsSummaryInterface $facets_summary
    *   The facet summary this processor is being added to.
    */
   public function validateConfigurationForm(array $form, FormStateInterface $form_state, FacetsSummaryInterface $facets_summary);
@@ -47,9 +47,9 @@ interface ProcessorInterface extends ConfigurableInterface, DependentPluginInter
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
-   * @param \Drupal\facets_summary\FacetsSummaryInterface $facets_summary
+   * @param FacetsSummaryInterface $facets_summary
    *   The facet summary this processor is being added to.
    */
   public function submitConfigurationForm(array $form, FormStateInterface $form_state, FacetsSummaryInterface $facets_summary);
diff --git a/modules/facets_summary/tests/src/Functional/HierarchicalFacetIntegrationTest.php b/modules/facets_summary/tests/src/Functional/HierarchicalFacetIntegrationTest.php
index 9795742..b427968 100644
--- a/modules/facets_summary/tests/src/Functional/HierarchicalFacetIntegrationTest.php
+++ b/modules/facets_summary/tests/src/Functional/HierarchicalFacetIntegrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets_summary\Functional;
 
+use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\search_api\Item\Field;
 use Drupal\taxonomy\Entity\Term;
@@ -29,7 +30,7 @@ class HierarchicalFacetIntegrationTest extends FacetsTestBase {
   /**
    * Drupal vocabulary.
    *
-   * @var \Drupal\taxonomy\Entity\Vocabulary
+   * @var Vocabulary
    */
   protected $vocabulary;
 
@@ -50,14 +51,14 @@ class HierarchicalFacetIntegrationTest extends FacetsTestBase {
   /**
    * An array of taxonomy terms.
    *
-   * @var \Drupal\taxonomy\Entity\Term[]
+   * @var Term[]
    */
   protected $parents = [];
 
   /**
    * An array of taxonomy terms.
    *
-   * @var \Drupal\taxonomy\Entity\Term[]
+   * @var Term[]
    */
   protected $terms = [];
 
diff --git a/modules/facets_summary/tests/src/Functional/IntegrationTest.php b/modules/facets_summary/tests/src/Functional/IntegrationTest.php
index a716469..b70f89c 100644
--- a/modules/facets_summary/tests/src/Functional/IntegrationTest.php
+++ b/modules/facets_summary/tests/src/Functional/IntegrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets_summary\Functional;
 
+use Behat\Mink\Element\NodeElement;
 use Drupal\Tests\facets\Functional\FacetsTestBase;
 use Drupal\facets_summary\Entity\FacetsSummary;
 use Drupal\facets_summary\Plugin\facets_summary\processor\ResetFacetsProcessor;
@@ -214,10 +215,13 @@ class IntegrationTest extends FacetsTestBase {
     $block = $this->drupalPlaceBlock('facets_summary_block:owl', $block);
 
     $this->drupalGet('search-api-test-fulltext');
-    $this->assertText('Displaying 5 search results');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Displaying 5 search results');
     $this->clickLink('item');
 
-    /** @var \Behat\Mink\Element\NodeElement[] $list_items */
+    /** @var NodeElement[] $list_items */
     $list_items = $this->getSession()
       ->getPage()
       ->findById('block-' . $block->id())
diff --git a/modules/facets_summary/tests/src/Kernel/ProcessorTest.php b/modules/facets_summary/tests/src/Kernel/ProcessorTest.php
index 9f0e804..c50a09b 100644
--- a/modules/facets_summary/tests/src/Kernel/ProcessorTest.php
+++ b/modules/facets_summary/tests/src/Kernel/ProcessorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets_summary\Kernel;
 
+use Drupal\facets_summary\Processor\ProcessorPluginManager;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -32,7 +33,7 @@ class ProcessorTest extends KernelTestBase {
    * Tests that the "hide when not rendered" processors is last.
    */
   public function testHideWhenNotRenderedIsLast() {
-    /** @var \Drupal\facets_summary\Processor\ProcessorPluginManager $processor_manager */
+    /** @var ProcessorPluginManager $processor_manager */
     $processor_manager = $this->container->get('plugin.manager.facets_summary.processor');
     $defs = $processor_manager->getDefinitions();
     $hide_when_not_rendered_weight = $defs['hide_when_not_rendered']['stages']['build'];
diff --git a/modules/facets_summary/tests/src/Unit/Plugin/Processor/HideWhenNotRenderedProcessorTest.php b/modules/facets_summary/tests/src/Unit/Plugin/Processor/HideWhenNotRenderedProcessorTest.php
index 552b0a9..fd3ead7 100644
--- a/modules/facets_summary/tests/src/Unit/Plugin/Processor/HideWhenNotRenderedProcessorTest.php
+++ b/modules/facets_summary/tests/src/Unit/Plugin/Processor/HideWhenNotRenderedProcessorTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\facets_summary\Unit\Plugin\Processor;
 
+use Drupal\facets_summary\Processor\ProcessorInterface;
+use Drupal\facets_summary\Processor\BuildProcessorInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\facets\FacetSource\FacetSourcePluginInterface;
 use Drupal\facets\FacetSource\FacetSourcePluginManager;
@@ -20,7 +22,7 @@ class HideWhenNotRenderedProcessorTest extends UnitTestCase {
   /**
    * The processor we're testing.
    *
-   * @var \Drupal\facets_summary\Processor\ProcessorInterface|\Drupal\facets_summary\Processor\BuildProcessorInterface
+   * @var ProcessorInterface|BuildProcessorInterface
    */
   protected $processor;
 
@@ -87,15 +89,11 @@ class HideWhenNotRenderedProcessorTest extends UnitTestCase {
    *   The value for rendered in current request.
    */
   protected function createContainer($renderedInCurrentRequestValue) {
-    $fsi = $this->getMockBuilder(FacetSourcePluginInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fsi = $this->createMock(FacetSourcePluginInterface::class);
     $fsi->method('isRenderedInCurrentRequest')
       ->willReturn($renderedInCurrentRequestValue);
 
-    $facetSourceManager = $this->getMockBuilder(FacetSourcePluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $facetSourceManager = $this->createMock(FacetSourcePluginManager::class);
     $facetSourceManager->method('createInstance')
       ->willReturn($fsi);
 
diff --git a/modules/facets_summary/tests/src/Unit/Plugin/Processor/ResetFacetsProcessorTest.php b/modules/facets_summary/tests/src/Unit/Plugin/Processor/ResetFacetsProcessorTest.php
index 5cf421c..7cf6cbb 100644
--- a/modules/facets_summary/tests/src/Unit/Plugin/Processor/ResetFacetsProcessorTest.php
+++ b/modules/facets_summary/tests/src/Unit/Plugin/Processor/ResetFacetsProcessorTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\facets_summary\Unit\Plugin\Processor;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\facets_summary\Processor\ProcessorInterface;
+use Drupal\facets_summary\Processor\BuildProcessorInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\StringTranslation\TranslationInterface;
 use Drupal\facets_summary\Entity\FacetsSummary;
@@ -16,10 +19,11 @@ use Drupal\Tests\UnitTestCase;
  */
 class ResetFacetsProcessorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The processor we're testing.
    *
-   * @var \Drupal\facets_summary\Processor\ProcessorInterface|\Drupal\facets_summary\Processor\BuildProcessorInterface
+   * @var ProcessorInterface|BuildProcessorInterface
    */
   protected $processor;
 
diff --git a/modules/facets_summary/tests/src/Unit/Plugin/Processor/ShowTextWhenEmptyProcessorTest.php b/modules/facets_summary/tests/src/Unit/Plugin/Processor/ShowTextWhenEmptyProcessorTest.php
index 249c1e6..ffef2af 100644
--- a/modules/facets_summary/tests/src/Unit/Plugin/Processor/ShowTextWhenEmptyProcessorTest.php
+++ b/modules/facets_summary/tests/src/Unit/Plugin/Processor/ShowTextWhenEmptyProcessorTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\facets_summary\Unit\Plugin\Processor;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\facets_summary\Processor\ProcessorInterface;
+use Drupal\facets_summary\Processor\BuildProcessorInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ -17,10 +20,11 @@ use Drupal\Tests\UnitTestCase;
  */
 class ShowTextWhenEmptyProcessorTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * The processor we're testing.
    *
-   * @var \Drupal\facets_summary\Processor\ProcessorInterface|\Drupal\facets_summary\Processor\BuildProcessorInterface
+   * @var ProcessorInterface|BuildProcessorInterface
    */
   protected $processor;
 
diff --git a/src/Annotation/FacetsFacetSource.php b/src/Annotation/FacetsFacetSource.php
index 15a42da..50d2f32 100644
--- a/src/Annotation/FacetsFacetSource.php
+++ b/src/Annotation/FacetsFacetSource.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class FacetsFacetSource extends Plugin {
   /**
    * The human-readable name of the facet source plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -35,7 +36,7 @@ class FacetsFacetSource extends Plugin {
   /**
    * The facet source description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/FacetsHierarchy.php b/src/Annotation/FacetsHierarchy.php
index d7f6316..75e88e6 100644
--- a/src/Annotation/FacetsHierarchy.php
+++ b/src/Annotation/FacetsHierarchy.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class FacetsHierarchy extends Plugin {
   /**
    * The human-readable name of the Hierarchy plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -35,7 +36,7 @@ class FacetsHierarchy extends Plugin {
   /**
    * The Hierarchy description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/FacetsProcessor.php b/src/Annotation/FacetsProcessor.php
index 9561b1f..07ade38 100644
--- a/src/Annotation/FacetsProcessor.php
+++ b/src/Annotation/FacetsProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class FacetsProcessor extends Plugin {
   /**
    * The human-readable name of the processor plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -35,7 +36,7 @@ class FacetsProcessor extends Plugin {
   /**
    * The processor description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/FacetsQueryType.php b/src/Annotation/FacetsQueryType.php
index 0f24632..415ce66 100644
--- a/src/Annotation/FacetsQueryType.php
+++ b/src/Annotation/FacetsQueryType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class FacetsQueryType extends Plugin {
   /**
    * The human-readable name of the query type plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/FacetsUrlProcessor.php b/src/Annotation/FacetsUrlProcessor.php
index 3a0f7be..2ba16e8 100644
--- a/src/Annotation/FacetsUrlProcessor.php
+++ b/src/Annotation/FacetsUrlProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class FacetsUrlProcessor extends Plugin {
   /**
    * The human-readable name of the URL processor plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -35,7 +36,7 @@ class FacetsUrlProcessor extends Plugin {
   /**
    * The URL processor description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/FacetsWidget.php b/src/Annotation/FacetsWidget.php
index c77dc87..8177411 100644
--- a/src/Annotation/FacetsWidget.php
+++ b/src/Annotation/FacetsWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class FacetsWidget extends Plugin {
   /**
    * The human-readable name of the widget plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -35,7 +36,7 @@ class FacetsWidget extends Plugin {
   /**
    * The widget description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/FacetBlockAjaxController.php b/src/Controller/FacetBlockAjaxController.php
index daca4f7..8584313 100644
--- a/src/Controller/FacetBlockAjaxController.php
+++ b/src/Controller/FacetBlockAjaxController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\facets\Controller;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Symfony\Component\Routing\Matcher\RequestMatcherInterface;
+use Drupal\Core\PathProcessor\InboundPathProcessorInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\InvokeCommand;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ -25,57 +28,57 @@ class FacetBlockAjaxController extends ControllerBase {
   /**
    * The entity storage for block.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;
 
   /**
    * The dynamic router service.
    *
-   * @var \Symfony\Component\Routing\Matcher\RequestMatcherInterface
+   * @var RequestMatcherInterface
    */
   protected $router;
 
   /**
    * The path processor service.
    *
-   * @var \Drupal\Core\PathProcessor\InboundPathProcessorInterface
+   * @var InboundPathProcessorInterface
    */
   protected $pathProcessor;
 
   /**
    * The current route match service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;
 
   /**
    * Constructs a FacetBlockAjaxController object.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Path\CurrentPathStack $currentPath
+   * @param CurrentPathStack $currentPath
    *   The current path service.
-   * @param \Symfony\Component\Routing\RouterInterface $router
+   * @param RouterInterface $router
    *   The router service.
-   * @param \Drupal\Core\PathProcessor\PathProcessorManager $pathProcessor
+   * @param PathProcessorManager $pathProcessor
    *   The path processor manager.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $currentRouteMatch
+   * @param CurrentRouteMatch $currentRouteMatch
    *   The current route match service.
    */
   public function __construct(RendererInterface $renderer, CurrentPathStack $currentPath, RouterInterface $router, PathProcessorManager $pathProcessor, CurrentRouteMatch $currentRouteMatch) {
@@ -103,13 +106,13 @@ class FacetBlockAjaxController extends ControllerBase {
   /**
    * Loads and renders the facet blocks via AJAX.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Thrown when the view was not found.
    */
   public function ajaxFacetBlockView(Request $request) {
diff --git a/src/Controller/FacetController.php b/src/Controller/FacetController.php
index e88cadc..378c58a 100644
--- a/src/Controller/FacetController.php
+++ b/src/Controller/FacetController.php
@@ -14,7 +14,7 @@ class FacetController extends ControllerBase {
   /**
    * Returns a form to edit a facet on a Search API index.
    *
-   * @param \Drupal\facets\FacetInterface $facets_facet
+   * @param FacetInterface $facets_facet
    *   Facet currently being edited.
    *
    * @return array
@@ -30,7 +30,7 @@ class FacetController extends ControllerBase {
   /**
    * Returns the page title for an facets's "View" tab.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet that is displayed.
    *
    * @return string
diff --git a/src/Entity/Facet.php b/src/Entity/Facet.php
index 2c5e7b2..4276f73 100644
--- a/src/Entity/Facet.php
+++ b/src/Entity/Facet.php
@@ -2,6 +2,18 @@
 
 namespace Drupal\facets\Entity;
 
+use Drupal\facets\Widget\WidgetPluginBase;
+use Drupal\facets\Hierarchy\HierarchyPluginBase;
+use Drupal\facets\FacetSource\FacetSourcePluginInterface;
+use Drupal\facets\Result\ResultInterface;
+use Drupal\facets\Processor\ProcessorInterface;
+use Drupal\facets\Widget\WidgetPluginManager;
+use Drupal\facets\Hierarchy\HierarchyPluginManager;
+use Drupal\facets\Hierarchy\HierarchyInterface;
+use Drupal\Facets\FacetSourceInterface;
+use Drupal\facets\Processor\ProcessorPluginManager;
+use Drupal\facets\Widget\WidgetPluginInterface;
+use Drupal\facets\FacetSource\FacetSourcePluginManager;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\facets\Exception\Exception;
@@ -108,7 +120,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
   /**
    * The widget plugin instance.
    *
-   * @var \Drupal\facets\Widget\WidgetPluginBase
+   * @var WidgetPluginBase
    */
   protected $widgetInstance;
 
@@ -122,7 +134,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
   /**
    * The hierarchy instance.
    *
-   * @var \Drupal\facets\Hierarchy\HierarchyPluginBase
+   * @var HierarchyPluginBase
    */
   protected $hierarchy_processor;
 
@@ -195,7 +207,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
   /**
    * The facet source belonging to this facet.
    *
-   * @var \Drupal\facets\FacetSource\FacetSourcePluginInterface
+   * @var FacetSourcePluginInterface
    *
    * @see getFacetSource()
    */
@@ -211,7 +223,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
   /**
    * The results.
    *
-   * @var \Drupal\facets\Result\ResultInterface[]
+   * @var ResultInterface[]
    */
   protected $results = [];
 
@@ -232,7 +244,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
   /**
    * Cached information about the processors available for this facet.
    *
-   * @var \Drupal\facets\Processor\ProcessorInterface[]|null
+   * @var ProcessorInterface[]|null
    *
    * @see loadProcessors()
    */
@@ -272,14 +284,14 @@ class Facet extends ConfigEntityBase implements FacetInterface {
   /**
    * The widget plugin manager.
    *
-   * @var \Drupal\facets\Widget\WidgetPluginManager
+   * @var WidgetPluginManager
    */
   protected $widget_plugin_manager;
 
   /**
    * The hierarchy plugin manager.
    *
-   * @var \Drupal\facets\Hierarchy\HierarchyPluginManager
+   * @var HierarchyPluginManager
    *   The hierarchy plugin manager.
    */
   protected $hierarchy_manager;
@@ -287,7 +299,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
   /**
    * Cached information about the hierarchies available for this facet.
    *
-   * @var \Drupal\facets\Hierarchy\HierarchyInterface[]
+   * @var HierarchyInterface[]
    *
    * @see getHierarchies()
    */
@@ -296,7 +308,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
   /**
    * The facet source config object.
    *
-   * @var \Drupal\Facets\FacetSourceInterface
+   * @var FacetSourceInterface
    *   The facet source config object.
    */
   protected $facetSourceConfig;
@@ -320,7 +332,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
   /**
    * Returns the widget plugin manager.
    *
-   * @return \Drupal\facets\Widget\WidgetPluginManager
+   * @return WidgetPluginManager
    *   The widget plugin manager.
    */
   public function getWidgetManager() {
@@ -330,7 +342,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
   /**
    * Returns the hierarchy plugin manager.
    *
-   * @return \Drupal\facets\Hierarchy\HierarchyPluginManager
+   * @return HierarchyPluginManager
    *   The hierarchy plugin manager.
    */
   public function getHierarchyManager() {
@@ -419,7 +431,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
   /**
    * Retrieves all processors supported by this facet.
    *
-   * @return \Drupal\facets\Processor\ProcessorInterface[]
+   * @return ProcessorInterface[]
    *   The loaded processors, keyed by processor ID.
    */
   protected function loadProcessors() {
@@ -427,7 +439,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
       return $this->processors;
     }
 
-    /** @var \Drupal\facets\Processor\ProcessorPluginManager $processor_plugin_manager */
+    /** @var ProcessorPluginManager $processor_plugin_manager */
     $processor_plugin_manager = \Drupal::service('plugin.manager.facets.processor');
     $processor_settings = $this->getProcessorConfigs();
 
@@ -437,7 +449,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
         $settings = empty($processor_settings[$name]['settings']) ? [] : $processor_settings[$name]['settings'];
         $settings['facet'] = $this;
 
-        /** @var \Drupal\facets\Processor\ProcessorInterface $processor */
+        /** @var ProcessorInterface $processor */
         $processor = $processor_plugin_manager->createInstance($name, $settings);
         $this->processors[$name] = $processor;
       }
@@ -472,7 +484,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
     $query_types = $facet_source->getQueryTypesForFacet($this);
 
     // Get the widget configured for this facet.
-    /** @var \Drupal\facets\Widget\WidgetPluginInterface $widget */
+    /** @var WidgetPluginInterface $widget */
     $widget = $this->getWidgetInstance();
 
     // Give the widget the chance to select a preferred query type. This is
@@ -522,7 +534,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
    * @return string
    *   The class name of the chose query type.
    *
-   * @throws \Drupal\facets\Exception\InvalidQueryTypeException
+   * @throws InvalidQueryTypeException
    */
   protected function pickQueryType(array $allTypes, $type) {
     if (!isset($allTypes[$type])) {
@@ -722,7 +734,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
    */
   public function getFacetSource() {
     if (is_null($this->facet_source_instance) && $this->facet_source_id) {
-      /** @var \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_plugin_manager */
+      /** @var FacetSourcePluginManager $facet_source_plugin_manager */
       $facet_source_plugin_manager = \Drupal::service('plugin.manager.facets.facet_source');
       if (!$facet_source_plugin_manager->hasDefinition($this->facet_source_id)) {
         return NULL;
@@ -843,7 +855,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
     if (!isset($this->facetSourcePlugins)) {
       $this->facetSourcePlugins = [];
 
-      /** @var \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_plugin_manager */
+      /** @var FacetSourcePluginManager $facet_source_plugin_manager */
       $facet_source_plugin_manager = \Drupal::service('plugin.manager.facets.facet_source');
 
       foreach ($facet_source_plugin_manager->getDefinitions() as $name => $facet_source_definition) {
@@ -851,7 +863,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
           // Create our settings for this facet source..
           $config = $this->facetSourcePlugins[$name] ?? [];
 
-          /** @var \Drupal\facets\FacetSource\FacetSourcePluginInterface $facet_source */
+          /** @var FacetSourcePluginInterface $facet_source */
           $facet_source = $facet_source_plugin_manager->createInstance($name, $config);
           $this->facetSourcePlugins[$name] = $facet_source;
         }
@@ -934,7 +946,7 @@ class Facet extends ConfigEntityBase implements FacetInterface {
     foreach ($hierarchy_plugin_manager->getDefinitions() as $name => $hierarchy_definition) {
       if (class_exists($hierarchy_definition['class']) && empty($this->hierarchies[$name])) {
 
-        /** @var \Drupal\facets\Hierarchy\HierarchyInterface $hierarchy */
+        /** @var HierarchyInterface $hierarchy */
         $hierarchy = $hierarchy_plugin_manager->createInstance($name);
         $this->hierarchies[$name] = $hierarchy;
       }
diff --git a/src/Event/ActiveFiltersParsed.php b/src/Event/ActiveFiltersParsed.php
index 466d7b8..07b5cd3 100644
--- a/src/Event/ActiveFiltersParsed.php
+++ b/src/Event/ActiveFiltersParsed.php
@@ -30,7 +30,7 @@ final class ActiveFiltersParsed extends Event {
   /**
    * The get parameters.
    *
-   * @var \Symfony\Component\HttpFoundation\ParameterBag
+   * @var ParameterBag
    */
   private $queryParameters;
 
@@ -48,7 +48,7 @@ final class ActiveFiltersParsed extends Event {
    *   The facet source id.
    * @param array $activeFilters
    *   The active filters.
-   * @param \Symfony\Component\HttpFoundation\ParameterBag $queryParameters
+   * @param ParameterBag $queryParameters
    *   The get parameters to use.
    * @param string $filter_key
    *   The facet filter key.
@@ -96,7 +96,7 @@ final class ActiveFiltersParsed extends Event {
   /**
    * Get the get parameters.
    *
-   * @return \Symfony\Component\HttpFoundation\ParameterBag
+   * @return ParameterBag
    *   The get parameters.
    */
   public function getQueryParameters() {
diff --git a/src/Event/PostBuildFacet.php b/src/Event/PostBuildFacet.php
index 56610ac..b4a5492 100644
--- a/src/Event/PostBuildFacet.php
+++ b/src/Event/PostBuildFacet.php
@@ -17,14 +17,14 @@ final class PostBuildFacet extends Event {
   /**
    * The facet.
    *
-   * @var \Drupal\facets\FacetInterface
+   * @var FacetInterface
    */
   private $facet;
 
   /**
    * PreAddFacetSourceCacheableDependencies constructor.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet.
    */
   public function __construct(FacetInterface $facet) {
@@ -34,7 +34,7 @@ final class PostBuildFacet extends Event {
   /**
    * Get the facet.
    *
-   * @return \Drupal\facets\FacetInterface
+   * @return FacetInterface
    *   The facet.
    */
   public function getFacet(): FacetInterface {
@@ -44,7 +44,7 @@ final class PostBuildFacet extends Event {
   /**
    * Set the facet.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet.
    *
    * @return void
diff --git a/src/Event/QueryStringCreated.php b/src/Event/QueryStringCreated.php
index 0a61f0b..8624029 100644
--- a/src/Event/QueryStringCreated.php
+++ b/src/Event/QueryStringCreated.php
@@ -26,7 +26,7 @@ final class QueryStringCreated extends Event {
   /**
    * The get parameters.
    *
-   * @var \Symfony\Component\HttpFoundation\ParameterBag
+   * @var ParameterBag
    */
   private $queryParameters;
 
@@ -40,7 +40,7 @@ final class QueryStringCreated extends Event {
   /**
    * The facet result.
    *
-   * @var \Drupal\facets\Result\ResultInterface
+   * @var ResultInterface
    */
   private $facetResult;
 
@@ -54,22 +54,22 @@ final class QueryStringCreated extends Event {
   /**
    * The facet.
    *
-   * @var \Drupal\facets\FacetInterface
+   * @var FacetInterface
    */
   private $facet;
 
   /**
    * QueryStringCreated constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\ParameterBag $queryParameters
+   * @param ParameterBag $queryParameters
    *   The get parameters to use.
    * @param array $filterParameters
    *   The filter parameters to use.
-   * @param \Drupal\facets\Result\ResultInterface $facetResult
+   * @param ResultInterface $facetResult
    *   The facet result.
    * @param array $activeFilters
    *   The active filters.
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet.
    */
   public function __construct(ParameterBag $queryParameters, array $filterParameters, ResultInterface $facetResult, array $activeFilters, FacetInterface $facet) {
@@ -83,7 +83,7 @@ final class QueryStringCreated extends Event {
   /**
    * Get the get parameters.
    *
-   * @return \Symfony\Component\HttpFoundation\ParameterBag
+   * @return ParameterBag
    *   The get parameters.
    */
   public function getQueryParameters() {
@@ -116,7 +116,7 @@ final class QueryStringCreated extends Event {
    * Only to be used as context, because changing this will not result in any
    * changes to the final url.
    *
-   * @return \Drupal\facets\Result\ResultInterface
+   * @return ResultInterface
    *   The facet result.
    */
   public function getFacetResult() {
@@ -142,7 +142,7 @@ final class QueryStringCreated extends Event {
    * Only to be used as context, because changing this will not result in any
    * changes to the final url.
    *
-   * @return \Drupal\facets\FacetInterface
+   * @return FacetInterface
    *   The facet.
    */
   public function getFacet() {
diff --git a/src/Event/UrlCreated.php b/src/Event/UrlCreated.php
index b93d32a..8c01022 100644
--- a/src/Event/UrlCreated.php
+++ b/src/Event/UrlCreated.php
@@ -17,32 +17,32 @@ final class UrlCreated extends Event {
   /**
    * The get parameters.
    *
-   * @var \Drupal\Core\Url
+   * @var Url
    */
   private $url;
 
   /**
    * The facet result.
    *
-   * @var \Drupal\facets\Result\ResultInterface
+   * @var ResultInterface
    */
   private $facetResult;
 
   /**
    * The facet.
    *
-   * @var \Drupal\facets\FacetInterface
+   * @var FacetInterface
    */
   private $facet;
 
   /**
    * UrlCreated constructor.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The facet link URL.
-   * @param \Drupal\facets\Result\ResultInterface $facetResult
+   * @param ResultInterface $facetResult
    *   The facet result.
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet.
    */
   public function __construct(Url $url, ResultInterface $facetResult, FacetInterface $facet) {
@@ -54,7 +54,7 @@ final class UrlCreated extends Event {
   /**
    * Get the URL.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL.
    */
   public function getUrl(): Url {
@@ -64,7 +64,7 @@ final class UrlCreated extends Event {
   /**
    * Set the URL.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL to set.
    */
   public function setUrl(Url $url): void {
@@ -77,7 +77,7 @@ final class UrlCreated extends Event {
    * Only to be used as context, because changing this will not result in any
    * changes to the final url.
    *
-   * @return \Drupal\facets\Result\ResultInterface
+   * @return ResultInterface
    *   The facet result.
    */
   public function getFacetResult() {
@@ -90,7 +90,7 @@ final class UrlCreated extends Event {
    * Only to be used as context, because changing this will not result in any
    * changes to the final url.
    *
-   * @return \Drupal\facets\FacetInterface
+   * @return FacetInterface
    *   The facet.
    */
   public function getFacet() {
diff --git a/src/EventSubscriber/ConfigurationSubscriber.php b/src/EventSubscriber/ConfigurationSubscriber.php
index bfb2567..2d5bc7e 100644
--- a/src/EventSubscriber/ConfigurationSubscriber.php
+++ b/src/EventSubscriber/ConfigurationSubscriber.php
@@ -15,14 +15,14 @@ class ConfigurationSubscriber implements EventSubscriberInterface {
   /**
    * Drupal core's block manager.
    *
-   * @var \Drupal\Core\Block\BlockManagerInterface
+   * @var BlockManagerInterface
    */
   protected $blockManager;
 
   /**
    * Create an instance of the class.
    *
-   * @param \Drupal\Core\Block\BlockManagerInterface $block_manager
+   * @param BlockManagerInterface $block_manager
    *   Core's block manager.
    */
   public function __construct(BlockManagerInterface $block_manager) {
@@ -32,7 +32,7 @@ class ConfigurationSubscriber implements EventSubscriberInterface {
   /**
    * Reacts to a config delete event to clear the required caches.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The config delete event.
    */
   public function onConfigDelete(ConfigCrudEvent $event) {
diff --git a/src/EventSubscriber/SearchApiSubscriber.php b/src/EventSubscriber/SearchApiSubscriber.php
index 403103b..8f8a601 100644
--- a/src/EventSubscriber/SearchApiSubscriber.php
+++ b/src/EventSubscriber/SearchApiSubscriber.php
@@ -17,14 +17,14 @@ class SearchApiSubscriber implements EventSubscriberInterface {
   /**
    * The facet manager.
    *
-   * @var \Drupal\facets\FacetManager\DefaultFacetManager
+   * @var DefaultFacetManager
    */
   private $facetManager;
 
   /**
    * Constructs a new class instance.
    *
-   * @param \Drupal\facets\FacetManager\DefaultFacetManager $facetManager
+   * @param DefaultFacetManager $facetManager
    *   The facet manager.
    */
   public function __construct(DefaultFacetManager $facetManager) {
diff --git a/src/FacetInterface.php b/src/FacetInterface.php
index ac40438..7579c2c 100644
--- a/src/FacetInterface.php
+++ b/src/FacetInterface.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\facets;
 
+use Drupal\facets\Widget\WidgetPluginBase;
+use Drupal\facets\Hierarchy\HierarchyInterface;
+use Drupal\facets\Hierarchy\HierarchyPluginBase;
+use Drupal\facets\Result\ResultInterface;
+use Drupal\Core\TypedData\DataDefinitionInterface;
+use Drupal\facets\FacetSource\FacetSourcePluginInterface;
+use Drupal\facets\Processor\ProcessorInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -33,7 +40,7 @@ interface FacetInterface extends ConfigEntityInterface {
   /**
    * Returns the facet widget instance.
    *
-   * @return \Drupal\facets\Widget\WidgetPluginBase
+   * @return WidgetPluginBase
    *   The plugin instance
    */
   public function getWidgetInstance();
@@ -62,7 +69,7 @@ interface FacetInterface extends ConfigEntityInterface {
   /**
    * Returns an array of hierarchies with their configuration.
    *
-   * @return \Drupal\facets\Hierarchy\HierarchyInterface[]
+   * @return HierarchyInterface[]
    *   An array of hierarchies.
    */
   public function getHierarchies();
@@ -70,7 +77,7 @@ interface FacetInterface extends ConfigEntityInterface {
   /**
    * Returns the facet hierarchy instance.
    *
-   * @return \Drupal\facets\Hierarchy\HierarchyPluginBase
+   * @return HierarchyPluginBase
    *   The plugin instance
    */
   public function getHierarchyInstance();
@@ -177,7 +184,7 @@ interface FacetInterface extends ConfigEntityInterface {
   /**
    * Returns the result for the facet.
    *
-   * @return \Drupal\facets\Result\ResultInterface[]
+   * @return ResultInterface[]
    *   The results of the facet.
    */
   public function getResults();
@@ -185,11 +192,11 @@ interface FacetInterface extends ConfigEntityInterface {
   /**
    * Returns the flat result for the facet keyed by their raw values.
    *
-   * @param \Drupal\facets\Result\ResultInterface[]|null $results
+   * @param ResultInterface[]|null $results
    *   The results to be converted into a flat keyed by raw value array. If
    *   not provided the entire current result set of the facet will be used.
    *
-   * @return \Drupal\facets\Result\ResultInterface[]
+   * @return ResultInterface[]
    *   The results of the facet.
    */
   public function getResultsKeyedByRawValue($results = NULL);
@@ -197,7 +204,7 @@ interface FacetInterface extends ConfigEntityInterface {
   /**
    * Sets the results for the facet.
    *
-   * @param \Drupal\facets\Result\ResultInterface[] $results
+   * @param ResultInterface[] $results
    *   The results of the facet.
    */
   public function setResults(array $results);
@@ -226,7 +233,7 @@ interface FacetInterface extends ConfigEntityInterface {
   /**
    * Returns the data definition from the facet field.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface
+   * @return DataDefinitionInterface
    *   A typed data definition.
    */
   public function getDataDefinition();
@@ -366,7 +373,7 @@ interface FacetInterface extends ConfigEntityInterface {
   /**
    * Returns the plugin instance of a facet source.
    *
-   * @return \Drupal\facets\FacetSource\FacetSourcePluginInterface|null
+   * @return FacetSourcePluginInterface|null
    *   The plugin instance for the facet source.
    */
   public function getFacetSource();
@@ -374,7 +381,7 @@ interface FacetInterface extends ConfigEntityInterface {
   /**
    * Returns the facet source configuration object.
    *
-   * @return \Drupal\facets\FacetSourceInterface
+   * @return FacetSourceInterface
    *   A facet source configuration object.
    */
   public function getFacetSourceConfig();
@@ -385,7 +392,7 @@ interface FacetInterface extends ConfigEntityInterface {
    * @param bool $only_enabled
    *   Only return enabled facet sources.
    *
-   * @return \Drupal\facets\FacetSource\FacetSourcePluginInterface[]
+   * @return FacetSourcePluginInterface[]
    *   An array of facet sources.
    */
   public function getFacetSources($only_enabled = TRUE);
@@ -396,7 +403,7 @@ interface FacetInterface extends ConfigEntityInterface {
    * @param bool $only_enabled
    *   Only return enabled processors.
    *
-   * @return \Drupal\facets\Processor\ProcessorInterface[]
+   * @return ProcessorInterface[]
    *   An array of processors.
    */
   public function getProcessors($only_enabled = TRUE);
@@ -411,7 +418,7 @@ interface FacetInterface extends ConfigEntityInterface {
    *   (optional) If FALSE, also include disabled processors. Otherwise, only
    *   load enabled ones.
    *
-   * @return \Drupal\facets\Processor\ProcessorInterface[]
+   * @return ProcessorInterface[]
    *   An array of all enabled (or available, if if $only_enabled is FALSE)
    *   processors that support the given stage, ordered by the weight for that
    *   stage.
diff --git a/src/FacetListBuilder.php b/src/FacetListBuilder.php
index 40e2f9c..ee14a00 100644
--- a/src/FacetListBuilder.php
+++ b/src/FacetListBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets;
 
+use Drupal\block\BlockInterface;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Config\Entity\DraggableListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -103,7 +105,7 @@ class FacetListBuilder extends DraggableListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\facets\FacetInterface $entity */
+    /** @var FacetInterface $entity */
     $facet_configs = \Drupal::entityTypeManager()
       ->getStorage('facets_facet')
       ->load($entity->getConfigTarget());
@@ -294,7 +296,7 @@ class FacetListBuilder extends DraggableListBuilder {
           'colspan' => 4,
         ],
       ];
-      /** @var \Drupal\facets\FacetInterface $facet */
+      /** @var FacetInterface $facet */
       foreach ($groups['lone_facets'] as $facet) {
         // Facets core search moved into a separate project. Show a clean
         // message to notify users how to resolve their broken facets.
@@ -327,7 +329,7 @@ class FacetListBuilder extends DraggableListBuilder {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $entities = $this->storage->loadMultiple(array_keys($form_state->getValue('facets')));
-    /** @var \Drupal\block\BlockInterface[] $entities */
+    /** @var BlockInterface[] $entities */
     foreach ($entities as $entity_id => $entity) {
       $entity_values = $form_state->getValue(['facets', $entity_id]);
       $entity->setWeight($entity_values['weight']);
@@ -339,7 +341,7 @@ class FacetListBuilder extends DraggableListBuilder {
   /**
    * Loads facet sources and facets, grouped by facet sources.
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityInterface[][]
+   * @return ConfigEntityInterface[][]
    *   An associative array with two keys:
    *   - facet sources: All available facet sources, each followed by all facets
    *     attached to it.
@@ -362,7 +364,7 @@ class FacetListBuilder extends DraggableListBuilder {
       ];
 
       foreach ($facets as $facet) {
-        /** @var \Drupal\facets\FacetInterface $facet */
+        /** @var FacetInterface $facet */
         if ($facet->getFacetSourceId() == $facet_source['id']) {
           $facet_source_groups[$facet_source['id']]['facets'][$facet->id()] = $facet;
           // Remove this facet from $facet so it will finally only contain those
@@ -372,7 +374,7 @@ class FacetListBuilder extends DraggableListBuilder {
       }
 
       foreach ($facets_summaries as $summary) {
-        /** @var \Drupal\facets_summary\FacetsSummaryInterface $summary */
+        /** @var FacetsSummaryInterface $summary */
         if ($summary->getFacetSourceId() == $facet_source['id']) {
           $facet_source_groups[$facet_source['id']]['facets'][$summary->id()] = $summary;
           // Remove this facet from $facet so it will finally only contain those
diff --git a/src/FacetManager/DefaultFacetManager.php b/src/FacetManager/DefaultFacetManager.php
index 72bf9b1..d4e0b00 100644
--- a/src/FacetManager/DefaultFacetManager.php
+++ b/src/FacetManager/DefaultFacetManager.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\facets\FacetManager;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\facets\UrlProcessor\UrlProcessorInterface;
+use Drupal\facets\QueryType\QueryTypeInterface;
+use Drupal\facets\Widget\WidgetPluginInterface;
+use drupal\facets\FacetSource\FacetSourcePluginInterface;
+use Drupal\facets\Processor\SortProcessorInterface;
+use Drupal\facets\Result\ResultInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -31,7 +38,7 @@ class DefaultFacetManager {
   /**
    * The query type plugin manager.
    *
-   * @var \Drupal\facets\QueryType\QueryTypePluginManager
+   * @var QueryTypePluginManager
    *   The query type plugin manager.
    */
   protected $queryTypePluginManager;
@@ -39,21 +46,21 @@ class DefaultFacetManager {
   /**
    * The facet source plugin manager.
    *
-   * @var \Drupal\facets\FacetSource\FacetSourcePluginManager
+   * @var FacetSourcePluginManager
    */
   protected $facetSourcePluginManager;
 
   /**
    * The processor plugin manager.
    *
-   * @var \Drupal\facets\Processor\ProcessorPluginManager
+   * @var ProcessorPluginManager
    */
   protected $processorPluginManager;
 
   /**
    * An array of facets that are being rendered.
    *
-   * @var \Drupal\facets\FacetInterface[]
+   * @var FacetInterface[]
    *
    * @see \Drupal\facets\FacetInterface
    * @see \Drupal\facets\Entity\Facet
@@ -63,34 +70,34 @@ class DefaultFacetManager {
   /**
    * The entity storage for facets.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface|object
+   * @var EntityStorageInterface|object
    */
   protected $facetStorage;
 
   /**
    * A static cache of already processed facets.
    *
-   * @var \Drupal\facets\FacetInterface[]
+   * @var FacetInterface[]
    */
   protected $processedFacets = [];
 
   /**
    * A static cache of already built facets.
    *
-   * @var \Drupal\facets\FacetInterface[]
+   * @var FacetInterface[]
    */
   protected $builtFacets = [];
 
   /**
    * Constructs a new instance of the DefaultFacetManager.
    *
-   * @param \Drupal\facets\QueryType\QueryTypePluginManager $query_type_plugin_manager
+   * @param QueryTypePluginManager $query_type_plugin_manager
    *   The query type plugin manager.
-   * @param \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_manager
+   * @param FacetSourcePluginManager $facet_source_manager
    *   The facet source plugin manager.
-   * @param \Drupal\facets\Processor\ProcessorPluginManager $processor_plugin_manager
+   * @param ProcessorPluginManager $processor_plugin_manager
    *   The processor plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type plugin manager.
    */
   public function __construct(QueryTypePluginManager $query_type_plugin_manager, FacetSourcePluginManager $facet_source_manager, ProcessorPluginManager $processor_plugin_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -113,7 +120,7 @@ class DefaultFacetManager {
    */
   public function alterQuery(&$query, $facetsource_id) {
     $query_is_cacheable = $query instanceof RefinableCacheableDependencyInterface;
-    /** @var \Drupal\facets\FacetInterface[] $facets */
+    /** @var FacetInterface[] $facets */
     $facets = $this->getFacetsByFacetSourceId($facetsource_id);
 
     foreach ($facets as $facet) {
@@ -137,7 +144,7 @@ class DefaultFacetManager {
 
             // Remove the query parameter from other facets.
             foreach ($facets as $other_facet) {
-              /** @var \Drupal\facets\UrlProcessor\UrlProcessorInterface $urlProcessor */
+              /** @var UrlProcessorInterface $urlProcessor */
               $urlProcessor = $other_facet->getProcessors()['url_processor_handler']->getProcessor();
               $active_filters = $urlProcessor->getActiveFilters();
               unset($active_filters[$facet->id()]);
@@ -156,7 +163,7 @@ class DefaultFacetManager {
         }
       }
 
-      /** @var \Drupal\facets\QueryType\QueryTypeInterface $query_type_plugin */
+      /** @var QueryTypeInterface $query_type_plugin */
       $query_type_plugin = $this->queryTypePluginManager->createInstance(
         $facet->getQueryType(),
         [
@@ -175,7 +182,7 @@ class DefaultFacetManager {
   /**
    * Returns enabled facets for the searcher associated with this FacetManager.
    *
-   * @return \Drupal\facets\FacetInterface[]
+   * @return FacetInterface[]
    *   An array of enabled facets.
    */
   public function getEnabledFacets() {
@@ -188,7 +195,7 @@ class DefaultFacetManager {
    * @param string $facetsource_id
    *   The facetsource ID to filter by.
    *
-   * @return \Drupal\facets\FacetInterface[]
+   * @return FacetInterface[]
    *   An array of enabled facets.
    */
   public function getFacetsByFacetSourceId($facetsource_id) {
@@ -214,7 +221,7 @@ class DefaultFacetManager {
    * @param string|null $facetsource_id
    *   The facetsource if of the currently processed facet.
    *
-   * @throws \Drupal\facets\Exception\InvalidProcessorException
+   * @throws InvalidProcessorException
    *   Thrown when one of the defined processors is invalid.
    */
   public function processFacets($facetsource_id = NULL) {
@@ -261,7 +268,7 @@ class DefaultFacetManager {
    * In this method all pre-query processors get called and their contents are
    * executed.
    *
-   * @throws \Drupal\facets\Exception\InvalidProcessorException
+   * @throws InvalidProcessorException
    *   Thrown if one of the pre query processors is invalid.
    */
   protected function initFacets() {
@@ -272,7 +279,7 @@ class DefaultFacetManager {
     $this->facets = $this->getEnabledFacets();
     foreach ($this->facets as $facet) {
       foreach ($facet->getProcessorsByStage(ProcessorInterface::STAGE_PRE_QUERY) as $processor) {
-        /** @var \Drupal\facets\Processor\PreQueryProcessorInterface $pre_query_processor */
+        /** @var PreQueryProcessorInterface $pre_query_processor */
         $pre_query_processor = $facet->getProcessors()[$processor->getPluginDefinition()['id']];
         if (!$pre_query_processor instanceof PreQueryProcessorInterface) {
           throw new InvalidProcessorException("The processor {$processor->getPluginDefinition()['id']} has a pre_query definition but doesn't implement the required PreQueryProcessorInterface interface");
@@ -290,13 +297,13 @@ class DefaultFacetManager {
    * processors that implement the  BuildProcessorInterface enabled on this
    * facet will run.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet we should build.
    *
-   * @return \Drupal\facets\FacetInterface
+   * @return FacetInterface
    *   The built Facet.
    *
-   * @throws \Drupal\facets\Exception\InvalidProcessorException
+   * @throws InvalidProcessorException
    *   Throws an exception when an invalid processor is linked to the facet.
    */
   protected function processBuild(FacetInterface $facet) {
@@ -366,13 +373,13 @@ class DefaultFacetManager {
    * Before doing any rendering, the processors that implement the
    * BuildProcessorInterface enabled on this facet will run.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet we should build.
    *
    * @return array
    *   Facet render arrays.
    *
-   * @throws \Drupal\facets\Exception\InvalidProcessorException
+   * @throws InvalidProcessorException
    *   Throws an exception when an invalid processor is linked to the facet.
    */
   public function build(FacetInterface $facet) {
@@ -389,7 +396,7 @@ class DefaultFacetManager {
     }
 
     // We include this build even if empty, it may contain attached libraries.
-    /** @var \Drupal\facets\Widget\WidgetPluginInterface $widget */
+    /** @var WidgetPluginInterface $widget */
     $widget = $facet->getWidgetInstance();
     $build = $widget->build($facet);
     CacheableMetadata::createFromObject($facet)->applyTo($build);
@@ -448,7 +455,7 @@ class DefaultFacetManager {
       unset($this->processedFacets[$facetsource_id]);
       unset($this->builtFacets[$facetsource_id]);
 
-      /** @var \drupal\facets\FacetSource\FacetSourcePluginInterface $facet_source_plugin */
+      /** @var FacetSourcePluginInterface $facet_source_plugin */
       $facet_source_plugin = $this->facetSourcePluginManager->createInstance($facetsource_id);
       $facet_source_plugin->fillFacetsWithResults($facets);
       // Collect source cachebility metadata.
@@ -466,10 +473,10 @@ class DefaultFacetManager {
    * Keep in mind that if you want to have the facet's build processor executed,
    * call returnBuiltFacet() instead.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet to process with a collected plugins cache metadata.
    *
-   * @return \Drupal\facets\FacetInterface|null
+   * @return FacetInterface|null
    *   The updated facet if it exists, NULL otherwise.
    */
   public function returnProcessedFacet(FacetInterface $facet) {
@@ -480,10 +487,10 @@ class DefaultFacetManager {
   /**
    * Returns one of the built facets.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet to process.
    *
-   * @return \Drupal\facets\FacetInterface
+   * @return FacetInterface
    *   The built Facet object with a collected plugins cache metadata.
    */
   public function returnBuiltFacet(FacetInterface $facet) {
@@ -493,12 +500,12 @@ class DefaultFacetManager {
   /**
    * Sort the facet results, and recurse to children to do the same.
    *
-   * @param \Drupal\facets\Processor\SortProcessorInterface[] $active_sort_processors
+   * @param SortProcessorInterface[] $active_sort_processors
    *   An array of sort processors.
-   * @param \Drupal\facets\Result\ResultInterface[] $results
+   * @param ResultInterface[] $results
    *   An array of results.
    *
-   * @return \Drupal\facets\Result\ResultInterface[]
+   * @return ResultInterface[]
    *   A sorted array of results.
    */
   protected function sortFacetResults(array $active_sort_processors, array $results) {
diff --git a/src/FacetSource/FacetSourceDeriverBase.php b/src/FacetSource/FacetSourceDeriverBase.php
index 96be2c7..234f25d 100644
--- a/src/FacetSource/FacetSourceDeriverBase.php
+++ b/src/FacetSource/FacetSourceDeriverBase.php
@@ -25,7 +25,7 @@ abstract class FacetSourceDeriverBase implements ContainerDeriverInterface {
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -62,7 +62,7 @@ abstract class FacetSourceDeriverBase implements ContainerDeriverInterface {
   /**
    * Retrieves the entity manager.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity manager.
    */
   public function getEntityTypeManager() {
@@ -72,7 +72,7 @@ abstract class FacetSourceDeriverBase implements ContainerDeriverInterface {
   /**
    * Sets the entity manager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
    *
    * @return $this
diff --git a/src/FacetSource/FacetSourcePluginBase.php b/src/FacetSource/FacetSourcePluginBase.php
index 20c4167..3b63c50 100644
--- a/src/FacetSource/FacetSourcePluginBase.php
+++ b/src/FacetSource/FacetSourcePluginBase.php
@@ -35,7 +35,7 @@ abstract class FacetSourcePluginBase extends PluginBase implements FacetSourcePl
   /**
    * The plugin manager.
    *
-   * @var \Drupal\facets\QueryType\QueryTypePluginManager
+   * @var QueryTypePluginManager
    */
   protected $queryTypePluginManager;
 
@@ -62,7 +62,7 @@ abstract class FacetSourcePluginBase extends PluginBase implements FacetSourcePl
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\facets\QueryType\QueryTypePluginManager $query_type_plugin_manager
+   * @param QueryTypePluginManager $query_type_plugin_manager
    *   The query type plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, QueryTypePluginManager $query_type_plugin_manager) {
diff --git a/src/FacetSource/FacetSourcePluginInterface.php b/src/FacetSource/FacetSourcePluginInterface.php
index af4a8ca..a5c7094 100644
--- a/src/FacetSource/FacetSourcePluginInterface.php
+++ b/src/FacetSource/FacetSourcePluginInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets\FacetSource;
 
+use Drupal\facets\Exception\Exception;
+use Drupal\Core\TypedData\DataDefinitionInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ -21,7 +23,7 @@ interface FacetSourcePluginInterface extends PluginFormInterface, DependentPlugi
   /**
    * Fills the facet entities with results from the facet source.
    *
-   * @param \Drupal\facets\FacetInterface[] $facets
+   * @param FacetInterface[] $facets
    *   The configured facets.
    */
   public function fillFacetsWithResults(array $facets);
@@ -29,13 +31,13 @@ interface FacetSourcePluginInterface extends PluginFormInterface, DependentPlugi
   /**
    * Returns the allowed query types for a given facet for the facet source.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet we should get query types for.
    *
    * @return string[]
    *   array of allowed query types
    *
-   * @throws \Drupal\facets\Exception\Exception
+   * @throws Exception
    *   An error when no query types are found.
    */
   public function getQueryTypesForFacet(FacetInterface $facet);
@@ -101,7 +103,7 @@ interface FacetSourcePluginInterface extends PluginFormInterface, DependentPlugi
   /**
    * Returns a single field's data definition from the facet source.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface
+   * @return DataDefinitionInterface
    *   A typed data definition.
    */
   public function getDataDefinition($field_name);
@@ -123,7 +125,7 @@ interface FacetSourcePluginInterface extends PluginFormInterface, DependentPlugi
    * search results will change whenever facets will be updated. Usually can be
    * achieved by adding facet entity as a cache dependency to a search results.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   Facet entity that being inserted.
    */
   public function registerFacet(FacetInterface $facet);
diff --git a/src/FacetSource/SearchApiFacetSourceInterface.php b/src/FacetSource/SearchApiFacetSourceInterface.php
index 91937cc..2b91d1d 100644
--- a/src/FacetSource/SearchApiFacetSourceInterface.php
+++ b/src/FacetSource/SearchApiFacetSourceInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\FacetSource;
 
+use Drupal\views\ViewExecutable;
 /**
  * A facet source that uses Search API as a base.
  */
@@ -29,7 +30,7 @@ interface SearchApiFacetSourceInterface extends FacetSourcePluginInterface {
    * This returns NULL when the facet source is not based on views. If it is, it
    * returns a ViewsExecutable plugin with the correct display already set.
    *
-   * @return \Drupal\views\ViewExecutable|null
+   * @return ViewExecutable|null
    *   NULL when the view can't be found or loaded, the view with preset display
    *   otherwise.
    */
diff --git a/src/Form/FacetCloneForm.php b/src/Form/FacetCloneForm.php
index 0db0267..50c1a82 100644
--- a/src/Form/FacetCloneForm.php
+++ b/src/Form/FacetCloneForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Form;
 
+use Drupal\facets\FacetInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -17,14 +18,14 @@ class FacetCloneForm extends EntityForm {
   /**
    * Facet source plugin manager.
    *
-   * @var \Drupal\facets\FacetSource\FacetSourcePluginManager
+   * @var FacetSourcePluginManager
    */
   protected $facetSourcePluginManager;
 
   /**
    * The facet entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $facetStorage;
 
@@ -38,11 +39,11 @@ class FacetCloneForm extends EntityForm {
   /**
    * Creates the class.
    *
-   * @param \Drupal\facets\FacetSource\FacetSourcePluginManager $facetSourcePluginManager
+   * @param FacetSourcePluginManager $facetSourcePluginManager
    *   The facet source plugin manager.
    * @param \Drupal\search_api\Display\DisplayPluginManager $displayPluginManager
    *   Search api's display plugin manager.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $facetStorage
+   * @param EntityStorageInterface $facetStorage
    *   Entity storage class.
    */
   public function __construct(FacetSourcePluginManager $facetSourcePluginManager, DisplayPluginManager $displayPluginManager, EntityStorageInterface $facetStorage) {
@@ -66,7 +67,7 @@ class FacetCloneForm extends EntityForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\facets\FacetInterface $facet */
+    /** @var FacetInterface $facet */
     $facet = $this->getEntity();
 
     if (strpos($facet->getFacetSourceId(), 'search_api:') === FALSE) {
@@ -143,7 +144,7 @@ class FacetCloneForm extends EntityForm {
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\facets\FacetInterface $facet */
+    /** @var FacetInterface $facet */
     $facet = $this->entity->createDuplicate();
     $facet->set('name', $form_state->getValue('name'));
     $facet->set('id', $form_state->getValue('id'));
diff --git a/src/Form/FacetForm.php b/src/Form/FacetForm.php
index bbecff2..3cdea2a 100644
--- a/src/Form/FacetForm.php
+++ b/src/Form/FacetForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets\Form;
 
+use Drupal\facets\FacetInterface;
+use Drupal\facets\Widget\WidgetPluginBase;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -30,50 +32,50 @@ class FacetForm extends EntityForm {
   /**
    * The facet being configured.
    *
-   * @var \Drupal\facets\FacetInterface
+   * @var FacetInterface
    */
   protected $entity;
 
   /**
    * The processor manager.
    *
-   * @var \Drupal\facets\Processor\ProcessorPluginManager
+   * @var ProcessorPluginManager
    */
   protected $processorPluginManager;
 
   /**
    * The plugin manager for widgets.
    *
-   * @var \Drupal\facets\Widget\WidgetPluginManager
+   * @var WidgetPluginManager
    */
   protected $widgetPluginManager;
 
   /**
    * The plugin manager for facet sources.
    *
-   * @var \Drupal\facets\FacetSource\FacetSourcePluginManager
+   * @var FacetSourcePluginManager
    */
   protected $facetSourcePluginManager;
 
   /**
    * The facet manager.
    *
-   * @var \Drupal\facets\FacetManager\DefaultFacetManager
+   * @var DefaultFacetManager
    */
   protected $facetsManager;
 
   /**
    * Constructs an FacetDisplayForm object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\facets\Processor\ProcessorPluginManager $processor_plugin_manager
+   * @param ProcessorPluginManager $processor_plugin_manager
    *   The processor plugin manager.
-   * @param \Drupal\facets\Widget\WidgetPluginManager $widget_plugin_manager
+   * @param WidgetPluginManager $widget_plugin_manager
    *   The plugin manager for widgets.
-   * @param \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_plugin_manager
+   * @param FacetSourcePluginManager $facet_source_plugin_manager
    *   The plugin manager for facet sources.
-   * @param \Drupal\facets\FacetManager\DefaultFacetManager $facets_manager
+   * @param DefaultFacetManager $facets_manager
    *   The facet manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ProcessorPluginManager $processor_plugin_manager, WidgetPluginManager $widget_plugin_manager, FacetSourcePluginManager $facet_source_plugin_manager, DefaultFacetManager $facets_manager) {
@@ -109,11 +111,11 @@ class FacetForm extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the initial structure of the plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function buildWidgetConfigForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\facets\FacetInterface $facet */
+    /** @var FacetInterface $facet */
     $facet = $this->getEntity();
     $widget_plugin_id = $form_state->getValue('widget') ?: $facet->getWidget()['type'];
     $widget_config = $form_state->getValue('widget_config') ?: $facet->getWidget()['config'];
@@ -121,7 +123,7 @@ class FacetForm extends EntityForm {
       return;
     }
 
-    /** @var \Drupal\facets\Widget\WidgetPluginBase $widget */
+    /** @var WidgetPluginBase $widget */
     $facet->setWidget($widget_plugin_id, $widget_config);
     $widget = $facet->getWidgetInstance();
 
@@ -156,7 +158,7 @@ class FacetForm extends EntityForm {
     }
     $form['#attached']['library'][] = 'facets/drupal.facets.admin_css';
 
-    /** @var \Drupal\facets\FacetInterface $facet */
+    /** @var FacetInterface $facet */
     $facet = $this->entity;
 
     $facet_sources = [];
@@ -594,7 +596,7 @@ class FacetForm extends EntityForm {
     // Fill in the containers previously created with the processors that are
     // enabled on the facet.
     foreach ($processors_by_stage as $stage => $processors) {
-      /** @var \Drupal\facets\Processor\ProcessorInterface $processor */
+      /** @var ProcessorInterface $processor */
       foreach ($processors as $processor_id => $processor) {
         $weight = $processor_settings[$processor_id]['weights'][$stage] ?? $processor->getDefaultWeight($stage);
         if ($processor->isHidden()) {
@@ -640,11 +642,11 @@ class FacetForm extends EntityForm {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);
 
-    /** @var \Drupal\facets\FacetInterface $facet */
+    /** @var FacetInterface $facet */
     $facet = $this->entity;
 
     $values = $form_state->getValues();
-    /** @var \Drupal\facets\Processor\ProcessorInterface[] $processors */
+    /** @var ProcessorInterface[] $processors */
     $processors = $facet->getProcessors(FALSE);
 
     // Iterate over all processors that have a form and are enabled.
@@ -694,10 +696,10 @@ class FacetForm extends EntityForm {
     $values = $form_state->getValues();
 
     // Store processor settings.
-    /** @var \Drupal\facets\FacetInterface $facet */
+    /** @var FacetInterface $facet */
     $facet = $this->entity;
 
-    /** @var \Drupal\facets\Processor\ProcessorInterface $processor */
+    /** @var ProcessorInterface $processor */
     $processors = $facet->getProcessors(FALSE);
     foreach ($processors as $processor_id => $processor) {
       $form_container_key = $processor instanceof SortProcessorInterface ? 'facet_sorting' : 'facet_settings';
diff --git a/src/Form/FacetSettingsForm.php b/src/Form/FacetSettingsForm.php
index 247ad91..6a57b62 100644
--- a/src/Form/FacetSettingsForm.php
+++ b/src/Form/FacetSettingsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Form;
 
+use Drupal\facets\FacetSource\FacetSourcePluginInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -22,27 +23,27 @@ class FacetSettingsForm extends EntityForm {
   /**
    * The plugin manager for facet sources.
    *
-   * @var \Drupal\facets\FacetSource\FacetSourcePluginManager
+   * @var FacetSourcePluginManager
    */
   protected $facetSourcePluginManager;
 
   /**
    * The plugin manager for processors.
    *
-   * @var \Drupal\facets\Processor\ProcessorPluginManager
+   * @var ProcessorPluginManager
    */
   protected $processorPluginManager;
 
   /**
    * Constructs a FacetForm object.
    *
-   * @param \Drupal\facets\FacetSource\FacetSourcePluginManager $facet_source_plugin_manager
+   * @param FacetSourcePluginManager $facet_source_plugin_manager
    *   The plugin manager for facet sources.
-   * @param \Drupal\facets\Processor\ProcessorPluginManager $processor_plugin_manager
+   * @param ProcessorPluginManager $processor_plugin_manager
    *   The plugin manager for processors.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator.
    */
   public function __construct(FacetSourcePluginManager $facet_source_plugin_manager, ProcessorPluginManager $processor_plugin_manager, ModuleHandlerInterface $module_handler, UrlGeneratorInterface $url_generator) {
@@ -97,9 +98,9 @@ class FacetSettingsForm extends EntityForm {
    *
    * @param array $form
    *   The form array for the complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facets facet entity that is being created or edited.
    */
   public function buildEntityForm(array &$form, FormStateInterface $form_state, FacetInterface $facet) {
@@ -191,14 +192,14 @@ class FacetSettingsForm extends EntityForm {
    *
    * @param array $form
    *   An associative array containing the initial structure of the plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    */
   public function buildFacetSourceConfigForm(array &$form, FormStateInterface $form_state) {
     $facet_source_id = $this->getEntity()->getFacetSourceId();
 
     if (!is_null($facet_source_id) && $facet_source_id !== '') {
-      /** @var \Drupal\facets\FacetSource\FacetSourcePluginInterface $facet_source */
+      /** @var FacetSourcePluginInterface $facet_source */
       $facet_source = $this->facetSourcePluginManager->createInstance($facet_source_id, ['facet' => $this->getEntity()]);
 
       if ($config_form = $facet_source->buildConfigurationForm([], $form_state)) {
@@ -218,7 +219,7 @@ class FacetSettingsForm extends EntityForm {
 
     $facet_source_id = $form_state->getValue('facet_source_id');
     if (!is_null($facet_source_id) && $facet_source_id !== '') {
-      /** @var \Drupal\facets\FacetSource\FacetSourcePluginInterface $facet_source */
+      /** @var FacetSourcePluginInterface $facet_source */
       $facet_source = $this->facetSourcePluginManager->createInstance($facet_source_id, ['facet' => $this->getEntity()]);
       $facet_source->validateConfigurationForm($form, $form_state);
     }
@@ -230,7 +231,7 @@ class FacetSettingsForm extends EntityForm {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
 
-    /** @var \Drupal\facets\FacetInterface $facet */
+    /** @var FacetInterface $facet */
     $facet = $this->getEntity();
     $is_new = $facet->isNew();
     if ($is_new) {
@@ -269,7 +270,7 @@ class FacetSettingsForm extends EntityForm {
 
     $facet_source_id = $form_state->getValue('facet_source_id');
     if (!is_null($facet_source_id) && $facet_source_id !== '') {
-      /** @var \Drupal\facets\FacetSource\FacetSourcePluginInterface $facet_source */
+      /** @var FacetSourcePluginInterface $facet_source */
       $facet_source = $this->facetSourcePluginManager->createInstance($facet_source_id, ['facet' => $this->getEntity()]);
       $facet_source->submitConfigurationForm($form, $form_state);
     }
diff --git a/src/Form/FacetSourceEditForm.php b/src/Form/FacetSourceEditForm.php
index ced510d..d443090 100644
--- a/src/Form/FacetSourceEditForm.php
+++ b/src/Form/FacetSourceEditForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Form;
 
+use Drupal\facets\FacetSourceInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -20,7 +21,7 @@ class FacetSourceEditForm extends EntityForm {
   /**
    * The plugin manager for URL Processors.
    *
-   * @var \Drupal\facets\UrlProcessor\UrlProcessorPluginManager
+   * @var UrlProcessorPluginManager
    */
   protected $urlProcessorPluginManager;
 
@@ -38,11 +39,11 @@ class FacetSourceEditForm extends EntityForm {
   /**
    * Constructs a FacetSourceEditForm.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\facets\UrlProcessor\UrlProcessorPluginManager $url_processor_plugin_manager
+   * @param UrlProcessorPluginManager $url_processor_plugin_manager
    *   The url processor plugin manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   Drupal's module handler.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, UrlProcessorPluginManager $url_processor_plugin_manager, ModuleHandlerInterface $moduleHandler) {
@@ -63,7 +64,7 @@ class FacetSourceEditForm extends EntityForm {
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
 
-    /** @var \Drupal\facets\FacetSourceInterface $facet_source */
+    /** @var FacetSourceInterface $facet_source */
     $facet_source = $this->getEntity();
 
     $form['#tree'] = TRUE;
diff --git a/src/Hierarchy/HierarchyPluginBase.php b/src/Hierarchy/HierarchyPluginBase.php
index 9a0793a..1043803 100644
--- a/src/Hierarchy/HierarchyPluginBase.php
+++ b/src/Hierarchy/HierarchyPluginBase.php
@@ -46,7 +46,7 @@ abstract class HierarchyPluginBase extends ProcessorPluginBase implements Hierar
    *
    * @param array $form
    *   The configuration form.
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet entity.
    */
   protected function setConfigurationFormDefaultValues(array &$form, FacetInterface $facet) {
diff --git a/src/LanguageSwitcherLinksAlterer.php b/src/LanguageSwitcherLinksAlterer.php
index 690c744..0d80fa9 100644
--- a/src/LanguageSwitcherLinksAlterer.php
+++ b/src/LanguageSwitcherLinksAlterer.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets;
 
+use Drupal\facets\UrlProcessor\UrlProcessorInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -22,28 +23,28 @@ class LanguageSwitcherLinksAlterer {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The URL processor plugin manager.
    *
-   * @var \Drupal\facets\UrlProcessor\UrlProcessorPluginManager
+   * @var UrlProcessorPluginManager
    */
   protected $urlProcessorManager;
 
@@ -57,13 +58,13 @@ class LanguageSwitcherLinksAlterer {
   /**
    * LanguageSwitcherLinksAlterer constructor.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\facets\UrlProcessor\UrlProcessorPluginManager $urlProcessorManager
+   * @param UrlProcessorPluginManager $urlProcessorManager
    *   The URL processor plugin manager.
    */
   public function __construct(LanguageManagerInterface $languageManager, CacheBackendInterface $cacheBackend, EntityTypeManagerInterface $entityTypeManager, UrlProcessorPluginManager $urlProcessorManager) {
@@ -80,7 +81,7 @@ class LanguageSwitcherLinksAlterer {
    *   The links.
    * @param string $type
    *   The language type.
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL the switch links will be relative to.
    *
    * @see facets_language_switch_links_alter()
@@ -147,14 +148,14 @@ class LanguageSwitcherLinksAlterer {
 
     $data = [];
 
-    /** @var \Drupal\facets\FacetInterface[] $facets */
+    /** @var FacetInterface[] $facets */
     $facets = $this->entityTypeManager->getStorage('facets_facet')->loadMultipleOverrideFree();
 
     $cache_tags = [];
     foreach ($facets as $facet) {
       $cache_tags = Cache::mergeTags($cache_tags, $facet->getCacheTags());
 
-      /** @var \Drupal\facets\UrlProcessor\UrlProcessorInterface $urlProcessor */
+      /** @var UrlProcessorInterface $urlProcessor */
       $id = $facet->getFacetSourceConfig()->getUrlProcessorName();
       $url_processor = $this->urlProcessorManager->createInstance($id, ['facet' => $facet]);
 
diff --git a/src/Plugin/Block/FacetBlock.php b/src/Plugin/Block/FacetBlock.php
index b0de9e3..5c681db 100644
--- a/src/Plugin/Block/FacetBlock.php
+++ b/src/Plugin/Block/FacetBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets\Plugin\Block;
 
+use Drupal\facets\FacetSource\FacetSourcePluginInterface;
+use Drupal\facets\FacetInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -24,14 +26,14 @@ class FacetBlock extends BlockBase implements ContainerFactoryPluginInterface {
   /**
    * The facet manager.
    *
-   * @var \Drupal\facets\FacetManager\DefaultFacetManager
+   * @var DefaultFacetManager
    */
   protected $facetManager;
 
   /**
    * The entity storage used for facets.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $facetStorage;
 
@@ -44,9 +46,9 @@ class FacetBlock extends BlockBase implements ContainerFactoryPluginInterface {
    *   The plugin_id for the plugin instance.
    * @param string $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\facets\FacetManager\DefaultFacetManager $facet_manager
+   * @param DefaultFacetManager $facet_manager
    *   The facet manager.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $facet_storage
+   * @param EntityStorageInterface $facet_storage
    *   The entity storage used for facets.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DefaultFacetManager $facet_manager, EntityStorageInterface $facet_storage) {
@@ -85,7 +87,7 @@ class FacetBlock extends BlockBase implements ContainerFactoryPluginInterface {
     if (!empty($build)) {
       // Add extra elements from facet source, for example, ajax scripts.
       // @see Drupal\facets\Plugin\facets\facet_source\SearchApiDisplay
-      /** @var \Drupal\facets\FacetSource\FacetSourcePluginInterface $facet_source */
+      /** @var FacetSourcePluginInterface $facet_source */
       $facet_source = $facet->getFacetSource();
       $build += $facet_source->buildFacet();
 
@@ -123,7 +125,7 @@ class FacetBlock extends BlockBase implements ContainerFactoryPluginInterface {
    * @param bool $built
    *   Whether or not this facet should be prebuilt.
    *
-   * @return \Drupal\facets\FacetInterface
+   * @return FacetInterface
    *   The facet entity.
    */
   protected function getFacet(bool $built = FALSE) {
diff --git a/src/Plugin/Block/FacetBlockDeriver.php b/src/Plugin/Block/FacetBlockDeriver.php
index 9444db7..776091f 100644
--- a/src/Plugin/Block/FacetBlockDeriver.php
+++ b/src/Plugin/Block/FacetBlockDeriver.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets\Plugin\Block;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\facets\FacetInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Plugin\Context\ContextDefinition;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ -25,7 +27,7 @@ class FacetBlockDeriver implements ContainerDeriverInterface {
   /**
    * The entity storage used for facets.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $facetStorage;
 
@@ -56,7 +58,7 @@ class FacetBlockDeriver implements ContainerDeriverInterface {
     if (!isset($this->derivatives[$base_plugin_id])) {
       $plugin_derivatives = [];
 
-      /** @var \Drupal\facets\FacetInterface[] $all_facets */
+      /** @var FacetInterface[] $all_facets */
       $all_facets = $this->facetStorage->loadMultiple();
 
       foreach ($all_facets as $facet) {
diff --git a/src/Plugin/facets/facet_source/SearchApiBaseFacetSource.php b/src/Plugin/facets/facet_source/SearchApiBaseFacetSource.php
index 4ed09b2..506ff61 100644
--- a/src/Plugin/facets/facet_source/SearchApiBaseFacetSource.php
+++ b/src/Plugin/facets/facet_source/SearchApiBaseFacetSource.php
@@ -45,7 +45,7 @@ abstract class SearchApiBaseFacetSource extends FacetSourcePluginBase implements
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\facets\QueryType\QueryTypePluginManager $query_type_plugin_manager
+   * @param QueryTypePluginManager $query_type_plugin_manager
    *   The query type plugin manager.
    * @param \Drupal\search_api\Utility\QueryHelper $search_results_cache
    *   The query type plugin manager.
diff --git a/src/Plugin/facets/facet_source/SearchApiDisplay.php b/src/Plugin/facets/facet_source/SearchApiDisplay.php
index a6d5080..b839f65 100644
--- a/src/Plugin/facets/facet_source/SearchApiDisplay.php
+++ b/src/Plugin/facets/facet_source/SearchApiDisplay.php
@@ -64,14 +64,14 @@ class SearchApiDisplay extends FacetSourcePluginBase implements SearchApiFacetSo
   /**
    * The clone of the current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The Drupal module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;
 
@@ -84,15 +84,15 @@ class SearchApiDisplay extends FacetSourcePluginBase implements SearchApiFacetSo
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\facets\QueryType\QueryTypePluginManager $query_type_plugin_manager
+   * @param QueryTypePluginManager $query_type_plugin_manager
    *   The query type plugin manager.
    * @param \Drupal\search_api\Utility\QueryHelper $search_results_cache
    *   The query type plugin manager.
    * @param \Drupal\search_api\Display\DisplayPluginManager $display_plugin_manager
    *   The display plugin manager.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request object for the current request.
-   * @param \Drupal\Core\Extension\ModuleHandler $moduleHandler
+   * @param ModuleHandler $moduleHandler
    *   Core's module handler class.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, QueryTypePluginManager $query_type_plugin_manager, QueryHelper $search_results_cache, DisplayPluginManager $display_plugin_manager, Request $request, ModuleHandler $moduleHandler) {
diff --git a/src/Plugin/facets/hierarchy/Taxonomy.php b/src/Plugin/facets/hierarchy/Taxonomy.php
index f3edaae..56b24f8 100644
--- a/src/Plugin/facets/hierarchy/Taxonomy.php
+++ b/src/Plugin/facets/hierarchy/Taxonomy.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets\Plugin\facets\hierarchy;
 
+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\taxonomy\Entity\Term;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\facets\Hierarchy\HierarchyPluginBase;
@@ -35,14 +37,14 @@ class Taxonomy extends HierarchyPluginBase {
   /**
    * The term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface
+   * @var TermStorageInterface
    */
   protected $termStorage;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -55,7 +57,7 @@ class Taxonomy extends HierarchyPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ -78,7 +80,7 @@ class Taxonomy extends HierarchyPluginBase {
   /**
    * Returns the term storage.
    *
-   * @return \Drupal\taxonomy\TermStorageInterface
+   * @return TermStorageInterface
    *   The term storage.
    */
   public function getTermStorage() {
@@ -151,7 +153,7 @@ class Taxonomy extends HierarchyPluginBase {
         $currentParentIds = $this->getParentIds($id);
         if (!$currentParentIds) {
           if (!$topLevelTerms) {
-            /** @var \Drupal\taxonomy\Entity\Term $term */
+            /** @var Term $term */
             $term = $this->getTermStorage()->load($id);
             $topLevelTerms = array_map(function ($term) {
               return $term->tid;
diff --git a/src/Plugin/facets/processor/BooleanItemProcessor.php b/src/Plugin/facets/processor/BooleanItemProcessor.php
index 070d39f..7391709 100644
--- a/src/Plugin/facets/processor/BooleanItemProcessor.php
+++ b/src/Plugin/facets/processor/BooleanItemProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\facets\Result\Result;
 use Drupal\Core\Cache\UnchangingCacheableDependencyTrait;
 use Drupal\Core\TypedData\ComplexDataDefinitionInterface;
 use Drupal\facets\FacetInterface;
@@ -32,7 +33,7 @@ class BooleanItemProcessor extends ProcessorPluginBase implements BuildProcessor
   public function build(FacetInterface $facet, array $results) {
     $config = $this->getConfiguration();
 
-    /** @var \Drupal\facets\Result\Result $result */
+    /** @var Result $result */
     foreach ($results as $key => $result) {
       $value = '';
       if ($result->getRawValue() == 0) {
diff --git a/src/Plugin/facets/processor/CombineFacetProcessor.php b/src/Plugin/facets/processor/CombineFacetProcessor.php
index e1dde3a..53aa5b4 100644
--- a/src/Plugin/facets/processor/CombineFacetProcessor.php
+++ b/src/Plugin/facets/processor/CombineFacetProcessor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\facets\Entity\Facet;
 use Drupal\Core\Cache\UnchangingCacheableDependencyTrait;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\facets\FacetInterface;
@@ -31,14 +33,14 @@ class CombineFacetProcessor extends ProcessorPluginBase implements BuildProcesso
   /**
    * The language manager.
    *
-   * @var \Drupal\facets\FacetManager\DefaultFacetManager
+   * @var DefaultFacetManager
    */
   protected $facetsManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $facetStorage;
 
@@ -51,9 +53,9 @@ class CombineFacetProcessor extends ProcessorPluginBase implements BuildProcesso
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\facets\FacetManager\DefaultFacetManager $facets_manager
+   * @param DefaultFacetManager $facets_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DefaultFacetManager $facets_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -86,7 +88,7 @@ class CombineFacetProcessor extends ProcessorPluginBase implements BuildProcesso
 
     // Loop over all defined blocks and filter them by provider, this builds an
     // array of blocks that are provided by the facets module.
-    /** @var \Drupal\facets\Entity\Facet[] $facets */
+    /** @var Facet[] $facets */
     $facets = $this->facetStorage->loadMultiple();
     foreach ($facets as $facet) {
       if ($facet->id() === $current_facet->id()) {
@@ -148,7 +150,7 @@ class CombineFacetProcessor extends ProcessorPluginBase implements BuildProcesso
     $keyed_results = $facet->getResultsKeyedByRawValue($results);
 
     foreach ($enabled_combinations as $facet_id => $settings) {
-      /** @var \Drupal\facets\Entity\Facet $current_facet */
+      /** @var Facet $current_facet */
       $current_facet = $this->facetStorage->load($facet_id);
       $current_facet = $this->facetsManager->returnBuiltFacet($current_facet);
       switch ($settings['mode']) {
diff --git a/src/Plugin/facets/processor/CountLimitProcessor.php b/src/Plugin/facets/processor/CountLimitProcessor.php
index 059a07d..1299ad7 100644
--- a/src/Plugin/facets/processor/CountLimitProcessor.php
+++ b/src/Plugin/facets/processor/CountLimitProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\facets\Result\Result;
 use Drupal\Core\Cache\UnchangingCacheableDependencyTrait;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\facets\FacetInterface;
@@ -32,7 +33,7 @@ class CountLimitProcessor extends ProcessorPluginBase implements BuildProcessorI
 
     $min_count = $config['minimum_items'];
     $max_count = $config['maximum_items'];
-    /** @var \Drupal\facets\Result\Result $result */
+    /** @var Result $result */
     foreach ($results as $id => $result) {
       if (($min_count && $result->getCount() < $min_count) ||
         ($max_count && $result->getCount() > $max_count)) {
diff --git a/src/Plugin/facets/processor/DependentFacetProcessor.php b/src/Plugin/facets/processor/DependentFacetProcessor.php
index 4f10545..b6d0dd4 100644
--- a/src/Plugin/facets/processor/DependentFacetProcessor.php
+++ b/src/Plugin/facets/processor/DependentFacetProcessor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\facets\Entity\Facet;
 use Drupal\Core\Cache\UnchangingCacheableDependencyTrait;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\facets\FacetInterface;
@@ -31,14 +33,14 @@ class DependentFacetProcessor extends ProcessorPluginBase implements BuildProces
   /**
    * The language manager.
    *
-   * @var \Drupal\facets\FacetManager\DefaultFacetManager
+   * @var DefaultFacetManager
    */
   protected $facetsManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $facetStorage;
 
@@ -51,9 +53,9 @@ class DependentFacetProcessor extends ProcessorPluginBase implements BuildProces
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\facets\FacetManager\DefaultFacetManager $facets_manager
+   * @param DefaultFacetManager $facets_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DefaultFacetManager $facets_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -86,7 +88,7 @@ class DependentFacetProcessor extends ProcessorPluginBase implements BuildProces
 
     // Loop over all defined blocks and filter them by provider, this builds an
     // array of blocks that are provided by the facets module.
-    /** @var \Drupal\facets\Entity\Facet[] $facets */
+    /** @var Facet[] $facets */
     $facets = $this->facetStorage->loadMultiple();
     foreach ($facets as $facet) {
       if ($facet->getFacetSourceId() !== $current_facet->getFacetSourceId()) {
@@ -171,7 +173,7 @@ class DependentFacetProcessor extends ProcessorPluginBase implements BuildProces
     }
 
     foreach ($enabled_conditions as $facet_id => $condition_settings) {
-      /** @var \Drupal\facets\Entity\Facet $current_facet */
+      /** @var Facet $current_facet */
       $current_facet = $this->facetStorage->load($facet_id);
       $current_facet = $this->facetsManager->returnBuiltFacet($current_facet);
       $facet->addCacheableDependency($current_facet);
@@ -189,7 +191,7 @@ class DependentFacetProcessor extends ProcessorPluginBase implements BuildProces
    *
    * @param array $condition_settings
    *   The condition settings for the facet to check.
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet to check.
    *
    * @return bool
diff --git a/src/Plugin/facets/processor/DisplayValueWidgetOrderProcessor.php b/src/Plugin/facets/processor/DisplayValueWidgetOrderProcessor.php
index c148580..ba50582 100644
--- a/src/Plugin/facets/processor/DisplayValueWidgetOrderProcessor.php
+++ b/src/Plugin/facets/processor/DisplayValueWidgetOrderProcessor.php
@@ -30,7 +30,7 @@ class DisplayValueWidgetOrderProcessor extends SortProcessorPluginBase implement
   /**
    * The transliteration service.
    *
-   * @var \Drupal\Component\Transliteration\TransliterationInterface
+   * @var TransliterationInterface
    */
   protected $transliteration;
 
@@ -43,7 +43,7 @@ class DisplayValueWidgetOrderProcessor extends SortProcessorPluginBase implement
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliteration
+   * @param TransliterationInterface $transliteration
    *   The transliteration service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TransliterationInterface $transliteration) {
diff --git a/src/Plugin/facets/processor/ExcludeSpecifiedItemsProcessor.php b/src/Plugin/facets/processor/ExcludeSpecifiedItemsProcessor.php
index dc9322b..52ad2b5 100644
--- a/src/Plugin/facets/processor/ExcludeSpecifiedItemsProcessor.php
+++ b/src/Plugin/facets/processor/ExcludeSpecifiedItemsProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\facets\Result\ResultInterface;
 use Drupal\Core\Cache\UnchangingCacheableDependencyTrait;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\facets\FacetInterface;
@@ -30,7 +31,7 @@ class ExcludeSpecifiedItemsProcessor extends ProcessorPluginBase implements Buil
   public function build(FacetInterface $facet, array $results) {
     $config = $this->getConfiguration();
 
-    /** @var \Drupal\facets\Result\ResultInterface $result */
+    /** @var ResultInterface $result */
     $exclude_item = $config['exclude'];
     foreach ($results as $id => $result) {
       $is_excluded = FALSE;
diff --git a/src/Plugin/facets/processor/GranularItemProcessor.php b/src/Plugin/facets/processor/GranularItemProcessor.php
index 293847a..9061ef3 100644
--- a/src/Plugin/facets/processor/GranularItemProcessor.php
+++ b/src/Plugin/facets/processor/GranularItemProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\facets\Result\ResultInterface;
 use Drupal\Core\Cache\UnchangingCacheableDependencyTrait;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\facets\FacetInterface;
@@ -28,7 +29,7 @@ class GranularItemProcessor extends ProcessorPluginBase implements BuildProcesso
    * {@inheritdoc}
    */
   public function build(FacetInterface $facet, array $results) {
-    /** @var \Drupal\facets\Result\ResultInterface $result */
+    /** @var ResultInterface $result */
     foreach ($results as $result) {
       $value = $result->getRawValue();
       if (is_numeric($value)) {
diff --git a/src/Plugin/facets/processor/HideActiveItemsProcessor.php b/src/Plugin/facets/processor/HideActiveItemsProcessor.php
index 3612e93..9e43158 100644
--- a/src/Plugin/facets/processor/HideActiveItemsProcessor.php
+++ b/src/Plugin/facets/processor/HideActiveItemsProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\facets\Result\ResultInterface;
 use Drupal\Core\Cache\UnchangingCacheableDependencyTrait;
 use Drupal\facets\FacetInterface;
 use Drupal\facets\Processor\BuildProcessorInterface;
@@ -28,7 +29,7 @@ class HideActiveItemsProcessor extends ProcessorPluginBase implements BuildProce
    */
   public function build(FacetInterface $facet, array $results) {
 
-    /** @var \Drupal\facets\Result\ResultInterface $result */
+    /** @var ResultInterface $result */
     foreach ($results as $id => $result) {
       if ($result->isActive()) {
         unset($results[$id]);
diff --git a/src/Plugin/facets/processor/HideNonNarrowingResultProcessor.php b/src/Plugin/facets/processor/HideNonNarrowingResultProcessor.php
index 010a737..1ad3ad0 100644
--- a/src/Plugin/facets/processor/HideNonNarrowingResultProcessor.php
+++ b/src/Plugin/facets/processor/HideNonNarrowingResultProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\facets\Result\ResultInterface;
 use Drupal\Core\Cache\UnchangingCacheableDependencyTrait;
 use Drupal\facets\FacetInterface;
 use Drupal\facets\Processor\BuildProcessorInterface;
@@ -35,7 +36,7 @@ class HideNonNarrowingResultProcessor extends ProcessorPluginBase implements Bui
       }
     }
 
-    /** @var \Drupal\facets\Result\ResultInterface $result */
+    /** @var ResultInterface $result */
     foreach ($results as $id => $result) {
       if ((($result->getCount() == $result_count) || ($result->getCount() == 0)) && !$result->isActive() && !$result->hasActiveChildren()) {
         unset($results[$id]);
diff --git a/src/Plugin/facets/processor/HideOnlyOneItemProcessor.php b/src/Plugin/facets/processor/HideOnlyOneItemProcessor.php
index 5c08765..9aba875 100644
--- a/src/Plugin/facets/processor/HideOnlyOneItemProcessor.php
+++ b/src/Plugin/facets/processor/HideOnlyOneItemProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\facets\Result\Result;
 use Drupal\Core\Cache\UnchangingCacheableDependencyTrait;
 use Drupal\facets\FacetInterface;
 use Drupal\facets\Processor\BuildProcessorInterface;
@@ -31,7 +32,7 @@ class HideOnlyOneItemProcessor extends ProcessorPluginBase implements BuildProce
       return $results;
     }
 
-    /** @var \Drupal\facets\Result\Result $result */
+    /** @var Result $result */
     $result = reset($results);
 
     return $result->isActive() ? $results : [];
diff --git a/src/Plugin/facets/processor/HierarchyProcessor.php b/src/Plugin/facets/processor/HierarchyProcessor.php
index 879a447..225791b 100644
--- a/src/Plugin/facets/processor/HierarchyProcessor.php
+++ b/src/Plugin/facets/processor/HierarchyProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\facets\Result\ResultInterface;
 use Drupal\Core\Cache\UnchangingCacheableDependencyTrait;
 use Drupal\facets\FacetInterface;
 use Drupal\facets\Processor\BuildProcessorInterface;
@@ -64,12 +65,12 @@ class HierarchyProcessor extends ProcessorPluginBase implements BuildProcessorIn
    * When given an array of results and an array which defines the hierarchical
    * structure, this will build the results structure and set all childs.
    *
-   * @param \Drupal\facets\Result\ResultInterface[] $keyed_results
+   * @param ResultInterface[] $keyed_results
    *   An array of results keyed by id.
    * @param array $parent_groups
    *   An array of 'child id arrays' keyed by their parent id.
    *
-   * @return \Drupal\facets\Result\ResultInterface[]
+   * @return ResultInterface[]
    *   An array of results structured hierarchically.
    */
   protected function buildHierarchicalTree(array $keyed_results, array $parent_groups): array {
diff --git a/src/Plugin/facets/processor/ListItemProcessor.php b/src/Plugin/facets/processor/ListItemProcessor.php
index ae0f995..1b321e6 100644
--- a/src/Plugin/facets/processor/ListItemProcessor.php
+++ b/src/Plugin/facets/processor/ListItemProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\facets\Result\ResultInterface;
 use Drupal\Core\Cache\UnchangingCacheableDependencyTrait;
 use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -36,21 +37,21 @@ class ListItemProcessor extends ProcessorPluginBase implements BuildProcessorInt
   /**
    * The config manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity_type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -63,11 +64,11 @@ class ListItemProcessor extends ProcessorPluginBase implements BuildProcessorInt
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The config manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity bundle info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ConfigManagerInterface $config_manager, EntityFieldManagerInterface $entity_field_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ -176,17 +177,17 @@ class ListItemProcessor extends ProcessorPluginBase implements BuildProcessorInt
   /**
    * Overwrite the display value of the result with a new text.
    *
-   * @param \Drupal\facets\Result\ResultInterface[] $results
+   * @param ResultInterface[] $results
    *   An array of results to work on.
    * @param array $replacements
    *   An array of values that contain possible replacements for the orignal
    *   values.
    *
-   * @return \Drupal\facets\Result\ResultInterface[]
+   * @return ResultInterface[]
    *   The changed results.
    */
   protected function overWriteDisplayValues(array $results, array $replacements) {
-    /** @var \Drupal\facets\Result\ResultInterface $a */
+    /** @var ResultInterface $a */
     foreach ($results as &$a) {
       if (isset($replacements[$a->getRawValue()])) {
         $a->setDisplayValue($replacements[$a->getRawValue()]);
diff --git a/src/Plugin/facets/processor/ShowOnlyDeepestLevelItemsProcessor.php b/src/Plugin/facets/processor/ShowOnlyDeepestLevelItemsProcessor.php
index c0467f9..3abaa77 100644
--- a/src/Plugin/facets/processor/ShowOnlyDeepestLevelItemsProcessor.php
+++ b/src/Plugin/facets/processor/ShowOnlyDeepestLevelItemsProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\facets\Result\ResultInterface;
 use Drupal\Core\Cache\UnchangingCacheableDependencyTrait;
 use Drupal\facets\FacetInterface;
 use Drupal\facets\Processor\BuildProcessorInterface;
@@ -27,7 +28,7 @@ class ShowOnlyDeepestLevelItemsProcessor extends ProcessorPluginBase implements
    * {@inheritdoc}
    */
   public function build(FacetInterface $facet, array $results) {
-    /** @var \Drupal\facets\Result\ResultInterface $result */
+    /** @var ResultInterface $result */
     foreach ($results as $id => $result) {
       if (!empty($result->getChildren())) {
         unset($results[$id]);
diff --git a/src/Plugin/facets/processor/ShowSiblingsProcessor.php b/src/Plugin/facets/processor/ShowSiblingsProcessor.php
index 1bbd8ae..f20f5d7 100644
--- a/src/Plugin/facets/processor/ShowSiblingsProcessor.php
+++ b/src/Plugin/facets/processor/ShowSiblingsProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\facets\Result\ResultInterface;
 use Drupal\Core\Cache\UnchangingCacheableDependencyTrait;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\facets\FacetInterface;
@@ -29,7 +30,7 @@ class ShowSiblingsProcessor extends ProcessorPluginBase implements BuildProcesso
    * {@inheritdoc}
    */
   public function build(FacetInterface $facet, array $results) {
-    /** @var \Drupal\facets\Result\ResultInterface[] $results */
+    /** @var ResultInterface[] $results */
     if ($facet->getUseHierarchy()) {
       $rawValues = array_map(function ($result) {
         return $result->getRawValue();
diff --git a/src/Plugin/facets/processor/TermWeightWidgetOrderProcessor.php b/src/Plugin/facets/processor/TermWeightWidgetOrderProcessor.php
index bedfb2b..b0195db 100644
--- a/src/Plugin/facets/processor/TermWeightWidgetOrderProcessor.php
+++ b/src/Plugin/facets/processor/TermWeightWidgetOrderProcessor.php
@@ -32,7 +32,7 @@ class TermWeightWidgetOrderProcessor extends SortProcessorPluginBase implements
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -45,7 +45,7 @@ class TermWeightWidgetOrderProcessor extends SortProcessorPluginBase implements
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/src/Plugin/facets/processor/TranslateEntityAggregatedFieldProcessor.php b/src/Plugin/facets/processor/TranslateEntityAggregatedFieldProcessor.php
index 3c94210..8d4f9a9 100644
--- a/src/Plugin/facets/processor/TranslateEntityAggregatedFieldProcessor.php
+++ b/src/Plugin/facets/processor/TranslateEntityAggregatedFieldProcessor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\facets\Result\ResultInterface;
+use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Config\ConfigManagerInterface;
@@ -34,35 +36,35 @@ class TranslateEntityAggregatedFieldProcessor extends ProcessorPluginBase implem
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The config manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The entity_type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -75,15 +77,15 @@ class TranslateEntityAggregatedFieldProcessor extends ProcessorPluginBase implem
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The config manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity bundle info service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LanguageManagerInterface $language_manager, EntityTypeManagerInterface $entity_type_manager, ConfigManagerInterface $config_manager, EntityFieldManagerInterface $entity_field_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ -141,7 +143,7 @@ class TranslateEntityAggregatedFieldProcessor extends ProcessorPluginBase implem
         $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
         $field_storage = $definition_update_manager->getFieldStorageDefinition($field, $entity_type_id);
         if ($field_storage && $field_storage->getType() === 'entity_reference') {
-          /** @var \Drupal\facets\Result\ResultInterface $result */
+          /** @var ResultInterface $result */
           $ids = [];
           foreach ($results as $delta => $result) {
             $ids[$delta] = $result->getRawValue();
@@ -160,7 +162,7 @@ class TranslateEntityAggregatedFieldProcessor extends ProcessorPluginBase implem
                   continue;
                 }
 
-                /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+                /** @var ContentEntityBase $entity */
                 $entity = $entities[$ids[$i]];
                 // Check for a translation of the entity and load that
                 // instead if one's found.
@@ -195,17 +197,17 @@ class TranslateEntityAggregatedFieldProcessor extends ProcessorPluginBase implem
   /**
    * Overwrite the display value of the result with a new text.
    *
-   * @param \Drupal\facets\Result\ResultInterface[] $results
+   * @param ResultInterface[] $results
    *   An array of results to work on.
    * @param array $replacements
    *   An array of values that contain possible replacements for the original
    *   values.
    *
-   * @return \Drupal\facets\Result\ResultInterface[]
+   * @return ResultInterface[]
    *   The changed results.
    */
   protected function overWriteDisplayValues(array $results, array $replacements) {
-    /** @var \Drupal\facets\Result\ResultInterface $a */
+    /** @var ResultInterface $a */
     foreach ($results as &$a) {
       if (isset($replacements[$a->getRawValue()])) {
         $a->setDisplayValue($replacements[$a->getRawValue()]);
diff --git a/src/Plugin/facets/processor/TranslateEntityProcessor.php b/src/Plugin/facets/processor/TranslateEntityProcessor.php
index 4a47bb1..823af21 100644
--- a/src/Plugin/facets/processor/TranslateEntityProcessor.php
+++ b/src/Plugin/facets/processor/TranslateEntityProcessor.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\Core\TypedData\DataDefinitionInterface;
+use Drupal\facets\Result\ResultInterface;
+use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -32,14 +35,14 @@ class TranslateEntityProcessor extends ProcessorPluginBase implements BuildProce
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -52,9 +55,9 @@ class TranslateEntityProcessor extends ProcessorPluginBase implements BuildProce
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LanguageManagerInterface $language_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ -83,7 +86,7 @@ class TranslateEntityProcessor extends ProcessorPluginBase implements BuildProce
   public function build(FacetInterface $facet, array $results) {
     $language_interface = $this->languageManager->getCurrentLanguage();
 
-    /** @var \Drupal\Core\TypedData\DataDefinitionInterface $data_definition */
+    /** @var DataDefinitionInterface $data_definition */
     $data_definition = $facet->getDataDefinition();
 
     $property = NULL;
@@ -103,7 +106,7 @@ class TranslateEntityProcessor extends ProcessorPluginBase implements BuildProce
       ->getTargetDefinition()
       ->getEntityTypeId();
 
-    /** @var \Drupal\facets\Result\ResultInterface $result */
+    /** @var ResultInterface $result */
     $ids = [];
     foreach ($results as $delta => $result) {
       $ids[$delta] = $result->getRawValue();
@@ -121,7 +124,7 @@ class TranslateEntityProcessor extends ProcessorPluginBase implements BuildProce
         continue;
       }
 
-      /** @var \Drupal\Core\Entity\ContentEntityBase $entity */
+      /** @var ContentEntityBase $entity */
       $entity = $entities[$ids[$i]];
 
       // Check for a translation of the entity and load that instead if one's
diff --git a/src/Plugin/facets/processor/UidToUserNameCallbackProcessor.php b/src/Plugin/facets/processor/UidToUserNameCallbackProcessor.php
index ecf6e9a..3774d00 100644
--- a/src/Plugin/facets/processor/UidToUserNameCallbackProcessor.php
+++ b/src/Plugin/facets/processor/UidToUserNameCallbackProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\facets\Result\ResultInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\TypedData\ComplexDataDefinitionInterface;
 use Drupal\Core\TypedData\DataReferenceDefinitionInterface;
@@ -30,9 +31,9 @@ class UidToUserNameCallbackProcessor extends ProcessorPluginBase implements Buil
   public function build(FacetInterface $facet, array $results) {
     $usernames = [];
 
-    /** @var \Drupal\facets\Result\ResultInterface $result */
+    /** @var ResultInterface $result */
     foreach ($results as $result) {
-      /** @var \Drupal\user\Entity\User $user */
+      /** @var User $user */
       if (($user = User::load($result->getRawValue())) !== NULL) {
         $result->setDisplayValue($user->getDisplayName());
         $facet->addCacheableDependency($user);
diff --git a/src/Plugin/facets/processor/UrlProcessorHandler.php b/src/Plugin/facets/processor/UrlProcessorHandler.php
index 4c4ce12..117ae18 100644
--- a/src/Plugin/facets/processor/UrlProcessorHandler.php
+++ b/src/Plugin/facets/processor/UrlProcessorHandler.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets\Plugin\facets\processor;
 
+use Drupal\facets\UrlProcessor\UrlProcessorInterface;
+use Drupal\facets\FacetSourceInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\facets\Exception\InvalidProcessorException;
 use Drupal\facets\FacetInterface;
@@ -33,14 +35,14 @@ class UrlProcessorHandler extends ProcessorPluginBase implements BuildProcessorI
   /**
    * The actual url processor used for handing urls.
    *
-   * @var \Drupal\facets\UrlProcessor\UrlProcessorInterface
+   * @var UrlProcessorInterface
    */
   protected $processor;
 
   /**
    * Gets the Processor.
    *
-   * @return \Drupal\facets\UrlProcessor\UrlProcessorInterface
+   * @return UrlProcessorInterface
    *   The Processor.
    */
   public function getProcessor() {
@@ -57,10 +59,10 @@ class UrlProcessorHandler extends ProcessorPluginBase implements BuildProcessorI
       throw new InvalidProcessorException("The UrlProcessorHandler doesn't have the required 'facet' in the configuration array.");
     }
 
-    /** @var \Drupal\facets\FacetInterface $facet */
+    /** @var FacetInterface $facet */
     $facet = $configuration['facet'];
 
-    /** @var \Drupal\facets\FacetSourceInterface $fs */
+    /** @var FacetSourceInterface $fs */
     $fs = $facet->getFacetSourceConfig();
 
     $url_processor_name = $fs->getUrlProcessorName();
diff --git a/src/Plugin/facets/url_processor/QueryString.php b/src/Plugin/facets/url_processor/QueryString.php
index 4f0ab90..6fa833f 100644
--- a/src/Plugin/facets/url_processor/QueryString.php
+++ b/src/Plugin/facets/url_processor/QueryString.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Plugin\facets\url_processor;
 
+use Drupal\facets\Result\ResultInterface;
 use Drupal\Core\Cache\UnchangingCacheableDependencyTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\EventSubscriber\MainContentViewSubscriber;
@@ -39,7 +40,7 @@ class QueryString extends UrlProcessorPluginBase {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -102,7 +103,7 @@ class QueryString extends UrlProcessorPluginBase {
       }
     }
 
-    /** @var \Drupal\facets\Result\ResultInterface[] $results */
+    /** @var ResultInterface[] $results */
     foreach ($results as &$result) {
       // Reset the URL for each result.
       $url = clone $requestUrl;
@@ -252,7 +253,7 @@ class QueryString extends UrlProcessorPluginBase {
    * @param string $facet_source_path
    *   The facet source path.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   The request.
    */
   protected function getRequestByFacetSourcePath($facet_source_path) {
@@ -280,14 +281,14 @@ class QueryString extends UrlProcessorPluginBase {
    *
    * @param string $facet_source_path
    *   The facet source path.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The URL.
    */
   protected function getUrlForRequest($facet_source_path, Request $request) {
-    /** @var \Drupal\Core\Url[] $requestUrlsByPath */
+    /** @var Url[] $requestUrlsByPath */
     $requestUrlsByPath = &drupal_static(__CLASS__ . __FUNCTION__, []);
 
     if (array_key_exists($facet_source_path, $requestUrlsByPath)) {
diff --git a/src/Plugin/facets/widget/ArrayWidget.php b/src/Plugin/facets/widget/ArrayWidget.php
index a276f8d..f11652e 100644
--- a/src/Plugin/facets/widget/ArrayWidget.php
+++ b/src/Plugin/facets/widget/ArrayWidget.php
@@ -34,7 +34,7 @@ class ArrayWidget extends WidgetPluginBase {
   /**
    * Builds one level from results.
    *
-   * @param \Drupal\facets\Result\ResultInterface[] $results
+   * @param ResultInterface[] $results
    *   A list of results.
    *
    * @return array
@@ -63,7 +63,7 @@ class ArrayWidget extends WidgetPluginBase {
   /**
    * Prepares the URL and values for the facet.
    *
-   * @param \Drupal\facets\Result\ResultInterface $result
+   * @param ResultInterface $result
    *   A result item.
    *
    * @return array
@@ -80,7 +80,7 @@ class ArrayWidget extends WidgetPluginBase {
   /**
    * Generates the value and the url.
    *
-   * @param \Drupal\facets\Result\ResultInterface $result
+   * @param ResultInterface $result
    *   The result to extract the values.
    *
    * @return array
diff --git a/src/Processor/BuildProcessorInterface.php b/src/Processor/BuildProcessorInterface.php
index fab3d39..31ec151 100644
--- a/src/Processor/BuildProcessorInterface.php
+++ b/src/Processor/BuildProcessorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Processor;
 
+use Drupal\facets\Result\ResultInterface;
 use Drupal\facets\FacetInterface;
 
 /**
@@ -12,12 +13,12 @@ interface BuildProcessorInterface extends ProcessorInterface {
   /**
    * Runs before the renderable array is created.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet being changed.
-   * @param \Drupal\facets\Result\ResultInterface[] $results
+   * @param ResultInterface[] $results
    *   The results being changed.
    *
-   * @return \Drupal\facets\Result\ResultInterface[]
+   * @return ResultInterface[]
    *   The changed results.
    */
   public function build(FacetInterface $facet, array $results);
diff --git a/src/Processor/PostQueryProcessorInterface.php b/src/Processor/PostQueryProcessorInterface.php
index 0b925ff..aec35d1 100644
--- a/src/Processor/PostQueryProcessorInterface.php
+++ b/src/Processor/PostQueryProcessorInterface.php
@@ -16,7 +16,7 @@ interface PostQueryProcessorInterface extends ProcessorInterface {
    * ValueCallbackProcessor. If results are being changed, this processor should
    * handle saving itself.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet that's being changed.
    */
   public function postQuery(FacetInterface $facet);
diff --git a/src/Processor/PreQueryProcessorInterface.php b/src/Processor/PreQueryProcessorInterface.php
index 1d6ace0..cc4b36c 100644
--- a/src/Processor/PreQueryProcessorInterface.php
+++ b/src/Processor/PreQueryProcessorInterface.php
@@ -16,7 +16,7 @@ interface PreQueryProcessorInterface extends ProcessorInterface {
    * alteration to the query was added before the query is executed in the
    * backend?
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet being changed.
    */
   public function preQuery(FacetInterface $facet);
diff --git a/src/Processor/ProcessorInterface.php b/src/Processor/ProcessorInterface.php
index b155ee8..414c9ac 100644
--- a/src/Processor/ProcessorInterface.php
+++ b/src/Processor/ProcessorInterface.php
@@ -38,9 +38,9 @@ interface ProcessorInterface extends ConfigurableInterface, DependentPluginInter
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet this processor is being added to.
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state, FacetInterface $facet);
@@ -50,9 +50,9 @@ interface ProcessorInterface extends ConfigurableInterface, DependentPluginInter
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet this processor is being added to.
    */
   public function validateConfigurationForm(array $form, FormStateInterface $form_state, FacetInterface $facet);
@@ -117,7 +117,7 @@ interface ProcessorInterface extends ConfigurableInterface, DependentPluginInter
    *
    * Reasons why this would be unsupported can be chosen by the widget.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet to check for.
    *
    * @return bool
diff --git a/src/Processor/SortProcessorInterface.php b/src/Processor/SortProcessorInterface.php
index 113108c..761b129 100644
--- a/src/Processor/SortProcessorInterface.php
+++ b/src/Processor/SortProcessorInterface.php
@@ -12,9 +12,9 @@ interface SortProcessorInterface {
   /**
    * Orders results and return the new order of results.
    *
-   * @param \Drupal\facets\Result\Result $a
+   * @param Result $a
    *   First result which should be compared.
-   * @param \Drupal\facets\Result\Result $b
+   * @param Result $b
    *   Second result which should be compared.
    *
    * @return int
diff --git a/src/QueryType/QueryTypePluginBase.php b/src/QueryType/QueryTypePluginBase.php
index cf256f3..3dca82e 100644
--- a/src/QueryType/QueryTypePluginBase.php
+++ b/src/QueryType/QueryTypePluginBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\facets\QueryType;
 
+use Drupal\facets\FacetInterface;
+use Drupal\Core\Utility\LinkGeneratorInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Entity\DependencyTrait;
@@ -34,7 +36,7 @@ abstract class QueryTypePluginBase extends PluginBase implements QueryTypeInterf
   /**
    * The facet that needs the query type.
    *
-   * @var \Drupal\facets\FacetInterface
+   * @var FacetInterface
    */
   protected $facet;
 
@@ -48,7 +50,7 @@ abstract class QueryTypePluginBase extends PluginBase implements QueryTypeInterf
   /**
    * The injected link generator.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface
+   * @var LinkGeneratorInterface
    */
   protected $linkGenerator;
 
diff --git a/src/Result/Result.php b/src/Result/Result.php
index 434606e..426a113 100644
--- a/src/Result/Result.php
+++ b/src/Result/Result.php
@@ -13,7 +13,7 @@ class Result implements ResultInterface {
   /**
    * The facet related to the result.
    *
-   * @var \Drupal\facets\FacetInterface
+   * @var FacetInterface
    */
   protected $facet;
 
@@ -41,7 +41,7 @@ class Result implements ResultInterface {
   /**
    * The Url object.
    *
-   * @var \Drupal\Core\Url
+   * @var Url
    */
   protected $url;
 
@@ -55,14 +55,14 @@ class Result implements ResultInterface {
   /**
    * Children results.
    *
-   * @var \Drupal\facets\Result\ResultInterface[]
+   * @var ResultInterface[]
    */
   protected $children = [];
 
   /**
    * Constructs a new result value object.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet related to the result.
    * @param mixed $raw_value
    *   The raw value.
diff --git a/src/Result/ResultInterface.php b/src/Result/ResultInterface.php
index a68fe97..d148ef8 100644
--- a/src/Result/ResultInterface.php
+++ b/src/Result/ResultInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\Result;
 
+use Drupal\facets\FacetInterface;
 use Drupal\Core\Url;
 
 /**
@@ -12,7 +13,7 @@ interface ResultInterface {
   /**
    * Returns the facet related to the result.
    *
-   * @return \Drupal\facets\FacetInterface
+   * @return FacetInterface
    *   The facet related to the result.
    */
   public function getFacet();
@@ -52,7 +53,7 @@ interface ResultInterface {
   /**
    * Returns the url.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The url of the search page with the facet url appended.
    */
   public function getUrl();
@@ -60,7 +61,7 @@ interface ResultInterface {
   /**
    * Sets the url.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The url of the search page with the facet url appended.
    */
   public function setUrl(Url $url);
diff --git a/src/UrlProcessor/UrlProcessorInterface.php b/src/UrlProcessor/UrlProcessorInterface.php
index c2c4a29..8e774ce 100644
--- a/src/UrlProcessor/UrlProcessorInterface.php
+++ b/src/UrlProcessor/UrlProcessorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\UrlProcessor;
 
+use Drupal\facets\Result\ResultInterface;
 use Drupal\facets\FacetInterface;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -22,12 +23,12 @@ interface UrlProcessorInterface {
   /**
    * Adds urls to the results.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet.
-   * @param \Drupal\facets\Result\ResultInterface[] $results
+   * @param ResultInterface[] $results
    *   An array of results.
    *
-   * @return \Drupal\facets\Result\ResultInterface[]
+   * @return ResultInterface[]
    *   An array of results with added urls.
    */
   public function buildUrls(FacetInterface $facet, array $results);
@@ -38,7 +39,7 @@ interface UrlProcessorInterface {
    * Is called after the url processor is ready retrieving and altering the
    * active filters to let the facet know about the active items.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet that is edited.
    */
   public function setActiveItems(FacetInterface $facet);
@@ -83,7 +84,7 @@ interface UrlProcessorInterface {
   /**
    * Returns the request.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   The request.
    */
   public function getRequest(): Request;
diff --git a/src/UrlProcessor/UrlProcessorPluginBase.php b/src/UrlProcessor/UrlProcessorPluginBase.php
index 6574f09..7d782c1 100644
--- a/src/UrlProcessor/UrlProcessorPluginBase.php
+++ b/src/UrlProcessor/UrlProcessorPluginBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets\UrlProcessor;
 
+use Drupal\facets\FacetSourceInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Cache\UncacheableDependencyTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -42,14 +43,14 @@ abstract class UrlProcessorPluginBase extends ProcessorPluginBase implements Url
   /**
    * The clone of the current request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -85,12 +86,12 @@ abstract class UrlProcessorPluginBase extends ProcessorPluginBase implements Url
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request object for the current request.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The Entity Type Manager.
    *
-   * @throws \Drupal\facets\Exception\InvalidProcessorException
+   * @throws InvalidProcessorException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Request $request, EntityTypeManagerInterface $entity_type_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -101,10 +102,10 @@ abstract class UrlProcessorPluginBase extends ProcessorPluginBase implements Url
       throw new InvalidProcessorException("The url processor doesn't have the required 'facet' in the configuration array.");
     }
 
-    /** @var \Drupal\facets\FacetInterface $facet */
+    /** @var FacetInterface $facet */
     $facet = $configuration['facet'];
 
-    /** @var \Drupal\facets\FacetSourceInterface $facet_source_config */
+    /** @var FacetSourceInterface $facet_source_config */
     $facet_source_config = $facet->getFacetSourceConfig();
 
     $this->filterKey = $facet_source_config->getFilterKey() ?: 'f';
diff --git a/src/Utility/FacetsDateHandler.php b/src/Utility/FacetsDateHandler.php
index 60e3b72..7e5276e 100644
--- a/src/Utility/FacetsDateHandler.php
+++ b/src/Utility/FacetsDateHandler.php
@@ -62,14 +62,14 @@ class FacetsDateHandler {
   /**
    * The date formatting service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * FacetsDateHandler constructor.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatting service.
    */
   public function __construct(DateFormatterInterface $date_formatter) {
diff --git a/src/Utility/FacetsUrlGenerator.php b/src/Utility/FacetsUrlGenerator.php
index 3a28181..9acd584 100644
--- a/src/Utility/FacetsUrlGenerator.php
+++ b/src/Utility/FacetsUrlGenerator.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\facets\Utility;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Url;
+use Drupal\facets\UrlProcessor\UrlProcessorInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\facets\Result\Result;
 use Drupal\facets\UrlProcessor\UrlProcessorPluginManager;
@@ -14,23 +17,23 @@ class FacetsUrlGenerator {
   /**
    * The url processor plugin manager.
    *
-   * @var \Drupal\facets\UrlProcessor\UrlProcessorPluginManager
+   * @var UrlProcessorPluginManager
    */
   protected $urlProcessorPluginManager;
 
   /**
    * The entity storage for facets.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $facetStorage;
 
   /**
    * Constructs a new instance of the FacetsUrlGenerator.
    *
-   * @param \Drupal\facets\UrlProcessor\UrlProcessorPluginManager $urlProcessorPluginManager
+   * @param UrlProcessorPluginManager $urlProcessorPluginManager
    *   The url processor plugin manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(UrlProcessorPluginManager $urlProcessorPluginManager, EntityTypeManagerInterface $entityTypeManager) {
@@ -57,7 +60,7 @@ class FacetsUrlGenerator {
    *   TRUE if the currently active facets should be included to the URL or
    *   FALSE if they should be discarded. Defaults to TRUE.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   A Url object for the given facet/value combination or null if no Result
    *   was returned by the UrlProcessor.
    *
@@ -88,7 +91,7 @@ class FacetsUrlGenerator {
     $raw_value = $active_filters[$facet_id][0];
     unset($active_filters[$facet_id][0]);
 
-    /** @var \Drupal\facets\UrlProcessor\UrlProcessorInterface $url_processor */
+    /** @var UrlProcessorInterface $url_processor */
     $url_processor = $this
       ->urlProcessorPluginManager
       ->createInstance($facet->getFacetSourceConfig()
diff --git a/src/Widget/WidgetPluginBase.php b/src/Widget/WidgetPluginBase.php
index 7bbda4b..6445dd9 100644
--- a/src/Widget/WidgetPluginBase.php
+++ b/src/Widget/WidgetPluginBase.php
@@ -27,7 +27,7 @@ abstract class WidgetPluginBase extends PluginBase implements WidgetPluginInterf
   /**
    * The facet the widget is being built for.
    *
-   * @var \Drupal\facets\FacetInterface
+   * @var FacetInterface
    */
   protected $facet;
 
@@ -92,7 +92,7 @@ abstract class WidgetPluginBase extends PluginBase implements WidgetPluginInterf
    *  - facets-item-list--WIDGET_TYPE
    *  - facets-item-list.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet whose output is being generated.
    *
    * @return string
@@ -156,9 +156,9 @@ abstract class WidgetPluginBase extends PluginBase implements WidgetPluginInterf
   /**
    * Builds a renderable array of result items.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet we need to build.
-   * @param \Drupal\facets\Result\ResultInterface $result
+   * @param ResultInterface $result
    *   A result item.
    *
    * @return array
@@ -208,7 +208,7 @@ abstract class WidgetPluginBase extends PluginBase implements WidgetPluginInterf
   /**
    * Returns the text or link for an item.
    *
-   * @param \Drupal\facets\Result\ResultInterface $result
+   * @param ResultInterface $result
    *   A result item.
    *
    * @return array
@@ -227,7 +227,7 @@ abstract class WidgetPluginBase extends PluginBase implements WidgetPluginInterf
   /**
    * Builds a facet result item.
    *
-   * @param \Drupal\facets\Result\ResultInterface $result
+   * @param ResultInterface $result
    *   The result item.
    *
    * @return array
diff --git a/src/Widget/WidgetPluginInterface.php b/src/Widget/WidgetPluginInterface.php
index 2b4c788..2919e8d 100644
--- a/src/Widget/WidgetPluginInterface.php
+++ b/src/Widget/WidgetPluginInterface.php
@@ -15,7 +15,7 @@ interface WidgetPluginInterface extends ConfigurableInterface, DependentPluginIn
   /**
    * Builds the facet widget for rendering.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet we need to build.
    *
    * @return array
@@ -55,7 +55,7 @@ interface WidgetPluginInterface extends ConfigurableInterface, DependentPluginIn
    *
    * Reasons why this would be unsupported can be chosen by the processor.
    *
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet to check for.
    *
    * @return bool
@@ -70,9 +70,9 @@ interface WidgetPluginInterface extends ConfigurableInterface, DependentPluginIn
    *
    * @param array $form
    *   A form API form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\facets\FacetInterface $facet
+   * @param FacetInterface $facet
    *   The facet entitu.
    *
    * @return array
diff --git a/tests/facets_events_test/src/EventListener.php b/tests/facets_events_test/src/EventListener.php
index dab4f66..73d2962 100644
--- a/tests/facets_events_test/src/EventListener.php
+++ b/tests/facets_events_test/src/EventListener.php
@@ -22,7 +22,7 @@ class EventListener implements EventSubscriberInterface {
   /**
    * Event handler for the query string created event.
    *
-   * @param \Drupal\facets\Event\QueryStringCreated $event
+   * @param QueryStringCreated $event
    *   The query string created event.
    */
   public function queryStringCreated(QueryStringCreated $event) {
diff --git a/tests/facets_processors_collection/src/Plugin/facets/processor/FpcBuildProcessor.php b/tests/facets_processors_collection/src/Plugin/facets/processor/FpcBuildProcessor.php
index dca3dad..f9a5219 100644
--- a/tests/facets_processors_collection/src/Plugin/facets/processor/FpcBuildProcessor.php
+++ b/tests/facets_processors_collection/src/Plugin/facets/processor/FpcBuildProcessor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\facets_processors_collection\Plugin\facets\processor;
 
+use Drupal\facets\Result\ResultInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\facets\FacetInterface;
 use Drupal\facets\Processor\BuildProcessorInterface;
@@ -25,7 +26,7 @@ class FpcBuildProcessor extends ProcessorPluginBase implements BuildProcessorInt
    * {@inheritdoc}
    */
   public function build(FacetInterface $facet, array $results) {
-    /** @var \Drupal\facets\Result\ResultInterface $result */
+    /** @var ResultInterface $result */
     foreach ($results as $result) {
       $result->setDisplayValue('Test ' . $result->getDisplayValue());
     }
diff --git a/tests/facets_query_processor/src/Plugin/Block/DisplayGeneratedLinkBlock.php b/tests/facets_query_processor/src/Plugin/Block/DisplayGeneratedLinkBlock.php
index a12d18f..cdea709 100644
--- a/tests/facets_query_processor/src/Plugin/Block/DisplayGeneratedLinkBlock.php
+++ b/tests/facets_query_processor/src/Plugin/Block/DisplayGeneratedLinkBlock.php
@@ -22,14 +22,14 @@ class DisplayGeneratedLinkBlock extends BlockBase implements ContainerFactoryPlu
   /**
    * The facets URL generator service.
    *
-   * @var \Drupal\facets\Utility\FacetsUrlGenerator
+   * @var FacetsUrlGenerator
    */
   protected $urlGeneratorService;
 
   /**
    * The state key/value store.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
@@ -42,9 +42,9 @@ class DisplayGeneratedLinkBlock extends BlockBase implements ContainerFactoryPlu
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\facets\Utility\FacetsUrlGenerator $facets_url_generator
+   * @param FacetsUrlGenerator $facets_url_generator
    *   The facets URL generator service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key/value store.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FacetsUrlGenerator $facets_url_generator, StateInterface $state) {
diff --git a/tests/src/Functional/AggregatedFieldTest.php b/tests/src/Functional/AggregatedFieldTest.php
index 220f519..89ef676 100644
--- a/tests/src/Functional/AggregatedFieldTest.php
+++ b/tests/src/Functional/AggregatedFieldTest.php
@@ -18,7 +18,7 @@ class AggregatedFieldTest extends FacetsTestBase {
   /**
    * Users created for this test.
    *
-   * @var \Drupal\user\Entity\User[]
+   * @var User[]
    */
   protected $users;
 
diff --git a/tests/src/Functional/BlockTestTrait.php b/tests/src/Functional/BlockTestTrait.php
index 748b8e2..cd0306b 100644
--- a/tests/src/Functional/BlockTestTrait.php
+++ b/tests/src/Functional/BlockTestTrait.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\facets\Functional;
 
+use Drupal\block\BlockInterface;
+use Drupal\facets\FacetInterface;
+use Drupal\block\Entity\Block;
 use Drupal\facets\Entity\Facet;
 
 /**
@@ -12,7 +15,7 @@ trait BlockTestTrait {
   /**
    * The block entities used by this test.
    *
-   * @var \Drupal\block\BlockInterface[]
+   * @var BlockInterface[]
    */
   protected $blocks;
 
@@ -35,7 +38,7 @@ trait BlockTestTrait {
   protected function createFacet($name, $id, $field = 'type', $display_id = 'page_1', $source = 'views_page__search_api_test_view', $allowBlockCreation = TRUE) {
     $facet_source = "search_api:{$source}__{$display_id}";
 
-    /** @var \Drupal\facets\FacetInterface $facet */
+    /** @var FacetInterface $facet */
     $facet = Facet::create([
       'id' => $id,
       'name' => $name,
@@ -67,7 +70,7 @@ trait BlockTestTrait {
    * @param string $id
    *   The id of the block.
    *
-   * @return \Drupal\block\Entity\Block
+   * @return Block
    *   The block entity.
    */
   protected function createBlock($id) {
diff --git a/tests/src/Functional/BreadcrumbIntegrationTest.php b/tests/src/Functional/BreadcrumbIntegrationTest.php
index 47d29c7..d3ca2d9 100644
--- a/tests/src/Functional/BreadcrumbIntegrationTest.php
+++ b/tests/src/Functional/BreadcrumbIntegrationTest.php
@@ -51,6 +51,7 @@ class BreadcrumbIntegrationTest extends FacetsTestBase {
 
   /**
    * Tests Breadcrumb integration with grouping.
+   * @doesNotPerformAssertions
    */
   public function testGroupingIntegration() {
     $this->editFacetConfig();
@@ -80,6 +81,7 @@ class BreadcrumbIntegrationTest extends FacetsTestBase {
 
   /**
    * Tests Breadcrumb integration without grouping.
+   * @doesNotPerformAssertions
    */
   public function testNonGroupingIntegration() {
     $this->markTestSkipped('Not yet implemented.');
diff --git a/tests/src/Functional/ExampleContentTrait.php b/tests/src/Functional/ExampleContentTrait.php
index 27bca93..86c122f 100644
--- a/tests/src/Functional/ExampleContentTrait.php
+++ b/tests/src/Functional/ExampleContentTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets\Functional;
 
+use Drupal\entity_test\Entity\EntityTestMulRevChanged;
 use Drupal\search_api\Entity\Index;
 
 /**
@@ -12,7 +13,7 @@ trait ExampleContentTrait {
   /**
    * The generated test entities, keyed by ID.
    *
-   * @var \Drupal\entity_test\Entity\EntityTestMulRevChanged[]
+   * @var EntityTestMulRevChanged[]
    */
   protected $entities = [];
 
diff --git a/tests/src/Functional/FacetSourceTest.php b/tests/src/Functional/FacetSourceTest.php
index 8ef6053..2485e4f 100644
--- a/tests/src/Functional/FacetSourceTest.php
+++ b/tests/src/Functional/FacetSourceTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets\Functional;
 
+use Behat\Mink\Element\NodeElement;
 /**
  * Tests the functionality of the facet source config entity.
  *
@@ -78,7 +79,7 @@ class FacetSourceTest extends FacetsTestBase {
     // Test that saving worked and that the url processor has the new value.
     $this->assertSession()->fieldExists('filter_key');
     $this->assertSession()->fieldExists('url_processor');
-    /** @var \Behat\Mink\Element\NodeElement[] $elements */
+    /** @var NodeElement[] $elements */
     $elements = $this->xpath('//input[@id=:id]', [':id' => 'edit-url-processor-dummy-query']);
     $this->assertEquals('dummy_query', $elements[0]->getValue());
   }
diff --git a/tests/src/Functional/FacetsTestBase.php b/tests/src/Functional/FacetsTestBase.php
index d888753..b736d36 100644
--- a/tests/src/Functional/FacetsTestBase.php
+++ b/tests/src/Functional/FacetsTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\search_api\Entity\Index;
 use Drupal\search_api\Entity\Server;
@@ -33,21 +34,21 @@ abstract class FacetsTestBase extends BrowserTestBase {
   /**
    * An admin user used for this test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
   /**
    * A user without Search / Facet admin permission.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $unauthorizedUser;
 
   /**
    * The anonymous user used for this test.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $anonymousUser;
 
diff --git a/tests/src/Functional/FacetsUrlGeneratorTest.php b/tests/src/Functional/FacetsUrlGeneratorTest.php
index 3b1ac62..78099de 100644
--- a/tests/src/Functional/FacetsUrlGeneratorTest.php
+++ b/tests/src/Functional/FacetsUrlGeneratorTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\facets\Functional;
 
+use Drupal\facets\Utility\FacetsUrlGenerator;
+use Drupal\facets\FacetInterface;
 use Drupal\facets\Entity\Facet;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -31,7 +33,7 @@ class FacetsUrlGeneratorTest extends FacetsTestBase {
   /**
    * The FacetsUrlGenerator service.
    *
-   * @var \Drupal\facets\Utility\FacetsUrlGenerator
+   * @var FacetsUrlGenerator
    */
   protected $urlGenerator;
 
@@ -51,7 +53,7 @@ class FacetsUrlGeneratorTest extends FacetsTestBase {
    * Create url.
    */
   public function testCreateUrl() {
-    /** @var \Drupal\facets\FacetInterface $entity */
+    /** @var FacetInterface $entity */
     $entity = Facet::create([
       'id' => 'test_facet',
       'name' => 'Test facet',
diff --git a/tests/src/Functional/HierarchicalFacetIntegrationTest.php b/tests/src/Functional/HierarchicalFacetIntegrationTest.php
index 19536b6..b0f0f40 100644
--- a/tests/src/Functional/HierarchicalFacetIntegrationTest.php
+++ b/tests/src/Functional/HierarchicalFacetIntegrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets\Functional;
 
+use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\search_api\Item\Field;
 use Drupal\taxonomy\Entity\Term;
@@ -21,7 +22,7 @@ class HierarchicalFacetIntegrationTest extends FacetsTestBase {
   /**
    * Drupal vocabulary.
    *
-   * @var \Drupal\taxonomy\Entity\Vocabulary
+   * @var Vocabulary
    */
   protected $vocabulary;
 
@@ -42,14 +43,14 @@ class HierarchicalFacetIntegrationTest extends FacetsTestBase {
   /**
    * An array of taxonomy terms.
    *
-   * @var \Drupal\taxonomy\Entity\Term[]
+   * @var Term[]
    */
   protected $parents = [];
 
   /**
    * An array of taxonomy terms.
    *
-   * @var \Drupal\taxonomy\Entity\Term[]
+   * @var Term[]
    */
   protected $terms = [];
 
diff --git a/tests/src/Functional/IntegrationCacheTest.php b/tests/src/Functional/IntegrationCacheTest.php
index 24674c4..e3094ca 100644
--- a/tests/src/Functional/IntegrationCacheTest.php
+++ b/tests/src/Functional/IntegrationCacheTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\facets\Functional;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorage;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Url;
 use Drupal\facets\FacetInterface;
 use Drupal\facets\Plugin\facets\query_type\SearchApiDate;
@@ -40,14 +42,14 @@ class IntegrationCacheTest extends FacetsTestBase {
   /**
    * Facets entity storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorage
+   * @var ConfigEntityStorage
    */
   protected $facetStorage;
 
   /**
    * The entity_test_mulrev_changed entity storage.
    *
-   * @var \Drupal\Core\Entity\ContentEntityStorageInterface
+   * @var ContentEntityStorageInterface
    */
   protected $entityTestStorage;
 
@@ -710,7 +712,7 @@ class IntegrationCacheTest extends FacetsTestBase {
    * @param string $id
    *   Facet id.
    *
-   * @return \Drupal\facets\FacetInterface
+   * @return FacetInterface
    *   Loaded facet object.
    */
   protected function getFacetById(string $id): FacetInterface {
@@ -725,7 +727,7 @@ class IntegrationCacheTest extends FacetsTestBase {
    * @param array $settings
    *   Array with values keyed  by property names.
    *
-   * @return \Drupal\facets\FacetInterface
+   * @return FacetInterface
    *   An updated facet entity.
    */
   protected function updateFacet(string $id, array $settings): FacetInterface {
diff --git a/tests/src/Functional/LanguageIntegrationTest.php b/tests/src/Functional/LanguageIntegrationTest.php
index 75b9076..82f5e66 100644
--- a/tests/src/Functional/LanguageIntegrationTest.php
+++ b/tests/src/Functional/LanguageIntegrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets\Functional;
 
+use Behat\Mink\Element\NodeElement;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\language\Entity\ConfigurableLanguage;
 
@@ -177,12 +178,12 @@ class LanguageIntegrationTest extends FacetsTestBase {
     $this->assertSession()->pageTextContains($block->label());
     $this->clickLink('item');
 
-    /** @var \Behat\Mink\Element\NodeElement[] $links */
+    /** @var NodeElement[] $links */
     $links = $this->findFacetLink('item');
     $this->assertEquals('is-active', $links[0]->getParent()->getAttribute('class'));
 
     $this->clickLink('English');
-    /** @var \Behat\Mink\Element\NodeElement[] $links */
+    /** @var NodeElement[] $links */
     $links = $this->findFacetLink('item');
     $this->assertEquals('is-active', $links[0]->getParent()->getAttribute('class'));
     $this->assertFalse((bool) strpos($this->getUrl(), 'xx-lolspeak/'), 'Found the language code in the url');
@@ -190,7 +191,7 @@ class LanguageIntegrationTest extends FacetsTestBase {
     $this->assertTrue((bool) strpos($this->getUrl(), 'barn_owl'), 'Found the facet in the url');
 
     $this->clickLink('Lolspeak');
-    /** @var \Behat\Mink\Element\NodeElement[] $links */
+    /** @var NodeElement[] $links */
     $links = $this->findFacetLink('item');
     $this->assertEquals('is-active', $links[0]->getParent()->getAttribute('class'));
     $this->assertTrue((bool) strpos($this->getUrl(), 'xx-lolspeak/'), 'Found the language code in the url');
@@ -198,21 +199,21 @@ class LanguageIntegrationTest extends FacetsTestBase {
     $this->assertFalse((bool) strpos($this->getUrl(), 'barn_owl'), 'Found the facet in the url');
 
     $this->clickLink('Dutch');
-    /** @var \Behat\Mink\Element\NodeElement[] $links */
+    /** @var NodeElement[] $links */
     $links = $this->findFacetLink('item');
     $this->assertEquals('is-active', $links[0]->getParent()->getAttribute('class'));
     $this->assertTrue((bool) strpos($this->getUrl(), 'nl/'), 'Found the language code in the url');
     $this->assertTrue((bool) strpos($this->getUrl(), 'uil'), 'Found the facet in the url');
 
     $this->clickLink('Spanish');
-    /** @var \Behat\Mink\Element\NodeElement[] $links */
+    /** @var NodeElement[] $links */
     $links = $this->findFacetLink('item');
     $this->assertEquals('is-active', $links[0]->getParent()->getAttribute('class'));
     $this->assertTrue((bool) strpos($this->getUrl(), 'es/'), 'Found the language code in the url');
     $this->assertTrue((bool) strpos($this->getUrl(), 'buho'), 'Found the facet in the url');
 
     $this->clickLink('English');
-    /** @var \Behat\Mink\Element\NodeElement[] $links */
+    /** @var NodeElement[] $links */
     $links = $this->findFacetLink('item');
     $this->assertEquals('is-active', $links[0]->getParent()->getAttribute('class'));
     $this->assertTrue((bool) strpos($this->getUrl(), 'barn_owl'), 'Found the facet in the url');
diff --git a/tests/src/Functional/ProcessorIntegrationTest.php b/tests/src/Functional/ProcessorIntegrationTest.php
index a5c18dd..f402f6c 100644
--- a/tests/src/Functional/ProcessorIntegrationTest.php
+++ b/tests/src/Functional/ProcessorIntegrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\facets\Functional;
 
+use Drupal\facets\Processor\ProcessorInterface;
 use Drupal\facets\Entity\Facet;
 use Drupal\facets\Processor\SortProcessorInterface;
 use Drupal\field\Entity\FieldConfig;
@@ -85,8 +86,8 @@ class ProcessorIntegrationTest extends FacetsTestBase {
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->checkboxChecked('edit-facet-settings-count-limit-status');
     $this->assertSession()->checkboxChecked('edit-facet-settings-hide-non-narrowing-result-processor-status');
-    $this->assertOptionSelected('edit-processors-count-limit-weights-build', 50);
-    $this->assertOptionSelected('edit-processors-hide-non-narrowing-result-processor-weights-build', 40);
+    $this->assertTrue($this->assertSession()->optionExists('edit-processors-count-limit-weights-build', 50)->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-processors-hide-non-narrowing-result-processor-weights-build', 40)->hasAttribute('selected'));
 
     // Change the weight of one of the processors and test that the weight
     // change persisted.
@@ -98,8 +99,8 @@ class ProcessorIntegrationTest extends FacetsTestBase {
     $this->submitForm($form, 'Save');
     $this->assertSession()->checkboxChecked('edit-facet-settings-count-limit-status');
     $this->assertSession()->checkboxChecked('edit-facet-settings-hide-non-narrowing-result-processor-status');
-    $this->assertOptionSelected('edit-processors-count-limit-weights-build', 50);
-    $this->assertOptionSelected('edit-processors-hide-non-narrowing-result-processor-weights-build', 5);
+    $this->assertTrue($this->assertSession()->optionExists('edit-processors-count-limit-weights-build', 50)->hasAttribute('selected'));
+    $this->assertTrue($this->assertSession()->optionExists('edit-processors-hide-non-narrowing-result-processor-weights-build', 5)->hasAttribute('selected'));
   }
 
   /**
@@ -324,6 +325,7 @@ class ProcessorIntegrationTest extends FacetsTestBase {
 
   /**
    * Tests the for sorting processors in the frontend with a 'keywords' facet.
+   * @doesNotPerformAssertions
    */
   public function testSortingWidgets() {
     $facet_name = "Huacaya alpaca";
@@ -876,7 +878,7 @@ class ProcessorIntegrationTest extends FacetsTestBase {
 
     $facet = Facet::load($facet_id);
 
-    /** @var \Drupal\facets\Processor\ProcessorInterface $processor */
+    /** @var ProcessorInterface $processor */
     foreach ($facet->getProcessors(FALSE) as $processor) {
       // Sort processors have a different form key, so don't bother for now.
       if ($processor instanceof SortProcessorInterface) {
