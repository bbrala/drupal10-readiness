modules/contrib/private_shortcut/private_shortcut.install
modules/contrib/private_shortcut/private_shortcut.module
modules/contrib/private_shortcut/src/Access/PrivateShortcutEditableAccess.php
modules/contrib/private_shortcut/src/Access/PrivateShortcutExcludeAccess.php
modules/contrib/private_shortcut/src/PrivateShortcutSetStorage.php
modules/contrib/private_shortcut/src/PrivateShortcutSetStorageInterface.php
modules/contrib/private_shortcut/src/Routing/RouteSubscriber.php

6 files with changes
====================

1) modules/contrib/private_shortcut/src/PrivateShortcutSetStorageInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_shortcut;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\shortcut\ShortcutSetStorageInterface;

 /**
@@ @@
    * @param string $id
    *   The private shortcut set ID.
    *
-   * @return \Drupal\Core\Session\AccountInterface|null
+   * @return AccountInterface|null
    *   The user account, NULL if the user account does not exist in the system.
    *
    * @throws \InvalidArgumentException
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/private_shortcut/src/PrivateShortcutSetStorage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_shortcut;

+use Drupal\shortcut\ShortcutSetInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\shortcut\ShortcutSetStorage;
 use Drupal\user\Entity\User;
@@ @@
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * Constructs a PrivateShortcutSetStorage object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_info
+   * @param EntityTypeInterface $entity_info
    *   The entity info for the entity type.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid_service
+   * @param UuidInterface $uuid_service
    *   The UUID service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Cache\MemoryCache\MemoryCacheInterface $memory_cache
+   * @param MemoryCacheInterface $memory_cache
    *   The memory cache.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(EntityTypeInterface $entity_info, ConfigFactoryInterface $config_factory, UuidInterface $uuid_service, ModuleHandlerInterface $module_handler, LanguageManagerInterface $language_manager, MemoryCacheInterface $memory_cache, Connection $connection, AccountInterface $current_user) {
@@ @@
    * Private shortcut set config entities are dinamically created on demand
    * and never get saved.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   (optional) The user account for the private shortcut set. The current
    *   user if no one is given.
    *
-   * @return \Drupal\shortcut\ShortcutSetInterface
+   * @return ShortcutSetInterface
    *   The user's private shortcut set.
    */
   protected function userPrivateSet(AccountInterface $account = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/private_shortcut/src/Access/PrivateShortcutExcludeAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_shortcut\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\shortcut\ShortcutSetInterface;
@@ @@
   /**
    * Prevent access to private shortcut set.
    *
-   * @param \Drupal\shortcut\ShortcutSetInterface $shortcut_set
+   * @param ShortcutSetInterface $shortcut_set
    *   The shortcut set that is being accessed.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(ShortcutSetInterface $shortcut_set) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/private_shortcut/src/Access/PrivateShortcutEditableAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\private_shortcut\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\shortcut\ShortcutSetInterface;
@@ @@
   /**
    * Prevent access to non-owned private shortcut set.
    *
-   * @param \Drupal\shortcut\ShortcutSetInterface $shortcut_set
+   * @param ShortcutSetInterface $shortcut_set
    *   The shortcut set that is being accessed.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(ShortcutSetInterface $shortcut_set) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/private_shortcut/private_shortcut.module:23

    ---------- begin diff ----------
@@ @@
  * Implements hook_ENTITY_TYPE_access().
  */
 function private_shortcut_shortcut_access(EntityInterface $entity, $operation, AccountInterface $account) {
-  /** @var \Drupal\private_shortcut\PrivateShortcutSetStorageInterface $storage */
+  /** @var PrivateShortcutSetStorageInterface $storage */
   $storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityType()->getBundleEntityType());
   try {
     $shortcut_set_owner = $storage->getAccountFromPrivateSetId($entity->bundle());
@@ @@
  * Sets the private user shortcut set as the system wide default.
  */
 function private_shortcut_shortcut_default_set($account) {
-  /** @var \Drupal\Core\Session\AccountInterface $account */
+  /** @var AccountInterface $account */
   if ($account->hasPermission('customize shortcut links')) {
     // Use private set as default only when the user is able to customize it.
     return PrivateShortcutSetStorage::getPrivateSetIdFromUid($account->id());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


6) modules/contrib/private_shortcut/private_shortcut.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\private_shortcut\PrivateShortcutSetStorageInterface;
 /**
  * @file
  * Installation hooks for Private Shortcut module.
@@ @@
     $shortcut_storage->delete($shortcut_storage->loadMultiple($private_shorcut_ids));
   }

-  /** @var \Drupal\private_shortcut\PrivateShortcutSetStorageInterface $shortcut_set_storage */
+  /** @var PrivateShortcutSetStorageInterface $shortcut_set_storage */
   $shortcut_set_storage = \Drupal::entityTypeManager()->getStorage('shortcut_set');
   // Remove user bindings with private shortcut sets.
   $shortcut_set_storage->unassingPrivateSets();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 6 files have been changed by Rector                                       

