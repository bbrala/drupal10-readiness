modules/contrib/stackpath/src/Entity/StackPathPurgerSettings.php
modules/contrib/stackpath/src/Event/StackPathPurgerEvents.php
modules/contrib/stackpath/src/Event/StackPathPurgerItemsAlter.php
modules/contrib/stackpath/src/Form/StackPathPurgerConfigForm.php
modules/contrib/stackpath/src/Plugin/Purge/DiagnosticCheck/ConfigurationCheck.php
modules/contrib/stackpath/src/Plugin/Purge/Purger/StackPathPurger.php
modules/contrib/stackpath/src/Plugin/Purge/TagsHeader/StackPathTagsHeader.php
modules/contrib/stackpath/src/StackPathApi.php

6 files with changes
====================

1) modules/contrib/stackpath/src/StackPathApi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stackpath;

+use GuzzleHttp\ClientInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Http\ClientFactory;
 use Drupal\Core\Logger\LoggerChannelInterface;
@@ @@
   /**
    * HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * Logger instance.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * StackPathApi constructor.
    *
-   * @param \Drupal\Core\Http\ClientFactory $clientFactory
+   * @param ClientFactory $clientFactory
    *   Client Factory.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $loggerChannel
+   * @param LoggerChannelInterface $loggerChannel
    *   Logger.
    */
   public function __construct(ClientFactory $clientFactory, LoggerChannelInterface $loggerChannel) {
@@ @@
   /**
    * Process response.
    *
-   * @param \Psr\Http\Message\ResponseInterface $response
+   * @param ResponseInterface $response
    *   Response object.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/stackpath/src/Plugin/Purge/TagsHeader/StackPathTagsHeader.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * StackPath API service.
    *
-   * @var \Drupal\stackpath\StackPathApi
+   * @var StackPathApi
    */
   protected $stackPath;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\stackpath\StackPathApi $stackpath_api
+   * @param StackPathApi $stackpath_api
    *   StackPath API service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, StackPathApi $stackpath_api) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/stackpath/src/Plugin/Purge/Purger/StackPathPurger.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\stackpath\Plugin\Purge\Purger;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\purge\Plugin\Purge\Invalidation\Exception\InvalidStateException;
+use Psr\Http\Message\ResponseInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface;
 use Drupal\purge\Plugin\Purge\Purger\PurgerBase;
@@ @@
   /**
    * StackPath API.
    *
-   * @var \Drupal\stackpath\StackPathApi
+   * @var StackPathApi
    */
   protected $stackPath;

@@ @@
   /**
    * Configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $factory;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * The settings entity holding all configuration.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $settings;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\stackpath\StackPathApi $stackpath_api
+   * @param StackPathApi $stackpath_api
    *   StackPath API service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $factory
+   * @param ConfigFactoryInterface $factory
    *   Configuration factory.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, StackPathApi $stackpath_api, ConfigFactoryInterface $factory, EventDispatcherInterface $event_dispatcher) {
@@ @@
   /**
    * Invalidate a set of urls.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[] $invalidations
+   * @param InvalidationInterface[] $invalidations
    *   The invalidator instance.
    *
    * @throws \Exception
@@ @@
   /**
    * Invalidate a set of tags.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[] $invalidations
+   * @param InvalidationInterface[] $invalidations
    *   The invalidator instance.
    *
    * @throws \Exception
@@ @@
   /**
    * Invalidate everything.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[] $invalidations
+   * @param InvalidationInterface[] $invalidations
    *   The invalidator instance.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Invalidation\Exception\InvalidStateException
+   * @throws InvalidStateException
    */
   public function invalidateAll(array $invalidations) {
     $this->updateState($invalidations, InvalidationInterface::PROCESSING);
@@ @@
     try {
       $this->stackPath->getToken($this->settings->get('client_id'), $this->settings->get('client_secret'));
       // Purge everything for the given zone.
-      /** @var \Psr\Http\Message\ResponseInterface $response */
+      /** @var ResponseInterface $response */
       $response = $this->stackPath->invalidate($this->settings->get('stack_id'), $type, $invalidates);

       // If successfully clears cache.
@@ @@
   /**
    * Update the invalidation state of items.
    *
-   * @param \Drupal\purge\Plugin\Purge\Invalidation\InvalidationInterface[] $invalidations
+   * @param InvalidationInterface[] $invalidations
    *   The invalidator instance.
    * @param int $invalidation_state
    *   The invalidation state.
    *
-   * @throws \Drupal\purge\Plugin\Purge\Invalidation\Exception\InvalidStateException
+   * @throws InvalidStateException
    */
   protected function updateState(array $invalidations, $invalidation_state) {
     // Update the state.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/stackpath/src/Plugin/Purge/DiagnosticCheck/ConfigurationCheck.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The purgers service.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface
+   * @var PurgersServiceInterface
    */
   protected $purgePurgers;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgersServiceInterface $purge_purgers
+   * @param PurgersServiceInterface $purge_purgers
    *   The purge executive service, which wipes content from external caches.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PurgersServiceInterface $purge_purgers) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/stackpath/src/Form/StackPathPurgerConfigForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The http client.
    *
-   * @var \Drupal\stackpath\StackPathApi
+   * @var StackPathApi
    */
   protected $stackPath;

@@ @@
   /**
    * Constructs a \Drupal\purge_purger_http\Form\ConfigurationForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\stackpath\StackPathApi $stackpath_api
+   * @param StackPathApi $stackpath_api
    *   StackPath API service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StackPathApi $stackpath_api) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/stackpath/src/Event/StackPathPurgerItemsAlter.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The purger instance.
    *
-   * @var \Drupal\purge\Plugin\Purge\Purger\PurgerInterface
+   * @var PurgerInterface
    */
   protected $purger;

@@ @@
   /**
    * Constructs StackPathPurgerItemsAlter.
    *
-   * @param \Drupal\purge\Plugin\Purge\Purger\PurgerInterface $purger
+   * @param PurgerInterface $purger
    * @param array $items
    */
   public function __construct(PurgerInterface $purger, array $items = []) {
@@ @@
   /**
    * Gets purger.
    *
-   * @return \Drupal\purge\Plugin\Purge\Purger\PurgerInterface
+   * @return PurgerInterface
    *   The purger that is used to invalidate the items.
    */
   public function getPurger() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

