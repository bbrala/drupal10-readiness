modules/contrib/feeds_migrate/feeds_migrate.install
modules/contrib/feeds_migrate/feeds_migrate.module
modules/contrib/feeds_migrate/modules/feeds_migrate_ui/feeds_migrate_ui.module
modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Controller/FeedsMigrateController.php
modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/FeedsMigrateUiParserSuggestion.php
modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/FeedsMigrationListBuilder.php
modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationDeleteForm.php
modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationExportForm.php
modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationForm.php
modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationMappingAddForm.php
modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationMappingDeleteForm.php
modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationMappingEditForm.php
modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationMappingForm.php
modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationMappingFormBase.php
modules/contrib/feeds_migrate/modules/migrate_tamper/src/Adapter/TamperableMigrateRowAdapter.php
modules/contrib/feeds_migrate/modules/migrate_tamper/src/Plugin/Derivative/TamperProcessPluginDeriver.php
modules/contrib/feeds_migrate/modules/migrate_tamper/src/Plugin/migrate/process/Form/TamperForm.php
modules/contrib/feeds_migrate/modules/migrate_tamper/src/Plugin/migrate/process/Tamper.php
modules/contrib/feeds_migrate/src/Ajax/SetHashCommand.php
modules/contrib/feeds_migrate/src/Annotation/MappingFieldForm.php
modules/contrib/feeds_migrate/src/Annotation/MigrateForm.php
modules/contrib/feeds_migrate/src/Entity/FeedsMigrateImporter.php
modules/contrib/feeds_migrate/src/Entity/Migration.php
modules/contrib/feeds_migrate/src/Entity/MigrationInterface.php
modules/contrib/feeds_migrate/src/Exception/MigrateFormPluginNotFoundException.php
modules/contrib/feeds_migrate/src/FeedsMigrateBatchExecutable.php
modules/contrib/feeds_migrate/src/FeedsMigrateExecutable.php
modules/contrib/feeds_migrate/src/FeedsMigrateImporterInterface.php
modules/contrib/feeds_migrate/src/FeedsMigrateImporterListBuilder.php
modules/contrib/feeds_migrate/src/Form/FeedsMigrateImporterDeleteForm.php
modules/contrib/feeds_migrate/src/Form/FeedsMigrateImporterDisableForm.php
modules/contrib/feeds_migrate/src/Form/FeedsMigrateImporterEnableForm.php
modules/contrib/feeds_migrate/src/Form/FeedsMigrateImporterForm.php
modules/contrib/feeds_migrate/src/Form/FeedsMigrateImporterImportForm.php
modules/contrib/feeds_migrate/src/Form/FeedsMigrateImporterRollbackForm.php
modules/contrib/feeds_migrate/src/MappingFieldFormBase.php
modules/contrib/feeds_migrate/src/MappingFieldFormInterface.php
modules/contrib/feeds_migrate/src/MappingFieldFormManager.php
modules/contrib/feeds_migrate/src/MappingFieldFormManagerInterface.php
modules/contrib/feeds_migrate/src/Plugin/MigrateFormPluginBase.php
modules/contrib/feeds_migrate/src/Plugin/MigrateFormPluginFactory.php
modules/contrib/feeds_migrate/src/Plugin/MigrateFormPluginInterface.php
modules/contrib/feeds_migrate/src/Plugin/MigrateFormPluginManager.php
modules/contrib/feeds_migrate/src/Plugin/MigrateFormProcessPluginManager.php
modules/contrib/feeds_migrate/src/Plugin/MigrateFormProcessPluginManagerInterface.php
modules/contrib/feeds_migrate/src/Plugin/QueueWorker/FeedsMigrateImporter.php
modules/contrib/feeds_migrate/src/Plugin/feeds_migrate/mapping_field/DefaultFieldForm.php
modules/contrib/feeds_migrate/src/Plugin/feeds_migrate/mapping_field/TextAreaFieldForm.php
modules/contrib/feeds_migrate/src/Plugin/migrate/destination/Form/DestinationFormPluginBase.php
modules/contrib/feeds_migrate/src/Plugin/migrate/destination/Form/EntityContentOptionForm.php
modules/contrib/feeds_migrate/src/Plugin/migrate/process/Form/DefaultValueForm.php
modules/contrib/feeds_migrate/src/Plugin/migrate/source/Form/SourceFormPluginBase.php
modules/contrib/feeds_migrate/src/Plugin/migrate/source/Form/UrlForm.php
modules/contrib/feeds_migrate/src/Plugin/migrate/source/Form/UrlFormBase.php
modules/contrib/feeds_migrate/src/Plugin/migrate/source/Form/UrlImporterForm.php
modules/contrib/feeds_migrate/src/Plugin/migrate/source/NullSource.php
modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_fetcher/Form/DataFetcherFormPluginBase.php
modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_fetcher/Form/FileForm.php
modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_fetcher/Form/FileImporterForm.php
modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_fetcher/Form/HttpForm.php
modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_fetcher/Form/HttpImporterForm.php
modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_parser/Form/DataParserFormPluginBase.php
modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_parser/Form/JsonForm.php
modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_parser/Form/JsonImporterForm.php
modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_parser/Form/SimpleXmlForm.php
modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_parser/Form/SimpleXmlImporterForm.php
modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_parser/Form/XmlForm.php
modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_parser/Form/XmlImporterForm.php
modules/contrib/feeds_migrate/tests/bootstrap.php
modules/contrib/feeds_migrate/tests/src/Functional/FeedsMigrateTestBase.php
modules/contrib/feeds_migrate/tests/src/Functional/Form/MigrationMappingFormTest.php
modules/contrib/feeds_migrate/tests/src/Functional/ImporterTest.php
modules/contrib/feeds_migrate/tests/src/FunctionalJavascript/FeedsMigrateJavascriptTestBase.php
modules/contrib/feeds_migrate/tests/src/FunctionalJavascript/Form/ImporterFormTest.php
modules/contrib/feeds_migrate/tests/src/FunctionalJavascript/Form/MigrationFormTest.php
modules/contrib/feeds_migrate/tests/src/FunctionalJavascript/Form/MigrationMappingFormTest.php
modules/contrib/feeds_migrate/tests/src/Traits/FeedsCommonTrait.php
modules/contrib/feeds_migrate/tests/src/Traits/FeedsCreationTrait.php
modules/contrib/feeds_migrate/tests/src/Traits/FeedsMockingTrait.php
modules/contrib/feeds_migrate/tests/src/Traits/FeedsReflectionTrait.php
modules/contrib/feeds_migrate/tests/src/Unit/Entity/MigrationTest.php
modules/contrib/feeds_migrate/tests/src/Unit/FeedsMigrateUnitTestBase.php
modules/contrib/feeds_migrate/tests/src/Unit/MappingFieldFormBaseTest.php
modules/contrib/feeds_migrate/tests/src/Unit/MappingFieldFormManagerTest.php
modules/contrib/feeds_migrate/tests/src/Unit/Plugin/MigrateFormProcessPluginManagerTest.php
modules/contrib/feeds_migrate/tests/src/Unit/Plugin/feeds_migrate/mapping_field/DefaultFieldFormTest.php
modules/contrib/feeds_migrate/tests/src/Unit/Plugin/feeds_migrate/mapping_field/MappingFieldFormTestBase.php
modules/contrib/feeds_migrate/tests/src/Unit/Plugin/feeds_migrate/mapping_field/TextAreaFieldFormTest.php

58 files with changes
=====================

1) modules/contrib/feeds_migrate/tests/src/Unit/Plugin/feeds_migrate/mapping_field/MappingFieldFormTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\feeds_migrate\Unit\Plugin\feeds_migrate\mapping_field;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\feeds_migrate\MappingFieldFormInterface;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\Core\Form\FormState;
@@ @@
  */
 abstract class MappingFieldFormTestBase extends FeedsMigrateUnitTestBase {

+  use ProphecyTrait;
   /**
    * The MappingFieldForm plugin under test.
    *
-   * @var \Drupal\feeds_migrate\MappingFieldFormInterface
+   * @var MappingFieldFormInterface
    */
   protected $plugin;

@@ @@
   /**
    * The migration.
    *
-   * @var \Drupal\feeds_migrate\Entity\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;

@@ @@
   /**
    * Field Type Manager Service.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;

@@ @@
   /**
    * The Migrate process plugin form manager.
    *
-   * @var \Drupal\feeds_migrate\Plugin\MigrateFormProcessPluginManagerInterface
+   * @var MigrateFormProcessPluginManagerInterface
    */
   protected $processPluginFormManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->migration = $this->prophesize(MigrationInterface::class);
@@ @@
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
    *
-   * @return \Drupal\feeds_migrate\MappingFieldFormInterface
+   * @return MappingFieldFormInterface
    *   A MappingFieldForm plugin.
    */
   protected function instantiatePlugin(array $configuration = []) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/feeds_migrate/tests/src/Unit/Plugin/MigrateFormProcessPluginManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\feeds_migrate\Unit\Plugin;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
  */
 class MigrateFormProcessPluginManagerTest extends FeedsMigrateUnitTestBase {

+  use ProphecyTrait;
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var ModuleHandlerInterface|ProphecyInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var CacheBackendInterface|ProphecyInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The Migrate process plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $processPluginManager;

@@ @@
   /**
    * The form factory.
    *
-   * @var \Drupal\feeds_migrate\Plugin\MigrateFormPluginFactory
+   * @var MigrateFormPluginFactory
    */
   protected $formFactory;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $namespaces = new \ArrayObject();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/feeds_migrate/tests/src/Unit/MappingFieldFormManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\feeds_migrate\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ProphecyInterface;
+use PHPUnit\Framework\MockObject\MockBuilder;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
  */
 class MappingFieldFormManagerTest extends FeedsMigrateUnitTestBase {

+  use ProphecyTrait;
   /**
    * The mapping field form manager to test.
    *
-   * @var \Drupal\feeds_migrate\MappingFieldFormManager
+   * @var MappingFieldFormManager
    */
   protected $manager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var ModuleHandlerInterface|ProphecyInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\Prophecy\Prophecy\ProphecyInterface
+   * @var CacheBackendInterface|ProphecyInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $namespaces = new \ArrayObject();
@@ @@
   /**
    * Builds a mock for the mapping field form manager.
    *
-   * @return \PHPUnit\Framework\MockObject\MockBuilder
+   * @return MockBuilder
    *   The mock builder, building a mock for the mapping field form manager.
    */
   protected function buildMappingFieldFormManagerMock() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/feeds_migrate/tests/src/Unit/MappingFieldFormBaseTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\feeds_migrate\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Field\FieldTypePluginManagerInterface;
@@ @@
  */
 class MappingFieldFormBaseTest extends FeedsMigrateUnitTestBase {

+  use ProphecyTrait;
   /**
    * The migration.
    *
-   * @var \Drupal\feeds_migrate\Entity\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;

@@ @@
   /**
    * Field Type Manager Service.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;

@@ @@
   /**
    * The Migrate process plugin form manager.
    *
-   * @var \Drupal\feeds_migrate\Plugin\MigrateFormProcessPluginManagerInterface
+   * @var MigrateFormProcessPluginManagerInterface
    */
   protected $processPluginFormManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->migration = $this->prophesize(MigrationInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/feeds_migrate/tests/src/Unit/Entity/MigrationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\feeds_migrate\Unit\Entity;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\feeds_migrate\Entity\Migration;
@@ @@
  */
 class MigrationTest extends FeedsMigrateUnitTestBase {

+  use ProphecyTrait;
   /**
    * Field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->fieldManager = $this->prophesize(EntityFieldManagerInterface::class);
@@ @@
    * @param array $values
    *   (optional) The values for the migration.
    *
-   * @return \Drupal\feeds_migrate\Entity\Migration
+   * @return Migration
    *   A migration entity.
    */
   protected function createMigration(array $values = []) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/feeds_migrate/tests/src/Traits/FeedsMockingTrait.php:19

    ---------- begin diff ----------
@@ @@
    * @param string[] $properties
    *   The field's property names.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    *   The mocked field definition.
    */
   protected function getMockedFieldDefinition($field_name, array $properties) {
@@ @@
    * @param array $properties_per_field
    *   The fields to create definitions for, keyed by field name.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    *   The mocked field definitions.
    */
   protected function getMockedFieldDefinitions(array $properties_per_field) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/feeds_migrate/tests/src/Traits/FeedsCreationTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\feeds_migrate\Traits;

+use Drupal\feeds_migrate\Entity\MigrationInterface;
+use Drupal\feeds_migrate\FeedsMigrateImporterInterface;
 use Drupal\feeds_migrate\Entity\FeedsMigrateImporter;
 use Drupal\feeds_migrate\Entity\Migration;

@@ @@
   /**
    * Stubs a migration entity.
    *
-   * @return \Drupal\feeds_migrate\Entity\MigrationInterface
+   * @return MigrationInterface
    *   Stubbed out Migration Entity.
    */
   protected function createMigration() {
@@ @@
   /**
    * Stubs an importer entity.
    *
-   * @return \Drupal\feeds_migrate\FeedsMigrateImporterInterface
+   * @return FeedsMigrateImporterInterface
    *   Stubbed out Importer Entity.
    */
   protected function createImporter() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/feeds_migrate/tests/src/Traits/FeedsCommonTrait.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The node type to test with.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;

@@ @@
   /**
    * Reloads an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to reload.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The reloaded entity.
    */
   protected function reloadEntity(EntityInterface $entity) {
@@ @@
    *   The absolute path to the Feeds module.
    */
   protected function absolutePath() {
-    return $this->absolute() . '/' . drupal_get_path('module', 'feeds_migrate');
+    return $this->absolute() . '/' . \Drupal::service('extension.list.module')->getPath('feeds_migrate');
   }

   /**
@@ @@
    *   The url to the Feeds resources directory.
    */
   protected function resourcesUrl() {
-    return \Drupal::request()->getSchemeAndHttpHost() . '/' . drupal_get_path('module', 'feeds_migrate') . '/tests/resources';
+    return \Drupal::request()->getSchemeAndHttpHost() . '/' . \Drupal::service('extension.list.module')->getPath('feeds_migrate') . '/tests/resources';
   }

   /**
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/feeds_migrate/tests/src/FunctionalJavascript/Form/MigrationMappingFormTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a migration entity.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/feeds_migrate/tests/src/FunctionalJavascript/FeedsMigrateJavascriptTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\feeds_migrate\FunctionalJavascript;

+use Drupal\user\UserInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\migrate_plus\Entity\MigrationGroup;
 use Drupal\Tests\feeds_migrate\Traits\FeedsCommonTrait;
@@ @@
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a content type.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/feeds_migrate/tests/src/Functional/ImporterTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Copy sample xml file to the expected file directory (i.e. public://).
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/feeds_migrate/tests/src/Functional/Form/MigrationMappingFormTest.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a migration entity.
@@ @@
     $edit = [
       'destination_field' => 'title',
     ];
-    $this->drupalPostForm('/admin/structure/migrate/sources/example_migration/mapping/add', $edit, 'Save');
+    $this->drupalGet('/admin/structure/migrate/sources/example_migration/mapping/add');
+    $this->submitForm($edit, 'Save');

     // And then just save without filling in the source.
-    $this->drupalPostForm(NULL, [], 'Save');
+    $this->submitForm([], 'Save');

     $this->assertSession()->pageTextNotContains('Migration mapping for field Title has been updated.');
     $this->assertSession()->pageTextContains('Please enter a source or configure a process plugin.');
@@ @@
     $edit = [
       'destination_field' => 'title',
     ];
-    $this->drupalPostForm('/admin/structure/migrate/sources/example_migration/mapping/add', $edit, 'Save');
+    $this->drupalGet('/admin/structure/migrate/sources/example_migration/mapping/add');
+    $this->submitForm($edit, 'Save');

     // Set a source and add a process plugin for it.
     $edit = [
@@ @@
       'mapping[title][properties][value][source]' => 'source_a',
       'mapping[title][properties][value][process][add][plugin]' => 'default_value',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Add');
+    $this->submitForm($edit, 'Add');

     // Set a default value and save.
     $edit = [
       'mapping[title][properties][value][process][plugins][0][configuration][default_value]' => 'Foo',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Check if migration is saved with the expected values.
     $migration = Migration::load('example_migration');
@@ @@
     $edit = [
       'destination_field' => 'body',
     ];
-    $this->drupalPostForm('/admin/structure/migrate/sources/example_migration/mapping/add', $edit, 'Save');
+    $this->drupalGet('/admin/structure/migrate/sources/example_migration/mapping/add');
+    $this->submitForm($edit, 'Save');

     // Set a source and add a process plugin for the 'value' property.
     $edit = [
@@ @@
       'mapping[body][properties][value][source]' => 'source_a',
       'mapping[body][properties][value][process][add][plugin]' => 'default_value',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-mapping-body-properties-value-process-add-button');
+    $this->submitForm($edit, 'edit-mapping-body-properties-value-process-add-button');

     // Also add a process plugin for the 'summary' property.
     $edit = [
@@ @@
       'mapping[body][properties][summary][source]' => 'source_b',
       'mapping[body][properties][summary][process][add][plugin]' => 'default_value',
     ];
-    $this->drupalPostForm(NULL, $edit, 'edit-mapping-body-properties-summary-process-add-button');
+    $this->submitForm($edit, 'edit-mapping-body-properties-summary-process-add-button');

     // Configure process plugins for both properties and save.
     $edit = [
@@ @@
       'mapping[body][properties][value][process][plugins][0][configuration][default_value]' => 'Foo',
       'mapping[body][properties][summary][process][plugins][0][configuration][default_value]' => 'Bar',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Check if migration is saved with the expected values.
     $migration = Migration::load('example_migration');
@@ @@
     $edit = [
       'mapping[body][properties][summary][source]' => '',
     ];
-    $this->drupalPostForm('/admin/structure/migrate/sources/example_migration/mapping/body/edit', $edit, 'Save');
+    $this->drupalGet('/admin/structure/migrate/sources/example_migration/mapping/body/edit');
+    $this->submitForm($edit, 'Save');

     // Check if migration is saved with the expected values.
     $migration = $this->reloadEntity($migration);
@@ @@
       'destination_field' => '_custom',
       'destination_key' => 'foo',
     ];
-    $this->drupalPostForm('/admin/structure/migrate/sources/example_migration/mapping/add', $edit, 'Save');
+    $this->drupalGet('/admin/structure/migrate/sources/example_migration/mapping/add');
+    $this->submitForm($edit, 'Save');

     // And set a source.
     $edit = [
       'mapping[foo][source]' => 'qux',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');

     // Check if migration is saved with the expected values.
     $migration = Migration::load('example_migration');
@@ @@
     $this->drupalGet('/admin/structure/migrate/sources/example_migration/mapping');
     $this->assertSession()->pageTextContains('foo');
     $this->assertSession()->pageTextContains('qux');
+    $this->drupalGet('/admin/structure/migrate/sources/example_migration/mapping/foo/delete');

     // Now remove the mapper.
-    $this->drupalPostForm('/admin/structure/migrate/sources/example_migration/mapping/foo/delete', [], 'Delete');
+    $this->submitForm([], 'Delete');

     // And assert that the mapper has been removed.
     $migration = $this->reloadEntity($migration);
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/feeds_migrate/tests/src/Functional/FeedsMigrateTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\feeds_migrate\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\feeds_migrate\Traits\FeedsCommonTrait;
 use Drupal\Tests\Traits\Core\CronRunTrait;
@@ @@
   /**
    * A test user with administrative privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Create a content type.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_fetcher/Form/FileImporterForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Plugin\migrate_plus\data_fetcher\Form;

+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
     if (!empty($source['urls'])) {
       foreach ($source['urls'] as $file_uri) {
         if (!empty($file_uri)) {
-          /** @var \Drupal\file\FileInterface[] $file */
+          /** @var FileInterface[] $file */
           $files = $this->entityTypeManager
             ->getStorage('file')
             ->loadByProperties(['uri' => $file_uri]);
           if (!empty($files)) {
-            /** @var \Drupal\file\FileInterface $file */
+            /** @var FileInterface $file */
             $file = reset($files);
             $fids[] = $file->id();
           }
@@ @@
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
     if (!empty($fids)) {
       $fids = $form_state->getValue('urls', []);
-      /** @var \Drupal\file\FileInterface[] $file */
+      /** @var FileInterface[] $file */
       $files = $this->entityTypeManager
         ->getStorage('file')
         ->loadMultiple($fids);
@@ @@
     unset($entity->source['urls']);
     $fids = $form_state->getValue('urls');
     if (!empty($fids)) {
-      /** @var \Drupal\file\FileInterface[] $file */
+      /** @var FileInterface[] $file */
       $files = $this->entityTypeManager
         ->getStorage('file')
         ->loadMultiple($fids);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_fetcher/Form/FileForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Plugin\migrate_plus\data_fetcher\Form;

+use Drupal\file\FileInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
     if (!empty($source['urls'])) {
       foreach ($source['urls'] as $file_uri) {
         if (!empty($file_uri)) {
-          /** @var \Drupal\file\FileInterface[] $file */
+          /** @var FileInterface[] $file */
           $files = \Drupal::entityTypeManager()
             ->getStorage('file')
             ->loadByProperties(['uri' => $file_uri]);
           if (!empty($files)) {
-            /** @var \Drupal\file\FileInterface $file */
+            /** @var FileInterface $file */
             $file = reset($files);
             $fids[] = $file->id();
           }
@@ @@
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
     if (!empty($fids)) {
       $fids = $form_state->getValue('urls', []);
-      /** @var \Drupal\file\FileInterface[] $file */
+      /** @var FileInterface[] $file */
       $files = $this->entityTypeManager
         ->getStorage('file')
         ->loadMultiple($fids);
@@ @@
     unset($entity->source['urls']);
     $fids = $form_state->getValue('urls');
     if (!empty($fids)) {
-      /** @var \Drupal\file\FileInterface[] $file */
+      /** @var FileInterface[] $file */
       $files = $this->entityTypeManager
         ->getStorage('file')
         ->loadMultiple($fids);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/feeds_migrate/src/Plugin/migrate_plus/data_fetcher/Form/DataFetcherFormPluginBase.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Manager for entity types.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $migrate_plugin
+   * @param PluginInspectionInterface $migrate_plugin
    *   The migrate plugin instance this form plugin is for.
-   * @param \Drupal\feeds_migrate\Entity\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration entity.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PluginInspectionInterface $migrate_plugin, MigrationInterface $migration, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/feeds_migrate/src/Plugin/migrate/source/NullSource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Plugin\migrate\source;

+use Drupal\migrate_plus\DataParserPluginInterface;
 use Drupal\migrate_plus\Plugin\migrate\source\SourcePluginExtension;

 /**
@@ @@
   /**
    * Returns the initialized data parser plugin.
    *
-   * @return \Drupal\migrate_plus\DataParserPluginInterface
+   * @return DataParserPluginInterface
    *   The data parser plugin.
    */
   public function getDataParserPlugin() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


18) modules/contrib/feeds_migrate/src/Plugin/migrate/source/Form/UrlFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Plugin\migrate\source\Form;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Plugin manager for authentication plugins.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $authenticationPluginManager;

@@ @@
   /**
    * Plugin manager for data fetcher plugins.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $dataFetcherPluginManager;

@@ @@
   /**
    * Plugin manager for data parser plugins.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $dataParserPluginManager;

@@ @@
   /**
    * The form factory.
    *
-   * @var \Drupal\feeds_migrate\Plugin\MigrateFormPluginFactory
+   * @var MigrateFormPluginFactory
    */
   protected $formFactory;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $migrate_plugin
+   * @param PluginInspectionInterface $migrate_plugin
    *   The migrate plugin instance this form plugin is for.
-   * @param \Drupal\feeds_migrate\Entity\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration entity.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $authentication_plugin_manager
+   * @param PluginManagerInterface $authentication_plugin_manager
    *   The plugin manager for migrate plus authentication plugins.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $data_fetcher_plugin_manager
+   * @param PluginManagerInterface $data_fetcher_plugin_manager
    *   The plugin manager for migrate plus data fetcher plugins.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $data_parser_plugin_manager
+   * @param PluginManagerInterface $data_parser_plugin_manager
    *   The plugin manager for migrate plus data parser plugins.
-   * @param \Drupal\feeds_migrate\Plugin\MigrateFormPluginFactory $form_factory
+   * @param MigrateFormPluginFactory $form_factory
    *   The factory for feeds migrate form plugins.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PluginInspectionInterface $migrate_plugin, MigrationInterface $migration, PluginManagerInterface $authentication_plugin_manager, PluginManagerInterface $data_fetcher_plugin_manager, PluginManagerInterface $data_parser_plugin_manager, MigrateFormPluginFactory $form_factory) {
@@ @@
     $plugins = $this->getPlugins();
     $weight = 1;
     foreach ($plugins as $plugin_type => $plugin_id) {
-      /** @var \Drupal\Component\Plugin\PluginInspectionInterface $plugin */
+      /** @var PluginInspectionInterface $plugin */
       $plugin = $this->loadMigratePlugin($plugin_type, $plugin_id);
       $plugin_form_type = $this->getPluginDefinition()['form_type'] ?? MigrateFormPluginInterface::FORM_TYPE_CONFIGURATION;
       $options = $this->getPluginOptionsList($plugin_type);
@@ @@
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
     // Allow plugins to validate their settings.
     foreach ($this->getPlugins() as $plugin_type => $plugin_id) {
-      /** @var \Drupal\Component\Plugin\PluginInspectionInterface $plugin */
+      /** @var PluginInspectionInterface $plugin */
       $plugin = $this->loadMigratePlugin($plugin_type, $plugin_id);
       $plugin_form_type = $this->getPluginDefinition()['form_type'] ?? MigrateFormPluginInterface::FORM_TYPE_CONFIGURATION;

@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@

     // Allow plugins to set values on the Migration entity.
     foreach ($this->getPlugins() as $plugin_type => $plugin_id) {
-      /** @var \Drupal\Component\Plugin\PluginInspectionInterface $plugin */
+      /** @var PluginInspectionInterface $plugin */
       $plugin = $this->loadMigratePlugin($plugin_type, $plugin_id);
       $plugin_form_type = $this->getPluginDefinition()['form_type'] ?? MigrateFormPluginInterface::FORM_TYPE_CONFIGURATION;

@@ @@
    * @return object|null
    *   The loaded migrate plugin, or NULL.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function loadMigratePlugin($type, $id) {
     $plugin = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/feeds_migrate/src/Plugin/migrate/destination/Form/EntityContentOptionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Plugin\migrate\destination\Form;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
@@ @@
   /**
    * Manager for entity types.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Manager for content entity bundles.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleManager;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $migrate_plugin
+   * @param PluginInspectionInterface $migrate_plugin
    *   The migrate plugin instance this form plugin is for.
-   * @param \Drupal\feeds_migrate\Entity\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration entity.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_manager
+   * @param EntityTypeBundleInfoInterface $bundle_manager
    *   The bundle manager service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PluginInspectionInterface $migrate_plugin, MigrationInterface $migration, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $bundle_manager) {
@@ @@
   /**
    * Get entity type definition.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface|null
+   * @return EntityTypeInterface|null
    *   The entity type definition for the current plugin, if there is one.
    */
   protected function getEntityType() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/feeds_migrate/src/Plugin/QueueWorker/FeedsMigrateImporter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Plugin\QueueWorker;

+use Drupal\feeds_migrate\FeedsMigrateImporterInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Manager for entity types.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    * {@inheritdoc}
    */
   public function processItem($data) {
-    /** @var \Drupal\feeds_migrate\FeedsMigrateImporterInterface $feeds_migrate_importer */
+    /** @var FeedsMigrateImporterInterface $feeds_migrate_importer */
     $feeds_migrate_importer = $this->entityTypeManager->getStorage('feeds_migrate_importer')
       ->load($data);
     $migrate_executable = $feeds_migrate_importer->getExecutable();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/feeds_migrate/src/Plugin/MigrateFormProcessPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Plugin;

+use Drupal\feeds_migrate\Exception\MigrateFormPluginNotFoundException;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\feeds_migrate\Entity\MigrationInterface;

@@ @@
    *
    * @param string $plugin_id
    *   The id of the process plugin.
-   * @param \Drupal\feeds_migrate\Entity\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration to load a form plugin for.
    * @param array $configuration
    *   The configuration for the process plugin.
    *
-   * @return \Drupal\feeds_migrate\Plugin\MigrateFormPluginInterface
+   * @return MigrateFormPluginInterface
    *   The form process plugin instance.
    *
-   * @throws \Drupal\feeds_migrate\Exception\MigrateFormPluginNotFoundException
+   * @throws MigrateFormPluginNotFoundException
    *   In case no form exists for the specified process plugin ID.
    */
   public function loadMigrateFormPlugin($plugin_id, MigrationInterface $migration, array $configuration = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


22) modules/contrib/feeds_migrate/src/Plugin/MigrateFormProcessPluginManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Plugin;

+use Drupal\migrate\Plugin\MigrateProcessInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
   /**
    * The Migrate process plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $processPluginManager;

@@ @@
   /**
    * The form factory.
    *
-   * @var \Drupal\feeds_migrate\Plugin\MigrateFormPluginFactory
+   * @var MigrateFormPluginFactory
    */
   protected $formFactory;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $process_plugin_manager
+   * @param PluginManagerInterface $process_plugin_manager
    *   The plugin manager for migrate process plugins.
-   * @param \Drupal\feeds_migrate\Plugin\MigrateFormPluginFactory $form_factory
+   * @param MigrateFormPluginFactory $form_factory
    *   The factory for feeds migrate form plugins.
    */
   public function __construct($type, \Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, PluginManagerInterface $process_plugin_manager, MigrateFormPluginFactory $form_factory) {
@@ @@
    * {@inheritdoc}
    */
   public function loadMigrateFormPlugin($plugin_id, MigrationInterface $migration, array $configuration = []) {
-    /** @var \Drupal\migrate\Plugin\MigrateProcessInterface $plugin */
+    /** @var MigrateProcessInterface $plugin */
     $plugin = $this->processPluginManager->createInstance($plugin_id, $configuration);

     // Mapping only happens during configuration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/feeds_migrate/src/Plugin/MigrateFormPluginManager.php:24

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct($type, Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/feeds_migrate/src/Plugin/MigrateFormPluginInterface.php:45

    ---------- begin diff ----------
@@ @@
    * This should not change existing entity properties that are not being edited
    * by this form.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @deprecated This will be removed in favor of ::getConfiguration.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/feeds_migrate/src/Plugin/MigrateFormPluginFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Plugin;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Plugin\PluginFormInterface;
@@ @@
   /**
    * Returns whether or not the plugin implements a form for the given type.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $plugin
+   * @param PluginInspectionInterface $plugin
    *   The Migrate plugin.
    * @param string $operation
    *   The type of form to check for, which can be for example:
@@ @@
   /**
    * Creates a new migrate form plugin instance.
    *
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $plugin
+   * @param PluginInspectionInterface $plugin
    *   The plugin the form plugin is for.
    * @param string $operation
    *   The name of the operation to use, e.g., 'configuration' or 'import'.
-   * @param \Drupal\feeds_migrate\Entity\MigrationInterface|null $migration
+   * @param MigrationInterface|null $migration
    *   The migration entity.
    * @param array $configuration
    *   The form plugin configuration.
    *
-   * @return \Drupal\Core\Plugin\PluginFormInterface
+   * @return PluginFormInterface
    *   A plugin form instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
    */
   public function createInstance(PluginInspectionInterface $plugin, $operation, MigrationInterface $migration = NULL, array $configuration = []) {
     // @todo when migrate plugins implement PluginWithFormsInterface, we can
@@ @@

       /* @var \Drupal\feeds_migrate\Plugin\MigrateFormPluginManager $manager */
       $manager = \Drupal::service("plugin.manager.feeds_migrate.migrate.{$form_plugin_type}_form");
-      /** @var \Drupal\feeds_migrate\Plugin\MigrateFormPluginInterface $form_plugin */
+      /** @var MigrateFormPluginInterface $form_plugin */
       $form_plugin = $manager->createInstance($form_plugin_id, $configuration, $plugin, $migration);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/feeds_migrate/src/Plugin/MigrateFormPluginBase.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The migrate plugin this form plugin is for.
    *
-   * @var \Drupal\Component\Plugin\PluginInspectionInterface
+   * @var PluginInspectionInterface
    */
   protected $migratePlugin;

@@ @@
   /**
    * The migration.
    *
-   * @var \Drupal\feeds_migrate\Entity\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $migrate_plugin
+   * @param PluginInspectionInterface $migrate_plugin
    *   The migrate plugin instance this form plugin is for.
-   * @param \Drupal\feeds_migrate\Entity\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration entity.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, PluginInspectionInterface $migrate_plugin, MigrationInterface $migration) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/feeds_migrate/src/MappingFieldFormManagerInterface.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Get the plugin ID from the field type.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field
+   * @param FieldDefinitionInterface $field
    *   The destination field definition.
    *
-   * @return \Drupal\feeds_migrate\MappingFieldFormInterface
+   * @return MappingFieldFormInterface
    *   The plugin id.
    */
   public function getPluginIdFromField(FieldDefinitionInterface $field = NULL);
@@ @@
    *   The ID of the plugin being instantiated.
    * @param array $configuration
    *   An array of configuration relevant to the plugin instance.
-   * @param \Drupal\feeds_migrate\Entity\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration context in which the plugin will run.
    *
-   * @return \Drupal\feeds_migrate\MappingFieldFormInterface
+   * @return MappingFieldFormInterface
    *   A fully configured plugin instance.
    */
   public function createInstance($plugin_id, array $configuration = [], MigrationInterface $migration = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


28) modules/contrib/feeds_migrate/src/MappingFieldFormManager.php:25

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/feeds_migrate/src/MappingFieldFormInterface.php:65

    ---------- begin diff ----------
@@ @@
    *
    * @param string $property
    *   The property to get the field state for.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
    *
    * @param string $property
    *   The property to set the field state for.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $field_state
    *   The array of data to store. See getPropertyState() for the structure and
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/feeds_migrate/src/MappingFieldFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate;

+use Drupal\Core\TypedData\TypedDataInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
@@ @@
   /**
    * The migration.
    *
-   * @var \Drupal\feeds_migrate\Entity\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;

@@ @@
   /**
    * Field Type Manager Service.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypeManager;

@@ @@
   /**
    * The Migrate process plugin form manager.
    *
-   * @var \Drupal\feeds_migrate\Plugin\MigrateFormProcessPluginManagerInterface
+   * @var MigrateFormProcessPluginManagerInterface
    */
   protected $processPluginFormManager;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\feeds_migrate\Entity\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration entity.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The manager for field types.
-   * @param \Drupal\feeds_migrate\Plugin\MigrateFormProcessPluginManagerInterface $process_plugin_form_manager
+   * @param MigrateFormProcessPluginManagerInterface $process_plugin_form_manager
    *   The manager for process plugin forms.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, FieldTypePluginManagerInterface $field_type_manager, MigrateFormProcessPluginManagerInterface $process_plugin_form_manager) {
@@ @@
     // If the field has one or more properties, iterate over them and render
     // a mapping form.
     if (isset($field)) {
-      /** @var \Drupal\Core\TypedData\TypedDataInterface[] $field_properties */
+      /** @var TypedDataInterface[] $field_properties */
       $field_properties = $this->getFieldProperties($field);
       foreach ($field_properties as $property => $info) {
         $elements['properties'][$property] = [
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $property
    *   The field property to render the process plugin table for.
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\feeds_migrate\Plugin\MigrateFormPluginInterface $plugin
+   * @param MigrateFormPluginInterface $plugin
    *   The migrate process plugin.
    * @param int $delta
    *   The index number of the process plugin.
@@ @@
   /****************************************************************************/
   // Callbacks.
   /****************************************************************************/
-
   /**
    * The form submit callback for adding a new column.
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function addProcessPluginSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function removeProcessPluginSubmit(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $subforms
    *   The form fields for the process plugin configuration.
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $subforms
    *   The form fields for the process plugin configuration.
@@ @@
   /**
    * Retrieve all field properties that are not calculated.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field
+   * @param FieldDefinitionInterface $field
    *   The field definition to load the properties for.
    *
-   * @return \Drupal\Core\TypedData\TypedDataInterface[]
+   * @return TypedDataInterface[]
    *   An array of property objects implementing the TypedDataInterface, keyed
    *   by property name.
    */
@@ @@
   /**
    * Load the configured plugins from form_state or save configuration.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $property
    *   The name of the field property, if any.
@@ @@
    * @param array $configuration
    *   The configuration for the process plugin.
    *
-   * @return \Drupal\feeds_migrate\Plugin\MigrateFormPluginInterface|null
+   * @return MigrateFormPluginInterface|null
    *   The process plugin instance or null in case the process plugin could not
    *   be instantiated.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/feeds_migrate/src/Form/FeedsMigrateImporterRollbackForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Form;

+use Drupal\feeds_migrate\FeedsMigrateImporterInterface;
+use Drupal\feeds_migrate\FeedsMigrateExecutable;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\feeds_migrate\FeedsMigrateImporterInterface $entity */
+    /** @var FeedsMigrateImporterInterface $entity */
     $entity = $this->entity;
     $entity->setLastRun(0);
     $entity->save();

-    /** @var \Drupal\feeds_migrate\FeedsMigrateExecutable $migrate_executable */
+    /** @var FeedsMigrateExecutable $migrate_executable */
     $migrate_executable = $entity->getExecutable();
     $migrate_executable->rollback();
     $form_state->setRedirectUrl($this->getCancelUrl());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/feeds_migrate/src/Form/FeedsMigrateImporterImportForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Form;

+use Drupal\feeds_migrate\FeedsMigrateBatchExecutable;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\feeds_migrate\FeedsMigrateBatchExecutable $migrate_batch_executable */
+    /** @var FeedsMigrateBatchExecutable $migrate_batch_executable */
     $migrate_batch_executable = $this->entity->getBatchExecutable();
     $migrate_batch_executable->batchImport();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/feeds_migrate/src/Form/FeedsMigrateImporterForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Form;

+use Drupal\feeds_migrate\Entity\MigrationInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\DiffArray;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Entity\EntityForm;
@@ @@
   /**
    * The feeds importer entity.
    *
-   * @var \Drupal\feeds_migrate\FeedsMigrateImporterInterface
+   * @var FeedsMigrateImporterInterface
    */
   protected $entity;

@@ @@
   /**
    * Plugin manager for migration plugins.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;

@@ @@
   /**
    * Plugin manager for source plugins.
    *
-   * @var \Drupal\migrate\Plugin\MigratePluginManagerInterface
+   * @var MigratePluginManagerInterface
    */
   protected $sourcePluginManager;

@@ @@
   /**
    * Plugin manager for destination plugins.
    *
-   * @var \Drupal\migrate\Plugin\MigratePluginManagerInterface
+   * @var MigratePluginManagerInterface
    */
   protected $destinationPluginManager;

@@ @@
   /**
    * The form factory.
    *
-   * @var \Drupal\feeds_migrate\Plugin\MigrateFormPluginFactory
+   * @var MigrateFormPluginFactory
    */
   protected $formFactory;

@@ @@
   /**
    * Date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Migration entity.
    *
-   * @var \Drupal\feeds_migrate\Entity\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;

@@ @@
   /**
    * FeedsMigrateImporterForm constructor.
    *
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   Plugin manager for migration plugins.
-   * @param \Drupal\migrate\Plugin\MigratePluginManagerInterface $source_plugin_manager
+   * @param MigratePluginManagerInterface $source_plugin_manager
    *   Plugin manager for source migrate plugins.
-   * @param \Drupal\migrate\Plugin\MigratePluginManagerInterface $destination_plugin_manager
+   * @param MigratePluginManagerInterface $destination_plugin_manager
    *   Plugin manager for destination migrate plugins.
-   * @param \Drupal\feeds_migrate\Plugin\MigrateFormPluginFactory $form_factory
+   * @param MigrateFormPluginFactory $form_factory
    *   The form factory for migrate form plugins.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(MigrationPluginManagerInterface $migration_plugin_manager, MigratePluginManagerInterface $source_plugin_manager, MigratePluginManagerInterface $destination_plugin_manager, MigrateFormPluginFactory $form_factory, DateFormatterInterface $date_formatter) {
@@ @@

     // Source.
     $options = [];
-    /** @var \Drupal\Core\Entity\EntityInterface $migration */
+    /** @var EntityInterface $migration */
     foreach (Migration::loadMultiple() as $migration) {
       $options[$migration->id()] = $migration->label();
     }
@@ @@
    * @return object|null
    *   The plugin, or NULL if type is not supported.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function loadMigratePlugin($type, $plugin_id) {
     /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/feeds_migrate/src/Form/FeedsMigrateImporterEnableForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Form;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $entity->enable()->save();
     parent::submitForm($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/feeds_migrate/src/Form/FeedsMigrateImporterDisableForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Form;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $entity->disable()->save();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/feeds_migrate/src/Form/FeedsMigrateImporterDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Form;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $entity->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/feeds_migrate/src/FeedsMigrateImporterListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate;

+use Drupal\feeds_migrate\Entity\FeedsMigrateImporter;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $dateTime;

@@ @@
   /**
    * Constructs a new FeedsMigrateImporterListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date Formatter service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatterInterface $date_formatter, TimeInterface $time) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\feeds_migrate\Entity\FeedsMigrateImporter $importer */
+    /** @var FeedsMigrateImporter $importer */
     $importer = $entity;
-    /** @var \Drupal\feeds_migrate\Entity\Migration $migration */
+    /** @var Migration $migration */
     $migration = Migration::load($importer->getMigrationId());

     $data = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/feeds_migrate/src/FeedsMigrateImporterInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate;

+use Drupal\feeds_migrate\Entity\MigrationInterface;
+use Drupal\migrate\MigrateException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;

 /**
@@ @@
   /**
    * Get the original migration plugin.
    *
-   * @return \Drupal\feeds_migrate\Entity\MigrationInterface
+   * @return MigrationInterface
    *   The original migration entity before any configuration changes.
    */
   public function getOriginalMigration();
@@ @@
   /**
    * Get the altered migration plugin.
    *
-   * @return \Drupal\feeds_migrate\Entity\MigrationInterface
+   * @return MigrationInterface
    *   The migration plugin after configuration changes are applied.
    */
   public function getMigration();
@@ @@
   /**
    * Get the altered migrate batch executable object that can run the import.
    *
-   * @return \Drupal\feeds_migrate\FeedsMigrateExecutable
+   * @return FeedsMigrateExecutable
    *   The batch executable to run the import.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    *   If the executable failed.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function getBatchExecutable();
@@ @@
   /**
    * Get the altered migrate executable object that can run the import.
    *
-   * @return \Drupal\feeds_migrate\FeedsMigrateExecutable
+   * @return FeedsMigrateExecutable
    *   The executable to run the import.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    *   If the executable failed.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public function getExecutable();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


39) modules/contrib/feeds_migrate/src/FeedsMigrateExecutable.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate;

+use Drupal\migrate\Plugin\MigrationPluginManagerInterface;
 use Drupal;
 use Drupal\migrate\Event\MigrateEvents;
 use Drupal\migrate\Event\MigrateImportEvent;
@@ @@
   /**
    * Plugin manager for migration plugins.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;

@@ @@
   /**
    * The configuration of the feeds migrate importer.
    *
-   * @var \Drupal\feeds_migrate\FeedsMigrateImporterInterface
+   * @var FeedsMigrateImporterInterface
    */
   protected $importer;

@@ @@
     $this->importer = $importer;
     /* @var \Drupal\migrate\Plugin\MigrationPluginManager $migration_manager */
     $this->migrationPluginManager = Drupal::service('plugin.manager.migration');
-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration_plugin */
+    /** @var MigrationInterface $migration_plugin */
     $migration_plugin = $this->migrationPluginManager->createInstance($importer->getMigrationId(), $importer->getMigration()->toArray());

     parent::__construct($migration_plugin, $message);
@@ @@
   /**
    * Count up any map save events.
    *
-   * @param \Drupal\migrate\Event\MigrateMapSaveEvent $event
+   * @param MigrateMapSaveEvent $event
    *   The map event.
    */
   public function onMapSave(MigrateMapSaveEvent $event) {
@@ @@
   /**
    * Count up any rollback events.
    *
-   * @param \Drupal\migrate\Event\MigrateMapDeleteEvent $event
+   * @param MigrateMapDeleteEvent $event
    *   The map event.
    */
   public function onMapDelete(MigrateMapDeleteEvent $event) {
@@ @@
   /**
    * React to migration completion.
    *
-   * @param \Drupal\migrate\Event\MigrateImportEvent $event
+   * @param MigrateImportEvent $event
    *   The map event.
    */
   public function onPostImport(MigrateImportEvent $event) {
@@ @@
   /**
    * React to rollback completion.
    *
-   * @param \Drupal\migrate\Event\MigrateRollbackEvent $event
+   * @param MigrateRollbackEvent $event
    *   The map event.
    */
   public function onPostRollback(MigrateRollbackEvent $event) {
@@ @@
   /**
    * React to an item about to be imported.
    *
-   * @param \Drupal\migrate\Event\MigratePreRowSaveEvent $event
+   * @param MigratePreRowSaveEvent $event
    *   The pre-save event.
    */
   public function onPreRowSave(MigratePreRowSaveEvent $event) {
@@ @@
   /**
    * React to item rollback.
    *
-   * @param \Drupal\migrate\Event\MigrateRowDeleteEvent $event
+   * @param MigrateRowDeleteEvent $event
    *   The post-save event.
    */
   public function onPostRowDelete(MigrateRowDeleteEvent $event) {
@@ @@
   /**
    * React to a new row.
    *
-   * @param \Drupal\migrate_plus\Event\MigratePrepareRowEvent $event
+   * @param MigratePrepareRowEvent $event
    *   The prepare-row event.
    *
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateSkipRowException
    */
   public function onPrepareRow(MigratePrepareRowEvent $event) {
     if (!empty($this->idlist)) {
@@ @@
   /**
    * Import a single row.
    *
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row to be processed.
    */
   public function importRow(Row $row) {
@@ @@
     if ($save) {
       try {
         $this->getEventDispatcher()
-          ->dispatch(MigrateEvents::PRE_ROW_SAVE, new MigratePreRowSaveEvent($this->migration, $this->message, $row));
+          ->dispatch(new MigratePreRowSaveEvent($this->migration, $this->message, $row), MigrateEvents::PRE_ROW_SAVE);
         $destination_ids = $id_map->lookupDestinationIds($this->sourceIdValues);
         $destination_id_values = $destination_ids ? reset($destination_ids) : [];
         $destination_id_values = $destination->import($row, $destination_id_values);
         $this->getEventDispatcher()
-          ->dispatch(MigrateEvents::POST_ROW_SAVE, new MigratePostRowSaveEvent($this->migration, $this->message, $row, $destination_id_values));
+          ->dispatch(new MigratePostRowSaveEvent($this->migration, $this->message, $row, $destination_id_values), MigrateEvents::POST_ROW_SAVE);
         if ($destination_id_values) {
           // We do not save an idMap entry for config.
           if ($destination_id_values !== TRUE) {
@@ @@
   /**
    * Retrieve the migration.
    *
-   * @return \Drupal\migrate\Plugin\MigrationInterface
+   * @return MigrationInterface
    *   The migration to execute.
    */
   public function getMigration() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/feeds_migrate/src/FeedsMigrateBatchExecutable.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\migrate\MigrateException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal;
 use Drupal\migrate\Plugin\MigrateIdMapInterface;
 use Drupal\migrate\Plugin\MigrationInterface;
@@ @@
   /**
    * Run a feeds migrate batch import.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function batchImport() {
     $migration = $this->getMigration();
@@ @@
    *
    * @param string $importer_id
    *   The id of the feeds migrate importer.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row to be processed.
    * @param array $context
    *   The batch context.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    *   If the executable failed.
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   If the instance cannot be created, such as if the ID is invalid.
    */
   public static function batchImportRow($importer_id, Row $row, array &$context) {
-    /** @var \Drupal\feeds_migrate\FeedsMigrateImporterInterface $feeds_migrate_importer */
+    /** @var FeedsMigrateImporterInterface $feeds_migrate_importer */
     $feeds_migrate_importer = \Drupal::service('entity_type.manager')->getStorage('feeds_migrate_importer')
       ->load($importer_id);
     $migrate_executable = $feeds_migrate_importer->getBatchExecutable();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/feeds_migrate/src/Entity/MigrationInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Entity;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\migrate_plus\Entity\MigrationInterface as MigratePlusMigrationInterface;

 /**
@@ @@
    * @param string $field_name
    *   The name of the field to look for.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface|null
+   * @return FieldDefinitionInterface|null
    *   The field definition - if any.
    */
   public function getDestinationField($field_name);
@@ @@
   /**
    * Get a list of fields for the destination the this migration is pointing at.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    *   The array of field definitions for the bundle, keyed by field name.
    */
   public function getDestinationFields();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


42) modules/contrib/feeds_migrate/src/Entity/Migration.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Entity;

+use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\migrate_plus\Entity\Migration as MigratePlusMigration;

@@ @@
   /**
    * Field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;

@@ @@
   /**
    * Gets the field manager service.
    *
-   * @return \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @return EntityFieldManagerInterface
    *   The field manager.
    */
   protected function getFieldManager() {
@@ @@
   /**
    * Sets the field manager.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The field manager.
    *
    * @return $this
@@ @@
    * \Drupal\Core\DependencyInjection\ContainerInjectionInterface should be used
    * for injecting services.
    *
-   * @return \Symfony\Component\DependencyInjection\ContainerInterface
+   * @return ContainerInterface
    *   The service container.
    */
   private function container() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/feeds_migrate/src/Entity/FeedsMigrateImporter.php:93

    ---------- begin diff ----------
@@ @@
   /**
    * The original migration entity.
    *
-   * @var \Drupal\feeds_migrate\Entity\MigrationInterface
+   * @var MigrationInterface
    *   The migration entity object before configuration alterations.
    */
   protected $originalMigration;
@@ @@
   /**
    * The migration entity.
    *
-   * @var \Drupal\feeds_migrate\Entity\MigrationInterface
+   * @var MigrationInterface
    *   The migration entity object after configuration alterations.
    */
   protected $migration;
@@ @@
    */
   public function getMigration() {
     if (!isset($this->migration)) {
-      /** @var \Drupal\feeds_migrate\Entity\MigrationInterface $altered_migration */
+      /** @var MigrationInterface $altered_migration */
       $altered_migration = $this->migration = clone $this->getOriginalMigration();

       $source = array_merge($this->originalMigration->getSourceConfiguration(), $this->migrationConfig['source'] ?? []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/feeds_migrate/src/Annotation/MigrateForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


45) modules/contrib/feeds_migrate/src/Annotation/MappingFieldForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate\Annotation;

+use Drupal\Core\Annotation\Translation;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The title of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * Fill this out.
    *
-   * @var \Drupal\Core\Field\FieldDefinitionInterface
+   * @var FieldDefinitionInterface
    */
   public $field;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


46) modules/contrib/feeds_migrate/modules/migrate_tamper/src/Plugin/migrate/process/Form/TamperForm.php:36

    ---------- begin diff ----------
@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Component\Plugin\PluginInspectionInterface $migrate_plugin
+   * @param PluginInspectionInterface $migrate_plugin
    *   The migrate plugin instance this form plugin is for.
-   * @param \Drupal\feeds_migrate\Entity\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration entity.
    * @param \Drupal\tamper\TamperManagerInterface $tamper_manager
    *   The tamper plugin manager.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationMappingFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate_ui\Form;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\feeds_migrate\Entity\MigrationInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\feeds_migrate\MappingFieldFormInterface;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Plugin manager for migration mapping plugins.
    *
-   * @var \Drupal\feeds_migrate\MappingFieldFormManager
+   * @var MappingFieldFormManager
    */
   protected $mappingFieldManager;

@@ @@
   /**
    * Manager for entity types.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Manager for entity fields.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $fieldManager;

@@ @@
   /**
    * Creates a new MigrationMappingFormBase object.
    *
-   * @param \Drupal\feeds_migrate\MappingFieldFormManager $mapping_field_manager
+   * @param MappingFieldFormManager $mapping_field_manager
    *   Mapping field manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManager $field_manager
+   * @param EntityFieldManager $field_manager
    *   Field manager service.
    */
   public function __construct(MappingFieldFormManager $mapping_field_manager, EntityFieldManager $field_manager) {
@@ @@
   /**
    * Gets the label for the destination field - if any.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The label of the destination field, or key if the destination is a custom
    *   property.
    */
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   An associative array containing the current state of the form.
    *
    * @return array
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\feeds_migrate\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->getEntity();

     // Save the migration.
@@ @@
       return;
     }

-    /** @var \Drupal\feeds_migrate\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->entity;

     // Get migration configuration(s).
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
   protected function getMappingDestinationOptions() {
     $options = [];

-    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $fields */
+    /** @var FieldDefinitionInterface[] $fields */
     $fields = $this->entity->getDestinationFields();
     foreach ($fields as $field_name => $field) {
       $options[$field->getName()] = $field->getLabel();
@@ @@
   /**
    * Load mapping field form plugin.
    *
-   * @return \Drupal\feeds_migrate\MappingFieldFormInterface
+   * @return MappingFieldFormInterface
    *   Mapping field form plugin instance.
    */
   protected function loadMappingFieldFormPlugin() {
-    /** @var \Drupal\feeds_migrate\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->entity;
     $destination_field = $mapping['destination']['field'] ?? NULL;
     $plugin_id = $this->mappingFieldManager->getPluginIdFromField($destination_field);

-    /** @var \Drupal\feeds_migrate\MappingFieldFormInterface $plugin */
+    /** @var MappingFieldFormInterface $plugin */
     $form_plugin = $this->mappingFieldManager->createInstance($plugin_id, $this->getPluginConfig(), $migration);
     return $form_plugin;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


48) modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationMappingForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate_ui\Form;

+use Drupal\feeds_migrate\Entity\MigrationInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Entity\EntityFieldManager;
@@ @@
   /**
    * Plugin manager for migration mapping plugins.
    *
-   * @var \Drupal\feeds_migrate\MappingFieldFormManager
+   * @var MappingFieldFormManager
    */
   protected $mappingFieldManager;

@@ @@
   /**
    * The field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $fieldManager;

@@ @@
   /**
    * Creates a new MigrationMappingForm.
    *
-   * @param \Drupal\feeds_migrate\MappingFieldFormManager $mapping_field_manager
+   * @param MappingFieldFormManager $mapping_field_manager
    *   Mapping field manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManager $field_manager
+   * @param EntityFieldManager $field_manager
    *   Field manager service.
    */
   public function __construct(MappingFieldFormManager $mapping_field_manager, EntityFieldManager $field_manager) {
@@ @@
    *
    * @param array $form
    *   The complete mapping form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the complete form.
    * @param array $mapping
    *   The mapping configuration.
@@ @@
   /**
    * Builds the summary for a configurable target.
    *
-   * @param \Drupal\feeds_migrate\MappingFieldFormInterface $plugin
+   * @param MappingFieldFormInterface $plugin
    *   A mapping field form plugin.
    * @param string $property
    *   A field property to get the summary for.
@@ @@
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\feeds_migrate\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->entity;
     $mappings = $migration->getMappings();

@@ @@
    * @param array $configuration
    *   Configuration for the plugin.
    *
-   * @return \Drupal\feeds_migrate\MappingFieldFormInterface
+   * @return MappingFieldFormInterface
    *   A mapping field form plugin.
    */
   protected function getMappingFieldFormPlugin($field_name, array $configuration) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationMappingDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate_ui\Form;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\feeds_migrate\Entity\MigrationInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Entity\EntityFieldManager;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Manager for entity fields.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $fieldManager;

@@ @@
   /**
    * Constructs a new MigrationMappingDeleteForm object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManager $field_manager
+   * @param EntityFieldManager $field_manager
    *   Field manager service.
    */
   public function __construct(EntityFieldManager $field_manager) {
@@ @@
   /**
    * Gets the label for the destination field - if any.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
+   * @return TranslatableMarkup|string
    *   The label of the field, or key if custom property.
    */
   public function getDestinationFieldLabel() {
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\feeds_migrate\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->entity;
     // Remove the mapping from the migration process array.
     $migration->removeMapping($this->destinationKey)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationMappingAddForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate_ui\Form;

+use Drupal\feeds_migrate\Entity\MigrationInterface;
 use Drupal\Core\Form\FormStateInterface;

 /**
@@ @@
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\feeds_migrate\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->entity;

     // Retrieve the destination key of the migration mapping.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate_ui\Form;

+use Drupal\feeds_migrate\Entity\MigrationInterface;
+use Drupal\migrate\Plugin\Migration;
+use Drupal\Component\Plugin\PluginInspectionInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * Plugin manager for migration plugins.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;

@@ @@
   /**
    * Plugin manager for source plugins.
    *
-   * @var \Drupal\migrate\Plugin\MigratePluginManagerInterface
+   * @var MigratePluginManagerInterface
    */
   protected $sourcePluginManager;

@@ @@
   /**
    * Plugin manager for destination plugins.
    *
-   * @var \Drupal\migrate\Plugin\MigratePluginManagerInterface
+   * @var MigratePluginManagerInterface
    */
   protected $destinationPluginManager;

@@ @@
   /**
    * The factory for generating forms for migrate plugins.
    *
-   * @var \Drupal\feeds_migrate\Plugin\MigrateFormPluginFactory
+   * @var MigrateFormPluginFactory
    */
   protected $formFactory;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a new MigrationForm.
    *
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   Plugin manager for migration plugins.
-   * @param \Drupal\migrate\Plugin\MigratePluginManagerInterface $source_plugin_manager
+   * @param MigratePluginManagerInterface $source_plugin_manager
    *   Plugin manager for source plugins.
-   * @param \Drupal\migrate\Plugin\MigratePluginManagerInterface $destination_plugin_manager
+   * @param MigratePluginManagerInterface $destination_plugin_manager
    *   Plugin manager for destination plugins.
-   * @param \Drupal\feeds_migrate\Plugin\MigrateFormPluginFactory $form_factory
+   * @param MigrateFormPluginFactory $form_factory
    *   The factory for generating forms for migrate plugins.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer service.
    */
   public function __construct(MigrationPluginManagerInterface $migration_plugin_manager, MigratePluginManagerInterface $source_plugin_manager, MigratePluginManagerInterface $destination_plugin_manager, MigrateFormPluginFactory $form_factory, Renderer $renderer) {
@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\feeds_migrate\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->entity;

     $form['#tree'] = TRUE;
@@ @@
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\feeds_migrate\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->entity;

     // Allow plugins to validate their settings.
@@ @@
    * because that may only be called on saved entities. And we really need an
    * array representation for unsaved entities too.
    *
-   * @return \Drupal\migrate\Plugin\Migration
+   * @return Migration
    *   The dummy migration plugin.
    */
   protected function getMigration() {
@@ @@
    * @param string $plugin_id
    *   The plugin identifier.
    *
-   * @return \Drupal\Component\Plugin\PluginInspectionInterface|null
+   * @return PluginInspectionInterface|null
    *   The plugin, or NULL if type is not supported.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function loadMigratePlugin($type, $plugin_id) {
     /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
@@ @@

     switch ($type) {
       case 'source':
-        /** @var \Drupal\Component\Plugin\PluginInspectionInterface $plugin */
+        /** @var PluginInspectionInterface $plugin */
         $plugin = $this->sourcePluginManager->createInstance($plugin_id, $migration->getSourceConfiguration(), $migration);
         break;

       case 'destination':
-        /** @var \Drupal\Component\Plugin\PluginInspectionInterface $plugin */
+        /** @var PluginInspectionInterface $plugin */
         $plugin = $this->destinationPluginManager->createInstance($plugin_id, $migration->getDestinationConfiguration(), $migration);
         break;
     }
@@ @@
     // $form_state as it is stripped by RequestSanitizer on AJAX callback:
     // @see /core/lib/Drupal/Core/Security/RequestSanitizer.php:92
     $values = $form_state->getValue('migration');
-    /** @var \Drupal\feeds_migrate\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $entity;

     foreach ($values as $key => $value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationExportForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate_ui\Form;

+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Serialization\Yaml;
@@ @@
    * Download the current migration's configuration as a .yml file.
    *
    * @param array $form
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    */
   public function download(array $form, FormStateInterface $form_state) {
     $content = $this->getYaml();
@@ @@
    */
   protected function getYaml() {
     $config_name = $this->getConfigName();
-    /** @var \Drupal\Core\Config\ImmutableConfig $config */
+    /** @var ImmutableConfig $config */
     $config = $this->config($config_name);
     $data = $config->getRawData();
     $yaml = Yaml::encode($data);
@@ @@
    *   The migration's config file name (without *.yml).
    */
   protected function getConfigName() {
-    /** @var \Drupal\Core\Entity\EntityInterface $migration */
+    /** @var EntityInterface $migration */
     $migration = $this->entity;
     $definition = $this->entityTypeManager->getDefinition($migration->getEntityTypeId());
     return $definition->getConfigPrefix() . '.' . $migration->getConfigTarget();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Form/MigrationDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate_ui\Form;

+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     $entity->delete();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/FeedsMigrationListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate_ui;

+use Drupal\migrate\Plugin\MigrationInterface;
+use Drupal\Core\Datetime\DateFormatter;
 use Drupal\migrate_tools\Controller\MigrationListBuilder;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    */
   public function migrateToolsBuildRow(EntityInterface $migration_entity) {
     try {
-      /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+      /** @var MigrationInterface $migration */
       $migration = $this->migrationPluginManager->createInstance($migration_entity->id());
       $migration_group = $migration_entity->get('migration_group');
       if (!$migration_group) {
@@ @@
       $migrate_last_imported_store = \Drupal::keyValue('migrate_last_imported');
       $last_imported = $migrate_last_imported_store->get($migration->id(), FALSE);
       if ($last_imported) {
-        /** @var \Drupal\Core\Datetime\DateFormatter $date_formatter */
+        /** @var DateFormatter $date_formatter */
         $date_formatter = \Drupal::service('date.formatter');
         $row['last_imported'] = $date_formatter->format($last_imported / 1000,
           'custom', 'Y-m-d H:i:s');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/FeedsMigrateUiParserSuggestion.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate_ui;

+use Drupal\migrate_plus\DataFetcherPluginManager;
+use Drupal\migrate_plus\DataFetcherPluginInterface;
 use Drupal\migrate_plus\DataParserPluginManager;
 use GuzzleHttp\Psr7\Stream;

@@ @@
   const PARSER_JSON = 'json';

   /**
-   * @var \Drupal\migrate_plus\DataParserPluginManager
+   * @var DataParserPluginManager
    */
   protected $parserManager;

   /**
-   * @var \Drupal\migrate_plus\DataFetcherPluginManager
+   * @var DataFetcherPluginManager
    */
   protected $fetcherManager;

@@ @@
    *
    */
   public function getSuggestedSelectors($fetcher_plugin_id, $url) {
-    /** @var \Drupal\migrate_plus\DataFetcherPluginInterface $fetcher_plugin */
+    /** @var DataFetcherPluginInterface $fetcher_plugin */
     $fetcher_plugin = $this->fetcherManager->createInstance($fetcher_plugin_id);
     $contents = $fetcher_plugin->getResponseContent($url);
     if ($contents instanceof Stream) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


56) modules/contrib/feeds_migrate/modules/feeds_migrate_ui/src/Controller/FeedsMigrateController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feeds_migrate_ui\Controller;

+use Psr\Log\LoggerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\feeds_migrate\Entity\MigrationInterface;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Loads the entity form for editing a mapping.
    *
-   * @param \Drupal\feeds_migrate\Entity\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration entity.
    * @param string $destination
    *   The destination field name or key.
@@ @@
   /**
    * Loads the entity form for deleting a mapping.
    *
-   * @param \Drupal\feeds_migrate\Entity\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration entity.
    * @param string $destination
    *   The destination field name or key.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/feeds_migrate/modules/feeds_migrate_ui/feeds_migrate_ui.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
 /**
  * @file
  * feeds_migrate_ui.module
  */
-
 /**
  * Implements hook_entity_type_alter().
  */
 function feeds_migrate_ui_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityTypeInterface $migration */
+  /** @var ConfigEntityTypeInterface $migration */
   $migration = &$entity_types['migration'];

   $migration->setFormClass('add', 'Drupal\feeds_migrate_ui\Form\MigrationForm');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


58) modules/contrib/feeds_migrate/feeds_migrate.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\feeds_migrate\Entity\MigrationInterface;
+use Drupal\Core\Config\ConfigManagerInterface;
 /**
  * @file
  * feeds_migrate.module
@@ @@
  * Implements hook_form_FORM_ID_alter().
  */
 function feeds_migrate_form_migration_delete_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var Drupal\feeds_migrate\Entity\MigrationInterface $migration */
+  /** @var MigrationInterface $migration */
   $migration = $form_state->getBuildInfo()['callback_object']->getEntity();
   // See which feeds migrate importers use this migration.
   $dependency_count = 0;
-  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
+  /** @var ConfigManagerInterface $config_manager */
   $config_manager = \Drupal::service('config.manager');
   $dependents = $config_manager->findConfigEntityDependentsAsEntities('config', [$migration->getConfigDependencyName()]);
   foreach ($dependents as $dependent) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/feeds_migrate/modules/migrate_tamper/src/Plugin/migrate/
         process/Tamper.php" file, due to:                                      
         "Analyze error: "Class Drupal\tamper\TamperableItemInterface not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/feeds_migrate/modules/migrate_tamper/src/Adapter/Tampera
         bleMigrateRowAdapter.php" file, due to:                                
         "Analyze error: "Class Drupal\tamper\TamperableItemInterface not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

