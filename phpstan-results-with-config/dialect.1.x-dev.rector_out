modules/contrib/dialect/dialect.module
modules/contrib/dialect/src/DialectManager.php
modules/contrib/dialect/src/EventSubscriber/RedirectLanguage.php
modules/contrib/dialect/src/Form/SharedBlockConfigForm.php
modules/contrib/dialect/src/Plugin/Block/DialectBlock.php

4 files with changes
====================

1) modules/contrib/dialect/src/Plugin/Block/DialectBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dialect\Plugin\Block;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\language\ConfigurableLanguageManager definition.
    *
-   * @var \Drupal\language\ConfigurableLanguageManager
+   * @var ConfigurableLanguageManager
    */
   protected $languageManager;

@@ @@
   /**
    * Drupal\Core\Path\PathMatcher definition.
    *
-   * @var \Drupal\Core\Path\PathMatcher
+   * @var PathMatcher
    */
   protected $pathMatcher;

@@ @@
   /**
    * Drupal\Core\Render\Renderer definition.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;

@@ @@
   /**
    * Drupal\dialect\DialectManager definition.
    *
-   * @var \Drupal\dialect\DialectManager
+   * @var DialectManager
    */
   protected $dialectManager;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configurationFactory;

@@ @@
   /**
    * Immutable configuration shared form a global configuration form.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   private $sharedBlockConfiguration;

@@ @@
    *   Plugin id.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   Entity type manager definition.
-   * @param \Drupal\language\ConfigurableLanguageManager $language_manager
+   * @param ConfigurableLanguageManager $language_manager
    *   Language manager definition.
-   * @param \Drupal\Core\Path\PathMatcher $path_matcher
+   * @param PathMatcher $path_matcher
    *   Path matcher definition.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   Renderer definition.
-   * @param \Drupal\dialect\DialectManager $dialect_manager
+   * @param DialectManager $dialect_manager
    *   Dialect Manager definition.
-   * @param Drupal\Core\Config\ConfigFactory $configuration_factory
+   * @param ConfigFactory $configuration_factory
    *   Configuration Factory definition.
    */
   public function __construct(array $configuration,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/dialect/src/Form/SharedBlockConfigForm.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/dialect/src/EventSubscriber/RedirectLanguage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dialect\EventSubscriber;

+use Drupal\Core\Config\ConfigFactory;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\dialect\DialectManager;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * Drupal\dialect\DialectManager definition.
    *
-   * @var \Drupal\dialect\DialectManager
+   * @var DialectManager
    */
   protected $dialectManager;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configurationFactory;

@@ @@
   /**
    * Checks the current language and redirect to the fallback node if necessary.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   GetResponseEvent.
    */
-  public function redirect(GetResponseEvent $event) {
+  public function redirect(RequestEvent $event) {
     $currentLanguageId = $this->dialectManager->getCurrentLanguageId();

     // Redirect excluded languages to the default language on the front page.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/dialect/src/DialectManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\dialect;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\block\Entity\Block;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Config\ConfigFactory;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Block\BlockManager definition.
    *
-   * @var \Drupal\Core\Block\BlockManager
+   * @var BlockManager
    */
   protected $blockManager;

@@ @@
   /**
    * Drupal\language\ConfigurableLanguageManager definition.
    *
-   * @var \Drupal\language\ConfigurableLanguageManager
+   * @var ConfigurableLanguageManager
    */
   protected $languageManager;

@@ @@
   /**
    * Drupal\Core\Routing\UrlGenerator definition.
    *
-   * @var \Drupal\Core\Routing\UrlGenerator
+   * @var UrlGenerator
    */
   protected $urlGenerator;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configurationFactory;

@@ @@
   /**
    * Immutable configuration shared form a global configuration form.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   private $sharedBlockConfiguration;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   Entity Type Manager definition.
-   * @param \Drupal\Core\Block\BlockManager $block_manager
+   * @param BlockManager $block_manager
    *   Block Manager definition.
-   * @param \Drupal\language\ConfigurableLanguageManager $language_manager
+   * @param ConfigurableLanguageManager $language_manager
    *   Language Manager definition.
-   * @param \Drupal\Core\Routing\UrlGenerator $url_generator
+   * @param UrlGenerator $url_generator
    *   Url Generator definition.
-   * @param \Drupal\Core\Config\ConfigFactory $configuration_factory
+   * @param ConfigFactory $configuration_factory
    *   Configuration Factory definition.
    */
   public function __construct(EntityTypeManager $entity_type_manager, BlockManager $block_manager, ConfigurableLanguageManager $language_manager, UrlGenerator $url_generator, ConfigFactory $configuration_factory) {
@@ @@
   /**
    * Redirects to the front page in the site default language.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The front page redirect response.
    */
   public function getFrontPageRedirectResponse() {
@@ @@
   /**
    * Returns the fallback node redirect response.
    *
-   * @return null|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return null|RedirectResponse
    *   Redirect Response.
    *
    * @throws \Exception
@@ @@
   /**
    * Returns the settings for a Block.
    *
-   * @param \Drupal\block\Entity\Block $block
+   * @param Block $block
    *   Block.
    *
    * @return mixed|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 4 files have been changed by Rector                                       

