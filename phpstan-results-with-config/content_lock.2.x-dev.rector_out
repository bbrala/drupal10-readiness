modules/contrib/content_lock/content_lock.install
modules/contrib/content_lock/content_lock.module
modules/contrib/content_lock/modules/content_lock_timeout/content_lock_timeout.install
modules/contrib/content_lock/modules/content_lock_timeout/content_lock_timeout.module
modules/contrib/content_lock/modules/content_lock_timeout/src/Form/SettingsForm.php
modules/contrib/content_lock/modules/content_lock_timeout/tests/modules/content_lock_timeout_test/src/TimeChanger.php
modules/contrib/content_lock/modules/content_lock_timeout/tests/src/Functional/ContentLockTimeoutTest.php
modules/contrib/content_lock/src/Ajax/LockFormCommand.php
modules/contrib/content_lock/src/ContentLock/ContentLock.php
modules/contrib/content_lock/src/Controller/ContentLockController.php
modules/contrib/content_lock/src/EventSubscriber/SettingsSaveEventSubscriber.php
modules/contrib/content_lock/src/Form/ContentLockSettingsForm.php
modules/contrib/content_lock/src/Form/EntityBreakLockForm.php
modules/contrib/content_lock/src/Plugin/Action/BreakLock.php
modules/contrib/content_lock/src/Plugin/Action/BreakLockDeriver.php
modules/contrib/content_lock/src/Plugin/views/field/ContentLockBreak.php
modules/contrib/content_lock/src/Plugin/views/filter/ContentLockFilter.php
modules/contrib/content_lock/src/Plugin/views/sort/ContentLockSort.php
modules/contrib/content_lock/src/Routing/ContentLockRoutes.php
modules/contrib/content_lock/tests/modules/content_lock_test/content_lock_test.module
modules/contrib/content_lock/tests/modules/prefetch_cache_test/prefetch_cache_test.module
modules/contrib/content_lock/tests/src/Functional/ContentLockBlockTest.php
modules/contrib/content_lock/tests/src/Functional/ContentLockEntityTest.php
modules/contrib/content_lock/tests/src/Functional/ContentLockModesTest.php
modules/contrib/content_lock/tests/src/Functional/ContentLockNodeTest.php
modules/contrib/content_lock/tests/src/Functional/ContentLockTermTest.php
modules/contrib/content_lock/tests/src/Functional/ContentLockTestBase.php
modules/contrib/content_lock/tests/src/Functional/ContentLockTestTrait.php
modules/contrib/content_lock/tests/src/Functional/ContentLockTranslationTest.php
modules/contrib/content_lock/tests/src/FunctionalJavascript/ContentLockEntityTest.php
modules/contrib/content_lock/tests/src/FunctionalJavascript/ContentLockJavascriptTestBase.php
modules/contrib/content_lock/tests/src/FunctionalJavascript/Integration/PrefetchCacheTest.php

15 files with changes
=====================

1) modules/contrib/content_lock/tests/src/FunctionalJavascript/Integration/PrefetchCacheTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalPlaceBlock('local_tasks_block', ['primary' => TRUE]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/content_lock/tests/src/Functional/ContentLockTranslationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\content_lock\Functional;

+use Drupal\content_lock\ContentLock\ContentLock;
 /**
  * Content lock translation tests.
  *
@@ @@
     $this->drupalGet('admin/config/content/content_lock');
     $this->submitForm($edit, t('Save configuration'));

-    /** @var \Drupal\content_lock\ContentLock\ContentLock $lockService */
+    /** @var ContentLock $lockService */
     $lockService = \Drupal::service('content_lock');

     $assert_session = $this->assertSession();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/content_lock/tests/src/Functional/ContentLockTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\content_lock\Functional;

+use Drupal\user\UserInterface;
+use Drupal\entity_test\Entity\EntityTestMul;
 use Drupal\entity_test\Entity\EntityTestMulChanged;
 use Drupal\language\Entity\ConfigurableLanguage;

@@ @@
   /**
    * Admin user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $admin;

@@ @@
   /**
    * User without break lock permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user1;

@@ @@
   /**
    * User with break lock permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user2;

@@ @@
   /**
    * The entity to test.
    *
-   * @var \Drupal\entity_test\Entity\EntityTestMul
+   * @var EntityTestMul
    */
   protected $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/content_lock/tests/src/Functional/ContentLockBlockTest.php:37

    ---------- begin diff ----------
@@ @@
    * @param bool $save
    *   (optional) Whether to save the block. Defaults to TRUE.
    *
-   * @return \Drupal\block_content\Entity\BlockContent
+   * @return BlockContent
    *   Created custom block.
    */
   protected function createBlockContent($title = FALSE, $bundle = 'basic', $save = TRUE) {
@@ @@
    * @param bool $create_body
    *   Whether or not to create the body field.
    *
-   * @return \Drupal\block_content\Entity\BlockContentType
+   * @return BlockContentType
    *   Created custom block type.
    */
   protected function createBlockContentType($label, $create_body = FALSE) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/content_lock/src/Plugin/views/field/ContentLockBreak.php:20

    ---------- begin diff ----------
@@ @@
    *
    * @param string $data
    *   The XSS safe string for the link text.
-   * @param \Drupal\views\ResultRow $values
+   * @param ResultRow $values
    *   The values retrieved from a single row of a view's query result.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/content_lock/src/Plugin/Action/BreakLockDeriver.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new EntityActionDeriverBase object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string translation service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
@@ @@
    * For example, if the action applies to entities that are publishable,
    * this method will find all entity types that are publishable.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   The applicable entity types, keyed by entity type ID.
    */
   protected function getApplicableEntityTypes() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/content_lock/src/Plugin/Action/BreakLock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_lock\Plugin\Action;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\content_lock\ContentLock\ContentLock;
 use Drupal\Core\Action\ActionBase;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * Content lock service.
    *
-   * @var \Drupal\content_lock\ContentLock\ContentLock
+   * @var ContentLock
    */
   protected $lockService;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\content_lock\ContentLock\ContentLock $contentLock
+   * @param ContentLock $contentLock
    *   Content lock service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ContentLock $contentLock) {
@@ @@
    * {@inheritdoc}
    */
   public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
-    /** @var \Drupal\Core\Entity\EntityInterface $object */
+    /** @var EntityInterface $object */
     return $object->access('update', $account, $return_as_object);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/content_lock/src/Form/EntityBreakLockForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_lock\Form;

+use Symfony\Component\HttpFoundation\Request;
 use Drupal\content_lock\ContentLock\ContentLock;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * Content lock service.
    *
-   * @var \Drupal\content_lock\ContentLock\ContentLock
+   * @var ContentLock
    */
   protected $lockService;

@@ @@
   /**
    * Current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * Language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * EntityBreakLockForm constructor.
    *
-   * @param \Drupal\content_lock\ContentLock\ContentLock $contentLock
+   * @param ContentLock $contentLock
    *   Content lock service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   Request stack service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   Language manager service.
    */
   public function __construct(ContentLock $contentLock, RequestStack $requestStack, LanguageManagerInterface $language_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/content_lock/src/Form/ContentLockSettingsForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/content_lock/src/EventSubscriber/SettingsSaveEventSubscriber.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * SettingsSaveEventSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * On config save.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The save event.
    */
   public function onSave(ConfigCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/content_lock/src/Controller/ContentLockController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_lock\Controller;

+use Symfony\Component\HttpFoundation\JsonResponse;
 use Drupal\content_lock\Ajax\LockFormCommand;
 use Drupal\content_lock\ContentLock\ContentLock;
 use Drupal\Core\Ajax\AjaxResponse;
@@ @@
   /**
    * Content lock service.
    *
-   * @var \Drupal\content_lock\ContentLock\ContentLock
+   * @var ContentLock
    */
   protected $lockService;

@@ @@
   /**
    * EntityBreakLockForm constructor.
    *
-   * @param \Drupal\content_lock\ContentLock\ContentLock $lock_service
+   * @param ContentLock $lock_service
    *   Content lock service.
    */
   public function __construct(ContentLock $lock_service) {
@@ @@
   /**
    * Custom callback for the create lock route.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param Request $request
+   * @param ContentEntityInterface $entity
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *
    * @see \Drupal\content_lock\Routing\ContentLockRoutes::routes()
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/content_lock/src/ContentLock/ContentLock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\content_lock\ContentLock;

+use Drupal\Core\Config\Config;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    *   The database service.
    */
   protected $database;
@@ @@
   /**
    * The module_handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    *   The module_handler service.
    */
   protected $moduleHandler;
@@ @@
   /**
    * The date.formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    *   The date.formatter service.
    */
   protected $dateFormatter;
@@ @@
   /**
    * The current_user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    *   The current_user service.
    */
   protected $currentUser;
@@ @@
   /**
    * The config.factory service.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    *   The config settings.
    */
   protected $config;
@@ @@
   /**
    * The redirect.destination service.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    *   The current request.
    */
   protected $currentRequest;
@@ @@
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    *   The entity_type.manager service.
    */
   protected $entityTypeManager;
@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Extension\ModuleHandler $moduleHandler
+   * @param ModuleHandler $moduleHandler
    *   The module Handler service.
-   * @param \Drupal\Core\Datetime\DateFormatter $dateFormatter
+   * @param DateFormatter $dateFormatter
    *   The date.formatter service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   The current_user service.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The config.factory service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(Connection $database, ModuleHandler $moduleHandler, DateFormatter $dateFormatter, AccountProxyInterface $currentUser, ConfigFactory $configFactory, RequestStack $requestStack, EntityTypeManagerInterface $entityTypeManager, MessengerInterface $messenger, TimeInterface $time) {
@@ @@
     if (!$this->isFormOperationLockEnabled($entity_type)) {
       $form_op = '*';
     }
-    /** @var \Drupal\Core\Database\Query\SelectInterface $query */
+    /** @var SelectInterface $query */
     $query = $this->database->select('content_lock', 'c')
       ->fields('c')
       ->condition('entity_id', $entity_id)
@@ @@
   /**
    * Check whether a node is configured to be protected by content_lock.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to check.
    * @param string $form_op
    *   (optional) The entity form operation.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/content_lock/modules/content_lock_timeout/tests/src/Functional/ContentLockTimeoutTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\content_lock_timeout\Functional;

+use Drupal\user\UserInterface;
+use Drupal\user\Entity\User;
+use Drupal\node\NodeInterface;
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\block_content\BlockContentInterface;
+use Drupal\content_lock\ContentLock\ContentLock;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Component\FileCache\FileCacheFactory;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Serialization\Yaml;
@@ @@
   /**
    * User with permission to administer entities.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * Standard User.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user1;

@@ @@
   /**
    * Standard User.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user2;

@@ @@
   /**
    * A node created.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $article1;

@@ @@
   /**
    * A vocabulary created.
    *
-   * @var \Drupal\taxonomy\VocabularyInterface
+   * @var VocabularyInterface
    */
   protected $vocabulary;

@@ @@
   /**
    * A term created.
    *
-   * @var \Drupal\taxonomy\TermInterface
+   * @var TermInterface
    */
   protected $term1;

@@ @@
   /**
    * A Block created.
    *
-   * @var \Drupal\block_content\BlockContentInterface
+   * @var BlockContentInterface
    */
   protected $block1;

@@ @@
   /**
    * Lock service.
    *
-   * @var \Drupal\content_lock\ContentLock\ContentLock
+   * @var ContentLock
    */
   protected $lockService;

@@ @@
   /**
    * Setup and Rebuild node access.
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'article']);
@@ @@
   /**
    * Run the same tests for node, block and term.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to tests.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   protected function doTestForEntity(EntityInterface $entity) {
     // We lock article1.
@@ @@

     // Content should be locked.
     $this->drupalGet($entity->toUrl('edit-form')->toString());
-    $this->assertText(t('This content is being edited by the user @name and is therefore locked to prevent other users changes.', [
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('This content is being edited by the user @name and is therefore locked to prevent other users changes.', [
       '@name' => $this->user1->getDisplayName(),
     ]));

@@ @@
     // Content should be unlocked by cron.
     $this->assertNoLockOnContent($entity);
     $this->drupalGet($entity->toUrl('edit-form')->toString());
-    $this->assertText(t('This content is now locked against simultaneous editing.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('This content is now locked against simultaneous editing.'));

     $this->drupalLogout();

@@ @@

     // Content should be locked.
     $this->drupalGet($entity->toUrl('edit-form')->toString());
-    $this->assertText(t('This content is being edited by the user @name and is therefore locked to prevent other users changes.', [
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('This content is being edited by the user @name and is therefore locked to prevent other users changes.', [
       '@name' => $this->user1->getDisplayName(),
     ]));

@@ @@
     \Drupal::time()->setCurrentTime(time() + 60 * 60);
     // Lock should be release by form prepare.
     $this->drupalGet($entity->toUrl('edit-form')->toString());
-    $this->assertText(t('This content is now locked against simultaneous editing.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('This content is now locked against simultaneous editing.'));
   }

   /**
@@ @@
    * As logout is removing locks, it is only possible to set a lock from another
    * user with the lock service.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity which should be locked.
    */
   protected function lockContentByUser1(EntityInterface $entity) {
@@ @@
     $this->lockService->locking($entity->id(), $entity->language()->getId(), 'edit', $this->user1->id(), $entity->getEntityTypeId());
     $lock = $this->lockService->fetchLock($entity->id(), $entity->language()->getId(), 'edit', $entity->getEntityTypeId());
     $this->assertNotNull($lock, 'Lock present');
-    $this->assertEqual($this->user1->label(), $lock->name, 'Lock present for correct user.');
+    $this->assertEquals($this->user1->label(), $lock->name, 'Lock present for correct user.');
   }

   /**
    * Assert if no lock is present for content.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity which should not have a lock.
    */
   protected function assertNoLockOnContent(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/content_lock/modules/content_lock_timeout/content_lock_timeout.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\content_lock\ContentLock\ContentLock;
+use Drupal\Core\Session\AccountInterface;
 /**
  * @file
  * Allowed time-based automatic unlocking of nodes.
@@ @@
   $config = \Drupal::config('content_lock_timeout.settings');
   $timeout_minutes = $config->get('content_lock_timeout_minutes');
   $last_valid_time = Drupal::time()->getCurrentTime() - 60 * $timeout_minutes;
-  /** @var \Drupal\content_lock\ContentLock\ContentLock $lock_service */
+  /** @var ContentLock $lock_service */
   $lock_service = \Drupal::service('content_lock');

   // We call release() for each lock so that the
@@ @@
     $timeout_minutes = $config->get('content_lock_timeout_minutes');
     $last_valid_time = Drupal::time()->getCurrentTime() - 60 * $timeout_minutes;

-    /** @var \Drupal\content_lock\ContentLock\ContentLock $lock_service */
+    /** @var ContentLock $lock_service */
     $lock_service = \Drupal::service('content_lock');

     // This is a new, unsaved entity (which thus can't be locked).
@@ @@
  * Implements hook_user_logout().
  */
 function content_lock_timeout_user_logout($account) {
-  /** @var \Drupal\Core\Session\AccountInterface $account */
-
+  /** @var AccountInterface $account */
   // Only remove locks if there is a timeout given.
   $config = \Drupal::config('content_lock_timeout.settings');
   $timeout_minutes = $config->get('content_lock_timeout_minutes');
@@ @@
   }
   // Only remove all locks of user if its the last session of the user.
   if ($session_count === 1) {
-    /** @var \Drupal\content_lock\ContentLock\ContentLock $lock_service */
+    /** @var ContentLock $lock_service */
     $lock_service = \Drupal::service('content_lock');
     $lock_service->releaseAllUserLocks($account->id());
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


15) modules/contrib/content_lock/content_lock.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\core\Entity\ContentEntityInterface;
+use Drupal\content_lock\ContentLock\ContentLock;
 /**
  * @file
  * Content lock - Main functions of the module.
@@ @@
   if (!$form_state->getFormObject() instanceof EntityFormInterface) {
     return;
   }
-  /** @var \Drupal\core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   $entity = $form_state->getFormObject()->getEntity();
   $entity_type = $entity->getEntityTypeId();
   $user = Drupal::currentUser();

   // Check if we must lock this entity.
-  /** @var \Drupal\content_lock\ContentLock\ContentLock $lock_service */
+  /** @var ContentLock $lock_service */
   $lock_service = \Drupal::service('content_lock');
   $form_op = $form_state->getFormObject()->getOperation();
   if (!$lock_service->isLockable($entity, $form_op)) {
@@ @@
   // Signals editing is finished; remove the lock.
   $user = \Drupal::currentUser();

-  /** @var \Drupal\content_lock\ContentLock\ContentLock $lock_service */
+  /** @var ContentLock $lock_service */
   $lock_service = \Drupal::service('content_lock');
-  /** @var \Drupal\core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   $entity = $form_state->getFormObject()->getEntity();

   // If the user submitting owns the lock, release it.
@@ @@
   $entity_id = $entity->id();
   $entity_type = $entity->getEntityTypeId();

-  /** @var \Drupal\content_lock\ContentLock\ContentLock $lock_service */
+  /** @var ContentLock $lock_service */
   $lock_service = \Drupal::service('content_lock');
   if (!$lock_service->isLockable($entity)) {
     return;
@@ @@
 function content_lock_entity_operation(EntityInterface $entity) {
   $operations = [];

-  /** @var \Drupal\content_lock\ContentLock\ContentLock $lock_service */
+  /** @var ContentLock $lock_service */
   $lock_service = \Drupal::service('content_lock');
   if ($lock_service->isLockable($entity)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 15 files have been changed by Rector                                      

