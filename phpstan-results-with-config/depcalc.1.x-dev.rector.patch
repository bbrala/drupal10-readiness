diff --git a/modules/depcalc_ui/depcalc_ui.module b/modules/depcalc_ui/depcalc_ui.module
index b703b6b..2dbd341 100644
--- a/modules/depcalc_ui/depcalc_ui.module
+++ b/modules/depcalc_ui/depcalc_ui.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\depcalc\Cache\DepcalcCacheBackend;
 use Drupal\Core\Form\FormStateInterface;
 
 /**
@@ -19,7 +20,7 @@ function depcalc_ui_form_system_performance_settings_alter(&$form, FormStateInte
  * Clears the depcalc cache.
  */
 function submitDepcalcCacheClear(array &$form, FormStateInterface $form_state) {
-  /** @var \Drupal\depcalc\Cache\DepcalcCacheBackend $depcalc_cache */
+  /** @var DepcalcCacheBackend $depcalc_cache */
   $depcalc_cache = \Drupal::service('cache.depcalc');
   $depcalc_cache->deleteAllPermanent();
   \Drupal::messenger()->addStatus(t('Cleared all depcalc cache.'));
diff --git a/src/Cache/DepcalcCacheBackend.php b/src/Cache/DepcalcCacheBackend.php
index cce8e1b..9c665ab 100644
--- a/src/Cache/DepcalcCacheBackend.php
+++ b/src/Cache/DepcalcCacheBackend.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\depcalc\Cache;
 
+use Drupal\Core\Database\Connection;
+use Drupal\depcalc\DependentEntityWrapperInterface;
 use Drupal\Component\Uuid\Uuid;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -26,21 +28,21 @@ class DepcalcCacheBackend implements CacheBackendInterface, CacheTagsInvalidator
   /**
    * The cache backend to decorate.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $backend;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
@@ -54,10 +56,10 @@ class DepcalcCacheBackend implements CacheBackendInterface, CacheTagsInvalidator
   /**
    * DepcalcCacheBackend constructor.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $backend
+   * @param CacheBackendInterface $backend
    *   The CacheBackendInterface object to decorate.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
    *
    * @throws \ReflectionException
@@ -76,7 +78,7 @@ class DepcalcCacheBackend implements CacheBackendInterface, CacheTagsInvalidator
    * We don't want to get our own database connection or cache bin, so we just
    * reflect it out of the object we're decorating.
    *
-   * @param \Drupal\Core\Cache\DatabaseBackend $backend
+   * @param DatabaseBackend $backend
    *   The database backend object from which to extract necessary properties.
    *
    * @throws \ReflectionException
@@ -106,7 +108,7 @@ class DepcalcCacheBackend implements CacheBackendInterface, CacheTagsInvalidator
     if (!$cache_objects) {
       return;
     }
-    /** @var \Drupal\depcalc\DependentEntityWrapperInterface[] $wrappers */
+    /** @var DependentEntityWrapperInterface[] $wrappers */
     $wrappers = array_map(function($cache) {return $cache->data;}, $cache_objects);
     $event = new InvalidateDependenciesEvent($wrappers);
     $this->dispatcher->dispatch($event, DependencyCalculatorEvents::INVALIDATE_DEPENDENCIES);
diff --git a/src/Cache/DepcalcCacheFactory.php b/src/Cache/DepcalcCacheFactory.php
index a8f0ca7..b495ed2 100644
--- a/src/Cache/DepcalcCacheFactory.php
+++ b/src/Cache/DepcalcCacheFactory.php
@@ -10,21 +10,21 @@ class DepcalcCacheFactory implements CacheFactoryInterface{
   /**
    * The core cache factory.
    *
-   * @var \Drupal\Core\Cache\CacheFactoryInterface
+   * @var CacheFactoryInterface
    */
   protected $factory;
 
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * DepcalcCacheFactory constructor.
    *
-   * @param \Drupal\Core\Cache\CacheFactoryInterface $factory
+   * @param CacheFactoryInterface $factory
    *   The core cache factory.
    */
   public function __construct(CacheFactoryInterface $factory, EventDispatcherInterface $dispatcher) {
diff --git a/src/Commands/DepcalcCommands.php b/src/Commands/DepcalcCommands.php
index f2c5484..a970a7d 100644
--- a/src/Commands/DepcalcCommands.php
+++ b/src/Commands/DepcalcCommands.php
@@ -16,23 +16,23 @@ class DepcalcCommands extends DrushCommands {
   /**
    * Logger Service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The Depcalc Cache backend.
    *
-   * @var \Drupal\depcalc\Cache\DepcalcCacheBackend
+   * @var DepcalcCacheBackend
    */
   protected $cache;
 
   /**
    * Public Constructor.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The Depcalc logger channel.
-   * @param \Drupal\depcalc\Cache\DepcalcCacheBackend $depcalc_cache
+   * @param DepcalcCacheBackend $depcalc_cache
    *   The Depcalc Cache Backend.
    */
   public function __construct(LoggerChannelInterface $logger, DepcalcCacheBackend $depcalc_cache) {
diff --git a/src/DependencyCalculator.php b/src/DependencyCalculator.php
index b3638aa..b752d2d 100644
--- a/src/DependencyCalculator.php
+++ b/src/DependencyCalculator.php
@@ -19,23 +19,23 @@ class DependencyCalculator {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * The depcalc logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;
 
   /**
    * The DependencyCalculator constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The depcalc logger channel.
    */
   public function __construct(EventDispatcherInterface $dispatcher, LoggerChannelInterface $logger) {
@@ -46,9 +46,9 @@ class DependencyCalculator {
   /**
    * Calculates the dependencies.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface $wrapper
+   * @param DependentEntityWrapperInterface $wrapper
    *   The dependency wrapper for the entity to calculate dependencies.
-   * @param \Drupal\depcalc\DependencyStack $stack
+   * @param DependencyStack $stack
    *   An array of pre-calculated dependencies to prevent recalculation.
    * @param array $dependencies
    *   (optional) An array of dependencies by reference. Internally used.
diff --git a/src/DependencyStack.php b/src/DependencyStack.php
index d4f40bf..431d4b6 100644
--- a/src/DependencyStack.php
+++ b/src/DependencyStack.php
@@ -12,7 +12,7 @@ class DependencyStack {
   /**
    * The dependencies list.
    *
-   * @var \Drupal\depcalc\DependentEntityWrapperInterface[]
+   * @var DependentEntityWrapperInterface[]
    */
   protected $dependencies = [];
 
@@ -33,7 +33,7 @@ class DependencyStack {
   /**
    * DependencyStack constructor.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface ...$dependencies
+   * @param DependentEntityWrapperInterface ...$dependencies
    *   Any previously built dependency to prevent recalculation.
    */
   public function __construct(DependentEntityWrapperInterface ...$dependencies) {
@@ -54,7 +54,7 @@ class DependencyStack {
   /**
    * Add a dependency to the stack.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface $dependency
+   * @param DependentEntityWrapperInterface $dependency
    *   The dependency to add to the stack.
    * @param bool $cache
    *   TRUE if to add to cache (Default), FALSE otherwise.
@@ -80,7 +80,7 @@ class DependencyStack {
    * @param string $uuid
    *   The uuid of the dependency to retrieve.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface|null
+   * @return DependentEntityWrapperInterface|null
    *   The dependent entity wrapper.
    */
   public function getDependency($uuid) {
@@ -138,7 +138,7 @@ class DependencyStack {
    * @param string[] $dependencies
    *   The list of dependencies, by uuid, to retrieve.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface[]
+   * @return DependentEntityWrapperInterface[]
    *   The dependencies.
    *
    * @throws \Exception
@@ -160,7 +160,7 @@ class DependencyStack {
   /**
    * * Get a list of dependencies within the stack.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface[]
+   * @return DependentEntityWrapperInterface[]
    *   The dependencies.
    */
   public function getDependencies() {
@@ -173,7 +173,7 @@ class DependencyStack {
    * This will exclude dependencies that have been created but which still
    * require additional processing.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface[]
+   * @return DependentEntityWrapperInterface[]
    *   The processed dependencies.
    */
   public function getProcessedDependencies() {
diff --git a/src/DependentEntityWrapper.php b/src/DependentEntityWrapper.php
index 64cccf0..83d8a22 100644
--- a/src/DependentEntityWrapper.php
+++ b/src/DependentEntityWrapper.php
@@ -81,7 +81,7 @@ class DependentEntityWrapper implements DependentEntityWrapperInterface {
    * minimum of details to reconstruct it are kept. This is to reduce memory
    * overhead during the run time of dependency calculation.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which we are calculating dependencies.
    * @param bool $additional_processing
    *   Whether or not the entity will require additional processing.
diff --git a/src/DependentEntityWrapperInterface.php b/src/DependentEntityWrapperInterface.php
index cc8bcbc..697ab3f 100644
--- a/src/DependentEntityWrapperInterface.php
+++ b/src/DependentEntityWrapperInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\depcalc;
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * Interface DependentEntityWrapperInterface.
  */
@@ -10,7 +11,7 @@ interface DependentEntityWrapperInterface {
   /**
    * Get the entity for which we are collecting dependencies.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    */
   public function getEntity();
 
@@ -70,7 +71,7 @@ interface DependentEntityWrapperInterface {
    *
    * @param \Drupal\depcalc\DependentEntityWrapperInterface $dependency
    *   The dependency to add.
-   * @param \Drupal\depcalc\DependencyStack $stack
+   * @param DependencyStack $stack
    *   The dependency stack.
    * @param bool $direct_child
    *   Whether given wrapper is a direct child.
@@ -80,7 +81,7 @@ interface DependentEntityWrapperInterface {
   /**
    * Add dependencies of this entity.
    *
-   * @param \Drupal\depcalc\DependencyStack $stack
+   * @param DependencyStack $stack
    *   The dependency stack.
    * @param \Drupal\depcalc\DependentEntityWrapperInterface ...$dependencies
    *   Entities wrappers to add as a dependency.
diff --git a/src/Event/CalculateEntityDependenciesEvent.php b/src/Event/CalculateEntityDependenciesEvent.php
index d30e41f..c79abb6 100644
--- a/src/Event/CalculateEntityDependenciesEvent.php
+++ b/src/Event/CalculateEntityDependenciesEvent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\depcalc\Event;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapperInterface;
 use Symfony\Contracts\EventDispatcher\Event;
@@ -14,23 +15,23 @@ class CalculateEntityDependenciesEvent extends Event {
   /**
    * The wrapper of the entity for which we are calculating dependencies.
    *
-   * @var \Drupal\depcalc\DependentEntityWrapperInterface
+   * @var DependentEntityWrapperInterface
    */
   protected $wrapper;
 
   /**
    * The dependency stack.
    *
-   * @var \Drupal\depcalc\DependencyStack
+   * @var DependencyStack
    */
   protected $stack;
 
   /**
    * CalculateEntityDependenciesEvent constructor.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface $wrapper
+   * @param DependentEntityWrapperInterface $wrapper
    *   The entity for which we are calculating dependencies.
-   * @param \Drupal\depcalc\DependencyStack $stack
+   * @param DependencyStack $stack
    *   The dependency stack.
    */
   public function __construct(DependentEntityWrapperInterface $wrapper, DependencyStack $stack) {
@@ -41,7 +42,7 @@ class CalculateEntityDependenciesEvent extends Event {
   /**
    * Get the dependency wrapper of the entity.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface
+   * @return DependentEntityWrapperInterface
    *   The wrapper.
    */
   public function getWrapper() {
@@ -51,7 +52,7 @@ class CalculateEntityDependenciesEvent extends Event {
   /**
    * Get the entity for which dependencies are being calculated.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   public function getEntity() {
@@ -61,7 +62,7 @@ class CalculateEntityDependenciesEvent extends Event {
   /**
    * Get the dependency stack.
    *
-   * @return \Drupal\depcalc\DependencyStack
+   * @return DependencyStack
    *   The dependency stack.
    */
   public function getStack() {
@@ -71,7 +72,7 @@ class CalculateEntityDependenciesEvent extends Event {
   /**
    * Add a dependency to this wrapper.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface $dependency
+   * @param DependentEntityWrapperInterface $dependency
    *   The dependency to be added.
    */
   public function addDependency(DependentEntityWrapperInterface $dependency) {
@@ -84,7 +85,7 @@ class CalculateEntityDependenciesEvent extends Event {
   /**
    * Add a group of dependencies to this wrapper.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface ...$dependencies
+   * @param DependentEntityWrapperInterface ...$dependencies
    *   The dependencies to add to this wrapper.
    */
   public function setDependencies(DependentEntityWrapperInterface ...$dependencies) {
@@ -96,7 +97,7 @@ class CalculateEntityDependenciesEvent extends Event {
   /**
    * A list of all uuids this entity is dependent on.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface[]
+   * @return DependentEntityWrapperInterface[]
    *   The dependencies.
    */
   public function getDependencies() {
diff --git a/src/Event/FilterDependencyCalculationFieldsEvent.php b/src/Event/FilterDependencyCalculationFieldsEvent.php
index 8f6b3e9..8ac0f9a 100644
--- a/src/Event/FilterDependencyCalculationFieldsEvent.php
+++ b/src/Event/FilterDependencyCalculationFieldsEvent.php
@@ -14,23 +14,23 @@ class FilterDependencyCalculationFieldsEvent extends Event {
   /**
    * The entity to calculate dependencies.
    *
-   * @var \Drupal\Core\Entity\ContentEntityInterface
+   * @var ContentEntityInterface
    */
   protected $entity;
 
   /**
    * The entity fields.
    *
-   * @var \Drupal\Core\Field\FieldItemListInterface[]
+   * @var FieldItemListInterface[]
    */
   protected $fields;
 
   /**
    * FilterDependencyCalculationFieldsEvent constructor.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
-   * @param \Drupal\Core\Field\FieldItemListInterface ...$fields
+   * @param FieldItemListInterface ...$fields
    *   The fields.
    */
   public function __construct(ContentEntityInterface $entity, FieldItemListInterface ...$fields) {
@@ -41,7 +41,7 @@ class FilterDependencyCalculationFieldsEvent extends Event {
   /**
    * Retrieve the entity object
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The entity.
    */
   public function getEntity() {
@@ -51,7 +51,7 @@ class FilterDependencyCalculationFieldsEvent extends Event {
   /**
    * Get the fields to be filtered.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface[]
+   * @return FieldItemListInterface[]
    *   The fields.
    */
   public function getFields() {
@@ -61,7 +61,7 @@ class FilterDependencyCalculationFieldsEvent extends Event {
   /**
    * Set a filtered list of fields.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface ...$fields
+   * @param FieldItemListInterface ...$fields
    *   The fields.
    */
   public function setFields(FieldItemListInterface ...$fields) {
diff --git a/src/Event/FilterDependencyConfigEntityEvent.php b/src/Event/FilterDependencyConfigEntityEvent.php
index 85f9c03..7c6edeb 100644
--- a/src/Event/FilterDependencyConfigEntityEvent.php
+++ b/src/Event/FilterDependencyConfigEntityEvent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\depcalc\Event;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\depcalc\DependentEntityWrapper;
 use Symfony\Contracts\EventDispatcher\Event;
 
@@ -20,14 +21,14 @@ class FilterDependencyConfigEntityEvent extends Event {
   /**
    * The dependent entity wrapper.
    *
-   * @var \Drupal\depcalc\DependentEntityWrapper
+   * @var DependentEntityWrapper
    */
   protected $wrapper;
 
   /**
    * FilterDependencyConfigEntityEvent constructor.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapper $wrapper
+   * @param DependentEntityWrapper $wrapper
    *   The entity wrapper for calculation.
    */
   public function __construct(DependentEntityWrapper $wrapper) {
@@ -37,7 +38,7 @@ class FilterDependencyConfigEntityEvent extends Event {
   /**
    * Get the wrapper of the entity we are considering calculating.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapper
+   * @return DependentEntityWrapper
    *   The entity wrapper for calculation.
    */
   public function getWrapper() {
@@ -47,7 +48,7 @@ class FilterDependencyConfigEntityEvent extends Event {
   /**
    * Get the entity we are considering calculating.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity for calculation.
    */
   public function getEntity() {
diff --git a/src/Event/InvalidateDependenciesEvent.php b/src/Event/InvalidateDependenciesEvent.php
index 18ba720..536bd02 100644
--- a/src/Event/InvalidateDependenciesEvent.php
+++ b/src/Event/InvalidateDependenciesEvent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\depcalc\Event;
 
+use Drupal\depcalc\DependentEntityWrapperInterface;
 use Symfony\Contracts\EventDispatcher\Event;
 
 class InvalidateDependenciesEvent extends Event {
@@ -9,21 +10,21 @@ class InvalidateDependenciesEvent extends Event {
   /**
    * The list of DependentEntityWrappers being invalidated.
    *
-   * @var \Drupal\depcalc\DependentEntityWrapperInterface[]
+   * @var DependentEntityWrapperInterface[]
    */
   protected $wrappers;
 
   /**
    * InvalidateDependenciesEvent constructor.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface[] $wrappers
+   * @param DependentEntityWrapperInterface[] $wrappers
    */
   public function __construct(array $wrappers) {
     $this->wrappers = $wrappers;
   }
 
   /**
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface[]
+   * @return DependentEntityWrapperInterface[]
    */
   public function getWrappers(): array {
     return $this->wrappers;
diff --git a/src/Event/SectionComponentDependenciesEvent.php b/src/Event/SectionComponentDependenciesEvent.php
index bbb06b6..38719f4 100644
--- a/src/Event/SectionComponentDependenciesEvent.php
+++ b/src/Event/SectionComponentDependenciesEvent.php
@@ -14,14 +14,14 @@ class SectionComponentDependenciesEvent extends Event {
   /**
    * The component for this event.
    *
-   * @var \Drupal\layout_builder\SectionComponent
+   * @var SectionComponent
    */
   protected $component;
 
   /**
    * The entity dependencies for this event.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]
+   * @var EntityInterface[]
    */
   protected $entityDependencies;
 
@@ -35,7 +35,7 @@ class SectionComponentDependenciesEvent extends Event {
   /**
    * SectionComponentDependenciesEvent constructor.
    *
-   * @param \Drupal\layout_builder\SectionComponent $component
+   * @param SectionComponent $component
    *   The section component.
    */
   public function __construct(SectionComponent $component) {
@@ -45,7 +45,7 @@ class SectionComponentDependenciesEvent extends Event {
   /**
    * Get the event component.
    *
-   * @return \Drupal\layout_builder\SectionComponent
+   * @return SectionComponent
    *   The section component.
    */
   public function getComponent() {
@@ -55,7 +55,7 @@ class SectionComponentDependenciesEvent extends Event {
   /**
    * Get the entity dependencies for this event.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entity dependencies.
    */
   public function getEntityDependencies() {
@@ -75,7 +75,7 @@ class SectionComponentDependenciesEvent extends Event {
   /**
    * Adds an entity as dependency.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function addEntityDependency(EntityInterface $entity) {
diff --git a/src/EventSubscriber/DependencyCollector/BaseDependencyCollector.php b/src/EventSubscriber/DependencyCollector/BaseDependencyCollector.php
index a820b34..c8991cc 100644
--- a/src/EventSubscriber/DependencyCollector/BaseDependencyCollector.php
+++ b/src/EventSubscriber/DependencyCollector/BaseDependencyCollector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;
 
+use Drupal\depcalc\DependencyCalculator;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapperInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
@@ -14,9 +15,9 @@ abstract class BaseDependencyCollector implements EventSubscriberInterface {
   /**
    * Properly adds dependencies and their modules to a wrapper object.
    *
-   * @param \Drupal\depcalc\DependentEntityWrapperInterface $wrapper
+   * @param DependentEntityWrapperInterface $wrapper
    *   The object to add dependencies to.
-   * @param \Drupal\depcalc\DependencyStack $stack
+   * @param DependencyStack $stack
    *   The stack with all loaded dependencies.
    * @param array $dependencies
    *   The list of dependencies to add to the wrapper.
@@ -33,7 +34,7 @@ abstract class BaseDependencyCollector implements EventSubscriberInterface {
   /**
    * Gets the dependency calculator.
    *
-   * @return \Drupal\depcalc\DependencyCalculator
+   * @return DependencyCalculator
    *   The dependency calculator.
    */
   protected function getCalculator() {
diff --git a/src/EventSubscriber/DependencyCollector/ConfigEntityDependencyCollector.php b/src/EventSubscriber/DependencyCollector/ConfigEntityDependencyCollector.php
index 1adbd9c..ba3c343 100644
--- a/src/EventSubscriber/DependencyCollector/ConfigEntityDependencyCollector.php
+++ b/src/EventSubscriber/DependencyCollector/ConfigEntityDependencyCollector.php
@@ -18,14 +18,14 @@ class ConfigEntityDependencyCollector extends BaseDependencyCollector {
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;
 
   /**
    * ConfigEntityDependencyCollector constructor.
    *
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The configuration manager.
    */
   public function __construct(ConfigManagerInterface $config_manager) {
@@ -43,11 +43,11 @@ class ConfigEntityDependencyCollector extends BaseDependencyCollector {
   /**
    * Calculates config entity dependencies.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    * @param string $event_name
    *   The name of the event.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
    *
    * @throws \Exception
@@ -75,7 +75,7 @@ class ConfigEntityDependencyCollector extends BaseDependencyCollector {
           if ($sub_entity) {
             $sub_wrapper = new DependentEntityWrapper($sub_entity);
             $config_dependency_event = new FilterDependencyConfigEntityEvent($sub_wrapper);
-            $dispatcher->dispatch(DependencyCalculatorEvents::FILTER_CONFIG_ENTITIES, $config_dependency_event);
+            $dispatcher->dispatch($config_dependency_event, DependencyCalculatorEvents::FILTER_CONFIG_ENTITIES);
             if (!$config_dependency_event->isCalculable()) {
               continue;
             }
diff --git a/src/EventSubscriber/DependencyCollector/DrupalMediaEmbedCollector.php b/src/EventSubscriber/DependencyCollector/DrupalMediaEmbedCollector.php
index bcfaf78..ae6141e 100644
--- a/src/EventSubscriber/DependencyCollector/DrupalMediaEmbedCollector.php
+++ b/src/EventSubscriber/DependencyCollector/DrupalMediaEmbedCollector.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\filter\Entity\FilterFormat;
+use Drupal\filter\Plugin\FilterInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -27,11 +31,11 @@ class DrupalMediaEmbedCollector extends BaseDependencyCollector {
   /**
    * Calculates media entities embedded into the text areas of other entities.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The CalculateEntityDependenciesEvent event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
 
@@ -54,11 +58,11 @@ class DrupalMediaEmbedCollector extends BaseDependencyCollector {
         if (empty($value['format'])) {
           continue;
         }
-        /** @var \Drupal\filter\Entity\FilterFormat $filter_format */
+        /** @var FilterFormat $filter_format */
         $filter_format = \Drupal::entityTypeManager()->getStorage('filter_format')->load($value['format']);
         $filters = $filter_format->filters();
         $filters->sort();
-        /** @var \Drupal\filter\Plugin\FilterInterface $filter */
+        /** @var FilterInterface $filter */
         foreach ($filters as $filter) {
           // If this text area can have entities embedded, we want to
           // manually extract the entities contained therein.
diff --git a/src/EventSubscriber/DependencyCollector/EmbeddedImagesCollector.php b/src/EventSubscriber/DependencyCollector/EmbeddedImagesCollector.php
index aa84c6f..6dd5a03 100644
--- a/src/EventSubscriber/DependencyCollector/EmbeddedImagesCollector.php
+++ b/src/EventSubscriber/DependencyCollector/EmbeddedImagesCollector.php
@@ -22,23 +22,23 @@ class EmbeddedImagesCollector extends BaseDependencyCollector {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * EmbeddedImagesCollector constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database connection.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler.
    */
   public function __construct(Connection $database, ModuleHandlerInterface $module_handler) {
@@ -57,7 +57,7 @@ class EmbeddedImagesCollector extends BaseDependencyCollector {
   /**
    * Reacts on CALCULATE_DEPENDENCIES event.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   Event.
    *
    * @throws \Exception
@@ -81,12 +81,12 @@ class EmbeddedImagesCollector extends BaseDependencyCollector {
   /**
    * Builds list of attached files.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    * @param string $module
    *   Module name.
    *
-   * @return \Drupal\file\Entity\File[]
+   * @return File[]
    *   Files list.
    */
   protected function getAttachedFiles(EntityInterface $entity, string $module = 'file'): array {
@@ -114,9 +114,9 @@ class EmbeddedImagesCollector extends BaseDependencyCollector {
   /**
    * Add dependency.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   Event.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @throws \Exception
diff --git a/src/EventSubscriber/DependencyCollector/EntityEmbedCollector.php b/src/EventSubscriber/DependencyCollector/EntityEmbedCollector.php
index a336408..853bb03 100644
--- a/src/EventSubscriber/DependencyCollector/EntityEmbedCollector.php
+++ b/src/EventSubscriber/DependencyCollector/EntityEmbedCollector.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\filter\Entity\FilterFormat;
+use Drupal\filter\Plugin\FilterInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -28,11 +32,11 @@ class EntityEmbedCollector extends BaseDependencyCollector {
   /**
    * Calculates entities embedded into the text areas of other entities.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The CalculateEntityDependenciesEvent event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     if (!\Drupal::moduleHandler()->moduleExists('entity_embed')) {
@@ -44,13 +48,13 @@ class EntityEmbedCollector extends BaseDependencyCollector {
   /**
    * Extracts embedded entities from the text fields of another entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity from which to extract embedded entities.
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The CalculateEntityDependenciesEvent event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function extractEmbeddedEntities(EntityInterface $entity, CalculateEntityDependenciesEvent $event) {
     if (!$entity instanceof ContentEntityInterface) {
@@ -70,11 +74,11 @@ class EntityEmbedCollector extends BaseDependencyCollector {
         if (empty($value['format'])) {
           continue;
         }
-        /** @var \Drupal\filter\Entity\FilterFormat $filter_format */
+        /** @var FilterFormat $filter_format */
         $filter_format = \Drupal::entityTypeManager()->getStorage('filter_format')->load($value['format']);
         $filters = $filter_format->filters();
         $filters->sort();
-        /** @var \Drupal\filter\Plugin\FilterInterface $filter */
+        /** @var FilterInterface $filter */
         foreach ($filters as $filter) {
           // If this text area can have entities embedded, we want to
           // manually extract the entities contained therein.
diff --git a/src/EventSubscriber/DependencyCollector/EntityFormDisplayDependencyCollector.php b/src/EventSubscriber/DependencyCollector/EntityFormDisplayDependencyCollector.php
index 9188c00..d1a1b93 100644
--- a/src/EventSubscriber/DependencyCollector/EntityFormDisplayDependencyCollector.php
+++ b/src/EventSubscriber/DependencyCollector/EntityFormDisplayDependencyCollector.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
@@ -16,14 +18,14 @@ class EntityFormDisplayDependencyCollector extends BaseDependencyCollector {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * EntityFormDisplayDependencyCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -41,11 +43,11 @@ class EntityFormDisplayDependencyCollector extends BaseDependencyCollector {
   /**
    * Calculates the associated entity form display.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     if ($event->getEntity() instanceof ContentEntityInterface) {
@@ -71,20 +73,20 @@ class EntityFormDisplayDependencyCollector extends BaseDependencyCollector {
   }
 
   /**
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
-   *
-   * @todo Determine if commented code is desirable functionality or not.
-   *
-   * The entity_view_displays often don't exist for simple entity types like
-   * taxonomy terms until someone has interacted with the "manage display" tab.
-   * This indicates that the fields or the display of fields may have been
-   * altered in some relevant way, but since terms don't have any attached
-   * fields by default, they also don't get a corresponding entity_view_display
-   * object until that changes or there has been some sort of interaction that
-   * caused it to come into existence. This may actually be desirable for us
-   * to not create and export the entity, but the inverse may actually prove to
-   * be true as well, so the code has been left for later evaluation.
-   */
+ * @param CalculateEntityDependenciesEvent $event
+ *
+ * @todo Determine if commented code is desirable functionality or not.
+ *
+ * The entity_view_displays often don't exist for simple entity types like
+ * taxonomy terms until someone has interacted with the "manage display" tab.
+ * This indicates that the fields or the display of fields may have been
+ * altered in some relevant way, but since terms don't have any attached
+ * fields by default, they also don't get a corresponding entity_view_display
+ * object until that changes or there has been some sort of interaction that
+ * caused it to come into existence. This may actually be desirable for us
+ * to not create and export the entity, but the inverse may actually prove to
+ * be true as well, so the code has been left for later evaluation.
+ */
 //  public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
 //    $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
 //    $entity = $event->getEntity();
@@ -118,4 +120,5 @@ class EntityFormDisplayDependencyCollector extends BaseDependencyCollector {
 //    }
 //  }
 
+
 }
diff --git a/src/EventSubscriber/DependencyCollector/EntityLanguage.php b/src/EventSubscriber/DependencyCollector/EntityLanguage.php
index c18ea24..d32ca92 100644
--- a/src/EventSubscriber/DependencyCollector/EntityLanguage.php
+++ b/src/EventSubscriber/DependencyCollector/EntityLanguage.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\TranslatableInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -20,14 +22,14 @@ class EntityLanguage extends BaseDependencyCollector {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * EntityLanguage constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ModuleHandlerInterface $module_handler) {
@@ -45,11 +47,11 @@ class EntityLanguage extends BaseDependencyCollector {
   /**
    * Calculates the language of content entities.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     if (!$this->moduleHandler->moduleExists('language')) {
@@ -60,7 +62,7 @@ class EntityLanguage extends BaseDependencyCollector {
     if ($entity instanceof ContentEntityInterface && $entity instanceof TranslatableInterface) {
       $fields = FieldExtractor::getFieldsFromEntity($entity, function (ContentEntityInterface $entity, $field_name, FieldItemListInterface $field) { return $field->getFieldDefinition()->getType() == 'language'; });
       foreach ($fields as $field) {
-        /** @var \Drupal\language\Entity\ContentLanguageSettings $settings */
+        /** @var ContentLanguageSettings $settings */
         $settings = \Drupal::entityTypeManager()->getStorage('language_content_settings')->load("{$entity->getEntityTypeId()}.{$entity->bundle()}");
         if (!$this->isContentTranslationEnabled($settings)) {
           return;
@@ -85,7 +87,7 @@ class EntityLanguage extends BaseDependencyCollector {
   /**
    * Check when content translation is enabled.
    *
-   * @param \Drupal\language\Entity\ContentLanguageSettings|null $settings
+   * @param ContentLanguageSettings|null $settings
    *   The content translation setting.
    *
    * @return bool
diff --git a/src/EventSubscriber/DependencyCollector/EntityPathAliasCollector.php b/src/EventSubscriber/DependencyCollector/EntityPathAliasCollector.php
index 6ece842..87e6b33 100644
--- a/src/EventSubscriber/DependencyCollector/EntityPathAliasCollector.php
+++ b/src/EventSubscriber/DependencyCollector/EntityPathAliasCollector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;
 
+use Drupal\path_alias\PathAliasStorage;
 use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
 use Drupal\depcalc\DependencyCalculatorEvents;
@@ -21,7 +22,7 @@ class EntityPathAliasCollector extends BaseDependencyCollector {
       $entity = $event->getEntity();
       try {
         $uri = "/{$entity->toUrl()->getInternalPath()}";
-        /** @var \Drupal\path_alias\PathAliasStorage $storage */
+        /** @var PathAliasStorage $storage */
         $storage = \Drupal::entityTypeManager()->getStorage('path_alias');
         $paths = $storage->loadByProperties(['path' => $uri]);
         if ($paths) {
diff --git a/src/EventSubscriber/DependencyCollector/EntityReferenceFieldDependencyCollector.php b/src/EventSubscriber/DependencyCollector/EntityReferenceFieldDependencyCollector.php
index 2302ffc..150855e 100644
--- a/src/EventSubscriber/DependencyCollector/EntityReferenceFieldDependencyCollector.php
+++ b/src/EventSubscriber/DependencyCollector/EntityReferenceFieldDependencyCollector.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
@@ -25,11 +27,11 @@ class EntityReferenceFieldDependencyCollector extends BaseDependencyCollector {
   /**
    * Calculates the referenced entities.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     $entity = $event->getEntity();
@@ -56,11 +58,11 @@ class EntityReferenceFieldDependencyCollector extends BaseDependencyCollector {
   /**
    * Determines if the field is of one of the specified types.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field.
    *
    * @return bool
diff --git a/src/EventSubscriber/DependencyCollector/EntityViewDisplayDependencyCollector.php b/src/EventSubscriber/DependencyCollector/EntityViewDisplayDependencyCollector.php
index d5540f8..27ee667 100644
--- a/src/EventSubscriber/DependencyCollector/EntityViewDisplayDependencyCollector.php
+++ b/src/EventSubscriber/DependencyCollector/EntityViewDisplayDependencyCollector.php
@@ -16,14 +16,14 @@ class EntityViewDisplayDependencyCollector extends BaseDependencyCollector {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * EntityViewDisplayDependencyCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -41,7 +41,7 @@ class EntityViewDisplayDependencyCollector extends BaseDependencyCollector {
   /**
    * Calculates the associated entity view display.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
diff --git a/src/EventSubscriber/DependencyCollector/LayoutBuilderEntityViewDisplayDependencyCollector.php b/src/EventSubscriber/DependencyCollector/LayoutBuilderEntityViewDisplayDependencyCollector.php
index aeb57ac..2b450d9 100644
--- a/src/EventSubscriber/DependencyCollector/LayoutBuilderEntityViewDisplayDependencyCollector.php
+++ b/src/EventSubscriber/DependencyCollector/LayoutBuilderEntityViewDisplayDependencyCollector.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\depcalc\DependencyCalculatorEvents;
 use Drupal\depcalc\Event\CalculateEntityDependenciesEvent;
 use Drupal\depcalc\EventSubscriber\LayoutBuilderComponentDepencyCollector\LayoutBuilderDependencyCollectorBase;
@@ -22,16 +24,16 @@ class LayoutBuilderEntityViewDisplayDependencyCollector extends LayoutBuilderDep
   /**
    * Calculates the entities referenced in Layout Builder components.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     if (!$this->layoutPluginManager) {
       return;
     }
-    /** @var \Drupal\Core\Entity\Entity\EntityViewDisplay $entity */
+    /** @var EntityViewDisplay $entity */
     $entity = $event->getEntity();
     if ($entity->getEntityTypeId() !== 'entity_view_display') {
       return;
diff --git a/src/EventSubscriber/DependencyCollector/LayoutBuilderFieldDependencyCollector.php b/src/EventSubscriber/DependencyCollector/LayoutBuilderFieldDependencyCollector.php
index 96e50d7..d9b4b5d 100644
--- a/src/EventSubscriber/DependencyCollector/LayoutBuilderFieldDependencyCollector.php
+++ b/src/EventSubscriber/DependencyCollector/LayoutBuilderFieldDependencyCollector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
@@ -25,10 +26,10 @@ class LayoutBuilderFieldDependencyCollector extends LayoutBuilderDependencyColle
   /**
    * Calculates the entities referenced on Layout Builder components.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     if (!$this->layoutPluginManager) {
@@ -52,11 +53,11 @@ class LayoutBuilderFieldDependencyCollector extends LayoutBuilderDependencyColle
   /**
    * Determines if the field is of one of the specified types.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name.
-   * @param \Drupal\Core\Field\FieldItemListInterface $field
+   * @param FieldItemListInterface $field
    *   The field.
    *
    * @return bool
diff --git a/src/EventSubscriber/DependencyCollector/LinkFieldCollector.php b/src/EventSubscriber/DependencyCollector/LinkFieldCollector.php
index 52d973e..a70812c 100644
--- a/src/EventSubscriber/DependencyCollector/LinkFieldCollector.php
+++ b/src/EventSubscriber/DependencyCollector/LinkFieldCollector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;
 
+use Drupal\link\Plugin\Field\FieldType\LinkItem;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -20,23 +21,23 @@ class LinkFieldCollector extends BaseDependencyCollector {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * LinkFieldCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   Module handler service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler) {
@@ -55,7 +56,7 @@ class LinkFieldCollector extends BaseDependencyCollector {
   /**
    * Calculates menu link dependencies.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
@@ -78,7 +79,7 @@ class LinkFieldCollector extends BaseDependencyCollector {
         /**
          * Loop through field items for relevant dependencies.
          *
-         * @var \Drupal\link\Plugin\Field\FieldType\LinkItem $item
+         * @var LinkItem $item
          */
         foreach ($field as $item) {
 
diff --git a/src/EventSubscriber/DependencyCollector/MenuItemContentDependencyCollector.php b/src/EventSubscriber/DependencyCollector/MenuItemContentDependencyCollector.php
index 2130395..4d05c28 100644
--- a/src/EventSubscriber/DependencyCollector/MenuItemContentDependencyCollector.php
+++ b/src/EventSubscriber/DependencyCollector/MenuItemContentDependencyCollector.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;
 
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
 use Drupal\depcalc\DependentEntityWrapper;
 use Drupal\depcalc\Event\CalculateEntityDependenciesEvent;
@@ -17,7 +19,7 @@ class MenuItemContentDependencyCollector extends BaseDependencyCollector {
   }
 
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $entity = $event->getEntity();
     if ($entity->getEntityTypeId() !== 'menu_link_content') {
       return;
@@ -37,7 +39,7 @@ class MenuItemContentDependencyCollector extends BaseDependencyCollector {
       return;
     }
     [$parent_type, $uuid] = explode(':', $parent);
-    /** @var \Drupal\Core\Entity\EntityInterface $parent_menu */
+    /** @var EntityInterface $parent_menu */
     $parent_menu = \Drupal::service('entity.repository')->loadEntityByUuid($parent_type, $uuid);
     if ($parent_menu && !$event->getStack()->hasDependency($parent_menu->uuid())) {
       $parent_wrapper = new DependentEntityWrapper($parent_menu);
diff --git a/src/EventSubscriber/DependencyCollector/PathAliasEntityCollector.php b/src/EventSubscriber/DependencyCollector/PathAliasEntityCollector.php
index e04711c..6d48f30 100644
--- a/src/EventSubscriber/DependencyCollector/PathAliasEntityCollector.php
+++ b/src/EventSubscriber/DependencyCollector/PathAliasEntityCollector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;
 
+use Drupal\path_alias\Entity\PathAlias;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\Exception\UndefinedLinkTemplateException;
@@ -16,7 +17,7 @@ class PathAliasEntityCollector extends BaseDependencyCollector {
   /**
    * The url matcher.
    *
-   * @var \Symfony\Component\Routing\Matcher\UrlMatcherInterface
+   * @var UrlMatcherInterface
    */
   protected $matcher;
 
@@ -33,7 +34,7 @@ class PathAliasEntityCollector extends BaseDependencyCollector {
 
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     if ($event->getEntity()->getEntityTypeId() === 'path_alias' && \Drupal::moduleHandler()->moduleExists('path_alias')) {
-      /** @var \Drupal\path_alias\Entity\PathAlias $entity */
+      /** @var PathAlias $entity */
       $entity = $event->getEntity();
       $params = $this->matcher->match($entity->getPath());
       foreach ($params['_raw_variables']->keys() as $parameter) {
diff --git a/src/EventSubscriber/DependencyCollector/TermParentCollector.php b/src/EventSubscriber/DependencyCollector/TermParentCollector.php
index 6a5aa76..99b84cd 100644
--- a/src/EventSubscriber/DependencyCollector/TermParentCollector.php
+++ b/src/EventSubscriber/DependencyCollector/TermParentCollector.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\taxonomy\TermInterface;
+use Drupal\taxonomy\TermStorage;
 use Drupal\Core\Database\Connection;
 use Drupal\depcalc\DependencyCalculatorEvents;
 use Drupal\depcalc\DependentEntityWrapper;
@@ -13,14 +17,14 @@ use Drupal\depcalc\Event\CalculateEntityDependenciesEvent;
 class TermParentCollector extends BaseDependencyCollector {
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * TermParentCollector constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
    */
   public function __construct(Connection $database) {
@@ -38,17 +42,17 @@ class TermParentCollector extends BaseDependencyCollector {
   /**
    * Add parent terms to dependency calculation.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The CalculateEntityDependenciesEvent event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     if ($event->getWrapper()->getEntityTypeId() == 'taxonomy_term') {
-      /** @var \Drupal\taxonomy\TermInterface $term */
+      /** @var TermInterface $term */
       $term = $event->getEntity();
-      /** @var \Drupal\taxonomy\TermStorage $storage */
+      /** @var TermStorage $storage */
       $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
       $parents = $storage->loadParents($term->id());
       foreach($parents as $parent) {
diff --git a/src/EventSubscriber/DependencyCollector/TextItemFieldDependencyCollector.php b/src/EventSubscriber/DependencyCollector/TextItemFieldDependencyCollector.php
index 93a0f08..02241ef 100644
--- a/src/EventSubscriber/DependencyCollector/TextItemFieldDependencyCollector.php
+++ b/src/EventSubscriber/DependencyCollector/TextItemFieldDependencyCollector.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\depcalc\EventSubscriber\DependencyCollector;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -18,14 +20,14 @@ class TextItemFieldDependencyCollector extends BaseDependencyCollector {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * TextItemFieldDependencyCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -44,11 +46,11 @@ class TextItemFieldDependencyCollector extends BaseDependencyCollector {
   /**
    * Calculates the associated filter_format entity for any text item field.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateDependencies(CalculateEntityDependenciesEvent $event) {
     // @todo determine if there's a better way to catch this field type for other classes which might some day extend it.
@@ -62,7 +64,7 @@ class TextItemFieldDependencyCollector extends BaseDependencyCollector {
     }
     /**
      * @var string $field_name
-     * @var \Drupal\Core\Field\FieldItemListInterface $field
+     * @var FieldItemListInterface $field
      */
     foreach ($fields as $field) {
       foreach ($field as $item) {
diff --git a/src/EventSubscriber/DependencyCollector/WorkflowCollector.php b/src/EventSubscriber/DependencyCollector/WorkflowCollector.php
index 8a4bc6d..164729d 100644
--- a/src/EventSubscriber/DependencyCollector/WorkflowCollector.php
+++ b/src/EventSubscriber/DependencyCollector/WorkflowCollector.php
@@ -16,14 +16,14 @@ class WorkflowCollector extends BaseDependencyCollector {
   /**
    * Moderation Information
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInfo;
 
   /**
    * EntityFormDisplayDependencyCollector constructor.
    *
-   * @param \Drupal\content_moderation\ModerationInformationInterface|null $moderation_information
+   * @param ModerationInformationInterface|null $moderation_information
    *   The moderation information.
    */
   public function __construct(ModerationInformationInterface $moderation_information = NULL) {
@@ -41,7 +41,7 @@ class WorkflowCollector extends BaseDependencyCollector {
   /**
    * Calculates the associated workflows.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The dependency calculation event.
    *
    * @throws \Exception
diff --git a/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/BlockContentDependencyCollector.php b/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/BlockContentDependencyCollector.php
index e40fb5b..51eeb8e 100644
--- a/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/BlockContentDependencyCollector.php
+++ b/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/BlockContentDependencyCollector.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\depcalc\EventSubscriber\LayoutBuilderComponentDepencyCollector;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\block_content\Plugin\Block\BlockContentBlock;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
@@ -16,14 +18,14 @@ class BlockContentDependencyCollector implements EventSubscriberInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * TextItemFieldDependencyCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -41,11 +43,11 @@ class BlockContentDependencyCollector implements EventSubscriberInterface {
   /**
    * Calculates the entities referenced on Layout Builder components.
    *
-   * @param \Drupal\depcalc\Event\SectionComponentDependenciesEvent $event
+   * @param SectionComponentDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateSectionComponentDependencies(SectionComponentDependenciesEvent $event) {
 
diff --git a/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/ConfigDependencyCollector.php b/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/ConfigDependencyCollector.php
index 2497aed..617f12c 100644
--- a/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/ConfigDependencyCollector.php
+++ b/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/ConfigDependencyCollector.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\depcalc\EventSubscriber\LayoutBuilderComponentDepencyCollector;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\ConfigManagerInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
 use Drupal\depcalc\Event\SectionComponentDependenciesEvent;
@@ -15,14 +17,14 @@ class ConfigDependencyCollector implements EventSubscriberInterface {
   /**
    * The configuration manager.
    *
-   * @var \Drupal\Core\Config\ConfigManagerInterface
+   * @var ConfigManagerInterface
    */
   protected $configManager;
 
   /**
    * ConfigEntityDependencyCollector constructor.
    *
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
+   * @param ConfigManagerInterface $config_manager
    *   The configuration manager.
    */
   public function __construct(ConfigManagerInterface $config_manager) {
@@ -40,11 +42,11 @@ class ConfigDependencyCollector implements EventSubscriberInterface {
   /**
    * Calculates the entities referenced on Layout Builder components.
    *
-   * @param \Drupal\depcalc\Event\SectionComponentDependenciesEvent $event
+   * @param SectionComponentDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateSectionComponentDependencies(SectionComponentDependenciesEvent $event) {
     $component = $event->getComponent();
diff --git a/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/InlineBlockDependencyCollector.php b/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/InlineBlockDependencyCollector.php
index 5f3423a..a88204d 100644
--- a/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/InlineBlockDependencyCollector.php
+++ b/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/InlineBlockDependencyCollector.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\depcalc\EventSubscriber\LayoutBuilderComponentDepencyCollector;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
 use Drupal\depcalc\Event\SectionComponentDependenciesEvent;
@@ -16,14 +18,14 @@ class InlineBlockDependencyCollector implements EventSubscriberInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * TextItemFieldDependencyCollector constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -41,11 +43,11 @@ class InlineBlockDependencyCollector implements EventSubscriberInterface {
   /**
    * Calculates the entities referenced on Layout Builder components.
    *
-   * @param \Drupal\depcalc\Event\SectionComponentDependenciesEvent $event
+   * @param SectionComponentDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateSectionComponentDependencies(SectionComponentDependenciesEvent $event) {
 
diff --git a/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/LayoutBuilderDependencyCollectorBase.php b/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/LayoutBuilderDependencyCollectorBase.php
index b14ca98..5db7ac4 100644
--- a/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/LayoutBuilderDependencyCollectorBase.php
+++ b/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/LayoutBuilderDependencyCollectorBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\depcalc\EventSubscriber\LayoutBuilderComponentDepencyCollector;
 
+use Drupal\Core\Layout\LayoutPluginManager;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\layout_builder\SectionComponent;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Layout\LayoutPluginManagerInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
 use Drupal\depcalc\DependentEntityWrapper;
@@ -16,23 +20,23 @@ abstract class LayoutBuilderDependencyCollectorBase extends BaseDependencyCollec
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;
 
   /**
    * The layout plugin manager.
    *
-   * @var \Drupal\Core\Layout\LayoutPluginManager
+   * @var LayoutPluginManager
    */
   protected $layoutPluginManager;
 
   /**
    * The LayoutBuilderDependencyCollectorBase constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Layout\LayoutPluginManagerInterface|null $layoutPluginManager
+   * @param LayoutPluginManagerInterface|null $layoutPluginManager
    *   The LayoutPluginManager
    */
   public function __construct(EventDispatcherInterface $dispatcher, LayoutPluginManagerInterface $layoutPluginManager = NULL) {
@@ -43,12 +47,12 @@ abstract class LayoutBuilderDependencyCollectorBase extends BaseDependencyCollec
   /**
    * Set module dependencies to the event.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The calculate entity dependencies event.
-   * @param \Drupal\layout_builder\Section $section
+   * @param Section $section
    *   The section.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function addSectionDependencies(CalculateEntityDependenciesEvent $event, Section $section) {
     $layout_id = $section->getLayoutId();
@@ -59,9 +63,9 @@ abstract class LayoutBuilderDependencyCollectorBase extends BaseDependencyCollec
   /**
    * Adds dependencies from components.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The calculate entity dependencies event.
-   * @param \Drupal\layout_builder\SectionComponent[] $components
+   * @param SectionComponent[] $components
    *   The components for this field.
    *
    * @throws \Exception
@@ -79,9 +83,9 @@ abstract class LayoutBuilderDependencyCollectorBase extends BaseDependencyCollec
    * Adds entity dependencies from this layout builder field to this event
    * dependencies.
    *
-   * @param \Drupal\depcalc\Event\CalculateEntityDependenciesEvent $event
+   * @param CalculateEntityDependenciesEvent $event
    *   The calculate entity dependencies event.
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   The entity dependencies.
    *
    * @throws \Exception
diff --git a/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/ModuleDependencyCollector.php b/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/ModuleDependencyCollector.php
index fd9e2a6..0d73ffe 100644
--- a/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/ModuleDependencyCollector.php
+++ b/src/EventSubscriber/LayoutBuilderComponentDepencyCollector/ModuleDependencyCollector.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\depcalc\EventSubscriber\LayoutBuilderComponentDepencyCollector;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\depcalc\DependencyCalculatorEvents;
 use Drupal\depcalc\Event\SectionComponentDependenciesEvent;
@@ -23,11 +25,11 @@ class ModuleDependencyCollector implements EventSubscriberInterface {
   /**
    * Calculates the entities referenced on Layout Builder components.
    *
-   * @param \Drupal\depcalc\Event\SectionComponentDependenciesEvent $event
+   * @param SectionComponentDependenciesEvent $event
    *   The dependency calculation event.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function onCalculateSectionComponentDependencies(SectionComponentDependenciesEvent $event) {
     $component = $event->getComponent();
diff --git a/src/FieldExtractor.php b/src/FieldExtractor.php
index 54da8a4..903e8f1 100644
--- a/src/FieldExtractor.php
+++ b/src/FieldExtractor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\depcalc;
 
+use Drupal\Core\Field\FieldItemListInterface;
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\depcalc\Event\FilterDependencyCalculationFieldsEvent;
 
@@ -13,12 +15,12 @@ class FieldExtractor {
   /**
    * Extract all fields in all translations that match our criteria.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param callable $condition
    *   The condition.
    *
-   * @return \Drupal\Core\Field\FieldItemListInterface[]
+   * @return FieldItemListInterface[]
    *   The list of fields.
    */
   public static function getFieldsFromEntity(ContentEntityInterface $entity, callable $condition) {
@@ -26,7 +28,7 @@ class FieldExtractor {
     $languages = $entity->getTranslationLanguages();
     /**
      * @var string $field_name
-     * @var \Drupal\Core\Field\FieldItemListInterface $field
+     * @var FieldItemListInterface $field
      */
     foreach ($entity as $field_name => $field) {
       // Check if field definition type is a link.
@@ -45,9 +47,9 @@ class FieldExtractor {
     }
     if ($fields) {
       $event = new FilterDependencyCalculationFieldsEvent($entity, ...$fields);
-      /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher */
+      /** @var EventDispatcherInterface $dispatcher */
       $dispatcher = \Drupal::service('event_dispatcher');
-      $dispatcher->dispatch(DependencyCalculatorEvents::FILTER_FIELDS, $event);
+      $dispatcher->dispatch($event, DependencyCalculatorEvents::FILTER_FIELDS);
       $fields = $event->getFields();
     }
     return $fields;
diff --git a/tests/src/Functional/DepcalcClearCacheTest.php b/tests/src/Functional/DepcalcClearCacheTest.php
index 83d48b5..c1af24c 100644
--- a/tests/src/Functional/DepcalcClearCacheTest.php
+++ b/tests/src/Functional/DepcalcClearCacheTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\depcalc_ui\Functional;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\depcalc\Cache\DepcalcCacheBackend;
+use Drupal\Core\Database\Connection;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\depcalc\Kernel\DependencyHelperTrait;
 
@@ -17,28 +20,28 @@ class DepcalcClearCacheTest extends BrowserTestBase {
   /**
    * User that has administer permission.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $authorizedUser;
 
   /**
    * User that is $unauthorizedUser.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $unauthorizedUser;
 
   /**
    * The Depcalc Cache backend.
    *
-   * @var \Drupal\depcalc\Cache\DepcalcCacheBackend
+   * @var DepcalcCacheBackend
    */
   protected $depcalcCache;
 
   /**
    * The database connection
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
diff --git a/tests/src/Kernel/ClearCacheTest.php b/tests/src/Kernel/ClearCacheTest.php
index d797e6d..4959e24 100644
--- a/tests/src/Kernel/ClearCacheTest.php
+++ b/tests/src/Kernel/ClearCacheTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\depcalc\Kernel;
 
+use Drupal\depcalc\Cache\DepcalcCacheBackend;
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Entity\EntityRepository;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\file\Entity\File;
 use Drupal\KernelTests\KernelTestBase;
@@ -23,14 +28,14 @@ class ClearCacheTest extends KernelTestBase {
   /**
    * The Depcalc Cache backend.
    *
-   * @var \Drupal\depcalc\Cache\DepcalcCacheBackend
+   * @var DepcalcCacheBackend
    */
   protected $depcalcCache;
 
   /**
    * The database connection
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
@@ -92,7 +97,7 @@ class ClearCacheTest extends KernelTestBase {
     $this->database = $this->container->get('database');
 
     // Create test user.
-    /** @var \Drupal\Core\Entity\EntityRepository $entity_repository */
+    /** @var EntityRepository $entity_repository */
     $entity_repository = $this->container->get('entity.repository');
     $admin_role = $entity_repository->loadEntityByUuid(
       'user_role',
@@ -137,13 +142,13 @@ class ClearCacheTest extends KernelTestBase {
    */
   public function testClearCache(string $entity_type, array $entities, array $expected_entities): void {
     foreach ($entities as $entity_values) {
-      /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+      /** @var EntityTypeManagerInterface $entity_type_manager */
       $entity_type_manager = $this->container->get('entity_type.manager');
       $entity = $entity_type_manager->getStorage($entity_type)->create($entity_values);
       $entity->save();
     }
     // Calculate dependencies for the last entity from the $entities list.
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $actual_entities = $this->getEntityDependencies($entity);
     $this->assertSame($expected_entities, $actual_entities);
 
diff --git a/tests/src/Kernel/DependencyCalculatorTest.php b/tests/src/Kernel/DependencyCalculatorTest.php
index 221cc7d..1f5a535 100644
--- a/tests/src/Kernel/DependencyCalculatorTest.php
+++ b/tests/src/Kernel/DependencyCalculatorTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\depcalc\Kernel;
 
+use Drupal\depcalc\DependencyCalculator;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityRepository;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\depcalc\DependencyStack;
@@ -42,21 +46,21 @@ class DependencyCalculatorTest extends KernelTestBase {
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   protected $calculator;
 
   /**
    * The DependentEntityWrapper object.
    *
-   * @var \Drupal\depcalc\DependentEntityWrapper
+   * @var DependentEntityWrapper
    */
   protected $dependentEntityWrapper;
 
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ -77,7 +81,7 @@ class DependencyCalculatorTest extends KernelTestBase {
     $this->calculator = Drupal::service('entity.dependency.calculator');
 
     // Create test user.
-    /** @var \Drupal\Core\Entity\EntityRepository $entity_repository */
+    /** @var EntityRepository $entity_repository */
     $entity_repository = Drupal::service('entity.repository');
     $admin_role = $entity_repository->loadEntityByUuid(
       'user_role',
@@ -123,14 +127,14 @@ class DependencyCalculatorTest extends KernelTestBase {
    */
   public function testEntityDependencies(string $entity_type, array $entities, array $expected_entities, array $expected_modules) {
     foreach ($entities as $entity_values) {
-      /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+      /** @var EntityTypeManagerInterface $entity_type_manager */
       $entity_type_manager = Drupal::service('entity_type.manager');
       $entity = $entity_type_manager->getStorage($entity_type)->create($entity_values);
       $entity->save();
     }
 
     // Calculate dependencies for the last entity from the $entities list.
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $actual_entities = $this->getEntityDependencies($entity);
     $this->assertEquals($expected_entities, $actual_entities);
     $actual_modules = $this->getModuleDependencies($entity);
@@ -140,7 +144,7 @@ class DependencyCalculatorTest extends KernelTestBase {
   /**
    * Returns the list of entity dependencies.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
@@ -157,7 +161,7 @@ class DependencyCalculatorTest extends KernelTestBase {
   /**
    * Returns the list of module dependencies.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
    * @return array
@@ -174,10 +178,10 @@ class DependencyCalculatorTest extends KernelTestBase {
   /**
    * Calculate entity dependencies and return the DependentEntityWrapper object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapper
+   * @return DependentEntityWrapper
    *   The DependentEntityWrapper object.
    *
    * @throws \Exception
diff --git a/tests/src/Kernel/DependencyHelperTrait.php b/tests/src/Kernel/DependencyHelperTrait.php
index ab5744e..b5e2aa0 100644
--- a/tests/src/Kernel/DependencyHelperTrait.php
+++ b/tests/src/Kernel/DependencyHelperTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\depcalc\Kernel;
 
+use Drupal\depcalc\DependencyCalculator;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
@@ -12,14 +13,14 @@ trait DependencyHelperTrait {
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   protected $calculator;
 
   /**
    * Returns the list of entity dependencies.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
@@ -36,7 +37,7 @@ trait DependencyHelperTrait {
   /**
    * Returns the list of module dependencies.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
    * @return array
@@ -53,10 +54,10 @@ trait DependencyHelperTrait {
   /**
    * Calculate entity dependencies and return the DependentEntityWrapper object.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity object.
    *
-   * @return \Drupal\depcalc\DependentEntityWrapperInterface|null
+   * @return DependentEntityWrapperInterface|null
    *   The DependentEntityWrapper object.
    *
    * @throws \Exception
diff --git a/tests/src/Kernel/EntityLanguageTest.php b/tests/src/Kernel/EntityLanguageTest.php
index 35c8216..f45cef3 100644
--- a/tests/src/Kernel/EntityLanguageTest.php
+++ b/tests/src/Kernel/EntityLanguageTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\depcalc\Kernel;
 
+use Drupal\depcalc\DependencyCalculator;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
 use Drupal\KernelTests\KernelTestBase;
@@ -40,14 +43,14 @@ class EntityLanguageTest extends KernelTestBase {
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   protected $calculator;
 
   /**
    * Node object.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
@@ -106,7 +109,7 @@ class EntityLanguageTest extends KernelTestBase {
   /**
    * Tests node dependencies when entity translation is enabled.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testEntityTranslationEnabled(): void {
 
diff --git a/tests/src/Kernel/EventSubscriber/DependencyCollector/CalculateDependenciesEventDispatcherTrait.php b/tests/src/Kernel/EventSubscriber/DependencyCollector/CalculateDependenciesEventDispatcherTrait.php
index fbfbd1e..415cabc 100644
--- a/tests/src/Kernel/EventSubscriber/DependencyCollector/CalculateDependenciesEventDispatcherTrait.php
+++ b/tests/src/Kernel/EventSubscriber/DependencyCollector/CalculateDependenciesEventDispatcherTrait.php
@@ -16,10 +16,10 @@ trait CalculateDependenciesEventDispatcherTrait {
   /**
    * Dispatches dependency calculation event.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity to use in the event.
    *
-   * @return \Drupal\depcalc\Event\CalculateEntityDependenciesEvent
+   * @return CalculateEntityDependenciesEvent
    *   The event.
    *
    * @throws \Exception
diff --git a/tests/src/Kernel/EventSubscriber/DependencyCollector/ConfigEntityDependencyCollectorTest.php b/tests/src/Kernel/EventSubscriber/DependencyCollector/ConfigEntityDependencyCollectorTest.php
index 5447fbb..96ba6df 100644
--- a/tests/src/Kernel/EventSubscriber/DependencyCollector/ConfigEntityDependencyCollectorTest.php
+++ b/tests/src/Kernel/EventSubscriber/DependencyCollector/ConfigEntityDependencyCollectorTest.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;
 
+use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
+use Drupal\Tests\node\Traits\NodeCreationTrait;
+use Drupal\depcalc\DependencyCalculator;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\responsive_image\ResponsiveImageStyleInterface;
+use Drupal\depcalc\DependentEntityWrapperInterface;
+use Drupal\image\ImageStyleInterface;
 use Drupal;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\depcalc\DependencyStack;
@@ -24,8 +31,8 @@ use Drupal\responsive_image\Entity\ResponsiveImageStyle;
  */
 class ConfigEntityDependencyCollectorTest extends KernelTestBase {
 
-  use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
-  use Drupal\Tests\node\Traits\NodeCreationTrait;
+  use ContentTypeCreationTrait;
+  use NodeCreationTrait;
 
   /**
    * {@inheritdoc}
@@ -50,7 +57,7 @@ class ConfigEntityDependencyCollectorTest extends KernelTestBase {
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   private $calculator;
 
@@ -71,7 +78,7 @@ class ConfigEntityDependencyCollectorTest extends KernelTestBase {
   /**
    * Tests config entities dependency calculation.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function testConfigEntitiesDependencyCalculation() {
@@ -88,7 +95,7 @@ class ConfigEntityDependencyCollectorTest extends KernelTestBase {
     $style2 = $this->createImageStyle('dummy_image_style_2');
 
     // Creating a responsive image style which depends on the above styles.
-    /** @var \Drupal\responsive_image\ResponsiveImageStyleInterface $responsiveImageStyle */
+    /** @var ResponsiveImageStyleInterface $responsiveImageStyle */
     $responsiveImageStyle = ResponsiveImageStyle::create([
       'id' => 'dummy_responsive_image_style_1',
       'label' => 'Dummy responsive image style 1',
@@ -116,7 +123,7 @@ class ConfigEntityDependencyCollectorTest extends KernelTestBase {
   /**
    * Tests language config dependencies calculation.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function testLanguageConfigEntitiesDependencyCalculation() {
@@ -161,7 +168,7 @@ class ConfigEntityDependencyCollectorTest extends KernelTestBase {
     $this->assertArrayHasKey('language', array_flip($csDependencies['module']));
     $this->assertArrayHasKey('language', array_flip($frDependencies['module']));
 
-    /** @var \Drupal\depcalc\DependentEntityWrapperInterface $csNodeDependency */
+    /** @var DependentEntityWrapperInterface $csNodeDependency */
     $csNodeDependency = $csDependencies[$csNode->uuid()];
     $this->assertArrayHasKey($csLanguage->uuid(), $csNodeDependency->getDependencies());
     $this->assertArrayHasKey($frLanguage->uuid(), $csNodeDependency->getDependencies());
@@ -195,10 +202,10 @@ class ConfigEntityDependencyCollectorTest extends KernelTestBase {
    * @param string $name
    *   Image style name.
    *
-   * @return \Drupal\image\ImageStyleInterface
+   * @return ImageStyleInterface
    *   Image style.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function createImageStyle(string $name): EntityInterface {
     $style = ImageStyle::create([
@@ -215,7 +222,7 @@ class ConfigEntityDependencyCollectorTest extends KernelTestBase {
    * @param string $langcode
    *   Language code.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   Test node.
    */
   private function createTestNode(string $langcode): NodeInterface {
@@ -232,7 +239,7 @@ class ConfigEntityDependencyCollectorTest extends KernelTestBase {
    * @return array
    *   Languages list.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function getTestLanguages(): array {
     foreach (['cs', 'fr'] as $language) {
diff --git a/tests/src/Kernel/EventSubscriber/DependencyCollector/DrupalMediaEmbedCollectorTest.php b/tests/src/Kernel/EventSubscriber/DependencyCollector/DrupalMediaEmbedCollectorTest.php
index b504e1c..6dc761d 100644
--- a/tests/src/Kernel/EventSubscriber/DependencyCollector/DrupalMediaEmbedCollectorTest.php
+++ b/tests/src/Kernel/EventSubscriber/DependencyCollector/DrupalMediaEmbedCollectorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;
 
+use Drupal\depcalc\DependencyCalculator;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
 use Drupal\media\Entity\Media;
@@ -32,7 +33,7 @@ class DrupalMediaEmbedCollectorTest extends MediaEmbedFilterTestBase {
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   private $calculator;
 
diff --git a/tests/src/Kernel/EventSubscriber/DependencyCollector/EmbeddedImagesCollectorTest.php b/tests/src/Kernel/EventSubscriber/DependencyCollector/EmbeddedImagesCollectorTest.php
index a754ed4..1a38a5a 100644
--- a/tests/src/Kernel/EventSubscriber/DependencyCollector/EmbeddedImagesCollectorTest.php
+++ b/tests/src/Kernel/EventSubscriber/DependencyCollector/EmbeddedImagesCollectorTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;
 
+use Drupal\depcalc\DependencyCalculator;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\file\FileUsage\FileUsageInterface;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
 use Drupal\depcalc\EventSubscriber\DependencyCollector\EmbeddedImagesCollector;
@@ -41,7 +44,7 @@ class EmbeddedImagesCollectorTest extends KernelTestBase {
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   private $calculator;
 
@@ -78,7 +81,7 @@ class EmbeddedImagesCollectorTest extends KernelTestBase {
    * @param array $usages
    *   Usages map for files.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @dataProvider dependenciesCalculationProvider
    */
@@ -112,14 +115,12 @@ class EmbeddedImagesCollectorTest extends KernelTestBase {
    * @param array $usages
    *   Usages map for files.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    *
    * @dataProvider dependenciesCalculationProvider
    */
   public function testDependenciesCalculationWithoutImagesCollector(array $files_ids, array $usages) {
-    $mock = $this->getMockBuilder(EmbeddedImagesCollector::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $mock = $this->createMock(EmbeddedImagesCollector::class);
     \Drupal::getContainer()->set('embedded_images.calculator', $mock);
 
     $node = $this->createNode();
@@ -173,10 +174,10 @@ class EmbeddedImagesCollectorTest extends KernelTestBase {
    *   File UUID.
    * @param string $usages
    *   File usages count.
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   Node.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function uploadAndAttachFileToNode($uuid, $usages, NodeInterface $node) {
     $uri = sprintf('public://file-%s.png', $this->randomMachineName());
@@ -196,7 +197,7 @@ class EmbeddedImagesCollectorTest extends KernelTestBase {
   /**
    * Wraps the file usage service.
    *
-   * @return \Drupal\file\FileUsage\FileUsageInterface
+   * @return FileUsageInterface
    *   File usage service.
    */
   protected static function fileUsage() {
diff --git a/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityFormDisplayDependencyCollectorTest.php b/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityFormDisplayDependencyCollectorTest.php
index 333eb10..505466b 100644
--- a/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityFormDisplayDependencyCollectorTest.php
+++ b/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityFormDisplayDependencyCollectorTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;
 
+use Drupal\depcalc\DependencyCalculator;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityFormMode;
 use Drupal\depcalc\DependencyStack;
@@ -41,7 +44,7 @@ class EntityFormDisplayDependencyCollectorTest extends KernelTestBase {
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   private $calculator;
 
@@ -66,7 +69,7 @@ class EntityFormDisplayDependencyCollectorTest extends KernelTestBase {
   /**
    * Tests dependency calculation of entity form display.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function testEntityFormDisplayDependencyCollection() {
@@ -93,7 +96,7 @@ class EntityFormDisplayDependencyCollectorTest extends KernelTestBase {
     $this->assertArrayHasKey($enabledFormDisplay->uuid(), $dependencies);
     $this->assertArrayNotHasKey($disabledFormDisplay->uuid(), $dependencies);
 
-    /** @var \Drupal\depcalc\DependentEntityWrapper $formDisplayEntityWrapper */
+    /** @var DependentEntityWrapper $formDisplayEntityWrapper */
     $formDisplayEntityWrapper = $dependencies[$enabledFormDisplay->uuid()];
     $this->assertEquals($enabledFormDisplay->uuid(), $formDisplayEntityWrapper->getUuid());
     $this->assertEquals('entity_form_display', $enabledFormDisplay->getEntityTypeId());
@@ -111,10 +114,10 @@ class EntityFormDisplayDependencyCollectorTest extends KernelTestBase {
    * @param bool $status
    *   Publishing status.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   Form display.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function createFormDisplay(string $targetEntityType, string $bundle, string $mode, bool $status) {
     (EntityFormMode::create([
diff --git a/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityPathAliasCollectorTest.php b/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityPathAliasCollectorTest.php
index 622f96a..71e8e9c 100644
--- a/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityPathAliasCollectorTest.php
+++ b/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityPathAliasCollectorTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;
 
+use Drupal\path_alias\PathAliasInterface;
+use Drupal\depcalc\DependencyCalculator;
+use Drupal\node\NodeInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
@@ -30,21 +33,21 @@ class EntityPathAliasCollectorTest extends KernelTestBase {
   /**
    * The path alias.
    *
-   * @var \Drupal\path_alias\PathAliasInterface
+   * @var PathAliasInterface
    */
   protected $alias;
 
   /**
    * The dependency calculator.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   protected $calculator;
 
   /**
    * A test node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
@@ -101,7 +104,7 @@ class EntityPathAliasCollectorTest extends KernelTestBase {
   /**
    * Calculates dependencies for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity.
    *
    * @return array
diff --git a/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityReferenceFieldDependencyCollectorTest.php b/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityReferenceFieldDependencyCollectorTest.php
index 6a09136..f1b1b90 100644
--- a/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityReferenceFieldDependencyCollectorTest.php
+++ b/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityReferenceFieldDependencyCollectorTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;
 
+use Drupal\depcalc\DependencyCalculator;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
@@ -46,7 +48,7 @@ class EntityReferenceFieldDependencyCollectorTest extends KernelTestBase {
   /**
    * DependencyCalculator.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   private $calculator;
 
@@ -74,7 +76,7 @@ class EntityReferenceFieldDependencyCollectorTest extends KernelTestBase {
   /**
    * Tests dependencies calculation for an entity reference field.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function testDependenciesCollection() {
@@ -125,7 +127,7 @@ class EntityReferenceFieldDependencyCollectorTest extends KernelTestBase {
   /**
    * Calculates dependencies for the given node.
    *
-   * @param \Drupal\node\NodeInterface $node
+   * @param NodeInterface $node
    *   Node.
    *
    * @return array
diff --git a/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityViewDisplayDependencyCollectorTest.php b/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityViewDisplayDependencyCollectorTest.php
index 791f729..de3b8f6 100644
--- a/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityViewDisplayDependencyCollectorTest.php
+++ b/tests/src/Kernel/EventSubscriber/DependencyCollector/EntityViewDisplayDependencyCollectorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Entity\Entity\EntityViewMode;
 use Drupal\KernelTests\KernelTestBase;
@@ -48,7 +49,7 @@ class EntityViewDisplayDependencyCollectorTest extends KernelTestBase {
    * {@inheritdoc}
    *
    * @throws \ReflectionException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
diff --git a/tests/src/Kernel/EventSubscriber/DependencyCollector/LinkFieldCollectorTest.php b/tests/src/Kernel/EventSubscriber/DependencyCollector/LinkFieldCollectorTest.php
index 75a9729..a73cfd4 100644
--- a/tests/src/Kernel/EventSubscriber/DependencyCollector/LinkFieldCollectorTest.php
+++ b/tests/src/Kernel/EventSubscriber/DependencyCollector/LinkFieldCollectorTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;
 
+use Drupal\depcalc\DependencyCalculator;
+use Drupal\node\NodeInterface;
 use Drupal;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
@@ -51,7 +53,7 @@ class LinkFieldCollectorTest extends KernelTestBase {
   /**
    * Calculates all the dependencies of a given entity.
    *
-   * @var \Drupal\depcalc\DependencyCalculator
+   * @var DependencyCalculator
    */
   protected $calculator;
 
@@ -111,7 +113,7 @@ class LinkFieldCollectorTest extends KernelTestBase {
 
     foreach ($linked_nodes as $key => $linked_node_array) {
       foreach ($linked_node_array as $linked_node) {
-        /** @var \Drupal\node\NodeInterface $linked_node */
+        /** @var NodeInterface $linked_node */
         $uri_key = $key === 'entity' ? "$key:" : "$key:/";
         $node->get('link')->appendItem([
           'uri' => "{$uri_key}node/{$linked_node->id()}",
diff --git a/tests/src/Kernel/EventSubscriber/DependencyCollector/MenuDependencyTest.php b/tests/src/Kernel/EventSubscriber/DependencyCollector/MenuDependencyTest.php
index 635f1bd..9e4cac2 100644
--- a/tests/src/Kernel/EventSubscriber/DependencyCollector/MenuDependencyTest.php
+++ b/tests/src/Kernel/EventSubscriber/DependencyCollector/MenuDependencyTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\depcalc\DependencyStack;
 use Drupal\depcalc\DependentEntityWrapper;
 use Drupal\depcalc\Event\CalculateEntityDependenciesEvent;
@@ -80,13 +84,13 @@ class MenuDependencyTest extends KernelTestBase {
    * @param array $expected_modules
    *   The list of expected modules.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @dataProvider menuDependenciesDataProvider
    */
   public function testMenuEntityDependencies(string $test_entity_type, string $test_entity_uuid, array $entities, array $expected_entities, array $expected_modules) {
-    /** @var \Drupal\Core\Entity\EntityRepositoryInterface $repository */
+    /** @var EntityRepositoryInterface $repository */
     $repository = \Drupal::service('entity.repository');
     $entity_type_manager = \Drupal::entityTypeManager();
     foreach ($entities as $entity_type => $entities_values) {
diff --git a/tests/src/Kernel/EventSubscriber/DependencyCollector/TermParentCollectorTest.php b/tests/src/Kernel/EventSubscriber/DependencyCollector/TermParentCollectorTest.php
index 4ac8d25..188e12f 100644
--- a/tests/src/Kernel/EventSubscriber/DependencyCollector/TermParentCollectorTest.php
+++ b/tests/src/Kernel/EventSubscriber/DependencyCollector/TermParentCollectorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\taxonomy\Entity\Term;
 
@@ -40,7 +41,7 @@ class TermParentCollectorTest extends KernelTestBase {
    * {@inheritdoc}
    *
    * @throws \ReflectionException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
diff --git a/tests/src/Kernel/EventSubscriber/DependencyCollector/TextItemFieldDependencyCollectorTest.php b/tests/src/Kernel/EventSubscriber/DependencyCollector/TextItemFieldDependencyCollectorTest.php
index 75fb879..ee6e1a6 100644
--- a/tests/src/Kernel/EventSubscriber/DependencyCollector/TextItemFieldDependencyCollectorTest.php
+++ b/tests/src/Kernel/EventSubscriber/DependencyCollector/TextItemFieldDependencyCollectorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\editor\Entity\Editor;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\field\Traits\EntityReferenceTestTrait;
@@ -53,7 +54,7 @@ class TextItemFieldDependencyCollectorTest extends KernelTestBase {
    * {@inheritdoc}
    *
    * @throws \ReflectionException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
diff --git a/tests/src/Kernel/EventSubscriber/DependencyCollector/WorkflowCollectorTest.php b/tests/src/Kernel/EventSubscriber/DependencyCollector/WorkflowCollectorTest.php
index 31bd207..03765f5 100644
--- a/tests/src/Kernel/EventSubscriber/DependencyCollector/WorkflowCollectorTest.php
+++ b/tests/src/Kernel/EventSubscriber/DependencyCollector/WorkflowCollectorTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\depcalc\Kernel\EventSubscriber\DependencyCollector;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\NodeType;
 use Drupal\Tests\content_moderation\Traits\ContentModerationTestTrait;
@@ -42,7 +43,7 @@ class WorkflowCollectorTest extends KernelTestBase {
    * {@inheritdoc}
    *
    * @throws \ReflectionException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
diff --git a/tests/src/Kernel/EventSubscriber/LayoutBuilderDependencyCalculatorTest.php b/tests/src/Kernel/EventSubscriber/LayoutBuilderDependencyCalculatorTest.php
index ab33145..7a3e11e 100644
--- a/tests/src/Kernel/EventSubscriber/LayoutBuilderDependencyCalculatorTest.php
+++ b/tests/src/Kernel/EventSubscriber/LayoutBuilderDependencyCalculatorTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\depcalc\Kernel;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityRepository;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal;
 use Drupal\block_content\Entity\BlockContent;
 use Drupal\KernelTests\KernelTestBase;
@@ -46,7 +50,7 @@ class LayoutBuilderDependencyCalculatorTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setUp(): void {
     parent::setUp();
@@ -69,7 +73,7 @@ class LayoutBuilderDependencyCalculatorTest extends KernelTestBase {
     $this->calculator = Drupal::service('entity.dependency.calculator');
 
     // Create test user.
-    /** @var \Drupal\Core\Entity\EntityRepository $entity_repository */
+    /** @var EntityRepository $entity_repository */
     $entity_repository = Drupal::service('entity.repository');
     $admin_role = $entity_repository->loadEntityByUuid(
       'user_role',
@@ -102,7 +106,7 @@ class LayoutBuilderDependencyCalculatorTest extends KernelTestBase {
     ]);
     $node_type->save();
 
-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
+    /** @var EntityViewDisplayInterface $display */
     $display = \Drupal::entityTypeManager()->getStorage('entity_view_display')->create([
       'targetEntityType' => 'node',
       'bundle' => 'landing_page',
@@ -133,7 +137,7 @@ class LayoutBuilderDependencyCalculatorTest extends KernelTestBase {
   public function testEntityDependencies() {
     $view = \Drupal::entityTypeManager()->getStorage('view')->load('who_s_online');
     // Calculate dependencies for an entity_view_display entity.
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entity = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.landing_page.default');
 
     // Extract the entity dependencies.
@@ -184,7 +188,7 @@ class LayoutBuilderDependencyCalculatorTest extends KernelTestBase {
   /**
    * Gets an array of section components for testing dependencies.
    *
-   * @return \Drupal\layout_builder\SectionComponent[]
+   * @return SectionComponent[]
    */
   protected function getSectionComponents() {
     return [
