diff --git a/business_rules.drush.inc b/business_rules.drush.inc
index 3a8fb5a..be5e9f0 100644
--- a/business_rules.drush.inc
+++ b/business_rules.drush.inc
@@ -1,12 +1,12 @@
 <?php
 
+use Symfony\Contracts\EventDispatcher\Event;
 /**
  * @file
  * Business Rules module integration with Drush 8 and earlier.
  */
 
 use Drupal\business_rules\Events\BusinessRulesDrushEvent;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Implements hook_drush_init().
diff --git a/business_rules.install b/business_rules.install
index c1e76d6..eba23b9 100644
--- a/business_rules.install
+++ b/business_rules.install
@@ -9,7 +9,7 @@ use Drupal\Core\Field\BaseFieldDefinition;
  */
 function business_rules_update_8101(&$sandbox) {
   $actions = Action::loadMultiple();
-  /** @var \Drupal\business_rules\Entity\Action $action */
+  /** @var Action $action */
   foreach ($actions as $key => $action) {
     if ($action->getType() == 'send_email') {
       $old_body = $action->getSettings('body');
diff --git a/business_rules.module b/business_rules.module
index 25bfbc5..a9e458b 100644
--- a/business_rules.module
+++ b/business_rules.module
@@ -1,5 +1,7 @@
 <?php
 
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\Field\FieldItemList;
 /**
  * @file
  * Business Rules module.
@@ -58,7 +60,7 @@ function business_rules_entity_presave(EntityInterface $entity) {
       'reacts_on' => $reacts_on_definition,
       'loop_control' => $entity->getEntityTypeId() . $entity->id(),
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
   }
@@ -84,7 +86,7 @@ function business_rules_entity_update(EntityInterface $entity) {
       'reacts_on' => $reacts_on_definition,
       'loop_control' => $entity->getEntityTypeId() . $entity->id(),
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
   }
@@ -109,7 +111,7 @@ function business_rules_entity_insert(EntityInterface $entity) {
       'reacts_on' => $reacts_on_definition,
       'loop_control' => $entity->getEntityTypeId() . $entity->id(),
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
   }
@@ -134,7 +136,7 @@ function business_rules_entity_delete(EntityInterface $entity) {
       'reacts_on' => $reacts_on_definition,
       'loop_control' => $entity->getEntityTypeId() . $entity->id(),
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
   }
@@ -195,7 +197,7 @@ function business_rules_field_widget_form_alter(&$element, FormStateInterface $f
   // appropriate place.
   if (isset($context['items']) && $context['items'] instanceof EntityReferenceFieldItemListInterface) {
     /**
-     * @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $items
+     * @var EntityReferenceFieldItemListInterface $items
      */
     $items = $context['items'];
     $entity = $items->getEntity();
@@ -214,7 +216,7 @@ function business_rules_field_widget_form_alter(&$element, FormStateInterface $f
 
   if ($entity instanceof EntityInterface) {
     // Check if the field is a dependent field.
-    /** @var \Drupal\Core\Field\FieldItemList $items */
+    /** @var FieldItemList $items */
     $items = $context['items'];
     $current_field = $items->getFieldDefinition()->getName();
 
@@ -287,7 +289,7 @@ function business_rules_field_widget_form_alter(&$element, FormStateInterface $f
       'loop_control' => $loop_control,
     ]);
 
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
 
@@ -318,7 +320,7 @@ function business_rules_entity_view(array &$build, EntityInterface $entity, Enti
       'reacts_on' => $reacts_on_definition,
       'loop_control' => $entity->getEntityTypeId() . $entity->id(),
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
   }
@@ -344,7 +346,7 @@ function business_rules_entity_load(array $entities, $entity_type_id) {
         'reacts_on' => $reacts_on_definition,
         'loop_control' => $entity->getEntityTypeId() . $entity->id(),
       ]);
-      /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+      /** @var EventDispatcherInterface $event_dispatcher */
       $event_dispatcher = \Drupal::service('event_dispatcher');
       $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
     }
@@ -372,7 +374,7 @@ function business_rules_user_login($account) {
       'reacts_on' => $reacts_on_definition,
       'loop_control' => $entity->getEntityTypeId() . $entity->id(),
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
   }
@@ -403,7 +405,7 @@ function business_rules_user_logout($account) {
       'reacts_on' => $reacts_on_definition,
       'loop_control' => $entity->getEntityTypeId() . $entity->id(),
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+    /** @var EventDispatcherInterface $event_dispatcher */
     $event_dispatcher = \Drupal::service('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
   }
@@ -532,7 +534,7 @@ function business_rules_entity_form_display_alter(EntityFormDisplayInterface &$f
     'form_display' => NULL,
   ]);
 
-  /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
+  /** @var EventDispatcherInterface $event_dispatcher */
   $event_dispatcher = \Drupal::service('event_dispatcher');
   $event_dispatcher->dispatch($reacts_on_definition['eventName'], $event);
 
diff --git a/src/ActionHtmlRouteProvider.php b/src/ActionHtmlRouteProvider.php
index 94186be..a7d2593 100644
--- a/src/ActionHtmlRouteProvider.php
+++ b/src/ActionHtmlRouteProvider.php
@@ -36,10 +36,10 @@ class ActionHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -64,10 +64,10 @@ class ActionHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/ActionInterface.php b/src/ActionInterface.php
index 12578dc..d77423b 100644
--- a/src/ActionInterface.php
+++ b/src/ActionInterface.php
@@ -12,7 +12,7 @@ interface ActionInterface extends ItemInterface {
   /**
    * Execute the action.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event that has triggered the action.
    *
    * @return array
diff --git a/src/Annotation/BusinessRulesItem.php b/src/Annotation/BusinessRulesItem.php
index 45c7f18..2c8e5f5 100644
--- a/src/Annotation/BusinessRulesItem.php
+++ b/src/Annotation/BusinessRulesItem.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -16,7 +17,7 @@ abstract class BusinessRulesItem extends Plugin {
   /**
    * A human readable description of the item.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -25,7 +26,7 @@ abstract class BusinessRulesItem extends Plugin {
   /**
    * The group of the item to be organized in the list box.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -71,7 +72,7 @@ abstract class BusinessRulesItem extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Annotation/BusinessRulesReactsOn.php b/src/Annotation/BusinessRulesReactsOn.php
index 041d127..f2726af 100644
--- a/src/Annotation/BusinessRulesReactsOn.php
+++ b/src/Annotation/BusinessRulesReactsOn.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -24,7 +25,7 @@ class BusinessRulesReactsOn extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -33,7 +34,7 @@ class BusinessRulesReactsOn extends Plugin {
   /**
    * A human readable description of the Reacts On Event.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -49,7 +50,7 @@ class BusinessRulesReactsOn extends Plugin {
   /**
    * The group of the action to be organized in the list box.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/BusinessRuleHtmlRouteProvider.php b/src/BusinessRuleHtmlRouteProvider.php
index 82f70cc..c9e5163 100644
--- a/src/BusinessRuleHtmlRouteProvider.php
+++ b/src/BusinessRuleHtmlRouteProvider.php
@@ -36,10 +36,10 @@ class BusinessRuleHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -64,10 +64,10 @@ class BusinessRuleHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/BusinessRuleInterface.php b/src/BusinessRuleInterface.php
index a47c546..a89896f 100644
--- a/src/BusinessRuleInterface.php
+++ b/src/BusinessRuleInterface.php
@@ -28,7 +28,7 @@ interface BusinessRuleInterface extends ConfigEntityInterface {
   /**
    * Add one item on the Business Rule's items.
    *
-   * @param \Drupal\business_rules\BusinessRulesItemObject $item
+   * @param BusinessRulesItemObject $item
    *   The item to be added.
    */
   public function addItem(BusinessRulesItemObject $item);
@@ -36,7 +36,7 @@ interface BusinessRuleInterface extends ConfigEntityInterface {
   /**
    * Check if the item is on the same context as the Business Rule.
    *
-   * @param \Drupal\business_rules\BusinessRulesItemObject $itemObject
+   * @param BusinessRulesItemObject $itemObject
    *   The business rule object.
    *
    * @return bool
@@ -173,7 +173,7 @@ interface BusinessRuleInterface extends ConfigEntityInterface {
   /**
    * Remove one item from the Business rule's items.
    *
-   * @param \Drupal\business_rules\BusinessRulesItemObject $item
+   * @param BusinessRulesItemObject $item
    *   The item to be removed.
    */
   public function removeItem(BusinessRulesItemObject $item);
diff --git a/src/BusinessRuleListBuilder.php b/src/BusinessRuleListBuilder.php
index b80f807..3a76d16 100644
--- a/src/BusinessRuleListBuilder.php
+++ b/src/BusinessRuleListBuilder.php
@@ -35,7 +35,7 @@ class BusinessRuleListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\business_rules\Entity\BusinessRule $entity */
+    /** @var BusinessRule $entity */
     $status = $entity->isEnabled() ? $this->t('Enabled') : $this->t('Disabled');
 
     $row['label']       = $entity->label();
diff --git a/src/BusinessRulesBreadcrumb.php b/src/BusinessRulesBreadcrumb.php
index 24f0dd6..b80184d 100644
--- a/src/BusinessRulesBreadcrumb.php
+++ b/src/BusinessRulesBreadcrumb.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules;
 
+use Drupal\Core\Breadcrumb\Breadcrumb;
 use Drupal\Core\Link;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\system\PathBasedBreadcrumbBuilder;
@@ -27,7 +28,7 @@ class BusinessRulesBreadcrumb extends PathBasedBreadcrumbBuilder {
    * {@inheritdoc}
    */
   public function build(RouteMatchInterface $route_match) {
-    /** @var \Drupal\Core\Breadcrumb\Breadcrumb $breadcrumb */
+    /** @var Breadcrumb $breadcrumb */
     $breadcrumb = parent::build($route_match);
     $route_name = $route_match->getRouteName();
     $breadcrumb->addLink(Link::createFromRoute($this->t('Business Rules'), 'entity.business_rule.collection'));
diff --git a/src/BusinessRulesItemObject.php b/src/BusinessRulesItemObject.php
index 48192da..a114a67 100644
--- a/src/BusinessRulesItemObject.php
+++ b/src/BusinessRulesItemObject.php
@@ -83,7 +83,7 @@ class BusinessRulesItemObject {
   /**
    * Load the Item object. Action or Condition.
    *
-   * @return \Drupal\business_rules\ItemInterface|null
+   * @return ItemInterface|null
    *   The loaded item. Action or Condition.
    */
   public function loadEntity() {
diff --git a/src/ConditionHtmlRouteProvider.php b/src/ConditionHtmlRouteProvider.php
index 693a2b0..7d48136 100644
--- a/src/ConditionHtmlRouteProvider.php
+++ b/src/ConditionHtmlRouteProvider.php
@@ -36,10 +36,10 @@ class ConditionHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -64,10 +64,10 @@ class ConditionHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/ConditionInterface.php b/src/ConditionInterface.php
index c387c32..8e4e4a7 100644
--- a/src/ConditionInterface.php
+++ b/src/ConditionInterface.php
@@ -36,7 +36,7 @@ interface ConditionInterface extends ItemInterface {
   /**
    * Remove one success item from the condition.
    *
-   * @param \Drupal\business_rules\BusinessRulesItemObject $item
+   * @param BusinessRulesItemObject $item
    *   The item to be removed.
    */
   public function removeSuccessItem(BusinessRulesItemObject $item);
@@ -44,7 +44,7 @@ interface ConditionInterface extends ItemInterface {
   /**
    * Remove one fail item from the condition.
    *
-   * @param \Drupal\business_rules\BusinessRulesItemObject $item
+   * @param BusinessRulesItemObject $item
    *   The item to be removed.
    */
   public function removeFailItem(BusinessRulesItemObject $item);
@@ -75,7 +75,7 @@ interface ConditionInterface extends ItemInterface {
   /**
    * Add one item for Condition success.
    *
-   * @param \Drupal\business_rules\BusinessRulesItemObject $item
+   * @param BusinessRulesItemObject $item
    *   The item to be added.
    */
   public function addSuccessItem(BusinessRulesItemObject $item);
@@ -83,7 +83,7 @@ interface ConditionInterface extends ItemInterface {
   /**
    * Add one item for Condition fail.
    *
-   * @param \Drupal\business_rules\BusinessRulesItemObject $item
+   * @param BusinessRulesItemObject $item
    *   The item to be added.
    */
   public function addFailItem(BusinessRulesItemObject $item);
@@ -91,7 +91,7 @@ interface ConditionInterface extends ItemInterface {
   /**
    * Process the condition.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event that has triggered the condition.
    *
    * @return bool
diff --git a/src/Controller/ActionSetController.php b/src/Controller/ActionSetController.php
index ede106a..5250d7e 100644
--- a/src/Controller/ActionSetController.php
+++ b/src/Controller/ActionSetController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\business_rules\Controller;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Ajax\UpdateFlowchartCommand;
 use Drupal\business_rules\BusinessRulesItemObject;
@@ -27,7 +31,7 @@ class ActionSetController extends ControllerBase {
   /**
    * The EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -48,7 +52,7 @@ class ActionSetController extends ControllerBase {
   /**
    * All saved items from database.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]|static[]
+   * @var EntityInterface[]|static[]
    */
   protected $items;
 
@@ -62,14 +66,14 @@ class ActionSetController extends ControllerBase {
   /**
    * The item label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $label;
 
   /**
    * The item label in plural.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $labelPlural;
 
@@ -83,7 +87,7 @@ class ActionSetController extends ControllerBase {
   /**
    * Business Rules Util service.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;
 
@@ -110,7 +114,7 @@ class ActionSetController extends ControllerBase {
    * @param string $item_id
    *   The item id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The RedirectResponse.
    */
   public function addItem($action_id, $item_id) {
@@ -134,7 +138,7 @@ class ActionSetController extends ControllerBase {
   /**
    * Get the bigger weight for the action items.
    *
-   * @param \Drupal\business_rules\ActionInterface $action
+   * @param ActionInterface $action
    *   The action to get the bigger item weight.
    *
    * @return int
@@ -164,7 +168,7 @@ class ActionSetController extends ControllerBase {
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   Render array or AjaxResponse.
    */
   public function itemsTable($action_id, $method) {
@@ -212,7 +216,7 @@ class ActionSetController extends ControllerBase {
     ];
 
     $rows = [];
-    /** @var \Drupal\business_rules\Entity\Action $item */
+    /** @var Action $item */
     foreach ($this->items as $item) {
       if (!in_array($item->id(), array_keys($this->savedItems)) && $item->id() != $action->id()) {
 
@@ -273,7 +277,7 @@ class ActionSetController extends ControllerBase {
   /**
    * Init properties.
    *
-   * @param \Drupal\business_rules\Entity\Action $action
+   * @param Action $action
    *   The ActionSet action.
    */
   public function init(Action $action) {
@@ -294,7 +298,7 @@ class ActionSetController extends ControllerBase {
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   The AjaxResponse or the RedirectResponse.
    */
   public function removeItem($action_id, $item_id, $method) {
diff --git a/src/Controller/AutocompleteTags.php b/src/Controller/AutocompleteTags.php
index 8142706..31dad9f 100644
--- a/src/Controller/AutocompleteTags.php
+++ b/src/Controller/AutocompleteTags.php
@@ -21,10 +21,10 @@ class AutocompleteTags extends ControllerBase {
   /**
    * Handler for autocomplete request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matched values.
    */
   public function handleAutocomplete(Request $request) {
diff --git a/src/Controller/BusinessRuleController.php b/src/Controller/BusinessRuleController.php
index 557d7ef..838dbbf 100644
--- a/src/Controller/BusinessRuleController.php
+++ b/src/Controller/BusinessRuleController.php
@@ -14,10 +14,10 @@ class BusinessRuleController extends ControllerBase {
   /**
    * Disables a BusinessRule object.
    *
-   * @param \Drupal\business_rules\Entity\BusinessRule $business_rule
+   * @param BusinessRule $business_rule
    *   The BusinessRule object to disable.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response to the config_test listing page.
    */
   public function disable(BusinessRule $business_rule) {
@@ -29,10 +29,10 @@ class BusinessRuleController extends ControllerBase {
   /**
    * Enables a BusinessRule object.
    *
-   * @param \Drupal\business_rules\Entity\BusinessRule $business_rule
+   * @param BusinessRule $business_rule
    *   The BusinessRule object to disable.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response to the config_test listing page.
    */
   public function enable(BusinessRule $business_rule) {
diff --git a/src/Controller/BusinessRulesItemsController.php b/src/Controller/BusinessRulesItemsController.php
index afe7f42..8e8916f 100644
--- a/src/Controller/BusinessRulesItemsController.php
+++ b/src/Controller/BusinessRulesItemsController.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\business_rules\Controller;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\business_rules\Util\Flowchart\Flowchart;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\business_rules\Ajax\UpdateFlowchartCommand;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
@@ -27,14 +32,14 @@ class BusinessRulesItemsController extends ControllerBase {
   /**
    * The EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Business Rules Flowchart.
    *
-   * @var \Drupal\business_rules\Util\Flowchart\Flowchart
+   * @var Flowchart
    */
   protected $flowchart;
 
@@ -56,7 +61,7 @@ class BusinessRulesItemsController extends ControllerBase {
   /**
    * All saved items from database.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]|static[]
+   * @var EntityInterface[]|static[]
    */
   protected $items;
 
@@ -70,21 +75,21 @@ class BusinessRulesItemsController extends ControllerBase {
   /**
    * The item label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $label;
 
   /**
    * The item label in plural.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $labelPlural;
 
   /**
    * The add new item button.
    *
-   * @var \Drupal\Core\Link
+   * @var Link
    */
   protected $newItemButton;
 
@@ -98,7 +103,7 @@ class BusinessRulesItemsController extends ControllerBase {
   /**
    * The Business Rules Util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;
 
@@ -128,7 +133,7 @@ class BusinessRulesItemsController extends ControllerBase {
    * @param string $item_id
    *   The item id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The RedirectResponse.
    */
   public function addItem($business_rule, $item_type, $item_id) {
@@ -161,7 +166,7 @@ class BusinessRulesItemsController extends ControllerBase {
    */
   public function itemsTable($business_rule, $item_type, $method) {
     $this->init($item_type);
-    /** @var \Drupal\business_rules\Entity\BusinessRule $rule */
+    /** @var BusinessRule $rule */
     $rule             = BusinessRule::load($business_rule);
     $this->items      = $rule->filterContextAvailableItems($this->items);
     $this->savedItems = $rule->getItems();
@@ -356,7 +361,7 @@ class BusinessRulesItemsController extends ControllerBase {
    * @param string $method
    *   The method ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   The AjaxResponse or the RedirectResponse.
    */
   public function removeItem($business_rule, $item_type, $item_id, $method) {
diff --git a/src/Controller/ConditionSetController.php b/src/Controller/ConditionSetController.php
index 9415406..7fd2230 100644
--- a/src/Controller/ConditionSetController.php
+++ b/src/Controller/ConditionSetController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\business_rules\Controller;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\business_rules\Ajax\UpdateFlowchartCommand;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\ConditionInterface;
@@ -27,7 +31,7 @@ class ConditionSetController extends ControllerBase {
   /**
    * The EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -48,7 +52,7 @@ class ConditionSetController extends ControllerBase {
   /**
    * All saved items from database.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]|static[]
+   * @var EntityInterface[]|static[]
    */
   protected $items;
 
@@ -62,14 +66,14 @@ class ConditionSetController extends ControllerBase {
   /**
    * The item label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $label;
 
   /**
    * The item label in plural.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $labelPlural;
 
@@ -83,7 +87,7 @@ class ConditionSetController extends ControllerBase {
   /**
    * Business Rules Util service.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;
 
@@ -110,7 +114,7 @@ class ConditionSetController extends ControllerBase {
    * @param string $item_id
    *   The item.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The RedirectResponse.
    */
   public function addItem($condition_id, $item_id) {
@@ -134,7 +138,7 @@ class ConditionSetController extends ControllerBase {
   /**
    * Get the bigger weight for the condition items.
    *
-   * @param \Drupal\business_rules\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   The condition to get the bigger item weight.
    *
    * @return int
@@ -164,7 +168,7 @@ class ConditionSetController extends ControllerBase {
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   Render array or AjaxResponse.
    */
   public function itemsTable($condition_id, $method) {
@@ -212,7 +216,7 @@ class ConditionSetController extends ControllerBase {
     ];
 
     $rows = [];
-    /** @var \Drupal\business_rules\Entity\Condition $item */
+    /** @var Condition $item */
     foreach ($this->items as $item) {
       if (!in_array($item->id(), array_keys($this->savedItems)) && $item->id() != $condition->id()) {
 
@@ -273,7 +277,7 @@ class ConditionSetController extends ControllerBase {
   /**
    * Init properties.
    *
-   * @param \Drupal\business_rules\Entity\Condition $condition
+   * @param Condition $condition
    *   The ActionSet action.
    */
   public function init(Condition $condition) {
@@ -294,7 +298,7 @@ class ConditionSetController extends ControllerBase {
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   The AjaxResponse or the RedirectResponse.
    */
   public function removeItem($condition_id, $item_id, $method) {
diff --git a/src/Controller/ConditionsItemsController.php b/src/Controller/ConditionsItemsController.php
index a4dd658..fed107d 100644
--- a/src/Controller/ConditionsItemsController.php
+++ b/src/Controller/ConditionsItemsController.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\business_rules\Controller;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\business_rules\Util\Flowchart\Flowchart;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\business_rules\ConditionInterface;
 use Drupal\business_rules\Ajax\UpdateFlowchartCommand;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
@@ -26,14 +31,14 @@ class ConditionsItemsController extends ControllerBase {
   /**
    * The EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Business Rules Flowchart.
    *
-   * @var \Drupal\business_rules\Util\Flowchart\Flowchart
+   * @var Flowchart
    */
   protected $flowchart;
 
@@ -54,7 +59,7 @@ class ConditionsItemsController extends ControllerBase {
   /**
    * All saved items from database.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]|static[]
+   * @var EntityInterface[]|static[]
    */
   protected $items;
 
@@ -68,14 +73,14 @@ class ConditionsItemsController extends ControllerBase {
   /**
    * The item label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $label;
 
   /**
    * The item label in plural.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $labelPlural;
 
@@ -149,13 +154,13 @@ class ConditionsItemsController extends ControllerBase {
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   Render array or AjaxResponse.
    */
   public function itemsTable($condition_id, $condition_item_type, $item_type, $method) {
 
     $this->init($item_type);
-    /** @var \Drupal\business_rules\ConditionInterface $condition */
+    /** @var ConditionInterface $condition */
     $condition   = Condition::load($condition_id);
     $this->items = $condition->filterContextAvailableItems($this->items);
 
@@ -313,7 +318,7 @@ class ConditionsItemsController extends ControllerBase {
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Zend\Diactoros\Response\RedirectResponse
+   * @return AjaxResponse|\Zend\Diactoros\Response\RedirectResponse
    *   The AjaxResponse or the RedirectResponse.
    */
   public function removeItem($condition_id, $condition_item_type, $item_type, $item_id, $method) {
diff --git a/src/Controller/LoopThroughViewResultController.php b/src/Controller/LoopThroughViewResultController.php
index f4b3e9a..af23b21 100644
--- a/src/Controller/LoopThroughViewResultController.php
+++ b/src/Controller/LoopThroughViewResultController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\business_rules\Controller;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\business_rules\ItemInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
@@ -25,7 +29,7 @@ class LoopThroughViewResultController extends ControllerBase {
   /**
    * The EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -46,7 +50,7 @@ class LoopThroughViewResultController extends ControllerBase {
   /**
    * All saved items from database.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]|static[]
+   * @var EntityInterface[]|static[]
    */
   protected $items;
 
@@ -60,14 +64,14 @@ class LoopThroughViewResultController extends ControllerBase {
   /**
    * The item label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $label;
 
   /**
    * The item label in plural.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $labelPlural;
 
@@ -126,7 +130,7 @@ class LoopThroughViewResultController extends ControllerBase {
   /**
    * Get the bigger weight for the action items.
    *
-   * @param \Drupal\business_rules\ActionInterface $action
+   * @param ActionInterface $action
    *   The action to get the bigger item weight.
    *
    * @return int
@@ -158,13 +162,13 @@ class LoopThroughViewResultController extends ControllerBase {
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   Render array or AjaxResponse.
    */
   public function itemsTable($action_id, $item_type, $method) {
 
     $this->init($item_type);
-    /** @var \Drupal\business_rules\ActionInterface $action */
+    /** @var ActionInterface $action */
     $action = Action::load($action_id);
 
     $table['#title'] = $this->t('Add @label_plural on %action', [
@@ -207,7 +211,7 @@ class LoopThroughViewResultController extends ControllerBase {
     ];
 
     $rows = [];
-    /** @var \Drupal\business_rules\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach ($this->items as $item) {
       if (!in_array($item->id(), array_keys($this->savedItems)) && $item->id() != $action->id()) {
 
@@ -307,7 +311,7 @@ class LoopThroughViewResultController extends ControllerBase {
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Zend\Diactoros\Response\RedirectResponse
+   * @return AjaxResponse|\Zend\Diactoros\Response\RedirectResponse
    *   The AjaxResponse or the RedirectResponse.
    */
   public function removeItem($action_id, $item_type, $item_id, $method) {
diff --git a/src/Controller/ModalController.php b/src/Controller/ModalController.php
index fd122c2..1c72374 100644
--- a/src/Controller/ModalController.php
+++ b/src/Controller/ModalController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Controller;
 
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
 use Drupal\Core\Controller\ControllerBase;
@@ -19,7 +20,7 @@ class ModalController extends ControllerBase {
   /**
    * The BusinessRulesUtil.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;
 
@@ -49,7 +50,7 @@ class ModalController extends ControllerBase {
    * @param string $method
    *   The method tho show the content: ajax|nojs.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   The help content.
    */
   public function modal($collection, $key, $title, $method) {
diff --git a/src/Controller/ScheduleController.php b/src/Controller/ScheduleController.php
index 24ec7b9..889b25e 100644
--- a/src/Controller/ScheduleController.php
+++ b/src/Controller/ScheduleController.php
@@ -28,7 +28,7 @@ class ScheduleController extends ControllerBase implements ContainerInjectionInt
   /**
    * A dateFormatter object.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   private $dateFormatter;
 
@@ -106,13 +106,13 @@ class ScheduleController extends ControllerBase implements ContainerInjectionInt
    * @param string $business_rules_schedule
    *   The business_rules_schedule id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The redirect response.
    */
   public function execute($business_rules_schedule) {
     $task = Schedule::load($business_rules_schedule);
 
-    /** @var \Drupal\business_rules\Entity\Action $action */
+    /** @var Action $action */
     $action    = $task->getTriggeredBy();
     $items     = $action->getSettings('items');
     $container = \Drupal::getContainer();
diff --git a/src/Controller/ScheduleTaskController.php b/src/Controller/ScheduleTaskController.php
index afa867c..d7620ff 100644
--- a/src/Controller/ScheduleTaskController.php
+++ b/src/Controller/ScheduleTaskController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\business_rules\Controller;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Ajax\UpdateFlowchartCommand;
 use Drupal\business_rules\BusinessRulesItemObject;
@@ -27,7 +31,7 @@ class ScheduleTaskController extends ControllerBase {
   /**
    * The EntityTypeManager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -48,7 +52,7 @@ class ScheduleTaskController extends ControllerBase {
   /**
    * All saved items from database.
    *
-   * @var \Drupal\Core\Entity\EntityInterface[]|static[]
+   * @var EntityInterface[]|static[]
    */
   protected $items;
 
@@ -62,14 +66,14 @@ class ScheduleTaskController extends ControllerBase {
   /**
    * The item label.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $label;
 
   /**
    * The item label in plural.
    *
-   * @var \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @var TranslatableMarkup
    */
   protected $labelPlural;
 
@@ -83,7 +87,7 @@ class ScheduleTaskController extends ControllerBase {
   /**
    * Business Rules Util service.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;
 
@@ -112,7 +116,7 @@ class ScheduleTaskController extends ControllerBase {
    * @param string $item_id
    *   The item id.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   The RedirectResponse.
    */
   public function addItem($action_id, $item_type, $item_id) {
@@ -136,7 +140,7 @@ class ScheduleTaskController extends ControllerBase {
   /**
    * Get the bigger weight for the action items.
    *
-   * @param \Drupal\business_rules\ActionInterface $action
+   * @param ActionInterface $action
    *   The action to get the bigger item weight.
    *
    * @return int
@@ -168,7 +172,7 @@ class ScheduleTaskController extends ControllerBase {
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return array|\Drupal\Core\Ajax\AjaxResponse
+   * @return array|AjaxResponse
    *   Render array or AjaxResponse.
    */
   public function itemsTable($action_id, $item_type, $method) {
@@ -216,7 +220,7 @@ class ScheduleTaskController extends ControllerBase {
     ];
 
     $rows = [];
-    /** @var \Drupal\business_rules\Entity\Action $item */
+    /** @var Action $item */
     foreach ($this->items as $item) {
       if (!in_array($item->id(), array_keys($this->savedItems)) && $item->id() != $action->id()) {
 
@@ -333,7 +337,7 @@ class ScheduleTaskController extends ControllerBase {
    * @param string $method
    *   The method name: ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   The AjaxResponse or the RedirectResponse.
    */
   public function removeItem($action_id, $item_id, $method) {
diff --git a/src/Entity/Action.php b/src/Entity/Action.php
index 5896696..b2178e6 100644
--- a/src/Entity/Action.php
+++ b/src/Entity/Action.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Entity;
 
+use Drupal\business_rules\Plugin\BusinessRulesActionPlugin;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Events\BusinessRulesEvent;
@@ -111,7 +112,7 @@ class Action extends BusinessRulesItemBase implements ActionInterface {
   public function execute(BusinessRulesEvent $event) {
     $action_type = $this->itemManager->getDefinition($this->getType());
     $reflection = new \ReflectionClass($action_type['class']);
-    /** @var \Drupal\business_rules\Plugin\BusinessRulesActionPlugin $defined_action */
+    /** @var BusinessRulesActionPlugin $defined_action */
     $defined_action = $reflection->newInstance($action_type, $action_type['id'], $action_type);
     $action         = Action::load($this->id());
     $defined_action->processTokens($action, $event);
diff --git a/src/Entity/BusinessRule.php b/src/Entity/BusinessRule.php
index 3f417e0..c435fce 100644
--- a/src/Entity/BusinessRule.php
+++ b/src/Entity/BusinessRule.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\business_rules\Entity;
 
+use Drupal\business_rules\Plugin\BusinessRulesReactsOnManager;
+use Drupal\Core\Config\ConfigFactory;
+use Drupal\business_rules\Util\BusinessRulesUtil;
+use Drupal\business_rules\ItemInterface;
 use Drupal\business_rules\BusinessRuleInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ -71,14 +75,14 @@ class BusinessRule extends ConfigEntityBase implements BusinessRuleInterface {
   /**
    * The reactsOnManger.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesReactsOnManager
+   * @var BusinessRulesReactsOnManager
    */
   protected static $reactsOnManager;
 
   /**
    * The ConfigFactory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
@@ -148,7 +152,7 @@ class BusinessRule extends ConfigEntityBase implements BusinessRuleInterface {
   /**
    * The Business Rules Util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;
 
@@ -464,8 +468,7 @@ class BusinessRule extends ConfigEntityBase implements BusinessRuleInterface {
    */
   public function filterContextAvailableItems(array $items) {
 
-    /** @var \Drupal\business_rules\ItemInterface $value */
-
+    /** @var ItemInterface $value */
     $entity_type     = $this->getTargetEntityType();
     $bundle          = $this->getTargetBundle();
     $available_items = [];
@@ -494,7 +497,7 @@ class BusinessRule extends ConfigEntityBase implements BusinessRuleInterface {
   public function calculateDependencies() {
     parent::calculateDependencies();
 
-    /** @var \Drupal\business_rules\BusinessRulesItemObject $item */
+    /** @var BusinessRulesItemObject $item */
     foreach ($this->getItems() as $item) {
       $this->addDependency('config', $item->loadEntity()->getConfigDependencyName());
     }
diff --git a/src/Entity/BusinessRulesItemBase.php b/src/Entity/BusinessRulesItemBase.php
index b01ec23..f81c189 100644
--- a/src/Entity/BusinessRulesItemBase.php
+++ b/src/Entity/BusinessRulesItemBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\business_rules\Entity;
 
+use Symfony\Component\EventDispatcher\EventDispatcher;
+use Drupal\Core\Plugin\DefaultPluginManager;
+use Drupal\business_rules\Util\BusinessRulesUtil;
+use Drupal\business_rules\Plugin\BusinessRulesItemPluginBase;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ -23,7 +27,7 @@ abstract class BusinessRulesItemBase extends ConfigEntityBase implements ItemInt
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;
 
@@ -37,7 +41,7 @@ abstract class BusinessRulesItemBase extends ConfigEntityBase implements ItemInt
   /**
    * Item plugin manager.
    *
-   * @var \Drupal\Core\Plugin\DefaultPluginManager
+   * @var DefaultPluginManager
    */
   protected $itemManager;
 
@@ -86,7 +90,7 @@ abstract class BusinessRulesItemBase extends ConfigEntityBase implements ItemInt
   /**
    * The Business Rules Util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;
 
@@ -104,7 +108,7 @@ abstract class BusinessRulesItemBase extends ConfigEntityBase implements ItemInt
   /**
    * Get the plugin manager.
    *
-   * @return \Drupal\Core\Plugin\DefaultPluginManager
+   * @return DefaultPluginManager
    *   The plugin manager to be used.
    */
   abstract public function getItemManager();
@@ -270,7 +274,7 @@ abstract class BusinessRulesItemBase extends ConfigEntityBase implements ItemInt
   public static function loadMultipleByType($type, array $ids = NULL) {
     $items = self::loadMultiple($ids);
     $result = [];
-    /** @var \Drupal\business_rules\ItemInterface $item */
+    /** @var ItemInterface $item */
     foreach ($items as $item) {
       if ($item->getType() == $type) {
         $result[] = $item;
@@ -298,7 +302,7 @@ abstract class BusinessRulesItemBase extends ConfigEntityBase implements ItemInt
   public static function loadAllTags() {
     $business_rules = self::loadMultiple();
     $tags           = [];
-    /** @var \Drupal\business_rules\Entity\BusinessRule $business_rule */
+    /** @var BusinessRule $business_rule */
     foreach ($business_rules as $business_rule) {
       if (count($business_rule->getTags())) {
         foreach ($business_rule->getTags() as $key => $value) {
@@ -322,7 +326,7 @@ abstract class BusinessRulesItemBase extends ConfigEntityBase implements ItemInt
     if (!$this->isNew()) {
       // Dispatch an event about the item deletion.
       $event = new BusinessRulesEvent($this);
-      $this->eventDispatcher->dispatch('business_rules.item_pos_delete', $event);
+      $this->eventDispatcher->dispatch($event, 'business_rules.item_pos_delete');
     }
   }
 
@@ -334,11 +338,11 @@ abstract class BusinessRulesItemBase extends ConfigEntityBase implements ItemInt
 
     $plugin_type = $this->itemManager->getDefinition($this->getType());
     $reflection = new \ReflectionClass($plugin_type['class']);
-    /** @var \Drupal\business_rules\Plugin\BusinessRulesItemPluginBase $defined_item */
+    /** @var BusinessRulesItemPluginBase $defined_item */
     $defined_item = $reflection->newInstance($plugin_type, $plugin_type['id'], $plugin_type);
 
     foreach ($defined_item->getVariables($this)->getVariablesIds() as $id) {
-      /** @var \Drupal\business_rules\Entity\Variable $variable */
+      /** @var Variable $variable */
       if ($variable = Variable::load($id)) {
         $this->addDependency('config', $variable->getConfigDependencyName());
       }
diff --git a/src/Entity/Condition.php b/src/Entity/Condition.php
index 52b227f..a1eb851 100644
--- a/src/Entity/Condition.php
+++ b/src/Entity/Condition.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\business_rules\Entity;
 
+use Drupal\business_rules\ItemInterface;
+use Drupal\business_rules\Plugin\BusinessRulesConditionPlugin;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\ConditionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
@@ -173,7 +175,7 @@ class Condition extends BusinessRulesItemBase implements ConditionInterface {
    */
   public function filterContextAvailableItems(array $items) {
 
-    /** @var \Drupal\business_rules\ItemInterface $value */
+    /** @var ItemInterface $value */
     $entity_type     = $this->getTargetEntityType();
     $bundle          = $this->getTargetBundle();
     $available_items = [];
@@ -241,7 +243,7 @@ class Condition extends BusinessRulesItemBase implements ConditionInterface {
   public function process(BusinessRulesEvent $event) {
     $condition_type = $this->itemManager->getDefinition($this->getType());
     $reflection     = new \ReflectionClass($condition_type['class']);
-    /** @var \Drupal\business_rules\Plugin\BusinessRulesConditionPlugin $defined_condition */
+    /** @var BusinessRulesConditionPlugin $defined_condition */
     $defined_condition = $reflection->newInstance($condition_type, $condition_type['id'], $condition_type);
     $condition         = Condition::load($this->id());
     $defined_condition->processTokens($condition, $event);
@@ -255,7 +257,7 @@ class Condition extends BusinessRulesItemBase implements ConditionInterface {
   public function calculateDependencies() {
     parent::calculateDependencies();
 
-    /** @var \Drupal\business_rules\BusinessRulesItemObject $item */
+    /** @var BusinessRulesItemObject $item */
     foreach (array_merge($this->getSuccessItems(), $this->getFailItems()) as $item) {
       $this->addDependency('config', $item->loadEntity()->getConfigDependencyName());
     }
diff --git a/src/Entity/Schedule.php b/src/Entity/Schedule.php
index 528ad68..d659a70 100644
--- a/src/Entity/Schedule.php
+++ b/src/Entity/Schedule.php
@@ -418,7 +418,7 @@ class Schedule extends RevisionableContentEntityBase implements ScheduleInterfac
       if (count($tasks)) {
         /** @var \Drupal\business_rules\Entity\Schedule $task */
         foreach ($tasks as $task) {
-          /** @var \Drupal\business_rules\Entity\Action $action */
+          /** @var Action $action */
           $action = $task->getTriggeredBy();
           $items = $action->getSettings('items');
           $task_event = $task->getEvent();
diff --git a/src/Entity/ScheduleInterface.php b/src/Entity/ScheduleInterface.php
index 4c5cd8f..627f1ec 100644
--- a/src/Entity/ScheduleInterface.php
+++ b/src/Entity/ScheduleInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ -94,7 +95,7 @@ interface ScheduleInterface extends ContentEntityInterface, RevisionLogInterface
   /**
    * Gets the Schedule revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
@@ -151,7 +152,7 @@ interface ScheduleInterface extends ContentEntityInterface, RevisionLogInterface
   /**
    * Get the Business Rule which has triggered this schedule.
    *
-   * @return \Drupal\business_rules\Entity\BusinessRule|null
+   * @return BusinessRule|null
    *   The Business Rule or null.
    */
   public function getTriggeredBy();
@@ -159,7 +160,7 @@ interface ScheduleInterface extends ContentEntityInterface, RevisionLogInterface
   /**
    * Set the Business Rule which has triggered this schedule.
    *
-   * @param \Drupal\business_rules\Entity\BusinessRulesItemBase $businessRuleItem
+   * @param BusinessRulesItemBase $businessRuleItem
    *   The Business Rule item.
    *
    * @return \Drupal\business_rules\Entity\ScheduleInterface
@@ -175,7 +176,7 @@ interface ScheduleInterface extends ContentEntityInterface, RevisionLogInterface
    * @param string $triggeredBy
    *   The triggered by Business Rule item.
    *
-   * @return \Drupal\business_rules\Entity\Schedule
+   * @return Schedule
    *   The schedule entity.
    */
   public static function loadByNameAndTriggeredBy($name, $triggeredBy);
@@ -183,7 +184,7 @@ interface ScheduleInterface extends ContentEntityInterface, RevisionLogInterface
   /**
    * Execute the scheduled tasks.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The cron event.
    */
   public static function executeSchedule(BusinessRulesEvent $event);
@@ -191,7 +192,7 @@ interface ScheduleInterface extends ContentEntityInterface, RevisionLogInterface
   /**
    * Set the event.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event that has created the schedule.
    */
   public function setEvent(BusinessRulesEvent $event);
@@ -199,7 +200,7 @@ interface ScheduleInterface extends ContentEntityInterface, RevisionLogInterface
   /**
    * Get the event.
    *
-   * @return \Drupal\business_rules\Events\BusinessRulesEvent
+   * @return BusinessRulesEvent
    *   The event that has created the schedule.
    */
   public function getEvent();
diff --git a/src/Entity/Variable.php b/src/Entity/Variable.php
index 8303f17..b4336ee 100644
--- a/src/Entity/Variable.php
+++ b/src/Entity/Variable.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Entity;
 
+use Drupal\business_rules\Plugin\BusinessRulesVariablePluginInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\VariableInterface;
 
@@ -96,7 +97,7 @@ class Variable extends BusinessRulesItemBase implements VariableInterface {
   public function evaluate(BusinessRulesEvent $event) {
     $variable_type = $this->itemManager->getDefinition($this->getType());
     $reflection    = new \ReflectionClass($variable_type['class']);
-    /** @var \Drupal\business_rules\Plugin\BusinessRulesVariablePluginInterface $defined_variable */
+    /** @var BusinessRulesVariablePluginInterface $defined_variable */
     $defined_variable = $reflection->newInstance($variable_type, $variable_type['id'], $variable_type);
     $variable         = Variable::load($this->id());
     $defined_variable->processTokens($variable, $event);
diff --git a/src/EventSubscriber/BusinessRulesListener.php b/src/EventSubscriber/BusinessRulesListener.php
index 207eba7..e78c7b8 100644
--- a/src/EventSubscriber/BusinessRulesListener.php
+++ b/src/EventSubscriber/BusinessRulesListener.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\Events\BusinessRulesDrushEvent;
 use Drupal\business_rules\Util\BusinessRulesProcessor;
@@ -11,7 +12,6 @@ use Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
@@ -26,42 +26,42 @@ class BusinessRulesListener implements EventSubscriberInterface {
   /**
    * The container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   private static $container;
 
   /**
    * The business rule processor.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesProcessor
+   * @var BusinessRulesProcessor
    */
   private $processor;
 
   /**
    * The Business Rules Util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   private $util;
 
   /**
    * The eventDispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * A LoggerFactory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerChannelFactory;
 
   /**
    * A ModuleHandler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
@@ -81,15 +81,15 @@ class BusinessRulesListener implements EventSubscriberInterface {
   /**
    * BusinessRulesListener constructor.
    *
-   * @param \Drupal\business_rules\Util\BusinessRulesProcessor $processor
+   * @param BusinessRulesProcessor $processor
    *   The business rule processor service.
-   * @param \Drupal\business_rules\Util\BusinessRulesUtil $util
+   * @param BusinessRulesUtil $util
    *   The business rule util.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   The logger channel.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The logger channel.
    */
   public function __construct(BusinessRulesProcessor $processor, BusinessRulesUtil $util, EventDispatcherInterface $eventDispatcher, LoggerChannelFactoryInterface $loggerChannelFactory, ModuleHandlerInterface $moduleHandler) {
@@ -103,7 +103,7 @@ class BusinessRulesListener implements EventSubscriberInterface {
   /**
    * Sets the container.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface|null $container
+   * @param ContainerInterface|null $container
    *   A ContainerInterface instance or null.
    */
   public static function setContainer(ContainerInterface $container = NULL) {
@@ -184,7 +184,7 @@ class BusinessRulesListener implements EventSubscriberInterface {
   /**
    * Rebuilds container when dynamic rule eventsubscribers are not registered.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The event object.
    * @param string $event_name
    *   The event name.
@@ -200,7 +200,7 @@ class BusinessRulesListener implements EventSubscriberInterface {
   /**
    * Process the rules.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event to be processed.
    */
   public function process(BusinessRulesEvent $event) {
@@ -210,7 +210,7 @@ class BusinessRulesListener implements EventSubscriberInterface {
   /**
    * Remove the item references.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    */
   public function itemPosDelete(BusinessRulesEvent $event) {
@@ -220,7 +220,7 @@ class BusinessRulesListener implements EventSubscriberInterface {
   /**
    * Run the necessary commands on terminate event.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The terminate event.
    */
   public function onTerminate(Event $event) {
diff --git a/src/EventSubscriber/KernelRequestListener.php b/src/EventSubscriber/KernelRequestListener.php
index f06c8bd..6ae5ab9 100644
--- a/src/EventSubscriber/KernelRequestListener.php
+++ b/src/EventSubscriber/KernelRequestListener.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\business_rules\EventSubscriber;
 
+use Symfony\Contracts\EventDispatcher\Event;
+use Symfony\Component\EventDispatcher\EventDispatcher;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Symfony\Component\DependencyInjection\ContainerAwareInterface;
 use Symfony\Component\DependencyInjection\ContainerAwareTrait;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\KernelEvents;
 
@@ -31,7 +32,7 @@ class KernelRequestListener implements EventSubscriberInterface, ContainerAwareI
   /**
    * Create a new event for BusinessRules plugin KernelRequest.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The event.
    */
   public function onKernelRequest(Event $event) {
@@ -47,7 +48,7 @@ class KernelRequestListener implements EventSubscriberInterface, ContainerAwareI
       'entity_unchanged' => NULL,
       'reacts_on'        => $reacts_on_definition,
     ]);
-    /** @var \Symfony\Component\EventDispatcher\EventDispatcher $event_dispatcher */
+    /** @var EventDispatcher $event_dispatcher */
     $event_dispatcher = $this->container->get('event_dispatcher');
     $event_dispatcher->dispatch($reacts_on_definition['eventName'], $new_event);
   }
diff --git a/src/Form/ActionDeleteForm.php b/src/Form/ActionDeleteForm.php
index 04df4fa..728f08c 100644
--- a/src/Form/ActionDeleteForm.php
+++ b/src/Form/ActionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Form;
 
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -24,7 +25,7 @@ class ActionDeleteForm extends EntityConfirmFormBase {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\business_rules\Util\BusinessRulesUtil $util */
+    /** @var BusinessRulesUtil $util */
     $util                               = \Drupal::service('business_rules.util');
     $form['rules_using_this_item']      = $util->getUsedByBusinessRulesDetailsBox($this->entity);
     $form['conditions_using_this_item'] = $util->getUsedByConditionsDetailsBox($this->entity);
diff --git a/src/Form/BusinessRuleForm.php b/src/Form/BusinessRuleForm.php
index 03b2b84..8dbd3f7 100644
--- a/src/Form/BusinessRuleForm.php
+++ b/src/Form/BusinessRuleForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\business_rules\Form;
 
+use Drupal\business_rules\Util\BusinessRulesUtil;
+use Drupal\business_rules\Plugin\BusinessRulesReactsOnManager;
+use Drupal\business_rules\Util\Flowchart\Flowchart;
+use Drupal\business_rules\BusinessRuleInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
 use Drupal\business_rules\Entity\BusinessRule;
@@ -25,14 +29,14 @@ class BusinessRuleForm extends EntityForm {
   /**
    * The business rules Util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   public $util;
 
   /**
    * The reactsOnManager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesReactsOnManager
+   * @var BusinessRulesReactsOnManager
    */
   protected $reactsOnManager;
 
@@ -46,7 +50,7 @@ class BusinessRuleForm extends EntityForm {
   /**
    * The Business Rule flowchart.
    *
-   * @var \Drupal\business_rules\Util\Flowchart\Flowchart
+   * @var Flowchart
    */
   private $chart;
 
@@ -60,7 +64,7 @@ class BusinessRuleForm extends EntityForm {
   /**
    * BusinessRuleForm constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The services container.
    */
   public function __construct(ContainerInterface $container) {
@@ -83,7 +87,7 @@ class BusinessRuleForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\business_rules\Entity\BusinessRule $business_rule */
+    /** @var BusinessRule $business_rule */
     $business_rule = $this->entity;
 
     if ($this->step === 1 && $business_rule->isNew()) {
@@ -204,7 +208,7 @@ class BusinessRuleForm extends EntityForm {
 
     $form = [];
 
-    /** @var \Drupal\business_rules\BusinessRuleInterface $rule */
+    /** @var BusinessRuleInterface $rule */
     $rule = $this->entity;
 
     $show_entity = FALSE;
@@ -264,7 +268,7 @@ class BusinessRuleForm extends EntityForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ -273,7 +277,7 @@ class BusinessRuleForm extends EntityForm {
   public function formItems(array $form, FormStateInterface $form_state) {
     $user_input = $form_state->getUserInput();
 
-    /** @var \Drupal\business_rules\Entity\BusinessRule $rule */
+    /** @var BusinessRule $rule */
     $rule = $this->entity;
 
     $label        = $this->t('Item');
@@ -487,7 +491,7 @@ class BusinessRuleForm extends EntityForm {
       return $form;
     }
     else {
-      /** @var \Drupal\business_rules\Entity\BusinessRule $business_rule */
+      /** @var BusinessRule $business_rule */
       $business_rule = $this->entity;
 
       $items = $form_state->getValue('items');
@@ -560,10 +564,10 @@ class BusinessRuleForm extends EntityForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AjaxResponse.
    */
   public function targetEntityTypeCallback(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/ConditionDeleteForm.php b/src/Form/ConditionDeleteForm.php
index e1ffbf3..8ac67cd 100644
--- a/src/Form/ConditionDeleteForm.php
+++ b/src/Form/ConditionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Form;
 
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -24,7 +25,7 @@ class ConditionDeleteForm extends EntityConfirmFormBase {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\business_rules\Util\BusinessRulesUtil $util */
+    /** @var BusinessRulesUtil $util */
     $util                               = \Drupal::service('business_rules.util');
     $form['rules_using_this_item']      = $util->getUsedByBusinessRulesDetailsBox($this->entity);
     $form['conditions_using_this_item'] = $util->getUsedByConditionsDetailsBox($this->entity);
diff --git a/src/Form/ConditionForm.php b/src/Form/ConditionForm.php
index 09965e4..5ed5c38 100644
--- a/src/Form/ConditionForm.php
+++ b/src/Form/ConditionForm.php
@@ -94,7 +94,7 @@ class ConditionForm extends ItemForm {
   /**
    * Check if one condition is part of a conditions set.
    *
-   * @param \Drupal\business_rules\Entity\Condition $condition
+   * @param Condition $condition
    *   The condition.
    *
    * @return bool
@@ -105,7 +105,7 @@ class ConditionForm extends ItemForm {
     $conditions = array_merge($conditions, Condition::loadMultipleByType('logical_or'));
 
     $items = [];
-    /** @var \Drupal\business_rules\Entity\Condition $c */
+    /** @var Condition $c */
     foreach ($conditions as $c) {
       if (is_array($c->getSettings('items'))) {
         $items = array_merge($items, $c->getSettings('items'));
@@ -128,7 +128,7 @@ class ConditionForm extends ItemForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    * @param string $items_type
    *   The items type: success|fail.
@@ -138,7 +138,7 @@ class ConditionForm extends ItemForm {
    */
   public function formItems(array $form, FormStateInterface $form_state, $items_type) {
 
-    /** @var \Drupal\business_rules\Entity\Condition $condition */
+    /** @var Condition $condition */
     $condition = $this->entity;
 
     $user_input = $form_state->getUserInput();
@@ -332,7 +332,7 @@ class ConditionForm extends ItemForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\business_rules\Entity\Condition $condition */
+    /** @var Condition $condition */
     $condition = $this->entity;
     if (!$condition->isNew()) {
       $success_items = $form_state->getValue('success');
diff --git a/src/Form/ItemForm.php b/src/Form/ItemForm.php
index dcdee83..0634e3d 100644
--- a/src/Form/ItemForm.php
+++ b/src/Form/ItemForm.php
@@ -2,6 +2,12 @@
 
 namespace Drupal\business_rules\Form;
 
+use Drupal\business_rules\Util\BusinessRulesUtil;
+use Drupal\business_rules\Plugin\BusinessRulesVariableManager;
+use Drupal\business_rules\Util\Flowchart\Flowchart;
+use Drupal\business_rules\ItemInterface;
+use Drupal\Core\Plugin\DefaultPluginManager;
+use Drupal\Core\GeneratedLink;
 use Drupal\business_rules\Entity\Action;
 use Drupal\business_rules\Entity\Condition;
 use Drupal\business_rules\Entity\Variable;
@@ -37,21 +43,21 @@ abstract class ItemForm extends EntityForm {
   /**
    * The business rules util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;
 
   /**
    * The variable manager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesVariableManager
+   * @var BusinessRulesVariableManager
    */
   protected $variableManager;
 
   /**
    * The Business Rule flowchart.
    *
-   * @var \Drupal\business_rules\Util\Flowchart\Flowchart
+   * @var Flowchart
    */
   private $chart;
 
@@ -82,7 +88,7 @@ abstract class ItemForm extends EntityForm {
     $itemManager = $this->getItemManager();
     $form_state->set('business_rules_step', $this->step);
 
-    /** @var \Drupal\business_rules\ItemInterface $item */
+    /** @var ItemInterface $item */
     $item = $this->entity;
     $class = get_class($item);
 
@@ -217,7 +223,7 @@ abstract class ItemForm extends EntityForm {
   /**
    * Get the pluginManager.
    *
-   * @return \Drupal\Core\Plugin\DefaultPluginManager
+   * @return DefaultPluginManager
    *   The item PluginManager.
    */
   abstract public function getItemManager();
@@ -235,7 +241,7 @@ abstract class ItemForm extends EntityForm {
 
     $form = [];
 
-    /** @var \Drupal\business_rules\ItemInterface $item */
+    /** @var ItemInterface $item */
     $item = $this->entity;
 
     $show_entity       = FALSE;
@@ -323,7 +329,7 @@ abstract class ItemForm extends EntityForm {
   /**
    * Provide a link a modal window with all available tokens.
    *
-   * @return \Drupal\Core\GeneratedLink|null
+   * @return GeneratedLink|null
    *   The modal link or NULL if Token module is not installed.
    */
   protected function getTokensLink() {
@@ -413,7 +419,7 @@ abstract class ItemForm extends EntityForm {
       return $form;
     }
     else {
-      /** @var \Drupal\business_rules\ItemInterface $item */
+      /** @var ItemInterface $item */
       $item        = $this->entity;
       $itemManager = $this->getItemManager();
 
@@ -505,10 +511,10 @@ abstract class ItemForm extends EntityForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AjaxResponse.
    */
   public function targetBundleCallback(array &$form, FormStateInterface $form_state) {
@@ -531,10 +537,10 @@ abstract class ItemForm extends EntityForm {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The AjaxResponse.
    */
   public function targetEntityTypeCallback(array &$form, FormStateInterface $form_state) {
diff --git a/src/Form/ScheduleForm.php b/src/Form/ScheduleForm.php
index f7cea95..d56e4a0 100644
--- a/src/Form/ScheduleForm.php
+++ b/src/Form/ScheduleForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Form;
 
+use Drupal\business_rules\Entity\Schedule;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -74,7 +75,7 @@ class ScheduleForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\business_rules\Entity\Schedule $entity */
+    /** @var Schedule $entity */
     $entity = $this->entity;
 
     // Save as a new revision if requested to do so.
diff --git a/src/Form/ScheduleRevisionDeleteForm.php b/src/Form/ScheduleRevisionDeleteForm.php
index 924f271..4a921e4 100644
--- a/src/Form/ScheduleRevisionDeleteForm.php
+++ b/src/Form/ScheduleRevisionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Form;
 
+use Drupal\business_rules\Entity\ScheduleInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -20,30 +21,30 @@ class ScheduleRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Schedule revision.
    *
-   * @var \Drupal\business_rules\Entity\ScheduleInterface
+   * @var ScheduleInterface
    */
   protected $revision;
 
   /**
    * The Schedule storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ScheduleStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a new ScheduleRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
diff --git a/src/Form/ScheduleRevisionRevertForm.php b/src/Form/ScheduleRevisionRevertForm.php
index 54ab95b..7a3819f 100644
--- a/src/Form/ScheduleRevisionRevertForm.php
+++ b/src/Form/ScheduleRevisionRevertForm.php
@@ -21,30 +21,30 @@ class ScheduleRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Schedule revision.
    *
-   * @var \Drupal\business_rules\Entity\ScheduleInterface
+   * @var ScheduleInterface
    */
   protected $revision;
 
   /**
    * The Schedule storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $ScheduleStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new ScheduleRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Schedule storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ -130,12 +130,12 @@ class ScheduleRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\business_rules\Entity\ScheduleInterface $revision
+   * @param ScheduleInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\business_rules\Entity\ScheduleInterface
+   * @return ScheduleInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(ScheduleInterface $revision, FormStateInterface $form_state) {
diff --git a/src/Form/ScheduleRevisionRevertTranslationForm.php b/src/Form/ScheduleRevisionRevertTranslationForm.php
index d26391b..e7d36f9 100644
--- a/src/Form/ScheduleRevisionRevertTranslationForm.php
+++ b/src/Form/ScheduleRevisionRevertTranslationForm.php
@@ -27,18 +27,18 @@ class ScheduleRevisionRevertTranslationForm extends ScheduleRevisionRevertForm {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Constructs a new ScheduleRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Schedule storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ -93,7 +93,7 @@ class ScheduleRevisionRevertTranslationForm extends ScheduleRevisionRevertForm {
   protected function prepareRevertedRevision(ScheduleInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\business_rules\Entity\ScheduleInterface $default_revision */
+    /** @var ScheduleInterface $default_revision */
     $latest_revision = $this->ScheduleStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
diff --git a/src/Form/ScheduleSettingsForm.php b/src/Form/ScheduleSettingsForm.php
index 1a7ffe1..4820a7e 100644
--- a/src/Form/ScheduleSettingsForm.php
+++ b/src/Form/ScheduleSettingsForm.php
@@ -27,7 +27,7 @@ class ScheduleSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class ScheduleSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/VariableDeleteForm.php b/src/Form/VariableDeleteForm.php
index 2f0c261..679c0be 100644
--- a/src/Form/VariableDeleteForm.php
+++ b/src/Form/VariableDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Form;
 
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -24,7 +25,7 @@ class VariableDeleteForm extends EntityConfirmFormBase {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\business_rules\Util\BusinessRulesUtil $util */
+    /** @var BusinessRulesUtil $util */
     $util                               = \Drupal::service('business_rules.util');
     $form['conditions_using_this_item'] = $util->getUsedByConditionsDetailsBox($this->entity);
     $form['actions_using_this_item']    = $util->getUsedByActionsDetailsBox($this->entity);
diff --git a/src/Form/VariableForm.php b/src/Form/VariableForm.php
index b2dcba8..db9c44a 100644
--- a/src/Form/VariableForm.php
+++ b/src/Form/VariableForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\business_rules\Form;
 
+use Drupal\business_rules\Entity\BusinessRulesItemBase;
+use Drupal\business_rules\VariableObject;
 use Drupal\business_rules\ActionListBuilder;
 use Drupal\business_rules\ConditionListBuilder;
 use Drupal\business_rules\Entity\Action;
@@ -49,7 +51,7 @@ class VariableForm extends ItemForm {
    *   The render array.
    */
   public function getVariableUsedByDetailsBox($item_type) {
-    /** @var \Drupal\business_rules\Entity\BusinessRulesItemBase $item */
+    /** @var BusinessRulesItemBase $item */
     if ($item_type == 'condition') {
       $items       = Condition::loadMultiple();
       $entity_type = 'business_rules_condition';
@@ -68,7 +70,7 @@ class VariableForm extends ItemForm {
 
     foreach ($items as $key => $item) {
       $variables = $item->getVariables();
-      /** @var \Drupal\business_rules\VariableObject $variable */
+      /** @var VariableObject $variable */
       foreach ($variables->getVariables() as $variable) {
         if ($this->entity->id() == $variable->getId()) {
           $used_by[$key] = $item;
diff --git a/src/ItemInterface.php b/src/ItemInterface.php
index 94e6ef0..78d4dbb 100644
--- a/src/ItemInterface.php
+++ b/src/ItemInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -35,7 +36,7 @@ interface ItemInterface extends ConfigEntityInterface {
   /**
    * Get the Item type translated. Action|Condition.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The translates item type label.
    */
   public function getBusinessRuleItemTranslatedType();
@@ -126,7 +127,7 @@ interface ItemInterface extends ConfigEntityInterface {
   /**
    * Get the variables being used by the item.
    *
-   * @return \Drupal\business_rules\VariablesSet
+   * @return VariablesSet
    *   The variables being used by the item.
    */
   public function getVariables();
diff --git a/src/Plugin/Block/BusinessRulesDebugBlock.php b/src/Plugin/Block/BusinessRulesDebugBlock.php
index 936a07d..af7a377 100644
--- a/src/Plugin/Block/BusinessRulesDebugBlock.php
+++ b/src/Plugin/Block/BusinessRulesDebugBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\business_rules\Plugin\Block;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -25,14 +27,14 @@ class BusinessRulesDebugBlock extends BlockBase implements ContainerFactoryPlugi
   /**
    * Business Rules configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $config;
 
   /**
    * The keyvalue expirable.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @var KeyValueStoreExpirableInterface
    */
   private $keyvalue;
 
diff --git a/src/Plugin/BusinessRulesAction/ActionSet.php b/src/Plugin/BusinessRulesAction/ActionSet.php
index b18741d..3e2e901 100644
--- a/src/Plugin/BusinessRulesAction/ActionSet.php
+++ b/src/Plugin/BusinessRulesAction/ActionSet.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesAction;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
@@ -31,7 +32,7 @@ class ActionSet extends BusinessRulesActionPlugin {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -54,7 +55,7 @@ class ActionSet extends BusinessRulesActionPlugin {
   /**
    * Return all others actions with the same target Entity and Bundle.
    *
-   * @param \Drupal\business_rules\Entity\Action $action
+   * @param Action $action
    *   The business rules Action.
    *
    * @return array
@@ -80,9 +81,9 @@ class ActionSet extends BusinessRulesActionPlugin {
    *
    * Important to avoid infinite action check loops.
    *
-   * @param \Drupal\business_rules\ActionInterface $main_action
+   * @param ActionInterface $main_action
    *   The main action.
-   * @param \Drupal\business_rules\ActionInterface $child_action
+   * @param ActionInterface $child_action
    *   The child action.
    *
    * @return bool
@@ -138,9 +139,9 @@ class ActionSet extends BusinessRulesActionPlugin {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\business_rules\ItemInterface $action
+   * @param ItemInterface $action
    *   The current action.
    *
    * @return array
diff --git a/src/Plugin/BusinessRulesAction/AddRoleToUser.php b/src/Plugin/BusinessRulesAction/AddRoleToUser.php
index 25e03ba..059d3f9 100644
--- a/src/Plugin/BusinessRulesAction/AddRoleToUser.php
+++ b/src/Plugin/BusinessRulesAction/AddRoleToUser.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesAction;
 
+use Drupal\business_rules\VariablesSet;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ -124,7 +125,7 @@ class AddRoleToUser extends BusinessRulesActionPlugin {
    * {@inheritdoc}
    */
   public function execute(ActionInterface $action, BusinessRulesEvent $event) {
-    /** @var \Drupal\business_rules\VariablesSet $event_variables */
+    /** @var VariablesSet $event_variables */
     $event_variables = $event->getArgument('variables');
     $user_container  = $action->getSettings('user_container');
     $uid             = $action->getSettings('uid');
@@ -135,7 +136,7 @@ class AddRoleToUser extends BusinessRulesActionPlugin {
     switch ($user_container) {
       case 'current':
         /** @var \Drupal\Core\Session\AccountProxyInterface $account */
-        /** @var \Drupal\user\Entity\User $user */
+        /** @var User $user */
         $account = $this->util->container->get('current_user');
         $user    = User::load($account->id());
         break;
diff --git a/src/Plugin/BusinessRulesAction/CalculateValue.php b/src/Plugin/BusinessRulesAction/CalculateValue.php
index 1e5025d..5db19fa 100644
--- a/src/Plugin/BusinessRulesAction/CalculateValue.php
+++ b/src/Plugin/BusinessRulesAction/CalculateValue.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesAction;
 
+use Drupal\business_rules\VariablesSet;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ -136,7 +137,7 @@ class CalculateValue extends BusinessRulesActionPlugin {
    * {@inheritdoc}
    */
   public function execute(ActionInterface $action, BusinessRulesEvent $event) {
-    /** @var \Drupal\business_rules\VariablesSet $event_variables */
+    /** @var VariablesSet $event_variables */
     $event_variables = $event->getArgument('variables');
     $raw_formula     = $action->getSettings('formula');
     $formula         = $this->processVariables($raw_formula, $event_variables);
diff --git a/src/Plugin/BusinessRulesAction/ChangeFieldInfo.php b/src/Plugin/BusinessRulesAction/ChangeFieldInfo.php
index da0aa46..31ee758 100644
--- a/src/Plugin/BusinessRulesAction/ChangeFieldInfo.php
+++ b/src/Plugin/BusinessRulesAction/ChangeFieldInfo.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesAction;
 
+use Drupal\Core\Field\FieldItemList;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Entity\Action;
 use Drupal\business_rules\Events\BusinessRulesEvent;
@@ -69,11 +70,11 @@ class ChangeFieldInfo extends BusinessRulesActionPlugin {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state.
    */
   public static function addFieldSubmit(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\business_rules\Entity\Action $action */
+    /** @var Action $action */
     $action   = $form_state->get('action');
     $field    = $form_state->getValue('fields')['new.field'];
     $id       = $field['field'] . '__' . $field['action'];
@@ -109,7 +110,7 @@ class ChangeFieldInfo extends BusinessRulesActionPlugin {
    * @param string $method
    *   The method: ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   The response.
    */
   public static function removeField($action, $field, $method) {
@@ -167,7 +168,7 @@ class ChangeFieldInfo extends BusinessRulesActionPlugin {
   /**
    * Get the current fields on the variable array.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The variable.
    * @param array $settings
    *   The current setting to add rows.
@@ -254,7 +255,7 @@ class ChangeFieldInfo extends BusinessRulesActionPlugin {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form_state.
    */
   public static function validateAddFieldForm(array &$form, FormStateInterface $form_state) {
@@ -319,7 +320,7 @@ class ChangeFieldInfo extends BusinessRulesActionPlugin {
 
     $element = $event->getArgument('element');
     $context = $event->getArgument('context');
-    /** @var \Drupal\Core\Field\FieldItemList $items */
+    /** @var FieldItemList $items */
     $items        = $context['items'];
     $element_name = $items->getName();
 
diff --git a/src/Plugin/BusinessRulesAction/ChangeFormDisplay.php b/src/Plugin/BusinessRulesAction/ChangeFormDisplay.php
index c2a78a3..22fe0df 100644
--- a/src/Plugin/BusinessRulesAction/ChangeFormDisplay.php
+++ b/src/Plugin/BusinessRulesAction/ChangeFormDisplay.php
@@ -89,7 +89,7 @@ class ChangeFormDisplay extends BusinessRulesActionPlugin {
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\business_rules\ItemInterface $item */
+    /** @var ItemInterface $item */
     $item = $form_state->get('business_rules_item');
 
     // We only can validate the form if the item is not new.
diff --git a/src/Plugin/BusinessRulesAction/DeleteEntity.php b/src/Plugin/BusinessRulesAction/DeleteEntity.php
index 3e6f079..c3f2f7e 100644
--- a/src/Plugin/BusinessRulesAction/DeleteEntity.php
+++ b/src/Plugin/BusinessRulesAction/DeleteEntity.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesAction;
 
+use Drupal\Core\Entity\Query\QueryInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ -54,13 +56,13 @@ class DeleteEntity extends BusinessRulesActionPlugin {
     $value       = $this->processVariables($value, $event->getArgument('variables'));
 
     // Load entities ids to delete.
-    /** @var \Drupal\Core\Entity\Query\QueryInterface $query */
+    /** @var QueryInterface $query */
     $query = \Drupal::getContainer()->get('entity_type.manager')->getStorage($entity_type)->getQuery()
       ->condition($field, $value);
     $ids = $query->execute();
 
     // Delete entities.
-    /** @var \Drupal\Core\Entity\EntityStorageInterface $entityManager */
+    /** @var EntityStorageInterface $entityManager */
     $entityManager = \Drupal::entityTypeManager()->getStorage($entity_type);
     $entities      = $entityManager->loadMultiple($ids);
     foreach ($entities as $key => $entity) {
diff --git a/src/Plugin/BusinessRulesAction/DisplayErrorMessageOnForm.php b/src/Plugin/BusinessRulesAction/DisplayErrorMessageOnForm.php
index 778d83c..7b780f1 100644
--- a/src/Plugin/BusinessRulesAction/DisplayErrorMessageOnForm.php
+++ b/src/Plugin/BusinessRulesAction/DisplayErrorMessageOnForm.php
@@ -55,7 +55,7 @@ class DisplayErrorMessageOnForm extends BusinessRulesActionPlugin {
       $message   = $this->processVariables($message, $variables);
       $message   = new FormattableMarkup($message, []);
 
-      /** @var \Drupal\Core\Form\FormStateInterface $form_state */
+      /** @var FormStateInterface $form_state */
       $form_state = $event->getArgument('form_state');
 
       $form_state->setErrorByName($field, $message);
diff --git a/src/Plugin/BusinessRulesAction/FetchEntityVariableAction.php b/src/Plugin/BusinessRulesAction/FetchEntityVariableAction.php
index 7b0aa92..70660b8 100644
--- a/src/Plugin/BusinessRulesAction/FetchEntityVariableAction.php
+++ b/src/Plugin/BusinessRulesAction/FetchEntityVariableAction.php
@@ -70,7 +70,7 @@ class FetchEntityVariableAction extends BusinessRulesActionPlugin {
   /**
    * Get the available empty variables for the context.
    *
-   * @param \Drupal\business_rules\Entity\Action $item
+   * @param Action $item
    *   The action.
    *
    * @return array
@@ -80,8 +80,7 @@ class FetchEntityVariableAction extends BusinessRulesActionPlugin {
     $variables = Variable::loadMultiple();
     $output    = [];
 
-    /** @var \Drupal\business_rules\Entity\Variable $variable */
-
+    /** @var Variable $variable */
     foreach ($variables as $variable) {
       if ($item->getTargetEntityType() == $variable->getTargetEntityType() &&
         $item->getTargetBundle() == $variable->getTargetBundle() &&
@@ -108,7 +107,7 @@ class FetchEntityVariableAction extends BusinessRulesActionPlugin {
    */
   public function execute(ActionInterface $action, BusinessRulesEvent $event) {
 
-    /** @var \Drupal\business_rules\VariablesSet $variables */
+    /** @var VariablesSet $variables */
     $id_variable         = $action->getSettings('empty_variable');
     $variables           = $event->getArgument('variables');
     $processed_variables = $this->fetchEntityVariable($action, $variables);
@@ -128,7 +127,7 @@ class FetchEntityVariableAction extends BusinessRulesActionPlugin {
   public function fetchEntityVariable($action, VariablesSet $event_variables) {
 
     /** @var \Drupal\business_rules\VariableObject $variable */
-    /** @var \Drupal\business_rules\Entity\Action $action */
+    /** @var Action $action */
     $id_field = $action->getSettings('field');
     $bundle = $action->getTargetBundle();
     $id = $action->getSettings('value');
@@ -243,18 +242,18 @@ class FetchEntityVariableAction extends BusinessRulesActionPlugin {
    *
    * @param string $id
    *   The entity id.
-   * @param \Drupal\business_rules\VariableObject $variable
+   * @param VariableObject $variable
    *   The VariableObject.
    * @param string $id_field
    *   The field id.
-   * @param \Drupal\business_rules\Entity\Action $action
+   * @param Action $action
    *   The Business rule Action action.
    * @param string $bundle
    *   The bundle.
    * @param mixed $original_variable_value
    *   The original variable value.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity.
    */
   private function fetchEntity($id, VariableObject $variable, $id_field, Action $action, $bundle, $original_variable_value) {
diff --git a/src/Plugin/BusinessRulesAction/FillEntityVariableFields.php b/src/Plugin/BusinessRulesAction/FillEntityVariableFields.php
index 660be9c..9d9969b 100644
--- a/src/Plugin/BusinessRulesAction/FillEntityVariableFields.php
+++ b/src/Plugin/BusinessRulesAction/FillEntityVariableFields.php
@@ -46,11 +46,11 @@ class FillEntityVariableFields extends BusinessRulesActionPlugin {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public static function fieldValueSave(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\business_rules\Entity\Action $action */
+    /** @var Action $action */
     $field = $form_state->getValue('entity_field');
     $value = $form_state->getValue('field_value');
 
@@ -72,7 +72,7 @@ class FillEntityVariableFields extends BusinessRulesActionPlugin {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public static function formValidate(array $form, FormStateInterface $form_state) {
@@ -94,7 +94,7 @@ class FillEntityVariableFields extends BusinessRulesActionPlugin {
    * @param string $method
    *   The method ajax|nojs.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return AjaxResponse|RedirectResponse
    *   The AjaxResponse or RedirectResponse object.
    */
   public static function removeFieldValue($action, $field, $method) {
@@ -245,7 +245,7 @@ class FillEntityVariableFields extends BusinessRulesActionPlugin {
   /**
    * Get the available empty variables for the context.
    *
-   * @param \Drupal\business_rules\Entity\Action $item
+   * @param Action $item
    *   The action object.
    *
    * @return array
@@ -255,7 +255,7 @@ class FillEntityVariableFields extends BusinessRulesActionPlugin {
     $variables = Variable::loadMultiple();
     $output    = [];
 
-    /** @var \Drupal\business_rules\Entity\Variable $variable */
+    /** @var Variable $variable */
     foreach ($variables as $variable) {
       if ($item->getTargetEntityType() == $variable->getTargetEntityType() &&
         $item->getTargetBundle() == $variable->getTargetBundle() &&
diff --git a/src/Plugin/BusinessRulesAction/LoopThroughFieldVariable.php b/src/Plugin/BusinessRulesAction/LoopThroughFieldVariable.php
index e9a7e36..f4eea07 100644
--- a/src/Plugin/BusinessRulesAction/LoopThroughFieldVariable.php
+++ b/src/Plugin/BusinessRulesAction/LoopThroughFieldVariable.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesAction;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
@@ -37,7 +38,7 @@ class LoopThroughFieldVariable extends BusinessRulesActionPlugin {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -63,7 +64,7 @@ class LoopThroughFieldVariable extends BusinessRulesActionPlugin {
   public function getSettingsForm(array &$form, FormStateInterface $form_state, ItemInterface $item) {
     $variables = Variable::loadMultipleByType('entity_filed_variable');
     $options   = [];
-    /** @var \Drupal\business_rules\Entity\Variable $variable */
+    /** @var Variable $variable */
     foreach ($variables as $variable) {
       $options[$variable->id()] = $variable->label();
     }
@@ -96,9 +97,9 @@ class LoopThroughFieldVariable extends BusinessRulesActionPlugin {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\business_rules\ItemInterface $action
+   * @param ItemInterface $action
    *   The current action.
    *
    * @return array
@@ -320,7 +321,7 @@ class LoopThroughFieldVariable extends BusinessRulesActionPlugin {
    * {@inheritdoc}
    */
   public function execute(ActionInterface $action, BusinessRulesEvent $event) {
-    /** @var \Drupal\business_rules\VariablesSet $event_variables */
+    /** @var VariablesSet $event_variables */
     $event_variables = $event->getArgument('variables');
     $field_variable  = $event_variables->getVariable($action->getSettings('variable'));
     $action_items    = $action->getSettings('items');
diff --git a/src/Plugin/BusinessRulesAction/LoopThroughViewResult.php b/src/Plugin/BusinessRulesAction/LoopThroughViewResult.php
index c7e492e..51431f4 100644
--- a/src/Plugin/BusinessRulesAction/LoopThroughViewResult.php
+++ b/src/Plugin/BusinessRulesAction/LoopThroughViewResult.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesAction;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
@@ -37,7 +38,7 @@ class LoopThroughViewResult extends BusinessRulesActionPlugin {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -64,7 +65,7 @@ class LoopThroughViewResult extends BusinessRulesActionPlugin {
 
     $variables = Variable::loadMultipleByType('view_result_variable');
     $options   = [];
-    /** @var \Drupal\business_rules\Entity\Variable $variable */
+    /** @var Variable $variable */
     foreach ($variables as $variable) {
       $options[$variable->id()] = $variable->label();
     }
@@ -97,9 +98,9 @@ class LoopThroughViewResult extends BusinessRulesActionPlugin {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\business_rules\ItemInterface $action
+   * @param ItemInterface $action
    *   The current action.
    *
    * @return array
@@ -331,7 +332,7 @@ class LoopThroughViewResult extends BusinessRulesActionPlugin {
    * {@inheritdoc}
    */
   public function execute(ActionInterface $action, BusinessRulesEvent $event) {
-    /** @var \Drupal\business_rules\VariablesSet $event_variables */
+    /** @var VariablesSet $event_variables */
     $event_variables = $event->getArgument('variables');
     $view_variable   = $event_variables->getVariable($action->getSettings('variable'));
     $action_items    = $action->getSettings('items');
diff --git a/src/Plugin/BusinessRulesAction/PublishContent.php b/src/Plugin/BusinessRulesAction/PublishContent.php
index 58dbd9e..4ba69f0 100644
--- a/src/Plugin/BusinessRulesAction/PublishContent.php
+++ b/src/Plugin/BusinessRulesAction/PublishContent.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesAction;
 
+use Drupal\Core\Entity\Query\Sql\Query;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ -63,7 +65,7 @@ class PublishContent extends BusinessRulesActionPlugin {
 
     // Load entities ids to Publish.
     /** @var \Drupal\Core\Entity\Query\QueryInterface $query_service */
-    /** @var \Drupal\Core\Entity\Query\Sql\Query $query */
+    /** @var Query $query */
     $query_service = \Drupal::getContainer()->get('entity.query');
     $query         = $query_service->get($entity_type);
     $query->condition('type', $bundle);
@@ -72,7 +74,7 @@ class PublishContent extends BusinessRulesActionPlugin {
 
     // Publish entities.
     /** @var \Drupal\Core\Entity\EntityStorageInterface $entityManager */
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entityManager = \Drupal::entityTypeManager()->getStorage($entity_type);
     $entities      = $entityManager->loadMultiple($ids);
     $key_value     = \Drupal::keyValueExpirable('business_rules.publish_entity');
diff --git a/src/Plugin/BusinessRulesAction/RemoveUserRole.php b/src/Plugin/BusinessRulesAction/RemoveUserRole.php
index 11da851..30f206d 100644
--- a/src/Plugin/BusinessRulesAction/RemoveUserRole.php
+++ b/src/Plugin/BusinessRulesAction/RemoveUserRole.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesAction;
 
+use Drupal\business_rules\VariablesSet;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ -124,7 +125,7 @@ class RemoveUserRole extends BusinessRulesActionPlugin {
    * {@inheritdoc}
    */
   public function execute(ActionInterface $action, BusinessRulesEvent $event) {
-    /** @var \Drupal\business_rules\VariablesSet $event_variables */
+    /** @var VariablesSet $event_variables */
     $event_variables = $event->getArgument('variables');
     $user_container  = $action->getSettings('user_container');
     $uid             = $action->getSettings('uid');
@@ -135,7 +136,7 @@ class RemoveUserRole extends BusinessRulesActionPlugin {
     switch ($user_container) {
       case 'current':
         /** @var \Drupal\Core\Session\AccountProxyInterface $account */
-        /** @var \Drupal\user\Entity\User $user */
+        /** @var User $user */
         $account = $this->util->container->get('current_user');
         $user    = User::load($account->id());
         break;
diff --git a/src/Plugin/BusinessRulesAction/SaveEntityVariableAction.php b/src/Plugin/BusinessRulesAction/SaveEntityVariableAction.php
index 2827d9b..6120d08 100644
--- a/src/Plugin/BusinessRulesAction/SaveEntityVariableAction.php
+++ b/src/Plugin/BusinessRulesAction/SaveEntityVariableAction.php
@@ -62,7 +62,7 @@ class SaveEntityVariableAction extends BusinessRulesActionPlugin {
   /**
    * Get the available empty variables for the context.
    *
-   * @param \Drupal\business_rules\Entity\Action $item
+   * @param Action $item
    *   The action.
    *
    * @return array
@@ -72,7 +72,7 @@ class SaveEntityVariableAction extends BusinessRulesActionPlugin {
     $variables = Variable::loadMultiple();
     $output    = [];
 
-    /** @var \Drupal\business_rules\Entity\Variable $variable */
+    /** @var Variable $variable */
     foreach ($variables as $variable) {
       if ($item->getTargetEntityType() == $variable->getTargetEntityType() &&
         $item->getTargetBundle() == $variable->getTargetBundle() &&
diff --git a/src/Plugin/BusinessRulesAction/ScheduleTask.php b/src/Plugin/BusinessRulesAction/ScheduleTask.php
index 29337a8..07d5acc 100644
--- a/src/Plugin/BusinessRulesAction/ScheduleTask.php
+++ b/src/Plugin/BusinessRulesAction/ScheduleTask.php
@@ -44,7 +44,7 @@ class ScheduleTask extends BusinessRulesActionPlugin {
   /**
    * Business Rules item.
    *
-   * @var \Drupal\business_rules\ItemInterface*/
+   * @var ItemInterface*/
   private $item;
 
   /**
@@ -146,7 +146,7 @@ class ScheduleTask extends BusinessRulesActionPlugin {
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
 
-    /** @var \Drupal\business_rules\ItemInterface $item */
+    /** @var ItemInterface $item */
     $item = $form_state->get('business_rules_item');
 
     // We only can validate the form if the item is not new.
@@ -180,9 +180,9 @@ class ScheduleTask extends BusinessRulesActionPlugin {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\business_rules\ItemInterface $action
+   * @param ItemInterface $action
    *   The current action.
    *
    * @return array
diff --git a/src/Plugin/BusinessRulesAction/SendEmail.php b/src/Plugin/BusinessRulesAction/SendEmail.php
index 63a085a..ce7d1d8 100644
--- a/src/Plugin/BusinessRulesAction/SendEmail.php
+++ b/src/Plugin/BusinessRulesAction/SendEmail.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesAction;
 
+use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ -31,7 +32,7 @@ class SendEmail extends BusinessRulesActionPlugin {
   /**
    * The mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
diff --git a/src/Plugin/BusinessRulesAction/UnpublishContent.php b/src/Plugin/BusinessRulesAction/UnpublishContent.php
index e1e2945..a52272d 100644
--- a/src/Plugin/BusinessRulesAction/UnpublishContent.php
+++ b/src/Plugin/BusinessRulesAction/UnpublishContent.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesAction;
 
+use Drupal\Core\Entity\Query\Sql\Query;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\business_rules\ActionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ -63,7 +65,7 @@ class UnpublishContent extends BusinessRulesActionPlugin {
 
     // Load entities ids to delete.
     /** @var \Drupal\Core\Entity\Query\QueryInterface $query_service */
-    /** @var \Drupal\Core\Entity\Query\Sql\Query $query */
+    /** @var Query $query */
     $query_service = \Drupal::getContainer()->get('entity.query');
     $query         = $query_service->get($entity_type);
     $query->condition('type', $bundle);
@@ -72,7 +74,7 @@ class UnpublishContent extends BusinessRulesActionPlugin {
 
     // Unpublish entities.
     /** @var \Drupal\Core\Entity\EntityStorageInterface $entityManager */
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     $entityManager = \Drupal::entityTypeManager()->getStorage($entity_type);
     $entities      = $entityManager->loadMultiple($ids);
     $key_value     = \Drupal::keyValueExpirable('business_rules.unpublish_entity');
diff --git a/src/Plugin/BusinessRulesActionManager.php b/src/Plugin/BusinessRulesActionManager.php
index 62d7c2c..31d12fe 100644
--- a/src/Plugin/BusinessRulesActionManager.php
+++ b/src/Plugin/BusinessRulesActionManager.php
@@ -17,9 +17,9 @@ class BusinessRulesActionManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/BusinessRulesActionPluginInterface.php b/src/Plugin/BusinessRulesActionPluginInterface.php
index f8e8947..c8c1d1d 100644
--- a/src/Plugin/BusinessRulesActionPluginInterface.php
+++ b/src/Plugin/BusinessRulesActionPluginInterface.php
@@ -13,9 +13,9 @@ interface BusinessRulesActionPluginInterface extends BusinessRulesItemPluginInte
   /**
    * Execute the action.
    *
-   * @param \Drupal\business_rules\ActionInterface $action
+   * @param ActionInterface $action
    *   The configured action.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event that has triggered the action.
    *
    * @return array
diff --git a/src/Plugin/BusinessRulesCondition/ConditionSet.php b/src/Plugin/BusinessRulesCondition/ConditionSet.php
index d358842..7352098 100644
--- a/src/Plugin/BusinessRulesCondition/ConditionSet.php
+++ b/src/Plugin/BusinessRulesCondition/ConditionSet.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesCondition;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\ConditionInterface;
 use Drupal\business_rules\Entity\Condition;
@@ -21,7 +22,7 @@ abstract class ConditionSet extends BusinessRulesConditionPlugin {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -35,7 +36,7 @@ abstract class ConditionSet extends BusinessRulesConditionPlugin {
   /**
    * Return all others conditions with the same target Entity and Bundle.
    *
-   * @param \Drupal\business_rules\Entity\Condition $condition
+   * @param Condition $condition
    *   The condition.
    *
    * @return array
@@ -46,7 +47,7 @@ abstract class ConditionSet extends BusinessRulesConditionPlugin {
     $current_conditions = $condition->getSettings('items');
     $conditions_matched = [];
     if (count($conditions)) {
-      /** @var \Drupal\business_rules\Entity\Condition $c */
+      /** @var Condition $c */
       foreach ($conditions as $c) {
         if ($condition->id() != $c->id() && self::checkInnerCondition($condition, $c) && !in_array($c->id(), array_keys($current_conditions))) {
           // Only condition s with no actions can be added to a condition set.
@@ -65,9 +66,9 @@ abstract class ConditionSet extends BusinessRulesConditionPlugin {
    *
    * Important to avoid infinite condition check loops.
    *
-   * @param \Drupal\business_rules\ConditionInterface $main_condition
+   * @param ConditionInterface $main_condition
    *   The main condition.
-   * @param \Drupal\business_rules\ConditionInterface $child_condition
+   * @param ConditionInterface $child_condition
    *   The child condition.
    *
    * @return bool
@@ -124,9 +125,9 @@ abstract class ConditionSet extends BusinessRulesConditionPlugin {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\business_rules\ItemInterface $condition
+   * @param ItemInterface $condition
    *   The current condition.
    *
    * @return array
diff --git a/src/Plugin/BusinessRulesCondition/DataComparison.php b/src/Plugin/BusinessRulesCondition/DataComparison.php
index ebbda56..fd13030 100644
--- a/src/Plugin/BusinessRulesCondition/DataComparison.php
+++ b/src/Plugin/BusinessRulesCondition/DataComparison.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesCondition;
 
+use Drupal\business_rules\VariableObject;
 use Drupal\business_rules\ConditionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ -88,7 +89,7 @@ class DataComparison extends BusinessRulesConditionPlugin {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
@@ -178,7 +179,7 @@ class DataComparison extends BusinessRulesConditionPlugin {
    *
    * @param mixed $values_to_compare
    *   The item to be replaced by the variable value.
-   * @param \Drupal\business_rules\VariablesSet $variables
+   * @param VariablesSet $variables
    *   Array of Variables provided by the event.
    *
    * @return mixed
@@ -186,7 +187,7 @@ class DataComparison extends BusinessRulesConditionPlugin {
    */
   public function processInternalVariables($values_to_compare, VariablesSet $variables) {
 
-    /** @var \Drupal\business_rules\VariableObject $variable */
+    /** @var VariableObject $variable */
     if ($variables->count()) {
 
       foreach ($variables->getVariables() as $variable) {
diff --git a/src/Plugin/BusinessRulesCondition/LogicalAnd.php b/src/Plugin/BusinessRulesCondition/LogicalAnd.php
index 7ffb231..872e1ef 100644
--- a/src/Plugin/BusinessRulesCondition/LogicalAnd.php
+++ b/src/Plugin/BusinessRulesCondition/LogicalAnd.php
@@ -40,7 +40,7 @@ class LogicalAnd extends ConditionSet {
     $items = $condition->getSettings('items');
     $items = BusinessRulesItemObject::itemsArrayToItemsObject($items);
 
-    /** @var \Drupal\business_rules\BusinessRulesItemObject $item */
+    /** @var BusinessRulesItemObject $item */
     foreach ($items as $item) {
       $c = Condition::load($item->getId());
       if (!$this->processor->isConditionValid($c, $event)) {
diff --git a/src/Plugin/BusinessRulesCondition/LogicalOr.php b/src/Plugin/BusinessRulesCondition/LogicalOr.php
index 6076301..968c8c1 100644
--- a/src/Plugin/BusinessRulesCondition/LogicalOr.php
+++ b/src/Plugin/BusinessRulesCondition/LogicalOr.php
@@ -40,7 +40,7 @@ class LogicalOr extends ConditionSet {
     $items = $condition->getSettings('items');
     $items = BusinessRulesItemObject::itemsArrayToItemsObject($items);
 
-    /** @var \Drupal\business_rules\BusinessRulesItemObject $item */
+    /** @var BusinessRulesItemObject $item */
     foreach ($items as $item) {
       $c = Condition::load($item->getId());
       if ($this->processor->isConditionValid($c, $event)) {
diff --git a/src/Plugin/BusinessRulesCondition/UserHasRole.php b/src/Plugin/BusinessRulesCondition/UserHasRole.php
index f7121d2..295c58c 100644
--- a/src/Plugin/BusinessRulesCondition/UserHasRole.php
+++ b/src/Plugin/BusinessRulesCondition/UserHasRole.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesCondition;
 
+use Drupal\user\Entity\User;
 use Drupal\business_rules\ConditionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ -74,7 +75,7 @@ class UserHasRole extends BusinessRulesConditionPlugin {
   public function process(ConditionInterface $condition, BusinessRulesEvent $event) {
     $roles    = $condition->getSettings('roles');
     $criteria = $condition->getSettings('criteria');
-    /** @var \Drupal\user\Entity\User $current_user */
+    /** @var User $current_user */
     $current_user = $this->util->container->get('current_user');
     $user_roles   = array_values($current_user->getRoles());
     $result       = FALSE;
diff --git a/src/Plugin/BusinessRulesCondition/UserVariableHasRole.php b/src/Plugin/BusinessRulesCondition/UserVariableHasRole.php
index 83eeb97..484651e 100644
--- a/src/Plugin/BusinessRulesCondition/UserVariableHasRole.php
+++ b/src/Plugin/BusinessRulesCondition/UserVariableHasRole.php
@@ -106,9 +106,9 @@ class UserVariableHasRole extends BusinessRulesConditionPlugin {
     $roles            = $condition->getSettings('roles');
     $criteria         = $condition->getSettings('criteria');
     $user_variable_id = $condition->getSettings('user_variable');
-    /** @var \Drupal\business_rules\VariablesSet $event_variables */
+    /** @var VariablesSet $event_variables */
     $event_variables = $event->getArgument('variables');
-    /** @var \Drupal\user\Entity\User $user_variable */
+    /** @var User $user_variable */
     $user_variable = $event_variables->getVariable($user_variable_id)
       ->getValue();
 
diff --git a/src/Plugin/BusinessRulesCondition/VariableDataComparison.php b/src/Plugin/BusinessRulesCondition/VariableDataComparison.php
index b21a225..c616c99 100644
--- a/src/Plugin/BusinessRulesCondition/VariableDataComparison.php
+++ b/src/Plugin/BusinessRulesCondition/VariableDataComparison.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesCondition;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\business_rules\ConditionInterface;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ -72,11 +73,11 @@ class VariableDataComparison extends BusinessRulesConditionPlugin {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\EntityInterface $item */
+    /** @var EntityInterface $item */
     $item = $form_state->getFormObject()->getEntity();
     if (!$item->isNew()) {
       $textarea_fields  = ['contains', '==', 'starts_with', 'ends_with', '!='];
diff --git a/src/Plugin/BusinessRulesConditionManager.php b/src/Plugin/BusinessRulesConditionManager.php
index 76eeaad..50f692e 100644
--- a/src/Plugin/BusinessRulesConditionManager.php
+++ b/src/Plugin/BusinessRulesConditionManager.php
@@ -17,9 +17,9 @@ class BusinessRulesConditionManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/BusinessRulesConditionPluginInterface.php b/src/Plugin/BusinessRulesConditionPluginInterface.php
index fb9bd59..ee65611 100644
--- a/src/Plugin/BusinessRulesConditionPluginInterface.php
+++ b/src/Plugin/BusinessRulesConditionPluginInterface.php
@@ -14,9 +14,9 @@ interface BusinessRulesConditionPluginInterface extends BusinessRulesItemPluginI
   /**
    * Process the condition.
    *
-   * @param \Drupal\business_rules\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   The configured condition.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event that has triggered the condition.
    *
    * @return bool
@@ -29,7 +29,7 @@ interface BusinessRulesConditionPluginInterface extends BusinessRulesItemPluginI
    *
    * @param mixed $content
    *   The item to be replaced by the variable value.
-   * @param \Drupal\business_rules\VariablesSet $event_variables
+   * @param VariablesSet $event_variables
    *   Array of Variables provided by the event.
    *
    * @return mixed
diff --git a/src/Plugin/BusinessRulesItemPluginBase.php b/src/Plugin/BusinessRulesItemPluginBase.php
index b3dfda2..7fbce2b 100644
--- a/src/Plugin/BusinessRulesItemPluginBase.php
+++ b/src/Plugin/BusinessRulesItemPluginBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\business_rules\Plugin;
 
+use Drupal\business_rules\Util\BusinessRulesProcessor;
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\business_rules\Entity\Variable;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ -20,14 +22,14 @@ abstract class BusinessRulesItemPluginBase extends PluginBase implements Busines
   /**
    * The business rules processor.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesProcessor
+   * @var BusinessRulesProcessor
    */
   protected $processor;
 
   /**
    * The business rules util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;
 
@@ -147,7 +149,7 @@ abstract class BusinessRulesItemPluginBase extends PluginBase implements Busines
    * {@inheritdoc}
    */
   public function processVariables($content, VariablesSet $event_variables) {
-    /** @var \Drupal\business_rules\VariableObject $variable */
+    /** @var VariableObject $variable */
     if ($event_variables->count()) {
       foreach ($event_variables->getVariables() as $variable) {
         if (is_string($variable->getValue()) || is_numeric($variable->getValue())) {
@@ -212,7 +214,7 @@ abstract class BusinessRulesItemPluginBase extends PluginBase implements Busines
    *   The setting array.
    * @param array $context
    *   The context to replace the tokens.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The Business Rules event.
    */
   private function processTokenArraySetting(array &$setting, array $context, BusinessRulesEvent $event) {
diff --git a/src/Plugin/BusinessRulesItemPluginInterface.php b/src/Plugin/BusinessRulesItemPluginInterface.php
index 0ad8491..5c84a66 100644
--- a/src/Plugin/BusinessRulesItemPluginInterface.php
+++ b/src/Plugin/BusinessRulesItemPluginInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Plugin;
 
+use Drupal\Core\Url;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
 use Drupal\business_rules\VariablesSet;
@@ -24,7 +25,7 @@ interface BusinessRulesItemPluginInterface extends PluginInspectionInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function buildForm(array &$form, FormStateInterface $form_state);
@@ -40,10 +41,10 @@ interface BusinessRulesItemPluginInterface extends PluginInspectionInterface {
   /**
    * Get the redirect url for the item edit-form route.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The business rule item.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Url.
    */
   public function getEditUrl(ItemInterface $item);
@@ -59,10 +60,10 @@ interface BusinessRulesItemPluginInterface extends PluginInspectionInterface {
   /**
    * Get the redirect url for the item collection route.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item go get the Url.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Url.
    */
   public function getRedirectUrl(ItemInterface $item);
@@ -72,9 +73,9 @@ interface BusinessRulesItemPluginInterface extends PluginInspectionInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The configured item.
    *
    * @return array
@@ -95,10 +96,10 @@ interface BusinessRulesItemPluginInterface extends PluginInspectionInterface {
    *
    * The $variables array will be filled with all used variables at index [1]
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The business rule item.
    *
-   * @return \Drupal\business_rules\VariablesSet
+   * @return VariablesSet
    *   The variableSet with all variables used on the Item.
    */
   public function getVariables(ItemInterface $item);
@@ -121,7 +122,7 @@ interface BusinessRulesItemPluginInterface extends PluginInspectionInterface {
    *
    * @param array $settings
    *   The settings to be processed before save the Business Rule Item.
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item being processed.
    *
    * @return array
@@ -132,9 +133,9 @@ interface BusinessRulesItemPluginInterface extends PluginInspectionInterface {
   /**
    * Process the tokens on the settings property for the item.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The Business Rules item.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The BusinessRulesEvent that triggered the processor.
    */
   public function processTokens(ItemInterface &$item, BusinessRulesEvent $event);
@@ -144,7 +145,7 @@ interface BusinessRulesItemPluginInterface extends PluginInspectionInterface {
    *
    * @param mixed $content
    *   The item to be replaced by the variable value.
-   * @param \Drupal\business_rules\VariablesSet $event_variables
+   * @param VariablesSet $event_variables
    *   Array of Variables provided by the event.
    *
    * @return mixed
@@ -159,7 +160,7 @@ interface BusinessRulesItemPluginInterface extends PluginInspectionInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function validateForm(array &$form, FormStateInterface $form_state);
diff --git a/src/Plugin/BusinessRulesReactsOn/FormValidation.php b/src/Plugin/BusinessRulesReactsOn/FormValidation.php
index 8b03caa..c901c39 100644
--- a/src/Plugin/BusinessRulesReactsOn/FormValidation.php
+++ b/src/Plugin/BusinessRulesReactsOn/FormValidation.php
@@ -28,7 +28,7 @@ class FormValidation extends BusinessRulesReactsOnPlugin {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public static function validateForm(array &$form, FormStateInterface $form_state) {
diff --git a/src/Plugin/BusinessRulesReactsOnInterface.php b/src/Plugin/BusinessRulesReactsOnInterface.php
index e4549ee..0f96f1c 100644
--- a/src/Plugin/BusinessRulesReactsOnInterface.php
+++ b/src/Plugin/BusinessRulesReactsOnInterface.php
@@ -15,7 +15,7 @@ interface BusinessRulesReactsOnInterface extends PluginInspectionInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    */
   public function processForm(array &$form, FormStateInterface $form_state);
diff --git a/src/Plugin/BusinessRulesReactsOnManager.php b/src/Plugin/BusinessRulesReactsOnManager.php
index 1f9895e..f36b1e8 100644
--- a/src/Plugin/BusinessRulesReactsOnManager.php
+++ b/src/Plugin/BusinessRulesReactsOnManager.php
@@ -17,9 +17,9 @@ class BusinessRulesReactsOnManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/BusinessRulesReactsOnPlugin.php b/src/Plugin/BusinessRulesReactsOnPlugin.php
index e75d7c8..4eb4823 100644
--- a/src/Plugin/BusinessRulesReactsOnPlugin.php
+++ b/src/Plugin/BusinessRulesReactsOnPlugin.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\business_rules\Plugin;
 
+use Drupal\business_rules\Util\BusinessRulesProcessor;
+use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -13,14 +15,14 @@ abstract class BusinessRulesReactsOnPlugin extends PluginBase implements Busines
   /**
    * The business rules processor.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesProcessor
+   * @var BusinessRulesProcessor
    */
   protected $processor;
 
   /**
    * The business rules util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;
 
diff --git a/src/Plugin/BusinessRulesVariable/EntityEmptyVariable.php b/src/Plugin/BusinessRulesVariable/EntityEmptyVariable.php
index 78628bd..dd7b82b 100644
--- a/src/Plugin/BusinessRulesVariable/EntityEmptyVariable.php
+++ b/src/Plugin/BusinessRulesVariable/EntityEmptyVariable.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesVariable;
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Field\FieldTypePluginManagerInterface;
 use Drupal\business_rules\Entity\Variable;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ -30,14 +32,14 @@ class EntityEmptyVariable extends BusinessRulesVariablePlugin {
   /**
    * The EntityFieldManager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The FieldTypePluginManager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypePluginManager;
 
diff --git a/src/Plugin/BusinessRulesVariable/EntityFieldVariable.php b/src/Plugin/BusinessRulesVariable/EntityFieldVariable.php
index c9c22ce..d4d6af4 100644
--- a/src/Plugin/BusinessRulesVariable/EntityFieldVariable.php
+++ b/src/Plugin/BusinessRulesVariable/EntityFieldVariable.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesVariable;
 
+use Drupal\field\Entity\FieldConfig;
 use Drupal\business_rules\Entity\Variable;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 use Drupal\business_rules\ItemInterface;
@@ -110,7 +111,7 @@ class EntityFieldVariable extends BusinessRulesVariablePlugin {
     try {
       $value = $entity->get($field_name)->getValue();
       // Check if value is a entity reference.
-      /** @var \Drupal\field\Entity\FieldConfig $field_definition */
+      /** @var FieldConfig $field_definition */
       $field_definition = $entity->getFieldDefinition($field_name);
       if ($field_definition->getType() == 'entity_reference') {
         $entity_references = $entity->get($field_name)->referencedEntities();
diff --git a/src/Plugin/BusinessRulesVariable/ViewResultVariable.php b/src/Plugin/BusinessRulesVariable/ViewResultVariable.php
index 283c6b5..a967667 100644
--- a/src/Plugin/BusinessRulesVariable/ViewResultVariable.php
+++ b/src/Plugin/BusinessRulesVariable/ViewResultVariable.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\business_rules\Plugin\BusinessRulesVariable;
 
+use Drupal\Core\Entity\EntityTypeBundleInfo;
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\views\ResultRow;
 use Drupal\Core\Render\Markup;
 use Drupal\Core\Render\RenderContext;
 use Drupal\business_rules\Entity\Variable;
@@ -31,14 +36,14 @@ class ViewResultVariable extends BusinessRulesVariablePlugin {
   /**
    * The EntityTypeBundleInfo.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfo
+   * @var EntityTypeBundleInfo
    */
   protected $bundleInfo;
 
   /**
    * The EntityFieldManager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;
 
@@ -116,10 +121,10 @@ class ViewResultVariable extends BusinessRulesVariablePlugin {
   /**
    * Display the view variable fields.
    *
-   * @param \Drupal\business_rules\Entity\Variable $variable
+   * @param Variable $variable
    *   The variable entity.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|array
+   * @return AjaxResponse|array
    *   The AjaxResponse or the render array.
    */
   public function variableFields(Variable $variable) {
@@ -240,10 +245,10 @@ class ViewResultVariable extends BusinessRulesVariablePlugin {
     $variableObject = NULL;
     if ($view->execute()) {
 
-      /** @var \Drupal\Core\Render\RendererInterface $renderer */
+      /** @var RendererInterface $renderer */
       $renderer = \Drupal::service('renderer');
 
-      /** @var \Drupal\views\ResultRow $resultRow */
+      /** @var ResultRow $resultRow */
       $view_result = $view->result;
       $values      = [];
 
diff --git a/src/Plugin/BusinessRulesVariableManager.php b/src/Plugin/BusinessRulesVariableManager.php
index 257936a..29ccf33 100644
--- a/src/Plugin/BusinessRulesVariableManager.php
+++ b/src/Plugin/BusinessRulesVariableManager.php
@@ -17,9 +17,9 @@ class BusinessRulesVariableManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Plugin/BusinessRulesVariablePluginInterface.php b/src/Plugin/BusinessRulesVariablePluginInterface.php
index 4baa5a7..8fbaf22 100644
--- a/src/Plugin/BusinessRulesVariablePluginInterface.php
+++ b/src/Plugin/BusinessRulesVariablePluginInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\business_rules\Plugin;
 
+use Drupal\business_rules\VariableObject;
+use Drupal\business_rules\VariablesSet;
 use Drupal\business_rules\Entity\Variable;
 use Drupal\business_rules\Events\BusinessRulesEvent;
 
@@ -13,12 +15,12 @@ interface BusinessRulesVariablePluginInterface extends BusinessRulesItemPluginIn
   /**
    * Evaluate the variable.
    *
-   * @param \Drupal\business_rules\Entity\Variable $variable
+   * @param Variable $variable
    *   The variable to be evaluated.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The dispatched event.
    *
-   * @return \Drupal\business_rules\VariableObject|\Drupal\business_rules\VariablesSet
+   * @return VariableObject|VariablesSet
    *   The evaluated variables.
    */
   public function evaluate(Variable $variable, BusinessRulesEvent $event);
@@ -29,7 +31,7 @@ interface BusinessRulesVariablePluginInterface extends BusinessRulesItemPluginIn
    * Give a chance to each variable plugin to change the variable details row on
    * Available Variables Box.
    *
-   * @param \Drupal\business_rules\Entity\Variable $variable
+   * @param Variable $variable
    *   The variable.
    * @param array $row
    *   The row which contains the variable.
diff --git a/src/Plugin/EntityReferenceSelection/BusinessRulesViewsSelection.php b/src/Plugin/EntityReferenceSelection/BusinessRulesViewsSelection.php
index 2bc13aa..80560d5 100644
--- a/src/Plugin/EntityReferenceSelection/BusinessRulesViewsSelection.php
+++ b/src/Plugin/EntityReferenceSelection/BusinessRulesViewsSelection.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\business_rules\Plugin\EntityReferenceSelection;
 
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\business_rules\Ajax\UpdateOptionsCommand;
 use Drupal\business_rules\Util\BusinessRulesUtil;
 use Drupal\Component\Utility\Html;
@@ -38,7 +40,7 @@ class BusinessRulesViewsSelection extends PluginBase implements SelectionInterfa
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -52,28 +54,28 @@ class BusinessRulesViewsSelection extends PluginBase implements SelectionInterfa
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The Business Rules Util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   protected $util;
 
   /**
    * The loaded View object.
    *
-   * @var \Drupal\views\ViewExecutable
+   * @var ViewExecutable
    */
   protected $view;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
@@ -86,15 +88,15 @@ class BusinessRulesViewsSelection extends PluginBase implements SelectionInterfa
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\business_rules\Util\BusinessRulesUtil $util
+   * @param BusinessRulesUtil $util
    *   The BusinessRulesUtil.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, AccountInterface $current_user, BusinessRulesUtil $util, MessengerInterface $messenger) {
@@ -164,7 +166,7 @@ class BusinessRulesViewsSelection extends PluginBase implements SelectionInterfa
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return mixed
@@ -185,7 +187,7 @@ class BusinessRulesViewsSelection extends PluginBase implements SelectionInterfa
           break;
         }
         $parent_field_key = array_shift($parents);
-        /** @var \Drupal\field\Entity\FieldConfig $definition */
+        /** @var FieldConfig $definition */
         $definition = $entity->getFieldDefinition($parent_field_key);
         if ($definition->getSetting('target_type') !== 'paragraph') {
           break;
@@ -253,7 +255,7 @@ class BusinessRulesViewsSelection extends PluginBase implements SelectionInterfa
         // Check if field is multiple or not.
         $multiple = FALSE;
         /**
-         * @var \Drupal\field\Entity\FieldStorageConfig $storage_config
+         * @var FieldStorageConfig $storage_config
          */
         $storage_config = $field_definition[$child]->getFieldStorageDefinition();
         if ($storage_config->getCardinality() === -1) {
@@ -359,7 +361,7 @@ class BusinessRulesViewsSelection extends PluginBase implements SelectionInterfa
         '#description' => '<p>' . $this->t('Choose the view and display that select the entities that can be referenced.<br />Only views with a display of type "Entity Reference" are eligible.') . '</p>',
       ];
 
-      /** @var \Drupal\field\Entity\FieldConfig $field_config */
+      /** @var FieldConfig $field_config */
       $field_config = $this->util->request->get('field_config');
       $entity_type = $field_config->getTargetEntityTypeId();
       $bundle = $field_config->getTargetBundle();
diff --git a/src/ScheduleAccessControlHandler.php b/src/ScheduleAccessControlHandler.php
index d7c66a5..3679f20 100644
--- a/src/ScheduleAccessControlHandler.php
+++ b/src/ScheduleAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\business_rules;
 
+use Drupal\business_rules\Entity\ScheduleInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,7 +19,7 @@ class ScheduleAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\business_rules\Entity\ScheduleInterface $entity */
+    /** @var ScheduleInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view schedule entities');
diff --git a/src/ScheduleHtmlRouteProvider.php b/src/ScheduleHtmlRouteProvider.php
index 31a40da..0950f91 100644
--- a/src/ScheduleHtmlRouteProvider.php
+++ b/src/ScheduleHtmlRouteProvider.php
@@ -48,10 +48,10 @@ class ScheduleHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -76,10 +76,10 @@ class ScheduleHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -100,10 +100,10 @@ class ScheduleHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -124,10 +124,10 @@ class ScheduleHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -148,10 +148,10 @@ class ScheduleHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -172,10 +172,10 @@ class ScheduleHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/ScheduleStorageInterface.php b/src/ScheduleStorageInterface.php
index 5bad4a7..3606f3d 100644
--- a/src/ScheduleStorageInterface.php
+++ b/src/ScheduleStorageInterface.php
@@ -20,7 +20,7 @@ interface ScheduleStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Schedule revision IDs for a specific Schedule.
    *
-   * @param \Drupal\business_rules\Entity\ScheduleInterface $entity
+   * @param ScheduleInterface $entity
    *   The Schedule entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface ScheduleStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as Schedule author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface ScheduleStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\business_rules\Entity\ScheduleInterface $entity
+   * @param ScheduleInterface $entity
    *   The Schedule entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface ScheduleStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all Schedule with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/Util/BusinessRulesProcessor.php b/src/Util/BusinessRulesProcessor.php
index e09b587..6c75793 100644
--- a/src/Util/BusinessRulesProcessor.php
+++ b/src/Util/BusinessRulesProcessor.php
@@ -2,6 +2,18 @@
 
 namespace Drupal\business_rules\Util;
 
+use Drupal\business_rules\Plugin\BusinessRulesActionManager;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Symfony\Component\EventDispatcher\EventDispatcher;
+use Drupal\business_rules\Plugin\BusinessRulesVariableManager;
+use Drupal\business_rules\Plugin\BusinessRulesConditionManager;
+use Drupal\Core\Config\StorageInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Component\Uuid\Php;
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
 use Drupal\business_rules\Entity\BusinessRule;
@@ -19,7 +31,6 @@ use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\dbug\Dbug;
 use Drupal\Core\Messenger\MessengerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Class BusinessRulesProcessor.
@@ -35,28 +46,28 @@ class BusinessRulesProcessor {
   /**
    * The business rule id being executed.
    *
-   * @var \Drupal\business_rules\Entity\BusinessRule
+   * @var BusinessRule
    */
   public $ruleBeingExecuted;
 
   /**
    * The action manager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesActionManager
+   * @var BusinessRulesActionManager
    */
   protected $actionManager;
 
   /**
    * A configuration object with business_rules settings.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -77,7 +88,7 @@ class BusinessRulesProcessor {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcher
+   * @var EventDispatcher
    */
   protected $eventDispatcher;
 
@@ -99,58 +110,58 @@ class BusinessRulesProcessor {
   /**
    * The variable manager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesVariableManager
+   * @var BusinessRulesVariableManager
    */
   protected $variableManager;
 
   /**
    * The condition manager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesConditionManager
+   * @var BusinessRulesConditionManager
    */
   private $conditionManager;
 
   /**
    * The storage.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   private $storage;
 
   /**
    * The Business Rules Util.
    *
-   * @var \Drupal\business_rules\Util\BusinessRulesUtil
+   * @var BusinessRulesUtil
    */
   private $util;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Generates a UUID v4 (RFC 4122 section 4.4) using PHP code.
    *
-   * @var \Drupal\Component\Uuid\Php
+   * @var Php
    */
   protected $uuid;
 
   /**
    * BusinessRulesProcessor constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   Drupal container.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(ContainerInterface $container) {
@@ -170,7 +181,7 @@ class BusinessRulesProcessor {
   /**
    * Process rules.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    */
   public function process(BusinessRulesEvent $event) {
@@ -186,7 +197,7 @@ class BusinessRulesProcessor {
     }
 
     // Dispatch a event before start the processing.
-    $this->eventDispatcher->dispatch('business_rules.before_process_event', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.before_process_event');
 
     if (!$event->hasArgument('variables')) {
       $event->setArgument('variables', new VariablesSet());
@@ -200,7 +211,7 @@ class BusinessRulesProcessor {
     $this->saveDebugInfo();
 
     // Dispatch a event after processing the business rule.
-    $this->eventDispatcher->dispatch('business_rules.after_process_event', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.after_process_event');
   }
 
   /**
@@ -213,7 +224,7 @@ class BusinessRulesProcessor {
    * loops when there is a business rule being executed on entity update for
    * example.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event being processed.
    *
    * @return bool
@@ -239,7 +250,7 @@ class BusinessRulesProcessor {
   /**
    * Check if there is a Business rule configured for the given event.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    * @param string $trigger
    *   The trigger.
@@ -255,7 +266,7 @@ class BusinessRulesProcessor {
     $triggered_rules = [];
 
     // Dispatch a event before check the triggered rules.
-    $this->eventDispatcher->dispatch('business_rules.before_check_the_triggered_rules', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.before_check_the_triggered_rules');
 
     foreach ($rules as $rule) {
       $rule = new BusinessRule($rule);
@@ -268,7 +279,7 @@ class BusinessRulesProcessor {
     }
 
     // Dispatch a event after check the triggered rules.
-    $this->eventDispatcher->dispatch('business_rules.after_check_the_triggered_rules', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.after_check_the_triggered_rules');
 
     return $triggered_rules;
   }
@@ -278,11 +289,11 @@ class BusinessRulesProcessor {
    *
    * @param array $triggered_rules
    *   Array of triggered rules.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    */
   public function processTriggeredRules(array $triggered_rules, BusinessRulesEvent $event) {
-    /** @var \Drupal\business_rules\Entity\BusinessRule $rule */
+    /** @var BusinessRule $rule */
     foreach ($triggered_rules as $rule) {
       $items                   = $rule->getItems();
       $this->ruleBeingExecuted = $rule;
@@ -313,7 +324,7 @@ class BusinessRulesProcessor {
       $array = (object) $array;
       $event = new Event($array);
       // Dispatch a event before save debug info block.
-      $this->eventDispatcher->dispatch('business_rules.before_save_debug_info_block', $event);
+      $this->eventDispatcher->dispatch($event, 'business_rules.before_save_debug_info_block');
       $array = (array) $array;
 
       $key_value->set($session_id, $array);
@@ -327,16 +338,16 @@ class BusinessRulesProcessor {
    * @param array $items
    *   Array of items to pe processed. Each item must be a instance of
    *   BusinessRulesItemObject.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    * @param string $parent_id
    *   The Item parent Id. It can be the Business Rule or other item.
    */
   public function processItems(array $items, BusinessRulesEvent $event, $parent_id) {
     // Dispatch a event before process business rule items.
-    $this->eventDispatcher->dispatch('business_rules.before_process_items', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.before_process_items');
 
-    /** @var \Drupal\business_rules\BusinessRulesItemObject $item */
+    /** @var BusinessRulesItemObject $item */
     foreach ($items as $item) {
       if ($item->getType() == BusinessRulesItemObject::ACTION) {
         $action = Action::load($item->getId());
@@ -388,7 +399,7 @@ class BusinessRulesProcessor {
     }
 
     // Dispatch a event after process business rule items.
-    $this->eventDispatcher->dispatch('business_rules.after_process_items', $event);
+    $this->eventDispatcher->dispatch($event, 'business_rules.after_process_items');
   }
 
   /**
@@ -398,8 +409,7 @@ class BusinessRulesProcessor {
    *   The render array.
    */
   public function getDebugRenderArray() {
-    /** @var \Drupal\business_rules\Entity\BusinessRule $rule */
-
+    /** @var BusinessRule $rule */
     $triggered_rules     = isset($this->debugArray['triggered_rules']) ? $this->debugArray['triggered_rules'] : [];
     $evaluates_variables = isset($this->debugArray['variables']) ? $this->debugArray['variables'] : [];
     $output              = [];
@@ -427,7 +437,7 @@ class BusinessRulesProcessor {
           '#collapsed'   => TRUE,
         ];
 
-        /** @var \Drupal\business_rules\VariableObject $evaluates_variable */
+        /** @var VariableObject $evaluates_variable */
         foreach ($evaluates_variables[$rule->id()] as $evaluates_variable) {
           $variable = Variable::load($evaluates_variable->getId());
           if ($variable instanceof Variable) {
@@ -482,9 +492,9 @@ class BusinessRulesProcessor {
   /**
    * Executes one Action.
    *
-   * @param \Drupal\business_rules\Entity\Action $action
+   * @param Action $action
    *   The action.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    *
    * @return array
@@ -495,7 +505,7 @@ class BusinessRulesProcessor {
   public function executeAction(Action $action, BusinessRulesEvent $event) {
 
     // Dispatch a event before execute an action.
-    $this->eventDispatcher->dispatch('business_rules.before_execute_action', new Event($event, $action));
+    $this->eventDispatcher->dispatch(new Event($event, $action), 'business_rules.before_execute_action');
 
     $action_variables = $action->getVariables();
     $this->evaluateVariables($action_variables, $event);
@@ -504,7 +514,7 @@ class BusinessRulesProcessor {
     $this->debugArray['action_result'][$this->ruleBeingExecuted->id()][$action->id()] = $result;
 
     // Dispatch a event after execute an action.
-    $this->eventDispatcher->dispatch('business_rules.after_execute_action', new Event($event, $action));
+    $this->eventDispatcher->dispatch(new Event($event, $action), 'business_rules.after_execute_action');
 
     return $result;
   }
@@ -512,9 +522,9 @@ class BusinessRulesProcessor {
   /**
    * Checks if one condition is valid.
    *
-   * @param \Drupal\business_rules\Entity\Condition $condition
+   * @param Condition $condition
    *   The condition.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    *
    * @return bool
@@ -525,7 +535,7 @@ class BusinessRulesProcessor {
   public function isConditionValid(Condition $condition, BusinessRulesEvent $event) {
 
     // Dispatch a event before check if condition is valid.
-    $this->eventDispatcher->dispatch('business_rules.before_check_if_condition_is_valid', new Event($event, $condition));
+    $this->eventDispatcher->dispatch(new Event($event, $condition), 'business_rules.before_check_if_condition_is_valid');
 
     $condition_variables = $condition->getVariables();
     $this->evaluateVariables($condition_variables, $event);
@@ -533,7 +543,7 @@ class BusinessRulesProcessor {
     $result = $condition->isReverse() ? !$result : $result;
 
     // Dispatch a event after check if condition is valid.
-    $this->eventDispatcher->dispatch('business_rules.after_check_if_condition_is_valid', new Event($event, $condition));
+    $this->eventDispatcher->dispatch(new Event($event, $condition), 'business_rules.after_check_if_condition_is_valid');
 
     return $result;
 
@@ -553,7 +563,7 @@ class BusinessRulesProcessor {
   protected function getDebugItems(array $items, $parent_id) {
     /** @var \Drupal\business_rules\BusinessRulesItemObject $item */
     /** @var \Drupal\business_rules\Entity\Action $executed_action */
-    /** @var \Drupal\business_rules\Entity\Condition $executed_condition */
+    /** @var Condition $executed_condition */
     $actions_executed   = isset($this->debugArray['actions'][$this->ruleBeingExecuted->id()]) ? $this->debugArray['actions'][$this->ruleBeingExecuted->id()] : [];
     $conditions_success = isset($this->debugArray['conditions'][$this->ruleBeingExecuted->id()]['success']) ? $this->debugArray['conditions'][$this->ruleBeingExecuted->id()]['success'] : [];
     $output             = [];
@@ -653,19 +663,19 @@ class BusinessRulesProcessor {
   /**
    * Evaluate all variables from a VariableSet for a given event.
    *
-   * @param \Drupal\business_rules\VariablesSet $variablesSet
+   * @param VariablesSet $variablesSet
    *   The variable set.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    *
    * @throws \Exception
    */
   public function evaluateVariables(VariablesSet $variablesSet, BusinessRulesEvent $event) {
     // Dispatch a event before evaluate variables.
-    $this->eventDispatcher->dispatch('business_rules.before_evaluate_variables', new Event($event, $variablesSet));
+    $this->eventDispatcher->dispatch(new Event($event, $variablesSet), 'business_rules.before_evaluate_variables');
 
     /** @var \Drupal\business_rules\VariableObject $variable */
-    /** @var \Drupal\business_rules\VariablesSet $eventVariables */
+    /** @var VariablesSet $eventVariables */
     if ($variablesSet->count()) {
       foreach ($variablesSet->getVariables() as $variable) {
         $varObject = Variable::load($variable->getId());
@@ -679,18 +689,18 @@ class BusinessRulesProcessor {
     }
 
     // Dispatch a event after evaluate variables.
-    $this->eventDispatcher->dispatch('business_rules.after_evaluate_variables', new Event($event, $variablesSet));
+    $this->eventDispatcher->dispatch(new Event($event, $variablesSet), 'business_rules.after_evaluate_variables');
   }
 
   /**
    * Evaluate the variable value.
    *
-   * @param \Drupal\business_rules\Entity\Variable $variable
+   * @param Variable $variable
    *   The variable.
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    *
-   * @return \Drupal\business_rules\VariableObject|\Drupal\business_rules\VariablesSet
+   * @return VariableObject|VariablesSet
    *   The evaluated variable or a VariableSet which processed variables.
    *
    * @throws \Exception
@@ -703,7 +713,7 @@ class BusinessRulesProcessor {
     }
 
     /** @var \Drupal\business_rules\VariablesSet $eventVariables */
-    /** @var \Drupal\business_rules\VariableObject $item */
+    /** @var VariableObject $item */
     $eventVariables     = $event->getArgument('variables');
     $variable_variables = $variable->getVariables();
 
@@ -738,14 +748,14 @@ class BusinessRulesProcessor {
    *
    * @param string $reacts_on
    *   The Event Name.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The Entity.
    *
    * @return bool
    *   TRUE if the business rule exists, FALSE otherwise.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function ruleExists($reacts_on, EntityInterface $entity) {
 
diff --git a/src/Util/BusinessRulesUtil.php b/src/Util/BusinessRulesUtil.php
index 67ab76a..44442af 100644
--- a/src/Util/BusinessRulesUtil.php
+++ b/src/Util/BusinessRulesUtil.php
@@ -2,6 +2,22 @@
 
 namespace Drupal\business_rules\Util;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Field\FieldTypePluginManagerInterface;
+use Drupal\business_rules\Util\Flowchart\Flowchart;
+use Psr\Log\LoggerInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Utility\Token;
+use Drupal\Core\KeyValueStore\KeyValueExpirableFactoryInterface;
+use Drupal\business_rules\Plugin\BusinessRulesVariableManager;
+use Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface;
+use Drupal\Core\Ajax\AjaxResponse;
+use Drupal\business_rules\BusinessRulesItemObject;
+use Drupal\business_rules\VariablesSet;
+use Drupal\business_rules\VariableObject;
 use Drupal\business_rules\ActionListBuilder;
 use Drupal\business_rules\BusinessRuleListBuilder;
 use Drupal\business_rules\ConditionListBuilder;
@@ -55,77 +71,77 @@ class BusinessRulesUtil {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   public $configFactory;
 
   /**
    * Drupal Container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   public $container;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   public $entityFieldManager;
 
   /**
    * The entity type bundle info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   public $entityTypeBundleInfo;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   public $entityTypeManager;
 
   /**
    * The field type plugin manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   public $fieldTypePluginManager;
 
   /**
    * The Business Rules Flowchart.
    *
-   * @var \Drupal\business_rules\Util\Flowchart\Flowchart
+   * @var Flowchart
    */
   public $flowchart;
 
   /**
    * The Business Rules logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   public $logger;
 
   /**
    * The ModuleHandler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   public $moduleHandler;
 
   /**
    * The currently active request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   public $request;
 
   /**
    * The Drupal token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   public $token;
 
@@ -139,21 +155,21 @@ class BusinessRulesUtil {
   /**
    * The KeyValueExpirableFactory.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueExpirableFactoryInterface
+   * @var KeyValueExpirableFactoryInterface
    */
   protected $keyValueExpirable;
 
   /**
    * The variable manager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesVariableManager
+   * @var BusinessRulesVariableManager
    */
   protected $variableManager;
 
   /**
    * BusinessRulesUtil constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The services container.
    */
   public function __construct(ContainerInterface $container) {
@@ -268,7 +284,7 @@ class BusinessRulesUtil {
   /**
    * Get an render array for add items form.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The Business Rule Item.
    * @param array $items
    *   The array of items to render inside the table form.
@@ -278,7 +294,7 @@ class BusinessRulesUtil {
    *   The item label.
    * @param string $label_plural
    *   The item label in plural.
-   * @param \Drupal\Core\Url $back_url
+   * @param Url $back_url
    *   The return Url.
    *
    * @return array
@@ -498,7 +514,7 @@ class BusinessRulesUtil {
   /**
    * Return the current Url.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The Url.
    */
   public function getCurrentUri() {
@@ -541,7 +557,7 @@ class BusinessRulesUtil {
    * @param string $collection
    *   The keyvalue collection.
    *
-   * @return \Drupal\Core\KeyValueStore\KeyValueStoreExpirableInterface
+   * @return KeyValueStoreExpirableInterface
    *   The keyValueFactory.
    */
   public function getKeyValueExpirable($collection) {
@@ -551,7 +567,7 @@ class BusinessRulesUtil {
   /**
    * Return the previous Url.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The Url.
    */
   public function getPreviousUri() {
@@ -594,7 +610,7 @@ class BusinessRulesUtil {
   /**
    * Return a details box which the available variables for use on this context.
    *
-   * @param \Drupal\business_rules\Entity\BusinessRulesItemBase $item
+   * @param BusinessRulesItemBase $item
    *   The business Rule Item.
    * @param string $plugin_type
    *   The variable plugin type id.
@@ -611,7 +627,7 @@ class BusinessRulesUtil {
     $details             = [];
 
     if (is_array($variables)) {
-      /** @var \Drupal\business_rules\Entity\Variable $variable */
+      /** @var Variable $variable */
       foreach ($variables as $variable) {
         // Check targetBundle.
         if (((($variable->getTargetBundle() == $target_bundle || empty($target_bundle) || empty($variable->getTargetBundle()))
@@ -696,7 +712,7 @@ class BusinessRulesUtil {
     $options = [];
 
     $variables = Variable::loadMultiple();
-    /** @var \Drupal\business_rules\Entity\Variable $variable */
+    /** @var Variable $variable */
     foreach ($variables as $variable) {
       if ((!count($variable_types) || in_array($variable->getType(), $variable_types))
         && (!count($entity_type) || in_array($variable->getTargetEntityType(), $entity_type))
@@ -747,10 +763,10 @@ class BusinessRulesUtil {
   /**
    * Display the entity variable fields.
    *
-   * @param \Drupal\business_rules\Entity\Variable $variable
+   * @param Variable $variable
    *   The variable entity.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse|array
+   * @return AjaxResponse|array
    *   The AjaxResponse or the render array.
    */
   public function getVariableFieldsModalInfo(Variable $variable) {
@@ -795,11 +811,11 @@ class BusinessRulesUtil {
   /**
    * Remove the item references after it's deletion.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The event.
    */
   public function removeItemReferences(BusinessRulesEvent $event) {
-    /** @var \Drupal\business_rules\Entity\BusinessRulesItemBase $item */
+    /** @var BusinessRulesItemBase $item */
     $item       = $event->getSubject();
     $conditions = $this->getConditionsUsingItem($item);
     $actions    = $this->getActionsUsingItem($item);
@@ -811,10 +827,10 @@ class BusinessRulesUtil {
     }
 
     // Remove item from conditions.
-    /** @var \Drupal\business_rules\Entity\Condition $condition */
+    /** @var Condition $condition */
     foreach ($conditions as $condition) {
       $success_items = $condition->getSuccessItems();
-      /** @var \Drupal\business_rules\BusinessRulesItemObject $success_item */
+      /** @var BusinessRulesItemObject $success_item */
       foreach ($success_items as $success_item) {
         if ($success_item->getId() == $item->id()) {
           $condition->removeSuccessItem($success_item);
@@ -822,7 +838,7 @@ class BusinessRulesUtil {
       }
 
       $fail_items = $condition->getFailItems();
-      /** @var \Drupal\business_rules\BusinessRulesItemObject $fail_item */
+      /** @var BusinessRulesItemObject $fail_item */
       foreach ($fail_items as $fail_item) {
         if ($fail_item->getId() == $item->id()) {
           $condition->removeFailItem($fail_item);
@@ -833,7 +849,7 @@ class BusinessRulesUtil {
     }
 
     // Remove item from actions.
-    /** @var \Drupal\business_rules\Entity\Action $action */
+    /** @var Action $action */
     foreach ($actions as $action) {
       $action_items = $action->getSettings('items');
       unset($action_items[$item->id()]);
@@ -843,10 +859,10 @@ class BusinessRulesUtil {
     }
 
     // Remove item from business rules.
-    /** @var \Drupal\business_rules\Entity\BusinessRule $rule */
+    /** @var BusinessRule $rule */
     foreach ($rules as $rule) {
       $rule_items = $rule->getItems();
-      /** @var \Drupal\business_rules\BusinessRulesItemObject $rule_item */
+      /** @var BusinessRulesItemObject $rule_item */
       foreach ($rule_items as $rule_item) {
         if ($rule_item->getId() == $item->id()) {
           $rule->removeItem($rule_item);
@@ -861,7 +877,7 @@ class BusinessRulesUtil {
   /**
    * Get all conditions using the item.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to look for conditions using it.
    *
    * @return array
@@ -871,13 +887,13 @@ class BusinessRulesUtil {
     $conditions = Condition::loadMultiple();
     $used_by    = [];
 
-    /** @var \Drupal\business_rules\Entity\Condition $condition */
+    /** @var Condition $condition */
     if ($item instanceof Variable) {
       foreach ($conditions as $condition) {
-        /** @var \Drupal\business_rules\VariablesSet $variables */
+        /** @var VariablesSet $variables */
         $variables = $condition->getVariables();
         if ($variables->count()) {
-          /** @var \Drupal\business_rules\VariableObject $variable */
+          /** @var VariableObject $variable */
           foreach ($variables->getVariables() as $variable) {
             if ($variable->getId() == $item->id()) {
               $used_by[$variable->getId()] = $condition;
@@ -906,7 +922,7 @@ class BusinessRulesUtil {
   /**
    * Get all actions using the item.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to look for actions using it.
    *
    * @return array
@@ -917,13 +933,13 @@ class BusinessRulesUtil {
     $actions = Action::loadMultiple();
     $used_by = [];
 
-    /** @var \Drupal\business_rules\Entity\Action $action */
+    /** @var Action $action */
     if ($item instanceof Variable) {
       foreach ($actions as $action) {
-        /** @var \Drupal\business_rules\VariablesSet $variables */
+        /** @var VariablesSet $variables */
         $variables = $action->getVariables();
         if ($variables->count()) {
-          /** @var \Drupal\business_rules\VariableObject $variable */
+          /** @var VariableObject $variable */
           foreach ($variables->getVariables() as $variable) {
             if ($variable->getId() == $item->id()) {
               $used_by[$variable->getId()] = $action;
@@ -946,7 +962,7 @@ class BusinessRulesUtil {
   /**
    * Get all Business Rules using the item.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to look for business rules using it.
    *
    * @return array
@@ -956,7 +972,7 @@ class BusinessRulesUtil {
     $rules   = BusinessRule::loadMultiple();
     $used_by = [];
 
-    /** @var \Drupal\business_rules\Entity\BusinessRule $rule */
+    /** @var BusinessRule $rule */
     foreach ($rules as $rule) {
       if (in_array($item->id(), array_keys($rule->getItems()))) {
         $used_by[] = $rule;
@@ -969,7 +985,7 @@ class BusinessRulesUtil {
   /**
    * Return a details box which rules in where this item is being used.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to get the business rules using it.
    *
    * @return array
@@ -981,7 +997,7 @@ class BusinessRulesUtil {
     $details = [];
 
     if (count($used_by)) {
-      /** @var \Drupal\business_rules\Entity\BusinessRule $rule */
+      /** @var BusinessRule $rule */
       $rule = $used_by[array_keys($used_by)[0]];
 
       $storage = $this->entityTypeManager->getStorage('business_rule');
@@ -1015,7 +1031,7 @@ class BusinessRulesUtil {
   /**
    * Return a details box which conditions using this item.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to get the conditions using it.
    *
    * @return array
@@ -1027,7 +1043,7 @@ class BusinessRulesUtil {
     $details = [];
 
     if (count($used_by)) {
-      /** @var \Drupal\business_rules\Entity\Condition $condition */
+      /** @var Condition $condition */
       $condition = $used_by[array_keys($used_by)[0]];
       $storage   = $this->entityTypeManager->getStorage('business_rules_condition');
       $list      = new ConditionListBuilder($condition->getEntityType(), $storage);
@@ -1059,7 +1075,7 @@ class BusinessRulesUtil {
   /**
    * Return a details box which actions using this item.
    *
-   * @param \Drupal\business_rules\ItemInterface $item
+   * @param ItemInterface $item
    *   The item to get the actions using it.
    *
    * @return array
@@ -1070,7 +1086,7 @@ class BusinessRulesUtil {
     $used_by = $this->getActionsUsingItem($item);
     $details = [];
 
-    /** @var \Drupal\business_rules\Entity\Condition $action */
+    /** @var Condition $action */
     if (count($used_by)) {
       $action  = $used_by[array_keys($used_by)[0]];
       $storage = $this->entityTypeManager->getStorage('business_rules_action');
diff --git a/src/Util/Flowchart/Element.php b/src/Util/Flowchart/Element.php
index 4ced630..dbae8ac 100644
--- a/src/Util/Flowchart/Element.php
+++ b/src/Util/Flowchart/Element.php
@@ -21,7 +21,7 @@ class Element {
   /**
    * The Business Rule item.
    *
-   * @var \Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   protected $item;
 
@@ -49,7 +49,7 @@ class Element {
   /**
    * Element constructor.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $item
+   * @param EntityInterface|null $item
    *   The entity.
    * @param \Drupal\business_rules\Util\Flowchart\Element|null $parent
    *   The parent entity.
@@ -89,7 +89,7 @@ class Element {
   /**
    * Get the item element.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The item.
    */
   public function getItem() {
@@ -99,7 +99,7 @@ class Element {
   /**
    * Set the item element.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   The item.
    */
   public function setItem(EntityInterface $item) {
diff --git a/src/Util/Flowchart/Flowchart.php b/src/Util/Flowchart/Flowchart.php
index cdd6b68..4501a4e 100644
--- a/src/Util/Flowchart/Flowchart.php
+++ b/src/Util/Flowchart/Flowchart.php
@@ -25,7 +25,7 @@ class Flowchart {
   /**
    * The matrix.
    *
-   * @var \Drupal\business_rules\Util\Flowchart\Matrix
+   * @var Matrix
    */
   private $matrix;
 
@@ -39,7 +39,7 @@ class Flowchart {
   /**
    * Show the Business Rule workflow for one item.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   The item.
    *
    * @return array
@@ -94,7 +94,7 @@ class Flowchart {
   /**
    * Check if item has children.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   The item.
    *
    * @return bool
@@ -128,9 +128,9 @@ class Flowchart {
   /**
    * Mount the graph matrix.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   The Business Rule item.
-   * @param null|\Drupal\business_rules\Util\Flowchart\Element $parent
+   * @param null|Element $parent
    *   The parent Element.
    * @param string $info
    *   Additional info for the method.
@@ -209,7 +209,7 @@ class Flowchart {
 
       if ($item instanceof BusinessRule) {
         $children = $item->getItems();
-        /** @var \Drupal\business_rules\BusinessRulesItemObject $child */
+        /** @var BusinessRulesItemObject $child */
         foreach ($children as $child) {
           $child = $child->loadEntity();
           if (!empty($child)) {
@@ -219,7 +219,7 @@ class Flowchart {
       }
       elseif ($item instanceof Condition) {
         $success_items = $item->getSuccessItems();
-        /** @var \Drupal\business_rules\BusinessRulesItemObject $success_item */
+        /** @var BusinessRulesItemObject $success_item */
         foreach ($success_items as $success_item) {
           $success_item = $success_item->loadEntity();
           $yes          = $this->t('Yes');
@@ -267,7 +267,7 @@ class Flowchart {
     $this->processConnections($cells);
 
     foreach ($cells as $cell) {
-      /** @var \Drupal\business_rules\Util\Flowchart\Element $element */
+      /** @var Element $element */
       $element = $cell['element'];
       if ($element->getParent()) {
         $graph[] = $this->getConnection($cell);
@@ -275,7 +275,7 @@ class Flowchart {
     }
 
     foreach ($cells as $cell) {
-      /** @var \Drupal\business_rules\Util\Flowchart\Element $element */
+      /** @var Element $element */
       $element = $cell['element'];
       if ($element->getParent()) {
         $graph = array_merge($graph, $this->getItemGraph($element));
@@ -320,7 +320,7 @@ class Flowchart {
    */
   private function processConnections(array $cells) {
     foreach ($cells as $cell) {
-      /** @var \Drupal\business_rules\Util\Flowchart\Element $element */
+      /** @var Element $element */
       $element    = $cell['element'];
       $originUUid = $this->getOriginUuid($cell);
       $element->setOriginUuid($originUUid);
@@ -375,7 +375,7 @@ class Flowchart {
   /**
    * Get the item meta data.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   The item.
    *
    * @return array
@@ -420,7 +420,7 @@ class Flowchart {
     }
     else {
       $parent = $cell['element']->getParent();
-      /** @var \Drupal\business_rules\Util\Flowchart\Element $element */
+      /** @var Element $element */
       $element       = $cell['element'];
       $element_above = $this->matrix->getElementAbove($element);
 
@@ -445,7 +445,7 @@ class Flowchart {
   /**
    * Get the workflow graph definition.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   The item.
    *
    * @return array|string
diff --git a/src/Util/Flowchart/Matrix.php b/src/Util/Flowchart/Matrix.php
index e4dd551..1fc149f 100644
--- a/src/Util/Flowchart/Matrix.php
+++ b/src/Util/Flowchart/Matrix.php
@@ -29,7 +29,7 @@ class Matrix {
   /**
    * The root element.
    *
-   * @var \Drupal\business_rules\Util\Flowchart\Element
+   * @var Element
    */
   private $rootElement;
 
@@ -72,10 +72,10 @@ class Matrix {
   /**
    * Get the element above in the matrix.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    *
-   * @return null|\Drupal\business_rules\Util\Flowchart\Element
+   * @return null|Element
    *   The element.
    */
   public function getElementAbove(Element $element) {
@@ -126,10 +126,10 @@ class Matrix {
   /**
    * Get matrix element by item.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $item
+   * @param EntityInterface $item
    *   The item.
    *
-   * @return \Drupal\business_rules\Util\Flowchart\Element
+   * @return Element
    *   The Element.
    */
   public function getElementByItem(EntityInterface $item) {
@@ -167,9 +167,9 @@ class Matrix {
   /**
    * Put an element inside the matrix.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
-   * @param \Drupal\business_rules\Util\Flowchart\Element $parent
+   * @param Element $parent
    *   The parent element.
    * @param string $direction
    *   The direction: bottom|right|left|bottom-right|bottom-left.
@@ -270,7 +270,7 @@ class Matrix {
   /**
    * Get the root element.
    *
-   * @return \Drupal\business_rules\Util\Flowchart\Element
+   * @return Element
    *   The root element.
    */
   public function getRootElement() {
@@ -280,7 +280,7 @@ class Matrix {
   /**
    * Put an element at one position in the matrix.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    * @param int $x
    *   The X position.
@@ -324,7 +324,7 @@ class Matrix {
   /**
    * Put the root element at the matrix.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    */
   public function putRootElement(Element $element) {
@@ -339,7 +339,7 @@ class Matrix {
   /**
    * Shift cells that contains one element to bottom, left or right.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    * @param string $direction
    *   The direction: bottom|left|right.
@@ -391,7 +391,7 @@ class Matrix {
   /**
    * Get all not empty cells at bottom of one element.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    *
    * @return array
@@ -418,7 +418,7 @@ class Matrix {
   /**
    * Get all not empty cells at right of one element.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    *
    * @return array
@@ -445,7 +445,7 @@ class Matrix {
   /**
    * Get all not empty cells at left of one element.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    *
    * @return array
@@ -472,7 +472,7 @@ class Matrix {
   /**
    * Check if the cell at right from the element is empty.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    *
    * @return bool
@@ -512,7 +512,7 @@ class Matrix {
   /**
    * Check if the cell at left from the element is empty.
    *
-   * @param \Drupal\business_rules\Util\Flowchart\Element $element
+   * @param Element $element
    *   The element.
    *
    * @return bool
diff --git a/src/VariableHtmlRouteProvider.php b/src/VariableHtmlRouteProvider.php
index 65a540b..800efa8 100644
--- a/src/VariableHtmlRouteProvider.php
+++ b/src/VariableHtmlRouteProvider.php
@@ -36,10 +36,10 @@ class VariableHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ -64,10 +64,10 @@ class VariableHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the add-form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getAddFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/VariableInterface.php b/src/VariableInterface.php
index cad758a..864ec21 100644
--- a/src/VariableInterface.php
+++ b/src/VariableInterface.php
@@ -13,10 +13,10 @@ interface VariableInterface extends ConfigEntityInterface, ItemInterface {
   /**
    * Evaluate the variable.
    *
-   * @param \Drupal\business_rules\Events\BusinessRulesEvent $event
+   * @param BusinessRulesEvent $event
    *   The dispatched event.
    *
-   * @return \Drupal\business_rules\VariableObject|\Drupal\business_rules\VariablesSet
+   * @return VariableObject|VariablesSet
    *   The evaluated variables.
    *
    * @throws \ReflectionException
diff --git a/src/VariablesSet.php b/src/VariablesSet.php
index de14b09..86e487b 100644
--- a/src/VariablesSet.php
+++ b/src/VariablesSet.php
@@ -19,7 +19,7 @@ class VariablesSet {
   /**
    * Append the variable to the array.
    *
-   * @param \Drupal\business_rules\VariableObject $variable
+   * @param VariableObject $variable
    *   The variable set.
    */
   public function append(VariableObject $variable) {
diff --git a/tests/src/FunctionalJavascript/DependentFieldsView.php b/tests/src/FunctionalJavascript/DependentFieldsView.php
index eb0ba07..d5ee8ea 100644
--- a/tests/src/FunctionalJavascript/DependentFieldsView.php
+++ b/tests/src/FunctionalJavascript/DependentFieldsView.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\business_rules\FunctionalJavascript;
 
+use Drupal\taxonomy\TermInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\taxonomy\Entity\Term;
@@ -35,21 +37,21 @@ class DependentFieldsView extends WebDriverTestBase {
   /**
    * A set of taxonomy terms needed by the system under test.
    *
-   * @var \Drupal\taxonomy\TermInterface[]
+   * @var TermInterface[]
    */
   protected $sutTerms;
 
   /**
    * A set of users needed by the system under test.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $sutUsers;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create terms in the vocabulary.
diff --git a/tests/src/FunctionalJavascript/ParagraphsAjaxSupport.php b/tests/src/FunctionalJavascript/ParagraphsAjaxSupport.php
index d3dfd7a..2ddaf7d 100644
--- a/tests/src/FunctionalJavascript/ParagraphsAjaxSupport.php
+++ b/tests/src/FunctionalJavascript/ParagraphsAjaxSupport.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\business_rules\FunctionalJavascript;
 
+use Drupal\taxonomy\TermInterface;
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\taxonomy\Entity\Term;
@@ -35,21 +37,21 @@ class ParagraphsAjaxSupport extends WebDriverTestBase {
   /**
    * A set of taxonomy terms needed by the system under test.
    *
-   * @var \Drupal\taxonomy\TermInterface[]
+   * @var TermInterface[]
    */
   protected $sutTerms;
 
   /**
    * A set of users needed by the system under test.
    *
-   * @var \Drupal\user\UserInterface[]
+   * @var UserInterface[]
    */
   protected $sutUsers;
 
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Create terms in the vocabulary.
diff --git a/tests/src/Kernel/BusinessRulesProcessorTest.php b/tests/src/Kernel/BusinessRulesProcessorTest.php
index aa51ae8..aa3a3f4 100644
--- a/tests/src/Kernel/BusinessRulesProcessorTest.php
+++ b/tests/src/Kernel/BusinessRulesProcessorTest.php
@@ -29,14 +29,14 @@ class BusinessRulesProcessorTest extends KernelTestBase {
   /**
    * A mostly-empty service container, which BusinessRulesProcessor requires.
    *
-   * @var \Drupal\Core\DependencyInjection\ContainerBuilder
+   * @var ContainerBuilder
    */
   protected $sutContainer;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Set up the service container.
diff --git a/tests/src/Unit/ConfigEntityCalculateDependencyTest.php b/tests/src/Unit/ConfigEntityCalculateDependencyTest.php
index 3fd5967..b81e1c3 100644
--- a/tests/src/Unit/ConfigEntityCalculateDependencyTest.php
+++ b/tests/src/Unit/ConfigEntityCalculateDependencyTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\business_rules\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\business_rules\BusinessRulesItemObject;
 use Drupal\business_rules\Entity\Action;
 use Drupal\business_rules\Entity\BusinessRule;
@@ -36,21 +37,21 @@ class ConfigEntityCalculateDependencyTest extends UnitTestCase {
   /**
    * The Business rules Action plugin manager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesActionManager|\PHPUnit\Framework\MockObject\MockObject
+   * @var BusinessRulesActionManager|MockObject
    */
   protected $businessRulesActionManager;
 
   /**
    * The Business rules Condition plugin manager.
    *
-   * @var \Drupal\business_rules\Plugin\BusinessRulesConditionManager|\PHPUnit\Framework\MockObject\MockObject
+   * @var BusinessRulesConditionManager|MockObject
    */
   protected $businessRulesConditionManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $entityStorage = $this->createMock(EntityStorageInterface::class);
     $entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $this->businessRulesActionManager = $this->createMock(BusinessRulesActionManager::class);
