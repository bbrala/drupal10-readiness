modules/contrib/graphql/examples/graphql_composable/src/GraphQL/Response/ArticleResponse.php
modules/contrib/graphql/examples/graphql_composable/src/Plugin/GraphQL/DataProducer/CreateArticle.php
modules/contrib/graphql/examples/graphql_composable/src/Plugin/GraphQL/Schema/ComposableSchemaExample.php
modules/contrib/graphql/examples/graphql_composable/src/Plugin/GraphQL/SchemaExtension/ComposableSchemaExampleExtension.php
modules/contrib/graphql/examples/graphql_composable/src/Wrappers/Response/ArticleResponse.php
modules/contrib/graphql/examples/graphql_example/src/Plugin/GraphQL/DataProducer/QueryArticles.php
modules/contrib/graphql/examples/graphql_example/src/Plugin/GraphQL/Schema/ExampleSchema.php
modules/contrib/graphql/examples/graphql_example/src/Plugin/GraphQL/SchemaExtension/ExampleSchemaExtension.php
modules/contrib/graphql/examples/graphql_example/src/Wrappers/QueryConnection.php
modules/contrib/graphql/graphql.api.php
modules/contrib/graphql/graphql.install
modules/contrib/graphql/graphql.module
modules/contrib/graphql/src/Access/ExplorerAccessCheck.php
modules/contrib/graphql/src/Access/QueryAccessCheck.php
modules/contrib/graphql/src/Access/VoyagerAccessCheck.php
modules/contrib/graphql/src/Annotation/DataProducer.php
modules/contrib/graphql/src/Annotation/PersistedQuery.php
modules/contrib/graphql/src/Annotation/Schema.php
modules/contrib/graphql/src/Annotation/SchemaExtension.php
modules/contrib/graphql/src/Cache/Context/StaticCacheContext.php
modules/contrib/graphql/src/Cache/RequestPolicy/GetOnly.php
modules/contrib/graphql/src/Config/LanguageConfigOverride.php
modules/contrib/graphql/src/Controller/ExplorerController.php
modules/contrib/graphql/src/Controller/RequestController.php
modules/contrib/graphql/src/Controller/ServerListBuilder.php
modules/contrib/graphql/src/Controller/SubrequestExtractionController.php
modules/contrib/graphql/src/Controller/ValidationController.php
modules/contrib/graphql/src/Controller/VoyagerController.php
modules/contrib/graphql/src/Entity/Server.php
modules/contrib/graphql/src/Entity/ServerInterface.php
modules/contrib/graphql/src/Event/OperationEvent.php
modules/contrib/graphql/src/EventSubscriber/CurrentLanguageResetTrait.php
modules/contrib/graphql/src/EventSubscriber/OperationSubscriber.php
modules/contrib/graphql/src/EventSubscriber/SubrequestSubscriber.php
modules/contrib/graphql/src/Form/PersistedQueriesForm.php
modules/contrib/graphql/src/Form/ServerForm.php
modules/contrib/graphql/src/GraphQL/Buffers/BufferBase.php
modules/contrib/graphql/src/GraphQL/Buffers/EntityBuffer.php
modules/contrib/graphql/src/GraphQL/Buffers/EntityRevisionBuffer.php
modules/contrib/graphql/src/GraphQL/Buffers/EntityUuidBuffer.php
modules/contrib/graphql/src/GraphQL/Execution/ExecutionResult.php
modules/contrib/graphql/src/GraphQL/Execution/Executor.php
modules/contrib/graphql/src/GraphQL/Execution/ExecutorFactory.php
modules/contrib/graphql/src/GraphQL/Execution/FieldContext.php
modules/contrib/graphql/src/GraphQL/Execution/ResolveContext.php
modules/contrib/graphql/src/GraphQL/Resolver/Argument.php
modules/contrib/graphql/src/GraphQL/Resolver/Callback.php
modules/contrib/graphql/src/GraphQL/Resolver/Composite.php
modules/contrib/graphql/src/GraphQL/Resolver/Condition.php
modules/contrib/graphql/src/GraphQL/Resolver/Context.php
modules/contrib/graphql/src/GraphQL/Resolver/DefaultValue.php
modules/contrib/graphql/src/GraphQL/Resolver/Map.php
modules/contrib/graphql/src/GraphQL/Resolver/ParentValue.php
modules/contrib/graphql/src/GraphQL/Resolver/Path.php
modules/contrib/graphql/src/GraphQL/Resolver/ResolverInterface.php
modules/contrib/graphql/src/GraphQL/Resolver/SourceContext.php
modules/contrib/graphql/src/GraphQL/Resolver/Tap.php
modules/contrib/graphql/src/GraphQL/Resolver/Value.php
modules/contrib/graphql/src/GraphQL/ResolverBuilder.php
modules/contrib/graphql/src/GraphQL/ResolverRegistry.php
modules/contrib/graphql/src/GraphQL/ResolverRegistryInterface.php
modules/contrib/graphql/src/GraphQL/Response/FileUploadResponse.php
modules/contrib/graphql/src/GraphQL/Response/Response.php
modules/contrib/graphql/src/GraphQL/Response/ResponseInterface.php
modules/contrib/graphql/src/GraphQL/Utility/DeferredUtility.php
modules/contrib/graphql/src/GraphQL/Utility/DocumentSerializer.php
modules/contrib/graphql/src/GraphQL/Utility/FileUpload.php
modules/contrib/graphql/src/GraphQL/Utility/Introspection.php
modules/contrib/graphql/src/GraphQL/Utility/JsonHelper.php
modules/contrib/graphql/src/GraphQL/Validator.php
modules/contrib/graphql/src/GraphQL/ValidatorInterface.php
modules/contrib/graphql/src/GraphqlServiceProvider.php
modules/contrib/graphql/src/Language/LanguageNegotiator.php
modules/contrib/graphql/src/PermissionProvider.php
modules/contrib/graphql/src/PersistedQuery/PersistedQueryPluginBase.php
modules/contrib/graphql/src/Plugin/DataProducerPluginCachingInterface.php
modules/contrib/graphql/src/Plugin/DataProducerPluginInterface.php
modules/contrib/graphql/src/Plugin/DataProducerPluginManager.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/DataProducerPluginBase.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/DataProducerPluginCachingTrait.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/DataProducerProxy.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityAccess.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityBundle.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityChanged.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityCreated.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityDescription.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityId.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityLabel.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityLanguage.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityLoad.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityLoadByUuid.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityLoadMultiple.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityOwner.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityPublished.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityRendered.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityTranslation.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityTranslations.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityType.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityUrl.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityUuid.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/Fields/Image/ImageDerivative.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/Fields/Image/ImageUrl.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/EntityDefinition.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/DefaultValue.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Description.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Hidden.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Id.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Label.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/MaxNumItems.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Multiple.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Reference.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Required.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Settings.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Status.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Type.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Weight.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Label.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Field/EntityReference.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceLayoutRevisions.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceRevisions.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceTrait.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Images/ImageResourceUrl.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkAttribute.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkDescription.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkExpanded.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkLabel.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkUrl.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuLinks.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuTree/MenuTreeLink.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuTree/MenuTreeSubtree.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Routing/RouteEntity.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Routing/RouteLoad.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Routing/Url/UrlPath.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/String/Uppercase.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Taxonomy/TaxonomyLoadTree.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Taxonomy/TermFieldAutocomplete.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/TypedData/PropertyPath.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/User/CurrentUser.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/User/PasswordReset.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Utility/Seek.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/XML/XMLAttribute.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/XML/XMLContent.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/XML/XMLParse.php
modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/XML/XMLXpath.php
modules/contrib/graphql/src/Plugin/GraphQL/Schema/ComposableSchema.php
modules/contrib/graphql/src/Plugin/GraphQL/Schema/SdlSchemaPluginBase.php
modules/contrib/graphql/src/Plugin/GraphQL/SchemaExtension/SdlSchemaExtensionPluginBase.php
modules/contrib/graphql/src/Plugin/LanguageNegotiation/OperationLanguageNegotiation.php
modules/contrib/graphql/src/Plugin/MenuLink/Deriver/ExplorerMenuLinkDeriver.php
modules/contrib/graphql/src/Plugin/MenuLink/Deriver/VoyagerMenuLinkDeriver.php
modules/contrib/graphql/src/Plugin/PersistedQueryPluginInterface.php
modules/contrib/graphql/src/Plugin/PersistedQueryPluginManager.php
modules/contrib/graphql/src/Plugin/SchemaExtensionPluginInterface.php
modules/contrib/graphql/src/Plugin/SchemaExtensionPluginManager.php
modules/contrib/graphql/src/Plugin/SchemaPluginInterface.php
modules/contrib/graphql/src/Plugin/SchemaPluginManager.php
modules/contrib/graphql/src/RouteProvider.php
modules/contrib/graphql/src/Routing/QueryRouteEnhancer.php
modules/contrib/graphql/src/SubRequestResponse.php
modules/contrib/graphql/tests/modules/graphql_file_validate/graphql_file_validate.module
modules/contrib/graphql/tests/modules/graphql_persisted_queries_test/src/Plugin/GraphQL/PersistedQuery/PersistedQueryPluginOne.php
modules/contrib/graphql/tests/modules/graphql_persisted_queries_test/src/Plugin/GraphQL/PersistedQuery/PersistedQueryPluginThree.php
modules/contrib/graphql/tests/modules/graphql_persisted_queries_test/src/Plugin/GraphQL/PersistedQuery/PersistedQueryPluginTwo.php
modules/contrib/graphql/tests/modules/graphql_resolver_builder_test/src/Plugin/DataType/Tree.php
modules/contrib/graphql/tests/modules/graphql_resolver_builder_test/src/TypedData/Definition/TreeDefinition.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageDerivativeTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageUrlTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/EntityDefinitionTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/EntityMultipleTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/EntityReferenceTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/EntityTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/Images/ImageResourceUrlTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/MenuTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/Routing/RouteEntityTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/RoutingTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/SeekTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/StringTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/XML/XMLAttributeTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/XML/XMLContentTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/XML/XMLParseTest.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/XML/XMLTestBase.php
modules/contrib/graphql/tests/src/Kernel/DataProducer/XML/XMLXpathTest.php
modules/contrib/graphql/tests/src/Kernel/EntityBufferTest.php
modules/contrib/graphql/tests/src/Kernel/EntityUuidBufferTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/BufferedFieldTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/DisabledResultCacheTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/InvalidPayloadTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/LoggerTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/PermissionsTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/PersistedQueriesTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/ResultCacheTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/ResultTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/TestFrameworkTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/UploadFileServiceTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/UploadMutationTest.php
modules/contrib/graphql/tests/src/Kernel/Framework/UserPermissionsContextTest.php
modules/contrib/graphql/tests/src/Kernel/GraphQLTestBase.php
modules/contrib/graphql/tests/src/Kernel/ResolverBuilderTest.php
modules/contrib/graphql/tests/src/Kernel/ResolverRegistryTest.php
modules/contrib/graphql/tests/src/Kernel/ValidatorTest.php
modules/contrib/graphql/tests/src/Traits/CompatibleLoggerTrait.php
modules/contrib/graphql/tests/src/Traits/CompatibleLoggerTrait10.php
modules/contrib/graphql/tests/src/Traits/DataProducerExecutionTrait.php
modules/contrib/graphql/tests/src/Traits/HttpRequestTrait.php
modules/contrib/graphql/tests/src/Traits/MockingTrait.php
modules/contrib/graphql/tests/src/Traits/QueryFileTrait.php
modules/contrib/graphql/tests/src/Traits/QueryResultAssertionTrait.php
modules/contrib/graphql/tests/src/Traits/SchemaPrinterTrait.php

149 files with changes
======================

1) modules/contrib/graphql/tests/src/Traits/SchemaPrinterTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Traits;

+use GraphQL\Server\ServerConfig;
 use Drupal\graphql\Entity\ServerInterface;
 use GraphQL\Utils\SchemaPrinter;

@@ @@
   /**
    * Gets printed version of the schema.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
+   * @param ServerInterface $server
    *   The server id.
    *
    * @return string
@@ @@
    */
   protected function getPrintedSchema(ServerInterface $server = NULL) {
     $server = $server ?? $this->server;
-    /** @var \GraphQL\Server\ServerConfig $config */
+    /** @var ServerConfig $config */
     $config = $server->configuration();
     $schema = $config->getSchema();
     return SchemaPrinter::doPrint($schema);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/graphql/tests/src/Traits/QueryResultAssertionTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Traits;

+use Drupal\graphql\Entity\ServerInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Render\RenderContext;
 use Drupal\Core\Render\RendererInterface;
@@ @@
 trait QueryResultAssertionTrait {

   /**
-   * @var \Drupal\graphql\Entity\ServerInterface
+   * @var ServerInterface
    */
   protected $server;

   /**
-   * @var \Drupal\Core\Render\RendererInterface|null
+   * @var RendererInterface|null
    */
   protected $renderer;

@@ @@
   /**
    * The default cache metadata object.
    *
-   * @return \Drupal\Core\Cache\CacheableMetadata
+   * @return CacheableMetadata
    *   The cache metadata object.
    */
   protected function defaultCacheMetaData() {
@@ @@
   /**
    * The default mutation cache metadata object.
    *
-   * @return \Drupal\Core\Cache\CacheableMetadata
+   * @return CacheableMetadata
    *   The cache metadata object.
    */
   protected function defaultMutationCacheMetaData() {
@@ @@
    *   The query variables.
    * @param array $expected
    *   The expected result.
-   * @param \Drupal\Core\Cache\CacheableMetadata|null $metadata
+   * @param CacheableMetadata|null $metadata
    *   The expected cache metadata object.
    */
   protected function assertResults($query, array $variables, array $expected, CacheableMetadata $metadata = NULL): void {
@@ @@
    *   The query variables.
    * @param mixed $expected
    *   The expected error messages.
-   * @param \Drupal\Core\Cache\CacheableMetadata $metadata
+   * @param CacheableMetadata $metadata
    *   The expected cache metadata object.
    */
   protected function assertErrors($query, array $variables, $expected, CacheableMetadata $metadata): void {
@@ @@
   /**
    * Assert a certain result data set on a query result.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\ExecutionResult $result
+   * @param ExecutionResult $result
    *   The query result object.
    * @param mixed $expected
    *   The expected result data set.
@@ @@
   /**
    * Assert that the result contains contains a certain set of errors.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\ExecutionResult $result
+   * @param ExecutionResult $result
    *   The query result object.
    * @param array $expected
    *   The list of expected error messages. Also allows regular expressions.
@@ @@
   /**
    * Assert a certain set of result metadata on a query result.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\ExecutionResult $result
+   * @param ExecutionResult $result
    *   The query result object.
-   * @param \Drupal\Core\Cache\CacheableMetadata $expected
+   * @param CacheableMetadata $expected
    *   The expected metadata object.
    *
    * @internal
@@ @@
    * Uses either the renderer available in the test class or fetches the Drupal
    * renderer service.
    *
-   * @return \Drupal\Core\Render\RendererInterface
+   * @return RendererInterface
    *   The renderer service for the test.
    */
   private function getRenderer() : RendererInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/graphql/tests/src/Traits/MockingTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Traits;

+use Drupal\graphql\Entity\ServerInterface;
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\graphql\Plugin\SchemaPluginInterface;
+use Drupal\graphql\Plugin\DataProducerPluginManager;
+use PHPUnit\Framework\MockObject\Stub\ReturnCallback;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\graphql\Plugin\SchemaExtensionPluginInterface;
 use Drupal\graphql\GraphQL\Resolver\Callback;
 use Drupal\graphql\GraphQL\Resolver\ResolverInterface;
 use Drupal\graphql\GraphQL\Resolver\Value;
@@ @@
   use RandomGeneratorTrait;

   /**
-   * @var \Drupal\graphql\Entity\ServerInterface
+   * @var ServerInterface
    */
   protected $server;

   /**
-   * @var \Drupal\graphql\GraphQL\ResolverRegistry
+   * @var ResolverRegistry
    */
   protected $registry;

   /**
-   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\graphql\Plugin\SchemaPluginInterface
+   * @var MockObject|SchemaPluginInterface
    */
   protected $schema;

   /**
-   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\graphql\Plugin\SchemaPluginManager
+   * @var MockObject|SchemaPluginManager
    */
   protected $schemaPluginManager;

   /**
-   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\graphql\Plugin\DataProducerPluginManager
+   * @var MockObject|DataProducerPluginManager
    */
   protected $dataProducerPluginManager;

@@ @@
    * @param mixed $value
    *   The return value. Can also be a value callback.
    *
-   * @return \PHPUnit\Framework\MockObject\Stub\ReturnCallback
+   * @return ReturnCallback
    *   The return callback promise.
    */
   protected function toPromise($value) {
@@ @@
    * @param mixed $scope
    *   The resolver's bound object and class scope.
    *
-   * @return \PHPUnit\Framework\MockObject\Stub\ReturnCallback
+   * @return ReturnCallback
    *   The return callback promise.
    */
   protected function toBoundPromise($value, $scope) {
@@ @@
    * @param string $endpoint
    * @param array $values
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createTestServer($schema, $endpoint, array $values = []): void {
     $this->server = Server::create([
@@ @@
    *   The schema id.
    * @param string $schema
    *   The schema.
-   * @param \Drupal\graphql\Plugin\SchemaExtensionPluginInterface[] $extensions
+   * @param SchemaExtensionPluginInterface[] $extensions
    *   An array of schema extension plugins.
    */
   protected function mockSchema($id, $schema, array $extensions = []): void {
-    /** @var \PHPUnit\Framework\MockObject\MockObject $extensionManager */
+    /** @var MockObject $extensionManager */
     $extensionManager = $this->getMockBuilder(SchemaExtensionPluginManager::class)
       ->disableOriginalConstructor()
       ->setMethods(['getExtensions'])
@@ @@
    * @param string $id
    */
   protected function mockSchemaPluginManager($id): void {
-    $this->schemaPluginManager = $this->getMockBuilder(SchemaPluginManager::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->schemaPluginManager = $this->createMock(SchemaPluginManager::class);

     $this->schemaPluginManager->expects($this->any())
       ->method('getDefinitions')
@@ @@
    *   Parent Type.
    * @param string $field
    *   Field name.
-   * @param mixed|\Drupal\graphql\GraphQL\Resolver\ResolverInterface $resolver
+   * @param mixed|ResolverInterface $resolver
    *   Resolver.
    */
   protected function mockResolver($type, $field, $resolver = NULL): void {
    ----------- end diff -----------

Applied rules:
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/graphql/tests/src/Traits/HttpRequestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Traits;

+use Symfony\Component\HttpFoundation\Response;
 use Drupal\graphql\Entity\Server;
 use Drupal\graphql\Entity\ServerInterface;
 use Symfony\Component\HttpFoundation\Request;
@@ @@
   /**
    * The default server.
    *
-   * @var \Drupal\graphql\Entity\Server
+   * @var Server
    */
   protected $server;

@@ @@
    *
    * @param string $query
    *   The query string.
-   * @param \Drupal\graphql\Entity\Server|null $server
+   * @param Server|null $server
    *   The server instance.
    * @param array $variables
    *   Query variables.
@@ @@
    * @param string $method
    *   Method, GET or POST.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response object.
    */
   protected function query($query, $server = NULL, array $variables = [], array $extensions = NULL, $persisted = FALSE, string $method = Request::METHOD_GET) {
@@ @@
    *
    * @param array[] $queries
    *   A set of queries to be executed in one go.
-   * @param \Drupal\graphql\Entity\ServerInterface $server
+   * @param ServerInterface $server
    *   The server instance.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The http response object.
    */
   protected function batchedQueries(array $queries, ServerInterface $server = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/graphql/tests/src/Traits/DataProducerExecutionTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Traits;

+use Drupal\graphql\Plugin\DataProducerPluginManager;
+use Drupal\graphql\Plugin\DataProducerPluginInterface;
 use Drupal\graphql\GraphQL\Execution\FieldContext;
 use GraphQL\Executor\Promise\Adapter\SyncPromise;
 use GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter;
@@ @@
    * @return mixed
    */
   protected function executeDataProducer($id, array $contexts = []) {
-    /** @var \Drupal\graphql\Plugin\DataProducerPluginManager $manager */
+    /** @var DataProducerPluginManager $manager */
     $manager = $this->container->get('plugin.manager.graphql.data_producer');

-    /** @var \Drupal\graphql\Plugin\DataProducerPluginInterface $plugin */
+    /** @var DataProducerPluginInterface $plugin */
     $plugin = $manager->createInstance($id);
     foreach ($contexts as $key => $value) {
       $plugin->setContextValue($key, $value);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/graphql/tests/src/Kernel/ResolverBuilderTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel;

+use Drupal\graphql_resolver_builder_test\Plugin\DataType\Tree;
 use GraphQL\Deferred;
 use Drupal\graphql\GraphQL\Resolver\ResolverInterface;

@@ @@
   public function testFromPath(): void {
     $manager = $this->container->get('typed_data_manager');
     $tree_definition = $manager->createDataDefinition('tree');
-    /** @var \Drupal\graphql_resolver_builder_test\Plugin\DataType\Tree $right */
+    /** @var Tree $right */
     $right = $manager->create($tree_definition);
     $right->set('value', 'Front page');
-    /** @var \Drupal\graphql_resolver_builder_test\Plugin\DataType\Tree $tree */
+    /** @var Tree $tree */
     $tree = $manager->create($tree_definition);
     $tree->set('left', [
       'value' => '<front>',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/graphql/tests/src/Kernel/GraphQLTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel;

+use Drupal\graphql\Entity\Server;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\PageCache\ChainRequestPolicy;
 use Drupal\Core\PageCache\RequestPolicy\NoSessionOpen;
@@ @@
   /**
    * The server under test.
    *
-   * @var \Drupal\graphql\Entity\Server|null
+   * @var Server|null
    */
   protected $server;

@@ @@
   ];

   /**
-   * @var \Drupal\graphql\GraphQL\ResolverBuilder
+   * @var ResolverBuilder
    */
   protected $builder;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/graphql/tests/src/Kernel/Framework/UploadFileServiceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel\Framework;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Lock\LockBackendInterface;
 use Drupal\graphql\GraphQL\Utility\FileUpload;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
@@ @@
  */
 class UploadFileServiceTest extends GraphQLTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
   /**
    * The FileUpload object we want to test, gets prepared in setUp().
    *
-   * @var \Drupal\graphql\GraphQL\Utility\FileUpload
+   * @var FileUpload
    */
   protected $uploadService;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/graphql/tests/src/Kernel/Framework/ResultCacheTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel\Framework;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\MethodProphecy;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Cache\Context\CacheContextsManager;
 use Drupal\Core\Cache\Context\ContextCacheKeys;
 use Drupal\Core\Render\RenderContext;
@@ @@
  */
 class ResultCacheTest extends GraphQLTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
       ->willReturn(new ContextCacheKeys([]));

     // Store the method prophecy so we can replace the result on the fly.
-    /** @var \Prophecy\Prophecy\MethodProphecy $contextKeys */
+    /** @var MethodProphecy $contextKeys */
     $contextKeys = $contextManager->convertTokensToKeys($hasContext);

     $this->mockResolver('Query', 'root',
@@ @@
    * resolvers. Should still be added to the processors result.
    */
   public function testLeakingCacheMetadata(): void {
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->container->get('renderer');

     $this->mockResolver('Query', 'leakA',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/graphql/tests/src/Kernel/Framework/PersistedQueriesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel\Framework;

+use Drupal\graphql\Plugin\DataProducerPluginManager;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;

 /**
@@ @@
     $this->mockResolver('Link', 'url', 'https://www.ecosia.org');
     $this->mockResolver('Link', 'title', 'Ecosia');

-    /** @var \Drupal\graphql\Plugin\DataProducerPluginManager $manager */
+    /** @var DataProducerPluginManager $manager */
     $manager = $this->container->get('plugin.manager.graphql.persisted_query');

     $this->plugin_one = $manager->createInstance('persisted_query_plugin_one');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/graphql/tests/src/Kernel/Framework/InvalidPayloadTest.php:28

    ---------- begin diff ----------
@@ @@

   /**
    * Tests the empty payload.
+   * @doesNotPerformAssertions
    */
   public function testEmptyPayload(): void {
     $request = Request::create('/graphql/test', 'POST', [], [], [], [], '{ invalid');
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/graphql/tests/src/Kernel/EntityUuidBufferTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;

@@ @@
   protected $nodeUuids = [];

   /**
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $entityBuffer;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/graphql/tests/src/Kernel/EntityBufferTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;

@@ @@
   protected $nodeIds = [];

   /**
-   * @var \PHPUnit\Framework\MockObject\MockObject
+   * @var MockObject
    */
   protected $entityBuffer;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/graphql/tests/src/Kernel/DataProducer/MenuTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel\DataProducer;

+use Drupal\Core\Menu\MenuLinkManagerInterface;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 use Drupal\system\Entity\Menu;
 use Drupal\menu_link_content\Entity\MenuLinkContent;
@@ @@
 class MenuTest extends GraphQLTestBase {

   /**
-   * @var \Drupal\Core\Menu\MenuLinkManagerInterface
+   * @var MenuLinkManagerInterface
    */
   protected $menuLinkManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/graphql/tests/src/Kernel/DataProducer/EntityTest.php:19

    ---------- begin diff ----------
@@ @@
 class EntityTest extends GraphQLTestBase {

   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;

@@ @@
   public function setUp(): void {
     parent::setUp();

-    $this->entity = $this->getMockBuilder(NodeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock(NodeInterface::class);

-    $this->entity_interface = $this->getMockBuilder(EntityInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity_interface = $this->createMock(EntityInterface::class);

-    $this->user = $this->getMockBuilder(UserInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->user = $this->createMock(UserInterface::class);

     $content_type = NodeType::create([
       'type' => 'lorem',
@@ @@
    * @covers \Drupal\graphql\Plugin\GraphQL\DataProducer\Entity\EntityDescription::resolve
    */
   public function testResolveDescription(): void {
-    $entity = $this->getMockBuilder(EntityTestBundle::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $entity = $this->createMock(EntityTestBundle::class);

     $entity->expects($this->once())
       ->method('getDescription')
@@ @@
    * @covers \Drupal\graphql\Plugin\GraphQL\DataProducer\Entity\EntityLanguage::resolve
    */
   public function testResolveLanguage(): void {
-    $language = $this->getMockBuilder(LanguageInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $language = $this->createMock(LanguageInterface::class);

     $this->entity->expects($this->once())
       ->method('language')
@@ @@
    * @covers \Drupal\graphql\Plugin\GraphQL\DataProducer\Entity\EntityUrl::resolve
    */
   public function testResolveUrl(): void {
-    $url = $this->getMockBuilder(Url::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock(Url::class);

     $this->entity->expects($this->once())
       ->method('toUrl')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/graphql/tests/src/Kernel/DataProducer/EntityReferenceTest.php:24

    ---------- begin diff ----------
@@ @@
   public function setUp(): void {
     parent::setUp();

-    $this->entity = $this->getMockBuilder(NodeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock(NodeInterface::class);

-    $this->entity_interface = $this->getMockBuilder(EntityInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity_interface = $this->createMock(EntityInterface::class);

-    $this->user = $this->getMockBuilder(UserInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->user = $this->createMock(UserInterface::class);

     $content_type1 = NodeType::create([
       'type' => 'test1',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/graphql/tests/src/Kernel/DataProducer/EntityMultipleTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\graphql\Kernel\DataProducer;

+use Drupal\graphql\Plugin\DataProducerPluginManager;
 use Drupal\Tests\graphql\Kernel\GraphQLTestBase;
 use Drupal\node\NodeInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
 class EntityMultipleTest extends GraphQLTestBase {

   /**
-   * @var \Drupal\graphql\Plugin\DataProducerPluginManager
+   * @var DataProducerPluginManager
    */
   protected $dataProducerManager;

   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node1;

   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node2;

   /**
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node3;

@@ @@
   public function setUp(): void {
     parent::setUp();

-    $this->entity = $this->getMockBuilder(NodeInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity = $this->createMock(NodeInterface::class);

-    $this->entity_interface = $this->getMockBuilder(EntityInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->entity_interface = $this->createMock(EntityInterface::class);

-    $this->user = $this->getMockBuilder(UserInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->user = $this->createMock(UserInterface::class);

     $content_type = NodeType::create([
       'type' => 'lorem',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/graphql/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageUrlTest.php:22

    ---------- begin diff ----------
@@ @@

     $this->fileUri = \Drupal::service('file_url_generator')->generateAbsoluteString('public://test.jpg');

-    $this->file = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->file = $this->createMock(FileInterface::class);

     $this->file->method('getFileUri')->willReturn($this->fileUri);
     $this->file->method('access')->willReturn((new AccessResultAllowed())->addCacheTags(['test_tag']));

-    $this->file_not_accessible = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->file_not_accessible = $this->createMock(FileInterface::class);

     $this->file_not_accessible->method('access')->willReturn((new AccessResultForbidden())->addCacheTags(['test_tag_forbidden']));
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/graphql/tests/src/Kernel/DataProducer/Entity/Fields/Image/ImageDerivativeTest.php:27

    ---------- begin diff ----------
@@ @@

     $this->file_uri = 'public://test.jpg';

-    $this->file = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->file = $this->createMock(FileInterface::class);

     $this->file->method('getFileUri')->willReturn($this->file_uri);
     $this->file->method('access')->willReturn((new AccessResultAllowed())->addCacheTags(['test_tag']));
@@ @@
     $this->style->addImageEffect($effect);
     $this->style->save();

-    $this->file_not_accessible = $this->getMockBuilder(FileInterface::class)
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->file_not_accessible = $this->createMock(FileInterface::class);

     $this->file_not_accessible->method('access')->willReturn((new AccessResultForbidden())->addCacheTags(['test_tag_forbidden']));
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/graphql/src/Routing/QueryRouteEnhancer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Routing;

+use GraphQL\Server\RequestError;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Routing\EnhancerInterface;
 use Drupal\Core\Routing\RouteObjectInterface;
@@ @@
   /**
    * Returns whether the enhancer runs on the current route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The current route.
    *
    * @return bool
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \GraphQL\Server\RequestError
+   * @throws RequestError
    */
   public function enhance(array $defaults, Request $request) {
     $route = $defaults[RouteObjectInterface::ROUTE_OBJECT];
@@ @@
   /**
    * Extracts the query parameters from a request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The http request object.
    *
    * @return array
@@ @@
   /**
    * Extracts the body parameters from a request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The http request object.
    *
    * @return array
@@ @@
   /**
    * Handles file uploads from multipart/form-data requests.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param array $values
    *   The request body values.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/graphql/src/RouteProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql;

+use Drupal\graphql\Entity\ServerInterface;
 use Drupal\Core\Authentication\AuthenticationCollectorInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\Routing\Route;
@@ @@
   /**
    * The authentication collector service.
    *
-   * @var \Drupal\Core\Authentication\AuthenticationCollectorInterface
+   * @var AuthenticationCollectorInterface
    */
   protected $authenticationCollector;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * RouteProvider constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Authentication\AuthenticationCollectorInterface $authenticationCollector
+   * @param AuthenticationCollectorInterface $authenticationCollector
    *   The authentication collector service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, AuthenticationCollectorInterface $authenticationCollector) {
@@ @@
    */
   public function routes(): array {
     $storage = $this->entityTypeManager->getStorage('graphql_server');
-    /** @var \Drupal\graphql\Entity\ServerInterface[] $servers */
+    /** @var ServerInterface[] $servers */
     $servers = $storage->loadMultiple();
     $routes = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/graphql/src/Plugin/SchemaPluginManager.php:22

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/graphql/src/Plugin/SchemaPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin;

+use GraphQL\Type\Schema;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
 use Drupal\graphql\GraphQL\ResolverRegistryInterface;
@@ @@
   /**
    * Retrieves the schema.
    *
-   * @param \Drupal\graphql\GraphQL\ResolverRegistryInterface $registry
+   * @param ResolverRegistryInterface $registry
    *   The resolver registry.
    *
-   * @return \GraphQL\Type\Schema
+   * @return Schema
    *   The schema.
    */
   public function getSchema(ResolverRegistryInterface $registry);
@@ @@
    *
    * @todo Instead, this should be configuration.
    *
-   * @return \Drupal\graphql\GraphQL\ResolverRegistryInterface
+   * @return ResolverRegistryInterface
    *   The resolver registry.
    */
   public function getResolverRegistry();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/graphql/src/Plugin/SchemaExtensionPluginManager.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Static cache of plugin instances per schema plugin.
    *
-   * @var \Drupal\graphql\Plugin\SchemaExtensionPluginInterface[][]
+   * @var SchemaExtensionPluginInterface[][]
    */
   protected $extensions;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend.
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
@@ @@
    * @param string $id
    *   The id of the schema plugin to retrieve the extensions for.
    *
-   * @return \Drupal\graphql\Plugin\SchemaExtensionPluginInterface[]
+   * @return SchemaExtensionPluginInterface[]
    */
   public function getExtensions($id) {
     if (!isset($this->extensions[$id])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/graphql/src/Plugin/SchemaExtensionPluginInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Registers type and field resolvers in the shared registry.
    *
-   * @param \Drupal\graphql\GraphQL\ResolverRegistryInterface $registry
+   * @param ResolverRegistryInterface $registry
    *   The resolver registry.
    */
   public function registerResolvers(ResolverRegistryInterface $registry);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/graphql/src/Plugin/PersistedQueryPluginManager.php:18

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $definitionCacheBackend
+   * @param CacheBackendInterface $definitionCacheBackend
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
    * @param string $pluginAnnotationName
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/graphql/src/Plugin/PersistedQueryPluginInterface.php:15

    ---------- begin diff ----------
@@ @@
    *
    * @param string $id
    *   ID of the persisted query.
-   * @param \GraphQL\Server\OperationParams $operation
+   * @param OperationParams $operation
    *   The operation with parameters.
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/graphql/src/Plugin/LanguageNegotiation/OperationLanguageNegotiation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\LanguageNegotiation;

+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\graphql\GraphQL\Execution\ResolveContext;
 use Drupal\language\LanguageNegotiationMethodBase;
 use Symfony\Component\HttpFoundation\Request;
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The current execution context.
    *
-   * @var \Drupal\graphql\GraphQL\Execution\ResolveContext|null
+   * @var ResolveContext|null
    */
   protected static $context;

@@ @@
   /**
    * Set the current resolve context statically which contains the language.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    */
   public static function setContext(ResolveContext $context = NULL): void {
     static::$context = $context;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/graphql/src/Plugin/GraphQL/SchemaExtension/SdlSchemaExtensionPluginBase.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler service.
    *
    * @codeCoverageIgnore
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function getBaseDefinition() {
     return $this->loadDefinitionFile('base');
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function getExtensionDefinition() {
     return $this->loadDefinitionFile('extension');
@@ @@
    * @return string|null
    *   The loaded definition file content or NULL if it was empty.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function loadDefinitionFile($type) {
     $id = $this->getPluginId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/graphql/src/Plugin/GraphQL/Schema/SdlSchemaPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\Schema;

+use GraphQL\Error\SyntaxError;
+use GraphQL\Error\Error;
+use GraphQL\Language\AST\DocumentNode;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ @@
   /**
    * The cache bin for caching the parsed SDL.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $astCache;

@@ @@
   /**
    * The schema extension plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaExtensionPluginManager
+   * @var SchemaExtensionPluginManager
    */
   protected $extensionManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $astCache
+   * @param CacheBackendInterface $astCache
    *   The cache bin for caching the parsed SDL.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler service.
-   * @param \Drupal\graphql\Plugin\SchemaExtensionPluginManager $extensionManager
+   * @param SchemaExtensionPluginManager $extensionManager
    *   The schema extension plugin manager.
    * @param array $config
    *   The service configuration.
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \GraphQL\Error\SyntaxError
-   * @throws \GraphQL\Error\Error
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws SyntaxError
+   * @throws Error
+   * @throws InvalidPluginDefinitionException
    */
   public function getSchema(ResolverRegistryInterface $registry) {
     $extensions = $this->getExtensions();
@@ @@
   }

   /**
-   * @return \Drupal\graphql\Plugin\SchemaExtensionPluginInterface[]
+   * @return SchemaExtensionPluginInterface[]
    */
   protected function getExtensions() {
     return $this->extensionManager->getExtensions($this->getPluginId());
@@ @@
    *
    * @param array $extensions
    *
-   * @return \GraphQL\Language\AST\DocumentNode
+   * @return DocumentNode
    *   The parsed schema document.
    *
-   * @throws \GraphQL\Error\SyntaxError
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws SyntaxError
+   * @throws InvalidPluginDefinitionException
    */
   protected function getSchemaDocument(array $extensions = []) {
     // Only use caching of the parsed document if we aren't in development mode.
@@ @@
    *
    * @param array $extensions
    *
-   * @return \GraphQL\Language\AST\DocumentNode|null
+   * @return DocumentNode|null
    *   The parsed schema document.
    *
-   * @throws \GraphQL\Error\SyntaxError
+   * @throws SyntaxError
    */
   protected function getExtensionDocument(array $extensions = []) {
     // Only use caching of the parsed document if we aren't in development mode.
@@ @@
    * @return string
    *   The schema definition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function getSchemaDefinition() {
     $id = $this->getPluginId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/User/PasswordReset.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\User;

+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $currentRequest;

@@ @@
   /**
    * The logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
    * {@inheritdoc}
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    /** @var \Symfony\Component\HttpFoundation\RequestStack $request_stack */
+    /** @var RequestStack $request_stack */
     $request_stack = $container->get('request_stack');
-    /** @var \Drupal\Core\Logger\LoggerChannelInterface $logger */
+    /** @var LoggerChannelInterface $logger */
     $logger = $container->get('logger.channel.graphql');
     return new static(
       $configuration,
@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\HttpFoundation\Request $current_request
+   * @param Request $current_request
    *   The current request.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   The logger service.
    */
   public function __construct(
@@ @@
    * @param string $email
    *   The email address to reset the password for.
    *
-   * @return \Drupal\graphql\GraphQL\Response\ResponseInterface
+   * @return ResponseInterface
    *   Response for password reset mutation with violations in case of failure.
    */
   public function resolve(string $email): ResponseInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/User/CurrentUser.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, string $plugin_id, array $plugin_definition, AccountInterface $current_user) {
@@ @@
   /**
    * Returns current user.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field_context
+   * @param FieldContext $field_context
    *   Field context.
    *
-   * @return \Drupal\Core\Session\AccountInterface
+   * @return AccountInterface
    *   The current user.
    */
   public function resolve(FieldContext $field_context): AccountInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/TypedData/PropertyPath.php:44

    ---------- begin diff ----------
@@ @@
    * @param string $path
    * @param mixed $value
    * @param string|null $type
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $metadata
+   * @param RefinableCacheableDependencyInterface $metadata
    *
    * @return mixed
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Taxonomy/TermFieldAutocomplete.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Taxonomy;

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The term storage.
    *
-   * @var \Drupal\taxonomy\TermStorageInterface|null
+   * @var TermStorageInterface|null
    */
   protected $termStorage;

@@ @@
   /**
    * The term type.
    *
-   * @var \Drupal\Core\Entity\ContentEntityTypeInterface|null
+   * @var ContentEntityTypeInterface|null
    */
   protected $termType;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Gets the term storage.
    *
-   * @return \Drupal\taxonomy\TermStorageInterface
+   * @return TermStorageInterface
    *   The term storage.
    */
   protected function getTermStorage(): TermStorageInterface {
     if (!isset($this->termStorage)) {
-      /** @var \Drupal\taxonomy\TermStorageInterface $term_storage */
+      /** @var TermStorageInterface $term_storage */
       $term_storage = $this->entityTypeManager->getStorage('taxonomy_term');
       $this->termStorage = $term_storage;
     }
@@ @@
   /**
    * Gets the term type.
    *
-   * @return \Drupal\Core\Entity\ContentEntityTypeInterface
+   * @return ContentEntityTypeInterface
    *   The term type.
    */
   protected function getTermType(): ContentEntityTypeInterface {
     if (!isset($this->termType)) {
-      /** @var \Drupal\Core\Entity\ContentEntityTypeInterface $term_type */
+      /** @var ContentEntityTypeInterface $term_type */
       $term_type = $this->entityTypeManager->getDefinition('taxonomy_term');
       $this->termType = $term_type;
     }
@@ @@
    * @param string $field
    *   Field to get the field config for.
    *
-   * @return \Drupal\field\FieldConfigInterface|null
+   * @return FieldConfigInterface|null
    *   Field config for given field of given entity type of given bundle, or
    *   null if it does not exist.
    */
   protected function getFieldConfig(string $entity_type, string $bundle, string $field): ?FieldConfigInterface {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $field_config_storage */
+    /** @var ConfigEntityStorageInterface $field_config_storage */
     $field_config_storage = $this->entityTypeManager->getStorage('field_config');

-    /** @var \Drupal\field\FieldConfigInterface|null $field_config */
+    /** @var FieldConfigInterface|null $field_config */
     $field_config = $field_config_storage->load($entity_type . '.' . $bundle . '.' . $field);

     return $field_config;
@@ @@
   /**
    * Whether given field storage config is configured for term field.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_config
+   * @param FieldStorageDefinitionInterface $field_storage_config
    *   The field storage config to be examined.
    *
    * @return bool
@@ @@
    *   Whether terms which start with matching string should come first.
    * @param int $limit
    *   Number of items to be returned.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *   The caching context related to the current field.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Taxonomy/TaxonomyLoadTree.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Taxonomy;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TranslatableInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityBuffer
+   * @var EntityBuffer
    */
   protected $entityBuffer;

@@ @@
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityBuffer $entityBuffer
+   * @param EntityBuffer $entityBuffer
    *   The entity buffer service.
    *
    * @codeCoverageIgnore
@@ @@
    *   Optional. Language to be respected for retrieved entities.
    * @param bool $access
    *   Whether check for access or not. Default is true.
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    *   User entity to check access for. Default is null.
    * @param string $accessOperation
    *   Operation to check access for. Default is view.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *   The caching context related to the current field.
    *
-   * @return \GraphQL\Deferred|null
+   * @return Deferred|null
    *   A promise that will return entities or NULL if there aren't any.
    */
   public function resolve(string $vid, int $parent, ?int $max_depth, ?string $language, bool $access, ?AccountInterface $accessUser, string $accessOperation, FieldContext $context): ?Deferred {
@@ @@
     $resolver = $this->entityBuffer->add('taxonomy_term', $term_ids);

     return new Deferred(function () use ($language, $resolver, $context, $access, $accessUser, $accessOperation) {
-      /** @var \Drupal\Core\Entity\EntityInterface[] $entities */
+      /** @var EntityInterface[] $entities */
       $entities = $resolver();
       if (!$entities) {
         // If there is no entity with this id, add the list cache tags so that
@@ @@
         // the cache entry is purged whenever a new entity of this type is
         // saved.
         $type = $this->entityTypeManager->getDefinition('taxonomy_term');
-        /** @var \Drupal\Core\Entity\EntityTypeInterface $type */
+        /** @var EntityTypeInterface $type */
         $tags = $type->getListCacheTags();
         $context->addCacheTags($tags);
         return [];
@@ @@
         }

         if ($access) {
-          /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+          /** @var AccessResultInterface $accessResult */
           $accessResult = $entity->access($accessOperation, $accessUser, TRUE);
           $context->addCacheableDependency($accessResult);
           if (!$accessResult->isAllowed()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Routing/Url/UrlPath.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Url $url
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $metadata
+   * @param Url $url
+   * @param RefinableCacheableDependencyInterface $metadata
    *
    * @return string
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Routing/RouteLoad.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Routing;

+use Drupal\Core\Url;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Path\PathValidatorInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   /**
    * The path validator service.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Path\PathValidatorInterface $pathValidator
+   * @param PathValidatorInterface $pathValidator
    *   The path validator service.
    * @param \Drupal\redirect\RedirectRepository|null $redirectRepository
    *
@@ @@
    * Resolver.
    *
    * @param string $path
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $metadata
+   * @param RefinableCacheableDependencyInterface $metadata
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    */
   public function resolve($path, RefinableCacheableDependencyInterface $metadata) {
     if ($this->redirectRepository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Routing/RouteEntity.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Routing;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TranslatableInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityBuffer
+   * @var EntityBuffer
    */
   protected $entityBuffer;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The language manager service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityBuffer $entityBuffer
+   * @param EntityBuffer $entityBuffer
    *   The entity buffer service.
    *
    * @codeCoverageIgnore
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Url|mixed $url
+   * @param Url|mixed $url
    *   The URL to get the route entity from.
    * @param string|null $language
    *   The language code to get a translation of the entity.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *   The GraphQL field context.
    */
   public function resolve($url, ?string $language, FieldContext $context): ?Deferred {
@@ @@
           // the cache entry is purged whenever a new entity of this type is
           // saved.
           $type = $this->entityTypeManager->getDefinition($type);
-          /** @var \Drupal\Core\Entity\EntityTypeInterface $type */
+          /** @var EntityTypeInterface $type */
           $tags = $type->getListCacheTags();
           $context->addCacheTags($tags)->addCacheTags(['4xx-response']);
           return NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuTree/MenuTreeSubtree.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeElement $element
+   * @param MenuLinkTreeElement $element
    *
-   * @return \Drupal\Core\Menu\MenuLinkTreeElement[]
+   * @return MenuLinkTreeElement[]
    */
   public function resolve(MenuLinkTreeElement $element) {
     return array_filter($element->subtree, function (MenuLinkTreeElement $item) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuTree/MenuTreeLink.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Menu\MenuTree;

+use Drupal\Core\Menu\MenuLinkInterface;
 use Drupal\Core\Menu\MenuLinkTreeElement;
 use Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerPluginBase;

@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Menu\MenuLinkTreeElement $element
+   * @param MenuLinkTreeElement $element
    *
-   * @return \Drupal\Core\Menu\MenuLinkInterface
+   * @return MenuLinkInterface
    */
   public function resolve(MenuLinkTreeElement $element) {
     return $element->link;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


41) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuLinks.php:37

    ---------- begin diff ----------
@@ @@
   /**
    * The menu link tree.
    *
-   * @var \Drupal\Core\Menu\MenuLinkTreeInterface
+   * @var MenuLinkTreeInterface
    */
   protected $menuLinkTree;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Menu\MenuLinkTreeInterface $menuLinkTree
+   * @param MenuLinkTreeInterface $menuLinkTree
    *   The menu link tree service.
    *
    * @codeCoverageIgnore
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\system\MenuInterface $menu
+   * @param MenuInterface $menu
    *
    * @return array
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


42) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkUrl.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Menu\MenuLink;

+use Drupal\Core\Url;
 use Drupal\Core\Menu\MenuLinkInterface;
 use Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerPluginBase;

@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Menu\MenuLinkInterface $link
+   * @param MenuLinkInterface $link
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function resolve(MenuLinkInterface $link) {
     return $link->getUrlObject();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


43) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkLabel.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Menu\MenuLinkInterface $link
+   * @param MenuLinkInterface $link
    *
    * @return mixed
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


44) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkExpanded.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Menu\MenuLinkInterface $link
+   * @param MenuLinkInterface $link
    *
    * @return bool
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


45) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkDescription.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Menu\MenuLinkInterface $link
+   * @param MenuLinkInterface $link
    *
    * @return mixed
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


46) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Menu/MenuLink/MenuLinkAttribute.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Menu\MenuLinkInterface $link
+   * @param MenuLinkInterface $link
    * @param string $attribute
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


47) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Field;

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\TranslatableInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    *   Optional. List of bundles to be respected for retrieved entities.
    * @param bool $access
    *   Whether to filter out inaccessible entities.
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    *   User entity to check access for. Default is null.
    * @param string $accessOperation
    *   Operation to check access for. Default is view.
    * @param \Closure $resolver
    *   The resolver to execute.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *   The caching context related to the current field.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The list of references entities.
    */
   protected function getReferencedEntities(string $type, ?string $language, ?array $bundles, bool $access, ?AccountInterface $accessUser, string $accessOperation, \Closure $resolver, FieldContext $context): array {
@@ @@

     if (empty($entities)) {
       $type = $this->entityTypeManager->getDefinition($type);
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $type */
+      /** @var EntityTypeInterface $type */
       $tags = $type->getListCacheTags();
       $context->addCacheTags($tags);
       return [];
@@ @@
   /**
    * Get the referenced entities in the specified language.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Entities to process.
    * @param string $language
    *   Language to be respected for retrieved entities.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Translated entities.
    */
   private function getTranslated(array $entities, string $language): array {
@@ @@
   /**
    * Filter out not accessible entities.
    *
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    *   Entities to filter.
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    *   User entity to check access for. Default is null.
    * @param string $accessOperation
    *   Operation to check access for. Default is view.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *   The caching context related to the current field.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Filtered entities.
    */
   private function filterAccessible(array $entities, ?AccountInterface $accessUser, string $accessOperation, FieldContext $context): array {
     return array_filter($entities, function (EntityInterface $entity) use ($accessOperation, $accessUser, $context) {
-      /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+      /** @var AccessResultInterface $accessResult */
       $accessResult = $entity->access($accessOperation, $accessUser, TRUE);
       $context->addCacheableDependency($accessResult);
       if (!$accessResult->isAllowed()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


48) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceRevisions.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity revision buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityRevisionBuffer
+   * @var EntityRevisionBuffer
    */
   protected $entityRevisionBuffer;

@@ @@
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityRevisionBuffer $entityRevisionBuffer
+   * @param EntityRevisionBuffer $entityRevisionBuffer
    *   The entity revision buffer service.
    *
    * @codeCoverageIgnore
@@ @@
    *
    * May optionally respect the entity bundles and language.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $field
    *   The field of a given entity to get entity reference revisions for.
@@ @@
    *   Optional. List of bundles to be respected for retrieved entities.
    * @param bool $access
    *   Whether check for access or not. Default is true.
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    *   User entity to check access for. Default is null.
    * @param string $accessOperation
    *   Operation to check access for. Default is view.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *   The caching context related to the current field.
    *
-   * @return \GraphQL\Deferred|array
+   * @return Deferred|array
    *   A promise that will return referenced entities or empty array if there
    *   aren't any.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


49) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Field/EntityReferenceLayoutRevisions.php:65

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity revision buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityRevisionBuffer
+   * @var EntityRevisionBuffer
    */
   protected $entityRevisionBuffer;

@@ @@
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entityTypeManager
+   * @param EntityTypeManager $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityRevisionBuffer $entityRevisionBuffer
+   * @param EntityRevisionBuffer $entityRevisionBuffer
    *   The entity revision buffer service.
    *
    * @codeCoverageIgnore
@@ @@
    *
    * May optionally respect the entity bundles and language.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $field
    *   The field of a given entity to get entity reference layout revisions for.
@@ @@
    *   Optional. List of bundles to be respected for retrieved entities.
    * @param bool $access
    *   Whether check for access or not. Default is true.
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    *   User entity to check access for. Default is null.
    * @param string $accessOperation
    *   Operation to check access for. Default is view.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *   The caching context related to the current field.
    *
-   * @return \GraphQL\Deferred|array
+   * @return Deferred|array
    *   A promise that will return referenced entities or empty array if there
    *   aren't any.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


50) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Field/EntityReference.php:66

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityBuffer
+   * @var EntityBuffer
    */
   protected $entityBuffer;

@@ @@
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityBuffer $entityBuffer
+   * @param EntityBuffer $entityBuffer
    *   The entity buffer service.
    *
    * @codeCoverageIgnore
@@ @@
   /**
    * Resolve entity references in the given field name.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string $field
    * @param string|null $language
    * @param array|null $bundles
    * @param bool|null $access
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    * @param string|null $accessOperation
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *
-   * @return \GraphQL\Deferred|array
+   * @return Deferred|array
    *   A promise that will return referenced entities or empty array if there
    *   aren't any.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


51) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Label.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the entity definition label.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_definition
+   * @param EntityTypeInterface $entity_definition
    *   The entity type definition.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


52) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Weight.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the "weight" property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
-   * @param \Drupal\Core\Entity\Entity\EntityFormDisplay|null $entity_form_display_context
+   * @param EntityFormDisplay|null $entity_form_display_context
    *   Entity form display context.
    *
    * @return int
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


53) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Type.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the "type" property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


54) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Status.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the "status" property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return bool
@@ @@
    */
   public function resolve(FieldDefinitionInterface $entity_definition_field): bool {
     if ($entity_definition_field instanceof BaseFieldDefinition) {
-      /** @var \Drupal\Core\Field\BaseFieldDefinition $entity_definition_field */
+      /** @var BaseFieldDefinition $entity_definition_field */
       return TRUE;
     }
     elseif ($entity_definition_field instanceof FieldConfig) {
-      /** @var \Drupal\field\Entity\FieldConfig $entity_definition_field */
+      /** @var FieldConfig $entity_definition_field */
       return $entity_definition_field->status();
     }
     elseif ($entity_definition_field instanceof BaseFieldOverride) {
-      /** @var \Drupal\Core\Field\Entity\BaseFieldOverride $entity_definition_field */
+      /** @var BaseFieldOverride $entity_definition_field */
       return $entity_definition_field->status();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


55) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Settings.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the field settings.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
-   * @param \Drupal\Core\Entity\Entity\EntityFormDisplay|null $entity_form_display_context
+   * @param EntityFormDisplay|null $entity_form_display_context
    *   Entity form display context.
    *
    * @return \Iterator
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


56) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Required.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the "required" property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


57) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Reference.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the "reference" property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


58) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Multiple.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the "multiple" property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


59) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/MaxNumItems.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the "max_num_items" property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return int
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


60) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Label.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the field label.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


61) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Id.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the ID property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


62) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Hidden.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the hidden property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
-   * @param \Drupal\Core\Entity\Entity\EntityFormDisplay|null $entity_form_display_context
+   * @param EntityFormDisplay|null $entity_form_display_context
    *   Entity form display context.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


63) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/Description.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the field description.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return string|null
@@ @@
    *   The description.
    */
   public function resolve(FieldDefinitionInterface $entity_definition_field): ?string {
-    /** @var \Drupal\Component\Render\MarkupInterface|string|null $description */
+    /** @var MarkupInterface|string|null $description */
     $description = $entity_definition_field->getDescription();
     // Convert translation object to string.
     if ($description instanceof MarkupInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


64) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields/DefaultValue.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the default value property.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $entity_definition_field
+   * @param FieldDefinitionInterface $entity_definition_field
    *   The entity field definition.
    *
    * @return string|bool|int|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


65) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/Fields.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManager
+   * @var EntityFieldManager
    */
   protected $entityFieldManager;

@@ @@
    *   The plugin id.
    * @param array $plugin_definition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManager $entity_field_manager
+   * @param EntityFieldManager $entity_field_manager
    *   The entity field manager service.
    *
    * @codeCoverageIgnore
@@ @@
    * The same goes for field types when either base fields of configurable
    * fields may be returned.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_definition
+   * @param EntityTypeInterface $entity_definition
    *   The entity type definition.
    * @param array|null $bundle_context
    *   Bundle context.
    * @param string|null $field_types_context
    *   Field types context.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field_context
+   * @param FieldContext $field_context
    *   Field context.
    */
   public function resolve(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


66) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/EntityDefinition/EntityDefinition.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin id.
    * @param array $plugin_definition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager service.
    *
    * @codeCoverageIgnore
@@ @@
    *   Optional. The field types to retrieve (base fields, configurable fields,
    *   or both) which are stored as a context for upcoming data producers deeper
    *   in hierarchy.
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field_context
+   * @param FieldContext $field_context
    *   Field context.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The entity definition.
    */
   public function resolve(string $entity_type,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


67) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/Fields/Image/ImageUrl.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The rendering service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The file URL generator service.
    *
-   * @var \Drupal\Core\File\FileUrlGeneratorInterface
+   * @var FileUrlGeneratorInterface
    */
   protected $fileUrlGenerator;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\File\FileUrlGeneratorInterface $fileUrlGenerator
+   * @param FileUrlGeneratorInterface $fileUrlGenerator
    *   The file URL generator service.
    *
    * @codeCoverageIgnore
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\file\FileInterface $entity
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $metadata
+   * @param FileInterface $entity
+   * @param RefinableCacheableDependencyInterface $metadata
    *
    * @return string|null
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


68) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/Fields/Image/ImageDerivative.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity\Fields\Image;

+use Drupal\Core\Image\ImageInterface;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Render\RenderContext;
@@ @@
   /**
    * The rendering service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    *
    * @codeCoverageIgnore
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\file\FileInterface $entity
+   * @param FileInterface $entity
    * @param string $style
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $metadata
+   * @param RefinableCacheableDependencyInterface $metadata
    *
    * @return array|null
    */
@@ @@
       // check the entity properties first.
       // @phpstan-ignore-next-line
       if (empty($width) || empty($height)) {
-        /** @var \Drupal\Core\Image\ImageInterface $image */
+        /** @var ImageInterface $image */
         $image = \Drupal::service('image.factory')->get($entity->getFileUri());
         if ($image->isValid()) {
           $width = $image->getWidth();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


69) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityUuid.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return null|string
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


70) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityUrl.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;

+use Drupal\Core\Url;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerPluginBase;

@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function resolve(EntityInterface $entity) {
     return $entity->toUrl();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


71) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityType.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return string
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


72) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityTranslations.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
    *
    * @codeCoverageIgnore
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param bool|null $access
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    * @param string|null $accessOperation
    *
    * @return array|null
@@ @@
         $entity = $entity->getTranslation($langcode);
         $entity->addCacheContexts(["static:language:{$langcode}"]);
         if ($access) {
-          /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+          /** @var AccessResultInterface $accessResult */
           $accessResult = $entity->access($accessOperation, $accessUser, TRUE);
           if (!$accessResult->isAllowed()) {
             return NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


73) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityTranslation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * The entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
    *
    * @codeCoverageIgnore
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string $language
    * @param bool|null $access
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    * @param string|null $accessOperation
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    */
   public function resolve(EntityInterface $entity, $language, ?bool $access, ?AccountInterface $accessUser, ?string $accessOperation) {
     if ($entity instanceof TranslatableInterface && $entity->isTranslatable()) {
@@ @@
       // Check if the passed user (or current user if none is passed) has access
       // to the entity, if not return NULL.
       if ($access) {
-        /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+        /** @var AccessResultInterface $accessResult */
         $accessResult = $entity->access($accessOperation, $accessUser, TRUE);
         if (!$accessResult->isAllowed()) {
           return NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


74) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityRendered.php:38

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    *
    * @codeCoverageIgnore
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string|null $mode
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $metadata
+   * @param RefinableCacheableDependencyInterface $metadata
    *
    * @return string
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


75) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityPublished.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return bool|null
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


76) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityOwner.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerPluginBase;
 use Drupal\user\EntityOwnerInterface;
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\user\UserInterface|null
+   * @return UserInterface|null
    */
   public function resolve(EntityInterface $entity) {
     if ($entity instanceof EntityOwnerInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


77) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityLoadMultiple.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TranslatableInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityBuffer
+   * @var EntityBuffer
    */
   protected $entityBuffer;

@@ @@
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityBuffer $entityBuffer
+   * @param EntityBuffer $entityBuffer
    *   The entity buffer service.
    *
    * @codeCoverageIgnore
@@ @@
    * @param string|null $language
    * @param array|null $bundles
    * @param bool $access
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    * @param string|null $accessOperation
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *
-   * @return \GraphQL\Deferred
+   * @return Deferred
    */
   public function resolve($type, array $ids, ?string $language, ?array $bundles, bool $access, ?AccountInterface $accessUser, ?string $accessOperation, FieldContext $context) {
     // Remove any NULL IDs.
@@ @@
     $resolver = $this->entityBuffer->add($type, $ids);

     return new Deferred(function () use ($type, $language, $bundles, $resolver, $context, $access, $accessUser, $accessOperation) {
-      /** @var \Drupal\Core\Entity\EntityInterface[] $entities */
+      /** @var EntityInterface[] $entities */
       $entities = $resolver();
       if (!$entities) {
         // If there is no entity with this id, add the list cache tags so that
@@ @@
         // the cache entry is purged whenever a new entity of this type is
         // saved.
         $type = $this->entityTypeManager->getDefinition($type);
-        /** @var \Drupal\Core\Entity\EntityTypeInterface $type */
+        /** @var EntityTypeInterface $type */
         $tags = $type->getListCacheTags();
         $context->addCacheTags($tags);
         return [];
@@ @@
         }

         if ($access) {
-          /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+          /** @var AccessResultInterface $accessResult */
           $accessResult = $entities[$id]->access($accessOperation, $accessUser, TRUE);
           $context->addCacheableDependency($accessResult);
           // We need to call isAllowed() because isForbidden() returns FALSE
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


78) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityLoadByUuid.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TranslatableInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityUuidBuffer
+   * @var EntityUuidBuffer
    */
   protected $entityBuffer;

@@ @@
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityUuidBuffer $entityBuffer
+   * @param EntityUuidBuffer $entityBuffer
    *   The entity buffer service.
    *
    * @codeCoverageIgnore
@@ @@
    * @param string|null $language
    * @param array|null $bundles
    * @param bool|null $access
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    * @param string|null $accessOperation
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *
-   * @return \GraphQL\Deferred
+   * @return Deferred
    */
   public function resolve($type, $uuid, ?string $language, ?array $bundles, ?bool $access, ?AccountInterface $accessUser, ?string $accessOperation, FieldContext $context) {
     $resolver = $this->entityBuffer->add($type, $uuid);
@@ @@
         // the cache entry is purged whenever a new entity of this type is
         // saved.
         $type = $this->entityTypeManager->getDefinition($type);
-        /** @var \Drupal\Core\Entity\EntityTypeInterface $type */
+        /** @var EntityTypeInterface $type */
         $tags = $type->getListCacheTags();
         $context->addCacheTags($tags);
         return NULL;
@@ @@
       // Check if the passed user (or current user if none is passed) has access
       // to the entity, if not return NULL.
       if ($access) {
-        /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+        /** @var AccessResultInterface $accessResult */
         $accessResult = $entity->access($accessOperation, $accessUser, TRUE);
         $context->addCacheableDependency($accessResult);
         if (!$accessResult->isAllowed()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


79) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityLoad.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\TranslatableInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * The entity buffer service.
    *
-   * @var \Drupal\graphql\GraphQL\Buffers\EntityBuffer
+   * @var EntityBuffer
    */
   protected $entityBuffer;

@@ @@
    *   The plugin id.
    * @param array $pluginDefinition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entityRepository
+   * @param EntityRepositoryInterface $entityRepository
    *   The entity repository service.
-   * @param \Drupal\graphql\GraphQL\Buffers\EntityBuffer $entityBuffer
+   * @param EntityBuffer $entityBuffer
    *   The entity buffer service.
    *
    * @codeCoverageIgnore
@@ @@
    * @param string|null $language
    * @param array|null $bundles
    * @param bool|null $access
-   * @param \Drupal\Core\Session\AccountInterface|null $accessUser
+   * @param AccountInterface|null $accessUser
    * @param string|null $accessOperation
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $context
+   * @param FieldContext $context
    *
-   * @return \GraphQL\Deferred|null
+   * @return Deferred|null
    */
   public function resolve($type, $id, ?string $language, ?array $bundles, ?bool $access, ?AccountInterface $accessUser, ?string $accessOperation, FieldContext $context): ?Deferred {
     // If this data producer was composed to a field (entity reference) and
@@ @@
         // the cache entry is purged whenever a new entity of this type is
         // saved.
         $type = $this->entityTypeManager->getDefinition($type);
-        /** @var \Drupal\Core\Entity\EntityTypeInterface $type */
+        /** @var EntityTypeInterface $type */
         $tags = $type->getListCacheTags();
         $context->addCacheTags($tags);
         return NULL;
@@ @@
       // Check if the passed user (or current user if none is passed) has access
       // to the entity, if not return NULL.
       if ($access) {
-        /** @var \Drupal\Core\Access\AccessResultInterface $accessResult */
+        /** @var AccessResultInterface $accessResult */
         $accessResult = $entity->access($accessOperation, $accessUser, TRUE);
         $context->addCacheableDependency($accessResult);
         if (!$accessResult->isAllowed()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


80) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityLanguage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;

+use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerPluginBase;

@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @return \Drupal\Core\Language\LanguageInterface
+   * @return LanguageInterface
    */
   public function resolve(EntityInterface $entity) {
     return $entity->language();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


81) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityLabel.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return string|null
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


82) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityId.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return int|string|null
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


83) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityDescription.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return string|null
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


84) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityCreated.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string|null $format
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


85) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityChanged.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string|null $format
    *
    * @return string|null
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


86) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityBundle.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return string
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


87) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/Entity/EntityAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer\Entity;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerPluginBase;
@@ @@
   /**
    * Resolver.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param string $operation
-   * @param \Drupal\Core\Session\AccountInterface $user
+   * @param AccountInterface $user
    *
-   * @return bool|\Drupal\Core\Access\AccessResultInterface
+   * @return bool|AccessResultInterface
    */
   public function resolve(EntityInterface $entity, $operation = NULL, AccountInterface $user = NULL) {
     return $entity->access($operation ?? 'view', $user);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


88) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/DataProducerProxy.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin\GraphQL\DataProducer;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Plugin\Context\Context;
+use GraphQL\Deferred;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Cache\CacheableMetadata;
@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\DataProducerPluginManager
+   * @var DataProducerPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The request stack for looking up request time.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The cache context manager for cache keys.
    *
-   * @var \Drupal\Core\Cache\Context\CacheContextsManager
+   * @var CacheContextsManager
    */
   protected $contextsManager;

@@ @@
   /**
    * The cache backend for results.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
    * @param array $mapping
    * @param array $config
    *   Plugin configuration.
-   * @param \Drupal\graphql\Plugin\DataProducerPluginManager $pluginManager
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
-   * @param \Drupal\Core\Cache\Context\CacheContextsManager $contextsManager
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param DataProducerPluginManager $pluginManager
+   * @param RequestStack $requestStack
+   * @param CacheContextsManager $contextsManager
+   * @param CacheBackendInterface $cacheBackend
    */
   public function __construct(
     $id,
@@ @@
    * Store a resolver for a given name.
    *
    * @param string $name
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $mapping
+   * @param ResolverInterface $mapping
    *
    * @return $this
    */
@@ @@
    *
    * @param mixed $value
    * @param mixed $args
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
+   * @param FieldContext $field
    *
    * @return mixed
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function resolve($value, $args, ResolveContext $context, ResolveInfo $info, FieldContext $field) {
     $plugin = $this->prepare($value, $args, $context, $info, $field);
@@ @@

     return DeferredUtility::returnFinally($plugin, function (DataProducerPluginInterface $plugin) use ($context, $field) {
       foreach ($plugin->getContexts() as $item) {
-        /** @var \Drupal\Core\Plugin\Context\Context $item */
+        /** @var Context $item */
         if ($item->getContextDefinition()->isRequired() && !$item->hasContextValue()) {
           return NULL;
         }
@@ @@
    *
    * @param mixed $value
    * @param mixed $args
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
+   * @param FieldContext $field
    *
-   * @return \GraphQL\Deferred|\Drupal\graphql\Plugin\DataProducerPluginInterface
+   * @return Deferred|DataProducerPluginInterface
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @throws \Exception
    */
   protected function prepare($value, $args, ResolveContext $context, ResolveInfo $info, FieldContext $field) {
-    /** @var \Drupal\graphql\Plugin\DataProducerPluginInterface $plugin */
+    /** @var DataProducerPluginInterface $plugin */
     $plugin = $this->pluginManager->createInstance($this->id, $this->config);
     $contexts = $plugin->getContextDefinitions();

@@ @@
   /**
    * Invoke the data producer directly.
    *
-   * @param \Drupal\graphql\Plugin\DataProducerPluginInterface $plugin
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param DataProducerPluginInterface $plugin
+   * @param ResolveContext $context
+   * @param FieldContext $field
    *
    * @return mixed
    */
@@ @@
   /**
    * Try to return a value from cache, otherwise invoke data producer.
    *
-   * @param \Drupal\graphql\Plugin\DataProducerPluginCachingInterface $plugin
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param DataProducerPluginCachingInterface $plugin
+   * @param ResolveContext $context
+   * @param FieldContext $field
    *
    * @return mixed
    */
@@ @@
   /**
    * Calculates a cache prefix.
    *
-   * @param \Drupal\graphql\Plugin\DataProducerPluginCachingInterface $plugin
+   * @param DataProducerPluginCachingInterface $plugin
    *
    * @return string
    */
@@ @@
    *
    * @param string $prefix
    * @param mixed $value
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param FieldContext $field
    */
   protected function cacheWrite($prefix, $value, FieldContext $field): void {
     // Bail out early if the field context is already uncacheable.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


89) modules/contrib/graphql/src/Plugin/GraphQL/DataProducer/DataProducerPluginBase.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\ContextException
+   * @throws ContextException
    */
   public function getContextDefinition($name) {
     $definitions = $this->getContextDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


90) modules/contrib/graphql/src/Plugin/DataProducerPluginManager.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The request stack later used to get the request time.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The cache context manager for calculating cache keys.
    *
-   * @var \Drupal\Core\Cache\Context\CacheContextsManager
+   * @var CacheContextsManager
    */
   protected $contextsManager;

@@ @@
   /**
    * The cache backend to cache results in.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $resultCacheBackend;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $definitionCacheBackend
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
-   * @param \Drupal\Core\Cache\Context\CacheContextsManager $contextsManager
-   * @param \Drupal\Core\Cache\CacheBackendInterface $resultCacheBackend
+   * @param CacheBackendInterface $definitionCacheBackend
+   * @param RequestStack $requestStack
+   * @param CacheContextsManager $contextsManager
+   * @param CacheBackendInterface $resultCacheBackend
    * @param string|null $pluginInterface
    *   The interface each plugin should implement.
    * @param string $pluginAnnotationName
@@ @@
    * @param array $mapping
    * @param array $config
    *
-   * @return \Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerProxy
+   * @return DataProducerProxy
    */
   public function proxy($id, array $mapping = [], array $config = []) {
     return new DataProducerProxy(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


91) modules/contrib/graphql/src/Plugin/DataProducerPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Plugin;

+use GraphQL\Deferred;
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Plugin\ContextAwarePluginInterface;
@@ @@
   /**
    * Resolves the queried field with the given context.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param FieldContext $field
    *
-   * @return \GraphQL\Deferred|mixed
+   * @return Deferred|mixed
    */
   public function resolveField(FieldContext $field);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


92) modules/contrib/graphql/src/PermissionProvider.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql;

+use Drupal\graphql\Entity\ServerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * PermissionProvider constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
     $this->entityTypeManager = $entityTypeManager;
@@ @@
    */
   public function permissions(): array {
     $storage = $this->entityTypeManager->getStorage('graphql_server');
-    /** @var \Drupal\graphql\Entity\ServerInterface[] $servers */
+    /** @var ServerInterface[] $servers */
     $servers = $storage->loadMultiple();
     $permissions = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


93) modules/contrib/graphql/src/GraphQL/ValidatorInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\GraphQL;

+use GraphQL\Error\Error;
 use Drupal\graphql\Entity\ServerInterface;

 /**
@@ @@
   /**
    * Validates the schema of the server.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
+   * @param ServerInterface $server
    *   The server to validate.
    *
-   * @return \GraphQL\Error\Error[]
+   * @return Error[]
    *   An array of validation errors.
    */
   public function validateSchema(ServerInterface $server) : array;
@@ @@
    * interfaces do not have a registered resolver in the server's resolver
    * registry for the field.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
+   * @param ServerInterface $server
    *   The server to validate.
    * @param array $ignore_types
    *   Any types to ignore during validation.
@@ @@
    * A resolver is considered orphaned if it's defined in the resolver registry
    * for the server but the field does not occur in any SDL (.graphqls) files.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
+   * @param ServerInterface $server
    *   The server to validate.
    * @param array $ignore_types
    *   Any types to ignore during validation.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


94) modules/contrib/graphql/src/GraphQL/Validator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\GraphQL;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\graphql\Entity\ServerInterface;
 use Drupal\graphql\Plugin\SchemaPluginInterface;
@@ @@
   /**
    * The schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * GraphQL logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * ValidateResolverController constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $pluginManager
+   * @param SchemaPluginManager $pluginManager
    *   The schema plugin manager.
    */
   public function __construct(SchemaPluginManager $pluginManager) {
@@ @@
   /**
    * Get the schema plugin for a GraphQL server.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
+   * @param ServerInterface $server
    *   The GraphQL server.
    *
-   * @return \Drupal\graphql\Plugin\SchemaPluginInterface
+   * @return SchemaPluginInterface
    *   A schema plugin interface.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    *   Thrown when no schema plugin is defined for the server.
    */
   private function getSchemaPlugin(ServerInterface $server) : SchemaPluginInterface {
     $schema_name = $server->get('schema');
-    /** @var \Drupal\graphql\Plugin\SchemaPluginInterface $plugin */
+    /** @var SchemaPluginInterface $plugin */
     $plugin = $this->pluginManager->createInstance($schema_name);
     if ($plugin instanceof ConfigurableInterface && $config = $server->get('schema_configuration')) {
       $plugin->setConfiguration($config[$schema_name] ?? []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


95) modules/contrib/graphql/src/GraphQL/Utility/Introspection.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Perform an introspection query and return result.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
+   * @param ServerInterface $server
    *   The server instance.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


96) modules/contrib/graphql/src/GraphQL/Utility/FileUpload.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\GraphQL\Utility;

+use Drupal\file\FileStorageInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Symfony\Component\HttpKernel\Exception\UnprocessableEntityHttpException;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\Crypt;
@@ @@
   /**
    * The file storage where we will create new file entities from.
    *
-   * @var \Drupal\file\FileStorageInterface
+   * @var FileStorageInterface
    */
   protected $fileStorage;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The mime type guesser service.
    *
-   * @var \Symfony\Component\Mime\MimeTypeGuesserInterface
+   * @var MimeTypeGuesserInterface
    */
   protected $mimeTypeGuesser;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * GraphQL logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The token replacement instance for tokens in file directory paths.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The lock service to prevent duplicate file uploads to the same destination.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * The file system configuration to determine if we allow insecure uploads.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $systemFileConfig;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The event dispatcher service.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
     RendererInterface $renderer,
     EventDispatcherInterface $eventDispatcher
   ) {
-    /** @var \Drupal\file\FileStorageInterface $file_storage */
+    /** @var FileStorageInterface $file_storage */
     $file_storage = $entityTypeManager->getStorage('file');
     $this->fileStorage = $file_storage;
     $this->currentUser = $currentUser;
@@ @@
    * \Drupal\file\Plugin\Field\FieldType\FileItem
    * \Drupal\file\Plugin\rest\resource\FileUploadResource.
    *
-   * @param \Symfony\Component\HttpFoundation\File\UploadedFile $uploaded_file
+   * @param UploadedFile $uploaded_file
    *   The file entity to upload.
    * @param array $settings
    *   File settings as specified in regular file field config. Contains keys:
@@ @@
    *   - file_extensions: List of valid file extensions (eg [xml, pdf])
    *   - max_filesize: Maximum allowed size of uploaded file.
    *
-   * @return \Drupal\graphql\GraphQL\Response\FileUploadResponse
+   * @return FileUploadResponse
    *   The file upload response containing file entity or list of violations.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \RuntimeException
    */
   public function saveFileUpload(UploadedFile $uploaded_file, array $settings): FileUploadResponse {
@@ @@

     try {
       // Begin building file entity.
-      /** @var \Drupal\file\FileInterface $file */
+      /** @var FileInterface $file */
       $file = $this->fileStorage->create([]);
       $file->setOwnerId($this->currentUser->id());
       $file->setFilename($prepared_filename);
@@ @@
   /**
    * Validates uploaded files, saves them and returns a file upload response.
    *
-   * @param \Symfony\Component\HttpFoundation\File\UploadedFile[] $uploaded_files
+   * @param UploadedFile[] $uploaded_files
    *   The file entities to upload.
    * @param array $settings
    *   File settings as specified in regular file field config. Contains keys:
@@ @@
    *   - file_extensions: List of valid file extensions (eg [xml, pdf])
    *   - max_filesize: Maximum allowed size of uploaded file.
    *
-   * @return \Drupal\graphql\GraphQL\Response\FileUploadResponse
+   * @return FileUploadResponse
    *   The file upload response containing file entities or list of violations.
    */
   public function saveMultipleFileUploads(array $uploaded_files, array $settings): FileUploadResponse {
@@ @@
   /**
    * Validates the file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity to validate.
    * @param array $validators
    *   An array of upload validators to pass to file_validate().
-   * @param \Drupal\graphql\GraphQL\Response\FileUploadResponse $response
+   * @param FileUploadResponse $response
    *   The response where validation errors will be added.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\UnprocessableEntityHttpException
+   * @throws UnprocessableEntityHttpException
    *   Thrown when there are file validation errors.
    *
    * @return bool
@@ @@
         // reject it below.
         $passes_validation = FALSE;
         if (!empty($validators['file_validate_extensions'][0])) {
-          /** @var \Drupal\file\FileInterface $file */
+          /** @var FileInterface $file */
           $file = $this->fileStorage->create([]);
           $file->setFilename($filename);
           $passes_validation = empty(file_validate_extensions($file, $validators['file_validate_extensions'][0]));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


97) modules/contrib/graphql/src/GraphQL/Utility/DocumentSerializer.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Turn the AST document to a serializable array.
    *
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param DocumentNode $document
    *
    * @return array
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


98) modules/contrib/graphql/src/GraphQL/Utility/DeferredUtility.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The promise adapter.
    *
-   * @var \GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter|null
+   * @var SyncPromiseAdapter|null
    */
   public static $promiseAdapter;

@@ @@
   /**
    * Return the singleton promise adapter.
    *
-   * @return \GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter
+   * @return SyncPromiseAdapter
    *   The singleton promise adapter.
    */
   public static function promiseAdapter() {
@@ @@
    * @param mixed $value
    * @param callable $callback
    *
-   * @return \GraphQL\Executor\Promise\Adapter\SyncPromise|mixed
+   * @return SyncPromise|mixed
    */
   public static function returnFinally($value, callable $callback) {
     if ($value instanceof SyncPromise) {
@@ @@
    * @param array $values
    *   An array of promises and arbitrary values.
    *
-   * @return \GraphQL\Deferred|array
+   * @return Deferred|array
    *   The deferred result or the unchanged input array if it does not contain
    *   any promises.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


99) modules/contrib/graphql/src/GraphQL/Response/ResponseInterface.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\GraphQL\Response;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * Response interface used for GraphQL responses.
  */
@@ @@
   /**
    * Adds the violation.
    *
-   * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $message
+   * @param string|TranslatableMarkup $message
    *   Violation message.
    * @param array $properties
    *   Other properties related to the violation.
@@ @@
   /**
    * Adds multiple violations.
    *
-   * @param string[]|\Drupal\Core\StringTranslation\TranslatableMarkup[] $messages
+   * @param string[]|TranslatableMarkup[] $messages
    *   Violation messages.
    * @param array $properties
    *   Other properties related to the violation.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


100) modules/contrib/graphql/src/GraphQL/Response/FileUploadResponse.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The file entities in case of successful file upload.
    *
-   * @var \Drupal\file\FileInterface[]
+   * @var FileInterface[]
    */
   protected $fileEntities = [];

@@ @@
   /**
    * Sets file entity.
    *
-   * @param \Drupal\file\FileInterface $fileEntity
+   * @param FileInterface $fileEntity
    *   File entity.
    */
   public function setFileEntity(FileInterface $fileEntity): void {
@@ @@
   /**
    * Sets file entities.
    *
-   * @param \Drupal\file\FileInterface[] $fileEntities
+   * @param FileInterface[] $fileEntities
    *   File entities.
    */
   public function setFileEntities(array $fileEntities): void {
@@ @@
   /**
    * Get the first file entity if there is one.
    *
-   * @return \Drupal\file\FileInterface|null
+   * @return FileInterface|null
    *   First file entity or NULL.
    */
   public function getFileEntity(): ?FileInterface {
@@ @@
   /**
    * Get the file entities.
    *
-   * @return \Drupal\file\FileInterface[]
+   * @return FileInterface[]
    *   File entities.
    */
   public function getFileEntities(): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


101) modules/contrib/graphql/src/GraphQL/ResolverRegistryInterface.php:16

    ---------- begin diff ----------
@@ @@
    *
    * @param mixed $value
    * @param mixed $args
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
+   * @param FieldContext $field
    *
    * @return callable|null
    */
@@ @@
    * Resolve a type.
    *
    * @param mixed $value
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
    *
    * @return callable|null
    */
@@ @@
    *
    * @param string $type
    * @param string $field
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $resolver
+   * @param ResolverInterface $resolver
    *
    * @return $this
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


102) modules/contrib/graphql/src/GraphQL/ResolverRegistry.php:153

    ---------- begin diff ----------
@@ @@
    * This should be used instead of `getFieldResolver` unless you're certain you
    * want the resolver only for the specific type.
    *
-   * @param \GraphQL\Type\Definition\Type $type
+   * @param Type $type
    *   The type to find a resolver for.
    * @param string $fieldName
    *   The name of the field to find a resolver for.
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\ResolverInterface|null
+   * @return ResolverInterface|null
    *   The defined resolver for the field or NULL if none exists.
    *
    * @todo This should be added to ResolverRegistryInterface in 5.0.0.
@@ @@
    *
    * @param mixed $value
    * @param string $args
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
    *
    * @return callable|null
    */
@@ @@
    *
    * @param mixed $value
    * @param mixed $args
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
+   * @param FieldContext $field
    *
    * @return mixed|null
    */
@@ @@
    * Returns the type resolver that should be used on runtime.
    *
    * @param mixed $value
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
    *
    * @return callable|null
    */
@@ @@
    * Returns NULL as default type.
    *
    * @param mixed $value
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
    *
    * @return null
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


103) modules/contrib/graphql/src/GraphQL/ResolverBuilder.php:30

    ---------- begin diff ----------
@@ @@
    * @param string $id
    * @param array $config
    *
-   * @return \Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerProxy
+   * @return DataProducerProxy
    */
   public function produce($id, array $config = []) {
     return DataProducerProxy::create($id, $config);
@@ @@
   /**
    * Combine multiple resolvers in a chain resolving after each other.
    *
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface ...$resolvers
+   * @param ResolverInterface ...$resolvers
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Composite
+   * @return Composite
    */
   public function compose(ResolverInterface ...$resolvers) {
     return new Composite($resolvers);
@@ @@
   /**
    * Register a resolver.
    *
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $callback
+   * @param ResolverInterface $callback
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Tap
+   * @return Tap
    */
   public function tap(ResolverInterface $callback) {
     return new Tap($callback);
@@ @@
   /**
    * Register a resolver for multiple items.
    *
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $callback
+   * @param ResolverInterface $callback
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Map
+   * @return Map
    */
   public function map(ResolverInterface $callback) {
     return new Map($callback);
@@ @@
    *
    * @param callable $callback
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Callback
+   * @return Callback
    */
   public function callback(callable $callback) {
     return new Callback($callback);
@@ @@
    * Add a context that is available for further resolvers.
    *
    * @param string $name
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $source
+   * @param ResolverInterface $source
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Tap
+   * @return Tap
    */
   public function context($name, ResolverInterface $source = NULL) {
     $callback = new SourceContext($name, $source);
@@ @@
    *
    * @param array $branches
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Condition
+   * @return Condition
    */
   public function cond(array $branches) {
     return new Condition($branches);
@@ @@
    *
    * @param string $type
    * @param string $path
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $value
+   * @param ResolverInterface $value
    *
-   * @return \Drupal\graphql\Plugin\GraphQL\DataProducer\DataProducerProxy
+   * @return DataProducerProxy
    */
   public function fromPath($type, $path, ResolverInterface $value = NULL) {
     return $this->produce('property_path')
@@ @@
    *
    * @param mixed $value
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Value
+   * @return Value
    */
   public function fromValue($value) {
     return new Value($value);
@@ @@
    *
    * @param string $name
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Argument
+   * @return Argument
    */
   public function fromArgument($name) {
     return new Argument($name);
@@ @@
   /**
    * Resolves the current value that will be a parent for the field.
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\ParentValue
+   * @return ParentValue
    */
   public function fromParent() {
     return new ParentValue();
@@ @@
    * @param string $name
    * @param callable|null $default
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\Context
+   * @return Context
    */
   public function fromContext($name, $default = NULL) {
     return new Context($name, $default);
@@ @@
    * @param mixed $value
    * @param mixed $default
    *
-   * @return \Drupal\graphql\GraphQL\Resolver\DefaultValue
+   * @return DefaultValue
    */
   public function defaultValue($value, $default) {
     return new DefaultValue($value, $default);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


104) modules/contrib/graphql/src/GraphQL/Resolver/Tap.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Tap constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $resolver
+   * @param ResolverInterface $resolver
    */
   public function __construct(ResolverInterface $resolver) {
     $this->resolver = $resolver;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


105) modules/contrib/graphql/src/GraphQL/Resolver/SourceContext.php:28

    ---------- begin diff ----------
@@ @@
    * SourceContext constructor.
    *
    * @param string $name
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface|null $source
+   * @param ResolverInterface|null $source
    */
   public function __construct($name, ResolverInterface $source = NULL) {
     $this->name = $name;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


106) modules/contrib/graphql/src/GraphQL/Resolver/ResolverInterface.php:15

    ---------- begin diff ----------
@@ @@
    *
    * @param mixed $value
    * @param mixed $args
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
-   * @param \Drupal\graphql\GraphQL\Execution\FieldContext $field
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
+   * @param FieldContext $field
    *
    * @return mixed
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


107) modules/contrib/graphql/src/GraphQL/Resolver/Path.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Name of the context.
    *
-   * @var string|\Drupal\Core\TypedData\DataDefinitionInterface
+   * @var string|DataDefinitionInterface
    */
   protected $type;

@@ @@
    *
    * @param string $type
    * @param mixed $path
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface|null $value
+   * @param ResolverInterface|null $value
    */
   public function __construct($type, $path, ResolverInterface $value = NULL) {
     $this->type = $type;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


108) modules/contrib/graphql/src/GraphQL/Resolver/Map.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Map constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $resolver
+   * @param ResolverInterface $resolver
    */
   public function __construct(ResolverInterface $resolver) {
     $this->resolver = $resolver;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


109) modules/contrib/graphql/src/GraphQL/Resolver/DefaultValue.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The initial value.
    *
-   * @var \Drupal\graphql\GraphQL\Resolver\ResolverInterface
+   * @var ResolverInterface
    */
   protected $value;

@@ @@
   /**
    * The fallback value in case the initial value resolves to NULL.
    *
-   * @var \Drupal\graphql\GraphQL\Resolver\ResolverInterface
+   * @var ResolverInterface
    */
   protected $default;

@@ @@
   /**
    * DefaultValue constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $value
+   * @param ResolverInterface $value
    *   The initial value to check.
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $default
+   * @param ResolverInterface $default
    *   The fallback value returned if the initial one resolves to NULL.
    */
   public function __construct(ResolverInterface $value, ResolverInterface $default) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


110) modules/contrib/graphql/src/GraphQL/Resolver/Condition.php:52

    ---------- begin diff ----------
@@ @@
       }

       if ((bool) $condition) {
-        /** @var \Drupal\graphql\GraphQL\Resolver\ResolverInterface|null $resolver */
+        /** @var ResolverInterface|null $resolver */
         return $resolver ? $resolver->resolve($value, $args, $context, $info, $field) : $condition;
       }
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


111) modules/contrib/graphql/src/GraphQL/Resolver/Composite.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Add one more producer.
    *
-   * @param \Drupal\graphql\GraphQL\Resolver\ResolverInterface $resolver
+   * @param ResolverInterface $resolver
    *   DataProducerProxy object.
    */
   public function add(ResolverInterface $resolver): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


112) modules/contrib/graphql/src/GraphQL/Execution/ResolveContext.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The GraphQL server configuration.
    *
-   * @var \Drupal\graphql\Entity\ServerInterface
+   * @var ServerInterface
    */
   protected $server;

@@ @@
   /**
    * The operation parameters to perform.
    *
-   * @var \GraphQL\Server\OperationParams
+   * @var OperationParams
    */
   protected $operation;

@@ @@
   /**
    * The parsed schema document.
    *
-   * @var \GraphQL\Language\AST\DocumentNode
+   * @var DocumentNode
    */
   protected $document;

@@ @@
   /**
    * ResolveContext constructor.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
-   * @param \GraphQL\Server\OperationParams $operation
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param ServerInterface $server
+   * @param OperationParams $operation
+   * @param DocumentNode $document
    * @param string $type
    * @param array $config
    */
@@ @@
   /**
    * Returns the GraphQL server config entity.
    *
-   * @return \Drupal\graphql\Entity\ServerInterface
+   * @return ServerInterface
    */
   public function getServer() {
     return $this->server;
@@ @@
   /**
    * Returns the current operation parameters.
    *
-   * @return \GraphQL\Server\OperationParams
+   * @return OperationParams
    */
   public function getOperation() {
     return $this->operation;
@@ @@
   /**
    * Returns the parsed GraphQL schema.
    *
-   * @return \GraphQL\Language\AST\DocumentNode
+   * @return DocumentNode
    */
   public function getDocument() {
     return $this->document;
@@ @@
    * Allows field resolvers to set contextual values which can be inherited by
    * their descendants.
    *
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    * @param string $name
    *   The name of the context.
@@ @@
    *
    * Allows field resolvers to inherit contextual values from their ancestors.
    *
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    * @param string $name
    *   The name of the context.
@@ @@
    *
    * Also checks ancestors of the field.
    *
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveInfo $info
    *   The resolve info object.
    * @param string $name
    *   The name of the context.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


113) modules/contrib/graphql/src/GraphQL/Execution/FieldContext.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The context that has been passed down.
    *
-   * @var \Drupal\graphql\GraphQL\Execution\ResolveContext
+   * @var ResolveContext
    */
   protected $context;

@@ @@
   /**
    * Schema type information of the current field.
    *
-   * @var \GraphQL\Type\Definition\ResolveInfo
+   * @var ResolveInfo
    */
   protected $info;

@@ @@
   /**
    * FieldContext constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Type\Definition\ResolveInfo $info
+   * @param ResolveContext $context
+   * @param ResolveInfo $info
    */
   public function __construct(ResolveContext $context, ResolveInfo $info) {
     $this->addCacheContexts(['user.permissions']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


114) modules/contrib/graphql/src/GraphQL/Execution/ExecutorFactory.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;

@@ @@
   /**
    * ExecutorFactory constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    */
   public function __construct(ContainerInterface $container) {
     $this->container = $container;
@@ @@
   /**
    * Factory method to make a new executor.
    *
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Type\Schema $schema
-   * @param \GraphQL\Language\AST\DocumentNode $document
+   * @param PromiseAdapter $adapter
+   * @param Schema $schema
+   * @param DocumentNode $document
    * @param mixed $root
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ResolveContext $context
    * @param mixed $variables
    * @param string $operation
    * @param callable $resolver
    *
-   * @return \Drupal\graphql\GraphQL\Execution\Executor
+   * @return Executor
    */
   public function create(
     PromiseAdapter $adapter,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


115) modules/contrib/graphql/src/GraphQL/Execution/Executor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\GraphQL\Execution;

+use Drupal\graphql\Plugin\SchemaPluginManager;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * The schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * The cache backend for caching query results.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;

@@ @@
   /**
    * The cache contexts manager service.
    *
-   * @var \Drupal\Core\Cache\Context\CacheContextsManager
+   * @var CacheContextsManager
    */
   protected $contextsManager;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
   /**
    * The adapter for promises.
    *
-   * @var \GraphQL\Executor\Promise\PromiseAdapter
+   * @var PromiseAdapter
    */
   protected $adapter;

@@ @@
   /**
    * Represents the GraphQL schema document.
    *
-   * @var \GraphQL\Language\AST\DocumentNode
+   * @var DocumentNode
    */
   protected $document;

@@ @@
   /**
    * The context to pass down during field resolving.
    *
-   * @var \Drupal\graphql\GraphQL\Execution\ResolveContext
+   * @var ResolveContext
    */
   protected $context;

@@ @@
   /**
    * The parsed GraphQL schema.
    *
-   * @var \GraphQL\Type\Schema
+   * @var Schema
    */
   protected $schema;

@@ @@
   /**
    * Executor constructor.
    *
-   * @param \Drupal\Core\Cache\Context\CacheContextsManager $contextsManager
+   * @param CacheContextsManager $contextsManager
    *   The cache contexts manager service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
+   * @param CacheBackendInterface $cacheBackend
    *   The cache backend for caching query results.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Type\Schema $schema
-   * @param \GraphQL\Language\AST\DocumentNode $document
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param PromiseAdapter $adapter
+   * @param Schema $schema
+   * @param DocumentNode $document
+   * @param ResolveContext $context
    * @param mixed $root
    * @param mixed $variables
    * @param string $operation
@@ @@
   /**
    * Constructs an object from a services container.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
-   * @param \GraphQL\Executor\Promise\PromiseAdapter $adapter
-   * @param \GraphQL\Type\Schema $schema
-   * @param \GraphQL\Language\AST\DocumentNode $document
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
+   * @param ContainerInterface $container
+   * @param PromiseAdapter $adapter
+   * @param Schema $schema
+   * @param DocumentNode $document
+   * @param ResolveContext $context
    * @param mixed $root
    * @param mixed $variables
    * @param string $operation
@@ @@
    *
    * @param string $prefix
    *
-   * @return \GraphQL\Executor\Promise\Promise
+   * @return Promise
    */
   protected function doExecuteCached($prefix) {
     if ($result = $this->cacheRead($prefix)) {
@@ @@
   /**
    * Get query results on a cache miss.
    *
-   * @return \GraphQL\Executor\Promise\Promise
+   * @return Promise
    */
   protected function doExecuteUncached() {
     $executor = ReferenceExecutor::create(
@@ @@
   /**
    * Logs unsafe errors if any.
    *
-   * @param \GraphQL\Server\OperationParams $operation
+   * @param OperationParams $operation
    * @param \Drupal\graphql\GraphQL\Execution\ExecutionResult $result
    */
   protected function logUnsafeErrors(OperationParams $operation, ExecutionResult $result): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


116) modules/contrib/graphql/src/GraphQL/Buffers/EntityUuidBuffer.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EntityBuffer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


117) modules/contrib/graphql/src/GraphQL/Buffers/EntityRevisionBuffer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\GraphQL\Buffers;

+use Drupal\Core\Entity\RevisionableStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;

 /**
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EntityBuffer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ @@
     $vids = array_values(array_unique($vids));

     // Load the buffered entities.
-    /** @var \Drupal\Core\Entity\RevisionableStorageInterface $storage */
+    /** @var RevisionableStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage($type);
     $entities = $storage->loadMultipleRevisions($vids);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


118) modules/contrib/graphql/src/GraphQL/Buffers/EntityBuffer.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * EntityBuffer constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


119) modules/contrib/graphql/src/Form/ServerForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Form;

+use Drupal\graphql\Entity\ServerInterface;
+use Drupal\graphql\Plugin\SchemaPluginInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Ajax\AjaxResponse;
@@ @@
   /**
    * The request context.
    *
-   * @var \Drupal\Core\Routing\RequestContext
+   * @var RequestContext
    */
   protected $requestContext;

@@ @@
   /**
    * The schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $schemaManager;

@@ @@
   /**
    * ServerForm constructor.
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $schemaManager
+   * @param SchemaPluginManager $schemaManager
    *   The schema plugin manager.
-   * @param \Drupal\Core\Routing\RequestContext $requestContext
+   * @param RequestContext $requestContext
    *   The request context.
    *
    * @codeCoverageIgnore
@@ @@
    * @param array $form
    *   The form array.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The ajax response.
    */
   public function ajaxSchemaConfigurationForm(array $form) {
@@ @@
    */
   public function form(array $form, FormStateInterface $formState): array {
     $form = parent::form($form, $formState);
-    /** @var \Drupal\graphql\Entity\ServerInterface $server */
+    /** @var ServerInterface $server */
     $server = $this->entity;
     $schemas = array_map(function ($definition) {
       return $definition['name'] ?? $definition['id'];
@@ @@
       '#tree' => TRUE,
     ];

-    /** @var \Drupal\graphql\Plugin\SchemaPluginInterface $instance */
+    /** @var SchemaPluginInterface $instance */
     $instance = $schema ? $this->schemaManager->createInstance($schema) : NULL;
     if ($instance instanceof PluginFormInterface && $instance instanceof ConfigurableInterface) {
       $instance->setConfiguration($server->get('schema_configuration')[$schema] ?? []);
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function validateForm(array &$form, FormStateInterface $formState): void {
     $endpoint = &$formState->getValue('endpoint');
@@ @@
     }

     $schema = $formState->getValue('schema');
-    /** @var \Drupal\graphql\Plugin\SchemaPluginInterface $instance */
+    /** @var SchemaPluginInterface $instance */
     $instance = $this->schemaManager->createInstance($schema);
     if (!empty($form['schema_configuration'][$schema]) && $instance instanceof PluginFormInterface && $instance instanceof ConfigurableInterface) {
       $state = SubformState::createForSubform($form['schema_configuration'][$schema], $form, $formState);
@@ @@
     parent::submitForm($form, $formState);

     $schema = $formState->getValue('schema');
-    /** @var \Drupal\graphql\Plugin\SchemaPluginInterface $instance */
+    /** @var SchemaPluginInterface $instance */
     $instance = $this->schemaManager->createInstance($schema);
     if ($instance instanceof PluginFormInterface && $instance instanceof ConfigurableInterface) {
       $state = SubformState::createForSubform($form['schema_configuration'][$schema], $form, $formState);
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function save(array $form, FormStateInterface $formState) {
     $save_result = parent::save($form, $formState);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


120) modules/contrib/graphql/src/Form/PersistedQueriesForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Form;

+use Drupal\graphql\Entity\Server;
+use Drupal\graphql\Plugin\PersistedQueryPluginInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Plugin manager for persisted query plugins.
    *
-   * @var \Drupal\graphql\Plugin\PersistedQueryPluginManager
+   * @var PersistedQueryPluginManager
    */
   protected $persistedQueryPluginManager;

@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\graphql\Entity\Server
+   * @var Server
    */
   protected $entity;

@@ @@
   /**
    * PersistedQueriesForm constructor.
    *
-   * @param \Drupal\graphql\Plugin\PersistedQueryPluginManager $persistedQueryPluginManager
+   * @param PersistedQueryPluginManager $persistedQueryPluginManager
    */
   public function __construct(PersistedQueryPluginManager $persistedQueryPluginManager) {
     $this->persistedQueryPluginManager = $persistedQueryPluginManager;
@@ @@
   public function form(array $form, FormStateInterface $form_state): array {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\graphql\Plugin\PersistedQueryPluginInterface[] $plugins */
+    /** @var PersistedQueryPluginInterface[] $plugins */
     $plugins = $this->entity->getPersistedQueryInstances();
     $all_plugins = $this->getAllPersistedQueryPlugins();
     $form['#tree'] = TRUE;
@@ @@
   /**
    * Returns an array with all the available persisted query plugins.
    *
-   * @return \Drupal\graphql\Plugin\PersistedQueryPluginInterface[]
+   * @return PersistedQueryPluginInterface[]
    */
   protected function getAllPersistedQueryPlugins() {
     $plugins = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


121) modules/contrib/graphql/src/EventSubscriber/SubrequestSubscriber.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a SubrequestSubscriber object.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
-   * @param \Drupal\Core\StringTranslation\Translator\TranslatorInterface $translator
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
-   * @param \Drupal\language\LanguageNegotiatorInterface $languageNegotiator
+   * @param LanguageManagerInterface $languageManager
+   * @param TranslatorInterface $translator
+   * @param AccountInterface $currentUser
+   * @param LanguageNegotiatorInterface $languageNegotiator
    */
   public function __construct(LanguageManagerInterface $languageManager, TranslatorInterface $translator, AccountInterface $currentUser, LanguageNegotiatorInterface $languageNegotiator = NULL) {
     $this->languageManager = $languageManager;
@@ @@
   /**
    * Handle kernel request events.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The kernel event object.
    */
   public function onKernelRequest(RequestEvent $event): void {
@@ @@
   /**
    * Handle kernel request finished events.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FinishRequestEvent $event
+   * @param FinishRequestEvent $event
    *   The kernel event object.
    */
   public function onKernelRequestFinished(FinishRequestEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


122) modules/contrib/graphql/src/EventSubscriber/OperationSubscriber.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a OperationSubscriber object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
-   * @param \Drupal\Core\StringTranslation\Translator\TranslatorInterface $translator
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
-   * @param \Drupal\language\LanguageNegotiatorInterface $languageNegotiator
+   * @param ModuleHandlerInterface $moduleHandler
+   * @param LanguageManagerInterface $languageManager
+   * @param TranslatorInterface $translator
+   * @param AccountInterface $currentUser
+   * @param LanguageNegotiatorInterface $languageNegotiator
    */
   public function __construct(ModuleHandlerInterface $moduleHandler, LanguageManagerInterface $languageManager, TranslatorInterface $translator, AccountInterface $currentUser, LanguageNegotiatorInterface $languageNegotiator = NULL) {
     $this->moduleHandler = $moduleHandler;
@@ @@
   /**
    * Handle operation start events.
    *
-   * @param \Drupal\graphql\Event\OperationEvent $event
+   * @param OperationEvent $event
    *   The kernel event object.
    */
   public function onBeforeOperation(OperationEvent $event): void {
@@ @@
   /**
    * Handle operation end events.
    *
-   * @param \Drupal\graphql\Event\OperationEvent $event
+   * @param OperationEvent $event
    *   The kernel event object.
    */
   public function onAfterOperation(OperationEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


123) modules/contrib/graphql/src/EventSubscriber/CurrentLanguageResetTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\EventSubscriber;

+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\language\LanguageNegotiatorInterface;
+use Drupal\Core\StringTranslation\Translator\TranslatorInterface;
+use Drupal\Core\Session\AccountInterface;
 use Drupal\language\ConfigurableLanguageManagerInterface;

 /**
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The language negotiator.
    *
-   * @var \Drupal\language\LanguageNegotiatorInterface|null
+   * @var LanguageNegotiatorInterface|null
    */
   protected $languageNegotiator;

@@ @@
   /**
    * The translator.
    *
-   * @var \Drupal\Core\StringTranslation\Translator\TranslatorInterface
+   * @var TranslatorInterface
    */
   protected $translator;

@@ @@
   /**
    * The current user service.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


124) modules/contrib/graphql/src/Event/OperationEvent.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * Result of the query execution.
    *
-   * @var \GraphQL\Executor\ExecutionResult
+   * @var ExecutionResult
    */
   protected $result;

@@ @@
   /**
    * Resolver context used for the query.
    *
-   * @var \Drupal\graphql\GraphQL\Execution\ResolveContext
+   * @var ResolveContext
    */
   protected $context;

@@ @@
   /**
    * OperationEvent constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Execution\ResolveContext $context
-   * @param \GraphQL\Executor\ExecutionResult $result
+   * @param ResolveContext $context
+   * @param ExecutionResult $result
    */
   public function __construct(ResolveContext $context, ExecutionResult $result = NULL) {
     $this->context = $context;
@@ @@
   /**
    * Returns the execution result.
    *
-   * @return \GraphQL\Executor\ExecutionResult
+   * @return ExecutionResult
    */
   public function getResult() {
     return $this->result;
@@ @@
   /**
    * Returns the resolver context.
    *
-   * @return \Drupal\graphql\GraphQL\Execution\ResolveContext
+   * @return ResolveContext
    */
   public function getContext() {
     return $this->context;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


125) modules/contrib/graphql/src/Entity/ServerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Entity;

+use Drupal\graphql\GraphQL\Execution\ExecutionResult;
+use GraphQL\Server\ServerConfig;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\graphql\Plugin\PersistedQueryPluginInterface;
 use GraphQL\Server\OperationParams;
@@ @@
   /**
    * Execute an operation on this server.
    *
-   * @param \GraphQL\Server\OperationParams $operation
+   * @param OperationParams $operation
    *
-   * @return \Drupal\graphql\GraphQL\Execution\ExecutionResult
+   * @return ExecutionResult
    */
   public function executeOperation(OperationParams $operation);

@@ @@
   /**
    * Execute multiple operations as batch on this server.
    *
-   * @param \GraphQL\Server\OperationParams[] $operations
+   * @param OperationParams[] $operations
    *
-   * @return \Drupal\graphql\GraphQL\Execution\ExecutionResult[]
+   * @return ExecutionResult[]
    */
   public function executeBatch(array $operations);

@@ @@
   /**
    * Retrieves the server configuration.
    *
-   * @return \GraphQL\Server\ServerConfig
+   * @return ServerConfig
    *   The server configuration.
    */
   public function configuration();
@@ @@
   /**
    * Adds a Persisted Query plugin instance to the persisted queries set.
    *
-   * @param \Drupal\graphql\Plugin\PersistedQueryPluginInterface $queryPlugin
+   * @param PersistedQueryPluginInterface $queryPlugin
    */
   public function addPersistedQueryInstance(PersistedQueryPluginInterface $queryPlugin);

@@ @@
   /**
    * Returns the current persisted queries set.
    *
-   * @return \Drupal\graphql\Plugin\PersistedQueryPluginInterface[]
+   * @return PersistedQueryPluginInterface[]
    */
   public function getPersistedQueryInstances();

@@ @@
   /**
    * Returns the current persisted queries set, sorted by the plugins weight.
    *
-   * @return \Drupal\graphql\Plugin\PersistedQueryPluginInterface[]
+   * @return PersistedQueryPluginInterface[]
    */
   public function getSortedPersistedQueryInstances();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


126) modules/contrib/graphql/src/Entity/Server.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Entity;

+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\graphql\Plugin\SchemaPluginManager;
+use Drupal\graphql\Plugin\PersistedQueryPluginManager;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function configuration() {
     $params = \Drupal::getContainer()->getParameter('graphql.config');
-    /** @var \Drupal\graphql\Plugin\SchemaPluginManager $manager */
+    /** @var SchemaPluginManager $manager */
     $manager = \Drupal::service('plugin.manager.graphql.schema');
     $schema = $this->get('schema');

-    /** @var \Drupal\graphql\Plugin\SchemaPluginInterface $plugin */
+    /** @var SchemaPluginInterface $plugin */
     $plugin = $manager->createInstance($schema);
     if ($plugin instanceof ConfigurableInterface && $config = $this->get('schema_configuration')) {
       $plugin->setConfiguration($config[$schema] ?? []);
@@ @@
    *
    * @endcode
    *
-   * @param \Drupal\graphql\Plugin\SchemaPluginInterface $schema
+   * @param SchemaPluginInterface $schema
    *   The schema plugin instance.
    * @param array $config
    *
@@ @@
    * Fields that don't explicitly declare a field resolver will use this one
    * as a fallback.
    *
-   * @param \Drupal\graphql\GraphQL\ResolverRegistryInterface $registry
+   * @param ResolverRegistryInterface $registry
    *   The resolver registry.
    *
    * @return null|callable
@@ @@
       return $this->persisted_query_instances;
     }

-    /** @var \Drupal\graphql\Plugin\PersistedQueryPluginManager $plugin_manager */
+    /** @var PersistedQueryPluginManager $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.graphql.persisted_query');
     $definitions = $plugin_manager->getDefinitions();
     $persisted_queries_settings = $this->get('persisted_queries_settings');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


127) modules/contrib/graphql/src/Controller/VoyagerController.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The introspection service.
    *
-   * @var \Drupal\graphql\GraphQL\Utility\Introspection
+   * @var Introspection
    */
   protected $introspection;

@@ @@
   /**
    * VoyagerController constructor.
    *
-   * @param \Drupal\graphql\GraphQL\Utility\Introspection $introspection
+   * @param Introspection $introspection
    *   The GraphQL introspection service.
    *
    * @codeCoverageIgnore
@@ @@
   /**
    * Display for the GraphQL Voyager visualization API.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $graphql_server
+   * @param ServerInterface $graphql_server
    *   The server.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


128) modules/contrib/graphql/src/Controller/ValidationController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The schema plugin manager.
    *
-   * @var \Drupal\graphql\GraphQL\ValidatorInterface
+   * @var ValidatorInterface
    */
   protected $validator;

@@ @@
   /**
    * ValidateResolverController constructor.
    *
-   * @param \Drupal\graphql\GraphQL\ValidatorInterface $validator
+   * @param ValidatorInterface $validator
    *   The GraphQL validator.
    */
   public function __construct(ValidatorInterface $validator) {
@@ @@
   /**
    * Controller for the GraphiQL query builder IDE.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $graphql_server
+   * @param ServerInterface $graphql_server
    *   The GraphQL server entity.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


129) modules/contrib/graphql/src/Controller/SubrequestExtractionController.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The symfony request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * SubrequestExtractionController constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
    *
    * @codeCoverageIgnore
@@ @@
   /**
    * Extracts the sub-request callback response.
    *
-   * @return \Drupal\graphql\SubRequestResponse
+   * @return SubRequestResponse
    *   The sub-request response object.
    */
   public function extract() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


130) modules/contrib/graphql/src/Controller/RequestController.php:43

    ---------- begin diff ----------
@@ @@
   /**
    * Handles graphql requests.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $graphql_server
+   * @param ServerInterface $graphql_server
    *   The server instance.
-   * @param \GraphQL\Server\OperationParams|\GraphQL\Server\OperationParams[] $operations
+   * @param OperationParams|OperationParams[] $operations
    *   The graphql operation(s) to execute.
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
+   * @return CacheableJsonResponse
    *   The JSON formatted response.
    *
    * @throws \Exception
@@ @@
       return $this->handleBatch($graphql_server, $operations);
     }

-    /** @var \GraphQL\Server\OperationParams $operations */
+    /** @var OperationParams $operations */
     return $this->handleSingle($graphql_server, $operations);
   }

@@ @@
   /**
    * Execute a single operation and turn that into a cacheable response.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
-   * @param \GraphQL\Server\OperationParams $operation
+   * @param ServerInterface $server
+   * @param OperationParams $operation
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
+   * @return CacheableJsonResponse
    *
    * @throws \Exception
    */
@@ @@
   /**
    * Execute multiple operations as batch and turn that into cacheable response.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $server
-   * @param \GraphQL\Server\OperationParams[] $operations
+   * @param ServerInterface $server
+   * @param OperationParams[] $operations
    *
-   * @return \Drupal\Core\Cache\CacheableJsonResponse
+   * @return CacheableJsonResponse
    *
    * @throws \Exception
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


131) modules/contrib/graphql/src/Controller/ExplorerController.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The URL generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * The introspection service.
    *
-   * @var \Drupal\graphql\GraphQL\Utility\Introspection
+   * @var Introspection
    */
   protected $introspection;

@@ @@
   /**
    * The schema plugin manager.
    *
-   * @var \Drupal\graphql\Plugin\SchemaPluginManager
+   * @var SchemaPluginManager
    */
   protected $pluginManager;

@@ @@
   /**
    * ExplorerController constructor.
    *
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $urlGenerator
+   * @param UrlGeneratorInterface $urlGenerator
    *   The url generator service.
-   * @param \Drupal\graphql\GraphQL\Utility\Introspection $introspection
+   * @param Introspection $introspection
    *   The introspection service.
-   * @param \Drupal\graphql\Plugin\SchemaPluginManager $pluginManager
+   * @param SchemaPluginManager $pluginManager
    *   The schema plugin manager.
    *
    * @codeCoverageIgnore
@@ @@
   /**
    * Controller for the GraphiQL query builder IDE.
    *
-   * @param \Drupal\graphql\Entity\ServerInterface $graphql_server
+   * @param ServerInterface $graphql_server
    *   The server.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


132) modules/contrib/graphql/src/Config/LanguageConfigOverride.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The config storage service.
    *
-   * @var \Drupal\Core\Config\StorageInterface
+   * @var StorageInterface
    */
   protected $baseStorage;

@@ @@
   /**
    * The negotiator manager service.
    *
-   * @var \Drupal\language\LanguageNegotiationMethodManager|null
+   * @var LanguageNegotiationMethodManager|null
    */
   protected $negotiatorManager;

@@ @@
   /**
    * GraphQLConfigOverrides constructor.
    *
-   * @param \Drupal\Core\Config\StorageInterface $storage
+   * @param StorageInterface $storage
    *   The config storage service.
-   * @param \Drupal\language\LanguageNegotiationMethodManager|null $negotiatorManager
+   * @param LanguageNegotiationMethodManager|null $negotiatorManager
    */
   public function __construct(StorageInterface $storage, LanguageNegotiationMethodManager $negotiatorManager = NULL) {
     $this->baseStorage = $storage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


133) modules/contrib/graphql/src/Annotation/SchemaExtension.php:46

    ---------- begin diff ----------
@@ @@
    * @param mixed $values
    *   The plugin annotation values.
    *
-   * @throws \Doctrine\Common\Annotations\AnnotationException
+   * @throws AnnotationException
    *   In case of missing required values.
    */
   public function __construct($values) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


134) modules/contrib/graphql/src/Annotation/Schema.php:39

    ---------- begin diff ----------
@@ @@
    * @param mixed $values
    *   The plugin annotation values.
    *
-   * @throws \Doctrine\Common\Annotations\AnnotationException
+   * @throws AnnotationException
    *   In case of missing required values.
    */
   public function __construct($values) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


135) modules/contrib/graphql/src/Annotation/PersistedQuery.php:39

    ---------- begin diff ----------
@@ @@
    * @param array $values
    *   The plugin annotation values.
    *
-   * @throws \Doctrine\Common\Annotations\AnnotationException
+   * @throws AnnotationException
    *   In case of missing required annotation values.
    */
   public function __construct(array $values) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


136) modules/contrib/graphql/src/Annotation/DataProducer.php:39

    ---------- begin diff ----------
@@ @@
    * @param array $values
    *   The plugin annotation values.
    *
-   * @throws \Doctrine\Common\Annotations\AnnotationException
+   * @throws AnnotationException
    *   In case of missing required annotation values.
    */
   public function __construct(array $values) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


137) modules/contrib/graphql/src/Access/VoyagerAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Checks access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\graphql\Entity\ServerInterface $graphql_server
+   * @param ServerInterface $graphql_server
    *   The server instance.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, ServerInterface $graphql_server) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


138) modules/contrib/graphql/src/Access/QueryAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Access;

+use Drupal\Core\Access\AccessResultInterface;
+use GraphQL\Server\OperationParams;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * QueryAccessCheck constructor.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(RequestStack $requestStack) {
@@ @@
   /**
    * Checks access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\graphql\Entity\ServerInterface $graphql_server
+   * @param ServerInterface $graphql_server
    *   The server instance.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, ServerInterface $graphql_server) {
@@ @@
       // If a query was provided by the user, this is an arbitrary query (it's
       // not a persisted query). Hence, we only grant access if the user has the
       // permission to execute any query.
-      /** @var \GraphQL\Server\OperationParams $operation */
+      /** @var OperationParams $operation */
       if ($operation->getOriginalInput('query')) {
         return AccessResult::allowedIfHasPermission($account, "execute $id arbitrary graphql requests");
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


139) modules/contrib/graphql/src/Access/ExplorerAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Checks access.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\graphql\Entity\ServerInterface $graphql_server
+   * @param ServerInterface $graphql_server
    *   The server instance.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, ServerInterface $graphql_server) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


140) modules/contrib/graphql/graphql.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\ConfigFactoryInterface;
 /**
  * @file
  * Install, update and uninstall functions for the GraphQL module.
@@ @@
  */
 function graphql_uninstall(): void {
   // Remove the config keys set in GraphQLConfigOverrides::loadOverrides().
-  /** @var \Drupal\Core\Config\ConfigFactoryInterface $configFactory */
+  /** @var ConfigFactoryInterface $configFactory */
   $configFactory = \Drupal::getContainer()->get('config.factory');
   $languageTypes = $configFactory->getEditable('language.types');
   $negotiation = $languageTypes->get('negotiation');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


141) modules/contrib/graphql/graphql.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Database\Query\SelectInterface;
+use Drupal\Core\Database\Query\ConditionInterface;
 /**
  * @file
  * Hooks provided by GraphQL module.
  */
-
 /**
  * Alter the query built by the term autocomplete data producer.
  *
  * @param array $args
  *   Input arguments of taxonomy term data producer.
- * @param \Drupal\Core\Database\Query\SelectInterface $query
+ * @param SelectInterface $query
  *   The term autocomplete query.
- * @param \Drupal\Core\Database\Query\ConditionInterface $name_condition_group
+ * @param ConditionInterface $name_condition_group
  *   The condition group matching the term name. This condition group is defined
  *   as OR condition group which allows to cover a match in term name OR in some
  *   other fields.
  */
-function hook_graphql_term_autocomplete_query_alter(array $args, \Drupal\Core\Database\Query\SelectInterface $query, \Drupal\Core\Database\Query\ConditionInterface $name_condition_group): void {
+function hook_graphql_term_autocomplete_query_alter(array $args, SelectInterface $query, ConditionInterface $name_condition_group): void {
   // Custom field on profile entity type of bundle resume has a reference to
   // synonyms field. Extend a query so it matches the string in term names OR in
   // synonyms.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


142) modules/contrib/graphql/examples/graphql_example/src/Wrappers/QueryConnection.php:10

    ---------- begin diff ----------
@@ @@
 class QueryConnection {

   /**
-   * @var \Drupal\Core\Entity\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $query;

@@ @@
   /**
    * QueryConnection constructor.
    *
-   * @param \Drupal\Core\Entity\Query\QueryInterface $query
+   * @param QueryInterface $query
    */
   public function __construct(QueryInterface $query) {
     $this->query = $query;
@@ @@
   }

   /**
-   * @return array|\GraphQL\Deferred
+   * @return array|Deferred
    */
   public function items() {
     $result = $this->query->execute();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


143) modules/contrib/graphql/examples/graphql_example/src/Plugin/GraphQL/SchemaExtension/ExampleSchemaExtension.php:26

    ---------- begin diff ----------
@@ @@
   }

   /**
-   * @param \Drupal\graphql\GraphQL\ResolverRegistryInterface $registry
-   * @param \Drupal\graphql\GraphQL\ResolverBuilder $builder
+   * @param ResolverRegistryInterface $registry
+   * @param ResolverBuilder $builder
    */
   protected function addPageFields(ResolverRegistryInterface $registry, ResolverBuilder $builder): void {
     $registry->addFieldResolver('Page', 'id',
@@ @@
   }

   /**
-   * @param \Drupal\graphql\GraphQL\ResolverRegistryInterface $registry
-   * @param \Drupal\graphql\GraphQL\ResolverBuilder $builder
+   * @param ResolverRegistryInterface $registry
+   * @param ResolverBuilder $builder
    */
   protected function addQueryFields(ResolverRegistryInterface $registry, ResolverBuilder $builder): void {
     $registry->addFieldResolver('Query', 'page',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


144) modules/contrib/graphql/examples/graphql_example/src/Plugin/GraphQL/Schema/ExampleSchema.php:31

    ---------- begin diff ----------
@@ @@
   }

   /**
-   * @param \Drupal\graphql\GraphQL\ResolverRegistry $registry
-   * @param \Drupal\graphql\GraphQL\ResolverBuilder $builder
+   * @param ResolverRegistry $registry
+   * @param ResolverBuilder $builder
    */
   protected function addArticleFields(ResolverRegistry $registry, ResolverBuilder $builder): void {
     $registry->addFieldResolver('Article', 'id',
@@ @@
   }

   /**
-   * @param \Drupal\graphql\GraphQL\ResolverRegistry $registry
-   * @param \Drupal\graphql\GraphQL\ResolverBuilder $builder
+   * @param ResolverRegistry $registry
+   * @param ResolverBuilder $builder
    */
   protected function addQueryFields(ResolverRegistry $registry, ResolverBuilder $builder): void {
     $registry->addFieldResolver('Query', 'article',
@@ @@

   /**
    * @param string $type
-   * @param \Drupal\graphql\GraphQL\ResolverRegistry $registry
-   * @param \Drupal\graphql\GraphQL\ResolverBuilder $builder
+   * @param ResolverRegistry $registry
+   * @param ResolverBuilder $builder
    */
   protected function addConnectionFields($type, ResolverRegistry $registry, ResolverBuilder $builder): void {
     $registry->addFieldResolver($type, 'total',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


145) modules/contrib/graphql/examples/graphql_example/src/Plugin/GraphQL/DataProducer/QueryArticles.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\graphql_examples\Plugin\GraphQL\DataProducer;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ @@
   const MAX_LIMIT = 100;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin id.
    * @param mixed $pluginDefinition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *
    * @codeCoverageIgnore
    */
@@ @@
   /**
    * @param int $offset
    * @param int $limit
-   * @param \Drupal\Core\Cache\RefinableCacheableDependencyInterface $metadata
+   * @param RefinableCacheableDependencyInterface $metadata
    *
-   * @return \Drupal\graphql_examples\Wrappers\QueryConnection
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return QueryConnection
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function resolve($offset, $limit, RefinableCacheableDependencyInterface $metadata) {
     if ($limit > static::MAX_LIMIT) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


146) modules/contrib/graphql/examples/graphql_composable/src/Wrappers/Response/ArticleResponse.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The article to be served.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $article;

@@ @@
   /**
    * Sets the content.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $article
+   * @param EntityInterface|null $article
    *   The article to be served.
    */
   public function setArticle(?EntityInterface $article): void {
@@ @@
   /**
    * Gets the article to be served.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The article to be served.
    */
   public function article(): ?EntityInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


147) modules/contrib/graphql/examples/graphql_composable/src/Plugin/GraphQL/SchemaExtension/ComposableSchemaExampleExtension.php:79

    ---------- begin diff ----------
@@ @@
   /**
    * Resolves the response type.
    *
-   * @param \Drupal\graphql\GraphQL\Response\ResponseInterface $response
+   * @param ResponseInterface $response
    *   Response object.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


148) modules/contrib/graphql/examples/graphql_composable/src/Plugin/GraphQL/DataProducer/CreateArticle.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, string $plugin_id, array $plugin_definition, AccountInterface $current_user) {
@@ @@
    * @param array $data
    *   The submitted values for the article.
    *
-   * @return \Drupal\graphql_composable\GraphQL\Response\ArticleResponse
+   * @return ArticleResponse
    *   The newly created article.
    *
    * @throws \Exception
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


149) modules/contrib/graphql/examples/graphql_composable/src/GraphQL/Response/ArticleResponse.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The article to be served.
    *
-   * @var \Drupal\Core\Entity\EntityInterface|null
+   * @var EntityInterface|null
    */
   protected $article;

@@ @@
   /**
    * Sets the content.
    *
-   * @param \Drupal\Core\Entity\EntityInterface|null $article
+   * @param EntityInterface|null $article
    *   The article to be served.
    */
   public function setArticle(?EntityInterface $article): void {
@@ @@
   /**
    * Gets the article to be served.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The article to be served.
    */
   public function article(): ?EntityInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 149 files have been changed by Rector                                     

