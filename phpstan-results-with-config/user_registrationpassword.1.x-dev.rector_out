modules/contrib/user_registrationpassword/UserRegistrationPasswordUserRegisterForm.php
modules/contrib/user_registrationpassword/src/Controller/RegistrationController.php
modules/contrib/user_registrationpassword/src/UserRegistrationPassword.php
modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPassword.php
modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAccountSettingFormTest.php
modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdmin.php
modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdminApproval.php
modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordUserPasswordResetForm.php
modules/contrib/user_registrationpassword/tests/src/Kernel/UserRegistrationPasswordMailNotifyTest.php
modules/contrib/user_registrationpassword/user_registrationpassword.install
modules/contrib/user_registrationpassword/user_registrationpassword.module
modules/contrib/user_registrationpassword/user_registrationpassword.tokens.inc

9 files with changes
====================

1) modules/contrib/user_registrationpassword/user_registrationpassword.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\UserInterface;
 /**
  * @file
  * User registration password tokens.
@@ @@
   $replacements = [];

   if ($type === 'user' && !empty($data['user'])) {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = $data['user'];

     foreach ($tokens as $name => $original) {
    ----------- end diff -----------

2) modules/contrib/user_registrationpassword/user_registrationpassword.module:231

    ---------- begin diff ----------
@@ @@
  * @see user_registrationpassword_form_user_register_submit()
  */
 function user_registrationpassword_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
-  /** @var \Drupal\user\UserInterface $account */
+  /** @var UserInterface $account */
   $account = $form_state->getFormObject()->getEntity();
   $user_config = \Drupal::config('user.settings');
   $config = \Drupal::configFactory()->get('user_registrationpassword.settings');
@@ @@
   }

   // Notify the user.
-  /** @var \Drupal\user\UserInterface $account */
+  /** @var UserInterface $account */
   $account = $form_state->getFormObject()->getEntity();
   // Send the confirmation email.
   _user_registrationpassword_mail_notify('register_confirmation_with_pass', $account);
@@ @@
 /**
  * Generates a unique URL for a user to login with their password already set.
  *
- * @param \Drupal\user\UserInterface $account
+ * @param UserInterface $account
  *   The user account.
  * @param array $options
  *   (optional) A keyed array of settings. Supported options are:
@@ @@

   if (!empty($users)) {
     $uid = reset($users);
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
   }

@@ @@
  * Implements submit function.
  */
 function _user_registrationpassword_user_pass_submit(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\user\UserInterface $account */
+  /** @var UserInterface $account */
   $account = $form_state->getValue('account');

   // Then, if we have a user account
@@ @@

     // If the user never ever logged in, resend the activation mail.
     if (!empty($uid)) {
-      /** @var \Drupal\user\UserInterface $account */
+      /** @var UserInterface $account */
       $account = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
       // Mail one time login URL and instructions using current language.
       $mail = _user_registrationpassword_mail_notify('register_confirmation_with_pass', $account);
@@ @@
  * @param $op
  *   The operation being performed on the account. Possible values:
  *   confirmation_with_pass / confirmation_admin_created.
- * @param \Drupal\Core\Session\AccountInterface $account
+ * @param AccountInterface $account
  *   The user object of the account being notified. Must contain at
  *   least the fields 'uid', 'name', and 'mail'.
  * @param string $langcode
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/user_registrationpassword/tests/src/Kernel/UserRegistrationPasswordMailNotifyTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\user_registrationpassword\Kernel;

+use Drupal\user\UserInterface;
 use Drupal\Core\Test\AssertMailTrait;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;

@@ @@
     $edit = [];
     $edit['name'] = $this->randomMachineName();
     $edit['mail'] = $edit['name'] . '@example.com';
-    $edit['pass'] = user_password();
+    $edit['pass'] = \Drupal::service('password_generator')->generate();
     $edit['status'] = 0;
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = $this->createUser($edit);

     $return = _user_registrationpassword_mail_notify($op, $account);
    ----------- end diff -----------

Applied rules:
 * UserPasswordRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordUserPasswordResetForm.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     global $base_url;
     $this->base_url = $base_url;
@@ @@
     $edit1['mail'] = $edit1['name'] . '@example.com';
     $edit1['pass[pass1]'] = $new_pass = $this->randomMachineName();
     $edit1['pass[pass2]'] = $new_pass;
-    $this->drupalPostForm('user/register', $edit1, 'Create new account');
-    $this->assertText('A welcome message with further instructions has been sent to your email address.', 'User registered successfully.');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit1, 'Create new account');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('A welcome message with further instructions has been sent to your email address.');

     // Request a new activation email.
     $edit2 = [];
     $edit2['name'] = $edit1['name'];
-    $this->drupalPostForm('user/password', $edit2, 'Submit');
-    $this->assertText('Further instructions have been sent to your email address.', 'Password reset form submitted successfully.');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit2, 'Submit');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');

     $_emails = $this->getMails();
     $email = end($_emails);
     $this->assertNotEmpty($email['subject']);
     $this->assertNotEmpty($email['body']);
-    $this->assertNotEqual($email['send'], 0);
+    $this->assertNotEquals($email['send'], 0);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertNotEqualRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAdmin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\user_registrationpassword\Functional;

+use Drupal\user\Entity\User;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\UserInterface;
 use Drupal\user_registrationpassword\UserRegistrationPassword;
@@ @@
   /**
    * The admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * A regular user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $regularUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     // User to add and remove language.
     $this->adminUser = $this->drupalCreateUser(['administer account settings', 'administer users']);
@@ @@
     // Test the default options.
     $this->drupalGet('admin/config/people/accounts');
     $edit_first = ['user_register' => UserInterface::REGISTER_VISITORS, 'user_registrationpassword_registration' => UserRegistrationPassword::VERIFICATION_PASS];
-    $this->drupalPostForm('admin/config/people/accounts', $edit_first, 'Save configuration');
+    $this->drupalGet('admin/config/people/accounts');
+    $this->submitForm($edit_first, 'Save configuration');

     // Load config.
     $user_config = \Drupal::configFactory()->get('user.settings');
@@ @@
       'user_register' => UserInterface::REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL,
       'user_registrationpassword_registration' => UserRegistrationPassword::VERIFICATION_PASS,
     ];
-    $this->drupalPostForm('admin/config/people/accounts', $edit_second, 'Save configuration');
+    $this->drupalGet('admin/config/people/accounts');
+    $this->submitForm($edit_second, 'Save configuration');

     // Load config.
     $user_config = \Drupal::configFactory()->get('user.settings');
@@ @@
       'user_register' => UserInterface::REGISTER_ADMINISTRATORS_ONLY,
       'user_registrationpassword_registration' => UserRegistrationPassword::VERIFICATION_PASS,
     ];
-    $this->drupalPostForm('admin/config/people/accounts', $edit_third, 'Save configuration');
+    $this->drupalGet('admin/config/people/accounts');
+    $this->submitForm($edit_third, 'Save configuration');

     // Load config.
     $user_config = \Drupal::configFactory()->get('user.settings');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPasswordAccountSettingFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\user_registrationpassword\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user_registrationpassword\UserRegistrationPassword;

@@ @@
   /**
    * User with administer account settings privileges.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->adminUser = $this->drupalCreateUser(['administer account settings']);
     $this->drupalLogin($this->adminUser);
@@ @@
     ] as $option) {
       $edit = [];
       $edit['user_registrationpassword_registration'] = $option;
-      $this->drupalPostForm('admin/config/people/accounts', $edit, 'Save configuration');
+      $this->drupalGet('admin/config/people/accounts');
+      $this->submitForm($edit, 'Save configuration');

       $this->assertSession()->pageTextNotContains('An illegal choice has been detected. Please contact the site administrator.');
       $this->assertSession()->pageTextContains('The configuration options have been saved.');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/user_registrationpassword/tests/src/Functional/UserRegistrationPassword.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\user_registrationpassword\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
     $edit['pass[pass1]'] = $new_pass = $this->randomMachineName();
     $edit['pass[pass2]'] = $new_pass;
     $pass = $new_pass;
-    $this->drupalPostForm('user/register', $edit, 'Create new account');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, 'Create new account');
     $this->assertSession()->pageTextContains('A welcome message with further instructions has been sent to your email address.');

     // Load the new user.
@@ @@
       ->condition('mail', $mail)
       ->condition('status', 0)
       ->execute();
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = \Drupal::entityTypeManager()->getStorage('user')->load(reset($accounts));

     // Configure some timestamps.
@@ @@
       'name' => $name,
       'pass' => $pass,
     ];
-    $this->drupalPostForm('user/login', $auth, 'Log in');
+    $this->drupalGet('user/login');
+    $this->submitForm($auth, 'Log in');
     $this->assertSession()->pageTextContains('The username ' . $name . ' has not been activated or is blocked.');

     // Timestamp can not be smaller then current. (== registration time).
@@ @@
       'name' => $name,
       'pass' => $pass,
     ];
-    $this->drupalPostForm('user/login', $auth, 'Log in');
+    $this->drupalGet('user/login');
+    $this->submitForm($auth, 'Log in');
     $this->assertSession()->pageTextContains('Member for');
   }

@@ @@
     $edit1['mail'] = $edit1['name'] . '@example.com';
     $edit1['pass[pass1]'] = $new_pass = $this->randomMachineName();
     $edit1['pass[pass2]'] = $new_pass;
-    $this->drupalPostForm('user/register', $edit1, 'Create new account');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit1, 'Create new account');
     $this->assertSession()->pageTextContains('A welcome message with further instructions has been sent to your email address.');

     // Request a new activation email.
     $edit2 = [];
     $edit2['name'] = $edit1['name'];
-    $this->drupalPostForm('user/password', $edit2, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit2, 'Submit');
     $this->assertSession()->pageTextContains('Further instructions have been sent to your email address.');

     // Request a new activation email for a non-existing user name.
     $edit3 = [];
     $edit3['name'] = $this->randomMachineName();
-    $this->drupalPostForm('user/password', $edit3, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit3, 'Submit');
     $this->assertSession()->pageTextContains($edit3['name'] . ' is not recognized as a username or an email address.');

     // Request a new activation email for a non-existing user email.
     $edit4 = [];
     $edit4['name'] = $this->randomMachineName() . '@example.com';
-    $this->drupalPostForm('user/password', $edit4, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit4, 'Submit');
     $this->assertSession()->pageTextContains($edit4['name'] . ' is not recognized as a username or an email address.');
   }

@@ @@
     $edit['mail'] = $mail = $edit['name'] . '@example.com';
     $edit['pass[pass1]'] = $new_pass = $this->randomMachineName();
     $edit['pass[pass2]'] = $new_pass;
-    $this->drupalPostForm('user/register', $edit, 'Create new account');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, 'Create new account');

     // Load the new user.
     $accounts = \Drupal::entityQuery('user')
@@ @@
       ->condition('mail', $mail)
       ->condition('status', 0)
       ->execute();
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = \Drupal::entityTypeManager()->getStorage('user')->load(reset($accounts));

     // Attempt to use the activation link.
@@ @@

     // Try to request a new activation email.
     $edit2['name'] = $edit['name'];
-    $this->drupalPostForm('user/password', $edit2, 'Submit');
+    $this->drupalGet('user/password');
+    $this->submitForm($edit2, 'Submit');
     $this->assertSession()->pageTextContains($edit2['name'] . ' is blocked or has not been activated yet.');
   }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/user_registrationpassword/src/Controller/RegistrationController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\user_registrationpassword\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\user\UserInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\user\UserStorageInterface
+   * @var UserStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Constructs a UserController object.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\user\UserStorageInterface $user_storage
+   * @param UserStorageInterface $user_storage
    *   The user storage.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The status message.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(DateFormatterInterface $date_formatter, UserStorageInterface $user_storage, MessengerInterface $messenger, TimeInterface $time) {
@@ @@
    * @param string $hash
    *   Login link hash.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
+   * @return array|RedirectResponse
    *   The form structure or a redirect response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   If the login link is for a blocked user or invalid user ID.
    */
   public function confirmAccount($uid, $timestamp, $hash) {
@@ @@
         ->execute();

       // Timestamp can not be larger then current.
-      /** @var \Drupal\user\UserInterface $account */
+      /** @var UserInterface $account */
       if ($timestamp_created <= $current && !empty($users) && $account = $this->userStorage->load(reset($users))) {
         // Check if we have to enforce expiration for activation links.
         if ($this->config('user_registrationpassword.settings')->get('registration_ftll_expire') && !$account->getLastLoginTime() && $current - $timestamp > $timeout) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/user_registrationpassword/UserRegistrationPasswordUserRegisterForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $user_config = \Drupal::configFactory()->getEditable('user.settings');
@@ @@
    */
   public function testUserRegisterFormCompatibility() {
     // Test submit callback.
-    $this->assertEqual($this->registerForm['actions']['submit']['#submit'][2], 'user_registrationpassword_form_user_register_submit', 'Submit handler correctly changed.');
+    $this->assertEquals($this->registerForm['actions']['submit']['#submit'][2], 'user_registrationpassword_form_user_register_submit', 'Submit handler correctly changed.');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

