modules/contrib/entity_reference_uuid/entity_reference_uuid.module
modules/contrib/entity_reference_uuid/entity_reference_uuid.views.inc
modules/contrib/entity_reference_uuid/src/EntityReferenceUuidEntityViewsTrait.php
modules/contrib/entity_reference_uuid/src/EntityReferenceUuidFieldItemList.php
modules/contrib/entity_reference_uuid/src/EntityReferenceUuidFieldItemListInterface.php
modules/contrib/entity_reference_uuid/src/EntityReferenceUuidServiceProvider.php
modules/contrib/entity_reference_uuid/src/Plugin/Field/FieldFormatter/EntityReferenceUuidEntityFormatter.php
modules/contrib/entity_reference_uuid/src/Plugin/Field/FieldFormatter/EntityReferenceUuidFormatterBase.php
modules/contrib/entity_reference_uuid/src/Plugin/Field/FieldType/EntityReferenceUuidItem.php
modules/contrib/entity_reference_uuid/src/Plugin/views/filter/TaxonomyIndexUuid.php
modules/contrib/entity_reference_uuid/src/Plugin/views/relationship/EntityReverseUuid.php
modules/contrib/entity_reference_uuid/src/Plugin/views/relationship/EntityStandardUuid.php
modules/contrib/entity_reference_uuid/src/Query/PgsqlQueryFactory.php
modules/contrib/entity_reference_uuid/src/Query/QueryFactory.php
modules/contrib/entity_reference_uuid/src/Query/Tables.php
modules/contrib/entity_reference_uuid/tests/modules/entity_reference_uuid_test/entity_reference_uuid_test.module
modules/contrib/entity_reference_uuid/tests/modules/entity_reference_uuid_test/src/Entity/TestEntityOne.php
modules/contrib/entity_reference_uuid/tests/modules/entity_reference_uuid_test/src/Entity/TestEntityTwo.php
modules/contrib/entity_reference_uuid/tests/modules/entity_reference_uuid_test/src/Entity/TestEntityTwoViewsData.php
modules/contrib/entity_reference_uuid/tests/modules/entity_reference_uuid_test/src/Form/TestEntityOneForm.php
modules/contrib/entity_reference_uuid/tests/modules/entity_reference_uuid_test/src/Form/TestEntityTwoForm.php
modules/contrib/entity_reference_uuid/tests/modules/entity_reference_uuid_test/src/TestEntityAccessControlHandler.php
modules/contrib/entity_reference_uuid/tests/src/Kernel/EntityReferenceUuidItemTest.php
modules/contrib/entity_reference_uuid/tests/src/Kernel/EntityReferenceUuidTestTrait.php
modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/EntityForwardDoubleRef.php
modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/EntityForwardNodeRef.php
modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/EntityForwardRef.php
modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/EntityReverseNodePlusForwardRef.php
modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/EntityReverseNodeRef.php
modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/NodeChemicalContainerConstituents.php
modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/NodeForwardEntityRef.php
modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/NodeForwardRef.php
modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/NodeReverseEntityRef.php
modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/NodeReverseRef.php
modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/UuidViewsKernelTestBase.php

14 files with changes
=====================

1) modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/UuidViewsKernelTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_reference_uuid\Kernel\Views;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * A user entity.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installSchema('system', ['sequences', 'key_value_expire']);
@@ @@
    * @param array $list
    *   An array of values used to create entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function createNodes($type, array $list) {
     foreach ($list as $values) {
@@ @@
    * @param array $list
    *   An array of values used to create entities.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function createEntities($type, array $list) {
     foreach ($list as $values) {
@@ @@
   /**
    * Executes a view with debugging.
    *
-   * @param \Drupal\views\ViewExecutable $view
+   * @param ViewExecutable $view
    *   The view object.
    * @param array $args
    *   (optional) An array of the view arguments to use for the view.
@@ @@
    *   The cardinality of the field.
    *
    * @see \Drupal\Core\Entity\Plugin\EntityReferenceSelection\SelectionBase::buildConfigurationForm()
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createEntityReferenceUuidField($entity_type, $bundle, $field_name, $field_label, $target_entity_type, $selection_handler = 'default', array $selection_handler_settings = [], $cardinality = 1) {
     // Look for or add the specified field to the requested entity bundle.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/NodeReverseEntityRef.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_reference_uuid\Kernel\Views;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\views\Views;

 /**
@@ @@
   /**
    * Tests view.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testView() {
     $view = Views::getView('node_reverse_entity_reference');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/NodeForwardRef.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_reference_uuid\Kernel\Views;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\views\Views;

 /**
@@ @@
   /**
    * Tests view.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testView() {
     $view = Views::getView('node_forward_reference');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/NodeForwardEntityRef.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_reference_uuid\Kernel\Views;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\views\Views;

 /**
@@ @@
   /**
    * Tests view.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testView() {
     $view = Views::getView('node_forward_entity_reference');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/NodeChemicalContainerConstituents.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_reference_uuid\Kernel\Views;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\node\NodeInterface;
 use Drupal\views\Views;

 /**
@@ @@
   /**
    * Tests constituent view.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function testConstituentView() {
     // Validate the presave hook fixed all the test_nodetype_chemical values
     // where needed.
-    /** @var \Drupal\node\NodeInterface $chemicals */
+    /** @var NodeInterface $chemicals */
     $chemicals = $this->entityTypeManager->getStorage('node')->loadByProperties(['type' => 'test_nodetype_chemical']);
     foreach ($chemicals as $node) {
       $this->assertEquals($node->uuid(), $node->field_chemical_constituents->first()->target_uuid);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_reference_uuid/tests/src/Kernel/Views/EntityForwardDoubleRef.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_reference_uuid\Kernel\Views;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\views\Views;

 /**
@@ @@
   /**
    * Tests view.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function testView() {
     // This is a view of test_entity_two entities that relate to a
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_reference_uuid/tests/src/Kernel/EntityReferenceUuidItemTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_reference_uuid\Kernel;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\entity_reference_uuid\Plugin\Field\FieldType\EntityReferenceUuidItem;
+use Drupal\Core\Entity\EntityConstraintViolationList;
+use Drupal\Core\Entity\Plugin\DataType\EntityReference;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\Tests\SchemaCheckTestTrait;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('entity_test_rev');
@@ @@
     $entity = $this->entityTypeManager
       ->getStorage($this->entityType)
       ->create(['type' => $this->bundle]);
-    /** @var \Drupal\entity_reference_uuid\Plugin\Field\FieldType\EntityReferenceUuidItem $field */
+    /** @var EntityReferenceUuidItem $field */
     $field = $entity->{$this->fieldName};
     $field->target_id = $referenced_entity->id();
-    /** @var \Drupal\Core\Entity\EntityConstraintViolationList $violations */
+    /** @var EntityConstraintViolationList $violations */
     $violations = $field->validate();
     $this->assertEquals(0, $violations->count(), 'Validation passes.');
-    /** @var \Drupal\Core\Entity\Plugin\DataType\EntityReference $ref */
+    /** @var EntityReference $ref */
     $ref = $field[0]->get('entity');
-    /** @var \Drupal\Core\Entity\EntityInterface $ent */
+    /** @var EntityInterface $ent */
     $ent = $ref->getParent()->entity;
     $this->assertEquals($uuid, $ent->uuid());

     // Test an invalid reference.
     $field->target_id = $fake;
-    /** @var \Drupal\Core\Entity\EntityConstraintViolationList $violations */
+    /** @var EntityConstraintViolationList $violations */
     $violations = $field->validate();
     $this->assertEquals(2, $violations->count(), 'Validation throws a violation.');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_reference_uuid/tests/modules/entity_reference_uuid_test/src/Form/TestEntityTwoForm.php:21

    ---------- begin diff ----------
@@ @@

     switch ($status) {
       case SAVED_NEW:
-        drupal_set_message($this->t('Created the %label Test entity two.', [
+        $this->messenger()->addStatus($this->t('Created the %label Test entity two.', [
           '%label' => $entity->label(),
         ]));
         break;

       default:
-        drupal_set_message($this->t('Saved the %label Test entity two.', [
+        $this->messenger()->addStatus($this->t('Saved the %label Test entity two.', [
           '%label' => $entity->label(),
         ]));
     }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_reference_uuid/tests/modules/entity_reference_uuid_test/src/Form/TestEntityOneForm.php:21

    ---------- begin diff ----------
@@ @@

     switch ($status) {
       case SAVED_NEW:
-        drupal_set_message($this->t('Created the %label Test entity one.', [
+        $this->messenger()->addStatus($this->t('Created the %label Test entity one.', [
           '%label' => $entity->label(),
         ]));
         break;

       default:
-        drupal_set_message($this->t('Saved the %label Test entity one.', [
+        $this->messenger()->addStatus($this->t('Saved the %label Test entity one.', [
           '%label' => $entity->label(),
         ]));
     }
    ----------- end diff -----------

Applied rules:
 * DrupalSetMessageRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_reference_uuid/src/Plugin/views/relationship/EntityReverseUuid.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_reference_uuid\Plugin\views\relationship;

+use Drupal\views\Plugin\views\query\Sql;
+use Drupal\views\Plugin\views\join\JoinPluginBase;
 use Drupal\views\Plugin\views\relationship\RelationshipPluginBase;
 use Drupal\views\Plugin\ViewsHandlerManager;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The Views Handler Manager.
    *
-   * @var \Drupal\views\Plugin\ViewsHandlerManager
+   * @var ViewsHandlerManager
    */
   protected $joinManager;

@@ @@
   /**
    * Override to document the type here for better code completion.
    *
-   * @var \Drupal\views\Plugin\views\query\Sql
+   * @var Sql
    */
   public $query = NULL;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\views\Plugin\ViewsHandlerManager $join_manager
+   * @param ViewsHandlerManager $join_manager
    *   The views plugin join manager.
    *
    * @see \Drupal\views\Plugin\views\relationship\EntityReverse
@@ @@
       else {
         $id = 'standard';
       }
-      /** @var \Drupal\views\Plugin\views\join\JoinPluginBase $first_join */
+      /** @var JoinPluginBase $first_join */
       $first_join = $this->joinManager->createInstance($id, $first);
       $first_alias = $this->query->addTable($this->definition['target entity base table'], $this->relationship, $first_join);
     }
@@ @@
     else {
       $id = 'standard';
     }
-    /** @var \Drupal\views\Plugin\views\join\JoinPluginBase $second_join */
+    /** @var JoinPluginBase $second_join */
     $second_join = $this->joinManager->createInstance($id, $second);
     // Define alias?
     $second_alias = $this->query->addTable($this->definition['field table'], $this->relationship, $second_join);
@@ @@
       else {
         $id = 'standard';
       }
-      /** @var \Drupal\views\Plugin\views\join\JoinPluginBase $third_join */
+      /** @var JoinPluginBase $third_join */
       $third_join = $this->joinManager->createInstance($id, $third);
       $third_join->adjusted = TRUE;
       // Define alias?
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity_reference_uuid/src/Plugin/Field/FieldType/EntityReferenceUuidItem.php:260

    ---------- begin diff ----------
@@ @@
       return $entity_type->isCommonReferenceTarget();
     });

-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     foreach ($common_references as $entity_type) {
       $options[$entity_type->id()] = [
         'label' => $entity_type->getLabel() . ' ' . t('by UUID'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity_reference_uuid/src/Plugin/Field/FieldFormatter/EntityReferenceUuidEntityFormatter.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, LoggerChannelFactoryInterface $logger_factory, EntityDisplayRepositoryInterface $entity_display_repository) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entity_reference_uuid/src/EntityReferenceUuidEntityViewsTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_reference_uuid;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\Sql\SqlEntityStorageInterface;
@@ @@
    *
    * @param string $table
    *   The table the language field is added to.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The field definition.
    * @param array $views_field
    *   The views field data.
@@ @@
    * @param string $field_column_name
    *   The field column being processed.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function processViewsDataForEntityReferenceUuid($table, FieldDefinitionInterface $field_definition, array &$views_field, $field_column_name) {

@@ @@
    *
    * @param array $data
    *   The Views data.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type whose base fields we are checking.
-   * @param \Drupal\Core\Entity\Sql\SqlEntityStorageInterface $storage
+   * @param SqlEntityStorageInterface $storage
    *   The entity storage.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *
    * @see \Drupal\views\EntityViewsData::getViewsData()
    */
@@ @@
     // Load all typed data definitions of all fields. This should cover each of
     // the entity base, revision, data tables.
     $field_definitions = \Drupal::service('entity_field.manager')->getBaseFieldDefinitions($entity_type_id);
-    /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+    /** @var DefaultTableMapping $table_mapping */
     if ($table_mapping = $storage->getTableMapping($field_definitions)) {
       // Iterate over each table we have so far and collect field data for each.
       // Based on whether the field is in the field_definitions provided by the
@@ @@
   /**
    * Don't fail if this trait is used someplace unexpected.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The default entityTypeManager.
    */
   protected function getEntityTypeManager() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


14) modules/contrib/entity_reference_uuid/entity_reference_uuid.views.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\Sql\DefaultTableMapping;
+use Drupal\Core\Field\BaseFieldDefinition;
 /**
  * @file
  * Provide views data for entity_reference_uuid
@@ @@
  *
  * @see core_field_views_data()
  *
- * @param \Drupal\field\FieldStorageConfigInterface $field_storage
+ * @param FieldStorageConfigInterface $field_storage
  *
  * @return array
  */
@@ @@
  * This is a separate function so that other field types extending
  * entity_reference_uuid can call the same code.
  *
- * @param \Drupal\field\FieldStorageConfigInterface $field_storage
+ * @param FieldStorageConfigInterface $field_storage
  *   A field storage entity.
  *
  * @return array
@@ @@
   $entity_type_manager = \Drupal::entityTypeManager();
   // The ID of the entity type the field is attached to.
   $entity_type_id = $field_storage->getTargetEntityTypeId();
-  /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
+  /** @var DefaultTableMapping $table_mapping */
   $table_mapping = $entity_type_manager->getStorage($entity_type_id)->getTableMapping();
   // Add a relationship to the target entity type.
   $target_entity_type_id = $field_storage->getSetting('target_type');
@@ @@
       $base_field_definitions = \Drupal::service('entity_field.manager')->getBaseFieldDefinitions($entity_type_id);
       foreach ($base_field_definitions as $base_field_name => $base_field_definition) {
         if (!empty($base_field_definition) && $base_field_definition->getType() == 'entity_reference_uuid') {
-          /** @var \Drupal\Core\Field\BaseFieldDefinition $base_field_definition */
+          /** @var BaseFieldDefinition $base_field_definition */
           entity_reference_uuid_views_data_helper($data, $entity_type, $base_field_definition);
         }
       }
@@ @@
  *
  * @param $data
  * @param $entity_type
- * @param \Drupal\Core\Field\BaseFieldDefinition $base_field_definition
+ * @param BaseFieldDefinition $base_field_definition
  *
  * @return void
  */
-function entity_reference_uuid_views_data_helper(&$data, $entity_type, \Drupal\Core\Field\BaseFieldDefinition $base_field_definition) {
+function entity_reference_uuid_views_data_helper(&$data, $entity_type, BaseFieldDefinition $base_field_definition) {
   $entity_type_manager = \Drupal::entityTypeManager();
   // The ID of the entity type the field is attached to.
   $entity_type_id = $entity_type->id();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 14 files have been changed by Rector                                      

