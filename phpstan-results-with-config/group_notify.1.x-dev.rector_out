modules/contrib/group_notify/group_notify.install
modules/contrib/group_notify/group_notify.module
modules/contrib/group_notify/src/Plugin/NotifyGroupNode.php
modules/contrib/group_notify/tests/src/Functional/LoadTest.php

4 files with changes
====================

1) modules/contrib/group_notify/tests/src/Functional/LoadTest.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->drupalCreateUser(['administer site configuration']));
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/group_notify/src/Plugin/NotifyGroupNode.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The mail manager service.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The lanugage manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Returns the appropriate e-mail subject to use for a given notification.
    *
-   * @param \Drupal\group\Entity\GroupContentInterface $entity
+   * @param GroupContentInterface $entity
    *   The GroupContent entity to get the subject for.
    * @param bool $update
    *   Is this an update notification? Defaults to FALSE.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/group_notify/group_notify.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\group\Entity\GroupTypeInterface;
 /**
  * @file
  * Hook implementations and other procedural code for the group_notify module.
@@ @@
   // There's no simple way to get fully loaded plugins for all content types
   // across all group types. So we have to load all the group type entities,
   // then iterate over those to check all the configured plugins for each type.
-  /** @var \Drupal\group\Entity\GroupTypeInterface $group_type */
+  /** @var GroupTypeInterface $group_type */
   foreach (\Drupal::entityTypeManager()->getStorage('group_type')->loadMultiple() as $group_type) {
     // This will load fully configured plugin instances for a given group type.
     foreach (\Drupal::service('plugin.manager.group_content_enabler')->getInstalled($group_type) as $plugin_id => $plugin) {
@@ @@
  * corresponding GroupContent entities and trigger the appropriate group
  * notifications.
  *
- * @param \Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  *   The Node entity.
  * @param string $operation
  *   The entity operation we're dealing with, either 'update' or 'insert'.
@@ @@
 /**
  * Retrieves information about all group members.
  *
- * @param \Drupal\group\Entity\GroupContentInterface $entity
+ * @param GroupContentInterface $entity
  *   The group content entity to retrieve members from.
  *
  * @return array
@@ @@
 /**
  * Prepare and send email notification.
  *
- * @param \Drupal\group\Entity\GroupContentInterface $entity
+ * @param GroupContentInterface $entity
  *   The group content entity to send email notifications for.
  * @param bool $edit
  *   Is this notification about an edit to existing content? Defaults to FALSE.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/group_notify/group_notify.install:13

    ---------- begin diff ----------
@@ @@
  *   The name of the configuration to install.
  */
 function _group_notify_update_configuration($config_name) {
-  $path = drupal_get_path('module', 'group_notify') . '/config/install';
+  $path = \Drupal::service('extension.list.module')->getPath('group_notify') . '/config/install';
   $file = new FileStorage($path);

   \Drupal::service('config.storage')
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

