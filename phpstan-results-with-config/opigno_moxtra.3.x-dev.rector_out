modules/contrib/opigno_moxtra/opigno_moxtra.install
modules/contrib/opigno_moxtra/opigno_moxtra.module
modules/contrib/opigno_moxtra/opigno_moxtra.post_update.php
modules/contrib/opigno_moxtra/src/Controller/MeetingController.php
modules/contrib/opigno_moxtra/src/Controller/MoxtraMembershipController.php
modules/contrib/opigno_moxtra/src/Entity/Meeting.php
modules/contrib/opigno_moxtra/src/Entity/MeetingResult.php
modules/contrib/opigno_moxtra/src/Entity/Workspace.php
modules/contrib/opigno_moxtra/src/Form/MeetingDeleteForm.php
modules/contrib/opigno_moxtra/src/Form/MeetingForm.php
modules/contrib/opigno_moxtra/src/Form/MeetingResultDeleteForm.php
modules/contrib/opigno_moxtra/src/Form/MeetingResultForm.php
modules/contrib/opigno_moxtra/src/Form/MeetingScoreForm.php
modules/contrib/opigno_moxtra/src/Form/SettingsForm.php
modules/contrib/opigno_moxtra/src/Form/WorkspaceDeleteForm.php
modules/contrib/opigno_moxtra/src/Form/WorkspaceForm.php
modules/contrib/opigno_moxtra/src/MeetingAccessControlHandler.php
modules/contrib/opigno_moxtra/src/MeetingInterface.php
modules/contrib/opigno_moxtra/src/MeetingListBuilder.php
modules/contrib/opigno_moxtra/src/MeetingResultAccessControlHandler.php
modules/contrib/opigno_moxtra/src/MeetingResultInterface.php
modules/contrib/opigno_moxtra/src/MeetingResultListBuilder.php
modules/contrib/opigno_moxtra/src/MoxtraConnector.php
modules/contrib/opigno_moxtra/src/MoxtraService.php
modules/contrib/opigno_moxtra/src/MoxtraServiceInterface.php
modules/contrib/opigno_moxtra/src/Plugin/GroupContentEnabler/MeetingGroup.php
modules/contrib/opigno_moxtra/src/Plugin/OpignoGroupManagerContentType/ContentTypeMeeting.php
modules/contrib/opigno_moxtra/src/Plugin/QueueWorker/SaveMeetingRecordsQueue.php
modules/contrib/opigno_moxtra/src/Routing/RouteSubscriber.php
modules/contrib/opigno_moxtra/src/WorkspaceAccessControlHandler.php
modules/contrib/opigno_moxtra/src/WorkspaceInterface.php
modules/contrib/opigno_moxtra/src/WorkspaceListBuilder.php

22 files with changes
=====================

1) modules/contrib/opigno_moxtra/src/WorkspaceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_moxtra;

+use Drupal\user\Entity\User;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\user\EntityOwnerInterface;

@@ @@
   /**
    * Returns members of the workspace.
    *
-   * @return \Drupal\user\Entity\User[]
+   * @return User[]
    *   Array of users.
    */
   public function getMembers();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


2) modules/contrib/opigno_moxtra/src/WorkspaceAccessControlHandler.php:21

    ---------- begin diff ----------
@@ @@
       return AccessResult::allowed();
     }

-    /** @var \Drupal\opigno_moxtra\WorkspaceInterface $entity */
+    /** @var WorkspaceInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view workspace entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/opigno_moxtra/src/Routing/RouteSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_moxtra\Routing;

+use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Custom access requirement callback.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
-   * @return \Drupal\Core\Access\AccessResultForbidden
+   * @return AccessResultForbidden
    */
   public function checkAccess(AccountInterface $account) {
     // Hide 'View' tab for meeting canonical view.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/opigno_moxtra/src/Plugin/QueueWorker/SaveMeetingRecordsQueue.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_moxtra\Plugin\QueueWorker;

+use Drupal\taxonomy\TermInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\taxonomy\TermStorageInterface;
+use Drupal\opigno_moxtra\MeetingInterface;
+use Drupal\media\MediaInterface;
+use Drupal\group\GroupMembership;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\media\Entity\Media;
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Moxtra service.
    *
-   * @var \Drupal\opigno_moxtra\MoxtraServiceInterface
+   * @var MoxtraServiceInterface
    */
   protected $moxtraService;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param array $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, EntityTypeManagerInterface $entity_type_manager, MoxtraServiceInterface $moxtra_service) {
@@ @@
    * @param int $group_id
    *   Group ID.
    *
-   * @return \Drupal\taxonomy\TermInterface|null
+   * @return TermInterface|null
    *   Taxonomy term ID of the recordings folder.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function getRecordingsFolder($group_id) {
     $results = &drupal_static(__FUNCTION__);
@@ @@

     // Try get folder for the live meetings recordings.
     $recording_folder = NULL;
-    /** @var \Drupal\taxonomy\TermStorageInterface $storage */
+    /** @var TermStorageInterface $storage */
     $storage = $this->entityTypeManager->getStorage('taxonomy_term');
     $children = $storage->loadChildren($group_folder_tid);
     foreach ($children as $child) {
@@ @@
       return;
     }

-    /** @var \Drupal\opigno_moxtra\MeetingInterface[] $meetings */
+    /** @var MeetingInterface[] $meetings */
     $meetings = $group->getContentEntities('opigno_moxtra_meeting_group');
     foreach ($meetings as $meeting) {
       $owner_id = $meeting->getOwnerId();
@@ @@
         ->condition('tft_folder.target_id', $folder->id())
         ->execute();

-      /** @var \Drupal\media\MediaInterface[] $files */
+      /** @var MediaInterface[] $files */
       $files = Media::loadMultiple($fids);

       foreach ($recordings as $recording) {
@@ @@
             $training = $meeting->getTraining();
             if (isset($training)) {
               $members = array_map(function ($membership) {
-                /** @var \Drupal\group\GroupMembership $membership */
+                /** @var GroupMembership $membership */
                 return $membership->getUser()->id();
               }, $training->getMembers());
             }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/opigno_moxtra/src/Plugin/OpignoGroupManagerContentType/ContentTypeMeeting.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_moxtra\Plugin\OpignoGroupManagerContentType;

+use Drupal\opigno_moxtra\MeetingResultInterface;
+use Drupal\opigno_moxtra\MeetingInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Core\Url;
 use Drupal\opigno_group_manager\ContentTypeBase;
@@ @@
    * {@inheritdoc}
    */
   public function getUserScore($user_id, $entity_id) {
-    /** @var \Drupal\opigno_moxtra\MeetingResultInterface[] $results */
+    /** @var MeetingResultInterface[] $results */
     $results = \Drupal::entityTypeManager()
       ->getStorage('opigno_moxtra_meeting_result')
       ->loadByProperties([
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @param int|\Drupal\opigno_moxtra\Entity\Meeting $meeting
+   * @param int|Meeting $meeting
    *   The entity ID or entity instance.
    */
   public function getContent($meeting) {
     // If the value is the meeting ID, load the meeting.
     if (is_numeric($meeting)) {
-      /** @var \Drupal\opigno_moxtra\MeetingInterface $meeting */
+      /** @var MeetingInterface $meeting */
       $meeting = Meeting::load($meeting);
     }

@@ @@
    */
   public function getAllContents() {
     try {
-      /** @var \Drupal\opigno_moxtra\Entity\Meeting[] $meetings */
+      /** @var Meeting[] $meetings */
       $meetings = \Drupal::entityTypeManager()
         ->getStorage('opigno_moxtra_meeting')
         ->loadMultiple();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/opigno_moxtra/src/MoxtraService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_moxtra;

+use Drupal\Core\Logger\LoggerChannel;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel
+   * @var LoggerChannel
    */
   protected $logger;

@@ @@
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Moxtra connector service.
    *
-   * @var \Drupal\opigno_moxtra\MoxtraConnector
+   * @var MoxtraConnector
    */
   protected $moxtraConnector;

@@ @@

     if (!empty($response) && $response['http_code'] == 200) {
       $owner = User::load($owner_id);
-      /** @var \Drupal\user\Entity\User[] $users */
+      /** @var User[] $users */
       $users = User::loadMultiple($users_ids);
       foreach ($users as $user) {
         $message = $this->t('@owner invited @user to join this conversation.', [
@@ @@
     $response = $this->moxtraConnector->request($url, $data);
     if (!empty($response) && $response['http_code'] == 200) {
       $owner = User::load($owner_id);
-      /** @var \Drupal\user\Entity\User $user */
+      /** @var User $user */
       $user = User::load($user_id);
       $message = $this->t('@owner removed @user from this conversation.', [
         '@owner' => $owner->getDisplayName(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/opigno_moxtra/src/MoxtraConnector.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_moxtra;

+use Drupal\Core\Logger\LoggerChannel;
+use GuzzleHttp\Client;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ @@
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannel
+   * @var LoggerChannel
    */
   protected $logger;

@@ @@
   /**
    * Cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * Time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Http client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * The keyvalue storage.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactory
+   * @var KeyValueFactory
    */
   protected $keyValueStorage;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/opigno_moxtra/src/MeetingResultInterface.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the meeting entity.
    *
-   * @return \Drupal\opigno_moxtra\MeetingInterface
+   * @return MeetingInterface
    *   The meeting entity.
    */
   public function getMeeting();
@@ @@
   /**
    * Sets the meeting entity.
    *
-   * @param \Drupal\opigno_moxtra\MeetingInterface $meeting
+   * @param MeetingInterface $meeting
    *   The meeting entity.
    *
    * @return $this
@@ @@
   /**
    * Returns the user entity.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity.
    */
   public function getUser();
@@ @@
   /**
    * Sets the user entity.
    *
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user entity.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/opigno_moxtra/src/MeetingResultAccessControlHandler.php:21

    ---------- begin diff ----------
@@ @@
       return AccessResult::allowed();
     }

-    /** @var \Drupal\opigno_moxtra\MeetingInterface $entity */
+    /** @var MeetingInterface $entity */
     switch ($operation) {
       case 'view':
         return AccessResult::allowedIfHasPermission($account, 'view meeting result entities');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/opigno_moxtra/src/MeetingInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_moxtra;

+use Drupal\group\Entity\GroupInterface;
+use Drupal\opigno_calendar_event\Entity\CalendarEvent;
+use Drupal\user\Entity\User;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\user\EntityOwnerInterface;

@@ @@
   /**
    * Returns the related training.
    *
-   * @return \Drupal\group\Entity\GroupInterface|null
+   * @return GroupInterface|null
    *   The related training entity, or NULL in case training ID field
    *   has not been set on the entity.
    */
@@ @@
   /**
    * Sets the related training.
    *
-   * @param \Drupal\group\Entity\GroupInterface|null $training
+   * @param GroupInterface|null $training
    *   The related training entity.
    *
    * @return $this
@@ @@
   /**
    * Returns the entity of the related calendar event.
    *
-   * @return \Drupal\opigno_calendar_event\Entity\CalendarEvent|null
+   * @return CalendarEvent|null
    *   The entity of the related calendar event,
    *   or NULL in case calendar event field
    *   has not been set on the entity.
@@ @@
   /**
    * Sets the entity of the related calendar event.
    *
-   * @param \Drupal\opigno_calendar_event\Entity\CalendarEvent $event
+   * @param CalendarEvent $event
    *   The entity of the related calendar event.
    *
    * @return $this
@@ @@
   /**
    * Returns members of the meeting.
    *
-   * @return \Drupal\user\Entity\User[]
+   * @return User[]
    *   Array of users.
    */
   public function getMembers();
@@ @@
   /**
    * Returns members of the meeting that received the email notification.
    *
-   * @return \Drupal\user\Entity\User[]
+   * @return User[]
    *   Array of users.
    */
   public function getNotifiedMembers();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/opigno_moxtra/src/MeetingAccessControlHandler.php:21

    ---------- begin diff ----------
@@ @@
       return AccessResult::allowed();
     }

-    /** @var \Drupal\opigno_moxtra\MeetingInterface $entity */
+    /** @var MeetingInterface $entity */
     switch ($operation) {
       case 'view':
         $members = $entity->getMembersIds();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/opigno_moxtra/src/Form/WorkspaceForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_moxtra\Form;

+use Drupal\opigno_moxtra\WorkspaceInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ @@
   /**
    * Moxtra service.
    *
-   * @var \Drupal\opigno_moxtra\MoxtraServiceInterface
+   * @var MoxtraServiceInterface
    */
   protected $moxtraService;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state, $training = NULL) {
-    /** @var \Drupal\opigno_moxtra\WorkspaceInterface $entity */
+    /** @var WorkspaceInterface $entity */
     $entity = $this->entity;

     $form = parent::buildForm($form, $form_state);
@@ @@
       $available_options = $default_options;

       if (!empty($group_id)) {
-        /** @var \Drupal\group\Entity\Group $group */
+        /** @var Group $group */
         $group = Group::load($group_id);
         $group_members = $group->getMembers();

@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\opigno_moxtra\WorkspaceInterface $entity */
+    /** @var WorkspaceInterface $entity */
     $entity = $this->entity;
     $is_new = FALSE;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/opigno_moxtra/src/Form/SettingsForm.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The keyvalue storage.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactory
+   * @var KeyValueFactory
    */
   protected $keyValueStorage;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;

@@ @@
   /**
    * Time.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/opigno_moxtra/src/Form/MeetingScoreForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_moxtra\Form;

+use Drupal\opigno_moxtra\MeetingInterface;
+use Drupal\group\GroupMembership;
+use Drupal\user\Entity\User;
+use Drupal\opigno_moxtra\MeetingResultInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Moxtra service.
    *
-   * @var \Drupal\opigno_moxtra\MoxtraServiceInterface
+   * @var MoxtraServiceInterface
    */
   protected $moxtraService;

@@ @@
   /**
    * The keyvalue storage.
    *
-   * @var \Drupal\Core\KeyValueStore\KeyValueFactory
+   * @var KeyValueFactory
    */
   protected $keyValueStorage;

@@ @@
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\opigno_moxtra\MeetingInterface $entity */
+    /** @var MeetingInterface $entity */
     $entity = $this->getRequest()->get('opigno_moxtra_meeting');
     if (!isset($entity)) {
       throw new NotFoundHttpException();
@@ @@
     if (empty($users)) {
       $members = $training->getMembers();
       $users = array_map(function ($member) {
-        /** @var \Drupal\group\GroupMembership $member */
+        /** @var GroupMembership $member */
         return $member->getUser();
       }, $members);
     }
     uasort($users, function ($user1, $user2) {
       /** @var \Drupal\user\Entity\User $user1 */
-      /** @var \Drupal\user\Entity\User $user2 */
+      /** @var User $user2 */
       return strcasecmp($user1->getDisplayName(), $user2->getDisplayName());
     });

     // Load the existing meeting results.
-    /** @var \Drupal\opigno_moxtra\MeetingResultInterface[] $results */
+    /** @var MeetingResultInterface[] $results */
     $results = $this->entityTypeManager
       ->getStorage('opigno_moxtra_meeting_result')
       ->loadByProperties(['meeting' => $entity->id()]);
@@ @@
     // Reindex results by the user ID.
     $results_by_user = [];
     array_walk($results, function ($result) use (&$results_by_user) {
-      /** @var \Drupal\opigno_moxtra\MeetingResultInterface $result */
+      /** @var MeetingResultInterface $result */
       $results_by_user[$result->getUserId()] = $result;
     });

@@ @@

       if (isset($results_by_user[$id])) {
         // If result for this meeting and user is exists, use it.
-        /** @var \Drupal\opigno_moxtra\MeetingResultInterface $result */
+        /** @var MeetingResultInterface $result */
         $result = $results_by_user[$id];
         $attendance = $result->getStatus();
         $score = $result->getScore();
@@ @@
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\opigno_moxtra\MeetingInterface $entity */
+    /** @var MeetingInterface $entity */
     $entity = $this->getRequest()->get('opigno_moxtra_meeting');
     $scores = $form_state->getValue('submit_scores');
     foreach ($scores as $user_id => $values) {
@@ @@
       $score = $values['score'];

       // Try load existing result.
-      /** @var \Drupal\opigno_moxtra\MeetingResultInterface[] $results */
+      /** @var MeetingResultInterface[] $results */
       $results = $this->entityTypeManager
         ->getStorage('opigno_moxtra_meeting_result')
         ->loadByProperties([
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/opigno_moxtra/src/Form/MeetingResultForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_moxtra\Form;

+use Drupal\opigno_moxtra\MeetingResultInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);
-    /** @var \Drupal\opigno_moxtra\MeetingResultInterface $entity */
+    /** @var MeetingResultInterface $entity */
     $entity = $this->entity;

     $form['meeting'] = [
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\opigno_moxtra\MeetingResultInterface $entity */
+    /** @var MeetingResultInterface $entity */
     $entity = $this->entity;
     $status = parent::save($form, $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/opigno_moxtra/src/Form/MeetingForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_moxtra\Form;

+use Drupal\opigno_moxtra\MeetingInterface;
+use Drupal\group\GroupMembership;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
@@ @@
   /**
    * Plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $pluginManager;

@@ @@
   /**
    * Moxtra service interface.
    *
-   * @var \Drupal\opigno_moxtra\MoxtraServiceInterface
+   * @var MoxtraServiceInterface
    */
   protected $moxtraService;

@@ @@
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);

-    /** @var \Drupal\opigno_moxtra\MeetingInterface $entity */
+    /** @var MeetingInterface $entity */
     $entity = $this->entity;
     $owner_id = $entity->getOwnerId();
     $session_key = $entity->getSessionKey();
@@ @@
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);

-    /** @var \Drupal\opigno_moxtra\MeetingInterface $entity */
+    /** @var MeetingInterface $entity */
     $entity = $this->entity;

     $group = $entity->getTraining();
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\opigno_moxtra\MeetingInterface $entity */
+    /** @var MeetingInterface $entity */
     $entity = $this->entity;
     $current_members_ids = [];
     $current_members = !empty($form['members']['#default_value']) ? $form['members']['#default_value'] : [];
@@ @@
         $classes = Group::loadMultiple($classes_ids);
         foreach ($classes as $class) {
           // Add class members to the users.
-          /** @var \Drupal\group\Entity\Group $class */
+          /** @var Group $class */
           $members = $class->getMembers();
           foreach ($members as $member) {
-            /** @var \Drupal\group\GroupMembership $member */
+            /** @var GroupMembership $member */
             $user = $member->getUser();
             $users_ids[] = $user->id();
           }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/opigno_moxtra/src/Entity/Meeting.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_moxtra\Entity;

+use Drupal\group\GroupMembership;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityChangedTrait;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ @@
       $training = $this->getTraining();
       if (isset($training)) {
         $members_ids = array_map(function ($member) {
-          /** @var \Drupal\group\GroupMembership $member */
+          /** @var GroupMembership $member */
           return $member->getUser()->id();
         }, $training->getMembers());
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/opigno_moxtra/src/Controller/MoxtraMembershipController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_moxtra\Controller;

+use Drupal\Core\Form\FormBuilder;
+use Drupal\group\Entity\Group;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\FormBuilderInterface;
@@ @@
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilder
+   * @var FormBuilder
    */
   protected $formBuilder;

@@ @@
   /**
    * Returns users of current group for the autocompletion.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function addToGroupWorkspaceUserAutocomplete() {
@@ @@

     if ($string) {
       $like_string = '%' . $this->connection->escapeLike($string) . '%';
-      /** @var \Drupal\group\Entity\Group $curr_group */
+      /** @var Group $curr_group */
       $curr_group = \Drupal::routeMatch()
         ->getParameter('group');

@@ @@

       $current_members = $workspace->getMembersIds();

-      /** @var \Drupal\user\Entity\User $user */
+      /** @var User $user */
       foreach ($users as $user) {
         $id = $user->id();
         $name = $user->getDisplayName();
@@ @@
   /**
    * Returns all users for the autocompletion.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function addToAllWorkspaceUserAutocomplete() {
@@ @@

       $current_members = $workspace->getMembersIds();

-      /** @var \Drupal\user\Entity\User $user */
+      /** @var User $user */
       foreach ($users as $user) {
         $id = $user->id();
         $name = $user->getDisplayName();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/opigno_moxtra/src/Controller/MeetingController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\opigno_moxtra\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\group\GroupMembership;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Link;
 use Drupal\group\Entity\Group;
@@ @@
   /**
    * Opigno service.
    *
-   * @var \Drupal\opigno_moxtra\MoxtraConnector
+   * @var MoxtraConnector
    */
   protected $moxtraConnector;

@@ @@
   /**
    * Moxtra service.
    *
-   * @var \Drupal\opigno_moxtra\MoxtraServiceInterface
+   * @var MoxtraServiceInterface
    */
   protected $moxtraService;

@@ @@
   /**
    * Creates new MeetingController instance.
    *
-   * @param \Drupal\opigno_moxtra\MoxtraConnector $opigno_service
+   * @param MoxtraConnector $opigno_service
    *   Opigno API service.
-   * @param \Drupal\opigno_moxtra\MoxtraServiceInterface $moxtra_service
+   * @param MoxtraServiceInterface $moxtra_service
    *   Moxtra API service.
    */
   public function __construct(
@@ @@
   /**
    * Returns render array for the navigation.
    *
-   * @param \Drupal\opigno_moxtra\MeetingInterface $opigno_moxtra_meeting
+   * @param MeetingInterface $opigno_moxtra_meeting
    *   Moxtra meeting.
    *
    * @return array
@@ @@
   /**
    * Returns render array for the scheduled live meeting.
    *
-   * @param \Drupal\opigno_moxtra\MeetingInterface $opigno_moxtra_meeting
+   * @param MeetingInterface $opigno_moxtra_meeting
    *   The Live Meeting.
    *
    * @return array
@@ @@
   /**
    * Returns render array for the started live meeting.
    *
-   * @param \Drupal\opigno_moxtra\MeetingInterface $opigno_moxtra_meeting
+   * @param MeetingInterface $opigno_moxtra_meeting
    *   The Live Meeting.
    *
    * @return array
@@ @@
   /**
    * Returns render array for the ended live meeting.
    *
-   * @param \Drupal\opigno_moxtra\MeetingInterface $opigno_moxtra_meeting
+   * @param MeetingInterface $opigno_moxtra_meeting
    *   The Live Meeting.
    *
    * @return array
@@ @@
   /**
    * Returns index page for the live meeting.
    *
-   * @param \Drupal\opigno_moxtra\MeetingInterface $opigno_moxtra_meeting
+   * @param MeetingInterface $opigno_moxtra_meeting
    *   The Live Meeting.
    *
    * @return array
    *   Render array.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginException
+   * @throws PluginNotFoundException
    */
   public function index(MeetingInterface $opigno_moxtra_meeting) {
     $owner_id = $opigno_moxtra_meeting->getOwnerId();
@@ @@
   /**
    * Returns title for the live meeting.
    *
-   * @param \Drupal\opigno_moxtra\MeetingInterface $opigno_moxtra_meeting
+   * @param MeetingInterface $opigno_moxtra_meeting
    *   The Live Meeting.
    *
    * @return string
@@ @@
   /**
    * Returns response for the autocompletion.
    *
-   * @param \Drupal\group\Entity\Group $group
+   * @param Group $group
    *   Group.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function membersAutocompleteSelect(Group $group) {
@@ @@
     if ($group !== NULL) {
       $training_members = $group->getMembers();
       $training_users = array_map(function ($member) {
-        /** @var \Drupal\group\GroupMembership $member */
+        /** @var GroupMembership $member */
         return $member->getUser();
       }, $training_members);
       foreach ($training_users as $user) {
@@ @@
         ];
       }

-      /** @var \Drupal\group\Entity\Group[] $classes */
+      /** @var Group[] $classes */
       $classes = $group->getContentEntities('subgroup:opigno_class');
       foreach ($classes as $class) {
         $id = $class->id();
@@ @@
   /**
    * Returns response for the autocompletion.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    */
   public function membersAutocomplete(Group $group) {
     [$matches, $default] = $this->membersAutocompleteSelect($group);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/opigno_moxtra/opigno_moxtra.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\opigno_moxtra\MeetingInterface;
 /**
  * @file
  * Contains opigno_moxtra.post_update.
@@ @@
       ->condition('uid', $sandbox['last_uid'], '>')
       ->range(0, 10)
       ->execute();
-    /** @var \Drupal\user\Entity\User[] $users */
+    /** @var User[] $users */
     $users = User::loadMultiple($uids);
     foreach ($users as $user) {
       $active = $user->isActive() && $user->hasRole(OPIGNO_MOXTRA_COLLABORATIVE_FEATURES_RID);
@@ @@
     ->condition('id', $sandbox['last_id'], '>')
     ->range(0, 10)
     ->execute();
-  /** @var \Drupal\opigno_moxtra\MeetingInterface[] $meetings */
+  /** @var MeetingInterface[] $meetings */
   $meetings = Meeting::loadMultiple($ids);
   foreach ($meetings as $meeting) {
     $event = $meeting->getCalendarEvent();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


21) modules/contrib/opigno_moxtra/opigno_moxtra.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\opigno_moxtra\MoxtraConnector;
+use Drupal\opigno_moxtra\MoxtraServiceInterface;
+use Drupal\opigno_moxtra\WorkspaceInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\opigno_moxtra\MeetingInterface;
+use Drupal\Core\Mail\MailManagerInterface;
+use Drupal\group\GroupMembership;
+use Drupal\user\Entity\User;
+use Drupal\group\Entity\GroupContentInterface;
+use Drupal\opigno_calendar_event\CalendarEventInterface;
 /**
  * @file
  * Contains opigno_moxtra.module.
@@ @@
 /**
  * Returns the Opigno API service.
  *
- * @return \Drupal\opigno_moxtra\MoxtraConnector
+ * @return MoxtraConnector
  *   Opigno API service.
  */
 function _opigno_moxtra_get_opigno_api() {
@@ @@
 /**
  * Returns the Moxtra API service.
  *
- * @return \Drupal\opigno_moxtra\MoxtraServiceInterface
+ * @return MoxtraServiceInterface
  *   Moxtra API service.
  */
 function _opigno_moxtra_get_moxtra_api() {
@@ @@
 /**
  * Returns the workspace ID of the training group.
  *
- * @param \Drupal\group\Entity\GroupInterface $group
+ * @param GroupInterface $group
  *   Training group.
  *
  * @return int|null
@@ @@
 /**
  * Returns the workspace of the training group.
  *
- * @param \Drupal\group\Entity\GroupInterface $group
+ * @param GroupInterface $group
  *   Training group.
  *
- * @return \Drupal\opigno_moxtra\WorkspaceInterface
+ * @return WorkspaceInterface
  *   Workspace.
  */
 function _opigno_moxtra_get_workspace(GroupInterface $group) {
@@ @@
 /**
  * Returns the Moxtra binder ID of the workspace of the training group.
  *
- * @param \Drupal\group\Entity\GroupInterface $group
+ * @param GroupInterface $group
  *   Training group.
  *
  * @return string|null
@@ @@
  * @return bool
  *   True if user limit is not reached, false otherwise.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _opigno_moxtra_check_user_quota() {
   return TRUE;
@@ @@
 /**
  * Enables user in the Moxtra.
  *
- * @param \Drupal\user\UserInterface $user
+ * @param UserInterface $user
  *   User.
  * @param bool $save
  *   False to not save user immediately.
@@ @@
  *
  * @see opigno_moxtra_user_update()
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function _opigno_moxtra_enable_user(UserInterface $user, $save = TRUE) {
   $user->addRole(OPIGNO_MOXTRA_COLLABORATIVE_FEATURES_RID);
@@ @@
 /**
  * Disables user in the Moxtra.
  *
- * @param \Drupal\user\UserInterface $user
+ * @param UserInterface $user
  *   User.
  * @param bool $save
  *   False to not save user immediately.
@@ @@
  *
  * @see opigno_moxtra_user_update()
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function _opigno_moxtra_disable_user(UserInterface $user, $save = TRUE) {
   $user->removeRole(OPIGNO_MOXTRA_COLLABORATIVE_FEATURES_RID);
@@ @@
 /**
  * Check if the user is enabled in the Moxtra.
  *
- * @param \Drupal\user\UserInterface $user
+ * @param UserInterface $user
  *   User.
  *
  * @return bool
@@ @@
 /**
  * Returns upcoming live meetings.
  *
- * @param \Drupal\user\UserInterface $user
+ * @param UserInterface $user
  *   User.
  *
- * @return \Drupal\opigno_moxtra\MeetingInterface[]
+ * @return MeetingInterface[]
  *   Upcoming live meetings.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function _opigno_moxtra_upcoming_live_meetings(UserInterface $user) {
   if (!_opigno_moxtra_is_active() || $user->isAnonymous() ) {
@@ @@
   }

   // Send the email notifications for the upcoming live meetings.
-  /** @var \Drupal\Core\Mail\MailManagerInterface $mail_service */
+  /** @var MailManagerInterface $mail_service */
   $mail_service = \Drupal::service('plugin.manager.mail');

   $timestamp = \Drupal::time()->getRequestTime();
@@ @@
     ], 'BETWEEN')
     ->execute();

-  /** @var \Drupal\opigno_moxtra\MeetingInterface[] $meetings */
+  /** @var MeetingInterface[] $meetings */
   $meetings = Meeting::loadMultiple($meetings_ids);
   foreach ($meetings as $meeting) {
     $members = $meeting->getMembers();
@@ @@
       $training = $meeting->getTraining();
       if ($training !== NULL) {
         $members = array_map(function ($member) {
-          /** @var \Drupal\group\GroupMembership $member */
+          /** @var GroupMembership $member */
           return $member->getUser();
         }, $training->getMembers());
       }
@@ @@
     }

     $notified = $meeting->getNotifiedMembers();
-    /** @var \Drupal\user\UserInterface[] $not_notified */
+    /** @var UserInterface[] $not_notified */
     $not_notified = array_udiff($members, $notified, function ($user1, $user2) {
       /** @var \Drupal\user\UserInterface $user1 */
-      /** @var \Drupal\user\UserInterface $user2 */
+      /** @var UserInterface $user2 */
       return $user2->id() - $user1->id();
     });

@@ @@
   }

   /** @var \Drupal\opigno_moxtra\Entity\Meeting $entity */
-  /** @var \Drupal\opigno_calendar_event\Entity\CalendarEvent $calendar_event */
+  /** @var CalendarEvent $calendar_event */
   $calendar_event = $entity->getCalendarEvent();
   if (!isset($calendar_event)) {
     $calendar_event = CalendarEvent::create([
@@ @@
     $training = $entity->getTraining();
     if (isset($training)) {
       $members = array_map(function ($member) {
-        /** @var \Drupal\group\GroupMembership $member */
+        /** @var GroupMembership $member */
         return $member->getUser()->id();
       }, $training->getMembers());
     }
@@ @@
     return;
   }

-  /** @var \Drupal\user\Entity\User $entity */
+  /** @var User $entity */
   if (_opigno_moxtra_is_user_enabled($entity)) {
     if (!_opigno_moxtra_check_user_quota()) {
       _opigno_moxtra_disable_user($entity, FALSE);
@@ @@
     return;
   }

-  /** @var \Drupal\group\Entity\GroupContentInterface $entity */
+  /** @var GroupContentInterface $entity */
   $bundle = $entity->bundle();
   $type = $entity->getEntity()->getEntityTypeId();
   if ($bundle === 'learning_path-group_membership') {
@@ @@
         $moxtra_api = _opigno_moxtra_get_moxtra_api();
         $owner_id = $workspace->getOwnerId();

-        /** @var \Drupal\user\Entity\User $user */
+        /** @var User $user */
         $user = $entity->getEntity();
         $user_id = $user->id();

@@ @@
   }
   elseif ($type === 'opigno_moxtra_meeting') {
     // Updates the related training field in the meeting.
-    /** @var \Drupal\opigno_moxtra\MeetingInterface $meeting */
+    /** @var MeetingInterface $meeting */
     $meeting = $entity->getEntity();
     $training = $entity->getGroup();
     $meeting->setTraining($training);
@@ @@
   }

   // Set meeting reference on the related calendar event.
-  /** @var \Drupal\opigno_moxtra\MeetingInterface $entity */
+  /** @var MeetingInterface $entity */
   $calendar_event = $entity->getCalendarEvent();
   if (isset($calendar_event)) {
     $calendar_event->set('field_meeting', $entity);
@@ @@
  * Creates user in the Moxtra.
  */
 function opigno_moxtra_user_insert(EntityInterface $entity) {
-  /** @var \Drupal\user\Entity\User $entity */
+  /** @var User $entity */
   $user_active = $entity->isActive();
   $connector = \Drupal::service('opigno_moxtra.connector');

@@ @@
  */
 function opigno_moxtra_opigno_moxtra_meeting_update(EntityInterface $entity) {
   // Set meeting reference on the related calendar event.
-  /** @var \Drupal\opigno_moxtra\MeetingInterface $entity */
+  /** @var MeetingInterface $entity */
   $calendar_event = $entity->getCalendarEvent();
   if (isset($calendar_event)) {
     $calendar_event->set('field_meeting', $entity);
@@ @@
  * Updates collaborative workspace info in the Moxtra.
  */
 function opigno_moxtra_opigno_moxtra_workspace_update(EntityInterface $entity) {
-  /** @var \Drupal\opigno_moxtra\WorkspaceInterface $entity */
+  /** @var WorkspaceInterface $entity */
   if ($entity->label() !== $entity->original->label()) {
     $binder_id = $entity->getBinderId();
     if (!empty($binder_id)) {
@@ @@
  * Updates user info in the Moxtra.
  */
 function opigno_moxtra_user_update(EntityInterface $entity) {
-  /** @var \Drupal\user\Entity\User $entity */
+  /** @var User $entity */
   $user_active = $entity->isActive();
   $connector = \Drupal::service('opigno_moxtra.connector');

@@ @@
     return;
   }

-  /** @var \Drupal\group\Entity\GroupContentInterface $entity */
+  /** @var GroupContentInterface $entity */
   $content = $entity->getEntity();
   if (!isset($content)) {
     // If related entity is already deleted.
@@ @@
         $moxtra_api = _opigno_moxtra_get_moxtra_api();
         $owner_id = $workspace->getOwnerId();

-        /** @var \Drupal\user\Entity\User $user */
+        /** @var User $user */
         $user = $content;
         $user_id = $user->id();

@@ @@
   }
   elseif ($type === 'opigno_moxtra_meeting') {
     // Removes the related training field in the meeting.
-    /** @var \Drupal\opigno_moxtra\MeetingInterface $meeting */
+    /** @var MeetingInterface $meeting */
     $meeting = $content;
     $meeting->setTrainingId(NULL);
     $meeting->save();
@@ @@
     return;
   }

-  /** @var \Drupal\opigno_moxtra\MeetingInterface $entity */
+  /** @var MeetingInterface $entity */
   $moxtra_api = _opigno_moxtra_get_moxtra_api();
   $owner_id = $entity->getOwnerId();
   $session_key = $entity->getSessionKey();
@@ @@
     return;
   }

-  /** @var \Drupal\opigno_moxtra\WorkspaceInterface $entity */
+  /** @var WorkspaceInterface $entity */
   $moxtra_api = _opigno_moxtra_get_moxtra_api();
   $owner_id = $entity->getOwnerId();
   $binder_id = $entity->getBinderId();
@@ @@
   $id = $vars['view']->id();
   $field = $vars['field']->field;
   if ($id === 'opigno_calendar' && $field === 'title') {
-    /** @var \Drupal\opigno_calendar_event\CalendarEventInterface $entity */
+    /** @var CalendarEventInterface $entity */
     $entity = $vars['row']->_entity;
     $bundle = $entity->bundle();
     if ($bundle === 'meeting_calendar_event') {
       $title = $vars['field']->getValue($vars['row']);
-      /** @var \Drupal\opigno_moxtra\MeetingInterface $meeting */
+      /** @var MeetingInterface $meeting */
       $meeting = $entity->get('field_meeting')->entity;
       if ($meeting !== NULL) {
         $link = Link::createFromRoute($title, 'opigno_moxtra.meeting', [
@@ @@
     return;
   }

-  /** @var \Drupal\group\Entity\GroupInterface $group */
+  /** @var GroupInterface $group */
   $group = $route->getParameter('group');
   if (!isset($group)) {
     $group_id = OpignoGroupContext::getCurrentGroupId();
@@ @@
   $live_meeting_ids = array_map(function ($step) {
     return $step['id'];
   }, $live_meeting_steps);
-  /** @var \Drupal\opigno_moxtra\MeetingInterface[] $live_meetings */
+  /** @var MeetingInterface[] $live_meetings */
   $live_meetings = Meeting::loadMultiple($live_meeting_ids);
   foreach ($live_meetings as $live_meeting) {
     $owner_id = $live_meeting->getOwnerId();
@@ @@
       $training = $live_meeting->getTraining();
       if (isset($training)) {
         $members_ids = array_map(function ($member) {
-          /** @var \Drupal\group\GroupMembership $member */
+          /** @var GroupMembership $member */
           return $member->getUser()->id();
         }, $training->getMembers());
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


22) modules/contrib/opigno_moxtra/opigno_moxtra.install:22

    ---------- begin diff ----------
@@ @@
     return;
   }

-  $config_path = drupal_get_path('module', 'opigno_moxtra') . '/config/install';
+  $config_path = \Drupal::service('extension.list.module')->getPath('opigno_moxtra') . '/config/install';
   $storage = new FileStorage($config_path);

   $data = $storage->read('field.storage.group.field_workspace');
@@ @@
  * Changed view configs.
  */
 function opigno_moxtra_update_9001() {
-  $config_path = drupal_get_path('module', 'opigno_moxtra') . '/config/install';
+  $config_path = \Drupal::service('extension.list.module')->getPath('opigno_moxtra') . '/config/install';
   $storage = new FileStorage($config_path);

   $config_storage = \Drupal::service('config.storage');
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 22 files have been changed by Rector                                      

