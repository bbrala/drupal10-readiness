modules/contrib/comment_email/comment_email.api.php
modules/contrib/comment_email/comment_email.module
modules/contrib/comment_email/modules/comment_email_user_reference_recipients/comment_email_user_reference_recipients.module
modules/contrib/comment_email/src/CommentEmailHooks.php
modules/contrib/comment_email/tests/src/Functional/AdminPageTest.php

5 files with changes
====================

1) modules/contrib/comment_email/tests/src/Functional/AdminPageTest.php:32

    ---------- begin diff ----------
@@ @@
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);

     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/comment_email/src/CommentEmailHooks.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\comment_email;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\TypedData\Exception\ReadOnlyException;
+use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\comment\CommentInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Mail\MailFormatHelper;
@@ @@
   /**
    * Implements hook_entity_insert().
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
-   * @throws \Drupal\Core\TypedData\Exception\ReadOnlyException
+   * @throws EntityStorageException
+   * @throws ReadOnlyException
    */
   public static function hookEntityInsert(EntityInterface $entity) {
     if ($entity instanceof NodeInterface) {
@@ @@
    *   The token data.
    */
   private static function sendMails($key, array $data) {
-    /** @var \Drupal\Core\Mail\MailManagerInterface $emailPluginManager */
+    /** @var MailManagerInterface $emailPluginManager */
     $emailPluginManager = \Drupal::service('plugin.manager.mail');

     /** @var AccountInterface[] $accounts */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/comment_email/modules/comment_email_user_reference_recipients/comment_email_user_reference_recipients.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\node\NodeInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\field\FieldConfigInterface;

@@ @@
   if (
     isset($data['node'])
     && ($node = $data['node'])
-    && $node instanceof \Drupal\node\NodeInterface
+    && $node instanceof NodeInterface
   ) {
     $accounts = [];
-    /** @var \Drupal\Core\Field\FieldItemListInterface $fieldItemList */
+    /** @var FieldItemListInterface $fieldItemList */
     foreach ($node as $fieldName => $fieldItemList) {
       $fieldDefinition = $fieldItemList->getFieldDefinition();
       // @see \Drupal\field\FieldConfigInterface
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/comment_email/comment_email.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\comment_email\CommentEmailHooks;

 /**
  * Implements hook_entity_insert().
  */
-function comment_email_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
+function comment_email_entity_insert(EntityInterface $entity) {
   CommentEmailHooks::hookEntityInsert($entity);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


5) modules/contrib/comment_email/comment_email.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Session\AccountInterface;
+use Drupal\node\NodeInterface;
+use Drupal\user\Entity\User;
 /**
  * Forum Mails API.
  */
-
 /**
  * Get recipient accounts.
  *
@@ @@
  * @param string $key
  *   The mail key.
  *
- * @return \Drupal\Core\Session\AccountInterface[]
+ * @return AccountInterface[]
  */
 function hook_comment_email_recipient_accounts(array $data, $key) {
   if ($key === 'node_added' && isset($data['node'])
-    && ($node = $data['node']) && $node instanceof \Drupal\node\NodeInterface) {
+    && ($node = $data['node']) && $node instanceof NodeInterface) {
     return [$node->getOwner()];
   }
 }
@@ @@
  * @param string $key
  *   The mail key.
  *
- * @return \Drupal\Core\Session\AccountInterface[]
+ * @return AccountInterface[]
  */
 function hook_comment_email_KEY_recipient_accounts(array $data, $key) {
-  return [\Drupal\user\Entity\User::load(1)];
+  return [User::load(1)];
 }

 /**
  * Alter recipient accounts.
  *
- * @param \Drupal\Core\Session\AccountInterface[] $accounts
+ * @param AccountInterface[] $accounts
  *   The accounts to alter.
  * @param mixed[] $data
  *   An array of data for the mail.
@@ @@
 /**
  * Alter recipient accounts.
  *
- * @param \Drupal\Core\Session\AccountInterface[] $accounts
+ * @param AccountInterface[] $accounts
  *   The accounts to alter.
  * @param mixed[] $data
  *   An array of data for the mail.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

