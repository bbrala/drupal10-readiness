modules/contrib/extra_field_configuration/extra_field_configuration.module
modules/contrib/extra_field_configuration/modules/extra_field_configuration_examples/src/Plugin/ExtraField/Display/ExampleField.php
modules/contrib/extra_field_configuration/modules/extra_field_configuration_examples/src/Plugin/ExtraField/Display/ExampleFormattedField.php
modules/contrib/extra_field_configuration/src/Controller/ExtraFieldConfigurationListBuilder.php
modules/contrib/extra_field_configuration/src/Entity/ExtraFieldConfiguration.php
modules/contrib/extra_field_configuration/src/ExtraFieldConfigurationInterface.php
modules/contrib/extra_field_configuration/src/ExtraFieldConfigurationTrait.php
modules/contrib/extra_field_configuration/src/Form/ExtraFieldConfigurationDeleteForm.php
modules/contrib/extra_field_configuration/src/Form/ExtraFieldConfigurationForm.php
modules/contrib/extra_field_configuration/src/Plugin/Derivative/ExtraFieldConfigurationDeriver.php
modules/contrib/extra_field_configuration/src/Plugin/ExtraFieldConfigurationDisplayManager.php
modules/contrib/extra_field_configuration/tests/extra_field_configuration_test/src/Plugin/ExtraField/Display/TestFieldAll.php
modules/contrib/extra_field_configuration/tests/extra_field_configuration_test/src/Plugin/ExtraField/Display/TestFieldNone.php
modules/contrib/extra_field_configuration/tests/extra_field_configuration_test/src/Plugin/ExtraField/Display/TestFieldOne.php
modules/contrib/extra_field_configuration/tests/extra_field_configuration_test/src/Plugin/ExtraField/Display/TestFormattedFieldAll.php
modules/contrib/extra_field_configuration/tests/extra_field_configuration_test/src/Plugin/ExtraField/Display/TestFormattedFieldNone.php
modules/contrib/extra_field_configuration/tests/extra_field_configuration_test/src/Plugin/ExtraField/Display/TestFormattedFieldOne.php
modules/contrib/extra_field_configuration/tests/src/Functional/ExtraFieldConfigurationBrowserTestBase.php
modules/contrib/extra_field_configuration/tests/src/Functional/ExtraFieldConfigurationDisplayFormTest.php
modules/contrib/extra_field_configuration/tests/src/Functional/ExtraFieldConfigurationFieldTest.php
modules/contrib/extra_field_configuration/tests/src/Kernel/ExtraFieldConfigurationDisplayManagerTest.php

13 files with changes
=====================

1) modules/contrib/extra_field_configuration/tests/src/Kernel/ExtraFieldConfigurationDisplayManagerTest.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin manager under test.
    *
-   * @var \Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager|MockObject
+   * @var ExtraFieldConfigurationDisplayManager|MockObject
    */
   protected $extraFieldConfigurationDisplayManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->extraFieldConfigurationDisplayManager = $this->createPartialMock(
       ExtraFieldConfigurationDisplayManager::class,
@@ @@
    */
   public function testGetBaseDefinitions(array $definitions, array $results) {
     $this->setupParentDefinitions($definitions);
-    $this->assertEqual(
-      count($this->extraFieldConfigurationDisplayManager->getBaseDefinitions()),
-      $results['base']
-    );
+    $this->assertEquals(count($this->extraFieldConfigurationDisplayManager->getBaseDefinitions()), $results['base']);
   }

   /**
@@ @@
    */
   public function testGetDefinitions(array $definitions, array $results) {
     $this->setupParentDefinitions($definitions);
-    $this->assertEqual(
-      count($this->extraFieldConfigurationDisplayManager->getDefinitions()),
-      $results['derived']
-    );
+    $this->assertEquals(count($this->extraFieldConfigurationDisplayManager->getDefinitions()), $results['derived']);
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/extra_field_configuration/tests/src/Functional/ExtraFieldConfigurationFieldTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\extra_field_configuration\Functional;

+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
+use Drupal\Core\Entity\EntityMalformedException;
 /**
  * Test the display of configurable extra fields.
  *
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupNodes();
   }
@@ @@
   /**
    * Test assertions for the first test node.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException;
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws ResponseTextException ;
+   * @throws EntityMalformedException
    */
   public function testNodeOne() {
     $url = $this->testNodes['test_content_type_one']->toUrl();
@@ @@
   /**
    * Test assertions for the second test node.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws ResponseTextException
+   * @throws EntityMalformedException
    */
   public function testNodeTwo() {
     $url = $this->testNodes['test_content_type_two']->toUrl();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/extra_field_configuration/tests/src/Functional/ExtraFieldConfigurationDisplayFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\extra_field_configuration\Functional;

+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;

 /**
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupDisplays();
     $user = $this->createUser(['administer node display']);
@@ @@
   /**
    * Test assertions for the first content type display form.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testNodeOne() {
     $this->drupalGet($this->displayUrl('test_content_type_one'));
@@ @@
   /**
    * Test assertions for the second content type display form.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function testNodeTwo() {
     $this->drupalGet($this->displayUrl('test_content_type_two'));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/extra_field_configuration/tests/src/Functional/ExtraFieldConfigurationBrowserTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\extra_field_configuration\Functional;

+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\extra_field_configuration\ExtraFieldConfigurationInterface;
 use Drupal\extra_field_configuration\Entity\ExtraFieldConfiguration;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * An array of test nodes, keyed by content type.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $testNodes = [];

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setupExtraFields();
     $this->setupContentTypes();
@@ @@
   /**
    * Create extra field configurations for tests.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function setupExtraFields() {
     foreach ($this->extraFieldConfigurationEntities as $field_id => $values) {
-      /** @var \Drupal\extra_field_configuration\ExtraFieldConfigurationInterface $extra_field */
+      /** @var ExtraFieldConfigurationInterface $extra_field */
       $extra_field = ExtraFieldConfiguration::create([
         'id' => $field_id,
         'plugin_id' => $field_id,
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/extra_field_configuration/src/Plugin/ExtraFieldConfigurationDisplayManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\extra_field_configuration\Plugin;

+use Drupal\extra_field\Plugin\ExtraFieldDisplayInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
@@ @@
   /**
    * Gets all base (non-extra field configuration derived) plugin definitions.
    *
-   * @return \Drupal\extra_field\Plugin\ExtraFieldDisplayInterface[]
+   * @return ExtraFieldDisplayInterface[]
    *   An array of plugin definitions (empty array if no definitions were
    *   found). Keys are plugin IDs.
    */
@@ @@
   /**
    * Gets all extra field configuration derived plugin definitions.
    *
-   * @return \Drupal\extra_field\Plugin\ExtraFieldDisplayInterface[]
+   * @return ExtraFieldDisplayInterface[]
    *   An array of plugin definitions (empty array if no definitions were
    *   found). Keys are plugin IDs.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/extra_field_configuration/src/Plugin/Derivative/ExtraFieldConfigurationDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\extra_field_configuration\Plugin\Derivative;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\extra_field_configuration\ExtraFieldConfigurationInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Construct the extra_field_configuration deriver object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
     $plugin_id = $base_plugin_definition['id'];
@@ @@
     // Add the original, non-derived, plugin to the list.
     $this->derivatives[$plugin_id] = $base_plugin_definition;

-    /** @var \Drupal\extra_field_configuration\ExtraFieldConfigurationInterface[] $configuration */
+    /** @var ExtraFieldConfigurationInterface[] $configuration */
     $configuration = $this->entityTypeManager
       ->getStorage('extra_field_configuration')
       ->loadMultiple();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/extra_field_configuration/src/Form/ExtraFieldConfigurationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\extra_field_configuration\Form;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The cache_tags.invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * The entity_type.bundle.info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityBundleManager;

@@ @@
   /**
    * The entity_field.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The plugin.manager.extra_field_display service.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldDisplayManager
+   * @var ExtraFieldDisplayManager
    */
   protected $extraFieldManager;

@@ @@
   /**
    * The plugin.manager.extra_field_configuration_display service.
    *
-   * @var \Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager
+   * @var ExtraFieldConfigurationDisplayManager
    */
   protected $extraFieldConfigurationManager;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Construct the extra_field_configuration edit form object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache_tags.invalidator service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_bundle_manager
+   * @param EntityTypeBundleInfoInterface $entity_bundle_manager
    *   The entity_type.bundle.info service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity_field.manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\extra_field\Plugin\ExtraFieldDisplayManager $extra_field_manager
+   * @param ExtraFieldDisplayManager $extra_field_manager
    *   The plugin.manager.extra_field_display service.
-   * @param \Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager $extra_field_configuration_manager
+   * @param ExtraFieldConfigurationDisplayManager $extra_field_configuration_manager
    *   The plugin.manager.extra_field_configuration_display service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $form_state->cleanValues();
@@ @@
    * @return bool
    *   True if it exists, false if it does not.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exists(string $id) {
     return (bool) $this->entityTypeManager->getStorage('extra_field_configuration')
@@ @@
   /**
    * Get all entity types with user-configurable fields.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   An array of entity objects.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getFieldableEntityTypes() {
     $entity_types = [];
@@ @@
     // Sort alphabetically.
     usort($entity_types, function ($a, $b) {
       /** @var \Drupal\Core\Entity\EntityInterface $a */
-      /** @var \Drupal\Core\Entity\EntityInterface $b */
+      /** @var EntityInterface $b */
       return strcasecmp($a->id(), $b->id());
     });

@@ @@
    *
    * @param array $row
    *   The form row to add checkboxes to.
-   * @param \Drupal\Core\Entity\ContentEntityTypeInterface $entity_type
+   * @param ContentEntityTypeInterface $entity_type
    *   The entity type to add checkboxes for.
    */
   protected function addBundles(array &$row, ContentEntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/extra_field_configuration/src/Form/ExtraFieldConfigurationDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\extra_field_configuration\Form;

+use Drupal\extra_field_configuration\ExtraFieldConfigurationInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Entity\EntityStorageException;
@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\extra_field_configuration\ExtraFieldConfigurationInterface
+   * @var ExtraFieldConfigurationInterface
    */
   protected $entity;

@@ @@
   /**
    * The cache_tags.invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The plugin.manager.extra_field_display service.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldDisplayManager
+   * @var ExtraFieldDisplayManager
    */
   protected $extraFieldManager;

@@ @@
   /**
    * The plugin.manager.extra_field_configuration_display service.
    *
-   * @var \Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager
+   * @var ExtraFieldConfigurationDisplayManager
    */
   protected $extraFieldConfigurationManager;

@@ @@
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Construct the extra_field_configuration edit form object.
    *
-   * @param \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache_tags_invalidator
+   * @param CacheTagsInvalidatorInterface $cache_tags_invalidator
    *   The cache_tags.invalidator service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\extra_field\Plugin\ExtraFieldDisplayManager $extra_field_manager
+   * @param ExtraFieldDisplayManager $extra_field_manager
    *   The plugin.manager.extra_field_display service.
-   * @param \Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager $extra_field_configuration_manager
+   * @param ExtraFieldConfigurationDisplayManager $extra_field_configuration_manager
    *   The plugin.manager.extra_field_configuration_display service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildForm($form, $form_state);
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     try {
@@ @@
    * @return string[]
    *   An array of all view display config strings.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getActiveDisplayNames() {
     return array_keys($this->getFieldActiveDisplays($this->entity));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/extra_field_configuration/src/ExtraFieldConfigurationTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\extra_field_configuration;

+use Drupal\Core\Cache\CacheTagsInvalidatorInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\extra_field\Plugin\ExtraFieldDisplayManager;
+use Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\Display\EntityDisplayInterface;
 /**
  * Trait to provide common methods associated with extra field configuration.
  *
@@ @@
   /**
    * The cache_tags.invalidator service.
    *
-   * @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @var CacheTagsInvalidatorInterface
    */
   protected $cacheTagsInvalidator;

@@ @@
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The plugin.manager.extra_field_display service.
    *
-   * @var \Drupal\extra_field\Plugin\ExtraFieldDisplayManager
+   * @var ExtraFieldDisplayManager
    */
   protected $extraFieldManager;

@@ @@
   /**
    * The plugin.manager.extra_field_configuration_display service.
    *
-   * @var \Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager
+   * @var ExtraFieldConfigurationDisplayManager
    */
   protected $extraFieldConfigurationManager;

@@ @@
   /**
    * Gets the cache_tags.invalidator service.
    *
-   * @return \Drupal\Core\Cache\CacheTagsInvalidatorInterface
+   * @return CacheTagsInvalidatorInterface
    *   The cache_tags.invalidator service.
    */
   protected function getCacheTagsInvalidator() {
@@ @@
   /**
    * Gets the entity_type.manager service.
    *
-   * @return \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @return EntityTypeManagerInterface
    *   The entity_type.manager service.
    */
   protected function getEntityTypeManager() {
@@ @@
   /**
    * Gets the plugin.manager.extra_field_display service.
    *
-   * @return \Drupal\extra_field\Plugin\ExtraFieldDisplayManager
+   * @return ExtraFieldDisplayManager
    *   The plugin.manager.extra_field_display service.
    */
   protected function getExtraFieldManager() {
@@ @@
   /**
    * Gets the plugin.manager.extra_field_configuration_display service.
    *
-   * @return \Drupal\extra_field_configuration\Plugin\ExtraFieldConfigurationDisplayManager
+   * @return ExtraFieldConfigurationDisplayManager
    *   The plugin.manager.extra_field_configuration_display service.
    */
   protected function getExtraFieldConfigurationManager() {
@@ @@
    * configuration. These configuration artifacts can either be ignored or
    * removed manually.
    *
-   * @param \Drupal\extra_field_configuration\ExtraFieldConfigurationInterface $entity
+   * @param ExtraFieldConfigurationInterface $entity
    *   The configuration entity which defines the extra field configuration.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function removeExtraFields(ExtraFieldConfigurationInterface $entity) {
     if (!empty($entity->getBundles())) {
@@ @@
   /**
    * Get the entity view displays where the extra field is configured and shown.
    *
-   * @param \Drupal\extra_field_configuration\ExtraFieldConfigurationInterface $entity
+   * @param ExtraFieldConfigurationInterface $entity
    *   The configuration entity which defines the extra field configuration.
    *
-   * @return array|\Drupal\Core\Entity\Display\EntityDisplayInterface[]
+   * @return array|EntityDisplayInterface[]
    *   The entity view displays where the extra field is active.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getFieldActiveDisplays(ExtraFieldConfigurationInterface $entity) {
     $active_configuration = [];
@@ @@

     foreach ($entity->getBundles() as $entity_id => $bundle_list) {
       foreach ($bundle_list as $bundle) {
-        /** @var \Drupal\Core\Entity\Display\EntityDisplayInterface[] $displays */
+        /** @var EntityDisplayInterface[] $displays */
         $displays = $this->getEntityTypeManager()->getStorage('entity_view_display')
           ->loadByProperties([
             'targetEntityType' => $entity_id,
@@ @@

         // Only return displays with the extra field active.
         $displays = array_filter($displays, function ($display) use ($entity) {
-          /** @var \Drupal\Core\Entity\Display\EntityDisplayInterface $display */
+          /** @var EntityDisplayInterface $display */
           return $display->getComponent($entity->getRealFieldName());
         });
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/extra_field_configuration/src/Controller/ExtraFieldConfigurationListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\extra_field_configuration\Controller;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Constructs a new ExtraFieldConfigurationListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function createInstance(ContainerInterface $container, EntityTypeInterface $entity_type) {
     return new static(
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\extra_field_configuration\ExtraFieldConfigurationInterface $entity */
+    /** @var ExtraFieldConfigurationInterface $entity */
     return [
       'label' => $entity->label(),
       'id' => "extra_field_{$entity->id()}",
@@ @@
   /**
    * Format bundles for the listing table summary.
    *
-   * @param \Drupal\extra_field_configuration\ExtraFieldConfigurationInterface $entity
+   * @param ExtraFieldConfigurationInterface $entity
    *   The extra_field_configuration entity for the row.
    *
    * @return array
    *   A render array of the row content.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function formatBundles(ExtraFieldConfigurationInterface $entity) {
     $bundles = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/extra_field_configuration/modules/extra_field_configuration_examples/src/Plugin/ExtraField/Display/ExampleFormattedField.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The string_translation service.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $stringTranslation;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string_translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/extra_field_configuration/modules/extra_field_configuration_examples/src/Plugin/ExtraField/Display/ExampleField.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The string_translation service.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $stringTranslation;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param TranslationInterface $string_translation
    *   The string_translation service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, TranslationInterface $string_translation) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/extra_field_configuration/extra_field_configuration.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\ContentEntityInterface;
 /**
  * @file
  * Contains core functionality for the extra_field_configuration module.
@@ @@
  * Implements hook_entity_view().
  */
 function extra_field_configuration_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
-  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+  /** @var ContentEntityInterface $entity */
   \Drupal::service('plugin.manager.extra_field_configuration_display')->entityView($build, $entity, $display, $view_mode);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 13 files have been changed by Rector                                      

