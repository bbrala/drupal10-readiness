diff --git a/src/Annotation/EncryptionMethod.php b/src/Annotation/EncryptionMethod.php
index 3f26c42..6e5fb01 100644
--- a/src/Annotation/EncryptionMethod.php
+++ b/src/Annotation/EncryptionMethod.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\encrypt\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -22,7 +23,7 @@ class EncryptionMethod extends Plugin {
   /**
    * The human-readable name of the encryption method.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -31,7 +32,7 @@ class EncryptionMethod extends Plugin {
   /**
    * The description shown to users.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Commands/EncryptCommands.php b/src/Commands/EncryptCommands.php
index c25e419..89a45bf 100644
--- a/src/Commands/EncryptCommands.php
+++ b/src/Commands/EncryptCommands.php
@@ -16,14 +16,14 @@ class EncryptCommands extends DrushCommands {
   /**
    * Encrypt service.
    *
-   * @var \Drupal\encrypt\EncryptService
+   * @var EncryptService
    */
   protected $encrypt;
 
   /**
    * EncryptCommands constructor.
    *
-   * @param \Drupal\encrypt\EncryptService $encrypt
+   * @param EncryptService $encrypt
    *   The encrypt service object.
    */
   public function __construct(EncryptService $encrypt) {
diff --git a/src/Controller/EncryptionProfileListBuilder.php b/src/Controller/EncryptionProfileListBuilder.php
index 7b3dab3..3bd8336 100644
--- a/src/Controller/EncryptionProfileListBuilder.php
+++ b/src/Controller/EncryptionProfileListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\encrypt\Controller;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
@@ -18,18 +19,18 @@ class EncryptionProfileListBuilder extends ConfigEntityListBuilder {
   /**
    * A configuration object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;
 
   /**
    * Constructs a new EncryptionProfileListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, ConfigFactoryInterface $config_factory) {
diff --git a/src/EncryptService.php b/src/EncryptService.php
index 91088bd..0661ccd 100644
--- a/src/EncryptService.php
+++ b/src/EncryptService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\encrypt;
 
+use Drupal\key\KeyRepository;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\encrypt\Exception\EncryptionMethodCanNotDecryptException;
 use Drupal\encrypt\Exception\EncryptException;
@@ -17,32 +18,32 @@ class EncryptService implements EncryptServiceInterface {
   /**
    * The EncryptionMethod plugin manager.
    *
-   * @var \Drupal\encrypt\EncryptionMethodManager
+   * @var EncryptionMethodManager
    */
   protected $encryptManager;
 
   /**
    * The KeyRepository.
    *
-   * @var \Drupal\key\KeyRepository
+   * @var KeyRepository
    */
   protected $keyRepository;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * {@inheritdoc}
    *
-   * @param \Drupal\encrypt\EncryptionMethodManager $encrypt_manager
+   * @param EncryptionMethodManager $encrypt_manager
    *   The EncryptionMethod plugin manager.
-   * @param \Drupal\key\KeyRepositoryInterface $key_repository
+   * @param KeyRepositoryInterface $key_repository
    *   The KeyRepository.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory.
    */
   public function __construct(EncryptionMethodManager $encrypt_manager, KeyRepositoryInterface $key_repository, ConfigFactoryInterface $config_factory = NULL) {
@@ -99,13 +100,13 @@ class EncryptService implements EncryptServiceInterface {
    *
    * @param string $text
    *   The text to encrypt / decrypt.
-   * @param \Drupal\encrypt\EncryptionProfileInterface $encryption_profile
+   * @param EncryptionProfileInterface $encryption_profile
    *   The encryption profile to validate.
    *
    * @return bool
    *   Whether the encryption profile validated correctly.
    *
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptException
    *   Error with validation failures.
    */
   protected function validate($text, EncryptionProfileInterface $encryption_profile) {
diff --git a/src/EncryptServiceInterface.php b/src/EncryptServiceInterface.php
index 128dc08..1dc311d 100644
--- a/src/EncryptServiceInterface.php
+++ b/src/EncryptServiceInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\encrypt;
 
+use Drupal\encrypt\Exception\EncryptException;
+use Drupal\encrypt\Exception\EncryptionMethodCanNotDecryptException;
 /**
  * Class EncryptService.
  *
@@ -25,13 +27,13 @@ interface EncryptServiceInterface {
    *
    * @param string $text
    *   The plain text to encrypt.
-   * @param \Drupal\encrypt\EncryptionProfileInterface $encryption_profile
+   * @param EncryptionProfileInterface $encryption_profile
    *   The encryption profile entity.
    *
    * @return string
    *   The encrypted string.
    *
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptException
    *   Can throw an EncryptException.
    */
   public function encrypt($text, EncryptionProfileInterface $encryption_profile);
@@ -41,15 +43,15 @@ interface EncryptServiceInterface {
    *
    * @param string $text
    *   The encrypted text to decrypt.
-   * @param \Drupal\encrypt\EncryptionProfileInterface $encryption_profile
+   * @param EncryptionProfileInterface $encryption_profile
    *   The encryption profile entity.
    *
    * @return string
    *   The decrypted plain string.
    *
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptException
    *   Can throw an EncryptException.
-   * @throws \Drupal\encrypt\Exception\EncryptionMethodCanNotDecryptException
+   * @throws EncryptionMethodCanNotDecryptException
    *   Thrown when method can not decrypt (i.e. use a public key).
    */
   public function decrypt($text, EncryptionProfileInterface $encryption_profile);
diff --git a/src/EncryptionMethodInterface.php b/src/EncryptionMethodInterface.php
index decb43c..567861d 100644
--- a/src/EncryptionMethodInterface.php
+++ b/src/EncryptionMethodInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\encrypt;
 
+use Drupal\encrypt\Exception\EncryptException;
+use Drupal\encrypt\Exception\EncryptionMethodCanNotDecryptException;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 
 /**
@@ -22,7 +24,7 @@ interface EncryptionMethodInterface extends PluginInspectionInterface {
    * @return string
    *   The encrypted text
    *
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptException
    *   Thrown when encryption fails.
    */
   public function encrypt($text, $key);
@@ -38,9 +40,9 @@ interface EncryptionMethodInterface extends PluginInspectionInterface {
    * @return string
    *   The decrypted text
    *
-   * @throws \Drupal\encrypt\Exception\EncryptException
+   * @throws EncryptException
    *   Thrown when decryption fails.
-   * @throws \Drupal\encrypt\Exception\EncryptionMethodCanNotDecryptException
+   * @throws EncryptionMethodCanNotDecryptException
    *   The method should throw this exception when the plugin can not decrypt
    *   (i.e. use a public key).
    */
diff --git a/src/EncryptionMethodManager.php b/src/EncryptionMethodManager.php
index 14b15fc..8307aec 100644
--- a/src/EncryptionMethodManager.php
+++ b/src/EncryptionMethodManager.php
@@ -17,9 +17,9 @@ class EncryptionMethodManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/EncryptionProfileInterface.php b/src/EncryptionProfileInterface.php
index 4acc152..5168b06 100644
--- a/src/EncryptionProfileInterface.php
+++ b/src/EncryptionProfileInterface.php
@@ -13,7 +13,7 @@ interface EncryptionProfileInterface extends ConfigEntityInterface {
   /**
    * Gets the encryption method configuration plugin.
    *
-   * @return \Drupal\encrypt\EncryptionMethodInterface
+   * @return EncryptionMethodInterface
    *   The used EncryptionMethod plugin.
    */
   public function getEncryptionMethod();
@@ -29,7 +29,7 @@ interface EncryptionProfileInterface extends ConfigEntityInterface {
   /**
    * Sets the encryption method to use.
    *
-   * @param \Drupal\encrypt\EncryptionMethodInterface $encryption_method
+   * @param EncryptionMethodInterface $encryption_method
    *   The encryption method to use on this encryption profile.
    */
   public function setEncryptionMethod(EncryptionMethodInterface $encryption_method);
@@ -37,7 +37,7 @@ interface EncryptionProfileInterface extends ConfigEntityInterface {
   /**
    * Gets the Key entity used in the encryption profile.
    *
-   * @return \Drupal\key\Entity\Key
+   * @return Key
    *   The used Key entity.
    */
   public function getEncryptionKey();
@@ -53,7 +53,7 @@ interface EncryptionProfileInterface extends ConfigEntityInterface {
   /**
    * Sets the encryption key to use.
    *
-   * @param \Drupal\key\Entity\Key $key
+   * @param Key $key
    *   The encryption key to use on this encryption profile.
    */
   public function setEncryptionKey(Key $key);
diff --git a/src/EncryptionProfileManager.php b/src/EncryptionProfileManager.php
index 49b925c..f013abe 100644
--- a/src/EncryptionProfileManager.php
+++ b/src/EncryptionProfileManager.php
@@ -12,14 +12,14 @@ class EncryptionProfileManager implements EncryptionProfileManagerInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityManager;
 
   /**
    * Construct the EncryptionProfileManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager) {
diff --git a/src/EncryptionProfileManagerInterface.php b/src/EncryptionProfileManagerInterface.php
index db2ff3b..f363c7e 100644
--- a/src/EncryptionProfileManagerInterface.php
+++ b/src/EncryptionProfileManagerInterface.php
@@ -13,7 +13,7 @@ interface EncryptionProfileManagerInterface {
    * @param string $encryption_profile_id
    *   ID of EncryptionProfile entity.
    *
-   * @return \Drupal\encrypt\EncryptionProfileInterface
+   * @return EncryptionProfileInterface
    *   The EncryptionProfile entity.
    */
   public function getEncryptionProfile($encryption_profile_id);
@@ -21,7 +21,7 @@ interface EncryptionProfileManagerInterface {
   /**
    * Get all EncryptionProfile entities.
    *
-   * @return \Drupal\encrypt\EncryptionProfileInterface[]
+   * @return EncryptionProfileInterface[]
    *   An array of all EncryptionProfile entities.
    */
   public function getAllEncryptionProfiles();
@@ -32,7 +32,7 @@ interface EncryptionProfileManagerInterface {
    * @param string $encryption_method_id
    *   The plugin ID of the EncryptionMethod.
    *
-   * @return \Drupal\encrypt\EncryptionProfileInterface[]
+   * @return EncryptionProfileInterface[]
    *   An array of EncryptionProfile entities.
    */
   public function getEncryptionProfilesByEncryptionMethod($encryption_method_id);
@@ -43,7 +43,7 @@ interface EncryptionProfileManagerInterface {
    * @param string $key_id
    *   The plugin ID of the EncryptionMethod.
    *
-   * @return \Drupal\encrypt\EncryptionProfileInterface[]
+   * @return EncryptionProfileInterface[]
    *   An array of EncryptionProfile entities.
    */
   public function getEncryptionProfilesByEncryptionKey($key_id);
diff --git a/src/Entity/EncryptionProfile.php b/src/Entity/EncryptionProfile.php
index 1166ad5..2be24f0 100644
--- a/src/Entity/EncryptionProfile.php
+++ b/src/Entity/EncryptionProfile.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\encrypt\Entity;
 
+use Drupal\Component\Plugin\LazyPluginCollection;
+use Drupal\Key\KeyRepository;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityWithPluginCollectionInterface;
@@ -80,7 +82,7 @@ class EncryptionProfile extends ConfigEntityBase implements EncryptionProfileInt
   /**
    * The plugin collection that holds the EncryptionMethod plugin.
    *
-   * @var \Drupal\encrypt\EncryptionMethodPluginCollection
+   * @var EncryptionMethodPluginCollection
    */
   protected $pluginCollection;
 
@@ -101,7 +103,7 @@ class EncryptionProfile extends ConfigEntityBase implements EncryptionProfileInt
   /**
    * Stores a reference to the Key entity for this profile.
    *
-   * @var \Drupal\key\Entity\Key
+   * @var Key
    */
   protected $encryption_key_entity;
 
@@ -117,7 +119,7 @@ class EncryptionProfile extends ConfigEntityBase implements EncryptionProfileInt
   /**
    * Encapsulates the creation of the EncryptionMethod's LazyPluginCollection.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    *   The EncryptionMethod's plugin collection.
    */
   protected function getPluginCollection() {
@@ -251,7 +253,7 @@ class EncryptionProfile extends ConfigEntityBase implements EncryptionProfileInt
   /**
    * Gets the key repository service.
    *
-   * @return \Drupal\Key\KeyRepository
+   * @return KeyRepository
    *   The Key repository service.
    */
   protected function getKeyRepository() {
diff --git a/src/Form/EncryptionProfileForm.php b/src/Form/EncryptionProfileForm.php
index 282f74d..4b12601 100644
--- a/src/Form/EncryptionProfileForm.php
+++ b/src/Form/EncryptionProfileForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\encrypt\Form;
 
+use Drupal\Core\Config\ConfigFactory;
+use Drupal\encrypt\Entity\EncryptionProfile;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -20,14 +22,14 @@ class EncryptionProfileForm extends EntityForm {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * The EncryptService definition.
    *
-   * @var \Drupal\encrypt\EncryptService
+   * @var EncryptService
    */
   protected $encryptService;
 
@@ -41,7 +43,7 @@ class EncryptionProfileForm extends EntityForm {
   /**
    * The original encryption profile.
    *
-   * @var \Drupal\encrypt\Entity\EncryptionProfile|null
+   * @var EncryptionProfile|null
    *   The original EncryptionProfile entity or NULL if this is a new one.
    */
   protected $originalProfile = NULL;
@@ -49,7 +51,7 @@ class EncryptionProfileForm extends EntityForm {
   /**
    * Constructs a EncryptionProfileForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    * @param \Drupal\Encrypt\EncryptService $encrypt_service
    *   The lazy context repository service.
@@ -227,10 +229,10 @@ class EncryptionProfileForm extends EntityForm {
   /**
    * Creates a FormStateInterface object for a plugin.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state to copy values from.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *   A clone of the form state object with values from the plugin.
    */
   protected function createPluginFormState(FormStateInterface $form_state) {
@@ -248,7 +250,7 @@ class EncryptionProfileForm extends EntityForm {
    *
    * @param array $form
    *   The form definition array for the encryption profile form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -261,7 +263,7 @@ class EncryptionProfileForm extends EntityForm {
   /**
    * Update the EncryptionMethod plugin.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function updateEncryptionMethod(FormStateInterface $form_state) {
@@ -347,7 +349,7 @@ class EncryptionProfileForm extends EntityForm {
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function confirmEdit(array &$form, FormStateInterface $form_state) {
@@ -378,9 +380,9 @@ class EncryptionProfileForm extends EntityForm {
   /**
    * Moves form errors from one form state to another.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $from
+   * @param FormStateInterface $from
    *   The form state object to move from.
-   * @param \Drupal\Core\Form\FormStateInterface $to
+   * @param FormStateInterface $to
    *   The form state object to move to.
    */
   protected function moveFormStateErrors(FormStateInterface $from, FormStateInterface $to) {
@@ -392,9 +394,9 @@ class EncryptionProfileForm extends EntityForm {
   /**
    * Moves storage variables from one form state to another.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $from
+   * @param FormStateInterface $from
    *   The form state object to move from.
-   * @param \Drupal\Core\Form\FormStateInterface $to
+   * @param FormStateInterface $to
    *   The form state object to move to.
    */
   protected function moveFormStateStorage(FormStateInterface $from, FormStateInterface $to) {
diff --git a/src/Form/EncryptionProfileTestForm.php b/src/Form/EncryptionProfileTestForm.php
index 1253580..830eede 100644
--- a/src/Form/EncryptionProfileTestForm.php
+++ b/src/Form/EncryptionProfileTestForm.php
@@ -15,14 +15,14 @@ class EncryptionProfileTestForm extends EntityForm {
   /**
    * The encrypt service.
    *
-   * @var \Drupal\encrypt\EncryptService
+   * @var EncryptService
    */
   protected $encryptService;
 
   /**
    * Constructs the test form.
    *
-   * @param \Drupal\encrypt\EncryptService $encrypt_service
+   * @param EncryptService $encrypt_service
    *   The encryption service.
    */
   public function __construct(EncryptService $encrypt_service) {
diff --git a/tests/src/Functional/EncryptTest.php b/tests/src/Functional/EncryptTest.php
index 7aeaa20..39b3f9f 100644
--- a/tests/src/Functional/EncryptTest.php
+++ b/tests/src/Functional/EncryptTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\encrypt\Functional;
 
+use Drupal\encrypt\EncryptionProfileInterface;
 /**
  * Tests the encrypt admin UI and encryption / decryption service.
  *
@@ -18,14 +19,17 @@ class EncryptTest extends EncryptTestBase {
 
     // Check if the plugin exists.
     // Encryption method option is present.
-    $this->assertOption('edit-encryption-method', 'test_encryption_method');
+    $this->assertSession()->optionExists('edit-encryption-method', 'test_encryption_method');
     // Encryption method text is present.
-    $this->assertText('Test Encryption method');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Test Encryption method');
 
     $edit = [
       'encryption_method' => 'test_encryption_method',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
 
     $edit = [
       'id' => 'test_encryption_profile',
@@ -33,7 +37,7 @@ class EncryptTest extends EncryptTestBase {
       'encryption_method' => 'test_encryption_method',
       'encryption_key' => $this->testKeys['testing_key_128']->id(),
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
 
     $encryption_profile = \Drupal::service('entity_type.manager')->getStorage('encryption_profile')->load('test_encryption_profile');
     $this->assertNotEmpty($encryption_profile, 'Encryption profile was successfully saved.');
@@ -57,14 +61,17 @@ class EncryptTest extends EncryptTestBase {
 
     // Check if the plugin exists.
     // Encryption method option is present.
-    $this->assertOption('edit-encryption-method', 'test_encryption_method');
+    $this->assertSession()->optionExists('edit-encryption-method', 'test_encryption_method');
     // Encryption method text is present.
-    $this->assertText('Test Encryption method');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Test Encryption method');
 
     $edit = [
       'encryption_method' => 'test_encryption_method',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
 
     // Create an encryption profile.
     $edit = [
@@ -73,52 +80,77 @@ class EncryptTest extends EncryptTestBase {
       'encryption_method' => 'test_encryption_method',
       'encryption_key' => $this->testKeys['testing_key_128']->id(),
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
 
     // Test the encryption profile edit form.
     $this->drupalGet('admin/config/system/encryption/profiles/manage/test_encryption_profile');
     // The warning about editing an encryption profile is visible.
-    $this->assertText('Be extremely careful when editing an encryption profile! It may result in making data encrypted with this profile unreadable. Are you sure you want to edit this profile?');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Be extremely careful when editing an encryption profile! It may result in making data encrypted with this profile unreadable. Are you sure you want to edit this profile?');
     // The encryption method field is not visible.
-    $this->assertNoFieldByName('encryption_method', NULL);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: buttonNotExists() if this is for a button.
+    $this->assertSession()->fieldNotExists('encryption_method');
     // The encryption key field is not visible.
-    $this->assertNoFieldByName('encryption_key', NULL);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: buttonNotExists() if this is for a button.
+    $this->assertSession()->fieldNotExists('encryption_key');
 
-    $this->drupalPostForm(NULL, [], 'Edit');
+    $this->submitForm([], 'Edit');
 
     // The warning about editing an encryption profile is no longer visible.
-    $this->assertNoText('Be extremely careful when editing an encryption profile! It may result in making data encrypted with this profile unreadable. Are you sure you want to edit this profile?');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Be extremely careful when editing an encryption profile! It may result in making data encrypted with this profile unreadable. Are you sure you want to edit this profile?');
     // The encryption method field is now visible.
-    $this->assertFieldByName('encryption_method', NULL);
+    $this->assertSession()->fieldExists('encryption_method');
     // The encryption key field is now visible.
-    $this->assertFieldByName('encryption_key', NULL);
+    $this->assertSession()->fieldExists('encryption_key');
 
     // Check that the 128 bit key exists so display changes don't give false
     // positives on the key deletion assertions below.
     $this->drupalGet('admin/config/system/encryption/profiles');
-    $this->assertText('Key 128 bit');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Key 128 bit');
 
     // Now delete the testkey.
     $this->drupalGet('admin/config/system/keys');
     $this->clickLink('Delete');
     // Warning is shown that linked dependency will also be deleted when
     // deleting the key.
-    $this->assertText('Encryption Profile');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Encryption Profile');
     // The encryption profile linked dependency is listed as the linked
     // dependency.
-    $this->assertText('Test encryption profile');
-    $this->drupalPostForm(NULL, [], 'Delete');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Test encryption profile');
+    $this->submitForm([], 'Delete');
 
     // Check that the 128 bit key no longer exists.
     $this->drupalGet('admin/config/system/encryption/profiles');
-    $this->assertNoText('Key 128 bit');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('Key 128 bit');
 
     // Test "check_profile_status" setting.
     $this->config('encrypt.settings')
       ->set('check_profile_status', FALSE)
       ->save();
     $this->drupalGet('admin/config/system/encryption/profiles');
-    $this->assertNoText('The key linked to this encryption profile does not exist.');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextNotContains() for HTML responses, responseNotContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextNotContains('The key linked to this encryption profile does not exist.');
   }
 
   /**
@@ -130,9 +162,12 @@ class EncryptTest extends EncryptTestBase {
 
     // Check if the plugin exists.
     // Config encryption method option is present.
-    $this->assertOption('edit-encryption-method', 'config_test_encryption_method');
+    $this->assertSession()->optionExists('edit-encryption-method', 'config_test_encryption_method');
     // Config encryption method text is present.
-    $this->assertText('Config Test Encryption method');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Config Test Encryption method');
 
     // Check encryption method without config.
     $edit = [
@@ -141,13 +176,18 @@ class EncryptTest extends EncryptTestBase {
       'encryption_key' => $this->testKeys['testing_key_128']->id(),
       'encryption_method' => 'test_encryption_method',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('Saved the Test encryption profile.');
+    $this->submitForm($edit, 'Save');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Saved the Test encryption profile.');
     $this->drupalGet('admin/config/system/encryption/profiles/manage/test_encryption_profile');
     // First, confirm we want to edit the encryption profile.
-    $this->drupalPostForm(NULL, [], 'Edit');
+    $this->submitForm([], 'Edit');
     // Test encryption method has no config form.
-    $this->assertNoFieldByName('encryption_method_configuration[mode]', NULL);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: buttonNotExists() if this is for a button.
+    $this->assertSession()->fieldNotExists('encryption_method_configuration[mode]');
 
     // Check encryption method with config.
     $this->drupalGet('admin/config/system/encryption/profiles/add');
@@ -157,15 +197,18 @@ class EncryptTest extends EncryptTestBase {
       'encryption_key' => $this->testKeys['testing_key_128']->id(),
       'encryption_method' => 'config_test_encryption_method',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertText('Saved the Test 2 encryption profile.');
+    $this->submitForm($edit, 'Save');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Saved the Test 2 encryption profile.');
     $this->drupalGet('admin/config/system/encryption/profiles/manage/test_encryption_profile_2');
     // First, confirm we want to edit the encryption profile.
-    $this->drupalPostForm(NULL, [], 'Edit');
+    $this->submitForm([], 'Edit');
     // Config test encryption method has config form.
-    $this->assertFieldByName('encryption_method_configuration[mode]', NULL);
+    $this->assertSession()->fieldExists('encryption_method_configuration[mode]');
     // Config form shows element.
-    $this->assertOptionByText('encryption_method_configuration[mode]', 'CBC');
+    $this->assertSession()->optionExists('encryption_method_configuration[mode]', 'CBC');
 
     // Save encryption profile with configured encryption method.
     $this->drupalGet('admin/config/system/encryption/profiles/add');
@@ -175,17 +218,17 @@ class EncryptTest extends EncryptTestBase {
       'encryption_method' => 'config_test_encryption_method',
       'encryption_key' => $this->testKeys['testing_key_128']->id(),
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
 
     // Check if encryption method configuration was succesfully saved.
     $this->drupalGet('admin/config/system/encryption/profiles/manage/test_config_encryption_profile');
     // First, confirm we want to edit the encryption profile.
-    $this->drupalPostForm(NULL, [], 'Edit');
+    $this->submitForm([], 'Edit');
     $edit = [
       'encryption_method_configuration[mode]' => 'CBC',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
-    /** @var \Drupal\encrypt\EncryptionProfileInterface $encryption_profile */
+    $this->submitForm($edit, 'Save');
+    /** @var EncryptionProfileInterface $encryption_profile */
     $encryption_profile = \Drupal::service('entity_type.manager')->getStorage('encryption_profile')->load('test_config_encryption_profile');
     $this->assertNotEmpty($encryption_profile, 'Encryption profile was successfully saved');
     $encryption_method = $encryption_profile->getEncryptionMethod();
@@ -196,19 +239,21 @@ class EncryptTest extends EncryptTestBase {
     $this->drupalGet('admin/config/system/encryption/profiles/manage/test_config_encryption_profile');
 
     // First, confirm we want to edit the encryption profile.
-    $this->drupalPostForm(NULL, [], 'Edit');
+    $this->submitForm([], 'Edit');
 
     // Select encryption method without config.
     $edit = [
       'encryption_method' => 'test_encryption_method',
       'encryption_key' => $this->testKeys['testing_key_128']->id(),
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->drupalGet('admin/config/system/encryption/profiles/manage/test_config_encryption_profile');
     // First, confirm we want to edit the encryption profile.
-    $this->drupalPostForm(NULL, [], 'Edit');
+    $this->submitForm([], 'Edit');
     // Test encryption method has no config form.
-    $this->assertNoFieldByName('encryption_method_configuration[mode]', NULL);
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: buttonNotExists() if this is for a button.
+    $this->assertSession()->fieldNotExists('encryption_method_configuration[mode]');
   }
 
 }
diff --git a/tests/src/Functional/EncryptTestBase.php b/tests/src/Functional/EncryptTestBase.php
index eb13305..80b7ea6 100644
--- a/tests/src/Functional/EncryptTestBase.php
+++ b/tests/src/Functional/EncryptTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\encrypt\Functional;
 
+use Drupal\user\Entity\User;
 use Drupal\encrypt\Entity\EncryptionProfile;
 use Drupal\key\Entity\Key;
 use Drupal\Tests\BrowserTestBase;
@@ -21,21 +22,21 @@ abstract class EncryptTestBase extends BrowserTestBase {
   /**
    * An administrator user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
 
   /**
    * A list of testkeys.
    *
-   * @var \Drupal\key\Entity\Key[]
+   * @var Key[]
    */
   protected $testKeys;
 
   /**
    * A list of test encryption profiles.
    *
-   * @var \Drupal\encrypt\Entity\EncryptionProfile[]
+   * @var EncryptionProfile[]
    */
   protected $encryptionProfiles;
 
@@ -47,7 +48,7 @@ abstract class EncryptTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser([
diff --git a/tests/src/Kernel/AsymmetricalEncryptionMethod.php b/tests/src/Kernel/AsymmetricalEncryptionMethod.php
index afe6d7e..03c0444 100644
--- a/tests/src/Kernel/AsymmetricalEncryptionMethod.php
+++ b/tests/src/Kernel/AsymmetricalEncryptionMethod.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\encrypt\Kernel;
 
+use Drupal\encrypt\EncryptServiceInterface;
 use Drupal\encrypt\Entity\EncryptionProfile;
 use Drupal\encrypt\Exception\EncryptionMethodCanNotDecryptException;
 use Drupal\KernelTests\KernelTestBase;
@@ -26,14 +27,14 @@ class AsymmetricalEncryptionMethod extends KernelTestBase {
   /**
    * Test encryption profile.
    *
-   * @var \Drupal\encrypt\Entity\EncryptionProfile
+   * @var EncryptionProfile
    */
   protected $encryptionProfile;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create a 128bit testkey.
@@ -62,7 +63,7 @@ class AsymmetricalEncryptionMethod extends KernelTestBase {
    */
   public function testEncryptDecrypt() {
 
-    /** @var \Drupal\encrypt\EncryptServiceInterface $profile */
+    /** @var EncryptServiceInterface $profile */
     $service = $this->container->get('encryption');
 
     $text_encrypted = $service->encrypt('Test to encrypt', $this->encryptionProfile);
diff --git a/tests/src/Unit/EncryptServiceTest.php b/tests/src/Unit/EncryptServiceTest.php
index 04082e9..20b4957 100644
--- a/tests/src/Unit/EncryptServiceTest.php
+++ b/tests/src/Unit/EncryptServiceTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\encrypt\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\encrypt\EncryptionMethodInterface;
 use Drupal\encrypt\EncryptionMethodManager;
 use Drupal\encrypt\EncryptionProfileInterface;
@@ -22,6 +24,7 @@ use Drupal\encrypt\EncryptService;
  */
 class EncryptServiceTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Default configuration.
    *
@@ -37,42 +40,42 @@ class EncryptServiceTest extends UnitTestCase {
   /**
    * A mocked EncryptionProfile entity.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $encryptionProfile;
 
   /**
    * A mocked EncryptionMethodManager.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $encryptManager;
 
   /**
    * A mocked KeyRepository.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $keyRepository;
 
   /**
    * A mocked EncryptionMethod plugin.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $encryptionMethod;
 
   /**
    * A mocked Key entity.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $key;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Set up a mock EncryptionProfile entity.
diff --git a/tests/src/Unit/Entity/EncryptionProfileTest.php b/tests/src/Unit/Entity/EncryptionProfileTest.php
index bfcc40b..3a8742b 100644
--- a/tests/src/Unit/Entity/EncryptionProfileTest.php
+++ b/tests/src/Unit/Entity/EncryptionProfileTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\encrypt\Unit\Entity;
 
+use Drupal\key\Entity\Key;
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\key\KeyRepository;
+use Drupal\Core\Plugin\DefaultLazyPluginCollection;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\key\KeyInterface;
 use Drupal\Tests\UnitTestCase;
@@ -22,35 +26,35 @@ class EncryptionProfileTest extends UnitTestCase {
   /**
    * A mocked Key entity.
    *
-   * @var \Drupal\key\Entity\Key|\PHPUnit_Framework_MockObject_MockObject
+   * @var Key|MockObject
    */
   protected $key;
 
   /**
    * A mocked EncryptionMethod.
    *
-   * @var \Drupal\encrypt\EncryptionMethodInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var EncryptionMethodInterface|MockObject
    */
   protected $encryptionMethod;
 
   /**
    * A mocked KeyRepository.
    *
-   * @var \Drupal\key\KeyRepository|\PHPUnit_Framework_MockObject_MockObject
+   * @var KeyRepository|MockObject
    */
   protected $keyRepository;
 
   /**
    * A mocked plugin collection.
    *
-   * @var \Drupal\Core\Plugin\DefaultLazyPluginCollection|\PHPUnit_Framework_MockObject_MockObject
+   * @var DefaultLazyPluginCollection|MockObject
    */
   protected $pluginCollection;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $container = new ContainerBuilder();
@@ -58,14 +62,10 @@ class EncryptionProfileTest extends UnitTestCase {
     \Drupal::setContainer($container);
 
     // Mock a Key entity.
-    $this->key = $this->getMockBuilder('\Drupal\key\Entity\Key')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->key = $this->createMock('\Drupal\key\Entity\Key');
 
     // Set up expectations for key.
-    $key_type = $this->getMockBuilder('\Drupal\key\Plugin\KeyType\EncryptionKeyType')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $key_type = $this->createMock('\Drupal\key\Plugin\KeyType\EncryptionKeyType');
     $key_type->expects($this->any())
       ->method('getPluginId')
       ->will($this->returnValue('encryption'));
@@ -77,9 +77,7 @@ class EncryptionProfileTest extends UnitTestCase {
       ->will($this->returnValue("key_value"));
 
     // Mock an EncryptionMethod.
-    $this->encryptionMethod = $this->getMockBuilder('\Drupal\encrypt\EncryptionMethodInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->encryptionMethod = $this->createMock('\Drupal\encrypt\EncryptionMethodInterface');
 
     // Set up expectations for encryption method.
     $this->encryptionMethod->expects($this->any())
@@ -87,9 +85,7 @@ class EncryptionProfileTest extends UnitTestCase {
       ->will($this->returnValue([]));
 
     // Mock a KeyRepository.
-    $this->keyRepository = $this->getMockBuilder('\Drupal\key\KeyRepository')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->keyRepository = $this->createMock('\Drupal\key\KeyRepository');
 
     // Mock a plugin collection.
     $this->pluginCollection = $this->getMockBuilder('\Drupal\Core\Plugin\DefaultLazyPluginCollection')
