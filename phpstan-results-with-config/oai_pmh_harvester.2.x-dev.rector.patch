diff --git a/oai_pmh_harvester.info.yml b/oai_pmh_harvester.info.yml
index 2f9dc0a..99391f1 100644
--- a/oai_pmh_harvester.info.yml
+++ b/oai_pmh_harvester.info.yml
@@ -1,8 +1,7 @@
 name: 'OAI-PMH Harvester'
 type: module
 description: 'Harvest bibliographic records from an OAI-PMH source, like Koha, and caches them in a table so we can refer to them from fields.'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'OAI-PMH Harvester'
 dependencies:
   - auto_config_form
diff --git a/oai_pmh_harvester.module b/oai_pmh_harvester.module
index bc35ffa..0ceae2c 100644
--- a/oai_pmh_harvester.module
+++ b/oai_pmh_harvester.module
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\oai_pmh_harvester\Exceptions\ConfigException;
+use Drupal\oai_pmh_harvester\Exceptions\DatabaseException;
+use Drupal\oai_pmh_harvester\Exceptions\EndpointException;
+use Phpoaipmh\Exception\OaipmhException;
+use Scriptotek\Marc\Exceptions\RecordNotFound;
 /**
  * @file
  * Contains oai_pmh_harvester.module.
@@ -27,11 +32,11 @@ function oai_pmh_harvester_help($route_name, RouteMatchInterface $route_match) {
 /**
  * Implements hook_cron().
  *
- * @throws \Drupal\oai_pmh_harvester\Exceptions\ConfigException
- * @throws \Drupal\oai_pmh_harvester\Exceptions\DatabaseException
- * @throws \Drupal\oai_pmh_harvester\Exceptions\EndpointException
- * @throws \Phpoaipmh\Exception\OaipmhException
- * @throws \Scriptotek\Marc\Exceptions\RecordNotFound
+ * @throws ConfigException
+ * @throws DatabaseException
+ * @throws EndpointException
+ * @throws OaipmhException
+ * @throws RecordNotFound
  */
 function oai_pmh_harvester_cron(): void {
   $config = Drupal::config('oai_pmh_harvester.settings');
diff --git a/src/Batch/DecodeBatch.php b/src/Batch/DecodeBatch.php
index b243962..93354e5 100644
--- a/src/Batch/DecodeBatch.php
+++ b/src/Batch/DecodeBatch.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\oai_pmh_harvester\Batch;
 
+use Scriptotek\Marc\Exceptions\RecordNotFound;
+use Drupal\oai_pmh_harvester\Service\DecoderService;
 use Drupal\Core\Database\Database;
 use Drupal\oai_pmh_harvester\Util;
 
@@ -115,13 +117,13 @@ class DecodeBatch {
    * @param object $record
    *   The record to re-decode.
    *
-   * @throws \Scriptotek\Marc\Exceptions\RecordNotFound
+   * @throws RecordNotFound
    * @throws \Exception
    */
   private static function processOne(object $record): void {
     // Decode the data and extract the authors and titles.
     $xml = new \SimpleXMLElement($record->harvested_data);
-    /** @var \Drupal\oai_pmh_harvester\Service\DecoderService $decoder */
+    /** @var DecoderService $decoder */
     $decoder = \Drupal::service('oai_pmh_harvester.decoder');
     $csl = $decoder->decodeOne($xml->metadata->record);
 
diff --git a/src/Batch/HarvestRecordsInDateRangeBatch.php b/src/Batch/HarvestRecordsInDateRangeBatch.php
index 31f781e..d589769 100644
--- a/src/Batch/HarvestRecordsInDateRangeBatch.php
+++ b/src/Batch/HarvestRecordsInDateRangeBatch.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\oai_pmh_harvester\Batch;
 
+use Drupal\oai_pmh_harvester\Service\HarvesterService;
 use Drupal\oai_pmh_harvester\Util;
 use Phpoaipmh\Endpoint;
 
@@ -94,7 +95,7 @@ class HarvestRecordsInDateRangeBatch {
       $context['results']['ids']['deleted'] = [];
     }
 
-    /** @var \Drupal\oai_pmh_harvester\Service\HarvesterService $record_processor */
+    /** @var HarvesterService $record_processor */
     $record_processor = \Drupal::service('oai_pmh_harvester.harvester');
     $format = 'marcxml';
 
diff --git a/src/Controller/StatusPageController.php b/src/Controller/StatusPageController.php
index f684e77..424ddda 100644
--- a/src/Controller/StatusPageController.php
+++ b/src/Controller/StatusPageController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\oai_pmh_harvester\Controller;
 
+use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\State\State;
@@ -16,21 +17,21 @@ class StatusPageController extends ControllerBase {
   /**
    * The state.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected State $state;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected Connection $db;
 
   /**
    * {@inheritdoc}
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException
+   * @throws ServiceCircularReferenceException
    */
   public static function create(ContainerInterface $container): StatusPageController {
     $instance = new static();
diff --git a/src/Event/HarvestPreMergeEvent.php b/src/Event/HarvestPreMergeEvent.php
index 9feb9d6..29dbbaf 100644
--- a/src/Event/HarvestPreMergeEvent.php
+++ b/src/Event/HarvestPreMergeEvent.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\oai_pmh_harvester\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use SimpleXMLElement;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * An event that should fire just before harvested data is merged into the DB.
diff --git a/src/Form/ActionsForm.php b/src/Form/ActionsForm.php
index c2870aa..9391006 100644
--- a/src/Form/ActionsForm.php
+++ b/src/Form/ActionsForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\oai_pmh_harvester\Form;
 
+use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\Messenger;
@@ -23,16 +24,16 @@ class ActionsForm extends FormBase {
   /**
    * The state.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected State $state;
 
   /**
    * Actions form constructor.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger.
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *   The state.
    */
   public function __construct(
@@ -46,7 +47,7 @@ class ActionsForm extends FormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException
+   * @throws ServiceCircularReferenceException
    */
   public static function create(ContainerInterface $container) {
     return new static(
diff --git a/src/Form/InspectForm.php b/src/Form/InspectForm.php
index f1cc3ad..1e4d53e 100644
--- a/src/Form/InspectForm.php
+++ b/src/Form/InspectForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\oai_pmh_harvester\Form;
 
+use Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -19,32 +20,32 @@ class InspectForm extends FormBase {
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\Messenger
+   * @var Messenger
    */
   protected $messenger;
 
   /**
    * The state.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $db;
 
   /**
    * Inspect form constructor.
    *
-   * @param \Drupal\Core\Messenger\Messenger $messenger
+   * @param Messenger $messenger
    *   The messenger.
-   * @param \Drupal\Core\State\State $state
+   * @param State $state
    *   The state.
-   * @param \Drupal\Core\Database\Connection $db
+   * @param Connection $db
    *   The database connection.
    */
   public function __construct(
@@ -60,7 +61,7 @@ class InspectForm extends FormBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Symfony\Component\DependencyInjection\Exception\ServiceCircularReferenceException
+   * @throws ServiceCircularReferenceException
    */
   public static function create(ContainerInterface $container) {
     return new static(
diff --git a/src/Harvester.php b/src/Harvester.php
index 81d04ff..3beffa0 100644
--- a/src/Harvester.php
+++ b/src/Harvester.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\oai_pmh_harvester;
 
+use Drupal\oai_pmh_harvester\Exceptions\DatabaseException;
+use Drupal\oai_pmh_harvester\Exceptions\EndpointException;
+use Scriptotek\Marc\Exceptions\RecordNotFound;
 use Drupal\oai_pmh_harvester\Service\HarvesterService;
 use Phpoaipmh\Endpoint;
 use Phpoaipmh\Exception\OaipmhException;
@@ -42,14 +45,14 @@ class Harvester {
    * Maybe this is a misnomer. Anyway, it parses the harvested XML results and
    * writes them to the database.
    *
-   * @var \Drupal\oai_pmh_harvester\Service\HarvesterService
+   * @var HarvesterService
    */
   private HarvesterService $service;
 
   /**
    * The OAI-PMH endpoint.
    *
-   * @var \Phpoaipmh\Endpoint
+   * @var Endpoint
    */
   private Endpoint $endpoint;
 
@@ -64,7 +67,7 @@ class Harvester {
    * @param \DateTimeImmutable|null $last
    *   The end ("until" value) of the last harvest run's range.
    *   Null if the harvester should start from the very beginning.
-   * @param \Drupal\oai_pmh_harvester\Service\HarvesterService $service
+   * @param HarvesterService $service
    *   The harvester service. Maybe this is a misnomer. Anyway, it parses the
    *   harvested XML results and writes them to the database.
    */
@@ -131,10 +134,10 @@ class Harvester {
   /**
    * Perform one harvest run.
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\DatabaseException
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\EndpointException
-   * @throws \Phpoaipmh\Exception\OaipmhException
-   * @throws \Scriptotek\Marc\Exceptions\RecordNotFound
+   * @throws DatabaseException
+   * @throws EndpointException
+   * @throws OaipmhException
+   * @throws RecordNotFound
    */
   public function run() {
     [$harvest_from, $harvest_until] = $this->getHarvestRange();
@@ -188,7 +191,7 @@ class Harvester {
    * @return \DateTimeImmutable[]
    *   An array of DateTimeImmutable objects: [$harvest_from, $harvest_until].
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\EndpointException
+   * @throws EndpointException
    */
   public function getHarvestRange(): array {
     // If harvest_from is NULL, get the earliestDatestamp from "Identify".
@@ -219,7 +222,7 @@ class Harvester {
    * @return \DateTimeImmutable
    *   The datestamp of the first record of the OAI-PMH provider.
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\EndpointException
+   * @throws EndpointException
    */
   public function getEarliestDatestamp(): \DateTimeImmutable {
     return Util::getEarliestDatestamp($this->endpoint);
diff --git a/src/Service/DecoderService.php b/src/Service/DecoderService.php
index 8f66ab2..b9eeda2 100644
--- a/src/Service/DecoderService.php
+++ b/src/Service/DecoderService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\oai_pmh_harvester\Service;
 
+use Scriptotek\Marc\Exceptions\RecordNotFound;
 use Drupal\oai_pmh_harvester\Event\HarvestPreMergeEvent;
 use RudolfByker\PhpMarcCsl\MarcCslVariables;
 use Scriptotek\Marc\Record;
@@ -16,14 +17,14 @@ class DecoderService {
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   public $dispatcher;
 
   /**
    * DecoderService constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher
+   * @param EventDispatcherInterface $dispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $dispatcher) {
@@ -36,17 +37,17 @@ class DecoderService {
    * @param \SimpleXMLElement $xml
    *   The Marc XML record to decode.
    *
-   * @return \RudolfByker\PhpMarcCsl\MarcCslVariables
+   * @return MarcCslVariables
    *   The decoded CSL data.
    *
-   * @throws \Scriptotek\Marc\Exceptions\RecordNotFound
+   * @throws RecordNotFound
    *   When the provided XML element is not a MARC record.
    */
   public function decodeOne(SimpleXMLElement $xml): MarcCslVariables {
     $csl = new MarcCslVariables(Record::fromSimpleXMLElement($xml));
 
     // Allow other modules to modify the $csl object before we return it.
-    $this->dispatcher->dispatch(HarvestPreMergeEvent::EVENT_NAME, new HarvestPreMergeEvent($xml, $csl));
+    $this->dispatcher->dispatch(new HarvestPreMergeEvent($xml, $csl), HarvestPreMergeEvent::EVENT_NAME);
 
     return $csl;
   }
diff --git a/src/Service/HarvesterService.php b/src/Service/HarvesterService.php
index a22fb9d..97799ba 100644
--- a/src/Service/HarvesterService.php
+++ b/src/Service/HarvesterService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\oai_pmh_harvester\Service;
 
+use Scriptotek\Marc\Exceptions\RecordNotFound;
 use Drupal\Core\Database\Connection;
 use Drupal\oai_pmh_harvester\Exceptions\DatabaseException;
 use Drupal\oai_pmh_harvester\Util;
@@ -16,23 +17,23 @@ class HarvesterService {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   public Connection $db;
 
   /**
    * The Marc to CSL decoder service.
    *
-   * @var \Drupal\oai_pmh_harvester\Service\DecoderService
+   * @var DecoderService
    */
   public DecoderService $decoder;
 
   /**
    * HarvesterService constructor.
    *
-   * @param \Drupal\Core\Database\Connection $db
+   * @param Connection $db
    *   The database connection to use.
-   * @param \Drupal\oai_pmh_harvester\Service\DecoderService $decoder
+   * @param DecoderService $decoder
    *   The Marc to CSL decoder service.
    */
   public function __construct(Connection $db, DecoderService $decoder) {
@@ -50,9 +51,9 @@ class HarvesterService {
    *   Multiple values: [id, action]
    *   Action is one of "deleted" or "updated".
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\DatabaseException
+   * @throws DatabaseException
    *   When the provided XML element does not contain a MARC record.
-   * @throws \Scriptotek\Marc\Exceptions\RecordNotFound
+   * @throws RecordNotFound
    *   When the DB merge query fails.
    */
   public function harvestOne(SimpleXMLElement $xml): array {
diff --git a/src/Util.php b/src/Util.php
index fe9b274..ddcf5eb 100644
--- a/src/Util.php
+++ b/src/Util.php
@@ -76,7 +76,7 @@ class Util {
    *
    * Concatenates the title, container title and collection title.
    *
-   * @param \RudolfByker\PhpMarcCsl\MarcCslVariables $csl
+   * @param MarcCslVariables $csl
    *   The Marc-CSL variables object.
    *
    * @return string
@@ -96,7 +96,7 @@ class Util {
    *
    * Concatenates all authors from the given CSL Variables.
    *
-   * @param \RudolfByker\PhpMarcCsl\MarcCslVariables $csl
+   * @param MarcCslVariables $csl
    *   The Marc-CSL variables object.
    *
    * @return string
@@ -212,7 +212,7 @@ class Util {
   /**
    * Get the harvest interval from config.
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\ConfigException
+   * @throws ConfigException
    */
   public static function getHarvestInterval(): \DateInterval {
     $config_name = self::SETTINGS_KEY;
@@ -239,7 +239,7 @@ class Util {
   /**
    * Get the URL for the OAI-PMH endpoint from config.
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\ConfigException
+   * @throws ConfigException
    */
   public static function getOaiPmhUrl(): string {
     $config_name = self::SETTINGS_KEY;
@@ -263,7 +263,7 @@ class Util {
   /**
    * Get an OAI-PMH harvester, based on the current settings.
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\ConfigException
+   * @throws ConfigException
    */
   public static function getHarvester(): Harvester {
     return new Harvester(
@@ -280,7 +280,7 @@ class Util {
    * @return \DateTimeImmutable
    *   The datestamp of the first record of the OAI-PMH provider.
    *
-   * @throws \Drupal\oai_pmh_harvester\Exceptions\EndpointException
+   * @throws EndpointException
    */
   public static function getEarliestDatestamp(Endpoint $endpoint): \DateTimeImmutable {
     $identify = $endpoint->identify();
diff --git a/tests/src/Functional/InstallTest.php b/tests/src/Functional/InstallTest.php
index 9881bed..668c306 100644
--- a/tests/src/Functional/InstallTest.php
+++ b/tests/src/Functional/InstallTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\oai_pmh_harvester\Functional;
 
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -24,12 +25,15 @@ class InstallTest extends BrowserTestBase {
   /**
    * Make sure the site still works.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testLoadFront() {
     $this->drupalGet('<front>');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Log in');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Log in');
   }
 
 }
diff --git a/tests/src/Unit/UtilTest.php b/tests/src/Unit/UtilTest.php
index b9a91fc..8d35b3f 100644
--- a/tests/src/Unit/UtilTest.php
+++ b/tests/src/Unit/UtilTest.php
@@ -81,9 +81,7 @@ class UtilTest extends UnitTestCase {
     // Mock the Drupal::time container.
     $container = new ContainerBuilder();
     Drupal::setContainer($container);
-    $mockTime = $this->getMockBuilder('Drupal\Component\Datetime\TimeInterface')
-        ->disableOriginalConstructor()
-        ->getMock();
+    $mockTime = $this->createMock('Drupal\Component\Datetime\TimeInterface');
     $mockTime->method('getRequestTime')->willReturn(12345);
     $container->set('datetime.time', $mockTime);
 
