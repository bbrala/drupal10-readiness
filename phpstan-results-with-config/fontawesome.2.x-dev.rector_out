modules/contrib/fontawesome/fontawesome.install
modules/contrib/fontawesome/fontawesome.module
modules/contrib/fontawesome/modules/fontawesome_iconpicker_widget/fontawesome_iconpicker_widget.install
modules/contrib/fontawesome/modules/fontawesome_iconpicker_widget/fontawesome_iconpicker_widget.module
modules/contrib/fontawesome/modules/fontawesome_iconpicker_widget/src/Commands/FontawesomeIconPickerCommands.php
modules/contrib/fontawesome/modules/fontawesome_iconpicker_widget/src/IconManagerService.php
modules/contrib/fontawesome/modules/fontawesome_iconpicker_widget/src/IconManagerServiceInterface.php
modules/contrib/fontawesome/modules/fontawesome_iconpicker_widget/src/Plugin/Field/FieldWidget/FontAwesomeIconpickerWidget.php
modules/contrib/fontawesome/modules/fontawesome_media/src/Plugin/media/Source/FontAwesomeIconMedia.php
modules/contrib/fontawesome/src/Commands/FontawesomeCommands.php
modules/contrib/fontawesome/src/Controller/AutocompleteController.php
modules/contrib/fontawesome/src/FontAwesomeManager.php
modules/contrib/fontawesome/src/FontAwesomeManagerInterface.php
modules/contrib/fontawesome/src/Form/EditorIconDialog.php
modules/contrib/fontawesome/src/Form/SettingsForm.php
modules/contrib/fontawesome/src/Plugin/CKEditorPlugin/DrupalFontAwesome.php
modules/contrib/fontawesome/src/Plugin/Field/FieldFormatter/FontAwesomeIconFormatter.php
modules/contrib/fontawesome/src/Plugin/Field/FieldType/FontAwesomeIcon.php
modules/contrib/fontawesome/src/Plugin/Field/FieldWidget/FontAwesomeIconWidget.php
modules/contrib/fontawesome/tests/fixtures/drupal7.php
modules/contrib/fontawesome/tests/fixtures/drupal7/system.php
modules/contrib/fontawesome/tests/fixtures/drupal7/variable.php
modules/contrib/fontawesome/tests/src/Kernel/FontawesomeMigrationTest.php

14 files with changes
=====================

1) modules/contrib/fontawesome/src/Plugin/Field/FieldWidget/FontAwesomeIconWidget.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal configuration service container.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal Font Awesome manager service.
    *
-   * @var \Drupal\fontawesome\FontAwesomeManagerInterface
+   * @var FontAwesomeManagerInterface
    */
   protected $fontAwesomeManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/fontawesome/src/Plugin/Field/FieldFormatter/FontAwesomeIconFormatter.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal configuration service container.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/fontawesome/src/Plugin/CKEditorPlugin/DrupalFontAwesome.php:19

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getFile() {
-    return drupal_get_path('module', 'fontawesome') . '/js/plugins/drupalfontawesome/plugin.js';
+    return \Drupal::service('extension.list.module')->getPath('fontawesome') . '/js/plugins/drupalfontawesome/plugin.js';
   }

   /**
@@ @@
     return [
       'DrupalFontAwesome' => [
         'label' => $this->t('Font Awesome'),
-        'image' => drupal_get_path('module', 'fontawesome') . '/js/plugins/drupalfontawesome/icons/drupalfontawesome.png',
+        'image' => \Drupal::service('extension.list.module')->getPath('fontawesome') . '/js/plugins/drupalfontawesome/icons/drupalfontawesome.png',
       ],
     ];
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/fontawesome/src/Form/SettingsForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal LibraryDiscovery service container.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/fontawesome/src/Form/EditorIconDialog.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal configuration service container.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal Font Awesome manager service.
    *
-   * @var \Drupal\fontawesome\FontAwesomeManagerInterface
+   * @var FontAwesomeManagerInterface
    */
   protected $fontAwesomeManager;

@@ @@
    *
    * @param array $form
    *   Form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
-   * @param \Drupal\editor\Entity\Editor $editor
+   * @param Editor $editor
    *   The text editor to which this dialog corresponds.
    */
   public function buildForm(array $form, FormStateInterface $form_state, Editor $editor = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/fontawesome/src/FontAwesomeManager.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The data cache.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $dataCache;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The file system helper.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Constructs a FontAwesomeManager object.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $data_cache
+   * @param CacheBackendInterface $data_cache
    *   The data cache.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system helper.
    */
   public function __construct(CacheBackendInterface $data_cache, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, FileSystemInterface $file_system) {
@@ @@
     $metadataFile = $this->fileSystem->realpath(DRUPAL_ROOT . '/libraries/fontawesome/metadata/categories.yml');
     // If we can't load the local file, use the included module icons file.
     if (!file_exists($metadataFile)) {
-      $metadataFile = drupal_get_path('module', 'fontawesome') . '/metadata/categories.yml';
+      $metadataFile = \Drupal::service('extension.list.module')->getPath('fontawesome') . '/metadata/categories.yml';
     }
     return $metadataFile;
   }
@@ @@
   public function getCategoryMetadata() {
     // Allow modules and themes to provide their own icon metadata first. If
     // none are provided, use the default metadata file.
-    /** @var \Drupal\Component\Discovery\YamlDiscovery $yaml_discovery */
+    /** @var YamlDiscovery $yaml_discovery */
     $yaml_discovery = new YamlDiscovery('fontawesome.categorylist', $this->themeHandler->getThemeDirectories() + $this->moduleHandler->getModuleDirectories());
     $data = $yaml_discovery->findAll();

@@ @@
     $metadataFile = $this->fileSystem->realpath(DRUPAL_ROOT . '/libraries/fontawesome/metadata/icons.yml');
     // If we can't load the local file, use the included module icons file.
     if (!file_exists($metadataFile)) {
-      $metadataFile = drupal_get_path('module', 'fontawesome') . '/metadata/icons.yml';
+      $metadataFile = \Drupal::service('extension.list.module')->getPath('fontawesome') . '/metadata/icons.yml';
     }
     return $metadataFile;
   }
@@ @@
   public function getMetadata() {
     // Allow modules and themes to provide their own icon metadata first. If
     // none are provided, use the default metadata file.
-    /** @var \Drupal\Component\Discovery\YamlDiscovery $yaml_discovery */
+    /** @var YamlDiscovery $yaml_discovery */
     $yaml_discovery = new YamlDiscovery('fontawesome.iconlist', $this->themeHandler->getThemeDirectories() + $this->moduleHandler->getModuleDirectories());
     $data = $yaml_discovery->findAll();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/fontawesome/src/Controller/AutocompleteController.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal Font Awesome manager service.
    *
-   * @var \Drupal\fontawesome\FontAwesomeManagerInterface
+   * @var FontAwesomeManagerInterface
    */
   protected $fontAwesomeManager;

@@ @@
   /**
    * Drupal configuration service container.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/fontawesome/src/Commands/FontawesomeCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fontawesome\Commands;

+use Drupal\Core\Archiver\ArchiverInterface;
 use Drush\Commands\DrushCommands;
 use Drupal\Core\Asset\LibraryDiscoveryInterface;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
   /**
    * Library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * File system interface.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Archive manager service.
    *
-   * @var \Drupal\Core\Archiver\ArchiverManager
+   * @var ArchiverManager
    */
   protected $archiverManager;

@@ @@
       }

       // Unzip the file.
-      /** @var \Drupal\Core\Archiver\ArchiverInterface $zipFile */
+      /** @var ArchiverInterface $zipFile */
       $zipFile = $this->archiverManager->getInstance(['filepath' => $path . '/fontawesome.zip']);
       $zipFile->extract($path);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/fontawesome/modules/fontawesome_media/src/Plugin/media/Source/FontAwesomeIconMedia.php:33

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function getMetadata(MediaInterface $media, $attribute_name) {
-    /** @var \Drupal\fontawesome\Plugin\Field\FieldType\FontAwesomeIcon $icon */
+    /** @var FontAwesomeIcon $icon */
     $icon = $media
       ->get($this->configuration['source_field'])
       ->first();
@@ @@
   /**
    * Gets the thumbnail image URI based on an icon entity.
    *
-   * @param \Drupal\fontawesome\Plugin\Field\FieldType\FontAwesomeIcon $icon
+   * @param FontAwesomeIcon $icon
    *   A Font Awesome Icon entity.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/fontawesome/modules/fontawesome_iconpicker_widget/src/Plugin/Field/FieldWidget/FontAwesomeIconpickerWidget.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Messenger\MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Drupal Font Awesome manager service.
    *
-   * @var \Drupal\fontawesome\FontAwesomeManagerInterface
+   * @var FontAwesomeManagerInterface
    */
   protected $fontAwesomeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/fontawesome/modules/fontawesome_iconpicker_widget/src/IconManagerService.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\fontawesome\FontAwesomeManagerInterface definition.
    *
-   * @var \Drupal\fontawesome\FontAwesomeManagerInterface
+   * @var FontAwesomeManagerInterface
    */
   protected $fontAwesomeManager;

@@ @@
   /**
    * Constructs a new IconManagerService object.
    *
-   * @param Drupal\fontawesome\FontAwesomeManagerInterface $font_awesome_manager
+   * @param FontAwesomeManagerInterface $font_awesome_manager
    *   The font awesome manager interface.
    */
   public function __construct(FontAwesomeManagerInterface $font_awesome_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/fontawesome/modules/fontawesome_iconpicker_widget/src/Commands/FontawesomeIconPickerCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\fontawesome_iconpicker_widget\Commands;

+use Drupal\Core\Archiver\ArchiverInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drush\Commands\DrushCommands;
 use Drupal\Core\Asset\LibraryDiscoveryInterface;
@@ @@
   /**
    * Library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * File system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Archive manager service.
    *
-   * @var \Drupal\Core\Archiver\ArchiverManager
+   * @var ArchiverManager
    */
   protected $archiverManager;

@@ @@
       }

       // Unzip the file.
-      /** @var \Drupal\Core\Archiver\ArchiverInterface $zipFile */
+      /** @var ArchiverInterface $zipFile */
       $zipFile = $this->archiverManager->getInstance(['filepath' => $path . '/fontIconPicker.zip']);
       $zipFile->extract($path);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/fontawesome/fontawesome.module:332

    ---------- begin diff ----------
@@ @@
    * By default, Drupal 8 does not include theme suggestions from inside the
    * module in which they were created, so we must add them manually here.
    */
-  $path = drupal_get_path('module', 'fontawesome');
+  $path = \Drupal::service('extension.list.module')->getPath('fontawesome');
   $fontawesome_templates = drupal_find_theme_templates($theme_registry, '.html.twig', $path);
   foreach ($fontawesome_templates as &$fontawesome_template) {
     $fontawesome_template['type'] = 'module';
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


14) modules/contrib/fontawesome/fontawesome.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user\RoleInterface;
 /**
  * @file
  * Requirements page for Font Awesome.
@@ @@
  * Grants 'access fontawesome additional settings' to authenticated users.
  */
 function _fontawesome_install_grant_default_permissions() {
-  /** @var \Drupal\user\RoleInterface $authenticated_role */
+  /** @var RoleInterface $authenticated_role */
   $authenticated_role = \Drupal::entityTypeManager()->getStorage('user_role')->load('authenticated');
   $authenticated_role->grantPermission('access fontawesome additional settings')->save();
 }
@@ @@
  */
 function fontawesome_update_8002() {
   _fontawesome_install_grant_default_permissions();
-}
+}
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 14 files have been changed by Rector                                      

