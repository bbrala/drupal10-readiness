diff --git a/elasticsearch_helper_index_management.module b/elasticsearch_helper_index_management.module
index c6df3e7..b040d71 100644
--- a/elasticsearch_helper_index_management.module
+++ b/elasticsearch_helper_index_management.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\elasticsearch_helper_index_management\IndexingStatusOperationManagerInterface;
 /**
  * @file
  *
@@ -12,7 +13,7 @@ use Drupal\Core\Entity\EntityInterface;
  * Implements hook_entity_delete().
  */
 function elasticsearch_helper_index_management_entity_delete(EntityInterface $entity) {
-  /** @var \Drupal\elasticsearch_helper_index_management\IndexingStatusOperationManagerInterface $status_manager */
+  /** @var IndexingStatusOperationManagerInterface $status_manager */
   $status_manager = \Drupal::service('elasticsearch_helper_index_management.index_status_operation_manager');
 
   // Remove all reference to an entity in indexing status table.
diff --git a/elasticsearch_helper_index_management.views.inc b/elasticsearch_helper_index_management.views.inc
index 33a6a12..2091676 100644
--- a/elasticsearch_helper_index_management.views.inc
+++ b/elasticsearch_helper_index_management.views.inc
@@ -1,17 +1,17 @@
 <?php
 
+use Drupal\elasticsearch_helper_index_management\ViewsData;
 /**
  * @file
  * Provide views data for index management tables.
  */
-
 /**
  * Implements hook_views_data().
  */
 function elasticsearch_helper_index_management_views_data() {
   $class = '\Drupal\elasticsearch_helper_index_management\ViewsData';
 
-  /** @var \Drupal\elasticsearch_helper_index_management\ViewsData $instance */
+  /** @var ViewsData $instance */
   $instance = \Drupal::service('class_resolver')->getInstanceFromDefinition($class);
 
   return $instance->getViewsData();
diff --git a/src/EventSubscriber/IndexingStatus.php b/src/EventSubscriber/IndexingStatus.php
index dff718e..50e5a17 100644
--- a/src/EventSubscriber/IndexingStatus.php
+++ b/src/EventSubscriber/IndexingStatus.php
@@ -18,14 +18,14 @@ class IndexingStatus implements EventSubscriberInterface {
   /**
    * Indexing status operations manager instance.
    *
-   * @var \Drupal\elasticsearch_helper_index_management\IndexingStatusOperationManagerInterface
+   * @var IndexingStatusOperationManagerInterface
    */
   protected $indexingStatusOperationManager;
 
   /**
    * IndexingStatus constructor.
    *
-   * @param \Drupal\elasticsearch_helper_index_management\IndexingStatusOperationManagerInterface $operationsManager
+   * @param IndexingStatusOperationManagerInterface $operationsManager
    */
   public function __construct(IndexingStatusOperationManagerInterface $operationsManager) {
     $this->indexingStatusOperationManager = $operationsManager;
@@ -47,7 +47,7 @@ class IndexingStatus implements EventSubscriberInterface {
    * Sets the indexing status to "error". This allows selective reindexing
    * based on failed indexing status.
    *
-   * @param \Drupal\elasticsearch_helper\Event\ElasticsearchOperationErrorEvent $event
+   * @param ElasticsearchOperationErrorEvent $event
    *   The dispatched operation error event.
    */
   public function onOperationError(ElasticsearchOperationErrorEvent $event) {
@@ -60,7 +60,7 @@ class IndexingStatus implements EventSubscriberInterface {
   /**
    * Listens to Elasticsearch operation request result event.
    *
-   * @param \Drupal\elasticsearch_helper\Event\ElasticsearchOperationRequestResultEvent $event
+   * @param ElasticsearchOperationRequestResultEvent $event
    */
   public function onRequestResult(ElasticsearchOperationRequestResultEvent $event) {
     $result = $event->getResult();
@@ -84,7 +84,7 @@ class IndexingStatus implements EventSubscriberInterface {
   /**
    * Returns TRUE if document index result is successful.
    *
-   * @param \Drupal\elasticsearch_helper\ElasticsearchRequestResultInterface $result
+   * @param ElasticsearchRequestResultInterface $result
    *
    * @return bool
    */
@@ -97,7 +97,7 @@ class IndexingStatus implements EventSubscriberInterface {
   /**
    * Returns TRUE if document delete result is successful.
    *
-   * @param \Drupal\elasticsearch_helper\ElasticsearchRequestResultInterface $result
+   * @param ElasticsearchRequestResultInterface $result
    *
    * @return bool
    */
diff --git a/src/EventSubscriber/IndexingStatusFlush.php b/src/EventSubscriber/IndexingStatusFlush.php
index 026c28d..ca69f7d 100644
--- a/src/EventSubscriber/IndexingStatusFlush.php
+++ b/src/EventSubscriber/IndexingStatusFlush.php
@@ -16,14 +16,14 @@ class IndexingStatusFlush implements EventSubscriberInterface {
   /**
    * Indexing status manager instance.
    *
-   * @var \Drupal\elasticsearch_helper_index_management\IndexingStatusManagerInterface
+   * @var IndexingStatusManagerInterface
    */
   protected $indexingStatusManager;
 
   /**
    * IndexingStatusFlush constructor.
    *
-   * @param \Drupal\elasticsearch_helper_index_management\IndexingStatusManagerInterface $indexing_status_manager
+   * @param IndexingStatusManagerInterface $indexing_status_manager
    */
   public function __construct(IndexingStatusManagerInterface $indexing_status_manager) {
     $this->indexingStatusManager = $indexing_status_manager;
@@ -41,7 +41,7 @@ class IndexingStatusFlush implements EventSubscriberInterface {
   /**
    * Listens to Elasticsearch drop operation request result event.
    *
-   * @param \Drupal\elasticsearch_helper\Event\ElasticsearchOperationRequestResultEvent $event
+   * @param ElasticsearchOperationRequestResultEvent $event
    */
   public function onRequestResult(ElasticsearchOperationRequestResultEvent $event) {
     $result = $event->getResult()->getResultBody();
diff --git a/src/Form/IndexConfirmFormBase.php b/src/Form/IndexConfirmFormBase.php
index 777c5a4..bf2226d 100644
--- a/src/Form/IndexConfirmFormBase.php
+++ b/src/Form/IndexConfirmFormBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\elasticsearch_helper_index_management\Form;
 
+use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -13,7 +14,7 @@ use Drupal\elasticsearch_helper_index_management\Index;
 abstract class IndexConfirmFormBase extends ConfirmFormBase {
 
   /**
-   * @var \Drupal\elasticsearch_helper_index_management\Index[]
+   * @var Index[]
    */
   protected $indices = [];
 
@@ -51,7 +52,7 @@ abstract class IndexConfirmFormBase extends ConfirmFormBase {
   public function buildForm(array $form, FormStateInterface $form_state) {
     $route_match = $this->getRouteMatch();
 
-    /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $index_plugin */
+    /** @var ElasticsearchIndexInterface $index_plugin */
     foreach ($route_match->getParameter('plugin') as $index_plugin) {
       $this->indices[] = new Index($index_plugin);
     }
diff --git a/src/Form/IndexListForm.php b/src/Form/IndexListForm.php
index 48461a4..00dcf0c 100644
--- a/src/Form/IndexListForm.php
+++ b/src/Form/IndexListForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\elasticsearch_helper_index_management\Form;
 
+use Drupal\elasticsearch_helper_index_management\IndexingStatusManager;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -17,21 +18,21 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class IndexListForm extends FormBase {
 
   /**
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager
+   * @var ElasticsearchIndexManager
    */
   protected $elasticsearchIndexManager;
 
   /**
-   * @var \Drupal\elasticsearch_helper_index_management\IndexingStatusManager
+   * @var IndexingStatusManager
    */
   protected $indexingStatusManager;
 
   /**
    * IndexController constructor.
    *
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $elasticsearch_index_manager
+   * @param ElasticsearchIndexManager $elasticsearch_index_manager
    *   The index manager service.
-   * @param \Drupal\elasticsearch_helper_index_management\IndexingStatusManagerInterface $indexing_status_manager
+   * @param IndexingStatusManagerInterface $indexing_status_manager
    *   The indexing status manager service.
    */
   public function __construct(ElasticsearchIndexManager $elasticsearch_index_manager, IndexingStatusManagerInterface $indexing_status_manager) {
@@ -216,7 +217,7 @@ class IndexListForm extends FormBase {
   /**
    * Returns successful items count.
    *
-   * @param \Drupal\elasticsearch_helper_index_management\Index $index
+   * @param Index $index
    *
    * @return int
    */
@@ -230,7 +231,7 @@ class IndexListForm extends FormBase {
   /**
    * Returns failed items count.
    *
-   * @param \Drupal\elasticsearch_helper_index_management\Index $index
+   * @param Index $index
    *
    * @return int
    */
diff --git a/src/Form/IndexReindexConfirmForm.php b/src/Form/IndexReindexConfirmForm.php
index 8e2456f..092f0b8 100644
--- a/src/Form/IndexReindexConfirmForm.php
+++ b/src/Form/IndexReindexConfirmForm.php
@@ -13,14 +13,14 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class IndexReindexConfirmForm extends IndexConfirmFormBase {
 
   /**
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
   /**
    * ReindexConfirmForm constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    */
   public function __construct(QueueFactory $queue_factory) {
     $this->queueFactory = $queue_factory;
diff --git a/src/Form/IndexViewForm.php b/src/Form/IndexViewForm.php
index d6161f6..475526b 100644
--- a/src/Form/IndexViewForm.php
+++ b/src/Form/IndexViewForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\elasticsearch_helper_index_management\Form;
 
+use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\elasticsearch_helper_index_management\Index;
@@ -122,9 +124,9 @@ class IndexViewForm extends FormBase {
   /**
    * Returns title for the view page.
    *
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface[] $plugin
+   * @param ElasticsearchIndexInterface[] $plugin
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    */
   public function viewTitle($plugin = []) {
     // View only the first plugin.
@@ -144,7 +146,7 @@ class IndexViewForm extends FormBase {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     // View only the first plugin.
-    /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface[] $plugin */
+    /** @var ElasticsearchIndexInterface[] $plugin */
     $plugin = $form_state->getBuildInfo()['args'][0];
     $plugin = reset($plugin);
 
diff --git a/src/Form/QueueClearConfirmForm.php b/src/Form/QueueClearConfirmForm.php
index 4c3c701..628b059 100644
--- a/src/Form/QueueClearConfirmForm.php
+++ b/src/Form/QueueClearConfirmForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\elasticsearch_helper_index_management\Form;
 
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Queue\QueueFactory;
@@ -14,14 +15,14 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class QueueClearConfirmForm extends ConfirmFormBase {
 
   /**
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $indexingQueue;
 
   /**
    * ReindexConfirmForm constructor.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   Query factory service.
    */
   public function __construct(QueueFactory $queue_factory) {
diff --git a/src/Index.php b/src/Index.php
index 3e23f55..3468bdd 100644
--- a/src/Index.php
+++ b/src/Index.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\elasticsearch_helper_index_management;
 
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Url;
 use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
 
@@ -11,14 +14,14 @@ use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
 class Index {
 
   /**
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface
+   * @var ElasticsearchIndexInterface
    */
   protected $indexPlugin;
 
   /**
    * Index constructor.
    *
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $index_plugin
+   * @param ElasticsearchIndexInterface $index_plugin
    */
   public function __construct(ElasticsearchIndexInterface $index_plugin) {
     $this->indexPlugin = $index_plugin;
@@ -31,13 +34,13 @@ class Index {
    *
    * @return static
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public static function createFromPluginId($plugin_id) {
-    /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $elasticsearch_index_manager */
+    /** @var ElasticsearchIndexManager $elasticsearch_index_manager */
     $elasticsearch_index_manager = \Drupal::service('plugin.manager.elasticsearch_index.processor');
 
-    /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $plugin */
+    /** @var ElasticsearchIndexInterface $plugin */
     $plugin = $elasticsearch_index_manager->createInstance($plugin_id);
 
     return new static($plugin);
@@ -46,7 +49,7 @@ class Index {
   /**
    * Returns plugin instance.
    *
-   * @return \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface
+   * @return ElasticsearchIndexInterface
    */
   public function getPluginInstance() {
     return $this->indexPlugin;
@@ -64,7 +67,7 @@ class Index {
   /**
    * Returns index plugin label.
    *
-   * @return \Drupal\Component\Render\MarkupInterface|string
+   * @return MarkupInterface|string
    */
   public function getLabel() {
     return $this->indexPlugin->getPluginDefinition()['label'];
@@ -101,7 +104,7 @@ class Index {
    * @param array $route_parameters
    * @param array $options
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    */
   public function toUrl($rel = 'view', $route_parameters = [], array $options = []) {
     // Prepare route parameters.
diff --git a/src/IndexingStatusManager.php b/src/IndexingStatusManager.php
index 9a8de7f..5abab40 100644
--- a/src/IndexingStatusManager.php
+++ b/src/IndexingStatusManager.php
@@ -22,22 +22,22 @@ class IndexingStatusManager implements IndexingStatusManagerInterface {
   /**
    * Database instance.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Time instance.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * IndexingStatusManager constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param Connection $database
+   * @param TimeInterface $time
    */
   public function __construct(Connection $database, TimeInterface $time) {
     $this->database = $database;
diff --git a/src/IndexingStatusOperationManager.php b/src/IndexingStatusOperationManager.php
index e8369a6..7ed0d24 100644
--- a/src/IndexingStatusOperationManager.php
+++ b/src/IndexingStatusOperationManager.php
@@ -13,14 +13,14 @@ class IndexingStatusOperationManager implements IndexingStatusOperationManagerIn
   /**
    * Indexing status manager instance.
    *
-   * @var \Drupal\elasticsearch_helper_index_management\IndexingStatusManagerInterface
+   * @var IndexingStatusManagerInterface
    */
   protected $indexingStatusManager;
 
   /**
    * OperationsManager constructor.
    *
-   * @param \Drupal\elasticsearch_helper_index_management\IndexingStatusManagerInterface $indexing_status_manager
+   * @param IndexingStatusManagerInterface $indexing_status_manager
    */
   public function __construct(IndexingStatusManagerInterface $indexing_status_manager) {
     $this->indexingStatusManager = $indexing_status_manager;
@@ -68,8 +68,8 @@ class IndexingStatusOperationManager implements IndexingStatusOperationManagerIn
   /**
    * Deletes indexing status for given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface|null $index_plugin
+   * @param EntityInterface $entity
+   * @param ElasticsearchIndexInterface|null $index_plugin
    */
   protected function deleteEntityIndexingStatus(EntityInterface $entity, ElasticsearchIndexInterface $index_plugin = NULL) {
     $conditions = [
diff --git a/src/IndexingStatusOperationManagerInterface.php b/src/IndexingStatusOperationManagerInterface.php
index 3cda79c..7b99006 100644
--- a/src/IndexingStatusOperationManagerInterface.php
+++ b/src/IndexingStatusOperationManagerInterface.php
@@ -15,7 +15,7 @@ interface IndexingStatusOperationManagerInterface {
    *
    * @param mixed $object
    *   The index-able object.
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $index_plugin
+   * @param ElasticsearchIndexInterface $index_plugin
    *   The Elasticsearch index plugin which is indexing the object.
    */
   public function setSuccessIndexingStatus($object, ElasticsearchIndexInterface $index_plugin);
@@ -25,7 +25,7 @@ interface IndexingStatusOperationManagerInterface {
    *
    * @param mixed $object
    *   The index-able object.
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $index_plugin
+   * @param ElasticsearchIndexInterface $index_plugin
    *   The Elasticsearch index plugin which is indexing the object.
    */
   public function setErrorIndexingStatus($object, ElasticsearchIndexInterface $index_plugin);
@@ -35,7 +35,7 @@ interface IndexingStatusOperationManagerInterface {
    *
    * @param $object
    *   The index-able object.
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface|null $index_plugin
+   * @param ElasticsearchIndexInterface|null $index_plugin
    *   The Elasticsearch index plugin which is indexing the object.
    */
   public function deleteIndexingStatus($object, ElasticsearchIndexInterface $index_plugin = NULL);
@@ -43,11 +43,11 @@ interface IndexingStatusOperationManagerInterface {
   /**
    * Sets indexing status for index-able entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The index-able entity.
    * @param $status
    *   Status name.
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface $index_plugin
+   * @param ElasticsearchIndexInterface $index_plugin
    *   The Elasticsearch index plugin which is indexing the object.
    */
   public function setEntityIndexingStatus(EntityInterface $entity, $status, ElasticsearchIndexInterface $index_plugin);
diff --git a/src/ParamConverter/IndexPlugin.php b/src/ParamConverter/IndexPlugin.php
index e82f93f..bc354df 100644
--- a/src/ParamConverter/IndexPlugin.php
+++ b/src/ParamConverter/IndexPlugin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\elasticsearch_helper_index_management\ParamConverter;
 
+use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface;
 use Drupal\Core\ParamConverter\ParamConverterInterface;
 use Drupal\Core\ParamConverter\ParamNotConvertedException;
 use Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager;
@@ -13,14 +14,14 @@ use Symfony\Component\Routing\Route;
 class IndexPlugin implements ParamConverterInterface {
 
   /**
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager
+   * @var ElasticsearchIndexManager
    */
   protected $elasticsearchIndexManager;
 
   /**
    * IndexPlugin constructor.
    *
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $elasticsearch_index_manager
+   * @param ElasticsearchIndexManager $elasticsearch_index_manager
    */
   public function __construct(ElasticsearchIndexManager $elasticsearch_index_manager) {
     $this->elasticsearchIndexManager = $elasticsearch_index_manager;
@@ -36,9 +37,9 @@ class IndexPlugin implements ParamConverterInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\ParamConverter\ParamNotConvertedException
+   * @throws ParamNotConvertedException
    *
-   * @return \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexInterface[]
+   * @return ElasticsearchIndexInterface[]
    */
   public function convert($value, $definition, $name, array $defaults) {
     $plugin_ids = explode(',', $defaults['plugin']);
diff --git a/src/Plugin/QueueWorker/Reindex.php b/src/Plugin/QueueWorker/Reindex.php
index 71bbdde..55759a8 100644
--- a/src/Plugin/QueueWorker/Reindex.php
+++ b/src/Plugin/QueueWorker/Reindex.php
@@ -19,7 +19,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class Reindex extends QueueWorkerBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager
+   * @var ElasticsearchIndexManager
    */
   public $elasticsearchIndexManager;
 
@@ -29,7 +29,7 @@ class Reindex extends QueueWorkerBase implements ContainerFactoryPluginInterface
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $elasticsearch_index_manager
+   * @param ElasticsearchIndexManager $elasticsearch_index_manager
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ElasticsearchIndexManager $elasticsearch_index_manager) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/Plugin/QueueWorker/ReindexFailedOnly.php b/src/Plugin/QueueWorker/ReindexFailedOnly.php
index 1845106..0cc4130 100644
--- a/src/Plugin/QueueWorker/ReindexFailedOnly.php
+++ b/src/Plugin/QueueWorker/ReindexFailedOnly.php
@@ -21,17 +21,17 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class ReindexFailedOnly extends QueueWorkerBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager
+   * @var ElasticsearchIndexManager
    */
   public $elasticsearchIndexManager;
 
   /**
-   * @var \Drupal\elasticsearch_helper_index_management\IndexingStatusManagerInterface
+   * @var IndexingStatusManagerInterface
    */
   protected $indexingStatusManager;
 
   /**
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
@@ -41,9 +41,9 @@ class ReindexFailedOnly extends QueueWorkerBase implements ContainerFactoryPlugi
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $elasticsearch_index_manager
-   * @param \Drupal\elasticsearch_helper_index_management\IndexingStatusManagerInterface $indexing_status_manager
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param ElasticsearchIndexManager $elasticsearch_index_manager
+   * @param IndexingStatusManagerInterface $indexing_status_manager
+   * @param QueueFactory $queue_factory
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ElasticsearchIndexManager $elasticsearch_index_manager, IndexingStatusManagerInterface $indexing_status_manager, QueueFactory $queue_factory) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
diff --git a/src/Plugin/QueueWorker/ReindexUnprocessedOnly.php b/src/Plugin/QueueWorker/ReindexUnprocessedOnly.php
index 4cb7b8f..4c4a2cf 100644
--- a/src/Plugin/QueueWorker/ReindexUnprocessedOnly.php
+++ b/src/Plugin/QueueWorker/ReindexUnprocessedOnly.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\elasticsearch_helper_index_management\Plugin\QueueWorker;
 
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -23,22 +24,22 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class ReindexUnprocessedOnly extends QueueWorkerBase implements ContainerFactoryPluginInterface {
 
   /**
-   * @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager
+   * @var ElasticsearchIndexManager
    */
   public $elasticsearchIndexManager;
 
   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;
 
@@ -48,10 +49,10 @@ class ReindexUnprocessedOnly extends QueueWorkerBase implements ContainerFactory
    * @param array $configuration
    * @param $plugin_id
    * @param $plugin_definition
-   * @param \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $elasticsearch_index_manager
-   * @param \Drupal\Core\Database\Connection $database
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param ElasticsearchIndexManager $elasticsearch_index_manager
+   * @param Connection $database
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param QueueFactory $queue_factory
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ElasticsearchIndexManager $elasticsearch_index_manager, Connection $database, EntityTypeManagerInterface $entity_type_manager, QueueFactory $queue_factory) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
@@ -116,7 +117,7 @@ class ReindexUnprocessedOnly extends QueueWorkerBase implements ContainerFactory
    *
    * @return array
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function getUnprocessedItems($entity_type_id, $bundle) {
     if ($entity_type_instance = $this->entityTypeManager->getDefinition($entity_type_id, FALSE)) {
