modules/contrib/contact_storage_export/contact_storage_export.install
modules/contrib/contact_storage_export/contact_storage_export.module
modules/contrib/contact_storage_export/src/ContactStorageExport.php
modules/contrib/contact_storage_export/src/ContactStorageExportBatches.php
modules/contrib/contact_storage_export/src/ContactStorageExportService.php
modules/contrib/contact_storage_export/src/ContactStorageExportTempstore.php
modules/contrib/contact_storage_export/src/Form/ContactStorageDownloadForm.php
modules/contrib/contact_storage_export/src/Form/ContactStorageExportForm.php
modules/contrib/contact_storage_export/tests/src/Kernel/ContactStorageExportBrowserTest.php
modules/contrib/contact_storage_export/tests/src/Kernel/ContactStorageExportServiceKernelTest.php

6 files with changes
====================

1) modules/contrib/contact_storage_export/tests/src/Kernel/ContactStorageExportServiceKernelTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\contact_storage_export\Kernel;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\contact\Entity\ContactForm;
 use Drupal\contact\Entity\Message;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('contact_message');
     $this->installEntitySchema('user');
@@ @@
   /**
    * Tests contact storage export.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException]
+   * @throws EntityStorageException ]
    */
   public function testContactStorageExport() {
     // Create a sample form.
@@ @@
    * @param array $instance_configuration
    *   (optional) Field instance configuration.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function addField($name, $type, $bundle, array $storage_configuration = [], array $instance_configuration = []) {
     $field_storage = FieldStorageConfig::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/contact_storage_export/tests/src/Kernel/ContactStorageExportBrowserTest.php:62

    ---------- begin diff ----------
@@ @@
       'columns[id]' => 1,
       'filename' => 'test.csv',
     ];
-    $this->drupalPostForm(NULL, [], t('Export'));
+    $this->submitForm([], t('Export'));
     $this->drupalGet("admin/structure/contact/manage/export-download/$contact_form_id/0");
-    $this->assertText(t('Your export is ready for download.'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('Your export is ready for download.'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/contact_storage_export/src/Form/ContactStorageExportForm.php:41

    ---------- begin diff ----------
@@ @@
    *   The machine name of the contact form.
    * @param array $form
    *   The Drupal form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The Drupal form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
@@ @@
   public function submitForm(array &$form, FormStateInterface $form_state) {

     // Path to the batch processing.
-    $path = drupal_get_path('module', 'contact_storage_export');
+    $path = \Drupal::service('extension.list.module')->getPath('contact_storage_export');
     $path .= '/src/ContactStorageExportBatches.php';

     // Information to pass to the batch processing.
@@ @@
    * @param int $since_last_id
    *   Function getSingleMessage integer since_last_id.
    *
-   * @return bool|\Drupal\contact\Entity\Message
+   * @return bool|Message
    *   False or a single contact_message entity.
    */
   protected function getSingleMessage($contact_form, $since_last_id = 0) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/contact_storage_export/src/ContactStorageExportTempstore.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\contact_storage_export;

+use Drupal\Core\TempStore\TempStoreException;
+use Drupal\Core\Tempstore\PrivateTempStore;
 /**
  * Class ContactStorageExportTempstore.
  *
@@ @@
    * @return int|mixed
    *   The tempstore key.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public static function setTempstore($fid, $filename) {
-    /** @var \Drupal\Core\Tempstore\PrivateTempStore $tempstore */
+    /** @var PrivateTempStore $tempstore */
     $tempstore = \Drupal::service('tempstore.private')
       ->get('contact_storage_export');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/contact_storage_export/src/ContactStorageExportService.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The CSV encoder.
    *
-   * @var \Drupal\csv_serialization\Encoder\CsvEncoder
+   * @var CsvEncoder
    */
   protected $csvEncoder;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Creates a new ContactStorageExportService object.
    *
-   * @param \Drupal\csv_serialization\Encoder\CsvEncoder $csv_encoder
+   * @param CsvEncoder $csv_encoder
    *   The CSV encoder.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(CsvEncoder $csv_encoder, RendererInterface $renderer) {
@@ @@
   /**
    * Returns a serialized message.
    *
-   * @param \Drupal\contact\MessageInterface $message
+   * @param MessageInterface $message
    *   The message to serialize.
    * @param string[] $settings
    *   (optional) A settings array containing:
@@ @@
   /**
    * Formats values of the given field.
    *
-   * @param \Drupal\contact\MessageInterface $message
+   * @param MessageInterface $message
    *   A message entity.
    * @param string $field
    *   A field name.
@@ @@
     $values = [];

     // Iterate over field items and format its values.
-    /** @var \Drupal\Core\Field\FieldItemInterface $item */
+    /** @var FieldItemInterface $item */
     foreach ($message->$field as $item) {
       switch ($type) {
         case 'link':
-          /** @var \Drupal\link\LinkItemInterface $item */
+          /** @var LinkItemInterface $item */
           $values[] = $this->formatLink($item);
           break;

@@ @@
           break;

         case 'entity_reference':
-          /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $item */
+          /** @var EntityReferenceItem $item */
           $values[] = $this->formatEntityReference($item, $storage_definition->getMainPropertyName());
           break;

@@ @@
   /**
    * Returns an absolute URL as a string value.
    *
-   * @param \Drupal\link\LinkItemInterface $link_item
+   * @param LinkItemInterface $link_item
    *   The link item to format.
    *
    * @return string
@@ @@
   /**
    * Formats a date-time field item with a given format.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   Afield item to format.
    * @param string $format
    *   A date format. Defaults to short format (m/d/Y - H:i).
@@ @@
   /**
    * Formats entity reference value.
    *
-   * @param \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $entity_reference_item
+   * @param EntityReferenceItem $entity_reference_item
    *   The entity reference item.
    * @param string $property
    *   The main property.
@@ @@
   /**
    * Returns labels from the field definitions.
    *
-   * @param \Drupal\contact\MessageInterface $message
+   * @param MessageInterface $message
    *   A contact message object to get labels for.
    *
    * @return array
@@ @@
   /**
    * Returns the encoded contact messages.
    *
-   * @param \Drupal\contact\MessageInterface[] $messages
+   * @param MessageInterface[] $messages
    *   The messages.
    * @param string[] $settings
    *   The settings array.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/contact_storage_export/src/ContactStorageExportBatches.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\contact_storage_export;

+use Drupal\file\FileInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\contact\MessageInterface;
+use Drupal\Core\TempStore\TempStoreException;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Url;
 use Drupal\contact\Entity\Message;
@@ @@
   /**
    * The temp file.
    *
-   * @var null|\Drupal\file\FileInterface
+   * @var null|FileInterface
    */
   protected static $tempFile = NULL;

@@ @@
    * @param array $context
    *   The batch context.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function processBatch(array $settings, array &$context) {
     if (empty($context['sandbox'])) {
@@ @@
    * @param array $context
    *   The batch context.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private static function prepareMessages(array $messages, array $settings, array &$context) {
-    /** @var \Drupal\contact_storage_export\ContactStorageExportService $exporter */
+    /** @var ContactStorageExportService $exporter */
     $exporter = \Drupal::service('contact_storage_export.exporter');

-    /** @var \Drupal\contact\MessageInterface $message */
+    /** @var MessageInterface $message */
     $message = reset($messages);

     // Prepare message labels.
@@ @@
    * @param array $operations
    *   The batch operations.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirection.
    *
-   * @throws \Drupal\Core\TempStore\TempStoreException
+   * @throws TempStoreException
    */
   public static function finishBatch($success, array $results, array $operations) {
     if ($success) {
@@ @@
   /**
    * Get the temp file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The temporary file.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected static function getTempFile() {
     if (!self::$tempFile) {
@@ @@
   /**
    * Create the temporary file.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected static function createTempFile() {
     // Get file temp name.
@@ @@
    * @param string $data
    *   The data to add to the file.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected static function writeToTempFile($data) {
     $file = self::getTempFile();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 6 files have been changed by Rector                                       

