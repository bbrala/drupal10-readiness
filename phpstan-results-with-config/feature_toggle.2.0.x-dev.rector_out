modules/contrib/feature_toggle/feature_toggle.module
modules/contrib/feature_toggle/feature_toggle.theme.inc
modules/contrib/feature_toggle/src/Event/FeatureUpdateEvent.php
modules/contrib/feature_toggle/src/Event/FeatureUpdateEvents.php
modules/contrib/feature_toggle/src/Feature.php
modules/contrib/feature_toggle/src/FeatureInterface.php
modules/contrib/feature_toggle/src/FeatureManager.php
modules/contrib/feature_toggle/src/FeatureManagerInterface.php
modules/contrib/feature_toggle/src/FeatureStatus.php
modules/contrib/feature_toggle/src/FeatureStatusInterface.php
modules/contrib/feature_toggle/src/FeatureUtilsTrait.php
modules/contrib/feature_toggle/src/Form/FeatureAddForm.php
modules/contrib/feature_toggle/src/Form/FeatureDeleteForm.php
modules/contrib/feature_toggle/src/Form/FeatureToggleForm.php
modules/contrib/feature_toggle/src/Plugin/Condition/FeatureToggle.php
modules/contrib/feature_toggle/tests/src/Functional/FeatureToggleJavascriptTest.php
modules/contrib/feature_toggle/tests/src/Functional/FeatureToggleWorkflowTest.php
modules/contrib/feature_toggle/tests/src/Kernel/FeatureToggleConditionTest.php
modules/contrib/feature_toggle/tests/src/Kernel/FeatureToggleEventsTest.php

14 files with changes
=====================

1) modules/contrib/feature_toggle/tests/src/Kernel/FeatureToggleEventsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\feature_toggle\Kernel;

+use Drupal\Core\State\StateInterface;
+use Drupal\feature_toggle\FeatureManagerInterface;
+use Drupal\feature_toggle\FeatureStatusInterface;
 use Drupal\feature_toggle\Event\FeatureUpdateEvent;
 use Drupal\feature_toggle\Event\FeatureUpdateEvents;
 use Drupal\feature_toggle\Feature;
@@ @@
   /**
    * State service for recording information received by event listeners.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The feature manager service.
    *
-   * @var \Drupal\feature_toggle\FeatureManagerInterface
+   * @var FeatureManagerInterface
    */
   protected $featureManager;

@@ @@
   /**
    * The feature status service.
    *
-   * @var \Drupal\feature_toggle\FeatureStatusInterface
+   * @var FeatureStatusInterface
    */
   protected $featureStatus;

@@ @@
   /**
    * The 1st feature.
    *
-   * @var \Drupal\feature_toggle\FeatureInterface
+   * @var FeatureInterface
    */
   protected $feature1;

@@ @@
   /**
    * The 2nd feature.
    *
-   * @var \Drupal\feature_toggle\FeatureInterface
+   * @var FeatureInterface
    */
   protected $feature2;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->state = \Drupal::state();
     $this->featureManager = $this->container->get('feature_toggle.feature_manager');
@@ @@
   /**
    * Generic event subscriber.
    *
-   * @param \Drupal\feature_toggle\Event\FeatureUpdateEvent $event
+   * @param FeatureUpdateEvent $event
    *   The event object.
    * @param string $name
    *   The event name.
@@ @@
   /**
    * Feature specific event subscriber.
    *
-   * @param \Drupal\feature_toggle\Event\FeatureUpdateEvent $event
+   * @param FeatureUpdateEvent $event
    *   The event object.
    * @param string $name
    *   The event name.
@@ @@
   /**
    * Asserts Feature Event behavior.
    *
-   * @param \Drupal\feature_toggle\FeatureInterface $modified_feature
+   * @param FeatureInterface $modified_feature
    *   The feature triggeringthe event.
-   * @param \Drupal\feature_toggle\FeatureInterface $other_feature
+   * @param FeatureInterface $other_feature
    *   Other non-modified feature.
    */
   protected function assertEvent(FeatureInterface $modified_feature, FeatureInterface $other_feature) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/feature_toggle/tests/src/Kernel/FeatureToggleConditionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\feature_toggle\Kernel;

+use Drupal\Core\Condition\ConditionManager;
+use Drupal\feature_toggle\FeatureManagerInterface;
+use Drupal\feature_toggle\FeatureStatusInterface;
+use Drupal\feature_toggle\FeatureInterface;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\feature_toggle\Feature;
 use Drupal\KernelTests\KernelTestBase;

@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * The feature manager service.
    *
-   * @var \Drupal\feature_toggle\FeatureManagerInterface
+   * @var FeatureManagerInterface
    */
   protected $featureManager;

@@ @@
   /**
    * The feature status service.
    *
-   * @var \Drupal\feature_toggle\FeatureStatusInterface
+   * @var FeatureStatusInterface
    */
   protected $featureStatus;

@@ @@
   /**
    * The 1st feature.
    *
-   * @var \Drupal\feature_toggle\FeatureInterface
+   * @var FeatureInterface
    */
   protected $feature1;

@@ @@
   /**
    * The 2nd feature.
    *
-   * @var \Drupal\feature_toggle\FeatureInterface
+   * @var FeatureInterface
    */
   protected $feature2;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->conditionManager = $this->container->get('plugin.manager.condition');
@@ @@
    * Tests the feature_toggle condition.
    */
   public function testConditions() {
-    /** @var \Drupal\Core\Condition\ConditionInterface $condition */
+    /** @var ConditionInterface $condition */
     $condition = $this->conditionManager->createInstance('feature_toggle')
       ->setConfig('features', [$this->feature1->name() => $this->feature1->name()]);
     $this->assertFalse($condition->execute());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/feature_toggle/tests/src/Functional/FeatureToggleWorkflowTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\feature_toggle\Functional;

+use Drupal\feature_toggle\FeatureManagerInterface;
+use Drupal\Tests\WebAssert;
 use Drupal\feature_toggle\Feature;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * The feature manager service.
    *
-   * @var \Drupal\feature_toggle\FeatureManagerInterface
+   * @var FeatureManagerInterface
    */
   protected $featureManager;

@@ @@
   /**
    * The web assert object.
    *
-   * @var \Drupal\Tests\WebAssert
+   * @var WebAssert
    */
   protected $assertSession;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->assertSession = $this->assertSession();
@@ @@
       'edit-name' => $name,
       'edit-label' => $label,
     ];
-    $this->drupalPostForm('admin/config/system/feature_toggle/add', $form_data, t('Save'));
+    $this->drupalGet('admin/config/system/feature_toggle/add');
+    $this->submitForm($form_data, t('Save'));

     // New feature created should be shown.
     $this->assertSession->linkByHrefExists('admin/config/system/feature_toggle/' . $name . '/delete');
@@ @@
     $form_data = [
       $name => 1,
     ];
-    $this->drupalPostForm(NULL, $form_data, t('Save'));
+    $this->submitForm($form_data, t('Save'));

     // Check that checkbox is checked.
     $this->assertSession->checkboxChecked($name);
@@ @@
     $form_data = [
       $name => 0,
     ];
-    $this->drupalPostForm(NULL, $form_data, t('Save'));
+    $this->submitForm($form_data, t('Save'));

     // Check that checkbox is  not checked.
     $this->assertSession->checkboxNotChecked($name);
@@ @@
     $this->clickLink('Delete');
     $this->assertSession->addressEquals('admin/config/system/feature_toggle/' . $name . '/delete');
     $this->assertSession->pageTextContains('Are you sure you want to delete the feature ' . $label . '?');
-    $this->drupalPostForm(NULL, [], t('Delete'));
+    $this->submitForm([], t('Delete'));

     // Confirm that feature has been removed.
     $this->assertSession->linkByHrefNotExists('admin/config/system/feature_toggle/' . $name . '/delete');
@@ @@
     $form_data = [
       $name => 1,
     ];
-    $this->drupalPostForm(NULL, $form_data, t('Save'));
+    $this->submitForm($form_data, t('Save'));

     // Check that checkbox is checked.
     $this->assertSession->checkboxChecked($name);
@@ @@
     $form_data = [
       $name => 0,
     ];
-    $this->drupalPostForm(NULL, $form_data, t('Save'));
+    $this->submitForm($form_data, t('Save'));

     // Check that checkbox is  not checked.
     $this->assertSession->checkboxNotChecked($name);
@@ @@

   /**
    * Tests the custom access checker to delete page.
+   * @doesNotPerformAssertions
    */
   public function testDeleteAccess() {
     $this->drupalGet('admin/config/system/feature_toggle/' . $this->randomMachineName() . '/delete');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/feature_toggle/tests/src/Functional/FeatureToggleJavascriptTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\feature_toggle\Functional;

+use Drupal\Tests\WebAssert;
+use Drupal\feature_toggle\FeatureManagerInterface;
+use Drupal\feature_toggle\FeatureStatusInterface;
 use Drupal\feature_toggle\Feature;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * The web assert object.
    *
-   * @var \Drupal\Tests\WebAssert
+   * @var WebAssert
    */
   protected $assertSession;

@@ @@
   /**
    * The feature manager service.
    *
-   * @var \Drupal\feature_toggle\FeatureManagerInterface
+   * @var FeatureManagerInterface
    */
   protected $featureManager;

@@ @@
   /**
    * The feature status service.
    *
-   * @var \Drupal\feature_toggle\FeatureStatusInterface
+   * @var FeatureStatusInterface
    */
   protected $featureStatus;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->assertSession = $this->assertSession();
@@ @@
     $settings = $this->getDrupalSettings();
     $feature_toggle_data = $settings['feature_toggle']['enabled'];
     foreach ($features as $feature) {
-      $this->assertSession->assert(in_array($feature->name(), $feature_toggle_data), 'Variable present');
+      $this->assertTrue(in_array($feature->name(), $feature_toggle_data), 'Variable present');
       // Set features to 0.
       $this->featureStatus->setStatus($feature, FALSE);
     }
@@ @@
     $settings = $this->getDrupalSettings();
     $feature_toggle_data = $settings['feature_toggle']['enabled'];
     foreach ($features as $key => $feature) {
-      $this->assertSession->assert(!in_array($feature->name(), $feature_toggle_data), 'Variable not present');
+      $this->assertTrue(!in_array($feature->name(), $feature_toggle_data), 'Variable not present');
       // Enable only even features.
       if ($key % 2 == 0) {
         $this->featureStatus->setStatus($feature, TRUE);
@@ @@
     $feature_toggle_data = $settings['feature_toggle']['enabled'];
     foreach ($features as $key => $feature) {
       if ($key % 2 == 0) {
-        $this->assertSession->assert(in_array($feature->name(), $feature_toggle_data), 'Variable present');
+        $this->assertTrue(in_array($feature->name(), $feature_toggle_data), 'Variable present');
       }
       else {
-        $this->assertSession->assert(!in_array($feature->name(), $feature_toggle_data), 'Variable not present');
+        $this->assertTrue(!in_array($feature->name(), $feature_toggle_data), 'Variable not present');
       }
     }

@@ @@
     $this->drupalGet('');
     $settings = $this->getDrupalSettings();
     $feature_toggle_data = $settings['feature_toggle']['enabled'];
-    $this->assertSession->assert(empty($feature_toggle_data), 'Array is empty');
+    $this->assertTrue(empty($feature_toggle_data), 'Array is empty');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/feature_toggle/src/Plugin/Condition/FeatureToggle.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feature_toggle\Plugin\Condition;

+use Drupal\feature_toggle\FeatureStatusInterface;
 use Drupal\Core\Condition\ConditionPluginBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\feature_toggle\FeatureInterface;
@@ @@

     $this->setConfiguration($configuration);
     $features = \Drupal::service('feature_toggle.feature_manager')->getFeatures();
-    /** @var \Drupal\feature_toggle\FeatureStatusInterface $status */
+    /** @var FeatureStatusInterface $status */
     $status = \Drupal::service('feature_toggle.feature_status');

     $features_temp = $enabled_temp = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/feature_toggle/src/Form/FeatureToggleForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The Feature Toggle Status service.
    *
-   * @var \Drupal\feature_toggle\FeatureStatusInterface
+   * @var FeatureStatusInterface
    */
   protected $featureStatus;

@@ @@
   /**
    * The Feature Manager service.
    *
-   * @var \Drupal\feature_toggle\FeatureManagerInterface
+   * @var FeatureManagerInterface
    */
   protected $featureManager;

@@ @@
   /**
    * Custom form access checker based on two permissions.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result object.
    */
   public function access(AccountInterface $account) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/feature_toggle/src/Form/FeatureDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feature_toggle\Form;

+use Drupal\feature_toggle\FeatureInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The feature manager.
    *
-   * @var \Drupal\feature_toggle\FeatureManagerInterface
+   * @var FeatureManagerInterface
    */
   protected $featureManager;

@@ @@
   /**
    * The feature to delete.
    *
-   * @var \Drupal\feature_toggle\FeatureInterface
+   * @var FeatureInterface
    */
   protected $feature;

@@ @@
   /**
    * Custom form access checker based on permissions and existing feature name.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The current user account.
    * @param string $feature_name
    *   The feature name to delete.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result object.
    */
   public function access(AccountInterface $account, $feature_name) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/feature_toggle/src/Form/FeatureAddForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\State\State definition.
    *
-   * @var \Drupal\feature_toggle\FeatureManagerInterface
+   * @var FeatureManagerInterface
    */
   protected $featureManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/feature_toggle/src/FeatureUtilsTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feature_toggle;

+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\State\StateInterface;

@@ @@
   /**
    * Drupal\Core\State\State definition.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The config object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * The Immutable Config object.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $immutableConfig;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/feature_toggle/src/FeatureStatus.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
    */
   protected function dispatch(FeatureInterface $feature, $status) {
     $event = new FeatureUpdateEvent($feature, $status);
-    $this->eventDispatcher->dispatch(FeatureUpdateEvents::UPDATE, $event);
-    $this->eventDispatcher->dispatch(FeatureUpdateEvents::UPDATE . '.' . $feature->name(), $event);
+    $this->eventDispatcher->dispatch($event, FeatureUpdateEvents::UPDATE);
+    $this->eventDispatcher->dispatch($event, FeatureUpdateEvents::UPDATE . '.' . $feature->name());
   }

 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/feature_toggle/src/FeatureManagerInterface.php:23

    ---------- begin diff ----------
@@ @@
    * @param string $name
    *   The feature name.
    *
-   * @return \Drupal\feature_toggle\FeatureInterface
+   * @return FeatureInterface
    *   The feature object.
    */
   public function getFeature($name);
@@ @@
   /**
    * Returns the list of features.
    *
-   * @return \Drupal\feature_toggle\FeatureInterface[]
+   * @return FeatureInterface[]
    *   The feature object array.
    */
   public function getFeatures();
@@ @@
   /**
    * Adds a new feature to the system.
    *
-   * @param \Drupal\feature_toggle\FeatureInterface $feature
+   * @param FeatureInterface $feature
    *   The feature object.
    */
   public function addFeature(FeatureInterface $feature);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/feature_toggle/src/Event/FeatureUpdateEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\feature_toggle\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\feature_toggle\FeatureInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Feature Update Event class.
@@ @@
   /**
    * The updated feature.
    *
-   * @var \Drupal\feature_toggle\FeatureInterface
+   * @var FeatureInterface
    */
   protected $feature;

@@ @@
   /**
    * FeatureUpdate constructor.
    *
-   * @param \Drupal\feature_toggle\FeatureInterface $feature
+   * @param FeatureInterface $feature
    *   The updated feature.
    * @param bool $status
    *   The new feature status.
@@ @@
   /**
    * Returns the feature.
    *
-   * @return \Drupal\feature_toggle\FeatureInterface
+   * @return FeatureInterface
    *   The feature triggering the event.
    */
   public function feature() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/feature_toggle/feature_toggle.theme.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * @file
  * Theme specific functions for Feature Toggle module.
@@ @@
  * @param string $key
  *   The feature to process.
  *
- * @return \Drupal\Core\Link|\Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return Link|TranslatableMarkup
  *   The row Delete field value depending on the user and the feature type.
  */
 function feature_toggle_form_delete_link($key) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/feature_toggle/feature_toggle.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\feature_toggle\FeatureStatusInterface;
+use Drupal\feature_toggle\Feature;
 /**
  * @file
  * Hook implementations of Feature Toggle module.
@@ @@
  */
 function feature_toggle_page_attachments(array &$attachments) {
   $features = \Drupal::service('feature_toggle.feature_manager')->getFeatures();
-  /** @var \Drupal\feature_toggle\FeatureStatusInterface $feature_status */
+  /** @var FeatureStatusInterface $feature_status */
   $feature_status = \Drupal::service('feature_toggle.feature_status');
   $enabled = [];
   foreach ($features as $feature) {
-    /** @var \Drupal\feature_toggle\Feature $feature */
+    /** @var Feature $feature */
     if ($feature_status->getStatus($feature->name())) {
       $enabled[] = $feature->name();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 14 files have been changed by Rector                                      

