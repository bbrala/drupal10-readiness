diff --git a/geolocation.install b/geolocation.install
index 554bcf2..3006e2d 100644
--- a/geolocation.install
+++ b/geolocation.install
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Entity\EntityFieldManager;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\views\Entity\View;
 /**
  * @file
  * Sth sth dark side.
@@ -22,7 +25,7 @@ function geolocation_update_8201(&$sandbox) {
 function geolocation_update_8202(&$sandbox) {
   \Drupal::service('plugin.cache_clearer')->clearCachedDefinitions();
 
-  /** @var \Drupal\Core\Entity\EntityFieldManager $entity_field_manager */
+  /** @var EntityFieldManager $entity_field_manager */
   $entity_field_manager = \Drupal::service('entity_field.manager');
   $geolocation_fields = $entity_field_manager->getFieldMapByFieldType('geolocation');
 
@@ -32,7 +35,7 @@ function geolocation_update_8202(&$sandbox) {
   foreach ($geolocation_fields as $entity_type => $fields) {
     foreach ($fields as $field_name => $field) {
       foreach ($field['bundles'] as $bundle) {
-        /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface[] $entity_view_displays */
+        /** @var EntityViewDisplayInterface[] $entity_view_displays */
         $entity_view_displays = \Drupal::entityTypeManager()->getStorage('entity_view_display')->loadByProperties([
           'targetEntityType' => $entity_type,
           'bundle' => $bundle,
@@ -85,7 +88,7 @@ function geolocation_update_8202(&$sandbox) {
     foreach (\Drupal::entityTypeManager()->getStorage('view')->loadMultiple() as $views_id => $view) {
       $resave_view = FALSE;
 
-      /** @var \Drupal\views\Entity\View $view */
+      /** @var View $view */
       $displays = $view->get('display');
       foreach ($displays as $display_id => $display) {
         if (empty($display['display_options']['style']['type'])) {
@@ -155,7 +158,7 @@ function geolocation_update_8203(&$sandbox) {
   foreach (\Drupal::entityTypeManager()->getStorage('view')->loadMultiple() as $views_id => $view) {
     $resave_view = FALSE;
 
-    /** @var \Drupal\views\Entity\View $view */
+    /** @var View $view */
     $displays = $view->get('display');
     foreach ($displays as $display_id => $display) {
       if (
diff --git a/geolocation.tokens.inc b/geolocation.tokens.inc
index 7958c35..21a92f3 100644
--- a/geolocation.tokens.inc
+++ b/geolocation.tokens.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\geolocation\Plugin\Field\FieldType\GeolocationItem;
 /**
  * @file
  * Token integration geolocation field type.
@@ -28,7 +30,7 @@ function geolocation_token_info() {
       continue;
     }
 
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $fields */
+    /** @var FieldStorageDefinitionInterface[] $fields */
     $fields = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions($entity_type_id);
     foreach ($fields as $field_name => $field) {
       if ($field->getType() != 'geolocation') {
@@ -88,7 +90,7 @@ function geolocation_tokens($type, $tokens, array $data, array $options, Bubblea
         continue;
       }
 
-      /** @var \Drupal\geolocation\Plugin\Field\FieldType\GeolocationItem $item */
+      /** @var GeolocationItem $item */
       $item = $data[$data['field_name']][$delta];
 
       switch ($property_name) {
diff --git a/modules/geolocation_address/geolocation_address.module b/modules/geolocation_address/geolocation_address.module
index 516aa3a..994bce1 100644
--- a/modules/geolocation_address/geolocation_address.module
+++ b/modules/geolocation_address/geolocation_address.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\geolocation_google_maps\Plugin\Field\FieldWidget\GeolocationGoogleWidget;
+use Drupal\geolocation\GeocoderManager;
 /**
  * @file
  * Provide address integration where due.
@@ -16,10 +18,10 @@ use Drupal\geolocation_address\Plugin\migrate\field\Location;
  * Implements hook_geolocation_field_map_widget_alter().
  */
 function geolocation_address_geolocation_field_map_widget_alter(&$element, $context) {
-  /** @var \Drupal\geolocation\Plugin\Field\FieldWidget\GeolocationMapWidgetBase $widget */
+  /** @var GeolocationMapWidgetBase $widget */
   $widget = $context['widget'];
 
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
+  /** @var FieldDefinitionInterface $field_definition */
   $field_definition = $context['field_definition'];
 
   $settings = geolocation_address_get_widget_settings($widget);
@@ -29,7 +31,7 @@ function geolocation_address_geolocation_field_map_widget_alter(&$element, $cont
   }
 
   $address_label = t('Address');
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $all_field_definitions */
+  /** @var FieldDefinitionInterface[] $all_field_definitions */
   $all_field_definitions = Drupal::service('entity_field.manager')->getFieldDefinitions(
     $field_definition->getTargetEntityTypeId(),
     $field_definition->getTargetBundle()
@@ -125,8 +127,7 @@ function geolocation_address_field_widget_third_party_settings_form(WidgetInterf
     return [];
   }
 
-  /** @var \Drupal\geolocation_google_maps\Plugin\Field\FieldWidget\GeolocationGoogleWidget $widget */
-
+  /** @var GeolocationGoogleWidget $widget */
   $field_storage_definition = $field_definition->getFieldStorageDefinition();
 
   $form_parent_name = 'fields[' . $field_definition->getName() . '][settings_edit_form][third_party_settings][geolocation_address]';
@@ -136,7 +137,7 @@ function geolocation_address_field_widget_third_party_settings_form(WidgetInterf
     $settings['geocoder'] = $form_state->getTriggeringElement()['#value'];
   }
 
-  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $all_field_definitions */
+  /** @var FieldDefinitionInterface[] $all_field_definitions */
   $all_field_definitions = Drupal::service('entity_field.manager')->getFieldDefinitions($field_definition->getTargetEntityTypeId(), $field_definition->getTargetBundle());
 
   $address_fields = [];
@@ -153,7 +154,7 @@ function geolocation_address_field_widget_third_party_settings_form(WidgetInterf
     return [];
   }
 
-  /** @var \Drupal\geolocation\GeocoderManager $geocoder_manager */
+  /** @var GeocoderManager $geocoder_manager */
   $geocoder_manager = Drupal::service('plugin.manager.geolocation.geocoder');
 
   $geocoder_options = [];
@@ -328,7 +329,7 @@ function geolocation_address_field_widget_third_party_settings_form(WidgetInterf
  * Implements hook_field_widget_settings_summary_alter().
  */
 function geolocation_address_field_widget_settings_summary_alter(&$summary, $context) {
-  /** @var \Drupal\geolocation\Plugin\Field\FieldWidget\GeolocationMapWidgetBase $widget */
+  /** @var GeolocationMapWidgetBase $widget */
   $widget = $context['widget'];
 
   if (!($widget instanceof GeolocationMapWidgetBase)) {
@@ -345,7 +346,7 @@ function geolocation_address_field_widget_settings_summary_alter(&$summary, $con
 /**
  * Returns geolocation_address third party settings of a widget.
  *
- * @param \Drupal\Core\Field\WidgetInterface $widget
+ * @param WidgetInterface $widget
  *   The widget.
  *
  * @return array
diff --git a/modules/geolocation_address/src/Controller/GeocoderController.php b/modules/geolocation_address/src/Controller/GeocoderController.php
index 7be3def..4f2c64d 100644
--- a/modules/geolocation_address/src/Controller/GeocoderController.php
+++ b/modules/geolocation_address/src/Controller/GeocoderController.php
@@ -18,7 +18,7 @@ class GeocoderController extends ControllerBase {
   /**
    * Geocoder Manager.
    *
-   * @var \Drupal\geolocation\GeocoderManager
+   * @var GeocoderManager
    */
   protected $geocoderManager = NULL;
 
@@ -34,7 +34,7 @@ class GeocoderController extends ControllerBase {
   /**
    * Constructs a BlockContent object.
    *
-   * @param \Drupal\geolocation\GeocoderManager $geocoder_manager
+   * @param GeocoderManager $geocoder_manager
    *   Geocoder manager.
    */
   public function __construct(GeocoderManager $geocoder_manager) {
@@ -44,10 +44,10 @@ class GeocoderController extends ControllerBase {
   /**
    * Return coordinates.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current Request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Geocoded coordinates.
    */
   public function geocode(Request $request) {
@@ -64,10 +64,10 @@ class GeocoderController extends ControllerBase {
   /**
    * Return formatted address data.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Current Request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Formatted address.
    */
   public function reverse(Request $request) {
diff --git a/modules/geolocation_address/src/Plugin/geolocation/DataProvider/AddressFieldProvider.php b/modules/geolocation_address/src/Plugin/geolocation/DataProvider/AddressFieldProvider.php
index de29bd3..08a945b 100644
--- a/modules/geolocation_address/src/Plugin/geolocation/DataProvider/AddressFieldProvider.php
+++ b/modules/geolocation_address/src/Plugin/geolocation/DataProvider/AddressFieldProvider.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\geolocation_address\Plugin\geolocation\DataProvider;
 
+use Drupal\geolocation\GeocoderInterface;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\address\Plugin\Field\FieldType\AddressItem;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -30,14 +32,14 @@ class AddressFieldProvider extends DataProviderBase implements DataProviderInter
   /**
    * Geocoder manager.
    *
-   * @var \Drupal\geolocation\GeocoderManager
+   * @var GeocoderManager
    */
   protected $geocoderManager = NULL;
 
   /**
    * Geocoder.
    *
-   * @var \Drupal\geolocation\GeocoderInterface
+   * @var GeocoderInterface
    */
   protected $geocoder = NULL;
 
@@ -64,16 +66,16 @@ class AddressFieldProvider extends DataProviderBase implements DataProviderInter
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity type manager.
-   * @param \Drupal\geolocation\GeocoderManager $geocoder_manager
+   * @param GeocoderManager $geocoder_manager
    *   Geocoder Manager.
    * @param \CommerceGuys\Addressing\AddressFormat\AddressFormatRepositoryInterface $address_format_repository
    *   The address format repository.
    * @param \CommerceGuys\Addressing\Country\CountryRepositoryInterface $country_repository
    *   The country repository.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityFieldManagerInterface $entity_field_manager, GeocoderManager $geocoder_manager, AddressFormatRepositoryInterface $address_format_repository, CountryRepositoryInterface $country_repository) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_field_manager);
@@ -109,7 +111,7 @@ class AddressFieldProvider extends DataProviderBase implements DataProviderInter
   public function isViewsGeoOption(FieldPluginBase $views_field) {
     if ($views_field instanceof EntityField) {
 
-      /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
+      /** @var EntityFieldManagerInterface $entityFieldManager */
       $entityFieldManager = \Drupal::service('entity_field.manager');
 
       $field_map = $entityFieldManager->getFieldMap();
diff --git a/modules/geolocation_baidu/geolocation_baidu.module b/modules/geolocation_baidu/geolocation_baidu.module
index 2e9d832..a3c25d9 100644
--- a/modules/geolocation_baidu/geolocation_baidu.module
+++ b/modules/geolocation_baidu/geolocation_baidu.module
@@ -1,15 +1,15 @@
 <?php
 
+use Drupal\geolocation_baidu\Plugin\geolocation\MapProvider\Baidu;
 /**
  * @file
  * Baidu Maps hooks.
  */
-
 /**
  * Implements hook_library_info_build().
  */
 function geolocation_baidu_library_info_build() {
-  /** @var \Drupal\geolocation_baidu\Plugin\geolocation\MapProvider\Baidu $baidu */
+  /** @var Baidu $baidu */
   $baidu = Drupal::service('plugin.manager.geolocation.mapprovider')->getMapProvider('baidu');
 
   $libraries = [];
diff --git a/modules/geolocation_demo/geolocation_demo.install b/modules/geolocation_demo/geolocation_demo.install
index 18c04fa..c9abe39 100644
--- a/modules/geolocation_demo/geolocation_demo.install
+++ b/modules/geolocation_demo/geolocation_demo.install
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\node\NodeInterface;
 /**
  * @file
  * Geolocation demo setup.
@@ -14,7 +17,7 @@ use Drupal\field\Entity\FieldStorageConfig;
  */
 function geolocation_demo_install() {
 
-  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
+  /** @var ModuleHandlerInterface $module_handler */
   $module_handler = \Drupal::service('module_handler');
 
   if (
@@ -29,16 +32,16 @@ function geolocation_demo_install() {
 
     $taxonomy_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
 
-    $icon_path = drupal_get_path('module', 'geolocation_demo') . '/icons/';
+    $icon_path = \Drupal::service('extension.list.module')->getPath('geolocation_demo') . '/icons/';
 
-    /** @var \Drupal\taxonomy\TermInterface $term_a */
+    /** @var TermInterface $term_a */
     $term_a = $taxonomy_storage->create([
       'vid' => 'geolocation_demo_taxonomy',
       'name' => 'Class A',
     ]);
 
     $data = file_get_contents($icon_path . 'druplicon-deadpool.png');
-    $file = file_save_data($data, 'public://druplicon-deadpool.png', FileSystemInterface::EXISTS_REPLACE);
+    $file = \Drupal::service('file.repository')->writeData($data, 'public://druplicon-deadpool.png', FileSystemInterface::EXISTS_REPLACE);
     if ($file) {
       $term_a->set('field_geolocation_demo_term_icon', [
         'target_id' => $file->id(),
@@ -48,14 +51,14 @@ function geolocation_demo_install() {
     $term_a->save();
     $term_ids[] = $term_a->id();
 
-    /** @var \Drupal\taxonomy\TermInterface $term_b */
+    /** @var TermInterface $term_b */
     $term_b = $taxonomy_storage->create([
       'vid' => 'geolocation_demo_taxonomy',
       'name' => 'Class B',
     ]);
 
     $data = file_get_contents($icon_path . 'druplicon-wolverine.png');
-    $file = file_save_data($data, 'public://druplicon-wolverine.png', FileSystemInterface::EXISTS_REPLACE);
+    $file = \Drupal::service('file.repository')->writeData($data, 'public://druplicon-wolverine.png', FileSystemInterface::EXISTS_REPLACE);
     if ($file) {
       $term_b->set('field_geolocation_demo_term_icon', [
         'target_id' => $file->id(),
@@ -65,14 +68,14 @@ function geolocation_demo_install() {
     $term_b->save();
     $term_ids[] = $term_b->id();
 
-    /** @var \Drupal\taxonomy\TermInterface $term_c */
+    /** @var TermInterface $term_c */
     $term_c = $taxonomy_storage->create([
       'vid' => 'geolocation_demo_taxonomy',
       'name' => 'Class C',
     ]);
 
     $data = file_get_contents($icon_path . 'druplicon-wonder-woman.png');
-    $file = file_save_data($data, 'public://druplicon-wonder-woman.png', FileSystemInterface::EXISTS_REPLACE);
+    $file = \Drupal::service('file.repository')->writeData($data, 'public://druplicon-wonder-woman.png', FileSystemInterface::EXISTS_REPLACE);
     if ($file) {
       $term_c->set('field_geolocation_demo_term_icon', [
         'target_id' => $file->id(),
@@ -92,7 +95,7 @@ function geolocation_demo_install() {
         'type' => 'geolocation_default_article',
         'title' => $random->sentences(3, TRUE),
       ]);
-      /** @var \Drupal\node\NodeInterface $node */
+      /** @var NodeInterface $node */
       $node->get('field_geolocation_demo_single')->generateSampleItems();
       $node->get('field_geolocation_demo_multiple')->generateSampleItems(3);
       $node->get('field_geolocation_demo_taxonomy')->appendItem([
@@ -104,14 +107,14 @@ function geolocation_demo_install() {
     /*
      * Created defined unique node term relationship.
      */
-    /** @var \Drupal\taxonomy\TermInterface $term_single */
+    /** @var TermInterface $term_single */
     $term_single = $taxonomy_storage->create([
       'vid' => 'geolocation_demo_taxonomy',
       'name' => 'Class Single',
     ]);
 
     $data = file_get_contents($icon_path . 'druplicon-nick-fury.png');
-    $file = file_save_data($data, 'public://druplicon-nick-fury.png', FileSystemInterface::EXISTS_REPLACE);
+    $file = \Drupal::service('file.repository')->writeData($data, 'public://druplicon-nick-fury.png', FileSystemInterface::EXISTS_REPLACE);
     if ($file) {
       $term_single->set('field_geolocation_demo_term_icon', [
         'target_id' => $file->id(),
@@ -124,7 +127,7 @@ function geolocation_demo_install() {
       'type' => 'geolocation_default_article',
       'title' => 'Geolocation with unique associated term "Class Single"',
     ]);
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node->get('field_geolocation_demo_single')->appendItem([
       'lat' => 52,
       'lng' => 34,
diff --git a/modules/geolocation_demo/src/Controller/DemoFormattersController.php b/modules/geolocation_demo/src/Controller/DemoFormattersController.php
index 31cf426..81eb498 100644
--- a/modules/geolocation_demo/src/Controller/DemoFormattersController.php
+++ b/modules/geolocation_demo/src/Controller/DemoFormattersController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_demo\Controller;
 
+use Drupal\node\NodeInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ -17,14 +18,14 @@ class DemoFormattersController extends ControllerBase {
   /**
    * Drupal\Core\Field\FormatterPluginManager definition.
    *
-   * @var \Drupal\Core\Field\FormatterPluginManager
+   * @var FormatterPluginManager
    */
   protected $pluginManagerFieldFormatter;
 
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
@@ -49,9 +50,9 @@ class DemoFormattersController extends ControllerBase {
   /**
    * Return the non-functional geocoding widget form.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Page request object.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return array
@@ -59,7 +60,7 @@ class DemoFormattersController extends ControllerBase {
    */
   public function formatters(Request $request, RouteMatchInterface $route_match) {
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->entityTypeManager->getStorage('node')->create([
       'type' => 'geolocation_default_article',
     ]);
diff --git a/modules/geolocation_demo/src/Controller/DemoRenderElementController.php b/modules/geolocation_demo/src/Controller/DemoRenderElementController.php
index 0b59914..3acc5d2 100644
--- a/modules/geolocation_demo/src/Controller/DemoRenderElementController.php
+++ b/modules/geolocation_demo/src/Controller/DemoRenderElementController.php
@@ -14,9 +14,9 @@ class DemoRenderElementController extends ControllerBase {
   /**
    * Return the non-functional geocoding widget form.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Page request object.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    *
    * @return array
diff --git a/modules/geolocation_demo/src/Form/DemoWidget.php b/modules/geolocation_demo/src/Form/DemoWidget.php
index 15500ff..97b1269 100644
--- a/modules/geolocation_demo/src/Form/DemoWidget.php
+++ b/modules/geolocation_demo/src/Form/DemoWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_demo\Form;
 
+use Drupal\node\NodeInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ -16,14 +17,14 @@ abstract class DemoWidget extends FormBase {
   /**
    * Drupal\Core\Field\WidgetPluginManager definition.
    *
-   * @var \Drupal\Core\Field\WidgetPluginManager
+   * @var WidgetPluginManager
    */
   protected $pluginManagerFieldWidget;
 
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;
 
@@ -50,7 +51,7 @@ abstract class DemoWidget extends FormBase {
    */
   public function getWidgetForm($widget_id, array $form, FormStateInterface $form_state) {
 
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->entityTypeManager->getStorage('node')->create([
       'type' => 'geolocation_default_article',
     ]);
diff --git a/modules/geolocation_geometry/geolocation_geometry.views.inc b/modules/geolocation_geometry/geolocation_geometry.views.inc
index 15d167c..1c08147 100644
--- a/modules/geolocation_geometry/geolocation_geometry.views.inc
+++ b/modules/geolocation_geometry/geolocation_geometry.views.inc
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Entity\Sql\SqlEntityStorageInterface;
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
 /**
  * @file
  * Provide views data for geolocation.module.
@@ -26,7 +28,7 @@ function geolocation_geometry_field_views_data(FieldStorageConfigInterface $fiel
     ] as $field_type
   ) {
     foreach (\Drupal::service('entity_field.manager')->getFieldMapByFieldType($field_type) as $entity_type => $geometry_field_list) {
-      /** @var \Drupal\Core\Entity\Sql\SqlEntityStorageInterface $entity_storage */
+      /** @var SqlEntityStorageInterface $entity_storage */
       $entity_storage = \Drupal::entityTypeManager()->getStorage($entity_type);
       $entity_definition = \Drupal::entityTypeManager()->getDefinition($entity_type);
       $entity_table_mapping = $entity_storage->getTableMapping();
@@ -218,7 +220,7 @@ function geolocation_geometry_field_views_data(FieldStorageConfigInterface $fiel
  */
 function geolocation_geometry_field_views_data_views_data_alter(array &$data, FieldStorageConfigInterface $field_storage) {
   $entity_type = $field_storage->getTargetEntityTypeId();
-  /** @var \Drupal\Core\Entity\Sql\SqlEntityStorageInterface $entity_storage */
+  /** @var SqlEntityStorageInterface $entity_storage */
   $entity_storage = \Drupal::entityTypeManager()->getStorage($entity_type);
   $entity_definition = \Drupal::entityTypeManager()->getDefinition($entity_type);
   $entity_table_mapping = $entity_storage->getTableMapping();
@@ -236,7 +238,7 @@ function geolocation_geometry_field_views_data_views_data_alter(array &$data, Fi
   ];
 
   foreach (\Drupal::service('entity_field.manager')->getFieldMapByFieldType('geolocation') as $entity_type => $geolocation_fields) {
-    /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $geolocation_table_mapping */
+    /** @var DefaultTableMapping $geolocation_table_mapping */
     $geolocation_table_mapping = \Drupal::entityTypeManager()->getStorage($entity_type)->getTableMapping();
 
     foreach ($geolocation_fields as $geolocation_field_name => $geolocation_field_data) {
diff --git a/modules/geolocation_geometry/modules/geolocation_geometry_data/src/Annotation/GeolocationGeometryData.php b/modules/geolocation_geometry/modules/geolocation_geometry_data/src/Annotation/GeolocationGeometryData.php
index 8ee68ad..b77bf53 100644
--- a/modules/geolocation_geometry/modules/geolocation_geometry_data/src/Annotation/GeolocationGeometryData.php
+++ b/modules/geolocation_geometry/modules/geolocation_geometry_data/src/Annotation/GeolocationGeometryData.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry_data\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -21,7 +22,7 @@ class GeolocationGeometryData extends Plugin {
   /**
    * The name of the MapProvider.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -30,7 +31,7 @@ class GeolocationGeometryData extends Plugin {
   /**
    * The description of the MapProvider.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/modules/geolocation_geometry/modules/geolocation_geometry_data/src/GeolocationGeometryDataBase.php b/modules/geolocation_geometry/modules/geolocation_geometry_data/src/GeolocationGeometryDataBase.php
index fababe3..28c331a 100644
--- a/modules/geolocation_geometry/modules/geolocation_geometry_data/src/GeolocationGeometryDataBase.php
+++ b/modules/geolocation_geometry/modules/geolocation_geometry_data/src/GeolocationGeometryDataBase.php
@@ -73,7 +73,7 @@ abstract class GeolocationGeometryDataBase {
   /**
    * Download batch callback.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Batch return.
    */
   public function download(): TranslatableMarkup {
@@ -110,7 +110,7 @@ abstract class GeolocationGeometryDataBase {
    * @param mixed $context
    *   Batch context.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup|null
+   * @return TranslatableMarkup|null
    *   Batch return.
    */
   public function import(&$context): ?TranslatableMarkup {
diff --git a/modules/geolocation_geometry/modules/geolocation_geometry_data/src/GeolocationGeometryDataManager.php b/modules/geolocation_geometry/modules/geolocation_geometry_data/src/GeolocationGeometryDataManager.php
index 1bcd242..0e6a3bc 100644
--- a/modules/geolocation_geometry/modules/geolocation_geometry_data/src/GeolocationGeometryDataManager.php
+++ b/modules/geolocation_geometry/modules/geolocation_geometry_data/src/GeolocationGeometryDataManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry_data;
 
+use Symfony\Component\HttpFoundation\RedirectResponse;
 use Drupal\Core\Plugin\DefaultPluginManager;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -17,9 +18,9 @@ class GeolocationGeometryDataManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ -60,7 +61,7 @@ class GeolocationGeometryDataManager extends DefaultPluginManager {
    * @param array $batch_settings
    *   Batch settings.
    *
-   * @return array|\Symfony\Component\HttpFoundation\RedirectResponse|null
+   * @return array|RedirectResponse|null
    *   Batch process.
    */
   public function executeGemeotryDataBatch(array $batch_settings) {
diff --git a/modules/geolocation_geometry/modules/geolocation_geometry_demo/geolocation_geometry_demo.install b/modules/geolocation_geometry/modules/geolocation_geometry_demo/geolocation_geometry_demo.install
index e8fa4e1..b14fb50 100644
--- a/modules/geolocation_geometry/modules/geolocation_geometry_demo/geolocation_geometry_demo.install
+++ b/modules/geolocation_geometry/modules/geolocation_geometry_demo/geolocation_geometry_demo.install
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\node\NodeInterface;
 /**
  * @file
  * Geolocation demo setup.
@@ -13,7 +15,7 @@ use Drupal\field\Entity\FieldStorageConfig;
  */
 function geolocation_geometry_demo_install() {
 
-  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
+  /** @var ModuleHandlerInterface $module_handler */
   $module_handler = \Drupal::service('module_handler');
 
   if (
@@ -30,7 +32,7 @@ function geolocation_geometry_demo_install() {
         'type' => 'geolocation_geometry_demo',
         'title' => $random->sentences(3, TRUE),
       ]);
-      /** @var \Drupal\node\NodeInterface $node */
+      /** @var NodeInterface $node */
       $node->get('field_geolocation_geometry_point')->generateSampleItems();
       $node->get('field_geolocation_geometry_polyg')->generateSampleItems(3);
 
@@ -42,7 +44,7 @@ function geolocation_geometry_demo_install() {
       'type' => 'geolocation_geometry_demo',
       'title' => 'Static Geolocation Geometry Demo - Wanaka NZ',
     ]);
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node->get('field_geolocation_geometry_point')->appendItem([
       'geojson' => '{"type": "Point", "coordinates": [169.1217044, -44.6891741]}',
     ]);
diff --git a/modules/geolocation_geometry/modules/geolocation_geometry_germany_zip_codes/geolocation_geometry_germany_zip_codes.install b/modules/geolocation_geometry/modules/geolocation_geometry_germany_zip_codes/geolocation_geometry_germany_zip_codes.install
index 8156bf4..7469a6c 100644
--- a/modules/geolocation_geometry/modules/geolocation_geometry_germany_zip_codes/geolocation_geometry_germany_zip_codes.install
+++ b/modules/geolocation_geometry/modules/geolocation_geometry_germany_zip_codes/geolocation_geometry_germany_zip_codes.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\geolocation_geometry_data\GeolocationGeometryDataManager;
 /**
  * @file
  * Geolocation Geometry country import.
@@ -9,7 +10,7 @@
  * Implements hook_install().
  */
 function geolocation_geometry_germany_zip_codes_install() {
-  /** @var \Drupal\geolocation_geometry_data\GeolocationGeometryDataManager $geometry_data_manager */
+  /** @var GeolocationGeometryDataManager $geometry_data_manager */
   $geometry_data_manager = \Drupal::service('plugin.manager.geolocation.geometrydata');
   return $geometry_data_manager->executeGemeotryDataBatch($geometry_data_manager->getGemeotryDataBatch('germany_zip_codes'));
 }
diff --git a/modules/geolocation_geometry/modules/geolocation_geometry_germany_zip_codes/src/Plugin/geolocation/GeolocationGeometryData/GermanyZipCodes.php b/modules/geolocation_geometry/modules/geolocation_geometry_germany_zip_codes/src/Plugin/geolocation/GeolocationGeometryData/GermanyZipCodes.php
index 5fbb2e2..80c27c1 100644
--- a/modules/geolocation_geometry/modules/geolocation_geometry_germany_zip_codes/src/Plugin/geolocation/GeolocationGeometryData/GermanyZipCodes.php
+++ b/modules/geolocation_geometry/modules/geolocation_geometry_germany_zip_codes/src/Plugin/geolocation/GeolocationGeometryData/GermanyZipCodes.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry_germany_zip_codes\Plugin\geolocation\GeolocationGeometryData;
 
+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Shapefile\ShapefileException;
 use Drupal\geolocation_geometry_data\GeolocationGeometryDataBase;
@@ -52,7 +53,7 @@ class GermanyZipCodes extends GeolocationGeometryDataBase {
           continue;
         }
 
-        /** @var \Drupal\taxonomy\TermInterface $term */
+        /** @var TermInterface $term */
         $term = $taxonomy_storage->create([
           'vid' => 'germany_zip_codes',
           'name' => $record->getData('PLZ'),
diff --git a/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_countries/geolocation_geometry_natural_earth_countries.install b/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_countries/geolocation_geometry_natural_earth_countries.install
index 0f3ed51..19abe04 100644
--- a/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_countries/geolocation_geometry_natural_earth_countries.install
+++ b/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_countries/geolocation_geometry_natural_earth_countries.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\geolocation_geometry_data\GeolocationGeometryDataManager;
 /**
  * @file
  * Geolocation Geometry country import.
@@ -9,7 +10,7 @@
  * Implements hook_install().
  */
 function geolocation_geometry_natural_earth_countries_install() {
-  /** @var \Drupal\geolocation_geometry_data\GeolocationGeometryDataManager $geometry_data_manager */
+  /** @var GeolocationGeometryDataManager $geometry_data_manager */
   $geometry_data_manager = \Drupal::service('plugin.manager.geolocation.geometrydata');
   return $geometry_data_manager->executeGemeotryDataBatch($geometry_data_manager->getGemeotryDataBatch('natural_earth_countries'));
 }
diff --git a/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_countries/src/Plugin/geolocation/GeolocationGeometryData/NaturalEarthCountries.php b/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_countries/src/Plugin/geolocation/GeolocationGeometryData/NaturalEarthCountries.php
index 5d98665..11e5cdd 100644
--- a/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_countries/src/Plugin/geolocation/GeolocationGeometryData/NaturalEarthCountries.php
+++ b/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_countries/src/Plugin/geolocation/GeolocationGeometryData/NaturalEarthCountries.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry_natural_earth_countries\Plugin\geolocation\GeolocationGeometryData;
 
+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Shapefile\ShapefileException;
 use Drupal\geolocation_geometry_data\GeolocationGeometryDataBase;
@@ -52,7 +53,7 @@ class NaturalEarthCountries extends GeolocationGeometryDataBase {
           continue;
         }
 
-        /** @var \Drupal\taxonomy\TermInterface $term */
+        /** @var TermInterface $term */
         $term = $taxonomy_storage->create([
           'vid' => 'geolocation_geometry_countries',
           'name' => $record->getData('NAME'),
diff --git a/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_us_states/geolocation_geometry_natural_earth_us_states.install b/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_us_states/geolocation_geometry_natural_earth_us_states.install
index f8ab830..68d61bf 100644
--- a/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_us_states/geolocation_geometry_natural_earth_us_states.install
+++ b/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_us_states/geolocation_geometry_natural_earth_us_states.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\geolocation_geometry_data\GeolocationGeometryDataManager;
 /**
  * @file
  * Geolocation Geometry country import.
@@ -9,7 +10,7 @@
  * Implements hook_install().
  */
 function geolocation_geometry_natural_earth_us_states_install() {
-  /** @var \Drupal\geolocation_geometry_data\GeolocationGeometryDataManager $geometry_data_manager */
+  /** @var GeolocationGeometryDataManager $geometry_data_manager */
   $geometry_data_manager = \Drupal::service('plugin.manager.geolocation.geometrydata');
   return $geometry_data_manager->executeGemeotryDataBatch($geometry_data_manager->getGemeotryDataBatch('natural_earth_us_states'));
 }
diff --git a/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_us_states/src/Plugin/geolocation/GeolocationGeometryData/UsStates.php b/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_us_states/src/Plugin/geolocation/GeolocationGeometryData/UsStates.php
index c477503..1131b35 100644
--- a/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_us_states/src/Plugin/geolocation/GeolocationGeometryData/UsStates.php
+++ b/modules/geolocation_geometry/modules/geolocation_geometry_natural_earth_us_states/src/Plugin/geolocation/GeolocationGeometryData/UsStates.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry_natural_earth_us_states\Plugin\geolocation\GeolocationGeometryData;
 
+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Shapefile\ShapefileException;
 use Drupal\geolocation_geometry_data\GeolocationGeometryDataBase;
@@ -52,7 +53,7 @@ class UsStates extends GeolocationGeometryDataBase {
           continue;
         }
 
-        /** @var \Drupal\taxonomy\TermInterface $term */
+        /** @var TermInterface $term */
         $term = $taxonomy_storage->create([
           'vid' => 'geolocation_us_states',
           'name' => $record->getData('NAME'),
diff --git a/modules/geolocation_geometry/modules/geolocation_geometry_open_canada_provinces/geolocation_geometry_open_canada_provinces.install b/modules/geolocation_geometry/modules/geolocation_geometry_open_canada_provinces/geolocation_geometry_open_canada_provinces.install
index 876c20e..2a72996 100644
--- a/modules/geolocation_geometry/modules/geolocation_geometry_open_canada_provinces/geolocation_geometry_open_canada_provinces.install
+++ b/modules/geolocation_geometry/modules/geolocation_geometry_open_canada_provinces/geolocation_geometry_open_canada_provinces.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\geolocation_geometry_data\GeolocationGeometryDataManager;
 /**
  * @file
  * Geolocation Geometry country import.
@@ -9,7 +10,7 @@
  * Implements hook_install().
  */
 function geolocation_geometry_open_canada_provinces_install() {
-  /** @var \Drupal\geolocation_geometry_data\GeolocationGeometryDataManager $geometry_data_manager */
+  /** @var GeolocationGeometryDataManager $geometry_data_manager */
   $geometry_data_manager = \Drupal::service('plugin.manager.geolocation.geometrydata');
   return $geometry_data_manager->executeGemeotryDataBatch($geometry_data_manager->getGemeotryDataBatch('open_canada_provinces'));
 }
diff --git a/modules/geolocation_geometry/modules/geolocation_geometry_open_canada_provinces/src/Plugin/geolocation/GeolocationGeometryData/CanadaProvinces.php b/modules/geolocation_geometry/modules/geolocation_geometry_open_canada_provinces/src/Plugin/geolocation/GeolocationGeometryData/CanadaProvinces.php
index a78c40f..1dcfab4 100644
--- a/modules/geolocation_geometry/modules/geolocation_geometry_open_canada_provinces/src/Plugin/geolocation/GeolocationGeometryData/CanadaProvinces.php
+++ b/modules/geolocation_geometry/modules/geolocation_geometry_open_canada_provinces/src/Plugin/geolocation/GeolocationGeometryData/CanadaProvinces.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry_open_canada_provinces\Plugin\geolocation\GeolocationGeometryData;
 
+use Drupal\taxonomy\TermInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Shapefile\ShapefileException;
 use Drupal\geolocation_geometry_data\GeolocationGeometryDataBase;
@@ -57,7 +58,7 @@ class CanadaProvinces extends GeolocationGeometryDataBase {
           continue;
         }
 
-        /** @var \Drupal\taxonomy\TermInterface $term */
+        /** @var TermInterface $term */
         $term = $taxonomy_storage->create([
           'vid' => 'geolocation_provinces_of_canada',
           'name' => $name,
diff --git a/modules/geolocation_geometry/modules/geolocation_geometry_world_heritage/geolocation_geometry_world_heritage.install b/modules/geolocation_geometry/modules/geolocation_geometry_world_heritage/geolocation_geometry_world_heritage.install
index 5135be3..e31fb56 100644
--- a/modules/geolocation_geometry/modules/geolocation_geometry_world_heritage/geolocation_geometry_world_heritage.install
+++ b/modules/geolocation_geometry/modules/geolocation_geometry_world_heritage/geolocation_geometry_world_heritage.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\geolocation_geometry_data\GeolocationGeometryDataManager;
 /**
  * @file
  * Geolocation Geometry heritage sites import.
@@ -11,7 +12,7 @@ use Drupal\field\Entity\FieldStorageConfig;
  * Implements hook_install().
  */
 function geolocation_geometry_world_heritage_install() {
-  /** @var \Drupal\geolocation_geometry_data\GeolocationGeometryDataManager $geometry_data_manager */
+  /** @var GeolocationGeometryDataManager $geometry_data_manager */
   $geometry_data_manager = \Drupal::service('plugin.manager.geolocation.geometrydata');
   return $geometry_data_manager->executeGemeotryDataBatch($geometry_data_manager->getGemeotryDataBatch('unesco_world_heritage'));
 }
diff --git a/modules/geolocation_geometry/modules/geolocation_geometry_world_heritage/src/Plugin/geolocation/GeolocationGeometryData/UnescoWorldHeritage.php b/modules/geolocation_geometry/modules/geolocation_geometry_world_heritage/src/Plugin/geolocation/GeolocationGeometryData/UnescoWorldHeritage.php
index b11dea0..eb0e01c 100644
--- a/modules/geolocation_geometry/modules/geolocation_geometry_world_heritage/src/Plugin/geolocation/GeolocationGeometryData/UnescoWorldHeritage.php
+++ b/modules/geolocation_geometry/modules/geolocation_geometry_world_heritage/src/Plugin/geolocation/GeolocationGeometryData/UnescoWorldHeritage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry_world_heritage\Plugin\geolocation\GeolocationGeometryData;
 
+use Drupal\taxonomy\TermInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\geolocation_geometry_data\GeolocationGeometryDataBase;
@@ -34,7 +35,7 @@ class UnescoWorldHeritage extends GeolocationGeometryDataBase {
   /**
    * Download batch callback.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Batch return.
    */
   public function download(): TranslatableMarkup {
@@ -72,7 +73,7 @@ class UnescoWorldHeritage extends GeolocationGeometryDataBase {
 
     try {
       foreach (simplexml_load_file($filename) as $site) {
-        /** @var \Drupal\taxonomy\TermInterface $term */
+        /** @var TermInterface $term */
         $node = $node_storage->create([
           'type' => 'unesco_world_heritage',
           'title' => Html::decodeEntities(strip_tags($site->site)),
diff --git a/modules/geolocation_geometry/src/Plugin/Field/FieldType/GeolocationGeometryBase.php b/modules/geolocation_geometry/src/Plugin/Field/FieldType/GeolocationGeometryBase.php
index 1898194..f1b40c9 100644
--- a/modules/geolocation_geometry/src/Plugin/Field/FieldType/GeolocationGeometryBase.php
+++ b/modules/geolocation_geometry/src/Plugin/Field/FieldType/GeolocationGeometryBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\geolocation_geometry\Plugin\Field\FieldType;
 
+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ -90,12 +92,12 @@ abstract class GeolocationGeometryBase extends FieldItemBase {
       return FALSE;
     }
 
-    /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $entity_storage */
+    /** @var SqlContentEntityStorage $entity_storage */
     $table_mapping = $entity_storage->getTableMapping();
     $field_storage_definition = $this->getFieldDefinition()->getFieldStorageDefinition();
 
     if ($entity->getEntityType()->isRevisionable()) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $query = \Drupal::database()->update($table_mapping->getDedicatedRevisionTableName($field_storage_definition));
       if (!empty($this->values['geojson'])) {
         $query->expression($field_storage_definition->getName() . '_geometry', 'ST_GeomFromGeoJSON(' . $field_storage_definition->getName() . '_geojson)');
diff --git a/modules/geolocation_geometry/src/Plugin/geolocation/Location/GeometryViewsProximityFilter.php b/modules/geolocation_geometry/src/Plugin/geolocation/Location/GeometryViewsProximityFilter.php
index 77e6171..f645e95 100644
--- a/modules/geolocation_geometry/src/Plugin/geolocation/Location/GeometryViewsProximityFilter.php
+++ b/modules/geolocation_geometry/src/Plugin/geolocation/Location/GeometryViewsProximityFilter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry\Plugin\geolocation\Location;
 
+use Drupal\views\Plugin\views\filter\FilterPluginBase;
 use Drupal\geolocation\Plugin\geolocation\Location\ViewsProximityFilter;
 
 /**
@@ -22,7 +23,7 @@ class GeometryViewsProximityFilter extends ViewsProximityFilter {
     $options = [];
 
     if ($displayHandler = self::getViewsDisplayHandler($context)) {
-      /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+      /** @var FilterPluginBase $filter */
       foreach ($displayHandler->getHandlers('filter') as $delta => $filter) {
         if (
           $filter->getPluginId() === 'geolocation_geometry_filter_proximity'
diff --git a/modules/geolocation_geometry/src/Plugin/geolocation/MapCenter/GeometryViewsBoundaryFilter.php b/modules/geolocation_geometry/src/Plugin/geolocation/MapCenter/GeometryViewsBoundaryFilter.php
index 1926867..9a104bc 100644
--- a/modules/geolocation_geometry/src/Plugin/geolocation/MapCenter/GeometryViewsBoundaryFilter.php
+++ b/modules/geolocation_geometry/src/Plugin/geolocation/MapCenter/GeometryViewsBoundaryFilter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry\Plugin\geolocation\MapCenter;
 
+use Drupal\views\Plugin\views\filter\FilterPluginBase;
 use Drupal\geolocation\Plugin\geolocation\MapCenter\ViewsBoundaryFilter;
 
 /**
@@ -22,7 +23,7 @@ class GeometryViewsBoundaryFilter extends ViewsBoundaryFilter {
     $options = [];
 
     if ($displayHandler = self::getViewsDisplayHandler($context)) {
-      /** @var \Drupal\views\Plugin\views\filter\FilterPluginBase $filter */
+      /** @var FilterPluginBase $filter */
       foreach ($displayHandler->getHandlers('filter') as $filter_id => $filter) {
         if ($filter->getPluginId() === 'geolocation_geometry_filter_boundary') {
           // Preserve compatibility to v1.
diff --git a/modules/geolocation_geometry/src/Plugin/views/field/GeoProximityField.php b/modules/geolocation_geometry/src/Plugin/views/field/GeoProximityField.php
index e27ff97..5d7ce54 100644
--- a/modules/geolocation_geometry/src/Plugin/views/field/GeoProximityField.php
+++ b/modules/geolocation_geometry/src/Plugin/views/field/GeoProximityField.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry\Plugin\views\field;
 
+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\geolocation\Plugin\views\field\ProximityField;
 use Drupal\geolocation_geometry\GeometryProximityTrait;
 
@@ -20,7 +21,7 @@ class GeoProximityField extends ProximityField {
    * {@inheritdoc}
    */
   public function query() {
-    /** @var \Drupal\views\Plugin\views\query\Sql $query */
+    /** @var Sql $query */
     $query = $this->query;
 
     $center = $this->getCenter();
diff --git a/modules/geolocation_geometry/src/Plugin/views/join/GeolocationContains.php b/modules/geolocation_geometry/src/Plugin/views/join/GeolocationContains.php
index c534f29..f58d293 100644
--- a/modules/geolocation_geometry/src/Plugin/views/join/GeolocationContains.php
+++ b/modules/geolocation_geometry/src/Plugin/views/join/GeolocationContains.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry\Plugin\views\join;
 
+use Drupal\Core\Database\Query\Select;
 use Drupal\views\Plugin\views\join\JoinPluginBase;
 use Drupal\views\Plugin\views\join\JoinPluginInterface;
 
@@ -18,8 +19,7 @@ class GeolocationContains extends JoinPluginBase implements JoinPluginInterface
    * {@inheritdoc}
    */
   public function buildJoin($select_query, $table, $view_query) {
-    /** @var \Drupal\Core\Database\Query\Select $select_query */
-
+    /** @var Select $select_query */
     $geometry_field = $table['alias'] . '.' . $this->field . '_geometry';
     $latitude_field = $this->leftTable . '.' . $this->leftField . '_lat';
     $longitude_field = $this->leftTable . '.' . $this->leftField . '_lng';
diff --git a/modules/geolocation_geometry/src/Plugin/views/join/GeolocationGeometryContains.php b/modules/geolocation_geometry/src/Plugin/views/join/GeolocationGeometryContains.php
index faced20..384c32b 100644
--- a/modules/geolocation_geometry/src/Plugin/views/join/GeolocationGeometryContains.php
+++ b/modules/geolocation_geometry/src/Plugin/views/join/GeolocationGeometryContains.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry\Plugin\views\join;
 
+use Drupal\Core\Database\Query\Select;
 use Drupal\views\Plugin\views\join\JoinPluginBase;
 use Drupal\views\Plugin\views\join\JoinPluginInterface;
 
@@ -18,8 +19,7 @@ class GeolocationGeometryContains extends JoinPluginBase implements JoinPluginIn
    * {@inheritdoc}
    */
   public function buildJoin($select_query, $table, $view_query) {
-    /** @var \Drupal\Core\Database\Query\Select $select_query */
-
+    /** @var Select $select_query */
     $geometry_field = ($table['alias'] ?: $this->table) . '.' . $this->field . '_geometry';
     $within_field = $this->leftTable . '.' . $this->leftField . '_geometry';
     $condition = 'ST_Contains(' . $geometry_field . ', ' . $within_field . ')';
diff --git a/modules/geolocation_geometry/src/Plugin/views/join/GeolocationGeometryIntersects.php b/modules/geolocation_geometry/src/Plugin/views/join/GeolocationGeometryIntersects.php
index 0b399ab..2169bda 100644
--- a/modules/geolocation_geometry/src/Plugin/views/join/GeolocationGeometryIntersects.php
+++ b/modules/geolocation_geometry/src/Plugin/views/join/GeolocationGeometryIntersects.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry\Plugin\views\join;
 
+use Drupal\Core\Database\Query\Select;
 use Drupal\views\Plugin\views\join\JoinPluginBase;
 use Drupal\views\Plugin\views\join\JoinPluginInterface;
 
@@ -18,8 +19,7 @@ class GeolocationGeometryIntersects extends JoinPluginBase implements JoinPlugin
    * {@inheritdoc}
    */
   public function buildJoin($select_query, $table, $view_query) {
-    /** @var \Drupal\Core\Database\Query\Select $select_query */
-
+    /** @var Select $select_query */
     $geometry_field = ($table['alias'] ?: $this->table) . '.' . $this->field . '_geometry';
     $within_field = $this->leftTable . '.' . $this->leftField . '_geometry';
     $condition = 'ST_Intersects(' . $within_field . ', ' . $geometry_field . ')';
diff --git a/modules/geolocation_geometry/src/Plugin/views/join/GeolocationGeometryWithin.php b/modules/geolocation_geometry/src/Plugin/views/join/GeolocationGeometryWithin.php
index f908d6a..833bbcc 100644
--- a/modules/geolocation_geometry/src/Plugin/views/join/GeolocationGeometryWithin.php
+++ b/modules/geolocation_geometry/src/Plugin/views/join/GeolocationGeometryWithin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry\Plugin\views\join;
 
+use Drupal\Core\Database\Query\Select;
 use Drupal\views\Plugin\views\join\JoinPluginBase;
 use Drupal\views\Plugin\views\join\JoinPluginInterface;
 
@@ -18,8 +19,7 @@ class GeolocationGeometryWithin extends JoinPluginBase implements JoinPluginInte
    * {@inheritdoc}
    */
   public function buildJoin($select_query, $table, $view_query) {
-    /** @var \Drupal\Core\Database\Query\Select $select_query */
-
+    /** @var Select $select_query */
     $geometry_field = ($table['alias'] ?: $this->table) . '.' . $this->field . '_geometry';
     $within_field = $this->leftTable . '.' . $this->leftField . '_geometry';
     $condition = 'ST_Within(' . $within_field . ', ' . $geometry_field . ')';
diff --git a/modules/geolocation_geometry/src/Plugin/views/join/GeolocationIntersects.php b/modules/geolocation_geometry/src/Plugin/views/join/GeolocationIntersects.php
index 01c2e22..1642f51 100644
--- a/modules/geolocation_geometry/src/Plugin/views/join/GeolocationIntersects.php
+++ b/modules/geolocation_geometry/src/Plugin/views/join/GeolocationIntersects.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry\Plugin\views\join;
 
+use Drupal\Core\Database\Query\Select;
 use Drupal\views\Plugin\views\join\JoinPluginBase;
 use Drupal\views\Plugin\views\join\JoinPluginInterface;
 
@@ -18,8 +19,7 @@ class GeolocationIntersects extends JoinPluginBase implements JoinPluginInterfac
    * {@inheritdoc}
    */
   public function buildJoin($select_query, $table, $view_query) {
-    /** @var \Drupal\Core\Database\Query\Select $select_query */
-
+    /** @var Select $select_query */
     $geometry_field = $table['alias'] . '.' . $this->field . '_geometry';
     $latitude_field = $this->leftTable . '.' . $this->leftField . '_lat';
     $longitude_field = $this->leftTable . '.' . $this->leftField . '_lng';
diff --git a/modules/geolocation_geometry/src/Plugin/views/join/GeolocationWithin.php b/modules/geolocation_geometry/src/Plugin/views/join/GeolocationWithin.php
index e3933e8..a1e3443 100644
--- a/modules/geolocation_geometry/src/Plugin/views/join/GeolocationWithin.php
+++ b/modules/geolocation_geometry/src/Plugin/views/join/GeolocationWithin.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_geometry\Plugin\views\join;
 
+use Drupal\Core\Database\Query\Select;
 use Drupal\views\Plugin\views\join\JoinPluginBase;
 use Drupal\views\Plugin\views\join\JoinPluginInterface;
 
@@ -18,8 +19,7 @@ class GeolocationWithin extends JoinPluginBase implements JoinPluginInterface {
    * {@inheritdoc}
    */
   public function buildJoin($select_query, $table, $view_query) {
-    /** @var \Drupal\Core\Database\Query\Select $select_query */
-
+    /** @var Select $select_query */
     $geometry_field = $table['alias'] . '.' . $this->field . '_geometry';
     $latitude_field = $this->leftTable . '.' . $this->leftField . '_lat';
     $longitude_field = $this->leftTable . '.' . $this->leftField . '_lng';
diff --git a/modules/geolocation_geometry/src/Plugin/views/relationship/GeolocationGeometry.php b/modules/geolocation_geometry/src/Plugin/views/relationship/GeolocationGeometry.php
index 824f7ff..94e6be3 100644
--- a/modules/geolocation_geometry/src/Plugin/views/relationship/GeolocationGeometry.php
+++ b/modules/geolocation_geometry/src/Plugin/views/relationship/GeolocationGeometry.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\geolocation_geometry\Plugin\views\relationship;
 
+use Drupal\Component\Plugin\PluginManagerInterface;
+use Drupal\views\Plugin\views\query\Sql;
+use Drupal\views\Plugin\views\join\JoinPluginBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\relationship\RelationshipPluginBase;
 use Drupal\views\Plugin\ViewsHandlerManager;
@@ -19,14 +22,14 @@ class GeolocationGeometry extends RelationshipPluginBase {
   /**
    * Join Manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   public $joinManager;
 
   /**
    * Query.
    *
-   * @var \Drupal\views\Plugin\views\query\Sql
+   * @var Sql
    */
   public $query;
 
@@ -114,7 +117,7 @@ class GeolocationGeometry extends RelationshipPluginBase {
       }
     }
 
-    /** @var \Drupal\views\Plugin\views\join\JoinPluginBase $first_join */
+    /** @var JoinPluginBase $first_join */
     $first_join = $this->joinManager->createInstance($geometry_join_id, $first);
 
     $first_alias = $this->query->addTable($this->definition['relationship table'], $this->relationship, $first_join);
@@ -142,7 +145,7 @@ class GeolocationGeometry extends RelationshipPluginBase {
       $second['extra'] = $this->definition['join_extra'];
     }
 
-    /** @var \Drupal\views\Plugin\views\join\JoinPluginBase $second_join */
+    /** @var JoinPluginBase $second_join */
     $second_join = $this->joinManager->createInstance($id, $second);
     $second_join->adjusted = TRUE;
 
diff --git a/modules/geolocation_geometry/tests/src/Kernel/GeolocationGeometryGeometryTest.php b/modules/geolocation_geometry/tests/src/Kernel/GeolocationGeometryGeometryTest.php
index 1c2aded..b0e1888 100644
--- a/modules/geolocation_geometry/tests/src/Kernel/GeolocationGeometryGeometryTest.php
+++ b/modules/geolocation_geometry/tests/src/Kernel/GeolocationGeometryGeometryTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\geolocation_geometry\Kernel;
 
+use Drupal\entity_test\Entity\EntityTest;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\Tests\field\Kernel\FieldKernelTestBase;
@@ -81,7 +82,7 @@ class GeolocationGeometryGeometryTest extends FieldKernelTestBase {
     ]);
     $geometry->save();
 
-    /** @var \Drupal\entity_test\Entity\EntityTest $geometry */
+    /** @var EntityTest $geometry */
     $geometry = $entityTestStorage->load($geometry->id());
 
     $this->assertEquals($geometry->get('field_geometry')->wkt, $kenya['wkt'], "WKT are identical.");
@@ -95,7 +96,7 @@ class GeolocationGeometryGeometryTest extends FieldKernelTestBase {
     ]);
     $geometry->save();
 
-    /** @var \Drupal\entity_test\Entity\EntityTest $geometry */
+    /** @var EntityTest $geometry */
     $geometry = $entityTestStorage->load($geometry->id());
 
     $this->assertEquals($geometry->get('field_geometry')->geojson, $kenya['geojson'], "GeoJSON are identical.");
diff --git a/modules/geolocation_google_maps/modules/geolocation_google_maps_demo/geolocation_google_maps_demo.install b/modules/geolocation_google_maps/modules/geolocation_google_maps_demo/geolocation_google_maps_demo.install
index e6d317f..ccff7db 100644
--- a/modules/geolocation_google_maps/modules/geolocation_google_maps_demo/geolocation_google_maps_demo.install
+++ b/modules/geolocation_google_maps/modules/geolocation_google_maps_demo/geolocation_google_maps_demo.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\Config;
 /**
  * @file
  * Geolocation demo setup.
@@ -9,7 +10,7 @@
  * Implements hook_install().
  */
 function geolocation_google_maps_demo_install() {
-  /** @var \Drupal\Core\Config\Config $config */
+  /** @var Config $config */
   $config = \Drupal::service('config.factory')->getEditable('geolocation_google_maps.settings');
   if (empty($config->get('google_map_api_key'))) {
     $config->set('google_map_api_key', 'AIzaSyChy7jQvcJpTpIiupQhq4wacdVzdum3hvc')->save();
@@ -20,7 +21,7 @@ function geolocation_google_maps_demo_install() {
  * Implements hook_uninstall().
  */
 function geolocation_google_maps_demo_uninstall() {
-  /** @var \Drupal\Core\Config\Config $config */
+  /** @var Config $config */
   $config = \Drupal::service('config.factory')->getEditable('geolocation_google_maps.settings');
   if ($config->get('google_map_api_key') == 'AIzaSyChy7jQvcJpTpIiupQhq4wacdVzdum3hvc') {
     $config->set('google_map_api_key', '')->save();
diff --git a/modules/geolocation_google_maps/src/Form/GeolocationGoogleMapsSettings.php b/modules/geolocation_google_maps/src/Form/GeolocationGoogleMapsSettings.php
index f0431a1..ee6d6cc 100644
--- a/modules/geolocation_google_maps/src/Form/GeolocationGoogleMapsSettings.php
+++ b/modules/geolocation_google_maps/src/Form/GeolocationGoogleMapsSettings.php
@@ -150,7 +150,7 @@ class GeolocationGoogleMapsSettings extends ConfigFormBase {
    *
    * @param array $form
    *   Settings form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    */
   public function addLibrariesSubmit(array &$form, FormStateInterface &$form_state) {
@@ -164,7 +164,7 @@ class GeolocationGoogleMapsSettings extends ConfigFormBase {
    *
    * @param array $form
    *   Settings form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
    * @return array
diff --git a/modules/geolocation_google_maps/src/GoogleGeocoderBase.php b/modules/geolocation_google_maps/src/GoogleGeocoderBase.php
index 1f91388..f03c408 100644
--- a/modules/geolocation_google_maps/src/GoogleGeocoderBase.php
+++ b/modules/geolocation_google_maps/src/GoogleGeocoderBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_google_maps;
 
+use Drupal\geolocation_google_maps\Plugin\geolocation\MapProvider\GoogleMaps;
 use Drupal\geolocation\GeocoderInterface;
 use Drupal\geolocation\GeocoderBase;
 use Drupal\Core\Render\BubbleableMetadata;
@@ -19,7 +20,7 @@ abstract class GoogleGeocoderBase extends GeocoderBase implements GeocoderInterf
   /**
    * Google maps provider.
    *
-   * @var \Drupal\geolocation_google_maps\Plugin\geolocation\MapProvider\GoogleMaps
+   * @var GoogleMaps
    */
   protected $googleMapsProvider;
 
@@ -32,9 +33,9 @@ abstract class GoogleGeocoderBase extends GeocoderBase implements GeocoderInterf
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Plugin definition.
-   * @param \Drupal\geolocation\GeocoderCountryFormattingManager $geocoder_country_formatter_manager
+   * @param GeocoderCountryFormattingManager $geocoder_country_formatter_manager
    *   Country formatter manager.
-   * @param \Drupal\geolocation\MapProviderManager $map_provider_manager
+   * @param MapProviderManager $map_provider_manager
    *   Map provider management.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GeocoderCountryFormattingManager $geocoder_country_formatter_manager, MapProviderManager $map_provider_manager) {
diff --git a/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/ControlCustomGeocoder.php b/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/ControlCustomGeocoder.php
index 97d28fa..eaa947f 100644
--- a/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/ControlCustomGeocoder.php
+++ b/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/ControlCustomGeocoder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_google_maps\Plugin\geolocation\MapFeature;
 
+use Drupal\geolocation\GeocoderInterface;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\geolocation\GeocoderManager;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -21,7 +22,7 @@ class ControlCustomGeocoder extends ControlCustomElementBase {
   /**
    * The GeocoderManager object.
    *
-   * @var \Drupal\geolocation\GeocoderManager
+   * @var GeocoderManager
    */
   protected $geocoderManager;
 
@@ -34,7 +35,7 @@ class ControlCustomGeocoder extends ControlCustomElementBase {
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Plugin configuration.
-   * @param \Drupal\geolocation\GeocoderManager $geocoder_manager
+   * @param GeocoderManager $geocoder_manager
    *   Geocoder manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GeocoderManager $geocoder_manager) {
@@ -143,7 +144,7 @@ class ControlCustomGeocoder extends ControlCustomElementBase {
   public function alterMap(array $render_array, array $feature_settings, array $context = []) {
     $render_array = parent::alterMap($render_array, $feature_settings, $context);
 
-    /** @var \Drupal\geolocation\GeocoderInterface $geocoder_plugin */
+    /** @var GeocoderInterface $geocoder_plugin */
     $geocoder_plugin = $this->geocoderManager->getGeocoder(
       $feature_settings['geocoder'],
       $feature_settings['settings']
diff --git a/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/MarkerIcon.php b/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/MarkerIcon.php
index 938f88a..678397a 100644
--- a/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/MarkerIcon.php
+++ b/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/MarkerIcon.php
@@ -168,7 +168,7 @@ class MarkerIcon extends MapFeatureBase {
 
     if (!empty($feature_settings['marker_icon_path'])) {
       $path = \Drupal::token()->replace($feature_settings['marker_icon_path'], $context);
-      $path = file_create_url($path);
+      $path = \Drupal::service('file_url_generator')->generateAbsoluteString($path);
       $render_array['#attached']['drupalSettings']['geolocation']['maps'][$render_array['#id']][$this->getPluginId()]['markerIconPath'] = $path;
 
       if (!empty($render_array['#children']['locations'])) {
diff --git a/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/MarkerZoomByAnchor.php b/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/MarkerZoomByAnchor.php
index 5c9576f..fb981c5 100644
--- a/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/MarkerZoomByAnchor.php
+++ b/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/MarkerZoomByAnchor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_google_maps\Plugin\geolocation\MapFeature;
 
+use Drupal\views\ViewExecutable;
 use Drupal\geolocation\MapFeatureFrontendBase;
 use Drupal\Core\Template\Attribute;
 
@@ -49,7 +50,7 @@ class MarkerZoomByAnchor extends MapFeatureFrontendBase {
     }
 
     if (!empty($context['view'])) {
-      /** @var \Drupal\views\ViewExecutable $view */
+      /** @var ViewExecutable $view */
       $view = $context['view'];
     }
 
diff --git a/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/Spiderfying.php b/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/Spiderfying.php
index 23fc97d..9bacbd4 100644
--- a/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/Spiderfying.php
+++ b/modules/geolocation_google_maps/src/Plugin/geolocation/MapFeature/Spiderfying.php
@@ -22,7 +22,7 @@ class Spiderfying extends MapFeatureBase {
    */
   public static function getDefaultSettings() {
     return [
-      'spiderfiable_marker_path' => base_path() . drupal_get_path('module', 'geolocation_google_maps') . '/images/marker-plus.svg',
+      'spiderfiable_marker_path' => base_path() . \Drupal::service('extension.list.module')->getPath('geolocation_google_maps') . '/images/marker-plus.svg',
       'markersWontMove' => TRUE,
       'markersWontHide' => FALSE,
       'keepSpiderfied' => TRUE,
diff --git a/modules/geolocation_google_maps/tests/modules/geolocation_google_maps_test/geolocation_google_maps_test.install b/modules/geolocation_google_maps/tests/modules/geolocation_google_maps_test/geolocation_google_maps_test.install
index cc3896a..c878801 100644
--- a/modules/geolocation_google_maps/tests/modules/geolocation_google_maps_test/geolocation_google_maps_test.install
+++ b/modules/geolocation_google_maps/tests/modules/geolocation_google_maps_test/geolocation_google_maps_test.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\Config;
 /**
  * @file
  * Geolocation demo setup.
@@ -9,7 +10,7 @@
  * Implements hook_install().
  */
 function geolocation_google_maps_test_install() {
-  /** @var \Drupal\Core\Config\Config $config */
+  /** @var Config $config */
   $config = \Drupal::service('config.factory')->getEditable('geolocation_google_maps.settings');
   if (empty($config->get('google_map_api_key'))) {
     $config->set('google_map_api_key', 'AIzaSyBTq76GbylL-gnN9oHu4XV6se_N3h0YpWg')->save();
@@ -20,7 +21,7 @@ function geolocation_google_maps_test_install() {
  * Implements hook_uninstall().
  */
 function geolocation_google_maps_test_uninstall() {
-  /** @var \Drupal\Core\Config\Config $config */
+  /** @var Config $config */
   $config = \Drupal::service('config.factory')->getEditable('geolocation_google_maps.settings');
   if ($config->get('google_map_api_key') == 'AIzaSyBTq76GbylL-gnN9oHu4XV6se_N3h0YpWg') {
     $config->set('google_map_api_key', '')->save();
diff --git a/modules/geolocation_google_maps/tests/src/Functional/GeolocationGoogleMapsGeocodingTest.php b/modules/geolocation_google_maps/tests/src/Functional/GeolocationGoogleMapsGeocodingTest.php
index 57d69d1..a509743 100644
--- a/modules/geolocation_google_maps/tests/src/Functional/GeolocationGoogleMapsGeocodingTest.php
+++ b/modules/geolocation_google_maps/tests/src/Functional/GeolocationGoogleMapsGeocodingTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\geolocation_google_maps\Functional;
 
+use Drupal\geolocation\GeocoderInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -31,7 +32,7 @@ class GeolocationGoogleMapsGeocodingTest extends BrowserTestBase {
    * Test geocoding.
    */
   public function testGeocoder() {
-    /** @var \Drupal\geolocation\GeocoderInterface $geocoder */
+    /** @var GeocoderInterface $geocoder */
     $geocoder = \Drupal::service('plugin.manager.geolocation.geocoder')->getGeocoder('google_geocoding_api');
     $location = $geocoder->geocode('H.Congreso de la Unión 66, El Parque, Venustiano Carranza, 15960 Ciudad de México, CDMX, Mexiko');
     $this->assertArrayHasKey('location', $location);
@@ -41,7 +42,7 @@ class GeolocationGoogleMapsGeocodingTest extends BrowserTestBase {
    * Test reverse geocoding.
    */
   public function testReverseGeocoder() {
-    /** @var \Drupal\geolocation\GeocoderInterface $geocoder */
+    /** @var GeocoderInterface $geocoder */
     $geocoder = \Drupal::service('plugin.manager.geolocation.geocoder')->getGeocoder('google_geocoding_api');
     $latitude = 38.56;
     $longitude = 68.773889;
diff --git a/modules/geolocation_gpx/src/Plugin/Field/FieldWidget/GeolocationGpxFileWidget.php b/modules/geolocation_gpx/src/Plugin/Field/FieldWidget/GeolocationGpxFileWidget.php
index 7d5915c..97d1490 100644
--- a/modules/geolocation_gpx/src/Plugin/Field/FieldWidget/GeolocationGpxFileWidget.php
+++ b/modules/geolocation_gpx/src/Plugin/Field/FieldWidget/GeolocationGpxFileWidget.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_gpx\Plugin\Field\FieldWidget;
 
+use Drupal\file\FileInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\file\Entity\File;
@@ -38,7 +39,7 @@ class GeolocationGpxFileWidget extends FileWidget {
     $submitted_values = NestedArray::getValue($form_state->getValues(), array_slice($button['#parents'], 0, -2));
     foreach ($submitted_values as $delta => $submitted_value) {
       foreach ($submitted_value['fids'] as $fid) {
-        /** @var \Drupal\file\FileInterface $file */
+        /** @var FileInterface $file */
         $file = File::load($fid);
         $file->setPermanent();
         $file->save();
diff --git a/modules/geolocation_gpx/src/Plugin/geolocation/DataProvider/GeolocationGpx.php b/modules/geolocation_gpx/src/Plugin/geolocation/DataProvider/GeolocationGpx.php
index 2aa6173..e15d52d 100644
--- a/modules/geolocation_gpx/src/Plugin/geolocation/DataProvider/GeolocationGpx.php
+++ b/modules/geolocation_gpx/src/Plugin/geolocation/DataProvider/GeolocationGpx.php
@@ -243,7 +243,7 @@ class GeolocationGpx extends DataProviderBase implements DataProviderInterface {
   /**
    * Get GPX file.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $fieldItem
+   * @param FieldItemInterface $fieldItem
    *   Field item.
    *
    * @return \phpGPX\Models\GpxFile|false
diff --git a/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletControlGeocoder.php b/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletControlGeocoder.php
index d0be83a..fb21c1c 100644
--- a/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletControlGeocoder.php
+++ b/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletControlGeocoder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_leaflet\Plugin\geolocation\MapFeature;
 
+use Drupal\geolocation\GeocoderInterface;
 use Drupal\geolocation\GeocoderManager;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -20,7 +21,7 @@ class LeafletControlGeocoder extends ControlCustomElementBase {
   /**
    * The GeocoderManager object.
    *
-   * @var \Drupal\geolocation\GeocoderManager
+   * @var GeocoderManager
    */
   protected $geocoderManager;
 
@@ -33,7 +34,7 @@ class LeafletControlGeocoder extends ControlCustomElementBase {
    *   Plugin ID.
    * @param mixed $plugin_definition
    *   Plugin configuration.
-   * @param \Drupal\geolocation\GeocoderManager $geocoder_manager
+   * @param GeocoderManager $geocoder_manager
    *   Geocoder manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, GeocoderManager $geocoder_manager) {
@@ -143,7 +144,7 @@ class LeafletControlGeocoder extends ControlCustomElementBase {
   public function alterMap(array $render_array, array $feature_settings, array $context = []) {
     $render_array = parent::alterMap($render_array, $feature_settings, $context);
 
-    /** @var \Drupal\geolocation\GeocoderInterface $geocoder_plugin */
+    /** @var GeocoderInterface $geocoder_plugin */
     $geocoder_plugin = $this->geocoderManager->getGeocoder(
       $feature_settings['geocoder'],
       $feature_settings['settings']
diff --git a/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletMarkerIcon.php b/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletMarkerIcon.php
index d20e4ee..5d9e1a7 100644
--- a/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletMarkerIcon.php
+++ b/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletMarkerIcon.php
@@ -195,13 +195,13 @@ class LeafletMarkerIcon extends MapFeatureBase {
 
     if (!empty($feature_settings['marker_icon_path'])) {
       $iconPath = \Drupal::token()->replace($feature_settings['marker_icon_path'], $context);
-      $iconUrl = file_url_transform_relative(file_create_url($iconPath));
+      $iconUrl = \Drupal::service('file_url_generator')->generateString($iconPath);
       $render_array['#attached']['drupalSettings']['geolocation']['maps'][$render_array['#id']][$this->getPluginId()]['markerIconPath'] = $iconUrl;
     }
 
     if (!empty($feature_settings['marker_shadow_path'])) {
       $shadowPath = \Drupal::token()->replace($feature_settings['marker_shadow_path'], $context);
-      $shadowUrl = file_url_transform_relative(file_create_url($shadowPath));
+      $shadowUrl = \Drupal::service('file_url_generator')->generateString($shadowPath);
       $render_array['#attached']['drupalSettings']['geolocation']['maps'][$render_array['#id']][$this->getPluginId()]['markerShadowPath'] = $shadowUrl;
     }
 
diff --git a/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletMarkerZoomAndAnimate.php b/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletMarkerZoomAndAnimate.php
index e56007e..6bf0418 100644
--- a/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletMarkerZoomAndAnimate.php
+++ b/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletMarkerZoomAndAnimate.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_leaflet\Plugin\geolocation\MapFeature;
 
+use Drupal\views\ViewExecutable;
 use Drupal\geolocation\MapFeatureBase;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Template\Attribute;
@@ -50,7 +51,7 @@ class LeafletMarkerZoomAndAnimate extends MapFeatureBase {
     }
 
     if (!empty($context['view'])) {
-      /** @var \Drupal\views\ViewExecutable $view */
+      /** @var ViewExecutable $view */
       $view = $context['view'];
     }
 
diff --git a/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletTileLayerOverlay.php b/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletTileLayerOverlay.php
index e7d3726..f7c5533 100644
--- a/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletTileLayerOverlay.php
+++ b/modules/geolocation_leaflet/src/Plugin/geolocation/MapFeature/LeafletTileLayerOverlay.php
@@ -64,10 +64,10 @@ class LeafletTileLayerOverlay extends MapFeatureBase {
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Current From State.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Settings form.
    */
   public static function addTileOverlaySettingsFormAjax(array $form, FormStateInterface $form_state) {
diff --git a/modules/geolocation_search_api/src/Plugin/geolocation/DataProvider/SearchAPI.php b/modules/geolocation_search_api/src/Plugin/geolocation/DataProvider/SearchAPI.php
index d15c3c1..4853efb 100644
--- a/modules/geolocation_search_api/src/Plugin/geolocation/DataProvider/SearchAPI.php
+++ b/modules/geolocation_search_api/src/Plugin/geolocation/DataProvider/SearchAPI.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\geolocation_search_api\Plugin\geolocation\DataProvider;
 
+use Drupal\geolocation\Plugin\Field\FieldType\GeolocationItem;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\geolocation\DataProviderBase;
 use Drupal\search_api\Plugin\views\field\SearchApiEntityField;
@@ -75,7 +76,7 @@ class SearchAPI extends DataProviderBase implements DataProviderInterface {
         ];
       }
       elseif (!empty($item['raw'])) {
-        /** @var \Drupal\geolocation\Plugin\Field\FieldType\GeolocationItem $geolocation_item */
+        /** @var GeolocationItem $geolocation_item */
         $geolocation_item = $item['raw'];
         $positions[] = [
           'lat' => $geolocation_item->get('lat')->getValue(),
