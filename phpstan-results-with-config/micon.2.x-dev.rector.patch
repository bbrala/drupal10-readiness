diff --git a/micon_content_type/micon_content_type.module b/micon_content_type/micon_content_type.module
index 19dc676..2b760f7 100644
--- a/micon_content_type/micon_content_type.module
+++ b/micon_content_type/micon_content_type.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Contains micon_content_type.module.
@@ -18,7 +19,7 @@ use Drupal\node\NodeTypeInterface;
  * @see menu_ui_form_node_type_form_submit()
  */
 function micon_content_type_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\node\NodeTypeInterface $type */
+  /** @var NodeTypeInterface $type */
   $type = $form_state->getFormObject()->getEntity();
 
   $form['icon'] = [
@@ -44,7 +45,7 @@ function micon_content_type_form_node_type_form_builder($entity_type, NodeTypeIn
 /**
  * Helper function for retrieving the icon from a node type.
  *
- * @var \Drupal\node\NodeTypeInterface $type
+ * @var NodeTypeInterface $type
  *   The content type.
  */
 function micon_content_type_icon(NodeTypeInterface $type) {
@@ -83,6 +84,6 @@ function micon_content_type_micon_icons_alter(&$icons) {
  * Implements hook_entity_type_alter().
  */
 function micon_content_type_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   $entity_types['node_type']->setListBuilderClass('Drupal\micon_content_type\MiconContentTypeListBuilder');
 }
diff --git a/micon_link/src/Plugin/Field/FieldFormatter/MiconLinkFormatter.php b/micon_link/src/Plugin/Field/FieldFormatter/MiconLinkFormatter.php
index 20f1541..3ba5d6d 100644
--- a/micon_link/src/Plugin/Field/FieldFormatter/MiconLinkFormatter.php
+++ b/micon_link/src/Plugin/Field/FieldFormatter/MiconLinkFormatter.php
@@ -30,7 +30,7 @@ class MiconLinkFormatter extends LinkFormatter {
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
diff --git a/micon_menu/micon_menu.module b/micon_menu/micon_menu.module
index 40a0a58..4d44f41 100644
--- a/micon_menu/micon_menu.module
+++ b/micon_menu/micon_menu.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\menu_link_content\MenuLinkContentInterface;
 /**
  * @file
  * Contains micon_menu.module.
@@ -106,7 +107,7 @@ function micon_menu_form_node_form_alter(array &$form, FormStateInterface $form_
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  *
  * @see menu_ui_form_node_form_submit()
@@ -137,7 +138,7 @@ function micon_menu_menu_ui_form_node_form_submit(array $form, FormStateInterfac
 /**
  * Helper function to create or update a menu link for a node.
  *
- * @param \Drupal\node\NodeInterface $node
+ * @param NodeInterface $node
  *   Node entity.
  * @param array $values
  *   Values for the menu link.
@@ -145,7 +146,7 @@ function micon_menu_menu_ui_form_node_form_submit(array $form, FormStateInterfac
  * @see _menu_ui_node_save()
  */
 function _micon_menu_menu_ui_node_save(NodeInterface $node, array $values) {
-  /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
+  /** @var MenuLinkContentInterface $entity */
   if (!empty($values['entity_id'])) {
     $entity = MenuLinkContent::load($values['entity_id']);
     if ($entity->isTranslatable()) {
@@ -227,7 +228,7 @@ function micon_menu_form_menu_link_edit_alter(&$form, FormStateInterface $form_s
  *
  * @param array $form
  *   An associative array containing the structure of the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function _micon_menu_form_menu_link_edit_alter_submit(array $form, FormStateInterface $form_state) {
diff --git a/micon_paragraphs/micon_paragraphs.module b/micon_paragraphs/micon_paragraphs.module
index 5243ae3..7a49072 100644
--- a/micon_paragraphs/micon_paragraphs.module
+++ b/micon_paragraphs/micon_paragraphs.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Contains micon_paragraphs.module.
@@ -86,6 +87,6 @@ function micon_paragraphs_micon_icons_alter(&$icons) {
  * Implements hook_entity_type_alter().
  */
 function micon_paragraphs_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   $entity_types['paragraphs_type']->setListBuilderClass('Drupal\micon_paragraphs\MiconParagraphsTypeListBuilder');
 }
diff --git a/micon_vocabulary/micon_vocabulary.module b/micon_vocabulary/micon_vocabulary.module
index 75b38a4..0b45071 100644
--- a/micon_vocabulary/micon_vocabulary.module
+++ b/micon_vocabulary/micon_vocabulary.module
@@ -17,7 +17,7 @@ use Drupal\taxonomy\VocabularyInterface;
  * @see VocabularyForm::form()
  */
 function micon_vocabulary_form_taxonomy_vocabulary_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\taxonomy\VocabularyInterface $type */
+  /** @var VocabularyInterface $type */
   $type = $form_state->getFormObject()->getEntity();
 
   $form['icon'] = [
@@ -43,7 +43,7 @@ function micon_vocabulary_form_taxonomy_vocabulary_form_builder($entity_type, Vo
 /**
  * Helper function for retrieving the icon from a vocabulary.
  *
- * @var \Drupal\taxonomy\VocabularyInterface $type
+ * @var VocabularyInterface $type
  *   The taxonomy vocabulary.
  */
 function micon_vocabulary_icon(VocabularyInterface $type) {
diff --git a/src/Commands/MiconCommands.php b/src/Commands/MiconCommands.php
index 6086a87..a4acb4e 100644
--- a/src/Commands/MiconCommands.php
+++ b/src/Commands/MiconCommands.php
@@ -14,14 +14,14 @@ class MiconCommands extends DrushCommands {
   /**
    * The Micon icon manager.
    *
-   * @var \Drupal\micon\MiconIconManager
+   * @var MiconIconManager
    */
   protected $miconIconManager;
 
   /**
    * Constructs a new MiconCommands object.
    *
-   * @param \Drupal\micon\MiconIconManager $micon_icon_manager
+   * @param MiconIconManager $micon_icon_manager
    *   The active configuration storage.
    */
   public function __construct(
diff --git a/src/Element/Micon.php b/src/Element/Micon.php
index b20cac3..8532f83 100644
--- a/src/Element/Micon.php
+++ b/src/Element/Micon.php
@@ -58,7 +58,7 @@ class Micon extends FormElement {
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
diff --git a/src/Entity/Micon.php b/src/Entity/Micon.php
index 7f18a43..d10aa3b 100644
--- a/src/Entity/Micon.php
+++ b/src/Entity/Micon.php
@@ -165,7 +165,7 @@ class Micon extends ConfigEntityBase implements MiconInterface {
 
         $icon['tags'] = implode(",", $icon['icon']['tags']);
         $icon['prefix'] = $this->getPrefix();
-        $icon['directory'] = file_create_url($this->getDirectory());
+        $icon['directory'] = \Drupal::service('file_url_generator')->generateAbsoluteString($this->getDirectory());
         $icon['package_id'] = $this->id();
         $icon['package_label'] = $this->label();
         $micon_icon = new MiconIcon($this->type(), $icon);
diff --git a/src/Form/MiconForm.php b/src/Form/MiconForm.php
index 980d296..c883395 100644
--- a/src/Form/MiconForm.php
+++ b/src/Form/MiconForm.php
@@ -77,7 +77,7 @@ class MiconForm extends EntityForm {
    *   The micon updated with the submitted values.
    * @param array $form
    *   The complete form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see \Drupal\micon\MiconForm::form()
diff --git a/src/MiconDiscoveryManager.php b/src/MiconDiscoveryManager.php
index a29025c..3e1f7ce 100644
--- a/src/MiconDiscoveryManager.php
+++ b/src/MiconDiscoveryManager.php
@@ -33,18 +33,18 @@ class MiconDiscoveryManager extends DefaultPluginManager {
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;
 
   /**
    * Constructs a MiconDiscoveryManager object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, CacheBackendInterface $cache_backend) {
diff --git a/src/MiconHtmlRouteProvider.php b/src/MiconHtmlRouteProvider.php
index 8ad7d00..5c948ef 100644
--- a/src/MiconHtmlRouteProvider.php
+++ b/src/MiconHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class MiconHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
diff --git a/src/MiconIcon.php b/src/MiconIcon.php
index 6763328..5e1a013 100644
--- a/src/MiconIcon.php
+++ b/src/MiconIcon.php
@@ -28,7 +28,7 @@ class MiconIcon implements MiconIconInterface, RenderableInterface {
   /**
    * The Attribute object.
    *
-   * @var \Drupal\Core\Template\Attribute
+   * @var Attribute
    */
   protected $attributes;
 
diff --git a/src/MiconIconInterface.php b/src/MiconIconInterface.php
index 55e5192..000a4d3 100644
--- a/src/MiconIconInterface.php
+++ b/src/MiconIconInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micon;
 
+use Drupal\Core\Render\Markup;
 /**
  * Defines an object which can be rendered by the Render API.
  */
@@ -163,7 +164,7 @@ interface MiconIconInterface {
   /**
    * Returns a fully rendered Markup representation of the object.
    *
-   * @return \Drupal\Core\Render\Markup
+   * @return Markup
    *   A Markup object.
    */
   public function toMarkup();
diff --git a/src/MiconIconManager.php b/src/MiconIconManager.php
index 4b38d61..e738f17 100644
--- a/src/MiconIconManager.php
+++ b/src/MiconIconManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micon;
 
+use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Component\Assertion\Inspector;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
@@ -21,7 +22,7 @@ class MiconIconManager {
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityManager;
 
@@ -46,7 +47,7 @@ class MiconIconManager {
    * @param string $icon_id
    *   The icon id as specified within the IcoMoon selection.json file.
    *
-   * @return \Drupal\micon\MiconIcon|null
+   * @return MiconIcon|null
    *   The found MiconIcon.
    */
   public function getIconMatch($icon_id) {
@@ -104,7 +105,7 @@ class MiconIconManager {
    * Plugin icons are cached using the provided cache backend. The
    * interface language is added as a suffix to the cache key.
    *
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
    * @param string $cache_key
    *   Cache key prefix to use, the language code will be appended
diff --git a/src/MiconIconize.php b/src/MiconIconize.php
index 3b57b86..e8a9128 100644
--- a/src/MiconIconize.php
+++ b/src/MiconIconize.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micon;
 
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Render\Markup;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\StringTranslation\TranslationInterface;
@@ -23,21 +24,21 @@ class MiconIconize extends TranslatableMarkup {
   /**
    * The Micon icon management service.
    *
-   * @var \Drupal\micon\MiconIconManager
+   * @var MiconIconManager
    */
   protected $miconDiscoveryManager;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * The MiconIcon object.
    *
-   * @var \Drupal\micon\MiconIcon|null
+   * @var MiconIcon|null
    */
   protected $icon;
 
@@ -190,7 +191,7 @@ class MiconIconize extends TranslatableMarkup {
    * @param bool $force_match
    *   Force a match lookup even if $this->icon is already set.
    *
-   * @return \Drupal\micon\MiconIcon|null
+   * @return MiconIcon|null
    *   The MiconIcon if found, else null.
    */
   public function getIcon($force_match = FALSE) {
@@ -220,7 +221,7 @@ class MiconIconize extends TranslatableMarkup {
    *   A string that will be used to search through the icon definitions as well
    *   as the Micon icons to return a confirmed match.
    *
-   * @return \Drupal\micon\MiconIcon|null
+   * @return MiconIcon|null
    *   The MiconIcon if found, else null.
    */
   public function getMatch($string) {
diff --git a/src/MiconIconizeTrait.php b/src/MiconIconizeTrait.php
index 75605bb..35dc03e 100644
--- a/src/MiconIconizeTrait.php
+++ b/src/MiconIconizeTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micon;
 
+use Drupal\Core\Render\Markup;
 use Drupal\Core\StringTranslation\TranslationInterface;
 
 /**
@@ -31,7 +32,7 @@ trait MiconIconizeTrait {
    *   - 'context' (defaults to the empty context): The context the source
    *     string belongs to.
    *
-   * @return \Drupal\Core\Render\Markup
+   * @return Markup
    *   An object that, when cast to a string, returns the icon markup and
    *   translated string.
    *
@@ -46,7 +47,7 @@ trait MiconIconizeTrait {
   /**
    * Gets the string translation service.
    *
-   * @return \Drupal\Core\StringTranslation\TranslationInterface
+   * @return TranslationInterface
    *   The string translation service.
    */
   protected function getMiconStringTranslation() {
@@ -59,7 +60,7 @@ trait MiconIconizeTrait {
   /**
    * Sets the string translation service to use.
    *
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The string translation service.
    *
    * @return $this
diff --git a/src/MiconListBuilder.php b/src/MiconListBuilder.php
index 6966921..a74e0e9 100644
--- a/src/MiconListBuilder.php
+++ b/src/MiconListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micon;
 
+use Drupal\micon\Entity\Micon;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Link;
@@ -29,7 +30,7 @@ class MiconListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\micon\Entity\Micon $entity */
+    /** @var Micon $entity */
     $preview = [];
     if ($icons = $entity->getIcons()) {
       $count = count($icons) >= 12 ? 12 : count($icons);
diff --git a/src/Plugin/Field/FieldFormatter/FileMiconFormatter.php b/src/Plugin/Field/FieldFormatter/FileMiconFormatter.php
index 1811cf4..5c2e818 100644
--- a/src/Plugin/Field/FieldFormatter/FileMiconFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/FileMiconFormatter.php
@@ -117,7 +117,7 @@ class FileMiconFormatter extends FileFormatterBase {
 
     foreach ($this->getEntitiesToView($items, $langcode) as $delta => $file) {
       $item = $file->_referringItem;
-      $url = file_create_url($file->getFileUri());
+      $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
       $options = [];
       if ($this->getSetting('target')) {
         $options['attributes']['target'] = '_blank';
diff --git a/src/Plugin/Field/FieldFormatter/StringMiconFormatter.php b/src/Plugin/Field/FieldFormatter/StringMiconFormatter.php
index 958e4ab..848da6d 100644
--- a/src/Plugin/Field/FieldFormatter/StringMiconFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/StringMiconFormatter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\micon\Plugin\Field\FieldFormatter;
 
+use Drupal\micon\MiconIcon;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ -38,10 +39,10 @@ class StringMiconFormatter extends FormatterBase {
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
-   * @return \Drupal\micon\MiconIcon|null
+   * @return MiconIcon|null
    *   The Micon icon matching the icon_id.
    */
   protected function viewIcon(FieldItemInterface $item) {
diff --git a/tests/src/Functional/MiconFunctionalTest.php b/tests/src/Functional/MiconFunctionalTest.php
index bfead19..3db94bb 100644
--- a/tests/src/Functional/MiconFunctionalTest.php
+++ b/tests/src/Functional/MiconFunctionalTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\micon\Functional;
 
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\BrowserTestBase;
 
 /**
@@ -22,14 +23,14 @@ class MiconFunctionalTest extends BrowserTestBase {
   /**
    * A user with authenticated permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;
 
   /**
    * A user with admin permissions.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $adminUser;
 
