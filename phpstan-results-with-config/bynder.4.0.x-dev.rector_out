modules/contrib/bynder/bynder.api.php
modules/contrib/bynder/bynder.install
modules/contrib/bynder/bynder.module
modules/contrib/bynder/modules/bynder_select2/bynder_select2.install
modules/contrib/bynder/modules/bynder_select2/src/Element/BynderSelect2SimpleElement.php
modules/contrib/bynder/modules/bynder_select2/src/Plugin/Field/FieldWidget/BynderSelect2SimpleWidget.php
modules/contrib/bynder/modules/bynder_sns/bynder_sns.module
modules/contrib/bynder/modules/bynder_sns/src/EventSubscriber/NotificationSubscriber.php
modules/contrib/bynder/modules/bynder_usage/src/EventSubscriber/UsageEventSubscriber.php
modules/contrib/bynder/modules/bynder_usage/src/Exception/UnableToAddUsageException.php
modules/contrib/bynder/modules/bynder_usage/src/Exception/UnableToDeleteUsageException.php
modules/contrib/bynder/modules/lightning/bynder_lightning.install
modules/contrib/bynder/src/BynderApi.php
modules/contrib/bynder/src/BynderApiInterface.php
modules/contrib/bynder/src/BynderService.php
modules/contrib/bynder/src/BynderServiceInterface.php
modules/contrib/bynder/src/Controller/BynderMediaUsage.php
modules/contrib/bynder/src/Controller/BynderOAuthLogin.php
modules/contrib/bynder/src/Controller/BynderTagSearchService.php
modules/contrib/bynder/src/EventSubscriber/BynderConfigHashGenerator.php
modules/contrib/bynder/src/Exception/BrandNotSetException.php
modules/contrib/bynder/src/Exception/BundleNotBynderException.php
modules/contrib/bynder/src/Exception/BundleNotExistException.php
modules/contrib/bynder/src/Exception/BynderException.php
modules/contrib/bynder/src/Exception/TagSearchException.php
modules/contrib/bynder/src/Exception/UnableToConnectException.php
modules/contrib/bynder/src/Exception/UploadFailedException.php
modules/contrib/bynder/src/Exception/UploadPermissionException.php
modules/contrib/bynder/src/Form/BynderConfigurationForm.php
modules/contrib/bynder/src/Plugin/Action/UpdateMetadataAction.php
modules/contrib/bynder/src/Plugin/EntityBrowser/Widget/BynderSearch.php
modules/contrib/bynder/src/Plugin/EntityBrowser/Widget/BynderUpload.php
modules/contrib/bynder/src/Plugin/EntityBrowser/Widget/BynderWidgetBase.php
modules/contrib/bynder/src/Plugin/Field/FieldFormatter/BynderDocumentFormatter.php
modules/contrib/bynder/src/Plugin/Field/FieldFormatter/BynderFormatter.php
modules/contrib/bynder/src/Plugin/Field/FieldFormatter/BynderFormatterBase.php
modules/contrib/bynder/src/Plugin/Field/FieldFormatter/BynderMetadataFormatter.php
modules/contrib/bynder/src/Plugin/Field/FieldFormatter/BynderVideoFormatter.php
modules/contrib/bynder/src/Plugin/Field/FieldType/BynderMetadataItem.php
modules/contrib/bynder/src/Plugin/Field/FieldWidget/BynderMetadataWidget.php
modules/contrib/bynder/src/Plugin/QueueWorker/BynderTestImageRemove.php
modules/contrib/bynder/src/Plugin/media/Source/Bynder.php
modules/contrib/bynder/tests/modules/bynder_test_module/src/BynderApiTest.php
modules/contrib/bynder/tests/modules/bynder_test_module/src/BynderTestModuleServiceProvider.php
modules/contrib/bynder/tests/src/Functional/BynderCreateMediaTest.php
modules/contrib/bynder/tests/src/Functional/BynderFormatterTest.php
modules/contrib/bynder/tests/src/Functional/BynderWidgetsTest.php
modules/contrib/bynder/tests/src/Functional/MediaEntityTypePluginTest.php
modules/contrib/bynder/tests/src/Functional/UsageTest.php
modules/contrib/bynder/tests/src/FunctionalJavascript/BynderUploadWidgetTest.php
modules/contrib/bynder/tests/src/FunctionalJavascript/BynderUsageTest.php
modules/contrib/bynder/tests/src/FunctionalJavascript/ConfigurationFormTest.php
modules/contrib/bynder/tests/src/Unit/BynderApiUnitTest.php

33 files with changes
=====================

1) modules/contrib/bynder/tests/src/Unit/BynderApiUnitTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bynder\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Tests\UnitTestCase;
 use League\OAuth2\Client\Token\AccessToken;
 use Symfony\Component\HttpFoundation\Session\SessionInterface;
@@ @@
  */
 class BynderApiUnitTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers ::hasAccessToken
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/bynder/tests/src/FunctionalJavascript/ConfigurationFormTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalLogin($this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/bynder/tests/src/FunctionalJavascript/BynderUsageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bynder\FunctionalJavascript;

+use Drupal\user\UserInterface;
+use Drupal\user\RoleInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 use Drupal\user\Entity\Role;
@@ @@
   /**
    * User for testing.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $testUser;

@@ @@
   /**
    * Role for testing.
    *
-   * @var \Drupal\user\RoleInterface
+   * @var RoleInterface
    */
   protected $testRole;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->createContentType(['type' => 'page']);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/bynder/tests/src/FunctionalJavascript/BynderUploadWidgetTest.php:9

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bynder\FunctionalJavascript;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\entity_browser\Entity\EntityBrowser;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType(['type' => 'media_entity_ct', 'name' => 'Media Type']);
@@ @@
       ],
     ])->save();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.media_entity_ct.default');
@@ @@
     $this->getSession()->getPage()->selectFieldOption('Brand', 'Brand Name');
     $this->getSession()->getPage()->pressButton('Save');

-    $entity_browser = \Drupal\entity_browser\Entity\EntityBrowser::load('bynder');
+    $entity_browser = EntityBrowser::load('bynder');
     $this->assertTrue($entity_browser->getWidgets()->count() == 1);
     $widget_uuid = $entity_browser->getWidgets()->getInstanceIds();
     $widget_uuid = reset($widget_uuid);
@@ @@
     $this->getSession()->getPage()->pressButton('Save');
     $this->assertSession()->pageTextContains('The entity browser Bynder has been updated.');

-    $entity_browser = \Drupal\entity_browser\Entity\EntityBrowser::load('bynder');
+    $entity_browser = EntityBrowser::load('bynder');
     $this->assertTrue($entity_browser->getWidgets()->count() == 1);
     $widget_uuid = $entity_browser->getWidgets()->getInstanceIds();
     $widget_uuid = reset($widget_uuid);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/bynder/tests/src/Functional/UsageTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bynder\Functional;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\Core\Url;
 use Drupal\bynder\BynderApi;
 use Drupal\bynder_test_module\BynderApiTest;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->createMediaType('image', ['id' => 'generic']);
@@ @@
           ],
         ])->save();

-      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+      /** @var EntityFormDisplayInterface $form_display */
       $form_display = $this->container->get('entity_type.manager')
         ->getStorage('entity_form_display')
         ->load('node.host.default');
@@ @@
     // Create alias.
     $edit['path[0][value]'] = '/node/' . $host_node->id();
     $edit['alias[0][value]'] = '/' . $this->randomMachineName(8);
-    $this->drupalPostForm('admin/config/search/path/add', $edit, t('Save'));
+    $this->drupalGet('admin/config/search/path/add');
+    $this->submitForm($edit, t('Save'));

     $this->drupalGet('node/' . $host_node->id() . '/edit');
     $this->getSession()->getPage()->fillField('field_reference_node[0][target_id]', '');
@@ @@
     $this->assertEquals($bynder_media->field_media_uuid->value, $state['asset_id']);
     $this->assertTrue(is_string($state['timestamp']));

-    $url = \Drupal\Core\Url::fromRoute(
+    $url = Url::fromRoute(
       'entity.node.canonical',
       ['node' => $host_node->id()]
     )->setAbsolute(TRUE)->toString();
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/bynder/tests/src/Functional/MediaEntityTypePluginTest.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalLogin($this->drupalCreateUser([
       'administer media types',
@@ @@
       'limited' => 0,
       'thumbnails' => [
         'mini' => 'https://d2csxpduxe849s.cloudfront.net/media/2AF9718D.jpg',
-        'webimage' => file_create_url($image->uri),
+        'webimage' => \Drupal::service('file_url_generator')->generateAbsoluteString($image->uri),
         'thul' => 'https://d2csxpduxe849s.cloudfront.net/media/9F22A5BA1D47.jpg',
       ],
       'views' => 6,
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/bynder/tests/src/Functional/BynderWidgetsTest.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $account = $this->drupalCreateUser(['access bynder entity browser pages', 'dropzone upload files']);
     $this->drupalLogin($account);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/bynder/tests/src/Functional/BynderFormatterTest.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalLogin($this->drupalCreateUser([
@@ @@
       'fields[field_entity_reference][type]' => 'bynder',
       'fields[field_entity_reference][region]' => 'content',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     $this->assertSession()->pageTextContains('Derivative: webimage');
     $this->getSession()->getPage()->pressButton('field_entity_reference_settings_edit');
@@ @@
     $this->assertSession()->optionExists('fields[field_entity_reference][settings_edit_form][settings][title_field]', 'field_string_long');

     $this->drupalGet('admin/structure/types/manage/page/form-display');
-    $this->drupalPostForm(NULL, ['fields[field_entity_reference][region]' => 'content'], t('Save'));
+    $this->submitForm(['fields[field_entity_reference][region]' => 'content'], t('Save'));

     $this->drupalGet('admin/structure/media/manage/media_type/display');
     $this->assertSession()->optionExists('fields[field_entity_reference][type]', 'bynder');
@@ @@
       'id' => '123',
       'name' => 'Bynder name',
       'thumbnails' => [
-        'mini' => file_create_url($images[0]->uri),
-        'webimage' => file_create_url($images[1]->uri),
-        'thul' => file_create_url($images[2]->uri),
+        'mini' => \Drupal::service('file_url_generator')->generateAbsoluteString($images[0]->uri),
+        'webimage' => \Drupal::service('file_url_generator')->generateAbsoluteString($images[1]->uri),
+        'thul' => \Drupal::service('file_url_generator')->generateAbsoluteString($images[2]->uri),
       ],
       'propertyOptions' => [
         0 => "6EF40BA8-E011-4758-80C12BDCA70DDF4F",
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/bynder/tests/src/Functional/BynderCreateMediaTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\bynder\Functional;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\media\MediaInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalCreateContentType(['type' => 'media_entity_ct', 'name' => 'Media Type']);

@@ @@
       ],
     ])->save();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $this->container->get('entity_type.manager')
       ->getStorage('entity_form_display')
       ->load('node.media_entity_ct.default');
@@ @@
           ],
           'keyword' => 'london',
           'thumbnails' => [
-            'mini' => file_create_url($image_1->uri),
-            'webimage' => file_create_url($image_1->uri),
-            'thul' => file_create_url($image_1->uri),
+            'mini' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_1->uri),
+            'webimage' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_1->uri),
+            'thul' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_1->uri),
           ],
         ],
         [
@@ @@
           ],
           'keyword' => 'paris',
           'thumbnails' => [
-            'mini' => file_create_url($image_2->uri),
-            'webimage' => file_create_url($image_2->uri),
-            'thul' => file_create_url($image_2->uri),
+            'mini' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_2->uri),
+            'webimage' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_2->uri),
+            'thul' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_2->uri),
           ],
         ],
         [
@@ @@
             0 => 'pdf',
           ],
           'thumbnails' => [
-            'mini' => file_create_url($image_2->uri),
-            'webimage' => file_create_url($image_2->uri),
-            'thul' => file_create_url($image_2->uri),
+            'mini' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_2->uri),
+            'webimage' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_2->uri),
+            'thul' => \Drupal::service('file_url_generator')->generateAbsoluteString($image_2->uri),
           ],
           'original' => 'https://example.getbynder.com/m/important.pdf',
         ],
@@ @@
     $medias = \Drupal::entityTypeManager()->getStorage('media')->loadMultiple();
     $this->assertEquals(3, count($medias));

-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     foreach ($medias as $media) {
       switch ($media->get('field_bynder_id')->value) {
         case '4DFD39C5-1234-1234-8714AFEE1A617618':
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/bynder/src/Plugin/media/Source/Bynder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder\Plugin\media\Source;

+use Drupal\field\FieldStorageConfigInterface;
+use Drupal\field\FieldConfigInterface;
 use Drupal\bynder\BynderApiInterface;
 use Drupal\bynder\Plugin\Field\FieldType\BynderMetadataItem;
 use Drupal\Component\Datetime\TimeInterface;
@@ @@
   /**
    * Bynder api service.
    *
-   * @var \Drupal\bynder\BynderApiInterface
+   * @var BynderApiInterface
    *   Bynder api service.
    */
   protected $bynderApi;
@@ @@
   /**
    * Account proxy.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $accountProxy;

@@ @@
   /**
    * The url generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * The logger factory service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;

@@ @@
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   Entity field manager service.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager
+   * @param FieldTypePluginManagerInterface $field_type_manager
    *   The field type plugin manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
-   * @param \Drupal\bynder\BynderApiInterface $bynder_api_service
+   * @param BynderApiInterface $bynder_api_service
    *   Bynder api service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account_proxy
+   * @param AccountProxyInterface $account_proxy
    *   Account proxy.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The url generator service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger factory service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityFieldManagerInterface $entity_field_manager, FieldTypePluginManagerInterface $field_type_manager, ConfigFactoryInterface $config_factory, BynderApiInterface $bynder_api_service, AccountProxyInterface $account_proxy, UrlGeneratorInterface $url_generator, LoggerChannelFactoryInterface $logger, CacheBackendInterface $cache, TimeInterface $time, ModuleHandlerInterface $module_handler) {
@@ @@
   /**
    * Ensures the given media entity has Bynder metadata information in place.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity.
    * @param bool $force
    *   (optional) By default, this will not attempt to check for updated
@@ @@
   /**
    * Compares the local metadata and the remote metadata in case it changed.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media entity.
    * @param array $remote_metadata
    *   The remote metadata.
@@ @@
   /**
    * Creates the metadata field storage definition.
    *
-   * @return \Drupal\field\FieldStorageConfigInterface
+   * @return FieldStorageConfigInterface
    *   The unsaved field storage definition.
    */
   public function createMetadataFieldStorage() {
@@ @@
   /**
    * Creates the metadata field definition.
    *
-   * @param \Drupal\media\MediaTypeInterface $type
+   * @param MediaTypeInterface $type
    *   The media type.
    *
-   * @return \Drupal\field\FieldConfigInterface
+   * @return FieldConfigInterface
    *   The unsaved field definition. The field storage definition, if new,
    *   should also be unsaved.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/bynder/src/Plugin/QueueWorker/BynderTestImageRemove.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Bynder api service.
    *
-   * @var \Drupal\bynder\BynderApiInterface
+   * @var BynderApiInterface
    *   Bynder api service.
    */
   protected $bynder;
@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\bynder\BynderApiInterface $bynder
+   * @param BynderApiInterface $bynder
    *   The Bynder API service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/bynder/src/Plugin/Field/FieldFormatter/BynderVideoFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder\Plugin\Field\FieldFormatter;

+use Drupal\media\MediaInterface;
 use Drupal\bynder\Plugin\media\Source\Bynder;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@

     foreach ($items as $delta => $item) {

-      /** @var \Drupal\media\MediaInterface $media */
+      /** @var MediaInterface $media */
       $media = $is_entityreference ? $item->entity : $items->getEntity();
       if (!$media) {
         continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/bynder/src/Plugin/Field/FieldFormatter/BynderFormatterBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder\Plugin\Field\FieldFormatter;

+use Drupal\media\MediaTypeInterface;
 use Drupal\bynder\BynderApiInterface;
 use Drupal\bynder\Plugin\media\Source\Bynder;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The Bynder API service.
    *
-   * @var \Drupal\bynder\BynderApiInterface
+   * @var BynderApiInterface
    */
   protected $bynder;

@@ @@
   /**
    * Renderer object.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
-   * @param \Drupal\bynder\BynderApiInterface $bynder
+   * @param BynderApiInterface $bynder
    *   The Bynder API service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer_object
+   * @param RendererInterface $renderer_object
    *   Renderer object.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, ConfigFactoryInterface $config_factory, AccountProxyInterface $current_user, BynderApiInterface $bynder, RendererInterface $renderer_object, EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
     $bundles = [];
     if ($handler_settings && is_array($handler_settings['target_bundles'])) {
       foreach ($handler_settings['target_bundles'] as $bundle) {
-        /** @var \Drupal\media\MediaTypeInterface $type */
+        /** @var MediaTypeInterface $type */
         $type = $this->entityTypeManager->getStorage('media_type')->load($bundle);
         if ($type && ($type->getSource() instanceof Bynder)) {
           $bundles[] = $type;
@@ @@
       }
     }
     else {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       foreach ($this->entityTypeManager->getStorage('media_type')->loadMultiple() as $type) {
         if ($type && ($type->getSource() instanceof Bynder)) {
           $bundles[] = $type;
@@ @@
           }
           elseif (is_array($handler_settings['target_bundles'])) {
             foreach ($handler_settings['target_bundles'] as $bundle) {
-              /** @var \Drupal\media\MediaTypeInterface $type */
+              /** @var MediaTypeInterface $type */
               $type = \Drupal::entityTypeManager()->getStorage('media_type')->load($bundle);
               if ($type->getSource() instanceof Bynder) {
                 return TRUE;
@@ @@
         return FALSE;
       }

-      /** @var \Drupal\media\MediaTypeInterface $type_entity */
+      /** @var MediaTypeInterface $type_entity */
       if (!($type_entity = $field_definition->getTargetBundle()) || !($type_entity = MediaType::load($field_definition->getTargetBundle()))) {
         return FALSE;
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/bynder/src/Plugin/Field/FieldFormatter/BynderFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder\Plugin\Field\FieldFormatter;

+use Drupal\Core\Entity\EntityRepositoryInterface;
+use Drupal\media\MediaInterface;
+use Drupal\media\MediaSourceInterface;
 use Drupal\bynder\Plugin\media\Source\Bynder;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface;
+   * @var EntityRepositoryInterface ;
    */
   protected $entityRepository;

@@ @@
     $is_entityreference = $this->fieldDefinition->getType() == 'entity_reference';

     foreach ($items as $delta => $item) {
-      /** @var \Drupal\media\MediaInterface $media_entity */
+      /** @var MediaInterface $media_entity */
       if ($media_entity = $is_entityreference ? $item->entity : $items->getEntity()) {
-        /** @var \Drupal\media\MediaInterface $media_entity */
+        /** @var MediaInterface $media_entity */
         $media_entity = $this->entityRepository->getTranslationFromContext($media_entity, $langcode);
-        /** @var \Drupal\media\MediaSourceInterface $source_plugin */
+        /** @var MediaSourceInterface $source_plugin */
         $source_plugin = $media_entity->getSource();
         if ($source_plugin instanceof Bynder && ($thumbnails = $source_plugin->getMetadata($media_entity, 'thumbnail_urls'))) {
           $element['#attached']['library'][] = 'bynder/formatter';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/bynder/src/Plugin/Field/FieldFormatter/BynderDocumentFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder\Plugin\Field\FieldFormatter;

+use Drupal\media\MediaInterface;
 use Drupal\bynder\Plugin\media\Source\Bynder;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@

     foreach ($items as $delta => $item) {

-      /** @var \Drupal\media\MediaInterface $media */
+      /** @var MediaInterface $media */
       $media = $is_entityreference ? $item->entity : $items->getEntity();
       if (!$media) {
         continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/bynder/src/Plugin/EntityBrowser/Widget/BynderWidgetBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder\Plugin\EntityBrowser\Widget;

+use Drupal\Core\Logger\LoggerChannelFactory;
+use Drupal\media\MediaTypeInterface;
 use Drupal\bynder\BynderApiInterface;
 use Drupal\bynder\Exception\BundleNotBynderException;
 use Drupal\bynder\Exception\BundleNotExistException;
@@ @@
   /**
    * Bynder API service.
    *
-   * @var \Drupal\bynder\BynderApiInterface
+   * @var BynderApiInterface
    */
   protected $bynderApi;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $loggerFactory;

@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
-   * @param \Drupal\bynder\BynderApiInterface $bynder_api
+   * @param BynderApiInterface $bynder_api
    *   Bynder API service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger factory.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, WidgetValidationManager $validation_manager, BynderApiInterface $bynder_api, LoggerChannelFactoryInterface $logger_factory, LanguageManagerInterface $language_manager, RequestStack $request_stack, ConfigFactoryInterface $config_factory) {
@@ @@
    */
   protected function checkType() {
     if ($this->configuration['media_type']) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       $type = $this->entityTypeManager->getStorage('media_type')
         ->load($this->configuration['media_type']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/bynder/src/Plugin/EntityBrowser/Widget/BynderUpload.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder\Plugin\EntityBrowser\Widget;

+use Drupal\media\MediaTypeInterface;
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\bynder\BynderApiInterface;
 use Drupal\bynder\Exception\BrandNotSetException;
 use Drupal\bynder\Exception\BundleNotBynderException;
@@ @@
   /**
    * The session service.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
-   * @param \Drupal\bynder\BynderApiInterface $bynder_api
+   * @param BynderApiInterface $bynder_api
    *   Bynder API service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger factory.
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EventDispatcherInterface $event_dispatcher, EntityTypeManagerInterface $entity_type_manager, WidgetValidationManager $validation_manager, BynderApiInterface $bynder_api, ConfigFactoryInterface $config_factory, LoggerChannelFactoryInterface $logger_factory, SessionInterface $session, LanguageManagerInterface $language_manager, RequestStack $request_stack) {
@@ @@
    */
   public function submit(array &$element, array &$form, FormStateInterface $form_state) {
     if (!empty($form_state->getTriggeringElement()['#bynder_upload_submit'])) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       $type = $this->entityTypeManager->getStorage('media_type')
         ->load($this->configuration['media_type']);

@@ @@
    */
   public static function batchUploadFiles($file, $brand, $description, $tags, $metaproperty_options, &$context) {
     try {
-      /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+      /** @var FileSystemInterface $file_system */
       $file_system = \Drupal::service('file_system');
       $data = [
         'filePath' => $file_system->realpath($file['path']),
@@ @@
    *
    * @param array $element
    *   Upload form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   protected function clearFormValues(array &$element, FormStateInterface $form_state) {
@@ @@
     $form = parent::buildConfigurationForm($form, $form_state);

     foreach ($this->entityTypeManager->getStorage('media_type')->loadMultiple() as $type) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       if ($type->getSource() instanceof Bynder) {
         $form['media_type']['#options'][$type->id()] = $type->label();
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/bynder/src/Plugin/EntityBrowser/Widget/BynderSearch.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder\Plugin\EntityBrowser\Widget;

+use Drupal\media\MediaTypeInterface;
 use Drupal\bynder\Exception\BundleNotBynderException;
 use Drupal\bynder\Exception\BundleNotExistException;
 use Drupal\bynder\Plugin\media\Source\Bynder;
@@ @@
     $form['submit_text']['#access'] = FALSE;

     foreach ($this->entityTypeManager->getStorage('media_type')->loadMultiple() as $type) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       if ($type->getSource() instanceof Bynder) {
         $form['media_type']['#options'][$type->id()] = $type->label();
       }
@@ @@
     $image_source_field = NULL;
     $source_fields = [];
     if ($this->configuration['media_type']) {
-      /** @var \Drupal\media\MediaTypeInterface $image_type */
+      /** @var MediaTypeInterface $image_type */
       $image_type = $this->entityTypeManager->getStorage('media_type')
         ->load($this->configuration['media_type']);
       $image_source_field = $image_type->getSource()->getConfiguration()['source_field'];
@@ @@
     $document_type = NULL;
     $document_source_field = NULL;
     if ($this->configuration['media_type_document']) {
-      /** @var \Drupal\media\MediaTypeInterface $document_type */
+      /** @var MediaTypeInterface $document_type */
       $document_type = $this->entityTypeManager->getStorage('media_type')
         ->load($this->configuration['media_type_document']);
       $document_source_field = $document_type->getSource()->getConfiguration()['source_field'];
@@ @@
     $video_type = NULL;
     $video_source_field = NULL;
     if ($this->configuration['media_type_video']) {
-      /** @var \Drupal\media\MediaTypeInterface $video_type */
+      /** @var MediaTypeInterface $video_type */
       $video_type = $this->entityTypeManager->getStorage('media_type')
         ->load($this->configuration['media_type_video']);
       $video_source_field = $video_type->getSource()->getConfiguration()['source_field'];
@@ @@
       return TRUE;
     }
     if ($this->configuration['media_type_document']) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       $type = $this->entityTypeManager->getStorage('media_type')
         ->load($this->configuration['media_type_document']);

@@ @@
       return TRUE;
     }
     if ($this->configuration['media_type_video']) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       $type = $this->entityTypeManager->getStorage('media_type')
         ->load($this->configuration['media_type_video']);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/bynder/src/Form/BynderConfigurationForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder\Form;

+use Drupal\bynder\BynderService;
 use Drupal\bynder\BynderApiInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\ReplaceCommand;
@@ @@
   /**
    * Bynder api service.
    *
-   * @var \Drupal\bynder\BynderApiInterface
+   * @var BynderApiInterface
    *   Bynder api service.
    */
   protected $bynder;
@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs a BynderConfigurationForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\bynder\BynderApiInterface $bynder
+   * @param BynderApiInterface $bynder
    *   The Bynder API service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, BynderApiInterface $bynder, RendererInterface $renderer, ModuleHandlerInterface $module_handler) {
@@ @@
    *   The context array.
    */
   public static function updateMetadataBatchWorker(array &$context) {
-    /** @var \Drupal\bynder\BynderService $bynder */
+    /** @var BynderService $bynder */
     $bynder = \Drupal::service('bynder');

     if (empty($context['sandbox']['total'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/bynder/src/EventSubscriber/BynderConfigHashGenerator.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * Constructs a BynderConfigHashGenerator object.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
    */
   public function __construct(StateInterface $state) {
@@ @@
   /**
    * Generates hash based on active Bynder config and saves it into state.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The Event to process.
    */
   public function onChange(ConfigCrudEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


21) modules/contrib/bynder/src/Controller/BynderTagSearchService.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The Bynder API service.
    *
-   * @var \Drupal\bynder\BynderApiInterface
+   * @var BynderApiInterface
    */
   protected $bynder;

@@ @@
   /**
    * The logger factory service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a BynderTagSearchService class instance.
    *
-   * @param \Drupal\bynder\BynderApiInterface $bynder
+   * @param BynderApiInterface $bynder
    *   The Bynder API service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger factory service.
    */
   public function __construct(BynderApiInterface $bynder, LoggerChannelFactoryInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/bynder/src/Controller/BynderOAuthLogin.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder\Controller;

+use Drupal\Core\Access\AccessResultInterface;
+use Drupal\entity_browser\Entity\EntityBrowser;
 use Drupal\bynder\BynderApiInterface;
 use Drupal\bynder\Exception\UnableToConnectException;
 use Drupal\bynder\Plugin\EntityBrowser\Widget\BynderSearch;
@@ @@
   /**
    * The Bynder API service.
    *
-   * @var \Drupal\bynder\BynderApiInterface
+   * @var BynderApiInterface
    */
   protected $bynder;

@@ @@
   /**
    * The logger factory service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a BynderOAuthLogin class instance.
    *
-   * @param \Drupal\bynder\BynderApiInterface $bynder
+   * @param BynderApiInterface $bynder
    *   The Bynder API service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger factory service.
    */
   public function __construct(BynderApiInterface $bynder, LoggerChannelFactoryInterface $logger) {
@@ @@
   /**
    * Checks access to oAuth login.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   Run access checks for this account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   Access result.
    */
   public function access(AccountInterface $account) {
@@ @@
     }

     $browsers = $this->entityTypeManager()->getStorage('entity_browser')->loadMultiple();
-    /** @var \Drupal\entity_browser\Entity\EntityBrowser $browser */
+    /** @var EntityBrowser $browser */
     foreach ($browsers as $browser) {
       if ($account->hasPermission('access ' . $browser->id() . ' entity browser pages')) {
         foreach ($browser->getWidgets() as $widget) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/bynder/src/Controller/BynderMediaUsage.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder\Controller;

+use Drupal\node\NodeInterface;
+use Drupal\media\MediaTypeInterface;
+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
+use Drupal\media\Entity\Media;
 use Drupal\bynder\BynderApiInterface;
 use Drupal\bynder\Plugin\media\Source\Bynder;
 use Drupal\Core\Config\ConfigFactoryInterface;
@@ @@
   /**
    * The Bynder API service.
    *
-   * @var \Drupal\bynder\BynderApiInterface
+   * @var BynderApiInterface
    */
   protected $bynder;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Renderer object.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a BynderMediaUsage class instance.
    *
-   * @param \Drupal\bynder\BynderApiInterface $bynder
+   * @param BynderApiInterface $bynder
    *   The Bynder API service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Render\RendererInterface $renderer_object
+   * @param RendererInterface $renderer_object
    *   Renderer object.
    */
   public function __construct(BynderApiInterface $bynder, ConfigFactoryInterface $config_factory, RendererInterface $renderer_object) {
@@ @@
   /**
    * The Bynder media usage info.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Represents an HTTP request.
    *
    * @return mixed
@@ @@
    *   Bynder media usage list.
    */
   public function bynderMediaInfo(Request $request) {
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     $node = $this->entityTypeManager()->getStorage('node')->load($request->attributes->get('node'));
     $media_types = $this->entityTypeManager()->getStorage('media_type')->loadMultiple();
     $bynder_types = array_filter($media_types, function ($type) {
-      /** @var \Drupal\media\MediaTypeInterface $type */
+      /** @var MediaTypeInterface $type */
       return $type->getSource() instanceof Bynder;
     });
     $entity_reference_fields = array_filter($node->getFields(), function ($field) {
@@ @@
     $rows = [];
     $entities = [];

-    /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $field */
+    /** @var EntityReferenceFieldItemListInterface $field */
     foreach ($entity_reference_fields as $field) {
-      /** @var \Drupal\media\Entity\Media $entity */
+      /** @var Media $entity */
       foreach ($field->referencedEntities() as $entity) {
         if (in_array($entity->bundle(), array_keys($bynder_types))) {
           $entities[] = $entity;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/bynder/src/BynderServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder;

+use Drupal\media\MediaTypeInterface;
+use Drupal\media\MediaInterface;
 /**
  * Provides methods to manage the Bynder module.
  */
@@ @@
   /**
    * Returns the Bynder media types.
    *
-   * @return \Drupal\media\MediaTypeInterface[]
+   * @return MediaTypeInterface[]
    *   A list of Bynder media types.
    */
   public function getBynderMediaTypes();
@@ @@
   /**
    * Updates a set of media entities based on the remote metadata information.
    *
-   * @param \Drupal\media\MediaInterface[] $bynder_media_entities
+   * @param MediaInterface[] $bynder_media_entities
    *   A list of media entities with a bynder source, keyed by the bynder ID,
    *   updates entities are removed from the list.
    *
-   * @return \Drupal\media\MediaInterface[]
+   * @return MediaInterface[]
    *   A list of updated media entities.
    */
   public function updateMediaEntities(array &$bynder_media_entities);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


25) modules/contrib/bynder/src/BynderService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder;

+use Drupal\Core\Logger\LoggerChannelInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\media\MediaTypeInterface;
+use Drupal\media\MediaInterface;
 use Drupal\bynder\Plugin\Field\FieldType\BynderMetadataItem;
 use Drupal\bynder\Plugin\media\Source\Bynder;
 use Drupal\Component\Datetime\TimeInterface;
@@ @@
   /**
    * The Bynder API.
    *
-   * @var \Drupal\bynder\BynderApi
+   * @var BynderApi
    */
   protected $bynderApi;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The media storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $mediaStorage;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * BynderMetadataService constructor.
    *
-   * @param \Drupal\bynder\BynderApiInterface $bynder_api
+   * @param BynderApiInterface $bynder_api
    *   The Bynder API service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(BynderApiInterface $bynder_api, EntityTypeManagerInterface $entity_type_manager, LoggerChannelFactoryInterface $logger_factory, StateInterface $state, TimeInterface $time, ConfigFactoryInterface $config_factory, ModuleHandlerInterface $module_handler = NULL) {
@@ @@
    */
   public function getBynderMediaTypes() {
     $bynder_media_types = [];
-    /** @var \Drupal\media\MediaTypeInterface $media_type */
+    /** @var MediaTypeInterface $media_type */
     foreach ($this->entityTypeManager->getStorage('media_type')->loadMultiple() as $media_type_id => $media_type) {
       if ($media_type->getSource() instanceof Bynder) {
         $bynder_media_types[$media_type_id] = $media_type;
@@ @@

     $media_ids = $query->execute();

-    /** @var \Drupal\media\MediaInterface[] $media_entities */
+    /** @var MediaInterface[] $media_entities */
     $media_entities = $this->mediaStorage->loadMultiple($media_ids);

     $bynder_media_entities = [];
@@ @@
     $updated_entities = [];
     foreach ($media_list as $index => $item) {
       $media_entity = $bynder_media_entities[$item['id']];
-      /** @var \Drupal\bynder\Plugin\media\Source\Bynder $source */
+      /** @var Bynder $source */
       $source = $media_entity->getSource();
       $remote_metadata = $source->filterRemoteMetadata($item);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/bynder/src/BynderApiInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder;

+use Bynder\Api\Impl\AssetBankManager;
+use Drupal\Core\Url;
 /**
  * Provides Drupal 8 Bynder API.
  *
@@ @@
   /**
    * Gets an instance of the asset bank manager to use for DAM queries.
    *
-   * @return \Bynder\Api\Impl\AssetBankManager
+   * @return AssetBankManager
    *   An instance of the asset bank manager using the request handler.
    */
   public function getAssetBankManager();
@@ @@
    *
    * @see ::finishOAuthTokenRetrieval()
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Url to redirect the user to.
    */
   public function initiateOAuthTokenRetrieval();
@@ @@
   public function setBynderConfiguration(array $config);

   /**
-  * Creates an asset usage entry in Bynder.
-  *
-  * @param string $asset_id
-  *    Bynder asset ID.
-  * @param \Drupal\Core\Url $usage_url
-  *    Url where the asset is being used (node url).
-  * @param string $creation_date
-  *    Date the asset was added to the page, in the DATE_ISO8601 format.
-  * @param string $additional_info
-  *    Any additional info to be displayed with the entry information.
-  *
-  * @return mixed
-  */
+   * Creates an asset usage entry in Bynder.
+   *
+   * @param string $asset_id
+   *    Bynder asset ID.
+   * @param Url $usage_url
+   *    Url where the asset is being used (node url).
+   * @param string $creation_date
+   *    Date the asset was added to the page, in the DATE_ISO8601 format.
+   * @param string $additional_info
+   *    Any additional info to be displayed with the entry information.
+   *
+   * @return mixed
+   */
   public function addAssetUsage($asset_id, $usage_url, $creation_date, $additional_info = null);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/bynder/src/BynderApi.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\bynder;

+use Drupal\Core\Logger\LoggerChannelFactory;
 use Bynder\Api\BynderClient;
 use Bynder\Api\Impl\PermanentTokens\Configuration;
 use Drupal\Component\Datetime\TimeInterface;
@@ @@
   /**
    * Bynder Api instance.
    *
-   * @var \Bynder\Api\BynderClient
+   * @var BynderClient
    */
   protected $bynderApi;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $loggerFactory;

@@ @@
   /**
    * The active session.
    *
-   * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+   * @var SessionInterface
    */
   protected $session;

@@ @@
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * The cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface $time
+   * @var TimeInterface $time
    */
   protected $time;

@@ @@
   /**
    * The configuration object.
    *
-   * @var \Bynder\Api\Impl\PermanentTokens\Configuration|\Bynder\Api\Impl\OAuth2\Configuration
+   * @var Configuration|\Bynder\Api\Impl\OAuth2\Configuration
    */
   protected $bynderConfiguration;

@@ @@
   /**
    * BynderApi constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   Logger factory.
-   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   * @param SessionInterface $session
    *   The session service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/bynder/modules/lightning/bynder_lightning.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\entity_browser\Entity\EntityBrowser;
 /**
  * @file
  * Install, uninstall and update hooks for Bynder Lighting module.
@@ @@
     return;
   }

-  /** @var \Drupal\entity_browser\Entity\EntityBrowser $browser */
+  /** @var EntityBrowser $browser */
   $browser = \Drupal::entityTypeManager()->getStorage('entity_browser')->load(
     'media_browser'
   );
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


29) modules/contrib/bynder/modules/bynder_usage/src/EventSubscriber/UsageEventSubscriber.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * Bynder api service.
    *
-   * @var \Drupal\bynder\BynderApiInterface
+   * @var BynderApiInterface
    *   Bynder api service.
    */
   protected $bynderApi;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * UsageEventSubscriber constructor.
    *
-   * @param \Drupal\bynder\BynderApiInterface $bynder_api_service
+   * @param BynderApiInterface $bynder_api_service
    *   Bynder api service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
    */
   public function __construct(BynderApiInterface $bynder_api_service, EntityTypeManagerInterface $entity_type_manager, RequestStack $request_stack) {
@@ @@
   /**
    * Returns the remote media ID.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   The media to get the remote ID for.
    *
    * @return mixed|null
@@ @@
   /**
    * Returns the canonical URL for the given entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The source entity.
    *
-   * @return \Drupal\Core\Url|null
+   * @return Url|null
    *   The absolute URL of the given entity.
    */
   protected function getEntityUrl(EntityInterface $entity) {
@@ @@
       return NULL;
     }

-    /** @var \Drupal\media\MediaInterface $media */
+    /** @var MediaInterface $media */
     $media = $this->entityTypeManager->getStorage('media')
       ->load($event->getTargetEntityId());
     if (!isset($media)) {
@@ @@
    */
   public function onDeleteByTargetEntity(EntityUsageEvent $event) {
     if ($event->getTargetEntityType() === 'media') {
-      /** @var \Drupal\media\MediaInterface $media */
+      /** @var MediaInterface $media */
       $media = $this->entityTypeManager->getStorage('media')->load($event->getTargetEntityId());
       if ($media) {
         $remote_id = $this->getRemoteMediaId($media);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/bynder/modules/bynder_sns/src/EventSubscriber/NotificationSubscriber.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The bynder service.
    *
-   * @var \Drupal\bynder\BynderServiceInterface
+   * @var BynderServiceInterface
    */
   protected $bynder;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * NotifcationSubscriber constructor.
    *
-   * @param \Drupal\bynder\BynderServiceInterface $bynder
+   * @param BynderServiceInterface $bynder
    *   The bynder service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    */
   public function __construct(BynderServiceInterface $bynder, EntityTypeManagerInterface $entity_type_manager, LoggerChannelFactoryInterface $logger_factory, ConfigFactoryInterface $config_factory) {
     $this->bynder = $bynder;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


31) modules/contrib/bynder/bynder.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 /**
  * @file
  * Provides bynder integration.
@@ @@
  */
 function bynder_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   if ('media_bynder_edit_form' == $form_id) {
-    /** @var \Drupal\media\MediaInterface $entity */
+    /** @var MediaInterface $entity */
     $entity = $form_state->getBuildInfo()['callback_object']->getEntity();
     if ($entity->getSource() instanceof Bynder && $url = bynder_media_url($entity)) {
       $form['edit_on_bynder'] = [
@@ @@
 /**
  * Returns edit link for Bynder asset.
  *
- * @param \Drupal\media\MediaInterface $media
+ * @param MediaInterface $media
  *   The media entity with bynder as type provider.
  *
- * @return bool|\Drupal\Core\Url
+ * @return bool|Url
  *   Returns edit link for Bynder asset or FALSE.
  */
 function bynder_media_url(MediaInterface $media) {
@@ @@
   $extra = [];

   foreach (MediaType::loadMultiple() as $type) {
-    /** @var \Drupal\media\Entity\MediaType $type */
+    /** @var MediaType $type */
     if ($type->getSource() instanceof Bynder) {
       $extra['media'][$type->id()]['form']['edit_on_bynder'] = [
         'label' => t('Edit on Bynder'),
@@ @@
  * @param array|false $property_options
  *   Property options as returned from Bynder API.
  *
- * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+ * @return TranslatableMarkup
  *   A label for a given restriction level.
  */
 function get_media_restriction($property_options) {
@@ @@
   }
   // Create a metadata field on new Bynder media types.
   if ($media_type->getSource() instanceof Bynder) {
-    /** @var \Drupal\bynder\Plugin\media\Source\Bynder $source */
+    /** @var Bynder $source */
     $source = $media_type->getSource();
     $metadata_field_storage = FieldStorageConfig::loadByName('media', BynderMetadataItem::METADATA_FIELD_NAME);
     if (!$metadata_field_storage) {
@@ @@

     // Add the bynder usage CSS so that the bynder logo is positioned over the
     // asset on hover and is sized appropriately.
-    $css[] = drupal_get_path('module', 'bynder') . '/css/bynder.formatter.css';
+    $css[] = \Drupal::service('extension.list.module')->getPath('bynder') . '/css/bynder.formatter.css';
 }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


32) modules/contrib/bynder/bynder.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\bynder\Plugin\media\Source\Bynder;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\Extension\ModuleExtensionList;
 /**
  * @file
  * Install, uninstall and update hooks for Bynder module.
@@ @@
  * Implements hook_install().
  */
 function bynder_install() {
-  $source = drupal_get_path('module', 'bynder') . '/images/icons';
+  $source = \Drupal::service('extension.list.module')->getPath('bynder') . '/images/icons';
   $destination = \Drupal::config('media.settings')->get('icon_base_uri');
   \Drupal::service('file_system')->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
   $files = \Drupal::service('file_system')->scanDirectory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
@@ @@

   // Create a field instance for each of the Bynder media types.
   foreach (\Drupal::service('bynder')->getBynderMediaTypes() as $media_type_id => $media_type) {
-    /** @var \Drupal\bynder\Plugin\media\Source\Bynder $source */
+    /** @var Bynder $source */
     $source = $media_type->getSource();
     if (!$metadata_field_storage) {
       $metadata_field_storage = $source->createMetadataFieldStorage();
@@ @@
     $metadata_field = $source->createMetadataField($media_type);
     $metadata_field->save();

-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
+    /** @var EntityFormDisplayInterface $form_display */
     $form_display = $entity_type_manager->getStorage('entity_form_display')->load("media.$media_type_id.default");
     if ($form_display) {
       $form_display->removeComponent(BynderMetadataItem::METADATA_FIELD_NAME)->save();
     }

-    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_display */
+    /** @var EntityViewDisplayInterface $view_display */
     $view_display = $entity_type_manager->getStorage('entity_view_display')->load("media.$media_type_id.default");
     if ($view_display) {
       $view_display->removeComponent(BynderMetadataItem::METADATA_FIELD_NAME)->save();
@@ @@
  * Enables the bynder_usage submodule.
  */
 function bynder_update_8009() {
-  /** @var \Drupal\Core\Extension\ModuleExtensionList $module_list */
+  /** @var ModuleExtensionList $module_list */
   $module_list = \Drupal::service('extension.list.module');
   if ($module_list->exists('entity_usage')) {
     \Drupal::service('module_installer')->install(['bynder_usage']);
@@ @@
  * Enables the jquery_ui_tooltip module.
  */
 function bynder_update_8300() {
-  /** @var \Drupal\Core\Extension\ModuleExtensionList $module_list */
+  /** @var ModuleExtensionList $module_list */
   $module_list = \Drupal::service('extension.list.module');
   if ($module_list->exists('jquery_ui_tooltip')) {
     \Drupal::service('module_installer')->install(['jquery_ui_tooltip']);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


33) modules/contrib/bynder/bynder.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Form\FormStateInterface;
+use Drupal\bynder\Plugin\EntityBrowser\Widget\BynderSearch;
 /**
  * @file
  * Hooks related to Bynder.
@@ @@
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alter the search query passed to the Bynder API.
  *
@@ @@
  *
  * @param array $query
  *   An associative array containing the query fields and values.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state of the entity browser form.
- * @param \Drupal\bynder\Plugin\EntityBrowser\Widget\BynderSearch $widget
+ * @param BynderSearch $widget
  *   The entity browser widget plugin.
  *
  * @see hook_form_entity_browser_ENTITY_BROWSER_ID_form_alter()
  * @see \Drupal\bynder\BynderApi::getMediaList()
  */
-function hook_bynder_search_query_alter(array &$query, \Drupal\Core\Form\FormStateInterface $form_state, \Drupal\bynder\Plugin\EntityBrowser\Widget\BynderSearch $widget) {
+function hook_bynder_search_query_alter(array &$query, FormStateInterface $form_state, BynderSearch $widget) {
   if ($property_value = $form_state->getValue(['filters', 'my_property'])) {
     $query['property_my_property'] = $property_value;
   }
@@ @@
 /**
  * Allows modules to alter the media entity based on updated bynder metadata.
  *
- * @param \Drupal\media\MediaInterface $media
+ * @param MediaInterface $media
  *   The media entity.
  * @param array $item
  *   The raw bynder metadata about the media asset.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 33 files have been changed by Rector                                      

