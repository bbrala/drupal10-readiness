modules/contrib/persistent_login/Tests/src/Functional/PersistentLoginTest.php
modules/contrib/persistent_login/persistent_login.install
modules/contrib/persistent_login/persistent_login.module
modules/contrib/persistent_login/src/Controller/UserController.php
modules/contrib/persistent_login/src/CookieHelper.php
modules/contrib/persistent_login/src/CookieHelperInterface.php
modules/contrib/persistent_login/src/EventSubscriber/TokenHandler.php
modules/contrib/persistent_login/src/Form/PersistentLoginSettingsForm.php
modules/contrib/persistent_login/src/PageCache/RequestPolicy/PendingPersistentLogin.php
modules/contrib/persistent_login/src/PersistentToken.php
modules/contrib/persistent_login/src/TokenException.php
modules/contrib/persistent_login/src/TokenManager.php

7 files with changes
====================

1) modules/contrib/persistent_login/src/TokenManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\persistent_login;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use DateTime;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Component\Utility\Crypt;
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The token generator.
    *
-   * @var \Drupal\Core\Access\CsrfTokenGenerator
+   * @var CsrfTokenGenerator
    */
   protected $csrfToken;

@@ @@
   /**
    * The logger channel.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * The Time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * Construct a token manager object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Access\CsrfTokenGenerator $csrfToken
+   * @param CsrfTokenGenerator $csrfToken
    *   The token generator.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger channel.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(
@@ @@
    * If valid, a new token is returned with the uid set to the associated user,
    * otherwise a new invalid token is returned.
    *
-   * @param \Drupal\persistent_login\PersistentToken $token
+   * @param PersistentToken $token
    *   The token to validate.
    *
-   * @return \Drupal\persistent_login\PersistentToken
+   * @return PersistentToken
    *   A validated token.
    */
   public function validateToken(PersistentToken $token) {
@@ @@
    *
    * The new instance value is also propagated the to the database.
    *
-   * @param \Drupal\persistent_login\PersistentToken $token
+   * @param PersistentToken $token
    *   The token.
    *
-   * @return \Drupal\persistent_login\PersistentToken
+   * @return PersistentToken
    *   An updated token.
    */
   public function updateToken(PersistentToken $token) {
@@ @@
   /**
    * Delete the specified token from the database, if it exists.
    *
-   * @param \Drupal\persistent_login\PersistentToken $token
+   * @param PersistentToken $token
    *   The token.
    *
-   * @return \Drupal\persistent_login\PersistentToken
+   * @return PersistentToken
    *   An invalidated token.
    */
   public function deleteToken(PersistentToken $token) {
@@ @@
   /**
    * Get all active tokens for a user.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   A user to get active tokens for.
    *
    * @return PersistentToken[]
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/persistent_login/src/PageCache/RequestPolicy/PendingPersistentLogin.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The session configuration.
    *
-   * @var \Drupal\Core\Session\SessionConfigurationInterface
+   * @var SessionConfigurationInterface
    */
   protected $sessionConfiguration;

@@ @@
   /**
    * The cookie helper service.
    *
-   * @var \Drupal\persistent_login\CookieHelperInterface
+   * @var CookieHelperInterface
    */
   protected $cookieHelper;

@@ @@
   /**
    * Instantiates a new PendingPersistentLogin object.
    *
-   * @param \Drupal\persistent_login\CookieHelperInterface $cookie_helper
+   * @param CookieHelperInterface $cookie_helper
    *   The cookie helper service.
-   * @param \Drupal\Core\Session\SessionConfigurationInterface $session_configuration
+   * @param SessionConfigurationInterface $session_configuration
    *   The session configuration.
    */
   public function __construct(CookieHelperInterface $cookie_helper, SessionConfigurationInterface $session_configuration) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/persistent_login/src/EventSubscriber/TokenHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\persistent_login\EventSubscriber;

+use Drupal\persistent_login\CookieHelper;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Drupal\User\UserInterface;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\SessionConfigurationInterface;
@@ @@
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Cookie;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The token manager service.
    *
-   * @var \Drupal\persistent_login\TokenManager
+   * @var TokenManager
    */
   protected $tokenManager;

@@ @@
   /**
    * The cookie helper service.
    *
-   * @var \Drupal\persistent_login\CookieHelper
+   * @var CookieHelper
    */
   protected $cookieHelper;

@@ @@
   /**
    * The session configuration.
    *
-   * @var \Drupal\Core\Session\SessionConfigurationInterface
+   * @var SessionConfigurationInterface
    */
   protected $sessionConfiguration;

@@ @@
   /**
    * The Entity Type Manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The persistent token of the current request.
    *
-   * @var \Drupal\persistent_login\PersistentToken
+   * @var PersistentToken
    */
   protected $token;

@@ @@
   /**
    * Construct a token manager object.
    *
-   * @param \Drupal\persistent_login\TokenManager $token_manager
+   * @param TokenManager $token_manager
    *   The token manager service.
-   * @param \Drupal\persistent_login\CookieHelperInterface $cookie_helper
+   * @param CookieHelperInterface $cookie_helper
    *   The cookie helper service.
-   * @param \Drupal\Core\Session\SessionConfigurationInterface $session_configuration
+   * @param SessionConfigurationInterface $session_configuration
    *   The session configuration.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
    */
   public function __construct(
@@ @@
   /**
    * Load a token on this request, if a persistent cookie is provided.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The request event.
    */
-  public function loadTokenOnRequestEvent(GetResponseEvent $event) {
+  public function loadTokenOnRequestEvent(RequestEvent $event) {

     if (!$event->isMasterRequest()) {
       return;
@@ @@
         if ($this->token->getStatus() === PersistentToken::STATUS_VALID) {
           try {
             // TODO make sure we are starting the user session properly.
-            /** @var \Drupal\User\UserInterface $user */
+            /** @var UserInterface $user */
             $user = $this->entityTypeManager->getStorage('user')
               ->load($this->token->getUid());
             user_login_finalize($user);
@@ @@
   /**
    * Set or clear a token cookie on this response, if required.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The response event.
    */
-  public function setTokenOnResponseEvent(FilterResponseEvent $event) {
+  public function setTokenOnResponseEvent(ResponseEvent $event) {

     if (!$event->isMasterRequest()) {
       return;
@@ @@
         // New or updated token.
         $this->token = $this->tokenManager->updateToken($this->token);
         $response->headers->setCookie(
-          new Cookie(
-            $this->cookieHelper->getCookieName($request),
-            $this->token,
-            $this->token->getExpiry(),
-            '/',  // TODO Path should probably match the base path.
-            $sessionOptions['cookie_domain'],
-            $sessionOptions['cookie_secure']
+          Cookie::create(
+              $this->cookieHelper->getCookieName($request),
+              $this->token,
+              $this->token->getExpiry(),
+              '/',
+              // TODO Path should probably match the base path.
+              $sessionOptions['cookie_domain'],
+              $sessionOptions['cookie_secure']
           )
         );
         $response->setPrivate();
@@ @@
   /**
    * Create a token object from the cookie provided in the request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   A request that contains a persistent login cookie.
    *
-   * @return \Drupal\persistent_login\PersistentToken
+   * @return PersistentToken
    *   A new PersistentToken object.
    */
   public function getTokenFromCookie(Request $request) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * NewToStaticCallRector
 * AddParamTypeDeclarationRector


4) modules/contrib/persistent_login/src/CookieHelperInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the name of the persistent login cookie.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return string
@@ @@
   /**
    * Returns the value of the persistent login cookie.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return string
@@ @@
   /**
    * Checks if a request contains a persistent login cookie.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/persistent_login/src/CookieHelper.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The session configuration.
    *
-   * @var \Drupal\Core\Session\SessionConfigurationInterface
+   * @var SessionConfigurationInterface
    */
   private $sessionConfiguration;

@@ @@
   /**
    * The Config Factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   private $configFactory;

@@ @@
   /**
    * Instantiates a new CookieHelper instance.
    *
-   * @param \Drupal\Core\Session\SessionConfigurationInterface $session_configuration
+   * @param SessionConfigurationInterface $session_configuration
    *   The session configuration.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The Config Factory service.
    */
   public function __construct(SessionConfigurationInterface $session_configuration, ConfigFactoryInterface $configFactory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/persistent_login/src/Controller/UserController.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The token manager service.
    *
-   * @var \Drupal\persistent_login\TokenManager
+   * @var TokenManager
    */
   protected $tokenManager;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * List users's active tokens.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user account object.
    *
    * @return string Render array with list of user's active tokens.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/persistent_login/Tests/src/Functional/PersistentLoginTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\persistent_login\Functional;

+use Drupal\Core\Session\AccountInterface;
+use Symfony\Component\BrowserKit\CookieJar;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * A test user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Mimic the required setup of the module by setting the session cookie
@@ @@
   /**
    * Returns the jar which contains the cookies for the current session.
    *
-   * @return \Symfony\Component\BrowserKit\CookieJar
+   * @return CookieJar
    *   The cookie jar.
    */
   protected function getCookieJar() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

