diff --git a/search_api_redisearch.info.yml b/search_api_redisearch.info.yml
index fc7d35c..cdef5cf 100644
--- a/search_api_redisearch.info.yml
+++ b/search_api_redisearch.info.yml
@@ -1,7 +1,7 @@
 name: 'RediSearch'
 type: module
 description: 'Integrates RediSearch with Drupal Search API'
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^8.8 || ^9 || ^10
 package: 'Search'
 dependencies:
   - search_api
diff --git a/src/Event/BeforeSearchEvent.php b/src/Event/BeforeSearchEvent.php
index 0b63d08..7e48e1c 100644
--- a/src/Event/BeforeSearchEvent.php
+++ b/src/Event/BeforeSearchEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\search_api_redisearch\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 use FKRediSearch\Query\QueryBuilder;
 
 /**
diff --git a/src/Event/DictionaryEvent.php b/src/Event/DictionaryEvent.php
index 3df0176..bea8765 100644
--- a/src/Event/DictionaryEvent.php
+++ b/src/Event/DictionaryEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\search_api_redisearch\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * The dictionary event class.
diff --git a/src/Plugin/search_api/backend/RediSearch.php b/src/Plugin/search_api/backend/RediSearch.php
index 843075d..b8db578 100644
--- a/src/Plugin/search_api/backend/RediSearch.php
+++ b/src/Plugin/search_api/backend/RediSearch.php
@@ -142,7 +142,7 @@ class RediSearch extends BackendPluginBase implements PluginFormInterface {
   /**
    * Adds index to Redisearch.
    *
-   * @param Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index.
    */
   public function addIndex(IndexInterface $index) {
@@ -156,7 +156,7 @@ class RediSearch extends BackendPluginBase implements PluginFormInterface {
    *
    * This is done to allow use of redisearch aggregations without using LOAD which greatly hurts the performance of aggregation query.
    *
-   * @param Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index.
    */
   public function updateIndex(IndexInterface $index) {
@@ -236,7 +236,7 @@ class RediSearch extends BackendPluginBase implements PluginFormInterface {
   /**
    * Add items to index.
    *
-   * @param Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index.
    * @param array $items
    *   List of items to index.
@@ -284,7 +284,7 @@ class RediSearch extends BackendPluginBase implements PluginFormInterface {
   /**
    * Delete items from index by their ids.
    *
-   * @param Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index.
    * @param array $item_ids
    *   List of item ids.
@@ -302,7 +302,7 @@ class RediSearch extends BackendPluginBase implements PluginFormInterface {
   /**
    * Delete all items from index.
    *
-   * @param Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index.
    * @param mixed $datasource_id
    *   Id of the datasource.
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 8a8645f..46368fe 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\search_api_redisearch\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,14 +23,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
