modules/contrib/taxonomy_term_depth/constants.inc
modules/contrib/taxonomy_term_depth/drush/taxonomy_term_depth.drush.inc
modules/contrib/taxonomy_term_depth/src/DepthUninstallValidator.php
modules/contrib/taxonomy_term_depth/src/Form/DepthDeleteDataForm.php
modules/contrib/taxonomy_term_depth/src/Form/DepthUpdateForm.php
modules/contrib/taxonomy_term_depth/src/Plugin/QueueWorker/UpdateDepth.php
modules/contrib/taxonomy_term_depth/src/ProxyClass/DepthUninstallValidator.php
modules/contrib/taxonomy_term_depth/src/QueueManager/Manager.php
modules/contrib/taxonomy_term_depth/taxonomy_term_depth.batch.inc
modules/contrib/taxonomy_term_depth/taxonomy_term_depth.install
modules/contrib/taxonomy_term_depth/taxonomy_term_depth.module
modules/contrib/taxonomy_term_depth/tests/src/Functional/DynamicDepthCalculationTest.php

6 files with changes
====================

1) modules/contrib/taxonomy_term_depth/tests/src/Functional/DynamicDepthCalculationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\taxonomy_term_depth\Functional;

+use Drupal\taxonomy\TermInterface;
 use Drupal\taxonomy\Entity\Term;
 use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
   }

@@ @@

     $voc->save();

-    /** @var \Drupal\taxonomy\TermInterface $term1 */
+    /** @var TermInterface $term1 */
     $term1 = Term::create([
       'vid' => $voc->id(),
       'name' => 'Depth 1 term',
@@ @@

     $term1->save();

-    /** @var \Drupal\taxonomy\TermInterface $term2 */
+    /** @var TermInterface $term2 */
     $term2 = Term::create([
       'vid' => $voc->id(),
       'name' => 'Depth 2 term',
@@ @@
     $term2->parent->set(0, $term1->id());
     $term2->save();

-    /** @var \Drupal\taxonomy\TermInterface $term3 */
+    /** @var TermInterface $term3 */
     $term3 = Term::create([
       'vid' => $voc->id(),
       'name' => 'Depth 2 term',
@@ @@
     $term3->parent->set(1, $term2->id());
     $term3->save();

-    $this->assertEqual(taxonomy_term_depth_get_by_tid($term1->id()), 1, 'Depth of first term');
-    $this->assertEqual(taxonomy_term_depth_get_by_tid($term2->id()), 2, 'Depth of second term');
-    $this->assertEqual(taxonomy_term_depth_get_by_tid($term3->id()), 3, 'Depth of third term');
+    $this->assertEquals(taxonomy_term_depth_get_by_tid($term1->id()), 1, 'Depth of first term');
+    $this->assertEquals(taxonomy_term_depth_get_by_tid($term2->id()), 2, 'Depth of second term');
+    $this->assertEquals(taxonomy_term_depth_get_by_tid($term3->id()), 3, 'Depth of third term');

-    $this->assertEqual($term1->depth_level->first() ? $term1->depth_level->first()->value : NULL, 1, 'Saved depth of first term');
-    $this->assertEqual($term2->depth_level->first() ? $term2->depth_level->first()->value : NULL, 2, 'Saved depth of second term');
-    $this->assertEqual($term3->depth_level->first() ? $term3->depth_level->first()->value : NULL, 3, 'Saved depth of third term');
+    $this->assertEquals($term1->depth_level->first() ? $term1->depth_level->first()->value : NULL, 1, 'Saved depth of first term');
+    $this->assertEquals($term2->depth_level->first() ? $term2->depth_level->first()->value : NULL, 2, 'Saved depth of second term');
+    $this->assertEquals($term3->depth_level->first() ? $term3->depth_level->first()->value : NULL, 3, 'Saved depth of third term');

     $chain = taxonomy_term_depth_get_full_chain($term2->id());
     $compare = [
@@ @@
     $chain = taxonomy_term_depth_get_full_chain($term2->id(), TRUE);
     $this->assertTrue($chain === array_reverse($compare), 'Testing reversed fullchain for term2');

-    $this->assertEqual(\Drupal::database()
+    $this->assertEquals(\Drupal::database()
       ->query('SELECT depth_level FROM {taxonomy_term_field_data} WHERE tid=:tid', [':tid' => $term1->id()])
       ->fetchField(), 1, 'DB depth_level field of first term');
-    $this->assertEqual(\Drupal::database()
+    $this->assertEquals(\Drupal::database()
       ->query('SELECT depth_level FROM {taxonomy_term_field_data} WHERE tid=:tid', [':tid' => $term2->id()])
       ->fetchField(), 2, 'DB depth_level field of second term');
-    $this->assertEqual(\Drupal::database()
+    $this->assertEquals(\Drupal::database()
       ->query('SELECT depth_level FROM {taxonomy_term_field_data} WHERE tid=:tid', [':tid' => $term3->id()])
       ->fetchField(), 3, 'DB depth_level field of third term');
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/taxonomy_term_depth/taxonomy_term_depth.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\taxonomy_term_depth\QueueManager\Manager;
 use Drupal\Core\Url;
 use Drupal\Core\Entity\EntityInterface;

@@ @@
 /**
  * Implements hook_entity_base_field_info().
  */
-function taxonomy_term_depth_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
+function taxonomy_term_depth_entity_base_field_info(EntityTypeInterface $entity_type) {
   $fields = [];
   if ($entity_type->id() == 'taxonomy_term') {
     // $field_db = \Drupal\Core\Database\Database::getConnection()->schema();
-    $fields['depth_level'] = \Drupal\Core\Field\BaseFieldDefinition::create('integer')
+    $fields['depth_level'] = BaseFieldDefinition::create('integer')
       ->setProvider('taxonomy_term_depth')
       ->setLabel(t('Depth'))
       ->setDescription(t('Term depth (1 based)'))
@@ @@
 /**
  * Get QueueManager service.
  *
- * @return Drupal\taxonomy_term_depth\QueueManager\Manager.
+ * @return Manager .
  */
 function taxonomy_term_depth_queue_manager($vid = NULL) {
   return \Drupal::service('taxonomy_term_depth.queue_service')->setVid($vid);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


3) modules/contrib/taxonomy_term_depth/taxonomy_term_depth.batch.inc:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\Core\Database\Connection;
 /**
  * @file
  */
@@ @@
  */
 function taxonomy_term_depth_batch_callbacks_update_term_depth($options, &$context) {
   /**
-   * @var \Drupal\Core\Database\Connection.
+   * @var Connection .
    */
   $dbh = \Drupal::database();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


4) modules/contrib/taxonomy_term_depth/src/ProxyClass/DepthUninstallValidator.php:8

    ---------- begin diff ----------
@@ @@

 namespace Drupal\taxonomy_term_depth\ProxyClass {

+  use Drupal\Core\Extension\ModuleUninstallValidatorInterface;
+  use Drupal\Core\DependencyInjection\DependencySerializationTrait;
+  use Symfony\Component\DependencyInjection\ContainerInterface;
+  use Drupal\Core\StringTranslation\TranslationInterface;
   /**
    * Provides a proxy class for
    * \Drupal\taxonomy_term_depth\DepthUninstallValidator.
@@ @@
    *
    * @see \Drupal\Component\ProxyBuilder
    */
-  class DepthUninstallValidator implements \Drupal\Core\Extension\ModuleUninstallValidatorInterface {
+  class DepthUninstallValidator implements ModuleUninstallValidatorInterface {

-    use \Drupal\Core\DependencyInjection\DependencySerializationTrait;
+    use DependencySerializationTrait;

     /**
      * The id of the original proxied service.
@@ @@
     /**
      * The service container.
      *
-     * @var \Symfony\Component\DependencyInjection\ContainerInterface
+     * @var ContainerInterface
      */
     protected $container;

@@ @@
     /**
      * Constructs a ProxyClass Drupal proxy object.
      *
-     * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+     * @param ContainerInterface $container
      *   The container.
      * @param string $drupal_proxy_original_service_id
      *   The service ID of the original service.
      */
-    public function __construct(\Symfony\Component\DependencyInjection\ContainerInterface $container, $drupal_proxy_original_service_id) {
+    public function __construct(ContainerInterface $container, $drupal_proxy_original_service_id) {
       $this->container = $container;
       $this->drupalProxyOriginalServiceId = $drupal_proxy_original_service_id;
     }
@@ @@
     /**
      * {@inheritdoc}
      */
-    public function setStringTranslation(\Drupal\Core\StringTranslation\TranslationInterface $translation) {
+    public function setStringTranslation(TranslationInterface $translation) {
       return $this->lazyLoadItself()->setStringTranslation($translation);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/taxonomy_term_depth/src/Form/DepthUpdateForm.php:8

    ---------- begin diff ----------
@@ @@
 namespace Drupal\taxonomy_term_depth\Form;


+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\taxonomy\VocabularyInterface;
@@ @@
     $vocabulary = \Drupal::request()->get('taxonomy_vocabulary');

     /**
-     * @var \Drupal\Core\Database\Connection
+     * @var Connection
      */
     $dbh = \Drupal::database();
     $countAll = $dbh->select('taxonomy_term_field_data', 'ttd')
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/taxonomy_term_depth/src/DepthUninstallValidator.php:18

    ---------- begin diff ----------
@@ @@


   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;


   /**
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * DepthUninstallValidator constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   * @param EntityTypeManagerInterface $entity_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
+   * @param TranslationInterface $string_translation
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, EntityFieldManagerInterface $entity_field_manager, TranslationInterface $string_translation) {
     $this->entityTypeManager = $entity_manager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 6 files have been changed by Rector                                       

