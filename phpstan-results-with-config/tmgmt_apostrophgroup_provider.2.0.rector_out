modules/contrib/tmgmt_apostrophgroup_provider/src/ApostrophTranslatorUI.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Plugin/tmgmt/Translator/ApostrophTranslator.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Api/ServiceStatusApi.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Api/TranslationApi.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/ApiException.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Configuration.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/HeaderSelector.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Model/ModelInterface.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Model/OrderState.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Model/RejectInfoData.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Model/TranslationData.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Model/TranslationStatus.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/ObjectSerializer.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Util/AXliff.php
modules/contrib/tmgmt_apostrophgroup_provider/src/Util/GeneralHelper.php
modules/contrib/tmgmt_apostrophgroup_provider/tmgmt_apostrophgroup_provider.module

9 files with changes
====================

1) modules/contrib/tmgmt_apostrophgroup_provider/tmgmt_apostrophgroup_provider.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Configuration;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api\TranslationApi;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\OrderState;
+use Drupal\file\FileUsage\FileUsageInterface;
+use Drupal\Core\Entity\EntityStorageException;
 /**
  * @file
  * Module file of the Apostroph Translator.
@@ @@
 /**
  * Download jobs using cron.
  *
- * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
- * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+ * @throws InvalidPluginDefinitionException
+ * @throws PluginNotFoundException
  */
 function tmgmt_apostrophgroup_provider_cron()
 {
@@ @@
 /**
  * Downlaod data by translator.
  *
- * @param \Drupal\tmgmt\TranslatorInterface $translator
+ * @param TranslatorInterface $translator
  *   Tranlator.
  */
 function tmgmt_apostrophgroup_provider_downlaod_data_by_translator(TranslatorInterface $translator, $only_finished_remote_jobs = TRUE)
@@ @@
   try {
     $all_local_jobs = GeneralHelper::getAllJobsByTranslator($translator, TRUE);
     $apostrophsettings = $translator->getSetting('apostroph-settings');
-    $config = new Restclient\Configuration();
+    $config = new Configuration();
     $config->setHost($apostrophsettings['url']);
     $config->setUsername($apostrophsettings['username']);
     $config->setPassword($apostrophsettings['password']);
-    $translation_api = new Api\TranslationApi(NULL, $config);
+    $translation_api = new TranslationApi(NULL, $config);
     $all_remote_status = $translation_api->translations();
     foreach ($all_local_jobs as $job) {
       $job_found_remote = FALSE; //array_search($job->getReference(), $all_remote_status);
@@ @@
       foreach ($all_remote_status as $remote_state) {
         if ($job->getReference() == $remote_state->getTranslationId()) {
           $job_found_remote = TRUE;
-          if ($only_finished_remote_jobs && $remote_state->getState() != Model\OrderState::FINISHED) {
+          if ($only_finished_remote_jobs && $remote_state->getState() != OrderState::FINISHED) {
             $job_found_remote = FALSE;
           }
           break;
@@ @@
   try {
     $translator = $job->getTranslator();
     $apostrophsettings = $translator->getSetting('apostroph-settings');
-    $config = new Restclient\Configuration();
+    $config = new Configuration();
     $config->setHost($apostrophsettings['url']);
     $config->setUsername($apostrophsettings['username']);
     $config->setPassword($apostrophsettings['password']);
-    $translation_api = new Api\TranslationApi(NULL, $config);
+    $translation_api = new TranslationApi(NULL, $config);
     $translation_api->cancelTranslationWithHttpInfo($job->getReference());
     $job->addMessage(t("Apostroph Job cancelled:") . $job->getReference());
     \Drupal::messenger()->addError(t("Apostroph Job cancelled:") . $job->getReference());
@@ @@
     $fids = $result->fetchCol();
     if (!empty($fids)) {
       // Remove file usage record.
-      /** @var \Drupal\file\FileUsage\FileUsageInterface $file_usage */
+      /** @var FileUsageInterface $file_usage */
       $file_usage = \Drupal::service('file.usage');
       foreach (File::loadMultiple($fids) as $file) {
         $file_usage->delete($file, 'tmgmt_file', 'tmgmt_job', $job->id());
@@ @@
  *
  * @param array $form
  *   Form with input data.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   Form_state.
  */
 function tmgmt_apostrophgroup_provider_semi_import_form_submit(array $form, FormStateInterface $form_state)
@@ @@
 /**
  * Method to downlaod data.
  *
- * @param \Drupal\tmgmt\TranslatorInterface $translator
+ * @param TranslatorInterface $translator
  *   Translator.
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   Job.
  */
 function tmgmt_apostrophgroup_provider_downlaod_data_by_job(TranslatorInterface $translator, JobInterface $job)
@@ @@
     // If code 204 no file available.
     // if code 200 we get the file.
     // get response using api.
-    $config = new Restclient\Configuration();
+    $config = new Configuration();
     $config->setHost($apostrophsettings['url']);
     $config->setPassword($apostrophsettings['password']);
     $config->setUsername($apostrophsettings['username']);
-    $translation_api = new Api\TranslationApi(NULL, $config);
+    $translation_api = new TranslationApi(NULL, $config);
     $translation_response = $translation_api->translationbyIDWithHttpInfo($prId);
     // Check here respose.
     if ($translation_response[1] == '204') {
@@ @@
 /**
  * Import file into Drupal.
  *
- * @param \Drupal\tmgmt\JobInterface $job
+ * @param JobInterface $job
  *   Job.
  * @param string $filedatastring
  *   File content.
@@ @@
  * @param string $filename
  *   Name of the file to be imported.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function tmgmt_apostropgroup_provider_import(JobInterface $job, $filedatastring, $filename)
 {
@@ @@
   $path_gz = $job->getSetting('scheme') . '://tmgmt_apostrophgroup/ApostrophReceivedFiles/' . $filename;
   $dirname = dirname($path_gz);
   if (\Drupal::service('file_system')->prepareDirectory($dirname, FileSystemInterface::CREATE_DIRECTORY)) {
-    $file_gz = file_save_data($filedatastring, $path_gz, FileSystemInterface::EXISTS_REPLACE);
+    $file_gz = \Drupal::service('file.repository')->writeData($filedatastring, $path_gz, FileSystemInterface::EXISTS_REPLACE);
     // $mimetype = $file_gz->getMimeType();
     $filearray = array();
     /**
@@ @@
  * @return array
  *   Array with file object.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function apcreate_file_object_from_stdclass(array $filearray)
 {
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector


2) modules/contrib/tmgmt_apostrophgroup_provider/src/Util/GeneralHelper.php:7

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_apostrophgroup_provider\Util;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\file\FileInterface;
 use Drupal\tmgmt\Entity\JobItem;
 use Drupal\tmgmt\Entity\Job;
@@ @@
   /**
    * Get label of the job.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Job.
    *
    * @return string
@@ @@
   /**
    * Remove spec. characters from label.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Job.
    *
    * @return string
@@ @@
    * @param string $uri
    *   Uri.
    *
-   * @return \Drupal\file\Entity\File
+   * @return File
    *   file class object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function createFileObject($uri) {
     $filsystem = \Drupal::service('file_system');
@@ @@
   /**
    * Get all jobs for connector config.
    *
-   * @param \Drupal\tmgmt\TranslatorInterface $translator
+   * @param TranslatorInterface $translator
    *   TranslatorInterface.
    * @param bool $onlyactive
    *   Only active jobs.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   storage instance.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function getAllJobsByTranslator(TranslatorInterface $translator, $onlyactive = FALSE) {
     $trname = $translator->id();
@@ @@
   /**
    * Reset Job and Items to state Active.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   TranslatorInterface.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   TranslatorInterface.
    */
   public static function resetJobandItemsToActive(JobInterface &$job, FileInterface $file) {
@@ @@
    *
    * @param array $translator_settings
    *   Translator's settings.
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   Job to be sent.
    * @param \Drupal\tmgmt_apostrophgroup_provider\Util\string $path_to_file
    *   Path to zip file that contains source file.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/tmgmt_apostrophgroup_provider/src/Util/AXliff.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Exports each item into its own file.
    *
-   * @param \Drupal\tmgmt\JobItemInterface $jobItem
+   * @param JobItemInterface $jobItem
    *   JobItem that should be exported.
    * @param array $conditions
    *   Conditions.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/ObjectSerializer.php:27

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_apostrophgroup_provider\Restclient;

+use Psr\Http\Message\StreamInterface;
 /**
  * ObjectSerializer Class Doc Comment
  *
@@ @@
             settype($data, $class);
             return $data;
         } elseif ($class === '\SplFileObject') {
-            /** @var \Psr\Http\Message\StreamInterface $data */
-
+            /** @var StreamInterface $data */
             // determine file name
             if (array_key_exists('Content-Disposition', $httpHeaders) &&
                 preg_match('/inline; filename=[\'"]?([^\'"\s]+)[\'"]?$/i', $httpHeaders['Content-Disposition'], $match)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Model/TranslationStatus.php:234

    ---------- begin diff ----------
@@ @@
     /**
      * Gets state
      *
-     * @return \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\OrderState
+     * @return OrderState
      */
     public function getState()
     {
@@ @@
     /**
      * Sets state
      *
-     * @param \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\OrderState $state state
+     * @param OrderState $state state
      *
      * @return $this
      */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Api/TranslationApi.php:26

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_apostrophgroup_provider\Restclient\Api;

+use GuzzleHttp\Promise\PromiseInterface;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\TranslationData;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\TranslationStatus;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\RejectInfoData;
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ @@
      *
      * @param  string $translation_id ID der Übersetzung (required)
      *
-     * @throws \Drupal\tmgmt_apostrophgroup_provider\Restclient\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return void
      */
@@ @@
      *
      * @param  string $translation_id ID der Übersetzung (required)
      *
-     * @throws \Drupal\tmgmt_apostrophgroup_provider\Restclient\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of null, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $translation_id ID der Übersetzung (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function cancelTranslationAsync($translation_id)
     {
@@ @@
      * @param  string $translation_id ID der Übersetzung (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function cancelTranslationAsyncWithHttpInfo($translation_id)
     {
@@ @@
      * @param  string $translation_id ID der Übersetzung (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function cancelTranslationRequest($translation_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * Create new Translation
      *
-     * @param  \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\TranslationData $body Daten zur Übersetzung (required)
+     * @param TranslationData $body Daten zur Übersetzung (required)
      *
-     * @throws \Drupal\tmgmt_apostrophgroup_provider\Restclient\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\TranslationStatus
+     * @return TranslationStatus
      */
     public function createnewTranslation($body)
     {
@@ @@
      *
      * Create new Translation
      *
-     * @param  \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\TranslationData $body Daten zur Übersetzung (required)
+     * @param TranslationData $body Daten zur Übersetzung (required)
      *
-     * @throws \Drupal\tmgmt_apostrophgroup_provider\Restclient\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\TranslationStatus, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * Create new Translation
      *
-     * @param  \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\TranslationData $body Daten zur Übersetzung (required)
+     * @param TranslationData $body Daten zur Übersetzung (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function createnewTranslationAsync($body)
     {
@@ @@
      *
      * Create new Translation
      *
-     * @param  \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\TranslationData $body Daten zur Übersetzung (required)
+     * @param TranslationData $body Daten zur Übersetzung (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function createnewTranslationAsyncWithHttpInfo($body)
     {
@@ @@
     /**
      * Create request for operation 'createnewTranslation'
      *
-     * @param  \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\TranslationData $body Daten zur Übersetzung (required)
+     * @param TranslationData $body Daten zur Übersetzung (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function createnewTranslationRequest($body)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * Reject Translation
      *
-     * @param  \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\RejectInfoData $body body (required)
+     * @param RejectInfoData $body body (required)
      * @param  string $translation_id ID der Übersetzung (required)
      *
-     * @throws \Drupal\tmgmt_apostrophgroup_provider\Restclient\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return void
      */
@@ @@
      *
      * Reject Translation
      *
-     * @param  \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\RejectInfoData $body (required)
+     * @param RejectInfoData $body (required)
      * @param  string $translation_id ID der Übersetzung (required)
      *
-     * @throws \Drupal\tmgmt_apostrophgroup_provider\Restclient\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of null, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      * Reject Translation
      *
-     * @param  \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\RejectInfoData $body (required)
+     * @param RejectInfoData $body (required)
      * @param  string $translation_id ID der Übersetzung (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function rejectTranslationAsync($body, $translation_id)
     {
@@ @@
      *
      * Reject Translation
      *
-     * @param  \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\RejectInfoData $body (required)
+     * @param RejectInfoData $body (required)
      * @param  string $translation_id ID der Übersetzung (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function rejectTranslationAsyncWithHttpInfo($body, $translation_id)
     {
@@ @@
     /**
      * Create request for operation 'rejectTranslation'
      *
-     * @param  \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\RejectInfoData $body (required)
+     * @param RejectInfoData $body (required)
      * @param  string $translation_id ID der Übersetzung (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function rejectTranslationRequest($body, $translation_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'POST',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      *
      * @param  string $translation_id ID der Übersetzung (required)
      *
-     * @throws \Drupal\tmgmt_apostrophgroup_provider\Restclient\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return string
      */
@@ @@
      *
      * @param  string $translation_id ID der Übersetzung (required)
      *
-     * @throws \Drupal\tmgmt_apostrophgroup_provider\Restclient\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of string, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * @param  string $translation_id ID der Übersetzung (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function translationbyIDAsync($translation_id)
     {
@@ @@
      * @param  string $translation_id ID der Übersetzung (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function translationbyIDAsyncWithHttpInfo($translation_id)
     {
@@ @@
      * @param  string $translation_id ID der Übersetzung (required)
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function translationbyIDRequest($translation_id)
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
@@ @@
      * Translations
      *
      *
-     * @throws \Drupal\tmgmt_apostrophgroup_provider\Restclient\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
-     * @return \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\TranslationStatus[]
+     * @return TranslationStatus[]
      */
     public function translations()
     {
@@ @@
      * Translations
      *
      *
-     * @throws \Drupal\tmgmt_apostrophgroup_provider\Restclient\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of \Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\TranslationStatus[], HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function translationsAsync()
     {
@@ @@
      *
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function translationsAsyncWithHttpInfo()
     {
@@ @@
      *
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function translationsRequest()
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/tmgmt_apostrophgroup_provider/src/Restclient/Api/ServiceStatusApi.php:26

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_apostrophgroup_provider\Restclient\Api;

+use GuzzleHttp\Promise\PromiseInterface;
+use function GuzzleHttp\json_encode;
+use function GuzzleHttp\Psr7\build_query;
 use GuzzleHttp\Client;
 use GuzzleHttp\ClientInterface;
 use GuzzleHttp\Exception\RequestException;
@@ @@
      * Status
      *
      *
-     * @throws \Drupal\tmgmt_apostrophgroup_provider\Restclient\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of null, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      * Status
      *
      *
-     * @throws \Drupal\tmgmt_apostrophgroup_provider\Restclient\ApiException on non-2xx response
+     * @throws ApiException on non-2xx response
      * @throws \InvalidArgumentException
      * @return array of null, HTTP status code, HTTP response headers (array of strings)
      */
@@ @@
      *
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusAsync()
     {
@@ @@
      *
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Promise\PromiseInterface
+     * @return PromiseInterface
      */
     public function statusAsyncWithHttpInfo()
     {
@@ @@
      *
      *
      * @throws \InvalidArgumentException
-     * @return \GuzzleHttp\Psr7\Request
+     * @return Request
      */
     protected function statusRequest()
     {
@@ @@
             $httpBody = $_tempBody;
             // \stdClass has no __toString(), so we should encode it manually
             if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($httpBody);
+                $httpBody = json_encode($httpBody);
             }
         } elseif (count($formParams) > 0) {
             if ($multipart) {
@@ @@
                 $httpBody = new MultipartStream($multipartContents);

             } elseif ($headers['Content-Type'] === 'application/json') {
-                $httpBody = \GuzzleHttp\json_encode($formParams);
+                $httpBody = json_encode($formParams);

             } else {
                 // for HTTP post (form)
-                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
+                $httpBody = build_query($formParams);
             }
         }

@@ @@
             $headers
         );

-        $query = \GuzzleHttp\Psr7\build_query($queryParams);
+        $query = build_query($queryParams);
         return new Request(
             'GET',
             $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/tmgmt_apostrophgroup_provider/src/Plugin/tmgmt/Translator/ApostrophTranslator.php:8

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_apostrophgroup_provider\Plugin\tmgmt\Translator;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Configuration;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api\TranslationApi;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Model\TranslationData;
 use Drupal\Component\Utility\Xss;
 use Drupal\tmgmt\Entity\Job;
 use Drupal\tmgmt\Entity\JobItem;
@@ @@
    * During the translation process, Job::getItems() will only return job items
    * that are not already fully translated.
    *
-   * @param \Drupal\tmgmt\JobInterface $job
+   * @param JobInterface $job
    *   The job that should be submitted.
    *
    * @see hook_tmgmt_job_before_request_translation()
@@ @@
    *
    * @ingroup tmgmt_remote_languages_mapping
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function requestTranslation(JobInterface $job)
   {
@@ @@
           $labelname = $joblabel;
           $name = $labelname . "_" . $job->id() . "_all_" . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
           $jobpath = $allfilespath . "/" . $name;
-          $file = file_save_data($exporter->export($job), $jobpath, FileSystemInterface::EXISTS_REPLACE);
+          $file = \Drupal::service('file.repository')->writeData($exporter->export($job), $jobpath, FileSystemInterface::EXISTS_REPLACE);
           $filearrayexportedfiles['all'] = $file;
         } else {
           // Export each item of the job in separate file.
@@ @@
             $labelname = GeneralHelper::getStringNoSpeChars($item->label());
             $name = $labelname . "_" . $job->id() . "_" . $item->id() . "_" . $job->getRemoteSourceLanguage() . '_' . $job->getRemoteTargetLanguage() . '.xlf';
             $itempath = $allfilespath . "/" . $name;
-            $file = file_save_data($exporter->exportItem($item), $itempath, FileSystemInterface::EXISTS_REPLACE);
+            $file = \Drupal::service('file.repository')->writeData($exporter->exportItem($item), $itempath, FileSystemInterface::EXISTS_REPLACE);
             $filearrayexportedfiles[$item->id()] = $file;
           }
         }
@@ @@
             \Drupal::service('file.usage')->add($zipfileobj, 'tmgmt_apostrophgroup_provider', 'tmgmt_job', $job->id());
           }
           // TODO: send zip to Apostroph.
-          $config = new Restclient\Configuration();
+          $config = new Configuration();
           $config->setHost($apostrophsettings['url']);
           $config->setUsername($apostrophsettings['username']);
           $config->setPassword($apostrophsettings['password']);
-          $translation_api = new Api\TranslationApi(NULL, $config);
+          $translation_api = new TranslationApi(NULL, $config);
           $translation_data = GeneralHelper::createTranslationRequest($apostrophsettings, $job, $zipPath);
-          $translation_request = new Model\TranslationData($translation_data);
+          $translation_request = new TranslationData($translation_data);
           $response = $translation_api->createnewTranslation($translation_request);
           $remote_job_id = $response->getTranslationId();
           $job->set('reference', $remote_job_id);

           $job->submitted("Job sent to provider!");
-          $messageTopass .= '<a href="' . file_create_url($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
+          $messageTopass .= '<a href="' . \Drupal::service('file_url_generator')->generateAbsoluteString($zipPath) . '">' . Xss::filter(GeneralHelper::getJobLabelNoSpeChars($job)) . '</a>';
           \Drupal::messenger()->addMessage(Markup::create($messageTopass));
           // As exported files are transfered as zip, delete org. exports as already in the zip.
           // Add zip to transfer array.
@@ @@
     try {
       $translator = $job->getTranslator();
       $apostrophsettings = $translator->getSetting('apostroph-settings');
-      $config = new Restclient\Configuration();
+      $config = new Configuration();
       $config->setHost($apostrophsettings['url']);
       $config->setUsername($apostrophsettings['username']);
       $config->setPassword($apostrophsettings['password']);
-      $translation_api = new Api\TranslationApi(NULL, $config);
+      $translation_api = new TranslationApi(NULL, $config);
       $response = $translation_api->cancelTranslationWithHttpInfo($job->getReference());
       $job->aborted();
       $job->addMessage(t("Apostroph Job cancelled:") . $job->getReference());
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/tmgmt_apostrophgroup_provider/src/ApostrophTranslatorUI.php:7

    ---------- begin diff ----------
@@ @@

 namespace Drupal\tmgmt_apostrophgroup_provider;

+use Drupal\tmgmt\TranslatorInterface;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Configuration;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api\ServiceStatusApi;
+use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api\TranslationApi;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\tmgmt_apostrophgroup_provider\Restclient\Api;
@@ @@
    */
   public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
     $form = parent::buildConfigurationForm($form, $form_state);
-    /** @var \Drupal\tmgmt\TranslatorInterface $translator */
+    /** @var TranslatorInterface $translator */
     $translator = $form_state->getFormObject()->getEntity();
     $apostrophsettings = $translator->getSetting('apostroph-settings');
     $cronsettings = $translator->getSetting('cron-settings');
@@ @@
         $apostrophsettings = $settings['apostroph-settings'];
         $username = $apostrophsettings['username'];
         $password = $apostrophsettings['password'];
-        $config = new Restclient\Configuration();
+        $config = new Configuration();
         $config->setHost($apostrophsettings['url']);
         $config->setUsername($username);
         $config->setPassword($password);
-        $status_api = new Api\ServiceStatusApi(NULL,$config);
+        $status_api = new ServiceStatusApi(NULL,$config);
         $response = $status_api->status();
         //$form_state->setValue(array('settings','apostroph-settings','password'),'');
         //$translator->setSetting('apostroph-settings',$apostrophsettings);
@@ @@
     //TODO: get new status from remote job using api.
     $translator = $job->getTranslator();
     $apostrophsettings = $translator->getSetting('apostroph-settings');
-    $config = new Restclient\Configuration();
+    $config = new Configuration();
     $config->setHost($apostrophsettings['url']);
     $config->setUsername($apostrophsettings['username']);
     $config->setPassword($apostrophsettings['password']);
-    $translation_api = new Api\TranslationApi(NULL, $config);
+    $translation_api = new TranslationApi(NULL, $config);
     $all_translations = $translation_api->translations();
     $status = "n/a";
     $remote_job_id = $job->getReference();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

