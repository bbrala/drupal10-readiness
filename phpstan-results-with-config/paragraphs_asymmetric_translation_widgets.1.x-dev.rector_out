modules/contrib/paragraphs_asymmetric_translation_widgets/paragraphs_asymmetric_translation_widgets.module
modules/contrib/paragraphs_asymmetric_translation_widgets/src/Plugin/Field/FieldWidget/ParagraphsAsymmetricWidget.php
modules/contrib/paragraphs_asymmetric_translation_widgets/src/Plugin/Field/FieldWidget/ParagraphsClassicAsymmetricWidget.php
modules/contrib/paragraphs_asymmetric_translation_widgets/tests/src/Functional/ParagraphsAsymmetricTranslationTest.php

3 files with changes
====================

1) modules/contrib/paragraphs_asymmetric_translation_widgets/tests/src/Functional/ParagraphsAsymmetricTranslationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\paragraphs_asymmetric_translation_widgets\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Tests\field_ui\Traits\FieldUiTestTrait;
 use Drupal\Tests\paragraphs\Traits\ParagraphsCoreVersionUiTestTrait;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * A user with admin permissions.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->drupalPlaceBlock('local_tasks_block');
     $this->drupalPlaceBlock('page_title_block');
@@ @@
       'settings[paragraph][text][settings][language][language_alterable]' => FALSE,
       'settings[paragraph][nested_paragraph][fields][field_paragraphs_demo]' => TRUE,
     ];
-    $this->drupalPostForm(
-      'admin/config/regional/content-language',
-      $edit,
-      t('Save configuration')
-    );
+    $this->drupalGet('admin/config/regional/content-language');
+    $this->submitForm($edit, t('Save configuration'));
   }

   /**
@@ @@
   public function testParagraphsMultilingualFieldTranslation() {
     // Set widget to assymetric one.
     $this->drupalGet('/admin/structure/types/manage/paragraphed_content_demo/form-display');
-    $this->drupalPostForm(NULL, array('fields[field_paragraphs_demo][type]' => 'paragraphs_classic_asymmetric'), t('Save'));
+    $this->submitForm(array('fields[field_paragraphs_demo][type]' => 'paragraphs_classic_asymmetric'), t('Save'));

     // 1. Translate node and create different paragraphs.
     // Add an English node.
     $this->drupalGet('node/add/paragraphed_content_demo');
-    $this->drupalPostForm(NULL, NULL, t('Add Text'));
+    $this->submitForm(NULL, t('Add Text'));

     $edit = [
       'title[0][value]' => 'Title in english',
       'field_paragraphs_demo[0][subform][field_text_demo][0][value]' => 'Text in english',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Translate the node to French.
     $node = $this->drupalGetNodeByTitle('Title in english');
     $this->drupalGet('node/' . $node->id() . '/translations/add/en/fr');

-    $this->drupalPostForm(NULL, [], 'field_paragraphs_demo_0_edit');
+    $this->submitForm([], 'field_paragraphs_demo_0_edit');

     $edit = [
       'title[0][value]' => 'Title in french',
@@ @@
       'revision' => TRUE,
       'revision_log[0][value]' => 'french 1',
     ];
-    $this->drupalPostForm(
-      NULL,
-      $edit,
-      t('Save (this translation)')
-    );
+    $this->submitForm($edit, t('Save (this translation)'));

     // Check the english translation.
     $this->drupalGet('node/' . $node->id());
@@ @@
     // Try to edit the paragraphs, to see if the correct translation gets
     // updated. Start with the english.
     $this->drupalGet('node/' . $node->id() . '/edit');
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_demo_0_edit');
+    $this->submitForm([], 'field_paragraphs_demo_0_edit');
     $edit = [
       'field_paragraphs_demo[0][subform][field_text_demo][0][value]' => 'The updated english text',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
+    $this->submitForm($edit, t('Save (this translation)'));
     // Check if only the english node had its paragraph text updated, and that
     // there has been no mixing-up of the paragraph entities.
     $this->drupalGet('node/' . $node->id());
@@ @@

     // Now repeat for the french.
     $this->drupalGet('fr/node/' . $node->id() . '/edit');
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_demo_0_edit');
+    $this->submitForm([], 'field_paragraphs_demo_0_edit');
     $edit = [
       'field_paragraphs_demo[0][subform][field_text_demo][0][value]' => 'The updated french text',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
+    $this->submitForm($edit, t('Save (this translation)'));
     // Check if only the french node had its paragraph text updated, and that
     // there has been no mixing-up of the paragraph entities.
     $this->drupalGet('node/' . $node->id());
@@ @@
     // 3. Add different number of paragraphs on each translation.
     // Add 2 more paragraphs on the english node.
     $this->drupalGet('node/' . $node->id() . '/edit');
-    $this->drupalPostForm(NULL, NULL, t('Add Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Text'));
+    $this->submitForm(NULL, t('Add Text'));
+    $this->submitForm(NULL, t('Add Text'));
     $edit = [
       'field_paragraphs_demo[1][subform][field_text_demo][0][value]' => 'Second text in english',
       'field_paragraphs_demo[2][subform][field_text_demo][0][value]' => 'Third text in english',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
+    $this->submitForm($edit, t('Save (this translation)'));

     // Confirm that the english node has the new paragraphs, and the french
     // node is intact.
@@ @@

     // Repeat the same, this time adding 3 new paragraphs on the french node.
     $this->drupalGet('fr/node/' . $node->id() . '/edit');
-    $this->drupalPostForm(NULL, NULL, t('Add Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Text'));
-    $this->drupalPostForm(NULL, NULL, t('Add Text'));
+    $this->submitForm(NULL, t('Add Text'));
+    $this->submitForm(NULL, t('Add Text'));
+    $this->submitForm(NULL, t('Add Text'));
     $edit = [
       'field_paragraphs_demo[1][subform][field_text_demo][0][value]' => 'Second text in french',
       'field_paragraphs_demo[2][subform][field_text_demo][0][value]' => 'Third text in french',
       'field_paragraphs_demo[3][subform][field_text_demo][0][value]' => 'Fourth text in french',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
+    $this->submitForm($edit, t('Save (this translation)'));

     // Confirm that the french node has the new paragraphs, and the english
     // node is intact.
@@ @@
     $this->drupalGet('node/' . $node->id() . '/edit');

     $this->assertNotNull($this->xpath('//*[@name="field_paragraphs_demo_1_remove"]'));
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_demo_1_remove');
+    $this->submitForm([], 'field_paragraphs_demo_1_remove');
     $this->assertNotNull($this->xpath('//*[@name="field_paragraphs_demo_1_confirm_remove"]'));
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_demo_1_confirm_remove');
-    $this->drupalPostForm(NULL, NULL, t('Save (this translation)'));
+    $this->submitForm([], 'field_paragraphs_demo_1_confirm_remove');
+    $this->submitForm(NULL, t('Save (this translation)'));

     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->pageTextContains('The updated english text');
@@ @@
     $this->drupalGet('fr/node/' . $node->id() . '/edit');

     $this->assertNotNull($this->xpath('//*[@name="field_paragraphs_demo_1_remove"]'));
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_demo_1_remove');
+    $this->submitForm([], 'field_paragraphs_demo_1_remove');
     $this->assertNotNull($this->xpath('//*[@name="field_paragraphs_demo_1_confirm_remove"]'));
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_demo_1_confirm_remove');
+    $this->submitForm([], 'field_paragraphs_demo_1_confirm_remove');
     $this->assertNotNull($this->xpath('//*[@name="field_paragraphs_demo_3_remove"]'));
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_demo_3_remove');
+    $this->submitForm([], 'field_paragraphs_demo_3_remove');
     $this->assertNotNull($this->xpath('//*[@name="field_paragraphs_demo_3_confirm_remove"]'));
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_demo_3_confirm_remove');
-    $this->drupalPostForm(NULL, NULL, t('Save (this translation)'));
+    $this->submitForm([], 'field_paragraphs_demo_3_confirm_remove');
+    $this->submitForm(NULL, t('Save (this translation)'));

     $this->drupalGet('fr/node/' . $node->id());
     $this->assertSession()->responseNotContains('The updated english text');
@@ @@
       'field_paragraphs_demo[0][_weight]' => 2,
       'field_paragraphs_demo[1][_weight]' => -2,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
+    $this->submitForm($edit, t('Save (this translation)'));

     $this->drupalGet('node/' . $node->id());
     $regex = '/Third text in english.*The updated english text/s';
@@ @@
       'field_paragraphs_demo[0][_weight]' => 2,
       'field_paragraphs_demo[1][_weight]' => -2,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
+    $this->submitForm($edit, t('Save (this translation)'));

     $this->drupalGet('fr/node/' . $node->id());
     $regex = '/Third text in french.*The updated french text/s';
@@ @@
   public function testParagraphsMultilingualFieldTranslationNested() {
     // Set widget to assymetric one.
     $this->drupalGet('/admin/structure/types/manage/paragraphed_content_demo/form-display');
-    $this->drupalPostForm(NULL, array('fields[field_paragraphs_demo][type]' => 'paragraphs_classic_asymmetric'), t('Save'));
+    $this->submitForm(array('fields[field_paragraphs_demo][type]' => 'paragraphs_classic_asymmetric'), t('Save'));

     // 1. Translate node and create different paragraphs.
     // Add an English node.
     $this->drupalGet('node/add/paragraphed_content_demo');
-    $this->drupalPostForm(NULL, NULL, t('Add Nested Paragraph'), []);
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_demo_0_subform_field_paragraphs_demo_text_add_more');
+    $this->submitForm(NULL, t('Add Nested Paragraph'));
+    $this->submitForm(NULL, 'field_paragraphs_demo_0_subform_field_paragraphs_demo_text_add_more');
     $edit = [
       'title[0][value]' => 'Title in english',
       'field_paragraphs_demo[0][subform][field_paragraphs_demo][0][subform][field_text_demo][0][value]' => 'Text in english',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Translate the node to French.
     $node = $this->drupalGetNodeByTitle('Title in english');
     $this->drupalGet('node/' . $node->id() . '/translations/add/en/fr');

-    $this->drupalPostForm(NULL, [], 'field_paragraphs_demo_0_edit');
+    $this->submitForm([], 'field_paragraphs_demo_0_edit');

     $edit = [
       'title[0][value]' => 'Title in french',
       'field_paragraphs_demo[0][subform][field_paragraphs_demo][0][subform][field_text_demo][0][value]' => 'Text in french',
     ];
-    $this->drupalPostForm(
-      NULL,
-      $edit,
-      t('Save (this translation)')
-    );
+    $this->submitForm($edit, t('Save (this translation)'));

     // Check the english translation.
     $this->drupalGet('node/' . $node->id());
@@ @@
     // Try to edit the paragraphs, to see if the correct translation gets
     // updated. Start with the english.
     $this->drupalGet('node/' . $node->id() . '/edit');
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_demo_0_edit');
+    $this->submitForm([], 'field_paragraphs_demo_0_edit');
     $edit = [
       'field_paragraphs_demo[0][subform][field_paragraphs_demo][0][subform][field_text_demo][0][value]' => 'The updated english text',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save (this translation)'));
+    $this->submitForm($edit, t('Save (this translation)'));
     // Check if only the english node had its paragraph text updated, and that
     // there has been no mixing-up of the paragraph entities.
     $this->drupalGet('node/' . $node->id());
@@ @@
     // 3. Add different number of paragraphs on one translation.
     // Add one more paragraph on the english node.
     $this->drupalGet('node/' . $node->id() . '/edit');
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_demo_0_edit');
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_demo_0_subform_field_paragraphs_demo_text_add_more');
+    $this->submitForm([], 'field_paragraphs_demo_0_edit');
+    $this->submitForm(NULL, 'field_paragraphs_demo_0_subform_field_paragraphs_demo_text_add_more');
     $edit = [
       'field_paragraphs_demo[0][subform][field_paragraphs_demo][1][subform][field_text_demo][0][value]' => 'New english text',
     ];
-    $this->drupalPostForm(
-      NULL,
-      $edit,
-      t('Save (this translation)')
-    );
+    $this->submitForm($edit, t('Save (this translation)'));

     // Confirm that the english node has the new paragraphs, and the french
     // node is intact.
@@ @@
   public function testParagraphsMultilingualFieldDeleteTranslation() {
     // Set widget to assymetric one.
     $this->drupalGet('/admin/structure/types/manage/paragraphed_content_demo/form-display');
-    $this->drupalPostForm(NULL, array('fields[field_paragraphs_demo][type]' => 'paragraphs_classic_asymmetric'), t('Save'));
+    $this->submitForm(array('fields[field_paragraphs_demo][type]' => 'paragraphs_classic_asymmetric'), t('Save'));

     // 1. Translate node and create different paragraphs. Delete the translation
     // and check if the original is intact.
     // Add an English node.
     $this->drupalGet('node/add/paragraphed_content_demo');
-    $this->drupalPostForm(NULL, NULL, t('Add Nested Paragraph'));
-    $this->drupalPostForm(NULL, NULL, 'field_paragraphs_demo_0_subform_field_paragraphs_demo_text_add_more');
+    $this->submitForm(NULL, t('Add Nested Paragraph'));
+    $this->submitForm(NULL, 'field_paragraphs_demo_0_subform_field_paragraphs_demo_text_add_more');
     $edit = [
       'title[0][value]' => 'Title in english',
       'field_paragraphs_demo[0][subform][field_paragraphs_demo][0][subform][field_text_demo][0][value]' => 'Text in english',
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));

     // Translate the node to French.
     $node = $this->drupalGetNodeByTitle('Title in english');
     $this->drupalGet('node/' . $node->id() . '/translations/add/en/fr');
-    $this->drupalPostForm(NULL, [], 'field_paragraphs_demo_0_edit');
+    $this->submitForm([], 'field_paragraphs_demo_0_edit');

     $edit = [
       'title[0][value]' => 'Title in french',
       'field_paragraphs_demo[0][subform][field_paragraphs_demo][0][subform][field_text_demo][0][value]' => 'Text in french',
     ];
-    $this->drupalPostForm(
-      NULL,
-      $edit,
-      t('Save (this translation)')
-    );
+    $this->submitForm($edit, t('Save (this translation)'));

     // Check the english translation.
     $this->drupalGet('node/' . $node->id());
@@ @@

     // Now delete the french translation.
     $this->drupalGet('fr/node/' . $node->id() . '/delete');
-    $this->drupalPostForm(NULL, NULL, t('Delete French translation'));
+    $this->submitForm(NULL, t('Delete French translation'));

     // Check the english translation.
     $this->drupalGet('node/' . $node->id());
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/paragraphs_asymmetric_translation_widgets/src/Plugin/Field/FieldWidget/ParagraphsClassicAsymmetricWidget.php:40

    ---------- begin diff ----------
@@ @@
     $parents = $element['#field_parents'];
     $info = [];

-    /** @var \Drupal\paragraphs\ParagraphInterface $paragraphs_entity */
+    /** @var ParagraphInterface $paragraphs_entity */
     $paragraphs_entity = NULL;
     $host = $items->getEntity();
     $widget_state = static::getWidgetState($parents, $field_name, $form_state);
@@ @@
    * Also, in case of a translatable paragraph, updates its original language
    * and removes all other translations.
    *
-   * @param \Drupal\paragraphs\ParagraphInterface $paragraph
+   * @param ParagraphInterface $paragraph
    *   The paragraph entity to clone.
    * @param string $langcode
    *   Language code for all the clone entities created.
    *
-   * @return \Drupal\paragraphs\ParagraphInterface
+   * @return ParagraphInterface
    *   New paragraph object with the data from the original paragraph. Not
    *   saved. All sub-paragraphs are clones as well.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/paragraphs_asymmetric_translation_widgets/paragraphs_asymmetric_translation_widgets.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\field\FieldConfigInterface;
 /**
  * @file
  * Module file.
@@ @@
 function paragraphs_asymmetric_translation_widgets_entity_translation_create(EntityInterface $entity) {
   $entity_type_manager = \Drupal::entityTypeManager();
   $paragraph_storage = $entity_type_manager->getStorage('paragraph');
-  /** @var \Drupal\field\FieldConfigInterface[] $field_definitions */
+  /** @var FieldConfigInterface[] $field_definitions */
   $field_definitions = $entity_type_manager->getStorage('field_config')
     ->loadByProperties([
       'entity_type' => $entity->getEntityTypeId(),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 3 files have been changed by Rector                                       

