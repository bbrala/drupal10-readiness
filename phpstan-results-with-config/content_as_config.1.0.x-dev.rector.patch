diff --git a/src/Commands/ContentAsConfigCommands.php b/src/Commands/ContentAsConfigCommands.php
index 580c1c0..e8fc138 100644
--- a/src/Commands/ContentAsConfigCommands.php
+++ b/src/Commands/ContentAsConfigCommands.php
@@ -14,7 +14,7 @@ class ContentAsConfigCommands extends DrushCommands {
   /**
    * The DI container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected ContainerInterface $container;
 
@@ -28,7 +28,7 @@ class ContentAsConfigCommands extends DrushCommands {
   /**
    * Constructor for this class.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The DI container.
    */
   public function __construct(ContainerInterface $container) {
@@ -120,7 +120,7 @@ class ContentAsConfigCommands extends DrushCommands {
    * @param string $entity_type
    *   The type of entity whose controller is to be fetched.
    *
-   * @return \Drupal\content_as_config\Controller\EntityControllerBase
+   * @return EntityControllerBase
    *   The controller appropriate to the entity.
    *
    * @throws \RuntimeException
diff --git a/src/Controller/EntityControllerBase.php b/src/Controller/EntityControllerBase.php
index 1e90a71..4e80c89 100644
--- a/src/Controller/EntityControllerBase.php
+++ b/src/Controller/EntityControllerBase.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\content_as_config\Controller;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Controller\ControllerBase;
@@ -28,29 +30,29 @@ abstract class EntityControllerBase extends ControllerBase {
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected EntityFieldManagerInterface $entityFieldManager;
 
   /**
    * The per-entity-type configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected Config $entityConfig;
 
   /**
    * EntityControllerBase constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
    */
   public function __construct(
@@ -86,7 +88,7 @@ abstract class EntityControllerBase extends ControllerBase {
    *
    * Declared static because it must be callable from a batch.
    *
-   * @param string|\Drupal\Core\StringTranslation\TranslatableMarkup $message
+   * @param string|TranslatableMarkup $message
    *   The message to be written.
    * @param string $level
    *   The severity level. Defaults to 'notice'.
@@ -110,7 +112,7 @@ abstract class EntityControllerBase extends ControllerBase {
    * @param array|null $export_list
    *   A list of exportable identifiers.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface[]
+   * @return ContentEntityInterface[]
    *   An array of entities.
    */
   protected function getExportableEntities(?array $export_list): array {
@@ -154,7 +156,7 @@ abstract class EntityControllerBase extends ControllerBase {
    *
    * @param array $form
    *   The form that is being submitted.
-   * @param \Drupal\Core\Form\FormStateInterface|null $form_state
+   * @param FormStateInterface|null $form_state
    *   The state of the form that is being submitted.
    *
    * @return int
@@ -233,7 +235,7 @@ abstract class EntityControllerBase extends ControllerBase {
    *
    * @param array $form
    *   The form whose data is being submitted.
-   * @param \Drupal\Core\Form\FormStateInterface|null $form_state
+   * @param FormStateInterface|null $form_state
    *   The state of the form that is being submitted.
    *
    * @return int
@@ -531,10 +533,10 @@ abstract class EntityControllerBase extends ControllerBase {
    *
    * @param array $info
    *   The configuration array.
-   * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
+   * @param ContentEntityInterface|null $entity
    *   The entity to be updated, if any.
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface
+   * @return ContentEntityInterface
    *   The created/updated entity.
    */
   protected static function arrayToEntity(array $info, ?ContentEntityInterface $entity = NULL): ContentEntityInterface {
@@ -586,10 +588,10 @@ abstract class EntityControllerBase extends ControllerBase {
   /**
    * Gets the entity-type definition for the current type.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface
+   * @return EntityTypeInterface
    *   The entity-type definition.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    *   Thrown if an invalid entity type is requested.
    */
   protected static function getEntityType(): EntityTypeInterface {
diff --git a/src/Form/ContentImportExportInterface.php b/src/Form/ContentImportExportInterface.php
index cba5738..e4f367d 100644
--- a/src/Form/ContentImportExportInterface.php
+++ b/src/Form/ContentImportExportInterface.php
@@ -13,10 +13,10 @@ interface ContentImportExportInterface {
   /**
    * Fetches the controller for this entity type.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The DI container.
    *
-   * @return \Drupal\content_as_config\Controller\EntityControllerBase
+   * @return EntityControllerBase
    *   An instance of the controller
    */
   public function getController(ContainerInterface $container): EntityControllerBase;
diff --git a/src/Form/ExportBase.php b/src/Form/ExportBase.php
index eab3a71..7895892 100644
--- a/src/Form/ExportBase.php
+++ b/src/Form/ExportBase.php
@@ -15,21 +15,21 @@ abstract class ExportBase extends FormBase implements ContentImportExportInterfa
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
    * The dependency-injection container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected ContainerInterface $container;
 
   /**
    * ExportBase constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The DI container.
    */
   public function __construct(ContainerInterface $container) {
diff --git a/src/Form/ImportBase.php b/src/Form/ImportBase.php
index 97cf27f..78c4b8d 100644
--- a/src/Form/ImportBase.php
+++ b/src/Form/ImportBase.php
@@ -14,14 +14,14 @@ abstract class ImportBase extends FormBase implements ContentImportExportInterfa
   /**
    * The DI container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
    * ExportBase constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The DI container.
    */
   public function __construct(ContainerInterface $container) {
diff --git a/tests/src/Functional/BlockContentTest.php b/tests/src/Functional/BlockContentTest.php
index d720a4c..91168c9 100644
--- a/tests/src/Functional/BlockContentTest.php
+++ b/tests/src/Functional/BlockContentTest.php
@@ -29,14 +29,14 @@ class BlockContentTest extends BrowserTestBase {
   /**
    * An authenticated user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $adminUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser([
@@ -68,28 +68,29 @@ class BlockContentTest extends BrowserTestBase {
     $edit = [];
     $edit['info[0][value]'] = $block_label;
     $edit['body[0][value]'] = $block_body;
-    $this->drupalPostForm('block/add/basic', $edit, t('Save'));
+    $this->drupalGet('block/add/basic');
+    $this->submitForm($edit, t('Save'));
 
     $bc_storage = \Drupal::entityTypeManager()
       ->getStorage('block_content');
     $bc_entities = $bc_storage->loadByProperties(['info' => $block_label]);
-    /** @var \Drupal\block_content\Entity\BlockContent $bc_entity */
+    /** @var BlockContent $bc_entity */
     $bc_entity = reset($bc_entities);
-    $this->assert($bc_entity instanceof BlockContent, 'Block content failed to be created');
+    $this->assertTrue($bc_entity instanceof BlockContent, 'Block content failed to be created');
     $bc_uuid = $bc_entity->uuid();
     $bc_id = $bc_entity->id();
 
     $this->drupalGet('admin/structure/content-as-config/blocks-export');
     $edit = ['export_list[' . $bc_uuid . ']' => $bc_uuid];
-    $this->drupalPostForm(NULL, $edit, t('Export'));
+    $this->submitForm($edit, t('Export'));
 
     $config = $this->config('content_as_config.block_content');
     $bc_config_item = $config->get($bc_uuid);
     $this->assertNotEmpty($bc_config_item, 'Block content configuration was not saved.');
 
-    $this->assertEqual($bc_config_item['uuid'], $bc_uuid, 'Block content UUID does not match.');
-    $this->assertEqual($bc_config_item['id'], $bc_id, 'Block content ID does not match.');
-    $this->assertEqual($bc_config_item['info'], $block_label, 'Block content label does not match.');
+    $this->assertEquals($bc_config_item['uuid'], $bc_uuid, 'Block content UUID does not match.');
+    $this->assertEquals($bc_config_item['id'], $bc_id, 'Block content ID does not match.');
+    $this->assertEquals($bc_config_item['info'], $block_label, 'Block content label does not match.');
     // TODO: validate block body.
 
     $bc_entity->delete();
@@ -99,14 +100,14 @@ class BlockContentTest extends BrowserTestBase {
 
     $this->drupalGet('admin/structure/content-as-config/blocks-import');
     $edit = ['import_list[' . $bc_uuid . ']' => $bc_uuid];
-    $this->drupalPostForm(NULL, $edit, t('Import'));
+    $this->submitForm($edit, t('Import'));
 
     $bc_entities = $bc_storage->loadByProperties(['info' => $block_label]);
     $bc_entity = reset($bc_entities);
     $this->assertNotEmpty($bc_entity, 'Block content was not properly reconstituted.');
 
-    $this->assertEqual($bc_entity->id(), $bc_id, 'Block content ID was not properly set.');
-    $this->assertEqual($bc_entity->label(), $block_label, 'Link title was not properly set.');
+    $this->assertEquals($bc_entity->id(), $bc_id, 'Block content ID was not properly set.');
+    $this->assertEquals($bc_entity->label(), $block_label, 'Link title was not properly set.');
     // TODO: validate block body.
   }
 
diff --git a/tests/src/Functional/MenuLinksTest.php b/tests/src/Functional/MenuLinksTest.php
index c9f29df..5d067b0 100644
--- a/tests/src/Functional/MenuLinksTest.php
+++ b/tests/src/Functional/MenuLinksTest.php
@@ -29,7 +29,7 @@ class MenuLinksTest extends BrowserTestBase {
   /**
    * An authenticated user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $adminUser;
 
@@ -38,7 +38,7 @@ class MenuLinksTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->adminUser = $this->drupalCreateUser([
@@ -70,7 +70,7 @@ class MenuLinksTest extends BrowserTestBase {
       'link[0][uri]' => 'http://example.com/foo#bar',
       'title[0][value]' => $link_title,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
 
     $link_storage = \Drupal::entityTypeManager()
       ->getStorage('menu_link_content');
@@ -78,22 +78,22 @@ class MenuLinksTest extends BrowserTestBase {
       'menu_name' => $this->menuName,
       'title' => $link_title,
     ]);
-    /** @var \Drupal\menu_link_content\Entity\MenuLinkContent $link_entity */
+    /** @var MenuLinkContent $link_entity */
     $link_entity = reset($link_entities);
-    $this->assert($link_entity instanceof MenuLinkContent, 'Link failed to be created');
+    $this->assertTrue($link_entity instanceof MenuLinkContent, 'Link failed to be created');
     $link_uuid = $link_entity->uuid();
 
     $this->drupalGet('admin/structure/content-as-config/menu-export');
     $edit = ['export_list[' . $this->menuName . ']' => $this->menuName];
-    $this->drupalPostForm(NULL, $edit, t('Export'));
+    $this->submitForm($edit, t('Export'));
 
     $config = $this->config('content_as_config.menu_link_content');
     $link_config_item = $config->get($link_uuid);
     $this->assertNotEmpty($link_config_item, 'Link configuration was not saved.');
 
-    $this->assertEqual($link_config_item['uuid'], $link_uuid, 'Link UUID does not match.');
-    $this->assertEqual($link_config_item['menu_name'], $this->menuName, 'Link not set to correct menu.');
-    $this->assertEqual($link_config_item['link'], 'http://example.com/foo#bar', 'Link should point to /node; actually points to ' . $link_config_item['link']);
+    $this->assertEquals($link_config_item['uuid'], $link_uuid, 'Link UUID does not match.');
+    $this->assertEquals($link_config_item['menu_name'], $this->menuName, 'Link not set to correct menu.');
+    $this->assertEquals($link_config_item['link'], 'http://example.com/foo#bar', 'Link should point to /node; actually points to ' . $link_config_item['link']);
 
     $link_entity->delete();
 
@@ -105,7 +105,7 @@ class MenuLinksTest extends BrowserTestBase {
 
     $this->drupalGet('admin/structure/content-as-config/menu-import');
     $edit = ['import_list[' . $link_uuid . ']' => $link_uuid];
-    $this->drupalPostForm(NULL, $edit, t('Import'));
+    $this->submitForm($edit, t('Import'));
 
     $link_entities = $link_storage->loadByProperties([
       'menu_name' => $this->menuName,
@@ -116,9 +116,9 @@ class MenuLinksTest extends BrowserTestBase {
 
     $uri = $link_entity->getUrlObject()->getUri();
 
-    $this->assertEqual($link_entity->getMenuName(), $this->menuName, 'Link menu name was not properly set.');
-    $this->assertEqual($link_entity->label(), $link_title, 'Link title was not properly set.');
-    $this->assertEqual($uri, 'http://example.com/foo#bar', 'Link URI not set properly. Expected http://example.com/foo#bar, got ' . $uri);
+    $this->assertEquals($link_entity->getMenuName(), $this->menuName, 'Link menu name was not properly set.');
+    $this->assertEquals($link_entity->label(), $link_title, 'Link title was not properly set.');
+    $this->assertEquals($uri, 'http://example.com/foo#bar', 'Link URI not set properly. Expected http://example.com/foo#bar, got ' . $uri);
   }
 
 }
\ No newline at end of file
