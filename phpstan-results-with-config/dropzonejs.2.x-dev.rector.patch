diff --git a/dropzonejs.install b/dropzonejs.install
index 17f9f88..4914eb2 100644
--- a/dropzonejs.install
+++ b/dropzonejs.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Asset\LibrariesDirectoryFileFinder;
 /**
  * @file
  * Install, update and uninstall functions for the dropzonejs module.
@@ -16,7 +17,7 @@ function dropzonejs_requirements($phase) {
   // directory file finder service when Drupal 8.9 is the minimum supported
   // version of core.
   if (\Drupal::hasService('library.libraries_directory_file_finder')) {
-    /** @var \Drupal\Core\Asset\LibrariesDirectoryFileFinder $library_file_finder */
+    /** @var LibrariesDirectoryFileFinder $library_file_finder */
     $library_file_finder = \Drupal::service('library.libraries_directory_file_finder');
     $library_found = (bool) $library_file_finder->find('dropzone/dist/min/dropzone.min.js');
   }
@@ -31,7 +32,7 @@ function dropzonejs_requirements($phase) {
 
     // If library is not found, then look in the current profile libraries path.
     if (!$library_found) {
-      $profile_path = drupal_get_path('profile', \Drupal::installProfile());
+      $profile_path = \Drupal::service('extension.list.profile')->getPath(\Drupal::installProfile());
       $profile_path .= '/libraries/dropzone/dist/min/dropzone.min.js';
       // Is the library found in the current profile libraries path.
       $library_found = file_exists($profile_path);
diff --git a/dropzonejs.module b/dropzonejs.module
index 004a256..34d9c85 100644
--- a/dropzonejs.module
+++ b/dropzonejs.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Asset\LibrariesDirectoryFileFinder;
 /**
  * @file
  * Contains dropzonejs.module.
@@ -70,7 +71,7 @@ function dropzonejs_library_info_build() {
   // directory file finder service when Drupal 8.9 is the minimum supported
   // version of core.
   if (\Drupal::hasService('library.libraries_directory_file_finder')) {
-    /** @var \Drupal\Core\Asset\LibrariesDirectoryFileFinder $library_file_finder */
+    /** @var LibrariesDirectoryFileFinder $library_file_finder */
     $library_file_finder = \Drupal::service('library.libraries_directory_file_finder');
     $exif_path = $library_file_finder->find('exif-js/exif.js');
   }
diff --git a/src/Controller/UploadController.php b/src/Controller/UploadController.php
index 6e9b588..c140062 100644
--- a/src/Controller/UploadController.php
+++ b/src/Controller/UploadController.php
@@ -19,14 +19,14 @@ class UploadController extends ControllerBase {
   /**
    * The upload handler service.
    *
-   * @var \Drupal\dropzonejs\UploadHandlerInterface
+   * @var UploadHandlerInterface
    */
   protected $uploadHandler;
 
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    *   The HTTP request object.
    */
   protected $request;
@@ -34,9 +34,9 @@ class UploadController extends ControllerBase {
   /**
    * Constructs dropzone upload controller route controller.
    *
-   * @param \Drupal\dropzonejs\UploadHandlerInterface $upload_handler
+   * @param UploadHandlerInterface $upload_handler
    *   Upload handler.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   Request object.
    */
   public function __construct(UploadHandlerInterface $upload_handler, Request $request) {
diff --git a/src/DropzoneJsUploadSave.php b/src/DropzoneJsUploadSave.php
index 9a300d4..9e1a8d2 100644
--- a/src/DropzoneJsUploadSave.php
+++ b/src/DropzoneJsUploadSave.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dropzonejs;
 
+use Symfony\Component\Mime\MimeTypesInterface;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -13,7 +14,6 @@ use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\Core\Utility\Token;
 use Drupal\file\FileInterface;
-use Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface;
 use Drupal\Core\File\FileSystemInterface;
 
 /**
@@ -29,89 +29,89 @@ class DropzoneJsUploadSave implements DropzoneJsUploadSaveInterface {
   /**
    * Entity manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Mime type guesser service.
    *
-   * @var \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
+   * @var MimeTypesInterface
    */
   protected $mimeTypeGuesser;
 
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
   /**
    * Config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The stream wrapper manager.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;
 
   /**
    * Construct the DropzoneUploadSave object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   Entity type manager service.
-   * @param \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface $mimetype_guesser
+   * @param MimeTypesInterface $mimetype_guesser
    *   The mime type guesser service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory service.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager.
    */
-  public function __construct(EntityTypeManagerInterface $entity_type_manager, MimeTypeGuesserInterface $mimetype_guesser, FileSystemInterface $file_system, LoggerChannelFactoryInterface $logger_factory, RendererInterface $renderer, ConfigFactoryInterface $config_factory, Token $token, MessengerInterface $messenger, StreamWrapperManagerInterface $stream_wrapper_manager) {
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, MimeTypesInterface $mimetype_guesser, FileSystemInterface $file_system, LoggerChannelFactoryInterface $logger_factory, RendererInterface $renderer, ConfigFactoryInterface $config_factory, Token $token, MessengerInterface $messenger, StreamWrapperManagerInterface $stream_wrapper_manager) {
     $this->entityTypeManager = $entity_type_manager;
     $this->mimeTypeGuesser = $mimetype_guesser;
     $this->fileSystem = $file_system;
@@ -131,7 +131,7 @@ class DropzoneJsUploadSave implements DropzoneJsUploadSaveInterface {
     $uri = $this->streamWrapperManager->normalizeUri($uri);
     $file_info = new \SplFileInfo($uri);
 
-    /** @var \Drupal\file\FileInterface $file */
+    /** @var FileInterface $file */
     $file = $this->entityTypeManager->getStorage('file')->create([
       'uid' => $user->id(),
       'status' => 0,
@@ -214,7 +214,7 @@ class DropzoneJsUploadSave implements DropzoneJsUploadSaveInterface {
   /**
    * Rename potentially executable files.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity object.
    *
    * @return bool
@@ -233,7 +233,7 @@ class DropzoneJsUploadSave implements DropzoneJsUploadSaveInterface {
   /**
    * Validate and set destination the destination URI.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity object.
    * @param string $destination
    *   A string containing the URI that the file should be copied to. This must
diff --git a/src/DropzoneJsUploadSaveInterface.php b/src/DropzoneJsUploadSaveInterface.php
index 2a1f1a7..9c77962 100644
--- a/src/DropzoneJsUploadSaveInterface.php
+++ b/src/DropzoneJsUploadSaveInterface.php
@@ -23,7 +23,7 @@ interface DropzoneJsUploadSaveInterface {
    *   be a stream wrapper URI.
    * @param string $extensions
    *   A space separated list of valid extensions.
-   * @param \Drupal\Core\Session\AccountProxyInterface $user
+   * @param AccountProxyInterface $user
    *   The owner of the file.
    * @param array $validators
    *   (Optional) Associative array of callback functions used to validate the
@@ -31,7 +31,7 @@ interface DropzoneJsUploadSaveInterface {
    *   file_validate_extensions and file_validate_name_length in this method
    *   already.
    *
-   * @return \Drupal\file\FileInterface|bool
+   * @return FileInterface|bool
    *   The file entity of the newly uploaded file or false in case of a failure.
    *   The file isn't saved yet. That should be handled by the caller.
    */
@@ -40,7 +40,7 @@ interface DropzoneJsUploadSaveInterface {
   /**
    * Validate the uploaded file.
    *
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file entity object.
    * @param string $extensions
    *   A space separated string of valid extensions.
diff --git a/src/Element/DropzoneJs.php b/src/Element/DropzoneJs.php
index 2feae5e..7e72c7e 100644
--- a/src/Element/DropzoneJs.php
+++ b/src/Element/DropzoneJs.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dropzonejs\Element;
 
+use Drupal\Core\File\FileSystemInterface;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\Environment;
 use Drupal\Component\Utility\Html;
@@ -188,7 +189,7 @@ class DropzoneJs extends FormElement {
           if (file_exists($old_filepath)) {
             // Finaly rename the file and add it to results.
             $new_filepath = $tmp_upload_scheme . '://' . $name;
-            /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+            /** @var FileSystemInterface $file_system */
             $file_system = \Drupal::service('file_system');
             $move_result = $file_system->move($old_filepath, $new_filepath);
 
diff --git a/src/Events/DropzoneMediaEntityCreateEvent.php b/src/Events/DropzoneMediaEntityCreateEvent.php
index aaffd64..22a1576 100644
--- a/src/Events/DropzoneMediaEntityCreateEvent.php
+++ b/src/Events/DropzoneMediaEntityCreateEvent.php
@@ -2,10 +2,10 @@
 
 namespace Drupal\dropzonejs\Events;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\file\FileInterface;
 use Drupal\media\MediaInterface;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Represents Media Entity creation as an event when using DropzoneJS.
@@ -15,14 +15,14 @@ class DropzoneMediaEntityCreateEvent extends Event {
   /**
    * The media entity being created.
    *
-   * @var \Drupal\media\MediaInterface
+   * @var MediaInterface
    */
   protected $mediaEntity;
 
   /**
    * The file that will be used for the media entity.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $file;
 
@@ -36,7 +36,7 @@ class DropzoneMediaEntityCreateEvent extends Event {
   /**
    * The form state.
    *
-   * @var \Drupal\Core\Form\FormStateInterface
+   * @var FormStateInterface
    */
   protected $formState;
 
@@ -50,13 +50,13 @@ class DropzoneMediaEntityCreateEvent extends Event {
   /**
    * DropzoneMediaEntityCreateEvent constructor.
    *
-   * @param \Drupal\media\MediaInterface $media_entity
+   * @param MediaInterface $media_entity
    *   The media entity being created.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   The file that will be used for the media entity.
    * @param array $form
    *   The form that contains the Dropzone element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $element
    *   The Dropzone form element.
@@ -72,7 +72,7 @@ class DropzoneMediaEntityCreateEvent extends Event {
   /**
    * Get the media entity.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   A media entity.
    */
   public function getMediaEntity() {
@@ -82,7 +82,7 @@ class DropzoneMediaEntityCreateEvent extends Event {
   /**
    * Set the media entity.
    *
-   * @param \Drupal\media\MediaInterface $media_entity
+   * @param MediaInterface $media_entity
    *   The updated media entity.
    */
   public function setMediaEntity(MediaInterface $media_entity) {
@@ -92,7 +92,7 @@ class DropzoneMediaEntityCreateEvent extends Event {
   /**
    * Get the file for the media entity.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   The file that will be used for the media entity.
    */
   public function getFile() {
@@ -112,7 +112,7 @@ class DropzoneMediaEntityCreateEvent extends Event {
   /**
    * Get the form state.
    *
-   * @return \Drupal\Core\Form\FormStateInterface
+   * @return FormStateInterface
    *    The current formstate.
    */
   public function getFormState() {
@@ -122,7 +122,7 @@ class DropzoneMediaEntityCreateEvent extends Event {
   /**
    * Set the form state.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The updated form state.
    */
   public function setFormState(FormStateInterface $form_state) {
diff --git a/src/Form/DropzoneJsUploadForm.php b/src/Form/DropzoneJsUploadForm.php
index e485a9c..08c6dd0 100644
--- a/src/Form/DropzoneJsUploadForm.php
+++ b/src/Form/DropzoneJsUploadForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\dropzonejs\Form;
 
+use Drupal\file\FileInterface;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Form\FormBuilderInterface;
@@ -19,7 +20,7 @@ class DropzoneJsUploadForm extends FileUploadForm {
   /**
    * DropzoneJS module upload save service.
    *
-   * @var \Drupal\dropzonejs\DropzoneJsUploadSaveInterface
+   * @var DropzoneJsUploadSaveInterface
    */
   protected $dropzoneJsUploadSave;
 
@@ -35,7 +36,7 @@ class DropzoneJsUploadForm extends FileUploadForm {
   /**
    * Set the upload service.
    *
-   * @param \Drupal\dropzonejs\DropzoneJsUploadSaveInterface $dropzoneJsUploadSave
+   * @param DropzoneJsUploadSaveInterface $dropzoneJsUploadSave
    *   The upload service.
    */
   protected function setDropzoneJsUploadSave(DropzoneJsUploadSaveInterface $dropzoneJsUploadSave) {
@@ -99,7 +100,7 @@ class DropzoneJsUploadForm extends FileUploadForm {
    *
    * @param array $element
    *   The upload element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ -127,7 +128,7 @@ class DropzoneJsUploadForm extends FileUploadForm {
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function uploadButtonSubmit(array $form, FormStateInterface $form_state) {
@@ -143,10 +144,10 @@ class DropzoneJsUploadForm extends FileUploadForm {
    *
    * @param array $form
    *   Form structure.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    *
-   * @return \Drupal\file\FileInterface[]
+   * @return FileInterface[]
    *   Array of uploaded files.
    */
   protected function getFiles(array $form, FormStateInterface $form_state) {
diff --git a/src/UploadException.php b/src/UploadException.php
index bb5a533..e4a95df 100644
--- a/src/UploadException.php
+++ b/src/UploadException.php
@@ -69,7 +69,7 @@ class UploadException extends \Exception {
   /**
    * Generates and returns JSON response object for the error.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   JSON response object.
    */
   public function getErrorResponse() {
diff --git a/src/UploadHandler.php b/src/UploadHandler.php
index 093845e..69575dc 100644
--- a/src/UploadHandler.php
+++ b/src/UploadHandler.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\dropzonejs;
 
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Transliteration\PhpTransliteration;
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Component\Transliteration\TransliterationInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
@@ -24,7 +27,7 @@ class UploadHandler implements UploadHandlerInterface {
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    *   The HTTP request object.
    */
   protected $request;
@@ -32,34 +35,34 @@ class UploadHandler implements UploadHandlerInterface {
   /**
    * Transliteration service.
    *
-   * @var \Drupal\Core\Transliteration\PhpTransliteration
+   * @var PhpTransliteration
    */
   protected $transliteration;
 
   /**
    * Language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The settings of dropzonejs.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $dropzoneSettings;
 
   /**
    * Constructs dropzone upload controller route controller.
    *
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Config factory.
-   * @param \Drupal\Component\Transliteration\TransliterationInterface $transliteration
+   * @param TransliterationInterface $transliteration
    *   Transliteration service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   LanguageManager service.
    */
   public function __construct(RequestStack $request_stack, ConfigFactoryInterface $config_factory, TransliterationInterface $transliteration, LanguageManagerInterface $language_manager) {
diff --git a/src/UploadHandlerInterface.php b/src/UploadHandlerInterface.php
index d4a196c..b420090 100644
--- a/src/UploadHandlerInterface.php
+++ b/src/UploadHandlerInterface.php
@@ -12,26 +12,26 @@ interface UploadHandlerInterface {
   /**
    * Reads, checks and return filename of a file being uploaded.
    *
-   * @param \Symfony\Component\HttpFoundation\File\UploadedFile $file
+   * @param UploadedFile $file
    *   An instance of UploadedFile.
    *
    * @return string
    *   The sanitized filename.
    *
-   * @throws \Drupal\dropzonejs\UploadException
+   * @throws UploadException
    */
   public function getFilename(UploadedFile $file);
 
   /**
    * Handles an uploaded file.
    *
-   * @param \Symfony\Component\HttpFoundation\File\UploadedFile $file
+   * @param UploadedFile $file
    *   The uploaded file.
    *
    * @return string
    *   URI of the uploaded file.
    *
-   * @throws \Drupal\dropzonejs\UploadException
+   * @throws UploadException
    */
   public function handleUpload(UploadedFile $file);
 
diff --git a/tests/src/FunctionalJavascript/DropzoneJsEbWidgetTest.php b/tests/src/FunctionalJavascript/DropzoneJsEbWidgetTest.php
index 504cb19..6be3c03 100644
--- a/tests/src/FunctionalJavascript/DropzoneJsEbWidgetTest.php
+++ b/tests/src/FunctionalJavascript/DropzoneJsEbWidgetTest.php
@@ -41,7 +41,7 @@ class DropzoneJsEbWidgetTest extends DropzoneJsWebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $account = $this->drupalCreateUser(static::$userPermissions);
     $this->drupalLogin($account);
diff --git a/tests/src/FunctionalJavascript/DropzoneJsWebDriverTestBase.php b/tests/src/FunctionalJavascript/DropzoneJsWebDriverTestBase.php
index 0a858b0..614d859 100644
--- a/tests/src/FunctionalJavascript/DropzoneJsWebDriverTestBase.php
+++ b/tests/src/FunctionalJavascript/DropzoneJsWebDriverTestBase.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\dropzonejs\FunctionalJavascript;
 
+use Drupal\file\FileInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ElementNotFoundException;
 use Drupal\file\Entity\File;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 
@@ -49,9 +52,9 @@ RCKRSCQSiUTyPlnSFQER9VCp/AAAAABJRU5ErkJggg==";
    * @param string $extension
    *   File extension.
    *
-   * @return \Drupal\file\FileInterface
+   * @return FileInterface
    *   Returns an image.
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function getFile($name, $extension = 'jpg') {
     file_put_contents('public://' . $name . '.' . $extension, $this->fileData);
@@ -76,8 +79,8 @@ RCKRSCQSiUTyPlnSFQER9VCp/AAAAABJRU5ErkJggg==";
   /**
    * Drop a predefined file to dropzone.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ElementNotFoundException
+   * @throws EntityStorageException
    */
   protected function dropFile() {
     // Sometimes we are not yet switched to the iframe. Stop the horses a bit
diff --git a/tests/src/Kernel/DropzoneJsElementTest.php b/tests/src/Kernel/DropzoneJsElementTest.php
index 98ac71d..684d8ee 100644
--- a/tests/src/Kernel/DropzoneJsElementTest.php
+++ b/tests/src/Kernel/DropzoneJsElementTest.php
@@ -29,11 +29,11 @@ class DropzoneJsElementTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('user');
 
-    /** @var \Drupal\user\RoleInterface $role */
+    /** @var RoleInterface $role */
     $role = Role::create(['id' => RoleInterface::ANONYMOUS_ID]);
     $role->grantPermission('dropzone upload files');
     $role->save();
diff --git a/tests/src/Kernel/DropzoneJsUploadControllerTest.php b/tests/src/Kernel/DropzoneJsUploadControllerTest.php
index 27cf67e..b0d8234 100644
--- a/tests/src/Kernel/DropzoneJsUploadControllerTest.php
+++ b/tests/src/Kernel/DropzoneJsUploadControllerTest.php
@@ -55,7 +55,7 @@ class DropzoneJsUploadControllerTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig('dropzonejs');
     $this->installEntitySchema('user');
