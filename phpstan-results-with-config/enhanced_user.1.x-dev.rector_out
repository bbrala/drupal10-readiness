modules/contrib/enhanced_user/enhanced_user.api.php
modules/contrib/enhanced_user/enhanced_user.install
modules/contrib/enhanced_user/enhanced_user.module
modules/contrib/enhanced_user/src/Plugin/rest/resource/ResetPassword.php
modules/contrib/enhanced_user/src/Plugin/rest/resource/UploadAvatar.php
modules/contrib/enhanced_user/src/Plugin/rest/resource/UserInfo.php
modules/contrib/enhanced_user/src/Plugin/rest/resource/UserProfile.php
modules/contrib/enhanced_user/src/Routing/RouteSubscriber.php
modules/contrib/enhanced_user/src/UserCreator.php
modules/contrib/enhanced_user/src/UserCreatorInterface.php
modules/contrib/enhanced_user/tests/src/Functional/EnhancedUserFieldsTest.php
modules/contrib/enhanced_user/tests/src/Functional/Rest/UserInfoTest.php

8 files with changes
====================

1) modules/contrib/enhanced_user/tests/src/Functional/EnhancedUserFieldsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\enhanced_user\Functional;

+use Drupal\user\UserInterface;
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(
       [
@@ @@
   /**
    * Tests that the home page loads with a 200 response.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function testLoad() {
     $this->assertSession()->statusCodeEquals(200);
@@ @@

     $date_on_user = $this->user->birthday->date;

-    /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
+    /** @var DateFormatterInterface $date_formatter */
     $date = $this->getDate();
     // Reference to
     // "core/modules/datetime/tests/src/Functional/DateTimeFieldTest.php"
@@ @@
   /**
    * Create Datetime for birthday.
    *
-   * @return \Drupal\Core\Datetime\DrupalDateTime
+   * @return DrupalDateTime
    *   Datetime object for birthday test.
    */
   private function getDate(): DrupalDateTime {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/enhanced_user/src/UserCreator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\enhanced_user;

+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Password\PasswordGeneratorInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\user\Entity\User;
 use Drupal\user\UserInterface;

 /**
@@ @@
   /**
    * Drupal\language\ConfigurableLanguageManagerInterface definition.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Drupal\Core\Logger\LoggerChannelFactoryInterface definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerFactory;

@@ @@
   /**
    * The "entity_type.manager" service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The "config.factory" service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The "password_generator" service.
    *
-   * @var \Drupal\Core\Password\PasswordGeneratorInterface
+   * @var PasswordGeneratorInterface
    */
   protected $passwordGenerator;

@@ @@
    * @param array $roles
    *   Roles attach to the user.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   User entity if user was created
    *   False otherwise
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   public function createUser($name, $email = NULL, array $roles = []) {
@@ @@
     $fields = $this->getUserFields($name, $email, $langcode);

     // Create new user account.
-    /** @var \Drupal\user\Entity\User $new_user */
+    /** @var User $new_user */
     $new_user = $this->entityTypeManager->getStorage('user')
       ->create($fields);
     foreach ($roles as $role) {
@@ @@
    * @return array
    *   Fields to initialize for the user creation.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getUserFields(string $name, $email, string $langcode): array {
     return [
@@ @@
    * @return string
    *   Unique drupal username.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function generateUniqueUsername(string $name): string {
     $name = mb_substr($name, 0, UserInterface::USERNAME_MAX_LENGTH);
@@ @@
    * @param string $value
    *   Value to search for.
    *
-   * @return \Drupal\user\UserInterface|false
+   * @return UserInterface|false
    *   Drupal user account if found
    *   False otherwise
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function loadUserByProperty(string $field, string $value) {
-    /** @var \Drupal\user\UserInterface $users */
+    /** @var UserInterface $users */
     $users = $this->entityTypeManager
       ->getStorage('user')
       ->loadByProperties([$field => $value]);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/enhanced_user/src/Plugin/rest/resource/UserProfile.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\enhanced_user\Plugin\rest\resource;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Session\AccountProxyInterface;
@@ @@
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
    */
   public function __construct(
@@ @@
    * @param array $data
    *   Data posted from client.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function patch(array $data): ModifiedResourceResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/enhanced_user/src/Plugin/rest/resource/UserInfo.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\enhanced_user\Plugin\rest\resource;

+use Symfony\Component\HttpKernel\Exception\HttpException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\rest\Plugin\ResourceBase;
@@ @@
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The "module_handler" service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The "module_handler" service.
    */
   public function __construct(
@@ @@
   /**
    * Responds to GET requests.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\HttpException
+   * @throws HttpException
    *   Throws exception expected.
    */
   public function get(): ResourceResponse {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/enhanced_user/src/Plugin/rest/resource/UploadAvatar.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\enhanced_user\Plugin\rest\resource;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\user\UserInterface;
 use Drupal\Component\Uuid\UuidInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\rest\ModifiedResourceResponse;
@@ @@
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The "file_system" service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The "config.factory" service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The "uuid" service.
    *
-   * @var \Drupal\Component\Uuid\UuidInterface
+   * @var UuidInterface
    */
   protected $uuid;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The "file_system" service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The "config.factory" service.
-   * @param \Drupal\Component\Uuid\UuidInterface $uuid
+   * @param UuidInterface $uuid
    *   The "uuid" service.
    */
   public function __construct(
@@ @@
    * @param array $data
    *   Data posted from client.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function post(array $data): ModifiedResourceResponse {

-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $this->currentUser->getAccount();

     if ($data['base64']) {
@@ @@
       $default_scheme = $this->configFactory->get('system.file')->get('default_scheme');
       $directory = $default_scheme . '://pictures/rest';
       $this->fileSystem->prepareDirectory($directory, FileSystemInterface::MODIFY_PERMISSIONS | FileSystemInterface::CREATE_DIRECTORY);
-      $file = file_save_data($file_data, $directory . $name);
+      $file = \Drupal::service('file.repository')->writeData($file_data, $directory . $name);

       // If user entity type has the user_picture field, save this file to it.
       if ($user->hasField('user_picture')) {
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/enhanced_user/src/Plugin/rest/resource/ResetPassword.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\enhanced_user\Plugin\rest\resource;

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\user\UserInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\rest\Annotation\RestResource;
 use Drupal\rest\ModifiedResourceResponse;
@@ @@
   /**
    * A current user instance.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The "user.auth" service.
    *
-   * @var \Drupal\user\UserAuthInterface
+   * @var UserAuthInterface
    */
   protected $userAuth;

@@ @@
    *   The plugin implementation definition.
    * @param array $serializer_formats
    *   The available serialization formats.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   A current user instance.
-   * @param \Drupal\user\UserAuthInterface $user_auth
+   * @param UserAuthInterface $user_auth
    *   A current user instance.
    */
   public function __construct(
@@ @@
    * @param array $data
    *   Data posted from http client.
    *
-   * @return \Drupal\rest\ModifiedResourceResponse
+   * @return ModifiedResourceResponse
    *   The HTTP response object.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function post(array $data): ModifiedResourceResponse {
     if (isset($data['username'])) {
@@ @@
       throw new BadRequestHttpException('username or password was wrong.');
     }

-    /** @var \Drupal\user\UserInterface $user */
+    /** @var UserInterface $user */
     $user = $this->currentUser->getAccount();
     $user
       ->setPassword($data['new_password'])
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/enhanced_user/enhanced_user.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\user\UserInterface;
 /**
  * @file
  * Contains enhanced_user.module.
@@ @@
  *
  * @todo Move this implement back to wechat_connect module.
  *
- * @throws \Drupal\Core\Entity\EntityStorageException
+ * @throws EntityStorageException
  */
 function enhanced_user_wechat_upload_file($file, $data) {
   if ($data['file_type'] === 'user_avatar') {
     if (Drupal::currentUser()->isAuthenticated()) {
-      /** @var \Drupal\user\UserInterface $user */
+      /** @var UserInterface $user */
       $user = Drupal::currentUser()->getAccount();
       if ($user->hasField('user_picture')) {
         $user
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


8) modules/contrib/enhanced_user/enhanced_user.api.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\node\Entity\Node;
 /**
  * @file
  * Hooks provided by the EnhancedUser module.
@@ @@
  *
  * @param array $additional_data
  *   Data to add to the user-info rest response.
- * @param \Drupal\Core\Cache\CacheableMetadata $cache_metadata
+ * @param CacheableMetadata $cache_metadata
  *   Cache metadata to add to the user-info rest response.
  */
 function hook_enhanced_user_user_info(array &$additional_data, CacheableMetadata &$cache_metadata) {
-  $node = \Drupal\node\Entity\Node::load(1);
+  $node = Node::load(1);
   $additional_data['something'] = ['some' => 'data'];
   $cache_metadata->addCacheableDependency($node);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

