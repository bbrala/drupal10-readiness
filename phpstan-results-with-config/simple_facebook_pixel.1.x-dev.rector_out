modules/contrib/simple_facebook_pixel/simple_facebook_pixel.api.php
modules/contrib/simple_facebook_pixel/simple_facebook_pixel.module
modules/contrib/simple_facebook_pixel/src/EventSubscriber/PixelSubscriber.php
modules/contrib/simple_facebook_pixel/src/Form/SimpleFacebookPixelSettingsForm.php
modules/contrib/simple_facebook_pixel/src/PageContextService.php
modules/contrib/simple_facebook_pixel/src/PageContextServiceInterface.php
modules/contrib/simple_facebook_pixel/src/PixelBuilderService.php
modules/contrib/simple_facebook_pixel/src/PixelBuilderServiceInterface.php
modules/contrib/simple_facebook_pixel/tests/modules/simple_facebook_pixel_test_hooks/simple_facebook_pixel_test_hooks.module
modules/contrib/simple_facebook_pixel/tests/src/Functional/AlterHooksTest.php
modules/contrib/simple_facebook_pixel/tests/src/Functional/CompleteRegistrationTest.php
modules/contrib/simple_facebook_pixel/tests/src/Functional/PageViewTest.php
modules/contrib/simple_facebook_pixel/tests/src/Functional/SettingsFormTest.php
modules/contrib/simple_facebook_pixel/tests/src/Functional/ViewContentEventTest.php

10 files with changes
=====================

1) modules/contrib/simple_facebook_pixel/tests/src/Functional/ViewContentEventTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_facebook_pixel\Functional;

+use Drupal\user\Entity\User;
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\taxonomy\Traits\TaxonomyTestTrait;

@@ @@
   /**
    * The user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->user = $this->drupalCreateUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/simple_facebook_pixel/tests/src/Functional/SettingsFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_facebook_pixel\Functional;

+use Drupal\user\Entity\User;
 use Drupal\taxonomy\Entity\Vocabulary;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * The user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->drupalCreateContentType([
@@ @@
     $edit['excluded_roles[anonymous]'] = TRUE;
     $edit['excluded_roles[authenticated]'] = FALSE;
     $edit['complete_registration_enabled'] = FALSE;
-    $this->drupalPostForm('admin/config/system/simple-facebook-pixel', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/system/simple-facebook-pixel');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('The configuration options have been saved.');

     $this->assertEquals(FALSE, $this->config('simple_facebook_pixel.settings')->get('pixel_enabled'));
@@ @@
     $edit['excluded_roles[anonymous]'] = FALSE;
     $edit['excluded_roles[authenticated]'] = TRUE;
     $edit['complete_registration_enabled'] = TRUE;
-    $this->drupalPostForm('admin/config/system/simple-facebook-pixel', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/system/simple-facebook-pixel');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('The configuration options have been saved.');

     $this->assertEquals(TRUE, $this->config('simple_facebook_pixel.settings')->get('pixel_enabled'));
@@ @@
     $edit['view_content_entities[node:article]'] = TRUE;
     $edit['view_content_entities[node:page]'] = FALSE;
     $edit['view_content_entities[taxonomy_term:tags]'] = TRUE;
-    $this->drupalPostForm('admin/config/system/simple-facebook-pixel', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/system/simple-facebook-pixel');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('The configuration options have been saved.');

     $this->assertEquals(TRUE, $this->config('simple_facebook_pixel.settings')->get('pixel_enabled'));
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/simple_facebook_pixel/tests/src/Functional/PageViewTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_facebook_pixel\Functional;

+use Drupal\user\Entity\User;
+use Drupal\simple_facebook_pixel\PixelBuilderServiceInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->user = $this->drupalCreateUser([
@@ @@
     $this->drupalGet('<front>');
     $this->assertSession()->statusCodeEquals(200);

-    /** @var \Drupal\simple_facebook_pixel\PixelBuilderServiceInterface $pixel_builder */
+    /** @var PixelBuilderServiceInterface $pixel_builder */
     $pixel_builder = \Drupal::service('simple_facebook_pixel.pixel_builder');

     $this->assertSession()->responseNotContains($pixel_builder->getPixelScriptCode());
@@ @@
   public function testFacebookPixelDisabled() {
     $edit['pixel_enabled'] = FALSE;
     $edit['pixel_id'] = '789012';
-    $this->drupalPostForm('admin/config/system/simple-facebook-pixel', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/system/simple-facebook-pixel');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('The configuration options have been saved.');

-    /** @var \Drupal\simple_facebook_pixel\PixelBuilderServiceInterface $pixel_builder */
+    /** @var PixelBuilderServiceInterface $pixel_builder */
     $pixel_builder = \Drupal::service('simple_facebook_pixel.pixel_builder');

     $this->drupalGet('<front>');
@@ @@
     $edit['pixel_enabled'] = TRUE;
     $edit['pixel_id'] = '789012';
     $edit['exclude_admin_pages'] = FALSE;
-    $this->drupalPostForm('admin/config/system/simple-facebook-pixel', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/system/simple-facebook-pixel');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('The configuration options have been saved.');

-    /** @var \Drupal\simple_facebook_pixel\PixelBuilderServiceInterface $pixel_builder */
+    /** @var PixelBuilderServiceInterface $pixel_builder */
     $pixel_builder = \Drupal::service('simple_facebook_pixel.pixel_builder');
     $this->assertSession()->responseContains($pixel_builder->getPixelScriptCode());

@@ @@
     $edit['pixel_enabled'] = TRUE;
     $edit['pixel_id'] = '789012';
     $edit['exclude_admin_pages'] = TRUE;
-    $this->drupalPostForm('admin/config/system/simple-facebook-pixel', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/system/simple-facebook-pixel');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('The configuration options have been saved.');
     $this->assertSession()->responseNotContains($pixel_builder->getPixelScriptCode());
   }
@@ @@
   public function testFacebookPixelEnabledForAllUsers() {
     $edit['pixel_enabled'] = TRUE;
     $edit['pixel_id'] = '567123';
-    $this->drupalPostForm('admin/config/system/simple-facebook-pixel', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/system/simple-facebook-pixel');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('The configuration options have been saved.');

-    /** @var \Drupal\simple_facebook_pixel\PixelBuilderServiceInterface $pixel_builder */
+    /** @var PixelBuilderServiceInterface $pixel_builder */
     $pixel_builder = \Drupal::service('simple_facebook_pixel.pixel_builder');

     $this->drupalGet('<front>');
@@ @@
   public function testMultiFacebookPixelsEnabledForAllUsers() {
     $edit['pixel_enabled'] = TRUE;
     $edit['pixel_id'] = '567123, 985473';
-    $this->drupalPostForm('admin/config/system/simple-facebook-pixel', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/system/simple-facebook-pixel');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('The configuration options have been saved.');

-    /** @var \Drupal\simple_facebook_pixel\PixelBuilderServiceInterface $pixel_builder */
+    /** @var PixelBuilderServiceInterface $pixel_builder */
     $pixel_builder = \Drupal::service('simple_facebook_pixel.pixel_builder');

     $this->drupalGet('<front>');
@@ @@
     $edit['pixel_id'] = '567123';
     $edit['excluded_roles[anonymous]'] = TRUE;
     $edit['excluded_roles[authenticated]'] = FALSE;
-    $this->drupalPostForm('admin/config/system/simple-facebook-pixel', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/system/simple-facebook-pixel');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('The configuration options have been saved.');

-    /** @var \Drupal\simple_facebook_pixel\PixelBuilderServiceInterface $pixel_builder */
+    /** @var PixelBuilderServiceInterface $pixel_builder */
     $pixel_builder = \Drupal::service('simple_facebook_pixel.pixel_builder');

     $this->drupalGet('<front>');
@@ @@
     $edit['pixel_id'] = '567123';
     $edit['excluded_roles[anonymous]'] = FALSE;
     $edit['excluded_roles[authenticated]'] = TRUE;
-    $this->drupalPostForm('admin/config/system/simple-facebook-pixel', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/system/simple-facebook-pixel');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('The configuration options have been saved.');

     $this->drupalGet('<front>');
@@ @@
     $edit['pixel_id'] = '567123';
     $edit['excluded_roles[anonymous]'] = TRUE;
     $edit['excluded_roles[authenticated]'] = TRUE;
-    $this->drupalPostForm('admin/config/system/simple-facebook-pixel', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/system/simple-facebook-pixel');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('The configuration options have been saved.');

     $this->drupalGet('<front>');
@@ @@
     $edit['pixel_id'] = '567123';
     $edit['excluded_roles[anonymous]'] = FALSE;
     $edit['excluded_roles[authenticated]'] = FALSE;
-    $this->drupalPostForm('admin/config/system/simple-facebook-pixel', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/system/simple-facebook-pixel');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('The configuration options have been saved.');

     $this->drupalGet('<front>');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/simple_facebook_pixel/tests/src/Functional/CompleteRegistrationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_facebook_pixel\Functional;

+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\simple_facebook_pixel\PixelBuilderServiceInterface;
 use Drupal\Tests\BrowserTestBase;

 /**
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->configFactory = \Drupal::configFactory();
@@ @@

     $edit['name'] = $this->randomMachineName();
     $edit['mail'] = $edit['name'] . '@example.com';
-    $this->drupalPostForm('user/register', $edit, 'Create new account');
-    $this->assertText('A welcome message with further instructions has been sent to your email address.');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, 'Create new account');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('A welcome message with further instructions has been sent to your email address.');

-    /** @var \Drupal\simple_facebook_pixel\PixelBuilderServiceInterface $pixel_builder */
+    /** @var PixelBuilderServiceInterface $pixel_builder */
     $pixel_builder = \Drupal::service('simple_facebook_pixel.pixel_builder');

     $this->assertSession()->responseContains($pixel_builder->getPixelScriptCode());
@@ @@

     $edit['name'] = $this->randomMachineName();
     $edit['mail'] = $edit['name'] . '@example.com';
-    $this->drupalPostForm('user/register', $edit, 'Create new account');
-    $this->assertText('A welcome message with further instructions has been sent to your email address.');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, 'Create new account');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('A welcome message with further instructions has been sent to your email address.');

-    /** @var \Drupal\simple_facebook_pixel\PixelBuilderServiceInterface $pixel_builder */
+    /** @var PixelBuilderServiceInterface $pixel_builder */
     $pixel_builder = \Drupal::service('simple_facebook_pixel.pixel_builder');

     $this->assertSession()->responseContains($pixel_builder->getPixelScriptCode());
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/simple_facebook_pixel/tests/src/Functional/AlterHooksTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\simple_facebook_pixel\Functional;

+use Drupal\simple_facebook_pixel\PixelBuilderServiceInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $account = $this->drupalCreateUser([
@@ @@
     $edit['pixel_enabled'] = TRUE;
     $edit['pixel_id'] = '567123';
     $edit['view_content_entities[node:page]'] = TRUE;
-    $this->drupalPostForm('admin/config/system/simple-facebook-pixel', $edit, 'Save configuration');
+    $this->drupalGet('admin/config/system/simple-facebook-pixel');
+    $this->submitForm($edit, 'Save configuration');
     $this->assertSession()->responseContains('The configuration options have been saved.');

-    /** @var \Drupal\simple_facebook_pixel\PixelBuilderServiceInterface $pixel_builder */
+    /** @var PixelBuilderServiceInterface $pixel_builder */
     $pixel_builder = \Drupal::service('simple_facebook_pixel.pixel_builder');

     $this->drupalGet('/node/1');
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/simple_facebook_pixel/src/PixelBuilderService.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The route admin context.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $routerAdminContext;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The private temp store.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $privateTempStore;

@@ @@
   /**
    * PixelBuilderService constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The config factory.
-   * @param \Drupal\Core\Routing\AdminContext $router_admin_context
+   * @param AdminContext $router_admin_context
    *   The route admin context.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $private_temp_store
+   * @param PrivateTempStoreFactory $private_temp_store
    *   The private temp store.
    */
   public function __construct(ConfigFactoryInterface $config_factory, AccountProxyInterface $current_user, AdminContext $router_admin_context, ModuleHandlerInterface $module_handler, PrivateTempStoreFactory $private_temp_store) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/simple_facebook_pixel/src/PageContextService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_facebook_pixel;

+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\commerce_product\Entity\ProductInterface;
 use Drupal\commerce\Context;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $configFactory;

@@ @@
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;

@@ @@
   /**
    * The Pixel builder.
    *
-   * @var \Drupal\simple_facebook_pixel\PixelBuilderService
+   * @var PixelBuilderService
    */
   protected $pixelBuilder;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * PageContextService constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request.
-   * @param \Drupal\simple_facebook_pixel\PixelBuilderService $pixel_builder
+   * @param PixelBuilderService $pixel_builder
    *   The Pixel builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(
@@ @@

     $commerce_product = $this->request->attributes->get('commerce_product');

-    if ($commerce_product instanceof \Drupal\commerce_product\Entity\ProductInterface) {
+    if ($commerce_product instanceof ProductInterface) {
       $view_content_entities = array_values($this->configFactory->get('view_content_entities'));

       if (
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/simple_facebook_pixel/src/Form/SimpleFacebookPixelSettingsForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * SimpleFacebookPixelSettingsForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/simple_facebook_pixel/src/EventSubscriber/PixelSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\simple_facebook_pixel\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\ResponseEvent;
+use Symfony\Contracts\EventDispatcher\Event;
+use Drupal\commerce_product\Entity\ProductInterface;
 use Drupal\commerce\Context;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactory;
@@ @@
 use Drupal\Core\Session\AccountInterface;
 use Drupal\simple_facebook_pixel\PixelBuilderService;
 use Drupal\state_machine\Event\WorkflowTransitionEvent;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The Pixel builder.
    *
-   * @var \Drupal\simple_facebook_pixel\PixelBuilderService
+   * @var PixelBuilderService
    */
   protected $pixelBuilder;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * PixelSubscriber constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory.
-   * @param \Drupal\simple_facebook_pixel\PixelBuilderService $pixel_builder
+   * @param PixelBuilderService $pixel_builder
    *   The Pixel builder.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(
@@ @@
   /**
    * Invalidates page cache tags if needed.
    */
-  public function onKernelResponse(FilterResponseEvent $event) {
+  public function onKernelResponse(ResponseEvent $event) {
     $response = $event->getResponse();

     if (strpos($response->getContent(), 'CompleteRegistration') !== FALSE) {
@@ @@
   /**
    * Adds AddToCart event.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The add to cart event.
    */
   public function addToCartEvent(Event $event) {
@@ @@
   /**
    * Adds AddToWishlist event. Using Commerce Wishlist module.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The add to wishlist event.
    */
   public function addToWishlist(Event $event) {
@@ @@
   /**
    * Adds AddToWishlist event. Using Flag module.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The add to wishlist event.
    */
   public function addToWishlistFlag(Event $event) {
@@ @@
       if (in_array($event->getFlagging()->getFlagId(), $enabled_flags)) {
         $entity = $event->getFlagging()->getFlaggable();

-        if ($entity instanceof \Drupal\commerce_product\Entity\ProductInterface) {
+        if ($entity instanceof ProductInterface) {
           $this->addItem($entity->getDefaultVariation(), 1, 'AddToWishlist');
         }
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/simple_facebook_pixel/simple_facebook_pixel.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\simple_facebook_pixel\PixelBuilderService;
+use Drupal\simple_facebook_pixel\PageContextServiceInterface;
 /**
  * @file
  * Simple Facebook Pixel.
@@ @@
     'simple_facebook_pixel:purchase',
   ]);

-  /** @var \Drupal\simple_facebook_pixel\PixelBuilderService $pixel_builder */
+  /** @var PixelBuilderService $pixel_builder */
   $pixel_builder = \Drupal::service('simple_facebook_pixel.pixel_builder');
   if (!$pixel_builder->isEnabled()) {
     return;
   }

-  /** @var \Drupal\simple_facebook_pixel\PageContextServiceInterface $page_context */
+  /** @var PageContextServiceInterface $page_context */
   $page_context = \Drupal::service('simple_facebook_pixel.page_context');
   $page_context->build();

@@ @@
  * Implements hook_ENTITY_TYPE_insert().
  */
 function simple_facebook_pixel_user_insert(EntityInterface $entity) {
-  /** @var \Drupal\simple_facebook_pixel\PixelBuilderService $pixel_builder */
+  /** @var PixelBuilderService $pixel_builder */
   $pixel_builder = \Drupal::service('simple_facebook_pixel.pixel_builder');
   if (!$pixel_builder->isEnabled()) {
     return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 3 nodes were removed                                                 

 [OK] 10 files have been changed by Rector                                      

