modules/contrib/sfc/modules/sfc_dev/src/Ajax/RefreshComponentAssetsCommand.php
modules/contrib/sfc/modules/sfc_dev/src/Controller/ComponentDevController.php
modules/contrib/sfc/modules/sfc_dev/src/Form/ComponentPreviewForm.php
modules/contrib/sfc/modules/sfc_dev/src/Plugin/SingleFileComponent/ComponentLibrary.php
modules/contrib/sfc/modules/sfc_dev/src/Plugin/SingleFileComponent/ComponentPicker.php
modules/contrib/sfc/modules/sfc_dev/src/Plugin/SingleFileComponent/ComponentPreview.php
modules/contrib/sfc/modules/sfc_dev/src/Plugin/SingleFileComponent/ComponentTemplate.php
modules/contrib/sfc/modules/sfc_dev/tests/src/FunctionalJavascript/ComponentLibraryTest.php
modules/contrib/sfc/modules/sfc_dev/tests/src/Kernel/ComponentDevControllerTest.php
modules/contrib/sfc/modules/sfc_dev/tests/src/Kernel/ComponentPreviewFormTest.php
modules/contrib/sfc/modules/sfc_dev/tests/src/Kernel/ComponentPreviewTest.php
modules/contrib/sfc/modules/sfc_dev/tests/src/Kernel/ComponentTemplateTest.php
modules/contrib/sfc/modules/sfc_dev/tests/src/Unit/RefreshComponentAssetsCommandTest.php
modules/contrib/sfc/modules/sfc_example/sfc_example.module
modules/contrib/sfc/modules/sfc_example/src/Controller/ExampleController.php
modules/contrib/sfc/modules/sfc_example/src/Plugin/SingleFileComponent/ExampleClass.php
modules/contrib/sfc/modules/sfc_example/tests/src/FunctionalJavascript/ExampleJsTest.php
modules/contrib/sfc/modules/sfc_example/tests/src/Kernel/ExampleClassTest.php
modules/contrib/sfc/modules/sfc_example/tests/src/Nightwatch/ExampleNightwatchSetup.php
modules/contrib/sfc/modules/sfc_example/tests/src/Unit/ExampleClassUnitTest.php
modules/contrib/sfc/sfc.module
modules/contrib/sfc/src/Annotation/SingleFileComponent.php
modules/contrib/sfc/src/Commands/ComponentCommands.php
modules/contrib/sfc/src/ComponentActionsInterface.php
modules/contrib/sfc/src/ComponentBase.php
modules/contrib/sfc/src/ComponentConsumerTrait.php
modules/contrib/sfc/src/ComponentFilenameInterface.php
modules/contrib/sfc/src/ComponentFormInterface.php
modules/contrib/sfc/src/ComponentInterface.php
modules/contrib/sfc/src/ComponentNameHelper.php
modules/contrib/sfc/src/ComponentPluginManager.php
modules/contrib/sfc/src/Controller/ActionController.php
modules/contrib/sfc/src/Controller/ComponentController.php
modules/contrib/sfc/src/Element/ComponentElement.php
modules/contrib/sfc/src/LayoutComponentBase.php
modules/contrib/sfc/src/Plugin/Block/ComponentBlock.php
modules/contrib/sfc/src/Plugin/Derivative/ComponentDeriver.php
modules/contrib/sfc/src/Plugin/Derivative/SimpleComponentDeriver.php
modules/contrib/sfc/src/Plugin/Field/FieldFormatter/ComponentFieldFormatter.php
modules/contrib/sfc/src/Plugin/Layout/ComponentLayout.php
modules/contrib/sfc/src/Plugin/SingleFileComponent/SimpleComponent.php
modules/contrib/sfc/src/RenderCallbacks.php
modules/contrib/sfc/src/TwigComponentLoader.php
modules/contrib/sfc/src/TwigExtension.php
modules/contrib/sfc/tests/modules/sfc_test/src/Controller/TestController.php
modules/contrib/sfc/tests/modules/sfc_test/src/Plugin/Block/InvalidBlock.php
modules/contrib/sfc/tests/modules/sfc_test/src/Plugin/SingleFileComponent/BoldFormatter.php
modules/contrib/sfc/tests/modules/sfc_test/src/Plugin/SingleFileComponent/JSRender.php
modules/contrib/sfc/tests/modules/sfc_test/src/Plugin/SingleFileComponent/MultipleFormatter.php
modules/contrib/sfc/tests/modules/sfc_test/src/Plugin/SingleFileComponent/SayHello.php
modules/contrib/sfc/tests/modules/sfc_test/src/Plugin/SingleFileComponent/TwoColumnLayout.php
modules/contrib/sfc/tests/src/Functional/ActionControllerTest.php
modules/contrib/sfc/tests/src/Functional/ComponentControllerTest.php
modules/contrib/sfc/tests/src/Functional/ComponentTest.php
modules/contrib/sfc/tests/src/Functional/FunctionalComponentTestTrait.php
modules/contrib/sfc/tests/src/Kernel/ComponentAliasesTest.php
modules/contrib/sfc/tests/src/Kernel/ComponentBlockTest.php
modules/contrib/sfc/tests/src/Kernel/ComponentCachingTest.php
modules/contrib/sfc/tests/src/Kernel/ComponentControllerTest.php
modules/contrib/sfc/tests/src/Kernel/ComponentDeriverTest.php
modules/contrib/sfc/tests/src/Kernel/ComponentElementTest.php
modules/contrib/sfc/tests/src/Kernel/ComponentFieldFormatterTest.php
modules/contrib/sfc/tests/src/Kernel/ComponentLayoutTest.php
modules/contrib/sfc/tests/src/Kernel/ComponentOverridesTest.php
modules/contrib/sfc/tests/src/Kernel/ComponentPluginManagerTest.php
modules/contrib/sfc/tests/src/Kernel/ComponentTestTrait.php
modules/contrib/sfc/tests/src/Kernel/SimpleComponentTest.php
modules/contrib/sfc/tests/src/Unit/ComponentBaseTest.php
modules/contrib/sfc/tests/src/Unit/ComponentBlockTest.php
modules/contrib/sfc/tests/src/Unit/ComponentCommandsTest.php
modules/contrib/sfc/tests/src/Unit/ComponentLayoutTest.php
modules/contrib/sfc/tests/src/Unit/ComponentNameHelperTest.php
modules/contrib/sfc/tests/src/Unit/LayoutComponentBaseTest.php
modules/contrib/sfc/tests/src/Unit/TwigComponentLoaderTest.php

39 files with changes
=====================

1) modules/contrib/sfc/tests/src/Unit/TwigComponentLoaderTest.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The loader.
    *
-   * @var \Drupal\sfc\TwigComponentLoader
+   * @var TwigComponentLoader
    */
   protected $loader;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $manager = $this->createMock(ComponentPluginManager::class);
     $component = $this->createMock(ComponentBase::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/sfc/tests/src/Unit/ComponentBaseTest.php:119

    ---------- begin diff ----------
@@ @@
       'provider' => 'sfc',
     ], FALSE, 'vfs:/', $file_system);
     $component->writeAssets();
-    $this->assertFileNotExists($js_file);
-    $this->assertFileNotExists($css_file);
+    $this->assertFileDoesNotExist($js_file);
+    $this->assertFileDoesNotExist($css_file);
     $component->setData('CSS', '.foo { color: pink; } .bar { background-image: url(../foo); } .baz { background-image: url(/foo); } .quz { background-image: url(http://google.com); .bar { background-image: url(foo); }');
     $component->writeAssets();
     $this->assertFileExists($css_file);
@@ @@
    *
    * @codeCoverageIgnore
    */
-  protected function tearDown() {
+  protected function tearDown(): void {
     vfsStream::setup('sfc');
     if (is_file('vfs://sfc/components/test_component/test_component.js')) {
       unlink('vfs://sfc/components/test_component/test_component.js');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameMethodRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/sfc/tests/src/Kernel/SimpleComponentTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sfc\Kernel;

+use Drupal\Component\Plugin\PluginManagerInterface;
+use Drupal\sfc\Plugin\Block\ComponentBlock;
+use Drupal\sfc\ComponentPluginManager;
+use Drupal\sfc\Plugin\SingleFileComponent\SimpleComponent;
 use Drupal\Core\Form\FormState;
 use Drupal\KernelTests\KernelTestBase;
 use Symfony\Component\HttpFoundation\Request;
@@ @@
       'message' => 'Click me',
     ]));
     // Test the output CSS/JS.
-    /** @var \Drupal\Component\Plugin\PluginManagerInterface $manager */
+    /** @var PluginManagerInterface $manager */
     $manager = \Drupal::service('plugin.manager.single_file_component');
     $component = $manager->createInstance('simple_assets');
     $this->assertTrue($component->shouldWriteAssets());
@@ @@
     $this->assertFileExists('public://sfc/components/simple_assets/simple_assets.js');
     $css = file_get_contents('public://sfc/components/simple_assets/simple_assets.css');
     $this->assertStringContainsString('.foo {', $css);
-    $this->assertStringContainsString('background: url(/' . drupal_get_path('module', 'sfc_test') . '/assets/image.jpg)', $css);
+    $this->assertStringContainsString('background: url(/' . \Drupal::service('extension.list.module')->getPath('sfc_test') . '/assets/image.jpg)', $css);
     $js = file_get_contents('public://sfc/components/simple_assets/simple_assets.js');
     $this->assertStringContainsString("alert('foo');", $js);
     $this->assertStringContainsString("alert('bar');", $js);
@@ @@
    * Tests that form methods work as expected.
    */
   public function testForm() {
-    /** @var \Drupal\Component\Plugin\PluginManagerInterface $manager */
+    /** @var PluginManagerInterface $manager */
     $manager = \Drupal::service('plugin.manager.single_file_component');
     $component = $manager->createInstance('simple_block');
     $form = [];
@@ @@
    * Tests that definition additions work as expected.
    */
   public function testDefinitionAdditions() {
-    /** @var \Drupal\sfc\Plugin\Block\ComponentBlock $block */
+    /** @var ComponentBlock $block */
     $block = \Drupal::service('plugin.manager.block')->createInstance('single_file_component_block:simple_block');
     $renderer = \Drupal::service('renderer');
     $build = $block->build();
@@ @@
    * Tests that parsing complex templates works as expected.
    */
   public function testComplexTemplate() {
-    /** @var \Drupal\Component\Plugin\PluginManagerInterface $manager */
+    /** @var PluginManagerInterface $manager */
     $manager = \Drupal::service('plugin.manager.single_file_component');
     $component = $manager->createInstance('simple_complex_template');
     $this->assertStringContainsString("<div{{ attributes.addClass('two-column') }}>
@@ @@
   public function testThemeComponents() {
     // Themes can provide components.
     \Drupal::service('theme_installer')->install(['sfc_test_theme']);
-    /** @var \Drupal\sfc\ComponentPluginManager $manager */
+    /** @var ComponentPluginManager $manager */
     $manager = \Drupal::service('plugin.manager.single_file_component');
     $component = $manager->createInstance('theme_component');
     $this->assertStringContainsString("I'm from a theme!", $component->getTemplate());
@@ @@
    * Tests that a simple component with vanilla JS works as expected.
    */
   public function testVanillaJs() {
-    /** @var \Drupal\Component\Plugin\PluginManagerInterface $manager */
+    /** @var PluginManagerInterface $manager */
     $manager = \Drupal::service('plugin.manager.single_file_component');
     $component = $manager->createInstance('simple_vanilla_js');
     $this->assertTrue($component->shouldWriteAssets());
@@ @@
    * Tests that actions work as expected.
    */
   public function testActions() {
-    /** @var \Drupal\Component\Plugin\PluginManagerInterface $manager */
+    /** @var PluginManagerInterface $manager */
     $manager = \Drupal::service('plugin.manager.single_file_component');
-    /** @var \Drupal\sfc\Plugin\SingleFileComponent\SimpleComponent $component */
+    /** @var SimpleComponent $component */
     $component = $manager->createInstance('simple_actions');
     $request = new Request(['hello' => 'world']);
     $result = $component->performAction('return_query', $request);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/sfc/tests/src/Kernel/ComponentTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sfc\Kernel;

+use Drupal\Core\Template\TwigEnvironment;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Render\RenderContext;
 use Drupal\sfc\ComponentInterface;

@@ @@
    *   The rendered HTML.
    */
   protected function renderComponent($plugin_id, array $context) {
-    /** @var \Drupal\Core\Template\TwigEnvironment $environment */
+    /** @var TwigEnvironment $environment */
     $environment = \Drupal::service('twig');
     $cache = $environment->getCache();
     $environment->setCache(FALSE);

-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
     $element = [
       '#type' => 'inline_template',
@@ @@
    * but that could also mean that the HTML isn't exactly the same as it would
    * be when normally included.
    *
-   * @param \Drupal\sfc\ComponentInterface $component
+   * @param ComponentInterface $component
    *   The component.
    * @param array $context
    *   The template context.
@@ @@
    *   The rendered HTML.
    */
   protected function renderComponentObject(ComponentInterface $component, array $context) {
-    /** @var \Drupal\Core\Template\TwigEnvironment $environment */
+    /** @var TwigEnvironment $environment */
     $environment = \Drupal::service('twig');
     $cache = $environment->getCache();
     $environment->setCache(FALSE);

-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
     $component->prepareContext($context);
     $render_context = new RenderContext();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/sfc/tests/src/Kernel/ComponentPluginManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sfc\Kernel;

+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\sfc\Plugin\SingleFileComponent\SimpleComponent;

@@ @@
    * Tests the ::createInstance method.
    */
   public function testCreateInstance() {
-    /** @var \Drupal\Component\Plugin\PluginManagerInterface $manager */
+    /** @var PluginManagerInterface $manager */
     $manager = \Drupal::service('plugin.manager.single_file_component');
     // The "simple_test" plugin doesn't actually exist - this tests that
     // derived plugins which define an alt_id can be created using that alt_id.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/sfc/tests/src/Kernel/ComponentOverridesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sfc\Kernel;

+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('user');
@@ @@
    * Tests that overrides work.
    */
   public function testOverrides() {
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
     $builder = \Drupal::entityTypeManager()->getViewBuilder('node');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/sfc/tests/src/Kernel/ComponentLayoutTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sfc\Kernel;

+use Drupal\sfc\Plugin\Layout\ComponentLayout;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
    * Tests the ::build method.
    */
   public function testBuild() {
-    /** @var \Drupal\sfc\Plugin\Layout\ComponentLayout $layout */
+    /** @var ComponentLayout $layout */
     $layout = \Drupal::service('plugin.manager.core.layout')->createInstance('single_file_component_layout:two_column_flexible');
     $renderer = \Drupal::service('renderer');
     $build = $layout->build([]);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


8) modules/contrib/sfc/tests/src/Kernel/ComponentFieldFormatterTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sfc\Kernel;

+use Drupal\Core\Field\FormatterBase;
 use Drupal\Core\Form\FormState;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
     $this->installEntitySchema('user');
@@ @@
         'second',
       ],
     ]);
-    /** @var \Drupal\Core\Field\FormatterBase $formatter */
+    /** @var FormatterBase $formatter */
     $formatter = \Drupal::service('plugin.manager.field.formatter')->createInstance('single_file_component_field_formatter:bold_formatter', [
       'field_definition' => $node->get('title')->getFieldDefinition(),
       'settings' => [],
@@ @@
     $render = $renderer->renderPlain($build);
     $this->assertEquals('<div class="bold-formatter">Test</div>', $render);
     // Test multiple.
-    /** @var \Drupal\Core\Field\FormatterBase $formatter */
+    /** @var FormatterBase $formatter */
     $formatter = \Drupal::service('plugin.manager.field.formatter')->createInstance('single_file_component_field_formatter:multiple_formatter', [
       'field_definition' => $node->get('multiple_text')->getFieldDefinition(),
       'settings' => [],
@@ @@
       'type' => 'page',
       'title' => 'Test',
     ]);
-    /** @var \Drupal\Core\Field\FormatterBase $formatter */
+    /** @var FormatterBase $formatter */
     $formatter = \Drupal::service('plugin.manager.field.formatter')->createInstance('single_file_component_field_formatter:bold_formatter', [
       'field_definition' => $node->get('title')->getFieldDefinition(),
       'settings' => [],
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/sfc/tests/src/Kernel/ComponentCachingTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sfc\Kernel;

+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\Core\Render\RenderContext;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('user');
@@ @@
    * Tests that caching works.
    */
   public function testCache() {
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
     $element = [
       '#type' => 'inline_template',
@@ @@
       return $renderer->render($element);
     });
     $this->assertStringContainsString("I'm cached!", $output);
-    /** @var \Drupal\Core\Render\BubbleableMetadata $metadata */
+    /** @var BubbleableMetadata $metadata */
     $metadata = $context->pop();
     $expected = [
       'my_tag',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/sfc/tests/src/Kernel/ComponentBlockTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sfc\Kernel;

+use Drupal\sfc\Plugin\Block\ComponentBlock;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
    * Tests the ::build method.
    */
   public function testBuild() {
-    /** @var \Drupal\sfc\Plugin\Block\ComponentBlock $block */
+    /** @var ComponentBlock $block */
     $block = \Drupal::service('plugin.manager.block')->createInstance('single_file_component_block:say_hello');
     $renderer = \Drupal::service('renderer');
     $build = $block->build();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


11) modules/contrib/sfc/tests/src/Kernel/ComponentAliasesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sfc\Kernel;

+use Drupal\Core\Render\RendererInterface;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
    * Tests that aliases work.
    */
   public function testAliases() {
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
     $element = [
       '#type' => 'inline_template',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


12) modules/contrib/sfc/tests/src/Functional/ComponentControllerTest.php:31

    ---------- begin diff ----------
@@ @@
    */
   public function testBuild() {
     $this->drupalGet('/homepage');
-    $this->assertText('Welcome to the homepage!');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Welcome to the homepage!');
     $this->drupalGet('/hello/Sam');
-    $this->assertText('Hello Sam!');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Hello Sam!');
     $this->assertSession()->responseContains('<html');
     $this->drupalGet('/no_anon_session');
     $this->assertSession()->responseContains('no session');
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


13) modules/contrib/sfc/tests/modules/sfc_test/src/Plugin/Block/InvalidBlock.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * A single file component instance.
    *
-   * @var \Drupal\sfc\ComponentInterface
+   * @var ComponentInterface
    */
   protected $component;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\sfc\ComponentInterface $component
+   * @param ComponentInterface $component
    *   A single file component instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ComponentInterface $component) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/sfc/tests/modules/sfc_test/src/Controller/TestController.php:42

    ---------- begin diff ----------
@@ @@
    *
    * @param string $plugin_id
    *   The plugin ID.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/sfc/src/TwigExtension.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * TwigExtension constructor.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The plugin manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(PluginManagerInterface $manager, RendererInterface $renderer) {
@@ @@
    *   The plugin ID.
    */
   public function prepareContext(array &$context, $id) {
-    /** @var \Drupal\sfc\ComponentInterface $component */
+    /** @var ComponentInterface $component */
     $component = $this->manager->createInstance($id);
     $component->prepareContext($context);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/sfc/src/TwigComponentLoader.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * TwigComponentLoader constructor.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The plugin manager.
    */
   public function __construct(PluginManagerInterface $manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/sfc/src/Plugin/Layout/ComponentLayout.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * A single file component instance.
    *
-   * @var \Drupal\sfc\ComponentInterface
+   * @var ComponentInterface
    */
   protected $component;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\sfc\ComponentInterface $component
+   * @param ComponentInterface $component
    *   A single file component instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ComponentInterface $component) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/sfc/src/Plugin/Field/FieldFormatter/ComponentFieldFormatter.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * A single file component instance.
    *
-   * @var \Drupal\sfc\ComponentInterface
+   * @var ComponentInterface
    */
   protected $component;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\sfc\ComponentInterface $component
+   * @param ComponentInterface $component
    *   A single file component instance.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, ComponentInterface $component) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/sfc/src/Plugin/Derivative/SimpleComponentDeriver.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sfc\Plugin\Derivative;

+use Drupal\Component\DependencyInjection\Container;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Extension\ThemeHandlerInterface;
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The container.
    *
-   * @var \Drupal\Component\DependencyInjection\Container
+   * @var Container
    */
   protected $container;

@@ @@
   /**
    * SimpleComponentDeriver constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    */
   public function __construct(ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler, FileSystemInterface $file_system, ContainerInterface $container = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/sfc/src/Plugin/Derivative/ComponentDeriver.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * ComponentDeriver constructor.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The plugin manager.
    */
   public function __construct(PluginManagerInterface $manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/sfc/src/Plugin/Block/ComponentBlock.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * A single file component instance.
    *
-   * @var \Drupal\sfc\ComponentInterface
+   * @var ComponentInterface
    */
   protected $component;

@@ @@
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\sfc\ComponentInterface $component
+   * @param ComponentInterface $component
    *   A single file component instance.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, ComponentInterface $component) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/sfc/src/Controller/ComponentController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sfc\Controller;

+use Drupal\Core\Render\HtmlResponse;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Render\RendererInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a ComponentController instance.
    *
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(RendererInterface $renderer) {
@@ @@
    *
    * @param string $component_id
    *   The component ID.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param bool $anon_session
    *   (optional) Force an anonymous session to be created.
    *
-   * @return array|\Drupal\Core\Render\HtmlResponse
+   * @return array|HtmlResponse
    *   The render array.
    */
   public function build($component_id, Request $request, $anon_session = FALSE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/sfc/src/Controller/ActionController.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * ActionController constructor.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The plugin manager.
    */
   public function __construct(PluginManagerInterface $manager) {
@@ @@
    *   The ID (name) of the component.
    * @param string $action
    *   The name of the action.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    */
   public function perform($component_id, $action, Request $request) {
-    /** @var \Drupal\sfc\ComponentActionsInterface $instance */
+    /** @var ComponentActionsInterface $instance */
     $component = $this->manager->createInstance($component_id);
     if (!($component instanceof ComponentActionsInterface)) {
       throw new NotFoundHttpException('Component does not support actions');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/sfc/src/ComponentPluginManager.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The theme handler.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler
+   * @param ThemeHandlerInterface $theme_handler
    *   The theme handler.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, ThemeHandlerInterface $theme_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/sfc/src/ComponentNameHelper.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the library name for a component.
    *
-   * @param \Drupal\sfc\ComponentInterface $component
+   * @param ComponentInterface $component
    *   The component.
    *
    * @return string
@@ @@
   /**
    * Gets the template name for a component.
    *
-   * @param \Drupal\sfc\ComponentInterface $component
+   * @param ComponentInterface $component
    *   The component.
    *
    * @return string
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


26) modules/contrib/sfc/src/ComponentFormInterface.php:21

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the initial structure of the plugin form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $default_values
    *   An array of default values for the form.
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function validateContextForm(array &$form, FormStateInterface $form_state);
@@ @@
    * @param array $form
    *   An associative array containing the structure of the plugin form as built
    *   by static::buildConfigurationForm().
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitContextForm(array &$form, FormStateInterface $form_state);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


27) modules/contrib/sfc/src/ComponentConsumerTrait.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Builds a component for display.
    *
-   * @param \Drupal\sfc\ComponentInterface $component
+   * @param ComponentInterface $component
    *   A component.
    * @param array $component_context
    *   The component context.
@@ @@
   /**
    * Builds a component's form.
    *
-   * @param \Drupal\sfc\ComponentInterface $component
+   * @param ComponentInterface $component
    *   A component.
    * @param array $component_context
    *   The component context, for setting default values.
@@ @@
    *
    * @param array $element
    *   The containing element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    * @param array $form
    *   The form.
@@ @@
   /**
    * Validates a component form.
    *
-   * @param \Drupal\sfc\ComponentInterface $component
+   * @param ComponentInterface $component
    *   A component.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   protected function componentValidateForm(ComponentInterface $component, array $form, FormStateInterface $form_state) {
@@ @@
   /**
    * Submits a component form.
    *
-   * @param \Drupal\sfc\ComponentInterface $component
+   * @param ComponentInterface $component
    *   A component.
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


28) modules/contrib/sfc/src/ComponentBase.php:78

    ---------- begin diff ----------
@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
    *   If debug markup should be added to templates.
    * @param string $app_root
    *   The app root.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, $debug, $app_root, FileSystemInterface $file_system) {
@@ @@
   /**
    * Gets the debug parameter from the container.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/sfc/src/ComponentActionsInterface.php:17

    ---------- begin diff ----------
@@ @@
    *
    * @param string $name
    *   The action name.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


30) modules/contrib/sfc/src/Commands/ComponentCommands.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\sfc\Commands;

+use Drupal\sfc\ComponentInterface;
 use Consolidation\SiteAlias\SiteAliasManagerAwareTrait;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Component\Plugin\PluginManagerInterface;
@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * ComponentCommands constructor.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The plugin manager.
    * @param string $watch_file_path
    *   The watch file path.
@@ @@
    * @command sfc:write
    */
   public function write($id) {
-    /** @var \Drupal\sfc\ComponentInterface $component */
+    /** @var ComponentInterface $component */
     $component = $this->manager->createInstance($id);
     $component->writeAssets();
   }
@@ @@
     $this->io()->writeln('Watching for changes...');
     $component_mtimes = [];
     foreach (array_keys($definitions) as $id) {
-      /** @var \Drupal\sfc\ComponentInterface $component */
+      /** @var ComponentInterface $component */
       $component = $this->manager->createInstance($id);
       if ($component instanceof ComponentFilenameInterface) {
         $component_mtimes[$id] = filemtime($component->getComponentFileName());
@@ @@
       $clear_cache = FALSE;
       $clear_definitions = FALSE;
       foreach (array_keys($definitions) as $id) {
-        /** @var \Drupal\sfc\ComponentInterface $component */
+        /** @var ComponentInterface $component */
         $component = $this->manager->createInstance($id);
         if ($component->shouldWriteAssets()) {
           $this->io()->writeln("Writing assets for $id");
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/sfc/sfc.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Plugin\PluginManagerInterface;
+use Drupal\sfc\ComponentInterface;
+use Drupal\Core\File\FileUrlGenerator;
 /**
  * @file
  * Contains hooks for the Single File Components module.
@@ @@
  */
 function sfc_library_info_build() {
   $libraries = [];
-  /** @var \Drupal\Component\Plugin\PluginManagerInterface $manager */
+  /** @var PluginManagerInterface $manager */
   $manager = \Drupal::service('plugin.manager.single_file_component');
   foreach ($manager->getDefinitions() as $id => $definition) {
-    /** @var \Drupal\sfc\ComponentInterface $component */
+    /** @var ComponentInterface $component */
     $component = $manager->createInstance($id);
     $library = $component->getLibrary();
     if (empty($library)) {
@@ @@
       if (isset($written[$id])) {
         continue;
       }
-      /** @var \Drupal\Component\Plugin\PluginManagerInterface $manager */
+      /** @var PluginManagerInterface $manager */
       $manager = \Drupal::service('plugin.manager.single_file_component');
-      /** @var \Drupal\sfc\ComponentInterface $component */
+      /** @var ComponentInterface $component */
       $component = $manager->createInstance($id);
       if ($component->shouldWriteAssets()) {
         $component->writeAssets();
@@ @@
  */
 function sfc_theme() {
   $implementations = [];
-  /** @var \Drupal\Component\Plugin\PluginManagerInterface $manager */
+  /** @var PluginManagerInterface $manager */
   $manager = \Drupal::service('plugin.manager.single_file_component');
   foreach ($manager->getDefinitions() as $id => $definition) {
-    /** @var \Drupal\sfc\ComponentInterface $component */
+    /** @var ComponentInterface $component */
     $component = $manager->createInstance($id);
     $id = $component->getId();
     // This allows themes to override templates provided by components.
@@ @@
  */
 function sfc_page_attachments_alter(array &$attachments) {
   if (Settings::get('sfc_watch_refresh', FALSE)) {
-    /** @var \Drupal\Core\File\FileUrlGenerator $url_generator */
+    /** @var FileUrlGenerator $url_generator */
     $url_generator = \Drupal::service('file_url_generator');
     $attachments['#attached']['library'][] = 'sfc/watch_refresh';
     $attachments['#attached']['drupalSettings']['sfc_watch_file'] = $url_generator->generate('public://sfc_watch_file.txt')->setAbsolute()->toString();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


32) modules/contrib/sfc/modules/sfc_example/src/Plugin/SingleFileComponent/ExampleClass.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
    *   If debug markup should be added to templates.
    * @param string $app_root
    *   The app root.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, $debug, $app_root, FileSystemInterface $file_system, AccountProxyInterface $current_user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/sfc/modules/sfc_example/src/Controller/ExampleController.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a random cat breed.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    */
   public function randomCatBreed() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


34) modules/contrib/sfc/modules/sfc_example/sfc_example.module:119

    ---------- begin diff ----------
@@ @@
 /**
  * Helper function for components to read from the todo list state.
  *
- * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value
+ * @param KeyValueFactoryInterface $key_value
  *   The key value factory.
- * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+ * @param AccountProxyInterface $current_user
  *   The current user.
  *
  * @return array
@@ @@
 /**
  * Helper function for components to write to the todo list state.
  *
- * @param \Drupal\Core\KeyValueStore\KeyValueFactoryInterface $key_value
+ * @param KeyValueFactoryInterface $key_value
  *   The key value factory.
- * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+ * @param AccountProxyInterface $current_user
  *   The current user.
  * @param array $items
  *   An array of todo list items.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


35) modules/contrib/sfc/modules/sfc_dev/tests/src/Kernel/ComponentDevControllerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\sfc_dev\Kernel;

+use Drupal\Core\Template\TwigEnvironment;
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Asset\AssetResolverInterface;
@@ @@
    * Tests the ::libraryPreview method.
    */
   public function testLibraryPreview() {
-    /** @var \Drupal\Core\Template\TwigEnvironment $twig */
+    /** @var TwigEnvironment $twig */
     $twig = \Drupal::service('twig');
     $twig->setCache(FALSE);

@@ @@
    * Tests the ::shouldWriteAssets method.
    */
   public function testShouldWriteAssets() {
-    /** @var \Drupal\Core\Template\TwigEnvironment $twig */
+    /** @var TwigEnvironment $twig */
     $twig = \Drupal::service('twig');
     $twig->setCache(FALSE);

@@ @@
    * Tests the ::viewTemplate method.
    */
   public function testViewTemplate() {
-    /** @var \Drupal\Core\Template\TwigEnvironment $twig */
+    /** @var TwigEnvironment $twig */
     $twig = \Drupal::service('twig');
     $twig->setCache(FALSE);

@@ @@
    * Tests the ::viewTemplateTitle method.
    */
   public function testViewTemplateTitle() {
-    /** @var \Drupal\Core\Template\TwigEnvironment $twig */
+    /** @var TwigEnvironment $twig */
     $twig = \Drupal::service('twig');
     $twig->setCache(FALSE);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


36) modules/contrib/sfc/modules/sfc_dev/src/Plugin/SingleFileComponent/ComponentPreview.php:225

    ---------- begin diff ----------
@@ @@
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;

@@ @@
    *   If debug markup should be added to templates.
    * @param string $app_root
    *   The app root.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, $debug, $app_root, FileSystemInterface $file_system, FormBuilderInterface $form_builder) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/sfc/modules/sfc_dev/src/Form/ComponentPreviewForm.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The asset resolver.
    *
-   * @var \Drupal\Core\Asset\AssetResolverInterface
+   * @var AssetResolverInterface
    */
   protected $assetResolver;

@@ @@
   /**
    * ComponentPreviewForm constructor.
    *
-   * @param \Drupal\Core\Asset\AssetResolverInterface $asset_resolver
+   * @param AssetResolverInterface $asset_resolver
    *   The asset resolver.
    */
   public function __construct(AssetResolverInterface $asset_resolver) {
@@ @@
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   A response.
    */
   public function ajaxReload(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/sfc/modules/sfc_dev/src/Controller/ComponentDevController.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The component plugin manager.
    *
-   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   * @var PluginManagerInterface
    */
   protected $manager;

@@ @@
   /**
    * The asset resolver.
    *
-   * @var \Drupal\Core\Asset\AssetResolverInterface
+   * @var AssetResolverInterface
    */
   protected $assetResolver;

@@ @@
   /**
    * ComponentDevController constructor.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The component plugin manager.
-   * @param \Drupal\Core\Asset\AssetResolverInterface $asset_resolver
+   * @param AssetResolverInterface $asset_resolver
    *   The asset resolver.
    */
   public function __construct(PluginManagerInterface $manager, AssetResolverInterface $asset_resolver) {
@@ @@
    * @param string $plugin_id
    *   The plugin ID.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   The response.
    */
   public function libraryPreview($plugin_id) {
@@ @@
    * @param string $plugin_id
    *   The plugin ID.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response.
    */
   public function shouldWriteAssets($plugin_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/sfc/modules/sfc_dev/src/Ajax/RefreshComponentAssetsCommand.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The component.
    *
-   * @var \Drupal\sfc\ComponentInterface
+   * @var ComponentInterface
    */
   protected $component;

@@ @@
   /**
    * The asset resolver.
    *
-   * @var \Drupal\Core\Asset\AssetResolverInterface
+   * @var AssetResolverInterface
    */
   protected $assetResolver;

@@ @@
   /**
    * Constructs a RefreshComponentAssetsCommand object.
    *
-   * @param \Drupal\sfc\ComponentInterface $component
+   * @param ComponentInterface $component
    *   The component.
-   * @param \Drupal\Core\Asset\AssetResolverInterface $asset_resolver
+   * @param AssetResolverInterface $asset_resolver
    *   The asset resolver.
    */
   public function __construct(ComponentInterface $component, AssetResolverInterface $asset_resolver) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 39 files have been changed by Rector                                      

