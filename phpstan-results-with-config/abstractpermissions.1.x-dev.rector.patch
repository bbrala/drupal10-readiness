diff --git a/abstractpermissions.info.yml b/abstractpermissions.info.yml
index a35a31f..d612a63 100644
--- a/abstractpermissions.info.yml
+++ b/abstractpermissions.info.yml
@@ -1,3 +1,3 @@
 name: Abstract Permissions
-core_version_requirement: ^8.7.7 || ^9
+core_version_requirement: ^8.7.7 || ^9 || ^10
 type: module
diff --git a/abstractpermissions.module b/abstractpermissions.module
index e24d1f4..cc9894a 100644
--- a/abstractpermissions.module
+++ b/abstractpermissions.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\abstractpermissions\AbstractPermissionsServiceInterface;
 use Drupal\abstractpermissions\FormAlter\PermissionsFormOnlyUngoverned;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -41,7 +42,7 @@ function abstractpermissions_form_user_admin_permissions_alter(&$form, FormState
 }
 
 /**
- * @return \Drupal\abstractpermissions\AbstractPermissionsServiceInterface
+ * @return AbstractPermissionsServiceInterface
  */
 function abstractpermissions_service() {
   return \Drupal::service('abstractpermissions.service');
diff --git a/src/AbstractPermissionsService.php b/src/AbstractPermissionsService.php
index a42493e..1878378 100644
--- a/src/AbstractPermissionsService.php
+++ b/src/AbstractPermissionsService.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\abstractpermissions;
 
+use Drupal\abstractpermissions\Entity\PermissionAbstractionInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\user\PermissionHandlerInterface;
@@ -12,30 +13,30 @@ class AbstractPermissionsService implements AbstractPermissionsServiceInterface
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
-   * @var \Drupal\user\PermissionHandlerInterface
+   * @var PermissionHandlerInterface
    */
   protected $permissionHandler;
 
   /**
-   * @var \Drupal\abstractpermissions\Entity\PermissionAbstractionInterface[]
+   * @var PermissionAbstractionInterface[]
    */
   protected $permissionAbstractions;
 
   /**
-   * @var \Drupal\abstractpermissions\PermissionGraph
+   * @var PermissionGraph
    */
   protected $permissionGraph;
 
   /**
    * AbstractPermissionsService constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @param \Drupal\user\PermissionHandlerInterface $permissionHandler
+   * @param EntityTypeManagerInterface $entityTypeManager
+   * @param PermissionHandlerInterface $permissionHandler
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, PermissionHandlerInterface $permissionHandler) {
     $this->entityTypeManager = $entityTypeManager;
@@ -79,7 +80,7 @@ class AbstractPermissionsService implements AbstractPermissionsServiceInterface
   /**
    * Set all governed permissions to their should-be value.
    *
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    */
   public function denormalizeRole(RoleInterface $role) {
     $permissionGraph = $this->getPermissionGraph();
diff --git a/src/AbstractPermissionsServiceInterface.php b/src/AbstractPermissionsServiceInterface.php
index 14883f6..020fbe8 100644
--- a/src/AbstractPermissionsServiceInterface.php
+++ b/src/AbstractPermissionsServiceInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\abstractpermissions;
 
+use Drupal\abstractpermissions\Entity\PermissionAbstractionInterface;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\user\RoleInterface;
 
 interface AbstractPermissionsServiceInterface {
@@ -16,11 +19,10 @@ interface AbstractPermissionsServiceInterface {
   /**
    * Get permission abstractions.
    *
-   * @return \Drupal\abstractpermissions\Entity\PermissionAbstractionInterface[]
-
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @return PermissionAbstractionInterface[]
+   * @throws PluginNotFoundException
    *   Thrown if the entity type doesn't exist.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    *   Thrown if the storage handler couldn't be loaded.
    */
   public function getPermissionAbstractions();
@@ -28,7 +30,7 @@ interface AbstractPermissionsServiceInterface {
   /**
    * Get permission graph.
    *
-   * @return \Drupal\abstractpermissions\PermissionGraph
+   * @return PermissionGraph
    */
   public function getPermissionGraph();
 
@@ -42,8 +44,7 @@ interface AbstractPermissionsServiceInterface {
   /**
    * Denormalize a role.
    *
-   * @param \Drupal\user\RoleInterface $role
-
+   * @param RoleInterface $role
    * @return void
    */
   public function denormalizeRole(RoleInterface $role);
diff --git a/src/Form/PermissionAbstractionDeleteForm.php b/src/Form/PermissionAbstractionDeleteForm.php
index 63a0d04..74e6f7e 100644
--- a/src/Form/PermissionAbstractionDeleteForm.php
+++ b/src/Form/PermissionAbstractionDeleteForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\abstractpermissions\Form;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -35,10 +37,10 @@ class PermissionAbstractionDeleteForm extends EntityConfirmFormBase {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $entity */
+    /** @var ConfigEntityInterface $entity */
     $entity = $this->entity;
     \Drupal::logger('permissionproof')->notice('%type: %id deleted', [
       '%type' => $entity->get('entityTypeId'),
diff --git a/src/Form/PermissionAbstractionForm.php b/src/Form/PermissionAbstractionForm.php
index b516935..f6a46b2 100644
--- a/src/Form/PermissionAbstractionForm.php
+++ b/src/Form/PermissionAbstractionForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\abstractpermissions\Form;
 
+use Drupal\abstractpermissions\Entity\PermissionAbstractionInterface;
+use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\abstractpermissions\AbstractPermissionsServiceInterface;
 use Drupal\abstractpermissions\FormAlter\PermissionsFormMarkGoverned;
 use Drupal\Core\Entity\EntityForm;
@@ -14,14 +16,14 @@ class PermissionAbstractionForm extends EntityForm {
   /**
    * The permission handler.
    *
-   * @var \Drupal\user\PermissionHandlerInterface
+   * @var PermissionHandlerInterface
    */
   protected $permissionHandler;
 
   /**
    * The permissions form.
    *
-   * @var \Drupal\abstractpermissions\Form\PermissionsFormInterface
+   * @var PermissionsFormInterface
    */
   protected $permissionsForm;
 
@@ -50,7 +52,7 @@ class PermissionAbstractionForm extends EntityForm {
     $form = parent::form($form, $form_state);
     $form['#tree'] = TRUE;
 
-    /** @var \Drupal\abstractpermissions\Entity\PermissionAbstractionInterface $entity */
+    /** @var PermissionAbstractionInterface $entity */
     $entity = $this->entity;
     $form['label'] = [
       '#type' => 'textfield',
@@ -180,7 +182,7 @@ class PermissionAbstractionForm extends EntityForm {
    * @inheritDoc
    */
   public function buildEntity(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\abstractpermissions\Entity\PermissionAbstractionInterface $entity */
+    /** @var PermissionAbstractionInterface $entity */
     $entity = clone $this->entity;
     $entity->setId($form_state->getValue('id'));
     $entity->setLabel($form_state->getValue('label'));
@@ -224,7 +226,7 @@ class PermissionAbstractionForm extends EntityForm {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function save(array $form, FormStateInterface $form_state) {
     $status = parent::save($form, $form_state);
diff --git a/src/Form/PermissionsForm.php b/src/Form/PermissionsForm.php
index 0447780..22853f4 100644
--- a/src/Form/PermissionsForm.php
+++ b/src/Form/PermissionsForm.php
@@ -12,14 +12,14 @@ class PermissionsForm implements PermissionsFormInterface {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * PermissionsForm constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    */
   public function __construct(ModuleHandlerInterface $moduleHandler) {
     $this->moduleHandler = $moduleHandler;
diff --git a/src/FormAlter/PermissionsFormAlterBase.php b/src/FormAlter/PermissionsFormAlterBase.php
index dc0ea74..fc33105 100644
--- a/src/FormAlter/PermissionsFormAlterBase.php
+++ b/src/FormAlter/PermissionsFormAlterBase.php
@@ -2,12 +2,13 @@
 
 namespace Drupal\abstractpermissions\FormAlter;
 
+use Drupal\abstractpermissions\AbstractPermissionsServiceInterface;
 use Drupal\abstractpermissions\PermissionGovernor;
 
 abstract class PermissionsFormAlterBase {
 
   public static function alterForm(array &$form) {
-    /** @var \Drupal\abstractpermissions\AbstractPermissionsServiceInterface $abstractPermissionsService */
+    /** @var AbstractPermissionsServiceInterface $abstractPermissionsService */
     $abstractPermissionsService = \Drupal::service('abstractpermissions.service');
     $permissionGraph = $abstractPermissionsService->getPermissionGraph();
 
diff --git a/src/PermissionGovernor.php b/src/PermissionGovernor.php
index 60d3954..c021666 100644
--- a/src/PermissionGovernor.php
+++ b/src/PermissionGovernor.php
@@ -17,7 +17,7 @@ class PermissionGovernor {
   /**
    * The permission graph.
    *
-   * @var \Drupal\abstractpermissions\PermissionGraph
+   * @var PermissionGraph
    */
   private $graph;
 
@@ -51,7 +51,7 @@ class PermissionGovernor {
    * PermissionGovernor constructor.
    *
    * @param string $permissionId
-   * @param \Drupal\abstractpermissions\PermissionGraph $graph
+   * @param PermissionGraph $graph
    */
   public function __construct($permissionId, PermissionGraph $graph) {
     $this->graph = $graph;
@@ -61,7 +61,7 @@ class PermissionGovernor {
   /**
    * Add permission abstraction.
    *
-   * @param \Drupal\abstractpermissions\Entity\PermissionAbstractionInterface $permissionAbstraction
+   * @param PermissionAbstractionInterface $permissionAbstraction
    */
   public function addPermissionAbstraction(PermissionAbstractionInterface $permissionAbstraction) {
     $this->permissionAbstractions[$permissionAbstraction->id()] = $permissionAbstraction;
@@ -76,7 +76,7 @@ class PermissionGovernor {
   /**
    * Get permission abstractions.
    *
-   * @return \Drupal\abstractpermissions\Entity\PermissionAbstractionInterface[]
+   * @return PermissionAbstractionInterface[]
    */
   public function getPermissionAbstractions() {
     return $this->permissionAbstractions;
@@ -129,7 +129,7 @@ class PermissionGovernor {
   /**
    * Get permission value.
    *
-   * @param \Drupal\user\RoleInterface $role
+   * @param RoleInterface $role
    *   The role.
    *
    * @return bool
diff --git a/src/PermissionGraph.php b/src/PermissionGraph.php
index 3f49ef6..88138cc 100644
--- a/src/PermissionGraph.php
+++ b/src/PermissionGraph.php
@@ -2,19 +2,20 @@
 
 namespace Drupal\abstractpermissions;
 
+use Drupal\abstractpermissions\Entity\PermissionAbstractionInterface;
 class PermissionGraph {
 
   /**
    * The permission governors, keyed by permission ID.
    *
-   * @var \Drupal\abstractpermissions\PermissionGovernor[]
+   * @var PermissionGovernor[]
    */
   private $governors = [];
 
   /**
    * PermissionGraph constructor.
    *
-   * @param \Drupal\abstractpermissions\Entity\PermissionAbstractionInterface[] $permissionAbstractions
+   * @param PermissionAbstractionInterface[] $permissionAbstractions
    */
   public function __construct($permissionAbstractions) {
     foreach ($permissionAbstractions as $permissionAbstraction) {
@@ -28,7 +29,7 @@ class PermissionGraph {
   }
 
   /**
-   * @return \Drupal\abstractpermissions\PermissionGovernor
+   * @return PermissionGovernor
    */
   public function getGovernor($permissionId) {
     return isset($this->governors[$permissionId]) ? $this->governors[$permissionId] : NULL;
diff --git a/tests/src/Functional/AdminPageTest.php b/tests/src/Functional/AdminPageTest.php
index dbe4200..0911d6a 100644
--- a/tests/src/Functional/AdminPageTest.php
+++ b/tests/src/Functional/AdminPageTest.php
@@ -33,7 +33,7 @@ class AdminPageTest extends BrowserTestBase {
   public function testAdminPage() {
     $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin');
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
 
     // Ensure that the test is not marked as risky because of no assertions.
     // see https://gitlab.com/weitzman/drupal-test-traits/-/commit/82bf5059908f9073b3468cb7313960da72176d9a
