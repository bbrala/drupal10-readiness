modules/contrib/micro_theme/micro_theme.api.php
modules/contrib/micro_theme/micro_theme.module
modules/contrib/micro_theme/src/Access/MicroThemeAccess.php
modules/contrib/micro_theme/src/Form/MicroThemeFormSettings.php
modules/contrib/micro_theme/src/MicroAssetFileStorage.php
modules/contrib/micro_theme/src/MicroCssFileStorage.php
modules/contrib/micro_theme/src/MicroLibrariesService.php
modules/contrib/micro_theme/src/MicroLibrariesServiceInterface.php
modules/contrib/micro_theme/src/MicroManagerAsset.php
modules/contrib/micro_theme/src/MicroManagerAssetInterface.php
modules/contrib/micro_theme/src/Theme/MicroThemeNegotiator.php
modules/contrib/micro_theme/tests/src/Functional/LoadTest.php

8 files with changes
====================

1) modules/contrib/micro_theme/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\usine_webform\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\micro_site\Functional\MicroSiteBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/micro_theme/src/Theme/MicroThemeNegotiator.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The Site negotiator.
    *
-   * @var \Drupal\micro_site\SiteNegotiatorInterface
+   * @var SiteNegotiatorInterface
    */
   protected $negotiator;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\micro_site\SiteNegotiatorInterface $site_negotiator
+   * @param SiteNegotiatorInterface $site_negotiator
    *   The site negotiator.
    * @param |Drupal\Core\Routing\AdminContext $admin_context
    *   The router admin context.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/micro_theme/src/MicroManagerAsset.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\File\FileSystemInterface definition.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected  $config;

@@ @@
   /**
    * Drupal\Core\Theme\ThemeManagerInterface definition.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected  $themeManager;

@@ @@
   /**
    * Drupal\Core\State\StateInterface definition.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * ManagerAsset constructor.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   * @param \Drupal\micro_theme\MicroLibrariesServiceInterface $libraries_services
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $theme_manager
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param FileSystemInterface $file_system
+   * @param ConfigFactoryInterface $config_factory
+   * @param MicroLibrariesServiceInterface $libraries_services
+   * @param ThemeManagerInterface $theme_manager
+   * @param StateInterface $state
    */
   public function __construct(FileSystemInterface $file_system, ConfigFactoryInterface $config_factory, MicroLibrariesServiceInterface $libraries_services, ThemeManagerInterface $theme_manager, StateInterface $state) {
     $this->fileSystem = $file_system;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/micro_theme/src/MicroLibrariesService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micro_theme;

+use Drupal\Core\Extension\Extension;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Asset\LibraryDiscoveryInterface;
 use Drupal\Core\Extension\ThemeHandlerInterface;
@@ @@
   /**
    * Drupal\Core\Extension\ModuleHandlerInterface definition.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Drupal\Core\Asset\LibraryDiscoveryInterface definition.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * Drupal\Core\Extension\ThemeHandlerInterface definition.
    *
-   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   * @var ThemeHandlerInterface
    */
   protected $themeHandler;

@@ @@
     $themes = $this->themeHandler->rebuildThemeData();
     $extensions = array_merge($modules, $themes);
     $root = \Drupal::root();
-    /** @var \Drupal\Core\Extension\Extension $extension */
+    /** @var Extension $extension */
     foreach ($extensions as $extension_name => $extension) {
       $library_file = $extension->getPath() . '/' . $extension_name . '.libraries.yml';
       if (is_file($root . '/' . $library_file)) {
@@ @@
     $root = \Drupal::root();

     if (isset($modules[$module_name])) {
-      /** @var \Drupal\Core\Extension\Extension $extension */
+      /** @var Extension $extension */
       $extension = $modules[$module_name];
       $library_file = $extension->getPath() . '/' . $module_name . '.libraries.yml';
       if (is_file($root . '/' . $library_file)) {
@@ @@
     $root = \Drupal::root();

     if (isset($themes[$theme])) {
-      /** @var \Drupal\Core\Extension\Extension $extension */
+      /** @var Extension $extension */
       $extension = $themes[$theme];
       $library_file = $extension->getPath() . '/' . $theme . '.libraries.yml';
       if (is_file($root . '/' . $library_file)) {
@@ @@
    * @return mixed
    */
   public function getDefaultColors() {
-    $yaml_default_color_path = \Drupal::root() . '/' . drupal_get_path('module', 'micro_theme') . '/micro_theme.default_color.yml';
+    $yaml_default_color_path = \Drupal::root() . '/' . \Drupal::service('extension.list.module')->getPath('micro_theme') . '/micro_theme.default_color.yml';
     $file_content = file_get_contents($yaml_default_color_path);
     $yaml_default_color = Yaml::decode($file_content);
     $this->moduleHandler->alter('micro_theme_default_color', $yaml_default_color);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/micro_theme/src/MicroAssetFileStorage.php:111

    ---------- begin diff ----------
@@ @@
    * overrides.
    */
   public function deleteFiles() {
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     $pattern = $this->internalFileUri(TRUE);
     $paths = glob($pattern);
@@ @@
    * Delete all asset files.
    */
   public static function deleteAllFiles() {
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     $file_system->deleteRecursive(self::internalDirectoryUri());
   }
@@ @@
    */
   public static function deleteAllSiteFiles($site_id) {
     $directory = self::internalDirectoryUri() . '/' . $site_id;
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
     $file_system->deleteRecursive($directory);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/micro_theme/src/Form/MicroThemeFormSettings.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micro_theme\Form;

+use Drupal\file\Entity\File;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * File usage interface to configurate an file object.
    *
-   * @var \Drupal\file\FileUsage\FileUsageInterface
+   * @var FileUsageInterface
    */
   protected $fileUsage;

@@ @@
   /**
    * Created file entity.
    *
-   * @var \Drupal\file\Entity\File|null
+   * @var File|null
    */
   protected $file = NULL;

@@ @@
   /**
    * Drupal\Core\Image\ImageFactory definition.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * Drupal\micro_theme\MicroLibrariesServiceInterface definition.
    *
-   * @var \Drupal\micro_theme\MicroLibrariesServiceInterface
+   * @var MicroLibrariesServiceInterface
    */
   protected $librariesService;

@@ @@
   /**
    * Drupal\Core\State\StateInterface definition.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;

@@ @@
   /**
    * ThemeForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Drupal\file\FileUsage\FileUsageInterface $file_usage
+   * @param FileUsageInterface $file_usage
    *   File usage service.
-   * @param \Drupal\micro_theme\MicroLibrariesServiceInterface $libraries_service
+   * @param MicroLibrariesServiceInterface $libraries_service
    *   The libraries service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\micro_site\Entity\SiteInterface $site
+   * @param SiteInterface $site
    *   The micro site entity.
    */
   public function __construct(ConfigFactoryInterface $config_factory, ImageFactory $image_factory, FileUsageInterface $file_usage, MicroLibrariesServiceInterface $libraries_service, StateInterface $state) {
@@ @@
       '#description' => $this->t('You could select below some fonts available on <a href="@url" target="_blank">Google Font</a>', ['@url' => 'https://fonts.google.com/'])
     ];

-    $example_file_fonts = drupal_get_path('module', 'micro_theme') . '/css/example_fonts.css';
+    $example_file_fonts = \Drupal::service('extension.list.module')->getPath('micro_theme') . '/css/example_fonts.css';
     $form['font']['file_font'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Fonts file css'),
@@ @@
       '#default_value' => $this->settings['color']['override_color'],
     ];

-    $example_file_colors = drupal_get_path('module', 'micro_theme') . '/css/example_colors.css';
+    $example_file_colors = \Drupal::service('extension.list.module')->getPath('micro_theme') . '/css/example_colors.css';
     $form['color']['file_color'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Colors file css'),
@@ @@
     $config = $this->config('system.theme');
     $default_theme = $this->config('system.theme')->get('default');
     $path = theme_get_setting('logo.path', $default_theme);
-    $logo_path = file_create_url(theme_get_setting('logo.path', $default_theme));
-    $relative_logo_path = file_url_transform_relative($logo_path);
+    $logo_path = \Drupal::service('file_url_generator')->generateAbsoluteString(theme_get_setting('logo.path', $default_theme));
+    $relative_logo_path = \Drupal::service('file_url_generator')->transformRelative($logo_path);
     return  $relative_logo_path;
   }
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/micro_theme/src/Access/MicroThemeAccess.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\micro_theme\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ @@
   /**
    * Checks access to the entity operation on the given route.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The parametrized route
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
-   * @param \Drupal\micro_site\Entity\SiteInterface $site
+   * @param SiteInterface $site
    *   The site entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, RouteMatchInterface $route_match, AccountInterface $account, SiteInterface $site = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/micro_theme/micro_theme.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\micro_theme\MicroManagerAssetInterface;
+use Drupal\micro_site\SiteNegotiatorInterface;
+use Drupal\micro_theme\MicroLibrariesServiceInterface;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\micro_site\Entity\SiteType;
@@ @@
 /**
  * Set dynamic allowed values for the theme field on the site entity.
  *
- * @param \Drupal\Core\Field\BaseFieldDefinition $definition
+ * @param BaseFieldDefinition $definition
  *   The base field definition.
- * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
+ * @param ContentEntityInterface|null $entity
  *   The entity being created if applicable.
  * @param bool $cacheable
  *   Boolean indicating if the results are cacheable.
@@ @@
 /**
  * Sets the default value for the theme field.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   The entity being created.
- * @param \Drupal\Core\Field\FieldDefinitionInterface $definition
+ * @param FieldDefinitionInterface $definition
  *   The field definition.
  *
  * @return array
@@ @@
  * Implements hook_page_attachments().
  */
 function micro_theme_page_attachments(array &$attachments) {
-  /** @var \Drupal\micro_theme\MicroManagerAssetInterface $manager */
+  /** @var MicroManagerAssetInterface $manager */
   $manager = \Drupal::service('micro_theme.manager');
   if (!$manager->isDefaultTheme()) {
     return;
   }

-  /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+  /** @var SiteNegotiatorInterface $negotiator */
   $negotiator = \Drupal::service('micro_site.negotiator');
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   $site = $negotiator->getActiveSite();
   if (!$site instanceof SiteInterface) {
     return;
@@ @@
   }

   $site_id = $site->id();
-  /** @var \Drupal\micro_theme\MicroLibrariesServiceInterface $libraries_service */
+  /** @var MicroLibrariesServiceInterface $libraries_service */
   $libraries_service = \Drupal::service('micro_theme.libraries');
   $active_theme = $manager->getActiveTheme();

@@ @@
  * Implements hook_preprocess_HOOK().
  */
 function micro_theme_preprocess_html(&$variables) {
-  /** @var \Drupal\micro_site\SiteNegotiatorInterface $negotiator */
+  /** @var SiteNegotiatorInterface $negotiator */
   $negotiator = \Drupal::service('micro_site.negotiator');
-  /** @var \Drupal\micro_site\Entity\SiteInterface $site */
+  /** @var SiteInterface $site */
   $site = $negotiator->getActiveSite();
   if (!$site instanceof SiteInterface) {
     return;
   }
-  /** @var \Drupal\micro_theme\MicroManagerAssetInterface $manager */
+  /** @var MicroManagerAssetInterface $manager */
   $manager = \Drupal::service('micro_theme.manager');
   if ($manager->hasAssetOverride('font', $site->id())) {
     $variables['attributes']['class'][] = 'override-font';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 8 files have been changed by Rector                                       

