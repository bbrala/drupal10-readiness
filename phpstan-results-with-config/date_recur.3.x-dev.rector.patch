diff --git a/composer.json b/composer.json
index 3878eb3..1ac2b5d 100644
--- a/composer.json
+++ b/composer.json
@@ -18,8 +18,8 @@
   ],
   "require": {
     "php": ">=7.3",
-    "drupal/core": "^9",
-    "rlanvin/php-rrule": "1.*"
+    "rlanvin/php-rrule": "1.*",
+    "drupal/core": "^9 || ^10"
   },
   "require-dev": {
     "drupal/coder": "^8.3",
diff --git a/date_recur.api.php b/date_recur.api.php
index 2b4d7e9..cf817fa 100644
--- a/date_recur.api.php
+++ b/date_recur.api.php
@@ -9,6 +9,10 @@
 
 declare(strict_types = 1);
 
+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use Drupal\date_recur\Event\DateRecurValueEvent;
+use Drupal\date_recur\Event\DateRecurEvents;
+
 /**
  * @file
  * Contains hooks and event examples for date_recur module.
@@ -29,12 +33,12 @@ declare(strict_types = 1);
  * ```
  * </code>
  */
-class MyEventSubscriber implements \Symfony\Component\EventDispatcher\EventSubscriberInterface {
+class MyEventSubscriber implements EventSubscriberInterface {
 
   /**
    * Dispatched after an entity containing a date recur field is saved.
    *
-   * @param \Drupal\date_recur\Event\DateRecurValueEvent $event
+   * @param DateRecurValueEvent $event
    *   The date recur value event.
    *
    * @see \Drupal\date_recur\Event\DateRecurEvents::FIELD_VALUE_SAVE
@@ -44,12 +48,12 @@ class MyEventSubscriber implements \Symfony\Component\EventDispatcher\EventSubsc
    * @see \Drupal\date_recur\DateRecurOccurrences::onSave
    *   Live example.
    */
-  public function onSave(\Drupal\date_recur\Event\DateRecurValueEvent $event): void {}
+  public function onSave(DateRecurValueEvent $event): void {}
 
   /**
    * Dispatched when an entity containing date recur fields is almost deleted.
    *
-   * @param \Drupal\date_recur\Event\DateRecurValueEvent $event
+   * @param DateRecurValueEvent $event
    *   The date recur value event.
    *
    * @see \Drupal\date_recur\Event\DateRecurEvents::FIELD_ENTITY_DELETE
@@ -59,12 +63,12 @@ class MyEventSubscriber implements \Symfony\Component\EventDispatcher\EventSubsc
    * @see \Drupal\date_recur\DateRecurOccurrences::onEntityDelete
    *   Live example.
    */
-  public function onEntityDelete(\Drupal\date_recur\Event\DateRecurValueEvent $event): void {}
+  public function onEntityDelete(DateRecurValueEvent $event): void {}
 
   /**
    * Dispatched when an entity revision is deleted.
    *
-   * @param \Drupal\date_recur\Event\DateRecurValueEvent $event
+   * @param DateRecurValueEvent $event
    *   The date recur value event.
    *
    * @see \Drupal\date_recur\Event\DateRecurEvents::FIELD_REVISION_DELETE
@@ -74,16 +78,16 @@ class MyEventSubscriber implements \Symfony\Component\EventDispatcher\EventSubsc
    * @see \Drupal\date_recur\DateRecurOccurrences::onEntityRevisionDelete
    *   Live example.
    */
-  public function onEntityRevisionDelete(\Drupal\date_recur\Event\DateRecurValueEvent $event): void {}
+  public function onEntityRevisionDelete(DateRecurValueEvent $event): void {}
 
   /**
    * {@inheritdoc}
    */
   public static function getSubscribedEvents(): array {
     return [
-      \Drupal\date_recur\Event\DateRecurEvents::FIELD_VALUE_SAVE => ['onSave'],
-      \Drupal\date_recur\Event\DateRecurEvents::FIELD_ENTITY_DELETE => ['onEntityDelete'],
-      \Drupal\date_recur\Event\DateRecurEvents::FIELD_REVISION_DELETE => ['onEntityRevisionDelete'],
+      DateRecurEvents::FIELD_VALUE_SAVE => ['onSave'],
+      DateRecurEvents::FIELD_ENTITY_DELETE => ['onEntityDelete'],
+      DateRecurEvents::FIELD_REVISION_DELETE => ['onEntityRevisionDelete'],
     ];
   }
 
diff --git a/date_recur.info.yml b/date_recur.info.yml
index bf54532..0d67e6e 100644
--- a/date_recur.info.yml
+++ b/date_recur.info.yml
@@ -1,7 +1,7 @@
 name: Recurring Dates Field
 type: module
 description: Provides a recurring/repeating dates field.
-core_version_requirement: ^9
+core_version_requirement: ^9 || ^10
 php: 7.3
 package: Field types
 dependencies:
diff --git a/date_recur.install b/date_recur.install
index 182c8c3..b6836bf 100644
--- a/date_recur.install
+++ b/date_recur.install
@@ -6,6 +6,12 @@
  */
 
 declare(strict_types = 1);
+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\Field\WidgetPluginManager;
 
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
@@ -51,7 +57,7 @@ function date_recur_update_8201(&$sandbox): void {
   $entityFieldManager = \Drupal::service('entity_field.manager');
   $entityFieldMap = $entityFieldManager->getFieldMapByFieldType($fieldType);
   $entityStorageSchemaSql = \Drupal::keyValue('entity.storage_schema.sql');
-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $lastInstalledSchemaRepository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $lastInstalledSchemaRepository */
   $lastInstalledSchemaRepository = \Drupal::service('entity.last_installed_schema.repository');
 
   // The new SQL schema for our column.
@@ -70,11 +76,11 @@ function date_recur_update_8201(&$sandbox): void {
     $entityType = $entityTypeManager->getDefinition($entityTypeId);
     // Loads definitions for all fields (even non date_recur).
     $entityFieldStorageDefinitions = $entityFieldManager->getFieldStorageDefinitions($entityTypeId);
-    /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $tableMapping */
+    /** @var DefaultTableMapping $tableMapping */
     $tableMapping = $entityStorage->getTableMapping($entityFieldStorageDefinitions);
 
     // Intersect date_recur fields with storage definitions for all fields.
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $fieldDefinitions */
+    /** @var FieldStorageDefinitionInterface[] $fieldDefinitions */
     $fieldDefinitions = array_intersect_key($entityFieldStorageDefinitions, $fields);
 
     // Iterate over all date_recur field definitions for this entity type.
@@ -139,7 +145,7 @@ function date_recur_update_8202(&$sandbox): void {
     $entityFieldStorageDefinitions = $entityFieldManager->getFieldStorageDefinitions($entityTypeId);
 
     // Intersect date_recur fields with storage definitions for all fields.
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $fieldDefinitions */
+    /** @var FieldStorageDefinitionInterface[] $fieldDefinitions */
     $fieldDefinitions = array_intersect_key($entityFieldStorageDefinitions, $fields);
 
     // Iterate over all date_recur field definitions for this entity type.
@@ -172,11 +178,11 @@ function date_recur_update_8203(&$sandbox): void {
 
     // Loads definitions for all fields (even non date_recur).
     $entityFieldStorageDefinitions = $entityFieldManager->getFieldStorageDefinitions($entityTypeId);
-    /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $tableMapping */
+    /** @var DefaultTableMapping $tableMapping */
     $tableMapping = $entityStorage->getTableMapping($entityFieldStorageDefinitions);
 
     // Intersect date_recur fields with storage definitions for all fields.
-    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $fieldDefinitions */
+    /** @var FieldStorageDefinitionInterface[] $fieldDefinitions */
     $fieldDefinitions = array_intersect_key($entityFieldStorageDefinitions, $fields);
 
     // Iterate over all date_recur field definitions for this entity type.
@@ -211,7 +217,7 @@ function date_recur_update_8203(&$sandbox): void {
  * Update view and form display configurations.
  */
 function date_recur_update_8204(&$sandbox): void {
-  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface[] $displays */
+  /** @var EntityFormDisplayInterface[] $displays */
   $displays = EntityFormDisplay::loadMultiple();
   foreach ($displays as $display) {
     $components = $display->getComponents();
@@ -233,7 +239,7 @@ function date_recur_update_8204(&$sandbox): void {
     $display->save();
   }
 
-  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface[] $displays */
+  /** @var EntityViewDisplayInterface[] $displays */
   $displays = EntityViewDisplay::loadMultiple();
   foreach ($displays as $display) {
     $components = $display->getComponents();
@@ -292,7 +298,7 @@ function date_recur_update_8205(&$sandbox): void {
  */
 function date_recur_update_8206(&$sandbox): void {
   // Get widgets implementing the same class as basic widget.
-  /** @var \Drupal\Core\Field\WidgetPluginManager $fieldWidgetPluginManager */
+  /** @var WidgetPluginManager $fieldWidgetPluginManager */
   $basicWidgetClass = DateRecurBasicWidget::class;
   $basicWidgetDerivativeWidgetIds = [];
   $basicWidgetDerivativeWidgetIds[] = 'date_recur_basic_widget';
@@ -305,7 +311,7 @@ function date_recur_update_8206(&$sandbox): void {
   }
 
   // Find form displays using any of the widgets extending basic widget.
-  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface[] $displays */
+  /** @var EntityFormDisplayInterface[] $displays */
   $displays = EntityFormDisplay::loadMultiple();
   foreach ($displays as $display) {
     $updated = 0;
diff --git a/date_recur.module b/date_recur.module
index 674e3be..f7445de 100644
--- a/date_recur.module
+++ b/date_recur.module
@@ -16,7 +16,7 @@ use Drupal\field\FieldStorageConfigInterface;
  * Implements hook_theme().
  */
 function date_recur_theme(array $existing, string $type, string $theme, string $path): array {
-  /** @var \Drupal\date_recur\DateRecurCachedHooks $cachedHooks */
+  /** @var DateRecurCachedHooks $cachedHooks */
   $cachedHooks = \Drupal::classResolver(DateRecurCachedHooks::class);
   return $cachedHooks->hookTheme($existing, $type, $theme, $path);
 }
@@ -25,7 +25,7 @@ function date_recur_theme(array $existing, string $type, string $theme, string $
  * Implements hook_field_info_alter().
  */
 function date_recur_field_info_alter(array &$info): void {
-  /** @var \Drupal\date_recur\DateRecurCachedHooks $cachedHooks */
+  /** @var DateRecurCachedHooks $cachedHooks */
   $cachedHooks = \Drupal::classResolver(DateRecurCachedHooks::class);
   $cachedHooks->fieldInfoAlter($info);
 }
@@ -34,7 +34,7 @@ function date_recur_field_info_alter(array &$info): void {
  * Implements hook_field_views_data().
  */
 function date_recur_field_views_data(FieldStorageConfigInterface $fieldDefinition): array {
-  /** @var \Drupal\date_recur\DateRecurViewsHooks $viewsHooks */
+  /** @var DateRecurViewsHooks $viewsHooks */
   $viewsHooks = \Drupal::classResolver(DateRecurViewsHooks::class);
   return $viewsHooks->fieldViewsData($fieldDefinition);
 }
@@ -43,7 +43,7 @@ function date_recur_field_views_data(FieldStorageConfigInterface $fieldDefinitio
  * Implements hook_views_data().
  */
 function date_recur_views_data(): array {
-  /** @var \Drupal\date_recur\DateRecurViewsHooks $viewsHooks */
+  /** @var DateRecurViewsHooks $viewsHooks */
   $viewsHooks = \Drupal::classResolver(DateRecurViewsHooks::class);
   return $viewsHooks->viewsData();
 }
@@ -52,7 +52,7 @@ function date_recur_views_data(): array {
  * Implements hook_views_data_alter().
  */
 function date_recur_views_data_alter(array &$data): void {
-  /** @var \Drupal\date_recur\DateRecurViewsHooks $viewsHooks */
+  /** @var DateRecurViewsHooks $viewsHooks */
   $viewsHooks = \Drupal::classResolver(DateRecurViewsHooks::class);
   $viewsHooks->viewsDataAlter($data);
 }
diff --git a/src/Annotation/DateRecurInterpreter.php b/src/Annotation/DateRecurInterpreter.php
index 7989bf3..2ba491f 100644
--- a/src/Annotation/DateRecurInterpreter.php
+++ b/src/Annotation/DateRecurInterpreter.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -25,7 +26,7 @@ class DateRecurInterpreter extends Plugin {
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/DateRecurGranularityMap.php b/src/DateRecurGranularityMap.php
index 89878b4..6b230ac 100644
--- a/src/DateRecurGranularityMap.php
+++ b/src/DateRecurGranularityMap.php
@@ -46,7 +46,7 @@ final class DateRecurGranularityMap {
   /**
    * Granularities and their associated labels.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   Labels for granularities keyed by granularity.
    */
   public static function granularityLabels(): array {
@@ -64,7 +64,7 @@ final class DateRecurGranularityMap {
    * @param string $sample
    *   A sample string.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup[]
+   * @return TranslatableMarkup[]
    *   Failed validation messages for granularities keyed by granularity.
    */
   public static function granularityExpectedFormatMessages(string $sample): array {
diff --git a/src/DateRecurHelper.php b/src/DateRecurHelper.php
index f00a103..2a6830d 100644
--- a/src/DateRecurHelper.php
+++ b/src/DateRecurHelper.php
@@ -22,14 +22,14 @@ final class DateRecurHelper implements DateRecurHelperInterface {
   /**
    * The date recur helper.
    *
-   * @var \Drupal\date_recur\DateRecurHelperInterface
+   * @var DateRecurHelperInterface
    */
   protected $dateRecurHelper;
 
   /**
    * DateRecurHelper constructor.
    *
-   * @param \Drupal\date_recur\DateRecurHelperInterface $dateRecurHelper
+   * @param DateRecurHelperInterface $dateRecurHelper
    *   The date recur helper.
    */
   public function __construct(DateRecurHelperInterface $dateRecurHelper) {
@@ -54,7 +54,7 @@ final class DateRecurHelper implements DateRecurHelperInterface {
    */
   public static function create(string $string, \DateTimeInterface $dtStart, \DateTimeInterface $dtStartEnd = NULL) {
     // @todo Get the helper preference from Drupal module config.
-    /** @var \Drupal\date_recur\DateRecurHelperInterface $dateRecurHelper */
+    /** @var DateRecurHelperInterface $dateRecurHelper */
     $dateRecurHelper = RlHelper::createInstance($string, $dtStart, $dtStartEnd);
     return new static($dateRecurHelper);
   }
diff --git a/src/DateRecurHelperInterface.php b/src/DateRecurHelperInterface.php
index 79fb5fc..fb56473 100644
--- a/src/DateRecurHelperInterface.php
+++ b/src/DateRecurHelperInterface.php
@@ -29,7 +29,7 @@ interface DateRecurHelperInterface extends \Iterator {
   /**
    * Get the rules that comprise this helper.
    *
-   * @return \Drupal\date_recur\DateRecurRuleInterface[]
+   * @return DateRecurRuleInterface[]
    *   The rules that comprise this helper.
    */
   public function getRules(): array;
@@ -50,7 +50,7 @@ interface DateRecurHelperInterface extends \Iterator {
    * @param \DateTimeInterface|null $rangeEnd
    *   The end of the range, or never end.
    *
-   * @return \Generator|\Drupal\date_recur\DateRange[]
+   * @return \Generator|DateRange[]
    *   A date range generator.
    */
   public function generateOccurrences(?\DateTimeInterface $rangeStart = NULL, ?\DateTimeInterface $rangeEnd = NULL): \Generator;
@@ -67,7 +67,7 @@ interface DateRecurHelperInterface extends \Iterator {
    * @param int|null $limit
    *   A limit.
    *
-   * @return \Drupal\date_recur\DateRange[]
+   * @return DateRange[]
    *   The occurrences.
    *
    * @throws \InvalidArgumentException
diff --git a/src/DateRecurNonRecurringHelper.php b/src/DateRecurNonRecurringHelper.php
index 724100d..233da75 100644
--- a/src/DateRecurNonRecurringHelper.php
+++ b/src/DateRecurNonRecurringHelper.php
@@ -12,7 +12,7 @@ class DateRecurNonRecurringHelper implements DateRecurHelperInterface {
   /**
    * The occurrences.
    *
-   * @var \Drupal\date_recur\DateRange[]
+   * @var DateRange[]
    */
   protected $occurrences = [];
 
diff --git a/src/DateRecurOccurrences.php b/src/DateRecurOccurrences.php
index bf82312..36b2a7f 100644
--- a/src/DateRecurOccurrences.php
+++ b/src/DateRecurOccurrences.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur;
 
+use Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -42,41 +43,41 @@ class DateRecurOccurrences implements EventSubscriberInterface, EntityTypeListen
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * Manages data type plugins.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
    * DateRecurOccurrences constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   Manages data type plugins.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(Connection $database, EntityFieldManagerInterface $entityFieldManager, TypedDataManagerInterface $typedDataManager, EntityTypeManagerInterface $entityTypeManager) {
@@ -89,11 +90,11 @@ class DateRecurOccurrences implements EventSubscriberInterface, EntityTypeListen
   /**
    * Respond to a field value insertion or update.
    *
-   * @param \Drupal\date_recur\Event\DateRecurValueEvent $event
+   * @param DateRecurValueEvent $event
    *   The date recur event.
    */
   public function onSave(DateRecurValueEvent $event): void {
-    /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem[]|\Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList $list */
+    /** @var DateRecurItem[]|DateRecurFieldItemList $list */
     $list = $event->getField();
     $fieldDefinition = $list->getFieldDefinition();
     $tableName = static::getOccurrenceCacheStorageTableName($fieldDefinition->getFieldStorageDefinition());
@@ -116,7 +117,7 @@ class DateRecurOccurrences implements EventSubscriberInterface, EntityTypeListen
   /**
    * Create table rows from occurrences for a single field value.
    *
-   * @param \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item
+   * @param DateRecurItem $item
    *   Date recur field item.
    * @param string $tableName
    *   The name of table to store occurrences.
@@ -170,7 +171,7 @@ class DateRecurOccurrences implements EventSubscriberInterface, EntityTypeListen
   /**
    * Respond to a entity deletion.
    *
-   * @param \Drupal\date_recur\Event\DateRecurValueEvent $event
+   * @param DateRecurValueEvent $event
    *   The date recur event.
    */
   public function onEntityDelete(DateRecurValueEvent $event): void {
@@ -188,7 +189,7 @@ class DateRecurOccurrences implements EventSubscriberInterface, EntityTypeListen
   /**
    * Respond to a entity revision deletion.
    *
-   * @param \Drupal\date_recur\Event\DateRecurValueEvent $event
+   * @param DateRecurValueEvent $event
    *   The date recur event.
    */
   public function onEntityRevisionDelete(DateRecurValueEvent $event): void {
@@ -273,10 +274,10 @@ class DateRecurOccurrences implements EventSubscriberInterface, EntityTypeListen
   /**
    * Get all occurrences needing to be stored.
    *
-   * @param \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item
+   * @param DateRecurItem $item
    *   The date recur field item.
    *
-   * @return \Drupal\date_recur\DateRange[]
+   * @return DateRange[]
    *   Date range objects for storage.
    */
   protected function getOccurrencesForCacheStorage(DateRecurItem $item): array {
@@ -291,7 +292,7 @@ class DateRecurOccurrences implements EventSubscriberInterface, EntityTypeListen
   /**
    * Creates an occurrence table.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $fieldDefinition
+   * @param FieldStorageDefinitionInterface $fieldDefinition
    *   The field definition.
    */
   protected function createOccurrenceTable(FieldStorageDefinitionInterface $fieldDefinition): void {
@@ -376,7 +377,7 @@ class DateRecurOccurrences implements EventSubscriberInterface, EntityTypeListen
    *
    * @param \DateTimeInterface $date
    *   A date time object.
-   * @param \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item
+   * @param DateRecurItem $item
    *   The date recur field item.
    *
    * @return string
@@ -398,7 +399,7 @@ class DateRecurOccurrences implements EventSubscriberInterface, EntityTypeListen
   /**
    * Determines if a field is date recur or subclasses date recur.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $fieldDefinition
+   * @param FieldStorageDefinitionInterface $fieldDefinition
    *   A field definition.
    *
    * @return bool
@@ -413,10 +414,10 @@ class DateRecurOccurrences implements EventSubscriberInterface, EntityTypeListen
   /**
    * Get field storage for date recur base fields for an entity type.
    *
-   * @param \Drupal\Core\Entity\ContentEntityTypeInterface $entityType
+   * @param ContentEntityTypeInterface $entityType
    *   An entity type.
    *
-   * @return \Drupal\Core\Field\FieldStorageDefinitionInterface[]
+   * @return FieldStorageDefinitionInterface[]
    *   An array of storage definitions for base fields for an entity type.
    */
   protected function getBaseFieldStorages(ContentEntityTypeInterface $entityType): array {
@@ -436,7 +437,7 @@ class DateRecurOccurrences implements EventSubscriberInterface, EntityTypeListen
   /**
    * Get the name of the table containing occurrences for a field.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $fieldDefinition
+   * @param FieldStorageDefinitionInterface $fieldDefinition
    *   The field definition.
    *
    * @return string
diff --git a/src/DateRecurPartGrid.php b/src/DateRecurPartGrid.php
index 1d783e0..53f513d 100644
--- a/src/DateRecurPartGrid.php
+++ b/src/DateRecurPartGrid.php
@@ -69,7 +69,7 @@ class DateRecurPartGrid {
    * @return bool
    *   Whether a part is supported.
    *
-   * @throws \Drupal\date_recur\Exception\DateRecurRulePartIncompatible
+   * @throws DateRecurRulePartIncompatible
    *   Part is incompatible with frequency.
    */
   public function isPartAllowed(string $frequency, string $part): bool {
diff --git a/src/DateRecurViewsHooks.php b/src/DateRecurViewsHooks.php
index 19503e8..d34dccc 100644
--- a/src/DateRecurViewsHooks.php
+++ b/src/DateRecurViewsHooks.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur;
 
+use Drupal\views\EntityViewsDataInterface;
+use Drupal\Core\Entity\Sql\DefaultTableMapping;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -32,50 +34,50 @@ class DateRecurViewsHooks implements ContainerInjectionInterface {
   /**
    * The active database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * Module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The typed data manager.
    *
-   * @var \Drupal\Core\TypedData\TypedDataManagerInterface
+   * @var TypedDataManagerInterface
    */
   protected $typedDataManager;
 
   /**
    * DateRecurViewsHooks constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The active database connection.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   Module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\TypedData\TypedDataManagerInterface $typedDataManager
+   * @param TypedDataManagerInterface $typedDataManager
    *   The typed data manager.
    */
   public function __construct(Connection $connection, ModuleHandlerInterface $moduleHandler, EntityTypeManagerInterface $entityTypeManager, EntityFieldManagerInterface $entityFieldManager, TypedDataManagerInterface $typedDataManager) {
@@ -110,11 +112,11 @@ class DateRecurViewsHooks implements ContainerInjectionInterface {
     $data = [];
     foreach ($allFields as $entityTypeId => $fields) {
       $entityType = $this->entityTypeManager->getDefinition($entityTypeId);
-      /** @var \Drupal\views\EntityViewsDataInterface $viewsData */
+      /** @var EntityViewsDataInterface $viewsData */
       $viewsData = $this->entityTypeManager->getHandler($entityType->id(), 'views_data');
       $entityViewsTable = $viewsData->getViewsTableForEntityType($entityType);
 
-      /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $fields */
+      /** @var FieldStorageDefinitionInterface[] $fields */
       foreach ($fields as $fieldId => $field) {
         $fieldLabel = $this->getFieldLabel($field->getTargetEntityTypeId(), $fieldId);
         $fieldName = $field->getName();
@@ -205,12 +207,12 @@ class DateRecurViewsHooks implements ContainerInjectionInterface {
     // it supports base fields.
     $allFields = $this->getDateRecurFields();
     foreach ($allFields as $entityTypeId => $fields) {
-      /** @var \Drupal\Core\Entity\Sql\SqlEntityStorageInterface $entityStorage */
+      /** @var SqlEntityStorageInterface $entityStorage */
       $entityStorage = $this->entityTypeManager->getStorage($entityTypeId);
-      /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $tableMapping */
+      /** @var DefaultTableMapping $tableMapping */
       $tableMapping = $entityStorage->getTableMapping($fields);
 
-      /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface[] $fields */
+      /** @var FieldStorageDefinitionInterface[] $fields */
       foreach ($fields as $fieldId => $fieldStorage) {
         if (!$fieldStorage instanceof BaseFieldDefinition) {
           continue;
@@ -241,9 +243,9 @@ class DateRecurViewsHooks implements ContainerInjectionInterface {
 
     $entityTypeId = $fieldDefinition->getTargetEntityTypeId();
     $entityType = $this->entityTypeManager->getDefinition($entityTypeId);
-    /** @var \Drupal\Core\Entity\Sql\SqlEntityStorageInterface $entityStorage */
+    /** @var SqlEntityStorageInterface $entityStorage */
     $entityStorage = $this->entityTypeManager->getStorage($entityTypeId);
-    /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $tableMapping */
+    /** @var DefaultTableMapping $tableMapping */
     $tableMapping = $entityStorage->getTableMapping();
 
     $fieldName = $fieldDefinition->getName();
@@ -301,7 +303,7 @@ class DateRecurViewsHooks implements ContainerInjectionInterface {
     // Change the title for all plugins provided by
     // \datetime_range_field_views_data().
     foreach ($fieldTable as $key => &$definitions) {
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup|string|null $originalTitle */
+      /** @var TranslatableMarkup|string|null $originalTitle */
       $originalTitle = $definitions['title'] ?? '';
       $tArgs = $originalTitle instanceof TranslatableMarkup ? $originalTitle->getArguments() : [];
       $tArgs['@field_label'] = $fieldLabel;
@@ -393,7 +395,7 @@ class DateRecurViewsHooks implements ContainerInjectionInterface {
   /**
    * Get the views definition for the field, as defined by datetime_range.
    *
-   * @param \Drupal\field\FieldStorageConfigInterface $fieldDefinition
+   * @param FieldStorageConfigInterface $fieldDefinition
    *   A field storage definition.
    *
    * @return array
@@ -417,7 +419,7 @@ class DateRecurViewsHooks implements ContainerInjectionInterface {
   /**
    * Get date format of field storage.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $fieldDefinition
+   * @param FieldStorageDefinitionInterface $fieldDefinition
    *   A field definition.
    *
    * @return string
diff --git a/src/Entity/DateRecurInterpreter.php b/src/Entity/DateRecurInterpreter.php
index 9a9d1fa..6307412 100644
--- a/src/Entity/DateRecurInterpreter.php
+++ b/src/Entity/DateRecurInterpreter.php
@@ -77,14 +77,14 @@ class DateRecurInterpreter extends ConfigEntityBase implements DateRecurInterpre
   /**
    * The plugin collection.
    *
-   * @var \Drupal\date_recur\Plugin\DateRecurInterpreterPluginCollection|null
+   * @var DateRecurInterpreterPluginCollection|null
    */
   protected $pluginCollection;
 
   /**
    * Get the plugin collection.
    *
-   * @return \Drupal\Component\Plugin\LazyPluginCollection
+   * @return LazyPluginCollection
    *   The plugin collection.
    */
   protected function getPluginCollection(): LazyPluginCollection {
diff --git a/src/Entity/DateRecurInterpreterInterface.php b/src/Entity/DateRecurInterpreterInterface.php
index 454651e..96dfed4 100644
--- a/src/Entity/DateRecurInterpreterInterface.php
+++ b/src/Entity/DateRecurInterpreterInterface.php
@@ -16,7 +16,7 @@ interface DateRecurInterpreterInterface extends ConfigEntityInterface, EntityWit
   /**
    * Get the plugin.
    *
-   * @return \Drupal\date_recur\Plugin\DateRecurInterpreterPluginInterface
+   * @return DateRecurInterpreterPluginInterface
    *   The plugin.
    */
   public function getPlugin(): DateRecurInterpreterPluginInterface;
diff --git a/src/Event/DateRecurValueEvent.php b/src/Event/DateRecurValueEvent.php
index 0e8e937..7e4c28c 100644
--- a/src/Event/DateRecurValueEvent.php
+++ b/src/Event/DateRecurValueEvent.php
@@ -4,8 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur\Event;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Event dispatched when an entity containing a date recur field is modified.
@@ -15,7 +15,7 @@ class DateRecurValueEvent extends Event {
   /**
    * The field list.
    *
-   * @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList
+   * @var DateRecurFieldItemList
    */
   protected $field;
 
@@ -29,7 +29,7 @@ class DateRecurValueEvent extends Event {
   /**
    * DateRecurValueEvent constructor.
    *
-   * @param \Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList $field
+   * @param DateRecurFieldItemList $field
    *   The date recur field item list.
    * @param bool $insert
    *   Specifies whether the entity was created.
@@ -44,7 +44,7 @@ class DateRecurValueEvent extends Event {
    *
    * The field cannot be changed because the entity has already been saved.
    *
-   * @return \Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList
+   * @return DateRecurFieldItemList
    *   The date recur field item list.
    */
   public function getField(): DateRecurFieldItemList {
diff --git a/src/Form/DateRecurInterpreterEditForm.php b/src/Form/DateRecurInterpreterEditForm.php
index 61d9e50..4fd1806 100644
--- a/src/Form/DateRecurInterpreterEditForm.php
+++ b/src/Form/DateRecurInterpreterEditForm.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur\Form;
 
+use Drupal\date_recur\Entity\DateRecurInterpreter;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\SubformState;
@@ -14,30 +15,30 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 /**
  * Edit form for date recur interpreter entities.
  *
- * @method \Drupal\date_recur\Entity\DateRecurInterpreter getEntity()
+ * @method DateRecurInterpreter getEntity()
  */
 class DateRecurInterpreterEditForm extends EntityForm {
 
   /**
    * The plugin form factory.
    *
-   * @var \Drupal\Core\Plugin\PluginFormFactoryInterface
+   * @var PluginFormFactoryInterface
    */
   protected $pluginFormFactory;
 
   /**
    * Date recur interpreter plugin manager.
    *
-   * @var \Drupal\date_recur\Plugin\DateRecurInterpreterManagerInterface
+   * @var DateRecurInterpreterManagerInterface
    */
   protected $dateRecurInterpreterPluginManager;
 
   /**
    * Creates an instance of WorkflowStateEditForm.
    *
-   * @param \Drupal\Core\Plugin\PluginFormFactoryInterface $pluginFormFactory
+   * @param PluginFormFactoryInterface $pluginFormFactory
    *   The plugin form factory.
-   * @param \Drupal\date_recur\Plugin\DateRecurInterpreterManagerInterface $dateRecurInterpreterPluginManager
+   * @param DateRecurInterpreterManagerInterface $dateRecurInterpreterPluginManager
    *   Date recur interpreter plugin manager.
    */
   public function __construct(PluginFormFactoryInterface $pluginFormFactory, DateRecurInterpreterManagerInterface $dateRecurInterpreterPluginManager) {
diff --git a/src/Plugin/DateRecurInterpreter/RlInterpreter.php b/src/Plugin/DateRecurInterpreter/RlInterpreter.php
index 88752b1..25c0eaf 100644
--- a/src/Plugin/DateRecurInterpreter/RlInterpreter.php
+++ b/src/Plugin/DateRecurInterpreter/RlInterpreter.php
@@ -34,14 +34,14 @@ class RlInterpreter extends DateRecurInterpreterPluginBase implements ContainerF
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The date format entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dateFormatStorage;
 
@@ -54,9 +54,9 @@ class RlInterpreter extends DateRecurInterpreterPluginBase implements ContainerF
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $dateFormatStorage
+   * @param EntityStorageInterface $dateFormatStorage
    *   The date format storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DateFormatterInterface $dateFormatter, EntityStorageInterface $dateFormatStorage) {
diff --git a/src/Plugin/DateRecurInterpreterPluginCollection.php b/src/Plugin/DateRecurInterpreterPluginCollection.php
index ed15a58..037ea7a 100644
--- a/src/Plugin/DateRecurInterpreterPluginCollection.php
+++ b/src/Plugin/DateRecurInterpreterPluginCollection.php
@@ -22,7 +22,7 @@ class DateRecurInterpreterPluginCollection extends DefaultSingleLazyPluginCollec
   /**
    * Constructs a new DateRecurInterpreterPluginCollection.
    *
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $manager
+   * @param PluginManagerInterface $manager
    *   The manager to be used for instantiating plugins.
    * @param string $instance_id
    *   The ID of the plugin instance.
diff --git a/src/Plugin/DateRecurInterpreterPluginInterface.php b/src/Plugin/DateRecurInterpreterPluginInterface.php
index ff72f8e..57322b7 100644
--- a/src/Plugin/DateRecurInterpreterPluginInterface.php
+++ b/src/Plugin/DateRecurInterpreterPluginInterface.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur\Plugin;
 
+use Drupal\date_recur\DateRecurRuleInterface;
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\DependentPluginInterface;
 use Drupal\Core\Plugin\PluginWithFormsInterface;
@@ -16,7 +17,7 @@ interface DateRecurInterpreterPluginInterface extends ConfigurableInterface, Dep
   /**
    * Interpret a set of rules in a language.
    *
-   * @param \Drupal\date_recur\DateRecurRuleInterface[] $rules
+   * @param DateRecurRuleInterface[] $rules
    *   The rules.
    * @param string $language
    *   The two-letter language code.
diff --git a/src/Plugin/Field/DateRecurDateTimeComputed.php b/src/Plugin/Field/DateRecurDateTimeComputed.php
index 496983a..5fa431f 100644
--- a/src/Plugin/Field/DateRecurDateTimeComputed.php
+++ b/src/Plugin/Field/DateRecurDateTimeComputed.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur\Plugin\Field;
 
+use Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem;
 use Drupal\datetime\DateTimeComputed;
 
 /**
@@ -20,7 +21,7 @@ class DateRecurDateTimeComputed extends DateTimeComputed {
     $hasValueBefore = isset($this->date);
     parent::getValue();
     if (!$hasValueBefore && isset($this->date)) {
-      /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item */
+      /** @var DateRecurItem $item */
       $item = $this->getParent();
       $this->date->setTimezone(new \DateTimeZone((string) $item->timezone));
     }
diff --git a/src/Plugin/Field/FieldFormatter/DateRecurBasicFormatter.php b/src/Plugin/Field/FieldFormatter/DateRecurBasicFormatter.php
index e146855..e952e9d 100644
--- a/src/Plugin/Field/FieldFormatter/DateRecurBasicFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/DateRecurBasicFormatter.php
@@ -41,7 +41,7 @@ class DateRecurBasicFormatter extends DateRangeDefaultFormatter {
   /**
    * The date recur interpreter entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $dateRecurInterpreterStorage;
 
@@ -59,7 +59,7 @@ class DateRecurBasicFormatter extends DateRangeDefaultFormatter {
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -69,11 +69,11 @@ class DateRecurBasicFormatter extends DateRangeDefaultFormatter {
    *   The view mode.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $dateFormatter
+   * @param DateFormatterInterface $dateFormatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $dateFormatStorage
+   * @param EntityStorageInterface $dateFormatStorage
    *   The date format entity storage.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $dateRecurInterpreterStorage
+   * @param EntityStorageInterface $dateRecurInterpreterStorage
    *   The date recur interpreter entity storage.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, DateFormatterInterface $dateFormatter, EntityStorageInterface $dateFormatStorage, EntityStorageInterface $dateRecurInterpreterStorage) {
@@ -228,7 +228,7 @@ class DateRecurBasicFormatter extends DateRangeDefaultFormatter {
    *
    * @param array $element
    *   The element being processed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -247,7 +247,7 @@ class DateRecurBasicFormatter extends DateRangeDefaultFormatter {
    *
    * @param array $element
    *   The element being processed.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
@@ -328,7 +328,7 @@ class DateRecurBasicFormatter extends DateRangeDefaultFormatter {
   /**
    * Generate the output appropriate for a field item.
    *
-   * @param \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item
+   * @param DateRecurItem $item
    *   A field item.
    * @param int $maxOccurrences
    *   Maximum number of occurrences to show for this field item.
@@ -344,7 +344,7 @@ class DateRecurBasicFormatter extends DateRangeDefaultFormatter {
     ];
 
     $startDate = $item->start_date;
-    /** @var \Drupal\Core\Datetime\DrupalDateTime|null $endDate */
+    /** @var DrupalDateTime|null $endDate */
     $endDate = $item->end_date ?? $startDate;
     if (!$startDate || !$endDate) {
       return $build;
@@ -386,9 +386,9 @@ class DateRecurBasicFormatter extends DateRangeDefaultFormatter {
   /**
    * Builds a date range suitable for rendering.
    *
-   * @param \Drupal\Core\Datetime\DrupalDateTime $startDate
+   * @param DrupalDateTime $startDate
    *   The start date.
-   * @param \Drupal\Core\Datetime\DrupalDateTime $endDate
+   * @param DrupalDateTime $endDate
    *   The end date.
    * @param bool $isOccurrence
    *   Whether the range is an occurrence of a repeating value.
@@ -436,12 +436,12 @@ class DateRecurBasicFormatter extends DateRangeDefaultFormatter {
    * Occurrences are abstracted out to make it easier for extending formatters
    * to change.
    *
-   * @param \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item
+   * @param DateRecurItem $item
    *   A field item.
    * @param int $maxOccurrences
    *   Maximum number of occurrences to render.
    *
-   * @return \Drupal\date_recur\DateRange[]
+   * @return DateRange[]
    *   A render array.
    */
   protected function getOccurrences(DateRecurItem $item, $maxOccurrences): array {
diff --git a/src/Plugin/Field/FieldType/DateRecurFieldItemList.php b/src/Plugin/Field/FieldType/DateRecurFieldItemList.php
index a7c560c..dbe60b4 100644
--- a/src/Plugin/Field/FieldType/DateRecurFieldItemList.php
+++ b/src/Plugin/Field/FieldType/DateRecurFieldItemList.php
@@ -24,7 +24,7 @@ class DateRecurFieldItemList extends DateRangeFieldItemList {
   /**
    * An event dispatcher, primarily for unit testing purposes.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface|null
+   * @var EventDispatcherInterface|null
    */
   protected $eventDispatcher = NULL;
 
@@ -34,7 +34,7 @@ class DateRecurFieldItemList extends DateRangeFieldItemList {
   public function postSave($update): bool {
     parent::postSave($update);
     $event = new DateRecurValueEvent($this, !$update);
-    $this->getDispatcher()->dispatch(DateRecurEvents::FIELD_VALUE_SAVE, $event);
+    $this->getDispatcher()->dispatch($event, DateRecurEvents::FIELD_VALUE_SAVE);
     return FALSE;
   }
 
@@ -44,7 +44,7 @@ class DateRecurFieldItemList extends DateRangeFieldItemList {
   public function delete(): void {
     parent::delete();
     $event = new DateRecurValueEvent($this, FALSE);
-    $this->getDispatcher()->dispatch(DateRecurEvents::FIELD_ENTITY_DELETE, $event);
+    $this->getDispatcher()->dispatch($event, DateRecurEvents::FIELD_ENTITY_DELETE);
   }
 
   /**
@@ -53,13 +53,13 @@ class DateRecurFieldItemList extends DateRangeFieldItemList {
   public function deleteRevision(): void {
     parent::deleteRevision();
     $event = new DateRecurValueEvent($this, FALSE);
-    $this->getDispatcher()->dispatch(DateRecurEvents::FIELD_REVISION_DELETE, $event);
+    $this->getDispatcher()->dispatch($event, DateRecurEvents::FIELD_REVISION_DELETE);
   }
 
   /**
    * Get the event dispatcher.
    *
-   * @return \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @return EventDispatcherInterface
    *   The event dispatcher.
    */
   protected function getDispatcher(): EventDispatcherInterface {
@@ -229,7 +229,7 @@ class DateRecurFieldItemList extends DateRangeFieldItemList {
   /**
    * Set the event dispatcher.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function setEventDispatcher(EventDispatcherInterface $eventDispatcher): void {
@@ -239,7 +239,7 @@ class DateRecurFieldItemList extends DateRangeFieldItemList {
   /**
    * Get the parts grid for this field.
    *
-   * @return \Drupal\date_recur\DateRecurPartGrid
+   * @return DateRecurPartGrid
    *   The parts grid for this field.
    */
   public function getPartGrid(): DateRecurPartGrid {
diff --git a/src/Plugin/Field/FieldType/DateRecurItem.php b/src/Plugin/Field/FieldType/DateRecurItem.php
index 776bc06..070d8c9 100644
--- a/src/Plugin/Field/FieldType/DateRecurItem.php
+++ b/src/Plugin/Field/FieldType/DateRecurItem.php
@@ -37,8 +37,8 @@ use Drupal\datetime_range\Plugin\Field\FieldType\DateRangeItem;
  *   }
  * )
  *
- * @property \Drupal\Core\Datetime\DrupalDateTime|null $start_date
- * @property \Drupal\Core\Datetime\DrupalDateTime|null $end_date
+ * @property DrupalDateTime|null $start_date
+ * @property DrupalDateTime|null $end_date
  * @property string|null $timezone
  * @property string|null $rrule
  */
@@ -73,7 +73,7 @@ class DateRecurItem extends DateRangeItem {
   /**
    * The date recur helper.
    *
-   * @var \Drupal\date_recur\DateRecurHelperInterface|null
+   * @var DateRecurHelperInterface|null
    */
   protected $helper;
 
@@ -83,10 +83,10 @@ class DateRecurItem extends DateRangeItem {
   public static function propertyDefinitions(FieldStorageDefinitionInterface $field_definition): array {
     $properties = parent::propertyDefinitions($field_definition);
 
-    /** @var \Drupal\Core\TypedData\DataDefinition $startDateProperty */
+    /** @var DataDefinition $startDateProperty */
     $startDateProperty = $properties['start_date'];
     $startDateProperty->setClass(DateRecurDateTimeComputed::class);
-    /** @var \Drupal\Core\TypedData\DataDefinition $endDateProperty */
+    /** @var DataDefinition $endDateProperty */
     $endDateProperty = $properties['end_date'];
     $endDateProperty->setClass(DateRecurDateTimeComputed::class);
 
@@ -309,7 +309,7 @@ class DateRecurItem extends DateRangeItem {
    *
    * @param array $element
    *   An associative array containing the structure of the element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -407,10 +407,10 @@ class DateRecurItem extends DateRangeItem {
    *
    * Will always return a helper even if field value is non-recurring.
    *
-   * @return \Drupal\date_recur\DateRecurHelperInterface
+   * @return DateRecurHelperInterface
    *   The helper.
    *
-   * @throws \Drupal\date_recur\Exception\DateRecurHelperArgumentException
+   * @throws DateRecurHelperArgumentException
    *   If a helper could not be created due to faulty field value.
    */
   public function getHelper(): DateRecurHelperInterface {
diff --git a/src/Plugin/Field/FieldWidget/DateRecurBasicWidget.php b/src/Plugin/Field/FieldWidget/DateRecurBasicWidget.php
index 710417b..68734ed 100644
--- a/src/Plugin/Field/FieldWidget/DateRecurBasicWidget.php
+++ b/src/Plugin/Field/FieldWidget/DateRecurBasicWidget.php
@@ -100,7 +100,7 @@ class DateRecurBasicWidget extends DateRangeDefaultWidget {
    *   generic form element.
    * @param array|false $input
    *   Input, if any.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ -154,16 +154,16 @@ class DateRecurBasicWidget extends DateRangeDefaultWidget {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form structure.
    */
   public function validateRrule(array &$element, FormStateInterface $form_state, array &$complete_form): void {
     $input = NestedArray::getValue($form_state->getValues(), $element['#parents']);
-    /** @var \Drupal\Core\Datetime\DrupalDateTime|array|null $startDate */
+    /** @var DrupalDateTime|array|null $startDate */
     $startDate = $input['value'];
-    /** @var \Drupal\Core\Datetime\DrupalDateTime|array|null $startDateEnd */
+    /** @var DrupalDateTime|array|null $startDateEnd */
     $startDateEnd = $input['end_value'];
     if (is_array($startDate) || is_array($startDateEnd)) {
       // Dates are an array if invalid input was submitted (e.g date:
@@ -239,7 +239,7 @@ class DateRecurBasicWidget extends DateRangeDefaultWidget {
    *
    * @param array $element
    *   The element.
-   * @param \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item
+   * @param DateRecurItem $item
    *   The date recur field item.
    */
   protected function createDateRecurDefaultValue(array &$element, DateRecurItem $item): void {
diff --git a/src/Plugin/Validation/Constraint/DateRecurRulePartConstraintValidator.php b/src/Plugin/Validation/Constraint/DateRecurRulePartConstraintValidator.php
index 00ec5b3..f11260b 100644
--- a/src/Plugin/Validation/Constraint/DateRecurRulePartConstraintValidator.php
+++ b/src/Plugin/Validation/Constraint/DateRecurRulePartConstraintValidator.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur\Plugin\Validation\Constraint;
 
+use Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList;
+use Drupal\date_recur\DateRecurRuleInterface;
 use Drupal\date_recur\DateRecurHelper;
 use Drupal\date_recur\DateRecurRruleMap;
 use Drupal\date_recur\Exception\DateRecurRulePartIncompatible;
@@ -36,7 +38,7 @@ class DateRecurRulePartConstraintValidator extends ConstraintValidator {
   public function validate($value, Constraint $constraint): void {
     assert($value instanceof DateRecurItem);
     assert($constraint instanceof DateRecurRulePartConstraint);
-    /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList $fieldList */
+    /** @var DateRecurFieldItemList $fieldList */
     $fieldList = $value->getParent();
     $grid = $fieldList->getPartGrid();
 
@@ -56,7 +58,7 @@ class DateRecurRulePartConstraintValidator extends ConstraintValidator {
     }
 
     foreach ($helper->getRules() as $rule) {
-      /** @var \Drupal\date_recur\DateRecurRuleInterface $rule */
+      /** @var DateRecurRuleInterface $rule */
       $frequency = $rule->getFrequency();
       // Check if a frequency is supported.
       if (!$grid->isFrequencyAllowed($frequency)) {
diff --git a/src/Plugin/views/field/DateRecurDate.php b/src/Plugin/views/field/DateRecurDate.php
index 9225d81..cb7dd5a 100644
--- a/src/Plugin/views/field/DateRecurDate.php
+++ b/src/Plugin/views/field/DateRecurDate.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur\Plugin\views\field;
 
+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\views\Plugin\views\field\Date;
 use Drupal\views\ResultRow;
@@ -16,7 +17,7 @@ use Drupal\views\ResultRow;
  * @ingroup views_field_handlers
  *
  * @ViewsField("date_recur_date")
- * @property \Drupal\views\Plugin\views\query\Sql $query
+ * @property Sql $query
  */
 class DateRecurDate extends Date {
 
diff --git a/src/Plugin/views/filter/DateRecurFilter.php b/src/Plugin/views/filter/DateRecurFilter.php
index 18bff2f..aa14793 100644
--- a/src/Plugin/views/filter/DateRecurFilter.php
+++ b/src/Plugin/views/filter/DateRecurFilter.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\date_recur\Plugin\views\filter;
 
+use Drupal\views\Plugin\views\query\Sql;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -27,21 +28,21 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
  * @ingroup views_filter_handlers
  *
  * @ViewsFilter("date_recur_occurrences_filter")
- * @property \Drupal\views\Plugin\views\query\Sql $query
+ * @property Sql $query
  */
 class DateRecurFilter extends FilterPluginBase {
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -62,7 +63,7 @@ class DateRecurFilter extends FilterPluginBase {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
@@ -75,11 +76,11 @@ class DateRecurFilter extends FilterPluginBase {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   The current user.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database, EntityFieldManagerInterface $entityFieldManager, AccountInterface $currentUser) {
@@ -221,14 +222,14 @@ class DateRecurFilter extends FilterPluginBase {
     $this->options['value_granularity'] = $form_state->getValue(['options', 'value_granularity']);
 
     $utc = new \DateTimeZone('UTC');
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $min|null */
+    /** @var DrupalDateTime $min |null */
     $min = $form_state->getValue(['options', 'value_minimum']);
     if ($min) {
       $min->setTimezone($utc);
     }
     $this->options['value_min'] = $min ? $min->format(\DATE_ISO8601) : NULL;
 
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $max|null */
+    /** @var DrupalDateTime $max |null */
     $max = $form_state->getValue(['options', 'value_maximum']);
     if ($max) {
       $max->setTimezone($utc);
@@ -241,7 +242,7 @@ class DateRecurFilter extends FilterPluginBase {
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateValue(array &$element, FormStateInterface $form_state): void {
diff --git a/src/Rl/RlHelper.php b/src/Rl/RlHelper.php
index d53e095..97cd8c1 100644
--- a/src/Rl/RlHelper.php
+++ b/src/Rl/RlHelper.php
@@ -21,7 +21,7 @@ class RlHelper implements DateRecurHelperInterface {
   /**
    * The RRULE set.
    *
-   * @var \RRule\RSet
+   * @var RSet
    */
   protected $set;
 
@@ -252,7 +252,7 @@ class RlHelper implements DateRecurHelperInterface {
   /**
    * Get the set.
    *
-   * @return \RRule\RSet
+   * @return RSet
    *   Returns the set.
    *
    * @internal this method is specific to rlanvin/rrule implementation only.
diff --git a/tests/modules/date_recur_entity_test/src/Entity/DrEntityTestSingleCardinality.php b/tests/modules/date_recur_entity_test/src/Entity/DrEntityTestSingleCardinality.php
index 356a8dc..92f57f9 100644
--- a/tests/modules/date_recur_entity_test/src/Entity/DrEntityTestSingleCardinality.php
+++ b/tests/modules/date_recur_entity_test/src/Entity/DrEntityTestSingleCardinality.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\date_recur_entity_test\Entity;
 
+use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Entity\EntityTypeInterface;
 
 /**
@@ -49,7 +50,7 @@ class DrEntityTestSingleCardinality extends DrEntityTest {
    * {@inheritdoc}
    */
   public static function baseFieldDefinitions(EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $fields */
+    /** @var BaseFieldDefinition[] $fields */
     $fields = parent::baseFieldDefinitions($entity_type);
 
     $fields['dr']->setCardinality(1);
diff --git a/tests/src/Functional/DateRecurBasicWidgetTest.php b/tests/src/Functional/DateRecurBasicWidgetTest.php
index 530933b..e1e134d 100644
--- a/tests/src/Functional/DateRecurBasicWidgetTest.php
+++ b/tests/src/Functional/DateRecurBasicWidgetTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\date_recur\Functional;
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Field\Entity\BaseFieldOverride;
 use Drupal\Core\Url;
 use Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem;
@@ -192,7 +193,7 @@ class DateRecurBasicWidgetTest extends BrowserTestBase {
    * Tests default values appear in widget.
    */
   public function testDefaultValues() {
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
+    /** @var EntityFieldManagerInterface $entityFieldManager */
     $entityFieldManager = \Drupal::service('entity_field.manager');
     $baseFields = $entityFieldManager->getBaseFieldDefinitions('dr_entity_test');
     $baseFieldOverride = BaseFieldOverride::createFromBaseFieldDefinition($baseFields['dr'], 'dr_entity_test');
@@ -367,7 +368,7 @@ class DateRecurBasicWidgetTest extends BrowserTestBase {
   /**
    * Get last saved Dr Entity Test entity.
    *
-   * @return \Drupal\date_recur_entity_test\Entity\DrEntityTest|null
+   * @return DrEntityTest|null
    *   The entity or null if none exist.
    */
   protected function getLastSavedDrEntityTest() {
diff --git a/tests/src/Functional/DateRecurFieldSettingsTest.php b/tests/src/Functional/DateRecurFieldSettingsTest.php
index f6ba54e..261c4dc 100644
--- a/tests/src/Functional/DateRecurFieldSettingsTest.php
+++ b/tests/src/Functional/DateRecurFieldSettingsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\date_recur\Functional;
 
+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\Core\Url;
 use Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem;
 use Drupal\field\Entity\FieldConfig;
@@ -37,7 +38,7 @@ class DateRecurFieldSettingsTest extends WebDriverTestBase {
   /**
    * A field config for testing.
    *
-   * @var \Drupal\Core\Field\FieldConfigInterface
+   * @var FieldConfigInterface
    */
   protected $fieldConfig;
 
diff --git a/tests/src/Kernel/DateRecurBasicFormatterTest.php b/tests/src/Kernel/DateRecurBasicFormatterTest.php
index ebc82ee..40d5d4d 100644
--- a/tests/src/Kernel/DateRecurBasicFormatterTest.php
+++ b/tests/src/Kernel/DateRecurBasicFormatterTest.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\date_recur\Kernel;
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Field\FormatterPluginManager;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\date_recur\Plugin\Field\FieldFormatter\DateRecurBasicFormatter;
+use Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList;
 use Drupal\Core\Datetime\Entity\DateFormat;
 use Drupal\date_recur\Entity\DateRecurInterpreter;
 use Drupal\date_recur_entity_test\Entity\DrEntityTest;
@@ -34,14 +39,14 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
   /**
    * A date format for testing.
    *
-   * @var \Drupal\Core\Datetime\Entity\DateFormat
+   * @var DateFormat
    */
   protected $dateFormat;
 
   /**
    * An interpreter for testing.
    *
-   * @var \Drupal\date_recur\Entity\DateRecurInterpreter
+   * @var DateRecurInterpreter
    */
   protected $interpreter;
 
@@ -193,7 +198,7 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
    * Tests setting summary.
    */
   public function testFormatterSettingsSummary() {
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $efm */
+    /** @var EntityFieldManagerInterface $efm */
     $efm = $this->container->get('entity_field.manager');
     $definitions = $efm->getBaseFieldDefinitions('dr_entity_test');
 
@@ -219,7 +224,7 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
       'view_mode' => 'full',
     ];
 
-    /** @var \Drupal\Core\Field\FormatterPluginManager $fieldFormatterManager */
+    /** @var FormatterPluginManager $fieldFormatterManager */
     $fieldFormatterManager = $this->container->get('plugin.manager.field.formatter');
     $instance = $fieldFormatterManager->getInstance($options);
     $summary = $instance->settingsSummary();
@@ -237,7 +242,7 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
    * Tests setting summary where count is shared across items.
    */
   public function testFormatterSettingsSummaryNotPerItem() {
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $efm */
+    /** @var EntityFieldManagerInterface $efm */
     $efm = $this->container->get('entity_field.manager');
     $definitions = $efm->getBaseFieldDefinitions('dr_entity_test');
 
@@ -261,7 +266,7 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
       'view_mode' => 'full',
     ];
 
-    /** @var \Drupal\Core\Field\FormatterPluginManager $fieldFormatterManager */
+    /** @var FormatterPluginManager $fieldFormatterManager */
     $fieldFormatterManager = $this->container->get('plugin.manager.field.formatter');
     $instance = $fieldFormatterManager->getInstance($options);
     $summary = $instance->settingsSummary();
@@ -273,7 +278,7 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
    * Tests setting summary occurrence sample for same day.
    */
   public function testFormatterSettingsSummarySampleOccurrenceSameDay() {
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $efm */
+    /** @var EntityFieldManagerInterface $efm */
     $efm = $this->container->get('entity_field.manager');
     $definitions = $efm->getBaseFieldDefinitions('dr_entity_test');
 
@@ -297,7 +302,7 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
       'view_mode' => 'full',
     ];
 
-    /** @var \Drupal\Core\Field\FormatterPluginManager $fieldFormatterManager */
+    /** @var FormatterPluginManager $fieldFormatterManager */
     $fieldFormatterManager = $this->container->get('plugin.manager.field.formatter');
     $instance = $fieldFormatterManager->getInstance($options);
     $summary = $instance->settingsSummary();
@@ -306,7 +311,7 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
     $endSameDay = clone $start;
     $endSameDay->setTime(17, 0, 0);
 
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->container->get('renderer');
     $rendered = $renderer->renderRoot($summary['sample_same_day']);
     // Remove newlines from Twig templates.
@@ -321,7 +326,7 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
    * Tests setting summary occurrence sample for different day.
    */
   public function testFormatterSettingsSummarySampleOccurrenceDifferentDay() {
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $efm */
+    /** @var EntityFieldManagerInterface $efm */
     $efm = $this->container->get('entity_field.manager');
     $definitions = $efm->getBaseFieldDefinitions('dr_entity_test');
 
@@ -345,7 +350,7 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
       'view_mode' => 'full',
     ];
 
-    /** @var \Drupal\Core\Field\FormatterPluginManager $fieldFormatterManager */
+    /** @var FormatterPluginManager $fieldFormatterManager */
     $fieldFormatterManager = $this->container->get('plugin.manager.field.formatter');
     $instance = $fieldFormatterManager->getInstance($options);
     $summary = $instance->settingsSummary();
@@ -355,7 +360,7 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
     $endDifferentDay->setTime(17, 0, 0);
     $endDifferentDay->modify('+1 day');
 
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->container->get('renderer');
     $rendered = $renderer->renderRoot($summary['sample_different_day']);
     // Remove newlines from Twig templates.
@@ -370,7 +375,7 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
    * Tests setting summary occurrence sample for different day.
    */
   public function testFormatterDependencies() {
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $efm */
+    /** @var EntityFieldManagerInterface $efm */
     $efm = $this->container->get('entity_field.manager');
     $definitions = $efm->getBaseFieldDefinitions('dr_entity_test');
 
@@ -399,9 +404,9 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
       'view_mode' => 'full',
     ];
 
-    /** @var \Drupal\Core\Field\FormatterPluginManager $fieldFormatterManager */
+    /** @var FormatterPluginManager $fieldFormatterManager */
     $fieldFormatterManager = $this->container->get('plugin.manager.field.formatter');
-    /** @var \Drupal\date_recur\Plugin\Field\FieldFormatter\DateRecurBasicFormatter $instance */
+    /** @var DateRecurBasicFormatter $instance */
     $instance = $fieldFormatterManager->getInstance($options);
     $expectedConfigDependencies = [
       'core.date_format.' . $dateFormat1->id(),
@@ -463,19 +468,19 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
   /**
    * Renders the date recur formatter and sets the HTML ready to be asserted.
    *
-   * @param \Drupal\date_recur_entity_test\Entity\DrEntityTest $entity
+   * @param DrEntityTest $entity
    *   A date recur test entity.
    * @param array $settings
    *   Settings for date recur basic formatter.
    */
   protected function renderFormatterSettings(DrEntityTest $entity, array $settings) {
-    /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList $field */
+    /** @var DateRecurFieldItemList $field */
     $field = $entity->dr;
     $build = $field->view([
       'type' => 'date_recur_basic_formatter',
       'settings' => $settings,
     ]);
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = $this->container->get('renderer');
     $this->setRawContent($renderer->renderPlain($build));
   }
@@ -483,7 +488,7 @@ class DateRecurBasicFormatterTest extends KernelTestBase {
   /**
    * Creates a recurring entity.
    *
-   * @return \Drupal\date_recur_entity_test\Entity\DrEntityTest
+   * @return DrEntityTest
    *   A recurring entity.
    */
   protected function createRecurringEntity() {
diff --git a/tests/src/Kernel/DateRecurFieldItemDefaultValuesTest.php b/tests/src/Kernel/DateRecurFieldItemDefaultValuesTest.php
index be0016e..ab22063 100644
--- a/tests/src/Kernel/DateRecurFieldItemDefaultValuesTest.php
+++ b/tests/src/Kernel/DateRecurFieldItemDefaultValuesTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\date_recur\Kernel;
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Field\Entity\BaseFieldOverride;
 use Drupal\date_recur_entity_test\Entity\DrEntityTest;
 use Drupal\KernelTests\KernelTestBase;
@@ -40,7 +41,7 @@ class DateRecurFieldItemDefaultValuesTest extends KernelTestBase {
   /**
    * An unsaved base field override entity for 'dr' field.
    *
-   * @var \Drupal\Core\Field\Entity\BaseFieldOverride
+   * @var BaseFieldOverride
    */
   protected $baseFieldOverride;
 
@@ -52,7 +53,7 @@ class DateRecurFieldItemDefaultValuesTest extends KernelTestBase {
     $this->installEntitySchema('dr_entity_test');
     $this->installConfig(['system']);
 
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
+    /** @var EntityFieldManagerInterface $entityFieldManager */
     $entityFieldManager = \Drupal::service('entity_field.manager');
     $baseFields = $entityFieldManager->getBaseFieldDefinitions('dr_entity_test');
     $this->baseFieldOverride = BaseFieldOverride::createFromBaseFieldDefinition($baseFields['dr'], 'dr_entity_test');
diff --git a/tests/src/Kernel/DateRecurFieldItemListTest.php b/tests/src/Kernel/DateRecurFieldItemListTest.php
index e040807..d817bc4 100644
--- a/tests/src/Kernel/DateRecurFieldItemListTest.php
+++ b/tests/src/Kernel/DateRecurFieldItemListTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\date_recur\Kernel;
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\date_recur\DateRecurHelperInterface;
 use Drupal\Core\Field\Entity\BaseFieldOverride;
 use Drupal\date_recur\DateRange;
 use Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem;
@@ -41,7 +43,7 @@ class DateRecurFieldItemListTest extends KernelTestBase {
   /**
    * Entity for testing.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $entity;
 
@@ -108,7 +110,7 @@ class DateRecurFieldItemListTest extends KernelTestBase {
 
     $defaultRrule = 'FREQ=WEEKLY;COUNT=995';
 
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager */
+    /** @var EntityFieldManagerInterface $entityFieldManager */
     $entityFieldManager = \Drupal::service('entity_field.manager');
     $baseFields = $entityFieldManager->getBaseFieldDefinitions('dr_entity_test');
     $baseFieldOverride = BaseFieldOverride::createFromBaseFieldDefinition($baseFields['dr'], 'dr_entity_test');
@@ -135,7 +137,7 @@ class DateRecurFieldItemListTest extends KernelTestBase {
       ],
     ];
 
-    /** @var \Drupal\date_recur\DateRecurHelperInterface $helper1 */
+    /** @var DateRecurHelperInterface $helper1 */
     $helper1 = $entity->dr[0]->getHelper();
     $firstOccurrence = $helper1->getOccurrences(NULL, NULL, 1)[0];
     $this->assertEquals('Mon, 16 Jun 2014 06:00:01 +0700', $firstOccurrence->getStart()->format('r'));
@@ -150,7 +152,7 @@ class DateRecurFieldItemListTest extends KernelTestBase {
       'rrule' => 'FREQ=DAILY;COUNT=3',
     ];
 
-    /** @var \Drupal\date_recur\DateRecurHelperInterface $helper2 */
+    /** @var DateRecurHelperInterface $helper2 */
     $helper2 = $entity->dr[0]->getHelper();
     $firstOccurrence = $helper2->getOccurrences(NULL, NULL, 1)[0];
     $this->assertEquals('Thu, 16 Jul 2015 06:00:03 +0700', $firstOccurrence->getStart()->format('r'));
diff --git a/tests/src/Kernel/DateRecurFieldItemTest.php b/tests/src/Kernel/DateRecurFieldItemTest.php
index e1844eb..d6749e8 100644
--- a/tests/src/Kernel/DateRecurFieldItemTest.php
+++ b/tests/src/Kernel/DateRecurFieldItemTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\date_recur\Kernel;
 
+use Symfony\Component\Validator\ConstraintViolationListInterface;
+use Drupal\date_recur\DateRecurHelperInterface;
+use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\date_recur\Exception\DateRecurHelperArgumentException;
 use Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem;
 use Drupal\date_recur_entity_test\Entity\DrEntityTest;
@@ -86,7 +89,7 @@ class DateRecurFieldItemTest extends KernelTestBase {
       'timezone' => 'Australia/Sydney',
     ];
 
-    /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+    /** @var ConstraintViolationListInterface $violations */
     $violations = $entity->dr->validate();
     $this->assertEquals(0, $violations->count());
   }
@@ -104,7 +107,7 @@ class DateRecurFieldItemTest extends KernelTestBase {
       'timezone' => 'Mars/Mariner',
     ];
 
-    /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+    /** @var ConstraintViolationListInterface $violations */
     $violations = $entity->dr->validate();
     $this->assertEquals(1, $violations->count());
 
@@ -126,7 +129,7 @@ class DateRecurFieldItemTest extends KernelTestBase {
       'timezone' => new \StdClass(),
     ];
 
-    /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+    /** @var ConstraintViolationListInterface $violations */
     $violations = $entity->dr->validate();
     $this->assertGreaterThanOrEqual(1, $violations->count());
 
@@ -174,7 +177,7 @@ class DateRecurFieldItemTest extends KernelTestBase {
       'timezone' => 'Australia/Sydney',
     ];
 
-    /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+    /** @var ConstraintViolationListInterface $violations */
     $violations = $entity->foo->validate();
     $this->assertEquals(1, $violations->count());
 
@@ -196,7 +199,7 @@ class DateRecurFieldItemTest extends KernelTestBase {
       'timezone' => 'Australia/Sydney',
     ];
 
-    /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+    /** @var ConstraintViolationListInterface $violations */
     $violations = $entity->dr->validate();
     $this->assertGreaterThanOrEqual(1, $violations->count());
 
@@ -254,11 +257,11 @@ class DateRecurFieldItemTest extends KernelTestBase {
   public function testGenerateSampleValue() {
     $entity = DrEntityTest::create();
     $entity->dr->generateSampleItems();
-    $this->assertRegExp('/^FREQ=DAILY;COUNT=\d{1,2}$/', $entity->dr->rrule);
+    $this->assertMatchesRegularExpression('/^FREQ=DAILY;COUNT=\d{1,2}$/', $entity->dr->rrule);
     $this->assertFalse($entity->dr->infinite);
     $this->assertTrue(in_array($entity->dr->timezone, timezone_identifiers_list(), TRUE));
 
-    /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+    /** @var ConstraintViolationListInterface $violations */
     $violations = $entity->dr->validate();
     $this->assertEquals(0, $violations->count());
   }
@@ -331,7 +334,7 @@ class DateRecurFieldItemTest extends KernelTestBase {
       ],
     ];
 
-    /** @var \Drupal\date_recur\DateRecurHelperInterface $helper1 */
+    /** @var DateRecurHelperInterface $helper1 */
     $helper1 = $entity->dr[0]->getHelper();
     $firstOccurrence = $helper1->getOccurrences(NULL, NULL, 1)[0];
     $this->assertEquals('Mon, 16 Jun 2014 06:00:01 +0700', $firstOccurrence->getStart()->format('r'));
@@ -343,7 +346,7 @@ class DateRecurFieldItemTest extends KernelTestBase {
     $entity->dr[0]->end_value = '2015-07-16T07:00:04';
     $entity->dr[0]->rrule = 'FREQ=DAILY;COUNT=3';
 
-    /** @var \Drupal\date_recur\DateRecurHelperInterface $helper2 */
+    /** @var DateRecurHelperInterface $helper2 */
     $helper2 = $entity->dr[0]->getHelper();
     $firstOccurrence = $helper2->getOccurrences(NULL, NULL, 1)[0];
     $this->assertEquals('Thu, 16 Jul 2015 06:00:03 +0700', $firstOccurrence->getStart()->format('r'));
@@ -367,7 +370,7 @@ class DateRecurFieldItemTest extends KernelTestBase {
       ],
     ];
 
-    /** @var \Drupal\date_recur\DateRecurHelperInterface $helper1 */
+    /** @var DateRecurHelperInterface $helper1 */
     $helper1 = $entity->dr[0]->getHelper();
     $firstOccurrence = $helper1->getOccurrences(NULL, NULL, 1)[0];
     $this->assertEquals('Mon, 16 Jun 2014 06:00:01 +0700', $firstOccurrence->getStart()->format('r'));
@@ -384,7 +387,7 @@ class DateRecurFieldItemTest extends KernelTestBase {
       ],
     ];
 
-    /** @var \Drupal\date_recur\DateRecurHelperInterface $helper2 */
+    /** @var DateRecurHelperInterface $helper2 */
     $helper2 = $entity->dr[0]->getHelper();
     $firstOccurrence = $helper2->getOccurrences(NULL, NULL, 1)[0];
     $this->assertEquals('Thu, 16 Jul 2015 06:00:03 +0700', $firstOccurrence->getStart()->format('r'));
@@ -406,13 +409,13 @@ class DateRecurFieldItemTest extends KernelTestBase {
       ],
     ];
 
-    /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item */
+    /** @var DateRecurItem $item */
     $item = $entity->dr[0];
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $startDate */
+    /** @var DrupalDateTime $startDate */
     $startDate = $item->start_date;
     $this->assertEquals('Mon, 16 Jun 2014 06:00:01 +0700', $startDate->format('r'));
     $this->assertEquals('Indian/Christmas', $startDate->getTimezone()->getName());
-    /** @var \Drupal\Core\Datetime\DrupalDateTime $endDate */
+    /** @var DrupalDateTime $endDate */
     $endDate = $item->end_date;
     $this->assertEquals('Mon, 16 Jun 2014 14:00:02 +0700', $endDate->format('r'));
     $this->assertEquals('Indian/Christmas', $endDate->getTimezone()->getName());
diff --git a/tests/src/Kernel/DateRecurFieldTest.php b/tests/src/Kernel/DateRecurFieldTest.php
index 00d2831..6045056 100644
--- a/tests/src/Kernel/DateRecurFieldTest.php
+++ b/tests/src/Kernel/DateRecurFieldTest.php
@@ -72,7 +72,7 @@ class DateRecurFieldTest extends KernelTestBase {
       'timezone' => $tzChristmas->getName(),
     ];
 
-    /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item */
+    /** @var DateRecurItem $item */
     $item = $entity->get('foo')[0];
     $occurrences = $item->getHelper()
       ->getOccurrences(NULL, NULL, 1);
diff --git a/tests/src/Kernel/DateRecurOccurrenceTableAttachedTest.php b/tests/src/Kernel/DateRecurOccurrenceTableAttachedTest.php
index d920049..3c7113e 100644
--- a/tests/src/Kernel/DateRecurOccurrenceTableAttachedTest.php
+++ b/tests/src/Kernel/DateRecurOccurrenceTableAttachedTest.php
@@ -84,7 +84,7 @@ class DateRecurOccurrenceTableAttachedTest extends DateRecurOccurrenceTableTest
   /**
    * {@inheritdoc}
    *
-   * @return \Drupal\entity_test\Entity\EntityTestRev
+   * @return EntityTestRev
    *   A test entity.
    */
   protected function createEntity() {
diff --git a/tests/src/Kernel/DateRecurOccurrenceTableTest.php b/tests/src/Kernel/DateRecurOccurrenceTableTest.php
index 6c467e7..fbcadb2 100644
--- a/tests/src/Kernel/DateRecurOccurrenceTableTest.php
+++ b/tests/src/Kernel/DateRecurOccurrenceTableTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\date_recur\Kernel;
 
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\date_recur\DateRecurOccurrences;
 use Drupal\date_recur_entity_test\Entity\DrEntityTestRev;
@@ -34,7 +36,7 @@ class DateRecurOccurrenceTableTest extends KernelTestBase {
   /**
    * The field definition for testing.
    *
-   * @var \Drupal\Core\Field\FieldStorageDefinitionInterface
+   * @var FieldStorageDefinitionInterface
    */
   protected $fieldDefinition;
 
@@ -63,7 +65,7 @@ class DateRecurOccurrenceTableTest extends KernelTestBase {
     // This is the name of the base field.
     $this->fieldName = 'dr';
 
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $efm */
+    /** @var EntityFieldManagerInterface $efm */
     $efm = \Drupal::service('entity_field.manager');
     $definitions = $efm->getFieldStorageDefinitions($this->testEntityType);
     $this->fieldDefinition = $definitions[$this->fieldName];
@@ -246,7 +248,7 @@ class DateRecurOccurrenceTableTest extends KernelTestBase {
   /**
    * Creates an unsaved test entity.
    *
-   * @return \Drupal\date_recur_entity_test\Entity\DrEntityTestRev
+   * @return DrEntityTestRev
    *   A test entity.
    */
   protected function createEntity() {
diff --git a/tests/src/Kernel/DateRecurPartGridTest.php b/tests/src/Kernel/DateRecurPartGridTest.php
index 01c4896..deb3e6b 100644
--- a/tests/src/Kernel/DateRecurPartGridTest.php
+++ b/tests/src/Kernel/DateRecurPartGridTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\date_recur\Kernel;
 
+use Drupal\Core\Field\FieldConfigInterface;
+use Symfony\Component\Validator\ConstraintViolationListInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem;
 use Drupal\entity_test\Entity\EntityTest;
@@ -30,7 +32,7 @@ class DateRecurPartGridTest extends KernelTestBase {
   /**
    * A field config for testing.
    *
-   * @var \Drupal\Core\Field\FieldConfigInterface
+   * @var FieldConfigInterface
    */
   protected $fieldConfig;
 
@@ -86,7 +88,7 @@ class DateRecurPartGridTest extends KernelTestBase {
       'timezone' => 'Australia/Sydney',
     ];
 
-    /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+    /** @var ConstraintViolationListInterface $violations */
     $violations = $entity->foo->validate();
     $this->assertEquals(0, $violations->count());
   }
@@ -118,7 +120,7 @@ class DateRecurPartGridTest extends KernelTestBase {
       'timezone' => 'Australia/Sydney',
     ];
 
-    /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+    /** @var ConstraintViolationListInterface $violations */
     $violations = $entity->foo->validate();
     $this->assertEquals(1, $violations->count());
 
@@ -148,7 +150,7 @@ class DateRecurPartGridTest extends KernelTestBase {
     ];
 
     // Try a disallowed frequency.
-    /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+    /** @var ConstraintViolationListInterface $violations */
     $violations = $entity->foo->validate();
     $this->assertEquals(1, $violations->count());
 
@@ -166,7 +168,7 @@ class DateRecurPartGridTest extends KernelTestBase {
       'timezone' => 'Australia/Sydney',
     ];
 
-    /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+    /** @var ConstraintViolationListInterface $violations */
     $violations = $entity->foo->validate();
     $this->assertEquals(0, $violations->count());
   }
@@ -192,7 +194,7 @@ class DateRecurPartGridTest extends KernelTestBase {
       'timezone' => 'Australia/Sydney',
     ];
 
-    /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+    /** @var ConstraintViolationListInterface $violations */
     $violations = $entity->foo->validate();
     $this->assertEquals(1, $violations->count());
 
@@ -210,7 +212,7 @@ class DateRecurPartGridTest extends KernelTestBase {
       'timezone' => 'Australia/Sydney',
     ];
 
-    /** @var \Symfony\Component\Validator\ConstraintViolationListInterface $violations */
+    /** @var ConstraintViolationListInterface $violations */
     $violations = $entity->foo->validate();
     $this->assertEquals(0, $violations->count());
   }
diff --git a/tests/src/Kernel/DateRecurTest.php b/tests/src/Kernel/DateRecurTest.php
index 169a3b1..c62ec2d 100644
--- a/tests/src/Kernel/DateRecurTest.php
+++ b/tests/src/Kernel/DateRecurTest.php
@@ -4,6 +4,8 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\date_recur\Kernel;
 
+use Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList;
+use Drupal\date_recur\DateRange;
 use Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem;
 use Drupal\date_recur_entity_test\Entity\DrEntityTest;
 use Drupal\date_recur_entity_test\Entity\DrEntityTestSingleCardinality;
@@ -64,7 +66,7 @@ class DateRecurTest extends KernelTestBase {
       ],
     ];
 
-    /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurFieldItemList $fieldList */
+    /** @var DateRecurFieldItemList $fieldList */
     $fieldList = $entity->dr;
     $validations = $fieldList->validate();
     $violation = $validations->get(0);
@@ -112,7 +114,7 @@ class DateRecurTest extends KernelTestBase {
 
     // No need to save the entity.
     $this->assertTrue($entity->isNew());
-    /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem $item */
+    /** @var DateRecurItem $item */
     $item = $entity->abc[0];
     $occurrences = $item->getHelper()
       ->getOccurrences(NULL, NULL, 2);
@@ -136,7 +138,7 @@ class DateRecurTest extends KernelTestBase {
     ];
 
     // Ensure a non repeating field value generates a single occurrence.
-    /** @var \Drupal\date_recur\DateRange[] $occurrences */
+    /** @var DateRange[] $occurrences */
     $occurrences = iterator_to_array($entity->dr->occurrences);
     $this->assertCount(1, $occurrences);
 
@@ -160,7 +162,7 @@ class DateRecurTest extends KernelTestBase {
     ];
 
     // Ensure a non repeating field value generates a single occurrence.
-    /** @var \Drupal\date_recur\DateRange[] $occurrences */
+    /** @var DateRange[] $occurrences */
     $occurrences = iterator_to_array($entity->dr->occurrences);
     $this->assertCount(1, $occurrences);
 
diff --git a/tests/src/Kernel/DateRecurViewsFieldAttachedTest.php b/tests/src/Kernel/DateRecurViewsFieldAttachedTest.php
index 8f806b3..38ca429 100644
--- a/tests/src/Kernel/DateRecurViewsFieldAttachedTest.php
+++ b/tests/src/Kernel/DateRecurViewsFieldAttachedTest.php
@@ -26,7 +26,7 @@ class DateRecurViewsFieldAttachedTest extends DateRecurViewsFieldTest {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp(FALSE);
 
     // This is the name of the attached field.
diff --git a/tests/src/Kernel/DateRecurViewsFieldTest.php b/tests/src/Kernel/DateRecurViewsFieldTest.php
index 0387981..0984a5a 100644
--- a/tests/src/Kernel/DateRecurViewsFieldTest.php
+++ b/tests/src/Kernel/DateRecurViewsFieldTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\date_recur\Kernel;
 
+use Drupal\views\ViewExecutable;
 use Drupal\date_recur\DateRecurOccurrences;
 use Drupal\date_recur_entity_test\Entity\DrEntityTest;
 use Drupal\Tests\views\Kernel\ViewsKernelTestBase;
@@ -64,7 +65,7 @@ class DateRecurViewsFieldTest extends ViewsKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp(FALSE);
     $this->installEntitySchema('dr_entity_test');
     ViewTestData::createTestViews(get_class($this), ['date_recur_views_test']);
@@ -115,7 +116,7 @@ class DateRecurViewsFieldTest extends ViewsKernelTestBase {
     $occurrenceTableName = DateRecurOccurrences::getOccurrenceCacheStorageTableName($definitions[$this->fieldName]);
 
     $view = View::load('dr_entity_test_list');
-    /** @var \Drupal\views\ViewExecutable $executable */
+    /** @var ViewExecutable $executable */
     $executable = $view->getExecutable();
 
     // Add the relationship.
@@ -219,7 +220,7 @@ class DateRecurViewsFieldTest extends ViewsKernelTestBase {
   /**
    * Creates an unsaved test entity.
    *
-   * @return \Drupal\date_recur_entity_test\Entity\DrEntityTest
+   * @return DrEntityTest
    *   A test entity.
    */
   protected function createEntity() {
diff --git a/tests/src/Kernel/DateRecurViewsOccurrenceFilterAttachedTest.php b/tests/src/Kernel/DateRecurViewsOccurrenceFilterAttachedTest.php
index a7c5a2f..0a8d7e5 100644
--- a/tests/src/Kernel/DateRecurViewsOccurrenceFilterAttachedTest.php
+++ b/tests/src/Kernel/DateRecurViewsOccurrenceFilterAttachedTest.php
@@ -25,7 +25,7 @@ class DateRecurViewsOccurrenceFilterAttachedTest extends DateRecurViewsOccurrenc
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp(FALSE);
 
     // This is the name of the attached field.
diff --git a/tests/src/Kernel/DateRecurViewsOccurrenceFilterTest.php b/tests/src/Kernel/DateRecurViewsOccurrenceFilterTest.php
index f702db1..a9c71a9 100644
--- a/tests/src/Kernel/DateRecurViewsOccurrenceFilterTest.php
+++ b/tests/src/Kernel/DateRecurViewsOccurrenceFilterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\date_recur\Kernel;
 
+use Drupal\views\ViewEntityInterface;
 use Drupal\date_recur_entity_test\Entity\DrEntityTest;
 use Drupal\Tests\views\Kernel\ViewsKernelTestBase;
 use Drupal\user\Entity\User;
@@ -55,7 +56,7 @@ class DateRecurViewsOccurrenceFilterTest extends ViewsKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp(FALSE);
     $this->installEntitySchema('dr_entity_test');
     ViewTestData::createTestViews(get_class($this), ['date_recur_views_test']);
@@ -665,7 +666,7 @@ class DateRecurViewsOccurrenceFilterTest extends ViewsKernelTestBase {
 
     $input = [$exposedIdentifier => $rawInput];
 
-    /** @var \Drupal\views\ViewEntityInterface $view */
+    /** @var ViewEntityInterface $view */
     $view = View::load('dr_entity_test_list');
     $executable = $view->getExecutable();
     $executable->addHandler('default', 'filter', 'dr_entity_test', $this->fieldName . '_occurrences', $filterOptions);
@@ -768,7 +769,7 @@ class DateRecurViewsOccurrenceFilterTest extends ViewsKernelTestBase {
   /**
    * Creates an unsaved test entity.
    *
-   * @return \Drupal\date_recur_entity_test\Entity\DrEntityTest
+   * @return DrEntityTest
    *   A test entity.
    */
   protected function createEntity() {
@@ -788,7 +789,7 @@ class DateRecurViewsOccurrenceFilterTest extends ViewsKernelTestBase {
    *   Message for phpunit.
    */
   protected function assertFilter(array $input, array $expectedResult, array $filterOptions, $message = NULL) {
-    /** @var \Drupal\views\ViewEntityInterface $view */
+    /** @var ViewEntityInterface $view */
     $view = View::load('dr_entity_test_list');
     $executable = $view->getExecutable();
     $executable->addHandler('default', 'filter', 'dr_entity_test', $this->fieldName . '_occurrences', $filterOptions);
diff --git a/tests/src/Unit/DateRecurDateRangeUnitTest.php b/tests/src/Unit/DateRecurDateRangeUnitTest.php
index 3d975bb..a652866 100644
--- a/tests/src/Unit/DateRecurDateRangeUnitTest.php
+++ b/tests/src/Unit/DateRecurDateRangeUnitTest.php
@@ -144,7 +144,7 @@ class DateRecurDateRangeUnitTest extends UnitTestCase {
    * @param mixed $end
    *   The end date.
    *
-   * @return \Drupal\date_recur\DateRange
+   * @return DateRange
    *   New range object.
    */
   protected function createDateRange($start, $end) {
diff --git a/tests/src/Unit/DateRecurNonRecurringHelperUnitTest.php b/tests/src/Unit/DateRecurNonRecurringHelperUnitTest.php
index 30b48d1..278918d 100644
--- a/tests/src/Unit/DateRecurNonRecurringHelperUnitTest.php
+++ b/tests/src/Unit/DateRecurNonRecurringHelperUnitTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\date_recur\Unit;
 
+use Drupal\date_recur\DateRecurHelperInterface;
 use Drupal\date_recur\DateRecurNonRecurringHelper;
 use Drupal\Tests\UnitTestCase;
 
@@ -102,7 +103,7 @@ class DateRecurNonRecurringHelperUnitTest extends UnitTestCase {
    *   \Drupal\date_recur\DateRecurNonRecurringHelper::createInstance without
    *   the RRULE arg.
    *
-   * @return \Drupal\date_recur\DateRecurHelperInterface
+   * @return DateRecurHelperInterface
    *   A new date recur helper instance.
    *
    * @see \Drupal\date_recur\DateRecurHelperInterface::createInstance
diff --git a/tests/src/Unit/DateRecurPartGridUnitTest.php b/tests/src/Unit/DateRecurPartGridUnitTest.php
index cec6d50..8ff8a4c 100644
--- a/tests/src/Unit/DateRecurPartGridUnitTest.php
+++ b/tests/src/Unit/DateRecurPartGridUnitTest.php
@@ -142,7 +142,7 @@ class DateRecurPartGridUnitTest extends UnitTestCase {
   /**
    * Create a new part grid.
    *
-   * @return \Drupal\date_recur\DateRecurPartGrid
+   * @return DateRecurPartGrid
    *   New part grid object.
    */
   protected function createPartGrid() {
diff --git a/tests/src/Unit/DateRecurRlHelperUnitTest.php b/tests/src/Unit/DateRecurRlHelperUnitTest.php
index 4fc7a9a..5a81e06 100644
--- a/tests/src/Unit/DateRecurRlHelperUnitTest.php
+++ b/tests/src/Unit/DateRecurRlHelperUnitTest.php
@@ -4,6 +4,7 @@ declare(strict_types = 1);
 
 namespace Drupal\Tests\date_recur\Unit;
 
+use Drupal\date_recur\DateRecurHelperInterface;
 use Drupal\date_recur\Exception\DateRecurHelperArgumentException;
 use Drupal\date_recur\Rl\RlHelper;
 use Drupal\Tests\UnitTestCase;
@@ -303,7 +304,7 @@ EXDATE:20180906T010000Z';
    *   Uses same arguments as
    *   \Drupal\date_recur\DateRecurHelperInterface::createInstance.
    *
-   * @return \Drupal\date_recur\DateRecurHelperInterface
+   * @return DateRecurHelperInterface
    *   A new date recur helper instance.
    *
    * @see \Drupal\date_recur\DateRecurHelperInterface::createInstance
diff --git a/tests/src/Unit/DateRecurRlInterpretationUnitTest.php b/tests/src/Unit/DateRecurRlInterpretationUnitTest.php
index 0912c4a..36e5b33 100644
--- a/tests/src/Unit/DateRecurRlInterpretationUnitTest.php
+++ b/tests/src/Unit/DateRecurRlInterpretationUnitTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\date_recur\Unit;
 
+use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Datetime\DateFormatInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ -26,7 +27,7 @@ class DateRecurRlInterpretationUnitTest extends UnitTestCase {
   /**
    * A test container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $testContainer;
 
diff --git a/tests/src/Unit/DateRecurRruleUnitTest.php b/tests/src/Unit/DateRecurRruleUnitTest.php
index 54f998c..b74d320 100644
--- a/tests/src/Unit/DateRecurRruleUnitTest.php
+++ b/tests/src/Unit/DateRecurRruleUnitTest.php
@@ -158,7 +158,7 @@ EXDATE:20180906T010000Z';
    * @param \DateTime|null $startDateEnd
    *   The initial occurrence end date, or NULL to use start date.
    *
-   * @return \Drupal\date_recur\DateRecurHelper
+   * @return DateRecurHelper
    *   A new DateRecurHelper object.
    */
   protected function newRule($rrule, \DateTime $startDate, \DateTime $startDateEnd = NULL) {
