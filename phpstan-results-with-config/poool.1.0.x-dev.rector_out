modules/contrib/poool/poool.api.php
modules/contrib/poool/poool.module
modules/contrib/poool/src/Component/Render/PooolJavaScriptSnippet.php
modules/contrib/poool/src/Event/PooolEvents.php
modules/contrib/poool/src/Event/PooolUserIsPremiumEvent.php
modules/contrib/poool/src/Form/PooolSettingsForm.php
modules/contrib/poool/src/Manager/PooolManager.php
modules/contrib/poool/src/Plugin/DataType/Poool.php
modules/contrib/poool/src/Plugin/DataType/PooolInterface.php
modules/contrib/poool/src/Plugin/Field/FieldFormatter/PooolEmptyFormatter.php
modules/contrib/poool/src/Plugin/Field/FieldType/PooolFieldItem.php
modules/contrib/poool/src/Plugin/Field/FieldWidget/PooolDefaultWidget.php
modules/contrib/poool/src/PooolHelperService.php

7 files with changes
====================

1) modules/contrib/poool/src/PooolHelperService.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * PooolHelperService constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The event dispatcher.
    */
   public function __construct(EventDispatcherInterface $eventDispatcher) {
@@ @@
   /**
    * Does the user is premium.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account.
    *
    * @return bool
@@ @@
    */
   public function userIsPremium(AccountProxyInterface $account) {
     $event = new PooolUserIsPremiumEvent($account);
-    $this->eventDispatcher->dispatch(PooolEvents::POOOL_USER_IS_PREMIUM, $event);
+    $this->eventDispatcher->dispatch($event, PooolEvents::POOOL_USER_IS_PREMIUM);
     return $event->isPremium();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


2) modules/contrib/poool/src/Plugin/Field/FieldWidget/PooolDefaultWidget.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * The poool helper service.
    *
-   * @var \Drupal\poool\Manager\PooolManager
+   * @var PooolManager
    */
   protected $pooolManager;

   /**
    * {@inheritdoc}
-   * @param \Drupal\poool\Manager\PooolManager $pooolManager
+   * @param PooolManager $pooolManager
    *   The poool manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, PooolManager $pooolManager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/poool/src/Plugin/Field/FieldType/PooolFieldItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\poool\Plugin\Field\FieldType;

+use Drupal\poool\Manager\PooolManager;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\TypedData\DataDefinition;
@@ @@
   public function preSave() {
     parent::preSave();

-    /** @var \Drupal\poool\Manager\PooolManager $pooolManager */
+    /** @var PooolManager $pooolManager */
     $pooolManager = \Drupal::service('poool.manager');
     // Get field defaults.
     $default_settings = $pooolManager->fieldDefaultSettings();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/poool/src/Manager/PooolManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\poool\Manager;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * The immutable poool configuration entity.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * PooolManager constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, ConfigFactoryInterface $config_factory) {
@@ @@
   /**
    * Get all content entity types.
    *
-   * @return \Drupal\Core\Entity\ContentEntityTypeInterface[]
+   * @return ContentEntityTypeInterface[]
    */
   public function getContentEntityTypes() {
     $definitions = $this->entityTypeManager->getDefinitions();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/poool/src/Form/PooolSettingsForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The Poool manager.
    *
-   * @var \Drupal\poool\Manager\PooolManager
+   * @var PooolManager
    */
   protected $pooolManager;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @var \Drupal\poool\Manager\PooolManager $poool_manager
+   * @var PooolManager $poool_manager
    *   The poool manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, PooolManager $poool_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/poool/src/Event/PooolUserIsPremiumEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\poool\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Session\AccountProxyInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the pool user is premium event.
@@ @@
   /**
    * The user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;

@@ @@
   /**
    * Constructs a new PooolUserIsPremiumEvent object.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The account.
    */
   public function __construct(AccountProxyInterface $account) {
@@ @@
   /**
    * Get the account.
    *
-   * @return \Drupal\Core\Session\AccountProxyInterface
+   * @return AccountProxyInterface
    *   The account.
    */
   public function getAccount(): AccountProxyInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/poool/poool.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Cache\Cache;
+use Drupal\poool\Component\Render\PooolJavaScriptSnippet;
+use Drupal\poool\Manager\PooolManager;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
+use Drupal\poool\PooolHelperService;
 /**
  * Implements hook_page_attachments().
  *
@@ @@
   $request = \Drupal::request();

   // Add module cache tags.
-  $page['#cache']['tags'] = \Drupal\Core\Cache\Cache::mergeTags(isset($page['#cache']['tags']) ? $page['#cache']['tags'] : [], $config->getCacheTags());
+  $page['#cache']['tags'] = Cache::mergeTags(isset($page['#cache']['tags']) ? $page['#cache']['tags'] : [], $config->getCacheTags());

   // Get page http status code for visibility filtering.
   $status = NULL;
@@ @@
     $page['#attached']['html_head'][] = [
       [
         '#tag' => 'script',
-        '#value' => new \Drupal\poool\Component\Render\PooolJavaScriptSnippet($script),
+        '#value' => new PooolJavaScriptSnippet($script),
       ],
       'poool_tracking_script',
     ];
@@ @@
   // Cache conversion result if function is called more than once.
   if (!isset($page_match)) {
     $page_entity = _poool_get_page_entity();
-    /** @var \Drupal\poool\Manager\PooolManager $pooolManager */
+    /** @var PooolManager $pooolManager */
     $pooolManager = \Drupal::service('poool.manager');
-    $entity_settings = $page_entity instanceof \Drupal\Core\Entity\ContentEntityInterface ? $pooolManager->getPooolSettingsForEntity($page_entity) : NULL;
+    $entity_settings = $page_entity instanceof ContentEntityInterface ? $pooolManager->getPooolSettingsForEntity($page_entity) : NULL;
     if (isset($entity_settings['page-type'])) {
       return $entity_settings['page-type'];
     }
@@ @@
     $entity = $variables['element']['#object'];
     $view_mode = $variables['element']['#view_mode'];
     $field_name = $variables['element']['#field_name'];
-    $entity_display = \Drupal\Core\Entity\Entity\EntityViewDisplay::collectRenderDisplay($entity, $view_mode);
+    $entity_display = EntityViewDisplay::collectRenderDisplay($entity, $view_mode);
     $field_display = $entity_display->getComponent($field_name);

     if (isset($field_display['third_party_settings']['poool']['poool_tag_placed']) && $field_display['third_party_settings']['poool']['poool_tag_placed']) {
       $currentUser = \Drupal::currentUser();
-      /** @var \Drupal\poool\PooolHelperService $pooolHelper */
+      /** @var PooolHelperService $pooolHelper */
       $pooolHelper = \Drupal::service('poool.helper');
       if (!$pooolHelper->userIsPremium($currentUser)) {
-        /** @var \Drupal\poool\Manager\PooolManager $pooolManager */
+        /** @var PooolManager $pooolManager */
         $pooolManager = \Drupal::service('poool.manager');
-        $entity_settings = $entity instanceof \Drupal\Core\Entity\ContentEntityInterface ? $pooolManager->getPooolSettingsForEntity($entity) : NULL;
+        $entity_settings = $entity instanceof ContentEntityInterface ? $pooolManager->getPooolSettingsForEntity($entity) : NULL;
         $variables['attributes']['data-poool'] = $entity_settings['percent'] ?? $field_display['third_party_settings']['poool']['poool_visibility_percent'];
         $variables['attributes']['data-poool-mode'] = $entity_settings['mode'] ?? $field_display['third_party_settings']['poool']['poool_mode'];
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 1 nodes were removed                                                 

 [OK] 7 files have been changed by Rector                                       

