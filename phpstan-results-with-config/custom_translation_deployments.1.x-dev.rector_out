modules/contrib/custom_translation_deployments/custom_translation_deployments.api.php
modules/contrib/custom_translation_deployments/custom_translation_deployments.module
modules/contrib/custom_translation_deployments/tests/modules/custom_translation_deployments_test/custom_translation_deployments_test.module
modules/contrib/custom_translation_deployments/tests/src/Kernel/CustomTranslationTest.php

2 files with changes
====================

1) modules/contrib/custom_translation_deployments/tests/src/Kernel/CustomTranslationTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\custom_translation_deployments\Kernel;

+use Drupal\locale\StringStorageInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
@@ @@
   /**
    * The locale storage.
    *
-   * @var \Drupal\locale\StringStorageInterface
+   * @var StringStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->storage = $this->container->get('locale.storage');
@@ @@
     // Set the file path for translations to be where we can put our translation
     // files. It is there by default, but just to make sure.
     $directory = sys_get_temp_dir() . '/translations';
-    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
+    /** @var FileSystemInterface $file_system */
     $file_system = $this->container->get('file_system');
     $file_system->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);
     $this->config('locale.settings')->set('translation.path', $directory)->save();
@@ @@
       file_put_contents($directory . '/' . sprintf('mymodule-myversion.%s.po', $language), file_get_contents(__DIR__ . '/../../assets/mymodule-myversion.' . $language . '.po'));
     }
     // Let's try to import locale things.
-    /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
+    /** @var ModuleHandlerInterface $module_handler */
     $module_handler = $this->container->get('module_handler');
     $module_handler->loadInclude('locale', 'fetch.inc');
     // Use default options.
@@ @@
         'lid' => $source_string->lid,
         'language' => $language,
       ]);
-      $this->assertEqual($translation->getString(), $expected_translations[$language]);
+      $this->assertEquals($translation->getString(), $expected_translations[$language]);
     }
   }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/custom_translation_deployments/custom_translation_deployments.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\locale\LocaleProjectStorageInterface;
 /**
  * @file
  * Module file for custom translation deployments.
@@ @@
   $info = \Drupal::moduleHandler()
     ->invokeAll('custom_translation_deployments_files');

-  /** @var \Drupal\locale\LocaleProjectStorageInterface $storage */
+  /** @var LocaleProjectStorageInterface $storage */
   $storage = \Drupal::service('locale.project');
   foreach ($info as $item) {
     if (!$item || !is_array($item) || empty($item['name'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 2 files have been changed by Rector                                       

