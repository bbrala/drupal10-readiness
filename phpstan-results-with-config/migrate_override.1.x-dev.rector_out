modules/contrib/migrate_override/migrate_override.install
modules/contrib/migrate_override/migrate_override.module
modules/contrib/migrate_override/src/Form/MigrateOverrideSettingsForm.php
modules/contrib/migrate_override/src/OverrideManagerService.php
modules/contrib/migrate_override/src/OverrideManagerServiceInterface.php
modules/contrib/migrate_override/src/Plugin/Derivative/MigrateEntityOverride.php
modules/contrib/migrate_override/src/Plugin/Field/FieldFormatter/MigrateOverrideFormatter.php
modules/contrib/migrate_override/src/Plugin/Field/FieldType/MigrateOverrideFieldItem.php
modules/contrib/migrate_override/src/Plugin/Field/FieldWidget/MigrateOverrideWidget.php
modules/contrib/migrate_override/src/Plugin/migrate/destination/ContentEntityOverride.php
modules/contrib/migrate_override/tests/src/Functional/LoadTest.php
modules/contrib/migrate_override/tests/src/Functional/SettingsTest.php
modules/contrib/migrate_override/tests/src/Kernel/MigrateOverrideTestBase.php
modules/contrib/migrate_override/tests/src/Kernel/OverrideServiceTest.php
modules/contrib/migrate_override/tests/src/Kernel/OverrideTest.php
modules/contrib/migrate_override/tests/src/Kernel/UpdateTest.php
modules/contrib/migrate_override/tests/src/Unit/OverrideServiceTest.php

14 files with changes
=====================

1) modules/contrib/migrate_override/tests/src/Unit/OverrideServiceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_override\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
@@ @@
  */
 class OverrideServiceTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition prophecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\Core\Entity\EntityFieldManagerInterface definition prophecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition prophecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Entity Display Repository prophecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The config prophecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $config;

@@ @@
   /**
    * A page entity prophecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $pageEntity;

@@ @@
   /**
    * An article entity prophecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $articleEntity;

@@ @@
   /**
    * The field prophecy.
    *
-   * @var \Prophecy\Prophecy\ObjectProphecy
+   * @var ObjectProphecy
    */
   protected $field;

@@ @@
   /**
    * Builds the Override Manager Service.
    *
-   * @return \Drupal\migrate_override\OverrideManagerService
+   * @return OverrideManagerService
    *   The built Override Service.
    */
   protected function getOverrideService() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/migrate_override/tests/src/Kernel/UpdateTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_override\Kernel;

+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Schema\SchemaIncompleteException;
 use Drupal\KernelTests\KernelTestBase;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/migrate_override/tests/src/Kernel/OverrideTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_override\Kernel;

+use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\migrate_override\OverrideManagerService;
 use Drupal\migrate_override\OverrideManagerServiceInterface;
 use Drupal\node\Entity\Node;
@@ @@
    * Tests migrations with no override.
    */
   public function testNoOverride() {
-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->migrationPluginManager->createInstance('override_test_migration');
     $this->executeMigration($migration);
     $nodes = Node::loadMultiple();
@@ @@
    * Tests Migration with a missing source.
    */
   public function testMissingSource() {
-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->migrationPluginManager->createInstance('missing_source_test_migration');
     $this->executeMigration($migration);
     $nodes = Node::loadMultiple();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/migrate_override/tests/src/Kernel/OverrideServiceTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_override\Kernel;

+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\migrate_override\OverrideManagerService;

 /**
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
    * @covers ::entityBundleHasField
    * @covers ::entityHasFieldStorage
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testCreateBundleField() {
     $this->createContentType('test_type_1');
@@ @@
    *
    * @covers ::deleteBundleField
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function testDeleteBundleField() {
     $this->createContentType('test_type_1');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/migrate_override/tests/src/Kernel/MigrateOverrideTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_override\Kernel;

+use Drupal\migrate_override\OverrideManagerServiceInterface;
+use Drupal\Core\Config\Config;
+use Drupal\migrate\Plugin\MigrationPluginManagerInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\node\Entity\NodeType;
@@ @@
   /**
    * The override manager service.
    *
-   * @var \Drupal\migrate_override\OverrideManagerServiceInterface
+   * @var OverrideManagerServiceInterface
    */
   protected $overrideManager;

@@ @@
   /**
    * The editable config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * The migration plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
     $this->installEntitySchema('user');
@@ @@
    * @param string $name
    *   The type name.
    *
-   * @return \Drupal\node\Entity\NodeType
+   * @return NodeType
    *   The new node type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function createContentType($type = 'test_type', $name = 'Test Content Type') {
     $type = NodeType::create([
@@ @@
    * @param string $content_type
    *   The content type.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function addTextField($field_name, $content_type = 'test_type') {
     FieldStorageConfig::create([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/migrate_override/tests/src/Functional/SettingsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_override\Functional;

+use Drupal\node\Entity\NodeType;
+use Drupal\migrate_override\OverrideManagerServiceInterface;
 use Drupal\migrate_override\OverrideManagerService;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\Entity\User;
@@ @@
   /**
    * The created node bundle.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;

@@ @@

     $config = \Drupal::config('migrate_override.migrateoverridesettings');
     \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
-    /** @var \Drupal\migrate_override\OverrideManagerServiceInterface $service */
+    /** @var OverrideManagerServiceInterface $service */
     $service = \Drupal::service('migrate_override.override_manager');
     $this->assertTrue($config->get('entities.node.' . $this->nodeType->id() . ".migrate_override_enabled"));
     $this->assertSame(OverrideManagerService::FIELD_OVERRIDEABLE, $config->get('entities.node.' . $this->nodeType->id() . '.fields.title'));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/migrate_override/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_override\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/migrate_override/src/Plugin/migrate/destination/ContentEntityOverride.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_override\Plugin\migrate\destination;

+use Drupal\migrate_override\OverrideManagerServiceInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\migrate\MigrateException;
@@ @@
   /**
    * The override manager.
    *
-   * @var \Drupal\migrate_override\OverrideManagerServiceInterface
+   * @var OverrideManagerServiceInterface
    */
   protected $overrideManager;

@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   protected function updateEntity(EntityInterface $entity, Row $row) {
     if (!$entity instanceof ContentEntityInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/migrate_override/src/Plugin/Field/FieldWidget/MigrateOverrideWidget.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The override manager service.
    *
-   * @var \Drupal\migrate_override\OverrideManagerServiceInterface
+   * @var OverrideManagerServiceInterface
    */
   protected $overrideManager;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\migrate_override\OverrideManagerServiceInterface $override_manager
+   * @param OverrideManagerServiceInterface $override_manager
    *   The override manager.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, OverrideManagerServiceInterface $override_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/migrate_override/src/OverrideManagerServiceInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_override;

+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;

 /**
@@ @@
   /**
    * Returns the field setting by entity.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity to get the field setting for.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface|string $field
+   * @param FieldDefinitionInterface|string $field
    *   The field definition or field name.
    *
    * @return int
@@ @@
   /**
    * Determines if the entity is overrideable.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return bool
@@ @@
    * @param string $bundle
    *   The bundle.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface
+   * @return FieldDefinitionInterface
    *   The field.
    */
   public function createBundleField($entity_type_id, $bundle);
@@ @@
   /**
    * Gets an entities status for a field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name.
@@ @@
   /**
    * Sets an entities status for a field.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param string $field_name
    *   The field name.
@@ @@
   /**
    * Retrieve option list of overrideable fields.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/migrate_override/src/OverrideManagerService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_override;

+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\Core\Entity\EntityFieldManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The Entity Display Repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
     $field->save();
     $form_modes = $this->entityDisplayRepository->getFormModeOptionsByBundle($entity_type_id, $bundle);
     foreach (array_keys($form_modes) as $mode) {
-      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_mode */
+      /** @var EntityFormDisplayInterface $form_mode */
       $form_mode = $this->entityTypeManager->getStorage('entity_form_display')->load($entity_type_id . '.' . $bundle . '.' . $mode);
       $form_mode->setComponent(static::FIELD_NAME, [
         'type' => 'override_widget_default',
@@ @@
     }
     $view_modes = $this->entityDisplayRepository->getViewModeOptionsByBundle($entity_type_id, $bundle);
     foreach (array_keys($view_modes) as $mode) {
-      /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_mode */
+      /** @var EntityViewDisplayInterface $view_mode */
       $view_mode = $this->entityTypeManager->getStorage('entity_view_display')->load($entity_type_id . '.' . $bundle . '.' . $mode);
       $view_mode->setComponent(static::FIELD_NAME, [
         'region' => 'hidden',
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   public function getEntityFieldStatus(ContentEntityInterface $entity, $field_name, $default = OverrideManagerServiceInterface::ENTITY_FIELD_LOCKED) {
-    /** @var \Drupal\Core\Field\FieldItemListInterface $field_data */
+    /** @var FieldItemListInterface $field_data */
     $field_data = $entity->get(static::FIELD_NAME);
     if ($field_data->isEmpty()) {
       return $default;
@@ @@
    * @param string $entity_type_id
    *   The entity type id.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Drupal\field\Entity\FieldStorageConfig
+   * @return EntityInterface|FieldStorageConfig
    *   The storage.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   protected function createFieldStorage($entity_type_id) {
     if ($this->entityHasFieldStorage($entity_type_id)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/migrate_override/src/Form/MigrateOverrideSettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_override\Form;

+use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity type bundle info service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;

@@ @@
   /**
    * Drupal\Core\Entity\EntityFieldManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The override manager service.
    *
-   * @var \Drupal\migrate_override\OverrideManagerServiceInterface
+   * @var OverrideManagerServiceInterface
    */
   protected $overrideManager;

@@ @@
   /**
    * Constructs a MigrateOverrideSettingsForm object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\migrate_override\OverrideManagerServiceInterface $override_manager
+   * @param OverrideManagerServiceInterface $override_manager
    *   The override manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info, EntityFieldManagerInterface $entity_field_manager, OverrideManagerServiceInterface $override_manager) {
@@ @@

     $entity_types = $this->getContentEntityTypes();

-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     foreach ($entity_types as $entity_type) {
       $type_id = $entity_type->id();
       $bundles = $this->entityTypeBundleInfo->getBundleInfo($type_id);
@@ @@
     $config = $this->config('migrate_override.migrateoverridesettings');
     $entity_types = $this->getContentEntityTypes();

-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     foreach ($entity_types as $entity_type) {
       $type_id = $entity_type->id();
       $bundles = $this->entityTypeBundleInfo->getBundleInfo($type_id);
@@ @@
   /**
    * Returns all content entity type definitions.
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface[]
+   * @return EntityTypeInterface[]
    *   An array of content entity types.
    */
   protected function getContentEntityTypes() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/migrate_override/migrate_override.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Field\WidgetInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 /**
  * @file
  * Contains migrate_override.module.
@@ @@
  * prevent overrides for these fields provided the appropriate box is checked.
  */
 function migrate_override_field_widget_multivalue_form_alter(array &$elements, FormStateInterface $form_state, array $context) {
-  /** @var Drupal\Core\Field\FieldItemListInterface $items */
+  /** @var FieldItemListInterface $items */
   $items = $context['items'];
   $field = $items->getFieldDefinition()->getName();
   $entity = $items->getEntity();
-  /** @var \Drupal\migrate_override\OverrideManagerServiceInterface $manager */
+  /** @var OverrideManagerServiceInterface $manager */
   $manager = \Drupal::service("migrate_override.override_manager");
   if (!$manager->entityBundleEnabled($entity)) {
     return;
@@ @@
     ],
   ];

-  /** @var \Drupal\Core\Field\WidgetInterface $widget */
+  /** @var WidgetInterface $widget */
   $widget = $context['widget'];
   switch ($widget->getPluginId()) {
     case 'inline_entity_form_complex':
@@ @@
  */
 function migrate_override_migration_plugins_alter(array &$migrations) {
   foreach ($migrations as $migration_id => $migration) {
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = \Drupal::service('entity_type.manager');
     $destination = $migration['destination']['plugin'];
     if (substr($destination, 0, 7) === 'entity:') {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


14) modules/contrib/migrate_override/migrate_override.install:13

    ---------- begin diff ----------
@@ @@
   $config = \Drupal::configFactory()->getEditable('migrate_override.migrateoverridesettings');
   $all_entity_types = \Drupal::entityTypeManager()->getDefinitions();

-  /** @var \Drupal\Core\Entity\ContentEntityType[] $content_entity_types */
+  /** @var ContentEntityType[] $content_entity_types */
   $content_entity_types = array_filter(
       $all_entity_types,
       function ($entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 14 files have been changed by Rector                                      

