modules/contrib/textimage/src/Controller/TextimageDownloadController.php
modules/contrib/textimage/src/Form/FlushAllForm.php
modules/contrib/textimage/src/Form/SettingsForm.php
modules/contrib/textimage/src/PathProcessor/TextimagePathProcessor.php
modules/contrib/textimage/src/Plugin/Field/FieldFormatter/TextimageImageFieldFormatter.php
modules/contrib/textimage/src/Plugin/Field/FieldFormatter/TextimageTextFieldFormatter.php
modules/contrib/textimage/src/Routing/TextimageRoutes.php
modules/contrib/textimage/src/Textimage.php
modules/contrib/textimage/src/TextimageException.php
modules/contrib/textimage/src/TextimageFactory.php
modules/contrib/textimage/src/TextimageFactoryInterface.php
modules/contrib/textimage/src/TextimageInterface.php
modules/contrib/textimage/src/TextimageLogger.php
modules/contrib/textimage/src/TextimageTokenException.php
modules/contrib/textimage/tests/src/Functional/TextimageFieldFormatterTest.php
modules/contrib/textimage/tests/src/Functional/TextimageRedirectIntegrationTest.php
modules/contrib/textimage/tests/src/Functional/TextimageTest.php
modules/contrib/textimage/tests/src/Functional/TextimageTestBase.php
modules/contrib/textimage/tests/src/Kernel/TextimageApiTest.php
modules/contrib/textimage/tests/src/Kernel/TextimageTestTrait.php
modules/contrib/textimage/tests/src/Kernel/TextimageThemeTest.php
modules/contrib/textimage/textimage.install
modules/contrib/textimage/textimage.module

18 files with changes
=====================

1) modules/contrib/textimage/tests/src/Kernel/TextimageThemeTest.php:69

    ---------- begin diff ----------
@@ @@
     ];
     $this->setRawContent($this->renderer->renderRoot($output));
     $abs_url = $textimage->getUrl()->toString();
-    $rel_url = file_url_transform_relative($abs_url);
+    $rel_url = \Drupal::service('file_url_generator')->transformRelative($abs_url);
     // @todo changing behaviour in D8.1, need to watch #2646744
     $elements = $this->cssSelect("a[href='$abs_url'] div.textimage-container-test img[src='$rel_url']");
     $this->assertNotEmpty($elements, 'Textimage formatted correctly.');
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/textimage/tests/src/Kernel/TextimageTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\textimage\Kernel;

+use Drupal\textimage\TextimageFactoryInterface;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\image\Entity\ImageStyle;

 /**
@@ @@
   /**
    * The Textimage factory service.
    *
-   * @var \Drupal\textimage\TextimageFactoryInterface
+   * @var TextimageFactoryInterface
    */
   protected $textimageFactory;

@@ @@
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The entity display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
     $config = \Drupal::configFactory()->getEditable('image_effects.settings');
     $config
       ->set('image_selector.plugin_id', 'dropdown')
-      ->set('image_selector.plugin_settings.dropdown.path', drupal_get_path('module', 'image_effects') . '/tests/images')
+      ->set('image_selector.plugin_settings.dropdown.path', \Drupal::service('extension.list.module')->getPath('image_effects') . '/tests/images')
       ->set('font_selector.plugin_id', 'dropdown')
       ->set('font_selector.plugin_settings.dropdown.path', 'vendor://fileeye/linuxlibertine-fonts')
       ->save();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/textimage/tests/src/Kernel/TextimageApiTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\textimage\Kernel;

+use Drupal\user\Entity\User;
 use Drupal\file\Entity\File;
 use Drupal\image\Entity\ImageStyle;
 use Drupal\KernelTests\KernelTestBase;
@@ @@
   /**
    * An user account, to be used for token replacement.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $testUser;

@@ @@
     $files = $this->getTestFiles('image');
     $file = File::create((array) array_shift($files));
     $file->save();
-    file_move($file, 'image-test.PNG');
+    \Drupal::service('file.repository')->move($file, 'image-test.PNG');
     $textimage = $this->textimageFactory->get();
     $textimage
       ->setStyle(ImageStyle::load('textimage_test'))
    ----------- end diff -----------

Applied rules:
 * FileMoveRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/textimage/tests/src/Functional/TextimageTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\textimage\Functional;

+use Drupal\Core\File\FileSystemInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Tests\BrowserTestBase;
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/textimage/tests/src/Functional/TextimageRedirectIntegrationTest.php:53

    ---------- begin diff ----------
@@ @@
     // Get the stored image.
     $fid = $node->{$field_name}[0]->get('target_id')->getValue();
     $source_image_file = File::load($fid);
-    $source_image_file_url = file_create_url($source_image_file->getFileUri());
+    $source_image_file_url = \Drupal::service('file_url_generator')->generateAbsoluteString($source_image_file->getFileUri());

     // Get Textimage URL.
     $textimage = $this->textimageFactory->get()
@@ @@
       ->setStyle(ImageStyle::load('textimage_test'))
       ->setTokenData(['node' => $node, 'file' => $source_image_file])
       ->process(NULL);
-    $rel_url = file_url_transform_relative($textimage->getUrl()->toString());
+    $rel_url = \Drupal::service('file_url_generator')->transformRelative($textimage->getUrl()->toString());
     $this->assertFileDoesNotExist($textimage->getUri());

     // Test the textimage formatter - no link.
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/textimage/tests/src/Functional/TextimageFieldFormatterTest.php:46

    ---------- begin diff ----------
@@ @@
       ->setTokenData(['node' => $node])
       ->process($field_value);
     $textimage_url = $textimage->getUrl()->toString();
-    $rel_url = file_url_transform_relative($textimage_url);
+    $rel_url = \Drupal::service('file_url_generator')->transformRelative($textimage_url);

     // Assert HTML tags are stripped and entities are decoded.
     $this->assertSame(['Para1 Para2  "Title" One …'], $textimage->getText());
@@ @@
       ->setTokenData(['node' => $node])
       ->process($field_value);
     $textimage_url = $textimage->getUrl()->toString();
-    $rel_url = file_url_transform_relative($textimage_url);
+    $rel_url = \Drupal::service('file_url_generator')->transformRelative($textimage_url);

     // Assert HTML tags are stripped and entities are decoded.
     $this->assertSame(['Para1 Para2  "Title" One …'], $textimage->getText());
@@ @@
       ->setTokenData(['node' => $node])
       ->process($field_value)
       ->getUrl()->toString();
-    $rel_url = file_url_transform_relative($textimage_url);
+    $rel_url = \Drupal::service('file_url_generator')->transformRelative($textimage_url);

     $display = $this->entityDisplayRepository->getViewDisplay('node', $node->getType(), 'default');
     $display_options['type'] = 'textimage_text_field_formatter';
@@ @@
         ->setTokenData(['node' => $node])
         ->process($field_value[$i])
         ->getUrl()->toString();
-      $rel_url = file_url_transform_relative($textimage_url);
+      $rel_url = \Drupal::service('file_url_generator')->transformRelative($textimage_url);

       $this->assertSame($rel_url, $elements[$i]->getAttribute('src'));
       $this->assertSame('Alternate text: Test Title', $elements[$i]->getAttribute('alt'));
@@ @@
     // Get the stored image.
     $fid = $node->{$field_name}[0]->get('target_id')->getValue();
     $source_image_file = File::load($fid);
-    $source_image_file_url = file_create_url($source_image_file->getFileUri());
+    $source_image_file_url = \Drupal::service('file_url_generator')->generateAbsoluteString($source_image_file->getFileUri());

     // Get Textimage URL.
     $textimage_url = $this->textimageFactory->get()
@@ @@
       ->setTokenData(['node' => $node, 'file' => $source_image_file])
       ->process(NULL)
       ->getUrl()->toString();
-    $rel_url = file_url_transform_relative($textimage_url);
+    $rel_url = \Drupal::service('file_url_generator')->transformRelative($textimage_url);

     // Test the textimage formatter - no link.
     $display = $this->entityDisplayRepository->getViewDisplay('node', $node->getType(), 'default');
@@ @@
     // Get the stored image.
     $fid = $node->{$field_name}[0]->get('target_id')->getValue();
     $source_image_file = File::load($fid);
-    $source_image_file_url = file_create_url($source_image_file->getFileUri());
+    $source_image_file_url = \Drupal::service('file_url_generator')->generateAbsoluteString($source_image_file->getFileUri());

     // Get Textimage URL.
     $textimage_url = $this->textimageFactory->get()
@@ @@
       ->setTokenData(['node' => $node, 'file' => $source_image_file])
       ->process(NULL)
       ->getUrl()->toString();
-    $rel_url = file_url_transform_relative($textimage_url);
+    $rel_url = \Drupal::service('file_url_generator')->transformRelative($textimage_url);

     // Test the textimage formatter - no link.
     $display = $this->entityDisplayRepository->getViewDisplay('node', $node->getType(), 'default');
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


7) modules/contrib/textimage/src/TextimageLogger.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The Textimage logger channel.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $loggerChannel;

@@ @@
   /**
    * Constructs a TextimageLogger object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Psr\Log\LoggerInterface $logger_channel
+   * @param LoggerInterface $logger_channel
    *   The Textimage logger channel.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct(ConfigFactoryInterface $config_factory, LoggerInterface $logger_channel, AccountInterface $current_user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/textimage/src/TextimageInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\textimage;

+use Drupal\Core\Url;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\image\ImageStyleInterface;
@@ @@
   /**
    * Set the image style.
    *
-   * @param \Drupal\image\ImageStyleInterface $image_style
+   * @param ImageStyleInterface $image_style
    *   The image style to be used to derive the Textimage.
    *
    * @return $this
@@ @@
   /**
    * Sets the image source file.
    *
-   * @param \Drupal\file\FileInterface $source_image_file
+   * @param FileInterface $source_image_file
    *   A file entity.
    * @param int|null $width
    *   (optional) The source image width if known. Defaults to NULL.
@@ @@
   /**
    * Sets the bubbleable metadata.
    *
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   A BubbleableMetadata object.
    *
    * @return $this
@@ @@
   /**
    * Returns the URL of the Textimage.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The Url object for the textimage.
    */
   public function getUrl();
@@ @@
   /**
    * Gets the bubbleable metadata of the Textimage.
    *
-   * @return \Drupal\Core\Render\BubbleableMetadata
+   * @return BubbleableMetadata
    *   A BubbleableMetadata object.
    */
   public function getBubbleableMetadata();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/textimage/src/TextimageFactoryInterface.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a Textimage object.
    *
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   A BubbleableMetadata object.
    *
-   * @return \Drupal\textimage\Textimage
+   * @return Textimage
    *   A new Textimage object.
    */
   public function get(BubbleableMetadata $bubbleable_metadata = NULL);
@@ @@
    * @param string $tiid
    *   The Textimage ID.
    *
-   * @return \Drupal\textimage\Textimage
+   * @return Textimage
    *   A Textimage object with properties loaded from cache.
    */
   public function load($tiid);
@@ @@
    *   A text conversion option.
    * @param array $token_data
    *   (optional) Token data to be passed to Token::replace.
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   (optional) A BubbleableMetadata object to collect cacheability metadata
    *   from the token replacement process.
    *
@@ @@
   /**
    * Checks if an image style is Textimage relevant.
    *
-   * @param \Drupal\image\ImageStyleInterface $image_style
+   * @param ImageStyleInterface $image_style
    *   The image style to check.
    *
    * @return bool
@@ @@
    *
    * Clears immediate cache and all the image files associated.
    *
-   * @param \Drupal\image\ImageStyleInterface $style
+   * @param ImageStyleInterface $style
    *   The style being flushed.
    */
   public function flushStyle(ImageStyleInterface $style);
@@ @@
    *   The tokens to resolve.
    * @param array $data
    *   Token data array.
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   The bubbleable metadata.
    *
    * @return array
@@ @@
   /**
    * Retrieves text from a Text field.
    *
-   * @param Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   Field items.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


10) modules/contrib/textimage/src/TextimageFactory.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\textimage;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The token resolution service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * The Textimage logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManager
+   * @var StreamWrapperManager
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * The Textimage cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The User entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $userStorage;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Constructs a new TextimageFactory object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Utility\Token $token_service
+   * @param Token $token_service
    *   The token resolution service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The Textimage logger.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_service
+   * @param CacheBackendInterface $cache_service
    *   The Textimage cache service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManager $stream_wrapper_manager
+   * @param StreamWrapperManager $stream_wrapper_manager
    *   The stream wrapper manager service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The image style entity storage.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Token $token_service, LoggerInterface $logger, CacheBackendInterface $cache_service, AccountInterface $current_user, StreamWrapperManager $stream_wrapper_manager, EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/textimage/src/Textimage.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The Textimage factory service.
    *
-   * @var \Drupal\textimage\TextimageFactory
+   * @var TextimageFactory
    */
   protected $factory;

@@ @@
   /**
    * The lock service.
    *
-   * @var \Drupal\Core\Lock\LockBackendInterface
+   * @var LockBackendInterface
    */
   protected $lock;

@@ @@
   /**
    * The image factory service.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The textimage cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The Textimage logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The image effect manager service.
    *
-   * @var \Drupal\image\ImageEffectManager
+   * @var ImageEffectManager
    */
   protected $imageEffectManager;

@@ @@
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * Image style used for this Textimage.
    *
-   * @var \Drupal\image\ImageStyleInterface
+   * @var ImageStyleInterface
    */
   protected $style = NULL;

@@ @@
    * system context. Also used to track Textimages from image fields formatted
    * through Textimage field display formatter and to resolve file tokens.
    *
-   * @var \Drupal\file\FileInterface
+   * @var FileInterface
    */
   protected $sourceImageFile = NULL;

@@ @@
   /**
    * Bubbleable metadata of the Textimage.
    *
-   * @var \Drupal\Core\Render\BubbleableMetadata
+   * @var BubbleableMetadata
    */
   protected $bubbleableMetadata = NULL;

@@ @@
   /**
    * Constructs a Textimage object.
    *
-   * @param \Drupal\textimage\TextimageFactory $textimage_factory
+   * @param TextimageFactory $textimage_factory
    *   The Textimage factory.
-   * @param \Drupal\Core\Lock\LockBackendInterface $lock_service
+   * @param LockBackendInterface $lock_service
    *   The lock service.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The Textimage logger.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_service
+   * @param CacheBackendInterface $cache_service
    *   The Textimage cache service.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\image\ImageEffectManager $image_effect_manager
+   * @param ImageEffectManager $image_effect_manager
    *   The image effect manager service.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
    */
   public function __construct(TextimageFactory $textimage_factory, LockBackendInterface $lock_service, ImageFactory $image_factory, ConfigFactoryInterface $config_factory, LoggerInterface $logger, CacheBackendInterface $cache_service, FileSystemInterface $file_system, ImageEffectManager $image_effect_manager, StreamWrapperManagerInterface $stream_wrapper_manager) {
@@ @@
    * {@inheritdoc}
    */
   public function getUrl() {
-    return $this->processed ? Url::fromUri(file_create_url($this->getUri())) : NULL;
+    return $this->processed ? \Drupal::service('file_url_generator')->generate($this->getUri()) : NULL;
   }

   /**
@@ @@
    * @param array $effects
    *   An array of image effects.
    *
-   * @return \Drupal\image\ImageStyleInterface
+   * @return ImageStyleInterface
    *   An image style object.
    */
   protected function buildStyleFromEffects(array $effects) {
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/textimage/src/Routing/TextimageRoutes.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * Constructs a new TextimageRoutes object.
    *
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
    */
   public function __construct(StreamWrapperManagerInterface $stream_wrapper_manager) {
@@ @@
   /**
    * Returns an array of route objects.
    *
-   * @return \Symfony\Component\Routing\Route[]
+   * @return Route[]
    *   An array of route objects.
    */
   public function routes() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/textimage/src/Plugin/Field/FieldFormatter/TextimageTextFieldFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\textimage\Plugin\Field\FieldFormatter;

+use Drupal\image\ImageStyleInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The Textimage factory service.
    *
-   * @var \Drupal\textimage\TextimageFactory
+   * @var TextimageFactory
    */
   protected $textimageFactory;

@@ @@
   /**
    * The image style entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $imageStyleStorage;

@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\textimage\TextimageFactory $textimage_factory
+   * @param TextimageFactory $textimage_factory
    *   The Textimage factory service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $image_style_storage
+   * @param EntityStorageInterface $image_style_storage
    *   The image style entity storage.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   A logger instance.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user, TextimageFactory $textimage_factory, EntityStorageInterface $image_style_storage, LoggerInterface $logger) {
@@ @@
   public function calculateDependencies() {
     $dependencies = parent::calculateDependencies();
     $style_id = $this->getSetting('image_style');
-    /** @var \Drupal\image\ImageStyleInterface $style */
+    /** @var ImageStyleInterface $style */
     if ($style_id && $style = ImageStyle::load($style_id)) {
       // If this formatter uses a valid image style to display the image, add
       // the image style configuration entity as dependency of this formatter.
@@ @@
   public function onDependencyRemoval(array $dependencies) {
     $changed = parent::onDependencyRemoval($dependencies);
     $style_id = $this->getSetting('image_style');
-    /** @var \Drupal\image\ImageStyleInterface $style */
+    /** @var ImageStyleInterface $style */
     if ($style_id && $style = ImageStyle::load($style_id)) {
       if (!empty($dependencies[$style->getConfigDependencyKey()][$style->getConfigDependencyName()])) {
         $replacement_id = $this->imageStyleStorage->getReplacementId($style_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/textimage/src/Plugin/Field/FieldFormatter/TextimageImageFieldFormatter.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * The Textimage factory service.
    *
-   * @var \Drupal\textimage\TextimageFactory
+   * @var TextimageFactory
    */
   protected $textimageFactory;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $image_style_storage
+   * @param EntityStorageInterface $image_style_storage
    *   The image style entity storage.
-   * @param \Drupal\textimage\TextimageFactory $textimage_factory
+   * @param TextimageFactory $textimage_factory
    *   The Textimage factory service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user, EntityStorageInterface $image_style_storage, TextimageFactory $textimage_factory) {
@@ @@
       if (!$entity_url) {
         switch ($this->getSetting('image_link')) {
           case 'file':
-            $url = Url::fromUri(file_create_url($file->getFileUri()));
+            $url = \Drupal::service('file_url_generator')->generate($file->getFileUri());
             break;

           case 'derivative':
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/textimage/src/PathProcessor/TextimagePathProcessor.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The stream wrapper manager service.
    *
-   * @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface
+   * @var StreamWrapperManagerInterface
    */
   protected $streamWrapperManager;

@@ @@
   /**
    * Constructs a new TextimagePathProcessor object.
    *
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
    */
   public function __construct(StreamWrapperManagerInterface $stream_wrapper_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/textimage/src/Form/SettingsForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The Textimage factory.
    *
-   * @var \Drupal\textimage\TextimageFactory
+   * @var TextimageFactory
    */
   protected $textimageFactory;

@@ @@
   /**
    * The font selector plugin manager.
    *
-   * @var \Drupal\image_effects\Plugin\ImageEffectsPluginManager
+   * @var ImageEffectsPluginManager
    */
   protected $fontManager;

@@ @@
   /**
    * The Image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * Constructs the class for Textimage settings form.
    *
-   * @param \Drupal\textimage\TextimageFactory $textimage_factory
+   * @param TextimageFactory $textimage_factory
    *   The Textimage factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\image_effects\Plugin\ImageEffectsPluginManager $font_plugin_manager
+   * @param ImageEffectsPluginManager $font_plugin_manager
    *   The font selector plugin manager.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The Image factory.
    */
   public function __construct(TextimageFactory $textimage_factory, ConfigFactoryInterface $config_factory, ImageEffectsPluginManager $font_plugin_manager, ImageFactory $image_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/textimage/src/Form/FlushAllForm.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The Textimage factory.
    *
-   * @var \Drupal\textimage\TextimageFactory
+   * @var TextimageFactory
    */
   protected $textimageFactory;

@@ @@
   /**
    * Constructs a FlushAllForm object.
    *
-   * @param \Drupal\textimage\TextimageFactory $textimage_factory
+   * @param TextimageFactory $textimage_factory
    *   The Textimage factory.
    */
   public function __construct(TextimageFactory $textimage_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/textimage/src/Controller/TextimageDownloadController.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The Textimage factory.
    *
-   * @var \Drupal\textimage\TextimageFactory
+   * @var TextimageFactory
    */
   protected $textimageFactory;

@@ @@
   /**
    * The image factory.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * The Textimage logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * Constructs a TextimageDownloadController object.
    *
-   * @param \Drupal\textimage\TextimageFactory $textimage_factory
+   * @param TextimageFactory $textimage_factory
    *   The Textimage factory.
-   * @param \Drupal\Core\Image\ImageFactory $image_factory
+   * @param ImageFactory $image_factory
    *   The image factory.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The Textimage logger.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
-   * @param \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager
+   * @param StreamWrapperManagerInterface $stream_wrapper_manager
    *   The stream wrapper manager service.
    */
   public function __construct(TextimageFactory $textimage_factory, ImageFactory $image_factory, ConfigFactoryInterface $config_factory, LoggerInterface $logger, FileSystemInterface $file_system, StreamWrapperManagerInterface $stream_wrapper_manager) {
@@ @@
    *
    * After generating an image, transfer it to the requesting agent.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object. The 'text' query parameter coming from the URL
    *   contains the text elements to be used to deliver the Textimage.
-   * @param \Drupal\image\ImageStyleInterface $image_style
+   * @param ImageStyleInterface $image_style
    *   The image style to deliver.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown when Textimage URL generation is not enabled.
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Thrown when the image style is missing.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse|\Symfony\Component\HttpFoundation\Response
+   * @return BinaryFileResponse|Response
    *   The transferred file as response or some error response.
    */
   public function urlDeliver(Request $request, ImageStyleInterface $image_style) {
@@ @@
    *
    * After generating an image, transfer it to the requesting agent.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
+   * @throws NotFoundHttpException
    *   Thrown when the textimage ID is not found.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse|\Symfony\Component\HttpFoundation\Response
+   * @return BinaryFileResponse|Response
    *   The transferred file as response or some error response.
    */
   public function deferredDelivery(Request $request) {
@@ @@
   /**
    * Returns the image file at URI.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param string $uri
    *   The URI of the file to be returned.
    *
-   * @return \Symfony\Component\HttpFoundation\BinaryFileResponse|\Symfony\Component\HttpFoundation\Response
+   * @return BinaryFileResponse|Response
    *   The transferred file as response or some error response.
    */
   protected function returnBinary(Request $request, $uri) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 18 files have been changed by Rector                                      

