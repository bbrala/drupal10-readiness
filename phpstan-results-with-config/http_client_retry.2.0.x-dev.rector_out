modules/contrib/http_client_retry/src/Event/RequestEvents.php
modules/contrib/http_client_retry/src/Event/RequestRetryEvent.php
modules/contrib/http_client_retry/src/EventSubscriber/RequestRetryEventSubscriber.php
modules/contrib/http_client_retry/src/Form/HttpClientRetrySettingsForm.php
modules/contrib/http_client_retry/src/Http/HttpClientMiddleware.php
modules/contrib/http_client_retry/tests/modules/http_client_retry_test/src/Controller/StatusTestController.php
modules/contrib/http_client_retry/tests/src/Functional/HttpClientRetrySettingsFormTest.php
modules/contrib/http_client_retry/tests/src/Functional/RequestEventsTest.php
modules/contrib/http_client_retry/tests/src/Kernel/HttpClientMiddlewareTest.php

7 files with changes
====================

1) modules/contrib/http_client_retry/tests/src/Kernel/HttpClientMiddlewareTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\http_client_retry\Kernel;

+use GuzzleHttp\HandlerStack;
 use Drupal\KernelTests\KernelTestBase;

 /**
@@ @@
    */
   public function testMiddlewareIsAddedToHttpClient(): void {
     $client = \Drupal::httpClient();
-    /** @var \GuzzleHttp\HandlerStack $handler */
+    /** @var HandlerStack $handler */
     $handler = $client->getConfig()['handler'];
     $this->assertStringContainsString(
       'http_client_middleware.http_client_retry',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


2) modules/contrib/http_client_retry/tests/src/Functional/RequestEventsTest.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * State service for recording information received by event listeners.
    *
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected State $state;

@@ @@
   /**
    * Reacts to request retry event.
    *
-   * @param \Drupal\http_client_retry\Event\RequestRetryEvent $event
+   * @param RequestRetryEvent $event
    *   Event object.
    * @param string $name
    *   Event name.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/http_client_retry/tests/src/Functional/HttpClientRetrySettingsFormTest.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * User with the permissions to edit module settings.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected UserInterface $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/http_client_retry/tests/modules/http_client_retry_test/src/Controller/StatusTestController.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * Displays an Error 503 (Service unavailable) page.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   Response.
    */
   public function serviceUnavailable(): Response {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/http_client_retry/src/Http/HttpClientMiddleware.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * HTTP Client Retry module config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $config;

@@ @@
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected EventDispatcherInterface $eventDispatcher;

@@ @@
   /**
    * HttpClientMiddleware constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Configuration factory.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher.
    */
   public function __construct(
@@ @@
    *   Current retry count (including the try about to take place!).
    * @param float $delay_timeout
    *   Delay timeout.
-   * @param \Psr\Http\Message\RequestInterface $request
+   * @param RequestInterface $request
    *   Request object.
    * @param array $options
    *   Configured client options.
-   * @param \Psr\Http\Message\ResponseInterface|null $response
+   * @param ResponseInterface|null $response
    *   Response object.
    *
    * @see \Drupal\http_client_retry\Event\RequestRetryEvent
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/http_client_retry/src/EventSubscriber/RequestRetryEventSubscriber.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * HTTP Client Retry module config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected ImmutableConfig $config;

@@ @@
   /**
    * HTTP Client Retry module logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected LoggerChannelInterface $logger;

@@ @@
   /**
    * HttpClientMiddleware constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   Configuration factory.
-   * @param \Drupal\Core\Logger\LoggerChannelInterface $logger
+   * @param LoggerChannelInterface $logger
    *   HTTP Client Retry module logger.
    */
   public function __construct(
@@ @@
   /**
    * Logs information about retries if configured to do so.
    *
-   * @param \Drupal\http_client_retry\Event\RequestRetryEvent $event
+   * @param RequestRetryEvent $event
    *   Request retry event.
    */
   public function onRetry(RequestRetryEvent $event): void {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/http_client_retry/src/Event/RequestRetryEvent.php:29

    ---------- begin diff ----------
@@ @@
   /**
    * Request object.
    *
-   * @var \Psr\Http\Message\RequestInterface
+   * @var RequestInterface
    */
   protected RequestInterface $request;

@@ @@
   /**
    * Response object.
    *
-   * @var \Psr\Http\Message\ResponseInterface|null
+   * @var ResponseInterface|null
    */
   protected ?ResponseInterface $response = NULL;

@@ @@
   /**
    * Gets the request object being retried.
    *
-   * @return \Psr\Http\Message\RequestInterface
+   * @return RequestInterface
    *   Request object.
    */
   public function getRequest(): RequestInterface {
@@ @@
   /**
    * Gets the most recent response object if one is available.
    *
-   * @return \Psr\Http\Message\ResponseInterface|null
+   * @return ResponseInterface|null
    *   Response object.
    */
   public function getResponse(): ?ResponseInterface {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 7 files have been changed by Rector                                       

