modules/contrib/b24/b24.api.php
modules/contrib/b24/b24.install
modules/contrib/b24/b24.module
modules/contrib/b24/modules/b24_commerce/b24_commerce.api.php
modules/contrib/b24/modules/b24_commerce/b24_commerce.module
modules/contrib/b24/modules/b24_commerce/src/Event/B24CommerceEvent.php
modules/contrib/b24/modules/b24_commerce/src/EventSubscriber/B24CommerceSubscriber.php
modules/contrib/b24/modules/b24_commerce/src/Form/MappingForm.php
modules/contrib/b24/modules/b24_commerce/src/Form/ProductExportBatchForm.php
modules/contrib/b24/modules/b24_commerce/src/Form/SettingsForm.php
modules/contrib/b24/modules/b24_commerce/src/Plugin/Derivative/DynamicMappingTasks.php
modules/contrib/b24/modules/b24_commerce/src/Routing/B24CommerceRoutes.php
modules/contrib/b24/modules/b24_commerce/src/Service/CatalogManager.php
modules/contrib/b24/modules/b24_contact/b24_contact.module
modules/contrib/b24/modules/b24_contact/src/Form/SettingsForm.php
modules/contrib/b24/modules/b24_user/b24_user.module
modules/contrib/b24/modules/b24_user/src/EventSubscriber/B24UserEventSubscriber.php
modules/contrib/b24/modules/b24_user/src/Form/MappingForm.php
modules/contrib/b24/modules/b24_user/src/Form/SettingsForm.php
modules/contrib/b24/modules/b24_user/src/Form/UserExportBatchForm.php
modules/contrib/b24/modules/b24_user/src/Form/UserImportBatchForm.php
modules/contrib/b24/modules/b24_user/src/Service/UserManager.php
modules/contrib/b24/modules/b24_utm/b24_utm.module
modules/contrib/b24/modules/b24_webform/b24_webform.module
modules/contrib/b24/modules/b24_webform/src/Form/SettingsForm.php
modules/contrib/b24/src/Controller/Auth.php
modules/contrib/b24/src/Event/B24Event.php
modules/contrib/b24/src/Form/CredentialsForm.php
modules/contrib/b24/src/Form/DefaultSettingsForm.php
modules/contrib/b24/src/Service/RestManager.php

20 files with changes
=====================

1) modules/contrib/b24/src/Service/RestManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\b24\Service;

+use Drupal\Core\Messenger\MessengerInterface;
 use GuzzleHttp\Exception\ClientException;
 use Drupal\Core\Url;
 use Drupal\user\Entity\User;
@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

   /**
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;

   /**
-   * @var \Drupal\Core\Logger\LoggerChannelFactory $logger
+   * @var LoggerChannelFactory $logger
    */
   protected $logger;

@@ @@
   /**
    * An http client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Constructs a restmanager object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(
@@ @@
         ]
       );
       $event = new B24Event($b24_entity_name, 'insert', $response);
-      $this->eventDispatcher->dispatch(B24Event::ENTITY_INSERT, $event);
+      $this->eventDispatcher->dispatch($event, B24Event::ENTITY_INSERT);
     }
     return $ext_id;
   }
@@ @@
     $this->moduleHandler->alter('b24_push', $fields, $context);
     $response = $this->get("crm.{$b24_entity_name}.update", ['id' => $id,'fields' => $fields, 'params' => $params]);
     $event = new B24Event($b24_entity_name, 'update', $response);
-    $this->eventDispatcher->dispatch(B24Event::ENTITY_UPDATE, $event);
+    $this->eventDispatcher->dispatch($event, B24Event::ENTITY_UPDATE);
     return $response;
   }

@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *  A Drupal entity earlier exported to Bitrix24
    * @param string $ext_type
    *  Bitrix24 entity machine_name
@@ @@
   }

   /**
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *  A Drupal entity earlier exported to Bitrix24
    * @param string $ext_type
    *  Bitrix24 entity machine_name
@@ @@
     }
     $response = $this->get("crm.{$b24_entity_name}.delete", ['id' => $id]);
     $event = new B24Event($b24_entity_name, 'delete', $response);
-    $this->eventDispatcher->dispatch(B24Event::ENTITY_DELETE, $event);
+    $this->eventDispatcher->dispatch($event, B24Event::ENTITY_DELETE);
     $result = $response['result'] ?? FALSE;
     return $result;
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


2) modules/contrib/b24/src/Form/DefaultSettingsForm.php:13

    ---------- begin diff ----------
@@ @@
 class DefaultSettingsForm extends ConfigFormBase {

   /**
-   * @var \Drupal\b24\Service\RestManager
+   * @var RestManager
    */
   protected $restManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/b24/src/Form/CredentialsForm.php:16

    ---------- begin diff ----------
@@ @@
 class CredentialsForm extends ConfigFormBase {

   /**
-   * @var \Drupal\b24\Service\RestManager
+   * @var RestManager
    */
   protected $restManager;

   /**
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/b24/src/Event/B24Event.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\b24\Event;

-use Symfony\Component\EventDispatcher\Event;
-
 /**
  * Defines the Bitrix24 entity event.
  */
-class B24Event extends Event {
+class B24Event extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * Name of the event fired after adding a new Bitrix24 entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/b24/src/Controller/Auth.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   protected $config_editable;

   /**
-   * @var \Drupal\Core\State\State
+   * @var State
    */
   protected $state;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/b24/modules/b24_webform/src/Form/SettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\b24\Service\RestManager definition.
    *
-   * @var \Drupal\b24\Service\RestManager
+   * @var RestManager
    */
   protected $b24RestManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/b24/modules/b24_webform/b24_webform.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\webform\Entity\WebformSubmission;
 /**
  * @file
  * Contains b24_webform.module.
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_insert().
  */
-function b24_webform_webform_submission_insert(Drupal\webform\Entity\WebformSubmission $submission) {
+function b24_webform_webform_submission_insert(WebformSubmission $submission) {
   $webform = $submission->getWebform();
   $config = \Drupal::config('b24_webform.settings');
   if ($config->get("{$webform->id()}.status")) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


8) modules/contrib/b24/modules/b24_user/src/Service/UserManager.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Drupal\b24\Service\RestManager definition.
    *
-   * @var \Drupal\b24\Service\RestManager
+   * @var RestManager
    */
   protected $restManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@

   public function processUser($id, $update = FALSE) {
     $storage = $this->entityTypeManager->getStorage('user');
-    /** @var \Drupal\user\Entity\User $user */
+    /** @var User $user */
     $user = $storage->load($id);
     if (array_key_exists($user->id(), $this->existing) && !$update) {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/b24/modules/b24_user/src/Form/UserImportBatchForm.php:15

    ---------- begin diff ----------
@@ @@
 class UserImportBatchForm extends FormBase {

   /**
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

   /**
-   * @var \Drupal\b24\Service\RestManager
+   * @var RestManager
    */
   protected $b24restManager;

@@ @@
   /**
    * Batch Builder.
    *
-   * @var \Drupal\Core\Batch\BatchBuilder
+   * @var BatchBuilder
    */
   protected $batchBuilder;

   /**
-   * @var \Drupal\b24_user\Service\UserManager
+   * @var UserManager
    */
   protected $userManager;

@@ @@
       ->setInitMessage($this->t('Initializing users import.'))
       ->setProgressMessage($this->t('Completed @current of @total.'))
       ->setErrorMessage($this->t('An error has occurred.'))
-      ->setFile(drupal_get_path('module', 'b24_user') . '/src/Form/UserImportBatchForm.php');
+      ->setFile(\Drupal::service('extension.list.module')->getPath('b24_user') . '/src/Form/UserImportBatchForm.php');

     $this->existingUsers = $this->userManager->getExistingUsers();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/b24/modules/b24_user/src/Form/UserExportBatchForm.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Batch Builder.
    *
-   * @var \Drupal\Core\Batch\BatchBuilder
+   * @var BatchBuilder
    */
   protected $batchBuilder;

   /**
-   * @var \Drupal\b24_user\Service\UserManager
+   * @var UserManager
    */
   protected $userManager;

@@ @@
       ->setInitMessage($this->t('Initializing.'))
       ->setProgressMessage($this->t('Completed @current of @total.'))
       ->setErrorMessage($this->t('An error has occurred.'))
-      ->setFile(drupal_get_path('module', 'b24_user') . '/src/Form/UserExportBatchForm.php');
+      ->setFile(\Drupal::service('extension.list.module')->getPath('b24_user') . '/src/Form/UserExportBatchForm.php');

     $this->existingUsers = $this->userManager->getExistingUsers();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/b24/modules/b24_user/src/Form/MappingForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\b24\Service\RestManager definition.
    *
-   * @var \Drupal\b24\Service\RestManager
+   * @var RestManager
    */
   protected $b24RestManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/b24/modules/b24_user/src/EventSubscriber/B24UserEventSubscriber.php:11

    ---------- begin diff ----------
@@ @@
 class B24UserEventSubscriber implements EventSubscriberInterface {

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


13) modules/contrib/b24/modules/b24_contact/src/Form/SettingsForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\b24\Service\RestManager definition.
    *
-   * @var \Drupal\b24\Service\RestManager
+   * @var RestManager
    */
   protected $b24RestManager;

@@ @@
       '#title' => $this->t('Contact form submissions exporting rules'),
     ];

-    /** @var \Drupal\contact\Entity\ContactForm[] $contact_forms */
+    /** @var ContactForm[] $contact_forms */
     $contact_forms = ContactForm::loadMultiple();

     foreach ($contact_forms as $contact_form_id => $contact_form) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/b24/modules/b24_contact/b24_contact.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\contact\Entity\Message;
 /**
  * @file
  * Primary module hooks for b24_contact module.
@@ @@
     return;
   }

-  /** @var \Drupal\contact\Entity\Message $submission */
+  /** @var Message $submission */
   $submission = $message['params']['contact_message'];

   if ($config->get("{$submission->getContactForm()->id()}.status")) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


15) modules/contrib/b24/modules/b24_commerce/src/Service/CatalogManager.php:0

    ---------- begin diff ----------
@@ @@
 <?php

 namespace Drupal\b24_commerce\Service;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\field\Entity\FieldConfig;
 use Drupal\b24\Service\RestManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManager;
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\b24\Service\RestManager definition.
    *
-   * @var \Drupal\b24\Service\RestManager
+   * @var RestManager
    */
   protected $restManager;
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
     $section_fields = $settings['section_fields'] ?? [];
     $vocabularies = [];
     foreach ($section_fields as $section_field) {
-      /** @var Drupal\field\Entity\FieldConfig $field */
+      /** @var FieldConfig $field */
       $field = $this->entityTypeManager->getStorage('field_config')->load($section_field);
       $vocabularies = array_merge($vocabularies, $field->getSettings()['handler_settings']['target_bundles']);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


16) modules/contrib/b24/modules/b24_commerce/src/Form/ProductExportBatchForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Drupal\Core\Entity\EntityFieldManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * Drupal\Core\Messenger\MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Batch Builder.
    *
-   * @var \Drupal\Core\Batch\BatchBuilder
+   * @var BatchBuilder
    */
   protected $batchBuilder;

@@ @@
   protected $storeStorage;

   /**
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;

@@ @@
   protected $entityMapping;

   /**
-   * @var \Drupal\b24\Service\RestManager
+   * @var RestManager
    */
   protected $restManager;

   /**
-   * @var \Drupal\b24_commerce\Service\CatalogManager
+   * @var CatalogManager
    */
   protected $catalogManager;

@@ @@
         ->setInitMessage($this->t('Initializing.'))
         ->setProgressMessage($this->t('Completed @current of @total.'))
         ->setErrorMessage($this->t('An error has occurred.'))
-        ->setFile(drupal_get_path('module', 'b24_commerce') . '/src/Form/ProductExportBatchForm.php');
+        ->setFile(\Drupal::service('extension.list.module')->getPath('b24_commerce') . '/src/Form/ProductExportBatchForm.php');

       $stores = array_filter($form_state->getValue('stores'));
       $stores = array_keys($stores);
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/b24/modules/b24_commerce/src/Form/MappingForm.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\b24\Service\RestManager definition.
    *
-   * @var \Drupal\b24\Service\RestManager
+   * @var RestManager
    */
   protected $b24RestManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/b24/modules/b24_commerce/src/EventSubscriber/B24CommerceSubscriber.php:20

    ---------- begin diff ----------
@@ @@
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Drupal\state_machine\Event\WorkflowTransitionEvent;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Drupal\Core\Extension\ModuleHandler;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

   /**
-   * @var \Drupal\b24\Service\RestManager
+   * @var RestManager
    */
   protected $restManager;

   /**
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

   /**
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

   /**
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

   /**
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $dispatcher;

@@ @@
   /**
    * Constructs event subscriber.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(
@@ @@
       ])->execute();

     $event = new B24CommerceEvent($order, 'deal', $deal);
-    $this->dispatcher->dispatch(B24CommerceEvent::ENTITY_INSERT, $event);
+    $this->dispatcher->dispatch($event, B24CommerceEvent::ENTITY_INSERT);
     $this->updateProducts($order, 'deal', $deal);
     return $deal ?? NULL;
   }
@@ @@
     $this->moduleHandler->alter('b24_commerce_data', $fields, $context);
     $ext_id = $this->restManager->addLead($fields);
     $event = new B24CommerceEvent($order, 'lead', $ext_id);
-    $this->dispatcher->dispatch(B24CommerceEvent::ENTITY_INSERT, $event);
+    $this->dispatcher->dispatch($event, B24CommerceEvent::ENTITY_INSERT);
     if ($ext_id) {
       $hash = $this->getHash($fields);
       $this->database->insert('b24_reference')
@@ @@
     }
     $this->updateProducts($order);
     $event = new B24CommerceEvent($order, 'lead', $update);
-    $this->dispatcher->dispatch(B24CommerceEvent::ENTITY_UPDATE, $event);
+    $this->dispatcher->dispatch($event, B24CommerceEvent::ENTITY_UPDATE);
     return $update;
   }

@@ @@
       $this->moduleHandler->alter('b24_commerce_data', $fields, $context);
       $contact_id = $this->restManager->addContact($fields);
       $event = new B24CommerceEvent($order, 'contact', $contact_id);
-      $this->dispatcher->dispatch(B24CommerceEvent::ENTITY_INSERT, $event);
+      $this->dispatcher->dispatch($event, B24CommerceEvent::ENTITY_INSERT);
     }
     if ($this->moduleHandler->moduleExists('b24_user')) {
       $this->configFactory->getEditable('b24_user.settings')->set('enabled', $user_enabled);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/b24/modules/b24_commerce/src/Event/B24CommerceEvent.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\b24_commerce\Event;

 use Drupal\commerce_order\Entity\OrderInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * todo: we have lack information about B24 response here which makes this event not so useful as I wanted.
@@ @@
  *
  * @see \Drupal\commerce_order\Event\OrderEvents
  */
-class B24CommerceEvent extends Event {
+class B24CommerceEvent extends \Symfony\Contracts\EventDispatcher\Event {

   /**
    * Name of the event fired after adding a new Bitrix24 entity.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/b24/modules/b24_commerce/b24_commerce.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\commerce_order\Entity\OrderItemInterface;
+use Drupal\commerce_product\Entity\Product;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\taxonomy\Entity\Term;
 /**
@@ @@
 /**
  * Implements hook_entity_insert().
  */
-function b24_commerce_commerce_order_item_insert(Drupal\commerce_order\Entity\OrderItemInterface $item) {
+function b24_commerce_commerce_order_item_insert(OrderItemInterface $item) {
   return _b24_commerce_update_products($item);
 }

@@ @@
 /**
  * Implements hook_entity_insert().
  */
-function b24_commerce_commerce_order_item_update(Drupal\commerce_order\Entity\OrderItemInterface $item) {
+function b24_commerce_commerce_order_item_update(OrderItemInterface $item) {
   return _b24_commerce_update_products($item);
 }

@@ @@
 /**
  * Implements hook_entity_insert().
  */
-function b24_commerce_commerce_order_item_delete(Drupal\commerce_order\Entity\OrderItemInterface $item) {
+function b24_commerce_commerce_order_item_delete(OrderItemInterface $item) {
   return _b24_commerce_update_products($item);
 }

@@ @@
  * @param \Drupal\commerce_order\Entity\OrderItemInterface $item
  * @return mixed
  */
-function _b24_commerce_update_products(Drupal\commerce_order\Entity\OrderItemInterface $item) {
+function _b24_commerce_update_products(OrderItemInterface $item) {
   $order = $item->getOrder();
   return $order ? \Drupal::service('b24_commerce.event_subscriber')->updateProducts($order) : FALSE;
 }
@@ @@
 /**
  * Implements hook_ENTITY_TYPE_delete().
  */
-function b24_commerce_commerce_product_delete(Drupal\commerce_product\Entity\Product $entity) {
+function b24_commerce_commerce_product_delete(Product $entity) {
   $variations = $entity->get('variations')->getValue();
   foreach ($variations as $variation) {
     \Drupal::service('b24.rest_manager')->deleteProduct($variation['target_id'], TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 2 nodes were removed                                                 

 [OK] 20 files have been changed by Rector                                      

