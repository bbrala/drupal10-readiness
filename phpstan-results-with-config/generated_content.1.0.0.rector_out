modules/contrib/generated_content/generated_content.api.php
modules/contrib/generated_content/generated_content.install
modules/contrib/generated_content/generated_content.module
modules/contrib/generated_content/modules/generated_content_example1/generated_content/media/image.inc
modules/contrib/generated_content/modules/generated_content_example1/generated_content/taxonomy_term/tags.inc
modules/contrib/generated_content/modules/generated_content_example1/generated_content/user/user.inc
modules/contrib/generated_content/modules/generated_content_example2/generated_content/node/article.inc
modules/contrib/generated_content/modules/generated_content_example2/generated_content/node/page.inc
modules/contrib/generated_content/modules/generated_content_example2/generated_content/taxonomy_term/tags.inc
modules/contrib/generated_content/modules/generated_content_example2/src/GeneratedContentExample2Helper.php
modules/contrib/generated_content/src/Commands/GeneratedContentCommands.php
modules/contrib/generated_content/src/Form/GeneratedContentForm.php
modules/contrib/generated_content/src/GeneratedContentBatch.php
modules/contrib/generated_content/src/GeneratedContentBatchService.php
modules/contrib/generated_content/src/GeneratedContentRepository.php
modules/contrib/generated_content/src/Helpers/GeneratedContentAbstractHelper.php
modules/contrib/generated_content/src/Helpers/GeneratedContentAssetGenerator.php
modules/contrib/generated_content/src/Helpers/GeneratedContentHelper.php
modules/contrib/generated_content/src/Helpers/GeneratedContentRandomTrait.php
modules/contrib/generated_content/src/Helpers/GeneratedContentStaticTrait.php
modules/contrib/generated_content/src/Helpers/GeneratedContentVariationTrait.php
modules/contrib/generated_content/src/Plugin/ConfigFilter/GeneratedContentIgnoreFilter.php
modules/contrib/generated_content/tests/src/Functional/GeneratedContentFunctionalTestBase.php
modules/contrib/generated_content/tests/src/Functional/GeneratedContentGenerationFunctionalTest.php
modules/contrib/generated_content/tests/src/Functional/GeneratedContentGenerationOnModuleInstallFunctionalTest.php
modules/contrib/generated_content/tests/src/Traits/GeneratedContentTestHelperTrait.php

13 files with changes
=====================

1) modules/contrib/generated_content/src/Helpers/GeneratedContentHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\generated_content\Helpers;

+use Drupal\user\Entity\User;
+use Drupal\node\Entity\Node;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Url;
 use Drupal\menu_link_content\Entity\MenuLinkContent;
 use Drupal\taxonomy\Entity\Term;
@@ @@
   /**
    * Select a random user.
    *
-   * @return \Drupal\user\Entity\User
+   * @return User
    *   The user object.
    */
   public static function randomUser() {
@@ @@
    *   The type of the node to return. If not provided - random type will be
    *   returned.
    *
-   * @return \Drupal\node\Entity\Node
+   * @return Node
    *   Node entity.
    */
   public static function randomNode($type = NULL) {
@@ @@
    *   (optional) Array of types to filter. Defaults to FALSE, meaning that
    *   returned nodes will not be filtered.
    *
-   * @return \Drupal\node\Entity\Node[]
+   * @return Node[]
    *   Array of media entities.
    */
   public static function randomNodes($count = 20, array $types = []) {
@@ @@
    *   Optional term count to return. If NULL - all terms will be returned.
    *   If specified - this count of already randomised terms will be returned.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of terms.
    */
   public static function randomRealTerms($vid, $count = NULL) {
@@ @@
    * @param string $vid
    *   Vocabulary machine name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]|false
+   * @return EntityInterface[]|false
    *   The term.
    */
   public static function randomRealTerm($vid) {
@@ @@
    *   Optional term count to return. If NULL - all terms will be returned.
    *   If specified - this count of already randomised terms will be returned.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of terms.
    */
   public static function randomTerms($vid, $count = NULL) {
@@ @@
    * @param string $vid
    *   Vocabulary machine name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]|false
+   * @return EntityInterface[]|false
    *   The term.
    */
   public static function randomTerm($vid) {
@@ @@
    *   table to save execution time and memory consumption when listing large
    *   numbers of terms. Defaults to FALSE.
    *
-   * @return \Drupal\taxonomy\Entity\Term[]
+   * @return Term[]
    *   Array of terms at depth.
    */
   public static function getTermsAtDepth($vid, $depth, $load_entities = FALSE) {
@@ @@

     // Note that we are asking for an item 1 level deeper because this is
     // how loadTree() calculates max depth.
-    /** @var \Drupal\taxonomy\Entity\Term[] $tree */
+    /** @var Term[] $tree */
     $tree = static::$entityTypeManager->getStorage('taxonomy_term')->loadTree($vid, 0, $depth + 1, $load_entities);

     foreach ($tree as $k => $leaf) {
@@ @@
    * @param bool|int $parent_tid
    *   Internal parameter used for recursive calls.
    *
-   * @return \Drupal\taxonomy\Entity\Term[]
+   * @return Term[]
    *   Array of saved terms, keyed by term id.
    */
   public static function saveTermTree($vid, array $tree, $parent_tid = FALSE) {
@@ @@
    *   Array of links with keys as titles and values as paths or full link
    *   item array definitions. 'children' key is used to specify children menu
    *   levels.
-   * @param \Drupal\menu_link_content\Entity\MenuLinkContent $parent_menu_link
+   * @param MenuLinkContent $parent_menu_link
    *   Internal. Parent menu link item.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/generated_content/src/Helpers/GeneratedContentAssetGenerator.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\generated_content\Helpers;

+use Drupal\Core\Entity\EntityInterface;
+use Drupal\file\Entity\File;
 use Drupal\Component\Utility\Random;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\Core\File\FileSystemInterface;
@@ @@
   /**
    * The utility class for creating random data.
    *
-   * @var \Drupal\Component\Utility\Random
+   * @var Random
    */
   protected $random;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
     $save_function = 'image' . ($extension == 'jpg' ? 'jpeg' : $extension);
     $save_function($im, $this->fileSystem->realpath($destination));

-    $file = file_save_data(file_get_contents($destination), $uri);
+    $file = \Drupal::service('file.repository')->writeData(file_get_contents($destination), $uri);

     return $file;
   }
@@ @@
     $uri = $dir . $filename;
     // Make sure that there is an extension.
     $uri = empty(pathinfo($uri, PATHINFO_EXTENSION)) ? $uri . $options['extension'] : $uri;
-    $file = file_save_data($options['content'], $uri);
+    $file = \Drupal::service('file.repository')->writeData($options['content'], $uri);

     return $file;
   }
@@ @@
     $uri = $dir . $filename;
     // Make sure that there is an extension.
     $uri = empty(pathinfo($uri, PATHINFO_EXTENSION)) ? $uri . '.' . $options['extension'] : $uri;
-    $file = file_save_data(file_get_contents($asset_path), $uri);
+    $file = \Drupal::service('file.repository')->writeData(file_get_contents($asset_path), $uri);

     return $file;
   }
@@ @@
    * @param string $filename
    *   Filename to search for.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|\Drupal\file\Entity\File|null
+   * @return EntityInterface|File|null
    *   File object or NULL if not found.
    */
   protected function findFileByName($filename) {
@@ @@
       'svg',
     ];

-    $module_path = drupal_get_path('module', 'generated_content');
+    $module_path = \Drupal::service('extension.list.module')->getPath('generated_content');
     foreach ($extensions as $extension) {
       $dummy_file = $module_path . DIRECTORY_SEPARATOR . rtrim(static::ASSETS_DIRECTORY, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . 'dummy.' . $extension;
       if (file_exists($dummy_file)) {
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * FileSaveDataRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/generated_content/src/Helpers/GeneratedContentAbstractHelper.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * The repository singleton.
    *
-   * @var \Drupal\generated_content\GeneratedContentRepository
+   * @var GeneratedContentRepository
    */
   protected static $repository = NULL;

@@ @@
   /**
    * Asset generator.
    *
-   * @var \Drupal\generated_content\Helpers\GeneratedContentAssetGenerator
+   * @var GeneratedContentAssetGenerator
    */
   protected static $assetGenerator = NULL;

@@ @@
   /**
    * Asset generator.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected static $messenger = NULL;

@@ @@
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected static $entityTypeManager = NULL;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/generated_content/src/GeneratedContentRepository.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\generated_content;

+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Component\Utility\SortArray;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
   protected function collectImplementationPaths() {
     $paths = [];

-    /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
+    /** @var ModuleHandlerInterface $module_handler */
     $module_handler = \Drupal::getContainer()->get('module_handler');
     foreach ($module_handler->getModuleDirectories() as $name => $directory) {
       $candidate_dir = $directory . DIRECTORY_SEPARATOR . self::CONTENT_DIRECTORY;
@@ @@
   /**
    * Add a generated content entity to the repository.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $entity_type
    *   Override entity type with a custom value.
@@ @@
    *   Whether to track the entities.
    */
   protected function addEntities(array $entities, $tracking = TRUE) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     foreach ($entities as $entity) {
       $this->addEntity($entity, NULL, NULL, $tracking);
     }
@@ @@
    *   The array of entities.
    */
   public function addEntitiesNoTracking(array $entities) {
-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     foreach ($entities as $entity) {
       $this->addEntity($entity, NULL, NULL, FALSE);
     }
@@ @@
   /**
    * Track the entity permanently in the generated content table.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   protected function trackEntity(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


5) modules/contrib/generated_content/src/GeneratedContentBatchService.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Messenger\MessengerInterface definition.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * Class constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The core messenger service.
    */
   public function __construct(MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/generated_content/src/Form/GeneratedContentForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The generated content repository instance.
    *
-   * @var \Drupal\generated_content\GeneratedContentRepository
+   * @var GeneratedContentRepository
    */
   protected $repository;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/generated_content/src/Commands/GeneratedContentCommands.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Entity type service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * Logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   private $loggerChannelFactory;

@@ @@
   /**
    * Constructs a new UpdateVideosStatsController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerChannelFactory
+   * @param LoggerChannelFactoryInterface $loggerChannelFactory
    *   Logger service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, LoggerChannelFactoryInterface $loggerChannelFactory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/generated_content/modules/generated_content_example2/generated_content/taxonomy_term/tags.inc:29

    ---------- begin diff ----------
@@ @@
   // Total number of terms to create.
   $total_terms_count = 10;

-  /** @var \Drupal\generated_content\Helpers\GeneratedContentHelper $helper */
+  /** @var GeneratedContentHelper $helper */
   $helper = GeneratedContentHelper::getInstance();

   $terms = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


9) modules/contrib/generated_content/modules/generated_content_example2/generated_content/node/page.inc:28

    ---------- begin diff ----------
@@ @@
 function generated_content_example2_generated_content_create_node_page() {
   $total_nodes_count = 10;

-  /** @var \Drupal\generated_content\Helpers\GeneratedContentHelper $helper */
+  /** @var GeneratedContentHelper $helper */
   $helper = GeneratedContentHelper::getInstance();

   $nodes = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


10) modules/contrib/generated_content/modules/generated_content_example2/generated_content/node/article.inc:28

    ---------- begin diff ----------
@@ @@
 function generated_content_example2_generated_content_create_node_article() {
   $total_nodes_count = 10;

-  /** @var \Drupal\generated_content_example2\GeneratedContentExample2Helper $helper */
+  /** @var GeneratedContentExample2Helper $helper */
   $helper = GeneratedContentExample2Helper::getInstance();

   $nodes = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


11) modules/contrib/generated_content/modules/generated_content_example1/generated_content/user/user.inc:25

    ---------- begin diff ----------
@@ @@
 function generated_content_example1_generated_content_create_user_user() {
   $total_users_per_role = 3;

-  /** @var \Drupal\generated_content\Helpers\GeneratedContentHelper $helper */
+  /** @var GeneratedContentHelper $helper */
   $helper = GeneratedContentHelper::getInstance();

   $users = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


12) modules/contrib/generated_content/modules/generated_content_example1/generated_content/media/image.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\file\Entity\File;
 /**
  * @file
  * Create generated images.
@@ @@
  * Implements hook_generated_content_create_ENTITY_TYPE_BUNDLE().
  */
 function generated_content_example1_generated_content_create_media_image() {
-  /** @var \Drupal\generated_content\Helpers\GeneratedContentHelper $helper */
+  /** @var GeneratedContentHelper $helper */
   $helper = GeneratedContentHelper::getInstance();

   $total_files_count = 10;
@@ @@
   $entities = [];
   for ($i = 0; $i < $total_files_count; $i++) {
     $filename = sprintf('Demo Image media %s %s', $i + 1, $helper::randomSentence());
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = $helper->createImage([
       'filename' => $filename,
       'width' => 2000,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


13) modules/contrib/generated_content/generated_content.api.php:50

    ---------- begin diff ----------
@@ @@
   $total_terms_count = 50;

   // Generated content helper to get access to logging.
-  /** @var \Drupal\generated_content\Helpers\GeneratedContentHelper $helper */
+  /** @var GeneratedContentHelper $helper */
   $helper = GeneratedContentHelper::getInstance();

   $terms = [];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/generated_content/src/Plugin/ConfigFilter/GeneratedConte
         ntIgnoreFilter.php" file, due to:                                      
         "Analyze error: "Class                                                 
         Drupal\config_ignore\Plugin\ConfigFilter\IgnoreFilter not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

