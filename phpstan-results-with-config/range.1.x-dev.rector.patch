diff --git a/range.install b/range.install
index b05292c..4337dc9 100644
--- a/range.install
+++ b/range.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 /**
  * @file
  * Install, update and uninstall functions for the range module.
@@ -16,7 +17,7 @@ use Drupal\Core\Entity\Entity\EntityViewDisplay;
  * @see https://www.drupal.org/node/3142758
  */
 function range_update_8101(array &$sandbox) {
-  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_display */
+  /** @var EntityViewDisplayInterface $view_display */
   foreach (EntityViewDisplay::loadMultiple() as $view_display) {
     $should_be_updated = FALSE;
     foreach ($view_display->getComponents() as $name => $component) {
diff --git a/range.views.inc b/range.views.inc
index df11ada..1436bf8 100644
--- a/range.views.inc
+++ b/range.views.inc
@@ -27,7 +27,7 @@ function range_field_views_data(FieldStorageConfigInterface $field_storage) {
  * This function returns misc field data, that is required by various Views
  * plugins. Data includes field label and field additional fields.
  *
- * @param \Drupal\field\FieldStorageConfigInterface $field_storage
+ * @param FieldStorageConfigInterface $field_storage
  *   The field storage config entity.
  *
  * @return array
@@ -68,7 +68,7 @@ function range_field_views_data_base(FieldStorageConfigInterface $field_storage)
  *
  * @param array $data
  *   Views field data.
- * @param \Drupal\field\FieldStorageConfigInterface $field_storage
+ * @param FieldStorageConfigInterface $field_storage
  *   The field storage config entity.
  */
 function range_field_views_data_filter(array &$data, FieldStorageConfigInterface $field_storage) {
@@ -102,7 +102,7 @@ function range_field_views_data_filter(array &$data, FieldStorageConfigInterface
  *
  * @param array $data
  *   Views data array.
- * @param \Drupal\field\FieldStorageConfigInterface $field_storage
+ * @param FieldStorageConfigInterface $field_storage
  *   The field storage config entity.
  */
 function range_field_views_data_argument(array &$data, FieldStorageConfigInterface $field_storage) {
diff --git a/src/D8Compatibility/ViewsSqlQueryGetConnectionTrait.php b/src/D8Compatibility/ViewsSqlQueryGetConnectionTrait.php
index 3808408..51c7937 100644
--- a/src/D8Compatibility/ViewsSqlQueryGetConnectionTrait.php
+++ b/src/D8Compatibility/ViewsSqlQueryGetConnectionTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\range\D8Compatibility;
 
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Database;
 use Drupal\views\Plugin\views\query\Sql;
 
@@ -28,7 +29,7 @@ trait ViewsSqlQueryGetConnectionTrait {
    * connection. It can also be to another database connection when the view is
    * to an external database or a replica database.
    *
-   * @return \Drupal\Core\Database\Connection
+   * @return Connection
    *   The database connection to be used for the query.
    */
   protected function getDatabaseConnection(Sql $query) {
diff --git a/src/Plugin/Field/FieldFormatter/RangeFormatterBase.php b/src/Plugin/Field/FieldFormatter/RangeFormatterBase.php
index 2483965..c68db30 100644
--- a/src/Plugin/Field/FieldFormatter/RangeFormatterBase.php
+++ b/src/Plugin/Field/FieldFormatter/RangeFormatterBase.php
@@ -156,7 +156,7 @@ abstract class RangeFormatterBase extends FormatterBase {
    *   4. If COMBINED is disabled and both FROM/TO are enabled, show prefix
    *      from FROM and suffix from TO.
    *
-   * @param \Drupal\range\RangeItemInterface $item
+   * @param RangeItemInterface $item
    *   Range field item.
    * @param string $value
    *   Field combined value.
@@ -202,7 +202,7 @@ abstract class RangeFormatterBase extends FormatterBase {
   /**
    * Helper method. Returns the separate values renderable array.
    *
-   * @param \Drupal\range\RangeItemInterface $item
+   * @param RangeItemInterface $item
    *   Range field item.
    * @param string $from_value
    *   Field FROM value.
diff --git a/src/Plugin/Field/FieldType/RangeItemBase.php b/src/Plugin/Field/FieldType/RangeItemBase.php
index 2d270ca..a2a319a 100644
--- a/src/Plugin/Field/FieldType/RangeItemBase.php
+++ b/src/Plugin/Field/FieldType/RangeItemBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\range\Plugin\Field\FieldType;
 
+use Drupal\Core\TypedData\DataDefinitionInterface;
 use Drupal\Core\Field\FieldItemBase;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -90,7 +91,7 @@ abstract class RangeItemBase extends FieldItemBase implements RangeItemInterface
    * @param string $type
    *   Range field data type. Either 'integer', 'float' or 'string'.
    *
-   * @return \Drupal\Core\TypedData\DataDefinitionInterface[]
+   * @return DataDefinitionInterface[]
    *   An array of property definitions of contained properties, keyed by
    *   property name.
    */
diff --git a/src/Plugin/migrate/field/d6/RangeField.php b/src/Plugin/migrate/field/d6/RangeField.php
index d20b96d..2f00f00 100644
--- a/src/Plugin/migrate/field/d6/RangeField.php
+++ b/src/Plugin/migrate/field/d6/RangeField.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\range\Plugin\migrate\field\d6;
 
+use Drupal\migrate\Row;
 use Drupal\migrate_drupal\Plugin\migrate\field\FieldPluginBase;
 use Drupal\migrate\Plugin\MigrationInterface;
 
@@ -35,7 +36,7 @@ class RangeField extends FieldPluginBase {
    * {@inheritdoc}
    */
   public function alterFieldMigration(MigrationInterface $migration) {
-    /** @var \Drupal\migrate\Row $row */
+    /** @var Row $row */
     $row = $migration->getSourcePlugin()->current();
     if ($this->isRangeField($row->getSourceProperty('type'))) {
       $process_type = [];
@@ -63,7 +64,7 @@ class RangeField extends FieldPluginBase {
    * {@inheritdoc}
    */
   public function alterFieldInstanceMigration(MigrationInterface $migration) {
-    /** @var \Drupal\migrate\Row $row */
+    /** @var Row $row */
     $row = $migration->getSourcePlugin()->current();
     if ($this->isRangeField($row->getSourceProperty('type'))) {
       $process_settings = [
@@ -84,7 +85,7 @@ class RangeField extends FieldPluginBase {
    * {@inheritdoc}
    */
   public function alterFieldFormatterMigration(MigrationInterface $migration) {
-    /** @var \Drupal\migrate\Row $row */
+    /** @var Row $row */
     $row = $migration->getSourcePlugin()->current();
     if ($this->isRangeField($row->getSourceProperty('type'))) {
       $process_type = [];
diff --git a/src/Plugin/migrate/field/d7/RangeField.php b/src/Plugin/migrate/field/d7/RangeField.php
index 3c8f97e..517ae63 100644
--- a/src/Plugin/migrate/field/d7/RangeField.php
+++ b/src/Plugin/migrate/field/d7/RangeField.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\range\Plugin\migrate\field\d7;
 
+use Drupal\migrate\Row;
 use Drupal\migrate_drupal\Plugin\migrate\field\FieldPluginBase;
 use Drupal\migrate\Plugin\MigrationInterface;
 
@@ -35,7 +36,7 @@ class RangeField extends FieldPluginBase {
    * {@inheritdoc}
    */
   public function alterFieldInstanceMigration(MigrationInterface $migration) {
-    /** @var \Drupal\migrate\Row $row */
+    /** @var Row $row */
     $row = $migration->getSourcePlugin()->current();
     if ($this->isRangeField($row->getSourceProperty('type'))) {
       $process = [
@@ -52,7 +53,7 @@ class RangeField extends FieldPluginBase {
    * {@inheritdoc}
    */
   public function alterFieldWidgetMigration(MigrationInterface $migration) {
-    /** @var \Drupal\migrate\Row $row */
+    /** @var Row $row */
     $row = $migration->getSourcePlugin()->current();
     if ($this->isRangeField($row->getSourceProperty('type'))) {
       $process = [
diff --git a/src/RangeItemInterface.php b/src/RangeItemInterface.php
index 04140ca..f171700 100644
--- a/src/RangeItemInterface.php
+++ b/src/RangeItemInterface.php
@@ -13,7 +13,7 @@ interface RangeItemInterface extends FieldItemInterface {
   /**
    * Helper function. Returns Schema API column specification.
    *
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $field_definition
+   * @param FieldStorageDefinitionInterface $field_definition
    *   The field definition.
    *
    * @return array
diff --git a/tests/src/Functional/Formatter/RangeFormatterUiTestBase.php b/tests/src/Functional/Formatter/RangeFormatterUiTestBase.php
index 4976e7b..ff60842 100644
--- a/tests/src/Functional/Formatter/RangeFormatterUiTestBase.php
+++ b/tests/src/Functional/Formatter/RangeFormatterUiTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\range\Functional\Formatter;
 
+use Drupal\Tests\WebAssert;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\range\Traits\RangeTestTrait;
 
@@ -41,7 +42,7 @@ abstract class RangeFormatterUiTestBase extends BrowserTestBase {
   /**
    * WebAssert object.
    *
-   * @var \Drupal\Tests\WebAssert
+   * @var WebAssert
    */
   protected $session;
 
diff --git a/tests/src/Functional/RangeBrowserTestBase.php b/tests/src/Functional/RangeBrowserTestBase.php
index 1399ab8..d88090f 100644
--- a/tests/src/Functional/RangeBrowserTestBase.php
+++ b/tests/src/Functional/RangeBrowserTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\range\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\Tests\BrowserTestBase;
@@ -33,7 +34,7 @@ abstract class RangeBrowserTestBase extends BrowserTestBase {
   /**
    * A user that can edit content types.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $adminUser;
 
diff --git a/tests/src/Functional/RangeFieldUiTest.php b/tests/src/Functional/RangeFieldUiTest.php
index 3554c80..b0b872e 100644
--- a/tests/src/Functional/RangeFieldUiTest.php
+++ b/tests/src/Functional/RangeFieldUiTest.php
@@ -272,6 +272,7 @@ class RangeFieldUiTest extends RangeBrowserTestBase {
 
   /**
    * Tests adding range fields and their settings via field UI.
+   * @doesNotPerformAssertions
    */
   public function testRangeFieldsUi() {
     foreach (['range_integer', 'range_float', 'range_decimal'] as $field_type) {
diff --git a/tests/src/Functional/RangeFieldValidationTest.php b/tests/src/Functional/RangeFieldValidationTest.php
index c87886f..40535ff 100644
--- a/tests/src/Functional/RangeFieldValidationTest.php
+++ b/tests/src/Functional/RangeFieldValidationTest.php
@@ -79,6 +79,7 @@ class RangeFieldValidationTest extends RangeBrowserTestBase {
 
   /**
    * Tests range field validation.
+   * @doesNotPerformAssertions
    */
   public function testRangeValidation() {
     foreach (['range_integer', 'range_float', 'range_decimal'] as $field_type) {
diff --git a/tests/src/Functional/Views/RangeViewsTestBase.php b/tests/src/Functional/Views/RangeViewsTestBase.php
index aeccc1f..fec8448 100644
--- a/tests/src/Functional/Views/RangeViewsTestBase.php
+++ b/tests/src/Functional/Views/RangeViewsTestBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\range\Functional\Views;
 
+use Drupal\node\NodeInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\node\Entity\NodeType;
@@ -48,7 +49,7 @@ abstract class RangeViewsTestBase extends ViewTestBase {
   /**
    * Nodes to test.
    *
-   * @var \Drupal\node\NodeInterface[]
+   * @var NodeInterface[]
    */
   protected $nodes = [];
 
diff --git a/tests/src/Kernel/Formatter/FormatterTestBase.php b/tests/src/Kernel/Formatter/FormatterTestBase.php
index 8c242f5..e73f138 100644
--- a/tests/src/Kernel/Formatter/FormatterTestBase.php
+++ b/tests/src/Kernel/Formatter/FormatterTestBase.php
@@ -56,7 +56,7 @@ abstract class FormatterTestBase extends KernelTestBase {
   /**
    * Entity, used for testing.
    *
-   * @var \Drupal\entity_test\Entity\EntityTest
+   * @var EntityTest
    */
   protected $entity;
 
diff --git a/tests/src/Kernel/Migrate/d6/MigrateRangeFieldTest.php b/tests/src/Kernel/Migrate/d6/MigrateRangeFieldTest.php
index c3f3ce2..9cb15ed 100644
--- a/tests/src/Kernel/Migrate/d6/MigrateRangeFieldTest.php
+++ b/tests/src/Kernel/Migrate/d6/MigrateRangeFieldTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\range\Kernel\Migrate\d6;
 
+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\node\Entity\Node;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
@@ -59,7 +60,7 @@ class MigrateRangeFieldTest extends MigrateDrupal6TestBase {
    * @dataProvider fieldMigrationDataProvider
    */
   public function testFieldMigration($id, $type, $settings) {
-    /** @var \Drupal\field\FieldStorageConfigInterface $field */
+    /** @var FieldStorageConfigInterface $field */
     $field = FieldStorageConfig::load($id);
     $this->assertInstanceOf(FieldStorageConfigInterface::class, $field);
     $this->assertSame($type, $field->getType());
@@ -98,7 +99,7 @@ class MigrateRangeFieldTest extends MigrateDrupal6TestBase {
    * @dataProvider fieldInstanceMigrationDataProvider
    */
   public function testFieldInstanceMigration($id, $default_value, $settings) {
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = FieldConfig::load($id);
     $this->assertSame($default_value, $field->getDefaultValueLiteral());
     $this->assertSame($settings, $field->getSettings());
diff --git a/tests/src/Kernel/Migrate/d7/MigrateRangeFieldTest.php b/tests/src/Kernel/Migrate/d7/MigrateRangeFieldTest.php
index b20e6f5..2ff11b6 100644
--- a/tests/src/Kernel/Migrate/d7/MigrateRangeFieldTest.php
+++ b/tests/src/Kernel/Migrate/d7/MigrateRangeFieldTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\range\Kernel\Migrate\d7;
 
+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\node\Entity\Node;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
@@ -58,7 +59,7 @@ class MigrateRangeFieldTest extends MigrateDrupal7TestBase {
    * @dataProvider fieldMigrationDataProvider
    */
   public function testFieldMigration($id, $type, $settings) {
-    /** @var \Drupal\field\FieldStorageConfigInterface $field */
+    /** @var FieldStorageConfigInterface $field */
     $field = FieldStorageConfig::load($id);
     $this->assertInstanceOf(FieldStorageConfigInterface::class, $field);
     $this->assertSame($type, $field->getType());
@@ -97,7 +98,7 @@ class MigrateRangeFieldTest extends MigrateDrupal7TestBase {
    * @dataProvider fieldInstanceMigrationDataProvider
    */
   public function testFieldInstanceMigration($id, $default_value, $settings) {
-    /** @var \Drupal\Core\Field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = FieldConfig::load($id);
     $this->assertSame($default_value, $field->getDefaultValueLiteral());
     $this->assertSame($settings, $field->getSettings());
diff --git a/tests/src/Kernel/Widget/WidgetTest.php b/tests/src/Kernel/Widget/WidgetTest.php
index 9fe5714..6e9d247 100644
--- a/tests/src/Kernel/Widget/WidgetTest.php
+++ b/tests/src/Kernel/Widget/WidgetTest.php
@@ -111,7 +111,7 @@ class WidgetTest extends KernelTestBase {
   /**
    * Renders a given entity form.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity object with attached fields to render.
    */
   protected function renderEntityForm(FieldableEntityInterface $entity) {
diff --git a/tests/src/Traits/RangeTestTrait.php b/tests/src/Traits/RangeTestTrait.php
index 697a25c..b669d95 100644
--- a/tests/src/Traits/RangeTestTrait.php
+++ b/tests/src/Traits/RangeTestTrait.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\range\Traits;
 
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Field\FieldConfigInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 
@@ -27,28 +31,28 @@ trait RangeTestTrait {
   /**
    * Field storage used for tests.
    *
-   * @var \Drupal\Core\Field\FieldStorageDefinitionInterface
+   * @var FieldStorageDefinitionInterface
    */
   protected $fieldStorage;
 
   /**
    * Field used for tests.
    *
-   * @var \Drupal\Core\Field\FieldConfigInterface
+   * @var FieldConfigInterface
    */
   protected $field;
 
   /**
    * Form display to test.
    *
-   * @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @var EntityFormDisplayInterface
    */
   protected $formDisplay;
 
   /**
    * View display to test.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @var EntityViewDisplayInterface
    */
   protected $viewDisplay;
 
diff --git a/tests/src/Unit/Plugin/Validation/Constraint/RangeBothValuesRequiredConstraintValidatorTest.php b/tests/src/Unit/Plugin/Validation/Constraint/RangeBothValuesRequiredConstraintValidatorTest.php
index 3c74e40..c2aa42d 100644
--- a/tests/src/Unit/Plugin/Validation/Constraint/RangeBothValuesRequiredConstraintValidatorTest.php
+++ b/tests/src/Unit/Plugin/Validation/Constraint/RangeBothValuesRequiredConstraintValidatorTest.php
@@ -20,7 +20,7 @@ class RangeBothValuesRequiredConstraintValidatorTest extends UnitTestCase {
   /**
    * Tests the RangeBothValuesRequiredConstraintValidator::validate() method.
    *
-   * @param \Drupal\range\RangeItemInterface $value
+   * @param RangeItemInterface $value
    *   Range item.
    * @param bool $valid
    *   A boolean indicating if the combination is expected to be valid.
diff --git a/tests/src/Unit/Plugin/Validation/Constraint/RangeFromGreaterToConstraintValidatorTest.php b/tests/src/Unit/Plugin/Validation/Constraint/RangeFromGreaterToConstraintValidatorTest.php
index 7b8eba5..9095355 100644
--- a/tests/src/Unit/Plugin/Validation/Constraint/RangeFromGreaterToConstraintValidatorTest.php
+++ b/tests/src/Unit/Plugin/Validation/Constraint/RangeFromGreaterToConstraintValidatorTest.php
@@ -20,7 +20,7 @@ class RangeFromGreaterToConstraintValidatorTest extends UnitTestCase {
   /**
    * Tests the RangeFromGreaterToConstraintValidator::validate() method.
    *
-   * @param \Drupal\range\RangeItemInterface $value
+   * @param RangeItemInterface $value
    *   Range item.
    * @param bool $valid
    *   A boolean indicating if the combination is expected to be valid.
diff --git a/tests/src/Unit/Plugin/migrate/field/d6/RangeFieldTest.php b/tests/src/Unit/Plugin/migrate/field/d6/RangeFieldTest.php
index 30766fd..04bf7ba 100644
--- a/tests/src/Unit/Plugin/migrate/field/d6/RangeFieldTest.php
+++ b/tests/src/Unit/Plugin/migrate/field/d6/RangeFieldTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\range\Unit\Plugin\migrate\field\d6;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\migrate\Plugin\MigrateSourceInterface;
 use Drupal\migrate\Plugin\Migration;
 use Drupal\migrate\Row;
@@ -29,28 +30,28 @@ class RangeFieldTest extends UnitTestCase {
   /**
    * Current migration row.
    *
-   * @var \Drupal\migrate\Row|\PHPUnit\Framework\MockObject\MockObject
+   * @var Row|MockObject
    */
   protected $row;
 
   /**
    * Migration source.
    *
-   * @var \Drupal\migrate\Plugin\MigrateSourceInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var MigrateSourceInterface|MockObject
    */
   protected $migrationSource;
 
   /**
    * Migration itself.
    *
-   * @var \Drupal\migrate\Plugin\Migration|\PHPUnit\Framework\MockObject\MockObject
+   * @var Migration|MockObject
    */
   protected $migration;
 
   /**
    * RangeField migration plugin.
    *
-   * @var \Drupal\range\Plugin\migrate\field\d6\RangeField
+   * @var RangeField
    */
   protected $plugin;
 
diff --git a/tests/src/Unit/Plugin/migrate/field/d7/RangeFieldTest.php b/tests/src/Unit/Plugin/migrate/field/d7/RangeFieldTest.php
index 601e6b9..e288432 100644
--- a/tests/src/Unit/Plugin/migrate/field/d7/RangeFieldTest.php
+++ b/tests/src/Unit/Plugin/migrate/field/d7/RangeFieldTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\range\Unit\Plugin\migrate\field\d7;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\migrate\Plugin\MigrateSourceInterface;
 use Drupal\migrate\Plugin\Migration;
 use Drupal\migrate\Row;
@@ -29,28 +30,28 @@ class RangeFieldTest extends UnitTestCase {
   /**
    * Current migration row.
    *
-   * @var \Drupal\migrate\Row|\PHPUnit\Framework\MockObject\MockObject
+   * @var Row|MockObject
    */
   protected $row;
 
   /**
    * Migration source.
    *
-   * @var \Drupal\migrate\Plugin\MigrateSourceInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var MigrateSourceInterface|MockObject
    */
   protected $migrationSource;
 
   /**
    * Migration itself.
    *
-   * @var \Drupal\migrate\Plugin\Migration|\PHPUnit\Framework\MockObject\MockObject
+   * @var Migration|MockObject
    */
   protected $migration;
 
   /**
    * RangeField migration plugin.
    *
-   * @var \Drupal\range\Plugin\migrate\field\d7\RangeField
+   * @var RangeField
    */
   protected $plugin;
 
