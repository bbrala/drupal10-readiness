modules/contrib/lingotek_overrides/lingotek_overrides.api.php
modules/contrib/lingotek_overrides/lingotek_overrides.install
modules/contrib/lingotek_overrides/lingotek_overrides.module
modules/contrib/lingotek_overrides/src/Annotation/LingotekOverridesFormField.php
modules/contrib/lingotek_overrides/src/Annotation/LingotekOverridesFormFilter.php
modules/contrib/lingotek_overrides/src/Annotation/LingotekOverridesFormOperation.php
modules/contrib/lingotek_overrides/src/Annotation/LingotekOverridesFormOption.php
modules/contrib/lingotek_overrides/src/Annotation/LingotekOverridesFormPluginBase.php
modules/contrib/lingotek_overrides/src/Entity/LingotekOverridesContentMetadata.php
modules/contrib/lingotek_overrides/src/Form/LingotekConfigManagementForm.php
modules/contrib/lingotek_overrides/src/Form/LingotekManagementForm.php
modules/contrib/lingotek_overrides/src/Form/LingotekManagementFormTrait.php
modules/contrib/lingotek_overrides/src/Form/LingotekManagementRelatedEntitiesForm.php
modules/contrib/lingotek_overrides/src/FormFieldPluginManager.php
modules/contrib/lingotek_overrides/src/FormFilterPluginManager.php
modules/contrib/lingotek_overrides/src/FormOperationPluginManager.php
modules/contrib/lingotek_overrides/src/FormOptionPluginManager.php
modules/contrib/lingotek_overrides/src/FormOptionPluginManagerInterface.php
modules/contrib/lingotek_overrides/src/FormPluginManagerBase.php
modules/contrib/lingotek_overrides/src/FormPluginManagerInterface.php
modules/contrib/lingotek_overrides/src/FormPluginManagerTrait.php
modules/contrib/lingotek_overrides/src/Lingotek.php
modules/contrib/lingotek_overrides/src/LingotekConfigurationService.php
modules/contrib/lingotek_overrides/src/LingotekConfigurationServiceInterface.php
modules/contrib/lingotek_overrides/src/LingotekContentTranslationService.php
modules/contrib/lingotek_overrides/src/LingotekFieldConfigEditForm.php
modules/contrib/lingotek_overrides/src/LingotekInterface.php
modules/contrib/lingotek_overrides/src/Plugin/RelatedEntitiesDetector/RestrictedRelatedEntitiesDetector.php
modules/contrib/lingotek_overrides/src/Plugin/RelatedEntitiesDetector/RestrictedRelatedEntitiesDetectorBase.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormField/Changed.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormField/EntityId.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormField/ModerationState.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormField/Status.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormFieldBase.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormFieldInterface.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormFilter/EntityBundle.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormFilter/JobId.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormFilterBase.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormFilterInterface.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/AssignJob.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/Cancel.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/CancelTranslation.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/ChangeProfile.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/CheckTranslation.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/CheckUpload.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/ClearJob.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/DeleteContent.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/DeleteOperationBase.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/DeleteTranslation.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/Download.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/RequestTranslation.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/Upload.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperationBase.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperationInterface.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOption/JobId.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOption/Language.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOption/Profile.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOptionBase.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOptionInterface.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormPluginBase.php
modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormPluginInterface.php
modules/contrib/lingotek_overrides/src/RelatedEntities/RestrictedEntitiesDetectorInterface.php
modules/contrib/lingotek_overrides/src/Remote/LingotekApi.php
modules/contrib/lingotek_overrides/src/Remote/LingotekApiInterface.php
modules/contrib/lingotek_overrides/src/Routing/RouteSubscriber.php

42 files with changes
=====================

1) modules/contrib/lingotek_overrides/src/Routing/RouteSubscriber.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * RouteSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/lingotek_overrides/src/Remote/LingotekApiInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Remote;

+use Drupal\lingotek\Exception\LingotekApiException;
 use Drupal\lingotek\Remote\LingotekApiInterface as BaseLingotekApiInterface;

 /**
@@ @@
    * @return mixed
    *   The response.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekApiException
    */
   public function getTaskContent($id);

@@ @@
    * @return mixed
    *   The document content.
    *
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekApiException
    */
   public function getDocumentFile($doc_id);

@@ @@
    *
    * @return mixed
    *   The response.
-   * @throws \Drupal\lingotek\Exception\LingotekApiException
+   * @throws LingotekApiException
    */
   public function patchTaskContent($id, $args);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormPluginInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Component\Plugin\PluginInspectionInterface;

 /**
@@ @@
   /**
    * Gets the plugin's title.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The title.
    */
   public function getTitle();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormPluginBase.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The entity_type.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOptionInterface.php:24

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validateElement(array &$element, FormStateInterface $form_state);
@@ @@
   /**
    * Stores the operations that are allowing the plugin.
    *
-   * @param \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface[] $operations
+   * @param FormOperationInterface[] $operations
    *   The operations.
    *
    * @return $this
@@ @@
   /**
    * Retrieves the operations that are allowing the plugin.
    *
-   * @return \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface[]
+   * @return FormOperationInterface[]
    *   The operations.
    */
   public function getOperations();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOptionBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides;

+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    *
    * Set by the plugin manager when the plugin instance is created.
    *
-   * @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface[]
+   * @var FormOperationInterface[]
    */
   protected $operations = [];

@@ @@
   /**
    * The lingotek.management.option private tempstore.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $tempStore;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore.private service.
    */
   public function __construct(
@@ @@
    *
    * @param array $element
    *   The form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
@@ @@
    *
    * Plugins should customize this message with more specific wording.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The error message.
    */
   protected function getErrorMessage() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOption/Profile.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The lingotek.configuration service.
    *
-   * @var \Drupal\lingotek_overrides\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore.private service.
-   * @param \Drupal\lingotek_overrides\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOption/Language.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The language_manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore.private service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
    */
   public function __construct(
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOption/JobId.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOption;

+use Drupal\node\NodeInterface;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ @@
   /**
    * The current_route_match service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRoute;

@@ @@
   /**
    * The datetime.time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;

@@ @@
   /**
    * The date.formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The tempstore.private service.
-   * @param \Drupal\Core\Routing\CurrentRouteMatch $current_route
+   * @param CurrentRouteMatch $current_route
    *   The current_route_match service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The datetime.time service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date.formatter service.
    * @param \Drupal\pathauto\AliasCleanerInterface|null $alias_cleaner
    *   The pathauto.alias_cleaner service.
@@ @@
   public function buildElement(array $element = []) {
     $date = $this->dateFormatter->format($this->time->getRequestTime(), 'custom', 'Y-m-d');
     $title = '';
-    /** @var \Drupal\node\NodeInterface $node */
+    /** @var NodeInterface $node */
     if ($node = $this->currentRoute->getParameter('node') ?? NULL) {
       $title = $node->getUntranslated()->label();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperationInterface.php:23

    ---------- begin diff ----------
@@ @@
    * followed by a variable number of arguments. If the callback is a string,
    * it will be considered a method of LingotekManagementFormBase.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperationBase.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the form's submitted values.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
@@ @@
   /**
    * Returns the selected languages.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/DeleteTranslation.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperation;

+use Drupal\Core\Entity\TranslatableInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;

@@ @@
     /**
      * @var array $values
      * @var array $langcodes
-     * @var \Drupal\Core\Form\FormStateInterface $form_state
+     * @var FormStateInterface $form_state
      */
     [$values, $langcodes, $form_state] = $arguments;
     $entityInfo = [];
-    /** @var \Drupal\Core\Entity\TranslatableInterface[] $entities */
+    /** @var TranslatableInterface[] $entities */
     $entities = $this->getSelectedEntities($values);
     foreach ($entities as $entity) {
       $source_langcode = $entity->getUntranslated()->language()->getId();
@@ @@

       foreach ($langcodes as $langcode) {
         if ($source_langcode !== $langcode && $entity->hasTranslation($langcode)) {
-          /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+          /** @var ContentEntityInterface $entity */
           $entityInfo[$entity->id()][$langcode] = $langcode;
         }
       }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/DeleteOperationBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperation;

+use Drupal\Core\Routing\CurrentRouteMatch;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountProxyInterface;
@@ @@
   /**
    * The current_route_match service.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRoute;

@@ @@
   /**
    * The current_user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The tempstore.private service.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempstore;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current_user service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $tempstore_private
+   * @param PrivateTempStoreFactory $tempstore_private
    *   The tempstore.private service.
    */
   public function __construct(
@@ @@
    * @param string[] $values
    *   Array of values that identify the selected entities.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities.
    */
   protected function getSelectedEntities(array $values) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormOperation/DeleteContent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperation;

+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;

@@ @@
   protected function redirectToDeleteMultipleEntitiesForm(array $arguments) {
     /**
      * @var array $values
-     * @var \Drupal\Core\Form\FormStateInterface $form_state
+     * @var FormStateInterface $form_state
      */
     [$values, $form_state] = $arguments;
     $entityInfo = [];
     $entities = $this->getSelectedEntities($values);
     foreach ($entities as $entity) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $language = $entity->getUntranslated()->language();
       $entityInfo[$entity->id()] = [$language->getId() => $language->getId()];
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormFilterInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Database\Query\SelectInterface;

 /**
@@ @@
    * Performs the filter operation.
    *
    * @param string $entity_type
-   * @param \Drupal\Core\Entity\EntityInterface[] $entities
+   * @param EntityInterface[] $entities
    * @param mixed $value
-   * @param \Drupal\Core\Database\Query\SelectInterface|null $query
+   * @param SelectInterface|null $query
    *
-   * @return \Drupal\Core\Database\Query\SelectInterface|null
+   * @return SelectInterface|null
    */
   public function filter(string $entity_type, array $entities, $value, SelectInterface &$query = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


16) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormFilterBase.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * Adds left join on the lingotek_metadata table.
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    *   The query.
    * @param string $entity_id_key
    *   The entity ID's key.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormFilter/EntityBundle.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormFilter;

+use Drupal\Core\TempStore\PrivateTempStore;
+use Drupal\node\NodeInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\SelectInterface;
@@ @@
   /**
    * The current_route_match service.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $currentRoute;

@@ @@
   /**
    * The lingotek.configuration service.
    *
-   * @var \Drupal\lingotek_overrides\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;

@@ @@
   /**
    * The entity_field.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The lingotek.management.filter.node private tempstore.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStore
+   * @var PrivateTempStore
    */
   protected $filterTempStore;

@@ @@
   /**
    * Entity types used in the filter.
    *
-   * @var \Drupal\Core\Entity\EntityTypeInterface[]
+   * @var EntityTypeInterface[]
    */
   protected $entityTypes;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $current_route
+   * @param RouteMatchInterface $current_route
    *   The current_route_match service.
-   * @param \Drupal\lingotek_overrides\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity_field.manager service.
    */
   public function __construct(
@@ @@
    */
   protected function extract(string $entity_type_id = NULL, string $entity_bundle = NULL, string $field_name = NULL, int $depth = 100) {
     if (!$entity_type_id && !$entity_bundle) {
-      /** @var \Drupal\node\NodeInterface $entity */
+      /** @var NodeInterface $entity */
       if (!($entity = $this->currentRoute->getParameter('node'))) {
         return [];
       }
@@ @@
   /**
    * Saves an entity type's definition to a local property.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity-type definition.
    */
   protected function setEntityType(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormFieldInterface.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the data for a field.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *
    * @return array
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormField/Status.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The language_manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The module_handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The content_moderation.moderation_information service.
    *
-   * @var \Drupal\content_moderation\ModerationInformationInterface
+   * @var ModerationInformationInterface
    */
   protected $moderationInformation;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language_manager service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
-   * @param \Drupal\content_moderation\ModerationInformationInterface $moderation_information
+   * @param ModerationInformationInterface $moderation_information
    *   The content_moderation.moderation_information service.
    */
   public function __construct(
@@ @@
   /**
    * Gets an entity's status or moderation state.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return string
@@ @@
   /**
    * Gets the revision's content moderation state, if available.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity revision.
    *
    * @return string|bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormField/ModerationState.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormField;

+use Drupal\Core\Entity\TranslatableRevisionableStorageInterface;
+use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\RevisionableStorageInterface;
 use Drupal\Core\Entity\TranslatableInterface;
@@ @@
     $statuses = [];

     if ($entity instanceof TranslatableInterface) {
-      /** @var \Drupal\Core\Entity\TranslatableRevisionableStorageInterface $storage */
+      /** @var TranslatableRevisionableStorageInterface $storage */
       $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
       $entity_id = $entity->id();

@@ @@

         foreach ($languages as $language) {
           if ($revision_id = $storage->getLatestTranslationAffectedRevisionId($entity_id, $language)) {
-            /** @var \Drupal\Core\Entity\TranslatableInterface $revision */
+            /** @var TranslatableInterface $revision */
             if ($revision = $storage->loadRevision($revision_id)) {
-              /** @var \Drupal\Core\Entity\ContentEntityInterface $translation */
+              /** @var ContentEntityInterface $translation */
               $translation = $revision->getTranslation($language);
               $statuses[$this->getStatus($translation)][] = $language;
             }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/lingotek_overrides/src/Plugin/lingotek_overrides/FormField/Changed.php:33

    ---------- begin diff ----------
@@ @@
   /**
    * The date.formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity_type.manager service.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database service.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date.formatter service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, Connection $connection, DateFormatterInterface $date_formatter) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/lingotek_overrides/src/Plugin/RelatedEntitiesDetector/RestrictedRelatedEntitiesDetectorBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Plugin\RelatedEntitiesDetector;

+use Drupal\lingotek_overrides\LingotekConfigurationServiceInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\lingotek\Plugin\RelatedEntitiesDetector\EntityReferenceDetectorBase;
@@ @@
    * {@inheritdoc}
    */
   public function extract(ContentEntityInterface &$entity, array &$entities, array &$related, $depth, array $visited) {
-    /** @var \Drupal\lingotek_overrides\LingotekConfigurationServiceInterface $config */
+    /** @var LingotekConfigurationServiceInterface $config */
     $config = $this->lingotekConfiguration;
     // Redundant, since the calling method is already checking for restrictions.
     static $restrict;
@@ @@
       }

       asort($field_labels);
-      /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions */
+      /** @var FieldDefinitionInterface[] $field_definitions */
       $field_definitions = array_merge($field_labels, $field_definitions);

       foreach ($field_definitions as $field_name => $definition) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/lingotek_overrides/src/LingotekInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides;

+use Drupal\lingotek_overrides\Remote\LingotekApiInterface;
 use Drupal\lingotek\LingotekInterface as BaseLingotekInterface;

 /**
@@ @@
   /**
    * Gets the Lingotek API object.
    *
-   * @return \Drupal\lingotek_overrides\Remote\LingotekApiInterface
+   * @return LingotekApiInterface
    *   The API.
    */
   public function getApi();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


24) modules/contrib/lingotek_overrides/src/LingotekFieldConfigEditForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides;

+use Drupal\field\FieldConfigInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\lingotek\Form\LingotekFieldConfigEditForm as BaseLingotekFieldConfigEditForm;

@@ @@
   /**
    * The lingotek.configuration service.
    *
-   * @var \Drupal\lingotek_overrides\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfig;

@@ @@
     // Prevent error in the parent due to a missing existence check.
     $form['translatable']['#disabled'] = $form['translatable']['#disabled'] ?? FALSE;
     parent::form($form, $form_state);
-    /** @var \Drupal\field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = $form_state->getFormObject()->getEntity();
     if ($field->getType() == 'entity_reference') {
       $entity_id = $field->getTargetEntityTypeId();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/lingotek_overrides/src/LingotekContentTranslationService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides;

+use Drupal\Core\Config\TypedConfigManagerInterface;
+use Drupal\layout_builder\SectionComponent;
+use Drupal\Core\Block\BlockPluginInterface;
+use Drupal\layout_builder\Section;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\path_alias\PathAliasInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\lingotek\Moderation\LingotekModerationFactoryInterface;
 use Drupal\cohesion\LayoutCanvas\LayoutCanvas;
 use Drupal\cohesion_elements\Entity\Component;
 use Drupal\Component\Render\FormattableMarkup;
@@ @@
           $pluginId = $field_item->get('plugin_id')->getValue();
           $block_instance = $field_item->getBlock();
           $lingotekConfigTranslation = \Drupal::service('lingotek.config_translation');
-          /** @var \Drupal\Core\Config\TypedConfigManagerInterface $typedConfigManager */
+          /** @var TypedConfigManagerInterface $typedConfigManager */
           $typedConfigManager = \Drupal::service('config.typed');
           $pluginIDName = $block_instance->getPluginDefinition()['id'];
           $blockConfig = $block_instance->getConfiguration();
@@ @@
         if ($layoutBuilderAT) {
           $block_manager = \Drupal::service('plugin.manager.block');
           $lingotekConfigTranslation = \Drupal::service('lingotek.config_translation');
-          /** @var \Drupal\Core\Config\TypedConfigManagerInterface $typedConfigManager */
+          /** @var TypedConfigManagerInterface $typedConfigManager */
           $typedConfigManager = \Drupal::service('config.typed');
           $data[$k] = ['components' => []];
           foreach ($source_entity->{$k} as $field_item) {
             $sectionObject = $field_item->getValue()['section'];
             $components = $sectionObject->getComponents();
-            /** @var \Drupal\layout_builder\SectionComponent $component */
+            /** @var SectionComponent $component */
             foreach ($components as $componentUuid => $component) {
-              /** @var \Drupal\Core\Block\BlockPluginInterface $block_instance */
+              /** @var BlockPluginInterface $block_instance */
               // TODO: Change this to getConfiguration() when is safe to do so.
               // See https://www.drupal.org/project/drupal/issues/3180555.
               $block_instance = $block_manager->createInstance($component->getPluginId(), $component->get('configuration'));
@@ @@
           $layoutField = $source_entity->{OverridesSectionStorage::FIELD_NAME};
           $block_manager = \Drupal::service('plugin.manager.block');
           $lingotekConfigTranslation = \Drupal::service('lingotek.config_translation');
-          /** @var \Drupal\Core\Config\TypedConfigManagerInterface $typedConfigManager */
+          /** @var TypedConfigManagerInterface $typedConfigManager */
           $typedConfigManager = \Drupal::service('config.typed');
           $layout = $layoutField->getValue();
-          /** @var \Drupal\layout_builder\Section $sectionObject */
+          /** @var Section $sectionObject */
           foreach ($layout as $sectionIndex => $section) {
             $sectionObject = $section['section'];
             $components = $sectionObject->getComponents();
-            /** @var \Drupal\layout_builder\SectionComponent $component */
+            /** @var SectionComponent $component */
             foreach ($components as $componentUuid => $component) {
-              /** @var \Drupal\Core\Block\BlockPluginInterface $block_instance */
+              /** @var BlockPluginInterface $block_instance */
               // TODO: Change this to getConfiguration() when is safe to do so.
               // See https://www.drupal.org/project/drupal/issues/3180555.
               $block_instance = $block_manager->createInstance($component->getPluginId(), $component->get('configuration'));
@@ @@
       elseif ($field_type === 'path') {
         if ($source_entity->id()) {
           $source = '/' . $source_entity->toUrl()->getInternalPath();
-          /** @var \Drupal\Core\Entity\EntityStorageInterface $aliasStorage */
+          /** @var EntityStorageInterface $aliasStorage */
           $alias_storage = $this->entityTypeManager->getStorage('path_alias');
-          /** @var \Drupal\path_alias\PathAliasInterface[] $paths */
+          /** @var PathAliasInterface[] $paths */
           $paths = $alias_storage->loadByProperties(['path' => $source, 'langcode' => $source_entity->language()->getId()]);
           if (count($paths) > 0) {
             $path = reset($paths);
@@ @@
   /**
    * Gets an entity's translatable fields.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    *
    * @return array
    *   The translatable fields.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getTranslatableFields(ContentEntityInterface $entity) {
     $entity_type = $entity->getEntityType();
@@ @@
       // We need to load the revision that was uploaded for consistency. For that,
       // we check if we have a valid revision in the response, and if not, we
       // check the date of the uploaded document.
-
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $revision = (isset($data['_lingotek_metadata']) && isset($data['_lingotek_metadata']['_entity_revision'])) ? $data['_lingotek_metadata']['_entity_revision'] : NULL;
       $revision = $this->loadUploadedRevision($entity, $revision);

@@ @@
       }

       // Initialize the translation on the Drupal side, if necessary.
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       if (!$entity->hasTranslation($langcode)) {
         $entity->addTranslation($langcode, $revision->toArray());
       }
@@ @@
               $embedded_entity_id = $revision->{$name}->get($index)
                 ->get('target_id')
                 ->getValue();
-              /** @var \Drupal\Core\Entity\RevisionableInterface $embedded_entity */
+              /** @var RevisionableInterface $embedded_entity */
               $embedded_entity = $this->entityTypeManager->getStorage($target_entity_type_id)
                 ->load($embedded_entity_id);
               if ($embedded_entity !== NULL) {
@@ @@
               $embedded_entity_id = $revision->{$name}->get($index)
                 ->get('target_id')
                 ->getValue();
-              /** @var \Drupal\Core\Entity\RevisionableInterface $embedded_entity */
+              /** @var RevisionableInterface $embedded_entity */
               $embedded_entity = $this->entityTypeManager->getStorage($target_entity_type_id)
                 ->load($embedded_entity_id);
               if ($embedded_entity !== NULL) {
@@ @@
           elseif ($field_type === 'path') {
             $pid = NULL;
             $source = '/' . $entity->toUrl()->getInternalPath();
-            /** @var \Drupal\Core\Entity\EntityStorageInterface $aliasStorage */
+            /** @var EntityStorageInterface $aliasStorage */
             $alias_storage = $this->entityTypeManager->getStorage('path_alias');
-            /** @var \Drupal\path_alias\PathAliasInterface[] $original_paths */
+            /** @var PathAliasInterface[] $original_paths */
             $original_paths = $alias_storage->loadByProperties(['path' => $source, 'langcode' => $entity->getUntranslated()->language()->getId()]);
             $original_path = NULL;
             $alias = $field_data[0]['alias'];
@@ @@
               }
             }
             foreach ($sourceSections as $delta => &$field_item) {
-              /** @var \Drupal\layout_builder\SectionComponent $sectionObject */
+              /** @var SectionComponent $sectionObject */
               $sectionObject = clone $field_item->section;
               $components = $sectionObject->getComponents();
-              /** @var \Drupal\layout_builder\SectionComponent $component */
+              /** @var SectionComponent $component */
               foreach ($components as $componentUuid => &$component) {
                 $config = $component->get('configuration');
                 if (isset($field_data['components'][$componentUuid])) {
@@ @@
             $layout = $layoutField->getValue();

             foreach ($field_data['components'] as $componentUuid => $componentData) {
-              /** @var \Drupal\layout_builder\SectionComponent $originalComponent */
+              /** @var SectionComponent $originalComponent */
               $originalComponent = NULL;
-              /** @var \Drupal\layout_builder\Section $section */
+              /** @var Section $section */
               foreach ($layout as $sectionInfo) {
                 $sectionComponents = $sectionInfo['section']->getComponents();
                 if (isset($sectionComponents[$componentUuid])) {
@@ @@
           elseif ($field_type === 'block_field') {
             $translation->{$name} = NULL;
             foreach ($field_data as $index => $field_item) {
-              /** @var \Drupal\Core\Block\BlockPluginInterface $block */
+              /** @var BlockPluginInterface $block */
               $block = $revision->get($name)->get($index)->getBlock();
               if ($block !== NULL) {
                 $entityData = NULL;
@@ @@

       // If there is any content moderation module is enabled, we may need to
       // perform a transition in their workflow.
-      /** @var \Drupal\lingotek\Moderation\LingotekModerationFactoryInterface $moderation_factory */
+      /** @var LingotekModerationFactoryInterface $moderation_factory */
       $moderation_factory = \Drupal::service('lingotek.moderation_factory');
       $moderation_handler = $moderation_factory->getModerationHandler();
       $moderation_handler->performModerationTransitionIfNeeded($translation);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/lingotek_overrides/src/LingotekConfigurationServiceInterface.php:37

    ---------- begin diff ----------
@@ @@
    *   The entity-type ID.
    * @param $bundle
    *   The bundle name.
-   * @param \Drupal\Core\Field\FieldConfigInterface $field
+   * @param FieldConfigInterface $field
    *   The field configuration.
    * @param mixed $value
    *   The setting value.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


27) modules/contrib/lingotek_overrides/src/LingotekConfigurationService.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides;

+use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Field\FieldConfigInterface;
@@ @@
   /**
    * The lingotek.settings configuration object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * The entity_field.manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * LingotekConfigurationService constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config.factory service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity_field.manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, EntityFieldManagerInterface $entity_field_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/lingotek_overrides/src/Lingotek.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides;

+use Drupal\Core\Logger\LoggerChannelInterface;
 use Drupal\Component\Serialization\SerializationInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * The Lingotek API.
    *
-   * @var \Drupal\lingotek_overrides\Remote\LingotekApiInterface
+   * @var LingotekApiInterface
    */
   protected $api;

@@ @@
   /**
    * The serialization.json service.
    *
-   * @var \Drupal\Component\Serialization\SerializationInterface
+   * @var SerializationInterface
    */
   protected $json;

@@ @@
   /**
    * The logger channel for lingotek_overrides.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $logger;

@@ @@
   /**
    * Lingotek constructor.
    *
-   * @param \Drupal\lingotek_overrides\Remote\LingotekApiInterface $api
+   * @param LingotekApiInterface $api
    *   The lingotek service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\lingotek\LingotekFilterManagerInterface $lingotek_filter_manager
+   * @param LingotekFilterManagerInterface $lingotek_filter_manager
    *   The Lingotek Filter manager.
    * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The lingotek.configuration service.
-   * @param \Drupal\Component\Serialization\SerializationInterface $json
+   * @param SerializationInterface $json
    *   The serialization.json service.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger.
    */
   public function __construct(LingotekApiInterface $api, LanguageLocaleMapperInterface $language_locale_mapper, ConfigFactoryInterface $config_factory, LingotekFilterManagerInterface $lingotek_filter_manager, LingotekConfigurationServiceInterface $lingotek_configuration = NULL, SerializationInterface $json, LoggerChannelFactoryInterface $logger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/lingotek_overrides/src/FormPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides;

+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormPluginInterface;
 /**
  * Interface FormPluginManagerInterface.
  *
@@ @@
    * @param string|null $entity_type_id
    *   The entity-type ID.
    *
-   * @return \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormPluginInterface[]
+   * @return FormPluginInterface[]
    *   The form plugins.
    */
   public function getApplicable($form_id, $entity_type_id = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


30) modules/contrib/lingotek_overrides/src/FormPluginManagerBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides;

+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormPluginInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Plugin\DefaultPluginManager;

@@ @@
    * {@inheritdoc}
    */
   public function getApplicable($form_id, $entity_type_id = NULL) {
-    /** @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormPluginInterface[] $plugins */
+    /** @var FormPluginInterface[] $plugins */
     $plugins = [];

     $definitions = array_filter($this->getDefinitions(), function (&$definition) use ($form_id, $entity_type_id) {
@@ @@

     foreach (array_keys($definitions) as $plugin_name) {
       try {
-        /** @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormPluginInterface $plugin */
+        /** @var FormPluginInterface $plugin */
         $plugin = $this->createInstance($plugin_name);

         if ($plugin->isApplicable([$form_id, $entity_type_id])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/lingotek_overrides/src/FormOptionPluginManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides;

+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface;
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOptionInterface;
 /**
  * Interface FormOptionPluginManagerInterface.
  *
@@ @@
   /**
    * Gets applicable plugins for a the given operations.
    *
-   * @param \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface[] $operations
+   * @param FormOperationInterface[] $operations
    *   The operation plugins.
    * @param string $entity_type_id
    *   The entity-type ID, if any.
    *
-   * @return \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOptionInterface[]
+   * @return FormOptionInterface[]
    *   The applicable option plugins.
    */
   public function getApplicable(array $operations = [], string $entity_type_id = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


32) modules/contrib/lingotek_overrides/src/FormOptionPluginManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides;

+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface;
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOptionInterface;
 use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache.discovery service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
@@ @@
    */
   public function getApplicable(array $operations = [], string $entity_type_id = NULL) {
     $options = [];
-    /** @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface[] $operations */
+    /** @var FormOperationInterface[] $operations */
     foreach ($operations as $operation_id => $operation) {
       foreach ($operation->getOptions() as $option) {
         $options[$option][$operation_id] = $operation;
@@ @@
     }

     $definitions = array_intersect_key($this->getDefinitions(), $options);
-    /** @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOptionInterface[] $plugins */
+    /** @var FormOptionInterface[] $plugins */
     $plugins = [];

     foreach (array_keys($definitions) as $plugin_name) {
       try {
-        /** @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOptionInterface $plugin */
+        /** @var FormOptionInterface $plugin */
         $plugin = $this->createInstance($plugin_name);

         if ($plugin->isApplicable([$operations, $entity_type_id])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/lingotek_overrides/src/FormOperationPluginManager.php:20

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache.discovery service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/lingotek_overrides/src/FormFilterPluginManager.php:20

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache.discovery service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/lingotek_overrides/src/FormFieldPluginManager.php:20

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache.discovery service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module_handler service.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/lingotek_overrides/src/Form/LingotekManagementRelatedEntitiesForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Form;

+use Drupal\lingotek\RelatedEntities\RelatedEntitiesDetectorInterface;
+use Drupal\Core\Database\Query\SelectInterface;
 use Drupal\content_translation\ContentTranslationManagerInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * Override for lingotek.configuration service.
    *
-   * @var \Drupal\lingotek_overrides\LingotekConfigurationServiceInterface
+   * @var LingotekConfigurationServiceInterface
    */
   protected $lingotekConfiguration;

@@ @@
   /**
    * The pager.manager service.
    *
-   * @var \Drupal\Core\Pager\PagerManagerInterface
+   * @var PagerManagerInterface
    */
   protected $pagerManager;

@@ @@
   /**
    * The plugin.manager.related_entities_detector service.
    *
-   * @var \Drupal\lingotek\RelatedEntities\RelatedEntitiesDetectorManager
+   * @var RelatedEntitiesDetectorManager
    */
   protected $relatedEntitiesDetectorManager;

@@ @@
   /**
    * LingotekManagementRelatedEntitiesForm constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The current database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The lingotek service.
    * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager
+   * @param ContentTranslationManagerInterface $content_translation_manager
    *   The content translation manager.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator.
-   * @param \Drupal\Core\Pager\PagerManagerInterface $pager_manager
+   * @param PagerManagerInterface $pager_manager
    *   The pager.manager service.
-   * @param \Drupal\lingotek_overrides\FormFilterPluginManager $form_filter_manager
+   * @param FormFilterPluginManager $form_filter_manager
    *   The form-filter plugin manager.
-   * @param \Drupal\lingotek_overrides\FormFieldPluginManager $form_field_manager
+   * @param FormFieldPluginManager $form_field_manager
    *   The form-field plugin manager.
-   * @param \Drupal\lingotek_overrides\FormOperationPluginManager $form_operation_manager
+   * @param FormOperationPluginManager $form_operation_manager
    *   The form-operation plugin manager.
-   * @param \Drupal\lingotek_overrides\FormOptionPluginManager $form_option_manager
+   * @param FormOptionPluginManager $form_option_manager
    *   The form-option plugin manager.
-   * @param \Drupal\lingotek\RelatedEntities\RelatedEntitiesDetectorManager $related_entities_detector_manager
+   * @param RelatedEntitiesDetectorManager $related_entities_detector_manager
    *   The plugin.manager.related_entities_detector service.
    */
   public function __construct(
@@ @@
     $restrict = $this->getRestrictRelated();
     $this->lingotekConfiguration->setRestrictFilter($restrict);
     // Replace parent::getFilteredEntities() completely.
-    /** @var \Drupal\Core\Entity\ContentEntityInterface[][] $entities */
+    /** @var ContentEntityInterface[][] $entities */
     $entities = [];
     $related = [];
     $visited = [];
@@ @@
     $plugin_definitions = $this->relatedEntitiesDetectorManager->getDefinitions();
     uasort($plugin_definitions, 'Drupal\Component\Utility\SortArray::sortByWeightElement');
     foreach ($plugin_definitions as $plugin_definition_id => $plugin_definition) {
-      /** @var \Drupal\lingotek\RelatedEntities\RelatedEntitiesDetectorInterface $plugin */
+      /** @var RelatedEntitiesDetectorInterface $plugin */
       $plugin = $this->relatedEntitiesDetectorManager->createInstance($plugin_definition_id, []);

       if ($restrict && !($plugin instanceof RestrictedEntitiesDetectorInterface)) {
@@ @@
       if ($entity_ids) {
         $_entities = array_intersect_key($_entities, array_flip($entity_ids));
       }
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       foreach ($_entities as $id => $entity) {
         if ($document_ids) {
           if (!in_array($this->translationService->getDocumentId($entity), $document_ids)) {
@@ @@
       }

       if ($_entities && ($overrides = $filters['lingotek_overrides'] ?? [])) {
-        /** @var \Drupal\Core\Database\Query\SelectInterface $query */
+        /** @var SelectInterface $query */
         $query = NULL;

         foreach ($overrides as $filter_id => $filter_value) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


37) modules/contrib/lingotek_overrides/src/Form/LingotekManagementFormTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Form;

+use Drupal\Core\TempStore\PrivateTempStoreFactory;
+use Drupal\lingotek\LingotekContentTranslationServiceInterface;
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormFilterInterface;
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormFieldInterface;
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface;
+use Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOptionInterface;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\ContentEntityInterface;
@@ @@
   /**
    * The tempstore factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;

@@ @@
   /**
    * The Lingotek content translation service.
    *
-   * @var \Drupal\lingotek\LingotekContentTranslationServiceInterface
+   * @var LingotekContentTranslationServiceInterface
    */
   protected $translationService;

@@ @@
   /**
    * Available form-filter plugins.
    *
-   * @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormFilterInterface[]
+   * @var FormFilterInterface[]
    */
   protected $formFilters = [];

@@ @@
   /**
    * Available form-field plugins.
    *
-   * @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormFieldInterface[]
+   * @var FormFieldInterface[]
    */
   protected $formFields = [];

@@ @@
   /**
    * Available form-operation plugins.
    *
-   * @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOperationInterface[]
+   * @var FormOperationInterface[]
    */
   protected $formOperations = [];

@@ @@
   /**
    * Available form-option plugins.
    *
-   * @var \Drupal\lingotek_overrides\Plugin\lingotek_overrides\FormOptionInterface[]
+   * @var FormOptionInterface[]
    */
   protected $formOptions = [];

@@ @@
   /**
    * Uploads source for translation.
    *
-   * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+   * @param ContentEntityInterface $entity
    *   The entity.
    * @param $language
    *   The language.
@@ @@
   /**
    * Submits the selected operation.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


38) modules/contrib/lingotek_overrides/src/Form/LingotekManagementForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Form;

+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Database\Query\TableSortExtender;
 use Drupal\content_translation\ContentTranslationManagerInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\PagerSelectExtender;
@@ @@
   /**
    * LingotekManagementForm constructor.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The current database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\lingotek\LingotekInterface $lingotek
+   * @param LingotekInterface $lingotek
    *   The Lingotek service.
-   * @param \Drupal\lingotek\LingotekConfigurationServiceInterface $lingotek_configuration
+   * @param LingotekConfigurationServiceInterface $lingotek_configuration
    *   The Lingotek configuration service.
-   * @param \Drupal\lingotek\LanguageLocaleMapperInterface $language_locale_mapper
+   * @param LanguageLocaleMapperInterface $language_locale_mapper
    *   The language-locale mapper.
-   * @param \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager
+   * @param ContentTranslationManagerInterface $content_translation_manager
    *   The content translation manager.
-   * @param \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service
+   * @param LingotekContentTranslationServiceInterface $translation_service
    *   The Lingotek content translation service.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $temp_store_factory
+   * @param PrivateTempStoreFactory $temp_store_factory
    *   The factory for the temp store object.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    * @param string $entity_type_id
    *   The entity type id.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle info.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator.
-   * @param \Drupal\lingotek_overrides\FormFilterPluginManager $form_filter_manager
+   * @param FormFilterPluginManager $form_filter_manager
    *   The form-filter plugin manager.
-   * @param \Drupal\lingotek_overrides\FormFieldPluginManager $form_field_manager
+   * @param FormFieldPluginManager $form_field_manager
    *   The form-field plugin manager.
-   * @param \Drupal\lingotek_overrides\FormOperationPluginManager $form_operation_manager
+   * @param FormOperationPluginManager $form_operation_manager
    *   The form-operation plugin manager.
-   * @param \Drupal\lingotek_overrides\FormOptionPluginManager $form_option_manager
+   * @param FormOptionPluginManager $form_option_manager
    *   The form-option plugin manager.
    */
   public function __construct(
@@ @@
     $items_per_page = $this->getItemsPerPage();
     $temp_store = $this->tempStoreFactory->get($this->getTempStorageFilterKey());

-    /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_type */
+    /** @var EntityTypeInterface $entity_type */
     $entity_type = $this->entityTypeManager->getDefinition($this->entityTypeId);
-    /** @var \Drupal\Core\Database\Query\PagerSelectExtender $query */
+    /** @var PagerSelectExtender $query */
     $query = $this->connection->select($entity_type->getBaseTable(), 'entity_table')->extend('\Drupal\Core\Database\Query\PagerSelectExtender');
     $query->fields('entity_table', [$entity_type->getKey('id')]);

@@ @@
       $query->condition('group_content.type', $valid_values, 'IN');
     }
     if ($jobFilter) {
-      /** @var \Drupal\Core\Entity\EntityTypeInterface $metadata_type */
+      /** @var EntityTypeInterface $metadata_type */
       $metadata_type = $this->entityTypeManager->getDefinition('lingotek_content_metadata');
       $query->innerJoin($metadata_type->getBaseTable(), 'metadata',
         'entity_table.' . $entity_type->getKey('id') . '= metadata.content_entity_id AND metadata.content_entity_type_id = \'' . $entity_type->id() . '\'');
@@ @@
     $query->condition('entity_table.' . $entity_type->getKey('langcode'), LanguageInterface::LANGCODE_NOT_SPECIFIED, '!=');

     if ($targetStatusFilter) {
-      /** @var \Drupal\Core\Database\Query\PagerSelectExtender $subquery */
+      /** @var PagerSelectExtender $subquery */
       $subquery = $this->connection->select($entity_type->getBaseTable(), 'entity_table')->extend('\Drupal\Core\Database\Query\PagerSelectExtender');
       $subquery->fields('entity_table', [$entity_type->getKey('id')]);
       $metadata_type = $this->entityTypeManager->getDefinition('lingotek_content_metadata');
@@ @@
    * @return bool
    *   TRUE if the entity type has bundles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws PluginNotFoundException
    */
   protected function hasBundles() {
     if (is_null($this->hasBundles)) {
@@ @@
   /**
    * Makes a query sortable.
    *
-   * @param \Drupal\Core\Database\Query\PagerSelectExtender $query
+   * @param PagerSelectExtender $query
    *   The query.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    */
   protected function sortableQuery(PagerSelectExtender $query, EntityTypeInterface $entity_type) {
-    /** @var \Drupal\Core\Database\Query\TableSortExtender $table_sort_query */
+    /** @var TableSortExtender $table_sort_query */
     // ::distinct() prevents results from being displayed one per page.
     $table_sort_query = $query->distinct()->extend('Drupal\Core\Database\Query\TableSortExtender');
     $table_sort_query->orderByHeader($this->getHeaders());
@@ @@
       [$table, $field] = explode('.', $field);
       $table_sort_query->fields($table, [$field]);
     }
-    /** @var \Drupal\Core\Database\Query\PagerSelectExtender $query */
+    /** @var PagerSelectExtender $query */
     $query = $table_sort_query->extend('Drupal\Core\Database\Query\PagerSelectExtender');
     $query->condition('entity_data.default_langcode', 1);
     $query->innerJoin($entity_type->getDataTable(), 'entity_data',
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


39) modules/contrib/lingotek_overrides/src/Form/LingotekConfigManagementForm.php:48

    ---------- begin diff ----------
@@ @@
     }
     elseif (substr($this->filter, -7) == '_fields') {
       $showingFields = TRUE;
-      /** @var \Drupal\config_translation\ConfigFieldMapper $mapper */
+      /** @var ConfigFieldMapper $mapper */
       $mapper = $this->mappers[$this->filter];
       $base_entity_type = $mapper->getPluginDefinition()['base_entity_type'];

@@ @@

       $ids = $query->execute();
       $entities = $entity_storage->loadMultiple($ids);
-      /** @var \Drupal\config_translation\ConfigEntityMapper $mapper  */
+      /** @var ConfigEntityMapper $mapper  */
       $mappers = [];
       foreach ($entities as $entity) {
         $new_mapper = clone $mapper;
@@ @@
     });
     $bundles = [];
     foreach ($mappers as $bundle => $mapper) {
-      /** @var \Drupal\config_translation\ConfigEntityMapper $mapper */
+      /** @var ConfigEntityMapper $mapper */
       $bundles[$bundle] = (string) $mapper->getTypeLabel();
     }
     asort($bundles);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


40) modules/contrib/lingotek_overrides/src/Annotation/LingotekOverridesFormPluginBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\lingotek_overrides\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The human-readable name of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * The group the plugin belongs to.
    *
-   * @var string|\Drupal\Core\Annotation\Translation
+   * @var string|Translation
    */
   public $group;
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


41) modules/contrib/lingotek_overrides/lingotek_overrides.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityTypeInterface;
 /**
  * @file
  * Extends default Lingotek services and plugins.
@@ @@
  * Implements hook_entity_type_alter().
  */
 function lingotek_overrides_entity_type_alter(array &$entity_types) {
-  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
+  /** @var EntityTypeInterface[] $entity_types */
   if (isset($entity_types['lingotek_content_metadata'])) {
     $entity_types['lingotek_content_metadata']->setClass('Drupal\lingotek_overrides\Entity\LingotekOverridesContentMetadata');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


42) modules/contrib/lingotek_overrides/lingotek_overrides.api.php:11

    ---------- begin diff ----------
@@ @@
 /**
  * Allows modules to extract translatable content from a field.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   The entity.
- * @param \Drupal\Core\Field\FieldItemListInterface $field
+ * @param FieldItemListInterface $field
  *   The field.
  *
  * @return array
@@ @@
 /**
  * Allows modules to save translated content to its entity.
  *
- * @param \Drupal\Core\Entity\ContentEntityInterface $entity
+ * @param ContentEntityInterface $entity
  *   The entity.
  * @param string $langcode
  *   The translation's language code.
- * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+ * @param FieldDefinitionInterface $field_definition
  *   The field definition.
  * @param array $field_data
  *   The translated content.
    ----------- end diff -----------

 [OK] 42 files have been changed by Rector                                      

