diff --git a/plugins/content_types/scheduler_form_pane.inc b/plugins/content_types/scheduler_form_pane.inc
index 2972187..9e6e978 100644
--- a/plugins/content_types/scheduler_form_pane.inc
+++ b/plugins/content_types/scheduler_form_pane.inc
@@ -18,7 +18,7 @@ $plugin = [
   'edit form' => 'scheduler_form_pane_node_form_menu_content_type_edit_form',
   'render callback' => 'scheduler_form_pane_content_type_render',
   'title' => t('Node form scheduler'),
-  'icon' => drupal_get_path('module', 'ctools') . '/plugins/content_types/node_form/icon_node_form.png',
+  'icon' => \Drupal::service('extension.list.module')->getPath('ctools') . '/plugins/content_types/node_form/icon_node_form.png',
   'description' => t('Scheduler date options on the Node form.'),
   'required context' => new ctools_context_required(t('Form'), 'node_form'),
   'category' => t('Form'),
diff --git a/scheduler.admin.inc b/scheduler.admin.inc
index db1b648..b0de187 100644
--- a/scheduler.admin.inc
+++ b/scheduler.admin.inc
@@ -16,7 +16,7 @@ use Drupal\node\NodeTypeInterface;
 function _scheduler_form_node_type_form_alter(array &$form, FormStateInterface $form_state) {
   $config = \Drupal::config('scheduler.settings');
 
-  /** @var \Drupal\node\NodeTypeInterface $type */
+  /** @var NodeTypeInterface $type */
   $type = $form_state->getFormObject()->getEntity();
 
   $form['#attached']['library'][] = 'scheduler/vertical-tabs';
diff --git a/scheduler.module b/scheduler.module
index 0fb2418..e4c4fc3 100644
--- a/scheduler.module
+++ b/scheduler.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\node\NodeTypeInterface;
+use Drupal\node\NodeInterface;
+use Drupal\scheduler\SchedulerManager;
 /**
  * @file
  * Scheduler publishes and unpublishes nodes on dates specified by the user.
@@ -31,7 +34,7 @@ function scheduler_help($route_name, RouteMatchInterface $route_match) {
       $output = '<h3>' . t('About') . '</h3>';
       $output .= '<p>' . t('The Scheduler module provides the functionality for automatic publishing and unpublishing of nodes at specified future dates.') . '</p>';
       $output .= '<p>' . t('You can read more in the <a href="@readme">readme</a> file or our <a href="@project">project page on Drupal.org</a>.', [
-        '@readme' => $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'scheduler') . '/README.md',
+        '@readme' => $GLOBALS['base_url'] . '/' . \Drupal::service('extension.list.module')->getPath('scheduler') . '/README.md',
         '@project' => 'https://drupal.org/project/scheduler',
       ]) . '</p>';
       break;
@@ -71,7 +74,7 @@ function scheduler_form_node_type_form_alter(array &$form, FormStateInterface $f
  */
 function scheduler_form_node_form_alter(&$form, FormStateInterface $form_state) {
   $config = \Drupal::config('scheduler.settings');
-  /** @var \Drupal\node\NodeTypeInterface $type */
+  /** @var NodeTypeInterface $type */
   $type = $form_state->getFormObject()->getEntity()->type->entity;
   $publishing_enabled = $type->getThirdPartySetting('scheduler', 'publish_enable', $config->get('default_publish_enable'));
   $unpublishing_enabled = $type->getThirdPartySetting('scheduler', 'unpublish_enable', $config->get('default_unpublish_enable'));
@@ -81,7 +84,7 @@ function scheduler_form_node_form_alter(&$form, FormStateInterface $form_state)
   $publishing_displayed = !empty($display->getComponent('publish_on'));
   $unpublishing_displayed = !empty($display->getComponent('unpublish_on'));
 
-  /** @var \Drupal\node\NodeInterface $node */
+  /** @var NodeInterface $node */
   $node = $form_state->getFormObject()->getEntity();
 
   // Invoke all implementations of hook_scheduler_hide_publish_on_field() to
@@ -595,7 +598,7 @@ function scheduler_cron() {
   $scheduler_cron = &drupal_static(__FUNCTION__, FALSE);
   $scheduler_cron = TRUE;
 
-  /** @var \Drupal\scheduler\SchedulerManager $scheduler_manager */
+  /** @var SchedulerManager $scheduler_manager */
   $scheduler_manager = \Drupal::service('scheduler.manager');
   $scheduler_manager->publish();
   $scheduler_manager->unpublish();
@@ -661,7 +664,7 @@ function scheduler_entity_extra_field_info() {
  */
 function scheduler_preprocess_node(&$variables) {
   $date_formatter = \Drupal::service('date.formatter');
-  /** @var \Drupal\node\NodeInterface $node */
+  /** @var NodeInterface $node */
   $node = $variables['node'];
   if (!empty($node->publish_on->value) && $node->publish_on->value && is_numeric($node->publish_on->value)) {
     $variables['publish_on'] = $date_formatter->format($node->publish_on->value, 'long');
@@ -743,14 +746,14 @@ function scheduler_feeds_set_target($source, $entity, $target, $value, $mapping)
  * @param string $action
  *   The action that needs to be checked. Can be 'publish' or 'unpublish'.
  *
- * @return \Drupal\node\NodeTypeInterface[]
+ * @return NodeTypeInterface[]
  *   Array of NodeTypeInterface objects
  */
 function _scheduler_get_scheduler_enabled_node_types($action) {
   $config = \Drupal::config('scheduler.settings');
   $node_types = NodeType::loadMultiple();
   return array_filter($node_types, function ($bundle) use ($action, $config) {
-    /** @var \Drupal\node\NodeTypeInterface $bundle */
+    /** @var NodeTypeInterface $bundle */
     return $bundle->getThirdPartySetting('scheduler', $action . '_enable', $config->get('default_' . $action . '_enable'));
   });
 }
