diff --git a/src/Plugin/Field/FieldFormatter/FlexibleDateRangeDefaultFormatter.php b/src/Plugin/Field/FieldFormatter/FlexibleDateRangeDefaultFormatter.php
index e8c80a1..af321ea 100644
--- a/src/Plugin/Field/FieldFormatter/FlexibleDateRangeDefaultFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/FlexibleDateRangeDefaultFormatter.php
@@ -56,9 +56,9 @@ class FlexibleDateRangeDefaultFormatter extends DateRangeDefaultFormatter {
 
     foreach ($items as $delta => $item) {
       if (!empty($item->start_date) && !empty($item->end_date)) {
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $start_date */
+        /** @var DrupalDateTime $start_date */
         $start_date = $item->start_date;
-        /** @var \Drupal\Core\Datetime\DrupalDateTime $end_date */
+        /** @var DrupalDateTime $end_date */
         $end_date = $item->end_date;
 
         $hide_time = $item->hide_time;
diff --git a/src/Plugin/Field/FieldFormatter/FlexibleDateRangeIntervalFormatter.php b/src/Plugin/Field/FieldFormatter/FlexibleDateRangeIntervalFormatter.php
index e45beaf..d6c7d6f 100644
--- a/src/Plugin/Field/FieldFormatter/FlexibleDateRangeIntervalFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/FlexibleDateRangeIntervalFormatter.php
@@ -33,7 +33,7 @@ class FlexibleDateRangeIntervalFormatter extends FormatterBase {
      * @var FlexibleDateRangeItem $item
      */
     foreach ($items as $delta => $item) {
-      /** @var \Drupal\Core\Field\FieldItemListInterface $item */
+      /** @var FieldItemListInterface $item */
       $start = $item->getValue()['value'];
       $end = $item->getValue()['end_value'];
       $field_type = @$item->getFieldDefinition()->getSettings()['datetime_type'];
diff --git a/tests/src/Functional/FlexibleDateRangeFieldTest.php b/tests/src/Functional/FlexibleDateRangeFieldTest.php
index 6ae20bf..68cda7c 100644
--- a/tests/src/Functional/FlexibleDateRangeFieldTest.php
+++ b/tests/src/Functional/FlexibleDateRangeFieldTest.php
@@ -46,10 +46,10 @@ class FlexibleDateRangeFieldTest extends DateTestBase {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Start date element found.');
-    $this->assertFieldByName("{$field_name}[0][value][time]", '', 'Start time element found.');
-    $this->assertFieldByName("{$field_name}[0][end_value][date]", '', 'End date element found.');
-    $this->assertFieldByName("{$field_name}[0][end_value][time]", '', 'End time element found.');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][time]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][end_value][date]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][end_value][time]", '');
     $this->assertFieldByXPath('//fieldset[@id="edit-' . $field_name . '-0"]/legend', $field_label, 'Fieldset and label found');
     $this->assertFieldByXPath('//fieldset[@aria-describedby="edit-' . $field_name . '-0--description"]', NULL, 'ARIA described-by found');
     $this->assertFieldByXPath('//div[@id="edit-' . $field_name . '-0--description"]', NULL, 'ARIA description found');
@@ -74,14 +74,17 @@ class FlexibleDateRangeFieldTest extends DateTestBase {
       "{$field_name}[0][end_value][date]" => $end_date->format($date_format),
       "{$field_name}[0][end_value][time]" => $end_date->format($time_format),
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
-    $this->assertText(t('entity_test @id has been created.', ['@id' => $id]));
-    $this->assertRaw($start_date->format($date_format));
-    $this->assertRaw($start_date->format($time_format));
-    $this->assertRaw($end_date->format($date_format));
-    $this->assertRaw($end_date->format($time_format));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('entity_test @id has been created.', ['@id' => $id]));
+    $this->assertSession()->responseContains($start_date->format($date_format));
+    $this->assertSession()->responseContains($start_date->format($time_format));
+    $this->assertSession()->responseContains($end_date->format($date_format));
+    $this->assertSession()->responseContains($end_date->format($time_format));
 
     // Verify that the default formatter works.
     $this->displayOptions['settings'] = [
@@ -99,9 +102,9 @@ class FlexibleDateRangeFieldTest extends DateTestBase {
     $end_expected_iso = $this->dateFormatter->format($end_date->getTimestamp(), 'custom', 'Y-m-d\TH:i:s\Z', 'UTC');
     $end_expected_markup = '<time datetime="' . $end_expected_iso . '" class="datetime">' . $end_expected . '</time>';
     $output = $this->renderTestEntity($id);
-    $this->assertContains($start_expected_markup, $output, new FormattableMarkup('Formatted date field using %value format displayed as %expected with %expected_iso attribute.', ['%value' => 'long', '%expected' => $start_expected, '%expected_iso' => $start_expected_iso]));
-    $this->assertContains($end_expected_markup, $output, new FormattableMarkup('Formatted date field using %value format displayed as %expected with %expected_iso attribute.', ['%value' => 'long', '%expected' => $end_expected, '%expected_iso' => $end_expected_iso]));
-    $this->assertContains(' THESEPARATOR ', $output, 'Found proper separator');
+    $this->assertStringContainsString($start_expected_markup, $output, new FormattableMarkup('Formatted date field using %value format displayed as %expected with %expected_iso attribute.', ['%value' => 'long', '%expected' => $start_expected, '%expected_iso' => $start_expected_iso]));
+    $this->assertStringContainsString($end_expected_markup, $output, new FormattableMarkup('Formatted date field using %value format displayed as %expected with %expected_iso attribute.', ['%value' => 'long', '%expected' => $end_expected, '%expected_iso' => $end_expected_iso]));
+    $this->assertStringContainsString(' THESEPARATOR ', $output, 'Found proper separator');
   }
 
   public function testFlexibleDateRangeFieldHideTime() {
@@ -114,10 +117,10 @@ class FlexibleDateRangeFieldTest extends DateTestBase {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Start date element found.');
-    $this->assertFieldByName("{$field_name}[0][value][time]", '', 'Start time element found.');
-    $this->assertFieldByName("{$field_name}[0][end_value][date]", '', 'End date element found.');
-    $this->assertFieldByName("{$field_name}[0][end_value][time]", '', 'End time element found.');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][time]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][end_value][date]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][end_value][time]", '');
     $this->assertFieldByXPath('//fieldset[@id="edit-' . $field_name . '-0"]/legend', $field_label, 'Fieldset and label found');
     $this->assertFieldByXPath('//fieldset[@aria-describedby="edit-' . $field_name . '-0--description"]', NULL, 'ARIA described-by found');
     $this->assertFieldByXPath('//div[@id="edit-' . $field_name . '-0--description"]', NULL, 'ARIA description found');
@@ -143,15 +146,18 @@ class FlexibleDateRangeFieldTest extends DateTestBase {
       "{$field_name}[0][end_value][time]" => $end_date->format($time_format),
       "{$field_name}[0][hide_time]" => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
     $id = $match[1];
-    $this->assertText(t('entity_test @id has been created.', ['@id' => $id]));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('entity_test @id has been created.', ['@id' => $id]));
 
-    $this->assertRaw($start_date->format($date_format));
-    $this->assertRaw($start_date->format($time_format));
-    $this->assertRaw($end_date->format($date_format));
-    $this->assertRaw($end_date->format($time_format));
+    $this->assertSession()->responseContains($start_date->format($date_format));
+    $this->assertSession()->responseContains($start_date->format($time_format));
+    $this->assertSession()->responseContains($end_date->format($date_format));
+    $this->assertSession()->responseContains($end_date->format($time_format));
 
     // Verify that the default formatter works.
     $this->displayOptions['settings'] = [
@@ -171,13 +177,13 @@ class FlexibleDateRangeFieldTest extends DateTestBase {
 
     $output = $this->renderTestEntity($id);
 
-    $this->assertContains($start_date, $output);
-    $this->assertNotContains($start_datetime, $output);
-    $this->assertContains($end_date, $output);
-    $this->assertNotContains($end_datetime, $output);
+    $this->assertStringContainsString($start_date, $output);
+    $this->assertStringNotContainsString($start_datetime, $output);
+    $this->assertStringContainsString($end_date, $output);
+    $this->assertStringNotContainsString($end_datetime, $output);
 
 
-    $this->assertContains(' THESEPARATOR ', $output, 'Found proper separator');
+    $this->assertStringContainsString(' THESEPARATOR ', $output, 'Found proper separator');
   }
 
 }
