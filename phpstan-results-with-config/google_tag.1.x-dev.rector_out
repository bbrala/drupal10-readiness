modules/contrib/google_tag/google_tag.api.php
modules/contrib/google_tag/google_tag.install
modules/contrib/google_tag/google_tag.module
modules/contrib/google_tag/src/ConditionBase.php
modules/contrib/google_tag/src/ContainerAccessControlHandler.php
modules/contrib/google_tag/src/ContainerController.php
modules/contrib/google_tag/src/ContainerListBuilder.php
modules/contrib/google_tag/src/Entity/Container.php
modules/contrib/google_tag/src/Entity/ContainerManager.php
modules/contrib/google_tag/src/Entity/ContainerManagerInterface.php
modules/contrib/google_tag/src/Form/ContainerForm.php
modules/contrib/google_tag/src/Form/ContainerTrait.php
modules/contrib/google_tag/src/Form/SettingsForm.php
modules/contrib/google_tag/src/Plugin/Condition/Domain.php
modules/contrib/google_tag/src/Plugin/Condition/Language.php
modules/contrib/google_tag/tests/src/Functional/GTMMultipleTest.php
modules/contrib/google_tag/tests/src/Functional/GTMTestBase.php

13 files with changes
=====================

1) modules/contrib/google_tag/tests/src/Functional/GTMTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\google_tag\Functional;

+use Drupal\user\Entity\User;
 use Drupal\google_tag\Entity\Container;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * The admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;

@@ @@
   /**
    * The non-admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $nonAdminUser;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->defaultTheme = 'stark';
     parent::setUp();
     $this->basePath = $this->config('google_tag.settings')->get('uri');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/google_tag/tests/src/Functional/GTMMultipleTest.php:87

    ---------- begin diff ----------
@@ @@
           $url = $generator->transformRelative($generator->generateAbsoluteString($uri));
         }
         else {
-          $url = file_url_transform_relative(file_create_url($uri));
+          $url = \Drupal::service('file_url_generator')->generateString($uri);
         }
         $function = "verify{$type}Tag";
         $this->$function($url, $this->variables[$key]);
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/google_tag/src/Plugin/Condition/Language.php:24

    ---------- begin diff ----------
@@ @@
   /**
    * The Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a language condition plugin.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    * @param array $configuration
    *   The plugin configuration, i.e. an array with configuration values keyed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/google_tag/src/Plugin/Condition/Domain.php:33

    ---------- begin diff ----------
@@ @@
    *
    * @param \Drupal\domain\DomainNegotiator $domain_negotiator
    *   The domain negotiator service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage_manager
+   * @param EntityStorageInterface $storage_manager
    *   The entity storage manager.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/google_tag/src/Form/ContainerTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_tag\Form;

+use Drupal\google_tag\Entity\Container;
 use Drupal\Core\Form\FormStateInterface;

 /**
@@ @@
   /**
    * The container entity.
    *
-   * @var \Drupal\google_tag\Entity\Container
+   * @var Container
    */
   protected $container;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/google_tag/src/Form/ContainerForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_tag\Form;

+use Drupal\Core\Condition\ConditionManager;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Executable\ExecutableManagerInterface;
@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;

@@ @@
   /**
    * The context repository service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * Constructs a ContainerForm object.
    *
-   * @param \Drupal\Core\Executable\ExecutableManagerInterface $condition_manager
+   * @param ExecutableManagerInterface $condition_manager
    *   The ConditionManager for building the insertion conditions.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
    */
   public function __construct(ExecutableManagerInterface $condition_manager, ContextRepositoryInterface $context_repository) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
         $condition = $conditions->get($condition_id);
       }
       else {
-        /** @var \Drupal\Core\Condition\ConditionInterface $condition */
+        /** @var ConditionInterface $condition */
         $condition = $this->conditionManager->createInstance($condition_id, []);
       }
       $form_state->set(['conditions', $condition_id], $condition);
@@ @@
   /**
    * Returns the form elements from the condition plugin object.
    *
-   * @param \Drupal\Core\Condition\ConditionInterface $condition
+   * @param ConditionInterface $condition
    *   The condition plugin.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function validateConditionsForm(array $form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function submitConditionsForm(array $form, FormStateInterface $form_state) {
@@ @@
    *   The machine name.
    * @param array $element
    *   An array containing the structure of the 'id' element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return bool
@@ @@
    *   Whether or not the container machine name is taken.
    */
   public function containerExists($value, array $element, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $container */
+    /** @var ConfigEntityInterface $container */
     $container = $form_state->getFormObject()->getEntity();
     return (bool) $this->entityTypeManager->getStorage($container->getEntityTypeId())
       ->getQuery()
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/google_tag/src/Entity/ContainerManagerInterface.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a ContainerManager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   The cache backend.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory, FileSystemInterface $file_system, CacheBackendInterface $cache, MessengerInterface $messenger, LoggerChannelFactoryInterface $logger_factory);
@@ @@
    *
    * @todo Which class-interface to use on @param?
    *
-   * @param Drupal\Core\Config\Entity\ConfigEntityInterface $container
+   * @param ConfigEntityInterface $container
    *   The container configuration entity.
    *
    * @return bool
@@ @@
   /**
    * Saves JS snippet files based on current settings.
    *
-   * @param Drupal\Core\Config\Entity\ConfigEntityInterface $container
+   * @param ConfigEntityInterface $container
    *   The container configuration entity.
    *
    * @return bool
@@ @@
   /**
    * Deletes snippet files for a container.
    *
-   * @param Drupal\Core\Config\Entity\ConfigEntityInterface $container
+   * @param ConfigEntityInterface $container
    *   The container configuration entity.
    *
    * @return bool
@@ @@
   /**
    * Finds snippet files for a container.
    *
-   * @param Drupal\Core\Config\Entity\ConfigEntityInterface $container
+   * @param ConfigEntityInterface $container
    *   The container configuration entity.
    *
    * @return bool
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/google_tag/src/Entity/ContainerManager.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\google_tag\Entity;

 // use Drupal\google_tag\Entity\ContainerManagerInterface;
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The module configuration.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;

@@ @@
   /**
    * The file system.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cache;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/google_tag/src/Entity/Container.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_tag\Entity;

+use Drupal\Core\Executable\ExecutableManagerInterface;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Condition\ConditionPluginCollection;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
@@ @@
   /**
    * The insertion condition collection.
    *
-   * @var \Drupal\Core\Condition\ConditionPluginCollection
+   * @var ConditionPluginCollection
    */
   protected $conditionCollection;

@@ @@
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected $conditionPluginManager;

@@ @@
       $url = $generator->transformRelative($generator->generateAbsoluteString($uri));
     }
     else {
-      $url = file_url_transform_relative(file_create_url($uri));
+      $url = \Drupal::service('file_url_generator')->generateString($uri);
     }
     $query_string = \Drupal::state()->get('system.css_js_query_string') ?: '0';
     $attachment = [
@@ @@
    * @param string $instance_id
    *   The condition plugin instance ID.
    *
-   * @return \Drupal\Core\Condition\ConditionInterface
+   * @return ConditionInterface
    *   A condition plugin.
    */
   public function getInsertionCondition($instance_id) {
@@ @@
   /**
    * Returns the set of insertion conditions for this container.
    *
-   * @return \Drupal\Core\Condition\ConditionPluginCollection
+   * @return ConditionPluginCollection
    *   A collection of configured condition plugins.
    */
   public function getInsertionConditions() {
@@ @@
   /**
    * Gets the condition plugin manager.
    *
-   * @return \Drupal\Core\Executable\ExecutableManagerInterface
+   * @return ExecutableManagerInterface
    *   The condition plugin manager.
    */
   protected function conditionPluginManager() {
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/google_tag/src/ContainerController.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Route title callback.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
-   * @param \Drupal\Core\Entity\EntityInterface $_entity
+   * @param EntityInterface $_entity
    *   (optional) An entity, passed in directly from the request attributes.
    *
    * @return string|null
@@ @@
   /**
    * Enables a Container object.
    *
-   * @param \Drupal\google_tag\Entity\Container $google_tag_container
+   * @param Container $google_tag_container
    *   The Container object to enable.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response to the google_tag_container listing page.
    *
    * @todo The parameter name must match that used in routing.yml although the
@@ @@
   /**
    * Disables a Container object.
    *
-   * @param \Drupal\google_tag\Entity\Container $google_tag_container
+   * @param Container $google_tag_container
    *   The Container object to disable.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect response to the google_tag_container listing page.
    */
   public function disable(Container $google_tag_container) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/google_tag/src/ContainerAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_tag;

+use Drupal\google_tag\Entity\Container;
+use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Component\Plugin\Exception\ContextException;
 use Drupal\Component\Plugin\Exception\MissingValueContextException;
 use Drupal\Core\Access\AccessResult;
@@ @@

   // Comment next to declare resolveConditions() here.
   // use ConditionAccessResolverTrait;
-
   /**
    * The plugin context handler.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextHandlerInterface
+   * @var ContextHandlerInterface
    */
   protected $contextHandler;

@@ @@
   /**
    * The context manager service.
    *
-   * @var \Drupal\Core\Plugin\Context\ContextRepositoryInterface
+   * @var ContextRepositoryInterface
    */
   protected $contextRepository;

@@ @@
   /**
    * The container entity for which to check access.
    *
-   * @var \Drupal\google_tag\Entity\Container
+   * @var Container
    */
   protected $entity;

@@ @@
   /**
    * Constructs a container access control handler.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Plugin\Context\ContextHandlerInterface $context_handler
+   * @param ContextHandlerInterface $context_handler
    *   The ContextHandler for applying contexts to conditions properly.
-   * @param \Drupal\Core\Plugin\Context\ContextRepositoryInterface $context_repository
+   * @param ContextRepositoryInterface $context_repository
    *   The lazy context repository service.
    */
   public function __construct(EntityTypeInterface $entity_type, ContextHandlerInterface $context_handler, ContextRepositoryInterface $context_repository) {
@@ @@

     // @todo Why is this not default code for an entity that uses the condition
     // plugin interface? Most of it applies generally.
-
     // Store entity to have access in resolveConditions().
-    /** @var \Drupal\google_tag\Entity\Container $entity */
+    /** @var Container $entity */
     $this->entity = $entity;

     $conditions = [];
@@ @@
   /**
    * Merges cacheable metadata from conditions onto the access result object.
    *
-   * @param \Drupal\Core\Access\AccessResult $access
+   * @param AccessResult $access
    *   The access result object.
-   * @param \Drupal\Core\Condition\ConditionInterface[] $conditions
+   * @param ConditionInterface[] $conditions
    *   List of insertion conditions.
    */
   protected function mergeCacheabilityFromConditions(AccessResult $access, array $conditions) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/google_tag/src/ConditionBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\google_tag;

+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Condition\ConditionInterface;
 use Drupal\Core\Executable\ExecutableManagerInterface;
 use Drupal\Core\Executable\ExecutablePluginBase;
@@ @@
   /**
    * The condition manager to proxy execute calls through.
    *
-   * @var \Drupal\Core\Executable\ExecutableManagerInterface
+   * @var ExecutableManagerInterface
    */
   protected $executableManager;

@@ @@
    * @param string $string
    *   The string to manipulate.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The markup object.
    */
   public function specialT($string) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/google_tag/google_tag.api.php:12

    ---------- begin diff ----------
@@ @@
  * @addtogroup hooks
  * @{
  */
-
 /**
  * Alter the state of snippet insertion on the current page response.
  *
@@ @@
  *
  * @param bool $satisfied
  *   The snippet insertion state.
- * @param \Drupal\google_tag\Entity\Container $container
+ * @param Container $container
  *   The associated container object.
  */
 function hook_google_tag_insert_alter(&$satisfied, Container $container) {
@@ @@
  * @param array $snippets
  *   Associative array of snippets keyed by type: script, noscript and
  *   data_layer.
- * @param \Drupal\google_tag\Entity\Container $container
+ * @param Container $container
  *   The associated container object.
  */
 function hook_google_tag_snippets_alter(array &$snippets, Container $container) {
    ----------- end diff -----------

 [OK] 13 files have been changed by Rector                                      

