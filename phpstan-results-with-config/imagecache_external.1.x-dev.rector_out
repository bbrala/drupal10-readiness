modules/contrib/imagecache_external/imagecache_external.api.php
modules/contrib/imagecache_external/imagecache_external.install
modules/contrib/imagecache_external/imagecache_external.module
modules/contrib/imagecache_external/src/Form/FlushExternalImages.php
modules/contrib/imagecache_external/src/Form/SettingsForm.php
modules/contrib/imagecache_external/src/Plugin/Field/FieldFormatter/ImagecacheExternalImage.php
modules/contrib/imagecache_external/src/Plugin/Field/FieldFormatter/ImagecacheExternalResponsiveImage.php

4 files with changes
====================

1) modules/contrib/imagecache_external/src/Plugin/Field/FieldFormatter/ImagecacheExternalResponsiveImage.php:2

    ---------- begin diff ----------
@@ @@

 namespace Drupal\imagecache_external\Plugin\Field\FieldFormatter;

+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\responsive_image\Entity\ResponsiveImageStyle;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Link;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * The responsive image style storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $responsiveImageStyleStorage;

@@ @@
   /**
    * The image factory service.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The link generator.
    *
-   * @var \Drupal\Core\Utility\LinkGeneratorInterface
+   * @var LinkGeneratorInterface
    */
   protected $linkGenerator;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   Any third party settings.
    * @param \Drupal\Core\Image\ImageFactory
    *   The image factory service.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $responsive_image_style_storage
+   * @param EntityStorageInterface $responsive_image_style_storage
    *   The responsive image style storage.
-   * @param \Drupal\Core\Utility\LinkGeneratorInterface $link_generator
+   * @param LinkGeneratorInterface $link_generator
    *   The link generator service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
    */
   public function __construct($plugin_id, $plugin_definition, $field_definition, array $settings, $label, $view_mode, array $third_party_settings, ImageFactory $image_factory, EntityStorageInterface $responsive_image_style_storage, LinkGeneratorInterface $link_generator, AccountInterface $current_user) {
@@ @@
     $responsive_image_options = [];
     $responsive_image_styles = $this->responsiveImageStyleStorage->loadMultiple();
     if ($responsive_image_styles && !empty($responsive_image_styles)) {
-      /** @var \Drupal\responsive_image\Entity\ResponsiveImageStyle $responsive_image_style */
+      /** @var ResponsiveImageStyle $responsive_image_style */
       foreach ($responsive_image_styles as $machine_name => $responsive_image_style) {
         if ($responsive_image_style->hasImageStyleMappings()) {
           $responsive_image_options[$machine_name] = $responsive_image_style->label();
@@ @@
       }

       if (isset($link_file)) {
-        $url = Url::fromUri(file_create_url($image_path));
+        $url = \Drupal::service('file_url_generator')->generate($image_path);
       }

       $image = $this->imageFactory->get($image_path);
@@ @@
       }

       if ($url) {
-        $rendered_image = render($image_build);
+        $rendered_image = \Drupal::service('renderer')->render($image_build);
         $elements[$delta] = Link::fromTextAndUrl($rendered_image, $url)->toRenderable();
       }
       else {
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/imagecache_external/src/Plugin/Field/FieldFormatter/ImagecacheExternalImage.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Image\ImageFactory
+   * @var ImageFactory
    */
   protected $imageFactory;

@@ @@
       }

       if (isset($link_file)) {
-        $url = Url::fromUri(file_create_url($image_path));
+        $url = \Drupal::service('file_url_generator')->generate($image_path);
       }

       $image = $this->imageFactory->get($image_path);
@@ @@
       }

       if ($url) {
-        $rendered_image = render($image_build);
+        $rendered_image = \Drupal::service('renderer')->render($image_build);
         $elements[$delta] = Link::fromTextAndUrl($rendered_image, $url)->toRenderable();
       }
       else {
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * RenderRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/imagecache_external/src/Form/SettingsForm.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The file system service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs a new SettingsForm.
    *
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   * @param FileSystemInterface $fileSystem
    *   The file system service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(FileSystemInterface $fileSystem, ConfigFactoryInterface $config_factory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/imagecache_external/imagecache_external.module:0

    ---------- begin diff ----------
@@ @@
 <?php
+use Drupal\Core\Image\Image;
+use Drupal\Core\Config\ImmutableConfig;
 /**
  * @file
  * Allows the usage of Image Styles on external images.
@@ @@
         return \Drupal::service('file_system')->saveData($result->getBody(), $cachepath, FileSystemInterface::EXISTS_REPLACE);
       }
       else {
-        $file = file_save_data($result->getBody(), $cachepath, FileSystemInterface::EXISTS_REPLACE);
+        $file = \Drupal::service('file.repository')->writeData($result->getBody(), $cachepath, FileSystemInterface::EXISTS_REPLACE);
         return $file->getFileUri();
       }
     }
@@ @@
   // Check if the path contains 'imagecache/external'.
   // If not, we fallback to the Image module.
   if (strpos($uri, '/' . imagecache_external_config()->get('imagecache_directory') . '/') > 0) {
-    /** @var \Drupal\Core\Image\Image $image */
+    /** @var Image $image */
     $image = Drupal::service('image.factory')->get($uri);
     // For safety, we only allow our own mimetypes.
     if (in_array($image->getMimeType(), imagecache_external_allowed_mimetypes())) {
@@ @@
 /**
  * Helper function that returns a config object for imagecache_external.
  *
- * @return \Drupal\Core\Config\ImmutableConfig
+ * @return ImmutableConfig
  *   An immutable configuration object.
  */
 function imagecache_external_config() {
    ----------- end diff -----------

Applied rules:
 * FileSaveDataRector
 * ArgumentRemoverRector


 [OK] 4 files have been changed by Rector                                       

