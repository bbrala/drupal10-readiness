modules/contrib/file_upload_secure_validator/file_upload_secure_validator.install
modules/contrib/file_upload_secure_validator/file_upload_secure_validator.module
modules/contrib/file_upload_secure_validator/src/FileUploadSecureValidatorServiceProvider.php
modules/contrib/file_upload_secure_validator/src/Form/SettingsForm.php
modules/contrib/file_upload_secure_validator/src/Service/FileUploadSecureValidator.php
modules/contrib/file_upload_secure_validator/tests/src/Functional/Update/FileUploadSecureValidatorUpdateTest.php
modules/contrib/file_upload_secure_validator/tests/src/Unit/FileUploadSecureValidatorTest.php

5 files with changes
====================

1) modules/contrib/file_upload_secure_validator/tests/src/Unit/FileUploadSecureValidatorTest.php:113

    ---------- begin diff ----------
@@ @@
    * We are only interested in the uri and mimetype getters.
    */
   private function mockFile($uri, $mimetype) {
-    $fileMock = $this->getMockBuilder('Drupal\file\Entity\File')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $fileMock = $this->createMock('Drupal\file\Entity\File');
     $fileMock->expects($this->any())
       ->method('getFileUri')
       ->willReturn($uri);
@@ @@
    */
   private function getTranslationManagerMock() {

-    $translationManager = $this->getMockBuilder('Drupal\Core\StringTranslation\TranslationManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $translationManager = $this->createMock('Drupal\Core\StringTranslation\TranslationManager');
     $translationManager->expects($this->any())
       ->method('translate')
       ->will($this->returnArgument(0));
@@ @@
    */
   private function getLoggerFactoryMock() {

-    $loggerChannel = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannel')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $loggerChannel = $this->createMock('Drupal\Core\Logger\LoggerChannel');
     $loggerChannel->expects($this->any())
       ->method('error')
       ->will($this->returnValue(''));

-    $loggerChannelFactory = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannelFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $loggerChannelFactory = $this->createMock('Drupal\Core\Logger\LoggerChannelFactory');
     $loggerChannelFactory->expects($this->any())
       ->method('get')
       ->will($this->returnValue($loggerChannel));
@@ @@
         'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
       ],
     ];
-    $configuration = $this->getMockBuilder('Drupal\Core\Config\ConfigFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $configuration = $this->createMock('Drupal\Core\Config\ConfigFactory');
     $configuration->expects($this->any())
       ->method('get')
       ->with($this->equalTo('mime_types_equivalence_groups'))
       ->will($this->returnValue($mimeTypesEquivalenceGroups));

-    $configFactory = $this->getMockBuilder('Drupal\Core\Config\ConfigFactory')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $configFactory = $this->createMock('Drupal\Core\Config\ConfigFactory');
     $configFactory->expects($this->any())
       ->method('get')
       ->with($this->equalTo('file_upload_secure_validator.settings'))
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/file_upload_secure_validator/src/Service/FileUploadSecureValidator.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * Logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerChannelFactory;

@@ @@
   /**
    * String translation service.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $translator;

@@ @@
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Constructs the file upload secure validation service.
    *
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   * @param LoggerChannelFactoryInterface $logger_factory
    *   The logger factory service object.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translator
+   * @param TranslationInterface $translator
    *   The string translation service object.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration factory service object.
    *
    * @return void
@@ @@
   /**
    * File validation function.
    *
-   * @param \Drupal\file\Entity\File $file
+   * @param File $file
    *   The file to be uploaded.
    */
   public function validate(File $file) {
@@ @@
     $mimeByFilename = $file->getMimeType();
     // Get mime type from fileinfo.
     try {
-      $mimeByFileinfo = (new SymfonyFileinfoMimeTypeGuesser())->guess($file->getFileUri());
+      $mimeByFileinfo = (new \Symfony\Component\Mime\FileinfoMimeTypeGuesser())->guess($file->getFileUri());
     }
     catch (FileNotFoundException $e) {
       // Return error.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector


3) modules/contrib/file_upload_secure_validator/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\file_upload_secure_validator\Form;

+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\file_upload_secure_validator\Service\FileUploadSecureValidator;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * FileUploadSecureValidator definition.
    *
-   * @var \Drupal\file_upload_secure_validator\Service\FileUploadSecureValidator
+   * @var FileUploadSecureValidator
    */
   protected $fileUploadSecureValidator;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/file_upload_secure_validator/src/FileUploadSecureValidatorServiceProvider.php:16

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function alter(ContainerBuilder $container) {
-    if (!SymfonyFileinfoMimeTypeGuesser::isSupported()) {
+    if (!\Symfony\Component\Mime\FileinfoMimeTypeGuesser::isSupported()) {
       $container->removeDefinition('file_upload_secure_validator');
     }
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/file_upload_secure_validator/file_upload_secure_validator.install:0

    ---------- begin diff ----------
@@ @@
 <?php

-/**
- * @file
- * Install, update and uninstall functions for file_upload_secure_validator.
- */
+use Symfony\Component\Mime\FileinfoMimeTypeGuesser;

-use Symfony\Component\HttpFoundation\File\MimeType\FileinfoMimeTypeGuesser as SymfonyFileinfoMimeTypeGuesser;
-
 /**
  * Implements hook_requirements().
  */
@@ @@
   $requirements['fileinfo_ext']['value'] = t('Found');

   if ($phase == 'install' || $phase == 'runtime') {
-    if (!SymfonyFileinfoMimeTypeGuesser::isSupported()) {
+    if (!FileinfoMimeTypeGuesser::isSupported()) {
       $requirements['fileinfo_ext']['value'] = t('Fileinfo extension not available');
       $requirements['fileinfo_ext']['severity'] = REQUIREMENT_ERROR;
       $requirements['fileinfo_ext']['description'] = t('File upload secure validator module uses Fileinfo extension. It seems as if Fileinfo extension is not loaded/enabled. If you are using Windows, may be, you should uncomment php_fileinfo.dll in php.ini file.');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * RenameClassRector


 [OK] 5 files have been changed by Rector                                       

