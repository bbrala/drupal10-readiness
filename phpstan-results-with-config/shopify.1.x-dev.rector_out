modules/contrib/shopify/shopify.install
modules/contrib/shopify/shopify.module
modules/contrib/shopify/shopify.post_update.php
modules/contrib/shopify/shopify_product.page.inc
modules/contrib/shopify/shopify_product_variant.page.inc
modules/contrib/shopify/src/Batch/ShopifyCollectionBatch.php
modules/contrib/shopify/src/Batch/ShopifyProductBatch.php
modules/contrib/shopify/src/Command/ShopifyCommand.php
modules/contrib/shopify/src/Controller/ShopifyBuyButtonController.php
modules/contrib/shopify/src/Controller/ShopifyRedirect.php
modules/contrib/shopify/src/Controller/ShopifyWebhook.php
modules/contrib/shopify/src/Entity/Form/ShopifyProductDeleteForm.php
modules/contrib/shopify/src/Entity/Form/ShopifyProductForm.php
modules/contrib/shopify/src/Entity/Form/ShopifyProductSettingsForm.php
modules/contrib/shopify/src/Entity/Form/ShopifyProductVariantDeleteForm.php
modules/contrib/shopify/src/Entity/Form/ShopifyProductVariantForm.php
modules/contrib/shopify/src/Entity/Form/ShopifyProductVariantSettingsForm.php
modules/contrib/shopify/src/Entity/ShopifyEntityTrait.php
modules/contrib/shopify/src/Entity/ShopifyProduct.php
modules/contrib/shopify/src/Entity/ShopifyProductVariant.php
modules/contrib/shopify/src/Entity/ShopifyProductVariantViewsData.php
modules/contrib/shopify/src/Entity/ShopifyProductViewsData.php
modules/contrib/shopify/src/Event/ShopifyTermRedirectSubscriber.php
modules/contrib/shopify/src/Event/ShopifyWebhookEvent.php
modules/contrib/shopify/src/Event/ShopifyWebhookSubscriber.php
modules/contrib/shopify/src/Form/ShopifyApiAdminForm.php
modules/contrib/shopify/src/Form/ShopifySettingsAdminForm.php
modules/contrib/shopify/src/Form/ShopifySyncAdminForm.php
modules/contrib/shopify/src/Form/ShopifyWebhooksAdminForm.php
modules/contrib/shopify/src/Plugin/Block/ShopifyCartBlock.php
modules/contrib/shopify/src/Plugin/Field/FieldFormatter/ShopifyPriceFormatter.php
modules/contrib/shopify/src/Plugin/Field/FieldFormatter/ShopifyVariantTitleFormatter.php
modules/contrib/shopify/src/Plugin/Field/FieldFormatter/ShopifyWeightFormatter.php
modules/contrib/shopify/src/Plugin/views/argument/ShopifyCollectionsArgument.php
modules/contrib/shopify/src/Plugin/views/argument/ShopifyTagsArgument.php
modules/contrib/shopify/src/Plugin/views/filter/ShopifyCollectionsFilter.php
modules/contrib/shopify/src/Plugin/views/filter/ShopifyTagsFilter.php
modules/contrib/shopify/src/ShopifyProductAccessControlHandler.php
modules/contrib/shopify/src/ShopifyProductInterface.php
modules/contrib/shopify/src/ShopifyProductListBuilder.php
modules/contrib/shopify/src/ShopifyProductVariantAccessControlHandler.php
modules/contrib/shopify/src/ShopifyProductVariantInterface.php
modules/contrib/shopify/src/ShopifyProductVariantListBuilder.php
modules/contrib/shopify/src/ShopifyProductViewBuilder.php
modules/contrib/shopify/src/ShopifyProductViewsData.php
modules/contrib/shopify/src/Utility/ShopifyBuyButtonUtility.php
modules/contrib/shopify/tests/modules/shopify_test/shopify_test.install
modules/contrib/shopify/tests/src/Functional/SmokeTest.php
modules/contrib/shopify/tests/src/Functional/SyncTest.php
modules/contrib/shopify/tests/src/FunctionalJavascript/ShopifyBuyButtonTest.php

16 files with changes
=====================

1) modules/contrib/shopify/tests/src/FunctionalJavascript/ShopifyBuyButtonTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\shopify\FunctionalJavascript;

+use Drupal\shopify\Entity\ShopifyProduct;
+use Drupal\FunctionalJavascriptTests\JSWebAssert;
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;

 /**
@@ @@
   /**
    * Dummy product that refers to a real product id.
    *
-   * @var \Drupal\shopify\Entity\ShopifyProduct
+   * @var ShopifyProduct
    */
   protected $product;

@@ @@
    */
   public function testBuyButtonLoads() {
     $this->drupalGet($this->product->toUrl()->toString());
-    /** @var \Drupal\FunctionalJavascriptTests\JSWebAssert $assert_session */
+    /** @var JSWebAssert $assert_session */
     $assert_session = $this->assertSession();
     $button = $assert_session->waitForElementVisible('css', '.shopify-buy__btn');
     $this->assertEquals($button->getText(), 'Add to cart');
@@ @@
    */
   public function testAddProductToCart() {
     $this->drupalGet($this->product->toUrl()->toString());
-    /** @var \Drupal\FunctionalJavascriptTests\JSWebAssert $assert_session */
+    /** @var JSWebAssert $assert_session */
     $assert_session = $this->assertSession();
     $button = $assert_session->waitForElementVisible('css', '.shopify-buy__btn');
     $button->click();
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/shopify/tests/src/Functional/SyncTest.php:29

    ---------- begin diff ----------
@@ @@
     $this->drupalGet('/admin/config/system/shopify/sync');
     $this->assertSession()->statusCodeEquals(200);

-    $this->drupalPostForm(NULL, [
+    $this->submitForm([
       'num_per_batch' => 10,
       'delete_products_first' => FALSE,
       'force_update' => TRUE,
     ], 'Start Products Sync');

-    $this->assertText('Synced 2 products');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Synced 2 products');

     $product = \Drupal::entityTypeManager()->getStorage('shopify_product')->load(1);
     $this->assertEquals(
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


3) modules/contrib/shopify/tests/src/Functional/SmokeTest.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Make sure to complete the normal setup steps first.
     parent::setUp();

@@ @@
     $this->assertSession()->statusCodeEquals(200);

     // Confirm that the front page contains the standard text.
-    $this->assertText('Welcome to Drupal');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Welcome to Drupal');
   }

   /**
@@ @@

     $this->drupalGet('/admin/config/system/shopify');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Shopify Store Settings');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Shopify Store Settings');

   }

@@ @@

     $this->drupalGet('/admin/config/system/shopify_api');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Shopify API Settings');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Shopify API Settings');

   }
    ----------- end diff -----------

Applied rules:
 * AssertTextRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/shopify/src/ShopifyProductViewBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\shopify;

+use Drupal\shopify\Controller\ShopifyBuyButtonController;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityViewBuilder;
@@ @@
     $form = $display->getComponent('add_to_cart_form');
     if ($form) {

-      /** @var \Drupal\shopify\Controller\ShopifyBuyButtonController $buy_button_controller */
+      /** @var ShopifyBuyButtonController $buy_button_controller */
       $buy_button_controller = \Drupal::service('shopify.buy_button_controller');
       $build['add_to_cart_form']['add_to_cart'] = $buy_button_controller->buildForProduct($entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/shopify/src/Plugin/Block/ShopifyCartBlock.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\shopify\Plugin\Block;

+use Drupal\shopify\Controller\ShopifyBuyButtonController;
 use Drupal\Core\Block\BlockBase;

 /**
@@ @@
    * {@inheritdoc}
    */
   public function build() {
-    /** @var \Drupal\shopify\Controller\ShopifyBuyButtonController $buy_button_controller */
+    /** @var ShopifyBuyButtonController $buy_button_controller */
     $buy_button_controller = \Drupal::service('shopify.buy_button_controller');
     return $buy_button_controller->buildForProduct(NULL);
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/shopify/src/Form/ShopifyApiAdminForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * HTTP request client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/shopify/src/Event/ShopifyWebhookSubscriber.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Process an incoming webhook.
    *
-   * @param \Drupal\shopify\Event\ShopifyWebhookEvent $event
+   * @param ShopifyWebhookEvent $event
    *   Logs an incoming webhook of the setting is on.
    */
   public function onIncomingWebhook(ShopifyWebhookEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


8) modules/contrib/shopify/src/Event/ShopifyWebhookEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\shopify\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class ShopifyWebhookEvent.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/shopify/src/Event/ShopifyTermRedirectSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\shopify\Event;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\shopify\Entity\ShopifyProduct;
 use Drupal\taxonomy\Entity\Term;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
    *
    * @todo: Not sure this is the best way of doing things.
    */
-  public function checkForRedirection(GetResponseEvent $event) {
+  public function checkForRedirection(RequestEvent $event) {
     if (!($term = $event->getRequest()->get('taxonomy_term'))) {
       return;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/shopify/src/Entity/ShopifyProductVariant.php:173

    ---------- begin diff ----------
@@ @@
   /**
    * Returns the associated parent product.
    *
-   * @return \Drupal\shopify\Entity\ShopifyProduct
+   * @return ShopifyProduct
    *   Product.
    */
   public function getProduct() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/shopify/src/Entity/ShopifyEntityTrait.php:23

    ---------- begin diff ----------
@@ @@
    * Sets up product image.
    */
   public static function setupProductImage($image_url) {
-    $directory = file_build_uri('shopify_images');
+    $directory = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . 'shopify_images'));
     if (!\Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY)) {
       // If our directory doesn't exist and can't be created, use the default.
       $directory = NULL;
    ----------- end diff -----------

Applied rules:
 * FileBuildUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


12) modules/contrib/shopify/src/Entity/Form/ShopifyProductVariantSettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/shopify/src/Entity/Form/ShopifyProductSettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/shopify/src/Controller/ShopifyBuyButtonController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\shopify\Controller;

+use Drupal\Core\Render\RendererInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Controller\ControllerBase;
@@ @@
   /**
    * Renderer object.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Builds buy button for a product.
    *
-   * @param \Drupal\shopify\Entity\ShopifyProduct $product
+   * @param ShopifyProduct $product
    *   The product to build the buy button for, if NULL only a cart element will
    *   be provided.
    *
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/shopify/shopify.module:379

    ---------- begin diff ----------
@@ @@
  * @param array $opts
  *   Array of options to pass the API call.
  *
- * @return \Drupal\shopify\Entity\ShopifyProduct[]
+ * @return ShopifyProduct[]
  *   Returns the products that were updated/created.
  */
 function shopify_sync_products(array $opts = []) {
@@ @@
  * @param array $opts
  *   Array of options to pass the API call.
  *
- * @return \Drupal\taxonomy\Entity\Term[]
+ * @return Term[]
  *   Returns the collections that were updated/created.
  */
 function shopify_sync_collections(array $opts = []) {
@@ @@
  * @param int $collection_id
  *   Shopify collection ID.
  *
- * @return \Drupal\taxonomy\Entity\Term
+ * @return Term
  *   Shopify collection.
  */
 function shopify_collection_load($collection_id) {
@@ @@
  * @param bool $sync_products
  *   Whether or not to sync product information during creation.
  *
- * @return \Drupal\taxonomy\Entity\Term
+ * @return Term
  *   Shopify collection.
  */
 function shopify_collection_create(\stdClass $collection, $sync_products = FALSE) {
@@ @@
 /**
  * Saves an image for a Shopify collection.
  *
- * @param \Drupal\taxonomy\Entity\Term $term
+ * @param Term $term
  *   Taxonomy term entity.
  * @param string $image_url
  *   Remote image URL for the collection image.
  */
 function shopify_collection_save_image(Term $term, $image_url) {
-  $directory = file_build_uri('shopify_images');
+  $directory = \Drupal::service('stream_wrapper_manager')->normalizeUri(\Drupal::config('system.file')->get('default_scheme') . ('://' . 'shopify_images'));
   if (!\Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY)) {
     // If our directory doesn't exist and can't be created, use the default.
     $directory = NULL;
@@ @@
  * @param bool $sync_products
  *   Whether or not to sync product information during update.
  *
- * @return \Drupal\taxonomy\Entity\Term
+ * @return Term
  *   Shopify collection.
  */
 function shopify_collection_update(\stdClass $collection, $sync_products = FALSE) {
    ----------- end diff -----------

Applied rules:
 * FileBuildUriRector
 * ArgumentRemoverRector


16) modules/contrib/shopify/shopify.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface;
 /**
  * @file
  * Install / update hooks.
@@ @@
 function shopify_update_8103(&$sandbox) {
   $updateManager = \Drupal::entityDefinitionUpdateManager();

-  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
+  /** @var EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
   $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
   $entity_type = $updateManager->getEntityType('taxonomy_term');
   $field_storage_definitions = $last_installed_schema_repository->getLastInstalledFieldStorageDefinitions('taxonomy_term');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/shopify/src/Command/ShopifyCommand.php" file, due to: 
         "Analyze error: "Class Drupal\Console\Core\Command\ContainerAwareCommand
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

