modules/contrib/assembly/assembly.install
modules/contrib/assembly/assembly.module
modules/contrib/assembly/assembly.page.inc
modules/contrib/assembly/src/Annotation/AssemblyBuild.php
modules/contrib/assembly/src/AssemblyAccessControlHandler.php
modules/contrib/assembly/src/AssemblyComposeWidget.php
modules/contrib/assembly/src/AssemblyHtmlRouteProvider.php
modules/contrib/assembly/src/AssemblyListBuilder.php
modules/contrib/assembly/src/AssemblyStorage.php
modules/contrib/assembly/src/AssemblyStorageInterface.php
modules/contrib/assembly/src/AssemblyTranslationHandler.php
modules/contrib/assembly/src/AssemblyTypeAccessControlHandler.php
modules/contrib/assembly/src/AssemblyTypeHtmlRouteProvider.php
modules/contrib/assembly/src/AssemblyTypeListBuilder.php
modules/contrib/assembly/src/Controller/AssemblyController.php
modules/contrib/assembly/src/Entity/Assembly.php
modules/contrib/assembly/src/Entity/AssemblyInterface.php
modules/contrib/assembly/src/Entity/AssemblyType.php
modules/contrib/assembly/src/Entity/AssemblyTypeInterface.php
modules/contrib/assembly/src/Entity/AssemblyViewBuilder.php
modules/contrib/assembly/src/Entity/AssemblyViewsData.php
modules/contrib/assembly/src/Form/AssemblyDeleteForm.php
modules/contrib/assembly/src/Form/AssemblyForm.php
modules/contrib/assembly/src/Form/AssemblyInlineForm.php
modules/contrib/assembly/src/Form/AssemblyRevisionDeleteForm.php
modules/contrib/assembly/src/Form/AssemblyRevisionRevertForm.php
modules/contrib/assembly/src/Form/AssemblyRevisionRevertTranslationForm.php
modules/contrib/assembly/src/Form/AssemblySettingsForm.php
modules/contrib/assembly/src/Form/AssemblyTypeDeleteForm.php
modules/contrib/assembly/src/Form/AssemblyTypeForm.php
modules/contrib/assembly/src/Plugin/AssemblyBuildBase.php
modules/contrib/assembly/src/Plugin/AssemblyBuildInterface.php
modules/contrib/assembly/src/Plugin/AssemblyBuildManager.php
modules/contrib/assembly/src/Plugin/AssemblyBuildView.php
modules/contrib/assembly/src/Plugin/QueueWorker/UpdateRevisionReferences.php
modules/contrib/assembly/tests/src/Functional/LoadTest.php

17 files with changes
=====================

1) modules/contrib/assembly/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\assembly\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/assembly/src/Plugin/AssemblyBuildManager.php:17

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/assembly/src/Form/AssemblySettingsForm.php:28

    ---------- begin diff ----------
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/assembly/src/Form/AssemblyRevisionRevertTranslationForm.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Constructs a new AssemblyRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Assembly storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager) {
@@ @@
   protected function prepareRevertedRevision(AssemblyInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');

-    /** @var \Drupal\assembly\Entity\AssemblyInterface $default_revision */
+    /** @var AssemblyInterface $default_revision */
     $latest_revision = $this->AssemblyStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/assembly/src/Form/AssemblyRevisionRevertForm.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The Assembly revision.
    *
-   * @var \Drupal\assembly\Entity\AssemblyInterface
+   * @var AssemblyInterface
    */
   protected $revision;

@@ @@
   /**
    * The Assembly storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $AssemblyStorage;

@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Constructs a new AssemblyRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Assembly storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ @@
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\assembly\Entity\AssemblyInterface $revision
+   * @param AssemblyInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\assembly\Entity\AssemblyInterface
+   * @return AssemblyInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(AssemblyInterface $revision, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/assembly/src/Form/AssemblyRevisionDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\assembly\Form;

+use Drupal\assembly\Entity\AssemblyInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ @@
   /**
    * The Assembly revision.
    *
-   * @var \Drupal\assembly\Entity\AssemblyInterface
+   * @var AssemblyInterface
    */
   protected $revision;

@@ @@
   /**
    * The Assembly storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $AssemblyStorage;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Constructs a new AssemblyRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
@@ @@

     $this->logger('content')->notice('Assembly: deleted %title revision %revision.', ['%title' => $this->revision->label(), '%revision' => $this->revision->getRevisionId()]);
     \Drupal::messenger()->addStatus(t('Revision from %revision-date of Assembly %title has been deleted.', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
       '%title' => $this->revision->label()
     ]));
     $form_state->setRedirect(
    ----------- end diff -----------

Applied rules:
 * FormatDateRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/assembly/src/Form/AssemblyInlineForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\assembly\Form;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\inline_entity_form\Form\EntityInlineForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * Returns the bundle entity of the entity, or NULL if there is none.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The bundle entity.
    */
   protected function getBundleEntity($entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/assembly/src/Entity/AssemblyViewBuilder.php:42

    ---------- begin diff ----------
@@ @@
   /**
    * Provides entity-specific defaults to the build process.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which the defaults should be provided.
    * @param string $view_mode
    *   The view mode that should be used.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/assembly/src/Entity/AssemblyInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\assembly\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\RevisionableInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ @@
   /**
    * Gets the Assembly revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


10) modules/contrib/assembly/src/Controller/AssemblyController.php:52

    ---------- begin diff ----------
@@ @@
   /**
    * Generates an overview table of older revisions of a Assembly .
    *
-   * @param \Drupal\assembly\Entity\AssemblyInterface $assembly
+   * @param AssemblyInterface $assembly
    *   A Assembly  object.
    *
    * @return array
@@ @@
   /**
    * Returns the list of references for a given assembly as JSON.
    *
-   * @param \Drupal\assembly\Entity\AssemblyInterface $assembly
+   * @param AssemblyInterface $assembly
    *   A Assembly  object.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/assembly/src/AssemblyTypeHtmlRouteProvider.php:31

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/assembly/src/AssemblyTypeAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\assembly;

+use Drupal\assembly\Entity\AssemblyInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\assembly\Entity\AssemblyInterface $entity */
+    /** @var AssemblyInterface $entity */
     if ($operation == 'view label') {
       return AccessResult::allowed();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/assembly/src/AssemblyStorageInterface.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of Assembly revision IDs for a specific Assembly.
    *
-   * @param \Drupal\assembly\Entity\AssemblyInterface $entity
+   * @param AssemblyInterface $entity
    *   The Assembly entity.
    *
    * @return int[]
@@ @@
   /**
    * Gets a list of revision IDs having a given user as Assembly author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ @@
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\assembly\Entity\AssemblyInterface $entity
+   * @param AssemblyInterface $entity
    *   The Assembly entity.
    *
    * @return int
@@ @@
   /**
    * Unsets the language for all Assembly with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/assembly/src/AssemblyHtmlRouteProvider.php:55

    ---------- begin diff ----------
@@ @@
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ @@
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/assembly/src/AssemblyAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\assembly;

+use Drupal\assembly\Entity\AssemblyInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\assembly\Entity\AssemblyInterface $entity */
+    /** @var AssemblyInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/assembly/src/Annotation/AssemblyBuild.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\assembly\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


17) modules/contrib/assembly/assembly.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\StorageInterface;
 use Drupal\Core\Utility\UpdateException;
 use Drupal\Core\Field\BaseFieldDefinition;
 use Drupal\Core\Database\Database;
@@ @@
  */
 function assembly_update_8002() {
   $name = 'views.view.assembly';
-  $source = new FileStorage(drupal_get_path('module', 'assembly') . '/config/install');
-  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
+  $source = new FileStorage(\Drupal::service('extension.list.module')->getPath('assembly') . '/config/install');
+  /** @var StorageInterface $active_storage */
   $active_storage = \Drupal::service('config.storage');
   $active_storage->write($name, $source->read($name));
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/assembly/src/AssemblyComposeWidget.php" file, due to: 
         "Analyze error: "Class Drupal\compose\EntityComposeWidget not found.". 
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

