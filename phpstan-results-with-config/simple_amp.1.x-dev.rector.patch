diff --git a/src/AmpComponentManager.php b/src/AmpComponentManager.php
index 8806bfc..8c92fab 100755
--- a/src/AmpComponentManager.php
+++ b/src/AmpComponentManager.php
@@ -19,9 +19,9 @@ class AmpComponentManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations,
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/AmpMetadataManager.php b/src/AmpMetadataManager.php
index 7913d14..b6459b3 100755
--- a/src/AmpMetadataManager.php
+++ b/src/AmpMetadataManager.php
@@ -19,9 +19,9 @@ class AmpMetadataManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations,
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/Annotation/AmpComponent.php b/src/Annotation/AmpComponent.php
index 70fc486..76f6999 100755
--- a/src/Annotation/AmpComponent.php
+++ b/src/Annotation/AmpComponent.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\simple_amp\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -26,7 +27,7 @@ class AmpComponent extends Plugin {
   /**
    * The name of the codec.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/EventSubscriber/AmpResponseSubscriber.php b/src/EventSubscriber/AmpResponseSubscriber.php
index 223e8d0..8a4eebf 100644
--- a/src/EventSubscriber/AmpResponseSubscriber.php
+++ b/src/EventSubscriber/AmpResponseSubscriber.php
@@ -2,11 +2,12 @@
 
 namespace Drupal\simple_amp\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ViewEvent;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Drupal\Core\EventSubscriber\MainContentViewSubscriber;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Drupal\simple_amp\Render\AmpAttachmentsResponseProcessorInterface;
 use Drupal\simple_amp\Render\AmpResponse;
 use Drupal\simple_amp\AmpBase;
@@ -19,14 +20,14 @@ class AmpResponseSubscriber implements EventSubscriberInterface {
   /**
    * The AMP response attachments processor service.
    *
-   * @var \Drupal\simple_amp\Render\AmpAttachmentsResponseProcessorInterface
+   * @var AmpAttachmentsResponseProcessorInterface
    */
   protected $ampResponseAttachmentsProcessor;
 
   /**
    * Constructs a AmpResponseSubscriber object.
    *
-   * @param \Drupal\simple_amp\Render\AmpAttachmentsResponseProcessorInterface $html_response_amp_attachments_processor
+   * @param AmpAttachmentsResponseProcessorInterface $html_response_amp_attachments_processor
    *   The AMP response attachments processor service.
    */
   public function __construct(AmpAttachmentsResponseProcessorInterface $amp_response_attachments_processor) {
@@ -36,10 +37,10 @@ class AmpResponseSubscriber implements EventSubscriberInterface {
   /**
    * Alters the wrapper format if this is an AMP request.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent $event
+   * @param ViewEvent $event
    *   The event to process.
    */
-  public function onAmpRoute(GetResponseEvent $event) {
+  public function onAmpRoute(RequestEvent $event) {
     $request = $event->getRequest();
     $path = $request->getRequestUri();
 
@@ -63,10 +64,10 @@ class AmpResponseSubscriber implements EventSubscriberInterface {
   /**
    * Processes AMP attachments for HtmlResponse responses.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The event to process.
    */
-  public function onRespond(FilterResponseEvent $event) {
+  public function onRespond(ResponseEvent $event) {
     $request = $event->getRequest();
 
     $format = $request->request->get(MainContentViewSubscriber::WRAPPER_FORMAT);
diff --git a/src/Render/AmpAttachmentsResponseProcessorInterface.php b/src/Render/AmpAttachmentsResponseProcessorInterface.php
index 137e6fe..a6e285f 100644
--- a/src/Render/AmpAttachmentsResponseProcessorInterface.php
+++ b/src/Render/AmpAttachmentsResponseProcessorInterface.php
@@ -21,10 +21,10 @@ interface AmpAttachmentsResponseProcessorInterface {
    * The available keys are:
    * - 'amp_html_head' (tags in HTML <head>)
    *
-   * @param \Drupal\simple_amp\Render\AmpAttachmentsInterface $response
+   * @param AmpAttachmentsInterface $response
    *   The response to process.
    *
-   * @return \Drupal\simple_amp\Render\AmpAttachmentsInterface
+   * @return AmpAttachmentsInterface
    *   The processed response, with the attachments updated to reflect their
    *   final values.
    *
diff --git a/src/Render/AmpResponseAttachmentsProcessor.php b/src/Render/AmpResponseAttachmentsProcessor.php
index 9f2d79f..2d5cbc1 100644
--- a/src/Render/AmpResponseAttachmentsProcessor.php
+++ b/src/Render/AmpResponseAttachmentsProcessor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\simple_amp\Render;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Render\HtmlResponse;
 use Drupal\Core\Render\Markup;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\EnforcedResponseException;
@@ -31,41 +33,41 @@ class AmpResponseAttachmentsProcessor implements AmpAttachmentsResponseProcessor
   /**
    * A config object for the system performance configuration.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\simple_amp\Render\BaseAmpRenderer
+   * @var BaseAmpRenderer
    */
   protected $renderer;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a HtmlResponseAttachmentsProcessor object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   A config factory for retrieving required config objects.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\simple_amp\Render\BaseAmpRenderer $renderer
+   * @param BaseAmpRenderer $renderer
    *   The renderer.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RequestStack $request_stack, BaseAmpRenderer $renderer, ModuleHandlerInterface $module_handler) {
@@ -163,10 +165,10 @@ class AmpResponseAttachmentsProcessor implements AmpAttachmentsResponseProcessor
    * that indicates what that markup depends on. That metadata is also added to
    * the HTML response object.
    *
-   * @param \Drupal\Core\Render\HtmlResponse $response
+   * @param HtmlResponse $response
    *   The HTML response whose placeholders are being replaced.
    *
-   * @return \Drupal\Core\Render\HtmlResponse
+   * @return HtmlResponse
    *   The updated HTML response, with replaced placeholders.
    *
    * @see \Drupal\Core\Render\Renderer::replacePlaceholders()
@@ -198,7 +200,7 @@ class AmpResponseAttachmentsProcessor implements AmpAttachmentsResponseProcessor
    * This is the last step where all of the attachments are placed into the
    * response object's contents.
    *
-   * @param \Drupal\Core\Render\HtmlResponse $response
+   * @param HtmlResponse $response
    *   The HTML response to update.
    * @param array $placeholders
    *   An array of placeholders, keyed by type with the placeholders
diff --git a/src/Render/MainContent/AmpRenderer.php b/src/Render/MainContent/AmpRenderer.php
index 200fa69..a11d64b 100644
--- a/src/Render/MainContent/AmpRenderer.php
+++ b/src/Render/MainContent/AmpRenderer.php
@@ -34,17 +34,17 @@ class AmpRenderer extends HtmlRenderer implements MainContentRendererInterface {
   /**
    * Constructs a new HtmlRenderer.
    *
-   * @param \Drupal\Core\Controller\TitleResolverInterface $title_resolver
+   * @param TitleResolverInterface $title_resolver
    *   The title resolver.
-   * @param \Drupal\Component\Plugin\PluginManagerInterface $display_variant_manager
+   * @param PluginManagerInterface $display_variant_manager
    *   The display variant manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\simple_amp\Render\BaseAmpRenderer $renderer
+   * @param BaseAmpRenderer $renderer
    *   The renderer service.
-   * @param \Drupal\simple_amp\Render\BaseAmpRenderCache $render_cache
+   * @param BaseAmpRenderCache $render_cache
    *   The render cache service.
    * @param array $renderer_config
    *   The renderer configuration array.
@@ -117,9 +117,9 @@ class AmpRenderer extends HtmlRenderer implements MainContentRendererInterface {
    *
    * @param array $main_content
    *   The render array representing the main content.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object, for context.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match, for context.
    *
    * @return array
