modules/contrib/profile/profile.install
modules/contrib/profile/profile.module
modules/contrib/profile/profile.post_update.php
modules/contrib/profile/profile.tokens.inc
modules/contrib/profile/src/Access/ProfileTypeMultipleAccessCheck.php
modules/contrib/profile/src/Controller/ProfileController.php
modules/contrib/profile/src/Controller/UserController.php
modules/contrib/profile/src/Entity/Profile.php
modules/contrib/profile/src/Entity/ProfileInterface.php
modules/contrib/profile/src/Entity/ProfileType.php
modules/contrib/profile/src/Entity/ProfileTypeInterface.php
modules/contrib/profile/src/Event/ProfileEvents.php
modules/contrib/profile/src/Event/ProfileLabelEvent.php
modules/contrib/profile/src/Form/ProfileDeleteForm.php
modules/contrib/profile/src/Form/ProfileForm.php
modules/contrib/profile/src/Form/ProfileTypeDeleteForm.php
modules/contrib/profile/src/Form/ProfileTypeForm.php
modules/contrib/profile/src/Plugin/Derivative/UserLocalTask.php
modules/contrib/profile/src/Plugin/EntityReferenceSelection/ProfileSelection.php
modules/contrib/profile/src/Plugin/Field/FieldWidget/ProfileFormWidget.php
modules/contrib/profile/src/Plugin/Field/ProfileEntityFieldItemList.php
modules/contrib/profile/src/Plugin/Menu/LocalAction/ProfileLocalAction.php
modules/contrib/profile/src/Plugin/search_api/processor/ProfileUserStatus.php
modules/contrib/profile/src/Plugin/views/argument_default/ProfileOwner.php
modules/contrib/profile/src/Plugin/views/relationship/ProfileViewsRelationship.php
modules/contrib/profile/src/ProfileAccessControlHandler.php
modules/contrib/profile/src/ProfileListBuilder.php
modules/contrib/profile/src/ProfileStorage.php
modules/contrib/profile/src/ProfileStorageInterface.php
modules/contrib/profile/src/ProfileStorageSchema.php
modules/contrib/profile/src/ProfileTestTrait.php
modules/contrib/profile/src/ProfileTypeListBuilder.php
modules/contrib/profile/src/ProfileViewBuilder.php
modules/contrib/profile/tests/src/Functional/ProfileDefaultTest.php
modules/contrib/profile/tests/src/Functional/ProfileFieldAccessTest.php
modules/contrib/profile/tests/src/Functional/ProfileRegisterFormTest.php
modules/contrib/profile/tests/src/Functional/ProfileRevisionTest.php
modules/contrib/profile/tests/src/Functional/ProfileTestBase.php
modules/contrib/profile/tests/src/Functional/ProfileTypeTest.php
modules/contrib/profile/tests/src/Functional/UserTest.php
modules/contrib/profile/tests/src/Kernel/ProfileRoleAccessTest.php
modules/contrib/profile/tests/src/Kernel/ProfileTest.php
modules/contrib/profile/tests/src/Kernel/ProfileTokenTest.php
modules/contrib/profile/tests/src/Kernel/ProfileViewTest.php

33 files with changes
=====================

1) modules/contrib/profile/tests/src/Kernel/ProfileViewTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\profile\Kernel;

+use Drupal\user\UserInterface;
 use Drupal\profile\ProfileTestTrait;
 use Drupal\Tests\views\Kernel\ViewsKernelTestBase;
 use Drupal\user\Entity\User;
@@ @@
   /**
    * Create a user, and optionally a profile.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   A newly created user.
    */
   protected function createUser() {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/profile/tests/src/Kernel/ProfileTokenTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\profile\Kernel;

+use Drupal\user\UserInterface;
+use Drupal\profile\ProfileStorageInterface;
+use Drupal\Core\Entity\EntityViewBuilderInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\profile\Entity\Profile;
 use Drupal\profile\Entity\ProfileType;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * The user.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * The profile storage.
    *
-   * @var \Drupal\profile\ProfileStorageInterface
+   * @var ProfileStorageInterface
    */
   protected $profileStorage;

@@ @@
   /**
    * The entity view builder.
    *
-   * @var \Drupal\Core\Entity\EntityViewBuilderInterface
+   * @var EntityViewBuilderInterface
    */
   protected $viewBuilder;

@@ @@
     $this->installEntitySchema('view');
     $this->installSchema('user', ['users_data']);
     $this->installConfig(self::$modules);
-    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    /** @var EntityTypeManagerInterface $entity_type_manager */
     $entity_type_manager = $this->container->get('entity_type.manager');
     $this->profileStorage = $entity_type_manager->getStorage('profile');
     $this->viewBuilder = $entity_type_manager->getViewBuilder('profile');
@@ @@
     $field->save();

     // Create new profiles.
-    /** @var \Drupal\profile\Entity\Profile $profile1 */
+    /** @var Profile $profile1 */
     $profile = Profile::create([
       'type' => $profile_type->id(),
       'uid' => $this->user->id(),
@@ @@
     // it can be compared to the token output.
     $entity_type_manager = \Drupal::entityTypeManager();

-    /** @var \Drupal\Core\Entity\EntityViewBuilderInterface $view_builder */
+    /** @var EntityViewBuilderInterface $view_builder */
     $view_builder = $entity_type_manager->getViewBuilder('profile');
     $entity_view = $view_builder->view($profile, 'token');
     $field_view = $view_builder->viewField($profile->get('profile_fullname'));
@@ @@
     // Add the pre_render method to match the rendered output of a field token.
     $field_output['#pre_render'][] = '\Drupal\token\TokenFieldRender::preRender';

-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
     $rendered_field = $renderer->renderPlain($field_view);
     $rendered_entity = $renderer->renderRoot($entity_view);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/profile/tests/src/Kernel/ProfileTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\profile\Kernel;

+use Drupal\user\UserInterface;
+use Drupal\profile\ProfileStorageInterface;
+use Drupal\profile\Entity\ProfileTypeInterface;
+use Drupal\profile\Entity\ProfileInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ @@
   /**
    * Testing demo user 1.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   public $user1;

@@ @@
   /**
    * Testing demo user 2.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   public $user2;

@@ @@
   /**
    * Profile entity storage.
    *
-   * @var \Drupal\profile\ProfileStorageInterface
+   * @var ProfileStorageInterface
    */
   public $profileStorage;

@@ @@
       'profile_type_0' => ['label' => $this->randomMachineName()],
       'profile_type_1' => ['label' => $this->randomMachineName()],
     ];
-    /** @var \Drupal\profile\Entity\ProfileTypeInterface[] $types */
+    /** @var ProfileTypeInterface[] $types */
     $types = [];
     foreach ($types_data as $id => $values) {
       $types[$id] = ProfileType::create(['id' => $id] + $values);
@@ @@
     }

     // Create a new profile.
-    /** @var \Drupal\profile\Entity\ProfileInterface $profile */
+    /** @var ProfileInterface $profile */
     $profile = $this->profileStorage->create([
       'type' => $types['profile_type_0']->id(),
     ]);
@@ @@
     ]);
     $profile_type->save();

-    /** @var \Drupal\profile\Entity\ProfileInterface $profile1 */
+    /** @var ProfileInterface $profile1 */
     $profile1 = Profile::create([
       'type' => $profile_type->id(),
       'uid' => $this->user1->id(),
@@ @@
     // Confirm that the profile was set as default.
     $this->assertTrue($profile1->isDefault());

-    /** @var \Drupal\profile\Entity\ProfileInterface $profile2 */
+    /** @var ProfileInterface $profile2 */
     $profile2 = Profile::create([
       'type' => $profile_type->id(),
       'uid' => $this->user1->id(),
@@ @@
     $field->save();

     // Create new profiles.
-    /** @var \Drupal\profile\Entity\Profile $profile1 */
+    /** @var Profile $profile1 */
     $profile1 = Profile::create([
       'type' => $profile_type->id(),
       'uid' => $this->user1->id(),
@@ @@
     $profile_type->save();

     // Create new profiles.
-    /** @var \Drupal\profile\Entity\Profile $profile2 */
+    /** @var Profile $profile2 */
     $profile2 = Profile::create([
       'type' => $profile_type->id(),
       'uid' => $this->user1->id(),
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/profile/tests/src/Kernel/ProfileRoleAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\profile\Kernel;

+use Drupal\profile\Entity\ProfileType;
+use Drupal\profile\ProfileAccessControlHandler;
+use Drupal\Core\Access\AccessManagerInterface;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
 use Drupal\profile\ProfileTestTrait;
 use Drupal\user\Entity\Role;
@@ @@
    *
    * No roles.
    *
-   * @var \Drupal\profile\Entity\ProfileType
+   * @var ProfileType
    */
   protected $type1;

@@ @@
    *
    * Requires some, but not all roles.
    *
-   * @var \Drupal\profile\Entity\ProfileType
+   * @var ProfileType
    */
   protected $type2;

@@ @@
    *
    * Requires all profile roles.
    *
-   * @var \Drupal\profile\Entity\ProfileType
+   * @var ProfileType
    */
   protected $type3;

@@ @@
   /**
    * Randomly generated user role entity.
    *
-   * @var \Drupal\user\Entity\Role
+   * @var Role
    */
   protected $role1;

@@ @@
   /**
    * Randomly generated user role entity.
    *
-   * @var \Drupal\user\Entity\Role
+   * @var Role
    */
   protected $role2;

@@ @@
   /**
    * The profile access handler.
    *
-   * @var \Drupal\profile\ProfileAccessControlHandler
+   * @var ProfileAccessControlHandler
    */
   protected $accessHandler;

@@ @@
   /**
    * The access manager.
    *
-   * @var \Drupal\Core\Access\AccessManagerInterface
+   * @var AccessManagerInterface
    */
   protected $accessManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/profile/tests/src/Functional/UserTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\profile\Functional;

+use Drupal\profile\ProfileStorageInterface;
 use Drupal\Core\Url;
 use Drupal\profile\Entity\Profile;
 use Drupal\user\Entity\User;
@@ @@
    * Tests the user pages with a "single" profile type.
    */
   public function testSingle() {
-    /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
+    /** @var ProfileStorageInterface $profile_storage */
     $profile_storage = $this->container->get('entity_type.manager')->getStorage('profile');
     $first_user = $this->createUser(['view own test profile']);
     $second_user = $this->createUser([
@@ @@
   public function testMultiple() {
     $this->type->setMultiple(TRUE);
     $this->type->save();
-    /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
+    /** @var ProfileStorageInterface $profile_storage */
     $profile_storage = $this->container->get('entity_type.manager')->getStorage('profile');
     $user = $this->createUser([
       'create test profile',
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/profile/tests/src/Functional/ProfileTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\profile\Functional;

+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
+use Drupal\Core\Field\FieldConfigInterface;
+use Drupal\user\Entity\User;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\field\Entity\FieldConfig;
@@ @@
   /**
    * Testing profile type entity.
    *
-   * @var \Drupal\profile\Entity\ProfileType
+   * @var ProfileType
    */
   protected $type;

@@ @@
   /**
    * Testing profile type entity view display.
    *
-   * @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface
+   * @var EntityViewDisplayInterface
    */
   protected $display;

@@ @@
   /**
    * Testing profile type entity form display.
    *
-   * @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @var EntityFormDisplayInterface
    */
   protected $form;

@@ @@
   /**
    * Testing field on profile type.
    *
-   * @var \Drupal\Core\Field\FieldConfigInterface
+   * @var FieldConfigInterface
    */
   protected $field;

@@ @@
   /**
    * Testing admin user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $adminUser;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/profile/tests/src/Functional/ProfileRevisionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\profile\Functional;

+use Drupal\profile\ProfileStorageInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Url;
@@ @@
   /**
    * Testing profile type that uses revisions.
    *
-   * @var \Drupal\profile\Entity\ProfileType
+   * @var ProfileType
    */
   protected $useRevisionsType;

@@ @@
    * Tests revision handling.
    */
   public function testProfileRevisions() {
-    /** @var \Drupal\profile\ProfileStorageInterface $storage */
+    /** @var ProfileStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage('profile');

     $user = $this->createUser([
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/profile/tests/src/Functional/ProfileRegisterFormTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\profile\Functional;

+use Drupal\profile\ProfileStorageInterface;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\user\UserInterface;
@@ @@
     $new_user = user_load_by_name($name);
     $this->assertTrue($new_user->isActive(), 'New account is active after registration.');

-    /** @var \Drupal\profile\ProfileStorageInterface $storage */
+    /** @var ProfileStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage('profile');

     // Verify that a new profile was created for the new user ID.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


9) modules/contrib/profile/tests/src/Functional/ProfileFieldAccessTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\profile\Functional;

+use Drupal\user\Entity\User;
+use Drupal\profile\ProfileStorageInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;

@@ @@
   /**
    * A test user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $webUser;

@@ @@
   /**
    * A test user.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $otherUser;

@@ @@
     $this->assertSession()->buttonNotExists('Save and make default');
     $this->submitForm($edit, 'Save');

-    /** @var \Drupal\profile\ProfileStorageInterface $storage */
+    /** @var ProfileStorageInterface $storage */
     $storage = $this->container->get('entity_type.manager')->getStorage('profile');
     $web_user_profile = $storage->loadByUser($this->webUser, $this->type->id());
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/profile/tests/src/Functional/ProfileDefaultTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\profile\Functional;

+use Drupal\profile\ProfileStorageInterface;
 use Drupal\Core\Url;
 use Drupal\profile\Entity\Profile;

@@ @@
   /**
    * Profile entity storage.
    *
-   * @var \Drupal\profile\ProfileStorageInterface
+   * @var ProfileStorageInterface
    */
   public $profileStorage;

@@ @@
     $this->assertSession()->pageTextContains($field_label);
     $edit = ["fields[{$id}_profiles][label]" => 'inline'];
     $edit = ["fields[{$id}_profiles][type]" => 'entity_reference_entity_view'];
-    $this->drupalPostForm(NULL, $edit, t('Save'));
+    $this->submitForm($edit, t('Save'));
   }

 }
    ----------- end diff -----------

Applied rules:
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/profile/src/ProfileTypeListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile;

+use Drupal\profile\Entity\ProfileTypeInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;

@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\profile\Entity\ProfileTypeInterface $entity */
+    /** @var ProfileTypeInterface $entity */
     $row['type'] = $entity->toLink(NULL, 'edit-form');
     $row['registration'] = $entity->getRegistration() ? $this->t('Yes') : $this->t('No');
     $row['multiple'] = $entity->allowsMultiple() ? $this->t('Yes') : $this->t('No');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/profile/src/ProfileTestTrait.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile;

+use Drupal\profile\Entity\ProfileInterface;
 use Drupal\profile\Entity\ProfileTypeInterface;
 use Drupal\profile\Entity\ProfileType;
 use Drupal\profile\Entity\Profile;
@@ @@
    * @param array $roles
    *   Array of user role machine names.
    *
-   * @return \Drupal\profile\Entity\ProfileTypeInterface
+   * @return ProfileTypeInterface
    *   Returns a profile type entity.
    */
   protected function createProfileType($id = NULL, $label = NULL, $registration = FALSE, array $roles = []) {
@@ @@
   /**
    * Create a user, and optionally a profile.
    *
-   * @param \Drupal\profile\Entity\ProfileTypeInterface $profile_type
+   * @param ProfileTypeInterface $profile_type
    *   A profile type for the created profile entity.
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   A user to create a profile.
    *
-   * @return \Drupal\profile\Entity\ProfileInterface
+   * @return ProfileInterface
    *   A profile for a user.
    */
   protected function createProfile(ProfileTypeInterface $profile_type, UserInterface $user) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


13) modules/contrib/profile/src/ProfileStorageInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile;

+use Drupal\profile\Entity\ProfileInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Session\AccountInterface;

@@ @@
   /**
    * Loads the given user's profiles.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user.
    * @param string $profile_type_id
    *   The profile type ID.
@@ @@
    * @param bool $published
    *   Whether to load published or unpublished profiles. Defaults to published.
    *
-   * @return \Drupal\profile\Entity\ProfileInterface[]
+   * @return ProfileInterface[]
    *   The profiles, ordered by publishing status and ID, descending.
    */
   public function loadMultipleByUser(AccountInterface $account, string $profile_type_id, bool $published = TRUE);
@@ @@
    * Primarily used for profile types which only allow a
    * single profile per user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user.
    * @param string $profile_type_id
    *   The profile type ID.
    *
-   * @return \Drupal\profile\Entity\ProfileInterface|null
+   * @return ProfileInterface|null
    *   The profile. NULL if no matching entity was found.
    */
   public function loadByUser(AccountInterface $account, string $profile_type_id);
@@ @@
   /**
    * Loads the given user's default profile.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user.
    * @param string $profile_type_id
    *   The profile type ID.
    *
-   * @return \Drupal\profile\Entity\ProfileInterface|null
+   * @return ProfileInterface|null
    *   The profile. NULL if no matching entity was found.
    *
    * @deprecated in profile:8.x-1.0 and is removed from
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


14) modules/contrib/profile/src/ProfileListBuilder.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile;

+use Drupal\profile\Entity\ProfileInterface;
 use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
@@ @@
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;

@@ @@
   /**
    * Constructs a new ProfileListController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, DateFormatter $date_formatter, RendererInterface $renderer, RedirectDestinationInterface $redirect_destination) {
@@ @@
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\profile\Entity\ProfileInterface $entity */
+    /** @var ProfileInterface $entity */
     $langcode = $entity->language()->getId();
     $uri = $entity->toUrl();
     $options = $uri->getOptions();
@@ @@
       $operations[$key]['query'] = $destination;
     }

-    /** @var \Drupal\profile\Entity\ProfileInterface $entity */
+    /** @var ProfileInterface $entity */
     if ($entity->access('update') && $entity->isPublished() && !$entity->isDefault()) {
       $operations['set_default'] = [
         'title' => $this->t('Mark as default'),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/profile/src/ProfileAccessControlHandler.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile;

+use Drupal\profile\Entity\ProfileInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
     $result = parent::checkAccess($entity, $operation, $account);
     if ($result->isAllowed()) {
-      /** @var \Drupal\profile\Entity\ProfileInterface $entity */
+      /** @var ProfileInterface $entity */
       $result = $result->andIf($this->checkRoleAccess($entity->getOwner(), $entity->bundle()));
     }

@@ @@
    *
    * If the profile type has no roles specified, the check will always pass.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    * @param string $profile_type_id
    *   The profile type ID.
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    *   The access result.
    */
   protected function checkRoleAccess(AccountInterface $account, $profile_type_id) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/profile/src/Plugin/views/argument_default/ProfileOwner.php:21

    ---------- begin diff ----------
@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteMatchInterface $route_match) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/profile/src/Plugin/Menu/LocalAction/ProfileLocalAction.php:15

    ---------- begin diff ----------
@@ @@
   /**
    * The redirect destination.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   private $redirectDestination;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider to load routes by name.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteProviderInterface $route_provider, RedirectDestinationInterface $redirect_destination) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/profile/src/Plugin/Field/ProfileEntityFieldItemList.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile\Plugin\Field;

+use Drupal\profile\Entity\ProfileInterface;
+use Drupal\profile\ProfileStorageInterface;
 use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\Core\Field\FieldItemList;
 use Drupal\Core\TypedData\ComputedItemListTrait;
@@ @@
   /**
    * Get the user's profiles.
    *
-   * @return array|\Drupal\profile\Entity\ProfileInterface[]
+   * @return array|ProfileInterface[]
    *   An array of profiles.
    */
   protected function getUserProfiles() {
     $user = $this->getEntity();
     assert($user instanceof UserInterface);
-    /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
+    /** @var ProfileStorageInterface $profile_storage */
     $profile_storage = \Drupal::entityTypeManager()->getStorage('profile');

     // Ignore anonymous and user accounts not saved yet.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


19) modules/contrib/profile/src/Plugin/Field/FieldWidget/ProfileFormWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile\Plugin\Field\FieldWidget;

+use Drupal\user\UserInterface;
+use Drupal\profile\ProfileStorageInterface;
+use Drupal\profile\Entity\ProfileTypeInterface;
+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ @@
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
@@ @@
    *   Any third party settings.
    * @param \Drupal\core\Entity\EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, EntityFieldManagerInterface $entity_field_manager, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository) {
@@ @@
    * {@inheritdoc}
    */
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\user\UserInterface $account */
+    /** @var UserInterface $account */
     $account = $items->getEntity();
-    /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
+    /** @var ProfileStorageInterface $profile_storage */
     $profile_storage = $this->entityTypeManager->getStorage('profile');
     $profile_type_storage = $this->entityTypeManager->getStorage('profile_type');
-    /** @var \Drupal\profile\Entity\ProfileTypeInterface $profile_type */
+    /** @var ProfileTypeInterface $profile_type */
     $profile_type = $profile_type_storage->load($this->getFieldSetting('profile_type'));
     $property = ['profiles', $profile_type->id()];
     $profile = $form_state->get($property);
@@ @@
    *
    * @param array $element
    *   The profile form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function validateProfileForm(array &$element, FormStateInterface $form_state) {
-    /** @var \Drupal\profile\Entity\ProfileInterface $profile */
+    /** @var ProfileInterface $profile */
     $property = ['profiles', $element['#bundle']];
     $profile = $form_state->get($property);
     if (!empty($profile)) {
@@ @@
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function saveProfiles(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Session\AccountInterface $account */
+    /** @var AccountInterface $account */
     $account = $form_state->getFormObject()->getEntity();
     if (!$account) {
       return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/profile/src/Plugin/Derivative/UserLocalTask.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile\Plugin\Derivative;

+use Drupal\profile\Entity\ProfileTypeInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
    *
    * @param string $base_plugin_definition
    *   The base plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct($base_plugin_definition, EntityTypeManagerInterface $entity_type_manager) {
@@ @@
     $this->derivatives = [];
     // Starting weight for ordering the local tasks.
     $weight = 10;
-    /** @var \Drupal\profile\Entity\ProfileTypeInterface[] $profile_types */
+    /** @var ProfileTypeInterface[] $profile_types */
     $profile_types = $this->entityTypeManager->getStorage('profile_type')->loadMultiple();
     foreach ($profile_types as $profile_type_id => $profile_type) {
       if ($profile_type->allowsMultiple()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/profile/src/Form/ProfileTypeForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile\Form;

+use Drupal\profile\Entity\ProfileTypeInterface;
+use Drupal\user\RoleInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\profile\Entity\ProfileTypeInterface $profile_type */
+    /** @var ProfileTypeInterface $profile_type */
     $profile_type = $this->entity;

     $form['label'] = [
@@ @@
       '#default_value' => $profile_type->getRoles(),
     ];
     foreach (Role::loadMultiple() as $role) {
-      /** @var \Drupal\user\RoleInterface $role */
+      /** @var RoleInterface $role */
       if ($role->id() !== Role::ANONYMOUS_ID) {
         $form['roles']['#options'][$role->id()] = $role->label();
       }
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\profile\Entity\ProfileTypeInterface $profile_type */
+    /** @var ProfileTypeInterface $profile_type */
     $profile_type = $this->entity;
     $profile_type->save();
     $this->postSave($profile_type, $this->operation);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/profile/src/Form/ProfileForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile\Form;

+use Drupal\profile\Entity\ProfileTypeInterface;
+use Drupal\profile\Entity\ProfileInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;

@@ @@
    * {@inheritdoc}
    */
   protected function showRevisionUi() {
-    /** @var \Drupal\profile\Entity\ProfileTypeInterface $profile_type */
+    /** @var ProfileTypeInterface $profile_type */
     $profile_type = $this->entityTypeManager->getStorage('profile_type')->load($this->entity->bundle());
     return $profile_type->showRevisionUi();
   }
@@ @@
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\profile\Entity\ProfileInterface $profile */
+    /** @var ProfileInterface $profile */
     $profile = $this->entity;
     $profile->save();

     $profile_type_storage = $this->entityTypeManager->getStorage('profile_type');
-    /** @var \Drupal\profile\Entity\ProfileTypeInterface $profile_type */
+    /** @var ProfileTypeInterface $profile_type */
     $profile_type = $profile_type_storage->load($profile->bundle());
     if ($profile_type->allowsMultiple()) {
       $this->messenger()->addMessage($this->t('%label has been saved.', ['%label' => $profile->label()]));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/profile/src/Form/ProfileDeleteForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile\Form;

+use Drupal\profile\Entity\ProfileInterface;
 use Drupal\Core\Entity\ContentEntityDeleteForm;
 use Drupal\Core\Url;

@@ @@
    * {@inheritdoc}
    */
   public function getCancelUrl() {
-    /** @var \Drupal\profile\Entity\ProfileInterface $entity */
+    /** @var ProfileInterface $entity */
     $entity = $this->entity;
     if ($entity->getOwnerId()) {
       return Url::fromRoute('entity.user.canonical', [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


24) modules/contrib/profile/src/Event/ProfileLabelEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\profile\Entity\ProfileInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Defines the profile label event.
@@ @@
   /**
    * The profile.
    *
-   * @var \Drupal\profile\Entity\ProfileInterface
+   * @var ProfileInterface
    */
   protected $profile;

@@ @@
   /**
    * Constructs a new ProfileLabelEvent object.
    *
-   * @param \Drupal\profile\Entity\ProfileInterface $profile
+   * @param ProfileInterface $profile
    *   The profile.
    * @param string $label
    *   The profile label.
@@ @@
   /**
    * Gets the profile.
    *
-   * @return \Drupal\profile\Entity\ProfileInterface
+   * @return ProfileInterface
    *   The profile.
    */
   public function getProfile() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/profile/src/Entity/ProfileInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile\Entity;

+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ @@
   /**
    * Gets the profile revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    *
    * @deprecated in profile:8.x-1.0-rc5 and is removed from
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


26) modules/contrib/profile/src/Entity/Profile.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile\Entity;

+use Drupal\profile\ProfileStorage;
 use Drupal\Core\Entity\EditorialContentEntityBase;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   /**
    * Gets the names of all configurable fields on the given profile.
    *
-   * @param \Drupal\profile\Entity\ProfileInterface $profile
+   * @param ProfileInterface $profile
    *   The profile.
    *
    * @return string[]
@@ @@
    * {@inheritdoc}
    */
   public function preSave(EntityStorageInterface $storage) {
-    /** @var \Drupal\profile\ProfileStorage $storage */
+    /** @var ProfileStorage $storage */
     parent::preSave($storage);

     // Only published profiles can be default.
@@ @@
    * {@inheritdoc}
    */
   public function postSave(EntityStorageInterface $storage, $update = TRUE) {
-    /** @var \Drupal\profile\ProfileStorage $storage */
+    /** @var ProfileStorage $storage */
     parent::postSave($storage, $update);

     if ($this->getOwnerId()) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/profile/src/Controller/UserController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile\Controller;

+use Drupal\profile\ProfileStorageInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Session\AccountInterface;
@@ @@
   /**
    * Builds a page title for the given profile type.
    *
-   * @param \Drupal\profile\Entity\ProfileTypeInterface $profile_type
+   * @param ProfileTypeInterface $profile_type
    *   The profile type.
    *
    * @return string
@@ @@
   /**
    * Builds the add/edit page for "single" profile types.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user account.
-   * @param \Drupal\profile\Entity\ProfileTypeInterface $profile_type
+   * @param ProfileTypeInterface $profile_type
    *   The profile type.
    *
    * @return array
@@ @@
    *   The response.
    */
   public function singlePage(UserInterface $user, ProfileTypeInterface $profile_type) {
-    /** @var \Drupal\profile\ProfileStorageInterface $profile_storage */
+    /** @var ProfileStorageInterface $profile_storage */
     $profile_storage = $this->entityTypeManager()->getStorage('profile');
     $profile = $profile_storage->loadByUser($user, $profile_type->id());

@@ @@
   /**
    * Builds the listing page for "multiple" profile types.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user account.
-   * @param \Drupal\profile\Entity\ProfileTypeInterface $profile_type
+   * @param ProfileTypeInterface $profile_type
    *   The profile type.
    *
    * @return array
@@ @@
   /**
    * Builds the profile add form.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user account.
-   * @param \Drupal\profile\Entity\ProfileTypeInterface $profile_type
+   * @param ProfileTypeInterface $profile_type
    *   The profile type.
    *
    * @return array
@@ @@
   /**
    * Builds the edit form.
    *
-   * @param \Drupal\profile\Entity\ProfileInterface $profile
+   * @param ProfileInterface $profile
    *   The profile.
    *
    * @return array
@@ @@
   /**
    * Checks access for the single/multiple pages.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user account.
-   * @param \Drupal\profile\Entity\ProfileTypeInterface $profile_type
+   * @param ProfileTypeInterface $profile_type
    *   The profile type.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function checkAccess(UserInterface $user, ProfileTypeInterface $profile_type, AccountInterface $account) {
@@ @@
   /**
    * Checks access for the profile add form.
    *
-   * @param \Drupal\user\UserInterface $user
+   * @param UserInterface $user
    *   The user account.
-   * @param \Drupal\profile\Entity\ProfileTypeInterface $profile_type
+   * @param ProfileTypeInterface $profile_type
    *   The profile type.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The currently logged in account.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function checkCreateAccess(UserInterface $user, ProfileTypeInterface $profile_type, AccountInterface $account) {
@@ @@
     }

     $access_control_handler = $this->entityTypeManager()->getAccessControlHandler('profile');
-    /** @var \Drupal\Core\Access\AccessResult $result */
+    /** @var AccessResult $result */
     $result = $access_control_handler->createAccess($profile_type->id(), $account, [
       'profile_owner' => $user,
     ], TRUE);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/profile/src/Controller/ProfileController.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * Mark profile as default.
    *
-   * @param \Drupal\profile\Entity\ProfileInterface $profile
+   * @param ProfileInterface $profile
    *   The profile.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   A redirect back to the profile listing.
    */
   public function setDefault(ProfileInterface $profile) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/profile/src/Access/ProfileTypeMultipleAccessCheck.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\profile\Access;

+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\profile\Entity\ProfileTypeInterface;
@@ @@
   /**
    * Performs the access check.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to check against.
-   * @param \Drupal\profile\Entity\ProfileTypeInterface $profile_type
+   * @param ProfileTypeInterface $profile_type
    *   The profile type.
    *
-   * @return bool|\Drupal\Core\Access\AccessResultInterface
+   * @return bool|AccessResultInterface
    *   The access result.
    */
   public function access(Route $route, ProfileTypeInterface $profile_type) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


30) modules/contrib/profile/profile.tokens.inc:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\profile\ProfileStorageInterface;
+use Drupal\Core\Render\Renderer;
 /**
  * @file
  * Provides token support for profiles.
@@ @@
       if (!empty($parts[0]) && in_array($parts[0], array_keys(ProfileType::loadMultiple()))) {
         $profile_type = $parts[0];

-        /** @var \Drupal\profile\ProfileStorageInterface $storage */
+        /** @var ProfileStorageInterface $storage */
         $storage = \Drupal::entityTypeManager()->getStorage('profile');
         $profile = $storage->loadByUser($user, $profile_type);

@@ @@
             $view_builder = $entity_type_manager->getViewBuilder('profile');
             $profile_view = $view_builder->view($profile, 'token');

-            /** @var Drupal\Core\Render\Renderer $renderer */
+            /** @var Renderer $renderer */
             $renderer = \Drupal::service('renderer');
             $replacements[$original] = $renderer->renderRoot($profile_view);
           }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


31) modules/contrib/profile/profile.post_update.php:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\Core\Config\Entity\ConfigEntityInterface;
 /**
  * @file
  * Post update functions for Profile.
@@ @@
  * Add new revision settings to profile types.
  */
 function profile_post_update_add_revision_settings() {
-  /** @var \Drupal\profile\Entity\ProfileType[] $profile_types */
+  /** @var ProfileType[] $profile_types */
   $profile_types = ProfileType::loadMultiple();
   foreach ($profile_types as $profile_type) {
     if ($profile_type->get('use_revisions')) {
@@ @@
  * Replace the "profiles" view with the updated version.
  */
 function profile_post_update_replace_view() {
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $view_storage */
+  /** @var ConfigEntityStorageInterface $view_storage */
   $view_storage = \Drupal::entityTypeManager()->getStorage('view');
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $view */
+  /** @var ConfigEntityInterface $view */
   $view = $view_storage->load('profiles');
   if (!$view) {
     return;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


32) modules/contrib/profile/profile.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\profile\Entity\ProfileTypeInterface;
+use Drupal\profile\Entity\ProfileInterface;
 /**
  * @file
  * Support for configurable user profiles.
@@ @@
   }

   $profile_type_ids = array_keys($bundles['profile']);
-  /** @var \Drupal\profile\Entity\ProfileTypeInterface[] $profile_types */
+  /** @var ProfileTypeInterface[] $profile_types */
   $profile_types = ProfileType::loadMultiple($profile_type_ids);
   foreach ($bundles['profile'] as $bundle => $info) {
     if (isset($profile_types[$bundle])) {
@@ @@
       if ($is_private) {
         // Users may see their own private profile fields by default, so this
         // requires user granularity for caching.
-        /** @var \Drupal\profile\Entity\ProfileInterface $profile */
+        /** @var ProfileInterface $profile */
         $profile = $items->getEntity();
         if ($account->id() === $profile->getOwnerId()) {
           return AccessResult::neutral();
@@ @@
  *   - attributes: HTML attributes for the containing element.
  */
 function template_preprocess_profile(array &$variables) {
-  /** @var Drupal\profile\Entity\ProfileInterface $profile */
+  /** @var ProfileInterface $profile */
   $profile = $variables['elements']['#profile'];

   $variables['view_mode'] = $variables['elements']['#view_mode'];
@@ @@
  *
  * @param array $form
  *   The form array.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function profile_form_field_config_edit_form_submit(array $form, FormStateInterface $form_state) {
@@ @@
       return $fields;
     }

-    /** @var Drupal\profile\Entity\ProfileType[] $profile_types */
+    /** @var ProfileType[] $profile_types */
     $profile_types = $entity_type_manager->getStorage('profile_type')->loadMultiple();
     foreach ($profile_types as $profile_type) {
       $profile_type_id = $profile_type->id();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


33) modules/contrib/profile/profile.install:59

    ---------- begin diff ----------
@@ @@
  * Updates view profile permission name.
  */
 function profile_update_8002() {
-  /** @var \Drupal\user\Entity\Role[] $roles */
+  /** @var Role[] $roles */
   $roles = Role::loadMultiple();

   foreach ($roles as $role) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/profile/src/Plugin/search_api/processor/ProfileUserStatu
         s.php" file, due to:                                                   
         "Analyze error: "Class Drupal\search_api\Processor\ProcessorPluginBase 
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

