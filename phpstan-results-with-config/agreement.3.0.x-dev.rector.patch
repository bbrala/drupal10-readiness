diff --git a/agreement.module b/agreement.module
index 460c528..a5b04d1 100644
--- a/agreement.module
+++ b/agreement.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\user\Entity\User;
+use Drupal\agreement\Entity\Agreement;
+use Drupal\Core\Session\AccountInterface;
 /**
  * @file
  * Agreement module code - agreement.module.
@@ -15,11 +18,11 @@ use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
  * Implements hook_user_update().
  */
 function agreement_user_update(EntityInterface $account) {
-  /** @var \Drupal\user\Entity\User $account */
+  /** @var User $account */
   if ($account->getEntityTypeId() === 'user') {
     $current_user = \Drupal::currentUser();
     $agreements = \Drupal::entityTypeManager()->getStorage('agreement')->loadMultiple();
-    /** @var \Drupal\agreement\Entity\Agreement $agreement */
+    /** @var Agreement $agreement */
     foreach ($agreements as $agreement) {
       // Do not require user to re-accept agreement if they've just changed
       // their password.
@@ -103,9 +106,9 @@ function agreement_get_agreement_options() {
  * @internal
  */
 function _agreement_get_mail_variables(array $params) {
-  /** @var \Drupal\Core\Session\AccountInterface $account */
+  /** @var AccountInterface $account */
   $account = $params['account'];
-  /** @var \Drupal\agreement\Entity\Agreement $agreement */
+  /** @var Agreement $agreement */
   $agreement = $params['context']['agreement'];
 
   return [
diff --git a/src/AgreementHandler.php b/src/AgreementHandler.php
index 39848b2..987e701 100644
--- a/src/AgreementHandler.php
+++ b/src/AgreementHandler.php
@@ -27,50 +27,50 @@ class AgreementHandler implements AgreementHandlerInterface {
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Path matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
 
   /**
    * The datetime.time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Initialize method.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Path\PathMatcherInterface $pathMatcher
+   * @param PathMatcherInterface $pathMatcher
    *   The path matcher service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The datetime.time service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request stack.
    */
   public function __construct(Connection $connection, EntityTypeManagerInterface $entityTypeManager, PathMatcherInterface $pathMatcher, TimeInterface $time, RequestStack $requestStack) {
@@ -206,14 +206,14 @@ class AgreementHandler implements AgreementHandlerInterface {
   /**
    * Accept agreement for an anonymous user.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to agree.
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement that the user is agreeing to.
    * @param int $agreed
    *   An optional integer to set the agreement status to. Defaults to 1.
    *
-   * @return \Symfony\Component\HttpFoundation\Cookie
+   * @return Cookie
    *   A cookie to retain the user's acceptance of the agreement.
    */
   protected function agreeAnonymously(AccountProxyInterface $account, Agreement $agreement, $agreed) {
@@ -226,15 +226,15 @@ class AgreementHandler implements AgreementHandlerInterface {
     elseif ($agreement->agreeOnce()) {
       $expire = new \DateTime('+10 years');
     }
-    return new Cookie($cookieName, $agreed, $expire, '/', NULL, NULL, 'lax');
+    return Cookie::create($cookieName, $agreed, $expire, '/', NULL, NULL, 'lax');
   }
 
   /**
    * Accept agreement for an authenticated user.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account that is agreeing.
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement that the user is agreeing to.
    * @param int $agreed
    *   An optional integer to set the agreement status to. Defaults to 1.
@@ -276,7 +276,7 @@ class AgreementHandler implements AgreementHandlerInterface {
   /**
    * Check the status of the anonymous user for a particular agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to check if a user has agreed.
    *
    * @return bool
@@ -290,9 +290,9 @@ class AgreementHandler implements AgreementHandlerInterface {
   /**
    * Check the status of a user account for a particular agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to check if a user has agreed.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to check.
    *
    * @return bool
diff --git a/src/AgreementHandlerInterface.php b/src/AgreementHandlerInterface.php
index 340a803..9cacf09 100644
--- a/src/AgreementHandlerInterface.php
+++ b/src/AgreementHandlerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\agreement;
 
+use Symfony\Component\HttpFoundation\Cookie;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\user\UserInterface;
@@ -14,9 +15,9 @@ interface AgreementHandlerInterface {
   /**
    * Check the status of an user account for a particular agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to check if a user has agreed.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to check.
    *
    * @return bool
@@ -27,9 +28,9 @@ interface AgreementHandlerInterface {
   /**
    * Get the last agreement for the user for the agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to check if a user has agreed.
-   * @param \Drupal\user\UserInterface $account
+   * @param UserInterface $account
    *   The user account to check.
    *
    * @return int
@@ -40,9 +41,9 @@ interface AgreementHandlerInterface {
   /**
    * Check if an user can bypass the agreement or if the agreement applies.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to check roles.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to check bypass permission.
    */
   public function canAgree(Agreement $agreement, AccountProxyInterface $account);
@@ -50,14 +51,14 @@ interface AgreementHandlerInterface {
   /**
    * Accept the agreement for an user account.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement that the user is agreeing to.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to agree.
    * @param int $agreed
    *   An optional integer to set the agreement status to. Defaults to 1.
    *
-   * @return bool|\Symfony\Component\HttpFoundation\Cookie
+   * @return bool|Cookie
    *   TRUE if the operation was successful and the user is authenticated,
    *   a cookie if the operation was successful and the user is anonymous,
    *   otherwise FALSE.
@@ -67,12 +68,12 @@ interface AgreementHandlerInterface {
   /**
    * Find the agreement by user account and path.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to check.
    * @param string $path
    *   The path to check.
    *
-   * @return \Drupal\agreement\Entity\Agreement|false
+   * @return Agreement|false
    *   The agreement entity to use or FALSE if none found.
    */
   public function getAgreementByUserAndPath(AccountProxyInterface $account, $path);
@@ -80,9 +81,9 @@ interface AgreementHandlerInterface {
   /**
    * Checks if we're processing an anonymous agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to check for anonymous support.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to check.
    *
    * @return bool
diff --git a/src/Entity/Agreement.php b/src/Entity/Agreement.php
index 2e069d2..c558bad 100644
--- a/src/Entity/Agreement.php
+++ b/src/Entity/Agreement.php
@@ -105,7 +105,7 @@ class Agreement extends ConfigEntityBase {
   /**
    * Find if the agreement applies to an user account by role.
    *
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The user account to check roles for.
    *
    * @return bool
diff --git a/src/Entity/AgreementForm.php b/src/Entity/AgreementForm.php
index c5c0b9e..b00c5da 100644
--- a/src/Entity/AgreementForm.php
+++ b/src/Entity/AgreementForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\agreement\Entity;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -17,14 +19,14 @@ class AgreementForm extends EntityForm implements ContainerInjectionInterface {
   /**
    * Path validator.
    *
-   * @var \Drupal\Core\Path\PathValidatorInterface
+   * @var PathValidatorInterface
    */
   protected $pathValidator;
 
   /**
    * Initialize method.
    *
-   * @param \Drupal\Core\Path\PathValidatorInterface $pathValidator
+   * @param PathValidatorInterface $pathValidator
    *   The path validator service.
    */
   public function __construct(PathValidatorInterface $pathValidator) {
@@ -255,7 +257,7 @@ class AgreementForm extends EntityForm implements ContainerInjectionInterface {
    *
    * @param array $element
    *   The form array element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function validatePath(array $element, FormStateInterface $form_state) {
@@ -272,7 +274,7 @@ class AgreementForm extends EntityForm implements ContainerInjectionInterface {
    *
    * @param array $element
    *   The settings[frequency] form element array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state for the settings form.
    */
   public function validateFrequency(array $element, FormStateInterface $form_state) {
@@ -341,8 +343,8 @@ class AgreementForm extends EntityForm implements ContainerInjectionInterface {
    * @return bool
    *   TRUE if the machine name exists already.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exists($value) {
     $agreements = $this->entityTypeManager
diff --git a/src/Entity/Routing/AgreementRouteProvider.php b/src/Entity/Routing/AgreementRouteProvider.php
index c337b75..88821d7 100644
--- a/src/Entity/Routing/AgreementRouteProvider.php
+++ b/src/Entity/Routing/AgreementRouteProvider.php
@@ -19,14 +19,14 @@ class AgreementRouteProvider implements EntityRouteProviderInterface, EntityHand
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Initialize method.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager service.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
@@ -56,10 +56,10 @@ class AgreementRouteProvider implements EntityRouteProviderInterface, EntityHand
   /**
    * Get the route information from the agreement entity.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement entity.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   A route object.
    */
   protected function getCanonicalRouteForEntity(Agreement $agreement) {
diff --git a/src/EventSubscriber/AgreementSubscriber.php b/src/EventSubscriber/AgreementSubscriber.php
index 6a36b00..91d3f2c 100644
--- a/src/EventSubscriber/AgreementSubscriber.php
+++ b/src/EventSubscriber/AgreementSubscriber.php
@@ -8,11 +8,9 @@ use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Session\SessionManagerInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpKernel\Event\ExceptionEvent;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 use Symfony\Component\HttpKernel\Exception\HttpExceptionInterface;
 
 /**
@@ -23,41 +21,41 @@ class AgreementSubscriber implements EventSubscriberInterface {
   /**
    * Agreement handler.
    *
-   * @var \Drupal\agreement\AgreementHandlerInterface
+   * @var AgreementHandlerInterface
    */
   protected $handler;
 
   /**
    * Current path getter because paths > routes for users.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $pathStack;
 
   /**
    * Session manager.
    *
-   * @var \Drupal\Core\Session\SessionManagerInterface
+   * @var SessionManagerInterface
    */
   protected $sessionManager;
 
   /**
    * Current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
   /**
    * Initialize method.
    *
-   * @param \Drupal\agreement\AgreementHandlerInterface $agreementHandler
+   * @param AgreementHandlerInterface $agreementHandler
    *   The agreement handler.
-   * @param \Drupal\Core\Path\CurrentPathStack $pathStack
+   * @param CurrentPathStack $pathStack
    *   The current path.
-   * @param \Drupal\Core\Session\SessionManagerInterface $sessionManager
+   * @param SessionManagerInterface $sessionManager
    *   The session manager service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The current user account.
    */
   public function __construct(AgreementHandlerInterface $agreementHandler, CurrentPathStack $pathStack, SessionManagerInterface $sessionManager, AccountProxyInterface $account) {
@@ -70,7 +68,7 @@ class AgreementSubscriber implements EventSubscriberInterface {
   /**
    * Check if the user needs to accept an agreement.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent|\Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param ExceptionEvent|RequestEvent $event
    *   The response event.
    */
   public function checkForRedirection($event) {
@@ -105,7 +103,7 @@ class AgreementSubscriber implements EventSubscriberInterface {
    * the checkForRedirection function, that will lead to an infinite redirect
    * loop.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ExceptionEvent $event
+   * @param ExceptionEvent $event
    *   The response exception event.
    */
   public function exceptionRedirect(ExceptionEvent $event) {
@@ -118,7 +116,7 @@ class AgreementSubscriber implements EventSubscriberInterface {
   /**
    * Executes function to set redirect response if it is required.
    *
-   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
+   * @param RequestEvent $event
    *   The response event.
    */
   public function requestForRedirection(RequestEvent $event) {
diff --git a/src/Form/AgreementForm.php b/src/Form/AgreementForm.php
index 045713a..fcd1cd6 100644
--- a/src/Form/AgreementForm.php
+++ b/src/Form/AgreementForm.php
@@ -29,59 +29,59 @@ class AgreementForm implements FormInterface, ContainerInjectionInterface {
   /**
    * Agreement handler.
    *
-   * @var \Drupal\agreement\AgreementHandlerInterface
+   * @var AgreementHandlerInterface
    */
   protected $agreementHandler;
 
   /**
    * Route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Mail manager.
    *
-   * @var \Drupal\Core\Mail\MailManagerInterface
+   * @var MailManagerInterface
    */
   protected $mailManager;
 
   /**
    * Initialize method.
    *
-   * @param \Drupal\agreement\AgreementHandlerInterface $agreementHandler
+   * @param AgreementHandlerInterface $agreementHandler
    *   The agreement handler interface.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The current route match.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   * @param LanguageManagerInterface $languageManager
    *   The language manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The current user account.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\Core\Mail\MailManagerInterface $mailManager
+   * @param MailManagerInterface $mailManager
    *   The mail service.
    */
   public function __construct(AgreementHandlerInterface $agreementHandler, RouteMatchInterface $routeMatch, LanguageManagerInterface $languageManager, AccountProxyInterface $account, MessengerInterface $messenger, MailManagerInterface $mailManager) {
@@ -105,9 +105,9 @@ class AgreementForm implements FormInterface, ContainerInjectionInterface {
   /**
    * Get the page title.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $routeMatch
+   * @param RouteMatchInterface $routeMatch
    *   The route match object. Ignored.
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement entity.
    *
    * @return string
@@ -123,9 +123,9 @@ class AgreementForm implements FormInterface, ContainerInjectionInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Drupal\agreement\Entity\Agreement|null $agreement
+   * @param Agreement|null $agreement
    *   The agreement entity.
    *
    * @return array
@@ -190,7 +190,7 @@ class AgreementForm implements FormInterface, ContainerInjectionInterface {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $storage = $form_state->getStorage();
-    /** @var \Drupal\agreement\Entity\Agreement $agreement */
+    /** @var Agreement $agreement */
     $agreement = $storage['agreement'];
     $settings = $agreement->getSettings();
     $destination = '/';
@@ -225,7 +225,7 @@ class AgreementForm implements FormInterface, ContainerInjectionInterface {
   /**
    * Process and generate a response for successful agreements.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement being processed.
    * @param int $agree
    *   An integer to set the agreement status to.
@@ -234,7 +234,7 @@ class AgreementForm implements FormInterface, ContainerInjectionInterface {
    * @param string $destination
    *   The destination to send the user to upon successful agreement.
    *
-   * @return bool|\Drupal\Core\Routing\LocalRedirectResponse
+   * @return bool|LocalRedirectResponse
    *   A local redirect response if the agreement was processed successfully,
    *   otherwise FALSE.
    */
@@ -259,9 +259,9 @@ class AgreementForm implements FormInterface, ContainerInjectionInterface {
   /**
    * Notify email recipient if provided.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement entity.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account.
    * @param string $mail
    *   The email recipient.
diff --git a/src/Plugin/migrate/destination/Agreement.php b/src/Plugin/migrate/destination/Agreement.php
index c998273..f517657 100644
--- a/src/Plugin/migrate/destination/Agreement.php
+++ b/src/Plugin/migrate/destination/Agreement.php
@@ -25,7 +25,7 @@ class Agreement extends DestinationBase implements ContainerFactoryPluginInterfa
   /**
    * Database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
@@ -38,9 +38,9 @@ class Agreement extends DestinationBase implements ContainerFactoryPluginInterfa
    *   The plugin ID.
    * @param array $plugin_definition
    *   The plugin definition array.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, MigrationInterface $migration, Connection $connection) {
diff --git a/src/Plugin/migrate/process/AgreementSettings.php b/src/Plugin/migrate/process/AgreementSettings.php
index 3a9b1ff..4fd3170 100644
--- a/src/Plugin/migrate/process/AgreementSettings.php
+++ b/src/Plugin/migrate/process/AgreementSettings.php
@@ -24,21 +24,21 @@ class AgreementSettings extends ProcessPluginBase implements ContainerFactoryPlu
   /**
    * Migration.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    */
   protected $migration;
 
   /**
    * The process plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigratePluginManagerInterface
+   * @var MigratePluginManagerInterface
    */
   protected $processPluginManager;
 
   /**
    * The migration plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface
+   * @var MigrationPluginManagerInterface
    */
   protected $migrationPluginManager;
 
@@ -51,11 +51,11 @@ class AgreementSettings extends ProcessPluginBase implements ContainerFactoryPlu
    *   The plugin ID.
    * @param array $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   This migration.
-   * @param \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migration_plugin_manager
+   * @param MigrationPluginManagerInterface $migration_plugin_manager
    *   Migration plugin manager.
-   * @param \Drupal\migrate\Plugin\MigratePluginManagerInterface $process_plugin_manager
+   * @param MigratePluginManagerInterface $process_plugin_manager
    *   Process plugin manager.
    */
   public function __construct(array $configuration, $plugin_id, array $plugin_definition, MigrationInterface $migration, MigrationPluginManagerInterface $migration_plugin_manager, MigratePluginManagerInterface $process_plugin_manager) {
@@ -118,7 +118,7 @@ class AgreementSettings extends ProcessPluginBase implements ContainerFactoryPlu
    *
    * @param string $value
    *   The role name.
-   * @param \Drupal\migrate\MigrateExecutableInterface $executable
+   * @param MigrateExecutableInterface $executable
    *   The migration execution.
    *
    * @return string
@@ -137,7 +137,7 @@ class AgreementSettings extends ProcessPluginBase implements ContainerFactoryPlu
 
     try {
       $row = new Row(['rid' => $value], ['rid' => ['type' => 'integer']]);
-      /** @var  \Drupal\migrate\Plugin\MigrationInterface $migration */
+      /** @var MigrationInterface $migration */
       $migration = $this->migrationPluginManager->createInstance('d7_user_role');
       $configuration = ['source' => 'rid'];
 
diff --git a/src/Plugin/views/field/AgreementEntity.php b/src/Plugin/views/field/AgreementEntity.php
index 8d6aa09..c077dce 100644
--- a/src/Plugin/views/field/AgreementEntity.php
+++ b/src/Plugin/views/field/AgreementEntity.php
@@ -20,7 +20,7 @@ class AgreementEntity extends FieldPluginBase {
   /**
    * Entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -33,7 +33,7 @@ class AgreementEntity extends FieldPluginBase {
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition array.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager) {
diff --git a/tests/src/Functional/AgreementAccessDeniedRedirectTest.php b/tests/src/Functional/AgreementAccessDeniedRedirectTest.php
index 2a63b26..259dd99 100644
--- a/tests/src/Functional/AgreementAccessDeniedRedirectTest.php
+++ b/tests/src/Functional/AgreementAccessDeniedRedirectTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\agreement\Functional;
 
+use Drupal\user\Entity\User;
 /**
  * Tests that user is redirected when attempting to access privileged route.
  *
@@ -12,7 +13,7 @@ class AgreementAccessDeniedRedirectTest extends AgreementTestBase {
   /**
    * The user account to test.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $unprivilegedUser;
 
diff --git a/tests/src/Functional/AgreementCustomFrequencyTest.php b/tests/src/Functional/AgreementCustomFrequencyTest.php
index f382988..b9dab57 100644
--- a/tests/src/Functional/AgreementCustomFrequencyTest.php
+++ b/tests/src/Functional/AgreementCustomFrequencyTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\agreement\Functional;
 
+use Drupal\Core\Session\AccountProxyInterface;
 /**
  * Tests custom frequencies.
  *
@@ -12,7 +13,7 @@ class AgreementCustomFrequencyTest extends AgreementTestBase {
   /**
    * User account to test custom frequency.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $unprivilegedAccount;
 
diff --git a/tests/src/Functional/AgreementCustomUnprivilegedUserTest.php b/tests/src/Functional/AgreementCustomUnprivilegedUserTest.php
index f93a903..393cea1 100644
--- a/tests/src/Functional/AgreementCustomUnprivilegedUserTest.php
+++ b/tests/src/Functional/AgreementCustomUnprivilegedUserTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\agreement\Functional;
 
+use Drupal\user\Entity\User;
 /**
  * Tests custom agreement settings.
  *
@@ -12,7 +13,7 @@ class AgreementCustomUnprivilegedUserTest extends AgreementTestBase {
   /**
    * The user account.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $account;
 
diff --git a/tests/src/Functional/AgreementMultilingualTest.php b/tests/src/Functional/AgreementMultilingualTest.php
index e6d099f..cf82809 100644
--- a/tests/src/Functional/AgreementMultilingualTest.php
+++ b/tests/src/Functional/AgreementMultilingualTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\agreement\Functional;
 
+use Drupal\user\Entity\User;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\user\Traits\UserCreationTrait;
@@ -34,7 +36,7 @@ class AgreementMultilingualTest extends AgreementTestBase {
   /**
    * Spanish user account to test with.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $spanishSpeaker;
 
@@ -112,10 +114,10 @@ class AgreementMultilingualTest extends AgreementTestBase {
   /**
    * Asserts that the user has agreed to the agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to agree to.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function assertAgreed(Agreement $agreement) {
     $this->drupalGet($agreement->get('path'));
@@ -128,10 +130,10 @@ class AgreementMultilingualTest extends AgreementTestBase {
   /**
    * Asserts that the user has not agreed to the agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to agree to.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function assertNotAgreed(Agreement $agreement) {
     $this->drupalGet($agreement->get('path'));
diff --git a/tests/src/Functional/AgreementMultipleTest.php b/tests/src/Functional/AgreementMultipleTest.php
index e155913..bf90092 100644
--- a/tests/src/Functional/AgreementMultipleTest.php
+++ b/tests/src/Functional/AgreementMultipleTest.php
@@ -14,7 +14,7 @@ class AgreementMultipleTest extends AgreementTestBase {
   /**
    * A second agreement.
    *
-   * @var \Drupal\agreement\Entity\Agreement
+   * @var Agreement
    */
   protected $newAgreement;
 
diff --git a/tests/src/Functional/AgreementTestBase.php b/tests/src/Functional/AgreementTestBase.php
index 60ca449..a9e36b9 100644
--- a/tests/src/Functional/AgreementTestBase.php
+++ b/tests/src/Functional/AgreementTestBase.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\agreement\Functional;
 
+use Drupal\node\Entity\Node;
+use Drupal\user\Entity\User;
+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Exception\ElementNotFoundException;
+use Behat\Mink\Exception\ResponseTextException;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\node\Traits\NodeCreationTrait;
@@ -29,7 +34,7 @@ abstract class AgreementTestBase extends BrowserTestBase {
   /**
    * A page node to test with.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $node;
 
@@ -43,14 +48,14 @@ abstract class AgreementTestBase extends BrowserTestBase {
   /**
    * An alternate page node to test.
    *
-   * @var \Drupal\node\Entity\Node
+   * @var Node
    */
   protected $otherNode;
 
   /**
    * Agreement to test with.
    *
-   * @var \Drupal\agreement\Entity\Agreement
+   * @var Agreement
    */
   protected $agreement;
 
@@ -74,7 +79,7 @@ abstract class AgreementTestBase extends BrowserTestBase {
     /* @var \Drupal\node\Entity\Node node */
     $this->node = $this->createNode();
 
-    /** @var \Drupal\node\Entity\Node node */
+    /** @var Node node */
     $this->otherNode = $this->createNode();
 
     // Load the default agreement.
@@ -94,7 +99,7 @@ abstract class AgreementTestBase extends BrowserTestBase {
   /**
    * Create a privileged user account.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   The user account.
    */
   public function createPrivilegedUser() {
@@ -110,7 +115,7 @@ abstract class AgreementTestBase extends BrowserTestBase {
   /**
    * Create an unprivileged user account.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   The user account.
    */
   public function createUnprivilegedUser() {
@@ -120,7 +125,7 @@ abstract class AgreementTestBase extends BrowserTestBase {
   /**
    * Create a user account that can bypass agreements.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   The user account.
    */
   public function createBypassUser() {
@@ -130,7 +135,7 @@ abstract class AgreementTestBase extends BrowserTestBase {
   /**
    * Create a user account that can revoke own agreement.
    *
-   * @return \Drupal\user\Entity\User|false
+   * @return User|false
    *   The user account.
    */
   public function createRevokeUser() {
@@ -140,10 +145,10 @@ abstract class AgreementTestBase extends BrowserTestBase {
   /**
    * Assert that the current page is the agreement page.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement entity to assert.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws ExpectationException
    */
   public function assertAgreementPage(Agreement $agreement) {
     $settings = $agreement->getSettings();
@@ -156,7 +161,7 @@ abstract class AgreementTestBase extends BrowserTestBase {
   /**
    * Assert that the current page is not the agreement page.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement entity to assert.
    */
   public function assertNotAgreementPage(Agreement $agreement) {
@@ -169,7 +174,7 @@ abstract class AgreementTestBase extends BrowserTestBase {
    * @param string $message
    *   The message to display for the assertion.
    *
-   * @throws \Behat\Mink\Exception\ElementNotFoundException
+   * @throws ElementNotFoundException
    */
   public function assertFrontPage($message = 'Page is the front page.') {
     $body = $this->assertSession()->elementExists('xpath', 'body');
@@ -199,10 +204,10 @@ abstract class AgreementTestBase extends BrowserTestBase {
   /**
    * Asserts that the user has not agreed to the agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to agree to.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function assertNotAgreed(Agreement $agreement) {
     $settings = $agreement->getSettings();
@@ -214,10 +219,10 @@ abstract class AgreementTestBase extends BrowserTestBase {
   /**
    * Asserts that the user has agreed to the agreement.
    *
-   * @param \Drupal\agreement\Entity\Agreement $agreement
+   * @param Agreement $agreement
    *   The agreement to agree to.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
+   * @throws ResponseTextException
    */
   public function assertAgreed(Agreement $agreement) {
     $settings = $agreement->getSettings();
diff --git a/tests/src/Kernel/d6/AgreementMigrateTest.php b/tests/src/Kernel/d6/AgreementMigrateTest.php
index 030b915..2e48bc7 100644
--- a/tests/src/Kernel/d6/AgreementMigrateTest.php
+++ b/tests/src/Kernel/d6/AgreementMigrateTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\agreement\Kernel\d6;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\agreement\Entity\Agreement;
 use Drupal\Tests\migrate_drupal\Kernel\d6\MigrateDrupal6TestBase;
 use Drupal\user\Entity\User;
 
@@ -46,13 +48,13 @@ class AgreementMigrateTest extends MigrateDrupal6TestBase {
   public function testDataMigration() {
     $agreementHandler = $this->container->get('agreement.handler');
     $entityTypeManager = $this->container->get('entity_type.manager');
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $configStorage */
+    /** @var ConfigEntityStorageInterface $configStorage */
     $configStorage = $entityTypeManager->getStorage('agreement');
     $agreement_types = $configStorage->loadMultiple();
 
     $this->assertEquals(1, count($agreement_types), 'Found default agreement type.');
 
-    /** @var \Drupal\agreement\Entity\Agreement $default */
+    /** @var Agreement $default */
     $default = $configStorage->load('default');
 
     $user2 = User::load(2);
diff --git a/tests/src/Kernel/d7/AgreementMigrateTest.php b/tests/src/Kernel/d7/AgreementMigrateTest.php
index eb5940d..3e2287b 100644
--- a/tests/src/Kernel/d7/AgreementMigrateTest.php
+++ b/tests/src/Kernel/d7/AgreementMigrateTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\agreement\Kernel\d7;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\agreement\Entity\Agreement;
 use Drupal\Tests\migrate_drupal\Kernel\d7\MigrateDrupal7TestBase;
 use Drupal\user\Entity\User;
 
@@ -50,7 +52,7 @@ class AgreementMigrateTest extends MigrateDrupal7TestBase {
   public function testDataMigration() {
     $agreementHandler = $this->container->get('agreement.handler');
     $entityTypeManager = $this->container->get('entity_type.manager');
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $configStorage */
+    /** @var ConfigEntityStorageInterface $configStorage */
     $configStorage = $entityTypeManager->getStorage('agreement');
     $agreement_types = $configStorage->loadMultiple();
 
@@ -94,14 +96,14 @@ class AgreementMigrateTest extends MigrateDrupal7TestBase {
       'reset_date' => 0,
     ];
 
-    /** @var \Drupal\agreement\Entity\Agreement $default */
+    /** @var Agreement $default */
     $default = $configStorage->load('default');
     $this->assertEquals('Default agreement', $default->label());
     $this->assertEquals('Default agreement.', $default->get('agreement'));
     $this->assertEquals('/agreement', $default->get('path'));
     $this->assertEquals($expected_default_settings, $default->getSettings());
 
-    /** @var \Drupal\agreement\Entity\Agreement $node1Agreement */
+    /** @var Agreement $node1Agreement */
     $node1Agreement = $configStorage->load('node_1_agreement');
     $this->assertEquals('Node 1 agreement', $node1Agreement->label());
     $this->assertEquals('Agree to node 1.', $node1Agreement->get('agreement'));
diff --git a/tests/src/Unit/AgreementHandlerTest.php b/tests/src/Unit/AgreementHandlerTest.php
index 1692d7c..ebd9767 100644
--- a/tests/src/Unit/AgreementHandlerTest.php
+++ b/tests/src/Unit/AgreementHandlerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\agreement\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\agreement\AgreementHandler;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
@@ -17,6 +18,7 @@ use Symfony\Component\HttpFoundation\RequestStack;
  */
 class AgreementHandlerTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Asserts that database operation errors are handled.
    *
@@ -45,9 +47,7 @@ class AgreementHandlerTest extends UnitTestCase {
       ->willReturn($transactionProphet->reveal());
 
     // Prophecy does not allow mocking objects that return $this because.
-    $delete = $this->getMockBuilder('\Drupal\Core\Database\Query\Delete')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $delete = $this->createMock('\Drupal\Core\Database\Query\Delete');
     $delete->expects($this->any())
       ->method('condition')
       ->willReturnSelf();
@@ -61,9 +61,7 @@ class AgreementHandlerTest extends UnitTestCase {
         return 3;
       });
 
-    $insert = $this->getMockBuilder('\Drupal\Core\Database\Query\Insert')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $insert = $this->createMock('\Drupal\Core\Database\Query\Insert');
     $insert->expects($this->any())
       ->method('fields')
       ->willReturnSelf();
@@ -113,9 +111,9 @@ class AgreementHandlerTest extends UnitTestCase {
   /**
    * Asserts agreement discovery.
    *
-   * @param \Drupal\agreement\Entity\Agreement|false $expected
+   * @param Agreement|false $expected
    *   The expected return value for this test.
-   * @param \Drupal\agreement\Entity\Agreement[] $agreements
+   * @param Agreement[] $agreements
    *   A list of agreements.
    * @param array $roles
    *   An indexed array of user roles to apply to the mock user.
@@ -146,9 +144,7 @@ class AgreementHandlerTest extends UnitTestCase {
     $statementProphet->fetchField()->willReturn($agreed);
 
     // Mocks select query using mock object because prophecy.
-    $select = $this->getMockBuilder('\Drupal\Core\Database\Query\SelectInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $select = $this->createMock('\Drupal\Core\Database\Query\SelectInterface');
     $select->expects($this->any())
       ->method('fields')
       ->willReturnSelf();
diff --git a/tests/src/Unit/EventSubscriber/AgreementSubscriberTest.php b/tests/src/Unit/EventSubscriber/AgreementSubscriberTest.php
index da40497..d669f61 100644
--- a/tests/src/Unit/EventSubscriber/AgreementSubscriberTest.php
+++ b/tests/src/Unit/EventSubscriber/AgreementSubscriberTest.php
@@ -2,12 +2,12 @@
 
 namespace Drupal\Tests\agreement\Unit\EventSubscriber;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\agreement\EventSubscriber\AgreementSubscriber;
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
 
@@ -18,6 +18,7 @@ use Symfony\Component\HttpKernel\HttpKernelInterface;
  */
 class AgreementSubscriberTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Asserts that check for redirection method is functional.
    *
diff --git a/tests/src/Unit/Plugin/views/field/AgreementEntityTest.php b/tests/src/Unit/Plugin/views/field/AgreementEntityTest.php
index 1589613..f082e33 100644
--- a/tests/src/Unit/Plugin/views/field/AgreementEntityTest.php
+++ b/tests/src/Unit/Plugin/views/field/AgreementEntityTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\agreement\Unit\Plugin\views\field;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\agreement\Entity\Agreement;
 use Drupal\agreement\Plugin\views\field\AgreementEntity;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
@@ -15,10 +16,11 @@ use Drupal\views\ResultRow;
  */
 class AgreementEntityTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * Agreement entity plugin.
    *
-   * @var \Drupal\agreement\Plugin\views\field\AgreementEntity
+   * @var AgreementEntity
    */
   protected $plugin;
 
