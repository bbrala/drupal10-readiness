diff --git a/modules/schemadotorg_demo/src/Commands/SchemaDotOrgDemoCommands.php b/modules/schemadotorg_demo/src/Commands/SchemaDotOrgDemoCommands.php
index 594000e..e0c8589 100644
--- a/modules/schemadotorg_demo/src/Commands/SchemaDotOrgDemoCommands.php
+++ b/modules/schemadotorg_demo/src/Commands/SchemaDotOrgDemoCommands.php
@@ -17,23 +17,23 @@ class SchemaDotOrgDemoCommands extends DrushCommands {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The Schema.org demo manager.
    *
-   * @var \Drupal\schemadotorg_demo\SchemaDotOrgDemoManagerInterface
+   * @var SchemaDotOrgDemoManagerInterface
    */
   protected $schemaDemoManager;
 
   /**
    * SchemaDotOrgDemoCommands constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration object factory.
-   * @param \Drupal\schemadotorg_demo\SchemaDotOrgDemoManagerInterface $schema_demo_manager
+   * @param SchemaDotOrgDemoManagerInterface $schema_demo_manager
    *   The Schema.org demo manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, SchemaDotOrgDemoManagerInterface $schema_demo_manager) {
@@ -207,11 +207,10 @@ class SchemaDotOrgDemoCommands extends DrushCommands {
   /* ************************************************************************ */
   // Command helper methods.
   /* ************************************************************************ */
-
   /**
    * Allow users to choose the demo.
    *
-   * @param \Symfony\Component\Console\Input\InputInterface $input
+   * @param InputInterface $input
    *   The user input.
    * @param string $action
    *   The action.
@@ -249,7 +248,7 @@ class SchemaDotOrgDemoCommands extends DrushCommands {
    * @param bool $required
    *   Include required types.
    *
-   * @throws \Drush\Exceptions\UserAbortException
+   * @throws UserAbortException
    */
   protected function confirmDemoCommand($name, $action, $required = FALSE) {
     $types = $this->schemaDemoManager->getTypes($name, $required);
diff --git a/modules/schemadotorg_demo/src/Controller/SchemadotorgDemoController.php b/modules/schemadotorg_demo/src/Controller/SchemadotorgDemoController.php
index 998260a..aba2b4e 100644
--- a/modules/schemadotorg_demo/src/Controller/SchemadotorgDemoController.php
+++ b/modules/schemadotorg_demo/src/Controller/SchemadotorgDemoController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg_demo\Controller;
 
+use Drupal\schemadotorg_demo\SchemaDotOrgDemoManagerInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -13,7 +14,7 @@ class SchemadotorgDemoController extends ControllerBase {
   /**
    * The Schema.org demo manager service.
    *
-   * @var \Drupal\schemadotorg_demo\SchemaDotOrgDemoManagerInterface
+   * @var SchemaDotOrgDemoManagerInterface
    */
   protected $schemaDemoManager;
 
diff --git a/modules/schemadotorg_demo/src/SchemaDotOrgDemoManager.php b/modules/schemadotorg_demo/src/SchemaDotOrgDemoManager.php
index 7b8abaa..e9b54b8 100644
--- a/modules/schemadotorg_demo/src/SchemaDotOrgDemoManager.php
+++ b/modules/schemadotorg_demo/src/SchemaDotOrgDemoManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\schemadotorg_demo;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\State\StateInterface;
@@ -19,21 +21,21 @@ class SchemaDotOrgDemoManager implements SchemaDotOrgDemoManagerInterface {
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -41,14 +43,14 @@ class SchemaDotOrgDemoManager implements SchemaDotOrgDemoManagerInterface {
   /**
    * The Schema.org entity relationship manager service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgEntityRelationshipManagerInterface
+   * @var SchemaDotOrgEntityRelationshipManagerInterface
    */
   protected $schemaEntityRelationshipManager;
 
   /**
    * The Schema.org UI API.
    *
-   * @var \Drupal\schemadotorg_ui\SchemaDotOrgUiApiInterface
+   * @var SchemaDotOrgUiApiInterface
    */
   protected $schemaApi;
 
@@ -62,15 +64,15 @@ class SchemaDotOrgDemoManager implements SchemaDotOrgDemoManagerInterface {
   /**
    * SchemaDotOrgDemoCommands constructor.
    *
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration object factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\schemadotorg\SchemaDotOrgEntityRelationshipManagerInterface $schema_entity_relationship_manager
+   * @param SchemaDotOrgEntityRelationshipManagerInterface $schema_entity_relationship_manager
    *   The Schema.org schema entity relationship manager.
-   * @param \Drupal\schemadotorg_ui\SchemaDotOrgUiApiInterface $schema_api
+   * @param SchemaDotOrgUiApiInterface $schema_api
    *   The Schema.org UI API.
    * @param \Drupal\devel_generate\DevelGeneratePluginManager|null $devel_generate_manager
    *   The Devel generate manager.
@@ -152,7 +154,7 @@ class SchemaDotOrgDemoManager implements SchemaDotOrgDemoManagerInterface {
 
     $messages = [];
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface  $mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping_type');
 
     // Reverse types to prevent entity reference errors.
@@ -278,7 +280,7 @@ class SchemaDotOrgDemoManager implements SchemaDotOrgDemoManagerInterface {
    * @param string $schema_type
    *   The Schema.org type.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingInterface|null
+   * @return SchemaDotOrgMappingInterface|null
    *   A Schema.org mapping.
    */
   protected function loadMappingByType($entity_type, $schema_type) {
diff --git a/modules/schemadotorg_descriptions/schemadotorg_descriptions.module b/modules/schemadotorg_descriptions/schemadotorg_descriptions.module
index 8d2173d..0d4805e 100644
--- a/modules/schemadotorg_descriptions/schemadotorg_descriptions.module
+++ b/modules/schemadotorg_descriptions/schemadotorg_descriptions.module
@@ -1,5 +1,10 @@
 <?php
 
+use Drupal\Core\Config\Entity\ConfigEntityType;
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
+use Drupal\schemadotorg\SchemaDotOrgNamesInterface;
 /**
  * @file
  * Sets entity/field descriptions to their corresponding Schema.org comments.
@@ -31,13 +36,13 @@ function schemadotorg_descriptions_entity_load(array $entities, $entity_type_id)
     return;
   }
 
-  /** @var \Drupal\Core\Config\Entity\ConfigEntityType $entity_type_definition */
+  /** @var ConfigEntityType $entity_type_definition */
   $entity_type_definition = \Drupal::entityTypeManager()->getDefinition($entity_type_id);
   $target_entity_type_id = $entity_type_definition->getBundleOf();
 
-  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
+  /** @var SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
   $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
-  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface $schema_type_builder */
+  /** @var SchemaDotOrgSchemaTypeBuilderInterface $schema_type_builder */
   $schema_type_builder = \Drupal::service('schemadotorg.schema_type_builder');
 
   $options = ['base_path' => 'https://schema.org/'];
@@ -46,7 +51,7 @@ function schemadotorg_descriptions_entity_load(array $entities, $entity_type_id)
   $custom_descriptions = \Drupal::config('schemadotorg_descriptions.settings')
     ->get('custom_descriptions');
 
-  /** @var \Drupal\Core\Entity\EntityInterface[] $entities */
+  /** @var EntityInterface[] $entities */
   foreach ($entities as $entity) {
     // Only set description for config entity bundles and if it is empty.
     if (!$entity instanceof ConfigEntityBundleBase || !empty($entity->get('description'))) {
@@ -136,13 +141,13 @@ function schemadotorg_descriptions_entity_prepare_form(EntityInterface $entity,
     $target_bundle = $entity->getTargetBundle();
     $field_name = $entity->getName();
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping */
+    /** @var SchemaDotOrgMappingInterface $mapping */
     $mapping = SchemaDotOrgMapping::load("$target_entity_type_id.$target_bundle");
     if (!$mapping) {
       return;
     }
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
+    /** @var SchemaDotOrgNamesInterface $schema_names */
     $schema_names = \Drupal::service('schemadotorg.names');
     $bundle = $mapping->getTargetBundle();
     $subtype_field_name = $schema_names->getSubtypeFieldName($bundle);
diff --git a/modules/schemadotorg_descriptions/src/Config/SchemaDotOrgDescriptionsConfigFactoryOverride.php b/modules/schemadotorg_descriptions/src/Config/SchemaDotOrgDescriptionsConfigFactoryOverride.php
index 99d8005..773d78d 100644
--- a/modules/schemadotorg_descriptions/src/Config/SchemaDotOrgDescriptionsConfigFactoryOverride.php
+++ b/modules/schemadotorg_descriptions/src/Config/SchemaDotOrgDescriptionsConfigFactoryOverride.php
@@ -36,50 +36,50 @@ class SchemaDotOrgDescriptionsConfigFactoryOverride extends ConfigFactoryOverrid
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Default cache backend instance.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $defaultCacheBackend;
 
   /**
    * Discovery cache backend instance.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $discoveryCacheBackend;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * The Schema.org schema type builder.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface
+   * @var SchemaDotOrgSchemaTypeBuilderInterface
    */
   protected $schemaTypeBuilder;
 
   /**
    * Constructs a SchemaDotOrgInstaller object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration object factory.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $default_cache_backend
+   * @param CacheBackendInterface $default_cache_backend
    *   The default cache backend.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $discovery_cache_backend
+   * @param CacheBackendInterface $discovery_cache_backend
    *   The discovery cache backend.
-   * @param \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
+   * @param SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
    *   The Schema.org schema type manager.
-   * @param \Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface $schema_type_builder
+   * @param SchemaDotOrgSchemaTypeBuilderInterface $schema_type_builder
    *   The Schema.org schema type builder.
    */
   public function __construct(
@@ -130,7 +130,7 @@ class SchemaDotOrgDescriptionsConfigFactoryOverride extends ConfigFactoryOverrid
   /**
    * Reacts to the ConfigEvents::COLLECTION_INFO event.
    *
-   * @param \Drupal\Core\Config\ConfigCollectionInfo $collection_info
+   * @param ConfigCollectionInfo $collection_info
    *   The configuration collection info event.
    */
   public function addCollections(ConfigCollectionInfo $collection_info) {
@@ -161,7 +161,7 @@ class SchemaDotOrgDescriptionsConfigFactoryOverride extends ConfigFactoryOverrid
   /**
    * Actions to be performed to configuration override on configuration rename.
    *
-   * @param \Drupal\Core\Config\ConfigCrudEvent $event
+   * @param ConfigCrudEvent $event
    *   The config event.
    */
   public function onConfigChange(ConfigCrudEvent $event) {
diff --git a/modules/schemadotorg_descriptions/tests/src/Functional/SchemaDotOrgDescriptionsTest.php b/modules/schemadotorg_descriptions/tests/src/Functional/SchemaDotOrgDescriptionsTest.php
index e14a37a..5690813 100644
--- a/modules/schemadotorg_descriptions/tests/src/Functional/SchemaDotOrgDescriptionsTest.php
+++ b/modules/schemadotorg_descriptions/tests/src/Functional/SchemaDotOrgDescriptionsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\schemadotorg_descriptions\Functional;
 
+use Drupal\Core\Extension\ModuleInstallerInterface;
 use Drupal\Tests\schemadotorg\Functional\SchemaDotOrgBrowserTestBase;
 
 /**
@@ -44,7 +45,7 @@ class SchemaDotOrgDescriptionsTest extends SchemaDotOrgBrowserTestBase {
     $assert_session->fieldValueEquals('subtyping[_add_][description]', 'A more specific subtype for the item. This is used to allow more specificity without having to create dedicated Schema.org entity types.');
     $assert_session->fieldValueEquals('properties[description][field][_add_][description]', 'A description of the item.');
 
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = \Drupal::service('module_installer');
     $module_installer->install(['schemadotorg_descriptions']);
 
@@ -164,7 +165,7 @@ class SchemaDotOrgDescriptionsTest extends SchemaDotOrgBrowserTestBase {
     $assert_session->responseNotContains('<a href="https://schema.org/price">Learn more</a>');
     $assert_session->responseContains('Usage guidelines:');
 
-    /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
+    /** @var ModuleInstallerInterface $module_installer */
     $module_installer = \Drupal::service('module_installer');
     $module_installer->uninstall(['schemadotorg_descriptions']);
 
diff --git a/modules/schemadotorg_export/src/Controller/SchemaDotOrgExportController.php b/modules/schemadotorg_export/src/Controller/SchemaDotOrgExportController.php
index e774385..66218b3 100644
--- a/modules/schemadotorg_export/src/Controller/SchemaDotOrgExportController.php
+++ b/modules/schemadotorg_export/src/Controller/SchemaDotOrgExportController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg_export\Controller;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -15,14 +16,14 @@ class SchemaDotOrgExportController extends ControllerBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The controller constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -41,7 +42,7 @@ class SchemaDotOrgExportController extends ControllerBase {
   /**
    * Returns response for Schema.org mapping export request.
    *
-   * @return \Symfony\Component\HttpFoundation\StreamedResponse
+   * @return StreamedResponse
    *   A streamed HTTP response containing a Schema.org mapping CSV export.
    *
    * @see http://obtao.com/blog/2013/12/export-data-to-a-csv-file-with-symfony/
@@ -60,7 +61,7 @@ class SchemaDotOrgExportController extends ControllerBase {
       ]);
 
       // Rows.
-      /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface[] $mappings */
+      /** @var SchemaDotOrgMappingInterface[] $mappings */
       $mappings = $this->entityTypeManager->getStorage('schemadotorg_mapping')->loadMultiple();
       foreach ($mappings as $mapping) {
         fputcsv($handle, [
diff --git a/modules/schemadotorg_export/src/EventSubscriber/SchemaDotOrgExportEventSubscriber.php b/modules/schemadotorg_export/src/EventSubscriber/SchemaDotOrgExportEventSubscriber.php
index 590c6c2..6eded1b 100644
--- a/modules/schemadotorg_export/src/EventSubscriber/SchemaDotOrgExportEventSubscriber.php
+++ b/modules/schemadotorg_export/src/EventSubscriber/SchemaDotOrgExportEventSubscriber.php
@@ -21,14 +21,14 @@ class SchemaDotOrgExportEventSubscriber extends ServiceProviderBase implements E
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * Constructs an SchemaDotOrgJsonApiExtrasEventSubscriber object.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
    */
   public function __construct(RouteMatchInterface $route_match) {
@@ -38,7 +38,7 @@ class SchemaDotOrgExportEventSubscriber extends ServiceProviderBase implements E
   /**
    * Alters Schema.org mapping list builder and adds a 'Download CSV' link.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ViewEvent $event
+   * @param ViewEvent $event
    *   The event to process.
    */
   public function onView(ViewEvent $event) {
diff --git a/modules/schemadotorg_flexfield/schemadotorg_flexfield.module b/modules/schemadotorg_flexfield/schemadotorg_flexfield.module
index 77f2823..8e6749e 100644
--- a/modules/schemadotorg_flexfield/schemadotorg_flexfield.module
+++ b/modules/schemadotorg_flexfield/schemadotorg_flexfield.module
@@ -1,5 +1,12 @@
 <?php
 
+use Drupal\schemadotorg\SchemaDotOrgNamesInterface;
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface;
+use Drupal\schemadotorg_ui\SchemaDotOrgUiFieldManagerInterface;
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface;
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface;
 /**
  * @file
  * Allows FlexFields to be used to create Schema.org relationships.
@@ -44,11 +51,11 @@ function schemadotorg_flexfield_schemadotorg_property_field_alter(
     return;
   }
 
-  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
+  /** @var SchemaDotOrgNamesInterface $schema_names */
   $schema_names = \Drupal::service('schemadotorg.names');
-  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
+  /** @var SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
   $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
-  /** @var \Drupal\schemadotorg_ui\SchemaDotOrgUiFieldManagerInterface $schema_field_manager */
+  /** @var SchemaDotOrgUiFieldManagerInterface $schema_field_manager */
   $schema_field_manager = \Drupal::service('schemadotorg_ui.field_manager');
 
   $flexfield_schema_type = $default_properties['type'] ?? '';
@@ -112,11 +119,11 @@ function schemadotorg_flexfield_schemadotorg_jsonld_schema_property_alter(&$valu
     return;
   }
 
-  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
+  /** @var SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
   $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
-  /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface $schema_jsonld_manager */
+  /** @var SchemaDotOrgJsonLdManagerInterface $schema_jsonld_manager */
   $schema_jsonld_manager = \Drupal::service('schemadotorg_jsonld.manager');
-  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
+  /** @var SchemaDotOrgNamesInterface $schema_names */
   $schema_names = Drupal::service('schemadotorg.names');
 
   $data = [
@@ -177,7 +184,7 @@ function schemadotorg_flexfield_settings_form_submit(&$form, FormStateInterface
  * Implements hook_field_widget_form_alter().
  */
 function schemadotorg_flexfield_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
-  /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+  /** @var FieldItemListInterface $items */
   $items = $context['items'];
   $mapping = _schemadotorg_flexfield_get_mapping($items);
   if (!$mapping) {
@@ -193,9 +200,9 @@ function schemadotorg_flexfield_field_widget_form_alter(&$element, FormStateInte
     return;
   }
 
-  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
+  /** @var SchemaDotOrgNamesInterface $schema_names */
   $schema_names = Drupal::service('schemadotorg.names');
-  /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface $schema_jsonld_manager */
+  /** @var SchemaDotOrgJsonLdManagerInterface $schema_jsonld_manager */
   $schema_jsonld_manager = \Drupal::service('schemadotorg_jsonld.manager');
 
   $children = Element::children($element);
@@ -212,9 +219,9 @@ function schemadotorg_flexfield_field_widget_form_alter(&$element, FormStateInte
  * Preprocess variables for flexfield.html.twig.
  */
 function schemadotorg_flexfield_preprocess_flexfield(&$variables) {
-  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
+  /** @var SchemaDotOrgNamesInterface $schema_names */
   $schema_names = Drupal::service('schemadotorg.names');
-  /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface $schema_jsonld_manager */
+  /** @var SchemaDotOrgJsonLdManagerInterface $schema_jsonld_manager */
   $schema_jsonld_manager = \Drupal::service('schemadotorg_jsonld.manager');
 
   foreach ($variables['items'] as &$item) {
@@ -254,10 +261,10 @@ function _schemadotorg_flexfield_get_default_properties($type, $property) {
 /**
  * Get a flex field's Schema.org mapping.
  *
- * @param \Drupal\Core\Field\FieldItemListInterface|\Drupal\Core\Field\FieldItemInterface $item
+ * @param FieldItemListInterface|FieldItemInterface $item
  *   A flex field item or flex field items.
  *
- * @return \Drupal\schemadotorg\SchemaDotOrgMappingInterface|null
+ * @return SchemaDotOrgMappingInterface|null
  *   A Schema.org mapping.
  *
  * @internal
@@ -271,7 +278,7 @@ function _schemadotorg_flexfield_get_mapping($item) {
 
   // Get the Schema.org mapping for the entity.
   $entity = $item->getEntity();
-  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
+  /** @var SchemaDotOrgMappingStorageInterface $mapping_storage */
   $mapping_storage = \Drupal::entityTypeManager()->getStorage('schemadotorg_mapping');
   return $mapping_storage->loadByEntity($entity);
 }
diff --git a/modules/schemadotorg_inline_entity_form/schemadotorg_inline_entity_form.module b/modules/schemadotorg_inline_entity_form/schemadotorg_inline_entity_form.module
index 4839e48..e0dd36f 100644
--- a/modules/schemadotorg_inline_entity_form/schemadotorg_inline_entity_form.module
+++ b/modules/schemadotorg_inline_entity_form/schemadotorg_inline_entity_form.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface;
 /**
  * @file
  * Allows Inline Entity Forms to be used to create Schema.org relationships.
@@ -86,7 +87,7 @@ function _schemadotorg_inline_entity_form_enabled($type, $property) {
   }
 
   // Check for the {type}--{property} in the type's breadcrumbs.
-  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
+  /** @var SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
   $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
   $breadcrumbs = $schema_type_manager->getTypeBreadcrumbs($type);
   foreach ($breadcrumbs as $breadcrumb) {
diff --git a/modules/schemadotorg_inline_entity_form/tests/src/Kernel/SchemaDotOrgInlineEntityFormTest.php b/modules/schemadotorg_inline_entity_form/tests/src/Kernel/SchemaDotOrgInlineEntityFormTest.php
index 6b107e1..4aa9d5d 100644
--- a/modules/schemadotorg_inline_entity_form/tests/src/Kernel/SchemaDotOrgInlineEntityFormTest.php
+++ b/modules/schemadotorg_inline_entity_form/tests/src/Kernel/SchemaDotOrgInlineEntityFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\schemadotorg_inline_entity_form\Kernel;
 
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Tests\schemadotorg\Kernel\SchemaDotOrgKernelEntityTestBase;
 
 /**
@@ -42,10 +43,9 @@ class SchemaDotOrgInlineEntityFormTest extends SchemaDotOrgKernelEntityTestBase
     $this->createSchemaEntity('node', 'Patient');
 
     /* ********************************************************************** */
-
     // Check that the alumniOf property/field use an inline entity form.
     // @see schemadotorg_inline_entity_form_schemadotorg_property_field_alter()
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository */
+    /** @var EntityDisplayRepositoryInterface $entity_display_repository */
     $entity_display_repository = \Drupal::service('entity_display.repository');
     $form_display = $entity_display_repository->getFormDisplay('node', 'patient', 'default');
     $component = $form_display->getComponent('schema_alumni_of');
diff --git a/modules/schemadotorg_jsonapi/schemadotorg_jsonapi.install b/modules/schemadotorg_jsonapi/schemadotorg_jsonapi.install
index bf9a860..b7ddc59 100644
--- a/modules/schemadotorg_jsonapi/schemadotorg_jsonapi.install
+++ b/modules/schemadotorg_jsonapi/schemadotorg_jsonapi.install
@@ -1,10 +1,10 @@
 <?php
 
+use Drupal\schemadotorg_jsonapi\SchemaDotOrgJsonApiManagerInterface;
 /**
  * @file
  * Requirements functions for the Schema.org JSON:API module.
  */
-
 /**
  * Implements hook_requirements().
  */
@@ -13,7 +13,7 @@ function schemadotorg_jsonapi_requirements($phase) {
     return;
   }
 
-  /** @var \Drupal\schemadotorg_jsonapi\SchemaDotOrgJsonApiManagerInterface $manager */
+  /** @var SchemaDotOrgJsonApiManagerInterface $manager */
   $manager = \Drupal::service('schemadotorg_jsonapi.manager');
   return $manager->requirements($phase);
 }
diff --git a/modules/schemadotorg_jsonapi/schemadotorg_jsonapi.module b/modules/schemadotorg_jsonapi/schemadotorg_jsonapi.module
index dc81337..276be85 100644
--- a/modules/schemadotorg_jsonapi/schemadotorg_jsonapi.module
+++ b/modules/schemadotorg_jsonapi/schemadotorg_jsonapi.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\schemadotorg_jsonapi\SchemaDotOrgJsonApiManagerInterface;
 /**
  * @file
  * Builds on top of the JSON:API and JSON:API extras modules.
@@ -22,7 +23,7 @@ function schemadotorg_jsonapi_help($route_name, RouteMatchInterface $route_match
  * Implements hook_schemadotorg_mapping_insert().
  */
 function schemadotorg_jsonapi_schemadotorg_mapping_insert(SchemaDotOrgMappingInterface $mapping) {
-  /** @var \Drupal\schemadotorg_jsonapi\SchemaDotOrgJsonApiManagerInterface $manager */
+  /** @var SchemaDotOrgJsonApiManagerInterface $manager */
   $manager = \Drupal::service('schemadotorg_jsonapi.manager');
   $manager->insertMappingResourceConfig($mapping);
 }
@@ -31,7 +32,7 @@ function schemadotorg_jsonapi_schemadotorg_mapping_insert(SchemaDotOrgMappingInt
  * Implements hook_schemadotorg_mapping_update().
  */
 function schemadotorg_jsonapi_schemadotorg_mapping_update(SchemaDotOrgMappingInterface $mapping) {
-  /** @var \Drupal\schemadotorg_jsonapi\SchemaDotOrgJsonApiManagerInterface $manager */
+  /** @var SchemaDotOrgJsonApiManagerInterface $manager */
   $manager = \Drupal::service('schemadotorg_jsonapi.manager');
   $manager->updateMappingResourceConfig($mapping);
 }
@@ -40,7 +41,7 @@ function schemadotorg_jsonapi_schemadotorg_mapping_update(SchemaDotOrgMappingInt
  * Implements hook_field_config_insert().
  */
 function schemadotorg_jsonapi_field_config_insert(FieldConfigInterface $field_config) {
-  /** @var \Drupal\schemadotorg_jsonapi\SchemaDotOrgJsonApiManagerInterface $manager */
+  /** @var SchemaDotOrgJsonApiManagerInterface $manager */
   $manager = \Drupal::service('schemadotorg_jsonapi.manager');
   $manager->insertFieldConfigResource($field_config);
 }
diff --git a/modules/schemadotorg_jsonapi/src/EventSubscriber/SchemaDotOrgJsonApiEventSubscriber.php b/modules/schemadotorg_jsonapi/src/EventSubscriber/SchemaDotOrgJsonApiEventSubscriber.php
index 7459776..dd21382 100644
--- a/modules/schemadotorg_jsonapi/src/EventSubscriber/SchemaDotOrgJsonApiEventSubscriber.php
+++ b/modules/schemadotorg_jsonapi/src/EventSubscriber/SchemaDotOrgJsonApiEventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg_jsonapi\EventSubscriber;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -27,28 +28,28 @@ class SchemaDotOrgJsonApiEventSubscriber extends ServiceProviderBase implements
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;
 
@@ -62,13 +63,13 @@ class SchemaDotOrgJsonApiEventSubscriber extends ServiceProviderBase implements
   /**
    * Constructs an SchemaDotOrgJsonApiEventSubscriber object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration object factory.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The entity field manager.
    * @param \Drupal\jsonapi_extras\ResourceType\ConfigurableResourceTypeRepository $resource_type_respository
    *   The JSON:API configurable resource type repository.
@@ -84,7 +85,7 @@ class SchemaDotOrgJsonApiEventSubscriber extends ServiceProviderBase implements
   /**
    * Alters Schema.org mapping list builder and adds a 'JSON:API' column.
    *
-   * @param \Symfony\Component\HttpKernel\Event\ViewEvent $event
+   * @param ViewEvent $event
    *   The event to process.
    */
   public function onView(ViewEvent $event) {
@@ -143,7 +144,7 @@ class SchemaDotOrgJsonApiEventSubscriber extends ServiceProviderBase implements
   /**
    * Get resource type's entity reference fields as an array of includes.
    *
-   * @param \Drupal\jsonapi\ResourceType\ResourceType $resource_type
+   * @param ResourceType $resource_type
    *   The resource type.
    * @param int $level
    *   The level of includes
@@ -155,7 +156,7 @@ class SchemaDotOrgJsonApiEventSubscriber extends ServiceProviderBase implements
     $entity_type_id = $resource_type->getEntityTypeId();
     $bundle = $resource_type->getBundle();
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping */
+    /** @var SchemaDotOrgMappingInterface $mapping */
     $mapping = $this->entityTypeManager
       ->getStorage('schemadotorg_mapping')
       ->load("$entity_type_id.$bundle");
diff --git a/modules/schemadotorg_jsonapi/src/SchemaDotOrgJsonApiManager.php b/modules/schemadotorg_jsonapi/src/SchemaDotOrgJsonApiManager.php
index cd2b0ea..4f60210 100644
--- a/modules/schemadotorg_jsonapi/src/SchemaDotOrgJsonApiManager.php
+++ b/modules/schemadotorg_jsonapi/src/SchemaDotOrgJsonApiManager.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg_jsonapi;
 
+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -24,50 +25,50 @@ class SchemaDotOrgJsonApiManager implements SchemaDotOrgJsonApiManagerInterface
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The redirect destination service.
    *
-   * @var \Drupal\Core\Routing\RedirectDestinationInterface
+   * @var RedirectDestinationInterface
    */
   protected $redirectDestination;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $fieldManager;
 
   /**
    * The Schema.org names service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface
+   * @var SchemaDotOrgNamesInterface
    */
   protected $schemaNames;
 
   /**
    * Constructs a SchemaDotOrgJsonApiManager object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration object factory.
-   * @param \Drupal\Core\Routing\RedirectDestinationInterface $redirect_destination
+   * @param RedirectDestinationInterface $redirect_destination
    *   The redirect destination service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager
+   * @param EntityFieldManagerInterface $field_manager
    *   The entity field manager.
-   * @param \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names
+   * @param SchemaDotOrgNamesInterface $schema_names
    *   The Schema.org names service.
    */
   public function __construct(
@@ -207,7 +208,7 @@ class SchemaDotOrgJsonApiManager implements SchemaDotOrgJsonApiManagerInterface
   /**
    * Get JSON:API resource config path.
    *
-   * @param \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping
+   * @param SchemaDotOrgMappingInterface $mapping
    *   A Schema.org mapping.
    *
    * @return string
@@ -303,7 +304,7 @@ class SchemaDotOrgJsonApiManager implements SchemaDotOrgJsonApiManagerInterface
   /**
    * Insert Schema.org property/field into JSON:API resource config.
    *
-   * @param \Drupal\field\FieldConfigInterface $field
+   * @param FieldConfigInterface $field
    *   The field.
    */
   protected function insertMappingFieldConfigResource(FieldConfigInterface $field) {
@@ -319,7 +320,7 @@ class SchemaDotOrgJsonApiManager implements SchemaDotOrgJsonApiManagerInterface
     $field_name = $field->getName();
 
     $mapping_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping');
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping */
+    /** @var SchemaDotOrgMappingInterface $mapping */
     $mapping = $mapping_storage->load("$entity_type_id.$bundle");
     if (!$mapping) {
       return;
@@ -364,7 +365,7 @@ class SchemaDotOrgJsonApiManager implements SchemaDotOrgJsonApiManagerInterface
   /**
    * Get JSON:API resource config storage.
    *
-   * @return \Drupal\Core\Entity\EntityStorageInterface
+   * @return EntityStorageInterface
    *   JSON:API resource config storage.
    */
   protected function getResourceConfigStorage() {
@@ -374,7 +375,7 @@ class SchemaDotOrgJsonApiManager implements SchemaDotOrgJsonApiManagerInterface
   /**
    * Load JSON:API resource config id for a Schema.org mapping.
    *
-   * @param \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping
+   * @param SchemaDotOrgMappingInterface $mapping
    *   A Schema.org mapping.
    *
    * @return \Drupal\jsonapi_extras\Entity\JsonapiResourceConfig|null
@@ -390,7 +391,7 @@ class SchemaDotOrgJsonApiManager implements SchemaDotOrgJsonApiManagerInterface
   /**
    * Get JSON:API resource config id for a Schema.org mapping.
    *
-   * @param \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping
+   * @param SchemaDotOrgMappingInterface $mapping
    *   A Schema.org mapping.
    *
    * @return string
@@ -421,7 +422,7 @@ class SchemaDotOrgJsonApiManager implements SchemaDotOrgJsonApiManagerInterface
   /**
    * Gets all field names for a Schemam.org mapping entity type and bundle.
    *
-   * @param \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping
+   * @param SchemaDotOrgMappingInterface $mapping
    *   A Schema.org mapping.
    *
    * @return string[]
@@ -436,7 +437,7 @@ class SchemaDotOrgJsonApiManager implements SchemaDotOrgJsonApiManagerInterface
   /**
    * Gets all field names for a given entity type and bundle.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type for which to get all field names.
    * @param string $bundle
    *   The bundle for which to get all field names.
diff --git a/modules/schemadotorg_jsonapi/src/SchemaDotOrgJsonApiManagerInterface.php b/modules/schemadotorg_jsonapi/src/SchemaDotOrgJsonApiManagerInterface.php
index f5cb162..76b056e 100644
--- a/modules/schemadotorg_jsonapi/src/SchemaDotOrgJsonApiManagerInterface.php
+++ b/modules/schemadotorg_jsonapi/src/SchemaDotOrgJsonApiManagerInterface.php
@@ -24,7 +24,7 @@ interface SchemaDotOrgJsonApiManagerInterface {
   /**
    * Insert Schema.org mapping JSON:API resource config.
    *
-   * @param \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping
+   * @param SchemaDotOrgMappingInterface $mapping
    *   A Schema.org mapping.
    */
   public function insertMappingResourceConfig(SchemaDotOrgMappingInterface $mapping);
@@ -32,7 +32,7 @@ interface SchemaDotOrgJsonApiManagerInterface {
   /**
    * Update Schema.org mapping JSON:API resource config.
    *
-   * @param \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping
+   * @param SchemaDotOrgMappingInterface $mapping
    *   A Schema.org mapping.
    */
   public function updateMappingResourceConfig(SchemaDotOrgMappingInterface $mapping);
@@ -40,7 +40,7 @@ interface SchemaDotOrgJsonApiManagerInterface {
   /**
    * Insert field into JSON:API resource config.
    *
-   * @param \Drupal\field\FieldConfigInterface $field
+   * @param FieldConfigInterface $field
    *   The field.
    */
   public function insertFieldConfigResource(FieldConfigInterface $field);
diff --git a/modules/schemadotorg_jsonapi/tests/src/Kernel/SchemaDotOrgJsonApiManagerTest.php b/modules/schemadotorg_jsonapi/tests/src/Kernel/SchemaDotOrgJsonApiManagerTest.php
index 8ec56a8..056b180 100644
--- a/modules/schemadotorg_jsonapi/tests/src/Kernel/SchemaDotOrgJsonApiManagerTest.php
+++ b/modules/schemadotorg_jsonapi/tests/src/Kernel/SchemaDotOrgJsonApiManagerTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\schemadotorg_jsonapi\Kernel;
 
+use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingStorage;
+use Drupal\schemadotorg_jsonapi\SchemaDotOrgJsonApiManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
 use Drupal\Core\Url;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -38,28 +42,28 @@ class SchemaDotOrgJsonApiManagerTest extends SchemaDotOrgKernelTestBase {
   /**
    * The JSON:API resource storage.
    *
-   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface
+   * @var ConfigEntityStorageInterface
    */
   protected $resourceStorage;
 
   /**
    * The Schema.org mapping storage.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgMappingStorage
+   * @var SchemaDotOrgMappingStorage
    */
   protected $mappingStorage;
 
   /**
    * Schema.org JSON:API manager.
    *
-   * @var \Drupal\schemadotorg_jsonapi\SchemaDotOrgJsonApiManagerInterface
+   * @var SchemaDotOrgJsonApiManagerInterface
    */
   protected $manager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('schemadotorg_mapping');
@@ -155,7 +159,7 @@ class SchemaDotOrgJsonApiManagerTest extends SchemaDotOrgKernelTestBase {
     $this->createSchemaDotOrgSubTypeField('node', 'thing');
 
     // Create Thing with mapping.
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $thing_mapping */
+    /** @var SchemaDotOrgMappingInterface $thing_mapping */
     $thing_mapping = $this->mappingStorage->create([
       'target_entity_type_id' => 'node',
       'target_bundle' => 'thing',
diff --git a/modules/schemadotorg_jsonapi/tests/src/Unit/SchemaDotOrgJsonApiBreadcrumbBuilderTest.php b/modules/schemadotorg_jsonapi/tests/src/Unit/SchemaDotOrgJsonApiBreadcrumbBuilderTest.php
index 9646610..6a61d4d 100644
--- a/modules/schemadotorg_jsonapi/tests/src/Unit/SchemaDotOrgJsonApiBreadcrumbBuilderTest.php
+++ b/modules/schemadotorg_jsonapi/tests/src/Unit/SchemaDotOrgJsonApiBreadcrumbBuilderTest.php
@@ -24,9 +24,7 @@ class SchemaDotOrgJsonApiBreadcrumbBuilderTest extends UnitTestCase {
     // @see \Drupal\Core\Breadcrumb\Breadcrumb
     // @see \Drupal\Core\Cache\RefinableCacheableDependencyTrait
     // @see \Drupal\Core\Cache\Cache
-    $cache_contexts_manager = $this->getMockBuilder('Drupal\Core\Cache\Context\CacheContextsManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cache_contexts_manager = $this->createMock('Drupal\Core\Cache\Context\CacheContextsManager');
     // Always return TRUE for ::assertValidTokens so that any cache context
     // will be accepted.
     $cache_contexts_manager->method('assertValidTokens')->willReturn(TRUE);
diff --git a/modules/schemadotorg_jsonld/schemadotorg_jsonld.api.php b/modules/schemadotorg_jsonld/schemadotorg_jsonld.api.php
index f47d3c0..55e743b 100644
--- a/modules/schemadotorg_jsonld/schemadotorg_jsonld.api.php
+++ b/modules/schemadotorg_jsonld/schemadotorg_jsonld.api.php
@@ -1,31 +1,36 @@
 <?php
 
+use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\taxonomy\VocabularyInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
+use Drupal\taxonomy\TermInterface;
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface;
+use Drupal\Core\Field\FieldItemInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface;
 /**
  * @file
  * Hooks related to Schema.org Blueprints JSON-LD module.
  */
-
 // phpcs:disable DrupalPractice.CodeAnalysis.VariableAnalysis.UnusedVariable
-
 /**
  * @addtogroup hooks
  * @{
  */
-
 /* ************************************************************************** */
 // Custom data.
 /* ************************************************************************** */
-
 /**
  * Provide custom Schema.org JSON-LD data for a route.
  *
- * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+ * @param RouteMatchInterface $route_match
  *   The current route match.
  *
  * @return array
  *   Custom Schema.org JSON-LD data.
  */
-function hook_schemadotorg_jsonld(\Drupal\Core\Routing\RouteMatchInterface $route_match) {
+function hook_schemadotorg_jsonld(RouteMatchInterface $route_match) {
   return [
     '@context' => 'https://schema.org',
     '@type' => 'BreadcrumbList',
@@ -55,11 +60,11 @@ function hook_schemadotorg_jsonld(\Drupal\Core\Routing\RouteMatchInterface $rout
  *
  * @param array $data
  *   The Schema.org JSON-LD data for the current route.
- * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+ * @param RouteMatchInterface $route_match
  *   The current route match.
  */
-function hook_schemadotorg_jsonld_alter(array &$data, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
-  /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface $manager */
+function hook_schemadotorg_jsonld_alter(array &$data, RouteMatchInterface $route_match) {
+  /** @var SchemaDotOrgJsonLdManagerInterface $manager */
   $manager = \Drupal::service('schemadotorg_jsonld.manager');
   $entity = $manager->getRouteMatchEntity($route_match);
   if (!$entity) {
@@ -81,7 +86,6 @@ function hook_schemadotorg_jsonld_alter(array &$data, \Drupal\Core\Routing\Route
 /* ************************************************************************** */
 // Entity data.
 /* ************************************************************************** */
-
 /**
  * Load the Schema.org JSON-LD data for an entity.
  *
@@ -89,18 +93,18 @@ function hook_schemadotorg_jsonld_alter(array &$data, \Drupal\Core\Routing\Route
  *
  * @param array $data
  *   The Schema.org JSON-LD data for an entity.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  */
-function hook_schemadotorg_jsonld_entity_load(array &$data, \Drupal\Core\Entity\EntityInterface $entity) {
-  if (!$entity instanceof \Drupal\taxonomy\VocabularyInterface) {
+function hook_schemadotorg_jsonld_entity_load(array &$data, EntityInterface $entity) {
+  if (!$entity instanceof VocabularyInterface) {
     return;
   }
 
   // Alter a vocabulary's Schema.org type data to use DefinedTermSet @type.
   // @see \Drupal\schemadotorg_taxonomy\SchemaDotOrgTaxonomyManager::load
   $mapping_storage = \Drupal::entityTypeManager()->getStorage('schemadotorg_mapping');
-  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface[] $mappings */
+  /** @var SchemaDotOrgMappingInterface[] $mappings */
   $mappings = $mapping_storage->loadByProperties([
     'target_entity_type_id' => 'taxonomy_term',
     'target_bundle' => $entity->id(),
@@ -126,11 +130,11 @@ function hook_schemadotorg_jsonld_entity_load(array &$data, \Drupal\Core\Entity\
  *
  * @param array $data
  *   The Schema.org JSON-LD data for an entity.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  */
-function hook_schemadotorg_jsonld_entity_alter(array &$data, \Drupal\Core\Entity\EntityInterface $entity) {
-  if (!$entity instanceof \Drupal\taxonomy\TermInterface) {
+function hook_schemadotorg_jsonld_entity_alter(array &$data, EntityInterface $entity) {
+  if (!$entity instanceof TermInterface) {
     return;
   }
 
@@ -151,7 +155,7 @@ function hook_schemadotorg_jsonld_entity_alter(array &$data, \Drupal\Core\Entity
 
   // Append isDefinedTermSet or isCategoryCodeSet data to the type data.
   $vocabulary = $entity->get('vid')->entity;
-  /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface $builder */
+  /** @var SchemaDotOrgJsonLdBuilderInterface $builder */
   $builder = \Drupal::service('schemadotorg_json.builder');
   $vocabulary_data = $builder->buildEntity($vocabulary);
   $data["in{$schema_type}Set"] = $vocabulary_data;
@@ -160,16 +164,15 @@ function hook_schemadotorg_jsonld_entity_alter(array &$data, \Drupal\Core\Entity
 /* ************************************************************************** */
 // Field item value.
 /* ************************************************************************** */
-
 /**
  * Alter the Schema.org property JSON-LD value for an entity's field item.
  *
  * @param mixed $value
  *   Alter the Schema.org property JSON-LD value.
- * @param \Drupal\Core\Field\FieldItemInterface $item
+ * @param FieldItemInterface $item
  *   Tn entity's field item.
  */
-function hook_schemadotorg_jsonld_schema_property_alter(&$value, \Drupal\Core\Field\FieldItemInterface $item) {
+function hook_schemadotorg_jsonld_schema_property_alter(&$value, FieldItemInterface $item) {
   // Get entity information.
   $entity = $item->getEntity();
   $entity_type_id = $entity->getEntityTypeId();
@@ -187,7 +190,7 @@ function hook_schemadotorg_jsonld_schema_property_alter(&$value, \Drupal\Core\Fi
   $main_property_data_type = $main_property_definition->getDataType();
 
   // Get Schema.org mapping.
-  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
+  /** @var SchemaDotOrgMappingStorageInterface $mapping_storage */
   $mapping_storage = \Drupal::entityTypeManager()->getStorage('schemadotorg_mapping');
   $mapping = $mapping_storage->loadByEntity($entity);
   $schema_type = $mapping->getSchemaType();
diff --git a/modules/schemadotorg_jsonld/schemadotorg_jsonld.module b/modules/schemadotorg_jsonld/schemadotorg_jsonld.module
index 3d8ad21..ed01be1 100644
--- a/modules/schemadotorg_jsonld/schemadotorg_jsonld.module
+++ b/modules/schemadotorg_jsonld/schemadotorg_jsonld.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface;
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface;
 /**
  * @file
  * Adds Schema.org structured data as JSON-LD in the head of web pages.
@@ -27,7 +29,7 @@ function schemadotorg_jsonld_page_attachments_alter(array &$attachments) {
   }
 
   // Build the entity's Schema.org data.
-  /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface $builder */
+  /** @var SchemaDotOrgJsonLdBuilderInterface $builder */
   $builder = \Drupal::service('schemadotorg_jsonld.builder');
   $data = $builder->build();
   if (!$data) {
@@ -99,7 +101,7 @@ function address_schemadotorg_jsonld_schema_property_alter(&$value, FieldItemInt
     }
   }
 
-  /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface $jsonld_manager */
+  /** @var SchemaDotOrgJsonLdManagerInterface $jsonld_manager */
   $jsonld_manager = \Drupal::service('schemadotorg_jsonld.manager');
   $value = $jsonld_manager->sortProperties($data);
 }
diff --git a/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdBuilder.php b/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdBuilder.php
index a7e6a3a..262aa25 100644
--- a/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdBuilder.php
+++ b/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\schemadotorg_jsonld;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -30,50 +32,50 @@ class SchemaDotOrgJsonLdBuilder implements SchemaDotOrgJsonLdBuilderInterface {
   /**
    * The module handler to invoke the alter hook.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * The Schema.org JSON-LD manager.
    *
-   * @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface
+   * @var SchemaDotOrgJsonLdManagerInterface
    */
   protected $schemaJsonIdManager;
 
   /**
    * Constructs a SchemaDotOrgJsonLdBuilder object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
+   * @param SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
    *   The Schema.org schema type manager.
-   * @param \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface $schema_jsonld_manager
+   * @param SchemaDotOrgJsonLdManagerInterface $schema_jsonld_manager
    *   The Schema.org JSON-LD manager.
    */
   public function __construct(
@@ -167,7 +169,7 @@ class SchemaDotOrgJsonLdBuilder implements SchemaDotOrgJsonLdBuilderInterface {
   /**
    * Build JSON-LD for an entity that is mapped to a Schema.org type.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
    * @param bool $map_entity
    *   TRUE if entity should be mapped.
@@ -178,7 +180,7 @@ class SchemaDotOrgJsonLdBuilder implements SchemaDotOrgJsonLdBuilderInterface {
    *   or FALSE if the entity is not mapped to a Schema.org type.
    */
   protected function buildMappedEntity(EntityInterface $entity, $map_entity = TRUE) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
+    /** @var SchemaDotOrgMappingStorageInterface $mapping_storage */
     $mapping_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping');
     if (!$mapping_storage->isEntityMapped($entity)) {
       return [];
@@ -198,7 +200,7 @@ class SchemaDotOrgJsonLdBuilder implements SchemaDotOrgJsonLdBuilderInterface {
       }
 
       // Make sure the user has access to the field.
-      /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+      /** @var FieldItemListInterface $items */
       $items = $entity->get($field_name);
 
       // Get the Schema.org properties.
@@ -261,7 +263,7 @@ class SchemaDotOrgJsonLdBuilder implements SchemaDotOrgJsonLdBuilderInterface {
    *   The Schema.org type.
    * @param string $schema_property
    *   The Schema.org property.
-   * @param \Drupal\Core\Field\FieldItemInterface|null $item
+   * @param FieldItemInterface|null $item
    *   The field item.
    * @param bool $map_entity
    *   TRUE if entity should be mapped.
@@ -328,7 +330,7 @@ class SchemaDotOrgJsonLdBuilder implements SchemaDotOrgJsonLdBuilderInterface {
    *   The name of the hook to invoke.
    * @param array $data
    *   The Schema.org type data.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   protected function invokeEntityHook($hook, array &$data, EntityInterface $entity) {
diff --git a/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdBuilderInterface.php b/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdBuilderInterface.php
index 18b173d..47f42cb 100644
--- a/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdBuilderInterface.php
+++ b/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdBuilderInterface.php
@@ -13,7 +13,7 @@ interface SchemaDotOrgJsonLdBuilderInterface {
   /**
    * Build JSON-LD for a route.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface|null $route_match
+   * @param RouteMatchInterface|null $route_match
    *   A route match.
    *
    * @return array|bool
@@ -24,7 +24,7 @@ interface SchemaDotOrgJsonLdBuilderInterface {
   /**
    * Build JSON-LD for an entity that is mapped to a Schema.org type.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   An entity.
    *
    * @return array|bool
diff --git a/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdManager.php b/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdManager.php
index f8af778..abf5b33 100644
--- a/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdManager.php
+++ b/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdManager.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\schemadotorg_jsonld;
 
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\FieldableEntityInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface;
+use Drupal\image\ImageStyleInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Datetime\DateFormatterInterface;
@@ -26,68 +31,68 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The router.
    *
-   * @var \Symfony\Component\Routing\RouterInterface
+   * @var RouterInterface
    */
   protected $router;
 
   /**
    * The current route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The file URL generator.
    *
-   * @var \Drupal\Core\File\FileUrlGeneratorInterface
+   * @var FileUrlGeneratorInterface
    */
   protected $fileUrlGenerator;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * Constructs a SchemaDotOrgJsonLdManager object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration object factory.
-   * @param \Symfony\Component\Routing\RouterInterface $router
+   * @param RouterInterface $router
    *   The router.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The current route match.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\File\FileUrlGeneratorInterface $file_url_generator
+   * @param FileUrlGeneratorInterface $file_url_generator
    *   The file URL generator.
-   * @param \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
+   * @param SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
    *   The Schema.org schema type manager.
    */
   public function __construct(
@@ -351,7 +356,7 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
           continue;
         }
 
-        /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+        /** @var FieldItemListInterface $items */
         $items = $entity->get($field_name);
         foreach ($items as $item) {
           $value = $this->getSchemaPropertyValue($item);
@@ -388,7 +393,7 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * Gets Schema.org JSON-LD configuration settings.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   Schema.org JSON-LD configuration settings.
    */
   protected function getConfig() {
@@ -398,10 +403,10 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * Gets the entity for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
-   * @return \Drupal\Core\Entity\FieldableEntityInterface
+   * @return FieldableEntityInterface
    *   The entity for a field item.
    */
   protected function getEntity(FieldItemInterface $item) {
@@ -411,7 +416,7 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * Gets the field name for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
    * @return string
@@ -424,7 +429,7 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * Gets the field type for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
    * @return string
@@ -437,7 +442,7 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * Gets the field values for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
    * @return array|mixed
@@ -452,7 +457,7 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * Gets the field values or main property's value for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
    * @return array|mixed
@@ -471,7 +476,7 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * Gets the property names for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
    * @return string[]
@@ -484,7 +489,7 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * Gets the main property name for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
    * @return string
@@ -497,7 +502,7 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * Gets the main property date type for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
    * @return string
@@ -513,7 +518,7 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * Gets the mapped Schema.org property for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
    * @return string
@@ -523,7 +528,7 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
     $entity = $this->getEntity($item);
     $field_name = $this->getFieldName($item);
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
+    /** @var SchemaDotOrgMappingStorageInterface $mapping_storage */
     $mapping_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping');
     $mapping = $mapping_storage->loadByEntity($entity);
     return $mapping->getSchemaPropertyMapping($field_name);
@@ -532,7 +537,7 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * Gets the file URI for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
    * @return string
@@ -545,7 +550,7 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * Gets the file URL for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
    * @return string
@@ -559,10 +564,10 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * Gets the selected image style for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
-   * @return \Drupal\image\ImageStyleInterface|null
+   * @return ImageStyleInterface|null
    *   The selected image style for a field item.
    */
   protected function getImageStyle(FieldItemInterface $item) {
@@ -579,7 +584,7 @@ class SchemaDotOrgJsonLdManager implements SchemaDotOrgJsonLdManagerInterface {
   /**
    * Gets the image deriative URL for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
    * @return string
diff --git a/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdManagerInterface.php b/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdManagerInterface.php
index fffb8d9..18a423b 100644
--- a/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdManagerInterface.php
+++ b/modules/schemadotorg_jsonld/src/SchemaDotOrgJsonLdManagerInterface.php
@@ -15,12 +15,12 @@ interface SchemaDotOrgJsonLdManagerInterface {
   /**
    * Get an entity's canonical route match.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $rel
    *   The link relationship type, for example: canonical or edit-form.
    *
-   * @return \Drupal\Core\Routing\RouteMatch|null
+   * @return RouteMatch|null
    *   An entity's canonical route match.
    */
   public function getEntityRouteMatch(EntityInterface $entity, $rel = 'canonical');
@@ -28,10 +28,10 @@ interface SchemaDotOrgJsonLdManagerInterface {
   /**
    * Returns the entity of the current route.
    *
-   * @param \Drupal\Core\Routing\RouteMatchInterface|null $route_match
+   * @param RouteMatchInterface|null $route_match
    *   A route match.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   The entity or NULL if this is not an entity route.
    *
    * @see metatag_get_route_entity()
@@ -52,7 +52,7 @@ interface SchemaDotOrgJsonLdManagerInterface {
   /**
    * Get a Schema.org property's value for a field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   The field item.
    *
    * @return array|mixed|null
@@ -91,7 +91,7 @@ interface SchemaDotOrgJsonLdManagerInterface {
   /**
    * Get Schema.org identifiers for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
diff --git a/modules/schemadotorg_jsonld/tests/src/Kernel/SchemaDotOrgJsonLdBuilderTest.php b/modules/schemadotorg_jsonld/tests/src/Kernel/SchemaDotOrgJsonLdBuilderTest.php
index 68a1de2..e8deede 100644
--- a/modules/schemadotorg_jsonld/tests/src/Kernel/SchemaDotOrgJsonLdBuilderTest.php
+++ b/modules/schemadotorg_jsonld/tests/src/Kernel/SchemaDotOrgJsonLdBuilderTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\schemadotorg_jsonld\Kernel;
 
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface;
 use Drupal\Core\Routing\RouteMatch;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\node\Entity\Node;
@@ -28,14 +29,14 @@ class SchemaDotOrgJsonLdBuilderTest extends SchemaDotOrgKernelEntityTestBase {
   /**
    * Schema.org JSON-LD builder.
    *
-   * @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface
+   * @var SchemaDotOrgJsonLdBuilderInterface
    */
   protected $builder;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['schemadotorg_jsonld']);
     $this->builder = $this->container->get('schemadotorg_jsonld.builder');
diff --git a/modules/schemadotorg_jsonld/tests/src/Kernel/SchemaDotOrgJsonLdManagerTest.php b/modules/schemadotorg_jsonld/tests/src/Kernel/SchemaDotOrgJsonLdManagerTest.php
index 85c37af..7dea2bd 100644
--- a/modules/schemadotorg_jsonld/tests/src/Kernel/SchemaDotOrgJsonLdManagerTest.php
+++ b/modules/schemadotorg_jsonld/tests/src/Kernel/SchemaDotOrgJsonLdManagerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\schemadotorg_jsonld\Kernel;
 
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface;
+use Drupal\image\Plugin\Field\FieldType\ImageItem;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -31,14 +33,14 @@ class SchemaDotOrgJsonLdManagerTest extends SchemaDotOrgKernelEntityTestBase {
   /**
    * Schema.org JSON-LD manager.
    *
-   * @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface
+   * @var SchemaDotOrgJsonLdManagerInterface
    */
   protected $manager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['schemadotorg_jsonld']);
     $this->manager = $this->container->get('schemadotorg_jsonld.manager');
@@ -159,10 +161,9 @@ class SchemaDotOrgJsonLdManagerTest extends SchemaDotOrgKernelEntityTestBase {
 
     // @todo Detemine why we can't generate the media's image derivative.
     // Image.
-    /** @var \Drupal\image\Plugin\Field\FieldType\ImageItem $item */
+    /** @var ImageItem $item */
     // $actual_value = $this->manager->getSchemaPropertyValue($media->field_media_image->get(0));
     // $this->assertEquals('Some image', $actual_value);
-
     // Created.
     $actual_value = $this->manager->getSchemaPropertyValue($node->created->get(0));
     $this->assertEquals(1, preg_match('/^\d\d\d\d-\d\d-\d\d/', $actual_value));
@@ -214,7 +215,7 @@ class SchemaDotOrgJsonLdManagerTest extends SchemaDotOrgKernelEntityTestBase {
           'value' => $node->uuid(),
         ],
     ];
-    $this->assertEqual($expected_value, $actual_value);
+    $this->assertEquals($expected_value, $actual_value);
   }
 
 }
diff --git a/modules/schemadotorg_jsonld/tests/src/Unit/SchemaDotOrgJsonLdBreadcrumbBuilderTest.php b/modules/schemadotorg_jsonld/tests/src/Unit/SchemaDotOrgJsonLdBreadcrumbBuilderTest.php
index 68e190d..0c980d8 100644
--- a/modules/schemadotorg_jsonld/tests/src/Unit/SchemaDotOrgJsonLdBreadcrumbBuilderTest.php
+++ b/modules/schemadotorg_jsonld/tests/src/Unit/SchemaDotOrgJsonLdBreadcrumbBuilderTest.php
@@ -24,9 +24,7 @@ class SchemaDotOrgJsonLdBreadcrumbBuilderTest extends UnitTestCase {
     // @see \Drupal\Core\Breadcrumb\Breadcrumb
     // @see \Drupal\Core\Cache\RefinableCacheableDependencyTrait
     // @see \Drupal\Core\Cache\Cache
-    $cache_contexts_manager = $this->getMockBuilder('Drupal\Core\Cache\Context\CacheContextsManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cache_contexts_manager = $this->createMock('Drupal\Core\Cache\Context\CacheContextsManager');
     // Always return TRUE for ::assertValidTokens so that any cache context
     // will be accepted.
     $cache_contexts_manager->method('assertValidTokens')->willReturn(TRUE);
diff --git a/modules/schemadotorg_jsonld_breadcrumb/schemadotorg_jsonld_breadcrumb.module b/modules/schemadotorg_jsonld_breadcrumb/schemadotorg_jsonld_breadcrumb.module
index 8b5cca1..bb8d6bf 100644
--- a/modules/schemadotorg_jsonld_breadcrumb/schemadotorg_jsonld_breadcrumb.module
+++ b/modules/schemadotorg_jsonld_breadcrumb/schemadotorg_jsonld_breadcrumb.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Breadcrumb\BreadcrumbManager;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface;
 /**
  * @file
  * Add Drupal's breadcrumb to Schema.org JSON-LD for the current route.
@@ -12,7 +15,7 @@ use Drupal\Core\Url;
  * Implements hook_schemadotorg_jsonld().
  */
 function schemadotorg_jsonld_breadcrumb_schemadotorg_jsonld(RouteMatchInterface $route_match) {
-  /** @var \Drupal\Core\Breadcrumb\BreadcrumbManager $breadcrumb_manager */
+  /** @var BreadcrumbManager $breadcrumb_manager */
   $breadcrumb_manager = \Drupal::service('breadcrumb');
   if (!$breadcrumb_manager->applies($route_match)) {
     return NULL;
@@ -24,7 +27,7 @@ function schemadotorg_jsonld_breadcrumb_schemadotorg_jsonld(RouteMatchInterface
     return NULL;
   }
 
-  /** @var \Drupal\Core\Render\RendererInterface $renderer */
+  /** @var RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');
 
   $items = [];
@@ -48,7 +51,7 @@ function schemadotorg_jsonld_breadcrumb_schemadotorg_jsonld(RouteMatchInterface
   }
 
   // Append the current route's entity to breadcrumb item list.
-  /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface $manager */
+  /** @var SchemaDotOrgJsonLdManagerInterface $manager */
   $manager = \Drupal::service('schemadotorg_jsonld.manager');
   $entity = $manager->getRouteMatchEntity($route_match);
   if ($entity) {
diff --git a/modules/schemadotorg_jsonld_breadcrumb/tests/src/Kernel/SchemaDotOrgJsonLdBreadcrumbTest.php b/modules/schemadotorg_jsonld_breadcrumb/tests/src/Kernel/SchemaDotOrgJsonLdBreadcrumbTest.php
index 6b9d21d..d39be9c 100644
--- a/modules/schemadotorg_jsonld_breadcrumb/tests/src/Kernel/SchemaDotOrgJsonLdBreadcrumbTest.php
+++ b/modules/schemadotorg_jsonld_breadcrumb/tests/src/Kernel/SchemaDotOrgJsonLdBreadcrumbTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\schemadotorg_jsonld_breadcrumb\Kernel;
 
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface;
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface;
 use Drupal\Core\Url;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\schemadotorg\Kernel\SchemaDotOrgKernelEntityTestBase;
@@ -26,21 +28,21 @@ class SchemaDotOrgJsonLdBreadcrumbTest extends SchemaDotOrgKernelEntityTestBase
   /**
    * Schema.org JSON-LD manager.
    *
-   * @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface
+   * @var SchemaDotOrgJsonLdManagerInterface
    */
   protected $manager;
 
   /**
    * Schema.org JSON-LD builder.
    *
-   * @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface
+   * @var SchemaDotOrgJsonLdBuilderInterface
    */
   protected $builder;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['schemadotorg_jsonld']);
     $this->manager = $this->container->get('schemadotorg_jsonld.manager');
diff --git a/modules/schemadotorg_jsonld_embed/schemadotorg_jsonld_embed.module b/modules/schemadotorg_jsonld_embed/schemadotorg_jsonld_embed.module
index 9df08a7..cab3ada 100644
--- a/modules/schemadotorg_jsonld_embed/schemadotorg_jsonld_embed.module
+++ b/modules/schemadotorg_jsonld_embed/schemadotorg_jsonld_embed.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface;
+use Drupal\schemadotorg_jsonld_embed\SchemaDotOrgJsonLdEmbedInterface;
 /**
  * @file
  * Extracts embedded content from an entity.
@@ -13,14 +15,14 @@ use Drupal\Core\Routing\RouteMatchInterface;
  * @see \Drupal\media\Plugin\Filter\MediaEmbed::process
  */
 function schemadotorg_jsonld_embed_schemadotorg_jsonld(RouteMatchInterface $route_match) {
-  /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface $manager */
+  /** @var SchemaDotOrgJsonLdManagerInterface $manager */
   $manager = \Drupal::service('schemadotorg_jsonld.manager');
   $entity = $manager->getRouteMatchEntity($route_match);
   if (!$entity) {
     return [];
   }
 
-  /** @var \Drupal\schemadotorg_jsonld_embed\SchemaDotOrgJsonLdEmbedInterface $embed_manager */
+  /** @var SchemaDotOrgJsonLdEmbedInterface $embed_manager */
   $embed_manager = \Drupal::service('schemadotorg_jsonld_embed.manager');
   return $embed_manager->build($entity);
 }
diff --git a/modules/schemadotorg_jsonld_embed/src/SchemaDotOrgJsonLdEmbedInterface.php b/modules/schemadotorg_jsonld_embed/src/SchemaDotOrgJsonLdEmbedInterface.php
index 64b80a7..224841b 100644
--- a/modules/schemadotorg_jsonld_embed/src/SchemaDotOrgJsonLdEmbedInterface.php
+++ b/modules/schemadotorg_jsonld_embed/src/SchemaDotOrgJsonLdEmbedInterface.php
@@ -12,7 +12,7 @@ interface SchemaDotOrgJsonLdEmbedInterface {
   /**
    * Build embedded media and content entity JSON-LD data.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return array
diff --git a/modules/schemadotorg_jsonld_embed/src/SchemaDotOrgJsonLdEmbedManager.php b/modules/schemadotorg_jsonld_embed/src/SchemaDotOrgJsonLdEmbedManager.php
index 763f8de..a66bed4 100644
--- a/modules/schemadotorg_jsonld_embed/src/SchemaDotOrgJsonLdEmbedManager.php
+++ b/modules/schemadotorg_jsonld_embed/src/SchemaDotOrgJsonLdEmbedManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\schemadotorg_jsonld_embed;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -15,14 +17,14 @@ class SchemaDotOrgJsonLdEmbedManager implements SchemaDotOrgJsonLdEmbedInterface
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Schema.org JSON-LD builder.
    *
-   * @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface
+   * @var SchemaDotOrgJsonLdBuilderInterface
    */
   protected $schemaJsonLdBuilder;
 
@@ -36,9 +38,9 @@ class SchemaDotOrgJsonLdEmbedManager implements SchemaDotOrgJsonLdEmbedInterface
   /**
    * Constructs a SchemaDotOrgJsonLdEmbedManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface|null $schema_jsonld_builder
+   * @param SchemaDotOrgJsonLdBuilderInterface|null $schema_jsonld_builder
    *   The Schema.org JSON-LD builder service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, SchemaDotOrgJsonLdBuilderInterface $schema_jsonld_builder = NULL) {
@@ -50,7 +52,7 @@ class SchemaDotOrgJsonLdEmbedManager implements SchemaDotOrgJsonLdEmbedInterface
    * {@inheritdoc}
    */
   public function build(EntityInterface $entity) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
+    /** @var SchemaDotOrgMappingStorageInterface $mapping_storage */
     $mapping_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping');
 
     $mapping = $mapping_storage->loadByEntity($entity);
@@ -73,7 +75,7 @@ class SchemaDotOrgJsonLdEmbedManager implements SchemaDotOrgJsonLdEmbedInterface
         continue;
       }
 
-      /** @var \Drupal\Core\Field\FieldItemListInterface $items */
+      /** @var FieldItemListInterface $items */
       $items = $entity->get($field_name);
       $field_type = $items->getFieldDefinition()->getType();
       if (in_array($field_type, ['text_long', 'text_with_summary'])) {
diff --git a/modules/schemadotorg_jsonld_embed/tests/src/Kernel/SchemaDotOrgJsonLdEmbedTest.php b/modules/schemadotorg_jsonld_embed/tests/src/Kernel/SchemaDotOrgJsonLdEmbedTest.php
index cb8a7df..8ba6768 100644
--- a/modules/schemadotorg_jsonld_embed/tests/src/Kernel/SchemaDotOrgJsonLdEmbedTest.php
+++ b/modules/schemadotorg_jsonld_embed/tests/src/Kernel/SchemaDotOrgJsonLdEmbedTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\schemadotorg_jsonld_embed\Kernel;
 
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface;
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Serialization\Yaml;
 use Drupal\Core\Url;
 use Drupal\filter\Entity\FilterFormat;
@@ -30,28 +33,28 @@ class SchemaDotOrgJsonLdEmbedTest extends SchemaDotOrgKernelEntityTestBase {
   /**
    * Schema.org JSON-LD manager.
    *
-   * @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface
+   * @var SchemaDotOrgJsonLdManagerInterface
    */
   protected $manager;
 
   /**
    * Schema.org JSON-LD builder.
    *
-   * @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface
+   * @var SchemaDotOrgJsonLdBuilderInterface
    */
   protected $builder;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['schemadotorg_jsonld']);
     $this->manager = $this->container->get('schemadotorg_jsonld.manager');
diff --git a/modules/schemadotorg_jsonld_endpoint/schemadotorg_jsonld_endpoint.module b/modules/schemadotorg_jsonld_endpoint/schemadotorg_jsonld_endpoint.module
index ef5b15c..137bd2b 100644
--- a/modules/schemadotorg_jsonld_endpoint/schemadotorg_jsonld_endpoint.module
+++ b/modules/schemadotorg_jsonld_endpoint/schemadotorg_jsonld_endpoint.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Routing\RouteBuilderInterface;
 /**
  * @file
  * Provides an endpoint to get an entity's Schema.org JSON-LD.
@@ -37,7 +38,7 @@ function schemadotorg_jsonld_endpoint_form_schemadotorg_jsonld_settings_form_alt
 function schemadotorg_jsonld_endpoint_settings_form_submit(&$form, FormStateInterface $form_state) {
   // Rebuild dynamic routes.
   // @see \Drupal\schemadotorg_jsonld_endpoint\Routing\SchemaDotOrgJsonLdEndpointRoutes
-  /** @var \Drupal\Core\Routing\RouteBuilderInterface $router_builder */
+  /** @var RouteBuilderInterface $router_builder */
   $router_builder = \Drupal::service('router.builder');
   $router_builder->setRebuildNeeded();
 
diff --git a/modules/schemadotorg_jsonld_endpoint/src/Controller/SchemaDotOrgJsonLdEndpointController.php b/modules/schemadotorg_jsonld_endpoint/src/Controller/SchemaDotOrgJsonLdEndpointController.php
index ab99623..963a6f2 100644
--- a/modules/schemadotorg_jsonld_endpoint/src/Controller/SchemaDotOrgJsonLdEndpointController.php
+++ b/modules/schemadotorg_jsonld_endpoint/src/Controller/SchemaDotOrgJsonLdEndpointController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\schemadotorg_jsonld_endpoint\Controller;
 
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface;
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface;
+use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -17,14 +20,14 @@ class SchemaDotOrgJsonLdEndpointController extends ControllerBase {
   /**
    * The Schema.org JSON-LD manager.
    *
-   * @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface
+   * @var SchemaDotOrgJsonLdManagerInterface
    */
   protected $manager;
 
   /**
    * The Schema.org JSON-LD builder.
    *
-   * @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface
+   * @var SchemaDotOrgJsonLdBuilderInterface
    */
   protected $builder;
 
@@ -41,10 +44,10 @@ class SchemaDotOrgJsonLdEndpointController extends ControllerBase {
   /**
    * Build the Schema.org JSON-LD response for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The Schema.org JSON-LD response for an entity.
    */
   public function getEntity(EntityInterface $entity) {
@@ -69,12 +72,12 @@ class SchemaDotOrgJsonLdEndpointController extends ControllerBase {
   /**
    * Checks view access to an entity's Schema.org JSON-LD.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user session for which to check access.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
+   * @return AccessResultInterface
    *   The access result.
    */
   public function access(AccountInterface $account, EntityInterface $entity) {
diff --git a/modules/schemadotorg_jsonld_endpoint/src/ParamConverter/SchemaDotOrgJsonLdEndpointEntityUuidConverter.php b/modules/schemadotorg_jsonld_endpoint/src/ParamConverter/SchemaDotOrgJsonLdEndpointEntityUuidConverter.php
index 02e98d6..dd8d304 100644
--- a/modules/schemadotorg_jsonld_endpoint/src/ParamConverter/SchemaDotOrgJsonLdEndpointEntityUuidConverter.php
+++ b/modules/schemadotorg_jsonld_endpoint/src/ParamConverter/SchemaDotOrgJsonLdEndpointEntityUuidConverter.php
@@ -26,14 +26,14 @@ class SchemaDotOrgJsonLdEndpointEntityUuidConverter extends EntityConverter {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * Injects the language manager.
    *
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager to get the current content language.
    */
   public function setLanguageManager(LanguageManagerInterface $language_manager) {
diff --git a/modules/schemadotorg_jsonld_endpoint/src/Routing/SchemaDotOrgJsonLdEndpointRoutes.php b/modules/schemadotorg_jsonld_endpoint/src/Routing/SchemaDotOrgJsonLdEndpointRoutes.php
index 47300cc..6691e91 100644
--- a/modules/schemadotorg_jsonld_endpoint/src/Routing/SchemaDotOrgJsonLdEndpointRoutes.php
+++ b/modules/schemadotorg_jsonld_endpoint/src/Routing/SchemaDotOrgJsonLdEndpointRoutes.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\schemadotorg_jsonld_endpoint\Routing;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\Routing\Route;
@@ -22,14 +25,14 @@ class SchemaDotOrgJsonLdEndpointRoutes implements ContainerInjectionInterface {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -51,7 +54,7 @@ class SchemaDotOrgJsonLdEndpointRoutes implements ContainerInjectionInterface {
 
     $routes = new RouteCollection();
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping_type');
     $endpoints = $config->get('entity_type_endpoints') + $mapping_type_storage->getEntityTypes();
     foreach ($endpoints as $entity_type_id => $entity_type_path) {
diff --git a/modules/schemadotorg_jsonld_preview/schemadotorg_jsonld_preview.module b/modules/schemadotorg_jsonld_preview/schemadotorg_jsonld_preview.module
index d21acdf..a48dc86 100644
--- a/modules/schemadotorg_jsonld_preview/schemadotorg_jsonld_preview.module
+++ b/modules/schemadotorg_jsonld_preview/schemadotorg_jsonld_preview.module
@@ -1,5 +1,8 @@
 <?php
 
+use Drupal\Core\Condition\ConditionManager;
+use Drupal\schemadotorg_jsonld_preview\SchemaDotOrgJsonLdPreviewAccessCheckerInterface;
+use Drupal\schemadotorg_jsonld_preview\SchemaDotOrgJsonLdPreviewBuilderInterface;
 /**
  * @file
  * Allows users to preview a web page's Schema.org JSON-LD.
@@ -15,7 +18,7 @@ function schemadotorg_jsonld_preview_form_schemadotorg_jsonld_settings_form_alte
   $config = \Drupal::config('schemadotorg_jsonld_preview.settings');
 
   // Load the request path condition plugin.
-  /** @var \Drupal\Core\Condition\ConditionManager $condition_manager */
+  /** @var ConditionManager $condition_manager */
   $condition_manager = \Drupal::service('plugin.manager.condition');
   $condition = $condition_manager->createInstance('request_path');
 
@@ -70,13 +73,13 @@ function schemadotorg_jsonld_preview_settings_form_submit(&$form, FormStateInter
  * Implements hook_preprocess_html().
  */
 function schemadotorg_jsonld_preview_preprocess_html(array &$variables) {
-  /** @var \Drupal\schemadotorg_jsonld_preview\SchemaDotOrgJsonLdPreviewAccessCheckerInterface $access_checker */
+  /** @var SchemaDotOrgJsonLdPreviewAccessCheckerInterface $access_checker */
   $access_checker = \Drupal::service('schemadotorg_jsonld_preview.access_checker');
   if (!$access_checker->access()) {
     return;
   }
 
-  /** @var \Drupal\schemadotorg_jsonld_preview\SchemaDotOrgJsonLdPreviewBuilderInterface $preview_builder */
+  /** @var SchemaDotOrgJsonLdPreviewBuilderInterface $preview_builder */
   $preview_builder = \Drupal::service('schemadotorg_jsonld_preview.builder');
   $build = $preview_builder->build();
 
diff --git a/modules/schemadotorg_jsonld_preview/src/SchemaDotOrgJsonLdPreviewAccessChecker.php b/modules/schemadotorg_jsonld_preview/src/SchemaDotOrgJsonLdPreviewAccessChecker.php
index 13fee8f..1bcbb47 100644
--- a/modules/schemadotorg_jsonld_preview/src/SchemaDotOrgJsonLdPreviewAccessChecker.php
+++ b/modules/schemadotorg_jsonld_preview/src/SchemaDotOrgJsonLdPreviewAccessChecker.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg_jsonld_preview;
 
+use Drupal\system\Plugin\Condition\RequestPath;
 use Drupal\Core\Condition\ConditionManager;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Routing\AdminContext;
@@ -15,41 +16,41 @@ class SchemaDotOrgJsonLdPreviewAccessChecker implements SchemaDotOrgJsonLdPrevie
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The route admin context to determine whether a route is an admin one.
    *
-   * @var \Drupal\Core\Routing\AdminContext
+   * @var AdminContext
    */
   protected $adminContext;
 
   /**
    * The condition plugin manager.
    *
-   * @var \Drupal\Core\Condition\ConditionManager
+   * @var ConditionManager
    */
   protected $conditionManager;
 
   /**
    * Constructs a SchemaDotOrgJsonLdPreviewAccessChecker object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration object factory.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Routing\AdminContext $admin_context
+   * @param AdminContext $admin_context
    *   The route admin context to determine whether the route is an admin one.
-   * @param \Drupal\Core\Condition\ConditionManager $condition_manager
+   * @param ConditionManager $condition_manager
    *   The ConditionManager for building the visibility UI.
    */
   public function __construct(
@@ -81,7 +82,7 @@ class SchemaDotOrgJsonLdPreviewAccessChecker implements SchemaDotOrgJsonLdPrevie
     $config = $this->configFactory->get('schemadotorg_jsonld_preview.settings');
 
     // Load the request path condition plugin.
-    /** @var \Drupal\system\Plugin\Condition\RequestPath $condition */
+    /** @var RequestPath $condition */
     $condition = $this->conditionManager->createInstance('request_path');
 
     // Set the visibility request path condition configuration.
diff --git a/modules/schemadotorg_jsonld_preview/src/SchemaDotOrgJsonLdPreviewBuilder.php b/modules/schemadotorg_jsonld_preview/src/SchemaDotOrgJsonLdPreviewBuilder.php
index 59d4d48..d0a5b2b 100644
--- a/modules/schemadotorg_jsonld_preview/src/SchemaDotOrgJsonLdPreviewBuilder.php
+++ b/modules/schemadotorg_jsonld_preview/src/SchemaDotOrgJsonLdPreviewBuilder.php
@@ -18,41 +18,41 @@ class SchemaDotOrgJsonLdPreviewBuilder implements SchemaDotOrgJsonLdPreviewBuild
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Schema.org JSON-LD manager.
    *
-   * @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface
+   * @var SchemaDotOrgJsonLdManagerInterface
    */
   protected $schemaJsonLdManager;
 
   /**
    * The Schema.org JSON-LD builder.
    *
-   * @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface
+   * @var SchemaDotOrgJsonLdBuilderInterface
    */
   protected $schemaJsonLdBuilder;
 
   /**
    * Constructs a SchemaDotOrgJsonLdPreviewBuilder object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface $schema_jsonld_manager
+   * @param SchemaDotOrgJsonLdManagerInterface $schema_jsonld_manager
    *   The Schema.org JSON-LD manager service.
-   * @param \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface $schema_jsonld_builder
+   * @param SchemaDotOrgJsonLdBuilderInterface $schema_jsonld_builder
    *   The Schema.org JSON-LD builder service.
    */
   public function __construct(
@@ -72,7 +72,7 @@ class SchemaDotOrgJsonLdPreviewBuilder implements SchemaDotOrgJsonLdPreviewBuild
    */
   public function build() {
     // Build the entity's Schema.org data.
-    /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface $builder */
+    /** @var SchemaDotOrgJsonLdBuilderInterface $builder */
     $data = $this->schemaJsonLdBuilder->build();
     if (!$data) {
       return [];
diff --git a/modules/schemadotorg_paragraphs/schemadotorg_paragraphs.module b/modules/schemadotorg_paragraphs/schemadotorg_paragraphs.module
index bfa4f62..9b726ad 100644
--- a/modules/schemadotorg_paragraphs/schemadotorg_paragraphs.module
+++ b/modules/schemadotorg_paragraphs/schemadotorg_paragraphs.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\schemadotorg\SchemaDotOrgMappingStorage;
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface;
 /**
  * @file
  * Integrates the Paragraphs with the Schema.org Blueprints module.
@@ -49,7 +51,7 @@ function schemadotorg_paragraphs_schemadotorg_property_field_alter(
     return;
   }
 
-  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorage $mapping_storage */
+  /** @var SchemaDotOrgMappingStorage $mapping_storage */
   $mapping_storage = \Drupal::entityTypeManager()->getStorage('schemadotorg_mapping');
 
   // If any of the target bundles use the Paragraphs library,
@@ -57,7 +59,7 @@ function schemadotorg_paragraphs_schemadotorg_property_field_alter(
   $target_type = $field_storage_values['settings']['target_type'];
   $target_bundles = $field_values['settings']['handler_settings']['target_bundles'];
   foreach ($target_bundles as $target_bundle) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $target_mapping */
+    /** @var SchemaDotOrgMappingInterface $target_mapping */
     $target_mappings = $mapping_storage->loadByProperties([
       'target_entity_type_id' => $target_type,
       'target_bundle' => $target_bundle,
@@ -149,7 +151,7 @@ function _schemadotorg_paragraphs_use_library($type) {
     ->get('schemadotorg_paragraphs.settings')
     ->get('paragraphs_library');
 
-  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
+  /** @var SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
   $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
   $breadcrumbs = $schema_type_manager->getTypeBreadcrumbs($type);
   foreach ($breadcrumbs as $breadcrumb) {
diff --git a/modules/schemadotorg_paragraphs/tests/src/Kernel/SchemaDotOrgParagraphsTest.php b/modules/schemadotorg_paragraphs/tests/src/Kernel/SchemaDotOrgParagraphsTest.php
index 020e2f0..7bedc35 100644
--- a/modules/schemadotorg_paragraphs/tests/src/Kernel/SchemaDotOrgParagraphsTest.php
+++ b/modules/schemadotorg_paragraphs/tests/src/Kernel/SchemaDotOrgParagraphsTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\schemadotorg_paragraphs\Kernel;
 
+use Drupal\field\FieldConfigInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\paragraphs\Entity\ParagraphsType;
 use Drupal\Tests\schemadotorg\Kernel\SchemaDotOrgKernelEntityTestBase;
@@ -29,7 +30,7 @@ class SchemaDotOrgParagraphsTest extends SchemaDotOrgKernelEntityTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['schemadotorg_paragraphs']);
@@ -43,11 +44,10 @@ class SchemaDotOrgParagraphsTest extends SchemaDotOrgKernelEntityTestBase {
     $this->createSchemaEntity('node', 'Person');
 
     /* ********************************************************************** */
-
     // Check that ContactPoint field target bundles includes the
     // 'from_library' paragraph type.
     // @see schemadotorg_paragraphs_schemadotorg_property_field_alter()
-    /** @var \Drupal\field\FieldConfigInterface $field */
+    /** @var FieldConfigInterface $field */
     $field = FieldConfig::loadByName('node', 'person', 'schema_contact_point');
     $handler_settings = $field->getSetting('handler_settings');
     $this->assertEquals(['contact_point', 'from_library'], array_values($handler_settings['target_bundles']));
diff --git a/modules/schemadotorg_rdf/schemadotorg_rdf.module b/modules/schemadotorg_rdf/schemadotorg_rdf.module
index 03acd27..a55b491 100644
--- a/modules/schemadotorg_rdf/schemadotorg_rdf.module
+++ b/modules/schemadotorg_rdf/schemadotorg_rdf.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface;
 /**
  * @file
  * Integrates Schema.org mappings with Drupal core's RDF(a) mapping.
@@ -76,11 +77,11 @@ function schemadotorg_rdf_preprocess_node(&$variables) {
  *
  * @param array &$variables
  *   The entity's template variables.
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The entity.
  */
 function _schemadotorg_rdf_preprocess_entity(array &$variables, EntityInterface $entity) {
-  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
+  /** @var SchemaDotOrgMappingStorageInterface $mapping_storage */
   $mapping_storage = \Drupal::entityTypeManager()->getStorage('schemadotorg_mapping');
 
   // Get the Schema.org mapping.
diff --git a/modules/schemadotorg_rdf/tests/src/Functional/SchemaDotOrgRdfTest.php b/modules/schemadotorg_rdf/tests/src/Functional/SchemaDotOrgRdfTest.php
index 1571e1a..9674fe5 100644
--- a/modules/schemadotorg_rdf/tests/src/Functional/SchemaDotOrgRdfTest.php
+++ b/modules/schemadotorg_rdf/tests/src/Functional/SchemaDotOrgRdfTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\schemadotorg_rdf\Functional;
 
+use Drupal\node\NodeInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;
@@ -24,21 +26,21 @@ class SchemaDotOrgRdfTest extends SchemaDotOrgBrowserTestBase {
   /**
    * A test node.
    *
-   * @var \Drupal\node\NodeInterface
+   * @var NodeInterface
    */
   protected $node;
 
   /**
    * The test node's Schema.org mapping.
    *
-   * @var \Drupal\schemadotorg\Entity\SchemaDotOrgMapping
+   * @var SchemaDotOrgMapping
    */
   protected $nodeMapping;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Create Event node with field.
@@ -48,7 +50,7 @@ class SchemaDotOrgRdfTest extends SchemaDotOrgBrowserTestBase {
     ]);
     $this->createSchemaDotOrgField('node', 'event');
     $this->createSchemaDotOrgSubTypeField('node', 'event');
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+    /** @var EntityDisplayRepositoryInterface $display_repository */
     $display_repository = \Drupal::service('entity_display.repository');
     $display_repository->getViewDisplay('node', 'event')
       ->setComponent('schema_alternate_name')
diff --git a/modules/schemadotorg_report/schemadotorg_report.module b/modules/schemadotorg_report/schemadotorg_report.module
index 6854ed4..e8557c1 100644
--- a/modules/schemadotorg_report/schemadotorg_report.module
+++ b/modules/schemadotorg_report/schemadotorg_report.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface;
 /**
  * @file
  * Primary module hooks for Schema.org Report module.
@@ -14,7 +15,7 @@ use Drupal\Core\Url;
 function schemadotorg_report_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     case 'schemadotorg_report':
-      /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
+      /** @var SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
       $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
       $id = $route_match->getRawParameter('id');
       if ($schema_type_manager->isType($id)) {
diff --git a/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportControllerBase.php b/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportControllerBase.php
index 6d0360c..b71171b 100644
--- a/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportControllerBase.php
+++ b/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportControllerBase.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\schemadotorg_report\Controller;
 
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Form\FormBuilderInterface;
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
@@ -15,28 +19,28 @@ abstract class SchemaDotOrgReportControllerBase extends ControllerBase {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The form builder service.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * The Schema.org schema type builder service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface
+   * @var SchemaDotOrgSchemaTypeBuilderInterface
    */
   protected $schemaTypeBuilder;
 
diff --git a/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportItemController.php b/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportItemController.php
index 71587df..6acdfa2 100644
--- a/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportItemController.php
+++ b/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportItemController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\schemadotorg_report\Controller;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface;
+use Drupal\Core\Config\Entity\ConfigEntityType;
 use Drupal\Core\Link;
 use Drupal\Core\Url;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
@@ -41,7 +44,7 @@ class SchemaDotOrgReportItemController extends SchemaDotOrgReportControllerBase
    * @param string $id
    *   The Schema.org type of property ID.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The title.
    */
   public function title($id) {
@@ -461,9 +464,9 @@ class SchemaDotOrgReportItemController extends SchemaDotOrgReportControllerBase
 
     // Get operations.
     $operations = [];
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $schemadotorg_mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $schemadotorg_mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager()->getStorage('schemadotorg_mapping_type');
-    /** @var \Drupal\Core\Config\Entity\ConfigEntityType[] $entity_type_definitions */
+    /** @var ConfigEntityType[] $entity_type_definitions */
     $entity_type_definitions = $mapping_type_storage->getEntityTypeBundleDefinitions();
     foreach ($entity_type_definitions as $entity_type_id => $entity_type_definition) {
       $bundle_entity_type_id = $entity_type_definition->id();
diff --git a/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportMappingsController.php b/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportMappingsController.php
index 27b60c3..e6475be 100644
--- a/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportMappingsController.php
+++ b/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportMappingsController.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\schemadotorg_report\Controller;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface;
+use Drupal\field\FieldConfigStorage;
+use Drupal\Core\Field\FieldConfigInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
 use Drupal\Core\Link;
 use Drupal\field_ui\FieldUI;
 use Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface;
@@ -18,7 +23,7 @@ class SchemaDotOrgReportMappingsController extends SchemaDotOrgReportControllerB
    *   A renderable array containing the Schema.org mapping recommendations.
    */
   public function recommendations() {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager()->getStorage('schemadotorg_mapping_type');
 
     $header = [
@@ -30,7 +35,7 @@ class SchemaDotOrgReportMappingsController extends SchemaDotOrgReportControllerB
 
     $build = [];
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface[] $mapping_types */
+    /** @var SchemaDotOrgMappingTypeInterface[] $mapping_types */
     $mapping_types = $mapping_type_storage->loadMultiple();
     foreach ($mapping_types as $entity_type_id => $mapping_type) {
       $recomended_types = $mapping_type->getRecommendedSchemaTypes();
@@ -141,10 +146,10 @@ class SchemaDotOrgReportMappingsController extends SchemaDotOrgReportControllerB
    * @see \Drupal\schemadotorg\Commands\SchemaDotOrgCommands::repair
    */
   public function relationships() {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
+    /** @var SchemaDotOrgMappingStorageInterface $mapping_storage */
     $mapping_storage = $this->entityTypeManager()->getStorage('schemadotorg_mapping');
 
-    /** @var \Drupal\field\FieldConfigStorage $field_storage */
+    /** @var FieldConfigStorage $field_storage */
     $field_storage = $this->entityTypeManager()->getStorage('field_config');
 
     $header = [
@@ -163,14 +168,14 @@ class SchemaDotOrgReportMappingsController extends SchemaDotOrgReportControllerB
       ->condition('field_type', ['entity_reference', 'entity_reference_revisions'], 'IN')
       ->sort('id')
       ->execute();
-    /** @var \Drupal\Core\Field\FieldConfigInterface[] $fields */
+    /** @var FieldConfigInterface[] $fields */
     $fields = $field_storage->loadMultiple($entity_ids);
     $rows = [];
     foreach ($fields as $field) {
       $field_name = $field->getName();
       $entity_type_id = $field->getTargetEntityTypeId();
       $bundle = $field->getTargetBundle();
-      /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping */
+      /** @var SchemaDotOrgMappingInterface $mapping */
       $mapping = $mapping_storage->load("$entity_type_id.$bundle");
       if (!$mapping) {
         continue;
@@ -237,7 +242,7 @@ class SchemaDotOrgReportMappingsController extends SchemaDotOrgReportControllerB
   /**
    * Get sorted properties for a mapping type.
    *
-   * @param \Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface $mapping_type
+   * @param SchemaDotOrgMappingTypeInterface $mapping_type
    *   A Schema.org mapping type.
    *
    * @return array|false
diff --git a/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportNamesController.php b/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportNamesController.php
index ff6cfcc..74818ea 100644
--- a/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportNamesController.php
+++ b/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportNamesController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg_report\Controller;
 
+use Drupal\schemadotorg\SchemaDotOrgNamesInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
@@ -12,7 +13,7 @@ class SchemaDotOrgReportNamesController extends SchemaDotOrgReportControllerBase
   /**
    * The Schema.org Names service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface
+   * @var SchemaDotOrgNamesInterface
    */
   protected $schemaDotOrgNames;
 
diff --git a/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportTableController.php b/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportTableController.php
index f2dccc3..b77fe5c 100644
--- a/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportTableController.php
+++ b/modules/schemadotorg_report/src/Controller/SchemaDotOrgReportTableController.php
@@ -13,7 +13,7 @@ class SchemaDotOrgReportTableController extends SchemaDotOrgReportControllerBase
   /**
    * Builds the Schema.org types or properties documentation.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request.
    * @param string $table
    *   Schema.org types and properties table.
diff --git a/modules/schemadotorg_report/src/Form/SchemaDotOrgReportFilterForm.php b/modules/schemadotorg_report/src/Form/SchemaDotOrgReportFilterForm.php
index ca7d1ce..0c619ca 100644
--- a/modules/schemadotorg_report/src/Form/SchemaDotOrgReportFilterForm.php
+++ b/modules/schemadotorg_report/src/Form/SchemaDotOrgReportFilterForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg_report\Form;
 
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,7 +15,7 @@ class SchemaDotOrgReportFilterForm extends FormBase {
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
@@ -100,7 +101,7 @@ class SchemaDotOrgReportFilterForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function resetForm(array &$form, FormStateInterface $form_state) {
diff --git a/modules/schemadotorg_report/tests/src/Functional/SchemaDotOrgReportTest.php b/modules/schemadotorg_report/tests/src/Functional/SchemaDotOrgReportTest.php
index 54e1c2f..847041a 100644
--- a/modules/schemadotorg_report/tests/src/Functional/SchemaDotOrgReportTest.php
+++ b/modules/schemadotorg_report/tests/src/Functional/SchemaDotOrgReportTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\schemadotorg_report\Functional;
 
+use Drupal\user\Entity\User;
 use Drupal\Tests\schemadotorg\Functional\SchemaDotOrgBrowserTestBase;
 
 /**
@@ -21,14 +22,14 @@ class SchemaDotOrgReportTest extends SchemaDotOrgBrowserTestBase {
   /**
    * A user with permission to access site reports.
    *
-   * @var \Drupal\user\Entity\User
+   * @var User
    */
   protected $reportUser;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->reportUser = $this->drupalCreateUser(['access site reports']);
diff --git a/modules/schemadotorg_report/tests/src/Unit/Breadcrumb/SchemaDotOrgReportBreadcrumbBuilderTest.php b/modules/schemadotorg_report/tests/src/Unit/Breadcrumb/SchemaDotOrgReportBreadcrumbBuilderTest.php
index c2e9a51..1d4f1dc 100644
--- a/modules/schemadotorg_report/tests/src/Unit/Breadcrumb/SchemaDotOrgReportBreadcrumbBuilderTest.php
+++ b/modules/schemadotorg_report/tests/src/Unit/Breadcrumb/SchemaDotOrgReportBreadcrumbBuilderTest.php
@@ -24,9 +24,7 @@ class SchemaDotOrgReportBreadcrumbBuilderTest extends UnitTestCase {
     // @see \Drupal\Core\Breadcrumb\Breadcrumb
     // @see \Drupal\Core\Cache\RefinableCacheableDependencyTrait
     // @see \Drupal\Core\Cache\Cache
-    $cache_contexts_manager = $this->getMockBuilder('Drupal\Core\Cache\Context\CacheContextsManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cache_contexts_manager = $this->createMock('Drupal\Core\Cache\Context\CacheContextsManager');
     // Always return TRUE for ::assertValidTokens so that any cache context
     // will be accepted.
     $cache_contexts_manager->method('assertValidTokens')->willReturn(TRUE);
diff --git a/modules/schemadotorg_report/tests/src/Unit/Form/SchemaDotOrgReportFilterFormTest.php b/modules/schemadotorg_report/tests/src/Unit/Form/SchemaDotOrgReportFilterFormTest.php
index 5fdb7c4..bea845d 100644
--- a/modules/schemadotorg_report/tests/src/Unit/Form/SchemaDotOrgReportFilterFormTest.php
+++ b/modules/schemadotorg_report/tests/src/Unit/Form/SchemaDotOrgReportFilterFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\schemadotorg_report\Unit\Breadcrumb;
 
+use Drupal\Core\Url;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Routing\RouteMatch;
@@ -18,7 +19,7 @@ class SchemaDotOrgReportFilterFormTest extends UnitTestCase {
   /**
    * The Schema.org report filter type or property form being tested.
    *
-   * @var \Drupal\schemadotorg_report\Form\SchemaDotOrgReportFilterForm
+   * @var SchemaDotOrgReportFilterForm
    */
   protected $filterForm;
 
@@ -36,9 +37,7 @@ class SchemaDotOrgReportFilterFormTest extends UnitTestCase {
 
     // Mock Schema.org type manager which is only used to validate
     // type and property ids.
-    $schema_type_manager = $this->getMockBuilder('\Drupal\schemadotorg\SchemaDotOrgSchemaTypeManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $schema_type_manager = $this->createMock('\Drupal\schemadotorg\SchemaDotOrgSchemaTypeManager');
     $schema_type_manager->method('isId')->willReturnMap([
       ['types', 'Thing', TRUE],
       ['types', 'Th', FALSE],
@@ -98,7 +97,7 @@ class SchemaDotOrgReportFilterFormTest extends UnitTestCase {
     // Check that 'Thing' redirects to Schema.org type 'Thing' page.
     $form_state->setValue('id', 'Thing');
     $this->filterForm->submitForm($form, $form_state);
-    /** @var \Drupal\Core\Url $redirect_url */
+    /** @var Url $redirect_url */
     $redirect_url = $form_state->getRedirect();
     $this->assertEquals('schemadotorg_report', $redirect_url->getRouteName());
     $this->assertEquals(['id' => 'Thing'], $redirect_url->getRouteParameters());
@@ -107,7 +106,7 @@ class SchemaDotOrgReportFilterFormTest extends UnitTestCase {
     // Check that 'Th' redirects to Schema.org types page filtered by 'Th'.
     $form_state->setValue('id', 'Th');
     $this->filterForm->submitForm($form, $form_state);
-    /** @var \Drupal\Core\Url $redirect_url */
+    /** @var Url $redirect_url */
     $redirect_url = $form_state->getRedirect();
     $this->assertEquals('schemadotorg_report.types', $redirect_url->getRouteName());
     $this->assertEquals([], $redirect_url->getRouteParameters());
@@ -126,7 +125,7 @@ class SchemaDotOrgReportFilterFormTest extends UnitTestCase {
     $this->filterForm->resetForm($form, $form_state);
 
     // Confirm the redirect returns the mocked current route which is NULL.
-    /** @var \Drupal\Core\Url $redirect_url */
+    /** @var Url $redirect_url */
     $redirect_url = $form_state->getRedirect();
     $this->assertNull($redirect_url->getRouteName());
     $this->assertSame([], $redirect_url->getRouteParameters());
diff --git a/modules/schemadotorg_taxonomy/schemadotorg_taxonomy.module b/modules/schemadotorg_taxonomy/schemadotorg_taxonomy.module
index 69de702..910373c 100644
--- a/modules/schemadotorg_taxonomy/schemadotorg_taxonomy.module
+++ b/modules/schemadotorg_taxonomy/schemadotorg_taxonomy.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\schemadotorg_taxonomy\SchemaDotOrgTaxonomyManager;
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface;
 /**
  * @file
  * Provides mappings from taxonomy vocabularies and terms to Schema.org.
@@ -14,7 +16,7 @@ use Drupal\taxonomy\TermInterface;
  * Implements hook_schemadotorg_jsonld_entity_load().
  */
 function schemadotorg_taxonomy_schemadotorg_jsonld_entity_load(array &$data, EntityInterface $entity) {
-  /** @var \Drupal\schemadotorg_taxonomy\SchemaDotOrgTaxonomyManager $schema_taxonomy_manager */
+  /** @var SchemaDotOrgTaxonomyManager $schema_taxonomy_manager */
   $schema_taxonomy_manager = \Drupal::service('schemadotorg_taxonomy.manager');
   $schema_taxonomy_manager->load($data, $entity);
 }
@@ -23,7 +25,7 @@ function schemadotorg_taxonomy_schemadotorg_jsonld_entity_load(array &$data, Ent
  * Implements hook_schemadotorg_jsonld_entity_alter().
  */
 function schemadotorg_taxonomy_schemadotorg_jsonld_entity_alter(array &$data, EntityInterface $entity) {
-  /** @var \Drupal\schemadotorg_taxonomy\SchemaDotOrgTaxonomyManager $schema_taxonomy_manager */
+  /** @var SchemaDotOrgTaxonomyManager $schema_taxonomy_manager */
   $schema_taxonomy_manager = \Drupal::service('schemadotorg_taxonomy.manager');
   $schema_taxonomy_manager->alter($data, $entity);
 }
@@ -32,7 +34,7 @@ function schemadotorg_taxonomy_schemadotorg_jsonld_entity_alter(array &$data, En
  * Implements hook_preprocess_html().
  */
 function schemadotorg_taxonomy_preprocess_html(array &$variables) {
-  /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdManagerInterface $schema_jsonld_manager */
+  /** @var SchemaDotOrgJsonLdManagerInterface $schema_jsonld_manager */
   $schema_jsonld_manager = \Drupal::service('schemadotorg_jsonld.manager');
   $route_entity = $schema_jsonld_manager->getRouteMatchEntity();
 
diff --git a/modules/schemadotorg_taxonomy/src/SchemaDotOrgTaxonomyManager.php b/modules/schemadotorg_taxonomy/src/SchemaDotOrgTaxonomyManager.php
index d036aad..ecd4e03 100644
--- a/modules/schemadotorg_taxonomy/src/SchemaDotOrgTaxonomyManager.php
+++ b/modules/schemadotorg_taxonomy/src/SchemaDotOrgTaxonomyManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\schemadotorg_taxonomy;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface;
@@ -16,23 +18,23 @@ class SchemaDotOrgTaxonomyManager implements SchemaDotOrgTaxonomyManagerInterfac
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Schema.org JSON-LD builder.
    *
-   * @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface
+   * @var SchemaDotOrgJsonLdBuilderInterface
    */
   protected $schemaJsonLdBuilder;
 
   /**
    * Constructs a SchemaDotOrgTaxonomyManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface|null $schema_jsonld_builder
+   * @param SchemaDotOrgJsonLdBuilderInterface|null $schema_jsonld_builder
    *   The Schema.org JSON-LD builder service.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, SchemaDotOrgJsonLdBuilderInterface $schema_jsonld_builder = NULL) {
@@ -49,7 +51,7 @@ class SchemaDotOrgTaxonomyManager implements SchemaDotOrgTaxonomyManagerInterfac
     }
 
     // Alter a vocabulary's Schema.org type data to use DefinedTermSet @type.
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface[] $mappings */
+    /** @var SchemaDotOrgMappingInterface[] $mappings */
     $mappings = $this->getMappingStorage()->loadByProperties([
       'target_entity_type_id' => 'taxonomy_term',
       'target_bundle' => $entity->id(),
@@ -97,7 +99,7 @@ class SchemaDotOrgTaxonomyManager implements SchemaDotOrgTaxonomyManagerInterfac
   /**
    * Gets Schema.org mapping storage.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface
+   * @return SchemaDotOrgMappingStorageInterface
    *   The Schema.org mapping storage.
    */
   protected function getMappingStorage() {
diff --git a/modules/schemadotorg_taxonomy/src/SchemaDotOrgTaxonomyManagerInterface.php b/modules/schemadotorg_taxonomy/src/SchemaDotOrgTaxonomyManagerInterface.php
index c50ba33..0bd78c6 100644
--- a/modules/schemadotorg_taxonomy/src/SchemaDotOrgTaxonomyManagerInterface.php
+++ b/modules/schemadotorg_taxonomy/src/SchemaDotOrgTaxonomyManagerInterface.php
@@ -14,7 +14,7 @@ interface SchemaDotOrgTaxonomyManagerInterface {
    *
    * @param array $data
    *   Schema.org type data.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function load(array &$data, EntityInterface $entity);
@@ -24,7 +24,7 @@ interface SchemaDotOrgTaxonomyManagerInterface {
    *
    * @param array $data
    *   Schema.org type data.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function alter(array &$data, EntityInterface $entity);
diff --git a/modules/schemadotorg_taxonomy/tests/src/Functional/SchemaDotOrgTaxonomyTest.php b/modules/schemadotorg_taxonomy/tests/src/Functional/SchemaDotOrgTaxonomyTest.php
index a8378ea..1907e0f 100644
--- a/modules/schemadotorg_taxonomy/tests/src/Functional/SchemaDotOrgTaxonomyTest.php
+++ b/modules/schemadotorg_taxonomy/tests/src/Functional/SchemaDotOrgTaxonomyTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\schemadotorg_taxonomy\Functional;
 
+use Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface;
 use Drupal\Core\Url;
 use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;
 use Drupal\taxonomy\Entity\Term;
@@ -30,14 +31,14 @@ class SchemaDotOrgTaxonomyTest extends SchemaDotOrgBrowserTestBase {
   /**
    * Schema.org JSON-LD builder.
    *
-   * @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface
+   * @var SchemaDotOrgJsonLdBuilderInterface
    */
   protected $builder;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->builder = $this->container->get('schemadotorg_jsonld.builder');
   }
diff --git a/modules/schemadotorg_ui/schemadotorg_ui.module b/modules/schemadotorg_ui/schemadotorg_ui.module
index ba23784..034e3f5 100644
--- a/modules/schemadotorg_ui/schemadotorg_ui.module
+++ b/modules/schemadotorg_ui/schemadotorg_ui.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Routing\RouteBuilderInterface;
 /**
  * @file
  * Allows administrators to attach custom Schema.org properties to fieldable types.
@@ -37,7 +38,7 @@ function schemadotorg_ui_field_ui_preconfigured_options_alter(array &$options, $
 function schemadotorg_ui_schemadotorg_mapping_type_insert() {
   // Rebuild dynamic routes.
   // @see \Drupal\schemadotorg_ui\Routing\SchemaDotOrgRouteSubscriber
-  /** @var \Drupal\Core\Routing\RouteBuilderInterface $router_builder */
+  /** @var RouteBuilderInterface $router_builder */
   $router_builder = \Drupal::service('router.builder');
   $router_builder->setRebuildNeeded();
 }
diff --git a/modules/schemadotorg_ui/src/Commands/SchemaDotOrgUiCommands.php b/modules/schemadotorg_ui/src/Commands/SchemaDotOrgUiCommands.php
index 0570a51..3f5d10b 100644
--- a/modules/schemadotorg_ui/src/Commands/SchemaDotOrgUiCommands.php
+++ b/modules/schemadotorg_ui/src/Commands/SchemaDotOrgUiCommands.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg_ui\Commands;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface;
 use Consolidation\AnnotatedCommand\CommandData;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\schemadotorg_ui\SchemaDotOrgUiApiInterface;
@@ -16,23 +17,23 @@ class SchemaDotOrgUiCommands extends DrushCommands {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Schema.org UI API.
    *
-   * @var \Drupal\schemadotorg_ui\SchemaDotOrgUiApiInterface
+   * @var SchemaDotOrgUiApiInterface
    */
   protected $schemaApi;
 
   /**
    * SchemaDotOrgUiCommands constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\schemadotorg_ui\SchemaDotOrgUiApiInterface $schema_api
+   * @param SchemaDotOrgUiApiInterface $schema_api
    *   The Schema.org UI API.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, SchemaDotOrgUiApiInterface $schema_api) {
@@ -182,7 +183,7 @@ class SchemaDotOrgUiCommands extends DrushCommands {
   /**
    * Gets the Schema.org mapping storage.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface
+   * @return SchemaDotOrgMappingStorageInterface
    *   The Schema.org mapping storage.
    */
   protected function getSchemaMappingStorage() {
diff --git a/modules/schemadotorg_ui/src/Controller/SchemaDotOrgUiMappingController.php b/modules/schemadotorg_ui/src/Controller/SchemaDotOrgUiMappingController.php
index 64d7d6b..1d9a18a 100644
--- a/modules/schemadotorg_ui/src/Controller/SchemaDotOrgUiMappingController.php
+++ b/modules/schemadotorg_ui/src/Controller/SchemaDotOrgUiMappingController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\schemadotorg_ui\Controller;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Url;
 
@@ -53,7 +55,7 @@ class SchemaDotOrgUiMappingController extends ControllerBase {
    *   An array containing add Schema.org mapping links.
    */
   protected function getCreateMappingLinks() {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager()->getStorage('schemadotorg_mapping_type');
 
     $content = [];
@@ -78,14 +80,14 @@ class SchemaDotOrgUiMappingController extends ControllerBase {
    *   An array containing update Schema.org mapping links.
    */
   protected function getUpdateMappingLinks() {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface $mapping_storage */
+    /** @var SchemaDotOrgMappingTypeInterface $mapping_storage */
     $mapping_storage = $this->entityTypeManager()->getStorage('schemadotorg_mapping');
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager()->getStorage('schemadotorg_mapping_type');
 
     $content = [];
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface[] $mapping_types */
+    /** @var SchemaDotOrgMappingTypeInterface[] $mapping_types */
     $mapping_types = $mapping_type_storage->loadMultiple();
     foreach ($mapping_types as $entity_type_id => $mapping_type) {
       $default_schema_types = $mapping_type->get('default_schema_types');
diff --git a/modules/schemadotorg_ui/src/Form/SchemaDotOrgUiMappingForm.php b/modules/schemadotorg_ui/src/Form/SchemaDotOrgUiMappingForm.php
index 7f5fc4c..9502006 100644
--- a/modules/schemadotorg_ui/src/Form/SchemaDotOrgUiMappingForm.php
+++ b/modules/schemadotorg_ui/src/Form/SchemaDotOrgUiMappingForm.php
@@ -2,6 +2,18 @@
 
 namespace Drupal\schemadotorg_ui\Form;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
+use Drupal\Core\Theme\ThemeManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface;
+use Drupal\schemadotorg\SchemaDotOrgNamesInterface;
+use Drupal\schemadotorg\SchemaDotOrgEntityTypeBuilderInterface;
+use Drupal\Core\Entity\Sql\SqlContentEntityStorage;
+use Drupal\field\FieldStorageConfigStorage;
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Field\FieldFilteredMarkup;
@@ -17,7 +29,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
  *
  * @see \Drupal\field_ui\Form\EntityDisplayFormBase
  *
- * @property \Drupal\schemadotorg\SchemaDotOrgMappingInterface $entity
+ * @property SchemaDotOrgMappingInterface $entity
  */
 class SchemaDotOrgUiMappingForm extends EntityForm {
 
@@ -29,49 +41,49 @@ class SchemaDotOrgUiMappingForm extends EntityForm {
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;
 
   /**
    * The theme manager.
    *
-   * @var \Drupal\Core\Theme\ThemeManagerInterface
+   * @var ThemeManagerInterface
    */
   protected $themeManager;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * The Schema.org schema type builder service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface
+   * @var SchemaDotOrgSchemaTypeBuilderInterface
    */
   protected $schemaTypeBuilder;
 
   /**
    * The Schema.org schema names services.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface
+   * @var SchemaDotOrgNamesInterface
    */
   protected $schemaNames;
 
   /**
    * The Schema.org entity type builder.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgEntityTypeBuilderInterface
+   * @var SchemaDotOrgEntityTypeBuilderInterface
    */
   protected $schemaEntityTypeBuilder;
 
   /**
    * The Schema.org UI field manager.
    *
-   * @var \Drupal\schemadotorg_ui\SchemaDotOrgUiFieldManagerInterface
+   * @var SchemaDotOrgUiFieldManagerInterface
    */
   protected $schemaFieldManager;
 
@@ -158,7 +170,7 @@ class SchemaDotOrgUiMappingForm extends EntityForm {
     // Display warning that new Schema.org type is already mapped.
     if ($mapping_storage->isSchemaTypeMapped($target_entity_type_id, $schema_type)
       && !$supports_multiple) {
-      /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $entity */
+      /** @var SchemaDotOrgMappingInterface $entity */
       $entity = $mapping_storage->loadBySchemaType($target_entity_type_id, $schema_type);
       $target_entity = $entity->getTargetEntityBundleEntity();
       $t_args = [
@@ -173,7 +185,7 @@ class SchemaDotOrgUiMappingForm extends EntityForm {
     // Set default Schema.org type for the current target entity type and bundle.
     $schema_type = $schema_type ?: $default_schema_type;
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $entity */
+    /** @var SchemaDotOrgMappingInterface $entity */
     $entity = $mapping_storage->load($target_entity_type_id . '.' . $target_bundle)
       ?: $mapping_storage->create([
         'target_entity_type_id' => $target_entity_type_id,
@@ -239,7 +251,7 @@ class SchemaDotOrgUiMappingForm extends EntityForm {
     if ($mapping_entity->isNewTargetEntityTypeBundle()) {
       $values = $form_state->getValue('entity');
       $bundle_entity_type_id = $mapping_entity->getTargetEntityTypeBundleId();
-      /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $bundle_entity_storage */
+      /** @var SqlContentEntityStorage $bundle_entity_storage */
       $bundle_entity_storage = $this->entityTypeManager->getStorage($bundle_entity_type_id);
       $bundle_entity = $bundle_entity_storage->load($values['id']);
       if ($bundle_entity) {
@@ -256,7 +268,7 @@ class SchemaDotOrgUiMappingForm extends EntityForm {
 
     // Validate the new field names before they are created.
     $entity_type_id = $mapping_entity->getTargetEntityTypeId();
-    /** @var \Drupal\field\FieldStorageConfigStorage $field_storage_config_storage */
+    /** @var FieldStorageConfigStorage $field_storage_config_storage */
     $field_storage_config_storage = $this->entityTypeManager->getStorage('field_storage_config');
     $properties = $form_state->getValue('properties');
     foreach ($properties as $property_name => $property_values) {
@@ -315,7 +327,7 @@ class SchemaDotOrgUiMappingForm extends EntityForm {
         }
       }
 
-      /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $bundle_entity_storage */
+      /** @var SqlContentEntityStorage $bundle_entity_storage */
       $bundle_entity_storage = $this->entityTypeManager->getStorage($bundle_entity_type_id);
       $bundle_entity = $bundle_entity_storage->create($bundle_entity_values);
       $bundle_entity->save();
@@ -1133,11 +1145,10 @@ class SchemaDotOrgUiMappingForm extends EntityForm {
   /* ************************************************************************ */
   // Entity methods.
   /* ************************************************************************ */
-
   /**
    * Gets the Schema.org mapping entity.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingInterface
+   * @return SchemaDotOrgMappingInterface
    *   The Schema.org mapping entity.
    */
   public function getEntity() {
@@ -1147,7 +1158,7 @@ class SchemaDotOrgUiMappingForm extends EntityForm {
   /**
    * Get Schema.org mapping type.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface|null
+   * @return SchemaDotOrgMappingTypeInterface|null
    *   The Schema.org mapping type.
    */
   protected function getMappingType() {
@@ -1157,7 +1168,7 @@ class SchemaDotOrgUiMappingForm extends EntityForm {
   /**
    * Gets the Schema.org mapping storage.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface
+   * @return SchemaDotOrgMappingStorageInterface
    *   The Schema.org mapping storage
    */
   protected function getMappingStorage() {
@@ -1167,7 +1178,7 @@ class SchemaDotOrgUiMappingForm extends EntityForm {
   /**
    * Gets the Schema.org mapping type storage.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface
+   * @return SchemaDotOrgMappingTypeStorageInterface
    *   The Schema.org mapping type storage
    */
   protected function getMappingTypeStorage() {
@@ -1237,7 +1248,7 @@ class SchemaDotOrgUiMappingForm extends EntityForm {
    * @param string $field_name
    *   A field name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   An existing field instance.
    */
   protected function getField($field_name) {
diff --git a/modules/schemadotorg_ui/src/Form/SchemaDotOrgUiMappingTypeSelectForm.php b/modules/schemadotorg_ui/src/Form/SchemaDotOrgUiMappingTypeSelectForm.php
index 43c9a3a..b871b4d 100644
--- a/modules/schemadotorg_ui/src/Form/SchemaDotOrgUiMappingTypeSelectForm.php
+++ b/modules/schemadotorg_ui/src/Form/SchemaDotOrgUiMappingTypeSelectForm.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\schemadotorg_ui\Form;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -15,28 +22,28 @@ class SchemaDotOrgUiMappingTypeSelectForm extends FormBase {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * The Schema.org schema type builder service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface
+   * @var SchemaDotOrgSchemaTypeBuilderInterface
    */
   protected $schemaTypeBuilder;
 
@@ -109,9 +116,9 @@ class SchemaDotOrgUiMappingTypeSelectForm extends FormBase {
     // Description bottom.
     // Display recommended Schema.org types.
     $entity_type_id = $entity_type_id ?? 'node';
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping_type');
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface $mapping_type */
+    /** @var SchemaDotOrgMappingTypeInterface $mapping_type */
     $mapping_type = $mapping_type_storage->load($entity_type_id);
     $recommended_types = $mapping_type->getRecommendedSchemaTypes();
     $items = [];
@@ -164,12 +171,12 @@ class SchemaDotOrgUiMappingTypeSelectForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function validateTypeForm(array &$form, FormStateInterface $form_state) {
     $type = $form_state->getValue('type');
-    /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
+    /** @var SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
     $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
     if (!$schema_type_manager->isThing($type)) {
       $t_args = ['%type' => $type];
@@ -182,7 +189,7 @@ class SchemaDotOrgUiMappingTypeSelectForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public static function submitTypeForm(array &$form, FormStateInterface $form_state) {
@@ -210,11 +217,11 @@ class SchemaDotOrgUiMappingTypeSelectForm extends FormBase {
    *   A renderable array containing the Schema.org type item.
    */
   protected function buildSchemaTypeItem($entity_type_id, $type) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
+    /** @var SchemaDotOrgMappingStorageInterface $mapping_storage */
     $mapping_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping');
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping_type');
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface $mapping_type */
+    /** @var SchemaDotOrgMappingTypeInterface $mapping_type */
     $mapping_type = $mapping_type_storage->load($entity_type_id);
     if ($mapping_storage->isSchemaTypeMapped($entity_type_id, $type)
       && !$mapping_type->supportsMultiple()) {
diff --git a/modules/schemadotorg_ui/src/Plugin/Derivative/SchemaDotOrgUiLocalAction.php b/modules/schemadotorg_ui/src/Plugin/Derivative/SchemaDotOrgUiLocalAction.php
index 39dc817..97abfa6 100644
--- a/modules/schemadotorg_ui/src/Plugin/Derivative/SchemaDotOrgUiLocalAction.php
+++ b/modules/schemadotorg_ui/src/Plugin/Derivative/SchemaDotOrgUiLocalAction.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\schemadotorg_ui\Plugin\Derivative;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -17,7 +19,7 @@ class SchemaDotOrgUiLocalAction extends DeriverBase implements ContainerDeriverI
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -34,7 +36,7 @@ class SchemaDotOrgUiLocalAction extends DeriverBase implements ContainerDeriverI
    * {@inheritdoc}
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping_type');
     $entity_types = $mapping_type_storage->getEntityTypes();
 
diff --git a/modules/schemadotorg_ui/src/Plugin/Derivative/SchemaDotOrgUiLocalTask.php b/modules/schemadotorg_ui/src/Plugin/Derivative/SchemaDotOrgUiLocalTask.php
index 207d0c9..64f3e8f 100644
--- a/modules/schemadotorg_ui/src/Plugin/Derivative/SchemaDotOrgUiLocalTask.php
+++ b/modules/schemadotorg_ui/src/Plugin/Derivative/SchemaDotOrgUiLocalTask.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\schemadotorg_ui\Plugin\Derivative;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -16,7 +18,7 @@ class SchemaDotOrgUiLocalTask extends DeriverBase implements ContainerDeriverInt
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -33,7 +35,7 @@ class SchemaDotOrgUiLocalTask extends DeriverBase implements ContainerDeriverInt
    * {@inheritdoc}
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping_type');
     $entity_types = $mapping_type_storage->getEntityTypes();
 
diff --git a/modules/schemadotorg_ui/src/Plugin/Derivative/SchemaDotOrgUiMenuLink.php b/modules/schemadotorg_ui/src/Plugin/Derivative/SchemaDotOrgUiMenuLink.php
index c7c008a..4ec1804 100644
--- a/modules/schemadotorg_ui/src/Plugin/Derivative/SchemaDotOrgUiMenuLink.php
+++ b/modules/schemadotorg_ui/src/Plugin/Derivative/SchemaDotOrgUiMenuLink.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\schemadotorg_ui\Plugin\Derivative;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -17,7 +19,7 @@ class SchemaDotOrgUiMenuLink extends DeriverBase implements ContainerDeriverInte
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -34,7 +36,7 @@ class SchemaDotOrgUiMenuLink extends DeriverBase implements ContainerDeriverInte
    * {@inheritdoc}
    */
   public function getDerivativeDefinitions($base_plugin_definition) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping_type');
     $entity_types = $mapping_type_storage->getEntityTypes();
 
diff --git a/modules/schemadotorg_ui/src/Routing/SchemaDotOrgRouteSubscriber.php b/modules/schemadotorg_ui/src/Routing/SchemaDotOrgRouteSubscriber.php
index 8ee8486..0d5c729 100644
--- a/modules/schemadotorg_ui/src/Routing/SchemaDotOrgRouteSubscriber.php
+++ b/modules/schemadotorg_ui/src/Routing/SchemaDotOrgRouteSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg_ui\Routing;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\RouteSubscriberBase;
 use Drupal\Core\Routing\RoutingEvents;
@@ -18,14 +19,14 @@ class SchemaDotOrgRouteSubscriber extends RouteSubscriberBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a SchemaDotOrgRouteSubscriber object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -36,7 +37,7 @@ class SchemaDotOrgRouteSubscriber extends RouteSubscriberBase {
    * {@inheritdoc}
    */
   protected function alterRoutes(RouteCollection $collection) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping_type');
     $entity_types = $mapping_type_storage->getEntityTypes();
     foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
diff --git a/modules/schemadotorg_ui/src/SchemaDotOrgUiApi.php b/modules/schemadotorg_ui/src/SchemaDotOrgUiApi.php
index b259fe9..35c19ca 100644
--- a/modules/schemadotorg_ui/src/SchemaDotOrgUiApi.php
+++ b/modules/schemadotorg_ui/src/SchemaDotOrgUiApi.php
@@ -2,6 +2,13 @@
 
 namespace Drupal\schemadotorg_ui;
 
+use Drupal\schemadotorg\SchemaDotOrgInstallerInterface;
+use Drupal\schemadotorg_ui\Form\SchemaDotOrgUiMappingForm;
+use Drupal\field\FieldStorageConfigStorage;
+use Drupal\field\FieldConfigStorage;
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
@@ -22,66 +29,66 @@ class SchemaDotOrgUiApi implements SchemaDotOrgUiApiInterface {
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The form builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The Schema.org installer service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgInstallerInterface
+   * @var SchemaDotOrgInstallerInterface
    */
   protected $schemaInstaller;
 
   /**
    * The Schema.org names service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface
+   * @var SchemaDotOrgNamesInterface
    */
   protected $schemaNames;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * SchemaDotOrgCommands constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Form\FormBuilderInterface $form_builder
+   * @param FormBuilderInterface $form_builder
    *   The form builder.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names
+   * @param SchemaDotOrgNamesInterface $schema_names
    *   The Schema.org names service.
-   * @param \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
+   * @param SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
    *   The Schema.org schema type manager.
    */
   public function __construct(
@@ -147,7 +154,7 @@ class SchemaDotOrgUiApi implements SchemaDotOrgUiApiInterface {
         'type' => $schema_type,
       ]);
 
-      /** @var \Drupal\schemadotorg_ui\Form\SchemaDotOrgUiMappingForm $form_object */
+      /** @var SchemaDotOrgUiMappingForm $form_object */
       $form_object = $this->entityTypeManager->getFormObject('schemadotorg_mapping', 'add');
 
       // Set the Schema.org mapping entity in the form object.
@@ -215,21 +222,21 @@ class SchemaDotOrgUiApi implements SchemaDotOrgUiApiInterface {
   /**
    * Delete fields and field groups associated with Schema.org mapping.
    *
-   * @param \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping
+   * @param SchemaDotOrgMappingInterface $mapping
    *   A Schema.org mapping.
    */
   protected function deleteFields(SchemaDotOrgMappingInterface $mapping) {
     $entity_type_id = $mapping->getTargetEntityTypeId();
     $bundle = $mapping->getTargetBundle();
 
-    /** @var \Drupal\field\FieldStorageConfigStorage $field_storage_config_storage */
+    /** @var FieldStorageConfigStorage $field_storage_config_storage */
     $field_storage_config_storage = $this->entityTypeManager->getStorage('field_storage_config');
-    /** @var \Drupal\field\FieldConfigStorage $field_config_storage */
+    /** @var FieldConfigStorage $field_config_storage */
     $field_config_storage = $this->entityTypeManager->getStorage('field_config');
 
     $base_field_definitions = $this->entityFieldManager->getBaseFieldDefinitions($entity_type_id);
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping_type');
     $mapping_type = $mapping_type_storage->load($entity_type_id);
     $base_field_names = $mapping_type->getBaseFieldNames();
@@ -276,7 +283,7 @@ class SchemaDotOrgUiApi implements SchemaDotOrgUiApiInterface {
   /**
    * Gets the Schema.org mapping type storage.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface
+   * @return SchemaDotOrgMappingTypeStorageInterface
    *   The Schema.org mapping type storage.
    */
   protected function getSchemaMappingTypeStorage() {
@@ -286,7 +293,7 @@ class SchemaDotOrgUiApi implements SchemaDotOrgUiApiInterface {
   /**
    * Gets the Schema.org mapping storage.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface
+   * @return SchemaDotOrgMappingStorageInterface
    *   The Schema.org mapping storage.
    */
   protected function getSchemaMappingStorage() {
@@ -299,7 +306,7 @@ class SchemaDotOrgUiApi implements SchemaDotOrgUiApiInterface {
    * @param string $entity_type_id
    *   The entity type.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface
+   * @return SchemaDotOrgMappingTypeInterface
    *   A Schema.org mapping type.
    */
   protected function loadSchemaMappingType($entity_type_id) {
@@ -314,7 +321,7 @@ class SchemaDotOrgUiApi implements SchemaDotOrgUiApiInterface {
    * @param string $schema_type
    *   The Schema.org type.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingInterface[]
+   * @return SchemaDotOrgMappingInterface[]
    *   Schema.org mapping.
    */
   protected function loadSchemaMappingsByType($entity_type_id, $schema_type) {
diff --git a/modules/schemadotorg_ui/src/SchemaDotOrgUiFieldManager.php b/modules/schemadotorg_ui/src/SchemaDotOrgUiFieldManager.php
index 955933f..79c8632 100644
--- a/modules/schemadotorg_ui/src/SchemaDotOrgUiFieldManager.php
+++ b/modules/schemadotorg_ui/src/SchemaDotOrgUiFieldManager.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\schemadotorg_ui;
 
+use Drupal\Core\Config\Config;
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -21,59 +26,59 @@ class SchemaDotOrgUiFieldManager implements SchemaDotOrgUiFieldManagerInterface
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The Schema.org config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The field type plugin manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypePluginManager;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * Constructs a SchemaDotOrgUiFieldManager object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_plugin_manager
+   * @param FieldTypePluginManagerInterface $field_type_plugin_manager
    *   The field type plugin manager.
-   * @param \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
+   * @param SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
    *   The Schema.org schema type manager.
    */
   public function __construct(
@@ -274,7 +279,7 @@ class SchemaDotOrgUiFieldManager implements SchemaDotOrgUiFieldManagerInterface
     $field_definitions = $this->entityFieldManager->getBaseFieldDefinitions($entity_type_id);
     $options = [];
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface $mapping_type */
+    /** @var SchemaDotOrgMappingTypeInterface $mapping_type */
     $mapping_type = $this->getMappingTypeStorage()->load($entity_type_id);
     $base_field_names = $mapping_type->getBaseFieldNames();
     if ($base_field_names) {
@@ -344,7 +349,7 @@ class SchemaDotOrgUiFieldManager implements SchemaDotOrgUiFieldManagerInterface
    * {@inheritdoc}
    */
   public function getSchemaPropertyFieldTypes($type, $property) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
+    /** @var SchemaDotOrgMappingStorageInterface $mapping_storage */
     $mapping_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping');
     $range_includes = $mapping_storage->getSchemaPropertyRangeIncludes($type, $property);
 
@@ -502,7 +507,7 @@ class SchemaDotOrgUiFieldManager implements SchemaDotOrgUiFieldManagerInterface
         continue;
       }
 
-      /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface[] $schemadotorg_mappings */
+      /** @var SchemaDotOrgMappingInterface[] $schemadotorg_mappings */
       $schemadotorg_mappings = $schemadotorg_mapping_storage->loadMultiple($entity_ids);
 
       // Define the default order for found entity types.
@@ -529,7 +534,7 @@ class SchemaDotOrgUiFieldManager implements SchemaDotOrgUiFieldManagerInterface
   /**
    * Gets Schema.org mapping storage.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface
+   * @return SchemaDotOrgMappingStorageInterface
    *   The Schema.org mapping storage.
    */
   protected function getMappingStorage() {
@@ -539,7 +544,7 @@ class SchemaDotOrgUiFieldManager implements SchemaDotOrgUiFieldManagerInterface
   /**
    * Gets Schema.org mapping type storage.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface
+   * @return SchemaDotOrgMappingTypeStorageInterface
    *   The Schema.org mapping type storage.
    */
   protected function getMappingTypeStorage() {
diff --git a/modules/schemadotorg_ui/src/SchemaDotOrgUiFieldManagerInterface.php b/modules/schemadotorg_ui/src/SchemaDotOrgUiFieldManagerInterface.php
index a86de16..9491dc6 100644
--- a/modules/schemadotorg_ui/src/SchemaDotOrgUiFieldManagerInterface.php
+++ b/modules/schemadotorg_ui/src/SchemaDotOrgUiFieldManagerInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg_ui;
 
+use Drupal\Core\Entity\EntityInterface;
 /**
  * Schema.org UI field manager interface.
  */
@@ -48,7 +49,7 @@ interface SchemaDotOrgUiFieldManagerInterface {
    * @param string $field_name
    *   A field name.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   An existing field instance.
    */
   public function getField($entity_type_id, $field_name);
diff --git a/modules/schemadotorg_ui/tests/src/Functional/SchemaDotOrgUiMappingFormTest.php b/modules/schemadotorg_ui/tests/src/Functional/SchemaDotOrgUiMappingFormTest.php
index 1bb7d0d..2b06b9c 100644
--- a/modules/schemadotorg_ui/tests/src/Functional/SchemaDotOrgUiMappingFormTest.php
+++ b/modules/schemadotorg_ui/tests/src/Functional/SchemaDotOrgUiMappingFormTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\schemadotorg_ui\Functional;
 
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
 use Drupal\paragraphs\Entity\ParagraphsType;
 use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;
 use Drupal\Tests\media\Traits\MediaTypeCreationTrait;
@@ -65,10 +68,10 @@ class SchemaDotOrgUiMappingFormTest extends SchemaDotOrgBrowserTestBase {
 
     $assert_session = $this->assertSession();
 
-    /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
+    /** @var EntityFieldManagerInterface $entity_field_manager */
     $entity_field_manager = \Drupal::service('entity_field.manager');
 
-    /** @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository */
+    /** @var EntityDisplayRepositoryInterface $display_repository */
     $display_repository = \Drupal::service('entity_display.repository');
 
     /* ********************************************************************** */
@@ -99,7 +102,7 @@ class SchemaDotOrgUiMappingFormTest extends SchemaDotOrgBrowserTestBase {
     $assert_session->responseContains('Created <em class="placeholder">Image</em> mapping.');
 
     // Check the 'ImageObject' mapping.
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $contact_point_mapping */
+    /** @var SchemaDotOrgMappingInterface $contact_point_mapping */
     $image_object_mapping = SchemaDotOrgMapping::load('media.image');
     $this->assertEquals('media', $image_object_mapping->getTargetEntityTypeId());
     $this->assertEquals('image', $image_object_mapping->getTargetBundle());
@@ -162,7 +165,7 @@ class SchemaDotOrgUiMappingFormTest extends SchemaDotOrgBrowserTestBase {
     $this->assertEntityArraySubset($expected_form_components, $actual_form_components);
 
     // Check the 'Contact Point' mapping.
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $contact_point_mapping */
+    /** @var SchemaDotOrgMappingInterface $contact_point_mapping */
     $contact_point_mapping = SchemaDotOrgMapping::load('paragraph.contact_point');
     $this->assertEquals('paragraph', $contact_point_mapping->getTargetEntityTypeId());
     $this->assertEquals('contact_point', $contact_point_mapping->getTargetBundle());
@@ -284,7 +287,7 @@ class SchemaDotOrgUiMappingFormTest extends SchemaDotOrgBrowserTestBase {
     $this->assertEntityArraySubset($expected_form_components, $actual_form_components);
 
     // Check the 'Person' mapping.
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $contact_point_mapping */
+    /** @var SchemaDotOrgMappingInterface $contact_point_mapping */
     $person_mapping = SchemaDotOrgMapping::load('user.user');
     $this->assertEquals('user', $person_mapping->getTargetEntityTypeId());
     $this->assertEquals('user', $person_mapping->getTargetBundle());
diff --git a/modules/schemadotorg_ui/tests/src/Functional/SchemaDotOrgUiRouteTest.php b/modules/schemadotorg_ui/tests/src/Functional/SchemaDotOrgUiRouteTest.php
index dc19cbc..70a45f0 100644
--- a/modules/schemadotorg_ui/tests/src/Functional/SchemaDotOrgUiRouteTest.php
+++ b/modules/schemadotorg_ui/tests/src/Functional/SchemaDotOrgUiRouteTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\schemadotorg_ui\Functional;
 
+use Drupal\Core\Menu\MenuLinkManagerInterface;
 use Drupal\Tests\media\Traits\MediaTypeCreationTrait;
 use Drupal\Tests\schemadotorg\Functional\SchemaDotOrgBrowserTestBase;
 
@@ -121,8 +122,7 @@ class SchemaDotOrgUiRouteTest extends SchemaDotOrgBrowserTestBase {
     // Menu links.
     // @see \Drupal\schemadotorg_ui\Plugin\Derivative\SchemaDotOrgUiMenuLink
     /* ********************************************************************** */
-
-    /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
+    /** @var MenuLinkManagerInterface $menu_link_manager */
     $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
 
     // Check that node 'Add Schema.org type' menu link exists.
diff --git a/modules/schemadotorg_ui/tests/src/Kernel/SchemaDotOrgUiApiTest.php b/modules/schemadotorg_ui/tests/src/Kernel/SchemaDotOrgUiApiTest.php
index fa77627..cb1cdba 100644
--- a/modules/schemadotorg_ui/tests/src/Kernel/SchemaDotOrgUiApiTest.php
+++ b/modules/schemadotorg_ui/tests/src/Kernel/SchemaDotOrgUiApiTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\schemadotorg_ui\Kernel;
 
+use Drupal\schemadotorg_ui\SchemaDotOrgUiApiInterface;
+use Drupal\schemadotorg\SchemaDotOrgInstallerInterface;
 use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;
 use Drupal\Tests\schemadotorg\Kernel\SchemaDotOrgKernelTestBase;
 
@@ -36,14 +38,14 @@ class SchemaDotOrgUiApiTest extends SchemaDotOrgKernelTestBase {
   /**
    * The Schema.org UI API service.
    *
-   * @var \Drupal\schemadotorg_ui\SchemaDotOrgUiApiInterface
+   * @var SchemaDotOrgUiApiInterface
    */
   protected $api;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('schemadotorg_mapping');
@@ -54,7 +56,7 @@ class SchemaDotOrgUiApiTest extends SchemaDotOrgKernelTestBase {
     $this->installSchema('schemadotorg', ['schemadotorg_types', 'schemadotorg_properties']);
 
     // Import CSV data into the Schema.org type and properties tables.
-    /** @var \Drupal\schemadotorg\SchemaDotOrgInstallerInterface $installer */
+    /** @var SchemaDotOrgInstallerInterface $installer */
     $installer = $this->container->get('schemadotorg.installer');
     $installer->importTables();
 
diff --git a/modules/schemadotorg_ui/tests/src/Kernel/SchemaDotOrgUiFieldManagerTest.php b/modules/schemadotorg_ui/tests/src/Kernel/SchemaDotOrgUiFieldManagerTest.php
index a19d7e8..2105a9c 100644
--- a/modules/schemadotorg_ui/tests/src/Kernel/SchemaDotOrgUiFieldManagerTest.php
+++ b/modules/schemadotorg_ui/tests/src/Kernel/SchemaDotOrgUiFieldManagerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\schemadotorg_ui\Kernel;
 
+use Drupal\schemadotorg_ui\SchemaDotOrgUiFieldManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgInstallerInterface;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\node\Entity\NodeType;
@@ -42,21 +44,21 @@ class SchemaDotOrgUiFieldManagerTest extends SchemaDotOrgKernelTestBase {
   /**
    * The Schema.org UI field manager.
    *
-   * @var \Drupal\schemadotorg_ui\SchemaDotOrgUiFieldManagerInterface
+   * @var SchemaDotOrgUiFieldManagerInterface
    */
   protected $fieldManager;
 
   /**
    * A node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Install the Schema.org mapping entity.
@@ -74,7 +76,7 @@ class SchemaDotOrgUiFieldManagerTest extends SchemaDotOrgKernelTestBase {
     $this->installSchema('schemadotorg', ['schemadotorg_types', 'schemadotorg_properties']);
 
     // Import CSV data into the Schema.org type and properties tables.
-    /** @var \Drupal\schemadotorg\SchemaDotOrgInstallerInterface $installer */
+    /** @var SchemaDotOrgInstallerInterface $installer */
     $installer = $this->container->get('schemadotorg.installer');
     $installer->importTables();
 
diff --git a/schemadotorg.install b/schemadotorg.install
index ec65b09..b3e18b9 100644
--- a/schemadotorg.install
+++ b/schemadotorg.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\schemadotorg\SchemaDotOrgInstallerInterface;
 /**
  * @file
  * Install, update and uninstall functions for the Schema.org module.
@@ -9,7 +10,7 @@
  * Implements hook_install().
  */
 function schemadotorg_install() {
-  /** @var \Drupal\schemadotorg\SchemaDotOrgInstallerInterface $installer */
+  /** @var SchemaDotOrgInstallerInterface $installer */
   $installer = \Drupal::service('schemadotorg.installer');
   $installer->install();
 }
@@ -18,7 +19,7 @@ function schemadotorg_install() {
  * Implements hook_schema().
  */
 function schemadotorg_schema() {
-  /** @var \Drupal\schemadotorg\SchemaDotOrgInstallerInterface $installer */
+  /** @var SchemaDotOrgInstallerInterface $installer */
   $installer = \Drupal::service('schemadotorg.installer');
   return $installer->schema();
 }
diff --git a/schemadotorg.module b/schemadotorg.module
index 344a469..b9ce4fd 100644
--- a/schemadotorg.module
+++ b/schemadotorg.module
@@ -1,5 +1,11 @@
 <?php
 
+use Drupal\schemadotorg\SchemaDotOrgNamesInterface;
+use Drupal\field\FieldConfigInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
+use Drupal\field_ui\Form\FieldConfigEditForm;
+use Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface;
+use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 /**
  * @file
  * Primary module hooks for Schema.org module.
@@ -168,12 +174,12 @@ function schemadotorg_field_config_delete(EntityInterface $entity) {
   $bundle = $entity->getTargetBundle();
   $entity_type = $entity->getTargetEntityTypeId();
 
-  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
+  /** @var SchemaDotOrgNamesInterface $schema_names */
   $schema_names = \Drupal::service('schemadotorg.names');
 
-  /** @var \Drupal\field\FieldConfigInterface $entity */
+  /** @var FieldConfigInterface $entity */
   if ($entity->getName() === $schema_names->getSubtypeFieldName($bundle)) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping */
+    /** @var SchemaDotOrgMappingInterface $mapping */
     $mapping = SchemaDotOrgMapping::load("$entity_type.$bundle");
     if ($mapping) {
       $mapping->setSchemaSubtype(FALSE)->save();
@@ -193,9 +199,9 @@ function schemadotorg_form_field_config_edit_form_alter(&$form, FormStateInterfa
     return;
   }
 
-  /** @var \Drupal\field_ui\Form\FieldConfigEditForm $form_object */
+  /** @var FieldConfigEditForm $form_object */
   $form_object = $form_state->getFormObject();
-  /** @var \Drupal\field\FieldConfigInterface $field */
+  /** @var FieldConfigInterface $field */
   $field = $form_object->getEntity();
 
   // Check the field type is an entity reference field.
@@ -204,7 +210,7 @@ function schemadotorg_form_field_config_edit_form_alter(&$form, FormStateInterfa
   }
 
   // Get the field's related Schema.org mapping.
-  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
+  /** @var SchemaDotOrgMappingStorageInterface $mapping_storage */
   $mapping_storage = \Drupal::entityTypeManager()->getStorage('schemadotorg_mapping');
   $entity_type_id = $field->getTargetEntityTypeId();
   $bundle = $field->getTargetBundle();
@@ -235,7 +241,7 @@ function schemadotorg_form_field_config_edit_form_alter(&$form, FormStateInterfa
       ? t('Paragraph types')
       : \Drupal::entityTypeManager()->getDefinition($target_type)->getPluralLabel();
 
-    /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info */
+    /** @var EntityTypeBundleInfoInterface $bundle_info */
     $entity_type_bundle_info = \Drupal::service('entity_type.bundle.info');
     $bundle_info = $entity_type_bundle_info->getBundleInfo($target_type);
     $bundles = [];
diff --git a/src/Commands/SchemaDotOrgCommands.php b/src/Commands/SchemaDotOrgCommands.php
index 6844824..f84a12a 100644
--- a/src/Commands/SchemaDotOrgCommands.php
+++ b/src/Commands/SchemaDotOrgCommands.php
@@ -16,32 +16,32 @@ class SchemaDotOrgCommands extends DrushCommands {
   /**
    * The Schema.org installer service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgInstallerInterface
+   * @var SchemaDotOrgInstallerInterface
    */
   protected $schemaInstaller;
 
   /**
    * The Schema.org config manager service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgConfigManagerInterface
+   * @var SchemaDotOrgConfigManagerInterface
    */
   protected $schemaConfigManager;
 
   /**
    * The Schema.org entity relationship manager service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgEntityRelationshipManagerInterface
+   * @var SchemaDotOrgEntityRelationshipManagerInterface
    */
   protected $schemaEntityRelationshipManager;
 
   /**
    * SchemaDotOrgCommands constructor.
    *
-   * @param \Drupal\schemadotorg\SchemaDotOrgInstallerInterface $schema_installer
+   * @param SchemaDotOrgInstallerInterface $schema_installer
    *   The Schema.org installer service.
-   * @param \Drupal\schemadotorg\SchemaDotOrgConfigManagerInterface $schema_config_manager
+   * @param SchemaDotOrgConfigManagerInterface $schema_config_manager
    *   The Schema.org schema config manager.
-   * @param \Drupal\schemadotorg\SchemaDotOrgEntityRelationshipManagerInterface $schema_entity_relationship_manager
+   * @param SchemaDotOrgEntityRelationshipManagerInterface $schema_entity_relationship_manager
    *   The Schema.org schema entity relationship manager.
    */
   public function __construct(
diff --git a/src/Controller/SchemaDotOrgAutocompleteController.php b/src/Controller/SchemaDotOrgAutocompleteController.php
index 4875d71..81e6d6c 100644
--- a/src/Controller/SchemaDotOrgAutocompleteController.php
+++ b/src/Controller/SchemaDotOrgAutocompleteController.php
@@ -17,23 +17,23 @@ class SchemaDotOrgAutocompleteController extends ControllerBase {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * The controller constructor.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
+   * @param SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
    *   The Schema.org schema type manager.
    */
   public function __construct(Connection $database, SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager) {
@@ -54,12 +54,12 @@ class SchemaDotOrgAutocompleteController extends ControllerBase {
   /**
    * Returns response for Schema.org (types or properties) autocomplete request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The current request object containing the search string.
    * @param string $table
    *   Types or properties table name.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   A JSON response containing the autocomplete suggestions.
    */
   public function autocomplete(Request $request, $table) {
diff --git a/src/Element/SchemaDotOrgSettings.php b/src/Element/SchemaDotOrgSettings.php
index b8eb909..8752ce4 100644
--- a/src/Element/SchemaDotOrgSettings.php
+++ b/src/Element/SchemaDotOrgSettings.php
@@ -228,7 +228,7 @@ class SchemaDotOrgSettings extends Textarea {
    *
    * @param array $element
    *   A Schema.org settings form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Entity/SchemaDotOrgMapping.php b/src/Entity/SchemaDotOrgMapping.php
index 6573b4e..c00f4ba 100644
--- a/src/Entity/SchemaDotOrgMapping.php
+++ b/src/Entity/SchemaDotOrgMapping.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg\Entity;
 
+use Drupal\schemadotorg\SchemaDotOrgNamesInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
@@ -240,7 +241,7 @@ class SchemaDotOrgMapping extends ConfigEntityBase implements SchemaDotOrgMappin
     $properties = $this->getSchemaProperties();
     if ($this->supportsSubtyping()) {
       $bundle = $this->getTargetBundle();
-      /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
+      /** @var SchemaDotOrgNamesInterface $schema_names */
       $schema_names = \Drupal::service('schemadotorg.names');
       $properties[$schema_names->getSubtypeFieldName($bundle)] = 'subtype';
     }
@@ -304,7 +305,7 @@ class SchemaDotOrgMapping extends ConfigEntityBase implements SchemaDotOrgMappin
     $changed = parent::onDependencyRemoval($dependencies);
     foreach ($dependencies['config'] as $entity) {
       if ($entity->getEntityTypeId() === 'field_config') {
-        /** @var \Drupal\field\FieldConfigInterface $entity */
+        /** @var FieldConfigInterface $entity */
         // Remove properties for fields that are being deleted.
         if ($this->getSchemaPropertyMapping($entity->getName())) {
           $this->removeSchemaProperty($entity->getName());
diff --git a/src/Entity/SchemaDotOrgMappingType.php b/src/Entity/SchemaDotOrgMappingType.php
index a4291b9..cc7c991 100644
--- a/src/Entity/SchemaDotOrgMappingType.php
+++ b/src/Entity/SchemaDotOrgMappingType.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg\Entity;
 
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
@@ -186,7 +187,7 @@ class SchemaDotOrgMappingType extends ConfigEntityBase implements SchemaDotOrgMa
    * {@inheritdoc}
    */
   public function getDefaultSchemaTypeProperties($schema_type) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
+    /** @var SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
     $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
 
     // Get global default Schema.org type properties.
diff --git a/src/Form/SchemaDotOrgMappingForm.php b/src/Form/SchemaDotOrgMappingForm.php
index bdcaed9..dcea606 100644
--- a/src/Form/SchemaDotOrgMappingForm.php
+++ b/src/Form/SchemaDotOrgMappingForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\schemadotorg\Form;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
+use Drupal\Core\Entity\EntityFieldManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -9,28 +13,28 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 /**
  * Schema.org mapping form.
  *
- * @property \Drupal\schemadotorg\SchemaDotOrgMappingInterface $entity
+ * @property SchemaDotOrgMappingInterface $entity
  */
 class SchemaDotOrgMappingForm extends EntityForm {
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * The Schema.org schema type builder service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface
+   * @var SchemaDotOrgSchemaTypeBuilderInterface
    */
   protected $schemaTypeBuilder;
 
@@ -49,7 +53,7 @@ class SchemaDotOrgMappingForm extends EntityForm {
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $entity */
+    /** @var SchemaDotOrgMappingInterface $entity */
     $entity = $this->getEntity();
 
     $form['#title'] = $this->t('Schema.org mapping');
diff --git a/src/Form/SchemaDotOrgMappingTypeForm.php b/src/Form/SchemaDotOrgMappingTypeForm.php
index 1729f2e..59bdc48 100644
--- a/src/Form/SchemaDotOrgMappingTypeForm.php
+++ b/src/Form/SchemaDotOrgMappingTypeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg\Form;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface;
 use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -10,7 +11,7 @@ use Drupal\schemadotorg\Element\SchemaDotOrgSettings;
 /**
  * Schema.org mapping type form.
  *
- * @property \Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface $entity
+ * @property SchemaDotOrgMappingTypeInterface $entity
  */
 class SchemaDotOrgMappingTypeForm extends EntityForm {
 
@@ -20,7 +21,7 @@ class SchemaDotOrgMappingTypeForm extends EntityForm {
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface $entity */
+    /** @var SchemaDotOrgMappingTypeInterface $entity */
     $entity = $this->getEntity();
 
     if ($entity->isNew()) {
diff --git a/src/Form/SchemaDotOrgSettingsNamesForm.php b/src/Form/SchemaDotOrgSettingsNamesForm.php
index a9917eb..77caa9d 100644
--- a/src/Form/SchemaDotOrgSettingsNamesForm.php
+++ b/src/Form/SchemaDotOrgSettingsNamesForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg\Form;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\schemadotorg\Element\SchemaDotOrgSettings;
@@ -15,7 +16,7 @@ class SchemaDotOrgSettingsNamesForm extends ConfigFormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/Form/SchemaDotOrgSettingsPropertiesForm.php b/src/Form/SchemaDotOrgSettingsPropertiesForm.php
index 741f250..8bb2d98 100644
--- a/src/Form/SchemaDotOrgSettingsPropertiesForm.php
+++ b/src/Form/SchemaDotOrgSettingsPropertiesForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg\Form;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\schemadotorg\Element\SchemaDotOrgSettings;
@@ -15,7 +16,7 @@ class SchemaDotOrgSettingsPropertiesForm extends ConfigFormBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/SchemaDotOrgConfigEntityListBuilderBase.php b/src/SchemaDotOrgConfigEntityListBuilderBase.php
index 80200ee..da2a064 100644
--- a/src/SchemaDotOrgConfigEntityListBuilderBase.php
+++ b/src/SchemaDotOrgConfigEntityListBuilderBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Url;
@@ -15,7 +16,7 @@ abstract class SchemaDotOrgConfigEntityListBuilderBase extends ConfigEntityListB
   /**
    * The current request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
diff --git a/src/SchemaDotOrgConfigManager.php b/src/SchemaDotOrgConfigManager.php
index 5364180..00a268b 100644
--- a/src/SchemaDotOrgConfigManager.php
+++ b/src/SchemaDotOrgConfigManager.php
@@ -12,23 +12,23 @@ class SchemaDotOrgConfigManager implements SchemaDotOrgConfigManagerInterface {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * SchemaDotOrgConfig constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration object factory.
-   * @param \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
+   * @param SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
    *   The Schema.org schema type manager.
    */
   public function __construct(ConfigFactoryInterface $config_factory, SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager) {
diff --git a/src/SchemaDotOrgEntityRelationshipManager.php b/src/SchemaDotOrgEntityRelationshipManager.php
index 6c83ff8..e96aaa1 100644
--- a/src/SchemaDotOrgEntityRelationshipManager.php
+++ b/src/SchemaDotOrgEntityRelationshipManager.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\schemadotorg;
 
+use Drupal\field\FieldConfigStorage;
+use Drupal\Core\Field\FieldConfigInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 
@@ -14,23 +16,23 @@ class SchemaDotOrgEntityRelationshipManager implements SchemaDotOrgEntityRelatio
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * SchemaDotOrgEntityRelationships constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
+   * @param SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
    *   The Schema.org schema type manager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager) {
@@ -42,10 +44,10 @@ class SchemaDotOrgEntityRelationshipManager implements SchemaDotOrgEntityRelatio
    * {@inheritdoc}
    */
   public function repair() {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
+    /** @var SchemaDotOrgMappingStorageInterface $mapping_storage */
     $mapping_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping');
 
-    /** @var \Drupal\field\FieldConfigStorage $field_storage */
+    /** @var FieldConfigStorage $field_storage */
     $field_storage = $this->entityTypeManager->getStorage('field_config');
 
     $entity_ids = $field_storage->getQuery()
@@ -55,14 +57,14 @@ class SchemaDotOrgEntityRelationshipManager implements SchemaDotOrgEntityRelatio
 
     $messages = [];
 
-    /** @var \Drupal\Core\Field\FieldConfigInterface[] $fields */
+    /** @var FieldConfigInterface[] $fields */
     $fields = $field_storage->loadMultiple($entity_ids);
     foreach ($fields as $field) {
       $field_name = $field->getName();
       $field_type = $field->getType();
       $entity_type_id = $field->getTargetEntityTypeId();
       $bundle = $field->getTargetBundle();
-      /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping */
+      /** @var SchemaDotOrgMappingInterface $mapping */
       $mapping = $mapping_storage->load("$entity_type_id.$bundle");
       if (!$mapping) {
         continue;
diff --git a/src/SchemaDotOrgEntityTypeBuilder.php b/src/SchemaDotOrgEntityTypeBuilder.php
index c389e86..77b0c72 100644
--- a/src/SchemaDotOrgEntityTypeBuilder.php
+++ b/src/SchemaDotOrgEntityTypeBuilder.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\schemadotorg;
 
+use Drupal\field\FieldStorageConfigInterface;
+use Drupal\field\FieldConfigStorage;
+use Drupal\field\FieldConfigInterface;
 use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
@@ -19,59 +22,59 @@ class SchemaDotOrgEntityTypeBuilder implements SchemaDotOrgEntityTypeBuilderInte
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The field type plugin manager.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   protected $fieldTypePluginManager;
 
   /**
    * The Schema.org names service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface
+   * @var SchemaDotOrgNamesInterface
    */
   protected $schemaNames;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * Constructs a SchemaDotOrgBuilder object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $display_repository
+   * @param EntityDisplayRepositoryInterface $display_repository
    *   The entity display repository.
-   * @param \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_plugin_manager
+   * @param FieldTypePluginManagerInterface $field_type_plugin_manager
    *   The field type plugin manager.
-   * @param \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names
+   * @param SchemaDotOrgNamesInterface $schema_names
    *   The Schema.org names service.
-   * @param \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
+   * @param SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
    *   The Schema.org schema type manager.
    */
   public function __construct(
@@ -112,7 +115,7 @@ class SchemaDotOrgEntityTypeBuilder implements SchemaDotOrgEntityTypeBuilderInte
       'schema_property' => NULL,
     ];
 
-    /** @var \Drupal\field\FieldStorageConfigInterface $field_storage_config */
+    /** @var FieldStorageConfigInterface $field_storage_config */
     $field_storage_config = $this->entityTypeManager
       ->getStorage('field_storage_config')
       ->load($entity_type_id . '.' . $field['machine_name']);
@@ -295,7 +298,7 @@ class SchemaDotOrgEntityTypeBuilder implements SchemaDotOrgEntityTypeBuilderInte
   /**
    * Set entity display component.
    *
-   * @param \Drupal\Core\Entity\Display\EntityDisplayInterface $display
+   * @param EntityDisplayInterface $display
    *   An entity display.
    * @param string $field_name
    *   The field name to be set.
@@ -348,7 +351,7 @@ class SchemaDotOrgEntityTypeBuilder implements SchemaDotOrgEntityTypeBuilderInte
   /**
    * Set entity display field weight for a Schema.org property.
    *
-   * @param \Drupal\Core\Entity\Display\EntityDisplayInterface $display
+   * @param EntityDisplayInterface $display
    *   An entity display.
    * @param string $field_name
    *   The field name to be set.
@@ -363,7 +366,7 @@ class SchemaDotOrgEntityTypeBuilder implements SchemaDotOrgEntityTypeBuilderInte
 
     $entity_type_id = $display->getTargetEntityTypeId();
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping_type');
     $mapping_type = $mapping_type_storage->load($entity_type_id);
     $default_field_weights = $mapping_type->getDefaultFieldWeights();
@@ -401,7 +404,7 @@ class SchemaDotOrgEntityTypeBuilder implements SchemaDotOrgEntityTypeBuilderInte
   /**
    * Set entity display field groups for a Schema.org property.
    *
-   * @param \Drupal\Core\Entity\Display\EntityDisplayInterface $display
+   * @param EntityDisplayInterface $display
    *   An entity display.
    * @param string $field_name
    *   The field name to be set.
@@ -422,9 +425,9 @@ class SchemaDotOrgEntityTypeBuilder implements SchemaDotOrgEntityTypeBuilderInte
 
     $entity_type_id = $display->getTargetEntityTypeId();
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
+    /** @var SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
     $mapping_type_storage = $this->entityTypeManager->getStorage('schemadotorg_mapping_type');
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeInterface $mapping_type */
+    /** @var SchemaDotOrgMappingTypeInterface $mapping_type */
     $mapping_type = $mapping_type_storage->load($entity_type_id);
     $default_field_groups = $mapping_type->getDefaultFieldGroups();
     $default_label_suffix = $mapping_type->getDefaultFieldGroupLabelSuffix();
@@ -596,7 +599,7 @@ class SchemaDotOrgEntityTypeBuilder implements SchemaDotOrgEntityTypeBuilderInte
     $field_name = $field_values['field_name'];
 
     // Look for existing field instance and copy field, form, and view settings.
-    /** @var \Drupal\field\FieldConfigStorage $field_config_storage */
+    /** @var FieldConfigStorage $field_config_storage */
     $field_config_storage = $this->entityTypeManager->getStorage('field_config');
     $existing_field_configs = $field_config_storage->loadByProperties([
       'entity_type' => $entity_type_id,
@@ -606,7 +609,7 @@ class SchemaDotOrgEntityTypeBuilder implements SchemaDotOrgEntityTypeBuilderInte
       return;
     }
 
-    /** @var \Drupal\field\FieldConfigInterface $existing_field_config */
+    /** @var FieldConfigInterface $existing_field_config */
     $existing_field_config = reset($existing_field_configs);
     $existing_bundle = $existing_field_config->getTargetBundle();
 
@@ -675,7 +678,7 @@ class SchemaDotOrgEntityTypeBuilder implements SchemaDotOrgEntityTypeBuilderInte
     switch ($field_storage_values['type']) {
       case 'entity_reference':
       case 'entity_reference_revisions':
-        /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
+        /** @var SchemaDotOrgMappingStorageInterface $mapping_storage */
         $mapping_storage = $this->entityTypeManager
           ->getStorage('schemadotorg_mapping');
 
diff --git a/src/SchemaDotOrgInstaller.php b/src/SchemaDotOrgInstaller.php
index 195e2b6..ef27433 100644
--- a/src/SchemaDotOrgInstaller.php
+++ b/src/SchemaDotOrgInstaller.php
@@ -18,41 +18,41 @@ class SchemaDotOrgInstaller implements SchemaDotOrgInstallerInterface {
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Schema.org names service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface
+   * @var SchemaDotOrgNamesInterface
    */
   protected $schemaNames;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * Constructs a SchemaDotOrgInstaller object.
    *
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names
+   * @param SchemaDotOrgNamesInterface $schema_names
    *   The Schema.org names service.
-   * @param \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
+   * @param SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
    *   The Schema.org schema type manager.
    */
   public function __construct(
diff --git a/src/SchemaDotOrgMappingInterface.php b/src/SchemaDotOrgMappingInterface.php
index 367a516..eba2ab1 100644
--- a/src/SchemaDotOrgMappingInterface.php
+++ b/src/SchemaDotOrgMappingInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\schemadotorg;
 
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 
 /**
@@ -40,7 +42,7 @@ interface SchemaDotOrgMappingInterface extends ConfigEntityInterface {
   /**
    * Gets the entity type definition. (i.e. node annotation)
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface|null
+   * @return EntityTypeInterface|null
    *   The entity type definition.
    */
   public function getTargetEntityTypeDefinition();
@@ -56,7 +58,7 @@ interface SchemaDotOrgMappingInterface extends ConfigEntityInterface {
   /**
    * Gets the entity type's bundle definition. (i.e. node_type annotation)
    *
-   * @return \Drupal\Core\Entity\EntityTypeInterface|null
+   * @return EntityTypeInterface|null
    *   Get the entity type's bundle definition.
    */
   public function getTargetEntityTypeBundleDefinition();
@@ -64,7 +66,7 @@ interface SchemaDotOrgMappingInterface extends ConfigEntityInterface {
   /**
    * Gets the bundle entity type. (i.e. node_type:page)
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityBundleBase|null
+   * @return ConfigEntityBundleBase|null
    *   The bundle entity type.
    */
   public function getTargetEntityBundleEntity();
diff --git a/src/SchemaDotOrgMappingListBuilder.php b/src/SchemaDotOrgMappingListBuilder.php
index 4c98e34..20e0efe 100644
--- a/src/SchemaDotOrgMappingListBuilder.php
+++ b/src/SchemaDotOrgMappingListBuilder.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\schemadotorg;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\field\FieldConfigStorage;
+use Drupal\field\FieldConfigInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,7 +17,7 @@ class SchemaDotOrgMappingListBuilder extends SchemaDotOrgConfigEntityListBuilder
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -77,8 +80,7 @@ class SchemaDotOrgMappingListBuilder extends SchemaDotOrgConfigEntityListBuilder
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $entity */
-
+    /** @var SchemaDotOrgMappingInterface $entity */
     $target_entity_type_definition = $entity->getTargetEntityTypeDefinition();
     $target_entity_type_bundle_definition = $entity->getTargetEntityTypeBundleDefinition();
     $row['entity_type'] = $target_entity_type_bundle_definition
@@ -107,7 +109,7 @@ class SchemaDotOrgMappingListBuilder extends SchemaDotOrgConfigEntityListBuilder
   /**
    * Build the Schema.org mapping properties range includes relationships.
    *
-   * @param \Drupal\schemadotorg\SchemaDotOrgMappingInterface $entity
+   * @param SchemaDotOrgMappingInterface $entity
    *   The Schema.org mapping.
    *
    * @return array[]
@@ -115,7 +117,7 @@ class SchemaDotOrgMappingListBuilder extends SchemaDotOrgConfigEntityListBuilder
    *   includes relationships.
    */
   protected function buildSchemaRelationships(SchemaDotOrgMappingInterface $entity) {
-    /** @var \Drupal\field\FieldConfigStorage $field_config_storage */
+    /** @var FieldConfigStorage $field_config_storage */
     $field_config_storage = $this->entityTypeManager->getStorage('field_config');
 
     $properties = $entity->getSchemaProperties();
@@ -125,7 +127,7 @@ class SchemaDotOrgMappingListBuilder extends SchemaDotOrgConfigEntityListBuilder
     $relationships = [];
     foreach ($properties as $field_name => $property) {
       $field_config_id = $target_entity_type_id . '.' . $target_bundle . '.' . $field_name;
-      /** @var \Drupal\field\FieldConfigInterface $field_config */
+      /** @var FieldConfigInterface $field_config */
       $field_config = $field_config_storage->load($field_config_id);
       if (!$field_config) {
         continue;
@@ -151,7 +153,7 @@ class SchemaDotOrgMappingListBuilder extends SchemaDotOrgConfigEntityListBuilder
         continue;
       }
 
-      /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface[] $mappings */
+      /** @var SchemaDotOrgMappingInterface[] $mappings */
       $mappings = $this->getStorage()->loadMultiple($mapping_ids);
       $schema_types = [];
       foreach ($mappings as $mapping) {
diff --git a/src/SchemaDotOrgMappingStorage.php b/src/SchemaDotOrgMappingStorage.php
index 29a8e14..bc95289 100644
--- a/src/SchemaDotOrgMappingStorage.php
+++ b/src/SchemaDotOrgMappingStorage.php
@@ -17,14 +17,14 @@ class SchemaDotOrgMappingStorage extends ConfigEntityStorage implements SchemaDo
   /**
    * The Schema.org names service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface
+   * @var SchemaDotOrgNamesInterface
    */
   protected $schemaNames;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
@@ -59,7 +59,7 @@ class SchemaDotOrgMappingStorage extends ConfigEntityStorage implements SchemaDo
    * {@inheritdoc}
    */
   public function getSchemaType($entity_type_id, $bundle) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $entity */
+    /** @var SchemaDotOrgMappingInterface $entity */
     $entity = $this->load($entity_type_id . '.' . $bundle);
     if (!$entity) {
       return NULL;
@@ -71,7 +71,7 @@ class SchemaDotOrgMappingStorage extends ConfigEntityStorage implements SchemaDo
    * {@inheritdoc}
    */
   public function getSchemaPropertyName($entity_type_id, $bundle, $field_name) {
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $entity */
+    /** @var SchemaDotOrgMappingInterface $entity */
     $entity = $this->load($entity_type_id . '.' . $bundle);
     if (!$entity) {
       return NULL;
@@ -116,7 +116,7 @@ class SchemaDotOrgMappingStorage extends ConfigEntityStorage implements SchemaDo
       return [];
     }
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface[] $entities */
+    /** @var SchemaDotOrgMappingInterface[] $entities */
     $entities = $this->loadMultiple($entity_ids);
     $target_bundles = [];
     foreach ($entities as $entity) {
diff --git a/src/SchemaDotOrgMappingStorageInterface.php b/src/SchemaDotOrgMappingStorageInterface.php
index 717cc2f..64fae75 100644
--- a/src/SchemaDotOrgMappingStorageInterface.php
+++ b/src/SchemaDotOrgMappingStorageInterface.php
@@ -14,7 +14,7 @@ interface SchemaDotOrgMappingStorageInterface extends ConfigEntityStorageInterfa
   /**
    * Determine if an entity is mapped to a Schema.org type.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return bool
@@ -125,7 +125,7 @@ interface SchemaDotOrgMappingStorageInterface extends ConfigEntityStorageInterfa
    * @param string $type
    *   The Schema.org type.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingInterface|null
+   * @return SchemaDotOrgMappingInterface|null
    *   A Schema.org mapping entity.
    */
   public function loadBySchemaType($entity_type_id, $type);
@@ -133,10 +133,10 @@ interface SchemaDotOrgMappingStorageInterface extends ConfigEntityStorageInterfa
   /**
    * Load by entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingInterface|null
+   * @return SchemaDotOrgMappingInterface|null
    *   A Schema.org mapping entity.
    */
   public function loadByEntity(EntityInterface $entity);
@@ -144,7 +144,7 @@ interface SchemaDotOrgMappingStorageInterface extends ConfigEntityStorageInterfa
   /**
    * Get the Schema.org subtype for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return string
diff --git a/src/SchemaDotOrgMappingTypeInterface.php b/src/SchemaDotOrgMappingTypeInterface.php
index 8c3172e..949beac 100644
--- a/src/SchemaDotOrgMappingTypeInterface.php
+++ b/src/SchemaDotOrgMappingTypeInterface.php
@@ -88,7 +88,7 @@ interface SchemaDotOrgMappingTypeInterface extends ConfigEntityInterface {
   /**
    * Gets default field group format type.
    *
-   * @param \Drupal\Core\Entity\Display\EntityDisplayInterface $display
+   * @param EntityDisplayInterface $display
    *   The entity display.
    *
    * @return string
@@ -99,7 +99,7 @@ interface SchemaDotOrgMappingTypeInterface extends ConfigEntityInterface {
   /**
    * Gets default field group format settings.
    *
-   * @param \Drupal\Core\Entity\Display\EntityDisplayInterface $display
+   * @param EntityDisplayInterface $display
    *   The entity display.
    *
    * @return array
diff --git a/src/SchemaDotOrgMappingTypeListBuilder.php b/src/SchemaDotOrgMappingTypeListBuilder.php
index a027245..4323651 100644
--- a/src/SchemaDotOrgMappingTypeListBuilder.php
+++ b/src/SchemaDotOrgMappingTypeListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -14,7 +15,7 @@ class SchemaDotOrgMappingTypeListBuilder extends SchemaDotOrgConfigEntityListBui
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
diff --git a/src/SchemaDotOrgMappingTypeStorage.php b/src/SchemaDotOrgMappingTypeStorage.php
index 0013b5f..c8f43b0 100644
--- a/src/SchemaDotOrgMappingTypeStorage.php
+++ b/src/SchemaDotOrgMappingTypeStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg;
 
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorage;
 use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
@@ -16,14 +17,14 @@ class SchemaDotOrgMappingTypeStorage extends ConfigEntityStorage implements Sche
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
diff --git a/src/SchemaDotOrgMappingTypeStorageInterface.php b/src/SchemaDotOrgMappingTypeStorageInterface.php
index 74004f9..b8d0c78 100644
--- a/src/SchemaDotOrgMappingTypeStorageInterface.php
+++ b/src/SchemaDotOrgMappingTypeStorageInterface.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\schemadotorg;
 
+use Drupal\Core\Entity\ContentEntityTypeInterface;
+use Drupal\Core\Config\Entity\ConfigEntityTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityStorageInterface;
 use Drupal\Core\Config\Entity\ImportableEntityStorageInterface;
 use Drupal\Core\Entity\Display\EntityDisplayInterface;
@@ -30,7 +32,7 @@ interface SchemaDotOrgMappingTypeStorageInterface extends ConfigEntityStorageInt
   /**
    * Get entity type bundles. (i.e node)
    *
-   * @return \Drupal\Core\Entity\ContentEntityTypeInterface[]
+   * @return ContentEntityTypeInterface[]
    *   Entity type bundles.
    */
   public function getEntityTypeBundles();
@@ -38,7 +40,7 @@ interface SchemaDotOrgMappingTypeStorageInterface extends ConfigEntityStorageInt
   /**
    * Get entity type bundle definitions. (i.e node_type)
    *
-   * @return \Drupal\Core\Config\Entity\ConfigEntityTypeInterface[]
+   * @return ConfigEntityTypeInterface[]
    *   Entity type bundle definitions.
    */
   public function getEntityTypeBundleDefinitions();
diff --git a/src/SchemaDotOrgNames.php b/src/SchemaDotOrgNames.php
index 215979b..48ab2ac 100644
--- a/src/SchemaDotOrgNames.php
+++ b/src/SchemaDotOrgNames.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg;
 
+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 
 /**
@@ -14,14 +15,14 @@ class SchemaDotOrgNames implements SchemaDotOrgNamesInterface {
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a SchemaDotOrgNames object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration object factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
@@ -166,7 +167,7 @@ class SchemaDotOrgNames implements SchemaDotOrgNamesInterface {
   /**
    * Get the Schema.org settings configuration.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The Schema.org settings configuration.
    */
   protected function getSettingsConfig() {
@@ -176,7 +177,7 @@ class SchemaDotOrgNames implements SchemaDotOrgNamesInterface {
   /**
    * Get the Schema.org names configuration.
    *
-   * @return \Drupal\Core\Config\ImmutableConfig
+   * @return ImmutableConfig
    *   The Schema.org names configuration.
    */
   protected function getNamesConfig() {
diff --git a/src/SchemaDotOrgSchemaTypeBuilder.php b/src/SchemaDotOrgSchemaTypeBuilder.php
index 43c033b..7581401 100644
--- a/src/SchemaDotOrgSchemaTypeBuilder.php
+++ b/src/SchemaDotOrgSchemaTypeBuilder.php
@@ -15,32 +15,32 @@ class SchemaDotOrgSchemaTypeBuilder implements SchemaDotOrgSchemaTypeBuilderInte
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * Constructs a SchemaDotOrgSchemaTypeBuilder object.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
+   * @param SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager
    *   The Schema.org schema type manager.
    */
   public function __construct(ModuleHandlerInterface $module_handler, AccountInterface $current_user, SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager) {
diff --git a/src/SchemaDotOrgSchemaTypeBuilderInterface.php b/src/SchemaDotOrgSchemaTypeBuilderInterface.php
index 983e524..a71ce00 100644
--- a/src/SchemaDotOrgSchemaTypeBuilderInterface.php
+++ b/src/SchemaDotOrgSchemaTypeBuilderInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\schemadotorg;
 
+use Drupal\Core\Url;
 /**
  * Schema.org schema type builder interface.
  */
@@ -13,7 +14,7 @@ interface SchemaDotOrgSchemaTypeBuilderInterface {
    * @param string $id
    *   Type or property ID.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   Schema.org type or property URL.
    */
   public function getItemUrl($id);
diff --git a/src/SchemaDotOrgSchemaTypeManager.php b/src/SchemaDotOrgSchemaTypeManager.php
index 1af65d7..d8548c2 100644
--- a/src/SchemaDotOrgSchemaTypeManager.php
+++ b/src/SchemaDotOrgSchemaTypeManager.php
@@ -13,21 +13,21 @@ class SchemaDotOrgSchemaTypeManager implements SchemaDotOrgSchemaTypeManagerInte
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The Schema.org names service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface
+   * @var SchemaDotOrgNamesInterface
    */
   protected $schemaNames;
 
@@ -48,11 +48,11 @@ class SchemaDotOrgSchemaTypeManager implements SchemaDotOrgSchemaTypeManagerInte
   /**
    * Constructs a SchemaDotOrgTYpeManger object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The configuration object factory.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   The database connection.
-   * @param \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names
+   * @param SchemaDotOrgNamesInterface $schema_names
    *   The Schema.org names service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, Connection $database, SchemaDotOrgNamesInterface $schema_names) {
diff --git a/tests/src/Functional/SchemaDotOrgMappingTypeFormTest.php b/tests/src/Functional/SchemaDotOrgMappingTypeFormTest.php
index 4eafdc8..f3bdf4a 100644
--- a/tests/src/Functional/SchemaDotOrgMappingTypeFormTest.php
+++ b/tests/src/Functional/SchemaDotOrgMappingTypeFormTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\schemadotorg_ui\Functional;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorage;
 use Drupal\Tests\schemadotorg\Functional\SchemaDotOrgBrowserTestBase;
 
 /**
@@ -22,7 +23,7 @@ class SchemaDotOrgMappingTypeFormTest extends SchemaDotOrgBrowserTestBase {
   /**
    * The Schema.org mapping type storage.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorage
+   * @var SchemaDotOrgMappingTypeStorage
    */
   protected $storage;
 
diff --git a/tests/src/Kernel/SchemaDotOrgAutocompleteControllerTest.php b/tests/src/Kernel/SchemaDotOrgAutocompleteControllerTest.php
index b57a400..491bd24 100644
--- a/tests/src/Kernel/SchemaDotOrgAutocompleteControllerTest.php
+++ b/tests/src/Kernel/SchemaDotOrgAutocompleteControllerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\schemadotorg\Kernel;
 
+use Drupal\schemadotorg\SchemaDotOrgInstallerInterface;
 use Drupal\schemadotorg\Controller\SchemaDotOrgAutocompleteController;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -23,21 +24,21 @@ class SchemaDotOrgAutocompleteControllerTest extends SchemaDotOrgKernelTestBase
   /**
    * The Schema.org autocomplete controller.
    *
-   * @var \Drupal\schemadotorg\Controller\SchemaDotOrgAutocompleteController
+   * @var SchemaDotOrgAutocompleteController
    */
   protected $controller;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('schemadotorg_mapping_type');
     $this->installSchema('schemadotorg', ['schemadotorg_types', 'schemadotorg_properties']);
     $this->installConfig(['schemadotorg']);
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgInstallerInterface $installer */
+    /** @var SchemaDotOrgInstallerInterface $installer */
     $installer = $this->container->get('schemadotorg.installer');
     $installer->install();
 
diff --git a/tests/src/Kernel/SchemaDotOrgKernelEntityTestBase.php b/tests/src/Kernel/SchemaDotOrgKernelEntityTestBase.php
index 46c370c..2f15e7d 100644
--- a/tests/src/Kernel/SchemaDotOrgKernelEntityTestBase.php
+++ b/tests/src/Kernel/SchemaDotOrgKernelEntityTestBase.php
@@ -2,6 +2,11 @@
 
 namespace Drupal\Tests\schemadotorg\Kernel;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingStorage;
+use Drupal\schemadotorg_ui\SchemaDotOrgUiApiInterface;
+use Drupal\schemadotorg\SchemaDotOrgInstallerInterface;
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
+use Drupal\media\MediaTypeInterface;
 use Drupal\file\Entity\File;
 use Drupal\Tests\media\Traits\MediaTypeCreationTrait;
 use Drupal\Tests\TestFileCreationTrait;
@@ -79,21 +84,21 @@ abstract class SchemaDotOrgKernelEntityTestBase extends SchemaDotOrgKernelTestBa
   /**
    * The Schema.org mapping storage.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgMappingStorage
+   * @var SchemaDotOrgMappingStorage
    */
   protected $mappingStorage;
 
   /**
    * The Schema.org UI API service.
    *
-   * @var \Drupal\schemadotorg_ui\SchemaDotOrgUiApiInterface
+   * @var SchemaDotOrgUiApiInterface
    */
   protected $api;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('schemadotorg_mapping');
@@ -107,7 +112,7 @@ abstract class SchemaDotOrgKernelEntityTestBase extends SchemaDotOrgKernelTestBa
     $this->installEntitySchema('image_style');
 
     // Import CSV data into the Schema.org type and properties tables.
-    /** @var \Drupal\schemadotorg\SchemaDotOrgInstallerInterface $installer */
+    /** @var SchemaDotOrgInstallerInterface $installer */
     $installer = $this->container->get('schemadotorg.installer');
     $installer->importTables();
 
@@ -156,7 +161,7 @@ abstract class SchemaDotOrgKernelEntityTestBase extends SchemaDotOrgKernelTestBa
    * @param array $options
    *   (optional) An array of options.
    *
-   * @return \Drupal\schemadotorg\SchemaDotOrgMappingInterface|null
+   * @return SchemaDotOrgMappingInterface|null
    *   The entity type/bundle's Schema.org mapping.
    */
   protected function createSchemaEntity($entity_type_id, $schema_type, array $options = []) {
@@ -183,7 +188,7 @@ abstract class SchemaDotOrgKernelEntityTestBase extends SchemaDotOrgKernelTestBa
   /**
    * Create a test image file.
    *
-   * @return \Drupal\file\Entity\File
+   * @return File
    *   A test image file.
    */
   protected function createFileImage() {
@@ -202,7 +207,7 @@ abstract class SchemaDotOrgKernelEntityTestBase extends SchemaDotOrgKernelTestBa
   /**
    * Create media image type.
    *
-   * @return \Drupal\media\MediaTypeInterface
+   * @return MediaTypeInterface
    *   The image media type.
    */
   protected function createMediaImage() {
diff --git a/tests/src/Kernel/SchemaDotOrgMappingEntityTest.php b/tests/src/Kernel/SchemaDotOrgMappingEntityTest.php
index bc88acd..c9da093 100644
--- a/tests/src/Kernel/SchemaDotOrgMappingEntityTest.php
+++ b/tests/src/Kernel/SchemaDotOrgMappingEntityTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\schemadotorg\Kernel;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingStorage;
 use Drupal\Core\Config\Entity\ConfigEntityType;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\field\Entity\FieldConfig;
@@ -35,35 +36,35 @@ class SchemaDotOrgMappingEntityTest extends SchemaDotOrgKernelTestBase {
   /**
    * A node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;
 
   /**
    * A Schema.org mapping entity for a node.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface
+   * @var SchemaDotOrgMappingInterface
    */
   protected $nodeMapping;
 
   /**
    * A Schema.org mapping entity for a user.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface
+   * @var SchemaDotOrgMappingInterface
    */
   protected $userMapping;
 
   /**
    * The Schema.org mapping storage.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgMappingStorage
+   * @var SchemaDotOrgMappingStorage
    */
   protected $storage;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('schemadotorg_mapping');
diff --git a/tests/src/Kernel/SchemaDotOrgMappingFormTest.php b/tests/src/Kernel/SchemaDotOrgMappingFormTest.php
index c7a87d7..a634eb1 100644
--- a/tests/src/Kernel/SchemaDotOrgMappingFormTest.php
+++ b/tests/src/Kernel/SchemaDotOrgMappingFormTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\schemadotorg\Kernel;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
+use Drupal\schemadotorg\SchemaDotOrgInstallerInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\node\Entity\NodeType;
 use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;
@@ -25,35 +27,35 @@ class SchemaDotOrgMappingFormTest extends SchemaDotOrgKernelTestBase {
   /**
    * A node type.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $nodeType;
 
   /**
    * A Schema.org mapping entity for a node.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface
+   * @var SchemaDotOrgMappingInterface
    */
   protected $nodeMapping;
 
   /**
    * A Schema.org mapping entity for a user.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface
+   * @var SchemaDotOrgMappingInterface
    */
   protected $userMapping;
 
   /**
    * The Schema.org mapping form.
    *
-   * @var \Drupal\schemadotorg\Form\SchemaDotOrgMappingForm
+   * @var SchemaDotOrgMappingForm
    */
   protected $entityForm;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('schemadotorg_mapping');
@@ -64,7 +66,7 @@ class SchemaDotOrgMappingFormTest extends SchemaDotOrgKernelTestBase {
     $this->installConfig(['schemadotorg']);
 
     // Import CSV data into the Schema.org type and properties tables.
-    /** @var \Drupal\schemadotorg\SchemaDotOrgInstallerInterface $installer */
+    /** @var SchemaDotOrgInstallerInterface $installer */
     $installer = $this->container->get('schemadotorg.installer');
     $installer->importTables();
 
diff --git a/tests/src/Kernel/SchemaDotOrgMappingStorageTest.php b/tests/src/Kernel/SchemaDotOrgMappingStorageTest.php
index 3025424..842b918 100644
--- a/tests/src/Kernel/SchemaDotOrgMappingStorageTest.php
+++ b/tests/src/Kernel/SchemaDotOrgMappingStorageTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\schemadotorg\Kernel;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingStorage;
+use Drupal\schemadotorg\SchemaDotOrgInstallerInterface;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
 use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;
@@ -31,14 +33,14 @@ class SchemaDotOrgMappingStorageTest extends SchemaDotOrgKernelTestBase {
   /**
    * The Schema.org mapping storage.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgMappingStorage
+   * @var SchemaDotOrgMappingStorage
    */
   protected $storage;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('schemadotorg_mapping');
@@ -49,7 +51,7 @@ class SchemaDotOrgMappingStorageTest extends SchemaDotOrgKernelTestBase {
     $this->installConfig(['schemadotorg']);
 
     // Import CSV data into the Schema.org type and properties tables.
-    /** @var \Drupal\schemadotorg\SchemaDotOrgInstallerInterface $installer */
+    /** @var SchemaDotOrgInstallerInterface $installer */
     $installer = $this->container->get('schemadotorg.installer');
     $installer->importTables();
 
diff --git a/tests/src/Kernel/SchemaDotOrgMappingTypeEntityTest.php b/tests/src/Kernel/SchemaDotOrgMappingTypeEntityTest.php
index a938e9f..a52ec22 100644
--- a/tests/src/Kernel/SchemaDotOrgMappingTypeEntityTest.php
+++ b/tests/src/Kernel/SchemaDotOrgMappingTypeEntityTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\schemadotorg\Kernel;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingStorage;
+use Drupal\schemadotorg\SchemaDotOrgInstallerInterface;
 use Drupal\Core\Entity\Entity\EntityFormDisplay;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 
@@ -31,14 +33,14 @@ class SchemaDotOrgMappingTypeEntityTest extends SchemaDotOrgKernelTestBase {
   /**
    * The Schema.org mapping storage.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgMappingStorage
+   * @var SchemaDotOrgMappingStorage
    */
   protected $storage;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('user');
@@ -50,7 +52,7 @@ class SchemaDotOrgMappingTypeEntityTest extends SchemaDotOrgKernelTestBase {
     $this->installConfig(['schemadotorg', 'schemadotorg_paragraphs']);
 
     // Import CSV data into the Schema.org type and properties tables.
-    /** @var \Drupal\schemadotorg\SchemaDotOrgInstallerInterface $installer */
+    /** @var SchemaDotOrgInstallerInterface $installer */
     $installer = $this->container->get('schemadotorg.installer');
     $installer->importTables();
 
diff --git a/tests/src/Kernel/SchemaDotOrgMappingTypeStorageTest.php b/tests/src/Kernel/SchemaDotOrgMappingTypeStorageTest.php
index e30a35a..b59cfd3 100644
--- a/tests/src/Kernel/SchemaDotOrgMappingTypeStorageTest.php
+++ b/tests/src/Kernel/SchemaDotOrgMappingTypeStorageTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\schemadotorg\Kernel;
 
+use Drupal\schemadotorg\SchemaDotOrgMappingTypeStorage;
+use Drupal\schemadotorg\SchemaDotOrgInstallerInterface;
 use Drupal\Core\Config\Entity\ConfigEntityType;
 use Drupal\Core\Entity\ContentEntityType;
 use Drupal\Core\Entity\Display\EntityDisplayInterface;
@@ -34,14 +36,14 @@ class SchemaDotOrgMappingTypeStorageTest extends SchemaDotOrgKernelTestBase {
   /**
    * The Schema.org mapping type storage.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorage
+   * @var SchemaDotOrgMappingTypeStorage
    */
   protected $storage;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installEntitySchema('schemadotorg_mapping_type');
@@ -49,7 +51,7 @@ class SchemaDotOrgMappingTypeStorageTest extends SchemaDotOrgKernelTestBase {
     $this->installConfig(['schemadotorg', 'schemadotorg_paragraphs']);
 
     // Import CSV data into the Schema.org type and properties tables.
-    /** @var \Drupal\schemadotorg\SchemaDotOrgInstallerInterface $installer */
+    /** @var SchemaDotOrgInstallerInterface $installer */
     $installer = $this->container->get('schemadotorg.installer');
     $installer->importTables();
 
diff --git a/tests/src/Kernel/SchemaDotOrgNamesTest.php b/tests/src/Kernel/SchemaDotOrgNamesTest.php
index a6aee7d..91a42d9 100644
--- a/tests/src/Kernel/SchemaDotOrgNamesTest.php
+++ b/tests/src/Kernel/SchemaDotOrgNamesTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\schemadotorg\Kernel;
 
+use Drupal\schemadotorg\SchemaDotOrgNamesInterface;
 /**
  * Tests the Schema.org names service.
  *
@@ -13,14 +14,14 @@ class SchemaDotOrgNamesTest extends SchemaDotOrgKernelTestBase {
   /**
    * The Schema.org names service.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface
+   * @var SchemaDotOrgNamesInterface
    */
   protected $names;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['schemadotorg']);
diff --git a/tests/src/Kernel/SchemaDotOrgSchemaTypeManagerTest.php b/tests/src/Kernel/SchemaDotOrgSchemaTypeManagerTest.php
index bb79882..1f165a6 100644
--- a/tests/src/Kernel/SchemaDotOrgSchemaTypeManagerTest.php
+++ b/tests/src/Kernel/SchemaDotOrgSchemaTypeManagerTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\schemadotorg\Kernel;
 
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface;
+use Drupal\schemadotorg\SchemaDotOrgInstallerInterface;
 use Drupal\Component\Utility\NestedArray;
 
 /**
@@ -15,20 +17,20 @@ class SchemaDotOrgSchemaTypeManagerTest extends SchemaDotOrgKernelTestBase {
   /**
    * The Schema.org schema type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface
+   * @var SchemaDotOrgSchemaTypeManagerInterface
    */
   protected $schemaTypeManager;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->installConfig(['schemadotorg']);
     $this->installSchema('schemadotorg', ['schemadotorg_types', 'schemadotorg_properties']);
 
-    /** @var \Drupal\schemadotorg\SchemaDotOrgInstallerInterface $installer */
+    /** @var SchemaDotOrgInstallerInterface $installer */
     $installer = $this->container->get('schemadotorg.installer');
     $installer->importTables();
 
diff --git a/tests/src/Traits/SchemaDotOrgTestTrait.php b/tests/src/Traits/SchemaDotOrgTestTrait.php
index 657c1c3..bdde924 100644
--- a/tests/src/Traits/SchemaDotOrgTestTrait.php
+++ b/tests/src/Traits/SchemaDotOrgTestTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\schemadotorg\Traits;
 
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeManager;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
@@ -74,7 +75,7 @@ trait SchemaDotOrgTestTrait {
    */
   protected function createSchemaDotOrgSubTypeField($entity_type_id, $bundle, $schema_type = '') {
     if ($schema_type) {
-      /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManager $schema_type_manager */
+      /** @var SchemaDotOrgSchemaTypeManager $schema_type_manager */
       $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
       $allowed_values = $schema_type_manager->getAllTypeChildrenAsOptions($schema_type);
     }
diff --git a/tests/src/Unit/Breadcrumb/SchemaDotOrgBreadcrumbBuilderBuilderTest.php b/tests/src/Unit/Breadcrumb/SchemaDotOrgBreadcrumbBuilderBuilderTest.php
index 86cdfc2..1d591b4 100644
--- a/tests/src/Unit/Breadcrumb/SchemaDotOrgBreadcrumbBuilderBuilderTest.php
+++ b/tests/src/Unit/Breadcrumb/SchemaDotOrgBreadcrumbBuilderBuilderTest.php
@@ -24,9 +24,7 @@ class SchemaDotOrgBreadcrumbBuilderBuilderTest extends UnitTestCase {
     // @see \Drupal\Core\Breadcrumb\Breadcrumb
     // @see \Drupal\Core\Cache\RefinableCacheableDependencyTrait
     // @see \Drupal\Core\Cache\Cache
-    $cache_contexts_manager = $this->getMockBuilder('Drupal\Core\Cache\Context\CacheContextsManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $cache_contexts_manager = $this->createMock('Drupal\Core\Cache\Context\CacheContextsManager');
     // Always return TRUE for ::assertValidTokens so that any cache context
     // will be accepted.
     $cache_contexts_manager->method('assertValidTokens')->willReturn(TRUE);
diff --git a/tests/src/Unit/SchemaDotOrgSchemaTypeBuilderTest.php b/tests/src/Unit/SchemaDotOrgSchemaTypeBuilderTest.php
index ab345aa..0f6b33a 100644
--- a/tests/src/Unit/SchemaDotOrgSchemaTypeBuilderTest.php
+++ b/tests/src/Unit/SchemaDotOrgSchemaTypeBuilderTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\schemadotorg\Unit\SchemaDotOrgSchemaTypeBuilderTest;
 
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use PHPUnit\Framework\MockObject\MockObject;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\schemadotorg\SchemaDotOrgSchemaTypeManager;
 use Drupal\Core\Url;
 use Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilder;
 use Drupal\Tests\UnitTestCase;
@@ -15,28 +19,28 @@ class SchemaDotOrgSchemaTypeBuilderTest extends UnitTestCase {
   /**
    * The mock module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var ModuleHandlerInterface|MockObject
    */
   protected $moduleHandler;
 
   /**
    * The mock current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var AccountInterface|MockObject
    */
   protected $currentUser;
 
   /**
    * The mock Schema.org type manager.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManager|\PHPUnit\Framework\MockObject\MockObject
+   * @var SchemaDotOrgSchemaTypeManager|MockObject
    */
   protected $schemaTypeManager;
 
   /**
    * The Schema.org type builder.
    *
-   * @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilder
+   * @var SchemaDotOrgSchemaTypeBuilder
    */
   protected $schemaTypeBuilder;
 
@@ -50,9 +54,7 @@ class SchemaDotOrgSchemaTypeBuilderTest extends UnitTestCase {
 
     $this->currentUser = $this->createMock('Drupal\Core\Session\AccountInterface');
 
-    $this->schemaTypeManager = $this->getMockBuilder('\Drupal\schemadotorg\SchemaDotOrgSchemaTypeManager')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->schemaTypeManager = $this->createMock('\Drupal\schemadotorg\SchemaDotOrgSchemaTypeManager');
 
     $this->schemaTypeBuilder = new SchemaDotOrgSchemaTypeBuilder(
       $this->moduleHandler,
