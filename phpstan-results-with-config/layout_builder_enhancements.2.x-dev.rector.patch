diff --git a/modules/layout_builder_enhancements_blocks/src/Controller/ChooseBlockController.php b/modules/layout_builder_enhancements_blocks/src/Controller/ChooseBlockController.php
index 395bfd9..f3e963c 100644
--- a/modules/layout_builder_enhancements_blocks/src/Controller/ChooseBlockController.php
+++ b/modules/layout_builder_enhancements_blocks/src/Controller/ChooseBlockController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\layout_builder_enhancements_blocks\Controller;
 
+use Drupal\block_content\Entity\BlockContentType;
+use Drupal\Core\Url;
 use Drupal\layout_builder\SectionStorageInterface;
 use Drupal\layout_builder\Controller\ChooseBlockController as BaseController;
 
@@ -16,7 +18,7 @@ class ChooseBlockController extends BaseController {
   /**
    * Provides the UI for choosing a new block.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
    * @param int $delta
    *   The delta of the section to splice.
@@ -56,7 +58,7 @@ class ChooseBlockController extends BaseController {
   protected function getInlineBlockCategories(): array {
     $categories = [];
     /**
-     * @var \Drupal\block_content\Entity\BlockContentType[]
+     * @var BlockContentType[]
      */
     $types = $this->entityTypeManager->getStorage('block_content_type')->loadMultiple();
     foreach ($types as $type) {
@@ -74,7 +76,7 @@ class ChooseBlockController extends BaseController {
   /**
    * Provides the UI for choosing a new inline block.
    *
-   * @param \Drupal\layout_builder\SectionStorageInterface $section_storage
+   * @param SectionStorageInterface $section_storage
    *   The section storage.
    * @param int $delta
    *   The delta of the section to splice.
@@ -88,12 +90,12 @@ class ChooseBlockController extends BaseController {
     $build = parent::inlineBlockList($section_storage, $delta, $region);
     foreach ($build['links']['#links'] as &$link) {
       /**
-       * @var \Drupal\Core\Url
+       * @var Url
        */
       $url = $link['url'];
       $pluginId = explode(':', $url->getRouteParameters()['plugin_id']);
       /**
-       * @var \Drupal\block_content\Entity\BlockContentType
+       * @var BlockContentType
        */
       $type = $this->entityTypeManager->getStorage('block_content_type')->load($pluginId[1]);
       $icon = $type->getThirdPartySetting('layout_builder_enhancements_blocks', 'icon');
diff --git a/modules/layout_builder_enhancements_views/src/EventSubscriber/ViewEventSubscriber.php b/modules/layout_builder_enhancements_views/src/EventSubscriber/ViewEventSubscriber.php
index 4cfffd7..aa5ecc0 100644
--- a/modules/layout_builder_enhancements_views/src/EventSubscriber/ViewEventSubscriber.php
+++ b/modules/layout_builder_enhancements_views/src/EventSubscriber/ViewEventSubscriber.php
@@ -48,7 +48,7 @@ class ViewEventSubscriber implements EventSubscriberInterface {
   /**
    * Helper function for get offset for a component in layout field.
    *
-   * @param \Drupal\layout_builder\Event\SectionComponentBuildRenderArrayEvent $event
+   * @param SectionComponentBuildRenderArrayEvent $event
    *   The event was recieved.
    * @param \Drupal\layout_builder_enhancements\Plugin\Block\ViewBlock $block
    *   The actual block for lookup offset.
diff --git a/modules/layout_builder_enhancements_views/src/Plugin/Block/ViewBlock.php b/modules/layout_builder_enhancements_views/src/Plugin/Block/ViewBlock.php
index 03ba154..23e4870 100644
--- a/modules/layout_builder_enhancements_views/src/Plugin/Block/ViewBlock.php
+++ b/modules/layout_builder_enhancements_views/src/Plugin/Block/ViewBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_builder_enhancements_views\Plugin\Block;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Block\BlockBase;
 use Drupal\views\ResultRow;
 use Drupal\Core\Block\BlockPluginInterface;
@@ -156,9 +157,9 @@ class ViewBlock extends BlockBase implements ContainerFactoryPluginInterface, Bl
   /**
    * Extracts the entity from a views Row.
    *
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    */
   protected function getRowEntity(ResultRow $row) {
     if (is_a($row,'\Drupal\search_api\Plugin\views\ResultRow')) {
diff --git a/modules/layout_builder_enhancements_views/src/Plugin/Derivative/ViewBlock.php b/modules/layout_builder_enhancements_views/src/Plugin/Derivative/ViewBlock.php
index 42f6c63..febdc7f 100644
--- a/modules/layout_builder_enhancements_views/src/Plugin/Derivative/ViewBlock.php
+++ b/modules/layout_builder_enhancements_views/src/Plugin/Derivative/ViewBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_builder_enhancements_views\Plugin\Derivative;
 
+use Drupal\views\Entity\View;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 use Drupal\views\Views;
@@ -39,7 +40,7 @@ class ViewBlock extends DeriverBase implements ContainerDeriverInterface {
       }
 
       /**
-       * @var \Drupal\views\Entity\View
+       * @var View
        */
       $view = $this->manager->load($view);
 
@@ -72,7 +73,7 @@ class ViewBlock extends DeriverBase implements ContainerDeriverInterface {
   /**
    * Constructs new FieldBlockDeriver.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $manager
+   * @param EntityTypeManagerInterface $manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeManagerInterface $manager) {
diff --git a/src/EventSubscriber/EventSubscriber.php b/src/EventSubscriber/EventSubscriber.php
index f9c51d3..0187fa2 100644
--- a/src/EventSubscriber/EventSubscriber.php
+++ b/src/EventSubscriber/EventSubscriber.php
@@ -18,7 +18,7 @@ class EventSubscriber implements EventSubscriberInterface {
   /**
    * Constructor.
    *
-   * @param Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_repository_display
+   * @param EntityDisplayRepositoryInterface $entity_repository_display
    *   For getting Facebook and SimpleFbConnectPersistentDataHandler services.
    */
   public function __construct(EntityDisplayRepositoryInterface $entity_repository_display) {
