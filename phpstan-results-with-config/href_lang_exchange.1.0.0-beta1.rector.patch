diff --git a/href_lang_exchange.module b/href_lang_exchange.module
index 6797d60..b9e0a0c 100644
--- a/href_lang_exchange.module
+++ b/href_lang_exchange.module
@@ -1,5 +1,12 @@
 <?php
 
+use Drupal\href_lang_exchange\Connection\ConnectionInterface;
+use Drupal\href_lang_exchange\Connection\SiteManagementInterface;
+use Drupal\href_lang_exchange\Connection\SendValidatorInterface;
+use Drupal\href_lang_exchange\Service\SettingsManagerInterface;
+use Drupal\href_lang_exchange\Service\LazyStore;
+use Drupal\href_lang_exchange\HrefLangItemStorageInterface;
+use Drupal\href_lang_exchange\Entity\HrefLangItem;
 /**
  * @file
  * Enhances the href lang support in core.
@@ -15,16 +22,16 @@ use Drupal\href_lang_exchange\HrefLangItemInterface;
  * Implements hook_entity_presave().
  */
 function href_lang_exchange_entity_presave(EntityInterface $entity) {
-  /** @var \Drupal\href_lang_exchange\Connection\ConnectionInterface $connection */
+  /** @var ConnectionInterface $connection */
   $connection = \Drupal::service('href_lang_exchange.connection');
 
-  /** @var \Drupal\href_lang_exchange\Connection\SiteManagementInterface $destination_service */
+  /** @var SiteManagementInterface $destination_service */
   $destination_service = \Drupal::service('href_lang_exchange.service.site_management_service');
 
-  /** @var \Drupal\href_lang_exchange\Connection\SendValidatorInterface $validation */
+  /** @var SendValidatorInterface $validation */
   $validation = \Drupal::service('href_lang_exchange.send_validation');
 
-  /** @var \Drupal\href_lang_exchange\Service\SettingsManagerInterface $settings_manager */
+  /** @var SettingsManagerInterface $settings_manager */
   $settings_manager = \Drupal::service('href_lang_exchange.helper.settings_manager');
 
   if (
@@ -65,10 +72,10 @@ function href_lang_exchange_entity_presave(EntityInterface $entity) {
  * Implements hook_entity_translation_delete().
  */
 function href_lang_exchange_entity_translation_delete(EntityInterface $translation) {
-  /** @var \Drupal\href_lang_exchange\Connection\ConnectionInterface $connection */
+  /** @var ConnectionInterface $connection */
   $connection = \Drupal::service('href_lang_exchange.connection');
 
-  /** @var \Drupal\href_lang_exchange\Service\LazyStore $lazy_store */
+  /** @var LazyStore $lazy_store */
   $lazy_store = \Drupal::service('href_lang_exchange.service.lazy_store');
 
   $logger = \Drupal::logger('href_lang_exchange');
@@ -120,13 +127,13 @@ function href_lang_exchange_entity_translation_delete(EntityInterface $translati
  */
 function href_lang_exchange_href_lang_item_delete(HrefLangItemInterface $entity) {
 
-  /** @var \Drupal\href_lang_exchange\Connection\ConnectionInterface $connection */
+  /** @var ConnectionInterface $connection */
   $connection = \Drupal::service('href_lang_exchange.connection');
 
-  /** @var \Drupal\href_lang_exchange\Connection\SiteManagementInterface $destination_service */
+  /** @var SiteManagementInterface $destination_service */
   $destination_service = \Drupal::service('href_lang_exchange.service.site_management_service');
 
-  /** @var \Drupal\href_lang_exchange\Service\SettingsManagerInterface $settings_manager */
+  /** @var SettingsManagerInterface $settings_manager */
   $settings_manager = \Drupal::service('href_lang_exchange.helper.settings_manager');
 
   $sites = $destination_service->getAllDestinationSites();
@@ -152,7 +159,7 @@ function href_lang_exchange_href_lang_item_delete(HrefLangItemInterface $entity)
  * Implements hook_simple_sitemap_links_alter().
  */
 function href_lang_exchange_simple_sitemap_links_alter(array &$links, $sitemap_variant) {
-  /** @var \Drupal\href_lang_exchange\HrefLangItemStorageInterface $href_lang_storage */
+  /** @var HrefLangItemStorageInterface $href_lang_storage */
   $href_lang_storage = \Drupal::entityTypeManager()
     ->getStorage('href_lang_item');
 
@@ -162,7 +169,7 @@ function href_lang_exchange_simple_sitemap_links_alter(array &$links, $sitemap_v
       $exclude = [];
 
       $internal_id = $link['meta']['entity_info']['entity_type'] . ':' . $link['meta']['entity_info']['id'];
-      /** @var \Drupal\href_lang_exchange\Entity\HrefLangItem $entity */
+      /** @var HrefLangItem $entity */
       $entity = $href_lang_storage
         ->loadByInternalId($internal_id);
 
diff --git a/modules/href_lang_exchange_autoupdater/href_lang_exchange_autoupdater.module b/modules/href_lang_exchange_autoupdater/href_lang_exchange_autoupdater.module
index c387c9d..e7b62c5 100644
--- a/modules/href_lang_exchange_autoupdater/href_lang_exchange_autoupdater.module
+++ b/modules/href_lang_exchange_autoupdater/href_lang_exchange_autoupdater.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\href_lang_exchange\Connection\ConnectionInterface;
+use Drupal\href_lang_exchange_href\SiteEntityStorageInterface;
 /**
  * @file
  * Enhances the href lang support in core.
@@ -12,10 +14,10 @@ use Drupal\node\Entity\Node;
  * Load all.
  */
 function load_all() {
-  /** @var \Drupal\href_lang_exchange\Connection\ConnectionInterface $connection */
+  /** @var ConnectionInterface $connection */
   $connection = \Drupal::service('href_lang_exchange.connection');
 
-  /** @var \Drupal\href_lang_exchange_href\SiteEntityStorageInterface $site_storage */
+  /** @var SiteEntityStorageInterface $site_storage */
   $site_storage = \Drupal::entityTypeManager()
     ->getStorage('site_entity');
 
diff --git a/modules/href_lang_exchange_autoupdater/src/Controller/SiteEntityController.php b/modules/href_lang_exchange_autoupdater/src/Controller/SiteEntityController.php
index 48e3f2f..4e349e8 100644
--- a/modules/href_lang_exchange_autoupdater/src/Controller/SiteEntityController.php
+++ b/modules/href_lang_exchange_autoupdater/src/Controller/SiteEntityController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\href_lang_exchange_autoupdater\Controller;
 
+use Drupal\href_lang_exchange\Connection\ConnectionInterface;
+use Drupal\href_lang_exchange_href\SiteEntityStorageInterface;
+use Drupal\href_lang_exchange\HrefLangItemStorageInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Datetime\DateFormatter;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
@@ -20,23 +23,23 @@ class SiteEntityController extends ControllerBase implements ContainerInjectionI
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
    * Constructs a new SiteEntityController.
    *
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer.
    */
   public function __construct(DateFormatter $date_formatter, Renderer $renderer) {
@@ -58,14 +61,14 @@ class SiteEntityController extends ControllerBase implements ContainerInjectionI
    * {@inheritdoc}
    */
   public function handle() {
-    /** @var \Drupal\href_lang_exchange\Connection\ConnectionInterface $connection */
+    /** @var ConnectionInterface $connection */
     $connection = \Drupal::service('href_lang_exchange.connection');
 
-    /** @var \Drupal\href_lang_exchange_href\SiteEntityStorageInterface $site_storage */
+    /** @var SiteEntityStorageInterface $site_storage */
     $site_storage = \Drupal::entityTypeManager()
       ->getStorage('site_entity');
 
-    /** @var \Drupal\href_lang_exchange\HrefLangItemStorageInterface $href_storage */
+    /** @var HrefLangItemStorageInterface $href_storage */
     $href_storage = \Drupal::entityTypeManager()
       ->getStorage('href_lang_item');
 
diff --git a/modules/href_lang_exchange_country_override/href_lang_exchange_country_override.module b/modules/href_lang_exchange_country_override/href_lang_exchange_country_override.module
index 51874c7..88ba080 100644
--- a/modules/href_lang_exchange_country_override/href_lang_exchange_country_override.module
+++ b/modules/href_lang_exchange_country_override/href_lang_exchange_country_override.module
@@ -1,5 +1,12 @@
 <?php
 
+use Drupal\href_lang_exchange\Connection\ConnectionInterface;
+use Drupal\href_lang_exchange\Connection\SiteManagementInterface;
+use Drupal\Component\Uuid\UuidInterface;
+use Drupal\href_lang_exchange\HrefLangItemStorageInterface;
+use Drupal\href_lang_exchange\Service\LazyStore;
+use Drupal\href_lang_exchange_href\SiteEntityStorageInterface;
+use Drupal\href_lang_exchange\Connection\SendValidatorInterface;
 /**
  * @file
  * Enhances the href lang support in core.
@@ -106,16 +113,16 @@ function href_lang_exchange_country_override_form_alter(&$form, &$form_state, $f
  * Implements hook_entity_presave().
  */
 function href_lang_exchange_country_override_site_entity_presave(EntityInterface $entity) {
-  /** @var \Drupal\href_lang_exchange\Connection\ConnectionInterface $connection */
+  /** @var ConnectionInterface $connection */
   $connection = \Drupal::service('href_lang_exchange.connection');
 
-  /** @var \Drupal\href_lang_exchange\Connection\SiteManagementInterface $destination_service */
+  /** @var SiteManagementInterface $destination_service */
   $destination_service = \Drupal::service('href_lang_exchange.service.site_management_service');
 
-  /** @var \Drupal\Component\Uuid\UuidInterface $generator */
+  /** @var UuidInterface $generator */
   $generator = \Drupal::service('uuid');
 
-  /** @var \Drupal\href_lang_exchange\HrefLangItemStorageInterface $href_lang_storage */
+  /** @var HrefLangItemStorageInterface $href_lang_storage */
   try {
     $href_lang_storage = \Drupal::entityTypeManager()
       ->getStorage('href_lang_item');
@@ -176,14 +183,14 @@ function href_lang_exchange_country_override_site_entity_presave(EntityInterface
  * Implements hook_href_lang_creation_alter().
  */
 function href_lang_exchange_country_override_href_lang_creation_alter(EntityInterface $entity, array &$entities, array $sites) {
-  /** @var \Drupal\href_lang_exchange\Service\LazyStore $lazy_store */
+  /** @var LazyStore $lazy_store */
   $lazy_store = \Drupal::service('href_lang_exchange.service.lazy_store');
 
   try {
-    /** @var \Drupal\href_lang_exchange_href\SiteEntityStorageInterface $site_storage */
+    /** @var SiteEntityStorageInterface $site_storage */
     $site_storage = \Drupal::entityTypeManager()
       ->getStorage('site_entity');
-    /** @var \Drupal\href_lang_exchange\Connection\SendValidatorInterface $validation */
+    /** @var SendValidatorInterface $validation */
     $validation = \Drupal::service('href_lang_exchange.send_validation');
   }
   catch (\Exception $e) {
@@ -224,7 +231,7 @@ function href_lang_exchange_country_override_href_lang_creation_alter(EntityInte
         if (!empty($entity->original)) {
           $url = $entity->original->getPath();
 
-          /** @var \Drupal\href_lang_exchange\HrefLangItemStorageInterface $href_lang_storage */
+          /** @var HrefLangItemStorageInterface $href_lang_storage */
           $href_lang_storage = \Drupal::entityTypeManager()
             ->getStorage('href_lang_item');
           $href_lang_items = $href_lang_storage->loadAllByPath($url);
@@ -292,11 +299,11 @@ function href_lang_exchange_country_override_href_lang_creation_alter(EntityInte
 /**
  * Create multiple href_lang_items (for each region one.)
  *
- * @param \Drupal\Core\Entity\EntityInterface $entity
+ * @param EntityInterface $entity
  *   The current entity.
  * @param array $region
  *   All regions of this site.
- * @param \Drupal\href_lang_exchange\Service\LazyStoreInterface $lazy_store
+ * @param LazyStoreInterface $lazy_store
  *   A store to execute things lazy.
  * @param mixed $entities
  *   All other entities that need to be created in this language.
@@ -331,7 +338,7 @@ function __handle_multisite_creation(EntityInterface $entity, array $region, Laz
 function href_lang_exchange_country_override_href_lang_autocomplete_alter(QueryInterface $query, Request $request) {
   $filter = [];
   try {
-    /** @var \Drupal\href_lang_exchange_href\SiteEntityStorageInterface $site_storage */
+    /** @var SiteEntityStorageInterface $site_storage */
     $site_storage = \Drupal::entityTypeManager()
       ->getStorage('site_entity');
 
diff --git a/modules/href_lang_exchange_country_override/src/SiteEntityHrefLangEntity.php b/modules/href_lang_exchange_country_override/src/SiteEntityHrefLangEntity.php
index c795f76..b016205 100644
--- a/modules/href_lang_exchange_country_override/src/SiteEntityHrefLangEntity.php
+++ b/modules/href_lang_exchange_country_override/src/SiteEntityHrefLangEntity.php
@@ -15,23 +15,23 @@ class SiteEntityHrefLangEntity {
   /**
    * The site entity.
    *
-   * @var \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface
+   * @var SiteEntityInterface
    */
   protected $siteEntity;
 
   /**
    * The href lang item.
    *
-   * @var \Drupal\href_lang_exchange\HrefLangItemInterface
+   * @var HrefLangItemInterface
    */
   protected $hrefLangItem;
 
   /**
    * SiteEntityHrefLangEntity constructor.
    *
-   * @param \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface $site_entity
+   * @param SiteEntityInterface $site_entity
    *   The site entity.
-   * @param \Drupal\href_lang_exchange\HrefLangItemInterface $hrefLangItem
+   * @param HrefLangItemInterface $hrefLangItem
    *   The href lang item.
    */
   public function __construct(SiteEntityInterface $site_entity, HrefLangItemInterface $hrefLangItem) {
@@ -42,7 +42,7 @@ class SiteEntityHrefLangEntity {
   /**
    * Return the href lang item.
    *
-   * @return \Drupal\href_lang_exchange\HrefLangItemInterface
+   * @return HrefLangItemInterface
    *   Return the href lang item.
    */
   public function getHref() {
@@ -52,7 +52,7 @@ class SiteEntityHrefLangEntity {
   /**
    * Return the site entity.
    *
-   * @return \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface
+   * @return SiteEntityInterface
    *   Return the site entity.
    */
   public function getSite() {
diff --git a/modules/href_lang_exchange_country_override/src/SiteEntityMultiRegionExtensionStorage.php b/modules/href_lang_exchange_country_override/src/SiteEntityMultiRegionExtensionStorage.php
index 14d1aca..c054989 100644
--- a/modules/href_lang_exchange_country_override/src/SiteEntityMultiRegionExtensionStorage.php
+++ b/modules/href_lang_exchange_country_override/src/SiteEntityMultiRegionExtensionStorage.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\href_lang_exchange_country_override;
 
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\href_lang_exchange\HrefLangItemInterface;
 use Drupal\href_lang_exchange\Service\LazyStoreInterface;
 use Drupal\href_lang_exchange\Service\NormalLazyStore;
@@ -19,23 +20,23 @@ class SiteEntityMultiRegionExtensionStorage implements SiteEntityMultiRegionExte
   /**
    * The lazy store.
    *
-   * @var \Drupal\href_lang_exchange\Service\LazyStoreInterface
+   * @var LazyStoreInterface
    */
   protected $lazyStore;
 
   /**
    * The request.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * SiteEntityMultiRegionExtensionStorage constructor.
    *
-   * @param \Drupal\href_lang_exchange\Service\LazyStoreInterface $lazy_store
+   * @param LazyStoreInterface $lazy_store
    *   The lazy store.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   * @param RequestStack $requestStack
    *   The request.
    */
   public function __construct(LazyStoreInterface $lazy_store, RequestStack $requestStack) {
@@ -46,7 +47,7 @@ class SiteEntityMultiRegionExtensionStorage implements SiteEntityMultiRegionExte
   /**
    * Create for each given region a hreflangitem like the current entity.
    *
-   * @param \Drupal\href_lang_exchange\HrefLangItemInterface $entity
+   * @param HrefLangItemInterface $entity
    *   The current entity.
    * @param array $region
    *   The region array.
diff --git a/modules/href_lang_exchange_custom_logos/href_lang_exchange_custom_logos.module b/modules/href_lang_exchange_custom_logos/href_lang_exchange_custom_logos.module
index 819982b..db18ef5 100644
--- a/modules/href_lang_exchange_custom_logos/href_lang_exchange_custom_logos.module
+++ b/modules/href_lang_exchange_custom_logos/href_lang_exchange_custom_logos.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\href_lang_exchange\Connection\ConnectionInterface;
+use Drupal\href_lang_exchange_href\SiteEntityStorageInterface;
 /**
  * @file
  * Enhances the href lang support in core.
@@ -12,7 +14,7 @@ use Drupal\Core\Form\FormStateInterface;
  * Implements hook_field_widget_href_lang_exchange_item_autocomplete_form_alter().
  */
 function href_lang_exchange_custom_logos_field_widget_href_lang_exchange_item_autocomplete_form_alter(&$element, FormStateInterface $form_state, $context) {
-  /** @var \Drupal\href_lang_exchange\Connection\ConnectionInterface $connection */
+  /** @var ConnectionInterface $connection */
   $connection = \Drupal::service('href_lang_exchange.connection');
 
   try {
@@ -99,7 +101,7 @@ function href_lang_exchange_custom_logos_jsonapi_autocomplete_filter_results_alt
   }
 
   // Alter items.
-  /** @var \Drupal\href_lang_exchange_href\SiteEntityStorageInterface $site_storage */
+  /** @var SiteEntityStorageInterface $site_storage */
   $site_storage = \Drupal::entityTypeManager()
     ->getStorage('site_entity');
 
diff --git a/modules/href_lang_exchange_custom_logos/src/Controller/MultisiteLogosController.php b/modules/href_lang_exchange_custom_logos/src/Controller/MultisiteLogosController.php
index 78af17d..1a38917 100644
--- a/modules/href_lang_exchange_custom_logos/src/Controller/MultisiteLogosController.php
+++ b/modules/href_lang_exchange_custom_logos/src/Controller/MultisiteLogosController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\href_lang_exchange_custom_logos\Controller;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\href_lang_exchange_href\SiteEntityStorageInterface;
+use Drupal\href_lang_exchange_href\Entity\SiteEntityInterface;
 use LasseRafn\InitialAvatarGenerator\InitialAvatar;
 use Drupal\Core\Controller\ControllerBase;
 use GuzzleHttp\Psr7\Response;
@@ -29,7 +33,7 @@ class MultisiteLogosController extends ControllerBase {
    * @param string $color
    *   This is a hex code.
    *
-   * @return \GuzzleHttp\Psr7\Response
+   * @return Response
    *   The Response
    */
   public function handle($name, $color) {
@@ -56,19 +60,19 @@ class MultisiteLogosController extends ControllerBase {
   /**
    * Handle the dynamic generation of the css to include the logos.
    *
-   * @return \GuzzleHttp\Psr7\Response
+   * @return Response
    *   The css response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function handleCss() {
     $value = '';
-    /** @var \Drupal\href_lang_exchange_href\SiteEntityStorageInterface $site_storage */
+    /** @var SiteEntityStorageInterface $site_storage */
     $site_storage = \Drupal::entityTypeManager()
       ->getStorage('site_entity');
 
-    /** @var \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface[] $site_entities */
+    /** @var SiteEntityInterface[] $site_entities */
     $site_entities = $site_storage->loadMultiple();
 
     foreach ($site_entities as $site_entity) {
diff --git a/modules/href_lang_exchange_href/href_lang_exchange_href.module b/modules/href_lang_exchange_href/href_lang_exchange_href.module
index d9d47ca..892590f 100644
--- a/modules/href_lang_exchange_href/href_lang_exchange_href.module
+++ b/modules/href_lang_exchange_href/href_lang_exchange_href.module
@@ -1,5 +1,9 @@
 <?php
 
+use Drupal\href_lang_exchange\Connection\ConnectionInterface;
+use Drupal\href_lang_exchange\Connection\SiteManagementInterface;
+use Drupal\href_lang_exchange\Connection\SendValidatorInterface;
+use Drupal\href_lang_exchange\Service\SettingsManagerInterface;
 /**
  * @file
  * Enhances the href lang support in core.
@@ -11,16 +15,16 @@ use Drupal\Core\Entity\EntityInterface;
  * Implements hook_entity_presave().
  */
 function href_lang_exchange_href_entity_presave(EntityInterface $entity) {
-  /** @var \Drupal\href_lang_exchange\Connection\ConnectionInterface $connection */
+  /** @var ConnectionInterface $connection */
   $connection = \Drupal::service('href_lang_exchange.connection');
 
-  /** @var \Drupal\href_lang_exchange\Connection\SiteManagementInterface $destination_service */
+  /** @var SiteManagementInterface $destination_service */
   $destination_service = \Drupal::service('href_lang_exchange.service.site_management_service');
 
-  /** @var \Drupal\href_lang_exchange\Connection\SendValidatorInterface $validation */
+  /** @var SendValidatorInterface $validation */
   $validation = \Drupal::service('href_lang_exchange.send_validation');
 
-  /** @var \Drupal\href_lang_exchange\Service\SettingsManagerInterface $settings_manager */
+  /** @var SettingsManagerInterface $settings_manager */
   $settings_manager = \Drupal::service('href_lang_exchange.helper.settings_manager');
 
   if (
diff --git a/modules/href_lang_exchange_href/src/Authentication/Provider/BasicTokenAuth.php b/modules/href_lang_exchange_href/src/Authentication/Provider/BasicTokenAuth.php
index bc6d0f5..ea19415 100644
--- a/modules/href_lang_exchange_href/src/Authentication/Provider/BasicTokenAuth.php
+++ b/modules/href_lang_exchange_href/src/Authentication/Provider/BasicTokenAuth.php
@@ -18,23 +18,23 @@ class BasicTokenAuth implements AuthenticationProviderInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The configuration object for site entities.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a HTTP basic authentication provider object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ConfigFactoryInterface $config_factory) {
@@ -76,9 +76,9 @@ class BasicTokenAuth implements AuthenticationProviderInterface {
    * {@inheritdoc}
    */
   public function handleException(ExceptionEvent $event) {
-    $exception = $event->getException();
+    $exception = $event->getThrowable();
     if ($exception instanceof AccessDeniedHttpException) {
-      $event->setException(new UnauthorizedHttpException('Invalid consumer origin.', $exception));
+      $event->setThrowable(new UnauthorizedHttpException('Invalid consumer origin.', $exception));
       return TRUE;
     }
     return FALSE;
diff --git a/modules/href_lang_exchange_href/src/Authorization/AuthorizationToken.php b/modules/href_lang_exchange_href/src/Authorization/AuthorizationToken.php
index e42e70f..f8c9cf3 100644
--- a/modules/href_lang_exchange_href/src/Authorization/AuthorizationToken.php
+++ b/modules/href_lang_exchange_href/src/Authorization/AuthorizationToken.php
@@ -15,14 +15,14 @@ class AuthorizationToken implements AuthorizationInterface {
   /**
    * The configuration object for site entities.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a HTTP basic authentication provider object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/modules/href_lang_exchange_href/src/Controller/SiteEntityController.php b/modules/href_lang_exchange_href/src/Controller/SiteEntityController.php
index abdf580..5fb159f 100644
--- a/modules/href_lang_exchange_href/src/Controller/SiteEntityController.php
+++ b/modules/href_lang_exchange_href/src/Controller/SiteEntityController.php
@@ -22,23 +22,23 @@ class SiteEntityController extends ControllerBase implements ContainerInjectionI
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatter
+   * @var DateFormatter
    */
   protected $dateFormatter;
 
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    */
   protected $renderer;
 
   /**
    * Constructs a new SiteEntityController.
    *
-   * @param \Drupal\Core\Datetime\DateFormatter $date_formatter
+   * @param DateFormatter $date_formatter
    *   The date formatter.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   The renderer.
    */
   public function __construct(DateFormatter $date_formatter, Renderer $renderer) {
@@ -94,7 +94,7 @@ class SiteEntityController extends ControllerBase implements ContainerInjectionI
   /**
    * Generates an overview table of older revisions of a Site entity.
    *
-   * @param \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface $site_entity
+   * @param SiteEntityInterface $site_entity
    *   A Site entity object.
    *
    * @return array
@@ -117,7 +117,7 @@ class SiteEntityController extends ControllerBase implements ContainerInjectionI
     $latest_revision = TRUE;
 
     foreach (array_reverse($vids) as $vid) {
-      /** @var \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface $revision */
+      /** @var SiteEntityInterface $revision */
       $revision = $site_entity_storage->loadRevision($vid);
       $username = [
         '#theme' => 'username',
@@ -133,7 +133,9 @@ class SiteEntityController extends ControllerBase implements ContainerInjectionI
         ]));
       }
       else {
-        $link = $site_entity->link($date);
+        // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+        // Please confirm that `$site_entity` is an instance of `\Drupal\Core\Entity\EntityInterface`. Only the method name and not the class name was checked for this replacement, so this may be a false positive.
+        $link = $site_entity->toLink($date)->toString();
       }
 
       $row = [];
diff --git a/modules/href_lang_exchange_href/src/Entity/SiteEntityInterface.php b/modules/href_lang_exchange_href/src/Entity/SiteEntityInterface.php
index 6db4484..ddd391f 100644
--- a/modules/href_lang_exchange_href/src/Entity/SiteEntityInterface.php
+++ b/modules/href_lang_exchange_href/src/Entity/SiteEntityInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\href_lang_exchange_href\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\RevisionLogInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
@@ -89,7 +90,7 @@ interface SiteEntityInterface extends ContentEntityInterface, RevisionLogInterfa
   /**
    * Gets the Site entity revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
diff --git a/modules/href_lang_exchange_href/src/Form/SiteEntityForm.php b/modules/href_lang_exchange_href/src/Form/SiteEntityForm.php
index 0649788..18d9480 100644
--- a/modules/href_lang_exchange_href/src/Form/SiteEntityForm.php
+++ b/modules/href_lang_exchange_href/src/Form/SiteEntityForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\href_lang_exchange_href\Form;
 
+use Drupal\href_lang_exchange_href\Entity\SiteEntity;
 use Drupal\Component\Datetime\TimeInterface;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Entity\EntityRepositoryInterface;
@@ -20,20 +21,20 @@ class SiteEntityForm extends ContentEntityForm {
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
   /**
    * Constructs a new SiteEntityForm.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $account
+   * @param AccountProxyInterface $account
    *   The current user account.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL, AccountProxyInterface $account) {
@@ -59,7 +60,7 @@ class SiteEntityForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\href_lang_exchange_href\Entity\SiteEntity $entity */
+    /** @var SiteEntity $entity */
     $form = parent::buildForm($form, $form_state);
 
     if (!$this->entity->isNew()) {
diff --git a/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionDeleteForm.php b/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionDeleteForm.php
index 985a8c6..b0bba1c 100644
--- a/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionDeleteForm.php
+++ b/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionDeleteForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\href_lang_exchange_href\Form;
 
+use Drupal\href_lang_exchange_href\Entity\SiteEntityInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\ConfirmFormBase;
@@ -20,30 +21,30 @@ class SiteEntityRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Site entity revision.
    *
-   * @var \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface
+   * @var SiteEntityInterface
    */
   protected $revision;
 
   /**
    * The Site entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $siteEntityStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * Constructs a new SiteEntityRevisionDeleteForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The entity storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(EntityStorageInterface $entity_storage, Connection $connection) {
@@ -74,7 +75,7 @@ class SiteEntityRevisionDeleteForm extends ConfirmFormBase {
    */
   public function getQuestion() {
     return $this->t('Are you sure you want to delete the revision from %revision-date?', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
     ]);
   }
 
@@ -113,7 +114,7 @@ class SiteEntityRevisionDeleteForm extends ConfirmFormBase {
       '%revision' => $this->revision->getRevisionId(),
     ]);
     $this->messenger()->addMessage(t('Revision from %revision-date of Site entity %title has been deleted.', [
-      '%revision-date' => format_date($this->revision->getRevisionCreationTime()),
+      '%revision-date' => \Drupal::service('date.formatter')->format($this->revision->getRevisionCreationTime()),
       '%title' => $this->revision->label(),
     ]));
     $form_state->setRedirect(
diff --git a/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionRevertForm.php b/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionRevertForm.php
index c2e2fec..fd13dbf 100644
--- a/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionRevertForm.php
+++ b/modules/href_lang_exchange_href/src/Form/SiteEntityRevisionRevertForm.php
@@ -21,30 +21,30 @@ class SiteEntityRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Site entity revision.
    *
-   * @var \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface
+   * @var SiteEntityInterface
    */
   protected $revision;
 
   /**
    * The Site entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $siteEntityStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * Constructs a new SiteEntityRevisionRevertForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $entity_storage
+   * @param EntityStorageInterface $entity_storage
    *   The Site entity storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(EntityStorageInterface $entity_storage, DateFormatterInterface $date_formatter) {
@@ -140,12 +140,12 @@ class SiteEntityRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface $revision
+   * @param SiteEntityInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface
+   * @return SiteEntityInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(SiteEntityInterface $revision, FormStateInterface $form_state) {
diff --git a/modules/href_lang_exchange_href/src/Form/SiteEntitySettingsForm.php b/modules/href_lang_exchange_href/src/Form/SiteEntitySettingsForm.php
index cc8e77f..3f8e6d3 100644
--- a/modules/href_lang_exchange_href/src/Form/SiteEntitySettingsForm.php
+++ b/modules/href_lang_exchange_href/src/Form/SiteEntitySettingsForm.php
@@ -27,7 +27,7 @@ class SiteEntitySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class SiteEntitySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/modules/href_lang_exchange_href/src/Helper/CheckAvailabilityService.php b/modules/href_lang_exchange_href/src/Helper/CheckAvailabilityService.php
index d2e7280..d82c4c7 100644
--- a/modules/href_lang_exchange_href/src/Helper/CheckAvailabilityService.php
+++ b/modules/href_lang_exchange_href/src/Helper/CheckAvailabilityService.php
@@ -14,14 +14,14 @@ class CheckAvailabilityService implements CheckAvailabilityInterface {
   /**
    * The http client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * CheckAvailabilityService constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    *   The http client.
    */
   public function __construct(ClientInterface $client) {
diff --git a/modules/href_lang_exchange_href/src/Service/SettingsManager.php b/modules/href_lang_exchange_href/src/Service/SettingsManager.php
index 6858f5b..66fd5b0 100644
--- a/modules/href_lang_exchange_href/src/Service/SettingsManager.php
+++ b/modules/href_lang_exchange_href/src/Service/SettingsManager.php
@@ -15,14 +15,14 @@ class SettingsManager implements SettingsManagerInterface {
   /**
    * The configuration object for site entities.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * Constructs a HTTP basic authentication provider object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(ConfigFactoryInterface $config_factory) {
diff --git a/modules/href_lang_exchange_href/src/Service/SiteManagementService.php b/modules/href_lang_exchange_href/src/Service/SiteManagementService.php
index f906cdd..25c0e46 100644
--- a/modules/href_lang_exchange_href/src/Service/SiteManagementService.php
+++ b/modules/href_lang_exchange_href/src/Service/SiteManagementService.php
@@ -16,23 +16,23 @@ class SiteManagementService implements SiteManagementInterface {
   /**
    * The site entity storage.
    *
-   * @var \Drupal\href_lang_exchange_href\SiteEntityStorageInterface
+   * @var SiteEntityStorageInterface
    */
   protected $storage;
 
   /**
    * The configuration object for site entities.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * SiteManagementService constructor.
    *
-   * @param \Drupal\href_lang_exchange_href\SiteEntityStorageInterface $storage
+   * @param SiteEntityStorageInterface $storage
    *   The storage for this service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
    */
   public function __construct(SiteEntityStorageInterface $storage, ConfigFactoryInterface $config_factory) {
diff --git a/modules/href_lang_exchange_href/src/SiteEntityAccessControlHandler.php b/modules/href_lang_exchange_href/src/SiteEntityAccessControlHandler.php
index f2a1fdd..7ac447b 100644
--- a/modules/href_lang_exchange_href/src/SiteEntityAccessControlHandler.php
+++ b/modules/href_lang_exchange_href/src/SiteEntityAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\href_lang_exchange_href;
 
+use Drupal\href_lang_exchange_href\Entity\SiteEntityInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,8 +19,7 @@ class SiteEntityAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface $entity */
-
+    /** @var SiteEntityInterface $entity */
     switch ($operation) {
 
       case 'view':
diff --git a/modules/href_lang_exchange_href/src/SiteEntityHtmlRouteProvider.php b/modules/href_lang_exchange_href/src/SiteEntityHtmlRouteProvider.php
index 55ce5d4..9a89761 100644
--- a/modules/href_lang_exchange_href/src/SiteEntityHtmlRouteProvider.php
+++ b/modules/href_lang_exchange_href/src/SiteEntityHtmlRouteProvider.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\href_lang_exchange_href;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\Routing\AdminHtmlRouteProvider;
 use Symfony\Component\Routing\Route;
@@ -48,10 +49,10 @@ class SiteEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -72,10 +73,10 @@ class SiteEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -96,10 +97,10 @@ class SiteEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -120,10 +121,10 @@ class SiteEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -144,10 +145,10 @@ class SiteEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
@@ -172,7 +173,7 @@ class SiteEntityHtmlRouteProvider extends AdminHtmlRouteProvider {
     // If the entity type does not provide an admin permission, there is no way
     // to control access, so we cannot provide a route in a sensible way.
     if ($entity_type->hasLinkTemplate('collection') && $entity_type->hasListBuilderClass()) {
-      /** @var \Drupal\Core\StringTranslation\TranslatableMarkup $label */
+      /** @var TranslatableMarkup $label */
       $label = $entity_type->getCollectionLabel();
 
       $route = new Route($entity_type->getLinkTemplate('collection'));
diff --git a/modules/href_lang_exchange_href/src/SiteEntityListBuilder.php b/modules/href_lang_exchange_href/src/SiteEntityListBuilder.php
index 931254a..74f2d27 100644
--- a/modules/href_lang_exchange_href/src/SiteEntityListBuilder.php
+++ b/modules/href_lang_exchange_href/src/SiteEntityListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\href_lang_exchange_href;
 
+use Drupal\href_lang_exchange_href\Entity\SiteEntity;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityStorageInterface;
@@ -20,7 +21,7 @@ class SiteEntityListBuilder extends EntityListBuilder {
   /**
    * The availability checker.
    *
-   * @var \Drupal\href_lang_exchange_href\Helper\CheckAvailabilityInterface
+   * @var CheckAvailabilityInterface
    */
   protected $availabilityService;
 
@@ -38,11 +39,11 @@ class SiteEntityListBuilder extends EntityListBuilder {
   /**
    * Constructs a new EntityListBuilder object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   * @param EntityStorageInterface $storage
    *   The entity storage class.
-   * @param \Drupal\href_lang_exchange_href\Helper\CheckAvailabilityInterface $availability
+   * @param CheckAvailabilityInterface $availability
    *   The availability service.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityStorageInterface $storage, CheckAvailabilityInterface $availability) {
@@ -66,7 +67,7 @@ class SiteEntityListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\href_lang_exchange_href\Entity\SiteEntity $entity */
+    /** @var SiteEntity $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
diff --git a/modules/href_lang_exchange_href/src/SiteEntityStorageInterface.php b/modules/href_lang_exchange_href/src/SiteEntityStorageInterface.php
index 6ebc7c0..3fa5f6e 100644
--- a/modules/href_lang_exchange_href/src/SiteEntityStorageInterface.php
+++ b/modules/href_lang_exchange_href/src/SiteEntityStorageInterface.php
@@ -19,7 +19,7 @@ interface SiteEntityStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Site entity revision IDs for a specific Site entity.
    *
-   * @return \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface[]
+   * @return SiteEntityInterface[]
    *   A list of SiteEntities.
    */
   public function loadAllDestinationSites();
@@ -27,7 +27,7 @@ interface SiteEntityStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Site entity revision IDs for a specific Site entity.
    *
-   * @param \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface $entity
+   * @param SiteEntityInterface $entity
    *   The Site entity entity.
    *
    * @return int[]
@@ -38,7 +38,7 @@ interface SiteEntityStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as Site entity author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -52,7 +52,7 @@ interface SiteEntityStorageInterface extends ContentEntityStorageInterface {
    * @param string $url
    *   The user entity.
    *
-   * @return \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface
+   * @return SiteEntityInterface
    *   The matched SiteEntities.
    */
   public function findNearestUrlPrefixMatch($url);
@@ -60,7 +60,7 @@ interface SiteEntityStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Site entity revision IDs for a specific Site entity.
    *
-   * @return \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface[]
+   * @return SiteEntityInterface[]
    *   A list of SiteEntities.
    */
   public function loadAllPublishedDestinationSites();
@@ -68,7 +68,7 @@ interface SiteEntityStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Site entity revision IDs for a specific Site entity.
    *
-   * @return \Drupal\href_lang_exchange_href\Entity\SiteEntityInterface[]
+   * @return SiteEntityInterface[]
    *   A list of SiteEntities.
    */
   public function loadAllUnpublishedDestinationSites();
diff --git a/src/Connection/Connection.php b/src/Connection/Connection.php
index 1072143..9c3c034 100644
--- a/src/Connection/Connection.php
+++ b/src/Connection/Connection.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\href_lang_exchange\Connection;
 
+use Drupal\href_lang_exchange\Service\SettingsManagerInterface;
+use Drupal\href_lang_exchange\Service\LazyStore;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\href_lang_exchange\Plugin\QueueWorker\HrefLangUpdateQueue;
 use Drupal\href_lang_exchange\Service\NormalLazyStore;
@@ -36,50 +38,50 @@ class Connection implements ConnectionInterface, ResourceInterface {
   /**
    * A Guzzle Client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * A Queue Factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queue;
 
   /**
    * The Psr Logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * A authorization handler.
    *
-   * @var \Drupal\href_lang_exchange\Connection\AuthorizationInterface
+   * @var AuthorizationInterface
    */
   protected $auth;
 
   /**
    * The site manager.
    *
-   * @var \Drupal\href_lang_exchange\Connection\SiteManagementInterface
+   * @var SiteManagementInterface
    */
   protected $siteManagement;
 
   /**
    * Connection constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $client
+   * @param ClientInterface $client
    *   The client interface.
-   * @param \Drupal\Core\Queue\QueueFactory $queue
+   * @param QueueFactory $queue
    *   The client interface.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The psr logger.
-   * @param \Drupal\href_lang_exchange\Connection\AuthorizationInterface $auth
+   * @param AuthorizationInterface $auth
    *   A authorization handler.
-   * @param \Drupal\href_lang_exchange\Connection\SiteManagementInterface $site_management
+   * @param SiteManagementInterface $site_management
    *   A site manager.
    */
   public function __construct(ClientInterface $client, QueueFactory $queue, LoggerInterface $logger, AuthorizationInterface $auth, SiteManagementInterface $site_management) {
@@ -241,7 +243,7 @@ class Connection implements ConnectionInterface, ResourceInterface {
    */
   public function deleteHrefLangItemAsync($url, array $values) {
     $lazy_store = \Drupal::service('href_lang_exchange.service.lazy_store');
-    /** @var \Drupal\href_lang_exchange\Service\SettingsManagerInterface $settings_manager */
+    /** @var SettingsManagerInterface $settings_manager */
     $settings_manager = \Drupal::service('href_lang_exchange.helper.settings_manager');
     $lazy_store->addItem(new NormalLazyStore($this, 'deleteHrefLangItem', [
       $url,
@@ -323,9 +325,9 @@ class Connection implements ConnectionInterface, ResourceInterface {
    * {@inheritDoc}
    */
   public function createHrefLangItemAsync($url, array $values) {
-    /** @var \Drupal\href_lang_exchange\Service\LazyStore $lazy_store */
+    /** @var LazyStore $lazy_store */
     $lazy_store = \Drupal::service('href_lang_exchange.service.lazy_store');
-    /** @var \Drupal\href_lang_exchange\Service\SettingsManagerInterface $settings_manager */
+    /** @var SettingsManagerInterface $settings_manager */
     $settings_manager = \Drupal::service('href_lang_exchange.helper.settings_manager');
     // You can set it to queue only.
     $lazy_store->addToStore($this, 'createHrefLangItem', [
@@ -385,7 +387,7 @@ class Connection implements ConnectionInterface, ResourceInterface {
     $url->setAbsolute(TRUE);
     $url->toString();
 
-    /** @var \Drupal\href_lang_exchange\Entity\HrefLangItem $href_lang_item */
+    /** @var HrefLangItem $href_lang_item */
     $href_lang_item = HrefLangItem::create([
       'gid' => $gid,
       'region' => $country,
@@ -411,7 +413,7 @@ class Connection implements ConnectionInterface, ResourceInterface {
   /**
    * This method create a internal id.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The base entity.
    *
    * @return string
@@ -475,7 +477,7 @@ class Connection implements ConnectionInterface, ResourceInterface {
   /**
    * A handler for exception.
    *
-   * @param \GuzzleHttp\Exception\RequestException $e
+   * @param RequestException $e
    *   A Guzzle Exception.
    * @param string[] $ignore
    *   Allow to ignore some status codes.
diff --git a/src/Connection/ConnectionInterface.php b/src/Connection/ConnectionInterface.php
index 5479ca3..55b6906 100644
--- a/src/Connection/ConnectionInterface.php
+++ b/src/Connection/ConnectionInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\href_lang_exchange\Connection;
 
+use Drupal\href_lang_exchange\Entity\HrefLangItem;
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
@@ -64,15 +67,15 @@ interface ConnectionInterface {
   /**
    * This method create a href lang item from a entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The base entity.
    * @param string $gid
    *   The group id.
    *
-   * @return \Drupal\href_lang_exchange\Entity\HrefLangItem
+   * @return HrefLangItem
    *   A href lang item from the base entity values.
    *
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function createHrefLangItemFromEntity(EntityInterface $entity, $gid);
 
@@ -119,12 +122,12 @@ interface ConnectionInterface {
   /**
    * Search for a field in a Entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity you should look in.
    * @param string $field_name
    *   The name of the field that should be found.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface|null
+   * @return FieldDefinitionInterface|null
    *   Return a field definition or null.
    */
   public function getEntityField(EntityInterface $entity, $field_name);
diff --git a/src/Connection/SendValidator.php b/src/Connection/SendValidator.php
index e59e0fb..e150141 100644
--- a/src/Connection/SendValidator.php
+++ b/src/Connection/SendValidator.php
@@ -17,41 +17,41 @@ class SendValidator implements SendValidatorInterface {
   /**
    * The connection object.
    *
-   * @var \Drupal\href_lang_exchange\Connection\ConnectionInterface
+   * @var ConnectionInterface
    */
   protected $connection;
 
   /**
    * The request manager.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $request;
 
   /**
    * The route matcher.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatcher;
 
   /**
    * The resource manager.
    *
-   * @var \Drupal\href_lang_exchange\Connection\ResourceInterface
+   * @var ResourceInterface
    */
   protected $resourceManager;
 
   /**
    * SendValidator constructor.
    *
-   * @param \Drupal\href_lang_exchange\Connection\ConnectionInterface $connection
+   * @param ConnectionInterface $connection
    *   The connection object.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request
+   * @param RequestStack $request
    *   The request manager.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_matcher
+   * @param RouteMatchInterface $route_matcher
    *   The route matcher.
-   * @param \Drupal\href_lang_exchange\Connection\ResourceInterface $resource_manager
+   * @param ResourceInterface $resource_manager
    *   The resource manager.
    */
   public function __construct(ConnectionInterface $connection, RequestStack $request, RouteMatchInterface $route_matcher, ResourceInterface $resource_manager) {
diff --git a/src/Connection/SendValidatorInterface.php b/src/Connection/SendValidatorInterface.php
index f389138..4c359ec 100644
--- a/src/Connection/SendValidatorInterface.php
+++ b/src/Connection/SendValidatorInterface.php
@@ -14,7 +14,7 @@ interface SendValidatorInterface {
   /**
    * This method check if the current request a json api request.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current validation should operate upon.
    *
    * @return bool
@@ -25,7 +25,7 @@ interface SendValidatorInterface {
   /**
    * This method check if the request come from the form edit of href lang.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current validation should operate upon.
    *
    * @return bool
@@ -36,7 +36,7 @@ interface SendValidatorInterface {
   /**
    * This method check if the request come from the form add of href lang.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current validation should operate upon.
    *
    * @return bool
diff --git a/src/Connection/SiteManagementInterface.php b/src/Connection/SiteManagementInterface.php
index 62bbbca..53d72f3 100644
--- a/src/Connection/SiteManagementInterface.php
+++ b/src/Connection/SiteManagementInterface.php
@@ -12,7 +12,7 @@ interface SiteManagementInterface {
   /**
    * This method return a list of all destination sites.
    *
-   * @return \Drupal\href_lang_exchange\Connection\SiteInterface[]
+   * @return SiteInterface[]
    *   A list of destination/slave sites.
    */
   public function getAllDestinationSites();
@@ -20,7 +20,7 @@ interface SiteManagementInterface {
   /**
    * The method  must return the master site.
    *
-   * @return \Drupal\href_lang_exchange\Connection\SiteInterface
+   * @return SiteInterface
    *   Return the master sites.
    */
   public function getMasterSite();
diff --git a/src/Controller/JSONAPIEntityAutocompleteController.php b/src/Controller/JSONAPIEntityAutocompleteController.php
index 248decc..bae4f67 100644
--- a/src/Controller/JSONAPIEntityAutocompleteController.php
+++ b/src/Controller/JSONAPIEntityAutocompleteController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\href_lang_exchange\Controller;
 
+use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
+use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
+use Drupal\href_lang_exchange\Entity\HrefLangItem;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Component\Utility\Tags;
 use Drupal\Core\Controller\ControllerBase;
@@ -21,41 +24,41 @@ class JSONAPIEntityAutocompleteController extends ControllerBase {
   /**
    * The JSON:API serializer.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface|\Symfony\Component\Serializer\Normalizer\DenormalizerInterface
+   * @var SerializerInterface|DenormalizerInterface
    */
   protected $serializer;
 
   /**
    * A Connection instance.
    *
-   * @var \Drupal\href_lang_exchange\Connection\ConnectionInterface
+   * @var ConnectionInterface
    */
   protected $connection;
 
   /**
    * The hreflangitem storage engine.
    *
-   * @var \Drupal\href_lang_exchange\HrefLangItemStorageInterface
+   * @var HrefLangItemStorageInterface
    */
   protected $storage;
 
   /**
    * The module handler to create hooks.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * Constructs a EntityAutocompleteController object.
    *
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param SerializerInterface $serializer
    *   The JSON:API serializer.
-   * @param \Drupal\href_lang_exchange\Connection\ConnectionInterface $connection
+   * @param ConnectionInterface $connection
    *   A Connection instance.
-   * @param \Drupal\href_lang_exchange\HrefLangItemStorageInterface $storage
+   * @param HrefLangItemStorageInterface $storage
    *   The storage for the href lang items.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(SerializerInterface $serializer, ConnectionInterface $connection, HrefLangItemStorageInterface $storage, ModuleHandlerInterface $module_handler) {
@@ -83,13 +86,13 @@ class JSONAPIEntityAutocompleteController extends ControllerBase {
   /**
    * Autocomplete the label of an entity.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object that contains the typed tags.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The matched entity labels as a JSON response.
    *
-   * @throws \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException
+   * @throws AccessDeniedHttpException
    *   Thrown if the selection settings key is not found in the key/value store
    *   or if it does not match the stored data.
    */
@@ -120,7 +123,7 @@ class JSONAPIEntityAutocompleteController extends ControllerBase {
 
       $result = $query->execute();
 
-      /** @var \Drupal\href_lang_exchange\Entity\HrefLangItem[] $resultes */
+      /** @var HrefLangItem[] $resultes */
       $resultes = $this->storage->loadMultiple($result);
       $languages = LanguageManager::getStandardLanguageList();
       foreach ($resultes as $entity) {
@@ -167,7 +170,7 @@ class JSONAPIEntityAutocompleteController extends ControllerBase {
   /**
    * Return all languages that currently exist as href lang item.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The Response.
    */
   public function handleSearchFacet() {
diff --git a/src/EventSubscriber/LazyHrefItemSubscriber.php b/src/EventSubscriber/LazyHrefItemSubscriber.php
index 2794e32..05529d0 100644
--- a/src/EventSubscriber/LazyHrefItemSubscriber.php
+++ b/src/EventSubscriber/LazyHrefItemSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\href_lang_exchange\EventSubscriber;
 
+use Psr\Log\LoggerInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\href_lang_exchange\Service\LazyStoreInterface;
@@ -20,32 +21,32 @@ class LazyHrefItemSubscriber implements EventSubscriberInterface {
   /**
    * The lazy store.
    *
-   * @var \Drupal\href_lang_exchange\Service\LazyStoreInterface
+   * @var LazyStoreInterface
    */
   protected $lazyStore;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The logger.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * LazyHrefItemSubscriber constructor.
    *
-   * @param \Drupal\href_lang_exchange\Service\LazyStoreInterface $lazy_store
+   * @param LazyStoreInterface $lazy_store
    *   The lazy store.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactory $logger
+   * @param LoggerChannelFactory $logger
    *   The logger.
    */
   public function __construct(LazyStoreInterface $lazy_store, EntityTypeManagerInterface $entity_type_manager, LoggerChannelFactory $logger) {
