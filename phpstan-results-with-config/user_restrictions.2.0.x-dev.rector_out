modules/contrib/user_restrictions/src/Annotation/UserRestrictionType.php
modules/contrib/user_restrictions/src/Entity/UserRestrictionInterface.php
modules/contrib/user_restrictions/src/Entity/UserRestrictions.php
modules/contrib/user_restrictions/src/Form/UserRestrictionsAddForm.php
modules/contrib/user_restrictions/src/Form/UserRestrictionsDeleteForm.php
modules/contrib/user_restrictions/src/Form/UserRestrictionsEditForm.php
modules/contrib/user_restrictions/src/Form/UserRestrictionsFormBase.php
modules/contrib/user_restrictions/src/Form/UserRestrictionsReviewForm.php
modules/contrib/user_restrictions/src/Plugin/UserRestrictionType/ClientIp.php
modules/contrib/user_restrictions/src/Plugin/UserRestrictionType/Email.php
modules/contrib/user_restrictions/src/Plugin/UserRestrictionType/Name.php
modules/contrib/user_restrictions/src/Plugin/UserRestrictionType/UserRestrictionTypeBase.php
modules/contrib/user_restrictions/src/Plugin/UserRestrictionTypeInterface.php
modules/contrib/user_restrictions/src/UserRestrictionTypeManager.php
modules/contrib/user_restrictions/src/UserRestrictionTypeManagerInterface.php
modules/contrib/user_restrictions/src/UserRestrictionsListBuilder.php
modules/contrib/user_restrictions/src/UserRestrictionsManager.php
modules/contrib/user_restrictions/src/UserRestrictionsManagerInterface.php
modules/contrib/user_restrictions/tests/src/Functional/UserRestrictionsBasicTest.php
modules/contrib/user_restrictions/tests/src/Functional/UserRestrictionsExpireTest.php
modules/contrib/user_restrictions/tests/src/Functional/UserRestrictionsLoginTest.php
modules/contrib/user_restrictions/tests/src/Functional/UserRestrictionsTestBase.php
modules/contrib/user_restrictions/user_restrictions.module

14 files with changes
=====================

1) modules/contrib/user_restrictions/user_restrictions.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\user_restrictions\UserRestrictionsManagerInterface;
 /**
  * @file
  * Specifies rules for restricting the data users can set for their accounts.
@@ @@
  *
  * @param array $form
  *   Nested array of form elements that comprise the form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The current state of the form.
  */
 function user_restrictions_validate(array $form, FormStateInterface $form_state) {
@@ @@
     }
   }

-  /** @var Drupal\user_restrictions\UserRestrictionsManagerInterface $restriction_manager */
+  /** @var UserRestrictionsManagerInterface $restriction_manager */
   $restriction_manager = \Drupal::service('user_restrictions.manager');

   if ($restriction_manager->matchesRestrictions($form_state->getValues())) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/user_restrictions/tests/src/Functional/UserRestrictionsTestBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\user_restrictions\Functional;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Tests\user_restrictions\Functional\Drupal\user\UserInterface;
 use Drupal\Tests\BrowserTestBase;

 abstract class UserRestrictionsTestBase extends BrowserTestBase {
@@ @@
   /**
    * The restriction storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $storage;

@@ @@
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     $this->storage = \Drupal::service('entity_type.manager')
@@ @@
       ->getStorage('user_restrictions');

     // Allow registration by site visitors without administrator approval.
-    \Drupal::configFactory()->getEditable('user.settings')->set('register', Drupal\user\UserInterface::REGISTER_VISITORS)->save();
+    \Drupal::configFactory()->getEditable('user.settings')->set('register', UserInterface::REGISTER_VISITORS)->save();
   }

 }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/user_restrictions/tests/src/Functional/UserRestrictionsLoginTest.php:25

    ---------- begin diff ----------
@@ @@
     $edit = [];
     $edit['name'] = $name;
     $edit['mail'] = $this->randomMachineName() . '@example.com';
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
     $text = (string) new FormattableMarkup('The name <em class="placeholder">@name</em> is reserved, and cannot be used.', ['@name' => $name]);
-    $this->assertRaw((string) $text, 'User "name" restricted.');
+    $this->assertSession()->responseContains((string) $text);
   }

   /**
@@ @@
     $edit = [];
     $edit['name'] = 'lolcats';
     $edit['mail'] = $this->randomMachineName() . '@example.com';
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('A welcome message with further instructions has been sent to your email address.'), 'User registered successfully.');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('A welcome message with further instructions has been sent to your email address.'));
   }

   /**
@@ @@
     $edit = [];
     $edit['name'] = $this->randomMachineName();
     $edit['mail'] = $mail;
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
     $text = (string) new FormattableMarkup('The email <em class="placeholder">@mail</em> is reserved, and cannot be used.', ['@mail' => $mail]);
-    $this->assertRaw((string) $text, 'User "email" restricted.');
+    $this->assertSession()->responseContains((string) $text);
   }

   /**
@@ @@
     $edit = [];
     $edit['name'] = $this->randomMachineName();
     $edit['mail'] = 'typhonius@mail.ru';
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('A welcome message with further instructions has been sent to your email address.'), 'User registered successfully.');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('A welcome message with further instructions has been sent to your email address.'));
   }

   /**
@@ @@
     $edit = [];
     $edit['name'] = 'ilikecoffee';
     $edit['mail'] = $mail;
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
-    $this->assertText(t('A welcome message with further instructions has been sent to your email address.'), 'User registered successfully.');
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains(t('A welcome message with further instructions has been sent to your email address.'));
   }

   /**
@@ @@
     $edit = [];
     $edit['name'] = $name;
     $edit['mail'] = $this->randomMachineName() . '@' . $this->randomMachineName() . '.com';
-    $this->drupalPostForm('user/register', $edit, t('Create new account'));
+    $this->drupalGet('user/register');
+    $this->submitForm($edit, t('Create new account'));
     $text = (string) new FormattableMarkup('The name <em class="placeholder">@name</em> is reserved, and cannot be used.', ['@name' => $name]);
-    $this->assertRaw((string) $text, 'User "name" restricted.');
+    $this->assertSession()->responseContains((string) $text);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertRawRector
 * AssertTextRector
 * UiHelperTraitDrupalPostFormRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


4) modules/contrib/user_restrictions/tests/src/Functional/UserRestrictionsExpireTest.php:23

    ---------- begin diff ----------
@@ @@
   public function testUserRestrictionsRecordExists() {
     $restriction = $this->storage->load($this->id);
     $this->assertNotNull($restriction, 'User Restriction exists in the database');
-    $this->assertEqual($restriction->label(), $this->name, 'User restriction exists');
+    $this->assertEquals($restriction->label(), $this->name, 'User restriction exists');
   }

   /**
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


5) modules/contrib/user_restrictions/tests/src/Functional/UserRestrictionsBasicTest.php:40

    ---------- begin diff ----------
@@ @@
   public function testUserRestrictionsRecordExists() {
     $restriction = $this->storage->load($this->id);
     $this->assertTrue($restriction, 'User restriction exists in the database');
-    $this->assertEqual($restriction->label(), $this->label, 'User restriction name matches');
-    $this->assertEqual($restriction->getRuleType(), $this->type, 'User restriction type matches');
+    $this->assertEquals($restriction->label(), $this->label, 'User restriction name matches');
+    $this->assertEquals($restriction->getRuleType(), $this->type, 'User restriction type matches');
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


6) modules/contrib/user_restrictions/src/UserRestrictionsManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\user_restrictions;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\user_restrictions\Plugin\UserRestrictionTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\user_restrictions\Entity\UserRestrictions;
@@ @@
   /**
    * The entity storage interfacce.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
   /**
    * The type manager interfacce.
    *
-   * @var \Drupal\user_restrictions\UserRestrictionTypeManagerInterface
+   * @var UserRestrictionTypeManagerInterface
    */
   protected $typeManager;

@@ @@
   /**
    * The logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * Constructs a UserRestrictionsManager object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_manager
+   * @param EntityTypeManagerInterface $entity_manager
    *   The entity storage.
-   * @param \Drupal\user_restrictions\UserRestrictionTypeManagerInterface $type_manager
+   * @param UserRestrictionTypeManagerInterface $type_manager
    *   The user restriction type manager.
-   * @param Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The user_restrictions logger channel.
    */
   public function __construct(EntityTypeManagerInterface $entity_manager, UserRestrictionTypeManagerInterface $type_manager, LoggerInterface $logger) {
@@ @@
    * {@inheritdoc}
    */
   public function matchesRestrictions(array $data) {
-    /** @var \Drupal\user_restrictions\Plugin\UserRestrictionTypeInterface $type */
+    /** @var UserRestrictionTypeInterface $type */
     foreach ($this->typeManager->getTypes() as $key => $type) {
       if ($type->matches($data)) {
         $this->setError($key, $type->getErrorMessage());
@@ @@
    * @param string $message
    *   Error message.
    *
-   * @return \Drupal\user_restrictions\UserRestrictionsManagerInterface
+   * @return UserRestrictionsManagerInterface
    *   The service for chaining.
    */
   protected function setError($type, $message) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/user_restrictions/src/UserRestrictionsListBuilder.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The user restriction type manager.
    *
-   * @var \Drupal\user_restrictions\UserRestrictionTypeManagerInterface
+   * @var UserRestrictionTypeManagerInterface
    */
   protected $typeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/user_restrictions/src/UserRestrictionTypeManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\user_restrictions;

+use Drupal\user_restrictions\Plugin\UserRestrictionTypeInterface;
 /**
  * Defines the interface for the UserRestrictionTypeManager.
  */
@@ @@
   /**
    * Get a list of all registered plugin instances.
    *
-   * @return \Drupal\user_restrictions\Plugin\UserRestrictionTypeInterface[]
+   * @return UserRestrictionTypeInterface[]
    *   List of UserRestrictionType plugin instances.
    */
   public function getTypes();
@@ @@
    * @param string $id
    *   The plugin ID.
    *
-   * @return \Drupal\user_restrictions\Plugin\UserRestrictionTypeInterface
+   * @return UserRestrictionTypeInterface
    *   The UserRestrictionType plugin instance.
    */
   public function getType($id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/user_restrictions/src/UserRestrictionTypeManager.php:22

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/user_restrictions/src/Plugin/UserRestrictionType/UserRestrictionTypeBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\user_restrictions\Plugin\UserRestrictionType;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ @@
   /**
    * The entity storage interfacce.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityStorage;

@@ @@
   /**
    * The logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
    * @param string $value
    *   String to check against all restrictions of the type.
    *
-   * @return bool|\Drupal\user_restrictions\Entity\UserRestrictions
+   * @return bool|UserRestrictions
    *   The restriction entity if the value matches one of the restrictions,
    *   FALSE otherwise.
    */
@@ @@

     if (!empty($exact_rules)) {
       // Simply take the first matching rule as we have no weight (yet).
-      /** @var \Drupal\user_restrictions\Entity\UserRestrictions $rule */
+      /** @var UserRestrictions $rule */
       $rule = reset($exact_rules);
       return ($rule->getAccessType() === UserRestrictions::BLACKLIST) ? $rule : FALSE;
     }
@@ @@

     // Set the return variable to FALSE to allow by default.
     $return = FALSE;
-    /** @var \Drupal\user_restrictions\Entity\UserRestrictions $rule */
+    /** @var UserRestrictions $rule */
     foreach ($rules as $rule) {
       if (preg_match('/' . $rule->getPattern() . '/i', $value)) {
         // Exit loop after first whitelisted pattern.
@@ @@
     if (empty($rules)) {
       return [];
     }
-    /** @var \Drupal\user_restrictions\Entity\UserRestrictions $rule */
+    /** @var UserRestrictions $rule */
     foreach ($rules as $id => $rule) {
       $this->patterns[$id] = $rule->getPattern();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/user_restrictions/src/Plugin/UserRestrictionType/ClientIp.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/user_restrictions/src/Form/UserRestrictionsReviewForm.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The user restriction type manager.
    *
-   * @var \Drupal\user_restrictions\UserRestrictionTypeManagerInterface
+   * @var UserRestrictionTypeManagerInterface
    */
   protected $typeManager;

@@ @@
   /**
    * Constructs a new UserRestrictionsReviewForm instance.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\user_restrictions\UserRestrictionTypeManagerInterface $type_manager
+   * @param UserRestrictionTypeManagerInterface $type_manager
    *   The user restriction type manager.
    */
   public function __construct(Connection $connection, UserRestrictionTypeManagerInterface $type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/user_restrictions/src/Form/UserRestrictionsFormBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\user_restrictions\Form;

+use Drupal\user_restrictions\UserRestrictionTypeManagerInterface;
 use Drupal\Core\Datetime\DrupalDateTime;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The entity being used by this form.
    *
-   * @var \Drupal\user_restrictions\Entity\UserRestrictions
+   * @var UserRestrictions
    */
   protected $entity;

@@ @@
    * {@inheritdoc}
    */
   public function form(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\user_restrictions\UserRestrictionTypeManagerInterface $type_manager */
+    /** @var UserRestrictionTypeManagerInterface $type_manager */
     $type_manager = \Drupal::service('user_restrictions.type_manager');

     $form['label'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/user_restrictions/src/Annotation/UserRestrictionType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\user_restrictions\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@

   /**
    * The label of the plugin.
-
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 14 files have been changed by Rector                                      

