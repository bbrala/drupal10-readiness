diff --git a/composer.json b/composer.json
index a817500..4a7839d 100644
--- a/composer.json
+++ b/composer.json
@@ -18,6 +18,6 @@
     }
   ],
   "require": {
-    "drupal/core": "^8 || ^9"
+    "drupal/core": "^9.3 || ^10"
   }
 }
diff --git a/quick_data.info.yml b/quick_data.info.yml
index 195f9cc..768718f 100644
--- a/quick_data.info.yml
+++ b/quick_data.info.yml
@@ -1,7 +1,7 @@
 name: 'Quick add field data'
 type: module
 description: 'Quick add field data'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: 'Fields'
 dependencies:
   - field_ui
diff --git a/quick_data.module b/quick_data.module
index f1176b2..c8d2a80 100644
--- a/quick_data.module
+++ b/quick_data.module
@@ -1,5 +1,7 @@
 <?php
 
+use Drupal\node\Entity\NodeType;
+use Drupal\taxonomy\Entity\Vocabulary;
 /**
  * @file
  * Contains quick_data.module.
@@ -11,7 +13,7 @@ use Drupal\Core\Routing\RouteMatchInterface;
  * Implements hook_help().
  *
  * @param $route_name
- * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+ * @param RouteMatchInterface $route_match
  *
  * @return
  */
@@ -19,18 +21,18 @@ function quick_data_help($route_name, RouteMatchInterface $route_match) {
   switch ($route_name) {
     // Main module help for the quick_data module.
     case 'help.page.quick_data':
-      $node_types = \Drupal\node\Entity\NodeType::loadMultiple();
+      $node_types = NodeType::loadMultiple();
       // If you need to display them in a drop down:
       $options = [];
       foreach ($node_types as $node_type) {
         $options[$node_type->id()] = $node_type->label();
       }
-      $vocabularies = \Drupal\taxonomy\Entity\Vocabulary::loadMultiple();
+      $vocabularies = Vocabulary::loadMultiple();
       foreach ($vocabularies as $vid => $vocabulary) {
         $taxonomy_term[$vid] = $vocabulary->get('name');
       }
       include_once \Drupal::root() . '/core/themes/engines/twig/twig.engine';
-      return twig_render_template(drupal_get_path('module', 'quick_data') . '/templates/help-body.html.twig', array(
+      return twig_render_template(\Drupal::service('extension.list.module')->getPath('quick_data') . '/templates/help-body.html.twig', array(
         'content_types' => $options,
         'taxonomy_term' => $taxonomy_term,
         'theme_hook_original' => 'not-applicable',
diff --git a/src/Form/QuickDataForm.php b/src/Form/QuickDataForm.php
index ab8acee..e95df1c 100644
--- a/src/Form/QuickDataForm.php
+++ b/src/Form/QuickDataForm.php
@@ -38,7 +38,7 @@ class QuickDataForm extends FormBase {
   /**
    * Store factory.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $tempStoreFactory;
 
@@ -52,14 +52,14 @@ class QuickDataForm extends FormBase {
   /**
    * DI entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * DI definition.
    *
-   * @var \Drupal\Core\Field\FieldTypePluginManagerInterface
+   * @var FieldTypePluginManagerInterface
    */
   private $fieldTypePluginDefinition;
 
@@ -1040,7 +1040,7 @@ class QuickDataForm extends FormBase {
   public function getDefaultWidget($field_type, $default = "default_widget") {
     $field_widget_type = FALSE;
     if (empty($this->fieldTypePluginDefinition)) {
-      /** @var \Drupal\Core\Field\FieldTypePluginManagerInterface $field_type_manager */
+      /** @var FieldTypePluginManagerInterface $field_type_manager */
       $this->fieldTypePluginDefinition = \Drupal::service('plugin.manager.field.field_type');
     }
     $definition = $this->fieldTypePluginDefinition->getDefinitions();
@@ -1391,7 +1391,7 @@ class QuickDataForm extends FormBase {
       $url = $entityView->toUrl('edit-form');
       $view_table = Link::fromTextAndUrl($bundle, $url)->toRenderable();
       \Drupal::messenger()->addMessage(
-            t("Views %viewname already exists", ['%viewname' => render($view_table)]),
+            t("Views %viewname already exists", ['%viewname' => \Drupal::service('renderer')->render($view_table)]),
             'error'
         );
       return;
@@ -1457,7 +1457,7 @@ class QuickDataForm extends FormBase {
       $url = $entityView->toUrl('edit-form');
       $view_table = Link::fromTextAndUrl($bundle, $url)->toRenderable();
       \Drupal::messenger()->addMessage(
-            t("Create new Views %viewname", ['%viewname' => render($view_table)]),
+            t("Create new Views %viewname", ['%viewname' => \Drupal::service('renderer')->render($view_table)]),
             'status',
             TRUE
         );
@@ -1531,7 +1531,7 @@ class QuickDataForm extends FormBase {
       $url = $entityView->toUrl('edit-form');
       $view_table = Link::fromTextAndUrl($table_name, $url)->toRenderable();
       \Drupal::messenger()->addMessage(
-            t("Views %viewname already exists", ['%viewname' => render($view_table)]),
+            t("Views %viewname already exists", ['%viewname' => \Drupal::service('renderer')->render($view_table)]),
             'error'
         );
       return;
@@ -1560,7 +1560,7 @@ class QuickDataForm extends FormBase {
     $url = Url::fromRoute('view_custom_table.edittablerelations', ['table_name' => $table_name]);
     $edit_relations = Link::fromTextAndUrl($table_name, $url)->toRenderable();
     \Drupal::messenger()
-      ->addMessage($this->t('Please add relations %relation Edit Custom Table Relations', ['%relation' => render($edit_relations)]), 'warning');
+      ->addMessage($this->t('Please add relations %relation Edit Custom Table Relations', ['%relation' => \Drupal::service('renderer')->render($edit_relations)]), 'warning');
 
     $view = $this->config('quick_data.views_custom_data.default')->getRawData();
     unset($view["dependencies"]);
@@ -1587,7 +1587,7 @@ class QuickDataForm extends FormBase {
       $url = $entityView->toUrl('edit-form');
       $view_table = Link::fromTextAndUrl($table_name, $url)->toRenderable();
       \Drupal::messenger()->addMessage(
-            t("Create new Views %viewname", ['%viewname' => render($view_table)]),
+            t("Create new Views %viewname", ['%viewname' => \Drupal::service('renderer')->render($view_table)]),
             'status',
             TRUE
         );
@@ -1603,7 +1603,7 @@ class QuickDataForm extends FormBase {
       $url = $entityFeed->toUrl('edit-form');
       $feeds_table = Link::fromTextAndUrl($bundle, $url)->toRenderable();
       \Drupal::messenger()->addMessage(
-            t("Feeds %feedsname already exists", ['%feedsname' => render($feeds_table)]),
+            t("Feeds %feedsname already exists", ['%feedsname' => \Drupal::service('renderer')->render($feeds_table)]),
             'error'
         );
       return;
@@ -1676,7 +1676,7 @@ class QuickDataForm extends FormBase {
       $url = $entityFeed->toUrl('edit-form');
       $feeds_table = Link::fromTextAndUrl($bundle, $url)->toRenderable();
       \Drupal::messenger()->addMessage(
-            t("Create new Feed %feedsname", ['%feedsname' => render($feeds_table)]),
+            t("Create new Feed %feedsname", ['%feedsname' => \Drupal::service('renderer')->render($feeds_table)]),
             'status',
             TRUE
         );
@@ -1743,7 +1743,7 @@ class QuickDataForm extends FormBase {
       $url = Url::fromUri('internal:/admin/config/search/search-api/server/' . $bundle . '/edit');
       $serverapi = Link::fromTextAndUrl($name, $url)->toRenderable();
       \Drupal::messenger()->addMessage(
-            t("Create new search server %serverapi", ['%serverapi' => render($serverapi)]),
+            t("Create new search server %serverapi", ['%serverapi' => \Drupal::service('renderer')->render($serverapi)]),
             'status',
             TRUE
         );
@@ -1778,7 +1778,7 @@ class QuickDataForm extends FormBase {
     $url = Url::fromUri('internal:/admin/config/search/search-api/index/' . $bundle . '/edit');
     $serverapiIndex = Link::fromTextAndUrl($name, $url)->toRenderable();
     \Drupal::messenger()->addMessage(
-          t("Create new search index%serverapi", ['%serverapi' => render($serverapiIndex)]),
+          t("Create new search index%serverapi", ['%serverapi' => \Drupal::service('renderer')->render($serverapiIndex)]),
           'status',
           TRUE
       );
diff --git a/src/Form/QuickDataImportForm.php b/src/Form/QuickDataImportForm.php
index 8ea5457..475fcf9 100644
--- a/src/Form/QuickDataImportForm.php
+++ b/src/Form/QuickDataImportForm.php
@@ -35,7 +35,7 @@ class QuickDataImportForm extends FormBase {
   /**
    * Current User.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   private $currentUser;
 
@@ -668,7 +668,9 @@ class QuickDataImportForm extends FormBase {
 
         case 'data':
           if (!empty($table_field)) {
-            $nid = db_insert($store['bundle'])
+            // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+            // You will need to use `\Drupal\core\Database\Database::getConnection()` if you do not yet have access to the container here.
+            $nid = \Drupal::database()->insert($store['bundle'])
               ->fields($table_field)
               ->execute();
           }
@@ -803,7 +805,7 @@ class QuickDataImportForm extends FormBase {
                   $folder = $field_info["settings"]["file_directory"];
                 }
                 $filePublic = $public . $folder . DIRECTORY_SEPARATOR . $filename;
-                $file = file_save_data($data, $filePublic);
+                $file = \Drupal::service('file.repository')->writeData($data, $filePublic);
                 $value = $file->id();
               }
             }
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index c9c3206..199a638 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\quick_data\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,14 +23,14 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
