diff --git a/aet.info.yml b/aet.info.yml
index 75e5bc4..52d3d84 100644
--- a/aet.info.yml
+++ b/aet.info.yml
@@ -1,7 +1,7 @@
 name: Advanced Entity Tokens
 description: Reveals all of Drupal's entities to the token system by using their IDs
 type: module
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: Token
 dependencies:
   - drupal:token
diff --git a/aet.module b/aet.module
index c82fc37..4bd4d62 100644
--- a/aet.module
+++ b/aet.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\EntityType;
 /**
  * @file
  * The AET main module file.
@@ -29,7 +30,7 @@ function aet_token_info() {
   // Looping the entity information array to add the token types.
   foreach ($entities as $entity_type => $entity_info) {
 
-    /** @var \Drupal\Core\Entity\EntityType $entity_info */
+    /** @var EntityType $entity_info */
     $token_type = $entity_info->get('additional')['token_type'] ?: $entity_type;
 
     if (empty($info['types'])) {
diff --git a/composer.json b/composer.json
index 00ca84a..cfca6c0 100644
--- a/composer.json
+++ b/composer.json
@@ -12,7 +12,7 @@
   "prefer-stable": true,
   "require": {
     "drupal/token": "^1.7",
-    "drupal/core": "^8.8 || ^9"
+    "drupal/core": "^9.3 || ^10"
   },
   "require-dev": {
     "drupal/token_filter": "^1.2"
diff --git a/src/TokenReplacer.php b/src/TokenReplacer.php
index 879d629..b0012f1 100644
--- a/src/TokenReplacer.php
+++ b/src/TokenReplacer.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\aet;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Uuid\Uuid;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -20,42 +24,42 @@ class TokenReplacer {
   /**
    * The token service.
    *
-   * @var \Drupal\token\Token
+   * @var Token
    */
   protected $tokenService;
 
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity display repository service.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The current-user service.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * This module's logging service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
 
@@ -69,22 +73,22 @@ class TokenReplacer {
   /**
    * The bubbleable metadata we're working with.
    *
-   * @var \Drupal\Core\Render\BubbleableMetadata
+   * @var BubbleableMetadata
    */
   protected $bubbleableMetadata;
 
   /**
    * TokenReplacer constructor.
    *
-   * @param \Drupal\token\Token $token_service
+   * @param Token $token_service
    *   The token service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository service.
-   * @param \Drupal\Core\Session\AccountProxyInterface $current_user
+   * @param AccountProxyInterface $current_user
    *   The current-user service.
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   This module's logging service.
    * @param EntityRepositoryInterface $entity_repository
    *   The entity repository service.
@@ -163,7 +167,7 @@ class TokenReplacer {
    *
    * It's necessary to call this method before any other non-static methods.
    *
-   * @param \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata
+   * @param BubbleableMetadata $bubbleable_metadata
    *   The bubbleable metadata.
    *
    * @return $this
@@ -179,7 +183,7 @@ class TokenReplacer {
   /**
    * Fetches the bubbleable metadata currently in use by the service.
    *
-   * @return \Drupal\Core\Render\BubbleableMetadata
+   * @return BubbleableMetadata
    *   The bubbleable metadata.
    *
    * @throws \Exception
@@ -203,8 +207,8 @@ class TokenReplacer {
    * @return array
    *   The replacements.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getReplacements(array $tokens) {
     $replacements = [];
@@ -233,8 +237,8 @@ class TokenReplacer {
    * @return array
    *   The replacements.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getReplacementsForTokenType(string $token_type, array $tokens) {
     list($entity_type_id, $entity_type_info) = $this->getEntityInfoMatchingTokenType($token_type);
@@ -269,9 +273,9 @@ class TokenReplacer {
    *
    * @return EntityInterface|null
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   protected function getEntityFromId(string $entity_type_id, string $entity_id) {
     if (Uuid::isValid($entity_id)) {
@@ -415,7 +419,7 @@ class TokenReplacer {
    *
    * @param string $entity_type_id
    *   The entity type ID.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $token_type
    *   The token type.
@@ -526,17 +530,17 @@ class TokenReplacer {
    *
    * @param string $entity_type_id
    *   The entity type ID.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    * @param string $view_mode
    *   The view mode.
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    *   The rendered HTML
    */
   protected function getRenderedEntity(string $entity_type_id, EntityInterface $entity, string $view_mode) {
     $renderable_entity = $this->entityTypeManager->getViewBuilder($entity_type_id)->view($entity, $view_mode);
-    return render($renderable_entity);
+    return \Drupal::service('renderer')->render($renderable_entity);
   }
 
   /**
diff --git a/tests/src/Functional/AETRecursionWebTest.php b/tests/src/Functional/AETRecursionWebTest.php
index 6ddc740..f80bfc8 100644
--- a/tests/src/Functional/AETRecursionWebTest.php
+++ b/tests/src/Functional/AETRecursionWebTest.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\Tests\aet\Functional;
 
+use Drupal\Core\Entity\EntityStorageException;
+use Behat\Mink\Exception\ResponseTextException;
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\Tests\BrowserTestBase;
 
@@ -29,9 +32,9 @@ class AETRecursionWebTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     // Speed things up with a minimal profile.
@@ -64,8 +67,8 @@ class AETRecursionWebTest extends BrowserTestBase {
   /**
    * Test normal operation - embed content from one node into another.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ResponseTextException
+   * @throws EntityStorageException
    */
   public function testSingleEmbedding() {
     $this->drupalLogin($this->editor_user);
@@ -130,9 +133,9 @@ class AETRecursionWebTest extends BrowserTestBase {
   /**
    * Test that it's OK to embed a different field from myself into myself.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ExpectationException
+   * @throws ResponseTextException
+   * @throws EntityStorageException
    */
   public function testSelfEmbedding() {
     $this->drupalLogin($this->editor_user);
@@ -181,8 +184,8 @@ class AETRecursionWebTest extends BrowserTestBase {
    * Tries to embed alpha into the body of beta, and the beta into
    * the body of alpha. We expect this to be caught and stopped.
    *
-   * @throws \Behat\Mink\Exception\ResponseTextException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws ResponseTextException
+   * @throws EntityStorageException
    */
   public function testCyclicEmbedding() {
     $this->drupalLogin($this->editor_user);
