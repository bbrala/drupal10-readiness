diff --git a/ecc.info.yml b/ecc.info.yml
index 469f7f1..b624879 100644
--- a/ecc.info.yml
+++ b/ecc.info.yml
@@ -1,7 +1,7 @@
 name: Editable Custom Configuration
 type: module
 description: 'ECC (Editable Custom Configuration) gives you ability to create any configuration with any fields schema through UI on the fly.'
-core_version_requirement: ^8.8 || ^9
+core_version_requirement: ^9.3 || ^10
 package: ECC
 configure: ecc.config
 dependencies:
diff --git a/src/EccListBuilder.php b/src/EccListBuilder.php
index 1ad47cf..e7a8444 100644
--- a/src/EccListBuilder.php
+++ b/src/EccListBuilder.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\ecc;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\ecc\Entity\EccType;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -19,14 +22,14 @@ class EccListBuilder extends EntityListBuilder {
   /**
    * Config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $config;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -88,7 +91,7 @@ class EccListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\ecc\Entity\EccType $type */
+    /** @var EccType $type */
     $type = $entity->get('type')->entity;
 
     $row = [];
diff --git a/src/EccTypeListBuilder.php b/src/EccTypeListBuilder.php
index ca71168..84aba45 100644
--- a/src/EccTypeListBuilder.php
+++ b/src/EccTypeListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\ecc;
 
+use Drupal\ecc\Entity\EccType;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -29,7 +30,7 @@ class EccTypeListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\ecc\Entity\EccType $entity */
+    /** @var EccType $entity */
     $row = [];
     $row['id'] = $entity->id();
     $row['title']['data'] = $entity->toLink(NULL, 'edit-form')->toRenderable();
diff --git a/src/Entity/Ecc.php b/src/Entity/Ecc.php
index f6872a5..1a4cced 100644
--- a/src/Entity/Ecc.php
+++ b/src/Entity/Ecc.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ecc\Entity;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\ContentEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Field\BaseFieldDefinition;
@@ -57,8 +59,8 @@ class Ecc extends ContentEntityBase {
    * @return bool|\Drupal\ecc\Entity\Ecc
    *   ECC entity or FALSE when not found.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function loadByMachineName($name) {
     $storage = \Drupal::entityTypeManager()->getStorage('ecc');
diff --git a/src/Form/EccForm.php b/src/Form/EccForm.php
index dd654b8..59bebb2 100644
--- a/src/Form/EccForm.php
+++ b/src/Form/EccForm.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\ecc\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
+use Drupal\file\Entity\File;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\ecc\Entity\Ecc;
@@ -86,8 +90,8 @@ class EccForm extends ContentEntityForm {
    * @return array
    *   Form with all generated fields.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function buildFields(array $fields, array $default_values) {
     $form = [];
@@ -171,10 +175,10 @@ class EccForm extends ContentEntityForm {
    *
    * @param array $element
    *   File element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public function validateManagedFile(array $element, FormStateInterface $form_state) {
     // Skip ajax callback.
@@ -187,7 +191,7 @@ class EccForm extends ContentEntityForm {
       return;
     }
 
-    /** @var \Drupal\file\Entity\File $file */
+    /** @var File $file */
     $file = reset($element['#files']);
     $file->setPermanent();
     $file->save();
@@ -196,25 +200,25 @@ class EccForm extends ContentEntityForm {
 
     $form_state->setValueForElement($element, [
       'id' => $file->id(),
-      'url' => file_create_url($uri),
+      'url' => \Drupal::service('file_url_generator')->generateAbsoluteString($uri),
     ]);
   }
 
   /**
    * Build sub form for ECC config.
    *
-   * @param \Drupal\ecc\Entity\EccType $config_type
+   * @param EccType $config_type
    *   Config type.
    *
    * @return array
    *   Sub form.
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function buildSubForm(EccType $config_type) {
     $fields = $config_type->getFormFields();
 
-    /** @var \Drupal\ecc\Entity\Ecc $entity */
+    /** @var Ecc $entity */
     $entity = $this->getEntity();
     $values = $entity->getValue();
 
@@ -234,8 +238,8 @@ class EccForm extends ContentEntityForm {
    * @return array
    *   Array with options.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getConfigTypeOptions() {
     $types = $this->entityTypeManager
@@ -260,8 +264,8 @@ class EccForm extends ContentEntityForm {
    * @return bool
    *   True if entity exists.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function exists($name) {
     $entity = Ecc::loadByMachineName($name);
diff --git a/src/Form/EccTypeForm.php b/src/Form/EccTypeForm.php
index 256180b..6701246 100644
--- a/src/Form/EccTypeForm.php
+++ b/src/Form/EccTypeForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\ecc\Form;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
 use Drupal\Core\Entity\EntityForm;
 use Drupal\Core\Form\FormStateInterface;
@@ -29,7 +31,7 @@ class EccTypeForm extends EntityForm {
       return $form;
     }
 
-    /** @var \Drupal\ecc\Entity\EccType $entity */
+    /** @var EccType $entity */
     $entity = $this->getEntity();
 
     $form['title'] = [
@@ -144,8 +146,8 @@ class EccTypeForm extends EntityForm {
    * @return array
    *   Array of options.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   protected function getConfigCategoryOptions() {
     $storage = $this->entityTypeManager->getStorage('taxonomy_term');
diff --git a/src/Plugin/rest/resource/EccResource.php b/src/Plugin/rest/resource/EccResource.php
index 21a6025..c36f4e9 100644
--- a/src/Plugin/rest/resource/EccResource.php
+++ b/src/Plugin/rest/resource/EccResource.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\ecc\Plugin\rest\resource;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\ecc\Entity\EccType;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\ecc\Entity\Ecc;
 use Drupal\rest\Plugin\ResourceBase;
@@ -26,7 +29,7 @@ class EccResource extends ResourceBase {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
@@ -66,11 +69,11 @@ class EccResource extends ResourceBase {
    * @param string $name
    *   Machine name.
    *
-   * @return \Drupal\rest\ResourceResponse
+   * @return ResourceResponse
    *   Response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function get($name) {
     $entity = Ecc::loadByMachineName($name);
@@ -79,7 +82,7 @@ class EccResource extends ResourceBase {
       throw new NotFoundHttpException($this->t('ECC not found'));
     }
 
-    /** @var \Drupal\ecc\Entity\EccType $type */
+    /** @var EccType $type */
     $type = $entity->get('type')->entity;
 
     // Check if config is exportable.
