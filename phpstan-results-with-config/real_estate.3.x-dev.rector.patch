diff --git a/modules/agency/src/AgencyAccessControlHandler.php b/modules/agency/src/AgencyAccessControlHandler.php
index 1608e19..1105c25 100644
--- a/modules/agency/src/AgencyAccessControlHandler.php
+++ b/modules/agency/src/AgencyAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\real_estate_agency;
 
+use Drupal\real_estate_agency\Entity\AgencyInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,8 +19,7 @@ class AgencyAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\real_estate_agency\Entity\AgencyInterface $entity */
-
+    /** @var AgencyInterface $entity */
     switch ($operation) {
 
       case 'view':
@@ -71,9 +71,9 @@ class AgencyAccessControlHandler extends EntityAccessControlHandler {
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $operation
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return string|null
    *   The permission string indicating it's allowed.
diff --git a/modules/agency/src/AgencyHtmlRouteProvider.php b/modules/agency/src/AgencyHtmlRouteProvider.php
index d63b86b..a9feab5 100644
--- a/modules/agency/src/AgencyHtmlRouteProvider.php
+++ b/modules/agency/src/AgencyHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class AgencyHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/modules/agency/src/AgencyListBuilder.php b/modules/agency/src/AgencyListBuilder.php
index 697261a..ff97b0c 100644
--- a/modules/agency/src/AgencyListBuilder.php
+++ b/modules/agency/src/AgencyListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\real_estate_agency;
 
+use Drupal\real_estate_agency\Entity\Agency;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ -26,7 +27,7 @@ class AgencyListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\real_estate_agency\Entity\Agency $entity */
+    /** @var Agency $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
diff --git a/modules/agency/src/AgencyPermissions.php b/modules/agency/src/AgencyPermissions.php
index fe35c69..dab845d 100644
--- a/modules/agency/src/AgencyPermissions.php
+++ b/modules/agency/src/AgencyPermissions.php
@@ -34,7 +34,7 @@ class AgencyPermissions {
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\real_estate_agency\Entity\Agency $type
+   * @param Agency $type
    *   The Agency type.
    *
    * @return array
diff --git a/modules/agency/src/Form/AgencyForm.php b/modules/agency/src/Form/AgencyForm.php
index 5323489..f819e05 100644
--- a/modules/agency/src/Form/AgencyForm.php
+++ b/modules/agency/src/Form/AgencyForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\real_estate_agency\Form;
 
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\real_estate_agency\Entity\Agency;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,7 +18,7 @@ class AgencyForm extends ContentEntityForm {
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
@@ -34,7 +36,7 @@ class AgencyForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\real_estate_agency\Entity\Agency $entity */
+    /** @var Agency $entity */
     $form = parent::buildForm($form, $form_state);
 
     return $form;
diff --git a/modules/agency/src/Form/AgencySettingsForm.php b/modules/agency/src/Form/AgencySettingsForm.php
index c883f01..f8c5040 100644
--- a/modules/agency/src/Form/AgencySettingsForm.php
+++ b/modules/agency/src/Form/AgencySettingsForm.php
@@ -27,7 +27,7 @@ class AgencySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class AgencySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/modules/kickstart/real_estate_kickstart.install b/modules/kickstart/real_estate_kickstart.install
index 47dc910..b78ae3b 100644
--- a/modules/kickstart/real_estate_kickstart.install
+++ b/modules/kickstart/real_estate_kickstart.install
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\File\FileSystemInterface;
 /**
  * @file
  * Real Estate Kickstart setup.
@@ -15,7 +16,7 @@ function real_estate_kickstart_install() {
   // Generate properties.
   $property_storage = \Drupal::entityTypeManager()->getStorage('real_estate_property');
   $random = new Random();
-  $image_path = drupal_get_path('module', 'real_estate_kickstart') . '/images/';
+  $image_path = \Drupal::service('extension.list.module')->getPath('real_estate_kickstart') . '/images/';
 
   for ($i = 1; $i <= 3; $i++) {
     $property = $property_storage->create([
@@ -57,7 +58,7 @@ function real_estate_kickstart_install() {
     ]);
 
     $data = file_get_contents($image_path . 'house' . $i . '.jpg');
-    $file = file_save_data($data, 'public://house' . $i . '.jpg', FILE_EXISTS_REPLACE);
+    $file = \Drupal::service('file.repository')->writeData($data, 'public://house' . $i . '.jpg', FileSystemInterface::EXISTS_REPLACE);
     if ($file) {
       $property->set('field_photo', [
         'target_id' => $file->id(),
diff --git a/modules/openimmo/src/Form/OpenImmoQueryAddForm.php b/modules/openimmo/src/Form/OpenImmoQueryAddForm.php
index a4f55eb..ad04437 100644
--- a/modules/openimmo/src/Form/OpenImmoQueryAddForm.php
+++ b/modules/openimmo/src/Form/OpenImmoQueryAddForm.php
@@ -16,14 +16,14 @@ class OpenImmoQueryAddForm extends EntityForm {
   /**
    * The OpenImmoFetcher service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a EntityTypeManager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -106,11 +106,11 @@ class OpenImmoQueryAddForm extends EntityForm {
    *
    * This form can only change values for a query, which is part of source.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
diff --git a/modules/openimmo/src/Form/OpenImmoQueryDeleteForm.php b/modules/openimmo/src/Form/OpenImmoQueryDeleteForm.php
index d1d50a7..a7bad93 100644
--- a/modules/openimmo/src/Form/OpenImmoQueryDeleteForm.php
+++ b/modules/openimmo/src/Form/OpenImmoQueryDeleteForm.php
@@ -66,9 +66,9 @@ class OpenImmoQueryDeleteForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\real_estate_openimmo\Entity\OpenImmoInterface $real_estate_openimmo
+   * @param OpenImmoInterface $real_estate_openimmo
    *   The connect entity being edited.
    * @param string|null $source_query
    *   The connect query being deleted.
diff --git a/modules/openimmo/src/Form/OpenImmoQueryEditForm.php b/modules/openimmo/src/Form/OpenImmoQueryEditForm.php
index ca0e016..def00b3 100644
--- a/modules/openimmo/src/Form/OpenImmoQueryEditForm.php
+++ b/modules/openimmo/src/Form/OpenImmoQueryEditForm.php
@@ -105,11 +105,11 @@ class OpenImmoQueryEditForm extends EntityForm {
   /**
    * Copies top-level form values to entity properties.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
diff --git a/modules/openimmo/src/OpenImmoHtmlRouteProvider.php b/modules/openimmo/src/OpenImmoHtmlRouteProvider.php
index 8ecb0dc..99632b8 100644
--- a/modules/openimmo/src/OpenImmoHtmlRouteProvider.php
+++ b/modules/openimmo/src/OpenImmoHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class OpenImmoHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
diff --git a/modules/openimmo/src/OpenImmoQuery.php b/modules/openimmo/src/OpenImmoQuery.php
index 10caf44..3dad086 100644
--- a/modules/openimmo/src/OpenImmoQuery.php
+++ b/modules/openimmo/src/OpenImmoQuery.php
@@ -12,7 +12,7 @@ class OpenImmoQuery implements OpenImmoQueryInterface {
   /**
    * The source that this query is connected to.
    *
-   * @var \Drupal\real_estate_openimmo\Entity\OpenImmoInterface
+   * @var OpenImmoInterface
    */
   private $source;
 
@@ -61,7 +61,7 @@ class OpenImmoQuery implements OpenImmoQueryInterface {
   /**
    * OpenImmoQuery constructor.
    *
-   * @param \Drupal\real_estate_openimmo\Entity\OpenImmoInterface $source
+   * @param OpenImmoInterface $source
    *   The source the query is attached to.
    * @param string $id
    *   The query's ID.
diff --git a/modules/property/real_estate_property.module b/modules/property/real_estate_property.module
index 3df11f5..c6bfc8b 100644
--- a/modules/property/real_estate_property.module
+++ b/modules/property/real_estate_property.module
@@ -64,10 +64,10 @@ function real_estate_property_theme_suggestions_real_estate_property(array $vari
 /**
  * Adds the default agencies field to a property.
  *
- * @param \Drupal\real_estate_property\Entity\PropertyTypeInterface $property_type
+ * @param PropertyTypeInterface $property_type
  *   The property type.
  *
- * @return \Drupal\field\Entity\FieldConfig
+ * @return FieldConfig
  *   A Agency field object.
  */
 function real_estate_property_add_agencies_field(PropertyTypeInterface $property_type) {
diff --git a/modules/property/src/Form/PropertyForm.php b/modules/property/src/Form/PropertyForm.php
index 0a61594..27146ea 100644
--- a/modules/property/src/Form/PropertyForm.php
+++ b/modules/property/src/Form/PropertyForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\real_estate_property\Form;
 
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\real_estate_property\Entity\Property;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,7 +18,7 @@ class PropertyForm extends ContentEntityForm {
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
@@ -34,7 +36,7 @@ class PropertyForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\real_estate_property\Entity\Property $entity */
+    /** @var Property $entity */
     $form = parent::buildForm($form, $form_state);
 
     return $form;
diff --git a/modules/property/src/Form/PropertySettingsForm.php b/modules/property/src/Form/PropertySettingsForm.php
index 3c0e5c3..b686f19 100644
--- a/modules/property/src/Form/PropertySettingsForm.php
+++ b/modules/property/src/Form/PropertySettingsForm.php
@@ -27,7 +27,7 @@ class PropertySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class PropertySettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/modules/property/src/PropertyAccessControlHandler.php b/modules/property/src/PropertyAccessControlHandler.php
index d25db53..1ae1936 100644
--- a/modules/property/src/PropertyAccessControlHandler.php
+++ b/modules/property/src/PropertyAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\real_estate_property;
 
+use Drupal\real_estate_property\Entity\PropertyInterface;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -18,8 +19,7 @@ class PropertyAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\real_estate_property\Entity\PropertyInterface $entity */
-
+    /** @var PropertyInterface $entity */
     switch ($operation) {
 
       case 'view':
@@ -71,9 +71,9 @@ class PropertyAccessControlHandler extends EntityAccessControlHandler {
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    * @param $operation
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *
    * @return string|null
    *   The permission string indicating it's allowed.
diff --git a/modules/property/src/PropertyHtmlRouteProvider.php b/modules/property/src/PropertyHtmlRouteProvider.php
index 985e28a..720b3f1 100644
--- a/modules/property/src/PropertyHtmlRouteProvider.php
+++ b/modules/property/src/PropertyHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class PropertyHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/modules/property/src/PropertyListBuilder.php b/modules/property/src/PropertyListBuilder.php
index 640897d..a10d4f1 100644
--- a/modules/property/src/PropertyListBuilder.php
+++ b/modules/property/src/PropertyListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\real_estate_property;
 
+use Drupal\real_estate_property\Entity\Property;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ -26,7 +27,7 @@ class PropertyListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\real_estate_property\Entity\Property $entity */
+    /** @var Property $entity */
     $row['id'] = $entity->id();
     $row['title'] = Link::createFromRoute(
       $entity->label(),
diff --git a/modules/property/src/PropertyPermissions.php b/modules/property/src/PropertyPermissions.php
index 883f82b..cf17c4f 100644
--- a/modules/property/src/PropertyPermissions.php
+++ b/modules/property/src/PropertyPermissions.php
@@ -34,7 +34,7 @@ class PropertyPermissions {
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\real_estate_property\Entity\Property $type
+   * @param Property $type
    *   The Property type.
    *
    * @return array
diff --git a/modules/property/tests/src/Functional/PropertyTypeTest.php b/modules/property/tests/src/Functional/PropertyTypeTest.php
index 67bda0d..c0b8073 100644
--- a/modules/property/tests/src/Functional/PropertyTypeTest.php
+++ b/modules/property/tests/src/Functional/PropertyTypeTest.php
@@ -31,7 +31,7 @@ class PropertyTypeTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $user = $this->drupalCreateUser([
diff --git a/modules/rets/real_estate_rets.module b/modules/rets/real_estate_rets.module
index 4629825..126aef6 100644
--- a/modules/rets/real_estate_rets.module
+++ b/modules/rets/real_estate_rets.module
@@ -36,15 +36,15 @@ function rets_fetch_data_finished($success, array $results) {
   if ($success) {
     if (!empty($results)) {
       if (!empty($results['updated'])) {
-        drupal_set_message(\Drupal::translation()->formatPlural($results['updated'], 'Loaded rets data for one query.', 'Loaded rets data for @count queries.'));
+        \Drupal::messenger()->addStatus(\Drupal::translation()->formatPlural($results['updated'], 'Loaded rets data for one query.', 'Loaded rets data for @count queries.'));
       }
       if (!empty($results['failures'])) {
-        drupal_set_message(\Drupal::translation()->formatPlural($results['failures'], 'Failed to get rets data for one query.', 'Failed to get rets data for @count queries.'), 'error');
+        \Drupal::messenger()->addError(\Drupal::translation()->formatPlural($results['failures'], 'Failed to get rets data for one query.', 'Failed to get rets data for @count queries.'));
       }
     }
   }
   else {
-    drupal_set_message(t('An error occurred trying to get rets data.'), 'error');
+    \Drupal::messenger()->addError(t('An error occurred trying to get rets data.'));
   }
 }
 
diff --git a/modules/rets/src/Form/RetsConnectionForm.php b/modules/rets/src/Form/RetsConnectionForm.php
index fd180e8..48de56d 100644
--- a/modules/rets/src/Form/RetsConnectionForm.php
+++ b/modules/rets/src/Form/RetsConnectionForm.php
@@ -140,13 +140,13 @@ class RetsConnectionForm extends EntityForm {
 
     switch ($status) {
       case SAVED_NEW:
-        drupal_set_message($this->t('Created the %label RETS Connection.', [
+        $this->messenger()->addStatus($this->t('Created the %label RETS Connection.', [
           '%label' => $real_estate_rets_connection->label(),
         ]));
         break;
 
       default:
-        drupal_set_message($this->t('Saved the %label RETS Connection.', [
+        $this->messenger()->addStatus($this->t('Saved the %label RETS Connection.', [
           '%label' => $real_estate_rets_connection->label(),
         ]));
     }
diff --git a/modules/rets/src/Form/RetsConnectionQueryAddForm.php b/modules/rets/src/Form/RetsConnectionQueryAddForm.php
index ad622b5..39fc121 100644
--- a/modules/rets/src/Form/RetsConnectionQueryAddForm.php
+++ b/modules/rets/src/Form/RetsConnectionQueryAddForm.php
@@ -16,14 +16,14 @@ class RetsConnectionQueryAddForm extends EntityForm {
   /**
    * The RetsFetcher service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a EntityTypeManager.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The EntityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager) {
@@ -157,11 +157,11 @@ class RetsConnectionQueryAddForm extends EntityForm {
    *
    * This form can only change values for a query, which is part of connection.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
diff --git a/modules/rets/src/Form/RetsConnectionQueryDeleteForm.php b/modules/rets/src/Form/RetsConnectionQueryDeleteForm.php
index 1d65df1..4b6f9cd 100644
--- a/modules/rets/src/Form/RetsConnectionQueryDeleteForm.php
+++ b/modules/rets/src/Form/RetsConnectionQueryDeleteForm.php
@@ -66,9 +66,9 @@ class RetsConnectionQueryDeleteForm extends ConfirmFormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\real_estate_rets\Entity\RetsConnectionInterface $real_estate_rets_connection
+   * @param RetsConnectionInterface $real_estate_rets_connection
    *   The connect entity being edited.
    * @param string|null $connection_query
    *   The connect query being deleted.
diff --git a/modules/rets/src/Form/RetsConnectionQueryEditForm.php b/modules/rets/src/Form/RetsConnectionQueryEditForm.php
index 44a1256..be3a50f 100644
--- a/modules/rets/src/Form/RetsConnectionQueryEditForm.php
+++ b/modules/rets/src/Form/RetsConnectionQueryEditForm.php
@@ -161,11 +161,11 @@ class RetsConnectionQueryEditForm extends EntityForm {
   /**
    * Copies top-level form values to entity properties.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity the current form should operate upon.
    * @param array $form
    *   A nested array of form elements comprising the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
diff --git a/modules/rets/src/Form/RetsManualLoad.php b/modules/rets/src/Form/RetsManualLoad.php
index f3ca0ed..7610448 100644
--- a/modules/rets/src/Form/RetsManualLoad.php
+++ b/modules/rets/src/Form/RetsManualLoad.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\real_estate_rets\Form;
 
+use Drupal\update\UpdateManagerInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -17,19 +18,19 @@ class RetsManualLoad extends FormBase {
   /**
    * Drupal\real_estate_rets\RetsFetcher definition.
    *
-   * @var \Drupal\real_estate_rets\RetsFetcher
+   * @var RetsFetcher
    */
   protected $realEstateRetsFetcher;
   /**
    * Drupal\Core\Config\ConfigManager definition.
    *
-   * @var \Drupal\Core\Config\ConfigManager
+   * @var ConfigManager
    */
   protected $configManager;
   /**
    * Update manager service.
    *
-   * @var \Drupal\update\UpdateManagerInterface
+   * @var UpdateManagerInterface
    */
   protected $retsManager;
 
diff --git a/modules/rets/src/RetsConnectionHtmlRouteProvider.php b/modules/rets/src/RetsConnectionHtmlRouteProvider.php
index c8bea24..2c72874 100644
--- a/modules/rets/src/RetsConnectionHtmlRouteProvider.php
+++ b/modules/rets/src/RetsConnectionHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class RetsConnectionHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the collection route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getCollectionRoute(EntityTypeInterface $entity_type) {
diff --git a/modules/rets/src/RetsFetcher.php b/modules/rets/src/RetsFetcher.php
index e33a87b..ba22ccd 100644
--- a/modules/rets/src/RetsFetcher.php
+++ b/modules/rets/src/RetsFetcher.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\real_estate_rets;
 
+use Drupal\Core\Config\Config;
 use Drupal\Core\Queue\RequeueException;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use PHRETS\Configuration;
@@ -15,7 +16,7 @@ class RetsFetcher implements RetsFetcherInterface {
   /**
    * The rets settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $retsSettings;
 
diff --git a/modules/rets/src/RetsManager.php b/modules/rets/src/RetsManager.php
index 1aa8f36..4fb6830 100644
--- a/modules/rets/src/RetsManager.php
+++ b/modules/rets/src/RetsManager.php
@@ -17,21 +17,21 @@ class RetsManager implements RetsManagerInterface {
   /**
    * Drupal\Core\Config\ConfigFactoryInterface definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $retsSettings;
 
   /**
    * Drupal\real_estate_rets\RetsProcessorInterface definition.
    *
-   * @var \Drupal\real_estate_rets\RetsProcessorInterface
+   * @var RetsProcessorInterface
    */
   protected $retsProcessor;
 
   /**
    * Drupal\Core\Entity\EntityTypeManagerInterface definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
@@ -45,11 +45,11 @@ class RetsManager implements RetsManagerInterface {
   /**
    * Constructs a RetsManager.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\real_estate_rets\RetsProcessorInterface $rets_processor
+   * @param RetsProcessorInterface $rets_processor
    *   The Rets Processor service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The Entity Type Manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, RetsProcessorInterface $rets_processor, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/rets/src/RetsProcessor.php b/modules/rets/src/RetsProcessor.php
index b8535a8..96fa0ae 100644
--- a/modules/rets/src/RetsProcessor.php
+++ b/modules/rets/src/RetsProcessor.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\real_estate_rets;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Queue\QueueFactory;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -14,21 +16,21 @@ class RetsProcessor implements RetsProcessorInterface {
   /**
    * The rets settings.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $retsSettings;
 
   /**
    * The RetsFetcher service.
    *
-   * @var \Drupal\real_estate_rets\RetsFetcherInterface
+   * @var RetsFetcherInterface
    */
   protected $retsFetcher;
 
   /**
    * The rets fetch queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $fetchQueue;
 
@@ -42,20 +44,20 @@ class RetsProcessor implements RetsProcessorInterface {
   /**
    * The RetsFetcher service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a RetsProcessor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\Queue\QueueFactory $queue_factory
+   * @param QueueFactory $queue_factory
    *   The queue factory.
-   * @param \Drupal\real_estate_rets\RetsFetcherInterface $rets_fetcher
+   * @param RetsFetcherInterface $rets_fetcher
    *   The rets fetcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The Entity Type Manager service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, QueueFactory $queue_factory, RetsFetcherInterface $rets_fetcher, EntityTypeManagerInterface $entity_type_manager) {
diff --git a/modules/rets/src/RetsQuery.php b/modules/rets/src/RetsQuery.php
index 5fea889..a4fa609 100644
--- a/modules/rets/src/RetsQuery.php
+++ b/modules/rets/src/RetsQuery.php
@@ -12,7 +12,7 @@ class RetsQuery implements RetsQueryInterface {
   /**
    * The connection that this query is connected to.
    *
-   * @var \Drupal\real_estate_rets\Entity\RetsConnectionInterface
+   * @var RetsConnectionInterface
    */
   private $connection;
 
@@ -110,7 +110,7 @@ class RetsQuery implements RetsQueryInterface {
   /**
    * RetsQuery constructor.
    *
-   * @param \Drupal\real_estate_rets\Entity\RetsConnectionInterface $connection
+   * @param RetsConnectionInterface $connection
    *   The connection the query is attached to.
    * @param string $id
    *   The query's ID.
