modules/contrib/entity_share_websub/entity_share_websub.module
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/entity_share_websub_hub.install
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/entity_share_websub_hub.module
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/entity_share_websub_hub.views.inc
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Controller/SubscriptionController.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/EventSubscriber/NotificationProcessor.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Hub.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/HubInterface.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/field/SyndicatedByField.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/field/SyndicatedCountField.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/field/SyndicatedSummary.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/field/SyndicationStatusField.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/field/SyndicatorEmailField.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/field/UserField.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/filter/SummaryFilter.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/filter/SyndicatedFilter.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/filter/UserFilter.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Publisher.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/PublisherInterface.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Subscription.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/SubscriptionInterface.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Functional/LoadTest.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Kernel/ContentTest.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Kernel/PublisherTest.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Kernel/SubscriptionTest.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Traits/ValuesTrait.php
modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Unit/HubTest.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/entity_share_websub_subscriber.install
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/entity_share_websub_subscriber.module
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/BatchHelper.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Controller/SubscriptionController.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Event/ContentSyncEvent.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/EventSubscriber/HubNotifier.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/EventSubscriber/ItemImport.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Form/CancelSubscriptionForm.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Form/SettingsForm.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Plugin/QueueWorker/SubscriberWorker.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Plugin/QueueWorker/SubscriptionRecordWorker.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Subscriber.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/SubscriptionManager.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/SubscriptionRecordRepository.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/SubscriptionRepository.php
modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/tests/src/Functional/LoadTest.php
modules/contrib/entity_share_websub/src/SignatureTrait.php

30 files with changes
=====================

1) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_share_websub_subscriber\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/SubscriptionRepository.php:19

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Construct a repository object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The translation service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(Connection $connection, TranslationInterface $translation, MessengerInterface $messenger) {
@@ @@
   /**
    * Load subscription object for selected entity through subscription record.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The subscribed entity.
    *
    * @return object
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/SubscriptionRecordRepository.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * Construct a repository object.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $translation
+   * @param TranslationInterface $translation
    *   The translation service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
    */
   public function __construct(Connection $connection, TranslationInterface $translation, MessengerInterface $messenger) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/SubscriptionManager.php:12

    ---------- begin diff ----------
@@ @@
   /**
    * The Subscription repository.
    *
-   * @var \Drupal\entity_share_websub_subscriber\SubscriptionRepository
+   * @var SubscriptionRepository
    */
   protected $repository;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
     ])) {
       $this->updateSubscriptionStatus($subscription->id, Subscriber::SUBSCRIPTION_VERIFIED);
       // And we need to update the local copy.
-      $this->eventDispatcher->dispatch(ContentSyncEvent::EVENT_SYNC, new ContentSyncEvent($subscription));
+      $this->eventDispatcher->dispatch(new ContentSyncEvent($subscription), ContentSyncEvent::EVENT_SYNC);
       return TRUE;
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


5) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Subscriber.php:39

    ---------- begin diff ----------
@@ @@
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $config;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Construct a repository object.
    *
-   * @param \GuzzleHttp\Client $http_client
+   * @param Client $http_client
    *   The HTTP client.
-   * @param \Drupal\Core\Config\ConfigFactory $config
+   * @param ConfigFactory $config
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(Client $http_client, ConfigFactory $config, EntityTypeManagerInterface $entity_type_manager) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Plugin/QueueWorker/SubscriptionRecordWorker.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_websub_subscriber\Plugin\QueueWorker;

+use Drupal\entity_share_client\Entity\RemoteInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
@@ @@
   /**
    * Drupal\Core\Logger\LoggerChannelFactoryInterface definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   private $loggerChannelFactory;

@@ @@
   /**
    * The Subscription repository.
    *
-   * @var \Drupal\entity_share_websub_subscriber\SubscriptionRecordRepository
+   * @var SubscriptionRecordRepository
    */
   private $subscriptionRecordRepository;

@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   private $entityTypeManager;

@@ @@
   /**
    * The remote manager.
    *
-   * @var \Drupal\entity_share_client\Service\RemoteManagerInterface
+   * @var RemoteManagerInterface
    */
   private $remoteManager;

@@ @@
   /**
    * The import service.
    *
-   * @var \Drupal\entity_share_client\Service\ImportServiceInterface
+   * @var ImportServiceInterface
    */
   private $importService;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
       return;
     }

-    /** @var \Drupal\entity_share_client\Entity\RemoteInterface $remote */
+    /** @var RemoteInterface $remote */
     $remote = $this->entityTypeManager->getStorage('remote')->load($item['remote_id']);
     $channel_infos = $this->remoteManager->getChannelsInfos($remote);
     $entity_type = $channel_infos[$item['channel_id']]['channel_entity_type'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Plugin/QueueWorker/SubscriberWorker.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\Core\Logger\LoggerChannelFactoryInterface definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   private $loggerChannelFactory;

@@ @@
   /**
    * The Subscriber service.
    *
-   * @var \Drupal\entity_share_websub_subscriber\Subscriber
+   * @var Subscriber
    */
   private $subscriberService;

@@ @@
   /**
    * The Subscription repository.
    *
-   * @var \Drupal\entity_share_websub_subscriber\SubscriptionRepository
+   * @var SubscriptionRepository
    */
   private $subscriptionRepository;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Form/SettingsForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_websub_subscriber\Form;

+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Form/CancelSubscriptionForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_websub_subscriber\Form;

+use Drupal\entity_share_websub_subscriber\SubscriptionRepository;
+use Drupal\entity_share_websub_subscriber\SubscriptionRecordRepository;
+use Drupal\entity_share_websub_subscriber\SubscriptionManager;
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Config\Config;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ @@
   /**
    * The subscription repository.
    *
-   * @var \Drupal\entity_share_websub_subscriber\SubscriptionRepository
+   * @var SubscriptionRepository
    */
   protected $subscriptionRepository;

@@ @@
   /**
    * The subscription record repository.
    *
-   * @var \Drupal\entity_share_websub_subscriber\SubscriptionRecordRepository
+   * @var SubscriptionRecordRepository
    */
   protected $subscriptionRecordRepository;

@@ @@
   /**
    * The subscription manager.
    *
-   * @var \Drupal\entity_share_websub_subscriber\SubscriptionManager
+   * @var SubscriptionManager
    */
   protected $subscriptionManager;

@@ @@
   /**
    * The date formatter.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;

@@ @@
   /**
    * Configuration Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;

@@ @@
   /**
    * Config of the entity_share_websub_subscriber module.
    *
-   * @var Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/EventSubscriber/ItemImport.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * Queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queue;

@@ @@
   /**
    * Constructs a new ItemImport object.
    *
-   * @param \Drupal\Core\Queue\QueueFactory $queue
+   * @param QueueFactory $queue
    *   Queue factory service.
    */
   public function __construct(QueueFactory $queue) {
@@ @@
   /**
    * This method is called when the entity_share_websub_subscriber.sync_subscription is dispatched.
    *
-   * @param \Drupal\entity_share_websub_subscriber\Event\ContentSyncEvent $event
+   * @param ContentSyncEvent $event
    *   The dispatched event.
    */
   public function syncSubscription(ContentSyncEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


11) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/EventSubscriber/HubNotifier.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_websub_subscriber\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Queue\QueueFactory;
 use Drupal\Core\Queue\QueueWorkerManagerInterface;
 use Drupal\Core\Queue\SuspendQueueException;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\HttpKernel\KernelEvents;

 /**
@@ @@
   /**
    * The queue.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queue;

@@ @@
   /**
    * The queue manager.
    *
-   * @var \Drupal\Core\Queue\QueueWorkerManagerInterface
+   * @var QueueWorkerManagerInterface
    */
   protected $queueManager;

@@ @@
   /**
    * The logger factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   private $loggerChannelFactory;

@@ @@
   /**
    * This method is called when the kernel.terminate is dispatched.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The dispatched event.
    */
   public function kernelTerminate(Event $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


12) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Event/ContentSyncEvent.php:3

    ---------- begin diff ----------
@@ @@
 namespace Drupal\entity_share_websub_subscriber\Event;


-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 class ContentSyncEvent extends Event {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/Controller/SubscriptionController.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The subscription repository.
    *
-   * @var \Drupal\entity_share_websub_subscriber\SubscriptionRepository
+   * @var SubscriptionRepository
    */
   protected $subscriptionRepository;

@@ @@
   /**
    * The queue.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queue;

@@ @@
   /**
    * The event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\entity_share_websub_subscriber\SubscriptionRepository $repository
+   * @param SubscriptionRepository $repository
    *   The subscription repository.
-   * @param \Drupal\Core\Queue\QueueFactory $queue
+   * @param QueueFactory $queue
    *   The queue factory.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
    */
   public function __construct(
@@ @@
    *
    * @param string $subscription_key
    *   The subscription key.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response.
    */
   public function handleVerification($subscription_key, Request $request) {
@@ @@

           // Import selected entity after verification.
           // @see Drupal\entity_share_websub_subscriber\SubscriptionRecordWorker
-          $this->eventDispatcher->dispatch(ContentSyncEvent::EVENT_SYNC, new ContentSyncEvent($subscription));
+          $this->eventDispatcher->dispatch(new ContentSyncEvent($subscription), ContentSyncEvent::EVENT_SYNC);
         }
       }
     }
@@ @@
    *
    * @param string $subscription_key
    *   The subscription key.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response.
    */
   public function handleUpdateNotification($subscription_key, Request $request) {
@@ @@

       // Validate signature.
       if ($signature == $request->headers->get('X-Hub-Signature')) {
-        $this->eventDispatcher->dispatch(ContentSyncEvent::EVENT_SYNC, new ContentSyncEvent($subscription));
+        $this->eventDispatcher->dispatch(new ContentSyncEvent($subscription), ContentSyncEvent::EVENT_SYNC);
       }
     }

@@ @@
    *
    * @param string $subscription_key
    *   The subscription key.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    *   The response.
    */
   public function handleDeleteNotification($subscription_key, Request $request) {
@@ @@
   /**
    * Validation of the verification request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param string $secret
    *   The secret of the subscription.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/src/BatchHelper.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_websub_subscriber;

+use Drupal\Core\Queue\QueueInterface;
 /**
  * Class BatchHelper.
  */
@@ @@
     catch (\Exception $e) {
       // If hub is not avaliable then we put it in the queue
       // and handle async using terminate event.
-      /** @var \Drupal\Core\Queue\QueueInterface $queue */
+      /** @var QueueInterface $queue */
       $queue = \Drupal::service('queue')->get('entity_share_websub_subscriber_subscribe');
       $queue->createItem([
         'uuid' => $uuid,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


15) modules/contrib/entity_share_websub/modules/entity_share_websub_subscriber/entity_share_websub_subscriber.module:103

    ---------- begin diff ----------
@@ @@
  *
  * @param array $form
  *   The form.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   The form state.
  */
 function _entity_share_websub_subscriber_form_submit(array &$form, FormStateInterface $form_state) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


16) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Unit/HubTest.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * A mock Subscription object.
    *
-   * @var \Drupal\entity_share_websub_hub\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscriptionMock;

@@ @@
   /**
    * The Queue factory service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * A Hub.
    *
-   * @var \Drupal\entity_share_websub_hub\Hub
+   * @var Hub
    */
   protected $hub;

@@ @@
   /**
    * A Queue object.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * A request object.
    *
-   * @var \GuzzleHttp\Psr7\Request
+   * @var Request
    */
   public $currentRequest;

@@ @@
   /**
    * Guzzle http client with mock handler.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClientMock;

@@ @@
   /**
    * Logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   * @var LoggerChannelInterface
    */
   protected $loggerChannelMock;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->setUpValues();
     $this->subscriptionMock = $this->createMock(SubscriptionInterface::class);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Kernel/SubscriptionTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_share_websub_hub\Kernel;

+use Drupal\Core\Database\Connection;
+use Drupal\Component\Utility\EmailValidator;
+use Drupal\Core\Entity\EntityTypeManager;
+use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\entity_share_server\Entity\Channel;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\entity_share_websub_hub\Subscription;
@@ @@
   /**
    * Subscription object.
    *
-   * @var \Drupal\entity_share_websub_hub\Subscription
+   * @var Subscription
    */
   protected $subscription;

@@ @@
   /**
    * Database service.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Email validator service.
    *
-   * @var \Drupal\Component\Utility\EmailValidator
+   * @var EmailValidator
    */
   protected $emailValidator;

@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Entity Repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installEntitySchema('node');
     $this->installEntitySchema('channel');
@@ @@
   public function testCheck() {
     $this->subscription->save($this->mock_topic, $this->mock_subscriber, $this->mock_secret, $this->mock_email, 'subscribe');
     $result = $this->subscription->checkSubscriptions($this->mock_node);
-    $this->assertEqual($result, [], 'Check existing but not verified');
+    $this->assertEquals($result, [], 'Check existing but not verified');
     $this->subscription->verifySubscription($this->mock_subscriber);
     $result = $this->subscription->checkSubscriptions($this->mock_node);
-    $this->assertEqual($result, ['1'], 'Check existing');
+    $this->assertEquals($result, ['1'], 'Check existing');
     $this->subscription->updateSubscriptions($result, ['content_summary' => 'New test title : article', 'uid' => 1]);
     $updates = $this->subscription->getUpdates();
-    $this->assertEqual($updates, [
+    $this->assertEquals($updates, [
       $this->mock_subscriber => [
         $this->mock_topic,
         $this->mock_secret,
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Kernel/PublisherTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_share_websub_hub\Kernel;

+use Drupal\Core\Queue\QueueFactory;
+use GuzzleHttp\Psr7\Request;
+use Drupal\user\Entity\User;
 use Drupal\entity_share_server\Entity\Channel;
 use Drupal\entity_share_websub_hub\Hub;
 use Drupal\entity_share_websub_hub\Publisher;
@@ @@
   /**
    * The subscription service.
    *
-   * @var \Drupal\entity_share_websub_hub\Subscription
+   * @var Subscription
    */
   protected $subscription;

@@ @@
   /**
    * A Publisher object.
    *
-   * @var \Drupal\entity_share_websub_hub\Publisher
+   * @var Publisher
    */
   protected $publisher;

@@ @@
   /**
    * A Hub object.
    *
-   * @var \Drupal\entity_share_websub_hub\Hub
+   * @var Hub
    */
   protected $hub;

@@ @@
   /**
    * The queue factory.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * A request object.
    *
-   * @var \GuzzleHttp\Psr7\Request
+   * @var Request
    */
   public $currentRequest;

@@ @@
   /**
    * Http client mock.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClientMock;

@@ @@
   /**
    * The test user.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     $this->installEntitySchema('node');
@@ @@
     $this->subscription->verifySubscription($this->mock_subscriber);
     $this->publisher->notifyRelevant($this->mock_node);
     $item = $queue->claimItem();
-    $this->assertNotEqual($item, FALSE, 'Records notified and queued');
+    $this->assertNotEquals($item, FALSE, 'Records notified and queued');
     $this->assertEquals($item->data, [
       'path' => $this->mock_subscriber,
     ]);
    ----------- end diff -----------

Applied rules:
 * AssertNotEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Kernel/ContentTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_share_websub_hub\Kernel;

+use Drupal\Core\Database\Connection;
+use Drupal\Component\Utility\EmailValidator;
+use Drupal\Core\Queue\QueueFactory;
+use Drupal\user\Entity\User;
+use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\entity_share_server\Entity\Channel;
 use Drupal\entity_share_websub_hub\Hub;
 use Drupal\KernelTests\Core\Entity\EntityKernelTestBase;
@@ @@
   /**
    * A Subscription object.
    *
-   * @var \Drupal\entity_share_websub_hub\Subscription
+   * @var Subscription
    */
   protected $subscription;

@@ @@
   /**
    * A database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Email validator utility.
    *
-   * @var \Drupal\Component\Utility\EmailValidator
+   * @var EmailValidator
    */
   protected $emailValidator;

@@ @@
   /**
    * Query factory service.
    *
-   * @var \Drupal\Core\Queue\QueueFactory
+   * @var QueueFactory
    */
   protected $queueFactory;

@@ @@
   /**
    * The test user.
    *
-   * @var \Drupal\user\Entity\User|false
+   * @var User|false
    */
   protected $user;

@@ @@
   /**
    * Entity Repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('entity_share_websub_hub', Subscription::TABLE_NAME);
     $this->installSchema('node', ['node_access']);
@@ @@
     $node->save();
     $item = $queue->claimItem();
     $this->assertNotEmpty($item, 'Update on node unpublish');
-    $this->assertEqual($item->data['action'], Hub::ACTION_CANCEL, 'Correct cancel update');
+    $this->assertEquals($item->data['action'], Hub::ACTION_CANCEL, 'Correct cancel update');

     $items = $this->subscription->checkSubscriptions($node);
     $this->assertEmpty($items, 'The subscription set inactive on unpublish');
@@ @@
     $node->delete();
     $item = $queue->claimItem();
     $this->assertNotEmpty($item, 'Update on node deletion');
-    $this->assertEqual($item->data['action'], Hub::ACTION_CANCEL, 'Correct cancel update for deletion');
+    $this->assertEquals($item->data['action'], Hub::ACTION_CANCEL, 'Correct cancel update for deletion');

     $updates = $this->subscription->getUpdates($this->mock_subscriber, TRUE);
     $this->assertNotEmpty($updates, 'Existing cancel updates when node deleted');
    ----------- end diff -----------

Applied rules:
 * AssertEqualRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_share_websub_hub\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/SubscriptionInterface.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * Get existing subscriptions for an entity.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return mixed
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


22) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Subscription.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_websub_hub;

+use Drupal\entity_share_server\Entity\ChannelInterface;
 use Drupal\Component\Utility\EmailValidatorInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\UrlHelper;
@@ @@
   /**
    * Drupal\Core\Database\Connection definition.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;

@@ @@
   /**
    * Email validator service.
    *
-   * @var \Drupal\Component\Utility\EmailValidatorInterface
+   * @var EmailValidatorInterface
    */
   protected $emailValidator;

@@ @@
   /**
    * Entity Type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;

@@ @@
       return [400, 'Incorrect topic format'];
     }
     [, $channel_id, $entity_id] = $parts;
-    /** @var \Drupal\entity_share_server\Entity\ChannelInterface[] $channels */
+    /** @var ChannelInterface[] $channels */
     $channels = $this->entityTypeManager->getStorage('channel')->loadByProperties(['id' => $channel_id]);
     if (empty($channels)) {
       return [400, 'Provided channel was not found'];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


23) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/PublisherInterface.php:10

    ---------- begin diff ----------
@@ @@

   /**
    * Notifies hub to update the channels relevant to the entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function notifyRelevant(EntityInterface $entity);
@@ @@

   /**
    * Breaks the syndication for the entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function disableSubscriptionsFor(EntityInterface $entity);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


24) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Publisher.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Drupal\entity_share_websub_hub\Service\HubInterface definition.
    *
-   * @var \Drupal\entity_share_websub_hub\HubInterface
+   * @var HubInterface
    */
   protected $hub;

@@ @@
   /**
    * Subscription service.
    *
-   * @var \Drupal\entity_share_websub_hub\Subscription
+   * @var Subscription
    */
   protected $subscription;

@@ @@

   /**
    * Notifies hub to update the channels relevant to the entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function notifyRelevant(EntityInterface $entity) {
@@ @@

   /**
    * Breaks the syndication for the entity.
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    */
   public function disableSubscriptionsFor(EntityInterface $entity) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


25) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/field/UserField.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_websub_hub\Plugin\views\field;

+use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Plugin/views/field/SyndicatedSummary.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_websub_hub\Plugin\views\field;

+use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityMalformedException;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * Entity repository.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected $entityRepository;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Hub.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_websub_hub;

+use Drupal\Core\Queue\QueueInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Queue\QueueFactory;
 use Drupal\Core\Queue\SuspendQueueException;
@@ @@
   /**
    * Subscription service.
    *
-   * @var \Drupal\entity_share_websub_hub\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription;

@@ @@
   /**
    * The hub notification queue.
    *
-   * @var \Drupal\Core\Queue\QueueInterface
+   * @var QueueInterface
    */
   protected $queue;

@@ @@
   /**
    * Injected Logger service.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $loggerChannelFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


28) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/EventSubscriber/NotificationProcessor.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_websub_hub\EventSubscriber;

+use Symfony\Contracts\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
-use Symfony\Component\EventDispatcher\Event;
 use Drupal\entity_share_websub_hub\HubInterface;
 use Symfony\Component\HttpKernel\KernelEvents;

@@ @@
   /**
    * Drupal\entity_share_websub_hub\HubInterface definition.
    *
-   * @var \Drupal\entity_share_websub_hub\HubInterface
+   * @var HubInterface
    */
   protected $hub;

@@ @@
   /**
    * This method is called when the kernel.terminate is dispatched.
    *
-   * @param \Symfony\Component\EventDispatcher\Event $event
+   * @param Event $event
    *   The dispatched event.
    */
   public function kernelTerminate(Event $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


29) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/src/Controller/SubscriptionController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_share_websub_hub\Controller;

+use Drupal\entity_share_websub_hub\SubscriptionInterface;
+use Drupal\entity_share_websub_hub\HubInterface;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Query\Merge;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ @@
   /**
    * Drupal\entity_share_websub_hub\SubscriptionInterface definition.
    *
-   * @var \Drupal\entity_share_websub_hub\SubscriptionInterface
+   * @var SubscriptionInterface
    */
   protected $subscription;

@@ @@
   /**
    * Drupal\entity_share_websub_hub\SubscriptionInterface definition.
    *
-   * @var \Drupal\entity_share_websub_hub\HubInterface
+   * @var HubInterface
    */
   protected $hub;

@@ @@

   /**
    * Subscribe.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *
-   * @return \Symfony\Component\HttpFoundation\Response
+   * @return Response
    */
   public function subscribe(Request $request) {
     $topic = $request->get('hub_topic');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/entity_share_websub/modules/entity_share_websub_hub/entity_share_websub_hub.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\entity_share_websub_hub\PublisherInterface;
 /**
  * @file
  * Contains entity_share_websub_hub.module.
@@ @@
  * Implements hook_entity_update().
  */
 function entity_share_websub_hub_entity_update(EntityInterface $entity) {
-  /** @var \Drupal\entity_share_websub_hub\PublisherInterface $publisher */
+  /** @var PublisherInterface $publisher */
   if ($entity instanceof FieldableEntityInterface) {
     $publisher = \Drupal::service('entity_share_websub_hub.publisher');

@@ @@
 /**
  * Implements hook_entity_delete().
  */
-function entity_share_websub_hub_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
-  /** @var \Drupal\entity_share_websub_hub\PublisherInterface $publisher */
+function entity_share_websub_hub_entity_delete(EntityInterface $entity) {
+  /** @var PublisherInterface $publisher */
   $publisher = \Drupal::service('entity_share_websub_hub.publisher');
   $publisher->disableSubscriptionsFor($entity);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [WARNING] 3 nodes were removed                                                 

 [OK] 30 files have been changed by Rector                                      

