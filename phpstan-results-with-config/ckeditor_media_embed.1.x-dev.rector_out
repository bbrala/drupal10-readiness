modules/contrib/ckeditor_media_embed/ckeditor_media_embed.api.php
modules/contrib/ckeditor_media_embed/ckeditor_media_embed.install
modules/contrib/ckeditor_media_embed/ckeditor_media_embed.module
modules/contrib/ckeditor_media_embed/src/AssetManager.php
modules/contrib/ckeditor_media_embed/src/CKEditorVersionAwarePluginBase.php
modules/contrib/ckeditor_media_embed/src/Command/CKEditorCliCommandInterface.php
modules/contrib/ckeditor_media_embed/src/Command/CliCommandWrapper.php
modules/contrib/ckeditor_media_embed/src/Command/Drush/CKEditorMediaEmbedCommands.php
modules/contrib/ckeditor_media_embed/src/Command/Drush/InstallCommand.php
modules/contrib/ckeditor_media_embed/src/Command/Drush/UpdateCommand.php
modules/contrib/ckeditor_media_embed/src/Command/InstallCommand.php
modules/contrib/ckeditor_media_embed/src/Command/UpdateCommand.php
modules/contrib/ckeditor_media_embed/src/Embed.php
modules/contrib/ckeditor_media_embed/src/EmbedInterface.php
modules/contrib/ckeditor_media_embed/src/Form/CKEditorMediaEmbedSettingsForm.php
modules/contrib/ckeditor_media_embed/src/Plugin/CKEditorPlugin/AutoEmbed.php
modules/contrib/ckeditor_media_embed/src/Plugin/CKEditorPlugin/AutoLink.php
modules/contrib/ckeditor_media_embed/src/Plugin/CKEditorPlugin/FakeObjects.php
modules/contrib/ckeditor_media_embed/src/Plugin/CKEditorPlugin/Link.php
modules/contrib/ckeditor_media_embed/src/Plugin/CKEditorPlugin/MediaEmbed.php
modules/contrib/ckeditor_media_embed/src/Plugin/CKEditorPlugin/MediaEmbedBase.php
modules/contrib/ckeditor_media_embed/src/Plugin/CKEditorPlugin/Notification.php
modules/contrib/ckeditor_media_embed/src/Plugin/CKEditorPlugin/NotificationAggregator.php
modules/contrib/ckeditor_media_embed/src/Plugin/CKEditorPlugin/SemanticMediaEmbed.php
modules/contrib/ckeditor_media_embed/src/Plugin/CKEditorPlugin/TextMatch.php
modules/contrib/ckeditor_media_embed/src/Plugin/Field/FieldFormatter/CKEditorMediaEmbedFormatter.php
modules/contrib/ckeditor_media_embed/src/Plugin/Filter/FilterCKEditorMediaEmbed.php
modules/contrib/ckeditor_media_embed/tests/src/Unit/AssetManagerTest.php

12 files with changes
=====================

1) modules/contrib/ckeditor_media_embed/tests/src/Unit/AssetManagerTest.php:91

    ---------- begin diff ----------
@@ @@
         ->setMethods(['getLibraryByName'])
         ->getMock();

-      $config_empty = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $config_empty = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
       $config_empty->expects($this->exactly(2))
         ->method('get')
         ->with('ckeditor_version')
         ->willReturn('');

-      $config_factory = $this->getMockBuilder('\Drupal\Core\Config\ConfigFactory')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $config_factory = $this->createMock('\Drupal\Core\Config\ConfigFactory');
       $config_factory->expects($this->exactly(2))
         ->method('get')
         ->with('ckeditor_media_embed.settings')
@@ @@
       $this->assertSame('x.x.x', AssetManager::getCKEditorVersion($library_discovery, $config_factory, $test_library_path, $test_extension), 'The version that should be retrieved is x.x.x');

       // Test with a config file that has ckeditor_version set.
-      $config_set = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $config_set = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
       $config_set->expects($this->once())
         ->method('get')
         ->with('ckeditor_version')
         ->willReturn('4.5.0');

-      $config_factory = $this->getMockBuilder('\Drupal\Core\Config\ConfigFactory')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $config_factory = $this->createMock('\Drupal\Core\Config\ConfigFactory');
       $config_factory->expects($this->once())
         ->method('get')
         ->with('ckeditor_media_embed.settings')
@@ @@
      * Tests \Drupal\ckeditor_media_embed\AssetManager::getPluginsInstalledVersion()(<version>).
      */
     public function testGetPluginsInstalledVersion() {
-      $config_set = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $config_set = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
       $config_set->expects($this->once())
         ->method('get')
         ->with('plugins_version_installed')
         ->willReturn('4.5.0');

-      $config_factory = $this->getMockBuilder('\Drupal\Core\Config\ConfigFactory')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $config_factory = $this->createMock('\Drupal\Core\Config\ConfigFactory');
       $config_factory->expects($this->once())
         ->method('get')
         ->with('ckeditor_media_embed.settings')
@@ @@
         ->disableOriginalConstructor()
         ->setMethods(['getLibraryByName'])
         ->getMock();
-      $config_set = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $config_set = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
       $config_set->expects($this->once())
         ->method('get')
         ->with('plugins_version_installed')
         ->willReturn('x.x.x');

-      $config_factory = $this->getMockBuilder('\Drupal\Core\Config\ConfigFactory')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $config_factory = $this->createMock('\Drupal\Core\Config\ConfigFactory');
       $config_factory->expects($this->once())
         ->method('get')
         ->with('ckeditor_media_embed.settings')
@@ @@
       ['ckeditor_version', '4.5.0'],
       ];

-      $config_set = $this->getMockBuilder('\Drupal\Core\Config\ImmutableConfig')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $config_set = $this->createMock('\Drupal\Core\Config\ImmutableConfig');
       $config_set->expects($this->exactly(2))
         ->method('get')
         ->will($this->returnValueMap($value_map));

-      $config_factory = $this->getMockBuilder('\Drupal\Core\Config\ConfigFactory')
-        ->disableOriginalConstructor()
-        ->getMock();
+      $config_factory = $this->createMock('\Drupal\Core\Config\ConfigFactory');
       $config_factory->expects($this->exactly(2))
         ->method('get')
         ->with('ckeditor_media_embed.settings')
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/ckeditor_media_embed/src/Plugin/Filter/FilterCKEditorMediaEmbed.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor_media_embed\Plugin\Filter;

+use Drupal\ckeditor_media_embed\Embed;
 use Drupal\ckeditor_media_embed\EmbedInterface;

 use Drupal\Core\Form\FormStateInterface;
@@ @@
   /**
    * The Embed object used to convert <oembed> tags to embed html.
    *
-   * @var Drupal\ckeditor_media_embed\Embed
+   * @var Embed
    */
   protected $ckeditorMediaEmbed;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/ckeditor_media_embed/src/Plugin/Field/FieldFormatter/CKEditorMediaEmbedFormatter.php:36

    ---------- begin diff ----------
@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Third party settings.
-   * @param \Drupal\ckeditor_media_embed\EmbedInterface $embed
+   * @param EmbedInterface $embed
    *   The embed service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, EmbedInterface $embed) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/ckeditor_media_embed/src/Form/CKEditorMediaEmbedSettingsForm.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandler
+   * @var ModuleHandler
    */
   protected $moduleHandler;

@@ @@
   /**
    * The URL generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * The library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * Constructs a \Drupal\system\ConfigFormBase object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\Core\Extension\ModuleHandler $module_handler
+   * @param ModuleHandler $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL generator.
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The library discovery service to use for retrieving information about
    *   the CKeditor library.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/ckeditor_media_embed/src/Embed.php:26

    ---------- begin diff ----------
@@ @@
   /**
    * The HTTP client to fetch the embed code with.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;

@@ @@
   /**
    * The unrouted URL assembler service.
    *
-   * @var \Drupal\Core\Utility\UnroutedUrlAssemblerInterface
+   * @var UnroutedUrlAssemblerInterface
    */
   protected $urlAssembler;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The current path service.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $currentPath;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * Constructs an Embed object.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   The http client used to do retrieval of embed codes.
-   * @param \Drupal\Core\Utility\UnroutedUrlAssemblerInterface $url_assembler
+   * @param UnroutedUrlAssemblerInterface $url_assembler
    *   The url assembler used to create url from a parsed url.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory service.
-   * @param \Drupal\Core\Path\CurrentPathStack $current_path
+   * @param CurrentPathStack $current_path
    *   The current path service.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
    */
   public function __construct(ClientInterface $http_client, UnroutedUrlAssemblerInterface $url_assembler, RequestStack $request_stack, MessengerInterface $messenger, ConfigFactory $config_factory, CurrentPathStack $current_path, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


6) modules/contrib/ckeditor_media_embed/src/Command/Drush/InstallCommand.php:30

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs command object.
    *
-   * @param \Drupal\ckeditor_media_embed\Command\CliCommandWrapper $cli_commands
+   * @param CliCommandWrapper $cli_commands
    *   The CKEditor Media Embed CLI Commands service.
    */
   public function __construct(CliCommandWrapper $cli_commands) {
@@ @@
   /**
    * Executes the command.
    *
-   * @param \Symfony\Component\Console\Input\InputInterface $input
+   * @param InputInterface $input
    *   An InputInterface instance.
-   * @param \Symfony\Component\Console\Output\OutputInterface $output
+   * @param OutputInterface $output
    *   An OutputInterface instance.
-   * @param \Drush\Style\DrushStyle $io
+   * @param DrushStyle $io
    *   The Drush i/o object.
    */
   public function execute(InputInterface $input, OutputInterface $output, DrushStyle $io) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


7) modules/contrib/ckeditor_media_embed/src/Command/CliCommandWrapper.php:18

    ---------- begin diff ----------
@@ @@
   /**
    * The CKEditor plugin manager service.
    *
-   * @var \Drupal\ckeditor\CKEditorPluginManager
+   * @var CKEditorPluginManager
    */
   protected $ckeditorPluginManager;

@@ @@
   /**
    * The http client.
    *
-   * @var \GuzzleHttp\Client
+   * @var Client
    */
   protected $httpClient;

@@ @@
   /**
    * The library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscovery
+   * @var LibraryDiscovery
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
   /**
    * The file system component.
    *
-   * @var \Symfony\Component\Filesystem\Filesystem
+   * @var Filesystem
    */
   protected $fileSystem;

@@ @@
   /**
    * Constructs CLI commands object.
    *
-   * @param \Drupal\ckeditor\CKEditorPluginManager $ckeditorPluginManager
+   * @param CKEditorPluginManager $ckeditorPluginManager
    *   The CKEditor plugin manager service.
-   * @param \Drupal\Core\Asset\LibraryDiscovery $libraryDiscovery
+   * @param LibraryDiscovery $libraryDiscovery
    *   The library discover service.
-   * @param \GuzzleHttp\Client $httpClient
+   * @param Client $httpClient
    *   The http client.
-   * @param \Drupal\Core\Config\ConfigFactory $configFactory
+   * @param ConfigFactory $configFactory
    *   The config factory service.
    */
   public function __construct(CKEditorPluginManager $ckeditorPluginManager, LibraryDiscovery $libraryDiscovery, Client $httpClient, ConfigFactory $configFactory) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


8) modules/contrib/ckeditor_media_embed/src/Command/CKEditorCliCommandInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\ckeditor_media_embed\Command;

+use Symfony\Component\Console\Input\InputInterface;
+use Symfony\Component\Console\Style\StyleInterface;
 interface CKEditorCliCommandInterface {

   /**
    * Retrieve the command input service.
    *
-   * @return \Symfony\Component\Console\Input\InputInterface
+   * @return InputInterface
    */
   public function getInput();

@@ @@
   /**
    * Retrieve the i/o style.
    *
-   * @return \Symfony\Component\Console\Style\StyleInterface
+   * @return StyleInterface
    */
   public function getIo();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/ckeditor_media_embed/src/CKEditorVersionAwarePluginBase.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The library discovery service.
    *
-   * @var \Drupal\Core\Asset\LibraryDiscoveryInterface
+   * @var LibraryDiscoveryInterface
    */
   protected $libraryDiscovery;

@@ @@
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;

@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The library discovery service.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, LibraryDiscoveryInterface $library_discovery, ConfigFactory $config_factory) {
@@ @@
   /**
    * Creates an instance of the plugin.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The container to pull out services used in the plugin.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/ckeditor_media_embed/src/AssetManager.php:109

    ---------- begin diff ----------
@@ @@
   /**
    * Retrieve version number of the currently installed CKEditor.
    *
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The library discovery service to use for retrieving information about
    *   the CKeditor library.
    * @param \Drupal\Core\Config\ConfigFactory
@@ @@
   /**
    * Retrieve the currently installed version of the CKEditor plugins.
    *
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory service to use for retrieving configuration settings.
    *
    * @return string
@@ @@
   /**
    * Get the plugins version.
    *
-   * @param \Drupal\Core\Asset\LibraryDiscoveryInterface $library_discovery
+   * @param LibraryDiscoveryInterface $library_discovery
    *   The library discovery service to use for retrieving information about
    *   the CKeditor library.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   The config factory service to use for retrieving configuration
    *   information about CKeditor Media Embed.
    * @param string $path
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


11) modules/contrib/ckeditor_media_embed/ckeditor_media_embed.module:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Render\MarkupInterface;
 /**
  * @file
  * Module file for the CKEditor Media Embed plugin module.
@@ @@
  *   (Optional) Determine if the prefix should be prepended to the install
  *   message. Defaults to true.
  *
- * @return string|\Drupal\Component\Render\MarkupInterface
+ * @return string|MarkupInterface
  *   A safe string representation of the install instructions.
  */
 function _ckeditor_media_embed_get_install_instructions($prefix = TRUE, $update = FALSE) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


12) modules/contrib/ckeditor_media_embed/ckeditor_media_embed.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Component\Render\MarkupInterface;
 /**
  * @file
  * Install file for the CKEditor Media Embed plugin module.
@@ @@
  * @param bool $mixed_version
  *   Determines if we should show the mixed version message.
  *
- * @return string|\Drupal\Component\Render\MarkupInterface
+ * @return string|MarkupInterface
  *   A safe string representation of the requirements description.
  */
 function _ckeditor_media_embed_requirments_build_description(array $installed_plugins, array $missing_plugins, $mixed_version) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [ERROR] Could not process                                                      
         "modules/contrib/ckeditor_media_embed/src/Command/UpdateCommand.php"   
         file, due to:                                                          
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/ckeditor_media_embed/src/Command/InstallCommand.php"  
         file, due to:                                                          
         "Analyze error: "Class Drupal\Console\Core\Command\Command not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

