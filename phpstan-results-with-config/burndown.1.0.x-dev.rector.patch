diff --git a/burndown.module b/burndown.module
index 0bb5a80..6cf2982 100644
--- a/burndown.module
+++ b/burndown.module
@@ -427,7 +427,7 @@ function burndown_form_burndown_sprint_add_form_alter(&$form, FormStateInterface
  *
  * @param array $form
  *   The form that will be altered.
- * @param \Drupal\Core\Form\FormStateInterface $form_state
+ * @param FormStateInterface $form_state
  *   FormState Object.
  */
 function _burndown_task_ajax_submit(array $form, FormStateInterface &$form_state) {
diff --git a/src/Controller/BacklogController.php b/src/Controller/BacklogController.php
index c1cc6d7..13c6bbf 100644
--- a/src/Controller/BacklogController.php
+++ b/src/Controller/BacklogController.php
@@ -22,14 +22,14 @@ class BacklogController extends ControllerBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a BoardController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
diff --git a/src/Controller/BoardController.php b/src/Controller/BoardController.php
index fb4fe41..114afaa 100644
--- a/src/Controller/BoardController.php
+++ b/src/Controller/BoardController.php
@@ -18,19 +18,19 @@ use Symfony\Component\HttpFoundation\Request;
  */
 class BoardController extends ControllerBase {
   /**
-   * The entity type manager.
-   *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
-   */
-  protected $entityTypeManager;
+		 * The entity type manager.
+		 *
+		 * @var EntityTypeManagerInterface
+		 */
+		protected $entityTypeManager;
 
   /**
-   * Constructs a BoardController object.
-   *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   *   The entityTypeManager.
-   */
-  public function __construct(EntityTypeManagerInterface $entityTypeManager) {
+		 * Constructs a BoardController object.
+		 *
+		 * @param EntityTypeManagerInterface $entityTypeManager
+		 *   The entityTypeManager.
+		 */
+		public function __construct(EntityTypeManagerInterface $entityTypeManager) {
     $this->entityTypeManager = $entityTypeManager;
   }
 
diff --git a/src/Controller/CompletedController.php b/src/Controller/CompletedController.php
index 7adaa76..c8ab87c 100644
--- a/src/Controller/CompletedController.php
+++ b/src/Controller/CompletedController.php
@@ -18,14 +18,14 @@ class CompletedController extends ControllerBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a BoardController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
diff --git a/src/Controller/ProjectController.php b/src/Controller/ProjectController.php
index 3eca9d7..cdb0b39 100644
--- a/src/Controller/ProjectController.php
+++ b/src/Controller/ProjectController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\burndown\Controller;
 
+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
 use Drupal\burndown\Entity\ProjectInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ -17,18 +19,18 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class ProjectController extends ControllerBase implements ContainerInjectionInterface {
 
   /**
-   * The date formatter.
-   *
-   * @var \Drupal\Core\Datetime\DateFormatter
-   */
-  protected $dateFormatter;
+		 * The date formatter.
+		 *
+		 * @var DateFormatter
+		 */
+		protected $dateFormatter;
 
   /**
-   * The renderer.
-   *
-   * @var \Drupal\Core\Render\Renderer
-   */
-  protected $renderer;
+		 * The renderer.
+		 *
+		 * @var Renderer
+		 */
+		protected $renderer;
 
   /**
    * {@inheritdoc}
@@ -76,15 +78,15 @@ class ProjectController extends ControllerBase implements ContainerInjectionInte
   }
 
   /**
-   * Generates an overview table of older revisions of a Project.
-   *
-   * @param \Drupal\burndown\Entity\ProjectInterface $burndown_project
-   *   A Project object.
-   *
-   * @return array
-   *   An array as expected by drupal_render().
-   */
-  public function revisionOverview(ProjectInterface $burndown_project) {
+		 * Generates an overview table of older revisions of a Project.
+		 *
+		 * @param ProjectInterface $burndown_project
+		 *   A Project object.
+		 *
+		 * @return array
+		 *   An array as expected by drupal_render().
+		 */
+		public function revisionOverview(ProjectInterface $burndown_project) {
     $account = $this->currentUser();
     $burndown_project_storage = $this->entityTypeManager()->getStorage('burndown_project');
 
diff --git a/src/Controller/SprintController.php b/src/Controller/SprintController.php
index 3d1ff22..935d90a 100644
--- a/src/Controller/SprintController.php
+++ b/src/Controller/SprintController.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\burndown\Controller;
 
+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
 use Drupal\burndown\Entity\SprintInterface;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Controller\ControllerBase;
@@ -17,18 +19,18 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class SprintController extends ControllerBase implements ContainerInjectionInterface {
 
   /**
-   * The date formatter.
-   *
-   * @var \Drupal\Core\Datetime\DateFormatter
-   */
-  protected $dateFormatter;
+		 * The date formatter.
+		 *
+		 * @var DateFormatter
+		 */
+		protected $dateFormatter;
 
   /**
-   * The renderer.
-   *
-   * @var \Drupal\Core\Render\Renderer
-   */
-  protected $renderer;
+		 * The renderer.
+		 *
+		 * @var Renderer
+		 */
+		protected $renderer;
 
   /**
    * {@inheritdoc}
@@ -76,15 +78,15 @@ class SprintController extends ControllerBase implements ContainerInjectionInter
   }
 
   /**
-   * Generates an overview table of older revisions of a Sprint.
-   *
-   * @param \Drupal\burndown\Entity\SprintInterface $burndown_sprint
-   *   A Sprint object.
-   *
-   * @return array
-   *   An array as expected by drupal_render().
-   */
-  public function revisionOverview(SprintInterface $burndown_sprint) {
+		 * Generates an overview table of older revisions of a Sprint.
+		 *
+		 * @param SprintInterface $burndown_sprint
+		 *   A Sprint object.
+		 *
+		 * @return array
+		 *   An array as expected by drupal_render().
+		 */
+		public function revisionOverview(SprintInterface $burndown_sprint) {
     $account = $this->currentUser();
     $burndown_sprint_storage = $this->entityTypeManager()->getStorage('burndown_sprint');
 
diff --git a/src/Controller/SwimlaneController.php b/src/Controller/SwimlaneController.php
index 5c6e42a..9e1462c 100644
--- a/src/Controller/SwimlaneController.php
+++ b/src/Controller/SwimlaneController.php
@@ -17,14 +17,14 @@ class SwimlaneController extends ControllerBase {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a BoardController object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entityTypeManager.
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
diff --git a/src/Controller/TaskController.php b/src/Controller/TaskController.php
index 726e7cd..4b06868 100644
--- a/src/Controller/TaskController.php
+++ b/src/Controller/TaskController.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\burndown\Controller;
 
+use Drupal\Core\Datetime\DateFormatter;
+use Drupal\Core\Render\Renderer;
+use Symfony\Component\EventDispatcher\EventDispatcher;
 use Drupal\burndown\Entity\Swimlane;
 use Drupal\burndown\Entity\Task;
 use Drupal\burndown\Entity\TaskInterface;
@@ -36,32 +39,32 @@ class TaskController extends ControllerBase implements ContainerInjectionInterfa
   protected $account;
 
   /**
-   * The date formatter.
-   *
-   * @var \Drupal\Core\Datetime\DateFormatter
-   */
-  protected $dateFormatter;
+		 * The date formatter.
+		 *
+		 * @var DateFormatter
+		 */
+		protected $dateFormatter;
 
   /**
-   * The Messenger service.
-   *
-   * @var \Drupal\Core\Messenger\MessengerInterface
-   */
-  protected $messenger;
+		 * The Messenger service.
+		 *
+		 * @var MessengerInterface
+		 */
+		protected $messenger;
 
   /**
-   * The renderer.
-   *
-   * @var \Drupal\Core\Render\Renderer
-   */
-  protected $renderer;
+		 * The renderer.
+		 *
+		 * @var Renderer
+		 */
+		protected $renderer;
 
   /**
-   * Event dispatcher.
-   *
-   * @var Symfony\Component\EventDispatcher\EventDispatcher
-   */
-  protected $eventDispatcher;
+		 * Event dispatcher.
+		 *
+		 * @var EventDispatcher
+		 */
+		protected $eventDispatcher;
 
   /**
    * {@inheritdoc}
@@ -122,16 +125,16 @@ class TaskController extends ControllerBase implements ContainerInjectionInterfa
       '#data' => $data,
     ];
 
-    return new Response(render($build));
+    return new Response(\Drupal::service('renderer')->render($build));
   }
 
   /**
-   * Add a comment to a Task.
-   *
-   * @param \Symfony\Component\HttpFoundation\Request $request
-   *   The Request object from which to determine the Task to comment.
-   */
-  public function addComment(Request $request) {
+		 * Add a comment to a Task.
+		 *
+		 * @param Request $request
+		 *   The Request object from which to determine the Task to comment.
+		 */
+		public function addComment(Request $request) {
     // Get data from request (validated below).
     $ticket_id = $request->request->get('ticket_id');
     $comment = $request->request->get('comment');
@@ -169,12 +172,12 @@ class TaskController extends ControllerBase implements ContainerInjectionInterfa
   }
 
   /**
-   * Add a work log to the Task.
-   *
-   * @param \Symfony\Component\HttpFoundation\Request $request
-   *   The Request object from which to determine the Task to add work to.
-   */
-  public static function addWork(Request $request) {
+		 * Add a work log to the Task.
+		 *
+		 * @param Request $request
+		 *   The Request object from which to determine the Task to add work to.
+		 */
+		public static function addWork(Request $request) {
     // Get data from request (validated below).
     $ticket_id = $request->request->get('ticket_id');
     $comment = $request->request->get('comment');
@@ -375,7 +378,7 @@ class TaskController extends ControllerBase implements ContainerInjectionInterfa
       '#data' => $data,
     ];
 
-    return new Response(render($build));
+    return new Response(\Drupal::service('renderer')->render($build));
 
   }
 
@@ -629,15 +632,15 @@ class TaskController extends ControllerBase implements ContainerInjectionInterfa
   }
 
   /**
-   * Generates an overview table of older revisions of a Task.
-   *
-   * @param \Drupal\burndown\Entity\TaskInterface $burndown_task
-   *   A Task object.
-   *
-   * @return array
-   *   An array as expected by drupal_render().
-   */
-  public function revisionOverview(TaskInterface $burndown_task) {
+		 * Generates an overview table of older revisions of a Task.
+		 *
+		 * @param TaskInterface $burndown_task
+		 *   A Task object.
+		 *
+		 * @return array
+		 *   An array as expected by drupal_render().
+		 */
+		public function revisionOverview(TaskInterface $burndown_task) {
     $account = $this->currentUser();
     $burndown_task_storage = $this->entityTypeManager()->getStorage('burndown_task');
 
diff --git a/src/Entity/ProjectInterface.php b/src/Entity/ProjectInterface.php
index 0db6d81..41ecc5f 100644
--- a/src/Entity/ProjectInterface.php
+++ b/src/Entity/ProjectInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\burndown\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ -79,7 +80,7 @@ interface ProjectInterface extends ContentEntityInterface, RevisionLogInterface,
   /**
    * Gets the Project revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
diff --git a/src/Entity/SprintInterface.php b/src/Entity/SprintInterface.php
index 93ab118..ded8336 100644
--- a/src/Entity/SprintInterface.php
+++ b/src/Entity/SprintInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\burndown\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ -79,7 +80,7 @@ interface SprintInterface extends ContentEntityInterface, RevisionLogInterface,
   /**
    * Gets the Sprint revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
diff --git a/src/Entity/Task.php b/src/Entity/Task.php
index 6cc0b15..fab4b55 100644
--- a/src/Entity/Task.php
+++ b/src/Entity/Task.php
@@ -903,7 +903,7 @@ class Task extends EditorialContentEntityBase implements TaskInterface {
     $user = User::load($user_id);
     if ($user->hasField('user_picture') &&
       !$user->user_picture->isEmpty()) {
-      return file_create_url($user->user_picture->entity->getFileUri());
+      return \Drupal::service('file_url_generator')->generateAbsoluteString($user->user_picture->entity->getFileUri());
     }
 
     return FALSE;
@@ -978,7 +978,7 @@ class Task extends EditorialContentEntityBase implements TaskInterface {
     $user = User::load($user_id);
     if ($user->hasField('user_picture') &&
       !$user->user_picture->isEmpty()) {
-      return file_create_url($user->user_picture->entity->getFileUri());
+      return \Drupal::service('file_url_generator')->generateAbsoluteString($user->user_picture->entity->getFileUri());
     }
 
     return FALSE;
diff --git a/src/Entity/TaskInterface.php b/src/Entity/TaskInterface.php
index 22736c8..a919256 100644
--- a/src/Entity/TaskInterface.php
+++ b/src/Entity/TaskInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\burndown\Entity;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityChangedInterface;
 use Drupal\Core\Entity\EntityPublishedInterface;
@@ -79,7 +80,7 @@ interface TaskInterface extends ContentEntityInterface, RevisionLogInterface, En
   /**
    * Gets the Task revision author.
    *
-   * @return \Drupal\user\UserInterface
+   * @return UserInterface
    *   The user entity for the revision author.
    */
   public function getRevisionUser();
diff --git a/src/Event/TaskChangedEvent.php b/src/Event/TaskChangedEvent.php
index da11fca..743b432 100644
--- a/src/Event/TaskChangedEvent.php
+++ b/src/Event/TaskChangedEvent.php
@@ -15,14 +15,14 @@ class TaskChangedEvent extends Event {
   /**
    * The task.
    *
-   * @var Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $task;
 
   /**
    * Constructs the object.
    *
-   * @param Drupal\Core\Entity\EntityInterface $task
+   * @param EntityInterface $task
    *   The modified task.
    */
   public function __construct(EntityInterface $task) {
diff --git a/src/Event/TaskClosedEvent.php b/src/Event/TaskClosedEvent.php
index 76a7d19..3585310 100644
--- a/src/Event/TaskClosedEvent.php
+++ b/src/Event/TaskClosedEvent.php
@@ -15,14 +15,14 @@ class TaskClosedEvent extends Event {
   /**
    * The task.
    *
-   * @var Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $task;
 
   /**
    * Constructs the object.
    *
-   * @param Drupal\Core\Entity\EntityInterface $task
+   * @param EntityInterface $task
    *   The task that was closed.
    */
   public function __construct(EntityInterface $task) {
diff --git a/src/Event/TaskCommentEvent.php b/src/Event/TaskCommentEvent.php
index 7b65316..9d9ae70 100644
--- a/src/Event/TaskCommentEvent.php
+++ b/src/Event/TaskCommentEvent.php
@@ -15,7 +15,7 @@ class TaskCommentEvent extends Event {
   /**
    * The task.
    *
-   * @var Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $task;
 
@@ -29,7 +29,7 @@ class TaskCommentEvent extends Event {
   /**
    * Constructs the object.
    *
-   * @param Drupal\Core\Entity\EntityInterface $task
+   * @param EntityInterface $task
    *   The newly created task.
    * @param string $comment
    *   The text of the comment.
diff --git a/src/Event/TaskCreatedEvent.php b/src/Event/TaskCreatedEvent.php
index 6603e41..4e14553 100644
--- a/src/Event/TaskCreatedEvent.php
+++ b/src/Event/TaskCreatedEvent.php
@@ -15,14 +15,14 @@ class TaskCreatedEvent extends Event {
   /**
    * The task.
    *
-   * @var Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $task;
 
   /**
    * Constructs the object.
    *
-   * @param Drupal\Core\Entity\EntityInterface $task
+   * @param EntityInterface $task
    *   The newly created task.
    */
   public function __construct(EntityInterface $task) {
diff --git a/src/Event/TaskWorkEvent.php b/src/Event/TaskWorkEvent.php
index 1cc8fdf..d9e509b 100644
--- a/src/Event/TaskWorkEvent.php
+++ b/src/Event/TaskWorkEvent.php
@@ -15,7 +15,7 @@ class TaskWorkEvent extends Event {
   /**
    * The task.
    *
-   * @var Drupal\Core\Entity\EntityInterface
+   * @var EntityInterface
    */
   public $task;
 
@@ -43,7 +43,7 @@ class TaskWorkEvent extends Event {
   /**
    * Constructs the object.
    *
-   * @param Drupal\Core\Entity\EntityInterface $task
+   * @param EntityInterface $task
    *   The newly created task.
    * @param string $comment
    *   The comment.
diff --git a/src/EventSubscriber/TaskNotificationsSubscriber.php b/src/EventSubscriber/TaskNotificationsSubscriber.php
index 540d839..0b136ac 100644
--- a/src/EventSubscriber/TaskNotificationsSubscriber.php
+++ b/src/EventSubscriber/TaskNotificationsSubscriber.php
@@ -32,7 +32,7 @@ class TaskNotificationsSubscriber implements EventSubscriberInterface {
   /**
    * React to a task being created.
    *
-   * @param Drupal\burndown\Event\TaskCreatedEvent $event
+   * @param TaskCreatedEvent $event
    *   Task added event.
    */
   public function taskAdded(TaskCreatedEvent $event) {
@@ -111,7 +111,7 @@ class TaskNotificationsSubscriber implements EventSubscriberInterface {
   /**
    * React to a task being edited.
    *
-   * @param Drupal\burndown\Event\TaskChangedEvent $event
+   * @param TaskChangedEvent $event
    *   Task changed event.
    */
   public function taskChanged(TaskChangedEvent $event) {
@@ -194,7 +194,7 @@ class TaskNotificationsSubscriber implements EventSubscriberInterface {
   /**
    * React to a task comment.
    *
-   * @param Drupal\burndown\Event\TaskCommentEvent $event
+   * @param TaskCommentEvent $event
    *   Task comment event.
    */
   public function taskCommented(TaskCommentEvent $event) {
diff --git a/src/Form/ProjectForm.php b/src/Form/ProjectForm.php
index c41aa45..e98b663 100644
--- a/src/Form/ProjectForm.php
+++ b/src/Form/ProjectForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\burndown\Form;
 
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\burndown\Entity\Project;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,7 +18,7 @@ class ProjectForm extends ContentEntityForm {
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
@@ -34,7 +36,7 @@ class ProjectForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\burndown\Entity\Project $entity */
+    /** @var Project $entity */
     $form = parent::buildForm($form, $form_state);
 
     if (!$this->entity->isNew()) {
diff --git a/src/Form/ProjectRevisionDeleteForm.php b/src/Form/ProjectRevisionDeleteForm.php
index 6ca41ed..ecd0073 100644
--- a/src/Form/ProjectRevisionDeleteForm.php
+++ b/src/Form/ProjectRevisionDeleteForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\burndown\Form;
 
+use Drupal\burndown\Entity\ProjectInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -17,21 +20,21 @@ class ProjectRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Project revision.
    *
-   * @var \Drupal\burndown\Entity\ProjectInterface
+   * @var ProjectInterface
    */
   protected $revision;
 
   /**
    * The Project storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $projectStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
diff --git a/src/Form/ProjectRevisionRevertForm.php b/src/Form/ProjectRevisionRevertForm.php
index 47ca204..08e4a5f 100644
--- a/src/Form/ProjectRevisionRevertForm.php
+++ b/src/Form/ProjectRevisionRevertForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\burndown\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\burndown\Entity\ProjectInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,21 +20,21 @@ class ProjectRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Project revision.
    *
-   * @var \Drupal\burndown\Entity\ProjectInterface
+   * @var ProjectInterface
    */
   protected $revision;
 
   /**
    * The Project storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $projectStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -133,12 +135,12 @@ class ProjectRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\burndown\Entity\ProjectInterface $revision
+   * @param ProjectInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\burndown\Entity\ProjectInterface
+   * @return ProjectInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(ProjectInterface $revision, FormStateInterface $form_state) {
diff --git a/src/Form/ProjectRevisionRevertTranslationForm.php b/src/Form/ProjectRevisionRevertTranslationForm.php
index a05794c..7a4f829 100644
--- a/src/Form/ProjectRevisionRevertTranslationForm.php
+++ b/src/Form/ProjectRevisionRevertTranslationForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\burndown\Form;
 
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\burndown\Entity\ProjectInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -23,7 +24,7 @@ class ProjectRevisionRevertTranslationForm extends ProjectRevisionRevertForm {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -75,7 +76,7 @@ class ProjectRevisionRevertTranslationForm extends ProjectRevisionRevertForm {
   protected function prepareRevertedRevision(ProjectInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\burndown\Entity\ProjectInterface $default_revision */
+    /** @var ProjectInterface $default_revision */
     $latest_revision = $this->ProjectStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
diff --git a/src/Form/ProjectSettingsForm.php b/src/Form/ProjectSettingsForm.php
index f603358..ca8616a 100644
--- a/src/Form/ProjectSettingsForm.php
+++ b/src/Form/ProjectSettingsForm.php
@@ -27,7 +27,7 @@ class ProjectSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class ProjectSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/SprintCloseForm.php b/src/Form/SprintCloseForm.php
index f1972f2..da53a8a 100644
--- a/src/Form/SprintCloseForm.php
+++ b/src/Form/SprintCloseForm.php
@@ -32,7 +32,7 @@ class SprintCloseForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param int $sprint_id
    *   The entity ID of the Sprint to be loaded.
@@ -256,7 +256,7 @@ class SprintCloseForm extends FormBase {
   /**
    * Ajax callback to close the modal dialog.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An Ajax Response object.
    */
   public function closeModalForm() {
@@ -271,7 +271,7 @@ class SprintCloseForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {}
diff --git a/src/Form/SprintForm.php b/src/Form/SprintForm.php
index 44603fe..45b1c94 100644
--- a/src/Form/SprintForm.php
+++ b/src/Form/SprintForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\burndown\Form;
 
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\burndown\Entity\Sprint;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,7 +18,7 @@ class SprintForm extends ContentEntityForm {
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
@@ -34,7 +36,7 @@ class SprintForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\burndown\Entity\Sprint $entity */
+    /** @var Sprint $entity */
     $form = parent::buildForm($form, $form_state);
 
     if (!$this->entity->isNew()) {
diff --git a/src/Form/SprintRevisionDeleteForm.php b/src/Form/SprintRevisionDeleteForm.php
index 67bf611..cfc51cd 100644
--- a/src/Form/SprintRevisionDeleteForm.php
+++ b/src/Form/SprintRevisionDeleteForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\burndown\Form;
 
+use Drupal\burndown\Entity\SprintInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -17,21 +20,21 @@ class SprintRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Sprint revision.
    *
-   * @var \Drupal\burndown\Entity\SprintInterface
+   * @var SprintInterface
    */
   protected $revision;
 
   /**
    * The Sprint storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $sprintStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
diff --git a/src/Form/SprintRevisionRevertForm.php b/src/Form/SprintRevisionRevertForm.php
index 7cc6b55..e17cfe0 100644
--- a/src/Form/SprintRevisionRevertForm.php
+++ b/src/Form/SprintRevisionRevertForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\burndown\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\burndown\Entity\SprintInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,21 +20,21 @@ class SprintRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Sprint revision.
    *
-   * @var \Drupal\burndown\Entity\SprintInterface
+   * @var SprintInterface
    */
   protected $revision;
 
   /**
    * The Sprint storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $sprintStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -132,12 +134,12 @@ class SprintRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\burndown\Entity\SprintInterface $revision
+   * @param SprintInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\burndown\Entity\SprintInterface
+   * @return SprintInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(SprintInterface $revision, FormStateInterface $form_state) {
diff --git a/src/Form/SprintRevisionRevertTranslationForm.php b/src/Form/SprintRevisionRevertTranslationForm.php
index f155ee9..42c73d0 100644
--- a/src/Form/SprintRevisionRevertTranslationForm.php
+++ b/src/Form/SprintRevisionRevertTranslationForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\burndown\Form;
 
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\burndown\Entity\SprintInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -23,7 +24,7 @@ class SprintRevisionRevertTranslationForm extends SprintRevisionRevertForm {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -75,7 +76,7 @@ class SprintRevisionRevertTranslationForm extends SprintRevisionRevertForm {
   protected function prepareRevertedRevision(SprintInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\burndown\Entity\SprintInterface $default_revision */
+    /** @var SprintInterface $default_revision */
     $latest_revision = $this->SprintStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
diff --git a/src/Form/SprintSettingsForm.php b/src/Form/SprintSettingsForm.php
index aed2815..46d2063 100644
--- a/src/Form/SprintSettingsForm.php
+++ b/src/Form/SprintSettingsForm.php
@@ -27,7 +27,7 @@ class SprintSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class SprintSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/SwimlaneForm.php b/src/Form/SwimlaneForm.php
index 1e97a27..4f93a48 100644
--- a/src/Form/SwimlaneForm.php
+++ b/src/Form/SwimlaneForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\burndown\Form;
 
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\burndown\Entity\Swimlane;
 use Drupal\Core\Entity\ContentEntityForm;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -16,7 +18,7 @@ class SwimlaneForm extends ContentEntityForm {
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $account;
 
@@ -34,7 +36,7 @@ class SwimlaneForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\burndown\Entity\Swimlane $entity */
+    /** @var Swimlane $entity */
     $form = parent::buildForm($form, $form_state);
 
     // Hide miscellaneous items.
diff --git a/src/Form/SwimlaneSettingsForm.php b/src/Form/SwimlaneSettingsForm.php
index d94706e..b707e15 100644
--- a/src/Form/SwimlaneSettingsForm.php
+++ b/src/Form/SwimlaneSettingsForm.php
@@ -27,7 +27,7 @@ class SwimlaneSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class SwimlaneSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Form/TaskCloseForm.php b/src/Form/TaskCloseForm.php
index aec9edf..2554696 100644
--- a/src/Form/TaskCloseForm.php
+++ b/src/Form/TaskCloseForm.php
@@ -55,7 +55,7 @@ class TaskCloseForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param int|null $ticket_id
    *   The id of the ticket from which to load the Task.
@@ -205,7 +205,7 @@ class TaskCloseForm extends FormBase {
   /**
    * Close the modal form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   An Ajax Response object.
    */
   public function closeModalForm() {
@@ -220,7 +220,7 @@ class TaskCloseForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {}
diff --git a/src/Form/TaskForm.php b/src/Form/TaskForm.php
index 12e40b1..d0ff440 100644
--- a/src/Form/TaskForm.php
+++ b/src/Form/TaskForm.php
@@ -45,8 +45,8 @@ class TaskForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state) {
-    /** @var \Drupal\burndown\Entity\Task $entity */
-    $form = parent::buildForm($form, $form_state);
+    /** @var Task $entity */
+				$form = parent::buildForm($form, $form_state);
 	
 	// Disable form cache so that the image upload can work.
 	$form_state->disableCache();
@@ -123,7 +123,7 @@ class TaskForm extends ContentEntityForm {
       }
 
       $link = $link->toRenderable();
-      $link = render($link);
+      $link = \Drupal::service('renderer')->render($link);
       $link = (String) $link;
 
       $form['watchlist_link'] = [
@@ -145,7 +145,7 @@ class TaskForm extends ContentEntityForm {
         );
 
       $link = $link->toRenderable();
-      $link = render($link);
+      $link = \Drupal::service('renderer')->render($link);
       $link = (String) $link;
 
       $form['reopen_task'] = [
diff --git a/src/Form/TaskRevisionDeleteForm.php b/src/Form/TaskRevisionDeleteForm.php
index 06300d6..ad0595f 100644
--- a/src/Form/TaskRevisionDeleteForm.php
+++ b/src/Form/TaskRevisionDeleteForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\burndown\Form;
 
+use Drupal\burndown\Entity\TaskInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Url;
@@ -17,21 +20,21 @@ class TaskRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Task revision.
    *
-   * @var \Drupal\burndown\Entity\TaskInterface
+   * @var TaskInterface
    */
   protected $revision;
 
   /**
    * The Task storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $taskStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
diff --git a/src/Form/TaskRevisionRevertForm.php b/src/Form/TaskRevisionRevertForm.php
index 4ee7ce7..2a38a7e 100644
--- a/src/Form/TaskRevisionRevertForm.php
+++ b/src/Form/TaskRevisionRevertForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\burndown\Form;
 
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\burndown\Entity\TaskInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,21 +20,21 @@ class TaskRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Task revision.
    *
-   * @var \Drupal\burndown\Entity\TaskInterface
+   * @var TaskInterface
    */
   protected $revision;
 
   /**
    * The Task storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $taskStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
@@ -133,12 +135,12 @@ class TaskRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\burndown\Entity\TaskInterface $revision
+   * @param TaskInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\burndown\Entity\TaskInterface
+   * @return TaskInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(TaskInterface $revision, FormStateInterface $form_state) {
diff --git a/src/Form/TaskRevisionRevertTranslationForm.php b/src/Form/TaskRevisionRevertTranslationForm.php
index b5c257d..4be6209 100644
--- a/src/Form/TaskRevisionRevertTranslationForm.php
+++ b/src/Form/TaskRevisionRevertTranslationForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\burndown\Form;
 
+use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\burndown\Entity\TaskInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -23,7 +24,7 @@ class TaskRevisionRevertTranslationForm extends TaskRevisionRevertForm {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
@@ -75,7 +76,7 @@ class TaskRevisionRevertTranslationForm extends TaskRevisionRevertForm {
   protected function prepareRevertedRevision(TaskInterface $revision, FormStateInterface $form_state) {
     $revert_untranslated_fields = $form_state->getValue('revert_untranslated_fields');
 
-    /** @var \Drupal\burndown\Entity\TaskInterface $default_revision */
+    /** @var TaskInterface $default_revision */
     $latest_revision = $this->TaskStorage->load($revision->id());
     $latest_revision_translation = $latest_revision->getTranslation($this->langcode);
 
diff --git a/src/Form/TaskSettingsForm.php b/src/Form/TaskSettingsForm.php
index e907955..ae87860 100644
--- a/src/Form/TaskSettingsForm.php
+++ b/src/Form/TaskSettingsForm.php
@@ -27,7 +27,7 @@ class TaskSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
@@ -39,7 +39,7 @@ class TaskSettingsForm extends FormBase {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array
diff --git a/src/Plugin/Block/ProjectCloudBlock.php b/src/Plugin/Block/ProjectCloudBlock.php
index 0cf649a..807d20e 100644
--- a/src/Plugin/Block/ProjectCloudBlock.php
+++ b/src/Plugin/Block/ProjectCloudBlock.php
@@ -23,14 +23,14 @@ class ProjectCloudBlock extends BlockBase implements ContainerFactoryPluginInter
   /**
    * A service for generating a project word cloud.
    *
-   * @var \Drupal\burndown\Services\ProjectCloudService
+   * @var ProjectCloudService
    */
   protected $projectCloudService;
 
   /**
    * A service for getting the current path.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $pathService;
 
diff --git a/src/Plugin/Block/ProjectNavBlock.php b/src/Plugin/Block/ProjectNavBlock.php
index a651123..ea7d862 100644
--- a/src/Plugin/Block/ProjectNavBlock.php
+++ b/src/Plugin/Block/ProjectNavBlock.php
@@ -35,7 +35,7 @@ class ProjectNavBlock extends BlockBase implements ContainerFactoryPluginInterfa
   /**
    * Path service.
    *
-   * @var \Drupal\Core\Path\CurrentPathStack
+   * @var CurrentPathStack
    */
   protected $pathService;
 
diff --git a/src/ProjectAccessControlHandler.php b/src/ProjectAccessControlHandler.php
index d7ef49e..9ebe085 100644
--- a/src/ProjectAccessControlHandler.php
+++ b/src/ProjectAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\burndown;
 
+use Drupal\burndown\Entity\ProjectInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -18,8 +19,7 @@ class ProjectAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\burndown\Entity\ProjectInterface $entity */
-
+    /** @var ProjectInterface $entity */
     switch ($operation) {
 
       case 'view':
@@ -71,11 +71,11 @@ class ProjectAccessControlHandler extends EntityAccessControlHandler {
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which ownership is being checked.
    * @param string $operation
    *   The operation which user is attempting to carry out.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account for which ownership and permissions are being checked.
    *
    * @return string|null
diff --git a/src/ProjectHtmlRouteProvider.php b/src/ProjectHtmlRouteProvider.php
index 0bccb2c..ad3f7ee 100644
--- a/src/ProjectHtmlRouteProvider.php
+++ b/src/ProjectHtmlRouteProvider.php
@@ -52,10 +52,10 @@ class ProjectHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -76,10 +76,10 @@ class ProjectHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -100,10 +100,10 @@ class ProjectHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -124,10 +124,10 @@ class ProjectHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -148,10 +148,10 @@ class ProjectHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ -172,10 +172,10 @@ class ProjectHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/ProjectListBuilder.php b/src/ProjectListBuilder.php
index 3a7ebec..e6ce187 100644
--- a/src/ProjectListBuilder.php
+++ b/src/ProjectListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\burndown;
 
+use Drupal\burndown\Entity\Project;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ -29,7 +30,7 @@ class ProjectListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\burndown\Entity\Project $entity */
+    /** @var Project $entity */
     $row['id'] = $entity->getShortcode() . ' - ' . $entity->label();
     $row['backlog'] = Link::createFromRoute(
       $this->t('Backlog'),
diff --git a/src/ProjectPermissions.php b/src/ProjectPermissions.php
index 6474b05..f180107 100644
--- a/src/ProjectPermissions.php
+++ b/src/ProjectPermissions.php
@@ -34,7 +34,7 @@ class ProjectPermissions {
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\burndown\Entity\Project $type
+   * @param Project $type
    *   The Project type.
    *
    * @return array
diff --git a/src/ProjectStorageInterface.php b/src/ProjectStorageInterface.php
index 5026ec5..0330270 100644
--- a/src/ProjectStorageInterface.php
+++ b/src/ProjectStorageInterface.php
@@ -20,7 +20,7 @@ interface ProjectStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Project revision IDs for a specific Project.
    *
-   * @param \Drupal\burndown\Entity\ProjectInterface $entity
+   * @param ProjectInterface $entity
    *   The Project entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface ProjectStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as Project author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface ProjectStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\burndown\Entity\ProjectInterface $entity
+   * @param ProjectInterface $entity
    *   The Project entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface ProjectStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all Project with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/Services/TaskIdService.php b/src/Services/TaskIdService.php
index 5d7b5ea..b175636 100644
--- a/src/Services/TaskIdService.php
+++ b/src/Services/TaskIdService.php
@@ -16,7 +16,7 @@ class TaskIdService {
   /**
    * A database connection object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   private $connection;
 
diff --git a/src/SprintAccessControlHandler.php b/src/SprintAccessControlHandler.php
index ec80360..98ba270 100644
--- a/src/SprintAccessControlHandler.php
+++ b/src/SprintAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\burndown;
 
+use Drupal\burndown\Entity\SprintInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -18,8 +19,7 @@ class SprintAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\burndown\Entity\SprintInterface $entity */
-
+    /** @var SprintInterface $entity */
     switch ($operation) {
 
       case 'view':
diff --git a/src/SprintHtmlRouteProvider.php b/src/SprintHtmlRouteProvider.php
index 1da0b48..5fab786 100644
--- a/src/SprintHtmlRouteProvider.php
+++ b/src/SprintHtmlRouteProvider.php
@@ -52,10 +52,10 @@ class SprintHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -76,10 +76,10 @@ class SprintHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -100,10 +100,10 @@ class SprintHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -124,10 +124,10 @@ class SprintHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -148,10 +148,10 @@ class SprintHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ -172,10 +172,10 @@ class SprintHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/SprintListBuilder.php b/src/SprintListBuilder.php
index 42b4075..60f58bc 100644
--- a/src/SprintListBuilder.php
+++ b/src/SprintListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\burndown;
 
+use Drupal\burndown\Entity\Sprint;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ -26,7 +27,7 @@ class SprintListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\burndown\Entity\Sprint $entity */
+    /** @var Sprint $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
diff --git a/src/SprintStorageInterface.php b/src/SprintStorageInterface.php
index 01bd9ca..346c8cd 100644
--- a/src/SprintStorageInterface.php
+++ b/src/SprintStorageInterface.php
@@ -20,7 +20,7 @@ interface SprintStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Sprint revision IDs for a specific Sprint.
    *
-   * @param \Drupal\burndown\Entity\SprintInterface $entity
+   * @param SprintInterface $entity
    *   The Sprint entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface SprintStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as Sprint author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface SprintStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\burndown\Entity\SprintInterface $entity
+   * @param SprintInterface $entity
    *   The Sprint entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface SprintStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all Sprint with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/SwimlaneAccessControlHandler.php b/src/SwimlaneAccessControlHandler.php
index 55c73ca..90a9561 100644
--- a/src/SwimlaneAccessControlHandler.php
+++ b/src/SwimlaneAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\burndown;
 
+use Drupal\burndown\Entity\SwimlaneInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -18,8 +19,7 @@ class SwimlaneAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\burndown\Entity\SwimlaneInterface $entity */
-
+    /** @var SwimlaneInterface $entity */
     switch ($operation) {
 
       case 'view':
diff --git a/src/SwimlaneHtmlRouteProvider.php b/src/SwimlaneHtmlRouteProvider.php
index 3fe7de0..1e4b7c8 100644
--- a/src/SwimlaneHtmlRouteProvider.php
+++ b/src/SwimlaneHtmlRouteProvider.php
@@ -32,10 +32,10 @@ class SwimlaneHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/SwimlaneListBuilder.php b/src/SwimlaneListBuilder.php
index afe8489..70d9517 100644
--- a/src/SwimlaneListBuilder.php
+++ b/src/SwimlaneListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\burndown;
 
+use Drupal\burndown\Entity\Swimlane;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ -26,7 +27,7 @@ class SwimlaneListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\burndown\Entity\Swimlane $entity */
+    /** @var Swimlane $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
diff --git a/src/TaskAccessControlHandler.php b/src/TaskAccessControlHandler.php
index 17f8878..e8b45d9 100644
--- a/src/TaskAccessControlHandler.php
+++ b/src/TaskAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\burndown;
 
+use Drupal\burndown\Entity\TaskInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityInterface;
@@ -18,8 +19,7 @@ class TaskAccessControlHandler extends EntityAccessControlHandler {
    * {@inheritdoc}
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
-    /** @var \Drupal\burndown\Entity\TaskInterface $entity */
-
+    /** @var TaskInterface $entity */
     switch ($operation) {
 
       case 'view':
@@ -71,11 +71,11 @@ class TaskAccessControlHandler extends EntityAccessControlHandler {
   /**
    * Test for given 'own' permission.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity for which ownership is being checked.
    * @param string $operation
    *   The operation which user is attempting to carry out.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user account for which ownership and permissions are being checked.
    *
    * @return string|null
diff --git a/src/TaskHtmlRouteProvider.php b/src/TaskHtmlRouteProvider.php
index bffee6d..396f1dd 100644
--- a/src/TaskHtmlRouteProvider.php
+++ b/src/TaskHtmlRouteProvider.php
@@ -52,10 +52,10 @@ class TaskHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type) {
@@ -76,10 +76,10 @@ class TaskHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type) {
@@ -100,10 +100,10 @@ class TaskHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type) {
@@ -124,10 +124,10 @@ class TaskHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type) {
@@ -148,10 +148,10 @@ class TaskHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type) {
@@ -172,10 +172,10 @@ class TaskHtmlRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the settings form route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getSettingsFormRoute(EntityTypeInterface $entity_type) {
diff --git a/src/TaskListBuilder.php b/src/TaskListBuilder.php
index 7a7a357..fd066a2 100644
--- a/src/TaskListBuilder.php
+++ b/src/TaskListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\burndown;
 
+use Drupal\burndown\Entity\Task;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 use Drupal\Core\Link;
@@ -26,7 +27,7 @@ class TaskListBuilder extends EntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity) {
-    /** @var \Drupal\burndown\Entity\Task $entity */
+    /** @var Task $entity */
     $row['id'] = $entity->id();
     $row['name'] = Link::createFromRoute(
       $entity->label(),
diff --git a/src/TaskPermissions.php b/src/TaskPermissions.php
index 1358781..e42167d 100644
--- a/src/TaskPermissions.php
+++ b/src/TaskPermissions.php
@@ -34,7 +34,7 @@ class TaskPermissions {
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\burndown\Entity\Task $type
+   * @param Task $type
    *   The Task type.
    *
    * @return array
diff --git a/src/TaskStorageInterface.php b/src/TaskStorageInterface.php
index 4a29ff7..f7854ba 100644
--- a/src/TaskStorageInterface.php
+++ b/src/TaskStorageInterface.php
@@ -20,7 +20,7 @@ interface TaskStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Task revision IDs for a specific Task.
    *
-   * @param \Drupal\burndown\Entity\TaskInterface $entity
+   * @param TaskInterface $entity
    *   The Task entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface TaskStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as Task author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface TaskStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\burndown\Entity\TaskInterface $entity
+   * @param TaskInterface $entity
    *   The Task entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface TaskStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all Task with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/tests/src/Functional/LoadTest.php b/tests/src/Functional/LoadTest.php
index 16a0a5a..09398d9 100644
--- a/tests/src/Functional/LoadTest.php
+++ b/tests/src/Functional/LoadTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\burndown\Functional;
 
+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 
@@ -22,7 +23,7 @@ class LoadTest extends BrowserTestBase {
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
