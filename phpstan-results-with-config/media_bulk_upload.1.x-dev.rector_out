modules/contrib/media_bulk_upload/media_bulk_upload.module
modules/contrib/media_bulk_upload/src/Controller/MediaBulkUploadController.php
modules/contrib/media_bulk_upload/src/Entity/MediaBulkConfig.php
modules/contrib/media_bulk_upload/src/Entity/MediaBulkConfigInterface.php
modules/contrib/media_bulk_upload/src/Form/MediaBulkConfigDeleteForm.php
modules/contrib/media_bulk_upload/src/Form/MediaBulkConfigForm.php
modules/contrib/media_bulk_upload/src/Form/MediaBulkUploadForm.php
modules/contrib/media_bulk_upload/src/MediaBulkConfigHtmlRouteProvider.php
modules/contrib/media_bulk_upload/src/MediaBulkConfigListBuilder.php
modules/contrib/media_bulk_upload/src/MediaBulkConfigPermissions.php
modules/contrib/media_bulk_upload/src/MediaSubFormManager.php
modules/contrib/media_bulk_upload/src/MediaSubFormManagerInterface.php
modules/contrib/media_bulk_upload/src/MediaTypeManager.php
modules/contrib/media_bulk_upload/src/MediaTypeManagerInterface.php

9 files with changes
====================

1) modules/contrib/media_bulk_upload/src/MediaTypeManagerInterface.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\media_bulk_upload;


+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\media\MediaTypeInterface;
 use Drupal\media_bulk_upload\Entity\MediaBulkConfigInterface;

@@ @@
   /**
    * Get the Media Type extensions.
    *
-   * @param \Drupal\media\MediaTypeInterface $mediaType
+   * @param MediaTypeInterface $mediaType
    *   Media Type.
    *
    * @return array
@@ @@
   /**
    * Get the target field settings for the media type.
    *
-   * @param \Drupal\media\MediaTypeInterface $mediaType
+   * @param MediaTypeInterface $mediaType
    *   Media Type.
    *
    * @return array
@@ @@
   /**
    * Get the target field name.
    *
-   * @param \Drupal\media\MediaTypeInterface $mediaType
+   * @param MediaTypeInterface $mediaType
    *   Media Type.
    *
    * @return string
@@ @@
    * @param string $extension
    *   File extension.
    *
-   * @return \Drupal\media\MediaTypeInterface[]
+   * @return MediaTypeInterface[]
    *   Media Types
    *
    * @throws \Exception
@@ @@
    * Gets the maximum upload size for a file compared to the current
    * $maxFileSize, from the media type.
    *
-   * @param \Drupal\media\MediaTypeInterface $mediaType
+   * @param MediaTypeInterface $mediaType
    *   Media Type.
    *
    * @return string
@@ @@
   /**
    * Get Media Types configured for the Media Bulk Upload Form.
    *
-   * @param \Drupal\media_bulk_upload\Entity\MediaBulkConfigInterface $mediaBulkConfig
+   * @param MediaBulkConfigInterface $mediaBulkConfig
    *   Media Bulk Config.
    *
-   * @return \Drupal\media\MediaTypeInterface[]
+   * @return MediaTypeInterface[]
    *   Media Types.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getBulkMediaTypes(MediaBulkConfigInterface $mediaBulkConfig);
 }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


2) modules/contrib/media_bulk_upload/src/MediaTypeManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_bulk_upload;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\field\Entity\FieldConfig;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\media\MediaTypeInterface;
@@ @@
   /**
    * Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * Entity Field Manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;

@@ @@
   /**
    * MediaTypeMatcher constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity Type Manager.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   Entity Field Manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, EntityFieldManagerInterface $entityFieldManager) {
     $this->entityTypeManager = $entityTypeManager;
     $this->entityFieldManager = $entityFieldManager;
-    /** @var \Drupal\media\MediaTypeInterface[] $mediaTypes */
+    /** @var MediaTypeInterface[] $mediaTypes */
     $mediaTypes = $entityTypeManager->getStorage('media_type')->loadMultiple();

     $this->groupMediaTypes($mediaTypes);
@@ @@
   /**
    * Group media types by extension.
    *
-   * @param \Drupal\media\MediaTypeInterface[] $mediaTypes
+   * @param MediaTypeInterface[] $mediaTypes
    *   Media Types.
    *
    * @return $this
@@ @@
   /**
    * Process the extensions belonging to the media type.
    *
-   * @param \Drupal\media\MediaTypeInterface $mediaType
+   * @param MediaTypeInterface $mediaType
    *   Media Type.
    *
    * @return $this
@@ @@
     $fieldDefinitions = $this->entityFieldManager->getFieldDefinitions('media', $mediaType->id());
     $targetFieldName = $this->getTargetFieldName($mediaType);

-    /** @var \Drupal\field\Entity\FieldConfig $targetField */
+    /** @var FieldConfig $targetField */
     $targetField = $fieldDefinitions[$targetFieldName];
     return $targetField->getSettings();
   }
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getBulkMediaTypes(MediaBulkConfigInterface $mediaBulkConfig) {
     $mediaTypeIds = $mediaBulkConfig->get('media_types');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


3) modules/contrib/media_bulk_upload/src/MediaSubFormManagerInterface.php:8

    ---------- begin diff ----------
@@ @@
 namespace Drupal\media_bulk_upload;


+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\media\MediaTypeInterface;
 use Drupal\media_bulk_upload\Entity\MediaBulkConfigInterface;
@@ @@
   /**
    * Get the target field settings for the media type.
    *
-   * @param \Drupal\media\MediaTypeInterface $mediaType
+   * @param MediaTypeInterface $mediaType
    *   Media Type.
    *
    * @return string
@@ @@
    *
    * @param array $form
    *   Render array containing the form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
-   * @param \Drupal\media_bulk_upload\Entity\MediaBulkConfigInterface $mediaBulkConfig
+   * @param MediaBulkConfigInterface $mediaBulkConfig
    *   The media bulk config entity.
    *
    * @return $this
    *   MediaSubFormManager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildMediaSubForm(array &$form, FormStateInterface $form_state, MediaBulkConfigInterface $mediaBulkConfig);

@@ @@
   /**
    * Get the media form display for the given media type.
    *
-   * @param \Drupal\media_bulk_upload\Entity\MediaBulkConfigInterface $mediaBulkConfig
+   * @param MediaBulkConfigInterface $mediaBulkConfig
    *   Media bulk config entity.
-   * @param \Drupal\media\MediaTypeInterface $mediaType
+   * @param MediaTypeInterface $mediaType
    *   The media type.
    *
-   * @return \Drupal\Core\Entity\Display\EntityFormDisplayInterface
+   * @return EntityFormDisplayInterface
    *   The media form display to get the field widgets from.
    */
   public function getMediaFormDisplay(MediaBulkConfigInterface $mediaBulkConfig, MediaTypeInterface $mediaType);
@@ @@
   /**
    * Get the form field components shared between the media types.
    *
-   * @param \Drupal\media_bulk_upload\Entity\MediaBulkConfigInterface $mediaBulkConfig
+   * @param MediaBulkConfigInterface $mediaBulkConfig
    *   MediaBulkConfig.
    *
    * @return array
    *   The list of field names shared between the media types.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getFields(MediaBulkConfigInterface $mediaBulkConfig);

@@ @@
   /**
    * Get the field components for the given media type.
    *
-   * @param \Drupal\media_bulk_upload\Entity\MediaBulkConfigInterface $mediaBulkConfig
+   * @param MediaBulkConfigInterface $mediaBulkConfig
    *   The media bulk config entity.
-   * @param \Drupal\media\MediaTypeInterface $mediaType
+   * @param MediaTypeInterface $mediaType
    *   The media type.
    *
    * @return array
@@ @@
   /**
    * Check if the media form fields should be used in the upload form.
    *
-   * @param \Drupal\media_bulk_upload\Entity\MediaBulkConfigInterface $mediaBulkConfig
+   * @param MediaBulkConfigInterface $mediaBulkConfig
    *   The media bulk configuration entity.
    *
    * @return bool
@@ @@
   /**
    * Get Media Type Manager.
    *
-   * @return \Drupal\media_bulk_upload\MediaTypeManager
+   * @return MediaTypeManager
    *   Media Type Manager.
    */
   public function getMediaTypeManager();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


4) modules/contrib/media_bulk_upload/src/MediaSubFormManager.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_bulk_upload;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\media\MediaInterface;
+use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
 use Drupal\Component\Render\PlainTextOutput;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\Environment;
@@ @@
   /**
    * Media Type storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $mediaTypeStorage;

@@ @@
   /**
    * Entity Form Display storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $entityFormDisplayStorage;

@@ @@
   /**
    * Media entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $mediaStorage;

@@ @@
   /**
    * Media Type Manager.
    *
-   * @var \Drupal\media_bulk_upload\MediaTypeManager
+   * @var MediaTypeManager
    */
   protected $mediaTypeManager;

@@ @@
   /**
    * Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;

@@ @@
   /**
    * File system interface.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;

@@ @@
   /**
    * BulkMediaUploadForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\media_bulk_upload\MediaTypeManager $mediaTypeManager
+   * @param MediaTypeManager $mediaTypeManager
    *   Media Type Manager.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token service.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, MediaTypeManager $mediaTypeManager, Token $token, FileSystemInterface $fileSystem) {
     $this->mediaTypeManager = $mediaTypeManager;
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function create(ContainerInterface $container) {
     return new static(
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function buildMediaSubForm(array &$form, FormStateInterface $form_state, MediaBulkConfigInterface $mediaBulkConfig) {
     $mediaTypes = $this->mediaTypeManager->getBulkMediaTypes($mediaBulkConfig);
     $mediaType = reset($mediaTypes);

-    /** @var \Drupal\media\MediaInterface $dummyMedia */
+    /** @var MediaInterface $dummyMedia */
     $dummyMedia = $this->mediaStorage->create(['bundle' => $mediaType->id()]);
     $mediaFormDisplay = $this->getMediaFormDisplay($mediaBulkConfig, $mediaType);
     $mediaFormDisplay->buildForm($dummyMedia, $form, $form_state);
@@ @@
    * {@inheritdoc}
    */
   public function getMediaFormDisplay(MediaBulkConfigInterface $mediaBulkConfig, MediaTypeInterface $mediaType) {
-    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $mediaFormDisplay */
+    /** @var EntityFormDisplayInterface $mediaFormDisplay */
     $mediaFormDisplay = $this->entityFormDisplayStorage->load('media.' . $mediaType->id() . '.' . $mediaBulkConfig->get('form_mode'));
     if ($mediaFormDisplay === NULL) {
       $mediaFormDisplay = $this->entityFormDisplayStorage->load('media.' . $mediaType->id() . '.default');
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function getFields(MediaBulkConfigInterface $mediaBulkConfig) {
     $mediaTypes = $this->mediaTypeManager->getBulkMediaTypes($mediaBulkConfig);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/media_bulk_upload/src/MediaBulkConfigPermissions.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_bulk_upload;

+use Drupal\node\Entity\NodeType;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
 use Drupal\media_bulk_upload\Entity\MediaBulkConfig;

@@ @@
   /**
    * Returns a list of node permissions for a given node type.
    *
-   * @param \Drupal\node\Entity\NodeType $type
+   * @param NodeType $type
    *   The node type.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/media_bulk_upload/src/Form/MediaBulkUploadForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_bulk_upload\Form;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\file\FileStorageInterface;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\Environment;
 use Drupal\Core\Entity\EntityStorageException;
@@ @@
   /**
    * Media Type storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $mediaTypeStorage;

@@ @@
   /**
    * Media Bulk Config storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $mediaBulkConfigStorage;

@@ @@
   /**
    * Media entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $mediaStorage;

@@ @@
   /**
    * File entity storage.
    *
-   * @var \Drupal\file\FileStorageInterface
+   * @var FileStorageInterface
    */
   protected $fileStorage;

@@ @@
   /**
    * Media SubForm Manager.
    *
-   * @var \Drupal\media_bulk_upload\MediaSubFormManager
+   * @var MediaSubFormManager
    */
   protected $mediaSubFormManager;

@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The file repository.
    *
-   * @var \Drupal\file\FileRepositoryInterface
+   * @var FileRepositoryInterface
    */
   protected $fileRepository;

@@ @@
   /**
    * BulkMediaUploadForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   Entity type manager.
-   * @param \Drupal\media_bulk_upload\MediaSubFormManager $mediaSubFormManager
+   * @param MediaSubFormManager $mediaSubFormManager
    *   Media Sub Form Manager.
-   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   * @param AccountProxyInterface $currentUser
    *   Current User.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager, MediaSubFormManager $mediaSubFormManager, AccountProxyInterface $currentUser, MessengerInterface $messenger, FileRepositoryInterface $fileRepository) {
     $this->mediaTypeStorage = $entityTypeManager->getStorage('media_type');
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function create(ContainerInterface $container) {
     return new static(
@@ @@
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
-   * @param \Drupal\media_bulk_upload\Entity\MediaBulkConfigInterface|null $media_bulk_config
+   * @param MediaBulkConfigInterface|null $media_bulk_config
    *   The media bulk configuration entity.
    *
    * @return array
@@ @@
    *
    * @param array $form
    *   The form render array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $values = $form_state->getValues();
@@ @@
    *
    * Will create a file entity and prepare a media entity with data.
    *
-   * @param \Drupal\media_bulk_upload\Entity\MediaBulkConfigInterface $mediaBulkConfig
+   * @param MediaBulkConfigInterface $mediaBulkConfig
    *   Media Bulk Config.
    * @param array $file
    *   File upload data.
    *
-   * @return \Drupal\media\MediaInterface
+   * @return MediaInterface
    *   The unsaved media entity that is created.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    * @throws \Exception
    */
   protected function processFile(MediaBulkConfigInterface $mediaBulkConfig, array $file) {
@@ @@
       $destination = $uri_scheme . $file['filename'];
     }

-    /** @var \Drupal\file\FileInterface $fileEntity */
+    /** @var FileInterface $fileEntity */
     $fileEntity = $this->fileStorage->create([
       'uri' => $file['path'],
       'uid' => $this->currentUser->id(),
@@ @@
     }

     $values = $this->getNewMediaValues($mediaType, $fileInfo, $fileEntity);
-    /** @var \Drupal\media\MediaInterface $media */
-
+    /** @var MediaInterface $media */
     return $this->mediaStorage->create($values);
   }

@@ @@
   /**
    * Check the size of a file.
    *
-   * @param \Drupal\media\MediaTypeInterface $mediaType
+   * @param MediaTypeInterface $mediaType
    *   Media Type.
    * @param string $filePath
    *   File path.
@@ @@
   /**
    * Builds the array of all necessary info for the new media entity.
    *
-   * @param \Drupal\media\MediaTypeInterface $mediaType
+   * @param MediaTypeInterface $mediaType
    *   Media Type ID.
    * @param array $fileInfo
    *   File info.
-   * @param \Drupal\file\FileInterface $file
+   * @param FileInterface $file
    *   File entity.
    *
    * @return array
@@ @@
   /**
    * Copy the submitted values for the media subform to the media entity.
    *
-   * @param \Drupal\media\MediaInterface $media
+   * @param MediaInterface $media
    *   Media Entity.
    * @param array $extracted
    *   Extracted entity values.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form State.
    */
   protected function copyFormValuesToEntity(MediaInterface $media, array $extracted, FormStateInterface $form_state) {
@@ @@
   /**
    * Prepare form submitted values.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form State.
    *
    * @return $this
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/media_bulk_upload/src/Form/MediaBulkConfigForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_bulk_upload\Form;

+use Drupal\media_bulk_upload\Entity\MediaBulkConfigInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
 use Drupal\Core\Entity\EntityForm;
@@ @@
   /**
    * Entity Display Repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * MediaBulkConfigForm constructor.
    *
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entityDisplayRepository
+   * @param EntityDisplayRepositoryInterface $entityDisplayRepository
    *   Entity Display repository.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger.
    */
   public function __construct(EntityDisplayRepositoryInterface $entityDisplayRepository, MessengerInterface $messenger) {
@@ @@
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);

-    /** @var \Drupal\media_bulk_upload\Entity\MediaBulkConfigInterface $mediaBulkConfig */
+    /** @var MediaBulkConfigInterface $mediaBulkConfig */
     $mediaBulkConfig = $this->entity;

     $form['label'] = [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/media_bulk_upload/src/Form/MediaBulkConfigDeleteForm.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * MediaBulkConfigDeleteForm constructor.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    */
   public function __construct(MessengerInterface $messenger) {
     $this->messenger = $messenger;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/media_bulk_upload/src/Controller/MediaBulkUploadController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\media_bulk_upload\Controller;

+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Core\Access\AccessResultAllowed;
+use Drupal\Core\Access\AccessResultForbidden;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;

@@ @@
   /**
    * Constructs a new MediaBulkUploadController.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, RendererInterface $renderer) {
@@ @@
    *
    * Redirects to the add form if there's only one bundle available.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse|array
+   * @return RedirectResponse|array
    *   If there's only one available bundle, a redirect response.
    *   Otherwise, a render array with the add links for each bundle.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   public function addLinksList() {
     $build = [
@@ @@
   /**
    * Access callback to validate if the user has access to the upload form list.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User to validate access on.
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @return AccessResultAllowed|AccessResultForbidden
+   * @throws InvalidPluginDefinitionException
    */
   public function accessList(AccountInterface $account) {
     if ($account->hasPermission('administer media_bulk_upload configuration')) {
@@ @@
   /**
    * Access callback to validate if the user has access to a bulk upload form.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   User to validate access on.
-   * @param \Drupal\media_bulk_upload\Entity\MediaBulkConfigInterface $media_bulk_config
+   * @param MediaBulkConfigInterface $media_bulk_config
    *   The media bulk config entity the upload form belongs to.
    *
-   * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
+   * @return AccessResultAllowed|AccessResultForbidden
    */
   public function accessForm(AccountInterface $account, MediaBulkConfigInterface $media_bulk_config) {
         $mediaBulkConfigId = $media_bulk_config->id();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 9 files have been changed by Rector                                       

