modules/contrib/value/src/Normalizer/ContentEntityNormalizer.php
modules/contrib/value/src/Normalizer/EntityReferenceFieldItemNormalizer.php
modules/contrib/value/src/Normalizer/FieldItemListNormalizer.php
modules/contrib/value/src/Normalizer/FieldItemNormalizer.php
modules/contrib/value/src/Normalizer/FileFieldItemNormalizer.php
modules/contrib/value/src/Normalizer/LinkFieldItemNormalizer.php
modules/contrib/value/src/Normalizer/NormalizerBase.php
modules/contrib/value/src/ThemeManager.php
modules/contrib/value/src/Twig/TwigExtension.php
modules/contrib/value/src/ValueServiceProvider.php
modules/contrib/value/value.module

4 files with changes
====================

1) modules/contrib/value/src/Twig/TwigExtension.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\value\Twig;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\image\ImageStyleInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Symfony\Component\Serializer\SerializerInterface;
@@ @@
 class TwigExtension extends \Twig_Extension {

   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

   /**
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

   /**
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;

@@ @@
   /**
    * TwigExtension constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
-   * @param \Symfony\Component\Serializer\SerializerInterface $serializer
+   * @param EntityTypeManagerInterface $entity_type_manager
+   * @param ModuleHandlerInterface $module_handler
+   * @param SerializerInterface $serializer
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ModuleHandlerInterface $module_handler, SerializerInterface $serializer) {
     $this->entityTypeManager = $entity_type_manager;
@@ @@
    * @return null|string
    *   The URL of the image with the style or NULL if not found.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function imageStyle($uri, $image_style) {
     $storage = $this->entityTypeManager->getStorage('image_style');
-    /** @var \Drupal\image\ImageStyleInterface $style */
+    /** @var ImageStyleInterface $style */
     if ($style = $storage->load($image_style)) {
       return $style->buildUrl($uri);
     }
@@ @@
    * @return array|null
    *   The normalized entity array or null.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function value(array $field) {
     // Check for target_id and target_type.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/value/src/ThemeManager.php:22

    ---------- begin diff ----------
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
    * @param $hook
    * @param $variables
    *
-   * @return \Drupal\Core\Entity\ContentEntityInterface|null
+   * @return ContentEntityInterface|null
    */
   protected function getEntity($hook, $variables) {
     if (is_string($hook)) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/value/src/Normalizer/FileFieldItemNormalizer.php:20

    ---------- begin diff ----------
@@ @@
     /** @var FileInterface $file */
     if ($file = $object->get('entity')->getValue()) {
       $attributes['uri'] = $file->getFileUri();
-      $attributes['url'] = file_create_url($attributes['uri']);
+      $attributes['url'] = \Drupal::service('file_url_generator')->generateAbsoluteString($attributes['uri']);
     }

     return $attributes;
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/value/src/Normalizer/EntityReferenceFieldItemNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\value\Normalizer;

+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Config\Entity\EntityBundleWithPluralLabelsInterface;
 use Drupal\Core\Entity\TranslatableInterface;
 use Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem;
@@ @@
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   public function normalize($object, $format = NULL, array $context = []) {
     $attributes = [];

-    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    /** @var EntityInterface $entity */
     if ($entity = $object->get('entity')->getValue()) {
       $attributes['label'] = $entity->label();
       if ($entity instanceof EntityBundleWithPluralLabelsInterface) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 4 files have been changed by Rector                                       

