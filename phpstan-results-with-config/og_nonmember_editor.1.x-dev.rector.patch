diff --git a/og_nonmember_editor.info.yml b/og_nonmember_editor.info.yml
index bf8ca1e..68d46ba 100644
--- a/og_nonmember_editor.info.yml
+++ b/og_nonmember_editor.info.yml
@@ -1,7 +1,7 @@
 name: OG Non-Member Editor
 description: Allow non-members to create draft content for a group they are not a member of.
 type: module
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'Organic Groups'
 dependencies:
   - og:og
diff --git a/src/EventSubscriber/GroupContentAccessEventSubscriber.php b/src/EventSubscriber/GroupContentAccessEventSubscriber.php
index d100078..ae83418 100644
--- a/src/EventSubscriber/GroupContentAccessEventSubscriber.php
+++ b/src/EventSubscriber/GroupContentAccessEventSubscriber.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\og_nonmember_editor\EventSubscriber;
 
+use Drupal\workflows\WorkflowInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -21,32 +22,32 @@ class GroupContentAccessEventSubscriber implements EventSubscriberInterface {
   /**
    * The OG permission manager.
    *
-   * @var \Drupal\og\PermissionManagerInterface
+   * @var PermissionManagerInterface
    */
   protected $permissionManager;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The service providing information about bundles.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * Constructs an OgEventSubscriber object.
    *
-   * @param \Drupal\og\PermissionManagerInterface $permission_manager
+   * @param PermissionManagerInterface $permission_manager
    *   The OG permission manager.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface $entity_type_bundle_info
    *   The service providing information about bundles.
    */
   public function __construct(PermissionManagerInterface $permission_manager, EntityTypeManagerInterface $entity_type_manager, EntityTypeBundleInfoInterface $entity_type_bundle_info) {
@@ -69,7 +70,7 @@ class GroupContentAccessEventSubscriber implements EventSubscriberInterface {
   /**
    * Provides default permissions for the Node entity.
    *
-   * @param \Drupal\og\Event\PermissionEventInterface $event
+   * @param PermissionEventInterface $event
    *   The OG permission event.
    */
   public function provideDefaultNodePermissions(PermissionEventInterface $event) {
@@ -80,7 +81,7 @@ class GroupContentAccessEventSubscriber implements EventSubscriberInterface {
     $permissions = [];
     $bundle_info = $this->entityTypeBundleInfo->getBundleInfo('node');
     foreach ($bundle_ids['node'] as $bundle_id) {
-      /** @var \Drupal\workflows\WorkflowInterface $workflow */
+      /** @var WorkflowInterface $workflow */
       foreach (Workflow::loadMultipleByType('content_moderation') as $id => $workflow) {
         foreach ($workflow->getTypePlugin()->getTransitions() as $transition) {
           $permission_values = [
diff --git a/src/Plugin/EntityReferenceSelection/NonMemberSelection.php b/src/Plugin/EntityReferenceSelection/NonMemberSelection.php
index e56ba8a..68cb489 100644
--- a/src/Plugin/EntityReferenceSelection/NonMemberSelection.php
+++ b/src/Plugin/EntityReferenceSelection/NonMemberSelection.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\og_nonmember_editor\Plugin\EntityReferenceSelection;
 
+use Drupal\Core\Entity\Query\QueryInterface;
 use Drupal\og\Plugin\EntityReferenceSelection\OgSelection;
 use Drupal\og\Og;
 
@@ -27,7 +28,7 @@ class NonMemberSelection extends OgSelection {
    *   (Optional) The operation the matching should be done with. Defaults
    *   to "CONTAINS".
    *
-   * @return \Drupal\Core\Entity\Query\QueryInterface
+   * @return QueryInterface
    *   The EntityQuery object with the basic conditions and sorting applied to
    *   it.
    */
diff --git a/tests/src/Functional/SiteStillWorks.php b/tests/src/Functional/SiteStillWorks.php
index a7c1f8c..e20be10 100644
--- a/tests/src/Functional/SiteStillWorks.php
+++ b/tests/src/Functional/SiteStillWorks.php
@@ -26,7 +26,7 @@ class SiteStillWorks extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     // Make sure to complete the normal setup steps first.
     parent::setUp();
 
@@ -48,7 +48,10 @@ class SiteStillWorks extends BrowserTestBase {
     $this->assertSession()->statusCodeEquals(200);
 
     // Confirm that the front page contains the standard text.
-    $this->assertText('Welcome to Drupal');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Welcome to Drupal');
   }
 
 }
