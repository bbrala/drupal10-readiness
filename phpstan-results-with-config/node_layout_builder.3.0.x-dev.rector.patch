diff --git a/node_layout_builder.module b/node_layout_builder.module
index 79919ef..1783083 100644
--- a/node_layout_builder.module
+++ b/node_layout_builder.module
@@ -359,7 +359,7 @@ function template_preprocess_node_layout_builder_element(&$variables) {
           $renderer = \Drupal::service('renderer');
           $renderer->addCacheableDependency($image_theme, $file);
 
-          $variables['content_element'] = render($image_theme);
+          $variables['content_element'] = \Drupal::service('renderer')->render($image_theme);
         }
       }
       break;
@@ -373,7 +373,7 @@ function template_preprocess_node_layout_builder_element(&$variables) {
         'responsive' => $values['video_youtube']['responsive'],
       ];
       $video = NodeLayoutBuilderHelper::embedVideoYoutube($url, $options);
-      $variables['content_element'] = render($video);
+      $variables['content_element'] = \Drupal::service('renderer')->render($video);
       break;
 
     case 'audio':
@@ -390,7 +390,7 @@ function template_preprocess_node_layout_builder_element(&$variables) {
         '#url' => $url,
         '#style' => $style,
       ];
-      $variables['content_element'] = render($audio_player);
+      $variables['content_element'] = \Drupal::service('renderer')->render($audio_player);
       break;
 
     case 'block':
@@ -403,7 +403,7 @@ function template_preprocess_node_layout_builder_element(&$variables) {
       $nid = !empty($values['node']) ? $values['node'] : NULL;
       $view_mode = !empty($values['view_mode']) ? $values['view_mode'] : 'teaser';
       $node_output = NodeLayoutBuilderHelper::loadNodeView($nid, $view_mode);
-      $variables['content_element'] = render($node_output);
+      $variables['content_element'] = \Drupal::service('renderer')->render($node_output);
       break;
 
     case 'field':
@@ -412,7 +412,7 @@ function template_preprocess_node_layout_builder_element(&$variables) {
       $field_name = $values['entity_field'];
       $field_view = $node->$field_name
         ->view($values['view_mode']);
-      $variables['content_element'] = render($field_view);
+      $variables['content_element'] = \Drupal::service('renderer')->render($field_view);
       break;
 
     case 'views':
@@ -456,7 +456,7 @@ function template_preprocess_node_layout_builder_element(&$variables) {
           ],
         ],
       ];
-      $variables['content_element'] = render($map);
+      $variables['content_element'] = \Drupal::service('renderer')->render($map);
       break;
   }
 }
diff --git a/src/Controller/LayoutElementController.php b/src/Controller/LayoutElementController.php
index 3cd9309..5e7946e 100644
--- a/src/Controller/LayoutElementController.php
+++ b/src/Controller/LayoutElementController.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\node_layout_builder\Controller;
 
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\AppendCommand;
 use Drupal\Core\Ajax\CloseDialogCommand;
@@ -36,28 +40,28 @@ class LayoutElementController extends ControllerBase {
   /**
    * Form builder interface.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * Current user.
    *
-   * @var \Drupal\Core\Session\AccountProxyInterface
+   * @var AccountProxyInterface
    */
   protected $currentUser;
 
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The route match interface.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    *   The current route match.
    */
   protected $routeMatch;
@@ -65,14 +69,14 @@ class LayoutElementController extends ControllerBase {
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\node_layout_builder\NodeLayoutBuilderEditor
+   * @var NodeLayoutBuilderEditor
    */
   protected $nlbEditor;
 
@@ -114,7 +118,7 @@ class LayoutElementController extends ControllerBase {
    * @param int $id_element
    *   ID of element.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   Title.
    */
   public function getTitle($nid, $type, $parent, $id_element) {
@@ -220,11 +224,11 @@ class LayoutElementController extends ControllerBase {
    * @param int|string $id_element
    *   ID element.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function duplicateElement($nid, $parent, $id_element) {
     $data = NodeLayoutBuilderManager::loadDataElement($nid);
@@ -328,7 +332,7 @@ class LayoutElementController extends ControllerBase {
     $prefix = '<' . $tag_element . ' class="updated ' . $class . ' ' . $element_duplicate['#type'] . ' ' . $element_duplicate['#attributes']['container']['class'] . '" id="' . $duplicate_id_element . '" data-id="' . $duplicate_id_element . '" data-parent="' . $element_duplicate['#parent'] . '" data-type="nlb_' . $element_duplicate['#type'] . '" style="' . $styles_element . '">';
     $suffix = '</' . $tag_element . '>';
 
-    $content = $prefix . render($element) . $suffix;
+    $content = $prefix . \Drupal::service('renderer')->render($element) . $suffix;
 
     $response = new AjaxResponse();
     if ($element_duplicate['#parent'] == 0) {
@@ -354,12 +358,12 @@ class LayoutElementController extends ControllerBase {
    * @param string $id_element
    *   Id element.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Data updated.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws EntityStorageException
    */
   public function removeElement($nid, $id_element) {
     $data = NodeLayoutBuilderManager::loadDataElement($nid);
@@ -419,12 +423,12 @@ class LayoutElementController extends ControllerBase {
    * @param int $nid
    *   ID element.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response width redirection to url.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException.
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException.
-   * @throws \Drupal\Core\Entity\EntityStorageException.
+   * @throws InvalidPluginDefinitionException .
+   * @throws PluginNotFoundException .
+   * @throws EntityStorageException .
    */
   public function saveDataElement($nid) {
     $uuid = $this->currentUser->id();
@@ -448,7 +452,7 @@ class LayoutElementController extends ControllerBase {
    * @param int|string $index
    *   Order of element.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Data updated with new position of element.
    */
   public function sortableDataElement($nid, $from, $to, $index) {
@@ -509,7 +513,7 @@ class LayoutElementController extends ControllerBase {
    * @param int $nid
    *   ID entity.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Popup to choose a template.
    */
   public function listTemplates($nid) {
@@ -558,7 +562,7 @@ class LayoutElementController extends ControllerBase {
     $response->addCommand(
       new OpenModalDialogCommand(
         $this->t('Choose a template'),
-        render($list_template),
+        \Drupal::service('renderer')->render($list_template),
         [
           'width' => '70%',
           'height' => 'auto',
@@ -581,7 +585,7 @@ class LayoutElementController extends ControllerBase {
    * @param int $tid
    *   ID template.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Hanlder ajax command.
    */
   public function addTemplate($nid, $tid) {
diff --git a/src/Form/AddElementForm.php b/src/Form/AddElementForm.php
index ecd96c4..e66c3e4 100644
--- a/src/Form/AddElementForm.php
+++ b/src/Form/AddElementForm.php
@@ -6,7 +6,8 @@ namespace Drupal\node_layout_builder\Form;
  * @file
  * AddElementForm.php
  */
-
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\AppendCommand;
 use Drupal\Core\Ajax\CloseDialogCommand;
@@ -161,14 +162,14 @@ class AddElementForm extends FormBase {
    *
    * @param array $form
    *   Form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   For state.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function submitAjax(array &$form, FormStateInterface $form_state) {
     // Get arguments.
@@ -296,7 +297,7 @@ class AddElementForm extends FormBase {
     $prefix = '<' . $tag_element . ' class="updated ' . $class . ' ' . $type_element . ' ' . $attributes['class'] . '" id="' . $new_id_element . '" data-id="' . $new_id_element . '" data-parent="' . $parent . '" data-type="nlb_' . $type_element . '" style="' . $styles_element . '">';
     $suffix = '</' . $tag_element . '>';
 
-    $content = $prefix . render($element) . $suffix;
+    $content = $prefix . \Drupal::service('renderer')->render($element) . $suffix;
 
     // Response.
     $response = new AjaxResponse();
@@ -329,7 +330,7 @@ class AddElementForm extends FormBase {
   /**
    * Close modal form.
    *
-   * @return \Drupal\Core\Ajax\AjaxResponse
+   * @return AjaxResponse
    *   Ajax response.
    */
   public function closeModalForm() {
@@ -342,7 +343,7 @@ class AddElementForm extends FormBase {
   /**
    * Get arguments of form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   State form.
    *
    * @return array|mixed
diff --git a/src/Helpers/NodeLayoutBuilderHelper.php b/src/Helpers/NodeLayoutBuilderHelper.php
index f453b71..e2679a6 100644
--- a/src/Helpers/NodeLayoutBuilderHelper.php
+++ b/src/Helpers/NodeLayoutBuilderHelper.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\node_layout_builder\Helpers;
 
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\block\Entity\Block;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -25,7 +27,7 @@ class NodeLayoutBuilderHelper {
    *
    * @param array $build
    *   Build entity.
-   * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
+   * @param EntityViewDisplayInterface $display
    *   Display entity.
    * @param string $display_context
    *   Display context of entity.
@@ -279,7 +281,7 @@ class NodeLayoutBuilderHelper {
   /**
    * Get arguments of form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   State form.
    *
    * @return array|mixed
@@ -332,7 +334,7 @@ class NodeLayoutBuilderHelper {
    * @param string $view_mode
    *   View mode entity.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null
+   * @return EntityInterface|null
    *   View display.
    */
   public static function getEntityViewDiplay($entity_type, $bundle, $view_mode = 'default') {
@@ -353,8 +355,8 @@ class NodeLayoutBuilderHelper {
    * @return array
    *   List styles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function loadImageStyles() {
     $style_options = ['' => t('None')];
@@ -450,7 +452,7 @@ class NodeLayoutBuilderHelper {
             $renderer = \Drupal::service('renderer');
             $renderer->addCacheableDependency($image_theme, $file);
 
-            $variables['content_element'] = render($image_theme);
+            $variables['content_element'] = \Drupal::service('renderer')->render($image_theme);
           }
         }
         break;
@@ -464,7 +466,7 @@ class NodeLayoutBuilderHelper {
           'responsive' => $values['video_youtube']['responsive'],
         ];
         $video = NodeLayoutBuilderHelper::embedVideoYoutube($url, $options);
-        $variables['content_element'] = render($video);
+        $variables['content_element'] = \Drupal::service('renderer')->render($video);
         break;
 
       case 'audio':
@@ -483,7 +485,7 @@ class NodeLayoutBuilderHelper {
           '#style' => $style,
         ];
 
-        $variables['content_element'] = render($audio_player);
+        $variables['content_element'] = \Drupal::service('renderer')->render($audio_player);
         break;
 
       case 'block':
@@ -496,7 +498,7 @@ class NodeLayoutBuilderHelper {
         $nid = !empty($values['node']) ? $values['node'] : NULL;
         $view_mode = !empty($values['view_mode']) ? $values['view_mode'] : 'teaser';
         $node_output = NodeLayoutBuilderHelper::loadNodeView($nid, $view_mode);
-        $variables['content_element'] = render($node_output);
+        $variables['content_element'] = \Drupal::service('renderer')->render($node_output);
         break;
 
       case 'field':
@@ -506,7 +508,7 @@ class NodeLayoutBuilderHelper {
           $field_name = $values['entity_field'];
           $field_view = $node->$field_name
             ->view($values['view_mode']);
-          $variables['content_element'] = render($field_view);
+          $variables['content_element'] = \Drupal::service('renderer')->render($field_view);
         }
         else {
           $variables['content_element'] = '';
@@ -702,11 +704,11 @@ class NodeLayoutBuilderHelper {
    * @param string $theme
    *   Name machien of theme.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   List blocks.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public static function getAllBlocksByTheme($theme = 'bartik') {
     $blocks = [];
@@ -949,10 +951,10 @@ class NodeLayoutBuilderHelper {
   /**
    * Redirect after save node.
    *
-   * @param Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   Entity object.
    *
-   * @return Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   redirect to url.
    */
   public static function redirectAfterSaveNode(EntityInterface $entity) {
diff --git a/src/Helpers/NodeLayoutFileHelper.php b/src/Helpers/NodeLayoutFileHelper.php
index 320d889..7b08d20 100644
--- a/src/Helpers/NodeLayoutFileHelper.php
+++ b/src/Helpers/NodeLayoutFileHelper.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\node_layout_builder\Helpers;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\file\Entity\File;
 
 /**
@@ -17,7 +18,7 @@ class NodeLayoutFileHelper {
    * @param int $fid
    *   ID file.
    *
-   * @return \Drupal\Core\Entity\EntityInterface|null|static
+   * @return EntityInterface|null|static
    *   File object or NULL.
    */
   public static function loadFileByFid($fid) {
diff --git a/src/NodeLayoutBuilderEditor.php b/src/NodeLayoutBuilderEditor.php
index 0eecb5c..73ac0c8 100644
--- a/src/NodeLayoutBuilderEditor.php
+++ b/src/NodeLayoutBuilderEditor.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\node_layout_builder;
 
+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\Core\Render\Markup;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -25,14 +26,14 @@ class NodeLayoutBuilderEditor {
   /**
    * The instantiated NodeLayoutBuilderManager class.
    *
-   * @var \Drupal\node_layout_builder\Services\NodeLayoutBuilderManager
+   * @var NodeLayoutBuilderManager
    */
   public $nodeLayoutBuilderManager;
 
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
@@ -108,8 +109,8 @@ class NodeLayoutBuilderEditor {
     $build[] = [
       '#theme' => 'node_layout_builder_ui',
       '#btns_import_export' => $list_btns_import_export,
-      '#btn_add_section' => render($btn_add_section),
-      '#btn_save_data' => render($btn_save_data),
+      '#btn_add_section' => \Drupal::service('renderer')->render($btn_add_section),
+      '#btn_save_data' => \Drupal::service('renderer')->render($btn_save_data),
       '#nid' => $nid,
       '#data' => 'data',
       '#btn_save_layout' => $btn_save_layout,
@@ -1654,7 +1655,7 @@ class NodeLayoutBuilderEditor {
         $prefix = '<' . $tag_element . ' class="updated ' . $class . ' ' . $child['#type'] . ' ' . $child['#attributes']['container']['class'] . '" id="' . $id_element_child . '" data-id="' . $id_element_child . '" data-parent="' . $child['#parent'] . '" data-type="nlb_' . $child['#type'] . '" style="' . $styles_element . '">';
         $suffix = '</' . $tag_element . '>';
 
-        $children_output .= $prefix . render($children_theme) . $suffix;
+        $children_output .= $prefix . \Drupal::service('renderer')->render($children_theme) . $suffix;
       }
     }
 
@@ -1694,7 +1695,7 @@ class NodeLayoutBuilderEditor {
       '#parent' => $values['parent'],
       '#settings' => $values['settings'],
       '#styles' => $styles_element,
-      '#content_element' => render($values['children']),
+      '#content_element' => \Drupal::service('renderer')->render($values['children']),
       '#editable' => $values['editable'],
       '#class' => $class,
       '#cache' => [
@@ -1709,7 +1710,7 @@ class NodeLayoutBuilderEditor {
     $prefix = '<' . $tag_element . ' class="' . $class . ' ' . $values['type_element'] . '" id="' . $values['id_element'] . '" data-id="' . $values['id_element'] . '" data-parent="' . $values['parent'] . '" data-type="nlb_' . $values['type_element'] . '" style="' . $styles_element . '">';
     $suffix = '</' . $tag_element . '>';
 
-    $output = $prefix . render($element_tpl) . $suffix;
+    $output = $prefix . \Drupal::service('renderer')->render($element_tpl) . $suffix;
 
     return $output;
   }
@@ -1778,7 +1779,7 @@ class NodeLayoutBuilderEditor {
    *
    * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
    * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   public static function saveElementEntity($nid, $uuid, array $data) {
     // Clean data.
diff --git a/src/NodeLayoutBuilderStyle.php b/src/NodeLayoutBuilderStyle.php
index a03efde..bb3f200 100644
--- a/src/NodeLayoutBuilderStyle.php
+++ b/src/NodeLayoutBuilderStyle.php
@@ -70,7 +70,7 @@ class NodeLayoutBuilderStyle {
           $fid = $styles['background']['image'][0];
           $file = NodeLayoutFileHelper::loadFileByFid($fid);
           if ($file) {
-            $path = file_create_url($file->getFileUri());
+            $path = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
             $bg_img .= 'background-image: url(' . $path . ');';
           }
           if (!empty($styles['background']['img_style'])) {
diff --git a/src/Services/NodeLayoutBuilderManager.php b/src/Services/NodeLayoutBuilderManager.php
index 530c975..c2ef981 100644
--- a/src/Services/NodeLayoutBuilderManager.php
+++ b/src/Services/NodeLayoutBuilderManager.php
@@ -21,48 +21,48 @@ class NodeLayoutBuilderManager {
   /**
    * Drupal\Core\Session\AccountProxy definition.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
   /**
    * Drupal\Core\Routing\CurrentRouteMatch definition.
    *
-   * @var \Drupal\Core\Routing\CurrentRouteMatch
+   * @var CurrentRouteMatch
    */
   protected $currentRouteMatch;
 
   /**
    * Drupal\Core\Config\ConfigFactory definition.
    *
-   * @var \Drupal\Core\Config\ConfigFactory
+   * @var ConfigFactory
    */
   protected $configFactory;
 
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManager
+   * @var EntityTypeManager
    */
   protected $entityManager;
 
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Drupal\Core\Entity\EntityTypeManager definition.
    *
-   * @var \Drupal\Core\Block\BlockManager
+   * @var BlockManager
    */
   protected $pluginManagerBlock;
 
   /**
    * Drupal\Core\Logger\LoggerChannelFactory definition.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $loggerFactory;
 
