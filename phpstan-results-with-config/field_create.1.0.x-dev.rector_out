modules/contrib/field_create/field_create.api.php
modules/contrib/field_create/field_create.install
modules/contrib/field_create/field_create.module
modules/contrib/field_create/modules/field_create_from_json/field_create_from_json.module
modules/contrib/field_create/src/Commands/FieldCreateCommands.php
modules/contrib/field_create/src/FieldCreateManager.php
modules/contrib/field_create/src/FieldCreateManagerInterface.php
modules/contrib/field_create/src/Form/SettingsForm.php

5 files with changes
====================

1) modules/contrib/field_create/src/Form/SettingsForm.php:76

    ---------- begin diff ----------
@@ @@
     $description .= '<br>';
     $description .= $this->t('Copy/Paste your field definitions as YAML content in the boxes below.') . ' ';
     $description .= Link::fromTextAndUrl($this->t('See an example here'), Url::fromUri(
-      file_create_url(drupal_get_path('module', 'field_create') . '/example/field_create.node.settings.yml'),
+      file_create_url(\Drupal::service('extension.list.module')->getPath('field_create') . '/example/field_create.node.settings.yml'),
       ['attributes' => ['target' => '_blank']]
     ))->toString();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/field_create/src/FieldCreateManagerInterface.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\field_create;

+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 /**
  * Service to automatically create fields.
  */
@@ @@
    * @param array $list
    *   A given list of field definitions.
    *
-   * @return \Drupal\Core\Field\FieldStorageDefinitionInterface[]
+   * @return FieldStorageDefinitionInterface[]
    *   An array of field storage definitions, keyed by field name.
    */
   public function createEntityFieldStorages(string $entity_type_id, array $list = []);
@@ @@
    * @param array $list
    *   A given list of field definitions.
    *
-   * @return \Drupal\Core\Field\FieldDefinitionInterface[]
+   * @return FieldDefinitionInterface[]
    *   An array of bundle field definitions, keyed by bundle and field_name.
    */
   public function createEntityFields(string $entity_type_id, array $list = []);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/field_create/src/FieldCreateManager.php:23

    ---------- begin diff ----------
@@ @@
   /**
    * A logger instance.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The user storage.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;

@@ @@
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/field_create/src/Commands/FieldCreateCommands.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The logger.channel.field_create service.
    *
-   * @var \Psr\Log\LoggerInterface
+   * @var LoggerInterface
    */
   protected $logger;

@@ @@
   /**
    * FieldCreateCommands constructor.
    *
-   * @param \Psr\Log\LoggerInterface $logger
+   * @param LoggerInterface $logger
    *   The logger.channel.field_create service.
    * @param \Drupal\field_createg\FieldCreateManagerInterface $manager
    *   The field_create manager service.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/field_create/modules/field_create_from_json/field_create_from_json.module:18

    ---------- begin diff ----------
@@ @@
   // Improve description.
   $description = t('You can use JSON content which will be convert to YAML automatically on save.') . ' ';
   $description .= Link::fromTextAndUrl(t('See an example here'), Url::fromUri(
-    file_create_url(drupal_get_path('module', 'field_create_from_json') . '/example/node_fields.json'),
+    file_create_url(\Drupal::service('extension.list.module')->getPath('field_create_from_json') . '/example/node_fields.json'),
     ['attributes' => ['target' => '_blank']]
   ))->toString();
    ----------- end diff -----------

Applied rules:
 * DrupalGetPathRector
 * ArgumentRemoverRector


 [OK] 5 files have been changed by Rector                                       

