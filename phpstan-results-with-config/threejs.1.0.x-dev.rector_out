modules/contrib/threejs/modules/threejs_editor/src/Controller/ThreeJsEditorController.php
modules/contrib/threejs/modules/threejs_editor/src/Form/SettingsForm.php
modules/contrib/threejs/modules/threejs_editor/threejs_editor.install
modules/contrib/threejs/modules/threejs_editor/threejs_editor.module
modules/contrib/threejs/modules/threejs_examples/src/Controller/TThreeJsExamplesController.php
modules/contrib/threejs/modules/threejs_examples/src/Plugin/Block/ExampleBlock.php
modules/contrib/threejs/modules/threejs_examples/threejs_examples.install
modules/contrib/threejs/modules/threejs_fields/src/Plugin/Field/FieldFormatter/ThreeJSFileFormatter.php
modules/contrib/threejs/modules/threejs_fields/src/Plugin/Field/FieldFormatter/ThreeJSFormatterBase.php
modules/contrib/threejs/modules/threejs_fields/src/Plugin/Field/FieldType/ThreeJSFile.php
modules/contrib/threejs/modules/threejs_fields/src/Plugin/Field/FieldWidget/ThreeJSFileWidget.php
modules/contrib/threejs/modules/threejs_fields/threejs_fields.admin.inc
modules/contrib/threejs/modules/threejs_fields/threejs_fields.field.inc
modules/contrib/threejs/modules/threejs_fields/threejs_fields.install
modules/contrib/threejs/modules/threejs_fields/threejs_fields.module
modules/contrib/threejs/src/Controller/ThreejsController.php
modules/contrib/threejs/src/Form/ThreejsAdminSettingsForm.php
modules/contrib/threejs/src/Plugin/Block/ThreejsBlock.php
modules/contrib/threejs/src/ThreeJSLoader.php
modules/contrib/threejs/src/ThreeJSLoaderInterface.php
modules/contrib/threejs/threejs.module

6 files with changes
====================

1) modules/contrib/threejs/modules/threejs_fields/threejs_fields.install:0

    ---------- begin diff ----------
@@ @@
 <?php

+use Drupal\Core\File\FileSystemInterface;
 /**
  * @file
  * Install, update and uninstall functions for the Three.js fields module.
@@ @@
 function threejs_fields_install() {
   // Create the styles directory and ensure it is writable.
   $directory = \Drupal::config('system.file')->get('default_scheme') . '://webgl';
-  \Drupal::service('file_system')->prepareDirectory($directory, \Drupal\Core\File\FileSystemInterface::CREATE_DIRECTORY | \Drupal\Core\File\FileSystemInterface::MODIFY_PERMISSIONS);
+  \Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);
 }

 /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


2) modules/contrib/threejs/modules/threejs_fields/threejs_fields.admin.inc:22

    ---------- begin diff ----------
@@ @@
   $variables['style_name'] = $style->label();

   // Cache bypass token.
-  $variables['cache_bypass'] = REQUEST_TIME;
+  $variables['cache_bypass'] = \Drupal::time()->getRequestTime();

   // Sample image info.
   $sample_width = 160;
@@ @@
   $original_path = \Drupal::config('image.settings')->get('preview_image');
   $original_image = $image_factory->get($original_path);
   $variables['original'] = [
-    'url' => file_url_transform_relative(file_create_url($original_path)),
+    'url' => \Drupal::service('file_url_generator')->generateString($original_path),
     'width' => $original_image->getWidth(),
     'height' => $original_image->getHeight(),
   ];
@@ @@
   }
   $preview_image = $image_factory->get($preview_file);
   $variables['derivative'] = [
-    'url' => file_url_transform_relative(file_create_url($preview_file)),
+    'url' => \Drupal::service('file_url_generator')->generateString($preview_file),
     'width' => $preview_image->getWidth(),
     'height' => $preview_image->getHeight(),
   ];
    ----------- end diff -----------

Applied rules:
 * FileUrlTransformRelativeRector
 * RequestTimeConstRector
 * ArgumentRemoverRector


3) modules/contrib/threejs/modules/threejs_fields/src/Plugin/Field/FieldWidget/ThreeJSFileWidget.php:30

    ---------- begin diff ----------
@@ @@
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\Core\Render\ElementInfoManagerInterface $element_info
+   * @param ElementInfoManagerInterface $element_info
    *   The element info manager service.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, ElementInfoManagerInterface $element_info) {
@@ @@
         ->getSetting('default_canvas');
     }
     // Convert the stored UUID into a file ID.
-    if (!empty($default_canvas['uuid']) && $entity = \Drupal::entityManager()
+    if (!empty($default_canvas['uuid']) && $entity = \Drupal::service('entity.repository')
         ->loadEntityByUuid('file', $default_canvas['uuid'])) {
       $default_canvas['fid'] = $entity->id();
     }
@@ @@
       $file = reset($element['#files']);

       $model_uri = $file->getFileUri();
-      $url = Url::fromUri(file_create_url($model_uri));
+      $url = \Drupal::service('file_url_generator')->generate($model_uri);
       $ext = pathinfo($model_uri, PATHINFO_EXTENSION);
       $variables = [
         'uri' => $model_uri,
@@ @@
       $default_canvas = $element['#default_canvas'];
       $file = File::load($default_canvas['fid']);
       $model_uri = $file->getFileUri();
-      $url = Url::fromUri(file_create_url($model_uri));
+      $url = \Drupal::service('file_url_generator')->generate($model_uri);
       $ext = pathinfo($model_uri, PATHINFO_EXTENSION);
       if (!empty($file)) {
         $element['preview'] = [
    ----------- end diff -----------

Applied rules:
 * EntityManagerRector
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/threejs/modules/threejs_fields/src/Plugin/Field/FieldType/ThreeJSFile.php:412

    ---------- begin diff ----------
@@ @@
    *
    * @param array $element
    *   The form element to process.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public static function validateDefaultThreeJSFileForm(array &$element, FormStateInterface $form_state) {
@@ @@
     if (isset($element['fids']['#value'][0])) {
       $value = $element['fids']['#value'][0];
       // Convert the file ID to a uuid.
-      if ($file = \Drupal::entityManager()->getStorage('file')->load($value)) {
+      if ($file = \Drupal::service('entity_type.manager')->getStorage('file')->load($value)) {
         $value = $file->uuid();
       }
     }
@@ @@
    */
   protected function getEntityManager() {
     if (!isset($this->entityManager)) {
-      $this->entityManager = \Drupal::entityManager();
+      // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+      // We are assuming that we want to use the `entity_type.manager` service since no method was called here directly. Please confirm this is the case. See https://www.drupal.org/node/2549139 for more information.
+      $this->entityManager = \Drupal::service('entity_type.manager');
     }
     return $this->entityManager;
   }
    ----------- end diff -----------

Applied rules:
 * EntityManagerRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/threejs/modules/threejs_fields/src/Plugin/Field/FieldFormatter/ThreeJSFormatterBase.php:22

    ---------- begin diff ----------
@@ @@
       if (empty($default_canvas['uuid']) && $this->fieldDefinition instanceof FieldConfigInterface) {
         $default_canvas = $this->fieldDefinition->getFieldStorageDefinition()->getSetting('default_image');
       }
-      if (!empty($default_canvas['uuid']) && $file = \Drupal::entityManager()->loadEntityByUuid('file', $default_canvas['uuid'])) {
+      if (!empty($default_canvas['uuid']) && $file = \Drupal::service('entity.repository')->loadEntityByUuid('file', $default_canvas['uuid'])) {
         // Clone the FieldItemList into a runtime-only object for the formatter,
         // so that the fallback image can be rendered without affecting the
         // field values in the entity being rendered.
    ----------- end diff -----------

Applied rules:
 * EntityManagerRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/threejs/modules/threejs_fields/src/Plugin/Field/FieldFormatter/ThreeJSFileFormatter.php:2

    ---------- begin diff ----------
@@ @@
 namespace Drupal\threejs_fields\Plugin\Field\FieldFormatter;


+use Drupal\image\ImageStyleStorageInterface;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;

@@ @@
   /**
    * The image style entity storage.
    *
-   * @var \Drupal\image\ImageStyleStorageInterface
+   * @var ImageStyleStorageInterface
    */
   protected $canvasStorage;

@@ @@
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ @@
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $image_style_storage
+   * @param EntityStorageInterface $image_style_storage
    *   The image style storage.
    */
   public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, $label, $view_mode, array $third_party_settings, AccountInterface $current_user, EntityStorageInterface $image_style_storage) {
@@ @@
       // context to ensure different file URLs are generated for different
       // sites in a multisite setup, including HTTP and HTTPS versions of the
       // same site. Fix in https://www.drupal.org/node/2646744.
-      $url = Url::fromUri(file_create_url($model_uri));
+      $url = \Drupal::service('file_url_generator')->generate($model_uri);
       $cache_contexts[] = 'url.site';

       $cache_tags = Cache::mergeTags($base_cache_tags, $file->getCacheTags());
    ----------- end diff -----------

Applied rules:
 * FromUriRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


 [OK] 6 files have been changed by Rector                                       

