diff --git a/mautic_paragraph.module b/mautic_paragraph.module
index d1a59fe..c647ce8 100644
--- a/mautic_paragraph.module
+++ b/mautic_paragraph.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Config\FileStorage;
 /**
  * @file
  * Contains mautic_paragraph.module.
@@ -136,8 +137,8 @@ function mautic_paragraph_field_widget_rs_paragraphs_asymmetric_form_alter(&$ele
 function mautic_modules_installed($modules) {
   if (in_array('paragraphs', $modules)) {
     //loading config of mautic paragraphs if paragraphs module gets enabled
-    $config_path = drupal_get_path('module', 'mautic_paragraph') . '/config/optional';
-    $config_source = new \Drupal\Core\Config\FileStorage($config_path);
+    $config_path = \Drupal::service('extension.list.module')->getPath('mautic_paragraph') . '/config/optional';
+    $config_source = new FileStorage($config_path);
     \Drupal::service('config.installer')->installOptionalConfig($config_source);
   }
-}
\ No newline at end of file
+}
diff --git a/src/Annotation/MauticParagraphConnector.php b/src/Annotation/MauticParagraphConnector.php
index de09458..577239a 100644
--- a/src/Annotation/MauticParagraphConnector.php
+++ b/src/Annotation/MauticParagraphConnector.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mautic_paragraph\Annotation;
 
+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;
 
 /**
@@ -32,7 +33,7 @@ class MauticParagraphConnector extends Plugin {
   /**
    * The human-readable name of the Mautic connector.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ -41,7 +42,7 @@ class MauticParagraphConnector extends Plugin {
   /**
    * The backend description.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
diff --git a/src/Controller/FormAutocompleteController.php b/src/Controller/FormAutocompleteController.php
index 79b72b8..3be5f55 100644
--- a/src/Controller/FormAutocompleteController.php
+++ b/src/Controller/FormAutocompleteController.php
@@ -17,14 +17,14 @@ class FormAutocompleteController extends ControllerBase {
   /**
    * The MauticParagraphApi service.
    *
-   * @var \Drupal\mautic_paragraph\MauticParagraphApi
+   * @var MauticParagraphApi
    */
   protected $mauticParagraphApi;
 
   /**
    * Construct FormAutoCompleteController class.
    *
-   * @param \Drupal\mautic_paragraph\MauticParagraphApi $mauticParagraphApi
+   * @param MauticParagraphApi $mauticParagraphApi
    *   The MauticParagraph service.
    */
   public function __construct(MauticParagraphApi $mauticParagraphApi) {
@@ -44,10 +44,10 @@ class FormAutocompleteController extends ControllerBase {
   /**
    * Handler for autocomplete request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   HTTP request.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   Return formlist as Json.
    */
   public function handleAutocomplete(Request $request) {
diff --git a/src/Controller/MauticCallbackController.php b/src/Controller/MauticCallbackController.php
index 9e4a6d7..ae751ae 100644
--- a/src/Controller/MauticCallbackController.php
+++ b/src/Controller/MauticCallbackController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mautic_paragraph\Controller;
 
+use Drupal\mautic_paragraph\MauticParagraphApi;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Url;
@@ -17,23 +18,23 @@ class MauticCallbackController extends ControllerBase {
   /**
    * The MauticApi service.
    *
-   * @var \Drupal\mautic_paragraph\MauticParagraphApi
+   * @var MauticParagraphApi
    */
   protected $mauticParagraphApi;
 
   /**
    * The messenger.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Constructs a MauticCallbackController object.
    *
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger interface.
-   * @param \Drupal\mautic_paragraph\MauticParagraphApiInterface $mauticParagraphApi
+   * @param MauticParagraphApiInterface $mauticParagraphApi
    *   The MauticApi service.
    */
   public function __construct(MessengerInterface $messenger, MauticParagraphApiInterface $mauticParagraphApi) {
diff --git a/src/Form/MauticSettingsForm.php b/src/Form/MauticSettingsForm.php
index 8d5a9ab..3e2511b 100644
--- a/src/Form/MauticSettingsForm.php
+++ b/src/Form/MauticSettingsForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\mautic_paragraph\Form;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\ConfigFormBase;
@@ -28,41 +31,41 @@ class MauticSettingsForm extends ConfigFormBase {
   /**
    * The MauticParagraphAPI service.
    *
-   * @var \Drupal\mautic_paragraph\MauticParagraphApiInterface
+   * @var MauticParagraphApiInterface
    */
   protected $mauticParagraphApi;
 
   /**
    * The backend plugin manager.
    *
-   * @var \Drupal\mautic_paragraph\MauticParagraphConnector\MauticParagraphConnectorPluginManager
+   * @var MauticParagraphConnectorPluginManager
    */
   protected $mauticparagraphConnectorPluginManager;
 
   /**
    * The messenger to send info or warnings to Drupal with.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The Mautic configuration object.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $configuration;
 
   /**
    * MauticSettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The factory for configuration objects.
-   * @param \Drupal\mautic_paragraph\MauticParagraphApiInterface $mautic_paragraph_api
+   * @param MauticParagraphApiInterface $mautic_paragraph_api
    *   The Unomi API service.
-   * @param \Drupal\mautic_paragraph\MauticParagraphConnector\MauticParagraphConnectorPluginManager $mautic_paragraph_connector_plugin_manager
+   * @param MauticParagraphConnectorPluginManager $mautic_paragraph_connector_plugin_manager
    *   The Unomi Connector Plugin Manager.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger to send info or warnings to Drupal with.
    */
   public function __construct(ConfigFactoryInterface $config_factory, MauticParagraphApiInterface $mautic_paragraph_api, MauticParagraphConnectorPluginManager $mautic_paragraph_connector_plugin_manager, MessengerInterface $messenger) {
@@ -143,10 +146,10 @@ class MauticSettingsForm extends ConfigFormBase {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   public function buildConnectorConfigForm(array &$form, FormStateInterface $form_state) {
     $form['connector_config'] = [];
diff --git a/src/MauticParagraphApi.php b/src/MauticParagraphApi.php
index 8df15c3..ee2c05d 100644
--- a/src/MauticParagraphApi.php
+++ b/src/MauticParagraphApi.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\mautic_paragraph;
 
+use Drupal\Core\Config\ImmutableConfig;
+use Symfony\Component\HttpFoundation\Request;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Messenger\MessengerInterface;
@@ -21,68 +23,68 @@ class MauticParagraphApi implements MauticParagraphApiInterface {
   /**
    * The MauticParagraph config.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $mauticParagraphConfig;
 
   /**
    * Drupal state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The URL generator.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;
 
   /**
    * The current request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The messenger to send info or warnings to Drupal with.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * Mautic Connector Plugin Manager.
    *
-   * @var \Drupal\mautic_paragraph\MauticParagraphConnector\MauticParagraphConnectorPluginManager
+   * @var MauticParagraphConnectorPluginManager
    */
   protected $mauticparagraphConnectorPluginManager;
 
   /**
    * The cache.default cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
   /**
    * Constructs a MauticParagraphApi class.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL Generator service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger to send info or warnings to Drupal with.
-   * @param \Drupal\mautic_paragraph\MauticParagraphConnector\MauticParagraphConnectorPluginManager $mautic_paragraph_connector_plugin_manager
+   * @param MauticParagraphConnectorPluginManager $mautic_paragraph_connector_plugin_manager
    *   The Unomi Connector Plugin Manager.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache object associated with the default bin.
    */
   public function __construct(ConfigFactoryInterface $config_factory,
@@ -108,7 +110,7 @@ class MauticParagraphApi implements MauticParagraphApiInterface {
     if ($this->mauticParagraphConfig->get('connector') && $this->mauticParagraphConfig->get('connector_config')) {
 
       // Ask the plugin to give us the MauticParagraphconnector.
-      /** @var \Drupal\mautic_paragraph\MauticParagraphConnectorInterface $connector */
+      /** @var MauticParagraphConnectorInterface $connector */
       $connector = $this->mauticparagraphConnectorPluginManager->createInstance($this->mauticParagraphConfig->get('connector'), $this->mauticParagraphConfig->get('connector_config'));
       return $connector->getApiClient();
     }
@@ -123,7 +125,7 @@ class MauticParagraphApi implements MauticParagraphApiInterface {
     if ($this->mauticParagraphConfig->get('connector') && $this->mauticParagraphConfig->get('connector_config')) {
 
       // Ask the plugin to give us the MauticParagraphconnector.
-      /** @var \Drupal\mautic_paragraph\MauticParagraphConnectorInterface $connector */
+      /** @var MauticParagraphConnectorInterface $connector */
       $connector = $this->mauticparagraphConnectorPluginManager->createInstance($this->mauticParagraphConfig->get('connector'), $this->mauticParagraphConfig->get('connector_config'));
       return $connector->getStatus();
     }
@@ -137,7 +139,7 @@ class MauticParagraphApi implements MauticParagraphApiInterface {
     if ($this->mauticParagraphConfig->get('connector') && $this->mauticParagraphConfig->get('connector_config')) {
 
       // Ask the plugin to give us the MauticParagraphconnector.
-      /** @var \Drupal\mautic_paragraph\MauticParagraphConnectorInterface $connector */
+      /** @var MauticParagraphConnectorInterface $connector */
       $connector = $this->mauticparagraphConnectorPluginManager->createInstance($this->mauticParagraphConfig->get('connector'), $this->mauticParagraphConfig->get('connector_config'));
       return $connector->getFormTitle($id);
     }
@@ -151,7 +153,7 @@ class MauticParagraphApi implements MauticParagraphApiInterface {
     if ($this->mauticParagraphConfig->get('connector') && $this->mauticParagraphConfig->get('connector_config')) {
 
       // Ask the plugin to give us the MauticParagraphclient.
-      /** @var \Drupal\mautic_paragraph\MauticParagraphConnectorInterface $connector */
+      /** @var MauticParagraphConnectorInterface $connector */
       $connector = $this->mauticparagraphConnectorPluginManager->createInstance($this->mauticParagraphConfig->get('connector'), $this->mauticParagraphConfig->get('connector_config'));
       return $connector->getList($input, $auth);
     }
@@ -165,7 +167,7 @@ class MauticParagraphApi implements MauticParagraphApiInterface {
     if ($this->mauticParagraphConfig->get('connector') && $this->mauticParagraphConfig->get('connector_config')) {
 
       // Ask the plugin to give us the MauticParagraphclient.
-      /** @var \Drupal\mautic_paragraph\MauticParagraphConnectorInterface $connector */
+      /** @var MauticParagraphConnectorInterface $connector */
       $connector = $this->mauticparagraphConnectorPluginManager->createInstance($this->mauticParagraphConfig->get('connector'), $this->mauticParagraphConfig->get('connector_config'));
       return $connector->getServerUri();
     }
diff --git a/src/MauticParagraphApiInterface.php b/src/MauticParagraphApiInterface.php
index c35dd9b..ba11e05 100644
--- a/src/MauticParagraphApiInterface.php
+++ b/src/MauticParagraphApiInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mautic_paragraph;
 
+use Mautic\Auth\AbstractAuth;
 /**
  * Interface for UnomiApi service.
  */
@@ -10,7 +11,7 @@ interface MauticParagraphApiInterface {
   /**
    * Get an Mautic API client.
    *
-   * @return \Mautic\Auth\AbstractAuth|null
+   * @return AbstractAuth|null
    *   The Mautic API client object.
    */
   public function getApiClient();
@@ -28,7 +29,7 @@ interface MauticParagraphApiInterface {
    *
    * @param string $input
    *   Search string for fetching forms.
-   * @param \Mautic\Auth\AbstractAuth|null $auth
+   * @param AbstractAuth|null $auth
    *   Auth object.
    *
    * @return array
diff --git a/src/MauticParagraphConnector/MauticParagraphConnectorPluginManager.php b/src/MauticParagraphConnector/MauticParagraphConnectorPluginManager.php
index d7f46b3..e936edb 100644
--- a/src/MauticParagraphConnector/MauticParagraphConnectorPluginManager.php
+++ b/src/MauticParagraphConnector/MauticParagraphConnectorPluginManager.php
@@ -23,9 +23,9 @@ class MauticParagraphConnectorPluginManager extends DefaultPluginManager {
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
diff --git a/src/MauticParagraphConnectorInterface.php b/src/MauticParagraphConnectorInterface.php
index 64e71b7..8f758e7 100644
--- a/src/MauticParagraphConnectorInterface.php
+++ b/src/MauticParagraphConnectorInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mautic_paragraph;
 
+use Mautic\Auth\AbstractAuth;
 use Drupal\Component\Plugin\ConfigurableInterface;
 
 /**
@@ -12,7 +13,7 @@ interface MauticParagraphConnectorInterface extends ConfigurableInterface {
   /**
    * Get an Mautic API client.
    *
-   * @return \Mautic\Auth\AbstractAuth|null
+   * @return AbstractAuth|null
    *   The Mautic API client object.
    */
   public function getApiClient();
@@ -35,7 +36,7 @@ interface MauticParagraphConnectorInterface extends ConfigurableInterface {
    *
    * @param string $input
    *   Search string for fetching forms.
-   * @param \Mautic\Auth\AbstractAuth|null $auth
+   * @param AbstractAuth|null $auth
    *   Auth object.
    *
    * @return array
diff --git a/src/Plugin/Field/FieldFormatter/MauticFormatter.php b/src/Plugin/Field/FieldFormatter/MauticFormatter.php
index 26053de..bfbb7a2 100644
--- a/src/Plugin/Field/FieldFormatter/MauticFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/MauticFormatter.php
@@ -27,14 +27,14 @@ class MauticFormatter extends FormatterBase implements ContainerFactoryPluginInt
   /**
    * The config factory service.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The config factory service.
    *
-   * @var \Drupal\mautic_paragraph\MauticParagraphApiInterface
+   * @var MauticParagraphApiInterface
    */
   protected $mauticParagraphApi;
 
@@ -45,7 +45,7 @@ class MauticFormatter extends FormatterBase implements ContainerFactoryPluginInt
    *   The plugin_id for the formatter.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the formatter is associated.
    * @param array $settings
    *   The formatter settings.
@@ -55,9 +55,9 @@ class MauticFormatter extends FormatterBase implements ContainerFactoryPluginInt
    *   The view mode.
    * @param array $third_party_settings
    *   Any third party settings settings.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   Config factory service.
-   * @param \Drupal\mautic_paragraph\MauticParagraphApiInterface $mauticParagraphApi
+   * @param MauticParagraphApiInterface $mauticParagraphApi
    *   Mautic Paragraph Api service.
    */
   public function __construct($plugin_id,
@@ -94,7 +94,7 @@ class MauticFormatter extends FormatterBase implements ContainerFactoryPluginInt
   /**
    * Builds a renderable array for a field value.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field values to be rendered.
    * @param string $langcode
    *   The language that should be used to render the field.
diff --git a/src/Plugin/Field/FieldWidget/AutocompleteWidget.php b/src/Plugin/Field/FieldWidget/AutocompleteWidget.php
index d0414de..54b1fe6 100644
--- a/src/Plugin/Field/FieldWidget/AutocompleteWidget.php
+++ b/src/Plugin/Field/FieldWidget/AutocompleteWidget.php
@@ -27,7 +27,7 @@ class AutocompleteWidget extends WidgetBase implements ContainerFactoryPluginInt
   /**
    * The Mautic Api.
    *
-   * @var \Drupal\mautic_paragraph\MauticParagraphApi
+   * @var MauticParagraphApi
    */
   protected $mauticParagraphApi;
 
@@ -38,13 +38,13 @@ class AutocompleteWidget extends WidgetBase implements ContainerFactoryPluginInt
    *   The plugin_id for the widget.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   The definition of the field to which the widget is associated.
    * @param array $settings
    *   The widget settings.
    * @param array $third_party_settings
    *   Any third party settings.
-   * @param \Drupal\mautic_paragraph\MauticParagraphApi $mauticParagraphApi
+   * @param MauticParagraphApi $mauticParagraphApi
    *   The Mautic Api.
    */
   public function __construct($plugin_id,
diff --git a/src/Plugin/MauticParagraphConnector/OAuthMauticParagraphConnector.php b/src/Plugin/MauticParagraphConnector/OAuthMauticParagraphConnector.php
index 0ac24e8..85d2807 100644
--- a/src/Plugin/MauticParagraphConnector/OAuthMauticParagraphConnector.php
+++ b/src/Plugin/MauticParagraphConnector/OAuthMauticParagraphConnector.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\mautic_paragraph\Plugin\MauticParagraphConnector;
 
+use Drupal\Core\State\StateInterface;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\Core\Cache\CacheBackendInterface;
+use Mautic\Auth\AuthInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\mautic_paragraph\MauticParagraphConnector\MauticParagraphConnectorPluginBase;
 use Mautic\Auth\ApiAuth;
@@ -21,21 +25,21 @@ class OAuthMauticParagraphConnector extends MauticParagraphConnectorPluginBase {
   /**
    * Drupal state.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The current request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The cache.default cache backend.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    */
   protected $cacheBackend;
 
@@ -290,7 +294,7 @@ class OAuthMauticParagraphConnector extends MauticParagraphConnectorPluginBase {
    * @param bool $redirect
    *   Redirect.
    *
-   * @return \Mautic\Auth\AuthInterface|null
+   * @return AuthInterface|null
    *   Auth interface or null.
    */
   protected function validateAccesstoken($settings, $redirect = TRUE) {
