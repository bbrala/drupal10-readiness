diff --git a/box.module b/box.module
index c02068e..0935b74 100644
--- a/box.module
+++ b/box.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\box\Entity\BoxInterface;
 /**
  * @file
  * Contains box.module.
@@ -35,7 +36,7 @@ function box_theme(): array {
  */
 function box_theme_suggestions_box(array $variables): array {
   $suggestions = [];
-  /** @var \Drupal\box\Entity\BoxInterface $entity */
+  /** @var BoxInterface $entity */
   $entity = $variables['elements']['#box'];
   $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
 
diff --git a/box.page.inc b/box.page.inc
index 4f5e335..055f8f4 100644
--- a/box.page.inc
+++ b/box.page.inc
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\box\Entity\BoxInterface;
 /**
  * @file
  * Contains box.page.inc.
@@ -26,7 +27,7 @@ function template_preprocess_box(array &$variables) {
   unset($variables['elements']['label']);
 
   $variables['box'] = $variables['elements']['#box'];
-  /** @var \Drupal\box\Entity\BoxInterface $box */
+  /** @var BoxInterface $box */
   $box = $variables['box'];
 
   $variables['url'] = $box->toUrl()->toString();
diff --git a/modules/box_clone/box_clone.module b/modules/box_clone/box_clone.module
index 810ca34..478de45 100644
--- a/modules/box_clone/box_clone.module
+++ b/modules/box_clone/box_clone.module
@@ -25,7 +25,7 @@ function box_clone_entity_operation(EntityInterface $entity) {
   $operations = [];
 
   // Only add an operation for box entities.
-  /** @var \Drupal\box\Entity\BoxInterface $entity */
+  /** @var BoxInterface $entity */
   $entity_type_id = $entity->getEntityTypeId();
   if (!in_array($entity->getEntityTypeId(), ['box', 'biox'])) {
     return $operations;
@@ -47,7 +47,7 @@ function box_clone_entity_operation(EntityInterface $entity) {
 /**
  * Determine if the current user has permission to clone a specified box.
  *
- * @param \Drupal\box\Entity\BoxInterface $box
+ * @param BoxInterface $box
  *   The box to examine.
  *
  * @return bool
@@ -68,12 +68,12 @@ function _box_clone_has_clone_permission(BoxInterface $box) {
 /**
  * Get the label of a cloned box.
  *
- * @param \Drupal\box\Entity\Box $box
+ * @param Box $box
  *   The box entity.
  * @param string $langcode
  *   The language to use.
  *
- * @return \Drupal\Component\Render\FormattableMarkup
+ * @return FormattableMarkup
  *   The cloned box label.
  */
 function box_clone_get_default_label(Box $box, $langcode = NULL): FormattableMarkup {
diff --git a/modules/box_clone/src/BoxClonePermissions.php b/modules/box_clone/src/BoxClonePermissions.php
index 6d9932d..4cedae7 100644
--- a/modules/box_clone/src/BoxClonePermissions.php
+++ b/modules/box_clone/src/BoxClonePermissions.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\box_clone;
 
+use Drupal\box\Entity\BoxTypeInterface;
 use Drupal\box\Entity\BoxType;
 use Drupal\box\Entity\BioxType;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -23,7 +24,7 @@ class BoxClonePermissions {
   public function cloneTypePermissions() {
     $perms = [];
     // Generate box permissions for all box types.
-    /** @var \Drupal\box\Entity\BoxTypeInterface $type */
+    /** @var BoxTypeInterface $type */
     foreach (BoxType::loadMultiple() as $type) {
       $type_id = $type->id();
       $type_params = ['%type_name' => $type->label()];
@@ -33,7 +34,7 @@ class BoxClonePermissions {
         ],
       ];
     }
-    /** @var \Drupal\box\Entity\BoxTypeInterface $type */
+    /** @var BoxTypeInterface $type */
     foreach (BioxType::loadMultiple() as $type) {
       $type_id = $type->id();
       $type_params = ['%type_name' => $type->label()];
diff --git a/modules/box_clone/src/Controller/BoxCloneAccess.php b/modules/box_clone/src/Controller/BoxCloneAccess.php
index edbd3d2..e70a841 100644
--- a/modules/box_clone/src/Controller/BoxCloneAccess.php
+++ b/modules/box_clone/src/Controller/BoxCloneAccess.php
@@ -11,10 +11,10 @@ class BoxCloneAccess {
   /**
    * Limit access to the clone according to their restricted state.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
-   * @param \Drupal\box\Entity\Box $box
+   * @param AccountInterface $account
+   * @param Box $box
    *
-   * @return \Drupal\Core\Access\AccessResult
+   * @return AccessResult
    */
   public function cloneBox(AccountInterface $account, Box $box) {
     $box = Box::load($box);
diff --git a/modules/box_clone/src/Controller/BoxCloneController.php b/modules/box_clone/src/Controller/BoxCloneController.php
index 3b5c02f..88f490c 100644
--- a/modules/box_clone/src/Controller/BoxCloneController.php
+++ b/modules/box_clone/src/Controller/BoxCloneController.php
@@ -16,14 +16,14 @@ class BoxCloneController extends BoxController {
   /**
    * The entity form builder.
    *
-   * @var \Drupal\box_clone\Entity\BoxCloneEntityFormBuilder
+   * @var BoxCloneEntityFormBuilder
    */
   protected $bcEntityFormBuilder;
 
   /**
    * Constructs a BoxController object.
    *
-   * @param \Drupal\box_clone\Entity\BoxCloneEntityFormBuilder $entity_form_builder
+   * @param BoxCloneEntityFormBuilder $entity_form_builder
    *   The entity form builder service.
    */
   public function __construct(BoxCloneEntityFormBuilder $entity_form_builder) {
@@ -42,7 +42,7 @@ class BoxCloneController extends BoxController {
   /**
    * Retrieves the entity form builder.
    *
-   * @return \Drupal\box_clone\Entity\BoxCloneEntityFormBuilder
+   * @return BoxCloneEntityFormBuilder
    *   The entity form builder.
    */
   protected function entityFormBuilder() {
@@ -52,7 +52,7 @@ class BoxCloneController extends BoxController {
   /**
    * Provides the box submission form.
    *
-   * @param \Drupal\box\Entity\Box $box
+   * @param Box $box
    *   The box entity to clone.
    *
    * @return array
@@ -69,7 +69,7 @@ class BoxCloneController extends BoxController {
   /**
    * The _title_callback for the box.add route.
    *
-   * @param \Drupal\box\Entity\Box $box
+   * @param Box $box
    *   The box entity.
    *
    * @return string
diff --git a/modules/box_clone/src/Entity/BoxCloneEntityFormBuilder.php b/modules/box_clone/src/Entity/BoxCloneEntityFormBuilder.php
index 7b9e8c0..5cd6bdc 100644
--- a/modules/box_clone/src/Entity/BoxCloneEntityFormBuilder.php
+++ b/modules/box_clone/src/Entity/BoxCloneEntityFormBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\box_clone\Entity;
 
+use Drupal\box\Entity\BoxInterface;
 use Drupal\box\Entity\Box;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFormBuilder;
@@ -24,56 +25,56 @@ class BoxCloneEntityFormBuilder extends EntityFormBuilder {
   /**
    * The Form Builder.
    *
-   * @var \Drupal\Core\Form\FormBuilderInterface
+   * @var FormBuilderInterface
    */
   protected $formBuilder;
 
   /**
    * The Entity Bundle Type Info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
   /**
    * The Config Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The Module Handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The Entity Type Manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The current user account.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The Private Temp Store.
    *
-   * @var \Drupal\Core\TempStore\PrivateTempStoreFactory
+   * @var PrivateTempStoreFactory
    */
   protected $privateTempStoreFactory;
 
   /**
    * The Translation Interface.
    *
-   * @var \Drupal\Core\StringTranslation\TranslationInterface
+   * @var TranslationInterface
    */
   protected $stringTranslation;
 
@@ -94,21 +95,21 @@ class BoxCloneEntityFormBuilder extends EntityFormBuilder {
   /**
    * BoxCloneEntityFormBuilder constructor.
    *
-   * @param \Drupal\Core\Form\FormBuilderInterface $formBuilder
+   * @param FormBuilderInterface $formBuilder
    *   The form builder.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle info provider.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The configuration factory.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   * @param ModuleHandlerInterface $moduleHandler
    *   The module handler.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    *   The entity type manager.
-   * @param \Drupal\Core\Session\AccountInterface $currentUser
+   * @param AccountInterface $currentUser
    *   Current user.
-   * @param \Drupal\Core\TempStore\PrivateTempStoreFactory $privateTempStoreFactory
+   * @param PrivateTempStoreFactory $privateTempStoreFactory
    *   Private temp store factory.
-   * @param \Drupal\Core\StringTranslation\TranslationInterface $stringTranslation
+   * @param TranslationInterface $stringTranslation
    *   The string translation service.
    */
   public function __construct(FormBuilderInterface $formBuilder, EntityTypeBundleInfoInterface $entityTypeBundleInfo, ConfigFactoryInterface $configFactory, ModuleHandlerInterface $moduleHandler, EntityTypeManagerInterface $entityTypeManager, AccountInterface $currentUser, PrivateTempStoreFactory $privateTempStoreFactory, TranslationInterface $stringTranslation) {
@@ -128,12 +129,12 @@ class BoxCloneEntityFormBuilder extends EntityFormBuilder {
    */
   public function getForm(EntityInterface $entity, $operation = 'default', array $form_state_additions = []) {
 
-    /** @var \Drupal\box\Entity\BoxInterface $new_box */
+    /** @var BoxInterface $new_box */
     $new_box = $entity->createDuplicate();
 
     // Clone all translations of a box.
     foreach ($new_box->getTranslationLanguages() as $langcode => $language) {
-      /** @var \Drupal\box\Entity\Box $translated_box */
+      /** @var Box $translated_box */
       $translated_box = $new_box->getTranslation($langcode);
       $translated_box = $this->cloneParagraphs($translated_box);
       $this->moduleHandler->alter('cloned_box', $translated_box, $entity);
@@ -165,10 +166,10 @@ class BoxCloneEntityFormBuilder extends EntityFormBuilder {
    * If we do not clone the paragraphs attached to the box, the linked
    * paragraphs would be linked to two boxes which is not ideal.
    *
-   * @param \Drupal\box\Entity\Box $box
+   * @param Box $box
    *   The box to clone.
    *
-   * @return \Drupal\box\Entity\Box
+   * @return Box
    *   The box with cloned paragraph fields.
    */
   public function cloneParagraphs(Box $box): Box {
diff --git a/modules/box_clone/src/Form/BoxCloneEntitySettingsForm.php b/modules/box_clone/src/Form/BoxCloneEntitySettingsForm.php
index d28a4d9..dc3c9ec 100644
--- a/modules/box_clone/src/Form/BoxCloneEntitySettingsForm.php
+++ b/modules/box_clone/src/Form/BoxCloneEntitySettingsForm.php
@@ -18,21 +18,21 @@ abstract class BoxCloneEntitySettingsForm extends ConfigFormBase implements BoxC
   /**
    * The Entity Field Manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The Config Factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * The Entity Bundle Type Info.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $entityTypeBundleInfo;
 
@@ -79,11 +79,11 @@ abstract class BoxCloneEntitySettingsForm extends ConfigFormBase implements BoxC
   /**
    * BoxCloneEntitySettingsForm constructor.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   * @param ConfigFactoryInterface $configFactory
    *   The config factory.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entityFieldManager
+   * @param EntityFieldManagerInterface $entityFieldManager
    *   The entity field manager service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $entityTypeBundleInfo
+   * @param EntityTypeBundleInfoInterface $entityTypeBundleInfo
    *   The entity type bundle info provider.
    */
   public function __construct(ConfigFactoryInterface $configFactory, EntityFieldManagerInterface $entityFieldManager, EntityTypeBundleInfoInterface $entityTypeBundleInfo) {
@@ -193,7 +193,7 @@ abstract class BoxCloneEntitySettingsForm extends ConfigFormBase implements BoxC
    *
    * @param array $form
    *   The form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current form state.
    *
    * @return array
diff --git a/modules/box_clone/src/Form/BoxCloneEntitySettingsFormInterface.php b/modules/box_clone/src/Form/BoxCloneEntitySettingsFormInterface.php
index 2162d12..2f808ee 100644
--- a/modules/box_clone/src/Form/BoxCloneEntitySettingsFormInterface.php
+++ b/modules/box_clone/src/Form/BoxCloneEntitySettingsFormInterface.php
@@ -44,7 +44,7 @@ interface BoxCloneEntitySettingsFormInterface {
   /**
    * Returns the selected bundles on the form.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return array|mixed|null
@@ -55,7 +55,7 @@ interface BoxCloneEntitySettingsFormInterface {
   /**
    * Returns the description field.
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @return string
diff --git a/modules/box_clone/src/Form/BoxCloneForm.php b/modules/box_clone/src/Form/BoxCloneForm.php
index ca39daa..da8d422 100644
--- a/modules/box_clone/src/Form/BoxCloneForm.php
+++ b/modules/box_clone/src/Form/BoxCloneForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\box_clone\Form;
 
+use Drupal\box\Entity\BoxInterface;
 use Drupal\box\Form\BoxForm;
 use Drupal\Core\Form\FormStateInterface;
 
@@ -26,7 +27,7 @@ class BoxCloneForm extends BoxForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state): int {
-    /** @var \Drupal\box\Entity\BoxInterface $box */
+    /** @var BoxInterface $box */
     $box = $this->entity;
     $insert = $box->isNew();
     $status = $box->save();
diff --git a/modules/box_clone/src/Plugin/views/field/CloneLink.php b/modules/box_clone/src/Plugin/views/field/CloneLink.php
index 83775ed..d01a8b7 100644
--- a/modules/box_clone/src/Plugin/views/field/CloneLink.php
+++ b/modules/box_clone/src/Plugin/views/field/CloneLink.php
@@ -46,7 +46,7 @@ class CloneLink extends FieldPluginBase {
   /**
    * Returns the default label for the link.
    *
-   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   * @return TranslatableMarkup
    *   The default link label.
    */
   protected function getDefaultLabel(): TranslatableMarkup {
diff --git a/modules/insert_box/src/Plugin/Filter/FilterBox.php b/modules/insert_box/src/Plugin/Filter/FilterBox.php
index b718d1f..2880834 100644
--- a/modules/insert_box/src/Plugin/Filter/FilterBox.php
+++ b/modules/insert_box/src/Plugin/Filter/FilterBox.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\insert_box\Plugin\Filter;
 
+use Drupal\box\BioxStorage;
+use Drupal\box\Entity\Box;
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Render\Renderer;
@@ -29,8 +32,8 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
  */
 class FilterBox extends FilterBase implements ContainerFactoryPluginInterface {
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
-   * @var \Drupal\Core\Render\Renderer $renderer
+   * @var EntityTypeManagerInterface $entityTypeManager
+   * @var Renderer $renderer
    */
   protected EntityTypeManagerInterface $entityTypeManager;
   protected Renderer $renderer;
@@ -39,7 +42,7 @@ class FilterBox extends FilterBase implements ContainerFactoryPluginInterface {
    * @param array $configuration
    * @param string $plugin_id
    * @param mixed $plugin_definition
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    * @param \Drupal\Core\Render\Renderer
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entityTypeManager, Renderer $renderer) {
@@ -71,7 +74,7 @@ class FilterBox extends FilterBase implements ContainerFactoryPluginInterface {
   public function process($text, $langcode): FilterProcessResult {
 
     if (preg_match_all("/\[box:([a-z0-9_]+)(:[^\]]+|)\]/", $text, $match)) {
-      /** @var \Drupal\box\BioxStorage $box_storage */
+      /** @var BioxStorage $box_storage */
       $box_storage =  $this->entityTypeManager->getStorage('box');
       // Generate replacements from box:id pattern.
       $raw_tags = $replacements = [];
@@ -100,10 +103,10 @@ class FilterBox extends FilterBase implements ContainerFactoryPluginInterface {
   /**
    * Renders box to be used as replacement.
    *
-   * @param \Drupal\box\Entity\Box $box
+   * @param Box $box
    * @param string $view_mode
    *
-   * @return \Drupal\Component\Render\MarkupInterface
+   * @return MarkupInterface
    */
   private function generateReplacement($box, $view_mode) {
     if (!$box->access('view')) {
diff --git a/modules/insert_box/tests/src/Functional/BoxPlacementTest.php b/modules/insert_box/tests/src/Functional/BoxPlacementTest.php
index 6f91f18..444e839 100644
--- a/modules/insert_box/tests/src/Functional/BoxPlacementTest.php
+++ b/modules/insert_box/tests/src/Functional/BoxPlacementTest.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\Tests\insert_box\Functional;
 
+use Drupal\user\UserInterface;
+use Drupal\box\BoxStorageInterface;
+use Drupal\node\NodeStorageInterface;
+use Drupal\box\Entity\BoxInterface;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\BrowserTestBase;
@@ -23,28 +27,28 @@ class BoxPlacementTest extends BrowserTestBase {
   /**
    * A user with permission to view published boxes.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
 
   /**
    * The box storage.
    *
-   * @var \Drupal\box\BoxStorageInterface
+   * @var BoxStorageInterface
    */
   protected $boxStorage;
 
   /**
    * The nodestorage.
    *
-   * @var \Drupal\node\NodeStorageInterface
+   * @var NodeStorageInterface
    */
   protected $nodeStorage;
 
   /**
    * The text format we use.
    *
-   * @var \Drupal\filter\Entity\FilterFormat
+   * @var FilterFormat
    */
   protected $textFormat;
 
@@ -92,7 +96,7 @@ class BoxPlacementTest extends BrowserTestBase {
     // Create box.
     $box_label = $this->randomMachineName();
     $box_text = $this->randomMachineName();
-    /** @var \Drupal\box\Entity\BoxInterface $box */
+    /** @var BoxInterface $box */
     $box = $this->boxStorage->create([
       'type' => 'default',
       'label' => $box_label,
@@ -110,7 +114,7 @@ class BoxPlacementTest extends BrowserTestBase {
     ])->save();
 
     // Create node where to embed box by ID.
-    /** @var \Drupal\node\Entity\Node $node_by_id */
+    /** @var Node $node_by_id */
     $node_by_id = Node::create([
       'type' => 'page',
       'title' => $this->randomMachineName(),
diff --git a/src/BoxAccessControlHandler.php b/src/BoxAccessControlHandler.php
index 81d52ca..0869fa0 100644
--- a/src/BoxAccessControlHandler.php
+++ b/src/BoxAccessControlHandler.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\box;
 
+use Drupal\box\Entity\BoxInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Entity\EntityAccessControlHandler;
 use Drupal\Core\Entity\EntityHandlerInterface;
@@ -41,16 +42,16 @@ class BoxAccessControlHandler extends EntityAccessControlHandler implements Enti
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * Constructs a MediaAccessControlHandler object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface|null $entity_type_manager
+   * @param EntityTypeManagerInterface|null $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(EntityTypeInterface $entity_type, EntityTypeManagerInterface $entity_type_manager) {
@@ -75,8 +76,7 @@ class BoxAccessControlHandler extends EntityAccessControlHandler implements Enti
     $entity_bundle = $entity->bundle();
 
     $etid = $entity->getEntityType()->id(); // box or biox
-
-    /** @var \Drupal\box\Entity\BoxInterface $entity */
+    /** @var BoxInterface $entity */
     switch ($operation) {
       case 'view':
         if (!$entity->isPublished()) {
diff --git a/src/BoxListBuilder.php b/src/BoxListBuilder.php
index db5c1ad..b0b1eee 100644
--- a/src/BoxListBuilder.php
+++ b/src/BoxListBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\box;
 
+use Drupal\Core\Entity\EntityMalformedException;
+use Drupal\box\Entity\BoxInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityListBuilder;
 
@@ -27,10 +29,10 @@ class BoxListBuilder extends EntityListBuilder {
 
   /**
    * {@inheritdoc}
-   * @throws \Drupal\Core\Entity\EntityMalformedException
+   * @throws EntityMalformedException
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\box\Entity\BoxInterface $entity */
+    /** @var BoxInterface $entity */
     $row['id'] = $entity->id();
 
     $row['label']['data'] = [
diff --git a/src/BoxPermissions.php b/src/BoxPermissions.php
index 9910061..56984cc 100644
--- a/src/BoxPermissions.php
+++ b/src/BoxPermissions.php
@@ -18,12 +18,12 @@ class BoxPermissions implements ContainerInjectionInterface {
   use StringTranslationTrait;
 
   /**
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @var EntityTypeManagerInterface $entityTypeManager
    */
   protected EntityTypeManagerInterface $entityTypeManager;
 
   /**
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   * @param EntityTypeManagerInterface $entityTypeManager
    */
   public function __construct(EntityTypeManagerInterface $entityTypeManager) {
     // Store our dependency.
@@ -62,7 +62,7 @@ class BoxPermissions implements ContainerInjectionInterface {
   /**
    * Returns a list of box permissions for a given box type.
    *
-   * @param \Drupal\box\Entity\BoxTypeInterface $type
+   * @param BoxTypeInterface $type
    *   The box type.
    *
    * @return array
@@ -72,7 +72,7 @@ class BoxPermissions implements ContainerInjectionInterface {
     $type_id = $type->id();
     $bundle_of = $type->getEntityType()->getBundleOf();
 
-    /** @var \Drupal\box\Entity\BoxTypeInterface $bundle_of_entity_type */
+    /** @var BoxTypeInterface $bundle_of_entity_type */
     $bundle_of_entity_type = $this->entityTypeManager->getDefinition($bundle_of);
     $entity_type_id = $bundle_of_entity_type->id();
 
diff --git a/src/BoxStorageInterface.php b/src/BoxStorageInterface.php
index ebae37f..23dd52e 100644
--- a/src/BoxStorageInterface.php
+++ b/src/BoxStorageInterface.php
@@ -20,7 +20,7 @@ interface BoxStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of Box revision IDs for a specific Box.
    *
-   * @param \Drupal\box\Entity\BoxInterface $entity
+   * @param BoxInterface $entity
    *   The Box entity.
    *
    * @return int[]
@@ -31,7 +31,7 @@ interface BoxStorageInterface extends ContentEntityStorageInterface {
   /**
    * Gets a list of revision IDs having a given user as Box author.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The user entity.
    *
    * @return int[]
@@ -42,7 +42,7 @@ interface BoxStorageInterface extends ContentEntityStorageInterface {
   /**
    * Counts the number of revisions in the default language.
    *
-   * @param \Drupal\box\Entity\BoxInterface $entity
+   * @param BoxInterface $entity
    *   The Box entity.
    *
    * @return int
@@ -53,7 +53,7 @@ interface BoxStorageInterface extends ContentEntityStorageInterface {
   /**
    * Unsets the language for all Box with the given language.
    *
-   * @param \Drupal\Core\Language\LanguageInterface $language
+   * @param LanguageInterface $language
    *   The language object.
    */
   public function clearRevisionsLanguage(LanguageInterface $language);
diff --git a/src/BoxTypeListBuilder.php b/src/BoxTypeListBuilder.php
index 231c032..860161f 100644
--- a/src/BoxTypeListBuilder.php
+++ b/src/BoxTypeListBuilder.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\box;
 
+use Drupal\box\Entity\BoxTypeInterface;
 use Drupal\Core\Config\Entity\ConfigEntityListBuilder;
 use Drupal\Core\Entity\EntityInterface;
 
@@ -27,7 +28,7 @@ class BoxTypeListBuilder extends ConfigEntityListBuilder {
    * {@inheritdoc}
    */
   public function buildRow(EntityInterface $entity): array {
-    /** @var \Drupal\box\Entity\BoxTypeInterface $entity */
+    /** @var BoxTypeInterface $entity */
     $row['label'] = $entity->label();
     $row['id'] = $entity->id();
     $row['description']['data'] = ['#markup' => $entity->getDescription()];
diff --git a/src/BoxViewBuilder.php b/src/BoxViewBuilder.php
index 8b9740c..b5abcf1 100644
--- a/src/BoxViewBuilder.php
+++ b/src/BoxViewBuilder.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\box;
 
+use Drupal\box\Entity\Box;
+use Drupal\box\Entity\BoxInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityViewBuilder;
@@ -15,7 +17,7 @@ class BoxViewBuilder extends EntityViewBuilder {
    * {@inheritdoc}
    */
   public function buildComponents(array &$build, array $entities, array $displays, $view_mode): void {
-    /** @var \Drupal\box\Entity\Box[] $entities */
+    /** @var Box[] $entities */
     if (empty($entities)) {
       return;
     }
@@ -43,7 +45,7 @@ class BoxViewBuilder extends EntityViewBuilder {
    * {@inheritdoc}
    */
   protected function alterBuild(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode): void {
-    /** @var \Drupal\box\Entity\BoxInterface $entity */
+    /** @var BoxInterface $entity */
     parent::alterBuild($build, $entity, $display, $view_mode);
     if ($entity->id()) {
       if ($entity->isDefaultRevision()) {
diff --git a/src/Controller/BoxController.php b/src/Controller/BoxController.php
index 0d66e82..5c6649e 100644
--- a/src/Controller/BoxController.php
+++ b/src/Controller/BoxController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\box\Controller;
 
+use Drupal\box\BioxStorage;
 use Drupal\box\BoxStorageInterface;
 use Drupal\box\Entity\BoxInterface;
 use Drupal\Component\Utility\Xss;
@@ -28,32 +29,32 @@ class BoxController extends ControllerBase implements ContainerInjectionInterfac
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;
 
   /**
    * The renderer service.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected RendererInterface $renderer;
 
   /**
    * The entity repository service.
    *
-   * @var \Drupal\Core\Entity\EntityRepositoryInterface
+   * @var EntityRepositoryInterface
    */
   protected EntityRepositoryInterface $entityRepository;
 
   /**
    * Constructs a BoxController object.
    *
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer service.
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
    */
   public function __construct(DateFormatterInterface $date_formatter, RendererInterface $renderer, EntityRepositoryInterface $entity_repository) {
@@ -101,7 +102,7 @@ class BoxController extends ControllerBase implements ContainerInjectionInterfac
    *   The page title.
    */
   public function revisionPageTitle(int $box_revision): string {
-    /** @var \Drupal\box\Entity\BoxInterface $box */
+    /** @var BoxInterface $box */
     $box = $this->entityTypeManager()
       ->getStorage('box')
       ->loadRevision($box_revision);
@@ -114,7 +115,7 @@ class BoxController extends ControllerBase implements ContainerInjectionInterfac
   /**
    * Generates an overview table of older revisions of a Box .
    *
-   * @param \Drupal\box\Entity\BoxInterface $box
+   * @param BoxInterface $box
    *   A Box  object.
    *
    * @return array
@@ -126,7 +127,7 @@ class BoxController extends ControllerBase implements ContainerInjectionInterfac
     $langname = $box->language()->getName();
     $languages = $box->getTranslationLanguages();
     $has_translations = (count($languages) > 1);
-    /** @var \Drupal\box\BioxStorage $box_storage */
+    /** @var BioxStorage $box_storage */
     $box_storage = $this->entityTypeManager()->getStorage('box');
 
     $build['#title'] = $has_translations ? $this->t('@langname revisions for %title', [
@@ -143,7 +144,7 @@ class BoxController extends ControllerBase implements ContainerInjectionInterfac
     $current_revision_displayed = FALSE;
 
     foreach ($this->getRevisionIds($box, $box_storage) as $vid) {
-      /** @var \Drupal\box\Entity\BoxInterface $revision */
+      /** @var BoxInterface $revision */
       $revision = $box_storage->loadRevision($vid);
       // Only show revisions that are affected by the language that is being
       // displayed.
@@ -253,9 +254,9 @@ class BoxController extends ControllerBase implements ContainerInjectionInterfac
   /**
    * Gets a list of box revision IDs for a specific box.
    *
-   * @param \Drupal\box\Entity\BoxInterface $box
+   * @param BoxInterface $box
    *   The box entity.
-   * @param \Drupal\box\BoxStorageInterface $box_storage
+   * @param BoxStorageInterface $box_storage
    *   The box storage handler.
    *
    * @return int[]
diff --git a/src/Form/BoxForm.php b/src/Form/BoxForm.php
index 5264388..2eb9d24 100644
--- a/src/Form/BoxForm.php
+++ b/src/Form/BoxForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\box\Form;
 
+use Drupal\box\Entity\BoxInterface;
+use Drupal\box\Entity\BoxTypeInterface;
+use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\box\Entity\BioxType;
 use Drupal\box\Entity\BoxType;
 use Drupal\Component\Datetime\TimeInterface;
@@ -23,29 +26,29 @@ class BoxForm extends ContentEntityForm {
   /**
    * The Current User object.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected AccountInterface $currentUser;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;
 
   /**
    * Constructs a NodeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository
+   * @param EntityRepositoryInterface $entity_repository
    *   The entity repository.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
+   * @param AccountInterface $current_user
    *   The current user.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface|null $entity_type_bundle_info
+   * @param EntityTypeBundleInfoInterface|null $entity_type_bundle_info
    *   The entity type bundle service.
-   * @param \Drupal\Component\Datetime\TimeInterface|null $time
+   * @param TimeInterface|null $time
    *   The time service.
    */
   public function __construct(EntityRepositoryInterface $entity_repository, AccountInterface $current_user, DateFormatterInterface $date_formatter, EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, TimeInterface $time = NULL) {
@@ -89,7 +92,7 @@ class BoxForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state): array {
-    /** @var \Drupal\box\Entity\BoxInterface $box */
+    /** @var BoxInterface $box */
     $box = $this->entity;
 
     $form = parent::buildForm($form, $form_state);
@@ -149,10 +152,10 @@ class BoxForm extends ContentEntityForm {
     $form['revision_information']['#type'] = 'container';
     $form['revision_information']['#group'] = 'meta';
 
-    /** @var \Drupal\box\Entity\BoxTypeInterface $box_type */
+    /** @var BoxTypeInterface $box_type */
     $box_type = ($entity_type_id == 'box') ? BoxType::load($box->bundle()) : BioxType::load($box->bundle());;
     if ($box_type->isRevisionLogRequired()) {
-      /** @var \Drupal\Core\Entity\ContentEntityTypeInterface $entity_type */
+      /** @var ContentEntityTypeInterface $entity_type */
       $entity_type = $box->getEntityType();
       $override_revision_settings = $box->get($entity_type->getKey('revision'))->access('update');
       if (!$override_revision_settings) {
@@ -176,7 +179,7 @@ class BoxForm extends ContentEntityForm {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state): int {
-    /** @var \Drupal\box\Entity\BoxInterface $box */
+    /** @var BoxInterface $box */
     $box = &$this->entity;
 
     // Save as a new revision if requested to do so.
diff --git a/src/Form/BoxRevisionDeleteForm.php b/src/Form/BoxRevisionDeleteForm.php
index 5f8692e..23564d0 100644
--- a/src/Form/BoxRevisionDeleteForm.php
+++ b/src/Form/BoxRevisionDeleteForm.php
@@ -24,48 +24,48 @@ class BoxRevisionDeleteForm extends ConfirmFormBase {
   /**
    * The Box revision.
    *
-   * @var \Drupal\box\Entity\BoxInterface
+   * @var BoxInterface
    */
   protected BoxInterface $revision;
 
   /**
    * The Box storage.
    *
-   * @var \Drupal\box\BoxStorageInterface
+   * @var BoxStorageInterface
    */
   protected BoxStorageInterface $boxStorage;
 
   /**
    * The Box type storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected EntityStorageInterface $boxTypeStorage;
 
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected Connection $connection;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected DateFormatterInterface $dateFormatter;
 
   /**
    * Constructs a new BoxRevisionDeleteForm.
    *
-   * @param \Drupal\box\BoxStorageInterface $box_storage
+   * @param BoxStorageInterface $box_storage
    *   The Box storage.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $box_type_storage
+   * @param EntityStorageInterface $box_type_storage
    *   The Box type storage.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
    */
   public function __construct(BoxStorageInterface $box_storage, EntityStorageInterface $box_type_storage, Connection $connection, DateFormatterInterface $date_formatter) {
diff --git a/src/Form/BoxRevisionRevertForm.php b/src/Form/BoxRevisionRevertForm.php
index 6b833ff..81fb755 100644
--- a/src/Form/BoxRevisionRevertForm.php
+++ b/src/Form/BoxRevisionRevertForm.php
@@ -24,48 +24,48 @@ class BoxRevisionRevertForm extends ConfirmFormBase {
   /**
    * The Box revision.
    *
-   * @var \Drupal\box\Entity\BoxInterface
+   * @var BoxInterface
    */
   protected BoxInterface $revision;
 
   /**
    * The Box storage.
    *
-   * @var \Drupal\box\BoxStorageInterface
+   * @var BoxStorageInterface
    */
-  protected \Drupal\box\BoxStorageInterface|EntityStorageInterface $boxStorage;
+  protected BoxStorageInterface|EntityStorageInterface $boxStorage;
 
   /**
    * The Box type storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $boxTypeStorage;
 
   /**
    * The date formatter service.
    *
-   * @var \Drupal\Core\Datetime\DateFormatterInterface
+   * @var DateFormatterInterface
    */
   protected $dateFormatter;
 
   /**
    * The time service.
    *
-   * @var \Drupal\Component\Datetime\TimeInterface
+   * @var TimeInterface
    */
   protected $time;
 
   /**
    * Constructs a new BoxRevisionRevertForm.
    *
-   * @param \Drupal\box\BoxStorageInterface $box_storage
+   * @param BoxStorageInterface $box_storage
    *   The Box storage.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $box_type_storage
+   * @param EntityStorageInterface $box_type_storage
    *   The Box type storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(BoxStorageInterface $box_storage, EntityStorageInterface $box_type_storage, DateFormatterInterface $date_formatter, TimeInterface $time) {
@@ -166,12 +166,12 @@ class BoxRevisionRevertForm extends ConfirmFormBase {
   /**
    * Prepares a revision to be reverted.
    *
-   * @param \Drupal\box\Entity\BoxInterface $revision
+   * @param BoxInterface $revision
    *   The revision to be reverted.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
-   * @return \Drupal\box\Entity\BoxInterface
+   * @return BoxInterface
    *   The prepared revision ready to be stored.
    */
   protected function prepareRevertedRevision(BoxInterface $revision, FormStateInterface $form_state): BoxInterface {
diff --git a/src/Form/BoxRevisionRevertTranslationForm.php b/src/Form/BoxRevisionRevertTranslationForm.php
index ca01b5e..4d88aeb 100644
--- a/src/Form/BoxRevisionRevertTranslationForm.php
+++ b/src/Form/BoxRevisionRevertTranslationForm.php
@@ -28,22 +28,22 @@ class BoxRevisionRevertTranslationForm extends BoxRevisionRevertForm {
   /**
    * The language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected LanguageManagerInterface $languageManager;
 
   /**
    * Constructs a new BoxRevisionRevertTranslationForm.
    *
-   * @param \Drupal\Core\Entity\EntityStorageInterface $box_storage
+   * @param EntityStorageInterface $box_storage
    *   The Box storage.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $box_type_storage
+   * @param EntityStorageInterface $box_type_storage
    *   The Box type storage.
-   * @param \Drupal\Core\Datetime\DateFormatterInterface $date_formatter
+   * @param DateFormatterInterface $date_formatter
    *   The date formatter service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
+   * @param TimeInterface $time
    *   The time service.
    */
   public function __construct(EntityStorageInterface $box_storage, EntityStorageInterface $box_type_storage, DateFormatterInterface $date_formatter, LanguageManagerInterface $language_manager, TimeInterface $time) {
@@ -106,7 +106,7 @@ class BoxRevisionRevertTranslationForm extends BoxRevisionRevertForm {
   protected function prepareRevertedRevision(BoxInterface $revision, FormStateInterface $form_state): BoxInterface {
     $revert_untranslated_fields = (bool) $form_state->getValue('revert_untranslated_fields');
     $translation = $revision->getTranslation($this->langcode);
-    /** @var \Drupal\box\Entity\BoxInterface $box */
+    /** @var BoxInterface $box */
     $box = $this->boxStorage->createRevision($translation, TRUE, $revert_untranslated_fields);
     return $box;
   }
diff --git a/src/Form/BoxTypeForm.php b/src/Form/BoxTypeForm.php
index 1ed48ba..f5815a6 100644
--- a/src/Form/BoxTypeForm.php
+++ b/src/Form/BoxTypeForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\box\Form;
 
+use Drupal\box\Entity\BoxTypeInterface;
 use Drupal\Core\Entity\BundleEntityFormBase;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -18,14 +19,14 @@ class BoxTypeForm extends BundleEntityFormBase {
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected EntityFieldManagerInterface $entityFieldManager;
 
   /**
    * Constructs the BoxTypeForm object.
    *
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(EntityFieldManagerInterface $entity_field_manager) {
@@ -48,12 +49,12 @@ class BoxTypeForm extends BundleEntityFormBase {
     $form = parent::form($form, $form_state);
 
     /** @var \Drupal\box\Entity\BoxInterface $box */
-    /** @var \Drupal\box\Entity\BoxTypeInterface $box_type */
+    /** @var BoxTypeInterface $box_type */
     $box_type = $this->entity;
 
     $bundle_of = $box_type->getEntityType()->getBundleOf();
 
-    /** @var \Drupal\box\Entity\BoxTypeInterface $bundle_of_entity_type */
+    /** @var BoxTypeInterface $bundle_of_entity_type */
     $bundle_of_entity_type = $this->entityTypeManager->getDefinition($bundle_of);
     $etid = $bundle_of_entity_type->id();
 
@@ -182,12 +183,12 @@ class BoxTypeForm extends BundleEntityFormBase {
    * {@inheritdoc}
    */
   public function save(array $form, FormStateInterface $form_state): void {
-    /** @var \Drupal\box\Entity\BoxTypeInterface $box_type */
+    /** @var BoxTypeInterface $box_type */
     $box_type = $this->entity;
 
     $bundle_of = $box_type->getEntityType()->getBundleOf();
 
-    /** @var \Drupal\box\Entity\BoxTypeInterface $bundle_of_entity_type */
+    /** @var BoxTypeInterface $bundle_of_entity_type */
     $bundle_of_entity_type = $this->entityTypeManager->getDefinition($bundle_of);
     $etid = $bundle_of_entity_type->id();
 
diff --git a/src/Plugin/Block/BoxView.php b/src/Plugin/Block/BoxView.php
index 6b473d3..d110ec8 100644
--- a/src/Plugin/Block/BoxView.php
+++ b/src/Plugin/Block/BoxView.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\box\Plugin\Block;
 
+use Drupal\box\BoxStorageInterface;
 use Drupal\Core\Block\Annotation\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\CacheableMetadata;
@@ -24,14 +25,14 @@ class BoxView extends BlockBase implements ContainerFactoryPluginInterface {
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
@@ -44,9 +45,9 @@ class BoxView extends BlockBase implements ContainerFactoryPluginInterface {
    *   The plugin ID for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository) {
@@ -102,7 +103,7 @@ class BoxView extends BlockBase implements ContainerFactoryPluginInterface {
    * {@inheritdoc}
    */
   public function blockValidate($form, FormStateInterface $form_state): void {
-    /** @var \Drupal\box\BoxStorageInterface $box_storage */
+    /** @var BoxStorageInterface $box_storage */
     $box_storage = $this->entityTypeManager->getStorage('box');
     $box = $box_storage->loadByMachineName($form_state->getValue('machine_name'));
 
@@ -132,7 +133,7 @@ class BoxView extends BlockBase implements ContainerFactoryPluginInterface {
    * {@inheritdoc}
    */
   public function build(): array {
-    /** @var \Drupal\box\BoxStorageInterface $box_storage */
+    /** @var BoxStorageInterface $box_storage */
     $box_storage = $this->entityTypeManager->getStorage('box');
     $box = $box_storage->loadByMachineName($this->configuration['machine_name']);
 
diff --git a/src/Plugin/views/argument/BioxId.php b/src/Plugin/views/argument/BioxId.php
index b9ee8b9..5474fdf 100644
--- a/src/Plugin/views/argument/BioxId.php
+++ b/src/Plugin/views/argument/BioxId.php
@@ -16,7 +16,7 @@ class BioId extends NumericArgument {
   /**
    * The biox storage.
    *
-   * @var \Drupal\box\BoxStorageInterface
+   * @var BoxStorageInterface
    */
   protected $bioxStorage;
 
@@ -29,7 +29,7 @@ class BioId extends NumericArgument {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\box\BoxStorageInterface $biox_storage
+   * @param BoxStorageInterface $biox_storage
    *   The box storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, BoxStorageInterface $biox_storage) {
diff --git a/src/Plugin/views/argument/BioxType.php b/src/Plugin/views/argument/BioxType.php
index a6b54b7..d58fcc8 100644
--- a/src/Plugin/views/argument/BioxType.php
+++ b/src/Plugin/views/argument/BioxType.php
@@ -16,7 +16,7 @@ class BioxType extends StringArgument {
   /**
    * BioxType storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $bioxTypeStorage;
 
@@ -29,7 +29,7 @@ class BioxType extends StringArgument {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $biox_type_storage
+   * @param EntityStorageInterface $biox_type_storage
    *   The entity storage class.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityStorageInterface $biox_type_storage) {
diff --git a/src/Plugin/views/argument/BioxVid.php b/src/Plugin/views/argument/BioxVid.php
index a9bd068..35d7315 100644
--- a/src/Plugin/views/argument/BioxVid.php
+++ b/src/Plugin/views/argument/BioxVid.php
@@ -17,14 +17,14 @@ class BioxVid extends NumericArgument {
   /**
    * Database Service Object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The biox storage.
    *
-   * @var \Drupal\box\BoxStorageInterface
+   * @var BoxStorageInterface
    */
   protected $bioxStorage;
 
@@ -37,9 +37,9 @@ class BioxVid extends NumericArgument {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database Service Object.
-   * @param \Drupal\box\BoxStorageInterface $biox_storage
+   * @param BoxStorageInterface $biox_storage
    *   The biox storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database, BoxStorageInterface $biox_storage) {
diff --git a/src/Plugin/views/argument/BoxId.php b/src/Plugin/views/argument/BoxId.php
index adfef1f..0d36f86 100644
--- a/src/Plugin/views/argument/BoxId.php
+++ b/src/Plugin/views/argument/BoxId.php
@@ -16,7 +16,7 @@ class BoxId extends NumericArgument {
   /**
    * The box storage.
    *
-   * @var \Drupal\box\BoxStorageInterface
+   * @var BoxStorageInterface
    */
   protected $boxStorage;
 
@@ -29,7 +29,7 @@ class BoxId extends NumericArgument {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\box\BoxStorageInterface $box_storage
+   * @param BoxStorageInterface $box_storage
    *   The box storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, BoxStorageInterface $box_storage) {
diff --git a/src/Plugin/views/argument/BoxType.php b/src/Plugin/views/argument/BoxType.php
index 80ea17f..ae5367e 100644
--- a/src/Plugin/views/argument/BoxType.php
+++ b/src/Plugin/views/argument/BoxType.php
@@ -16,7 +16,7 @@ class BoxType extends StringArgument {
   /**
    * BoxType storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $boxTypeStorage;
 
@@ -29,7 +29,7 @@ class BoxType extends StringArgument {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $box_type_storage
+   * @param EntityStorageInterface $box_type_storage
    *   The entity storage class.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityStorageInterface $box_type_storage) {
diff --git a/src/Plugin/views/argument/BoxVid.php b/src/Plugin/views/argument/BoxVid.php
index 8d05944..1300803 100644
--- a/src/Plugin/views/argument/BoxVid.php
+++ b/src/Plugin/views/argument/BoxVid.php
@@ -17,14 +17,14 @@ class BoxVid extends NumericArgument {
   /**
    * Database Service Object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The box storage.
    *
-   * @var \Drupal\box\BoxStorageInterface
+   * @var BoxStorageInterface
    */
   protected $boxStorage;
 
@@ -37,9 +37,9 @@ class BoxVid extends NumericArgument {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database Service Object.
-   * @param \Drupal\box\BoxStorageInterface $box_storage
+   * @param BoxStorageInterface $box_storage
    *   The box storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database, BoxStorageInterface $box_storage) {
diff --git a/src/Plugin/views/argument/Id.php b/src/Plugin/views/argument/Id.php
index cd26e74..ce8eca7 100644
--- a/src/Plugin/views/argument/Id.php
+++ b/src/Plugin/views/argument/Id.php
@@ -17,7 +17,7 @@ class Id extends NumericArgument {
   /**
    * The box storage.
    *
-   * @var \Drupal\box\BoxStorageInterface
+   * @var BoxStorageInterface
    */
   protected $boxStorage;
 
@@ -30,7 +30,7 @@ class Id extends NumericArgument {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\box\BoxStorageInterface $box_storage
+   * @param BoxStorageInterface $box_storage
    *   The box storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, BoxStorageInterface $box_storage) {
diff --git a/src/Plugin/views/argument/Type.php b/src/Plugin/views/argument/Type.php
index 7e262c2..3d8bbac 100644
--- a/src/Plugin/views/argument/Type.php
+++ b/src/Plugin/views/argument/Type.php
@@ -17,7 +17,7 @@ class Type extends StringArgument {
   /**
    * BoxType storage handler.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $boxTypeStorage;
 
@@ -30,7 +30,7 @@ class Type extends StringArgument {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityStorageInterface $box_type_storage
+   * @param EntityStorageInterface $box_type_storage
    *   The entity storage class.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityStorageInterface $box_type_storage) {
diff --git a/src/Plugin/views/argument/Vid.php b/src/Plugin/views/argument/Vid.php
index dde111f..065e414 100644
--- a/src/Plugin/views/argument/Vid.php
+++ b/src/Plugin/views/argument/Vid.php
@@ -17,14 +17,14 @@ class Vid extends NumericArgument {
   /**
    * Database Service Object.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $database;
 
   /**
    * The box storage.
    *
-   * @var \Drupal\box\BoxStorageInterface
+   * @var BoxStorageInterface
    */
   protected $boxStorage;
 
@@ -37,9 +37,9 @@ class Vid extends NumericArgument {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Database\Connection $database
+   * @param Connection $database
    *   Database Service Object.
-   * @param \Drupal\box\BoxStorageInterface $box_storage
+   * @param BoxStorageInterface $box_storage
    *   The box storage.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, Connection $database, BoxStorageInterface $box_storage) {
diff --git a/src/Plugin/views/field/BoxRevisionLink.php b/src/Plugin/views/field/BoxRevisionLink.php
index ca6f9e6..5182e16 100644
--- a/src/Plugin/views/field/BoxRevisionLink.php
+++ b/src/Plugin/views/field/BoxRevisionLink.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\box\Plugin\views\field;
 
+use Drupal\box\Entity\BoxInterface;
 use Drupal\Core\Url;
 use Drupal\views\Plugin\views\field\LinkBase;
 use Drupal\views\ResultRow;
@@ -19,7 +20,7 @@ class BoxRevisionLink extends LinkBase {
    * {@inheritdoc}
    */
   protected function getUrlInfo(ResultRow $row) {
-    /** @var \Drupal\box\Entity\BoxInterface $box */
+    /** @var BoxInterface $box */
     $box = $this->getEntity($row);
     // Current revision uses the box view path.
     return !$box->isDefaultRevision() ?
@@ -31,7 +32,7 @@ class BoxRevisionLink extends LinkBase {
    * {@inheritdoc}
    */
   protected function renderLink(ResultRow $row) {
-    /** @var \Drupal\box\Entity\BoxInterface $box */
+    /** @var BoxInterface $box */
     $box = $this->getEntity($row);
     if (!$box->getRevisionid()) {
       return '';
diff --git a/src/Plugin/views/field/BoxRevisionLinkDelete.php b/src/Plugin/views/field/BoxRevisionLinkDelete.php
index 9855e44..c99c084 100644
--- a/src/Plugin/views/field/BoxRevisionLinkDelete.php
+++ b/src/Plugin/views/field/BoxRevisionLinkDelete.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\box\Plugin\views\field;
 
+use Drupal\box\Entity\BoxInterface;
 use Drupal\Core\Url;
 use Drupal\views\ResultRow;
 
@@ -18,7 +19,7 @@ class BoxRevisionLinkDelete extends BoxRevisionLink {
    * {@inheritdoc}
    */
   protected function getUrlInfo(ResultRow $row) {
-    /** @var \Drupal\box\Entity\BoxInterface $box */
+    /** @var BoxInterface $box */
     $box = $this->getEntity($row);
     return Url::fromRoute('box.revision_delete_confirm', [
       'box' => $box->id(),
diff --git a/src/Plugin/views/field/BoxRevisionLinkRevert.php b/src/Plugin/views/field/BoxRevisionLinkRevert.php
index 96aac53..ab0e300 100644
--- a/src/Plugin/views/field/BoxRevisionLinkRevert.php
+++ b/src/Plugin/views/field/BoxRevisionLinkRevert.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\box\Plugin\views\field;
 
+use Drupal\box\Entity\BoxInterface;
 use Drupal\Core\Url;
 use Drupal\views\ResultRow;
 
@@ -18,7 +19,7 @@ class BoxRevisionLinkRevert extends BoxRevisionLink {
    * {@inheritdoc}
    */
   protected function getUrlInfo(ResultRow $row) {
-    /** @var \Drupal\box\Entity\BoxInterface $box */
+    /** @var BoxInterface $box */
     $box = $this->getEntity($row);
     return Url::fromRoute('box.revision_revert_confirm', [
       'box' => $box->id(),
diff --git a/src/Plugin/views/field/RevisionLink.php b/src/Plugin/views/field/RevisionLink.php
index 994f763..1743f96 100644
--- a/src/Plugin/views/field/RevisionLink.php
+++ b/src/Plugin/views/field/RevisionLink.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\box\Plugin\views\field;
 
+use Drupal\box\Entity\BoxInterface;
 use Drupal\Core\Url;
 use Drupal\views\Annotation\ViewsField;
 use Drupal\views\Plugin\views\field\LinkBase;
@@ -20,7 +21,7 @@ class RevisionLink extends LinkBase {
    * {@inheritdoc}
    */
   protected function getUrlInfo(ResultRow $row) {
-    /** @var \Drupal\box\Entity\BoxInterface $box */
+    /** @var BoxInterface $box */
     $box = $this->getEntity($row);
     // Current revision uses the box view path.
     return !$box->isDefaultRevision() ?
@@ -32,7 +33,7 @@ class RevisionLink extends LinkBase {
    * {@inheritdoc}
    */
   protected function renderLink(ResultRow $row) {
-    /** @var \Drupal\box\Entity\BoxInterface $box */
+    /** @var BoxInterface $box */
     $box = $this->getEntity($row);
     if (!$box->getRevisionid()) {
       return '';
diff --git a/src/Plugin/views/field/RevisionLinkDelete.php b/src/Plugin/views/field/RevisionLinkDelete.php
index bff1266..fadf1ee 100644
--- a/src/Plugin/views/field/RevisionLinkDelete.php
+++ b/src/Plugin/views/field/RevisionLinkDelete.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\box\Plugin\views\field;
 
+use Drupal\box\Entity\BoxInterface;
 use Drupal\Core\Url;
 use Drupal\views\Annotation\ViewsField;
 use Drupal\views\ResultRow;
@@ -19,7 +20,7 @@ class RevisionLinkDelete extends RevisionLink {
    * {@inheritdoc}
    */
   protected function getUrlInfo(ResultRow $row) {
-    /** @var \Drupal\box\Entity\BoxInterface $box */
+    /** @var BoxInterface $box */
     $box = $this->getEntity($row);
     return Url::fromRoute('box.revision_delete_confirm', ['box' => $box->id(), 'box_revision' => $box->getRevisionId()]);
   }
diff --git a/src/Plugin/views/field/RevisionLinkRevert.php b/src/Plugin/views/field/RevisionLinkRevert.php
index 7b954cf..27d420c 100644
--- a/src/Plugin/views/field/RevisionLinkRevert.php
+++ b/src/Plugin/views/field/RevisionLinkRevert.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\box\Plugin\views\field;
 
+use Drupal\box\Entity\BoxInterface;
 use Drupal\Core\Url;
 use Drupal\views\Annotation\ViewsField;
 use Drupal\views\ResultRow;
@@ -19,7 +20,7 @@ class RevisionLinkRevert extends RevisionLink {
    * {@inheritdoc}
    */
   protected function getUrlInfo(ResultRow $row) {
-    /** @var \Drupal\box\Entity\BoxInterface $box */
+    /** @var BoxInterface $box */
     $box = $this->getEntity($row);
     return Url::fromRoute('box.revision_revert_confirm', ['box' => $box->id(), 'box_revision' => $box->getRevisionId()]);
   }
diff --git a/src/Plugin/views/wizard/Biox.php b/src/Plugin/views/wizard/Biox.php
index cb66d73..496434d 100644
--- a/src/Plugin/views/wizard/Biox.php
+++ b/src/Plugin/views/wizard/Biox.php
@@ -31,14 +31,14 @@ class Biox extends WizardPluginBase {
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -51,11 +51,11 @@ class Biox extends WizardPluginBase {
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info_service
+   * @param EntityTypeBundleInfoInterface $bundle_info_service
    *   The entity bundle info service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeBundleInfoInterface $bundle_info_service, EntityDisplayRepositoryInterface $entity_display_repository, EntityFieldManagerInterface $entity_field_manager) {
diff --git a/src/Plugin/views/wizard/Box.php b/src/Plugin/views/wizard/Box.php
index c86ab7a..2f48e38 100644
--- a/src/Plugin/views/wizard/Box.php
+++ b/src/Plugin/views/wizard/Box.php
@@ -31,14 +31,14 @@ class Box extends WizardPluginBase {
   /**
    * The entity display repository.
    *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   * @var EntityDisplayRepositoryInterface
    */
   protected $entityDisplayRepository;
 
   /**
    * The entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -51,11 +51,11 @@ class Box extends WizardPluginBase {
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info_service
+   * @param EntityTypeBundleInfoInterface $bundle_info_service
    *   The entity bundle info service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   * @param EntityDisplayRepositoryInterface $entity_display_repository
    *   The entity display repository service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeBundleInfoInterface $bundle_info_service, EntityDisplayRepositoryInterface $entity_display_repository, EntityFieldManagerInterface $entity_field_manager) {
diff --git a/src/Routing/BoxRouteProvider.php b/src/Routing/BoxRouteProvider.php
index 213645c..a8f6c2a 100644
--- a/src/Routing/BoxRouteProvider.php
+++ b/src/Routing/BoxRouteProvider.php
@@ -48,9 +48,9 @@ class BoxRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Helper function to set route requirements and options for revision routes.
    *
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route to modify.
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    * @param string $op
    *   Entity operation
@@ -78,10 +78,10 @@ class BoxRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the version history route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getHistoryRoute(EntityTypeInterface $entity_type): ?Route {
@@ -102,10 +102,10 @@ class BoxRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRoute(EntityTypeInterface $entity_type): ?Route {
@@ -127,10 +127,10 @@ class BoxRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionRevertRoute(EntityTypeInterface $entity_type): ?Route {
@@ -151,10 +151,10 @@ class BoxRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision delete route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionDeleteRoute(EntityTypeInterface $entity_type): ?Route {
@@ -174,10 +174,10 @@ class BoxRouteProvider extends AdminHtmlRouteProvider {
   /**
    * Gets the revision translation revert route.
    *
-   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   * @param EntityTypeInterface $entity_type
    *   The entity type.
    *
-   * @return \Symfony\Component\Routing\Route|null
+   * @return Route|null
    *   The generated route, if available.
    */
   protected function getRevisionTranslationRevertRoute(EntityTypeInterface $entity_type): ?Route {
