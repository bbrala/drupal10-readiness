diff --git a/inline_translation.info.yml b/inline_translation.info.yml
index 29732d6..f69eeea 100644
--- a/inline_translation.info.yml
+++ b/inline_translation.info.yml
@@ -2,7 +2,7 @@ name: Inline Translation
 type: module
 description: 'Allows users to translate entities in a single form.'
 package: Multilingual
-core_version_requirement: ^8.8.1 || ^9
+core_version_requirement: ^9.1 || ^10
 dependencies:
   - drupal:field
   - drupal:language
diff --git a/inline_translation.module b/inline_translation.module
index f8bb91a..f176430 100644
--- a/inline_translation.module
+++ b/inline_translation.module
@@ -15,7 +15,7 @@ use Drupal\inline_translation\EntityOperations;
  * Add "Enable inline translation" checkbox in content translation settings.
  */
 function inline_translation_form_language_content_settings_form_alter(&$form, FormStateInterface $form_state) {
-  /** @var \Drupal\inline_translation\EntityOperations $form_handler */
+  /** @var EntityOperations $form_handler */
   $form_handler = \Drupal::service('class_resolver')
     ->getInstanceFromDefinition(EntityOperations::class);
   $form_handler->settingsFormAlter($form, $form_state);
@@ -28,7 +28,7 @@ function inline_translation_form_language_content_settings_form_alter(&$form, Fo
  */
 function inline_translation_form_alter(&$form, FormStateInterface $form_state, $form_id) {
   if ($form_state->getFormObject() instanceof EntityFormInterface) {
-    /** @var \Drupal\inline_translation\EntityOperations $form_handler */
+    /** @var EntityOperations $form_handler */
     $form_handler = \Drupal::service('class_resolver')
       ->getInstanceFromDefinition(EntityOperations::class);
     $form_handler->entityFormAlter($form, $form_state, $form_id);
diff --git a/src/EntityOperations.php b/src/EntityOperations.php
index cdc8576..9245a92 100644
--- a/src/EntityOperations.php
+++ b/src/EntityOperations.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\inline_translation;
 
+use Drupal\Core\Entity\RevisionableInterface;
+use Drupal\language\Entity\ContentLanguageSettings;
 use Drupal\content_translation\ContentTranslationManagerInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
@@ -36,50 +38,50 @@ class EntityOperations implements ContainerInjectionInterface {
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The entity field manager service.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
   /**
    * The content translation manager service.
    *
-   * @var \Drupal\content_translation\ContentTranslationManagerInterface
+   * @var ContentTranslationManagerInterface
    */
   protected $contentTranslationManager;
 
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;
 
   /**
    * The entity bundle information service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
+   * @var EntityTypeBundleInfoInterface
    */
   protected $bundleInfo;
 
   /**
    * Provides a way to do various entity operations.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager
+   * @param EntityFieldManagerInterface $entity_field_manager
    *   The entity field manager service.
-   * @param \Drupal\content_translation\ContentTranslationManagerInterface $content_translation_manager
+   * @param ContentTranslationManagerInterface $content_translation_manager
    *   The content translation manager.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info
+   * @param EntityTypeBundleInfoInterface $bundle_info
    *   The entity bundle information service.
    */
   public function __construct(
@@ -113,7 +115,7 @@ class EntityOperations implements ContainerInjectionInterface {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param string $form_id
    *   The form ID.
@@ -132,7 +134,7 @@ class EntityOperations implements ContainerInjectionInterface {
       return;
     }
 
-    /** @var \Drupal\Core\Entity\RevisionableInterface $entity */
+    /** @var RevisionableInterface $entity */
     $entity = $form_state->getFormObject()->getEntity();
     if (!$this->isSupported($entity)) {
       return;
@@ -156,7 +158,7 @@ class EntityOperations implements ContainerInjectionInterface {
    *
    * @param array $element
    *   The submit element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array
@@ -177,7 +179,7 @@ class EntityOperations implements ContainerInjectionInterface {
    *
    * @param array $form
    *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    *
    * @see \Drupal\language\Form\ContentLanguageSettingsForm
@@ -217,7 +219,7 @@ class EntityOperations implements ContainerInjectionInterface {
    *
    * @param array $form
    *   The form array.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state.
    */
   public function settingsFormSubmit(array $form, FormStateInterface $form_state) {
@@ -239,7 +241,7 @@ class EntityOperations implements ContainerInjectionInterface {
    *
    * @param array $form
    *   An array of form elements.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   Form state object.
    */
   protected function entityFormAddField(array &$form, FormStateInterface $form_state) {
@@ -339,7 +341,7 @@ class EntityOperations implements ContainerInjectionInterface {
    * Copies the form data to the translation.
    */
   public function entityBuilder($entity_type, ContentEntityInterface $entity, array &$form, FormStateInterface $form_state) {
-    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+    /** @var ContentEntityInterface $entity */
     $bundle = $entity->bundle();
     $current_language = $this->languageManager->getCurrentLanguage();
     $languages = $this->languageManager->getLanguages();
@@ -395,7 +397,7 @@ class EntityOperations implements ContainerInjectionInterface {
    *   The field name.
    * @param array $values
    *   Form values.
-   * @param \Drupal\Core\TypedData\TranslatableInterface $translation
+   * @param TranslatableInterface $translation
    *   Translation of the entity.
    */
   protected function handleImageField(string $field_name, array &$values, TranslatableInterface $translation) {
@@ -419,7 +421,7 @@ class EntityOperations implements ContainerInjectionInterface {
   /**
    * Checks if inline translation is enabled.
    *
-   * @param \Drupal\Core\Entity\EntityInterface $entity
+   * @param EntityInterface $entity
    *   The entity.
    *
    * @return bool
@@ -464,7 +466,7 @@ class EntityOperations implements ContainerInjectionInterface {
   /**
    * Checks translation supported for given field.
    *
-   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
+   * @param FieldDefinitionInterface $field_definition
    *   Field definition.
    *
    * @return bool
@@ -579,14 +581,14 @@ class EntityOperations implements ContainerInjectionInterface {
    * @param string $bundle
    *   Bundle name.
    *
-   * @return \Drupal\language\Entity\ContentLanguageSettings
+   * @return ContentLanguageSettings
    *   The content language config entity if one exists. Otherwise, returns
    *   default values.
    */
   protected function loadContentLanguageSettings(string $entity_type_id, string $bundle) {
     $config = $this->entityTypeManager->getStorage('language_content_settings')->load($entity_type_id . '.' . $bundle);
     if ($config == NULL) {
-      /** @var \Drupal\language\Entity\ContentLanguageSettings $config */
+      /** @var ContentLanguageSettings $config */
       $config = $this->entityTypeManager->getStorage('language_content_settings')->create([
         'target_entity_type_id' => $entity_type_id,
         'target_bundle' => $bundle,
diff --git a/tests/src/Functional/InlineTranslationNodeUITest.php b/tests/src/Functional/InlineTranslationNodeUITest.php
index 0f1135a..e89910c 100644
--- a/tests/src/Functional/InlineTranslationNodeUITest.php
+++ b/tests/src/Functional/InlineTranslationNodeUITest.php
@@ -56,7 +56,8 @@ class InlineTranslationNodeUITest extends ContentTranslationUITestBase {
     // Display the language selector.
     $this->drupalLogin($this->administrator);
     $edit = ['language_configuration[language_alterable]' => TRUE];
-    $this->drupalPostForm('admin/structure/types/manage/article', $edit, 'Save content type');
+    $this->drupalGet('admin/structure/types/manage/article');
+    $this->submitForm($edit, 'Save content type');
 
     // Use inline translation.
     $this->drupalGet('admin/config/regional/content-language');
