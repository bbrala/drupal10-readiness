diff --git a/src/StackMiddleware/TrustedReverseProxyMiddleware.php b/src/StackMiddleware/TrustedReverseProxyMiddleware.php
index 2e59b8d..91783b4 100644
--- a/src/StackMiddleware/TrustedReverseProxyMiddleware.php
+++ b/src/StackMiddleware/TrustedReverseProxyMiddleware.php
@@ -16,23 +16,23 @@ class TrustedReverseProxyMiddleware implements HttpKernelInterface {
   /**
    * The decorated kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;
 
   /**
    * The site settings.
    *
-   * @var \Drupal\Core\Site\Settings
+   * @var Settings
    */
   protected $settings;
 
   /**
    * Constructor.
    *
-   * @param \Symfony\Component\HttpKernel\HttpKernelInterface $http_kernel
+   * @param HttpKernelInterface $http_kernel
    *   HTTP Kernel.
-   * @param \Drupal\Core\Site\Settings $settings
+   * @param Settings $settings
    *   Settings.
    */
   public function __construct(HttpKernelInterface $http_kernel, Settings $settings) {
@@ -66,7 +66,7 @@ class TrustedReverseProxyMiddleware implements HttpKernelInterface {
   /**
    * Detect reverse proxies from an x-forwarded-for header.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
    * @return array
diff --git a/tests/src/Unit/TrustedReverseProxyMiddlewareTest.php b/tests/src/Unit/TrustedReverseProxyMiddlewareTest.php
index dcb2bda..cd2b3df 100644
--- a/tests/src/Unit/TrustedReverseProxyMiddlewareTest.php
+++ b/tests/src/Unit/TrustedReverseProxyMiddlewareTest.php
@@ -4,6 +4,7 @@ declare(strict_types=1);
 
 namespace Drupal\Tests\trusted_reverse_proxy\Unit;
 
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\Core\Site\Settings;
 use Drupal\Core\StackMiddleware\ReverseProxyMiddleware;
 use Drupal\Tests\UnitTestCase;
@@ -21,21 +22,21 @@ class TrustedReverseProxyMiddlewareTest extends UnitTestCase {
   /**
    * HTTP Kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var HttpKernelInterface|MockObject
    */
   protected $mockHttpKernel;
 
   /**
    * Reverse Proxy middleware.
    *
-   * @var \Drupal\Core\StackMiddleware\ReverseProxyMiddleware|\PHPUnit\Framework\MockObject\MockObject
+   * @var ReverseProxyMiddleware|MockObject
    */
   protected $mockReverseProxyMiddleware;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->mockHttpKernel = $this->createMock(HttpKernelInterface::class);
     $this->mockReverseProxyMiddleware = $this->createMock(ReverseProxyMiddleware::class);
   }
@@ -43,7 +44,7 @@ class TrustedReverseProxyMiddlewareTest extends UnitTestCase {
   /**
    * Return a well-formed reverse proxied request.
    *
-   * @return \Symfony\Component\HttpFoundation\Request
+   * @return Request
    *   The request.
    */
   protected function getWellFormedReverseProxyRequest(): Request {
diff --git a/trusted_reverse_proxy.module b/trusted_reverse_proxy.module
index 6a5f051..366c69a 100644
--- a/trusted_reverse_proxy.module
+++ b/trusted_reverse_proxy.module
@@ -6,6 +6,7 @@
  */
 
 declare(strict_types=1);
+use Drupal\Core\Site\Settings;
 
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\system\Element\StatusReportPage;
@@ -33,7 +34,7 @@ function trusted_reverse_proxy_preprocess_status_report_page(&$variables) {
     ];
     $variables['counters'] = StatusReportPage::preRenderCounters($fakeElement)['#counters'];
   }
-  /** @var \Drupal\Core\Site\Settings $settings */
+  /** @var Settings $settings */
   $settings = \Drupal::service('settings');
   $reverseProxyConfigured = $settings->get('reverse_proxy', FALSE) && count($settings->get('reverse_proxy_addresses', []));
   if ($reverseProxyConfigured && !empty($variables['requirements']['#requirements']['trusted_host_patterns']) && $variables['requirements']['#requirements']['trusted_host_patterns']['severity'] === REQUIREMENT_ERROR) {
