diff --git a/src/EntityStatisticsStorage.php b/src/EntityStatisticsStorage.php
index acb627f..245c372 100644
--- a/src/EntityStatisticsStorage.php
+++ b/src/EntityStatisticsStorage.php
@@ -19,41 +19,41 @@ class EntityStatisticsStorage implements EntityStatisticsStorageInterface {
   /**
    * The database connection used.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;
 
   /**
    * The state service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;
 
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * Constructs the entity statistics storage.
    *
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection for the node view storage.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state service.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   The request stack.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher.
    */
   public function __construct(Connection $connection, StateInterface $state, RequestStack $request_stack, EventDispatcherInterface $event_dispatcher) {
@@ -82,7 +82,7 @@ class EntityStatisticsStorage implements EntityStatisticsStorageInterface {
      * assign it to the proper column.
      */
     $event = new RecordingViewEvent($data);
-    $this->eventDispatcher->dispatch(UsageDataEvents::RECORD_VIEW, $event);
+    $this->eventDispatcher->dispatch($event, UsageDataEvents::RECORD_VIEW);
     $data = $event->getData();
 
     // Removing extra data.
diff --git a/src/Event/CollectExtraDataEvent.php b/src/Event/CollectExtraDataEvent.php
index e26c110..6155791 100644
--- a/src/Event/CollectExtraDataEvent.php
+++ b/src/Event/CollectExtraDataEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\usage_data\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event fired when collecting extra data to be passed to the ajax call.
diff --git a/src/Event/RecordingViewEvent.php b/src/Event/RecordingViewEvent.php
index dee4b32..43050dd 100644
--- a/src/Event/RecordingViewEvent.php
+++ b/src/Event/RecordingViewEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\usage_data\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Event fired when a view record data is about to be stored.
diff --git a/usage_data.info.yml b/usage_data.info.yml
index 021c49a..777c99f 100644
--- a/usage_data.info.yml
+++ b/usage_data.info.yml
@@ -1,7 +1,7 @@
 name: 'Usage Data'
 type: module
 description: 'Logs site usage data for analysis and visualization.'
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 
 # Information added by Drupal.org packaging script on 2021-11-01
 version: '1.0.0'
diff --git a/usage_data.module b/usage_data.module
index 9f93b77..31d07d7 100644
--- a/usage_data.module
+++ b/usage_data.module
@@ -50,7 +50,7 @@ function usage_data_entity_view(array &$build, EntityInterface $entity, EntityVi
  * Implements hook_views_pre_render().
  */
 function usage_data_views_pre_render($view) {
-  /** @var \Drupal\views\ViewExecutable $view */
+  /** @var ViewExecutable $view */
   if ($view->getDisplay()->hasPath()) {
     // For views entity id we are going to concatenate the view id and
     // the display id.
@@ -104,7 +104,7 @@ function usage_data_file_download($uri) {
 }
 
 function _usage_data_default_settings($entity_id, $entity_type_id): array {
-  $path = drupal_get_path('module', 'usage_data');
+  $path = \Drupal::service('extension.list.module')->getPath('usage_data');
   $current_user = \Drupal::currentUser();
   $roles = $current_user->getRoles(TRUE);
   $data = [
