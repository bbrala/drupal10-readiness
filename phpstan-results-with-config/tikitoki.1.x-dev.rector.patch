diff --git a/src/FieldProcessor/BaseFieldProcessor.php b/src/FieldProcessor/BaseFieldProcessor.php
index 4031208..018d412 100644
--- a/src/FieldProcessor/BaseFieldProcessor.php
+++ b/src/FieldProcessor/BaseFieldProcessor.php
@@ -20,22 +20,22 @@ class BaseFieldProcessor implements FieldProcessorInterface {
   /**
    * Entity field object.
    *
-   * @var \Drupal\views\Plugin\views\field\FieldHandlerInterface
+   * @var FieldHandlerInterface
    */
   protected $field;
   /**
    * Views result row object.
    *
-   * @var \Drupal\views\ResultRow
+   * @var ResultRow
    */
   protected $viewsRow;
 
   /**
    * DateFieldProcessorBase constructor.
    *
-   * @param \Drupal\views\Plugin\views\field\FieldHandlerInterface $field
+   * @param FieldHandlerInterface $field
    *   Entity field object.
-   * @param \Drupal\views\ResultRow $row
+   * @param ResultRow $row
    *   Views result row object.
    */
   public function __construct(FieldHandlerInterface $field, ResultRow $row) {
diff --git a/src/FieldProcessor/MediaFieldProcessor.php b/src/FieldProcessor/MediaFieldProcessor.php
index 7afa889..f416cdb 100644
--- a/src/FieldProcessor/MediaFieldProcessor.php
+++ b/src/FieldProcessor/MediaFieldProcessor.php
@@ -34,7 +34,7 @@ class MediaFieldProcessor extends BaseFieldProcessor {
           if ($file instanceof File) {
             $value[] = [
               'id'      => $file->id(),
-              'src'     => file_create_url($file->getFileUri()),
+              'src'     => \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri()),
               'type'    => $this->getType(),
               'caption' => $this->getCaption($entity, $this->field->field, $index),
             ];
diff --git a/src/Plugin/views/display/TikiTokiJsonExport.php b/src/Plugin/views/display/TikiTokiJsonExport.php
index 65c0904..93c7808 100644
--- a/src/Plugin/views/display/TikiTokiJsonExport.php
+++ b/src/Plugin/views/display/TikiTokiJsonExport.php
@@ -75,7 +75,7 @@ class TikiTokiJsonExport extends PathPluginBase implements ResponseDisplayPlugin
   /**
    * The renderer.
    *
-   * @var \Drupal\Core\Render\RendererInterface
+   * @var RendererInterface
    */
   protected $renderer;
 
@@ -88,11 +88,11 @@ class TikiTokiJsonExport extends PathPluginBase implements ResponseDisplayPlugin
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Routing\RouteProviderInterface $route_provider
+   * @param RouteProviderInterface $route_provider
    *   The route provider.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The state key value store.
-   * @param \Drupal\Core\Render\RendererInterface $renderer
+   * @param RendererInterface $renderer
    *   The renderer.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteProviderInterface $route_provider, StateInterface $state, RendererInterface $renderer) {
@@ -283,9 +283,9 @@ class TikiTokiJsonExport extends PathPluginBase implements ResponseDisplayPlugin
    *
    * @param string $view_path
    *   The path of the view.
-   * @param \Symfony\Component\Routing\Route $view_route
+   * @param Route $view_route
    *   The route of the view.
-   * @param \Symfony\Component\Routing\Route $route
+   * @param Route $route
    *   The route itself.
    *
    * @return bool
@@ -309,7 +309,7 @@ class TikiTokiJsonExport extends PathPluginBase implements ResponseDisplayPlugin
     $response = new CacheableResponse('', 200);
     $build['#response'] = $response;
 
-    /** @var \Drupal\Core\Render\RendererInterface $renderer */
+    /** @var RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
 
     $output = (string) $renderer->renderRoot($build);
diff --git a/src/Plugin/views/row/TikiTokiFields.php b/src/Plugin/views/row/TikiTokiFields.php
index 7cb801b..21ee53c 100644
--- a/src/Plugin/views/row/TikiTokiFields.php
+++ b/src/Plugin/views/row/TikiTokiFields.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\tikitoki\Plugin\views\row;
 
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\tikitoki\FieldProcessor\FieldProcessorInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -30,7 +32,7 @@ class TikiTokiFields extends RowPluginBase implements ContainerFactoryPluginInte
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -79,7 +81,7 @@ class TikiTokiFields extends RowPluginBase implements ContainerFactoryPluginInte
    *
    * @param array $view_fields_labels
    *   All fields list.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface[] $definitions
+   * @param FieldStorageDefinitionInterface[] $definitions
    *   Field storage definitions.
    *
    * @return array
@@ -110,7 +112,7 @@ class TikiTokiFields extends RowPluginBase implements ContainerFactoryPluginInte
    *
    * @param array $view_fields_labels
    *   All fields list.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface[] $definitions
+   * @param FieldStorageDefinitionInterface[] $definitions
    *   Field storage definitions.
    *
    * @return array
@@ -136,7 +138,7 @@ class TikiTokiFields extends RowPluginBase implements ContainerFactoryPluginInte
    *
    * @param array $view_fields_labels
    *   All fields list.
-   * @param \Drupal\Core\Field\FieldStorageDefinitionInterface[] $definitions
+   * @param FieldStorageDefinitionInterface[] $definitions
    *   Field storage definitions.
    *
    * @return array
@@ -303,7 +305,7 @@ class TikiTokiFields extends RowPluginBase implements ContainerFactoryPluginInte
         $destination_id = $class::getDestinationId();
         if ($destination_id && $field instanceof FieldHandlerInterface) {
           $item[$destination_id] = $source_key === 'media' ? [] : '';
-          /** @var \Drupal\tikitoki\FieldProcessor\FieldProcessorInterface $processor */
+          /** @var FieldProcessorInterface $processor */
           $processor = new $class($field, $row);
           $item[$destination_id] = $processor->getValue();
         }
diff --git a/src/Plugin/views/style/TikiTokiJson.php b/src/Plugin/views/style/TikiTokiJson.php
index 5a122f5..e4f85d4 100644
--- a/src/Plugin/views/style/TikiTokiJson.php
+++ b/src/Plugin/views/style/TikiTokiJson.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\tikitoki\Plugin\views\style;
 
+use Drupal\Core\TypedData\Exception\MissingDataException;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Field\EntityReferenceFieldItemList;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -36,13 +40,13 @@ class TikiTokiJson extends StylePluginBase implements CacheableDependencyInterfa
   /**
    * The serializer which serializes the views result.
    *
-   * @var \Symfony\Component\Serializer\SerializerInterface
+   * @var SerializerInterface
    */
   protected $serializer;
   /**
    * Entity field manager.
    *
-   * @var \Drupal\Core\Entity\EntityFieldManagerInterface
+   * @var EntityFieldManagerInterface
    */
   protected $entityFieldManager;
 
@@ -96,17 +100,17 @@ class TikiTokiJson extends StylePluginBase implements CacheableDependencyInterfa
    * @param array &$rows
    *   Result rows array.
    *
-   * @throws \Drupal\Core\TypedData\Exception\MissingDataException
+   * @throws MissingDataException
    */
   protected function addCategories(&$rows) {
     $prevent_duplicates_array = [];
     $color_field_name         = $this->view->rowPlugin->options['color_field'];
     $color_field_column       = $this->getColorFieldColumn($color_field_name);
     foreach ($this->view->result as $row_index => $row) {
-      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
+      /** @var ContentEntityInterface $entity */
       $entity = $row->_entity;
       $field_name = $this->view->rowPlugin->options['category_field'];
-      /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $field */
+      /** @var EntityReferenceFieldItemList $field */
       if ($entity->hasField($field_name)) {
         $field = $entity->get($field_name);
         if (!$field->isEmpty()) {
@@ -115,7 +119,7 @@ class TikiTokiJson extends StylePluginBase implements CacheableDependencyInterfa
             if (!in_array($term, $prevent_duplicates_array)) {
               $prevent_duplicates_array[] = $term;
               $term = Term::load($term);
-              /** @var \Drupal\Core\Field\FieldItemListInterface $color_field */
+              /** @var FieldItemListInterface $color_field */
               $color_field = $term->hasField($color_field_name)
                 ? $term->get($color_field_name)
                 : NULL;
diff --git a/tikitoki.info.yml b/tikitoki.info.yml
index dbe6885..85df8ca 100644
--- a/tikitoki.info.yml
+++ b/tikitoki.info.yml
@@ -2,8 +2,7 @@ name: Tiki Toki
 type: module
 description: 'Add views display that outputs data in specific JSON format for Tiki Toki Timelines software'
 version: VERSION
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^9.3 || ^10
 dependencies:
   - drupal:serialization
   - drupal:views
