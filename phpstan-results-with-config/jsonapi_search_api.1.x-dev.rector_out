modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/jsonapi_search_api_facets.module
modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/src/EventSubscriber/AddSearchMetaEventSubscriber.php
modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/src/EventSubscriber/SearchApiQueryPreExecute.php
modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/src/Plugin/facets/facet_source/JsonApiFacets.php
modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/src/Plugin/facets/facet_source/JsonApiFacetsDeriver.php
modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/src/Plugin/facets/url_processor/JsonApiQueryString.php
modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/src/Plugin/facets/widget/JsonApiResponseWidget.php
modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/tests/src/Functional/IndexFacetsTest.php
modules/contrib/jsonapi_search_api/src/Event/AddSearchMetaEvent.php
modules/contrib/jsonapi_search_api/src/Event/AddSearchMetaEvents.php
modules/contrib/jsonapi_search_api/src/Event/Events.php
modules/contrib/jsonapi_search_api/src/Query/EntityCondition.php
modules/contrib/jsonapi_search_api/src/Query/Filter.php
modules/contrib/jsonapi_search_api/src/Resource/IndexResource.php
modules/contrib/jsonapi_search_api/src/Routing/Routes.php
modules/contrib/jsonapi_search_api/tests/src/Functional/IndexResourceTest.php
modules/contrib/jsonapi_search_api/tests/src/Unit/RoutesTest.php

9 files with changes
====================

1) modules/contrib/jsonapi_search_api/tests/src/Unit/RoutesTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\jsonapi_search_api\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Component\Uuid\Php;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\jsonapi\ResourceType\ResourceType;
@@ @@
  */
 final class RoutesTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * @covers ::routes
    * @dataProvider routeDataProvider
    *
-   * @param \Drupal\search_api\IndexInterface $mocked_index
+   * @param IndexInterface $mocked_index
    *   The mocked index.
    * @param bool $expect_disabled_index
    *   Boolean to check if the index is expected to be disabled.
    * @param string[] $expected_entity_types
    *   The expected entity types from the index darasources.
-   * @param \Drupal\jsonapi\ResourceType\ResourceType[] $mocked_resource_types
+   * @param ResourceType[] $mocked_resource_types
    *   The mocked resource types.
    */
   public function testRoutes(IndexInterface $mocked_index, bool $expect_disabled_index, array $expected_entity_types, array $mocked_resource_types) {
@@ @@
    * @param bool $status
    *   The index status.
    *
-   * @return \Prophecy\Prophecy\ObjectProphecy
+   * @return ObjectProphecy
    *   The stub mocked index.
    */
   private function getStubMockedIndex(string $index_id = 'test_index', bool $status = TRUE): ProphecyInterface {
@@ @@
    * @param array $bundles
    *   The bundles.
    *
-   * @return \Drupal\jsonapi\ResourceType\ResourceType[]
+   * @return ResourceType[]
    *   The mocked resource types.
    */
   private function getMockedResourceTypes(string $entity_type_id, array $bundles): array {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/jsonapi_search_api/tests/src/Functional/IndexResourceTest.php:40

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Set up example structure and content and populate the test index with
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/jsonapi_search_api/src/Routing/Routes.php:17

    ---------- begin diff ----------
@@ @@
   /**
    * The entity type manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The JSON:API resource type repository.
    *
-   * @var \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface
+   * @var ResourceTypeRepositoryInterface
    */
   protected $resourceTypeRepository;

@@ @@
   /**
    * Instantiates a Routes object.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\jsonapi\ResourceType\ResourceTypeRepositoryInterface $resource_type_repository
+   * @param ResourceTypeRepositoryInterface $resource_type_repository
    *   The JSON:API resource type repository.
    * @param string[] $authentication_providers
    *   The authentication providers, keyed by ID.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


4) modules/contrib/jsonapi_search_api/src/Resource/IndexResource.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_search_api\Resource;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Http\Exception\CacheableBadRequestHttpException;
@@ @@
   /**
    * The parse mode manager.
    *
-   * @var \Drupal\search_api\ParseMode\ParseModePluginManager
+   * @var ParseModePluginManager
    */
   private $parseModeManager;

@@ @@
   /**
    * Constructs a new IndexResource object.
    *
-   * @param \Drupal\search_api\ParseMode\ParseModePluginManager $parse_mode_manager
+   * @param ParseModePluginManager $parse_mode_manager
    *   The parse mode manager.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   The event dispatcher service.
    */
   public function __construct(ParseModePluginManager $parse_mode_manager, EventDispatcherInterface $event_dispatcher) {
@@ @@
   /**
    * Process the resource request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\search_api\IndexInterface $index
+   * @param IndexInterface $index
    *   The index.
    *
-   * @return \Drupal\jsonapi\ResourceResponse
+   * @return ResourceResponse
    *   The response.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
-   * @throws \Drupal\search_api\SearchApiException
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
+   * @throws SearchApiException
+   * @throws PluginException
    */
   public function process(Request $request, IndexInterface $index): ResourceResponse {
     $cacheability = new CacheableMetadata();
@@ @@
   /**
    * Apply filters to the index query.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The query.
-   * @param \Drupal\Core\Cache\CacheableMetadata $cacheability
+   * @param CacheableMetadata $cacheability
    *   The cache metadata.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function applyFiltersToQuery(Request $request, QueryInterface $query, CacheableMetadata $cacheability): void {
     $parse_mode = $this->parseModeManager->createInstance('terms');
@@ @@
   /**
    * Apply sorting to the index query.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The query.
-   * @param \Drupal\Core\Cache\CacheableMetadata $cacheability
+   * @param CacheableMetadata $cacheability
    *   The cache metadata.
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    */
   protected function applySortingToQuery(Request $request, QueryInterface $query, CacheableMetadata $cacheability): void {
     $sort_params = $request->query->get('sort');
@@ @@
   /**
    * Get pagination for the request.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
    *
-   * @return \Drupal\jsonapi\Query\OffsetPage
+   * @return OffsetPage
    *   The pagination object.
    */
   private function getPagination(Request $request): OffsetPage {
@@ @@
   /**
    * Get pager links.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\jsonapi\Query\OffsetPage $pagination
+   * @param OffsetPage $pagination
    *   The pagination object.
    * @param int $total_count
    *   The total count.
@@ @@
    * @param int $result_count
    *   The result count.
    *
-   * @return \Drupal\jsonapi\JsonApiResource\LinkCollection
+   * @return LinkCollection
    *   The link collection.
    */
   protected function getPagerLinks(Request $request, OffsetPage $pagination, int $total_count, int $result_count): LinkCollection {
@@ @@
   /**
    * Get the full URL for a given request object.
    *
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request object.
    * @param array|null $query
    *   The query parameters to use. Leave it empty to get the query from the
    *   request object.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The full URL.
    */
   public static function getRequestLink(Request $request, $query = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/jsonapi_search_api/src/Query/Filter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_search_api\Query;

+use Drupal\search_api\Query\ConditionGroupInterface;
 use Drupal\search_api\Query\QueryInterface;
 use Drupal\jsonapi\Query\EntityConditionGroup;

@@ @@
   /**
    * Constructs a new Filter object.
    *
-   * @param \Drupal\jsonapi\Query\EntityConditionGroup $root
+   * @param EntityConditionGroup $root
    *   An entity condition group which can be applied to an entity query.
    */
   public function __construct(EntityConditionGroup $root) {
@@ @@
   /**
    * Applies the root condition to the given query.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The query for which the condition should be constructed.
    *
-   * @return \Drupal\search_api\Query\ConditionGroupInterface
+   * @return ConditionGroupInterface
    *   The compiled entity query condition.
    */
   public function queryCondition(QueryInterface $query) {
@@ @@
   /**
    * Applies the root condition to the given query.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   The query to which the filter should be applied.
-   * @param \Drupal\jsonapi\Query\EntityConditionGroup $condition_group
+   * @param EntityConditionGroup $condition_group
    *   The condition group to build.
    *
-   * @return \Drupal\search_api\Query\ConditionGroupInterface
+   * @return ConditionGroupInterface
    *   The query with the filter applied.
    */
   protected function buildGroup(QueryInterface $query, EntityConditionGroup $condition_group) {
@@ @@
    * @param array $items
    *   The normalized entity conditions and groups.
    *
-   * @return \Drupal\jsonapi\Query\EntityConditionGroup
+   * @return EntityConditionGroup
    *   A root group containing all the denormalized conditions and groups.
    */
   protected static function buildEntityConditionGroup(array $items) {
@@ @@
    * @param array $items
    *   The normalized entity conditions and groups.
    *
-   * @return \Drupal\jsonapi\Query\EntityConditionGroup
+   * @return EntityConditionGroup
    *   The entity condition group
    */
   protected static function buildTree(array $root, array $items) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


6) modules/contrib/jsonapi_search_api/src/Event/AddSearchMetaEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_search_api\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\search_api\Query\QueryInterface;
 use Drupal\search_api\Query\ResultSetInterface;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Allows for other sources to modify the meta portion of the search.
@@ @@
   /**
    * The query that was executed.
    *
-   * @var \Drupal\search_api\Query\QueryInterface
+   * @var QueryInterface
    */
   protected $query;

@@ @@
   /**
    * Results returned from the search.
    *
-   * @var \Drupal\search_api\Query\ResultSetInterface
+   * @var ResultSetInterface
    */
   protected $results;

@@ @@
   /**
    * AddSearchMetaEvent constructor.
    *
-   * @param \Drupal\search_api\Query\QueryInterface $query
+   * @param QueryInterface $query
    *   Query that was executed.
-   * @param \Drupal\search_api\Query\ResultSetInterface $results
+   * @param ResultSetInterface $results
    *   Results returned from the search.
    * @param array $meta
    *   An array representing the meta portion of the JSON:API response.
@@ @@
   /**
    * Getter for the query.
    *
-   * @return \Drupal\search_api\Query\QueryInterface
+   * @return QueryInterface
    *   The query.
    */
   public function getQuery() {
@@ @@
   /**
    * Getter for the results.
    *
-   * @return \Drupal\search_api\Query\ResultSetInterface
+   * @return ResultSetInterface
    *   The results.
    */
   public function getResults() {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/tests/src/Functional/IndexFacetsTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\jsonapi_search_api_facets\Functional;

+use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Url;
 use Drupal\facets\Entity\Facet;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();

     // Set up example structure and content and populate the test index with
@@ @@
    * @param bool $show_numbers
    *   Whether to show numbers.
    *
-   * @throws \Drupal\Core\Entity\EntityStorageException
+   * @throws EntityStorageException
    */
   private function createFacet(string $field_name, string $name, string $url_alias, string $query_operator, bool $show_numbers): void {
     assert($query_operator === 'and' || $query_operator === 'or', '$query_operator must be `or` or `and`');
@@ @@
   /**
    * Do a request.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/src/EventSubscriber/SearchApiQueryPreExecute.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_search_api_facets\EventSubscriber;

+use Drupal\search_api\Query\ConditionInterface;
 use Drupal\facets\FacetManager\DefaultFacetManager;
 use Drupal\search_api\Event\QueryPreExecuteEvent;
 use Drupal\search_api\Event\SearchApiEvents;
@@ @@
   /**
    * Alter the Search API query to include Facets if enabled.
    *
-   * @param \Drupal\search_api\Event\QueryPreExecuteEvent $event
+   * @param QueryPreExecuteEvent $event
    *   The event being emitted by Search API.
    */
   public function includeFacetsInQuery(QueryPreExecuteEvent $event) {
@@ @@
    * which includes the facet URL alias. Remove them to prevent errors for
    * non-existant fields.
    *
-   * @param \Drupal\search_api\Query\ConditionGroupInterface $condition_group
+   * @param ConditionGroupInterface $condition_group
    *   The condition group.
    * @param array $aliases
    *   The facet aliases.
@@ @@
   /**
    * Handles tagging conditionGroups with appropriate facet tags as needed.
    *
-   * @param \Drupal\search_api\Query\ConditionInterface|\Drupal\search_api\Query\ConditionGroupInterface $condition_or_group
+   * @param ConditionInterface|ConditionGroupInterface $condition_or_group
    *   The ConditionGroup or Condition being evaluated.
    * @param array $facet_tags
    *   The facet tags that may need to be applied to the condition.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


9) modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/src/EventSubscriber/AddSearchMetaEventSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\jsonapi_search_api_facets\EventSubscriber;

+use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\EntityTypeManager;
 use Drupal\facets\FacetManager\DefaultFacetManager;
 use Drupal\jsonapi_search_api\Event\AddSearchMetaEvent;
@@ @@
   /**
    * The entity storage used for facets.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $facetStorage;

@@ @@
    *
    * @param Drupal\facets\FacetManager\DefaultFacetManager $facet_manager
    *   The facet manager.
-   * @param Drupal\Core\Entity\EntityTypeManager $entity_type_manager
+   * @param EntityTypeManager $entity_type_manager
    *   The entity type manager.
    */
   public function __construct(DefaultFacetManager $facet_manager, EntityTypeManager $entity_type_manager) {
@@ @@
   /**
    * Adds facet information into the meta of the JSON:API Search API response.
    *
-   * @param \Drupal\jsonapi_search_api\Event\AddSearchMetaEvent $event
+   * @param AddSearchMetaEvent $event
    *   The event being subscribed to.
    */
   public function appendFacets(AddSearchMetaEvent $event) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [ERROR] Could not process                                                      
         "modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/src
         /Plugin/facets/widget/JsonApiResponseWidget.php" file, due to:         
         "Analyze error: "Class Drupal\facets\Widget\WidgetPluginBase not found.".
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/src
         /Plugin/facets/url_processor/JsonApiQueryString.php" file, due to:     
         "Analyze error: "Class                                                 
         Drupal\facets\Plugin\facets\url_processor\QueryString not found.".     
         Include your files in "$rectorConfig->autoloadPaths([...]);" or        
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/src
         /Plugin/facets/facet_source/JsonApiFacetsDeriver.php" file, due to:    
         "Analyze error: "Class Drupal\facets\FacetSource\FacetSourceDeriverBase
         not found.". Include your files in                                     
         "$rectorConfig->autoloadPaths([...]);" or                              
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process                                                      
         "modules/contrib/jsonapi_search_api/modules/jsonapi_search_api_facets/src
         /Plugin/facets/facet_source/JsonApiFacets.php" file, due to:           
         "Analyze error: "Class                                                 
         Drupal\facets\Plugin\facets\facet_source\SearchApiBaseFacetSource not  
         found.". Include your files in "$rectorConfig->autoloadPaths([...]);" or
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 1 nodes were removed                                                 

