modules/contrib/domain_path_redirect/domain_path_redirect.install
modules/contrib/domain_path_redirect/domain_path_redirect.module
modules/contrib/domain_path_redirect/src/DomainPathRedirectRepository.php
modules/contrib/domain_path_redirect/src/DomainPathRedirectStorageSchema.php
modules/contrib/domain_path_redirect/src/DomainPathRedirectViewsData.php
modules/contrib/domain_path_redirect/src/Entity/DomainPathRedirect.php
modules/contrib/domain_path_redirect/src/EventSubscriber/DomainPathRedirectRequestSubscriber.php
modules/contrib/domain_path_redirect/src/Form/DomainPathRedirectDeleteForm.php
modules/contrib/domain_path_redirect/src/Form/DomainPathRedirectForm.php
modules/contrib/domain_path_redirect/src/Plugin/views/filter/DomainAutocomplete.php
modules/contrib/domain_path_redirect/tests/src/Kernel/DomainPathRedirectAPITest.php
modules/contrib/domain_path_redirect/tests/src/Unit/DomainPathRedirectRequestSubscriberTest.php

6 files with changes
====================

1) modules/contrib/domain_path_redirect/tests/src/Unit/DomainPathRedirectRequestSubscriberTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\domain_path_redirect\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
+use Symfony\Component\HttpKernel\Event\TerminateEvent;
+use Drupal\language\ConfigurableLanguageManagerInterface;
 use Drupal\Core\Language\Language;
 use Drupal\domain\DomainInterface;
 use Drupal\domain_path_redirect\Entity\DomainPathRedirect;
@@ @@
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
-use Symfony\Component\HttpKernel\Event\PostResponseEvent;

 /**
  * Tests the domain path redirect logic.
@@ @@
     // by the redirect entity and values from the accessed url.
     $final_query = $redirect_query + $request_query;

-    $url = $this->getMockBuilder('Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock('Drupal\Core\Url');

     $url->expects($this->once())
       ->method('setAbsolute')
@@ @@
    * @dataProvider getDomainPathRedirectData
    */
   public function testDomainPathRedirectLogicWithoutQueryRetaining($request_uri, $request_query, $redirect_uri, $redirect_query, $hostname, $domain_id) {
-    $url = $this->getMockBuilder('Drupal\Core\Url')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $url = $this->createMock('Drupal\Core\Url');

     $url->expects($this->once())
       ->method('setAbsolute')
@@ @@
    * @param string $hostname
    *   Url to be returned from getHostname.
    *
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return MockObject
    *   The mocked domain object.
    */
   protected function getDomainStub($hostname) {
-    $domain = $this->getMockBuilder('Drupal\domain\Entity\Domain')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $domain = $this->createMock('Drupal\domain\Entity\Domain');

     $domain->expects($this->any())
       ->method('getHostname')
@@ @@
    * @param int $status_code
    *   The redirect status code.
    *
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return MockObject
    *   The mocked redirect object.
    */
   protected function getRedirectStub($url, $domain_id, $status_code = 301) {
-    $redirect = $this->getMockBuilder('Drupal\domain_path_redirect\Entity\DomainPathRedirect')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $redirect = $this->createMock('Drupal\domain_path_redirect\Entity\DomainPathRedirect');

     $redirect->expects($this->once())
       ->method('getRedirectUrl')
@@ @@
   /**
    * Instantiates the subscriber and runs onKernelRequestCheckRedirect()
    *
-   * @param \Drupal\domain_path_redirect\Entity\DomainPathRedirect $redirect
+   * @param DomainPathRedirect $redirect
    *   The redirect entity.
-   * @param \Drupal\domain\DomainInterface $domain
+   * @param DomainInterface $domain
    *   A domain record object.
    * @param string $request_uri
    *   The URI of the request.
@@ @@
    * @param bool $retain_query
    *   Flag if to retain the query through the redirect.
    *
-   * @return \Symfony\Component\HttpKernel\Event\GetResponseEvent
+   * @return RequestEvent
    *   The response event.
    */
   protected function callOnKernelRequestCheckDomainPathRedirect(DomainPathRedirect $redirect, DomainInterface $domain, $request_uri, array $request_query, $retain_query) {
@@ @@
     $event = $this->getGetResponseEventStub($request_uri, http_build_query($request_query));
     $request = $event->getRequest();

-    $checker = $this->getMockBuilder('Drupal\redirect\RedirectChecker')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $checker = $this->createMock('Drupal\redirect\RedirectChecker');
     $checker->expects($this->any())
       ->method('canRedirect')
       ->will($this->returnValue(TRUE));

-    $context = $this->getMockBuilder('Symfony\Component\Routing\RequestContext')->getMock();
+    $context = $this->createMock('Symfony\Component\Routing\RequestContext');

-    $inbound_path_processor = $this->getMockBuilder('Drupal\Core\PathProcessor\InboundPathProcessorInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $inbound_path_processor = $this->createMock('Drupal\Core\PathProcessor\InboundPathProcessorInterface');
     $inbound_path_processor->expects($this->any())
       ->method('processInbound')
       ->with($request->getPathInfo(), $request)
       ->will($this->returnValue($request->getPathInfo()));

-    $alias_manager = $this->getMockBuilder('Drupal\path_alias\AliasManagerInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
-    $module_handler = $this->getMockBuilder('Drupal\Core\Extension\ModuleHandlerInterface')
-      ->getMock();
-    $entity_manager = $this->getMockBuilder('Drupal\Core\Entity\EntityTypeManagerInterface')
-      ->getMock();
-    $logger = $this->getMockBuilder('Drupal\Core\Logger\LoggerChannelFactoryInterface')
-      ->getMock();
-    $url_generator = $this->getMockBuilder('Drupal\Core\Routing\UrlGeneratorInterface')
-      ->getMock();
-    $messenger = $this->getMockBuilder('Drupal\Core\Messenger\MessengerInterface')
-      ->getMock();
-    $route_match = $this->getMockBuilder('Drupal\Core\Routing\RouteMatchInterface')
-      ->getMock();
+    $alias_manager = $this->createMock('Drupal\path_alias\AliasManagerInterface');
+    $module_handler = $this->createMock('Drupal\Core\Extension\ModuleHandlerInterface');
+    $entity_manager = $this->createMock('Drupal\Core\Entity\EntityTypeManagerInterface');
+    $logger = $this->createMock('Drupal\Core\Logger\LoggerChannelFactoryInterface');
+    $url_generator = $this->createMock('Drupal\Core\Routing\UrlGeneratorInterface');
+    $messenger = $this->createMock('Drupal\Core\Messenger\MessengerInterface');
+    $route_match = $this->createMock('Drupal\Core\Routing\RouteMatchInterface');

     $subscriber = new DomainPathRedirectRequestSubscriber(
       $this->getDomainPathRedirectRepositoryStub('findMatchingRedirect', $redirect),
@@ @@
    *
    * @param string $method
    *   Method to mock - either load() or findMatchingRedirect().
-   * @param \Drupal\domain\DomainInterface $domain
+   * @param DomainInterface $domain
    *   The domain object to be returned.
    *
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return MockObject
    *   The domain negotiator.
    */
   protected function getDomainNegotiatorStub($method, DomainInterface $domain) {
-    $domain_negotiator = $this->getMockBuilder('Drupal\domain\DomainNegotiatorInterface')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $domain_negotiator = $this->createMock('Drupal\domain\DomainNegotiatorInterface');

     $domain_negotiator->expects($this->any())
       ->method($method)
@@ @@
    *
    * @param string $method
    *   Method to mock - either load() or findMatchingRedirect().
-   * @param \Drupal\domain_path_redirect\Entity\DomainPathRedirect $redirect
+   * @param DomainPathRedirect $redirect
    *   The redirect entity to be returned.
    *
-   * @return \PHPUnit_Framework_MockObject_MockObject
+   * @return MockObject
    *   The redirect repository.
    */
   protected function getDomainPathRedirectRepositoryStub($method, DomainPathRedirect $redirect) {
-    $repository = $this->getMockBuilder('Drupal\domain_path_redirect\DomainPathRedirectRepository')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $repository = $this->createMock('Drupal\domain_path_redirect\DomainPathRedirectRepository');

     $repository->expects($this->any())
       ->method($method)
@@ @@
    * @param array $headers
    *   Headers to be set into the response.
    *
-   * @return \Symfony\Component\HttpKernel\Event\PostResponseEvent
+   * @return TerminateEvent
    *   The post response event object.
    */
   protected function getPostResponseEvent(array $headers = []) {
-    $http_kernel = $this->getMockBuilder('Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
-    $request = $this->getMockBuilder('Symfony\Component\HttpFoundation\Request')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $http_kernel = $this->createMock('Symfony\Component\HttpKernel\HttpKernelInterface');
+    $request = $this->createMock('Symfony\Component\HttpFoundation\Request');

     $response = new Response('', 301, $headers);

-    return new PostResponseEvent($http_kernel, $request, $response);
+    return new TerminateEvent($http_kernel, $request, $response);
   }

   /**
@@ @@
    * @param string $query_string
    *   The query string of the request.
    *
-   * @return \Symfony\Component\HttpKernel\Event\GetResponseEvent
+   * @return RequestEvent
    *   The response event.
    */
   protected function getGetResponseEventStub($path_info, $query_string) {
     $request = Request::create($path_info . '?' . $query_string, 'GET', [], [], [], ['SCRIPT_NAME' => 'index.php']);

-    $http_kernel = $this->getMockBuilder('Symfony\Component\HttpKernel\HttpKernelInterface')
-      ->getMock();
-    return new GetResponseEvent($http_kernel, $request, NULL);
+    $http_kernel = $this->createMock('Symfony\Component\HttpKernel\HttpKernelInterface');
+    return new RequestEvent($http_kernel, $request, NULL);
   }

   /**
    * Gets the language manager mock object.
    *
-   * @return \Drupal\language\ConfigurableLanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @return ConfigurableLanguageManagerInterface|MockObject
    *   The mocked language manager object.
    */
   protected function getLanguageManagerStub() {
-    $language_manager = $this->getMockBuilder('Drupal\language\ConfigurableLanguageManagerInterface')
-      ->getMock();
+    $language_manager = $this->createMock('Drupal\language\ConfigurableLanguageManagerInterface');
     $language_manager->expects($this->any())
       ->method('getCurrentLanguage')
       ->will($this->returnValue(new Language(['id' => 'en'])));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/domain_path_redirect/tests/src/Kernel/DomainPathRedirectAPITest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\domain_path_redirect\Kernel;

+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\domain_path_redirect\DomainPathRedirectRepository;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\domain_path_redirect\Entity\DomainPathRedirect;
 use Drupal\Core\Language\Language;
@@ @@
   /**
    * The redirect entity storage.
    *
-   * @var \Drupal\Core\Entity\EntityStorageInterface
+   * @var EntityStorageInterface
    */
   protected $controller;

@@ @@
     $domain1 = end($this->domains);

     // Create a redirect and test if hash has been generated correctly.
-    /** @var \Drupal\domain_path_redirect\Entity\DomainPathRedirect $redirect */
+    /** @var DomainPathRedirect $redirect */
     $redirect = $this->controller->create([
       'domain' => $domain->id(),
     ]);
@@ @@
       $redirect->save();
     }

-    /** @var \Drupal\domain_path_redirect\DomainPathRedirectRepository $repository */
+    /** @var DomainPathRedirectRepository $repository */
     $repository = \Drupal::service('domain_path_redirect.repository');
     $redirect = $repository->findMatchingRedirect('another-url', $domain1->id(), ['key1' => 'val1'], 'de');
     if (!empty($redirect)) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/domain_path_redirect/src/Form/DomainPathRedirectForm.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_path_redirect\Form;

+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Config\Config;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Language\Language;
 use Drupal\Core\Language\LanguageInterface;
@@ @@
   /**
    * The configurable language manager.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * Contains the redirect.settings configuration object.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
    * {@inheritdoc}
    */
   protected function prepareEntity() {
-    /** @var \Drupal\domain_path_redirect\Entity\DomainPathRedirect $redirect */
+    /** @var DomainPathRedirect $redirect */
     $redirect = $this->entity;

     if ($redirect->isNew()) {
@@ @@
    */
   public function form(array $form, FormStateInterface $form_state) {
     $form = parent::form($form, $form_state);
-    /** @var \Drupal\domain_path_redirect\Entity\DomainPathRedirect $domain_path_redirect */
+    /** @var DomainPathRedirect $domain_path_redirect */
     $domain_path_redirect = $this->entity;

     // Add ajax callback to domain autocomplete field.
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/domain_path_redirect/src/EventSubscriber/DomainPathRedirectRequestSubscriber.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_path_redirect\EventSubscriber;

+use Drupal\Core\Config\Config;
+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
 use Drupal\domain_path_redirect\DomainPathRedirectRepository;
 use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpKernel\KernelEvents;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\Routing\RequestContext;
 use Drupal\domain\DomainNegotiatorInterface;
@@ @@
   /**
    * The redirect entity repository.
    *
-   * @var \Drupal\domain_path_redirect\DomainPathRedirectRepository
+   * @var DomainPathRedirectRepository
    */
   protected $domainPathRedirectRepository;

@@ @@
   /**
    * The language manager service.
    *
-   * @var \Drupal\Core\Language\LanguageManagerInterface
+   * @var LanguageManagerInterface
    */
   protected $languageManager;

@@ @@
   /**
    * The config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    */
   protected $config;

@@ @@
   /**
    * The alias manager service.
    *
-   * @var \Drupal\path_alias\AliasManagerInterface
+   * @var AliasManagerInterface
    */
   protected $aliasManager;

@@ @@
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;

@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The redirect checker service.
    *
-   * @var \Drupal\redirect\RedirectChecker
+   * @var RedirectChecker
    */
   protected $checker;

@@ @@
   /**
    * Request context.
    *
-   * @var \Symfony\Component\Routing\RequestContext
+   * @var RequestContext
    */
   protected $context;

@@ @@
   /**
    * Path processor manager.
    *
-   * @var \Drupal\Core\PathProcessor\InboundPathProcessorInterface
+   * @var InboundPathProcessorInterface
    */
   protected $pathProcessor;

@@ @@
   /**
    * Domain negotiator.
    *
-   * @var \Drupal\domain\DomainNegotiatorInterface
+   * @var DomainNegotiatorInterface
    */
   protected $domainNegotiator;

@@ @@
   /**
    * The logger channel factory.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   * @var LoggerChannelFactoryInterface
    */
   protected $logger;

@@ @@
   /**
    * The URL generator service.
    *
-   * @var \Drupal\Core\Routing\UrlGeneratorInterface
+   * @var UrlGeneratorInterface
    */
   protected $urlGenerator;

@@ @@
   /**
    * Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;

@@ @@
   /**
    * The route match.
    *
-   * @var \Drupal\Core\Routing\RouteMatchInterface
+   * @var RouteMatchInterface
    */
   protected $routeMatch;

@@ @@
   /**
    * DomainPathRedirectRequestSubscriber constructor.
    *
-   * @param \Drupal\domain_path_redirect\DomainPathRedirectRepository $domain_path_redirect_repository
+   * @param DomainPathRedirectRepository $domain_path_redirect_repository
    *   The redirect entity repository.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   * @param LanguageManagerInterface $language_manager
    *   The language manager.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config
+   * @param ConfigFactoryInterface $config
    *   The config factory service.
-   * @param \Drupal\path_alias\AliasManagerInterface $alias_manager
+   * @param AliasManagerInterface $alias_manager
    *   The path alias manager.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\redirect\RedirectChecker $checker
+   * @param RedirectChecker $checker
    *   The redirect checker service.
-   * @param \Symfony\Component\Routing\RequestContext $context
+   * @param RequestContext $context
    *   The router request context.
-   * @param \Drupal\Core\PathProcessor\InboundPathProcessorInterface $path_processor
+   * @param InboundPathProcessorInterface $path_processor
    *   The inbound path processor.
-   * @param \Drupal\domain\DomainNegotiatorInterface $domain_negotiator
+   * @param DomainNegotiatorInterface $domain_negotiator
    *   The domain negotiator.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger
+   * @param LoggerChannelFactoryInterface $logger
    *   The logger service.
-   * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
+   * @param UrlGeneratorInterface $url_generator
    *   The URL generator service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   Messenger service.
-   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param RouteMatchInterface $route_match
    *   The route match.
    */
   public function __construct(DomainPathRedirectRepository $domain_path_redirect_repository, LanguageManagerInterface $language_manager, ConfigFactoryInterface $config, AliasManagerInterface $alias_manager, ModuleHandlerInterface $module_handler, EntityTypeManagerInterface $entity_type_manager, RedirectChecker $checker, RequestContext $context, InboundPathProcessorInterface $path_processor, DomainNegotiatorInterface $domain_negotiator, LoggerChannelFactoryInterface $logger, UrlGeneratorInterface $url_generator, MessengerInterface $messenger, RouteMatchInterface $route_match) {
@@ @@
   /**
    * Handles the domain redirect if any found.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event to process.
    */
-  public function onKernelRequestCheckDomainPathRedirect(GetResponseEvent $event) {
+  public function onKernelRequestCheckDomainPathRedirect(RequestEvent $event) {
     // Get a clone of the request. During inbound processing the request
     // can be altered. Allowing this here can lead to unexpected behavior.
     // For example the path_processor.files inbound processor provided by
@@ @@
   /**
    * Redirect to domain redirects listing page if there is no active domain.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event to process.
    */
-  public function onKernelRequestCheckActiveDomain(GetResponseEvent $event) {
+  public function onKernelRequestCheckActiveDomain(RequestEvent $event) {
     $request = $event->getRequest();
     $this->context->fromRequest($request);
     $route_name = $this->routeMatch->getRouteName();
@@ @@
   /**
    * Prior to set the response it check if we can redirect.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param RequestEvent $event
    *   The event to process.
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The Url where we want to redirect.
    */
-  protected function setResponse(GetResponseEvent $event, Url $url) {
+  protected function setResponse(RequestEvent $event, Url $url) {
     $request = $event->getRequest();
     $this->context->fromRequest($request);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/domain_path_redirect/src/Entity/DomainPathRedirect.php:131

    ---------- begin diff ----------
@@ @@
   /**
    * Sets the domain if of created redirect.
    *
-   * @param \Drupal\domain\DomainInterface $domain
+   * @param DomainInterface $domain
    *   The active domain request.
    */
   public function setDomain(DomainInterface $domain) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/domain_path_redirect/src/DomainPathRedirectRepository.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\domain_path_redirect;

+use Drupal\Core\Config\ImmutableConfig;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ @@
   /**
    * The entity type manager service.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;

@@ @@
   /**
    * The database connection.
    *
-   * @var \Drupal\Core\Database\Connection
+   * @var Connection
    */
   protected $connection;

@@ @@
   /**
    * The configuration factory.
    *
-   * @var \Drupal\Core\Config\ImmutableConfig
+   * @var ImmutableConfig
    */
   protected $config;

@@ @@
   /**
    * The request stack.
    *
-   * @var \Symfony\Component\HttpFoundation\RequestStack
+   * @var RequestStack
    */
   protected $requestStack;

@@ @@
   /**
    * DomainPathRedirectRequestSubscriber constructor.
    *
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The default database connection.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   * @param RequestStack $request_stack
    *   A request stack object.
    */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, Connection $connection, ConfigFactoryInterface $config_factory, RequestStack $request_stack) {
@@ @@
    * @param string $language
    *   The language for which is the redirect.
    *
-   * @return \Drupal\domain_path_redirect\Entity\DomainPathRedirect
+   * @return DomainPathRedirect
    *   The matched redirect entity.
    *
-   * @throws \Drupal\redirect\Exception\RedirectLoopException
+   * @throws RedirectLoopException
    */
   public function findMatchingRedirect($source_path, $domain_id, array $query = [], $language = Language::LANGCODE_NOT_SPECIFIED) {
     $hashes = [
@@ @@
   /**
    * Helper function to find recursive redirects.
    *
-   * @param \Drupal\domain_path_redirect\Entity\DomainPathRedirect $redirect
+   * @param DomainPathRedirect $redirect
    *   The redirect object.
    * @param string $domain_id
    *   The ID of the domain.
@@ @@
    * @param string $language
    *   The language to use.
    *
-   * @return \Drupal\domain_path_redirect\Entity\DomainPathRedirect
+   * @return DomainPathRedirect
    *   The matched redirect entity.
    */
   protected function findByRedirect(DomainPathRedirect $redirect, $domain_id, $language) {
@@ @@
    * @param string $source_path
    *   The redirect source path (without the query).
    *
-   * @return \Drupal\domain_path_redirect\Entity\DomainPathRedirect[]
+   * @return DomainPathRedirect[]
    *   Array of redirect entities.
    */
   public function findBySourcePath($source_path) {
@@ @@
    * @param string[] $destination_uri
    *   List of destination URIs, for example ['internal:/node/123'].
    *
-   * @return \Drupal\domain_path_redirect\Entity\DomainPathRedirect[]
+   * @return DomainPathRedirect[]
    *   Array of redirect entities.
    */
   public function findByDestinationUri(array $destination_uri) {
@@ @@
    * @param int $redirect_id
    *   The redirect id.
    *
-   * @return \Drupal\domain_path_redirect\Entity\DomainPathRedirect
+   * @return DomainPathRedirect
    *   The redirect entity.
    */
   public function load($redirect_id) {
@@ @@
    * @param array $redirect_ids
    *   Redirect ids to load.
    *
-   * @return \Drupal\domain_path_redirect\Entity\DomainPathRedirect[]
+   * @return DomainPathRedirect[]
    *   List of redirect entities.
    */
   public function loadMultiple(array $redirect_ids = NULL) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


 [OK] 6 files have been changed by Rector                                       

