diff --git a/modules/chatbot_api_apiai/src/ApiAiContextTrait.php b/modules/chatbot_api_apiai/src/ApiAiContextTrait.php
index f66b5ea..f21e667 100644
--- a/modules/chatbot_api_apiai/src/ApiAiContextTrait.php
+++ b/modules/chatbot_api_apiai/src/ApiAiContextTrait.php
@@ -74,7 +74,7 @@ trait ApiAiContextTrait {
   /**
    * Check if context name matches the provided string.
    *
-   * @param \DialogFlow\Model\Context $context
+   * @param Context $context
    *   The context element we need to process.
    * @param string $context_name
    *   The string to match.
diff --git a/src/ApiAiEvent.php b/src/ApiAiEvent.php
index f74e3d9..1f165ec 100644
--- a/src/ApiAiEvent.php
+++ b/src/ApiAiEvent.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\api_ai_webhook;
 
+use Symfony\Contracts\EventDispatcher\Event;
 use DialogFlow\Model\Webhook\Request;
 use DialogFlow\Model\Webhook\Response;
-use Symfony\Component\EventDispatcher\Event;
 
 /**
  * Implements a new Symfony event.
@@ -19,23 +19,23 @@ class ApiAiEvent extends Event {
   /**
    * The webhook request.
    *
-   * @var \DialogFlow\Model\Webhook\Request
+   * @var Request
    */
   protected $request;
 
   /**
    * The response object.
    *
-   * @var \DialogFlow\Model\Webhook\Response
+   * @var Response
    */
   protected $response;
 
   /**
    * Constructor.
    *
-   * @param \DialogFlow\Model\Webhook\Request $request
+   * @param Request $request
    *   The request.
-   * @param \DialogFlow\Model\Webhook\Response $response
+   * @param Response $response
    *   An Alexa response object to use for any response.
    */
   public function __construct(Request $request, Response $response) {
@@ -46,7 +46,7 @@ class ApiAiEvent extends Event {
   /**
    * Getter for the request object.
    *
-   * @return \DialogFlow\Model\Webhook\Request
+   * @return Request
    *   The associated webhook request.
    */
   public function getRequest() {
@@ -56,7 +56,7 @@ class ApiAiEvent extends Event {
   /**
    * Setter for the request object.
    *
-   * @param \DialogFlow\Model\Webhook\Request $request
+   * @param Request $request
    *   The webhook request to associate with this event.
    */
   public function setRequest(Request $request) {
@@ -66,7 +66,7 @@ class ApiAiEvent extends Event {
   /**
    * Getter for the response object.
    *
-   * @return \DialogFlow\Model\Webhook\Response
+   * @return Response
    *   The associated response.
    */
   public function getResponse() {
@@ -76,7 +76,7 @@ class ApiAiEvent extends Event {
   /**
    * Setter for the response object.
    *
-   * @param \DialogFlow\Model\Webhook\Response $response
+   * @param Response $response
    *   The response to associate with this event.
    */
   public function setResponse(Response $response) {
diff --git a/src/Authentication/Provider/ApiAiAuth.php b/src/Authentication/Provider/ApiAiAuth.php
index 9f032b0..d52040e 100644
--- a/src/Authentication/Provider/ApiAiAuth.php
+++ b/src/Authentication/Provider/ApiAiAuth.php
@@ -22,28 +22,28 @@ class ApiAiAuth implements AuthenticationProviderInterface {
   /**
    * The config factory.
    *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   * @var ConfigFactoryInterface
    */
   protected $configFactory;
 
   /**
    * State Manager.
    *
-   * @var \Drupal\Core\State\StateInterface $stateManager
+   * @var StateInterface $stateManager
    */
   protected $stateManager;
 
   /**
    * The entity manager.
    *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   * @var EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
    * The flood service.
    *
-   * @var \Drupal\Core\Flood\FloodInterface
+   * @var FloodInterface
    */
   protected $flood;
 
@@ -57,13 +57,13 @@ class ApiAiAuth implements AuthenticationProviderInterface {
   /**
    * Constructs a HTTP basic authentication provider object.
    *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   * @param ConfigFactoryInterface $config_factory
    *   The config factory.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   The user authentication service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity manager service.
-   * @param \Drupal\Core\Flood\FloodInterface $flood
+   * @param FloodInterface $flood
    *   The flood service.
    */
   public function __construct(ConfigFactoryInterface $config_factory, StateInterface $state, EntityTypeManagerInterface $entity_type_manager, FloodInterface $flood) {
@@ -114,7 +114,7 @@ class ApiAiAuth implements AuthenticationProviderInterface {
   /**
    * Authenticates the user for 'basic' type.
    *
-   * @param \Symfony\Component\HttpFoundation\Request|null $request
+   * @param Request|null $request
    *   The request object.
    *
    * @return bool
@@ -139,7 +139,7 @@ class ApiAiAuth implements AuthenticationProviderInterface {
   /**
    * Authenticates the user for 'headers' type.
    *
-   * @param \Symfony\Component\HttpFoundation\Request|null $request
+   * @param Request|null $request
    *   The request object.
    *
    * @return bool
diff --git a/src/Controller/ApiAiEndpointController.php b/src/Controller/ApiAiEndpointController.php
index 6106ab6..e674ba8 100644
--- a/src/Controller/ApiAiEndpointController.php
+++ b/src/Controller/ApiAiEndpointController.php
@@ -26,14 +26,14 @@ class ApiAiEndpointController extends ControllerBase {
   /**
    * The Symfony event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * ApiAiEndpointController constructor.
    *
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   The Symfony event dispatcher to use.
    */
   public function __construct(EventDispatcherInterface $eventDispatcher) {
@@ -53,7 +53,7 @@ class ApiAiEndpointController extends ControllerBase {
    * @param \Symfony\Component\HttpFoundation\Request $http_request
    *   The HTTP request that was received.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return JsonResponse
    *   The response in JSON format.
    */
   public function callback(Request $http_request) {
diff --git a/src/EventSubscriber/ResponseEventSubscriber.php b/src/EventSubscriber/ResponseEventSubscriber.php
index f5da679..fa8338b 100644
--- a/src/EventSubscriber/ResponseEventSubscriber.php
+++ b/src/EventSubscriber/ResponseEventSubscriber.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\api_ai_webhook\EventSubscriber;
 
+use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
-use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
 
 /**
  * Subscribe to the response in order to better handle Dialogflow errors.
@@ -28,10 +28,10 @@ class ResponseEventSubscriber implements EventSubscriberInterface {
    * This method is called whenever the kernel.response event is dispatched,
    * then we filter responses/requests coming form Dialogflow webhook.
    *
-   * @param \Symfony\Component\HttpKernel\Event\FilterResponseEvent $event
+   * @param ResponseEvent $event
    *   The repose event.
    */
-  public function alterResponse(FilterResponseEvent $event) {
+  public function alterResponse(ResponseEvent $event) {
     if (rtrim($event->getRequest()->getPathInfo(), '/') === '/api.ai/webhook') {
 
       // Handle errors.
diff --git a/src/Form/ModuleConfigurationForm.php b/src/Form/ModuleConfigurationForm.php
index 71b5f91..a14f2aa 100644
--- a/src/Form/ModuleConfigurationForm.php
+++ b/src/Form/ModuleConfigurationForm.php
@@ -20,7 +20,7 @@ class ModuleConfigurationForm extends ConfigFormBase {
   /**
    * State Manager.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $stateManager;
 
diff --git a/tests/src/Functional/ConfigurationTest.php b/tests/src/Functional/ConfigurationTest.php
index 9a328dc..5401f64 100644
--- a/tests/src/Functional/ConfigurationTest.php
+++ b/tests/src/Functional/ConfigurationTest.php
@@ -39,7 +39,7 @@ class ConfigurationTest extends BrowserTestBase {
       'http_headers' => 'Lorem: ABC' . PHP_EOL . 'Ipsum: DEF',
     ];
     // Send the form.
-    $this->drupalPostForm(NULL, $edit, 'op');
+    $this->submitForm($edit, 'op');
     // Verify the saved message.
     $this->assertSession()->pageTextContains(t('The configuration options have been saved.'));
 
diff --git a/tests/src/Kernel/ChatbotIntentPluginTest.php b/tests/src/Kernel/ChatbotIntentPluginTest.php
index 0146a2a..f04b467 100644
--- a/tests/src/Kernel/ChatbotIntentPluginTest.php
+++ b/tests/src/Kernel/ChatbotIntentPluginTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\api_ai_webhook\Kernel;
 
+use Symfony\Component\HttpKernel\HttpKernelInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase;
@@ -39,14 +40,14 @@ class ChatbotIntentPluginTest extends KernelTestBase {
   /**
    * Kernel.
    *
-   * @var \Symfony\Component\HttpKernel\HttpKernelInterface
+   * @var HttpKernelInterface
    */
   protected $httpKernel;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installConfig(['filter', 'user']);
     $this->installSchema('system', ['sequences']);
@@ -60,7 +61,7 @@ class ChatbotIntentPluginTest extends KernelTestBase {
         'name' => '',
       ]);
     $anonymous->save();
-    /** @var \Drupal\user\RoleInterface $anonymous_role */
+    /** @var RoleInterface $anonymous_role */
     $anonymous_role = $this->container->get('entity_type.manager')
       ->getStorage('user_role')
       ->load(RoleInterface::ANONYMOUS_ID);
