modules/contrib/migrate_plus/migrate_example/migrate_example_setup/migrate_example_setup.install
modules/contrib/migrate_plus/migrate_example/src/Plugin/migrate/source/BeerComment.php
modules/contrib/migrate_plus/migrate_example/src/Plugin/migrate/source/BeerNode.php
modules/contrib/migrate_plus/migrate_example/src/Plugin/migrate/source/BeerTerm.php
modules/contrib/migrate_plus/migrate_example/src/Plugin/migrate/source/BeerUser.php
modules/contrib/migrate_plus/migrate_example/tests/src/Kernel/MigrateExampleTest.php
modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced.install
modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced_setup/migrate_example_advanced_setup.install
modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced_setup/src/Plugin/rest/resource/PositionResource.php
modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced_setup/src/Plugin/rest/resource/VarietyItems.php
modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced_setup/src/Plugin/rest/resource/VarietyList.php
modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced_setup/src/Plugin/rest/resource/VarietyMultiFiles.php
modules/contrib/migrate_plus/migrate_example_advanced/src/Plugin/migrate/source/WineTerm.php
modules/contrib/migrate_plus/migrate_example_advanced/tests/src/Functional/MigrateExampleAdvancedTest.php
modules/contrib/migrate_plus/migrate_json_example/migrate_json_example.install
modules/contrib/migrate_plus/migrate_json_example/tests/src/Kernel/MigrateJsonExampleTest.php
modules/contrib/migrate_plus/migrate_plus.install
modules/contrib/migrate_plus/migrate_plus.module
modules/contrib/migrate_plus/src/Annotation/Authentication.php
modules/contrib/migrate_plus/src/Annotation/DataFetcher.php
modules/contrib/migrate_plus/src/Annotation/DataParser.php
modules/contrib/migrate_plus/src/AuthenticationPluginBase.php
modules/contrib/migrate_plus/src/AuthenticationPluginInterface.php
modules/contrib/migrate_plus/src/AuthenticationPluginManager.php
modules/contrib/migrate_plus/src/DataFetcherPluginBase.php
modules/contrib/migrate_plus/src/DataFetcherPluginInterface.php
modules/contrib/migrate_plus/src/DataFetcherPluginManager.php
modules/contrib/migrate_plus/src/DataParserPluginBase.php
modules/contrib/migrate_plus/src/DataParserPluginInterface.php
modules/contrib/migrate_plus/src/DataParserPluginManager.php
modules/contrib/migrate_plus/src/Entity/Migration.php
modules/contrib/migrate_plus/src/Entity/MigrationGroup.php
modules/contrib/migrate_plus/src/Entity/MigrationGroupInterface.php
modules/contrib/migrate_plus/src/Entity/MigrationInterface.php
modules/contrib/migrate_plus/src/Event/MigrateEvents.php
modules/contrib/migrate_plus/src/Event/MigratePrepareRowEvent.php
modules/contrib/migrate_plus/src/Plugin/MigrationConfigDeriver.php
modules/contrib/migrate_plus/src/Plugin/migrate/destination/Table.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/ArrayPop.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/ArrayShift.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/DefaultEntityValue.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/Dom.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/DomApplyStyles.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/DomMigrationLookup.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/DomProcessBase.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/DomRemove.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/DomSelect.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/DomStrReplace.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/EntityGenerate.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/EntityLookup.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/EntityValue.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/FileBlob.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/Gate.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/Merge.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/MultipleValues.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/Service.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/SingleValue.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/SkipOnValue.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/StrReplace.php
modules/contrib/migrate_plus/src/Plugin/migrate/process/Transpose.php
modules/contrib/migrate_plus/src/Plugin/migrate/source/SourcePluginExtension.php
modules/contrib/migrate_plus/src/Plugin/migrate/source/Table.php
modules/contrib/migrate_plus/src/Plugin/migrate/source/Url.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/authentication/Basic.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/authentication/Digest.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/authentication/Ntlm.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/authentication/OAuth2.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_fetcher/File.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_fetcher/Http.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/Json.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/SimpleXml.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/Soap.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/Xml.php
modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/XmlTrait.php
modules/contrib/migrate_plus/tests/src/Functional/LoadTest.php
modules/contrib/migrate_plus/tests/src/Kernel/EntityLookupAccessTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableBatchTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableEvenBatchTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableIncrementBatchTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableIncrementEvenBatchTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableIncrementTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrationConfigEntityTest.php
modules/contrib/migrate_plus/tests/src/Kernel/MigrationGroupTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/DefaultEntityValueTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/EntityGenerateTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/EntityLookupTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/EntityValueTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/FileBlobTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/ServiceTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/source/TableTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate_plus/data_fetcher/HttpTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate_plus/data_parser/BaseXmlTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate_plus/data_parser/JsonTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate_plus/data_parser/SimpleXmlTest.php
modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate_plus/data_parser/XmlTest.php
modules/contrib/migrate_plus/tests/src/Unit/DataParserPluginBaseTest.php
modules/contrib/migrate_plus/tests/src/Unit/data_fetcher/FileTest.php
modules/contrib/migrate_plus/tests/src/Unit/data_fetcher/HttpTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/ArrayPopTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/ArrayShiftTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/DomApplyStylesTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/DomMigrationLookupTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/DomRemoveTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/DomSelectTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/DomStrReplaceTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/DomTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/GateTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/MultipleValuesTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/SingleValueTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/SkipOnValueTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/StrReplaceTest.php
modules/contrib/migrate_plus/tests/src/Unit/process/TransposeTest.php

38 files with changes
=====================

1) modules/contrib/migrate_plus/tests/src/Unit/process/DomMigrationLookupTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Unit\process;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\migrate\Plugin\MigratePluginManagerInterface;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Utility\Html;
 use Drupal\migrate\MigrateSkipRowException;
@@ @@
  */
 final class DomMigrationLookupTest extends MigrateProcessTestCase {

+  use ProphecyTrait;
   /**
    * Example configuration for the dom_migration_lookup process plugin.
    *
@@ @@
   /**
    * Mock a migration.
    *
-   * @var \Drupal\migrate\Plugin\MigrationInterface
+   * @var MigrationInterface
    */
   protected object $migration;

@@ @@
   /**
    * Mock a process plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigratePluginManagerInterface
+   * @var MigratePluginManagerInterface
    */
   protected object $processPluginManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/migrate_plus/tests/src/Unit/process/DomApplyStylesTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Unit\process;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\ConfigFactory;
@@ @@
  */
 final class DomApplyStylesTest extends MigrateProcessTestCase {

+  use ProphecyTrait;
   /**
    * Example configuration for the dom_apply_styles process plugin.
    *
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/migrate_plus/tests/src/Unit/data_fetcher/HttpTest.php:171

    ---------- begin diff ----------
@@ @@
   /**
    * Mocked authenticator plugin.
    *
-   * @var \PHPUnit_Framework_MockObject_MockObject
+   * @var MockObject
    */
   public $authenticator = NULL;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/migrate_plus/tests/src/Unit/DataParserPluginBaseTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Unit;

+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\migrate_plus\DataParserPluginBase;
 use Drupal\Tests\migrate\Unit\MigrateTestCase;

@@ @@
    * @param array $configuration
    *   The configuration to pass to the data parser.
    *
-   * @return \PHPUnit\Framework\MockObject\MockObject|\Drupal\Tests\migrate_plus\Unit\DataParserPluginBaseMock
+   * @return MockObject|\Drupal\Tests\migrate_plus\Unit\DataParserPluginBaseMock
    *   An mock instance of DataParserPluginBase.
    */
   protected function getMockedDataParser(array $configuration = []) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate_plus/data_parser/JsonTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate_plus\data_parser;

+use Drupal\Component\Plugin\Exception\PluginException;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migrate_plus\DataParserPluginManager;

@@ @@
    *
    * @dataProvider providerTestMissingProperties
    *
-   * @throws \Drupal\Component\Plugin\Exception\PluginException
+   * @throws PluginException
    * @throws \Exception
    */
   public function testMissingProperties($file, array $ids, array $fields, array $expected): void {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate_plus/data_parser/BaseXmlTest.php:200

    ---------- begin diff ----------
@@ @@
   /**
    * Returns a parse object with active configuration.
    *
-   * @return \Drupal\migrate_plus\DataParserPluginInterface
+   * @return DataParserPluginInterface
    *   Data parser object.
    */
   abstract protected function getParser(): DataParserPluginInterface;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/source/TableTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate\source;

+use Drupal\migrate\Plugin\MigrationPluginManager;
 use Drupal\migrate\Exception\RequirementsException;
 use Drupal\Tests\migrate_drupal\Kernel\d7\MigrateDrupal7TestBase;

@@ @@
   /**
    * The migration plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManager
+   * @var MigrationPluginManager
    */
   protected $migrationPluginManager;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/ServiceTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate\process;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\migrate_plus\Plugin\migrate\process\Service;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migrate\MigrateExecutableInterface;
 use Drupal\migrate\Plugin\MigratePluginManagerInterface;
@@ @@
  */
 final class ServiceTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * {@inheritdoc}
    */
@@ @@
    * @covers ::create
    */
   public function testValidConfig(): void {
-    /** @var \Drupal\migrate\MigrateExecutableInterface $executable */
+    /** @var MigrateExecutableInterface $executable */
     $executable = $this->prophesize(MigrateExecutableInterface::class)->reveal();
     $row = new Row([], []);
     $configuration = [
@@ @@
       'service' => 'email.validator',
       'method' => 'isValid',
     ];
-    /** @var \Drupal\migrate_plus\Plugin\migrate\process\Service $service */
+    /** @var Service $service */
     $service = $this->pluginManager->createInstance('service', $configuration);

     // Test a valid email address.
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/FileBlobTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate\process;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Drupal\migrate_plus\Plugin\migrate\process\FileBlob;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migrate\MigrateExecutableInterface;
@@ @@
  */
 final class FileBlobTest extends KernelTestBase {

+  use ProphecyTrait;
   use UserCreationTrait;

   /**
@@ @@
    * @covers ::transform
    */
   public function testFileCreation(): void {
-    /** @var \Drupal\migrate\MigrateExecutableInterface $executable */
+    /** @var MigrateExecutableInterface $executable */
     $executable = $this->prophesize(MigrateExecutableInterface::class)->reveal();
     $row = new Row([], []);
     $value = ['public://cat.jpeg', base64_decode($this->blob, TRUE)];
-    /** @var \Drupal\migrate_plus\Plugin\migrate\process\FileBlob $file_blob */
+    /** @var FileBlob $file_blob */
     $file_blob = $this->pluginManager->createInstance('file_blob');
     $file = $file_blob->transform($value, $executable, $row, 'destination_property');
     $this->assertEquals('public://cat.jpeg', $file);
@@ @@
     $configuration = [
       'reuse' => FileSystemInterface::EXISTS_ERROR,
     ];
-    /** @var \Drupal\migrate_plus\Plugin\migrate\process\FileBlob $file_blob */
+    /** @var FileBlob $file_blob */
     $file_blob = $this->pluginManager->createInstance('file_blob', $configuration);
-    /** @var \Drupal\migrate\MigrateExecutableInterface $executable */
+    /** @var MigrateExecutableInterface $executable */
     $file = $file_blob->transform($value, $executable, $row, 'destination_property');
     $this->assertEquals('public://cat.jpeg', $file);
     $this->assertEquals($this->sha1sum, sha1_file($file));
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/EntityValueTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate\process;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migrate\MigrateException;
 use Drupal\migrate\MigrateExecutableInterface;
@@ @@
  */
 final class EntityValueTest extends KernelTestBase {

+  use ProphecyTrait;
   /**
    * The generated title.
    */
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/EntityLookupTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate\process;

+use Drupal\migrate\MigrateExecutable;
+use PHPUnit\Framework\MockObject\MockObject;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migrate\Row;
 use Drupal\Tests\node\Traits\NodeCreationTrait;
@@ @@
   /**
    * The migrate executable mock object.
    *
-   * @var \Drupal\migrate\MigrateExecutable|\PHPUnit\Framework\MockObject\MockObject
+   * @var MigrateExecutable|MockObject
    */
   protected $migrateExecutable;

@@ @@
     $this->installEntitySchema('node');
     $this->installConfig(['filter']);

-    $this->migrateExecutable = $this->getMockBuilder('Drupal\migrate\MigrateExecutable')
-      ->disableOriginalConstructor()
-      ->getMock();
+    $this->migrateExecutable = $this->createMock('Drupal\migrate\MigrateExecutable');

     $test_nodes = [
       ['title' => 'foo 1'],
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * GetMockBuilderGetMockToCreateMockRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/EntityGenerateTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate\process;

+use Drupal\migrate\Plugin\Migration;
+use Drupal\Core\Entity\EntityStorageBase;
+use Drupal\Core\Entity\ContentEntityStorageInterface;
 use Drupal\Core\Config\Entity\ConfigEntityInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Language\LanguageInterface;
@@ @@
       }
     }

-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     $migration = $this->migrationPluginManager->createStubMigration($definition);
     $reflector = new \ReflectionObject($migration->getDestinationPlugin());
     $attribute = $reflector->getProperty('storage');
     $attribute->setAccessible(TRUE);
-    /** @var \Drupal\Core\Entity\EntityStorageBase $storage */
+    /** @var EntityStorageBase $storage */
     $storage = $attribute->getValue($migration->getDestinationPlugin());
     $migrationExecutable = (new MigrateExecutable($migration, $this));
     $migrationExecutable->import();
@@ @@
         'plugin' => 'entity:node',
       ],
     ];
-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     $migration = $this->migrationPluginManager->createStubMigration($definition);
     $migrationExecutable = (new MigrateExecutable($migration, $this));
     $migrationExecutable->import();
@@ @@
         'plugin' => 'entity:node',
       ],
     ];
-    /** @var \Drupal\migrate\Plugin\Migration $migration */
+    /** @var Migration $migration */
     $migration = $this->migrationPluginManager->createStubMigration($definition);
     $migrationExecutable = (new MigrateExecutable($migration, $this));
     $migrationExecutable->import();
@@ @@
    *   The entity identifier.
    */
   private function createTestData($storageName, array $values) {
-    /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
+    /** @var ContentEntityStorageInterface $storage */
     $storage = $this->container
       ->get('entity_type.manager')
       ->getStorage($storageName);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/migrate_plus/tests/src/Kernel/Plugin/migrate/process/DefaultEntityValueTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel\Plugin\migrate\process;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migrate\MigrateExecutableInterface;
 use Drupal\migrate\Plugin\MigrateDestinationInterface;
@@ @@
  */
 final class DefaultEntityValueTest extends KernelTestBase {

+  use ProphecyTrait;
   use UserCreationTrait;

   /**
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/migrate_plus/tests/src/Kernel/MigrationGroupTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel;

+use Drupal\migrate_plus\Entity\MigrationGroupInterface;
+use Drupal\migrate_plus\Entity\MigrationInterface;
+use Drupal\migrate\Plugin\MigrationPluginManagerInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\migrate_plus\Entity\Migration;
 use Drupal\migrate_plus\Entity\MigrationGroup;
@@ @@
   public function testConfigurationMerge(): void {
     $group_id = 'test_group';

-    /** @var \Drupal\migrate_plus\Entity\MigrationGroupInterface $migration_group */
+    /** @var MigrationGroupInterface $migration_group */
     $group_configuration = [
       'id' => $group_id,
       'shared_configuration' => [
@@ @@
     $this->container->get('entity_type.manager')->getStorage('migration_group')
       ->create($group_configuration)->save();

-    /** @var \Drupal\migrate_plus\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->container->get('entity_type.manager')
       ->getStorage('migration')->create([
         'id' => 'specific_migration',
@@ @@
    * Test that deleting a group deletes its migrations.
    */
   public function testDelete(): void {
-    /** @var \Drupal\migrate_plus\Entity\MigrationGroupInterface $migration_group */
+    /** @var MigrationGroupInterface $migration_group */
     $group_configuration = [
       'id' => 'test_group',
     ];
@@ @@
       ->getStorage('migration_group')->create($group_configuration);
     $migration_group->save();

-    /** @var \Drupal\migrate_plus\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->container->get('entity_type.manager')
       ->getStorage('migration')->create([
         'id' => 'specific_migration',
@@ @@
       ]);
     $migration->save();

-    /** @var \Drupal\migrate_plus\Entity\MigrationGroupInterface $loaded_migration_group */
+    /** @var MigrationGroupInterface $loaded_migration_group */
     $loaded_migration_group = MigrationGroup::load('test_group');
     $loaded_migration_group->delete();

-    /** @var \Drupal\migrate_plus\Entity\MigrationInterface $loaded_migration */
+    /** @var MigrationInterface $loaded_migration */
     $loaded_migration = Migration::load('specific_migration');
     $this->assertNull($loaded_migration);
   }
@@ @@
   public function testDefaultGroup(): void {
     $this->installConfig('migrate_plus_test');

-    /** @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface $pluginManager */
+    /** @var MigrationPluginManagerInterface $pluginManager */
     $pluginManager = \Drupal::service('plugin.manager.migration');
     $migration = $pluginManager->getDefinition('dummy');
     $this->assertEquals($migration['migration_group'], 'default', 'Migrations without an explicit group are assigned the default group.');
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


15) modules/contrib/migrate_plus/tests/src/Kernel/MigrationConfigEntityTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel;

+use Drupal\migrate\Plugin\MigrationPluginManager;
+use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\migrate\MigrateExecutable;
 use Drupal\migrate_plus\Entity\Migration;
@@ @@
   /**
    * The plugin manager.
    *
-   * @var \Drupal\migrate\Plugin\MigrationPluginManager
+   * @var MigrationPluginManager
    */
   protected $pluginManager;

@@ @@
    */
   public function testImport(): void {
     $this->installConfig('migrate_plus_test');
-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = $this->pluginManager->createInstance('fruit_terms');
     $id_map = $migration->getIdMap();
     $executable = new MigrateExecutable($migration, $this);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ExplicitPhpErrorApiRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel;

+use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\Core\Database\Connection;
 use Drupal\migrate\MigrateExecutable;
 use Drupal\migrate\Plugin\MigrateIdMapInterface;
@@ @@
    * Tests table update.
    *
    * @dataProvider tableDestinationMigration
+   * @doesNotPerformAssertions
    */
   public function testTableUpdate(array $definition): void {
     // Make sure migration overwrites the original data for the first row.
@@ @@
       ->fields($original_values)
       ->execute();

-    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     $migration = \Drupal::service('plugin.manager.migration')
       ->createStubMigration($definition);
     $migration->getIdMap()->saveIdMapping(new Row($original_values,
    ----------- end diff -----------

Applied rules:
 * AddDoesNotPerformAssertionToNonAssertingTestRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


17) modules/contrib/migrate_plus/tests/src/Kernel/MigrateTableIncrementTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Kernel;

+use Drupal\migrate\MigrateException;
 use Drupal\Core\Database\Connection;
 use Drupal\migrate\MigrateExecutable;
 use Drupal\Tests\migrate\Kernel\MigrateTestBase;
@@ @@
    *
    * @dataProvider tableDestinationMigration
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   public function testTableDestination(array $definition) {
     $migration = \Drupal::service('plugin.manager.migration')->createStubMigration($definition);
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


18) modules/contrib/migrate_plus/tests/src/Kernel/EntityLookupAccessTest.php:32

    ---------- begin diff ----------
@@ @@
   /**
    * A user.
    *
-   * @var bool|\Drupal\user\Entity\User
+   * @var bool|User
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


19) modules/contrib/migrate_plus/tests/src/Functional/LoadTest.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\migrate_plus\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


20) modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/Xml.php:127

    ---------- begin diff ----------
@@ @@
    *   A \SimpleXmlElement when the document is parseable, or null if a
    *   parsing error occurred.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    */
   protected function getSimpleXml(): ?\SimpleXMLElement {
     $node = $this->reader->expand();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


21) modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/Soap.php:41

    ---------- begin diff ----------
@@ @@
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\migrate\Exception\RequirementsException
+   * @throws RequirementsException
    *   If PHP SOAP extension is not installed.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition) {
@@ @@
    *
    * @throws \SoapFault
    *   If there's an error in a SOAP call.
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    *   If we can't resolve the SOAP function or its response property.
    */
   protected function openSourceUrl($url): bool {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


22) modules/contrib/migrate_plus/src/Plugin/migrate_plus/data_parser/Json.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Plugin\migrate_plus\data_parser;

+use GuzzleHttp\Exception\RequestException;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\migrate_plus\DataParserPluginBase;

@@ @@
    * @param string $url
    *   URL of a JSON feed.
    *
-   * @throws \GuzzleHttp\Exception\RequestException
+   * @throws RequestException
    */
   protected function getSourceData(string $url): array {
     $response = $this->getDataFetcherPlugin()->getResponseContent($url);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


23) modules/contrib/migrate_plus/src/Plugin/migrate/source/Url.php:25

    ---------- begin diff ----------
@@ @@
   /**
    * The data parser plugin.
    *
-   * @var \Drupal\migrate_plus\DataParserPluginInterface
+   * @var DataParserPluginInterface
    */
   protected DataParserPluginInterface $dataParserPlugin;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


24) modules/contrib/migrate_plus/src/Plugin/migrate/process/SkipOnValue.php:78

    ---------- begin diff ----------
@@ @@
    *
    * @param mixed $value
    *   The input value.
-   * @param \Drupal\migrate\MigrateExecutableInterface $migrate_executable
+   * @param MigrateExecutableInterface $migrate_executable
    *   The migration in which this process is being executed.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row from the source to process.
    * @param string $destination_property
    *   The destination property currently worked on. This is only used together
@@ @@
    * @return mixed
    *   The input value, $value, if it doesn't evaluate to a configured value.
    *
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateSkipRowException
    *   Thrown if the source property evaluates to a configured value and the
    *   row should be skipped, records with STATUS_IGNORED status in the map.
    */
@@ @@
    *
    * @param mixed $value
    *   The input value.
-   * @param \Drupal\migrate\MigrateExecutableInterface $migrate_executable
+   * @param MigrateExecutableInterface $migrate_executable
    *   The migration in which this process is being executed.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row from the source to process.
    * @param string $destination_property
    *   The destination property currently worked on. This is only used together
@@ @@
    * @return mixed
    *   The input value, $value, if it doesn't evaluate to a configured value.
    *
-   * @throws \Drupal\migrate\MigrateSkipProcessException
+   * @throws MigrateSkipProcessException
    *   Thrown if the source property evaluates to a configured value and rest
    *   of the process should be skipped.
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


25) modules/contrib/migrate_plus/src/Plugin/migrate/process/FileBlob.php:85

    ---------- begin diff ----------
@@ @@
    *   The plugin ID.
    * @param mixed $plugin_definition
    *   The plugin definition.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   The file system service.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, FileSystemInterface $file_system) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


26) modules/contrib/migrate_plus/src/Plugin/migrate/process/EntityValue.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Plugin\migrate\process;

+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    * @throws \InvalidArgumentException
    */
   public function __construct(
@@ @@
    * @param array $ids
    *   The entity IDs.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   The entities.
    */
   protected function loadEntities(array $ids): array {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


27) modules/contrib/migrate_plus/src/Plugin/migrate/process/DomProcessBase.php:27

    ---------- begin diff ----------
@@ @@
    *   The name of the destination being processed. Used to generate an error
    *   message.
    *
-   * @throws \Drupal\migrate\MigrateSkipRowException
+   * @throws MigrateSkipRowException
    *   If $value is not a \DOMDocument object.
    */
   protected function init($value, string $destination_property) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


28) modules/contrib/migrate_plus/src/Plugin/migrate/process/DomApplyStyles.php:118

    ---------- begin diff ----------
@@ @@
    * @param string $format
    *   The text format from which to get configured styles.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function setStyles($format): void {
     if (empty($format) || !is_string($format)) {
@@ @@
   /**
    * Validate the configured rules.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws InvalidPluginDefinitionException
    */
   protected function validateRules(): void {
     if (!array_key_exists('rules', $this->configuration) || !is_array($this->configuration['rules'])) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


29) modules/contrib/migrate_plus/src/Plugin/migrate/process/Dom.php:133

    ---------- begin diff ----------
@@ @@
    *
    * @param mixed $value
    *   The string to be imported.
-   * @param \Drupal\migrate\MigrateExecutableInterface $migrate_executable
+   * @param MigrateExecutableInterface $migrate_executable
    *   The migration in which this process is being executed.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row from the source to process. Normally, just transforming the value
    *   is adequate but very rarely you might need to change two columns at the
    *   same time or something like that.
@@ @@
    *
    *   The document object based on the provided string.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    *   When the received $value is not a string.
    */
   public function import($value, MigrateExecutableInterface $migrate_executable, Row $row, string $destination_property): \DOMDocument {
@@ @@
    *
    * @param mixed $value
    *   The document to be exported.
-   * @param \Drupal\migrate\MigrateExecutableInterface $migrate_executable
+   * @param MigrateExecutableInterface $migrate_executable
    *   The migration in which this process is being executed.
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   The row from the source to process. Normally, just transforming the value
    *   is adequate but very rarely you might need to change two columns at the
    *   same time or something like that.
@@ @@
    * @return string
    *   The HTML string corresponding to the provided document object.
    *
-   * @throws \Drupal\migrate\MigrateException
+   * @throws MigrateException
    *   When the received $value is not a \DOMDocument.
    */
   public function export($value, MigrateExecutableInterface $migrate_executable, Row $row, string $destination_property) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


30) modules/contrib/migrate_plus/src/Plugin/migrate/destination/Table.php:118

    ---------- begin diff ----------
@@ @@
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   The migration.
-   * @param \Drupal\Core\Database\Connection $connection
+   * @param Connection $connection
    *   The database connection.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, Connection $connection) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


31) modules/contrib/migrate_plus/src/Plugin/MigrationConfigDeriver.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Plugin;

+use Drupal\migrate_plus\Entity\MigrationInterface;
 use Drupal\Component\Plugin\Derivative\DeriverBase;
 use Drupal\migrate_plus\Entity\Migration;

@@ @@
     // clearing our internal cache.
     $this->derivatives = [];
     $migrations = Migration::loadMultiple();
-    /** @var \Drupal\migrate_plus\Entity\MigrationInterface $migration */
+    /** @var MigrationInterface $migration */
     foreach ($migrations as $id => $migration) {
       if (!$migration->status()) {
         continue;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


32) modules/contrib/migrate_plus/src/Event/MigratePrepareRowEvent.php:20

    ---------- begin diff ----------
@@ @@
   /**
    * Constructs a prepare-row event object.
    *
-   * @param \Drupal\migrate\Row $row
+   * @param Row $row
    *   Row of source data to be analyzed/manipulated.
-   * @param \Drupal\migrate\Plugin\MigrateSourceInterface $source
+   * @param MigrateSourceInterface $source
    *   Source plugin that is the source of the event.
-   * @param \Drupal\migrate\Plugin\MigrationInterface $migration
+   * @param MigrationInterface $migration
    *   Migration entity.
    */
   public function __construct(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


33) modules/contrib/migrate_plus/src/Entity/Migration.php:3

    ---------- begin diff ----------
@@ @@

 namespace Drupal\migrate_plus\Entity;

+use Drupal\migrate\Plugin\MigrationPluginManagerInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\Entity\ConfigEntityBase;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ @@
   public static function createEntityFromPlugin($plugin_id, $new_plugin_id): self {
     $entity_array = [];
     $migration_details = [];
-    /** @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface $plugin_manager */
+    /** @var MigrationPluginManagerInterface $plugin_manager */
     $plugin_manager = \Drupal::service('plugin.manager.migration');
     /** @var \Drupal\migrate\Plugin\Migration $migration_plugin */
     $migration_plugin = $plugin_manager->createInstance($plugin_id);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


34) modules/contrib/migrate_plus/src/DataParserPluginManager.php:24

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


35) modules/contrib/migrate_plus/src/DataFetcherPluginManager.php:24

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


36) modules/contrib/migrate_plus/src/DataFetcherPluginInterface.php:45

    ---------- begin diff ----------
@@ @@
    * @param string $url
    *   URL to retrieve from.
    *
-   * @return \Psr\Http\Message\ResponseInterface
+   * @return ResponseInterface
    *   The HTTP response message.
    */
   public function getResponse(string $url): ResponseInterface;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


37) modules/contrib/migrate_plus/src/AuthenticationPluginManager.php:24

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


38) modules/contrib/migrate_plus/migrate_example_advanced/migrate_example_advanced.install:0

    ---------- begin diff ----------
@@ @@
 <?php

 declare(strict_types = 1);
+use Drupal\migrate_plus\Entity\MigrationInterface;

 /**
  * @file
@@ @@
  * site root and here rewrite them to fully-qualified paths.
  */
 function migrate_example_advanced_install(): void {
-  /** @var \Drupal\migrate_plus\Entity\MigrationInterface $wine_role_xml_migration */
+  /** @var MigrationInterface $wine_role_xml_migration */
   $wine_role_xml_migration = Migration::load('wine_role_xml');
   if ($wine_role_xml_migration) {
     $source = $wine_role_xml_migration->get('source');
@@ @@
     $wine_role_xml_migration->set('source', $source);
     $wine_role_xml_migration->save();
   }
-  /** @var \Drupal\migrate_plus\Entity\MigrationInterface $wine_role_json_migration */
+  /** @var MigrationInterface $wine_role_json_migration */
   $wine_role_json_migration = Migration::load('wine_role_json');
   if ($wine_role_json_migration) {
     $source = $wine_role_json_migration->get('source');
@@ @@
     $wine_role_json_migration->set('source', $source);
     $wine_role_json_migration->save();
   }
-  /** @var \Drupal\migrate_plus\Entity\MigrationInterface $wine_variety_multi_xml_migration */
+  /** @var MigrationInterface $wine_variety_multi_xml_migration */
   $wine_variety_multi_xml_migration = Migration::load('wine_variety_multi_xml');
   if ($wine_variety_multi_xml_migration) {
     $source = $wine_variety_multi_xml_migration->get('source');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector


 [OK] 38 files have been changed by Rector                                      

