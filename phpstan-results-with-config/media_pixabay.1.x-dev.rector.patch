diff --git a/src/Api/PixabayApiService.php b/src/Api/PixabayApiService.php
index e5e423d..6c5b8ee 100644
--- a/src/Api/PixabayApiService.php
+++ b/src/Api/PixabayApiService.php
@@ -15,14 +15,14 @@ class PixabayApiService implements PixabayApiServiceInterface {
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * PixabayApiService constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   Http client.
    */
   public function __construct(ClientInterface $http_client) {
diff --git a/src/Api/PixabayApiServiceInterface.php b/src/Api/PixabayApiServiceInterface.php
index e0c2c65..e4107c3 100644
--- a/src/Api/PixabayApiServiceInterface.php
+++ b/src/Api/PixabayApiServiceInterface.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\media_pixabay\Api;
 
+use GuzzleHttp\Exception\GuzzleException;
 /**
  * Interface PixabayApiServiceInterface.
  *
@@ -18,7 +19,7 @@ interface PixabayApiServiceInterface {
    * @return mixed
    *   Decoded results.
    *
-   * @throws \GuzzleHttp\Exception\GuzzleException
+   * @throws GuzzleException
    */
   public function apiCall($queryStr);
 
diff --git a/src/Plugin/EntityBrowser/Widget/Pixabay.php b/src/Plugin/EntityBrowser/Widget/Pixabay.php
index 0f20c23..76f2195 100644
--- a/src/Plugin/EntityBrowser/Widget/Pixabay.php
+++ b/src/Plugin/EntityBrowser/Widget/Pixabay.php
@@ -2,6 +2,14 @@
 
 namespace Drupal\media_pixabay\Plugin\EntityBrowser\Widget;
 
+use Drupal\media\MediaTypeInterface;
+use Drupal\media\Entity\MediaType;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\file\FileInterface;
+use Drupal\media\Entity\Media;
+use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
+use Drupal\Component\Plugin\Exception\PluginNotFoundException;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -39,7 +47,7 @@ class Pixabay extends WidgetBase implements ContainerFactoryPluginInterface {
   /**
    * Renderer service.
    *
-   * @var \Drupal\Core\Render\Renderer
+   * @var Renderer
    *   Renderer.
    */
   protected $renderer;
@@ -47,7 +55,7 @@ class Pixabay extends WidgetBase implements ContainerFactoryPluginInterface {
   /**
    * Cache service.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface
+   * @var CacheBackendInterface
    *   Cache.
    */
   protected $cache;
@@ -55,7 +63,7 @@ class Pixabay extends WidgetBase implements ContainerFactoryPluginInterface {
   /**
    * The media Pixabay API key config.
    *
-   * @var \Drupal\Core\Config\Config
+   * @var Config
    *   Config factory
    */
   protected $pixabayKeyConfig;
@@ -63,49 +71,49 @@ class Pixabay extends WidgetBase implements ContainerFactoryPluginInterface {
   /**
    * Error logger.
    *
-   * @var \Drupal\Core\Logger\LoggerChannelFactory
+   * @var LoggerChannelFactory
    */
   protected $loggerFactory;
 
   /**
    * Current user service.
    *
-   * @var \Drupal\Core\Session\AccountProxy
+   * @var AccountProxy
    */
   protected $currentUser;
 
   /**
    * The "file_system" service.
    *
-   * @var \Drupal\Core\File\FileSystemInterface
+   * @var FileSystemInterface
    */
   protected $fileSystem;
 
   /**
    * The module handler service.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   * @var ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
    * The token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * The Messenger service.
    *
-   * @var \Drupal\Core\Messenger\MessengerInterface
+   * @var MessengerInterface
    */
   protected $messenger;
 
   /**
    * The Pixabay Api service.
    *
-   * @var \Drupal\media_pixabay\Api\PixabayApiServiceInterface
+   * @var PixabayApiServiceInterface
    */
   protected $pixabayApiService;
 
@@ -118,31 +126,31 @@ class Pixabay extends WidgetBase implements ContainerFactoryPluginInterface {
    *   The plugin_id for the plugin instance.
    * @param mixed $plugin_definition
    *   The plugin implementation definition.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
+   * @param EventDispatcherInterface $event_dispatcher
    *   Event dispatcher service.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   * @param EntityTypeManagerInterface $entity_type_manager
    *   The entity type manager service.
-   * @param \Drupal\entity_browser\WidgetValidationManager $validation_manager
+   * @param WidgetValidationManager $validation_manager
    *   The Widget Validation Manager service.
-   * @param \Drupal\Core\Render\Renderer $renderer
+   * @param Renderer $renderer
    *   Renderer.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   * @param CacheBackendInterface $cache
    *   Cache.
-   * @param \Drupal\Core\Config\Config $config_factory
+   * @param Config $config_factory
    *   Pixabay API key config.
-   * @param \Drupal\Core\Logger\LoggerChannelFactory $logger
+   * @param LoggerChannelFactory $logger
    *   Error logger.
-   * @param \Drupal\Core\Session\AccountProxy $current_user
+   * @param AccountProxy $current_user
    *   Current user.
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   * @param FileSystemInterface $file_system
    *   File system.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   The token service.
-   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   * @param MessengerInterface $messenger
    *   The messenger service.
-   * @param \Drupal\media_pixabay\Api\PixabayApiServiceInterface $pixabay_api_service
+   * @param PixabayApiServiceInterface $pixabay_api_service
    *   The Pixabay Api service.
    */
   public function __construct(
@@ -337,7 +345,7 @@ class Pixabay extends WidgetBase implements ContainerFactoryPluginInterface {
     $form['#attached']['library'][] = 'media_pixabay/media-pixabay-css-library';
 
     try {
-      /** @var \Drupal\media\MediaTypeInterface $mediaType */
+      /** @var MediaTypeInterface $mediaType */
       $mediaType = $this->entityTypeManager
         ->getStorage('media_type')
         ->load($this->configuration['media_type']);
@@ -367,12 +375,12 @@ class Pixabay extends WidgetBase implements ContainerFactoryPluginInterface {
                     </a>',
     ];
 
-    /** @var \Drupal\media\Entity\MediaType $mediaType */
+    /** @var MediaType $mediaType */
     $mediaType = $this->entityTypeManager
       ->getStorage('media_type')
       ->load($this->configuration['media_type']);
     if ($mediaType != NULL) {
-      /** @var \Drupal\field\Entity\FieldConfig $fieldInstance */
+      /** @var FieldConfig $fieldInstance */
       $fieldInstance = $this->entityTypeManager
         ->getStorage('field_config')
         ->load('media.' . $this->configuration['media_type'] . '.' . $mediaType->getSource()->getConfiguration()['source_field']);
@@ -442,7 +450,7 @@ class Pixabay extends WidgetBase implements ContainerFactoryPluginInterface {
    * @param array $element
    *   An associative array containing the properties and children of the
    *   generic form element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The current state of the form.
    * @param array $complete_form
    *   The complete form.
@@ -477,10 +485,10 @@ class Pixabay extends WidgetBase implements ContainerFactoryPluginInterface {
    *
    * @param array $form
    *   Complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
-   * @return \Drupal\Core\Entity\EntityInterface[]
+   * @return EntityInterface[]
    *   Array of saved media entities.
    */
   protected function prepareEntities(array $form, FormStateInterface $form_state) {
@@ -491,15 +499,15 @@ class Pixabay extends WidgetBase implements ContainerFactoryPluginInterface {
         $path = str_replace('[PIXABAY_SEARCH_TERM]', $searchTerm, $this->token
           ->replace($this->configuration['upload_location']));
         if ($this->fileSystem->prepareDirectory($path, FileSystemInterface::CREATE_DIRECTORY)) {
-          /** @var \Drupal\file\FileInterface $file */
+          /** @var FileInterface $file */
           $file = system_retrieve_file($item['checked']['url'], $path, TRUE);
           if ($file !== FALSE) {
             try {
-              /** @var \Drupal\media\MediaTypeInterface $mediaType */
+              /** @var MediaTypeInterface $mediaType */
               $mediaType = $this->entityTypeManager
                 ->getStorage('media_type')
                 ->load($this->configuration['media_type']);
-              /** @var \Drupal\media\Entity\Media[] $media */
+              /** @var Media[] $media */
               $media[$key] = $this->entityTypeManager
                 ->getStorage('media')
                 ->create([
@@ -531,19 +539,19 @@ class Pixabay extends WidgetBase implements ContainerFactoryPluginInterface {
   /**
    * {@inheritdoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function validate(array &$form, FormStateInterface $form_state) {
     if ($form_state->getTriggeringElement()['#name'] === 'pixabaySubmit') {
       $mediaType = $this->configuration['media_type'];
-      /** @var \Drupal\media\MediaTypeInterface $mediaTypeLoaded */
+      /** @var MediaTypeInterface $mediaTypeLoaded */
       $mediaTypeLoaded = $this->entityTypeManager
         ->getStorage('media_type')
         ->load($mediaType);
       $sourceField = $mediaTypeLoaded->getSource()
         ->getConfiguration()['source_field'];
-      /** @var \Drupal\field\Entity\FieldConfig $mediaTypeFieldConfig */
+      /** @var FieldConfig $mediaTypeFieldConfig */
       $mediaTypeFieldConfig = $this->entityTypeManager
         ->getStorage('field_config')
         ->load('media.' . $mediaType . '.' . $sourceField);
@@ -708,23 +716,23 @@ class Pixabay extends WidgetBase implements ContainerFactoryPluginInterface {
    *
    * @param array $form
    *   The complete form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state object.
    *
    * @return array|void
    *   Form array with changed data.
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function extensionsAjaxCallback(array &$form, FormStateInterface $form_state) {
     $mediaType = $form_state->getValue('table')[$this->uuid()]['form']['media_type'];
     if ($mediaType !== '_none' && $mediaType !== '') {
-      /** @var \Drupal\media\Entity\MediaType $mediaTypeLoaded */
+      /** @var MediaType $mediaTypeLoaded */
       $mediaTypeLoaded = $this->entityTypeManager
         ->getStorage('media_type')
         ->load($mediaType);
-      /** @var \Drupal\field\Entity\FieldConfig $fieldInstance */
+      /** @var FieldConfig $fieldInstance */
       $fieldInstance = $this->entityTypeManager->getStorage('field_config')
         ->load('media.' . $mediaType . '.' . $mediaTypeLoaded->getSource()
           ->getConfiguration()['source_field']);
@@ -750,8 +758,8 @@ class Pixabay extends WidgetBase implements ContainerFactoryPluginInterface {
   /**
    * {@inheritDoc}
    *
-   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
-   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws InvalidPluginDefinitionException
+   * @throws PluginNotFoundException
    */
   public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
     $mediaType = $form_state->getValue('table')[$this->uuid()]['form']['media_type'];
@@ -760,12 +768,12 @@ class Pixabay extends WidgetBase implements ContainerFactoryPluginInterface {
         $this->t('Please select a media type.'));
     }
     else {
-      /** @var \Drupal\media\Entity\MediaType $mediaTypeLoaded */
+      /** @var MediaType $mediaTypeLoaded */
       $mediaTypeLoaded = $this->entityTypeManager
         ->getStorage('media_type')
         ->load($mediaType);
       if ($mediaTypeLoaded != NULL) {
-        /** @var \Drupal\field\Entity\FieldConfig $fieldInstance */
+        /** @var FieldConfig $fieldInstance */
         $fieldInstance = $this->entityTypeManager
           ->getStorage('field_config')
           ->load('media.' . $mediaType . '.' . $mediaTypeLoaded->getSource()
diff --git a/tests/modules/media_pixabay_test/src/Api/PixabayApiService.php b/tests/modules/media_pixabay_test/src/Api/PixabayApiService.php
index 492fe58..cbe1f5e 100644
--- a/tests/modules/media_pixabay_test/src/Api/PixabayApiService.php
+++ b/tests/modules/media_pixabay_test/src/Api/PixabayApiService.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\media_pixabay_test\Api;
 
+use Drupal\Core\Config\Config;
+use Drupal\Core\Config\ImmutableConfig;
 use function GuzzleHttp\json_decode;
 use Drupal\Core\Config\ConfigFactory;
 use Drupal\media_pixabay\Api\PixabayApiServiceInterface;
@@ -20,23 +22,23 @@ class PixabayApiService implements PixabayApiServiceInterface {
   /**
    * The HTTP client.
    *
-   * @var \GuzzleHttp\ClientInterface
+   * @var ClientInterface
    */
   protected $httpClient;
 
   /**
    * Configuration object.
    *
-   * @var \Drupal\Core\Config\Config|\Drupal\Core\Config\ImmutableConfig
+   * @var Config|ImmutableConfig
    */
   protected $config;
 
   /**
    * PixabayApiService constructor.
    *
-   * @param \GuzzleHttp\ClientInterface $http_client
+   * @param ClientInterface $http_client
    *   Http client.
-   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   * @param ConfigFactory $config_factory
    *   Configuration factory.
    */
   public function __construct(ClientInterface $http_client, ConfigFactory $config_factory) {
