diff --git a/field_redirection.info.yml b/field_redirection.info.yml
index a0efaa8..f9e81ce 100644
--- a/field_redirection.info.yml
+++ b/field_redirection.info.yml
@@ -1,5 +1,5 @@
 name: Field Redirection
 type: module
 description: Provides a field formatter to redirect the page to a URL. Work with the Link module and reference fields.
-core_version_requirement: ^8.7.7 || ^9
+core_version_requirement: ^9.1 || ^10
 package: Field types
diff --git a/src/FieldRedirectionResult.php b/src/FieldRedirectionResult.php
index f98e22d..903c837 100644
--- a/src/FieldRedirectionResult.php
+++ b/src/FieldRedirectionResult.php
@@ -22,7 +22,7 @@ class FieldRedirectionResult {
   /**
    * URL to redirect to.
    *
-   * @var \Drupal\Core\Url
+   * @var Url
    */
   protected $redirectUrl;
 
@@ -52,7 +52,7 @@ class FieldRedirectionResult {
    * @param array $headers
    *   Additional headers.
    *
-   * @return \Symfony\Component\HttpFoundation\RedirectResponse
+   * @return RedirectResponse
    *   Redirect response.
    *
    * @throws \LogicException
@@ -65,7 +65,7 @@ class FieldRedirectionResult {
   /**
    * Gets redirect URL.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   The url object.
    */
   protected function getRedirectUrl() {
@@ -90,7 +90,7 @@ class FieldRedirectionResult {
   /**
    * Factory method to create from a URL object.
    *
-   * @param \Drupal\Core\Url $url
+   * @param Url $url
    *   The URL object.
    *
    * @return \Drupal\field_redirection\FieldRedirectionResult
diff --git a/src/FieldRedirectionResultBuilder.php b/src/FieldRedirectionResultBuilder.php
index 0a8f381..6baa8a0 100644
--- a/src/FieldRedirectionResultBuilder.php
+++ b/src/FieldRedirectionResultBuilder.php
@@ -35,32 +35,32 @@ class FieldRedirectionResultBuilder {
   /**
    * Path Matcher.
    *
-   * @var \Drupal\Core\Path\PathMatcherInterface
+   * @var PathMatcherInterface
    */
   protected $pathMatcher;
 
   /**
    * Token service.
    *
-   * @var \Drupal\Core\Utility\Token
+   * @var Token
    */
   protected $token;
 
   /**
    * State service.
    *
-   * @var \Drupal\Core\State\StateInterface
+   * @var StateInterface
    */
   protected $state;
 
   /**
    * Constructs a new FieldRedirectionResultBuilder.
    *
-   * @param \Drupal\Core\Path\PathMatcherInterface $pathMatcher
+   * @param PathMatcherInterface $pathMatcher
    *   Path matcher.
-   * @param \Drupal\Core\Utility\Token $token
+   * @param Token $token
    *   Token service.
-   * @param \Drupal\Core\State\StateInterface $state
+   * @param StateInterface $state
    *   State service.
    */
   public function __construct(PathMatcherInterface $pathMatcher, Token $token, StateInterface $state) {
@@ -72,11 +72,11 @@ class FieldRedirectionResultBuilder {
   /**
    * Determine whether we should deny redirecting.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field items.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    * @param array $settings
    *   The field settings.
@@ -137,7 +137,7 @@ class FieldRedirectionResultBuilder {
 
     // Get the URL to redirect to.
     if (!$items->isEmpty()) {
-      /** @var \Drupal\Core\Url $redirect_url */
+      /** @var Url $redirect_url */
       $redirect_url = $this->getUrl($items);
     }
     // If no URL was provided, and the user does not have permission to bypass
@@ -181,16 +181,16 @@ class FieldRedirectionResultBuilder {
   /**
    * Builds a redirection result for a given set of values.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field items.
-   * @param \Symfony\Component\HttpFoundation\Request $request
+   * @param Request $request
    *   The request.
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param AccountInterface $account
    *   The account.
    * @param array $settings
    *   The field settings.
    *
-   * @return \Drupal\field_redirection\FieldRedirectionResult
+   * @return FieldRedirectionResult
    *   The redirection result.
    */
   public function buildResult(FieldItemListInterface $items, Request $request, AccountInterface $account, array $settings = []) {
@@ -204,10 +204,10 @@ class FieldRedirectionResultBuilder {
   /**
    * Provide the destination URL for the redirect.
    *
-   * @param \Drupal\Core\Field\FieldItemListInterface $items
+   * @param FieldItemListInterface $items
    *   The field items.
    *
-   * @return \Drupal\Core\Url
+   * @return Url
    *   A URL object representing the redirect destination.
    *
    * @throws \LogicException
diff --git a/src/Plugin/Field/FieldFormatter/FieldRedirectionFormatter.php b/src/Plugin/Field/FieldFormatter/FieldRedirectionFormatter.php
index da3d833..75a1de2 100644
--- a/src/Plugin/Field/FieldFormatter/FieldRedirectionFormatter.php
+++ b/src/Plugin/Field/FieldFormatter/FieldRedirectionFormatter.php
@@ -2,6 +2,10 @@
 
 namespace Drupal\field_redirection\Plugin\Field\FieldFormatter;
 
+use Drupal\Core\Session\AccountInterface;
+use Drupal\field_redirection\FieldRedirectionResultBuilder;
+use Symfony\Component\HttpFoundation\Request;
+use Drupal\field_redirection\FieldRedirectionResult;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\FormatterBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -25,21 +29,21 @@ class FieldRedirectionFormatter extends FormatterBase {
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var AccountInterface
    */
   protected $currentUser;
 
   /**
    * The redirect result builder.
    *
-   * @var \Drupal\field_redirection\FieldRedirectionResultBuilder
+   * @var FieldRedirectionResultBuilder
    */
   protected $redirectResultBuilder;
 
   /**
    * The current Request object.
    *
-   * @var \Symfony\Component\HttpFoundation\Request
+   * @var Request
    */
   protected $request;
 
@@ -216,7 +220,7 @@ class FieldRedirectionFormatter extends FormatterBase {
       $response_code = $settings['code'];
     }
 
-    /** @var \Drupal\field_redirection\FieldRedirectionResult $result */
+    /** @var FieldRedirectionResult $result */
     $result = $this->redirectResultBuilder->buildResult($items, $this->request, $this->currentUser, $settings);
     if ($result->shouldRedirect()) {
       $result->asRedirectResponse($response_code)->send();
diff --git a/tests/src/Functional/FormatterConfigurationTest.php b/tests/src/Functional/FormatterConfigurationTest.php
index cb7c8d4..5e597f6 100644
--- a/tests/src/Functional/FormatterConfigurationTest.php
+++ b/tests/src/Functional/FormatterConfigurationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\field_redirection\Functional;
 
+use Drupal\node\Entity\NodeType;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\field_redirection\Traits\FieldRedirectionTestTrait;
 
@@ -43,14 +44,14 @@ class FormatterConfigurationTest extends BrowserTestBase {
   /**
    * The test content type to add fields.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $testContentType;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     $this->drupalLogin($this->rootUser);
@@ -68,9 +69,12 @@ class FormatterConfigurationTest extends BrowserTestBase {
     $edit = [
       'fields[url][region]' => 'content',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Your settings have been saved');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your settings have been saved');
 
     // Verify the 'danger' message displays correctly.
     $this->assertSession()
@@ -82,9 +86,12 @@ class FormatterConfigurationTest extends BrowserTestBase {
     $edit = [
       'display_modes_custom[full]' => TRUE,
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Your settings have been saved');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your settings have been saved');
 
     // Make the field display.
     $this->drupalGet('admin/structure/types/manage/' . $this->testContentType->id() . '/display/full');
@@ -92,9 +99,12 @@ class FormatterConfigurationTest extends BrowserTestBase {
     $edit = [
       'fields[url][region]' => 'content',
     ];
-    $this->drupalPostForm(NULL, $edit, 'Save');
+    $this->submitForm($edit, 'Save');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertText('Your settings have been saved');
+    // TODO: Drupal Rector Notice: Please delete the following comment after you've made any necessary changes.
+    // Verify the assertion: pageTextContains() for HTML responses, responseContains() for non-HTML responses.
+    // The passed text should be HTML decoded, exactly as a human sees it in the browser.
+    $this->assertSession()->pageTextContains('Your settings have been saved');
 
     // Confirm that the danger message does not display.
     $this->assertSession()
diff --git a/tests/src/Functional/FormatterRedirectTest.php b/tests/src/Functional/FormatterRedirectTest.php
index 2f7092b..1ec9c57 100644
--- a/tests/src/Functional/FormatterRedirectTest.php
+++ b/tests/src/Functional/FormatterRedirectTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\field_redirection\Functional;
 
+use Drupal\node\Entity\NodeType;
 use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\node\Entity\Node;
 use Drupal\Tests\BrowserTestBase;
@@ -36,14 +37,14 @@ class FormatterRedirectTest extends BrowserTestBase {
   /**
    * The test content type to add fields.
    *
-   * @var \Drupal\node\Entity\NodeType
+   * @var NodeType
    */
   protected $testContentType;
 
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 
     // Setup test content type and add a 'link' field.
diff --git a/tests/src/Kernel/FieldRedirectionResultBuilderLinkTest.php b/tests/src/Kernel/FieldRedirectionResultBuilderLinkTest.php
index 1bd45e7..c617795 100644
--- a/tests/src/Kernel/FieldRedirectionResultBuilderLinkTest.php
+++ b/tests/src/Kernel/FieldRedirectionResultBuilderLinkTest.php
@@ -42,7 +42,7 @@ class FieldRedirectionResultBuilderLinkTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->installSchema('system', 'sequences');
     $this->installEntitySchema('entity_test');
@@ -211,7 +211,7 @@ class FieldRedirectionResultBuilderLinkTest extends KernelTestBase {
    * @param array $values
    *   Optional values to create with.
    *
-   * @return \Drupal\Core\Entity\EntityInterface
+   * @return EntityInterface
    *   The entity.
    */
   protected function createTestEntity(array $values = []): EntityInterface {
diff --git a/tests/src/Traits/FieldRedirectionTestTrait.php b/tests/src/Traits/FieldRedirectionTestTrait.php
index 7754e12..b529a9c 100644
--- a/tests/src/Traits/FieldRedirectionTestTrait.php
+++ b/tests/src/Traits/FieldRedirectionTestTrait.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\field_redirection\Traits;
 
+use Drupal\node\Entity\NodeType;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\link\LinkItemInterface;
@@ -14,7 +15,7 @@ trait FieldRedirectionTestTrait {
   /**
    * Sets up a content type with a link field.
    *
-   * @return \Drupal\node\Entity\NodeType
+   * @return NodeType
    *   Created content type.
    */
   public function setupContentTypeAndField() {
diff --git a/tests/src/Unit/FieldRedirectionResultUnitTest.php b/tests/src/Unit/FieldRedirectionResultUnitTest.php
index a666a20..2372f20 100644
--- a/tests/src/Unit/FieldRedirectionResultUnitTest.php
+++ b/tests/src/Unit/FieldRedirectionResultUnitTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\field_redirection\Unit;
 
+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Url;
 use Drupal\Core\Utility\UnroutedUrlAssemblerInterface;
 use Drupal\field_redirection\FieldRedirectionResult;
@@ -18,6 +19,7 @@ use Symfony\Component\HttpFoundation\RedirectResponse;
  */
 class FieldRedirectionResultUnitTest extends UnitTestCase {
 
+  use ProphecyTrait;
   /**
    * @covers ::fromUrl
    */
