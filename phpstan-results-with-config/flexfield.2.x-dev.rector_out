modules/contrib/flexfield/flexfield.module
modules/contrib/flexfield/flexfield.theme.inc
modules/contrib/flexfield/src/Annotation/FlexFieldType.php
modules/contrib/flexfield/src/Plugin/Field/FieldFormatter/FlexFormatter.php
modules/contrib/flexfield/src/Plugin/Field/FieldFormatter/FlexFormatterBase.php
modules/contrib/flexfield/src/Plugin/Field/FieldFormatter/FlexInlineFormatter.php
modules/contrib/flexfield/src/Plugin/Field/FieldFormatter/FlexListFormatter.php
modules/contrib/flexfield/src/Plugin/Field/FieldFormatter/FlexTableFormatter.php
modules/contrib/flexfield/src/Plugin/Field/FieldFormatter/FlexTemplateFormatter.php
modules/contrib/flexfield/src/Plugin/Field/FieldType/FlexItem.php
modules/contrib/flexfield/src/Plugin/Field/FieldWidget/FlexStackedWidget.php
modules/contrib/flexfield/src/Plugin/Field/FieldWidget/FlexWidget.php
modules/contrib/flexfield/src/Plugin/Field/FieldWidget/FlexWidgetBase.php
modules/contrib/flexfield/src/Plugin/FlexFieldType/Checkbox.php
modules/contrib/flexfield/src/Plugin/FlexFieldType/Decimal.php
modules/contrib/flexfield/src/Plugin/FlexFieldType/FloatType.php
modules/contrib/flexfield/src/Plugin/FlexFieldType/Integer.php
modules/contrib/flexfield/src/Plugin/FlexFieldType/NumericBase.php
modules/contrib/flexfield/src/Plugin/FlexFieldType/Radios.php
modules/contrib/flexfield/src/Plugin/FlexFieldType/Select.php
modules/contrib/flexfield/src/Plugin/FlexFieldType/Text.php
modules/contrib/flexfield/src/Plugin/FlexFieldType/Uuid.php
modules/contrib/flexfield/src/Plugin/FlexFieldTypeBase.php
modules/contrib/flexfield/src/Plugin/FlexFieldTypeInterface.php
modules/contrib/flexfield/src/Plugin/FlexFieldTypeManager.php
modules/contrib/flexfield/src/Plugin/FlexFieldTypeManagerInterface.php
modules/contrib/flexfield/tests/src/Functional/LoadTest.php

15 files with changes
=====================

1) modules/contrib/flexfield/tests/src/Functional/LoadTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\flexfield\Functional;

+use Drupal\user\UserInterface;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;

@@ @@
   /**
    * A user with permission to administer site configuration.
    *
-   * @var \Drupal\user\UserInterface
+   * @var UserInterface
    */
   protected $user;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
     $this->user = $this->drupalCreateUser(['administer site configuration']);
     $this->drupalLogin($this->user);
@@ @@
    */
   public function testLoad() {
     $this->drupalGet(Url::fromRoute('<front>'));
-    $this->assertResponse(200);
+    $this->assertSession()->statusCodeEquals(200);
   }

 }
    ----------- end diff -----------

Applied rules:
 * AssertResponseRector
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/flexfield/src/Plugin/FlexFieldTypeManagerInterface.php:12

    ---------- begin diff ----------
@@ @@
    * @param  array $settings
    *   The array of Drupal\flexfield\Plugin\Field\FieldType\FlexItem settings.
    *
-   * @return \Drupal\flexfield\Plugin\FlexFieldTypeInterface[]
+   * @return FlexFieldTypeInterface[]
    */
   public function getFlexFieldItems(array $settings);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


3) modules/contrib/flexfield/src/Plugin/FlexFieldTypeManager.php:19

    ---------- begin diff ----------
@@ @@
    * @param \Traversable $namespaces
    *   An object that implements \Traversable which contains the root paths
    *   keyed by the corresponding namespace to look for plugin implementations.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend instance to use.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/flexfield/src/Plugin/FlexFieldTypeInterface.php:34

    ---------- begin diff ----------
@@ @@
    *   The form where the settings form is being included in. Provided as a
    *   reference. Implementations of this method should return a new form
    *   element which will be inserted into the main settings form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the (entire) configuration form.
    *
    * @return array
@@ @@
    *   The form where the settings form is being included in. Provided as a
    *   reference. Implementations of this method should return a new form
    *   element which will be inserted into the main settings form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *   The form state of the (entire) configuration form.
    *
    * @return array
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


5) modules/contrib/flexfield/src/Plugin/Field/FieldWidget/FlexWidgetBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flexfield\Plugin\Field\FieldWidget;

+use Drupal\flexfield\Plugin\FlexFieldTypeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
@@ @@
   /**
    * The flexfield manager
    *
-   * @var \Drupal\flexfield\Plugin\FlexFieldTypeManagerInterface
+   * @var FlexFieldTypeManagerInterface
    */
   protected $flexFieldManager;

@@ @@
   /**
    * Get the flexfield items for this field.
    *
-   * @return \Drupal\flexfield\Plugin\FlexFieldTypeInterface[]
+   * @return FlexFieldTypeInterface[]
    */
   public function getFlexFieldItems() {
     return $this->flexFieldManager->getFlexFieldItems($this->fieldDefinition->getSettings());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/flexfield/src/Plugin/Field/FieldWidget/FlexWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flexfield\Plugin\Field\FieldWidget;

+use Drupal\flexfield\Plugin\FlexFieldTypeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Field\FieldItemListInterface;
@@ @@
     ];

     $proportions = $this->getSettings()['proportions'];
-    /** @var \Drupal\flexfield\Plugin\FlexFieldTypeInterface $flexitem */
+    /** @var FlexFieldTypeInterface $flexitem */
     foreach ($this->getFlexFieldItems() as $name => $flexitem) {
       $elements['proportions'][$name] = [
         '#type' => 'select',
@@ @@
     $element['wrapper_prefix']['#markup'] = '<div class="' . implode(' ', $classes) . '">';

     $proportions = $this->getSettings()['proportions'];
-    /** @var \Drupal\flexfield\Plugin\FlexFieldTypeInterface $flexitem */
+    /** @var FlexFieldTypeInterface $flexitem */
     foreach ($this->getFlexFieldItems() as $name => $flexitem) {
       $element[$name] = $flexitem->widget($items, $delta, $element, $form, $form_state);
       $element[$name]['#attributes']['class'][] = 'flexfield-inline__field';
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/flexfield/src/Plugin/Field/FieldWidget/FlexStackedWidget.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flexfield\Plugin\Field\FieldWidget;

+use Drupal\flexfield\Plugin\FlexFieldTypeInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
@@ @@

     $element = parent::formElement($items, $delta, $element, $form, $form_state);

-    /** @var \Drupal\flexfield\Plugin\FlexFieldTypeInterface $flexitem */
+    /** @var FlexFieldTypeInterface $flexitem */
     foreach ($this->getFlexFieldItems() as $name => $flexitem) {
       $element[$name] = $flexitem->widget($items, $delta, $element, $form, $form_state);
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/flexfield/src/Plugin/Field/FieldType/FlexItem.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flexfield\Plugin\Field\FieldType;

+use Drupal\flexfield\Plugin\FlexFieldTypeInterface;
+use Drupal\flexfield\Plugin\FlexFieldTypeManagerInterface;
 use Drupal\Component\Utility\Random;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemBase;
@@ @@
       $field_settings = $this->getSetting('field_settings');
     }

-    /** @var \Drupal\flexfield\Plugin\FlexFieldTypeInterface[] $flexitems */
+    /** @var FlexFieldTypeInterface[] $flexitems */
     $flexitems = $this->getFlexFieldManager()->getFlexFieldItems($settings);

     $wrapper_id = 'flexfield-settings-wrapper';
@@ @@
     ];

     // Build the table rows and columns.
-    /** @var \Drupal\flexfield\Plugin\FlexFieldTypeInterface $flexitem */
+    /** @var FlexFieldTypeInterface $flexitem */
     foreach ($flexitems as $name => $flexitem) {
       $definition = $flexitem->getPluginDefinition();
       $weight = isset($field_settings[$name]['weight']) ? $field_settings[$name]['weight'] : 0;
@@ @@
   /**
    * Get the flexfield_type manager plugin.
    *
-   * @return \Drupal\flexfield\Plugin\FlexFieldTypeManagerInterface
+   * @return FlexFieldTypeManagerInterface
    */
   public function getFlexFieldManager() {
     return \Drupal::service('plugin.manager.flexfield_type');
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/flexfield/src/Plugin/Field/FieldFormatter/FlexTemplateFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flexfield\Plugin\Field\FieldFormatter;

+use Drupal\flexfield\Plugin\FlexFieldTypeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
     $tokens = [
       '#theme' => 'item_list',
     ];
-    /** @var \Drupal\flexfield\Plugin\FlexFieldTypeInterface $flexitem */
+    /** @var FlexFieldTypeInterface $flexitem */
     foreach ($this->getFlexFieldItems() as $name => $flexitem) {
       $label = $flexitem->getLabel();
       $tokens['#items'][] = "[$name]: $label value";
@@ @@
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
@@ @@
   protected function viewValue(FieldItemInterface $item) {
     $output = '';
     $replacements = [];
-    /** @var \Drupal\flexfield\Plugin\FlexFieldTypeInterface $flexitem */
+    /** @var FlexFieldTypeInterface $flexitem */
     foreach ($this->getFlexFieldItems() as $name => $flexitem) {
       $replacements["[$name]"] = $flexitem->value($item);
       $replacements["[$name:label]"] = $flexitem->getLabel();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


10) modules/contrib/flexfield/src/Plugin/Field/FieldFormatter/FlexTableFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flexfield\Plugin\Field\FieldFormatter;

+use Drupal\flexfield\Plugin\FlexFieldTypeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
     $component = Html::cleanCssIdentifier($this->fieldDefinition->get('field_name'));
     $flexitems = $this->getFlexFieldItems();
     $header = [];
-    /** @var \Drupal\flexfield\Plugin\FlexFieldTypeInterface $flexitem */
+    /** @var FlexFieldTypeInterface $flexitem */
     foreach ($flexitems as $flexitem) {
       $header[] = $flexitem->getLabel();
     }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/flexfield/src/Plugin/Field/FieldFormatter/FlexListFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flexfield\Plugin\Field\FieldFormatter;

+use Drupal\flexfield\Plugin\FlexFieldTypeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
@@ @@
       ],
     ];

-    /** @var \Drupal\flexfield\Plugin\FlexFieldTypeInterface $flexitem */
+    /** @var FlexFieldTypeInterface $flexitem */
     foreach ($this->getFlexFieldItems() as $name => $flexitem) {
       $output['#items'][] = [
         '#markup' => $flexitem->getLabel() . ': ' . $flexitem->value($item),
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/flexfield/src/Plugin/Field/FieldFormatter/FlexInlineFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flexfield\Plugin\Field\FieldFormatter;

+use Drupal\flexfield\Plugin\FlexFieldTypeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
@@ @@

     $output = [];

-    /** @var \Drupal\flexfield\Plugin\FlexFieldTypeInterface $flexitem */
+    /** @var FlexFieldTypeInterface $flexitem */
     foreach ($this->getFlexFieldItems() as $name => $flexitem) {
       if ($this->getSetting('show_labels')) {
         $output[] = implode($this->getSetting('label_separator'), [
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/flexfield/src/Plugin/Field/FieldFormatter/FlexFormatterBase.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flexfield\Plugin\Field\FieldFormatter;

+use Drupal\flexfield\Plugin\FlexFieldTypeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemInterface;
@@ @@
   /**
    * Get the flexfield items for this field.
    *
-   * @return \Drupal\flexfield\Plugin\FlexFieldTypeInterface[]
+   * @return FlexFieldTypeInterface[]
    */
   public function getFlexFieldItems() {
     return $this->flexFieldManager->getFlexFieldItems($this->fieldDefinition->getSettings());
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/flexfield/src/Plugin/Field/FieldFormatter/FlexFormatter.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flexfield\Plugin\Field\FieldFormatter;

+use Drupal\flexfield\Plugin\FlexFieldTypeInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Field\FieldDefinitionInterface;
@@ @@
     ];

     $label_display = $this->getSetting('label_display');
-    /** @var \Drupal\flexfield\Plugin\FlexFieldTypeInterface $flexitem */
+    /** @var FlexFieldTypeInterface $flexitem */
     foreach ($this->getFlexFieldItems() as $name => $flexitem) {
       $form['label_display'][$name] = [
         '#type' => 'select',
@@ @@
     $summary = [];

     $label_display = $this->getSetting('label_display');
-    /** @var \Drupal\flexfield\Plugin\FlexFieldTypeInterface $flexitem */
+    /** @var FlexFieldTypeInterface $flexitem */
     foreach ($this->getFlexFieldItems() as $name => $flexitem) {
       $summary[] = t('@label label display: @label_display', [
         '@label' => $flexitem->getLabel(),
@@ @@
   /**
    * Generate the output appropriate for one field item.
    *
-   * @param \Drupal\Core\Field\FieldItemInterface $item
+   * @param FieldItemInterface $item
    *   One field item.
    *
    * @return string
@@ @@
     ];
     $label_display = $this->getSetting('label_display');

-    /** @var \Drupal\flexfield\Plugin\FlexFieldTypeInterface $flexitem */
+    /** @var FlexFieldTypeInterface $flexitem */
     foreach ($this->getFlexFieldItems() as $name => $flexitem) {
       $output['#items'][] = [
         'name' => $name,
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/flexfield/src/Annotation/FlexFieldType.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\flexfield\Annotation;

+use Drupal\Core\Annotation\Translation;
 use Drupal\Component\Annotation\Plugin;

 /**
@@ @@
   /**
    * The label of the plugin.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
@@ @@
   /**
    * A short human readable description for the flexfield type.
    *
-   * @var \Drupal\Core\Annotation\Translation
+   * @var Translation
    *
    * @ingroup plugin_translatable
    */
    ----------- end diff -----------

Applied rules:
 * PseudoNamespaceToNamespaceRector


 [OK] 15 files have been changed by Rector                                      

