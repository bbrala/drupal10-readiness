modules/contrib/oml/outgoing_mail_logger.install
modules/contrib/oml/outgoing_mail_logger.module
modules/contrib/oml/src/Breadcrumb/BreadcrumbBuilder.php
modules/contrib/oml/src/Commands/OutgoingMailLoggerCommands.php
modules/contrib/oml/src/Controller/OutgoingMailLoggerController.php
modules/contrib/oml/src/Event/LogCreatedEvent.php
modules/contrib/oml/src/Event/LogUpdatedEvent.php
modules/contrib/oml/src/Event/MailSentEvent.php
modules/contrib/oml/src/Event/OutgoingMailLoggerEvents.php
modules/contrib/oml/src/EventSubscriber/OutgoingMailLoggerSubscriber.php
modules/contrib/oml/src/Form/FIlterForm.php
modules/contrib/oml/src/Form/ResendForm.php
modules/contrib/oml/src/Form/SettingsForm.php
modules/contrib/oml/src/Model/OutgoingMailLog.php
modules/contrib/oml/src/OmlSwiftmailEventListener.php
modules/contrib/oml/src/OutgoingMailLogger.php
modules/contrib/oml/tests/src/Functional/OutgoingMailLoggerTest.php

9 files with changes
====================

1) modules/contrib/oml/tests/src/Functional/OutgoingMailLoggerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\outgoing_mail_logger\Tests;

+use Drupal\outgoing_mail_logger\OutgoingMailLogger;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\outgoing_mail_logger\Form\SettingsForm;
 use Drupal\Tests\system\Kernel\Theme\FunctionsTest;
@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     parent::setUp();
 //    $config_map = [
 //      'outgoing_mail_logger.settings' => [
@@ @@
    * Test site information form.
    */
   public function testFieldStorageSettingsForm() {
-    /** @var \Drupal\outgoing_mail_logger\OutgoingMailLogger $oml_service */
+    /** @var OutgoingMailLogger $oml_service */
     $oml_service = \Drupal::service('outgoing_mail_logger.service');
     $this->assertEquals(15, $oml_service->getConfigMaxAge());
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/oml/src/OutgoingMailLogger.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\outgoing_mail_logger;

+use Drupal\Core\Database\StatementInterface;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Link;
 use Drupal\Core\Mail\MailManagerInterface;
@@ @@
   // SERVICE OPERATIONS
   //////////////////////////////////////////////////////
   //////////////////////////////////////////////////////
-
   /**
    * Returns TRUE if the OML log can be sent based on global resend setting, user access, and log properties.
    *
-   * @param \Drupal\outgoing_mail_logger\Model\OutgoingMailLog $log
+   * @param OutgoingMailLog $log
    * @param string $reason
    *
    * @return bool
@@ @@
   /**
    * @param int $id
    *
-   * @return \Drupal\outgoing_mail_logger\Model\OutgoingMailLog|null
+   * @return OutgoingMailLog|null
    */
   public function getLogById(int $id) : ?OutgoingMailLog
   {
@@ @@
   }

   /**
-   * @param \Drupal\outgoing_mail_logger\Model\OutgoingMailLog $log
+   * @param OutgoingMailLog $log
    *
-   * @return \Drupal\Core\Database\StatementInterface|int|string|null
+   * @return StatementInterface|int|string|null
    */
   public function saveLog(OutgoingMailLog $log)
   {
@@ @@
           ->fields($data)
           ->execute();
         $log->setId($result);
-        $this->event_dispatcher->dispatch(OutgoingMailLoggerEvents::OML_EVENT_LOG_CREATED, new LogCreatedEvent($log));
+        $this->event_dispatcher->dispatch(new LogCreatedEvent($log), OutgoingMailLoggerEvents::OML_EVENT_LOG_CREATED);
       }
       else {
         unset($data['id']);
@@ @@
           ->condition('id', $log->getId())
           ->fields($data)
           ->execute();
-        $this->event_dispatcher->dispatch(OutgoingMailLoggerEvents::OML_EVENT_LOG_UPDATED, new LogUpdatedEvent($log));
+        $this->event_dispatcher->dispatch(new LogUpdatedEvent($log), OutgoingMailLoggerEvents::OML_EVENT_LOG_UPDATED);
       }

     } catch (\Exception $e) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * MakeDispatchFirstArgumentEventRector
 * WrapReturnRector


3) modules/contrib/oml/src/Form/ResendForm.php:7

    ---------- begin diff ----------
@@ @@
 namespace Drupal\outgoing_mail_logger\Form;


+use Drupal\Core\Form\FormBase;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
 use Drupal\Core\Ajax\MessageCommand;
@@ @@
 use Drupal\Core\Url;
 use Symfony\Component\DependencyInjection\ContainerInterface;

-class ResendForm extends \Drupal\Core\Form\FormBase {
+class ResendForm extends FormBase {

   /** @var OutgoingMailLogger */
   protected $outgoing_mail_logger;
@@ @@
   /**
    * Returns reload form argument (build-info[1])
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return bool
    */
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/oml/src/Form/FIlterForm.php:353

    ---------- begin diff ----------
@@ @@
   /**
    * Process filter-form submission
    *
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   * @param FormStateInterface $form_state
    *
    * @return array
    */
@@ @@
   /**
    * Adds query conditions based on defined filters
    *
-   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   * @param SelectInterface $query
    * @param array $filters
    */
   protected function processQueryFilters(SelectInterface $query, array $filters)
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/oml/src/Event/MailSentEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\outgoing_mail_logger\Event;

-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;

 /**
  * Class MailSentEvent
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/oml/src/Event/LogUpdatedEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\outgoing_mail_logger\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\outgoing_mail_logger\Model\OutgoingMailLog;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class LogUpdatedEvent
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


7) modules/contrib/oml/src/Event/LogCreatedEvent.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\outgoing_mail_logger\Event;

+use Symfony\Contracts\EventDispatcher\Event;
 use Drupal\outgoing_mail_logger\Model\OutgoingMailLog;
-use Symfony\Component\EventDispatcher\Event;

 /**
  * Class LogCreatedEvent
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * RenameClassRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/oml/src/Controller/OutgoingMailLoggerController.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\outgoing_mail_logger\Controller;

+use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\MessageCommand;
 use Drupal\Core\Ajax\OpenModalDialogCommand;
@@ @@

       $data['user'] = 'Undefined';
       if ($data['uid']) {
-        /** @var \Drupal\Core\Session\AccountInterface $user */
+        /** @var AccountInterface $user */
         if ($user = User::load($data['uid'])) {
           $data['user'] = $user->getDisplayName() . " ({$data['uid']})";
         }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


9) modules/contrib/oml/src/Breadcrumb/BreadcrumbBuilder.php:15

    ---------- begin diff ----------
@@ @@
  */
 class BreadcrumbBuilder implements BreadcrumbBuilderInterface {

-  /** @var \Drupal\Core\Session\AccountProxy $current_user */
+  /** @var AccountProxy $current_user */
   protected $current_user;

   /**
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [ERROR] Could not process "modules/contrib/oml/src/OmlSwiftmailEventListener.php"
         file, due to:                                                          
         "Analyze error: "Class Swift_Events_SendListener not found.". Include  
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [ERROR] Could not process "modules/contrib/oml/outgoing_mail_logger.module" file,
         due to:                                                                
         "Analyze error: "Class Swift_Events_SendListener not found.". Include  
         your files in "$rectorConfig->autoloadPaths([...]);" or                
         "$rectorConfig->bootstrapFiles([...]);" in "rector.php" config.        
         See https://github.com/rectorphp/rector#configuration".                

 [WARNING] 3 nodes were removed                                                 

