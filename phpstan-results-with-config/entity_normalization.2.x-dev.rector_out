modules/contrib/entity_normalization/entity_normalization_normalizers/src/Normalizer/DateTimeToEpochNormalizer.php
modules/contrib/entity_normalization/entity_normalization_normalizers/src/Normalizer/EntityUrlNormalizer.php
modules/contrib/entity_normalization/entity_normalization_normalizers/src/Normalizer/NodeTypeNormalizer.php
modules/contrib/entity_normalization/entity_normalization_normalizers/src/Normalizer/NullNormalizer.php
modules/contrib/entity_normalization/entity_normalization_normalizers/src/Normalizer/RichTextNormalizer.php
modules/contrib/entity_normalization/entity_normalization_normalizers/src/Normalizer/TermParentIdNormalizer.php
modules/contrib/entity_normalization/entity_normalization_normalizers/tests/src/Unit/Normalizer/DateTimeToEpochNormalizerTest.php
modules/contrib/entity_normalization/entity_normalization_normalizers/tests/src/Unit/Normalizer/EntityUrlNormalizerTest.php
modules/contrib/entity_normalization/entity_normalization_normalizers/tests/src/Unit/Normalizer/NodeTypeNormalizerTest.php
modules/contrib/entity_normalization/entity_normalization_normalizers/tests/src/Unit/Normalizer/NullNormalizerTest.php
modules/contrib/entity_normalization/entity_normalization_normalizers/tests/src/Unit/Normalizer/RichTextNormalizerTest.php
modules/contrib/entity_normalization/entity_normalization_normalizers/tests/src/Unit/Normalizer/TermParentIdNormalizerTest.php
modules/contrib/entity_normalization/src/EntityConfig.php
modules/contrib/entity_normalization/src/EntityConfigInterface.php
modules/contrib/entity_normalization/src/EntityNormalizationManager.php
modules/contrib/entity_normalization/src/EntityNormalizationManagerInterface.php
modules/contrib/entity_normalization/src/FieldConfig.php
modules/contrib/entity_normalization/src/FieldConfigInterface.php
modules/contrib/entity_normalization/src/Normalizer/EntityConfigNormalizer.php
modules/contrib/entity_normalization/src/Normalizer/FieldItemListNormalizer.php
modules/contrib/entity_normalization/src/Normalizer/FieldItemNormalizer.php
modules/contrib/entity_normalization/tests/bootstrap.php
modules/contrib/entity_normalization/tests/src/Unit/EntityNormalizationManagerTest.php
modules/contrib/entity_normalization/tests/src/Unit/FieldItemNormalizerTest.php

20 files with changes
=====================

1) modules/contrib/entity_normalization/tests/src/Unit/FieldItemNormalizerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_normalization\Unit\Normalizer;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Field\FieldItemInterface;
 use Drupal\entity_normalization\FieldConfigInterface;
 use Drupal\entity_normalization\Normalizer\FieldItemNormalizer;
@@ @@
  */
 class FieldItemNormalizerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The normalizer to test.
    *
-   * @var \Drupal\entity_normalization\Normalizer\FieldItemNormalizer
+   * @var FieldItemNormalizer
    */
   protected $normalizer;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->normalizer = new FieldItemNormalizer();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


2) modules/contrib/entity_normalization/tests/src/Unit/EntityNormalizationManagerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_normalization\Unit;

+use Prophecy\PhpUnit\ProphecyTrait;
+use Prophecy\Prophecy\ObjectProphecy;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\entity_normalization\EntityNormalizationManager;
@@ @@
  */
 class EntityNormalizationManagerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The module handler.
    *
-   * @var \Drupal\Core\Extension\ModuleHandlerInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var ModuleHandlerInterface|ObjectProphecy
    */
   protected $moduleHandler;

@@ @@
   /**
    * Cache backend instance.
    *
-   * @var \Drupal\Core\Cache\CacheBackendInterface|\Prophecy\Prophecy\ObjectProphecy
+   * @var CacheBackendInterface|ObjectProphecy
    */
   protected $cacheBackend;

@@ @@
   /**
    * The entity normalization manager.
    *
-   * @var \Drupal\entity_normalization\EntityNormalizationManager
+   * @var EntityNormalizationManager
    */
   protected $entityNormalizationManager;

@@ @@
    * @param string $bundle
    *   Entity bundle.
    *
-   * @return \Drupal\node\NodeInterface
+   * @return NodeInterface
    *   The mocked entity.
    */
   private function getMockedEntity($type, $bundle) {
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


3) modules/contrib/entity_normalization/src/Normalizer/FieldItemNormalizer.php:28

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function normalize($object, $format = NULL, array $context = []) {
-    /** @var \Drupal\Core\Field\FieldItemInterface $object */
-
+    /** @var FieldItemInterface $object */
     if ($object instanceof StringItem
       || $object instanceof ListStringItem
       || $object instanceof DateTimeItem
@@ @@
         'alt' => $object->get('alt')->getValue(),
         'title' => $object->get('title')->getValue(),
         // @todo find a way to speed up the url generation, this takes more than 30% of the time.
-        'url' => file_create_url($object->entity->getFileUri()),
+        'url' => \Drupal::service('file_url_generator')->generateAbsoluteString($object->entity->getFileUri()),
       ];
       return $normalizedValue;
     }
    ----------- end diff -----------

Applied rules:
 * FileCreateUrlRector
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


4) modules/contrib/entity_normalization/src/Normalizer/FieldItemListNormalizer.php:27

    ---------- begin diff ----------
@@ @@
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The current service container.
    */
   public function __construct(ContainerInterface $container) {
@@ @@
    * {@inheritdoc}
    */
   public function normalize($object, $format = NULL, array $context = []) {
-    /** @var \Drupal\Core\Field\FieldItemListInterface $object */
-
+    /** @var FieldItemListInterface $object */
     $fieldDefinition = $object->getFieldDefinition();

     $nName = $context['field_config']->getNormalizerName();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


5) modules/contrib/entity_normalization/src/Normalizer/EntityConfigNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_normalization\Normalizer;

+use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\entity_normalization\EntityNormalizationManagerInterface;
 use Drupal\serialization\Normalizer\NormalizerBase;
@@ @@
   /**
    * The service container.
    *
-   * @var \Symfony\Component\DependencyInjection\ContainerInterface
+   * @var ContainerInterface
    */
   protected $container;

@@ @@
   /**
    * The plugin manager for entity normalization definitions.
    *
-   * @var \Drupal\entity_normalization\EntityNormalizationManagerInterface
+   * @var EntityNormalizationManagerInterface
    */
   protected $normalizationManager;

@@ @@
   /**
    * Constructor.
    *
-   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param ContainerInterface $container
    *   The current service container.
-   * @param \Drupal\entity_normalization\EntityNormalizationManagerInterface $normalizationManager
+   * @param EntityNormalizationManagerInterface $normalizationManager
    *   The plugin manager for entity normalization definitions.
    */
   public function __construct(ContainerInterface $container, EntityNormalizationManagerInterface $normalizationManager) {
@@ @@
    * {@inheritdoc}
    */
   public function normalize($object, $format = NULL, array $context = []) {
-    /** @var \Drupal\Core\Entity\FieldableEntityInterface $object */
-
+    /** @var FieldableEntityInterface $object */
     $config = $this->normalizationManager->getEntityConfig($object, $format);

     $result = [];
@@ @@
     }

     foreach ($config->getNormalizers() as $normalizer) {
-      /** @var \Symfony\Component\Serializer\Normalizer\NormalizerInterface $n */
+      /** @var NormalizerInterface $n */
       $n = $this->container->get($normalizer);
       if ($n->supportsNormalization($object, $format)) {
         $result = array_merge($result, $n->normalize($object, $format, $context));
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


6) modules/contrib/entity_normalization/src/EntityNormalizationManagerInterface.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * Is there is a configuration for the given entity and normalization format.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity.
    * @param string|null $format
    *   Format the normalization result will be encoded as.
@@ @@
   /**
    * Gets the configuration for a given entity and normalization format.
    *
-   * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
+   * @param FieldableEntityInterface $entity
    *   The entity.
    * @param string|null $format
    *   Format the normalization result will be encoded as.
    *
-   * @return \Drupal\entity_normalization\EntityConfigInterface|null
+   * @return EntityConfigInterface|null
    *   The configuration or NULL when not found.
    */
   public function getEntityConfig(FieldableEntityInterface $entity, $format = NULL);
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


7) modules/contrib/entity_normalization/src/EntityNormalizationManager.php:28

    ---------- begin diff ----------
@@ @@
   /**
    * Constructor.
    *
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   The cache backend.
    */
   public function __construct(ModuleHandlerInterface $module_handler, CacheBackendInterface $cache_backend) {
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector
 * ChangeMethodVisibilityRector


8) modules/contrib/entity_normalization/src/EntityConfigInterface.php:34

    ---------- begin diff ----------
@@ @@
   /**
    * Gets a list of field definitions.
    *
-   * @return \Drupal\entity_normalization\FieldConfigInterface[]
+   * @return FieldConfigInterface[]
    *   List of field definitions.
    */
   public function getFields();
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector


9) modules/contrib/entity_normalization/src/EntityConfig.php:11

    ---------- begin diff ----------
@@ @@
   /**
    * A list of field configurations.
    *
-   * @var \Drupal\entity_normalization\FieldConfigInterface[]
+   * @var FieldConfigInterface[]
    */
   protected $fields;
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * ChangeMethodVisibilityRector


10) modules/contrib/entity_normalization/entity_normalization_normalizers/tests/src/Unit/Normalizer/TermParentIdNormalizerTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The normalizer to test.
    *
-   * @var \Drupal\entity_normalization_normalizers\Normalizer\TermParentIdNormalizer
+   * @var TermParentIdNormalizer
    */
   protected $normalizer;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->normalizer = new TermParentIdNormalizer();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


11) modules/contrib/entity_normalization/entity_normalization_normalizers/tests/src/Unit/Normalizer/RichTextNormalizerTest.php:16

    ---------- begin diff ----------
@@ @@
   /**
    * The normalizer to test.
    *
-   * @var \Drupal\entity_normalization_normalizers\Normalizer\RichTextNormalizer
+   * @var RichTextNormalizer
    */
   protected $normalizer;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->normalizer = new RichTextNormalizer();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


12) modules/contrib/entity_normalization/entity_normalization_normalizers/tests/src/Unit/Normalizer/NullNormalizerTest.php:13

    ---------- begin diff ----------
@@ @@
   /**
    * The normalizer to test.
    *
-   * @var \Drupal\entity_normalization_normalizers\Normalizer\NullNormalizer
+   * @var NullNormalizer
    */
   protected $normalizer;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->normalizer = new NullNormalizer();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


13) modules/contrib/entity_normalization/entity_normalization_normalizers/tests/src/Unit/Normalizer/NodeTypeNormalizerTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The normalizer to test.
    *
-   * @var \Drupal\entity_normalization_normalizers\Normalizer\NodeTypeNormalizer
+   * @var NodeTypeNormalizer
    */
   protected $normalizer;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->normalizer = new NodeTypeNormalizer();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


14) modules/contrib/entity_normalization/entity_normalization_normalizers/tests/src/Unit/Normalizer/EntityUrlNormalizerTest.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\Tests\entity_normalization_normalizers\Unit\Normalizer;

+use Prophecy\PhpUnit\ProphecyTrait;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\GeneratedUrl;
 use Drupal\Core\Url;
@@ @@
  */
 class EntityUrlNormalizerTest extends UnitTestCase {

+  use ProphecyTrait;
   /**
    * The normalizer to test.
    *
-   * @var \Drupal\entity_normalization_normalizers\Normalizer\EntityUrlNormalizer
+   * @var EntityUrlNormalizer
    */
   protected $normalizer;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->normalizer = new EntityUrlNormalizer();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * AddProphecyTraitRector
 * RemoveDataProviderTestPrefixRector
 * AssertEqualsParameterToSpecificMethodsTypeRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


15) modules/contrib/entity_normalization/entity_normalization_normalizers/tests/src/Unit/Normalizer/DateTimeToEpochNormalizerTest.php:14

    ---------- begin diff ----------
@@ @@
   /**
    * The normalizer to test.
    *
-   * @var \Drupal\entity_normalization_normalizers\Normalizer\DateTimeToEpochNormalizer
+   * @var DateTimeToEpochNormalizer
    */
   protected $normalizer;

@@ @@
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->normalizer = new DateTimeToEpochNormalizer();
   }
    ----------- end diff -----------

Applied rules:
 * ExceptionAnnotationRector
 * RemoveDataProviderTestPrefixRector
 * ArgumentRemoverRector
 * RenameAnnotationRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddReturnTypeDeclarationRector
 * ChangeMethodVisibilityRector


16) modules/contrib/entity_normalization/entity_normalization_normalizers/src/Normalizer/TermParentIdNormalizer.php:13

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function normalize($object, $format = NULL, array $context = []) {
-    /** @var \Drupal\taxonomy\TermInterface $object */
-
+    /** @var TermInterface $object */
     $result = 0;
     if (!empty($object->parents)) {
       $result = (int) $object->parents[0];
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


17) modules/contrib/entity_normalization/entity_normalization_normalizers/src/Normalizer/RichTextNormalizer.php:1

    ---------- begin diff ----------
@@ @@

 namespace Drupal\entity_normalization_normalizers\Normalizer;

+use Drupal\text\Plugin\Field\FieldType\TextItemBase;
 use Drupal\text\Plugin\Field\FieldType\TextLongItem;
 use Drupal\text\Plugin\Field\FieldType\TextWithSummaryItem;
 use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
@@ @@
    * {@inheritdoc}
    */
   public function normalize($object, $format = NULL, array $context = []) {
-    /** @var \Drupal\text\Plugin\Field\FieldType\TextItemBase $object */
+    /** @var TextItemBase $object */
     return $object->getValue()['value'];
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


18) modules/contrib/entity_normalization/entity_normalization_normalizers/src/Normalizer/NodeTypeNormalizer.php:13

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function normalize($object, $format = NULL, array $context = []) {
-    /** @var \Drupal\node\NodeTypeInterface $object */
+    /** @var NodeTypeInterface $object */
     return $object->id();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


19) modules/contrib/entity_normalization/entity_normalization_normalizers/src/Normalizer/EntityUrlNormalizer.php:13

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function normalize($object, $format = NULL, array $context = []) {
-    /** @var \Drupal\Core\Entity\EntityInterface $object */
-
+    /** @var EntityInterface $object */
     return $object->toUrl()->toString(TRUE)->getGeneratedUrl();
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


20) modules/contrib/entity_normalization/entity_normalization_normalizers/src/Normalizer/DateTimeToEpochNormalizer.php:14

    ---------- begin diff ----------
@@ @@
    * {@inheritdoc}
    */
   public function normalize($data, $format = NULL, array $context = []) {
-    /** @var \Drupal\datetime\Plugin\Field\FieldType\DateTimeItem $data */
+    /** @var DateTimeItem $data */
     $date = new DateTime($data->getValue()['value']);
     return (int) $date->format('U');
   }
    ----------- end diff -----------

Applied rules:
 * ArgumentRemoverRector
 * PseudoNamespaceToNamespaceRector
 * WrapReturnRector
 * AddParamTypeDeclarationRector


 [OK] 20 files have been changed by Rector                                      

