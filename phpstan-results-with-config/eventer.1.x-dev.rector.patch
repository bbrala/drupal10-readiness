diff --git a/eventer.info.yml b/eventer.info.yml
index 4561c36..e39772d 100644
--- a/eventer.info.yml
+++ b/eventer.info.yml
@@ -1,6 +1,5 @@
 name: 'Hook Eventer'
 type: module
 description: 'Transform hooks to events.'
-core: 8.x
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 package: 'Other'
diff --git a/eventer.module b/eventer.module
index 845cfca..168d26c 100644
--- a/eventer.module
+++ b/eventer.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Cache\CacheBackendInterface;
 /**
  * @file
  * Contains eventer.module.
@@ -31,7 +32,7 @@ function eventer_help($route_name, RouteMatchInterface $route_match) {
 function eventer_module_implements_alter(&$implementations, $hook) {
   // @todo: Add settings to allow this detection.
   if (FALSE) {
-    /** @var \Drupal\Core\Cache\CacheBackendInterface $cacheBackend */
+    /** @var CacheBackendInterface $cacheBackend */
     $cacheBackend = \Drupal::service('cache.bootstrap');
     // Load cached data.
     $detected = [];
diff --git a/src/Controller/DetectedHooksController.php b/src/Controller/DetectedHooksController.php
index e05dbc3..466c169 100644
--- a/src/Controller/DetectedHooksController.php
+++ b/src/Controller/DetectedHooksController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\eventer\Controller;
 
+use Drupal\Core\Cache\ChainedFastBackend;
 use Drupal\Core\Controller\ControllerBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
@@ -17,7 +18,7 @@ class DetectedHooksController extends ControllerBase {
   /**
    * Drupal\Core\Cache\ChainedFastBackend definition.
    *
-   * @var \Drupal\Core\Cache\ChainedFastBackend
+   * @var ChainedFastBackend
    */
   protected $cacheBootstrap;
 
diff --git a/src/Decorator/ModuleHandlerDecorator.php b/src/Decorator/ModuleHandlerDecorator.php
index a2e3079..0814e98 100644
--- a/src/Decorator/ModuleHandlerDecorator.php
+++ b/src/Decorator/ModuleHandlerDecorator.php
@@ -33,7 +33,7 @@ class ModuleHandlerDecorator extends ModuleHandler {
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -46,9 +46,9 @@ class ModuleHandlerDecorator extends ModuleHandler {
    *   An associative array whose keys are the names of installed modules and
    *   whose values are Extension class parameters. This is normally the
    *   %container.modules% parameter being set up by DrupalKernel.
-   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   * @param CacheBackendInterface $cache_backend
    *   Cache backend for storing module hook implementation information.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   Event dispatcher.
    *
    * @see \Drupal\Core\DrupalKernel
@@ -77,8 +77,8 @@ class ModuleHandlerDecorator extends ModuleHandler {
     $eventParam = new HookEvent($hook, $module, $function, $args);
     // This allow an easiest debugging.
     $eventParam->setKey(EventerEvents::MODULE_HOOK . $module . '.' . $hook);
-    /** @var \Drupal\eventer\Event\HookEvent $event */
-    $event = $this->eventDispatcher->dispatch($eventParam->getKey(), $eventParam);
+    /** @var HookEvent $event */
+    $event = $this->eventDispatcher->dispatch($eventParam, $eventParam->getKey());
     return $event->getResult();
   }
 
@@ -97,8 +97,8 @@ class ModuleHandlerDecorator extends ModuleHandler {
       $eventParam = new HookEvent($hook, $module, $function, $args);
       // This allow an easiest debugging.
       $eventParam->setKey(EventerEvents::MODULE_HOOK . $module . '.' . $hook);
-      /** @var \Drupal\eventer\Event\HookEvent $event */
-      $event = $this->eventDispatcher->dispatch($eventParam->getKey(), $eventParam);
+      /** @var HookEvent $event */
+      $event = $this->eventDispatcher->dispatch($eventParam, $eventParam->getKey());
       $result = $event->getResult();
       if (isset($result) && is_array($result)) {
         $return = NestedArray::mergeDeep($return, $result);
@@ -111,8 +111,8 @@ class ModuleHandlerDecorator extends ModuleHandler {
     $eventParam = new HookEvent($hook, NULL, NULL, $args);
     // This allow an easiest debugging.
     $eventParam->setKey(EventerEvents::MODULE_HOOK . $hook);
-    /** @var \Drupal\eventer\Event\HookEvent $event */
-    $event = $this->eventDispatcher->dispatch($eventParam->getKey(), $eventParam);
+    /** @var HookEvent $event */
+    $event = $this->eventDispatcher->dispatch($eventParam, $eventParam->getKey());
     $result = $event->getResult();
     if (isset($result) && is_array($result)) {
       $return = NestedArray::mergeDeep($return, $result);
@@ -245,7 +245,7 @@ class ModuleHandlerDecorator extends ModuleHandler {
       $eventParam = new AlterEvent($eventAlter['hook'], $eventAlter['module'], $eventAlter['function'], $data, $context1, $context2);
       // This allow an easiest debugging.
       $eventParam->setKey($eventName);
-      /** @var \Drupal\eventer\Event\AlterEvent $event */
+      /** @var AlterEvent $event */
       $event = $this->eventDispatcher->dispatch($eventName, $eventParam);
       $data = $event->getData();
       $context1 = $event->getContext1();
diff --git a/src/Decorator/ThemeManagerDecorator.php b/src/Decorator/ThemeManagerDecorator.php
index 0e8b4aa..8034b35 100644
--- a/src/Decorator/ThemeManagerDecorator.php
+++ b/src/Decorator/ThemeManagerDecorator.php
@@ -24,7 +24,7 @@ class ThemeManagerDecorator extends ThemeManager {
   /**
    * Event dispatcher.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
@@ -33,13 +33,13 @@ class ThemeManagerDecorator extends ThemeManager {
    *
    * @param string $root
    *   The app root.
-   * @param \Drupal\Core\Theme\ThemeNegotiatorInterface $theme_negotiator
+   * @param ThemeNegotiatorInterface $theme_negotiator
    *   The theme negotiator.
-   * @param \Drupal\Core\Theme\ThemeInitializationInterface $theme_initialization
+   * @param ThemeInitializationInterface $theme_initialization
    *   The theme initialization.
-   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   * @param ModuleHandlerInterface $module_handler
    *   The module handler.
-   * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   * @param EventDispatcherInterface $eventDispatcher
    *   Event dispatcher.
    */
   public function __construct(
@@ -118,8 +118,8 @@ class ThemeManagerDecorator extends ThemeManager {
       $eventParam = new AlterEvent($eventAlter['hook'], $eventAlter['module'], $eventAlter['function'], $data, $context1, $context2);
       // This allow an easiest debugging.
       $eventParam->setKey($eventName);
-      /** @var \Drupal\eventer\Event\AlterEvent $event */
-      $event = $this->eventDispatcher->dispatch($eventName, $eventParam);
+      /** @var AlterEvent $event */
+      $event = $this->eventDispatcher->dispatch($eventParam, $eventName);
       $data = $event->getData();
       $context1 = $event->getContext1();
       $context2 = $event->getContext2();
diff --git a/src/Event/AlterEvent.php b/src/Event/AlterEvent.php
index e08abea..438a004 100644
--- a/src/Event/AlterEvent.php
+++ b/src/Event/AlterEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\eventer\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Defines an alter call replacement event.
diff --git a/src/Event/HookEvent.php b/src/Event/HookEvent.php
index a76c5b6..221d9a2 100644
--- a/src/Event/HookEvent.php
+++ b/src/Event/HookEvent.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\eventer\Event;
 
-use Symfony\Component\EventDispatcher\Event;
+use Symfony\Contracts\EventDispatcher\Event;
 
 /**
  * Defines an hook call replacement event.
diff --git a/src/EventSubscriber/LegacyHookSubscriber.php b/src/EventSubscriber/LegacyHookSubscriber.php
index 0b8ec08..821816b 100644
--- a/src/EventSubscriber/LegacyHookSubscriber.php
+++ b/src/EventSubscriber/LegacyHookSubscriber.php
@@ -29,7 +29,7 @@ class LegacyHookSubscriber implements EventSubscriberInterface {
   /**
    * Hook request event handler.
    *
-   * @param \Drupal\eventer\Event\HookEvent $event
+   * @param HookEvent $event
    *   Hook event.
    */
   public function execute(HookEvent $event) {
@@ -40,7 +40,7 @@ class LegacyHookSubscriber implements EventSubscriberInterface {
   /**
    * Alter request event handler.
    *
-   * @param \Drupal\eventer\Event\AlterEvent $event
+   * @param AlterEvent $event
    *   Alter event.
    */
   public function alter(AlterEvent $event) {
diff --git a/src/Plugin/Block/ListEventsBlock.php b/src/Plugin/Block/ListEventsBlock.php
index 5330801..4179257 100644
--- a/src/Plugin/Block/ListEventsBlock.php
+++ b/src/Plugin/Block/ListEventsBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\eventer\Plugin\Block;
 
+use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Drupal\Core\PageCache\ResponsePolicy\KillSwitch;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
@@ -23,14 +25,14 @@ class ListEventsBlock extends BlockBase implements ContainerFactoryPluginInterfa
   /**
    * Symfony\Component\EventDispatcher\EventDispatcherInterface definition.
    *
-   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
+   * @var EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
    * The kill switch.
    *
-   * @var \Drupal\Core\PageCache\ResponsePolicy\KillSwitch
+   * @var KillSwitch
    */
   protected $killSwitch;
 
